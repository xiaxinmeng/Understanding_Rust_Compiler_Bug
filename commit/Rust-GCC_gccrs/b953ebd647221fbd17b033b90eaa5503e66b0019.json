{"sha": "b953ebd647221fbd17b033b90eaa5503e66b0019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1M2ViZDY0NzIyMWZiZDE3YjAzM2I5MGVhYTU1MDNlNjZiMDAxOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-05-21T16:39:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-05-21T16:39:38Z"}, "message": "fold-const.c (fold, [...]): Use fold_convert instead of convert.\n\n\n\t* fold-const.c (fold, fold_relational_hi_lo,\n\tnondestructive_fold_binary_to_constant,\n\tfold_read_from_constant_string): Use fold_convert instead of convert.\n\t* builtins.c (simplify_builtin, simplify_builtin_strstr,\n\tsimplify_builtin_strchr, simplify_builtin_strrchr,\n\tsimplify_builtin_strpbrk): Use fold_convert instead of convert.\n\nFrom-SVN: r82102", "tree": {"sha": "af2a13e6a162140aa8964ae9fc1f946d529774e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af2a13e6a162140aa8964ae9fc1f946d529774e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b953ebd647221fbd17b033b90eaa5503e66b0019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b953ebd647221fbd17b033b90eaa5503e66b0019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b953ebd647221fbd17b033b90eaa5503e66b0019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b953ebd647221fbd17b033b90eaa5503e66b0019/comments", "author": null, "committer": null, "parents": [{"sha": "17abdabcf3d4261dbebcc88cfaa1810b20811fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17abdabcf3d4261dbebcc88cfaa1810b20811fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17abdabcf3d4261dbebcc88cfaa1810b20811fe9"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "943e5dee7b3080084c92500b077630d97cc95f51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b953ebd647221fbd17b033b90eaa5503e66b0019", "patch": "@@ -1,3 +1,12 @@\n+2004-05-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold, fold_relational_hi_lo,\n+\tnondestructive_fold_binary_to_constant,\n+\tfold_read_from_constant_string): Use fold_convert instead of convert.\n+\t* builtins.c (simplify_builtin, simplify_builtin_strstr,\n+\tsimplify_builtin_strchr, simplify_builtin_strrchr,\n+\tsimplify_builtin_strpbrk): Use fold_convert instead of convert.\n+\n 2004-05-21  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-flow-inline.h (num_immediate_uses): Don't abort if DF"}, {"sha": "0357ca9db3f1bf57c908c8670e4a484016b304ae", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b953ebd647221fbd17b033b90eaa5503e66b0019", "patch": "@@ -8020,7 +8020,7 @@ simplify_builtin (tree exp, int ignore)\n     }\n \n   if (val)\n-    val = convert (TREE_TYPE (exp), val);\n+    val = fold_convert (TREE_TYPE (exp), val);\n   return val;\n }\n \n@@ -8061,13 +8061,13 @@ simplify_builtin_strstr (tree arglist)\n \t{\n \t  const char *r = strstr (p1, p2);\n \n-\t  /* Return an offset into the constant string argument.  */\n \t  if (r == NULL)\n-\t    return integer_zero_node;\n-\t  else\n-\t    return fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t\ts1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t     ssize_int (r - p1))));\n+\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\n+\t  /* Return an offset into the constant string argument.  */\n+\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\t ssize_int (r - p1))));\n \t}\n \n       if (p2[0] == '\\0')\n@@ -8130,12 +8130,12 @@ simplify_builtin_strchr (tree arglist)\n \t  r = strchr (p1, c);\n \n \t  if (r == NULL)\n-\t    return integer_zero_node;\n+\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t      s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t   ssize_int (r - p1))));\n+\t\t\t      s1, fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\tssize_int (r - p1))));\n \t}\n \n       /* FIXME: Should use here strchrM optab so that ports can optimize\n@@ -8187,12 +8187,12 @@ simplify_builtin_strrchr (tree arglist)\n \t  r = strrchr (p1, c);\n \n \t  if (r == NULL)\n-\t    return integer_zero_node;\n+\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t      s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t   ssize_int (r - p1))));\n+\t\t\t      s1, fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\tssize_int (r - p1))));\n \t}\n \n       if (! integer_zerop (s2))\n@@ -8245,12 +8245,12 @@ simplify_builtin_strpbrk (tree arglist)\n \t  const char *r = strpbrk (p1, p2);\n \n \t  if (r == NULL)\n-\t    return integer_zero_node;\n+\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t      s1, convert (TREE_TYPE (s1),\n-\t\t\t\t\t   ssize_int (r - p1))));\n+\t\t\t      s1, fold_convert (TREE_TYPE (s1),\n+\t\t\t\t\t\tssize_int (r - p1))));\n \t}\n \n       if (p2[0] == '\\0')"}, {"sha": "2c89c5b3d8d5b1a44e38cb6533b617395295ea04", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b953ebd647221fbd17b033b90eaa5503e66b0019/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b953ebd647221fbd17b033b90eaa5503e66b0019", "patch": "@@ -5831,7 +5831,7 @@ fold (tree expr)\n \t  tree s1 = TYPE_SIZE (tt1);\n \n \t  if (s0 && s1 && operand_equal_p (s0, s1, OEP_ONLY_CONST))\n-\t    return build2 (TREE_CODE (arg0), t0, convert (t0, arg00),\n+\t    return build2 (TREE_CODE (arg0), t0, fold_convert (t0, arg00),\n \t\t\t   TREE_OPERAND (arg0, 1));\n \t}\n \n@@ -9147,14 +9147,14 @@ fold_relational_hi_lo (enum tree_code *code_p, const tree type, tree *op0_p,\n \t  {\n \t  case GT_EXPR:\n \t    return omit_one_operand (type,\n-\t\t\t\t     convert (type, integer_zero_node),\n+\t\t\t\t     fold_convert (type, integer_zero_node),\n \t\t\t\t     op0);\n \t  case GE_EXPR:\n \t    *code_p = EQ_EXPR;\n \t    break;\n \t  case LE_EXPR:\n \t    return omit_one_operand (type,\n-\t\t\t\t     convert (type, integer_one_node),\n+\t\t\t\t     fold_convert (type, integer_one_node),\n \t\t\t\t     op0);\n \t  case LT_EXPR:\n \t    *code_p = NE_EXPR;\n@@ -9187,15 +9187,15 @@ fold_relational_hi_lo (enum tree_code *code_p, const tree type, tree *op0_p,\n \t  {\n \t  case LT_EXPR:\n \t    return omit_one_operand (type,\n-\t\t\t\t     convert (type, integer_zero_node),\n+\t\t\t\t     fold_convert (type, integer_zero_node),\n \t\t\t\t     op0);\n \t  case LE_EXPR:\n \t    *code_p = EQ_EXPR;\n \t    break;\n \n \t  case GE_EXPR:\n \t    return omit_one_operand (type,\n-\t\t\t\t     convert (type, integer_one_node),\n+\t\t\t\t     fold_convert (type, integer_one_node),\n \t\t\t\t     op0);\n \t  case GT_EXPR:\n \t    *code_p = NE_EXPR;\n@@ -9236,8 +9236,8 @@ fold_relational_hi_lo (enum tree_code *code_p, const tree type, tree *op0_p,\n \n \t      exp = build2 (code == LE_EXPR ? GE_EXPR: LT_EXPR,\n \t\t\t    type,\n-\t\t\t    convert (st0, op0),\n-\t\t\t    convert (st1, integer_zero_node));\n+\t\t\t    fold_convert (st0, op0),\n+\t\t\t    fold_convert (st1, integer_zero_node));\n \n \t      retval\n \t\t= nondestructive_fold_binary_to_constant (TREE_CODE (exp),\n@@ -9341,7 +9341,7 @@ nondestructive_fold_binary_to_constant (enum tree_code code, tree type,\n \t  /* The return value should always have the same type as\n \t     the original expression.  */\n \t  if (TREE_TYPE (tem) != type)\n-\t    tem = convert (type, tem);\n+\t    tem = fold_convert (type, tem);\n \n \t  return tem;\n \t}\n@@ -9354,7 +9354,7 @@ nondestructive_fold_binary_to_constant (enum tree_code code, tree type,\n          Also note that operand_equal_p is always false if an\n          operand is volatile.  */\n       if (! FLOAT_TYPE_P (type) && operand_equal_p (op0, op1, 0))\n-\treturn convert (type, integer_zero_node);\n+\treturn fold_convert (type, integer_zero_node);\n \n       goto binary;\n \n@@ -9670,7 +9670,7 @@ fold_read_from_constant_string (tree exp)\n \t{\n \t  tree domain = TYPE_DOMAIN (TREE_TYPE (exp1));\n \t  tree low_bound = domain ? TYPE_MIN_VALUE (domain) : integer_zero_node;\n-\t  index = convert (sizetype, TREE_OPERAND (exp, 1));\n+\t  index = fold_convert (sizetype, TREE_OPERAND (exp, 1));\n \t  \n \t  /* Optimize the special-case of a zero lower bound.\n \n@@ -9680,7 +9680,7 @@ fold_read_from_constant_string (tree exp)\n \t     +(INDEX-(unsigned char)1)) becomes ((ARRAY+(-(unsigned char)1))\n \t     +INDEX), which becomes (ARRAY+255+INDEX).  Opps!)  */\n \t  if (! integer_zerop (low_bound))\n-\t    index = size_diffop (index, convert (sizetype, low_bound));\n+\t    index = size_diffop (index, fold_convert (sizetype, low_bound));\n \n \t  string = exp1;\n \t}"}]}