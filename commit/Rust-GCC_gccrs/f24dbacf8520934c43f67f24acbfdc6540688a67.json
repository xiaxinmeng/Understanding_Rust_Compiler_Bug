{"sha": "f24dbacf8520934c43f67f24acbfdc6540688a67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0ZGJhY2Y4NTIwOTM0YzQzZjY3ZjI0YWNiZmRjNjU0MDY4OGE2Nw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-11-27T08:30:26Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-11-27T08:30:26Z"}, "message": "Vector.java (ensureCapacity): Don't increment modCount.\n\n2000-11-27  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/util/Vector.java (ensureCapacity): Don't increment modCount.\n\t(addElement): Don't increment elementCount twice. Doh.\n\t* java/util/ArrayList.java (add): Only call ensureCapacity if the\n\tarray needs to be expanded.\n\t(addAll): Ditto.\n\t* java/util/Collections.java (UnmodifiableCollection): Implement\n\ttoString().\n\t(UnmodifiableList): Throw UnsupportedOperationException from\n\tmodification methods. Set `l' from the one-parameter constructor.\n\t(UnmodifiableMap): Implement toString().\n\t(SynchronizedCollection): Ditto.\n\t(SynchronizedList): Set `l' from the one-parameter constructor.\n\t(SynchronizedSortedSet): Set `ss' from the one-parameter constructor.\n\t(SynchronizedMap): Implement toString().\n\nFrom-SVN: r37785", "tree": {"sha": "b0e987ae6c453d2859183427b6ec7482250e8054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0e987ae6c453d2859183427b6ec7482250e8054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24dbacf8520934c43f67f24acbfdc6540688a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24dbacf8520934c43f67f24acbfdc6540688a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24dbacf8520934c43f67f24acbfdc6540688a67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24dbacf8520934c43f67f24acbfdc6540688a67/comments", "author": null, "committer": null, "parents": [{"sha": "27e2564ac886bee1a7552df98dcab17a4bf06e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e2564ac886bee1a7552df98dcab17a4bf06e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e2564ac886bee1a7552df98dcab17a4bf06e26"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "0b5ed5a0317839ee74af72c6a04571bda93aa967", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f24dbacf8520934c43f67f24acbfdc6540688a67", "patch": "@@ -1,3 +1,20 @@\n+2000-11-27  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/util/Vector.java (ensureCapacity): Don't increment modCount.\n+\t(addElement): Don't increment elementCount twice. Doh.\n+\t* java/util/ArrayList.java (add): Only call ensureCapacity if the\n+\tarray needs to be expanded.\n+\t(addAll): Ditto.\n+\t* java/util/Collections.java (UnmodifiableCollection): Implement\n+\ttoString().\n+\t(UnmodifiableList): Throw UnsupportedOperationException from \n+\tmodification methods. Set `l' from the one-parameter constructor.\n+\t(UnmodifiableMap): Implement toString().\n+\t(SynchronizedCollection): Ditto.\n+\t(SynchronizedList): Set `l' from the one-parameter constructor.\n+\t(SynchronizedSortedSet): Set `ss' from the one-parameter constructor.\n+\t(SynchronizedMap): Implement toString().\n+\n Sun Nov 26 22:35:53 2000  Anthony Green  <green@redhat.com>\n \n \t* javax/naming/InitialContext.java (rebind): Implement."}, {"sha": "d440cdaec525a8fbc1badd59997d6b2e559b4738", "filename": "libjava/java/util/ArrayList.java", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FArrayList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FArrayList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrayList.java?ref=f24dbacf8520934c43f67f24acbfdc6540688a67", "patch": "@@ -43,7 +43,7 @@\n  * to or removing from the end of a list, checking the size, &c.\n  *\n  * @author        Jon A. Zeppieri\n- * @version       $Id: ArrayList.java,v 1.3 2000/11/02 10:08:03 bryce Exp $\n+ * @version       $Id: ArrayList.java,v 1.4 2000/11/22 11:59:59 bryce Exp $\n  * @see           java.util.AbstractList\n  * @see           java.util.List\n  */\n@@ -127,7 +127,8 @@ public void ensureCapacity(int minCapacity)\n   public boolean add(Object e)\n   {\n     modCount++;\n-    ensureCapacity(size + 1);\n+    if (size == data.length)\n+      ensureCapacity(size + 1);\n     data[size++] = e;\n     return true;\n   }\n@@ -204,7 +205,8 @@ public void add(int index, Object e)\n     if (index < 0 || index > size)\n       throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size:\" + \n                                           size);\n-    ensureCapacity(size + 1);\n+    if (size == data.length)\n+      ensureCapacity(size + 1);\n     if (index != size)\n       System.arraycopy(data, index, data, index + 1, size - index);    \n     data[index] = e;\n@@ -239,7 +241,8 @@ public boolean addAll(int index, Collection c)\n     Iterator itr = c.iterator();\n     int csize = c.size();\n \n-    ensureCapacity(size + csize);\n+    if (csize + size > data.length)\n+      ensureCapacity(size + csize);\n     int end = index + csize;\n     if (size > 0 && index != size)\n       System.arraycopy(data, index, data, end, csize);"}, {"sha": "af90b459c3241010e56e8dd5131416dca30f8c85", "filename": "libjava/java/util/Collections.java", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FCollections.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FCollections.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections.java?ref=f24dbacf8520934c43f67f24acbfdc6540688a67", "patch": "@@ -43,7 +43,6 @@\n  */\n public class Collections\n {\n-\n   /**\n    * This class is non-instantiable.\n    */\n@@ -58,7 +57,6 @@ private Collections()\n    */\n   public static final Set EMPTY_SET = new AbstractSet()\n   {\n-\n     public int size()\n     {\n       return 0;\n@@ -97,7 +95,6 @@ public Iterator iterator()\n    */\n   public static final List EMPTY_LIST = new AbstractList()\n   {\n-\n     public int size()\n     {\n       return 0;\n@@ -116,7 +113,6 @@ public Object get(int index)\n    */\n   public static final Map EMPTY_MAP = new AbstractMap()\n   {\n-\n     public Set entrySet()\n     {\n       return EMPTY_SET;\n@@ -147,7 +143,6 @@ private static int compare(Object o1, Object o2, Comparator c)\n    */\n   private static int search(List l, Object key, final Comparator c)\n   {\n-\n     int pos = 0;\n \n     // We use a linear search using an iterator if we can guess that the list\n@@ -437,7 +432,6 @@ public static Object min(Collection c, Comparator order)\n   // stated - I just would be amazed if it isn't...\n   public static List nCopies(final int n, final Object o)\n   {\n-\n     // Check for insane arguments\n     if (n < 0)\n       {\n@@ -552,7 +546,6 @@ public static void shuffle(List l, Random r)\n     // Iterate backwards over l\n     while (i.hasPrevious())\n       {\n-\n \t// Obtain a random position to swap with. nextIndex is used so that the\n \t// range of the random number includes the current position.\n \tint swap = r.nextInt(i.nextIndex());\n@@ -579,10 +572,8 @@ public static void shuffle(List l, Random r)\n   // It's not serializable because the spec is broken.\n   public static Set singleton(final Object o)\n   {\n-\n     return new AbstractSet()\n     {\n-\n       public int size()\n       {\n \treturn 1;\n@@ -592,7 +583,6 @@ public Iterator iterator()\n       {\n \treturn new Iterator()\n \t{\n-\n \t  private boolean hasNext = true;\n \n \t  public boolean hasNext()\n@@ -632,10 +622,8 @@ public void remove()\n   // It's not serializable because the spec is broken.\n   public static List singletonList(final Object o)\n   {\n-\n     return new AbstractList()\n     {\n-\n       public int size()\n       {\n \treturn 1;\n@@ -666,7 +654,6 @@ public Object get(int index)\n   // It's not serializable because the spec is broken.\n   public static Map singletonMap(final Object key, final Object value)\n   {\n-\n     return new AbstractMap()\n     {\n       public Set entrySet()\n@@ -811,7 +798,6 @@ public void remove()\n   private static class UnmodifiableListIterator extends UnmodifiableIterator\n     implements ListIterator\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private ListIterator li;\n@@ -910,12 +896,15 @@ public Object[] toArray(Object[]a)\n     {\n       return c.toArray(a);\n     }\n+    public String toString()\n+    {\n+      return c.toString();\n+    }\n   }\n \n   private static class UnmodifiableList extends UnmodifiableCollection\n     implements List\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     List l;\n@@ -928,11 +917,11 @@ public UnmodifiableList(List l)\n \n     public void add(int index, Object o)\n     {\n-      l.add(index, o);\n+      throw new UnsupportedOperationException();\n     }\n     public boolean addAll(int index, Collection c)\n     {\n-      return l.addAll(index, c);\n+      throw new UnsupportedOperationException();\n     }\n     public boolean equals(Object o)\n     {\n@@ -964,15 +953,11 @@ public ListIterator listIterator(int index)\n     }\n     public Object remove(int index)\n     {\n-      return l.remove(index);\n-    }\n-    public boolean remove(Object o)\n-    {\n-      return l.remove(o);\n+      throw new UnsupportedOperationException();\n     }\n     public Object set(int index, Object o)\n     {\n-      return l.set(index, o);\n+      throw new UnsupportedOperationException();\n     }\n     public List subList(int fromIndex, int toIndex)\n     {\n@@ -1000,7 +985,6 @@ public int hashCode()\n   private static class UnmodifiableSortedSet extends UnmodifiableSet\n     implements SortedSet\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private SortedSet ss;\n@@ -1039,7 +1023,6 @@ public SortedSet subSet(Object fromElement, Object toElement)\n \n   private static class UnmodifiableMap implements Map, Serializable\n   {\n-\n     Map m;\n \n     public UnmodifiableMap(Map m)\n@@ -1143,12 +1126,15 @@ public Collection values()\n     {\n       return new UnmodifiableCollection(m.values());\n     }\n+    public String toString()\n+    {\n+      return m.toString();\n+    }\n   }\n \n   private static class UnmodifiableSortedMap extends UnmodifiableMap\n     implements SortedMap\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private SortedMap sm;\n@@ -1226,7 +1212,6 @@ public void remove()\n   private static class SynchronizedListIterator extends SynchronizedIterator\n     implements ListIterator\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private ListIterator li;\n@@ -1389,12 +1374,18 @@ public Object[] toArray(Object[]a)\n \treturn c.toArray(a);\n       }\n     }\n+    public String toString()\n+    {\n+      synchronized(sync)\n+      {\n+\treturn c.toString();\n+      }\n+    }\n   }\n \n   private static class SynchronizedList extends SynchronizedCollection\n     implements List\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     List l;\n@@ -1407,6 +1398,7 @@ public SynchronizedList(Object sync, List l)\n     public SynchronizedList(List l)\n     {\n       super(l);\n+      this.l = l;\n     }\n \n     public void add(int index, Object o)\n@@ -1505,7 +1497,6 @@ public List subList(int fromIndex, int toIndex)\n   private static class SynchronizedSet extends SynchronizedCollection\n     implements Set\n   {\n-\n     public SynchronizedSet(Object sync, Set s)\n     {\n       super(sync, s);\n@@ -1534,7 +1525,6 @@ public int hashCode()\n   private static class SynchronizedSortedSet extends SynchronizedSet\n     implements SortedSet\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private SortedSet ss;\n@@ -1547,6 +1537,7 @@ public SynchronizedSortedSet(Object sync, SortedSet ss)\n     public SynchronizedSortedSet(SortedSet ss)\n     {\n       super(ss);\n+      this.ss = ss;\n     }\n \n     public Comparator comparator()\n@@ -1596,7 +1587,6 @@ public SortedSet subSet(Object fromElement, Object toElement)\n \n   private static class SynchronizedMap implements Map, Serializable\n   {\n-\n     Object sync;\n     Map m;\n \n@@ -1634,7 +1624,7 @@ public boolean containsValue(Object value)\n     }\n \n     // This is one of the ickiest cases of nesting I've ever seen. It just\n-    // means \"return an SynchronizedSet, except that the iterator() method\n+    // means \"return a SynchronizedSet, except that the iterator() method\n     // returns an SynchronizedIterator whos next() method returns a\n     // synchronized wrapper around its normal return value\".\n     public Set entrySet()\n@@ -1772,12 +1762,18 @@ public Collection values()\n \treturn new SynchronizedCollection(sync, m.values());\n       }\n     }\n+    public String toString()\n+    {\n+      synchronized(sync)\n+      {\n+\treturn m.toString();\n+      }\n+    }\n   }\n \n   private static class SynchronizedSortedMap extends SynchronizedMap\n     implements SortedMap\n   {\n-\n     // This is stored both here and in the superclass, to avoid excessive\n     // casting.\n     private SortedMap sm;\n@@ -1790,6 +1786,7 @@ public SynchronizedSortedMap(Object sync, SortedMap sm)\n     public SynchronizedSortedMap(SortedMap sm)\n     {\n       super(sm);\n+      this.sm = sm;\n     }\n \n     public Comparator comparator()"}, {"sha": "06d2ebefe023c59c81b879dff4be6a0e633f21f4", "filename": "libjava/java/util/Vector.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FVector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24dbacf8520934c43f67f24acbfdc6540688a67/libjava%2Fjava%2Futil%2FVector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FVector.java?ref=f24dbacf8520934c43f67f24acbfdc6540688a67", "patch": "@@ -178,7 +178,6 @@ public synchronized void trimToSize()\n    */\n   public synchronized void ensureCapacity(int minCapacity)\n   {\n-    modCount++;\n     if (elementData.length >= minCapacity)\n       return;\n \n@@ -459,7 +458,7 @@ public void insertElementAt(Object obj, int index)\n   public synchronized void addElement(Object obj)\n   {\n     if (elementCount == elementData.length)\n-      ensureCapacity(++elementCount);\n+      ensureCapacity(elementCount + 1);\n     modCount++;\n     elementData[elementCount++] = obj;\n   }"}]}