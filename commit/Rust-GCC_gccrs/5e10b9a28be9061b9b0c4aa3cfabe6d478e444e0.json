{"sha": "5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxMGI5YTI4YmU5MDYxYjliMGM0YWEzY2ZhYmU2ZDQ3OGU0NDRlMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-03T13:30:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-03T19:25:39Z"}, "message": "analyzer: fix ICE merging models containing label pointers (PR 93546)\n\nPR analyzer/93546 reports an ICE within region_model::add_region_for_type\nwhen merging two region_models each containing a label pointer.  The\ntwo labels are stored as pointers to symbolic_regions, but these regions\nwere created with NULL type, leading to an assertion failure when a\nmerged copy is created.\n\nThe labels themselves have void (but not NULL) type.\n\nThis patch updates make_region_for_type to use the type of the decl when\ncreating such regions, rather than implicitly setting the region's type\nto NULL, fixing the ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93546\n\t* region-model.cc (region_model::on_call_pre): Update for new\n\tparam of symbolic_region ctor.\n\t(region_model::deref_rvalue): Likewise.\n\t(region_model::add_new_malloc_region): Likewise.\n\t(make_region_for_type): Likewise, preserving type.\n\t* region-model.h (symbolic_region::symbolic_region): Add \"type\"\n\tparam and pass it to base class ctor.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93546\n\t* gcc.dg/analyzer/pr93546.c: New test.", "tree": {"sha": "dd74ee22c20285a36ad3bfc616203215aecf9563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd74ee22c20285a36ad3bfc616203215aecf9563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "287ccd3bd6b92f11ec90c52ffccb764aacfadb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287ccd3bd6b92f11ec90c52ffccb764aacfadb89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287ccd3bd6b92f11ec90c52ffccb764aacfadb89"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "9229bb1e74a6eab5aee7ddfe314a2a4a3f62cb4e", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "patch": "@@ -1,3 +1,14 @@\n+2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93546\n+\t* region-model.cc (region_model::on_call_pre): Update for new\n+\tparam of symbolic_region ctor.\n+\t(region_model::deref_rvalue): Likewise.\n+\t(region_model::add_new_malloc_region): Likewise.\n+\t(make_region_for_type): Likewise, preserving type.\n+\t* region-model.h (symbolic_region::symbolic_region): Add \"type\"\n+\tparam and pass it to base class ctor.\n+\n 2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93547"}, {"sha": "38cf3b93b28c29d06d8535443a38bc0fe95bfbe1", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "patch": "@@ -4163,7 +4163,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \t{\n \t  region_id frame_rid = get_current_frame_id ();\n \t  region_id new_rid\n-\t    = add_region (new symbolic_region (frame_rid, false));\n+\t    = add_region (new symbolic_region (frame_rid, NULL_TREE, false));\n \t  if (!lhs_rid.null_p ())\n \t    {\n \t      svalue_id ptr_sid\n@@ -5113,7 +5113,7 @@ region_model::deref_rvalue (svalue_id ptr_sid, region_model_context *ctxt)\n \t   We don't know if it on the heap, stack, or a global,\n \t   so use the root region as parent.  */\n \tregion_id new_rid\n-\t  = add_region (new symbolic_region (m_root_rid, false));\n+\t  = add_region (new symbolic_region (m_root_rid, NULL_TREE, false));\n \n \t/* We need to write the region back into the pointer,\n \t   or we'll get a new, different region each time.\n@@ -5455,7 +5455,7 @@ region_model::add_new_malloc_region ()\n {\n   region_id heap_rid\n     = get_root_region ()->ensure_heap_region (this);\n-  return add_region (new symbolic_region (heap_rid, true));\n+  return add_region (new symbolic_region (heap_rid, NULL_TREE, true));\n }\n \n /* Attempt to return a tree that represents SID, or return NULL_TREE.\n@@ -6006,7 +6006,7 @@ make_region_for_type (region_id parent_rid, tree type)\n \n   /* If we have a void *, make a new symbolic region.  */\n   if (VOID_TYPE_P (type))\n-    return new symbolic_region (parent_rid, false);\n+    return new symbolic_region (parent_rid, type, false);\n \n   gcc_unreachable ();\n }"}, {"sha": "7768e45134f557a694d557b8855ac18cec59a604", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "patch": "@@ -1606,8 +1606,8 @@ namespace ana {\n class symbolic_region : public region\n {\n public:\n-  symbolic_region (region_id parent_rid, bool possibly_null)\n-  : region (parent_rid, svalue_id::null (), NULL_TREE),\n+  symbolic_region (region_id parent_rid, tree type, bool possibly_null)\n+  : region (parent_rid, svalue_id::null (), type),\n     m_possibly_null (possibly_null)\n   {}\n   symbolic_region (const symbolic_region &other);"}, {"sha": "ca5dda58e7b04d7a2778deba2b02e8f0a73ec8e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "patch": "@@ -1,3 +1,8 @@\n+2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93546\n+\t* gcc.dg/analyzer/pr93546.c: New test.\n+\n 2020-02-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93547"}, {"sha": "432a6433be50586e1bd80700f37986624a3fb72d", "filename": "gcc/testsuite/gcc.dg/analyzer/pr93546.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93546.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93546.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93546.c?ref=5e10b9a28be9061b9b0c4aa3cfabe6d478e444e0", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+void\n+ch (int x1)\n+{\n+  ({ bx: &&bx; });\n+  while (x1 == 0)\n+    {\n+    }\n+}"}]}