{"sha": "703cf2116b305e872abdc5728e6034af629817bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzY2YyMTE2YjMwNWU4NzJhYmRjNTcyOGU2MDM0YWY2Mjk4MTdiZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-08-05T16:36:05Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-08-05T16:36:05Z"}, "message": "Add missing REG_INC notes.\n\nFrom-SVN: r44646", "tree": {"sha": "95b1d1bd5645800bc70f898bec111d9fceba0965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b1d1bd5645800bc70f898bec111d9fceba0965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703cf2116b305e872abdc5728e6034af629817bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703cf2116b305e872abdc5728e6034af629817bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703cf2116b305e872abdc5728e6034af629817bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703cf2116b305e872abdc5728e6034af629817bf/comments", "author": null, "committer": null, "parents": [{"sha": "ab59db3c8087ec60f62315b34661dde7524e5d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab59db3c8087ec60f62315b34661dde7524e5d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab59db3c8087ec60f62315b34661dde7524e5d17"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "5cd75a5dad4a12e9b55895c48f32fd8ff25c9828", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703cf2116b305e872abdc5728e6034af629817bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703cf2116b305e872abdc5728e6034af629817bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=703cf2116b305e872abdc5728e6034af629817bf", "patch": "@@ -6,6 +6,12 @@\n \t* alias.c (rtx_equal_for_memref_p): VALUEs are only identical\n \tif their CSELIB_VAL_PTRs are.\n \n+\t* config/ia64/ia64.c (struct spill_fill_data): New member prev_insn.\n+\t(setup_spill_pointers): Initialize it.\n+\t(spill_restore_mem): Set it.\n+\t(do_spill, do_restore): Use it to add REG_INC note.\n+\t* config/ia64/ia64.md (movti_internal): Add REG_INC notes as needed.\n+\n 2001-08-04  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/sh/sh.c (sh_asm_named_section): Fix typo in align"}, {"sha": "0b516138fc4edd27360b1999fb4a57c2faf43bdd", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703cf2116b305e872abdc5728e6034af629817bf/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703cf2116b305e872abdc5728e6034af629817bf/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=703cf2116b305e872abdc5728e6034af629817bf", "patch": "@@ -1621,6 +1621,7 @@ struct spill_fill_data\n   rtx init_reg[2];\t\t/* initial base register */\n   rtx iter_reg[2];\t\t/* the iterator registers */\n   rtx *prev_addr[2];\t\t/* address of last memory use */\n+  rtx prev_insn[2];\t\t/* the insn corresponding to prev_addr */\n   HOST_WIDE_INT prev_off[2];\t/* last offset */\n   int n_iter;\t\t\t/* number of iterators in use */\n   int next_iter;\t\t/* next iterator to use */\n@@ -1642,6 +1643,8 @@ setup_spill_pointers (n_spills, init_reg, cfa_off)\n   spill_fill_data.init_reg[1] = init_reg;\n   spill_fill_data.prev_addr[0] = NULL;\n   spill_fill_data.prev_addr[1] = NULL;\n+  spill_fill_data.prev_insn[0] = NULL;\n+  spill_fill_data.prev_insn[1] = NULL;\n   spill_fill_data.prev_off[0] = cfa_off;\n   spill_fill_data.prev_off[1] = cfa_off;\n   spill_fill_data.next_iter = 0;\n@@ -1675,11 +1678,16 @@ spill_restore_mem (reg, cfa_off)\n   if (spill_fill_data.prev_addr[iter])\n     {\n       if (CONST_OK_FOR_N (disp))\n-\t*spill_fill_data.prev_addr[iter]\n-\t  = gen_rtx_POST_MODIFY (DImode, spill_fill_data.iter_reg[iter],\n-\t\t\t\t gen_rtx_PLUS (DImode,\n-\t\t\t\t\t       spill_fill_data.iter_reg[iter],\n-\t\t\t\t\t       disp_rtx));\n+\t{\n+\t  *spill_fill_data.prev_addr[iter]\n+\t    = gen_rtx_POST_MODIFY (DImode, spill_fill_data.iter_reg[iter],\n+\t\t\t\t   gen_rtx_PLUS (DImode,\n+\t\t\t\t\t\t spill_fill_data.iter_reg[iter],\n+\t\t\t\t\t\t disp_rtx));\n+\t  REG_NOTES (spill_fill_data.prev_insn[iter])\n+\t    = gen_rtx_EXPR_LIST (REG_INC, spill_fill_data.iter_reg[iter],\n+\t\t\t\t REG_NOTES (spill_fill_data.prev_insn[iter]));\n+\t}\n       else\n \t{\n \t  /* ??? Could use register post_modify for loads.  */\n@@ -1769,10 +1777,12 @@ do_spill (move_fn, reg, cfa_off, frame_reg)\n      rtx reg, frame_reg;\n      HOST_WIDE_INT cfa_off;\n {\n+  int iter = spill_fill_data.next_iter;\n   rtx mem, insn;\n \n   mem = spill_restore_mem (reg, cfa_off);\n   insn = emit_insn ((*move_fn) (mem, reg, GEN_INT (cfa_off)));\n+  spill_fill_data.prev_insn[iter] = insn;\n \n   if (frame_reg)\n     {\n@@ -1812,8 +1822,12 @@ do_restore (move_fn, reg, cfa_off)\n      rtx reg;\n      HOST_WIDE_INT cfa_off;\n {\n-  emit_insn ((*move_fn) (reg, spill_restore_mem (reg, cfa_off),\n-\t\t\t GEN_INT (cfa_off)));\n+  int iter = spill_fill_data.next_iter;\n+  rtx insn;\n+\n+  insn = emit_insn ((*move_fn) (reg, spill_restore_mem (reg, cfa_off),\n+\t\t\t\tGEN_INT (cfa_off)));\n+  spill_fill_data.prev_insn[iter] = insn;\n }\n \n /* Wrapper functions that discards the CONST_INT spill offset.  These"}, {"sha": "f40cc404229b916086b6711a614239f2ef573542", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703cf2116b305e872abdc5728e6034af629817bf/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703cf2116b305e872abdc5728e6034af629817bf/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=703cf2116b305e872abdc5728e6034af629817bf", "patch": "@@ -532,7 +532,7 @@\n   [(const_int 0)]\n   \"\n {\n-  rtx adj1, adj2, in[2], out[2];\n+  rtx adj1, adj2, in[2], out[2], insn;\n   int first;\n \n   adj1 = ia64_split_timode (in, operands[1], operands[2]);\n@@ -552,8 +552,18 @@\n     emit_insn (adj1);\n   if (adj2)\n     emit_insn (adj2);\n-  emit_insn (gen_rtx_SET (VOIDmode, out[first], in[first]));\n-  emit_insn (gen_rtx_SET (VOIDmode, out[!first], in[!first]));\n+  insn = emit_insn (gen_rtx_SET (VOIDmode, out[first], in[first]));\n+  if (GET_CODE (out[first]) == MEM\n+      && GET_CODE (XEXP (out[first], 0)) == POST_MODIFY)\n+    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  XEXP (XEXP (out[first], 0), 0),\n+\t\t\t\t\t  REG_NOTES (insn));\n+  insn = emit_insn (gen_rtx_SET (VOIDmode, out[!first], in[!first]));\n+  if (GET_CODE (out[!first]) == MEM\n+      && GET_CODE (XEXP (out[!first], 0)) == POST_MODIFY)\n+    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC,\n+\t\t\t\t\t  XEXP (XEXP (out[!first], 0), 0),\n+\t\t\t\t\t  REG_NOTES (insn));\n   DONE;\n }\"\n   [(set_attr \"itanium_class\" \"unknown\")"}]}