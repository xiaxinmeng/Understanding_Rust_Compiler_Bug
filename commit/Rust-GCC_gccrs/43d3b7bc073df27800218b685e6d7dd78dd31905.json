{"sha": "43d3b7bc073df27800218b685e6d7dd78dd31905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkM2I3YmMwNzNkZjI3ODAwMjE4YjY4NWU2ZDdkZDc4ZGQzMTkwNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-06T02:46:06Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-06T21:40:54Z"}, "message": "c++: Small tweak to can_convert_eh [PR81660]\n\nWhile messing with check_handlers_1, I spotted this bug report which\ncomplains that we don't warn about the case when we have two duplicated\nhandlers of type int.  can_convert_eh implements [except.handle] and\nthat says: A handler is a match for an exception object of type E if\n - The handler is of type cv T or cv T& and E and T are the same type\n   (ignoring the top-level cv-qualifiers), or [...]\n\nbut we don't implement this bullet properly for non-class types.  The\nfix therefore seems pretty obvious.  Also change the return type to\nbool when we're only returning yes/no.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/81660\n\t* except.c (can_convert_eh): Change the return type to bool.  If\n\tthe type TO and FROM are the same, return true.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/81660\n\t* g++.dg/warn/Wexceptions3.C: New test.\n\t* g++.dg/eh/pr42859.C: Add dg-warning.\n\t* g++.dg/torture/pr81659.C: Likewise.", "tree": {"sha": "db1e020925b51515cd9ef0b7a19077aba729d19f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db1e020925b51515cd9ef0b7a19077aba729d19f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43d3b7bc073df27800218b685e6d7dd78dd31905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d3b7bc073df27800218b685e6d7dd78dd31905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d3b7bc073df27800218b685e6d7dd78dd31905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d3b7bc073df27800218b685e6d7dd78dd31905/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7987a8d29a78eb373b5e054d539e332d75e92e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7987a8d29a78eb373b5e054d539e332d75e92e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7987a8d29a78eb373b5e054d539e332d75e92e92"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "0f6c76b989230882ccac1e695dc94efdd6ebaf06", "filename": "gcc/cp/except.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=43d3b7bc073df27800218b685e6d7dd78dd31905", "patch": "@@ -41,7 +41,6 @@ static tree do_allocate_exception (tree);\n static tree wrap_cleanups_r (tree *, int *, void *);\n static int complete_ptr_ref_or_void_ptr_p (tree, tree);\n static bool is_admissible_throw_operand_or_catch_parameter (tree, bool);\n-static int can_convert_eh (tree, tree);\n \n /* Sets up all the global eh stuff that needs to be initialized at the\n    start of compilation.  */\n@@ -932,31 +931,34 @@ nothrow_libfn_p (const_tree fn)\n /* Returns nonzero if an exception of type FROM will be caught by a\n    handler for type TO, as per [except.handle].  */\n \n-static int\n+static bool\n can_convert_eh (tree to, tree from)\n {\n   to = non_reference (to);\n   from = non_reference (from);\n \n+  if (same_type_ignoring_top_level_qualifiers_p (to, from))\n+    return true;\n+\n   if (TYPE_PTR_P (to) && TYPE_PTR_P (from))\n     {\n       to = TREE_TYPE (to);\n       from = TREE_TYPE (from);\n \n       if (! at_least_as_qualified_p (to, from))\n-\treturn 0;\n+\treturn false;\n \n       if (VOID_TYPE_P (to))\n-\treturn 1;\n+\treturn true;\n \n       /* Else fall through.  */\n     }\n \n   if (CLASS_TYPE_P (to) && CLASS_TYPE_P (from)\n       && publicly_uniquely_derived_p (to, from))\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Check whether any of the handlers in I are shadowed by another handler"}, {"sha": "0de91409c833b48a41e6afb3f30eedf7b2350142", "filename": "gcc/testsuite/g++.dg/eh/pr42859.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C?ref=43d3b7bc073df27800218b685e6d7dd78dd31905", "patch": "@@ -13,7 +13,7 @@ ptw32_terminate (void)\n     catch (int)\n     {\n     }\n-    catch (int)\n+    catch (int) // { dg-warning \"will be caught by earlier handler\" }\n     {\n     }\n   }"}, {"sha": "074099be6fc7060d8d9451d0c3ce40ce99c2b63d", "filename": "gcc/testsuite/g++.dg/torture/pr81659.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81659.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81659.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81659.C?ref=43d3b7bc073df27800218b685e6d7dd78dd31905", "patch": "@@ -12,7 +12,7 @@ a (int b)\n   catch (int)\n     {\n     }\n-  catch (int)\n+  catch (int) // { dg-warning \"will be caught by earlier handler\" }\n     {\n     }\n }"}, {"sha": "97fda9dbd91fec473fdfb0b265cb0214fbe88124", "filename": "gcc/testsuite/g++.dg/warn/Wexceptions3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43d3b7bc073df27800218b685e6d7dd78dd31905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWexceptions3.C?ref=43d3b7bc073df27800218b685e6d7dd78dd31905", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/81660\n+\n+void bar (int);\n+\n+void\n+fn (int b)\n+{\n+  if (b)\n+    throw;\n+  try\n+    {\n+      bar (3);\n+    }\n+  catch (int)\n+    {\n+    }\n+  catch (int) // { dg-warning \"will be caught by earlier handler\" }\n+    {\n+    }\n+  catch (const int) // { dg-warning \"will be caught by earlier handler\" }\n+    {\n+    }\n+  catch (int &) // { dg-warning \"will be caught by earlier handler\" }\n+    {\n+    }\n+  catch (const int &) // { dg-warning \"will be caught by earlier handler\" }\n+    {\n+    }\n+}"}]}