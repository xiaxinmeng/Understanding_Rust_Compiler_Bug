{"sha": "adb5b54b28383885b4a34b95698cc302af8e0415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiNWI1NGIyODM4Mzg4NWI0YTM0Yjk1Njk4Y2MzMDJhZjhlMDQxNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-08-16T15:25:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-16T15:25:34Z"}, "message": "re PR target/46091 (missed optimization: x86 bt/btc/bts instructions)\n\n\tPR target/46091\n\t* config/i386/i386.md (*anddi_1_btr): Change predicates of\n\toperand 0 and operand 1 to nomimmediate_operand. Add \"m\" constraint.\n\tAdd ix86_binary_operator_ok to insn constraint.\n\t(*iordi_1_bts): Ditto.\n\t(*xordi_1_btc): Ditto.\n\t(*btsq): Change predicate of operand 0 to nonimmediate_operand.\n\tUpdate corresponding peephole2 pattern.\n\t(*btrq): Ditto.\n\t(*btcq): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/46091\n\t* gcc.target/i386/pr46091-1.c: Update scan-assembler-times.\n\t(testm): New test function.\n\t* gcc.target/i386/pr46091-2.c: Ditto.\n\t* gcc.target/i386/pr46091-3.c: Ditto.\n\nFrom-SVN: r251124", "tree": {"sha": "e2cb0848b3fc9721bc5224842d52079c1e140819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2cb0848b3fc9721bc5224842d52079c1e140819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb5b54b28383885b4a34b95698cc302af8e0415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb5b54b28383885b4a34b95698cc302af8e0415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb5b54b28383885b4a34b95698cc302af8e0415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb5b54b28383885b4a34b95698cc302af8e0415/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90d43c80aabfbea574ee0435b746f423a62bf3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d43c80aabfbea574ee0435b746f423a62bf3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d43c80aabfbea574ee0435b746f423a62bf3a6"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "3eff5f5ff04ae52c42bcd8b961094331bb8c1c52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -1,3 +1,16 @@\n+2017-08-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46091\n+\t* config/i386/i386.md (*anddi_1_btr): Change predicates of\n+\toperand 0 and operand 1 to nomimmediate_operand. Add \"m\" constraint.\n+\tAdd ix86_binary_operator_ok to insn constraint.\n+\t(*iordi_1_bts): Ditto.\n+\t(*xordi_1_btc): Ditto.\n+\t(*btsq): Change predicate of operand 0 to nonimmediate_operand.\n+\tUpdate corresponding peephole2 pattern.\n+\t(*btrq): Ditto.\n+\t(*btcq): Ditto.\n+\n 2017-08-16  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/81832"}, {"sha": "14688a863cf36acdee5adc260a0ffbbaae40ea5c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -8268,12 +8268,13 @@\n    (set_attr \"mode\" \"SI,DI,DI,SI\")])\n \n (define_insn_and_split \"*anddi_1_btr\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(and:DI\n-\t (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t (match_operand:DI 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_USE_BT\n+   && ix86_binary_operator_ok (AND, DImode, operands)\n    && IN_RANGE (exact_log2 (~INTVAL (operands[2])), 31, 63)\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8813,12 +8814,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn_and_split \"*iordi_1_bts\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ior:DI\n-\t (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t (match_operand:DI 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_USE_BT\n+   && ix86_binary_operator_ok (IOR, DImode, operands)\n    && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8834,12 +8836,13 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn_and_split \"*xordi_1_btc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:DI\n-\t (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n \t (match_operand:DI 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_USE_BT\n+   && ix86_binary_operator_ok (XOR, DImode, operands)\n    && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -10996,10 +10999,10 @@\n ;; Bit set / bit test instructions\n \n ;; %%% bts, btr, btc, bt.\n-;; In general these instructions are *slow* when applied to memory,\n-;; since they enforce atomic operation.  When applied to registers,\n-;; it depends on the cpu implementation.  They're never faster than\n-;; the corresponding and/ior/xor operations, so with 32-bit there's\n+;; In general these instructions are *slow* with variable operand\n+;; when applied to memory.  When applied to registers, it depends\n+;; on the cpu implementation.  They're never faster than the\n+;; corresponding and/ior/xor operations, so with 32-bit there's\n ;; no point.  But in 64-bit, we can't hold the relevant immediates\n ;; within the instruction itself, so operating on bits in the high\n ;; 32-bits of a register becomes easier.\n@@ -11009,7 +11012,7 @@\n ;; negdf respectively, so they can never be disabled entirely.\n \n (define_insn \"*btsq\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(const_int 1))\n@@ -11022,7 +11025,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btrq\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(const_int 0))\n@@ -11035,7 +11038,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btcq\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(not:DI (zero_extract:DI (match_dup 0) (const_int 1) (match_dup 1))))\n@@ -11052,7 +11055,7 @@\n (define_peephole2\n   [(match_scratch:DI 2 \"r\")\n    (parallel [(set (zero_extract:DI\n-\t\t     (match_operand:DI 0 \"register_operand\")\n+\t\t     (match_operand:DI 0 \"nonimmediate_operand\")\n \t\t     (const_int 1)\n \t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t\t   (const_int 1))\n@@ -11076,7 +11079,7 @@\n (define_peephole2\n   [(match_scratch:DI 2 \"r\")\n    (parallel [(set (zero_extract:DI\n-\t\t     (match_operand:DI 0 \"register_operand\")\n+\t\t     (match_operand:DI 0 \"nonimmediate_operand\")\n \t\t     (const_int 1)\n \t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t\t   (const_int 0))\n@@ -11100,7 +11103,7 @@\n (define_peephole2\n   [(match_scratch:DI 2 \"r\")\n    (parallel [(set (zero_extract:DI\n-\t\t     (match_operand:DI 0 \"register_operand\")\n+\t\t     (match_operand:DI 0 \"nonimmediate_operand\")\n \t\t     (const_int 1)\n \t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t      (not:DI (zero_extract:DI\n@@ -11128,7 +11131,7 @@\n \t  (zero_extract:SWI48\n \t    (match_operand:SWI48 0 \"register_operand\" \"r\")\n \t    (const_int 1)\n-\t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"r<S>\"))\n \t  (const_int 0)))]\n   \"\"\n {"}, {"sha": "2b4c63ab7123f2510f4a9c1312af81910e583ea8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -1,3 +1,11 @@\n+2017-08-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46091\n+\t* gcc.target/i386/pr46091-1.c: Update scan-assembler-times.\n+\t(testm): New test function.\n+\t* gcc.target/i386/pr46091-2.c: Ditto.\n+\t* gcc.target/i386/pr46091-3.c: Ditto.\n+\n 2017-08-16  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/81832"}, {"sha": "74685af8184a6bc84222a6679dc157e000143400", "filename": "gcc/testsuite/gcc.target/i386/pr46091-1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-1.c?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -6,4 +6,11 @@ unsigned long long test (unsigned long long a)\n   return a & ~(1ull << 55);\n }\n \n-/* { dg-final { scan-assembler \"btr\" } } */\n+extern unsigned long long m;\n+\n+void testm (void)\n+{\n+  m &= ~(1ull << 45);\n+}\n+\n+/* { dg-final { scan-assembler-times \"btr\" 2 } } */"}, {"sha": "5b34045072587588c33ad929389b8161be68e624", "filename": "gcc/testsuite/gcc.target/i386/pr46091-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-2.c?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -6,4 +6,11 @@ unsigned long long test (unsigned long long a)\n   return a | (1ull << 55);\n }\n \n-/* { dg-final { scan-assembler \"bts\" } } */\n+extern unsigned long long m;\n+\n+void testm (void)\n+{\n+  m |= (1ull << 45);\n+}\n+\n+/* { dg-final { scan-assembler-times \"bts\" 2 } } */"}, {"sha": "3c601a3c543a089200ab8b1738a6fc825dbd984f", "filename": "gcc/testsuite/gcc.target/i386/pr46091-3.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb5b54b28383885b4a34b95698cc302af8e0415/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-3.c?ref=adb5b54b28383885b4a34b95698cc302af8e0415", "patch": "@@ -6,4 +6,11 @@ unsigned long long test (unsigned long long a)\n   return a ^ (1ull << 55);\n }\n \n-/* { dg-final { scan-assembler \"btc\" } } */\n+extern unsigned long long m;\n+\n+void testm (void)\n+{\n+  m ^= (1ull << 45);\n+}\n+\n+/* { dg-final { scan-assembler-times \"btc\" 2 } } */"}]}