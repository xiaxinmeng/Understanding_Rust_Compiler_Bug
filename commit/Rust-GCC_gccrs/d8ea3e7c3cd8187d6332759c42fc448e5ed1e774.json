{"sha": "d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlYTNlN2MzY2Q4MTg3ZDYzMzI3NTljNDJmYzQ0OGU1ZWQxZTc3NA==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2017-01-20T08:37:13Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-01-20T08:37:13Z"}, "message": "Add AVX512 k-mask intrinsics.\n\ngcc/\n\t* config/i386/avx512bwintrin.h: Add k-mask registers shift intrinsics.\n\t* config/i386/avx512dqintrin.h: Ditto.\n\t* config/i386/avx512fintrin.h: Ditto.\n\t* config/i386/i386-builtin-types.def: Add new types.\n\t* gcc/config/i386/i386.c: Handle new types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_kshiftliqi)\n\t(__builtin_ia32_kshiftlihi, __builtin_ia32_kshiftlisi)\n\t(__builtin_ia32_kshiftlidi, __builtin_ia32_kshiftriqi)\n\t(__builtin_ia32_kshiftrihi, __builtin_ia32_kshiftrisi)\n\t(__builtin_ia32_kshiftridi): New.\n\t* config/i386/sse.md (k<code><mode>): Rename *k<code><mode>.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512bw-kshiftld-1.c: New test.\n\t* gcc.target/i386/avx512bw-kshiftlq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kshiftlb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kshiftlw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftrd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftrq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kshiftrb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kshiftrw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftld-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftlq-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftrd-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kshiftrq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-kshiftlb-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-kshiftrb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-kshiftlw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-kshiftrw-2.c: Ditto.\n\t* gcc.target/i386/avx-1.c: Test new intrinsics.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r244685", "tree": {"sha": "cd6caa285abfcb60bd953c49a60d94e6c2c759a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd6caa285abfcb60bd953c49a60d94e6c2c759a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/comments", "author": null, "committer": null, "parents": [{"sha": "8d67fcd84efbfc5bd5459a44c09cc82ee0e34457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67fcd84efbfc5bd5459a44c09cc82ee0e34457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d67fcd84efbfc5bd5459a44c09cc82ee0e34457"}], "stats": {"total": 445, "additions": 436, "deletions": 9}, "files": [{"sha": "1ecda9579122ac50a2c7ae5c52974fde8c497d22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -1,3 +1,17 @@\n+2017-01-20  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h: Add k-mask registers shift intrinsics.\n+\t* config/i386/avx512dqintrin.h: Ditto.\n+\t* config/i386/avx512fintrin.h: Ditto.\n+\t* config/i386/i386-builtin-types.def: Add new types.\n+\t* gcc/config/i386/i386.c: Handle new types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_kshiftliqi)\n+\t(__builtin_ia32_kshiftlihi, __builtin_ia32_kshiftlisi)\n+\t(__builtin_ia32_kshiftlidi, __builtin_ia32_kshiftriqi)\n+\t(__builtin_ia32_kshiftrihi, __builtin_ia32_kshiftrisi)\n+\t(__builtin_ia32_kshiftridi): New.\n+\t* config/i386/sse.md (k<code><mode>): Rename *k<code><mode>.\n+\n 2017-01-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/78875"}, {"sha": "e41428a2ec00408f717c455a4bdf692ad558cef3", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -2569,6 +2569,38 @@ _mm512_cmple_epi16_mask (__m512i __X, __m512i __Y)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftli_mask32 (__mmask32 __A, unsigned int __B)\n+{\n+  return (__mmask32) __builtin_ia32_kshiftlisi ((__mmask32) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftli_mask64 (__mmask64 __A, unsigned int __B)\n+{\n+  return (__mmask64) __builtin_ia32_kshiftlidi ((__mmask64) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftri_mask32 (__mmask32 __A, unsigned int __B)\n+{\n+  return (__mmask32) __builtin_ia32_kshiftrisi ((__mmask32) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftri_mask64 (__mmask64 __A, unsigned int __B)\n+{\n+  return (__mmask64) __builtin_ia32_kshiftridi ((__mmask64) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_alignr_epi8 (__m512i __A, __m512i __B, const int __N)\n@@ -2972,6 +3004,18 @@ _mm512_bsrli_epi128 (__m512i __A, const int __N)\n }\n \n #else\n+#define _kshiftli_mask32(X, Y)\t\t\t\t\t\t\t\\\n+  ((__mmask32) __builtin_ia32_kshiftlisi ((__mmask32)(X), (__mmask8)(Y)))\n+\n+#define _kshiftli_mask64(X, Y)\t\t\t\t\t\t\t\\\n+  ((__mmask64) __builtin_ia32_kshiftlidi ((__mmask64)(X), (__mmask8)(Y)))\n+\n+#define _kshiftri_mask32(X, Y)\t\t\t\t\t\t\t\\\n+  ((__mmask32) __builtin_ia32_kshiftrisi ((__mmask32)(X), (__mmask8)(Y)))\n+\n+#define _kshiftri_mask64(X, Y)\t\t\t\t\t\t\t\\\n+  ((__mmask64) __builtin_ia32_kshiftridi ((__mmask64)(X), (__mmask8)(Y)))\n+\n #define _mm512_alignr_epi8(X, Y, N)\t\t\t\t\t\t    \\\n   ((__m512i) __builtin_ia32_palignr512 ((__v8di)(__m512i)(X),\t\t\t    \\\n \t\t\t\t\t(__v8di)(__m512i)(Y),\t\t\t    \\"}, {"sha": "bcb4a321256b9a8b1d4249f2146232eebaa8fb5c", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -997,6 +997,20 @@ _mm512_maskz_cvtepu64_pd (__mmask8 __U, __m512i __A)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftli_mask8 (__mmask8 __A, unsigned int __B)\n+{\n+  return (__mmask8) __builtin_ia32_kshiftliqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftri_mask8 (__mmask8 __A, unsigned int __B)\n+{\n+  return (__mmask8) __builtin_ia32_kshiftriqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_range_pd (__m512d __A, __m512d __B, int __C)\n@@ -2008,6 +2022,12 @@ _mm512_fpclass_ps_mask (__m512 __A, const int __imm)\n }\n \n #else\n+#define _kshiftli_mask8(X, Y)\t\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_kshiftliqi ((__mmask8)(X), (__mmask8)(Y)))\n+\n+#define _kshiftri_mask8(X, Y)\t\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_kshiftriqi ((__mmask8)(X), (__mmask8)(Y)))\n+\n #define _mm_range_sd(A, B, C)\t\t\t\t\t\t\\\n   ((__m128d) __builtin_ia32_rangesd128_round ((__v2df)(__m128d)(A),\t\\\n     (__v2df)(__m128d)(B), (int)(C),\t\t\t\t\t\\"}, {"sha": "810ac23e0b505bb38186bb7f194dc5ec60374d32", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -8966,6 +8966,22 @@ _mm512_cmpneq_epu64_mask (__m512i __X, __m512i __Y)\n #define _MM_CMPINT_GT\t    0x6\n \n #ifdef __OPTIMIZE__\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftli_mask16 (__mmask16 __A, unsigned int __B)\n+{\n+  return (__mmask16) __builtin_ia32_kshiftlihi ((__mmask16) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kshiftri_mask16 (__mmask16 __A, unsigned int __B)\n+{\n+  return (__mmask16) __builtin_ia32_kshiftrihi ((__mmask16) __A,\n+\t\t\t\t\t\t(__mmask8) __B);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmp_epi64_mask (__m512i __X, __m512i __Y, const int __P)\n@@ -9120,6 +9136,12 @@ _mm_mask_cmp_round_ss_mask (__mmask8 __M, __m128 __X, __m128 __Y,\n }\n \n #else\n+#define _kshiftli_mask16(X, Y)\t\t\t\t\t\t\\\n+  ((__mmask16) __builtin_ia32_kshiftlihi ((__mmask16)(X), (__mmask8)(Y)))\n+\n+#define _kshiftri_mask16(X, Y)\t\t\t\t\t\t\\\n+  ((__mmask16) __builtin_ia32_kshiftrihi ((__mmask16)(X), (__mmask8)(Y)))\n+\n #define _mm512_cmp_epi64_mask(X, Y, P)\t\t\t\t\t\\\n   ((__mmask8) __builtin_ia32_cmpq512_mask ((__v8di)(__m512i)(X),\t\\\n \t\t\t\t\t   (__v8di)(__m512i)(Y), (int)(P),\\"}, {"sha": "2922324fe124d134c994bb1534ec496918a09b81", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -558,10 +558,9 @@ DEF_FUNCTION_TYPE (USI, UHI)\n DEF_FUNCTION_TYPE (UQI, USI)\n DEF_FUNCTION_TYPE (UHI, USI)\n \n-DEF_FUNCTION_TYPE (UQI, UQI, INT)\n-DEF_FUNCTION_TYPE (UHI, UHI, INT)\n-DEF_FUNCTION_TYPE (USI, USI, INT)\n-DEF_FUNCTION_TYPE (UDI, UDI, INT)\n+DEF_FUNCTION_TYPE (UHI, UHI, UQI)\n+DEF_FUNCTION_TYPE (USI, USI, UQI)\n+DEF_FUNCTION_TYPE (UDI, UDI, UQI)\n DEF_FUNCTION_TYPE (UQI, UQI)\n DEF_FUNCTION_TYPE (UHI, UHI)\n DEF_FUNCTION_TYPE (USI, USI)\n@@ -619,6 +618,8 @@ DEF_FUNCTION_TYPE (UQI, V4SF, V4SF, INT)\n DEF_FUNCTION_TYPE (UQI, V4SF, V4SF, INT, UQI)\n DEF_FUNCTION_TYPE (UQI, V4SF, V4SF, INT, UQI, INT)\n \n+DEF_FUNCTION_TYPE_ALIAS (UQI_FTYPE_UQI_UQI, CONST)\n+\n DEF_FUNCTION_TYPE (V16SI, UHI)\n DEF_FUNCTION_TYPE (V8DI, UQI)\n DEF_FUNCTION_TYPE (V16QI, UHI)"}, {"sha": "08ce2c98fcb6e6d7114798583a402d7e25cac1d0", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -1440,6 +1440,14 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__bu\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__builtin_ia32_ceilpd_vec_pack_sfix512\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512, (enum rtx_code) ROUND_CEIL, (int) V16SI_FTYPE_V8DF_V8DF_ROUND)\n \n /* Mask arithmetic operations */\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kashiftqi, \"__builtin_ia32_kshiftliqi\", IX86_BUILTIN_KSHIFTLI8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI_CONST)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kashifthi, \"__builtin_ia32_kshiftlihi\", IX86_BUILTIN_KSHIFTLI16, UNKNOWN, (int) UHI_FTYPE_UHI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kashiftsi, \"__builtin_ia32_kshiftlisi\", IX86_BUILTIN_KSHIFTLI32, UNKNOWN, (int) USI_FTYPE_USI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kashiftdi, \"__builtin_ia32_kshiftlidi\", IX86_BUILTIN_KSHIFTLI64, UNKNOWN, (int) UDI_FTYPE_UDI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_klshiftrtqi, \"__builtin_ia32_kshiftriqi\", IX86_BUILTIN_KSHIFTRI8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI_CONST)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_klshiftrthi, \"__builtin_ia32_kshiftrihi\", IX86_BUILTIN_KSHIFTRI16, UNKNOWN, (int) UHI_FTYPE_UHI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_klshiftrtsi, \"__builtin_ia32_kshiftrisi\", IX86_BUILTIN_KSHIFTRI32, UNKNOWN, (int) USI_FTYPE_USI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_klshiftrtdi, \"__builtin_ia32_kshiftridi\", IX86_BUILTIN_KSHIFTRI64, UNKNOWN, (int) UDI_FTYPE_UDI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kandqi, \"__builtin_ia32_kandqi\", IX86_BUILTIN_KAND8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kandhi, \"__builtin_ia32_kandhi\", IX86_BUILTIN_KAND16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kandsi, \"__builtin_ia32_kandsi\", IX86_BUILTIN_KAND32, UNKNOWN, (int) USI_FTYPE_USI_USI)"}, {"sha": "46d1c44d8fc0fa8e522b0889985a9bd02dcbff1b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -35073,10 +35073,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4DI_FTYPE_V8DI_INT:\n     case QI_FTYPE_V4SF_INT:\n     case QI_FTYPE_V2DF_INT:\n-    case UQI_FTYPE_UQI_INT:\n-    case UHI_FTYPE_UHI_INT:\n-    case USI_FTYPE_USI_INT:\n-    case UDI_FTYPE_UDI_INT:\n+    case UQI_FTYPE_UQI_UQI_CONST:\n+    case UHI_FTYPE_UHI_UQI:\n+    case USI_FTYPE_USI_UQI:\n+    case UDI_FTYPE_UDI_UQI:\n       nargs = 2;\n       nargs_constant = 1;\n       break;"}, {"sha": "bc504eb874a4de92388fd162e546a1a138272744", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -1410,7 +1410,7 @@\n ;; Mask variant shift mnemonics\n (define_code_attr mshift [(ashift \"shiftl\") (lshiftrt \"shiftr\")])\n \n-(define_insn \"*k<code><mode>\"\n+(define_insn \"k<code><mode>\"\n   [(set (match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"=k\")\n \t(any_lshift:SWI1248_AVX512BWDQ\n \t  (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")"}, {"sha": "bbfd1338a1fae95378df05215242a6a030f2712a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -1,3 +1,25 @@\n+2017-01-20  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-kshiftld-1.c: New test.\n+\t* gcc.target/i386/avx512bw-kshiftlq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kshiftlb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kshiftlw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftrd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftrq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kshiftrb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kshiftrw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftld-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftlq-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftrd-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kshiftrq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kshiftlb-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kshiftrb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-kshiftlw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-kshiftrw-2.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Test new intrinsics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2017-01-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71264"}, {"sha": "2a0df232278a3f0ec217d77e9d67a71c8a0ca80d", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -168,6 +168,8 @@\n #define __builtin_ia32_xabort(I) __builtin_ia32_xabort(0)\n \n /* avx512fintrin.h */\n+#define __builtin_ia32_kshiftlihi(A, B) __builtin_ia32_kshiftlihi(A, 8)\n+#define __builtin_ia32_kshiftrihi(A, B) __builtin_ia32_kshiftrihi(A, 8)\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n@@ -372,6 +374,10 @@\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n \n /* avx512bwintrin.h */\n+#define __builtin_ia32_kshiftlisi(A, B) __builtin_ia32_kshiftlisi(A, 8)\n+#define __builtin_ia32_kshiftlidi(A, B) __builtin_ia32_kshiftlidi(A, 8)\n+#define __builtin_ia32_kshiftrisi(A, B) __builtin_ia32_kshiftrisi(A, 8)\n+#define __builtin_ia32_kshiftridi(A, B) __builtin_ia32_kshiftridi(A, 8)\n #define __builtin_ia32_ucmpw512_mask(A, B, E, D) __builtin_ia32_ucmpw512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpb512_mask(A, B, E, D) __builtin_ia32_ucmpb512_mask(A, B, 1, D)\n #define __builtin_ia32_psrlwi512_mask(A, E, C, D) __builtin_ia32_psrlwi512_mask(A, 1, C, D)\n@@ -388,6 +394,8 @@\n #define __builtin_ia32_pslldq512(A, B) __builtin_ia32_pslldq512(A, 8)\n \n /* avx512dqintrin.h */\n+#define __builtin_ia32_kshiftliqi(A, B) __builtin_ia32_kshiftliqi(A, 8)\n+#define __builtin_ia32_kshiftriqi(A, B) __builtin_ia32_kshiftriqi(A, 8)\n #define __builtin_ia32_reducess(A, B, F) __builtin_ia32_reducess(A, B, 1)\n #define __builtin_ia32_reducesd(A, B, F) __builtin_ia32_reducesd(A, B, 1)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)"}, {"sha": "03714a6e20379d912690b85b7225f2ac0401a7fb", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftld-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftld\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftli_mask32 (k1, i);\n+  x = _mm512_mask_add_epi16 (x, k2, x, x);\n+}"}, {"sha": "7fdc01a31f97cef5ed2f2dca2bda3f98646c6122", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftld-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftld-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1 = 1;\n+  unsigned int i = 25;\n+\n+  volatile __mmask32 r = _kshiftli_mask32 (k1, i);\n+  if (r != 1 << i)\n+    abort ();\n+}"}, {"sha": "70a4b676a1848debb06f03601c0b771142dcaf8f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftlq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftlq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftli_mask64 (k1, i);\n+  x = _mm512_mask_add_epi8 (x, k2, x, x);\n+}"}, {"sha": "4dabb4a3eade5b7abaadcedbaff5ec8dbb59f165", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftlq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftlq-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1 = 1;\n+  unsigned int i = 53;\n+\n+  volatile __mmask64 r = _kshiftli_mask64 (k1, i);\n+  if (r != 1 << i)\n+    abort ();\n+}"}, {"sha": "b99a7131f05eeeb6256f9b64706a1746a1f5aadf", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftrd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftrd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftri_mask32 (k1, i);\n+  x = _mm512_mask_add_epi16 (x, k2, x, x);\n+}"}, {"sha": "ce3707fdeb4623af6455590507207c9c5598b872", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftrd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrd-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned int i = 25;\n+  __mmask32 k1 = 1 << i;\n+\n+  volatile __mmask32 r = _kshiftri_mask32 (k1, i);\n+  if (r != 1)\n+    abort ();\n+}"}, {"sha": "b0051b5ecf9f5086077cee8157f6f9e57a9d57ab", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftrq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftrq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftri_mask64 (k1, i);\n+  x = _mm512_mask_add_epi8 (x, k2, x, x);\n+}"}, {"sha": "655f926df947645e3df862b82179fddc6e94f1b6", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kshiftrq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kshiftrq-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+void\n+avx512bw_test ()\n+{\n+  unsigned int i = 53;\n+  __mmask64 k1 = 1 << i;\n+\n+  volatile __mmask64 r = _kshiftri_mask64 (k1, i);\n+  if (r != 1)\n+    abort ();\n+}"}, {"sha": "2d72c0a2e70a06b9dc25defdddff1cf23db69549", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kshiftlb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftlb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftli_mask8 (k1, i);\n+  x = _mm512_mask_add_pd (x, k2, x, x);\n+}"}, {"sha": "bb0f10a90ecc053276639022b636b1990123fca0", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kshiftlb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftlb-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512dq-check.h\"\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1 = 1;\n+  unsigned int i = 5;\n+\n+  volatile __mmask8 r = _kshiftli_mask8 (k1, i);\n+  if (r != 1 << i)\n+    abort ();\n+}"}, {"sha": "c5ae1995278e60468ea9624fd145c33c7cba6ba1", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kshiftrb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftrb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftri_mask8 (k1, i);\n+  x = _mm512_mask_add_pd (x, k2, x, x);\n+}"}, {"sha": "1b7c3bd901b5d08c1ec428f9a0d7e2a97ec73d31", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kshiftrb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kshiftrb-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512dq-check.h\"\n+\n+void\n+avx512dq_test ()\n+{\n+  unsigned int i = 5;\n+  __mmask8 k1 = 1 << i;\n+\n+  volatile __mmask8 r = _kshiftri_mask8 (k1, i);\n+  if (r != 1)\n+    abort ();\n+}"}, {"sha": "3782d908056bfb8447e40e546c68f59edeaa8da2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kshiftlw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftlw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512 x = _mm512_setzero_ps();\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftli_mask16 (k1, i);\n+  x = _mm512_mask_add_ps (x, k2, x, x);\n+}"}, {"sha": "89d45fc9ec22856589c9436fae21d4c134c66ebc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kshiftlw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftlw-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1 = 1;\n+  unsigned int i = 10;\n+\n+  volatile __mmask16 r = _kshiftli_mask16 (k1, i);\n+  if (r != 1 << i)\n+    abort ();\n+}"}, {"sha": "6d537efc11238b272d3539f70b7ae1c4fbb99b77", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kshiftrw-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-1.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kshiftrw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k1, k2;\n+  unsigned int i = 5;\n+  volatile __m512 x = _mm512_setzero_ps();\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+\n+  k2 = _kshiftri_mask16 (k1, i);\n+  x = _mm512_mask_add_ps (x, k2, x, x);\n+}"}, {"sha": "5a1483af47afc33c8bce81259a6374252e7d810f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kshiftrw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kshiftrw-2.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void\n+avx512f_test ()\n+{\n+  unsigned int i = 10;\n+  __mmask16 k1 = 1 << i;\n+\n+  volatile __mmask16 r = _kshiftri_mask16 (k1, i);\n+  if (r != 1)\n+    abort ();\n+}"}, {"sha": "ff0051bf479697c90b720aa24152305ae16a329e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -185,6 +185,8 @@\n #define __builtin_ia32_xabort(N) __builtin_ia32_xabort(1)\n \n /* avx512fintrin.h */\n+#define __builtin_ia32_kshiftlihi(A, B) __builtin_ia32_kshiftlihi(A, 8)\n+#define __builtin_ia32_kshiftrihi(A, B) __builtin_ia32_kshiftrihi(A, 8)\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n@@ -389,6 +391,10 @@\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n \n /* avx512bwintrin.h */\n+#define __builtin_ia32_kshiftlisi(A, B) __builtin_ia32_kshiftlisi(A, 8)\n+#define __builtin_ia32_kshiftlidi(A, B) __builtin_ia32_kshiftlidi(A, 8)\n+#define __builtin_ia32_kshiftrisi(A, B) __builtin_ia32_kshiftrisi(A, 8)\n+#define __builtin_ia32_kshiftridi(A, B) __builtin_ia32_kshiftridi(A, 8)\n #define __builtin_ia32_ucmpw512_mask(A, B, E, D) __builtin_ia32_ucmpw512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpb512_mask(A, B, E, D) __builtin_ia32_ucmpb512_mask(A, B, 1, D)\n #define __builtin_ia32_psrlwi512_mask(A, E, C, D) __builtin_ia32_psrlwi512_mask(A, 1, C, D)\n@@ -405,6 +411,8 @@\n #define __builtin_ia32_pslldq512(A, B) __builtin_ia32_pslldq512(A, 8)\n \n /* avx512dqintrin.h */\n+#define __builtin_ia32_kshiftliqi(A, B) __builtin_ia32_kshiftliqi(A, 8)\n+#define __builtin_ia32_kshiftriqi(A, B) __builtin_ia32_kshiftriqi(A, 8)\n #define __builtin_ia32_reducess(A, B, F) __builtin_ia32_reducess(A, B, 1)\n #define __builtin_ia32_reducesd(A, B, F) __builtin_ia32_reducesd(A, B, 1)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)"}, {"sha": "f4fcb002bb5b3283dfa3dfaf5c414eefa6786191", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea3e7c3cd8187d6332759c42fc448e5ed1e774/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=d8ea3e7c3cd8187d6332759c42fc448e5ed1e774", "patch": "@@ -186,6 +186,8 @@\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n /* avx512fintrin.h */\n+#define __builtin_ia32_kshiftlihi(A, B) __builtin_ia32_kshiftlihi(A, 8)\n+#define __builtin_ia32_kshiftrihi(A, B) __builtin_ia32_kshiftrihi(A, 8)\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n@@ -388,6 +390,10 @@\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n \n /* avx512bwintrin.h */\n+#define __builtin_ia32_kshiftlisi(A, B) __builtin_ia32_kshiftlisi(A, 8)\n+#define __builtin_ia32_kshiftlidi(A, B) __builtin_ia32_kshiftlidi(A, 8)\n+#define __builtin_ia32_kshiftrisi(A, B) __builtin_ia32_kshiftrisi(A, 8)\n+#define __builtin_ia32_kshiftridi(A, B) __builtin_ia32_kshiftridi(A, 8)\n #define __builtin_ia32_ucmpw512_mask(A, B, E, D) __builtin_ia32_ucmpw512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpb512_mask(A, B, E, D) __builtin_ia32_ucmpb512_mask(A, B, 1, D)\n #define __builtin_ia32_psrlwi512_mask(A, E, C, D) __builtin_ia32_psrlwi512_mask(A, 1, C, D)\n@@ -404,6 +410,8 @@\n #define __builtin_ia32_pslldq512(A, B) __builtin_ia32_pslldq512(A, 8)\n \n /* avx512dqintrin.h */\n+#define __builtin_ia32_kshiftliqi(A, B) __builtin_ia32_kshiftliqi(A, 8)\n+#define __builtin_ia32_kshiftriqi(A, B) __builtin_ia32_kshiftriqi(A, 8)\n #define __builtin_ia32_reducess(A, B, F) __builtin_ia32_reducess(A, B, 1)\n #define __builtin_ia32_reducesd(A, B, F) __builtin_ia32_reducesd(A, B, 1)\n #define __builtin_ia32_reduceps512_mask(A, E, C, D) __builtin_ia32_reduceps512_mask(A, 1, C, D)"}]}