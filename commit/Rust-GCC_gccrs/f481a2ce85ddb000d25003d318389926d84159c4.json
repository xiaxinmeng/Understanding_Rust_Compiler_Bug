{"sha": "f481a2ce85ddb000d25003d318389926d84159c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4MWEyY2U4NWRkYjAwMGQyNTAwM2QzMTgzODk5MjZkODQxNTljNA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-30T08:57:50Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-30T08:57:50Z"}, "message": "target.def (builtin_chkp_function): New.\n\n        * target.def (builtin_chkp_function): New.\n        (chkp_bound_type): New.\n        (chkp_bound_mode): New.\n        (fn_abi_va_list_bounds_size): New.\n        (load_bounds_for_arg): New.\n        (store_bounds_for_arg): New.\n        * targhooks.h (default_load_bounds_for_arg): New.\n        (default_store_bounds_for_arg): New.\n        (default_fn_abi_va_list_bounds_size): New.\n        (default_chkp_bound_type): New.\n        (default_chkp_bound_mode): New.\n        (default_builtin_chkp_function): New.\n        * targhooks.c (default_load_bounds_for_arg): New.\n        (default_store_bounds_for_arg): New.\n        (default_fn_abi_va_list_bounds_size): New.\n        (default_chkp_bound_type): New.\n        (default_chkp_bound_mode); New.\n        (default_builtin_chkp_function): New.\n        * doc/tm.texi.in (TARGET_FN_ABI_VA_LIST_BOUNDS_SIZE): New.\n        (TARGET_LOAD_BOUNDS_FOR_ARG): New.\n        (TARGET_STORE_BOUNDS_FOR_ARG): New.\n        (TARGET_BUILTIN_CHKP_FUNCTION): New.\n        (TARGET_CHKP_BOUND_TYPE): New.\n        (TARGET_CHKP_BOUND_MODE): New.\n        * doc/tm.texi: Regenerated.\n        * langhooks.h (lang_hooks): Add chkp_supported field.\n        * langhooks-def.h (LANG_HOOKS_CHKP_SUPPORTED): New.\n        (LANG_HOOKS_INITIALIZER); Add LANG_HOOKS_CHKP_SUPPORTED.\n\nFrom-SVN: r204195", "tree": {"sha": "6025b41883c8fc53b3bdf5a16961a1683c154b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6025b41883c8fc53b3bdf5a16961a1683c154b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f481a2ce85ddb000d25003d318389926d84159c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f481a2ce85ddb000d25003d318389926d84159c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f481a2ce85ddb000d25003d318389926d84159c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f481a2ce85ddb000d25003d318389926d84159c4/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be"}], "stats": {"total": 346, "additions": 345, "deletions": 1}, "files": [{"sha": "1c00e3c28a52495d00744616191c50944086a80e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -1,3 +1,34 @@\n+2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* target.def (builtin_chkp_function): New.\n+\t(chkp_bound_type): New.\n+\t(chkp_bound_mode): New.\n+\t(fn_abi_va_list_bounds_size): New.\n+\t(load_bounds_for_arg): New.\n+\t(store_bounds_for_arg): New.\n+\t* targhooks.h (default_load_bounds_for_arg): New.\n+\t(default_store_bounds_for_arg): New.\n+\t(default_fn_abi_va_list_bounds_size): New.\n+\t(default_chkp_bound_type): New.\n+\t(default_chkp_bound_mode): New.\n+\t(default_builtin_chkp_function): New.\n+\t* targhooks.c (default_load_bounds_for_arg): New.\n+\t(default_store_bounds_for_arg): New.\n+\t(default_fn_abi_va_list_bounds_size): New.\n+\t(default_chkp_bound_type): New.\n+\t(default_chkp_bound_mode); New.\n+\t(default_builtin_chkp_function): New.\n+\t* doc/tm.texi.in (TARGET_FN_ABI_VA_LIST_BOUNDS_SIZE): New.\n+\t(TARGET_LOAD_BOUNDS_FOR_ARG): New.\n+\t(TARGET_STORE_BOUNDS_FOR_ARG): New.\n+\t(TARGET_BUILTIN_CHKP_FUNCTION): New.\n+\t(TARGET_CHKP_BOUND_TYPE): New.\n+\t(TARGET_CHKP_BOUND_MODE): New.\n+\t* doc/tm.texi: Regenerated.\n+\t* langhooks.h (lang_hooks): Add chkp_supported field.\n+\t* langhooks-def.h (LANG_HOOKS_CHKP_SUPPORTED): New.\n+\t(LANG_HOOKS_INITIALIZER); Add LANG_HOOKS_CHKP_SUPPORTED.\n+\n 2013-10-29  Andrew Pinski <apinski@cavium.com>\n \n \t* tree-ssa-ifcombine.c: Include rtl.h and tm_p.h."}, {"sha": "72daf092cb490b6abf568253395071c90c0ad51e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -4334,6 +4334,13 @@ This hook returns the va_list type of the calling convention specified by\n The default version of this hook returns @code{va_list_type_node}.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_FN_ABI_VA_LIST_BOUNDS_SIZE (tree @var{fndecl})\n+This hook returns size for @code{va_list} object in function specified\n+by @var{fndecl}.  This hook is used by Pointer Bounds Checker to build bounds\n+for @code{va_list} object.  Return @code{integer_zero_node} if no bounds\n+should be used (e.g. @code{va_list} is a scalar pointer to the stack).\n+@end deftypefn\n+\n @deftypefn {Target Hook} tree TARGET_CANONICAL_VA_LIST_TYPE (tree @var{type})\n This hook returns the va_list type of the calling convention specified by the\n type of @var{type}. If @var{type} is not a valid va_list type, it returns\n@@ -5151,6 +5158,26 @@ defined, then define this hook to return @code{true} if\n Otherwise, you should not define this hook.\n @end deftypefn\n \n+@deftypefn {Target Hook} rtx TARGET_LOAD_BOUNDS_FOR_ARG (rtx @var{slot}, rtx @var{arg}, rtx @var{slot_no})\n+This hook is used by expand pass to emit insn to load bounds of\n+@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\n+bounds of @var{arg} are not passed in register.  If @var{slot} is a\n+memory, then bounds are loaded as for regular pointer loaded from\n+memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\n+constant holding number of the target dependent special slot which\n+should be used to obtain bounds.  Hook returns RTX holding loaded bounds.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_STORE_BOUNDS_FOR_ARG (rtx @var{arg}, rtx @var{slot}, rtx @var{bounds}, rtx @var{slot_no})\n+This hook is used by expand pass to emit insns to store @var{bounds} of\n+@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\n+@var{bounds} of @var{arg} are not passed in register.  If @var{slot} is a\n+memory, then @var{bounds} are stored as for regular pointer stored in\n+memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\n+constant holding number of the target dependent special slot which\n+should be used to store @var{bounds}.\n+@end deftypefn\n+\n @node Trampolines\n @section Trampolines for Nested Functions\n @cindex trampolines for nested functions\n@@ -10907,6 +10934,96 @@ ignored.  This function should return the result of the call to the\n built-in function.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_BUILTIN_CHKP_FUNCTION (unsigned @var{fcode})\n+This hook allows target to redefine built-in functions used by\n+Pointer Bounds Checker for code instrumentation.  Hook should return\n+fndecl of function implementing generic builtin whose code is\n+passed in @var{fcode}.  Currently following built-in functions are\n+obtained using this hook:\n+@deftypefn {Built-in Function} bnd __chkp_bndmk (const void *@var{lb}, size_t @var{size})\n+Function code - BUILT_IN_CHKP_BNDMK.  This built-in function is used\n+by Pointer Bounds Checker to create bound values.  @var{lb} holds low\n+bound of the resulting bounds.  @var{size} holds size of created bounds.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __chkp_bndstx (const void **@var{loc}, const void *@var{ptr}, bnd @var{b})\n+Function code - @code{BUILT_IN_CHKP_BNDSTX}.  This built-in function is used\n+by Pointer Bounds Checker to store bounds @var{b} for pointer @var{ptr}\n+stored by address @var{loc}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} bnd __chkp_bndldx (const void **@var{loc}, const void *@var{ptr})\n+Function code - @code{BUILT_IN_CHKP_BNDLDX}.  This built-in function is used\n+by Pointer Bounds Checker to get bounds of pointer @var{ptr} loaded by\n+address @var{loc}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __chkp_bndcl (bnd @var{b}, const void *@var{ptr})\n+Function code - @code{BUILT_IN_CHKP_BNDCL}.  This built-in function is used\n+by Pointer Bounds Checker to perform check for pointer @var{ptr} against\n+lower bound of bounds @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void __chkp_bndcu (bnd @var{b}, const void *@var{ptr})\n+Function code - @code{BUILT_IN_CHKP_BNDCU}.  This built-in function is used\n+by Pointer Bounds Checker to perform check for pointer @var{ptr} against\n+upper bound of bounds @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} bnd __chkp_bndret (void *@var{ptr})\n+Function code - @code{BUILT_IN_CHKP_BNDRET}.  This built-in function is used\n+by Pointer Bounds Checker to obtain bounds returned by call statement.\n+@var{ptr} passed to buil-in is @code{SSA_NAME} returned by call.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} bnd __chkp_arg_bnd (void *@var{arg})\n+Function code - @code{BUILT_IN_CHKP_ARG_BND}.   This built-in function is\n+used by Pointer Bounds Checker to obtain bounds passed for input argument.\n+@var{arg} is default @code{SSA_NAME} of the @code{PARM_DECL} whose\n+bounds we want to obtain.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} bnd __chkp_intersect (bnd @var{b1}, bnd @var{b2})\n+Function code - @code{BUILT_IN_CHKP_INTERSECT}.  This built-in function\n+returns intersection of bounds @var{b1} and @var{b2}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} bnd __chkp_narrow (const void *@var{ptr}, bnd @var{b}, size_t @var{s})\n+Function code - @code{BUILT_IN_CHKP_NARROW}.  This built-in function\n+returns intersection of bounds @var{b} and\n+[@var{ptr}, @var{ptr} + @var{s} - @code{1}].\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} void *__chkp_set_bounds (const void *@var{ptr}, size_t @var{s})\n+Function code - @code{BUILT_IN_CHKP_SET_PTR_BOUNDS}.  This built-in function\n+returns @var{ptr} with bounds [@var{ptr}, @var{ptr} + @var{s} - @code{1}].\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} size_t __chkp_sizeof (const void *@var{ptr})\n+Function code - @code{BUILT_IN_CHKP_SIZEOF}.  This built-in function\n+returns size of object referenced by @var{ptr}. @var{ptr} is always\n+@code{ADDR_EXPR} of @code{VAR_DECL}.  This built-in is used by\n+Pointer Boudns Checker when bounds of object cannot be computed statically\n+(e.g. object has incomplete type).\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} const void *__chkp_extract_lower (bnd @var{b})\n+Function code - @code{BUILT_IN_CHKP_EXTRACT_LOWER}.  This built-in function\n+returns lower bound of bounds @var{b}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} const void *__chkp_extract_upper (bnd @var{b})\n+Function code - @code{BUILT_IN_CHKP_EXTRACT_UPPER}.  This built-in function\n+returns upper bound of bounds @var{b}.\n+@end deftypefn\n+@end deftypefn\n+@deftypefn {Target Hook} tree TARGET_CHKP_BOUND_TYPE (void)\n+Return type to be used for bounds\n+@end deftypefn\n+@deftypefn {Target Hook} {enum machine_mode} TARGET_CHKP_BOUND_MODE (void)\n+Return mode to be used for bounds.\n+@end deftypefn\n+\n @deftypefn {Target Hook} tree TARGET_RESOLVE_OVERLOADED_BUILTIN (unsigned int @var{loc}, tree @var{fndecl}, void *@var{arglist})\n Select a replacement for a machine specific built-in function that\n was set up by @samp{TARGET_INIT_BUILTINS}.  This is done"}, {"sha": "28283610cbf3215506c5bf63f0dcdd2ed71b1b04", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -3694,6 +3694,8 @@ stack.\n \n @hook TARGET_FN_ABI_VA_LIST\n \n+@hook TARGET_FN_ABI_VA_LIST_BOUNDS_SIZE\n+\n @hook TARGET_CANONICAL_VA_LIST_TYPE\n \n @hook TARGET_GIMPLIFY_VA_ARG_EXPR\n@@ -4064,6 +4066,10 @@ These machine description macros help implement varargs:\n \n @hook TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n \n+@hook TARGET_LOAD_BOUNDS_FOR_ARG\n+\n+@hook TARGET_STORE_BOUNDS_FOR_ARG\n+\n @node Trampolines\n @section Trampolines for Nested Functions\n @cindex trampolines for nested functions\n@@ -8184,6 +8190,10 @@ to by @var{ce_info}.\n \n @hook TARGET_EXPAND_BUILTIN\n \n+@hook TARGET_BUILTIN_CHKP_FUNCTION\n+@hook TARGET_CHKP_BOUND_TYPE\n+@hook TARGET_CHKP_BOUND_MODE\n+\n @hook TARGET_RESOLVE_OVERLOADED_BUILTIN\n \n @hook TARGET_FOLD_BUILTIN"}, {"sha": "67eb2faa778ca9a6e4de195919c68623b12a2984", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -118,6 +118,7 @@ extern bool lhd_omp_mappable_type (tree);\n #define LANG_HOOKS_BLOCK_MAY_FALLTHRU\thook_bool_const_tree_true\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n #define LANG_HOOKS_DEEP_UNSHARING\tfalse\n+#define LANG_HOOKS_CHKP_SUPPORTED\tfalse\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -318,7 +319,8 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS, \\\n   LANG_HOOKS_BLOCK_MAY_FALLTHRU, \\\n   LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n-  LANG_HOOKS_DEEP_UNSHARING \\\n+  LANG_HOOKS_DEEP_UNSHARING, \\\n+  LANG_HOOKS_CHKP_SUPPORTED \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "48f18ac8269634d8b3b332dc5c2358eda6daaac7", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -491,6 +491,9 @@ struct lang_hooks\n      gimplification.  */\n   bool deep_unsharing;\n \n+  /* True if this language allows pointers checker instrumentation.  */\n+  bool chkp_supported;\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "cf3e2fdd53dbda565f811b27a053437d15a1d5cf", "filename": "gcc/target.def", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -2023,6 +2023,104 @@ built-in function.\",\n  (tree exp, rtx target, rtx subtarget, enum machine_mode mode, int ignore),\n  default_expand_builtin)\n \n+DEFHOOK\n+(builtin_chkp_function,\n+ \"This hook allows target to redefine built-in functions used by\\n\\\n+Pointer Bounds Checker for code instrumentation.  Hook should return\\n\\\n+fndecl of function implementing generic builtin whose code is\\n\\\n+passed in @var{fcode}.  Currently following built-in functions are\\n\\\n+obtained using this hook:\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_bndmk (const void *@var{lb}, size_t @var{size})\\n\\\n+Function code - BUILT_IN_CHKP_BNDMK.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to create bound values.  @var{lb} holds low\\n\\\n+bound of the resulting bounds.  @var{size} holds size of created bounds.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} void __chkp_bndstx (const void **@var{loc}, const void *@var{ptr}, bnd @var{b})\\n\\\n+Function code - @code{BUILT_IN_CHKP_BNDSTX}.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to store bounds @var{b} for pointer @var{ptr}\\n\\\n+stored by address @var{loc}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_bndldx (const void **@var{loc}, const void *@var{ptr})\\n\\\n+Function code - @code{BUILT_IN_CHKP_BNDLDX}.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to get bounds of pointer @var{ptr} loaded by\\n\\\n+address @var{loc}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} void __chkp_bndcl (bnd @var{b}, const void *@var{ptr})\\n\\\n+Function code - @code{BUILT_IN_CHKP_BNDCL}.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to perform check for pointer @var{ptr} against\\n\\\n+lower bound of bounds @var{b}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} void __chkp_bndcu (bnd @var{b}, const void *@var{ptr})\\n\\\n+Function code - @code{BUILT_IN_CHKP_BNDCU}.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to perform check for pointer @var{ptr} against\\n\\\n+upper bound of bounds @var{b}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_bndret (void *@var{ptr})\\n\\\n+Function code - @code{BUILT_IN_CHKP_BNDRET}.  This built-in function is used\\n\\\n+by Pointer Bounds Checker to obtain bounds returned by call statement.\\n\\\n+@var{ptr} passed to buil-in is @code{SSA_NAME} returned by call.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_arg_bnd (void *@var{arg})\\n\\\n+Function code - @code{BUILT_IN_CHKP_ARG_BND}.   This built-in function is\\n\\\n+used by Pointer Bounds Checker to obtain bounds passed for input argument.\\n\\\n+@var{arg} is default @code{SSA_NAME} of the @code{PARM_DECL} whose\\n\\\n+bounds we want to obtain.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_intersect (bnd @var{b1}, bnd @var{b2})\\n\\\n+Function code - @code{BUILT_IN_CHKP_INTERSECT}.  This built-in function\\n\\\n+returns intersection of bounds @var{b1} and @var{b2}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} bnd __chkp_narrow (const void *@var{ptr}, bnd @var{b}, size_t @var{s})\\n\\\n+Function code - @code{BUILT_IN_CHKP_NARROW}.  This built-in function\\n\\\n+returns intersection of bounds @var{b} and\\n\\\n+[@var{ptr}, @var{ptr} + @var{s} - @code{1}].\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} void *__chkp_set_bounds (const void *@var{ptr}, size_t @var{s})\\n\\\n+Function code - @code{BUILT_IN_CHKP_SET_PTR_BOUNDS}.  This built-in function\\n\\\n+returns @var{ptr} with bounds [@var{ptr}, @var{ptr} + @var{s} - @code{1}].\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} size_t __chkp_sizeof (const void *@var{ptr})\\n\\\n+Function code - @code{BUILT_IN_CHKP_SIZEOF}.  This built-in function\\n\\\n+returns size of object referenced by @var{ptr}. @var{ptr} is always\\n\\\n+@code{ADDR_EXPR} of @code{VAR_DECL}.  This built-in is used by\\n\\\n+Pointer Boudns Checker when bounds of object cannot be computed statically\\n\\\n+(e.g. object has incomplete type).\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} const void *__chkp_extract_lower (bnd @var{b})\\n\\\n+Function code - @code{BUILT_IN_CHKP_EXTRACT_LOWER}.  This built-in function\\n\\\n+returns lower bound of bounds @var{b}.\\n\\\n+@end deftypefn\\n\\\n+\\n\\\n+@deftypefn {Built-in Function} const void *__chkp_extract_upper (bnd @var{b})\\n\\\n+Function code - @code{BUILT_IN_CHKP_EXTRACT_UPPER}.  This built-in function\\n\\\n+returns upper bound of bounds @var{b}.\\n\\\n+@end deftypefn\",\n+ tree, (unsigned fcode),\n+ default_builtin_chkp_function)\n+\n+DEFHOOK\n+(chkp_bound_type,\n+ \"Return type to be used for bounds\",\n+ tree, (void),\n+ default_chkp_bound_type)\n+\n+DEFHOOK\n+(chkp_bound_mode,\n+ \"Return mode to be used for bounds.\",\n+ enum machine_mode, (void),\n+ default_chkp_bound_mode)\n+\n /* Select a replacement for a target-specific builtin.  This is done\n    *before* regular type checking, and so allows the target to\n    implement a crude form of function overloading.  The result is a\n@@ -3273,6 +3371,15 @@ The default version of this hook returns @code{va_list_type_node}.\",\n  tree, (tree fndecl),\n  std_fn_abi_va_list)\n \n+DEFHOOK\n+(fn_abi_va_list_bounds_size,\n+ \"This hook returns size for @code{va_list} object in function specified\\n\\\n+by @var{fndecl}.  This hook is used by Pointer Bounds Checker to build bounds\\n\\\n+for @code{va_list} object.  Return @code{integer_zero_node} if no bounds\\n\\\n+should be used (e.g. @code{va_list} is a scalar pointer to the stack).\",\n+ tree, (tree fndecl),\n+ default_fn_abi_va_list_bounds_size)\n+\n /* Get the __builtin_va_list type dependent on input type.  */\n DEFHOOK\n (canonical_va_list_type,\n@@ -3703,6 +3810,30 @@ not generate any instructions in this case.\",\n \tint *pretend_args_size, int second_time),\n  default_setup_incoming_varargs)\n \n+DEFHOOK\n+(load_bounds_for_arg,\n+ \"This hook is used by expand pass to emit insn to load bounds of\\n\\\n+@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\\n\\\n+bounds of @var{arg} are not passed in register.  If @var{slot} is a\\n\\\n+memory, then bounds are loaded as for regular pointer loaded from\\n\\\n+memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\\n\\\n+constant holding number of the target dependent special slot which\\n\\\n+should be used to obtain bounds.  Hook returns RTX holding loaded bounds.\",\n+ rtx, (rtx slot, rtx arg, rtx slot_no),\n+ default_load_bounds_for_arg)\n+\n+DEFHOOK\n+(store_bounds_for_arg,\n+ \"This hook is used by expand pass to emit insns to store @var{bounds} of\\n\\\n+@var{arg} passed in @var{slot}.  Expand pass uses this hook in case\\n\\\n+@var{bounds} of @var{arg} are not passed in register.  If @var{slot} is a\\n\\\n+memory, then @var{bounds} are stored as for regular pointer stored in\\n\\\n+memory.  If @var{slot} is not a memory then @var{slot_no} is an integer\\n\\\n+constant holding number of the target dependent special slot which\\n\\\n+should be used to store @var{bounds}.\",\n+ void, (rtx arg, rtx slot, rtx bounds, rtx slot_no),\n+ default_store_bounds_for_arg)\n+\n DEFHOOK\n (strict_argument_naming,\n  \"Define this hook to return @code{true} if the location where a function\\n\\"}, {"sha": "6674109756db1bfe75c9af59a4a19d67d74ba809", "filename": "gcc/targhooks.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -1557,6 +1557,28 @@ default_member_type_forces_blk (const_tree, enum machine_mode)\n {\n   return false;\n }\n+rtx\n+default_load_bounds_for_arg (rtx addr ATTRIBUTE_UNUSED,\n+\t\t\t     rtx ptr ATTRIBUTE_UNUSED,\n+\t\t\t     rtx bnd ATTRIBUTE_UNUSED)\n+{\n+  gcc_unreachable ();\n+}\n+\n+void\n+default_store_bounds_for_arg (rtx val ATTRIBUTE_UNUSED,\n+\t\t\t      rtx addr ATTRIBUTE_UNUSED,\n+\t\t\t      rtx bounds ATTRIBUTE_UNUSED,\n+\t\t\t      rtx to ATTRIBUTE_UNUSED)\n+{\n+  gcc_unreachable ();\n+}\n+\n+tree\n+default_fn_abi_va_list_bounds_size (tree fndecl ATTRIBUTE_UNUSED)\n+{\n+  return integer_zero_node;\n+}\n \n /* Default version of canonicalize_comparison.  */\n \n@@ -1675,5 +1697,26 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   return build_va_arg_indirect_ref (addr);\n }\n \n+tree\n+default_chkp_bound_type (void)\n+{\n+  tree res = make_node (POINTER_BOUNDS_TYPE);\n+  TYPE_PRECISION (res) = TYPE_PRECISION (size_type_node) * 2;\n+  layout_type (res);\n+  return res;\n+}\n+\n+enum machine_mode\n+default_chkp_bound_mode (void)\n+{\n+  return VOIDmode;\n+}\n+\n+tree\n+default_builtin_chkp_function (unsigned int fcode ATTRIBUTE_UNUSED)\n+{\n+  return NULL_TREE;\n+}\n+\n \n #include \"gt-targhooks.h\""}, {"sha": "c8109988464fd73dab2a055a5fc7db9729a61a2b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f481a2ce85ddb000d25003d318389926d84159c4/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f481a2ce85ddb000d25003d318389926d84159c4", "patch": "@@ -204,3 +204,10 @@ extern enum machine_mode default_cstore_mode (enum insn_code);\n extern bool default_member_type_forces_blk (const_tree, enum machine_mode);\n extern tree build_va_arg_indirect_ref (tree);\n extern tree std_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n+\n+extern rtx default_load_bounds_for_arg (rtx, rtx, rtx);\n+extern void default_store_bounds_for_arg (rtx, rtx, rtx, rtx);\n+extern tree default_fn_abi_va_list_bounds_size (tree);\n+extern tree default_chkp_bound_type (void);\n+extern enum machine_mode default_chkp_bound_mode (void);\n+extern tree default_builtin_chkp_function (unsigned int);"}]}