{"sha": "5d98e5a6bc715cc865b9110ff0255572ac22570d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5OGU1YTZiYzcxNWNjODY1YjkxMTBmZjAyNTU1NzJhYzIyNTcwZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-04T14:33:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-04T14:33:47Z"}, "message": "Fix -fopt-info for plugin passes\n\nAttempts to dump via -fopt-info from a plugin pass fail, due\nto the dfi->alt_state for such passes never being set.\n\nThis is because the -fopt-info options were being set up per-pass\nduring option-parsing (via gcc::dump_manager::opt_info_enable_passes),\nbut this data was not retained or used it for passes created later\n(for plugins and target-specific passes).\n\nThis patch fixes the issue by storing the -fopt-info options into\ngcc::dump_manager, refactoring the dfi-setup code out of\nopt_info_enable_passes, and reusing it for such passes, fixing the\nissue.  The patch adds a demo plugin to test that dumping from a\nplugin works.\n\ngcc/ChangeLog:\n\t* dumpfile.c (gcc::dump_manager::dump_manager): Initialize new\n\tfields.\n\t(gcc::dump_manager::~dump_manager): Free m_optinfo_filename.\n\t(gcc::dump_manager::register_pass): New member function, adapted\n\tfrom loop body in gcc::pass_manager::register_pass, adding a\n\tcall to update_dfi_for_opt_info.\n\t(gcc::dump_manager::opt_info_enable_passes): Store the\n\t-fopt-info options into the new fields.  Move the loop\n\tbodies into...\n\t(gcc::dump_manager::update_dfi_for_opt_info): ...this new member\n\tfunction.\n\t* dumpfile.h (struct opt_pass): New forward decl.\n\t(gcc::dump_manager::register_pass): New decl.\n\t(gcc::dump_manager::update_dfi_for_opt_info): New decl.\n\t(class gcc::dump_manager): Add fields \"m_optgroup_flags\",\n\t\"m_optinfo_flags\", and \"m_optinfo_filename\".\n\t* passes.c (gcc::pass_manager::register_pass): Move all of the\n\tdump-handling code to gcc::dump_manager::register_pass.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/dump-1.c: New test.\n\t* gcc.dg/plugin/dump_plugin.c: New test plugin.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n\nFrom-SVN: r264844", "tree": {"sha": "7f7ee75a6d43b65b14261ebf6740d5d18c39f684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7ee75a6d43b65b14261ebf6740d5d18c39f684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d98e5a6bc715cc865b9110ff0255572ac22570d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d98e5a6bc715cc865b9110ff0255572ac22570d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d98e5a6bc715cc865b9110ff0255572ac22570d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d98e5a6bc715cc865b9110ff0255572ac22570d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19bc1a0832c01c0162aaba829b24609f60bba91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19bc1a0832c01c0162aaba829b24609f60bba91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19bc1a0832c01c0162aaba829b24609f60bba91"}], "stats": {"total": 362, "additions": 302, "deletions": 60}, "files": [{"sha": "d63b4f43efb32ffc1a37e26e49041213ee2cb30a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -1,3 +1,24 @@\n+2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* dumpfile.c (gcc::dump_manager::dump_manager): Initialize new\n+\tfields.\n+\t(gcc::dump_manager::~dump_manager): Free m_optinfo_filename.\n+\t(gcc::dump_manager::register_pass): New member function, adapted\n+\tfrom loop body in gcc::pass_manager::register_pass, adding a\n+\tcall to update_dfi_for_opt_info.\n+\t(gcc::dump_manager::opt_info_enable_passes): Store the\n+\t-fopt-info options into the new fields.  Move the loop\n+\tbodies into...\n+\t(gcc::dump_manager::update_dfi_for_opt_info): ...this new member\n+\tfunction.\n+\t* dumpfile.h (struct opt_pass): New forward decl.\n+\t(gcc::dump_manager::register_pass): New decl.\n+\t(gcc::dump_manager::update_dfi_for_opt_info): New decl.\n+\t(class gcc::dump_manager): Add fields \"m_optgroup_flags\",\n+\t\"m_optinfo_flags\", and \"m_optinfo_filename\".\n+\t* passes.c (gcc::pass_manager::register_pass): Move all of the\n+\tdump-handling code to gcc::dump_manager::register_pass.\n+\n 2018-10-04  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/87466"}, {"sha": "d359e41f75015024fb8498c689e334e8bbb71f45", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 84, "deletions": 36, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -177,12 +177,16 @@ gcc::dump_manager::dump_manager ():\n   m_next_dump (FIRST_AUTO_NUMBERED_DUMP),\n   m_extra_dump_files (NULL),\n   m_extra_dump_files_in_use (0),\n-  m_extra_dump_files_alloced (0)\n+  m_extra_dump_files_alloced (0),\n+  m_optgroup_flags (OPTGROUP_NONE),\n+  m_optinfo_flags (TDF_NONE),\n+  m_optinfo_filename (NULL)\n {\n }\n \n gcc::dump_manager::~dump_manager ()\n {\n+  free (m_optinfo_filename);\n   for (size_t i = 0; i < m_extra_dump_files_in_use; i++)\n     {\n       dump_file_info *dfi = &m_extra_dump_files[i];\n@@ -1512,6 +1516,50 @@ dump_flag_name (int phase) const\n   return dfi->swtch;\n }\n \n+/* Handle -fdump-* and -fopt-info for a pass added after\n+   command-line options are parsed (those from plugins and\n+   those from backends).\n+\n+   Because the registration of plugin/backend passes happens after the\n+   command-line options are parsed, the options that specify single\n+   pass dumping (e.g. -fdump-tree-PASSNAME) cannot be used for new\n+   passes. Therefore we currently can only enable dumping of\n+   new passes when the 'dump-all' flags (e.g. -fdump-tree-all)\n+   are specified.  This is done here.\n+\n+   Similarly, the saved -fopt-info options are wired up to the new pass.  */\n+\n+void\n+gcc::dump_manager::register_pass (opt_pass *pass)\n+{\n+  gcc_assert (pass);\n+\n+  register_one_dump_file (pass);\n+\n+  dump_file_info *pass_dfi = get_dump_file_info (pass->static_pass_number);\n+  gcc_assert (pass_dfi);\n+\n+  enum tree_dump_index tdi;\n+  if (pass->type == SIMPLE_IPA_PASS\n+      || pass->type == IPA_PASS)\n+    tdi = TDI_ipa_all;\n+  else if (pass->type == GIMPLE_PASS)\n+    tdi = TDI_tree_all;\n+  else\n+    tdi = TDI_rtl_all;\n+  const dump_file_info *tdi_dfi = get_dump_file_info (tdi);\n+  gcc_assert (tdi_dfi);\n+\n+  /* Check if dump-all flag is specified.  */\n+  if (tdi_dfi->pstate)\n+    {\n+      pass_dfi->pstate = tdi_dfi->pstate;\n+      pass_dfi->pflags = tdi_dfi->pflags;\n+    }\n+\n+  update_dfi_for_opt_info (pass_dfi);\n+}\n+\n /* Finish a tree dump for PHASE. STREAM is the stream created by\n    dump_begin.  */\n \n@@ -1587,47 +1635,47 @@ opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,\n \t\t\tconst char *filename)\n {\n   int n = 0;\n-  size_t i;\n \n-  for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n-    {\n-      if ((dump_files[i].optgroup_flags & optgroup_flags))\n-        {\n-          const char *old_filename = dump_files[i].alt_filename;\n-          /* Since this file is shared among different passes, it\n-             should be opened in append mode.  */\n-          dump_files[i].alt_state = 1;\n-          dump_files[i].alt_flags |= flags;\n-          n++;\n-          /* Override the existing filename.  */\n-          if (filename)\n-            dump_files[i].alt_filename = xstrdup (filename);\n-          if (old_filename && filename != old_filename)\n-            free (CONST_CAST (char *, old_filename));\n-        }\n-    }\n+  m_optgroup_flags = optgroup_flags;\n+  m_optinfo_flags = flags;\n+  m_optinfo_filename = xstrdup (filename);\n \n-  for (i = 0; i < m_extra_dump_files_in_use; i++)\n-    {\n-      if ((m_extra_dump_files[i].optgroup_flags & optgroup_flags))\n-        {\n-          const char *old_filename = m_extra_dump_files[i].alt_filename;\n-          /* Since this file is shared among different passes, it\n-             should be opened in append mode.  */\n-          m_extra_dump_files[i].alt_state = 1;\n-          m_extra_dump_files[i].alt_flags |= flags;\n-          n++;\n-          /* Override the existing filename.  */\n-          if (filename)\n-            m_extra_dump_files[i].alt_filename = xstrdup (filename);\n-          if (old_filename && filename != old_filename)\n-            free (CONST_CAST (char *, old_filename));\n-        }\n-    }\n+  for (size_t i = TDI_none + 1; i < (size_t) TDI_end; i++)\n+    if (update_dfi_for_opt_info (&dump_files[i]))\n+      n++;\n+\n+  for (size_t i = 0; i < m_extra_dump_files_in_use; i++)\n+    if (update_dfi_for_opt_info (&m_extra_dump_files[i]))\n+      n++;\n \n   return n;\n }\n \n+/* Use the saved -fopt-info options to update DFI.\n+   Return true if the dump is enabled.  */\n+\n+bool\n+gcc::dump_manager::update_dfi_for_opt_info (dump_file_info *dfi) const\n+{\n+  gcc_assert (dfi);\n+\n+  if (!(dfi->optgroup_flags & m_optgroup_flags))\n+    return false;\n+\n+  const char *old_filename = dfi->alt_filename;\n+  /* Since this file is shared among different passes, it\n+     should be opened in append mode.  */\n+  dfi->alt_state = 1;\n+  dfi->alt_flags |= m_optinfo_flags;\n+  /* Override the existing filename.  */\n+  if (m_optinfo_filename)\n+    dfi->alt_filename = xstrdup (m_optinfo_filename);\n+  if (old_filename && m_optinfo_filename != old_filename)\n+    free (CONST_CAST (char *, old_filename));\n+\n+  return true;\n+}\n+\n /* Parse ARG as a dump switch. Return nonzero if it is, and store the\n    relevant details in the dump_files array.  */\n "}, {"sha": "057ca46746e8068c72c6674b2fd80af8d7255468", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -566,6 +566,8 @@ extern void dump_combine_total_stats (FILE *);\n /* In cfghooks.c  */\n extern void dump_bb (FILE *, basic_block, int, dump_flags_t);\n \n+struct opt_pass;\n+\n namespace gcc {\n \n /* A class for managing all of the various dump files used by the\n@@ -634,6 +636,8 @@ class dump_manager\n   const char *\n   dump_flag_name (int phase) const;\n \n+  void register_pass (opt_pass *pass);\n+\n private:\n \n   int\n@@ -649,6 +653,8 @@ class dump_manager\n   opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,\n \t\t\t  const char *filename);\n \n+  bool update_dfi_for_opt_info (dump_file_info *dfi) const;\n+\n private:\n \n   /* Dynamically registered dump files and switches.  */\n@@ -657,6 +663,12 @@ class dump_manager\n   size_t m_extra_dump_files_in_use;\n   size_t m_extra_dump_files_alloced;\n \n+  /* Stored values from -fopt-info, for handling passes created after\n+     option-parsing (by backends and by plugins).  */\n+  optgroup_flags_t m_optgroup_flags;\n+  dump_flags_t m_optinfo_flags;\n+  char *m_optinfo_filename;\n+\n   /* Grant access to dump_enable_all.  */\n   friend bool ::enable_rtl_dump_file (void);\n "}, {"sha": "d838d9099417b3b19e3c27b7bfa123888ae7341b", "filename": "gcc/passes.c", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -1404,7 +1404,6 @@ void\n pass_manager::register_pass (struct register_pass_info *pass_info)\n {\n   bool all_instances, success;\n-  gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n \n   /* The checks below could fail in buggy plugins.  Existing GCC\n      passes should never fail these checks, so we mention plugin in\n@@ -1442,33 +1441,16 @@ pass_manager::register_pass (struct register_pass_info *pass_info)\n \n   /* OK, we have successfully inserted the new pass. We need to register\n      the dump files for the newly added pass and its duplicates (if any).\n-     Because the registration of plugin/backend passes happens after the\n-     command-line options are parsed, the options that specify single\n-     pass dumping (e.g. -fdump-tree-PASSNAME) cannot be used for new\n-     passes. Therefore we currently can only enable dumping of\n-     new passes when the 'dump-all' flags (e.g. -fdump-tree-all)\n-     are specified. While doing so, we also delete the pass_list_node\n+     While doing so, we also delete the pass_list_node\n      objects created during pass positioning.  */\n+  gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n   while (added_pass_nodes)\n     {\n       struct pass_list_node *next_node = added_pass_nodes->next;\n-      enum tree_dump_index tdi;\n-      register_one_dump_file (added_pass_nodes->pass);\n-      if (added_pass_nodes->pass->type == SIMPLE_IPA_PASS\n-          || added_pass_nodes->pass->type == IPA_PASS)\n-        tdi = TDI_ipa_all;\n-      else if (added_pass_nodes->pass->type == GIMPLE_PASS)\n-        tdi = TDI_tree_all;\n-      else\n-        tdi = TDI_rtl_all;\n-      /* Check if dump-all flag is specified.  */\n-      if (dumps->get_dump_file_info (tdi)->pstate)\n-\t{\n-\t  dumps->get_dump_file_info (added_pass_nodes->pass->static_pass_number)\n-            ->pstate = dumps->get_dump_file_info (tdi)->pstate;\n-\t  dumps->get_dump_file_info (added_pass_nodes->pass->static_pass_number)\n-\t    ->pflags = dumps->get_dump_file_info (tdi)->pflags;\n-\t}\n+\n+      /* Handle -fdump-* and -fopt-info.  */\n+      dumps->register_pass (added_pass_nodes->pass);\n+\n       XDELETE (added_pass_nodes);\n       added_pass_nodes = next_node;\n     }"}, {"sha": "29f4a2a8f7cbfb26819bf77a5ed80fc9d58030b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -1,3 +1,9 @@\n+2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/dump-1.c: New test.\n+\t* gcc.dg/plugin/dump_plugin.c: New test plugin.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the above.\n+\n 2018-10-04  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/87466"}, {"sha": "165a9c1cd0b9b2c63b5a6c14762796c381ae0680", "filename": "gcc/testsuite/gcc.dg/plugin/dump-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopt-info-note\" } */\n+\n+extern void test_string_literal (void);\n+extern void test_tree (void);\n+extern void test_gimple (int);\n+extern void test_cgraph_node (void);\n+extern void test_wide_int (void);\n+extern void test_poly_int (void);\n+extern void test_scopes (void);\n+\n+void test_remarks (void)\n+{\n+  test_string_literal (); /* { dg-message \"test of dump for 'test_string_literal'\" } */\n+  test_tree (); /* { dg-message \"test of tree: 0\" } */\n+  test_gimple (42); /* { dg-message \"test of gimple: test_gimple \\\\(42\\\\);\" } */\n+  test_cgraph_node (); /* { dg-message \"test of callgraph node: test_cgraph_node/\\[0-9\\]+\" } */\n+  test_wide_int (); /* { dg-message \"test of wide int: 0\" } */\n+  test_poly_int (); /* { dg-message \"test of poly int: 42\" } */\n+\n+  test_scopes (); /* { dg-line test_scopes_line } */\n+  /* { dg-message \"=== outer scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \" at outer scope\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \" === middle scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"  at middle scope\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"  === innermost scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"   at innermost scope\" \"\" { target *-*-* } test_scopes_line } */\n+}"}, {"sha": "12573d66af211cdfb71b4f75c5fff6fa4fedb7d7", "filename": "gcc/testsuite/gcc.dg/plugin/dump_plugin.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump_plugin.c?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -0,0 +1,143 @@\n+/* Plugin for testing dumpfile.c.  */\n+\n+#include \"gcc-plugin.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"plugin-version.h\"\n+#include \"diagnostic.h\"\n+#include \"context.h\"\n+#include \"optinfo.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"cgraph.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+const pass_data pass_data_test_dumping =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"test_dumping\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_test_dumping : public gimple_opt_pass\n+{\n+public:\n+  pass_test_dumping (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_test_dumping, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate (function *) { return true; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_test_dumping\n+\n+unsigned int\n+pass_test_dumping::execute (function *fun)\n+{\n+  basic_block bb;\n+\n+  if (!dump_enabled_p ())\n+    return 0;\n+\n+  FOR_ALL_BB_FN (bb, fun)\n+    for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\t !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgimple *stmt = gsi_stmt (gsi);\n+\tgcall *call = dyn_cast <gcall *> (stmt);\n+\tif (!call)\n+\t  continue;\n+\ttree callee_decl = gimple_call_fndecl (call);\n+\tif (!callee_decl)\n+\t  continue;\n+\ttree callee_name = DECL_NAME (callee_decl);\n+\tif (!callee_name)\n+\t  continue;\n+\tconst char *callee = IDENTIFIER_POINTER (callee_name);\n+\n+\t/* Various dumping tests, done at callsites,\n+\t   controlled by the callee name.  */\n+\tif (strcmp (callee, \"test_string_literal\") == 0)\n+\t  dump_printf_loc (MSG_NOTE, stmt, \"test of dump for %qs\\n\",\n+\t\t\t   callee);\n+\telse if (strcmp (callee, \"test_tree\") == 0)\n+\t  dump_printf_loc (MSG_NOTE, stmt, \"test of tree: %T\\n\",\n+\t\t\t   integer_zero_node);\n+\telse if (strcmp (callee, \"test_gimple\") == 0)\n+\t  dump_printf_loc (MSG_NOTE, stmt, \"test of gimple: %G\", stmt);\n+\telse if (strcmp (callee, \"test_cgraph_node\") == 0)\n+\t  {\n+\t    dump_printf_loc (MSG_NOTE, stmt, \"test of callgraph node: \");\n+\t    dump_symtab_node (MSG_NOTE, cgraph_node::get (callee_decl));\n+\t    dump_printf (MSG_NOTE, \"\\n\");\n+\t  }\n+\telse if (strcmp (callee, \"test_wide_int\") == 0)\n+\t  {\n+\t    HOST_WIDE_INT val = 0;\n+\t    dump_printf_loc (MSG_NOTE, stmt,\n+\t\t\t     \"test of wide int: \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n+\t\t\t     val);\n+\t  }\n+\telse if (strcmp (callee, \"test_poly_int\") == 0)\n+\t  {\n+\t    dump_printf_loc (MSG_NOTE, stmt, \"test of poly int: \");\n+\t    dump_dec (MSG_NOTE, poly_int64 (42));\n+\t    dump_printf (MSG_NOTE, \"\\n\");\n+\t  }\n+\telse if (strcmp (callee, \"test_scopes\") == 0)\n+\t  {\n+\t    AUTO_DUMP_SCOPE (\"outer scope\", stmt);\n+\t    {\n+\t      dump_printf_loc (MSG_NOTE, stmt, \"at outer scope\\n\");\n+\t      AUTO_DUMP_SCOPE (\"middle scope\", stmt);\n+\t      {\n+\t\tdump_printf_loc (MSG_NOTE, stmt, \"at middle scope\\n\");\n+\t\tAUTO_DUMP_SCOPE (\"innermost scope\", stmt);\n+\t\tdump_printf_loc (MSG_NOTE, stmt, \"at innermost scope\\n\");\n+\t      }\n+\t    }\n+\t  }\n+      }\n+\n+  return 0;\n+}\n+\n+static gimple_opt_pass *\n+make_pass_test_dumping (gcc::context *ctxt)\n+{\n+  return new pass_test_dumping (ctxt);\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+  struct register_pass_info pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n+\n+  if (!plugin_default_version_check (version, &gcc_version))\n+    return 1;\n+\n+  pass_info.pass = make_pass_test_dumping (g);\n+  pass_info.reference_pass_name = \"ssa\";\n+  pass_info.ref_pass_instance_number = 1;\n+  pass_info.pos_op = PASS_POS_INSERT_AFTER;\n+  register_callback (plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL,\n+\t\t     &pass_info);\n+\n+  return 0;\n+}"}, {"sha": "50db3ae77adbb2abca48db7ef543eabe919906ae", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d98e5a6bc715cc865b9110ff0255572ac22570d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=5d98e5a6bc715cc865b9110ff0255572ac22570d", "patch": "@@ -101,6 +101,8 @@ set plugin_test_list [list \\\n \t  must-tail-call-2.c } \\\n     { expensive_selftests_plugin.c \\\n \t  expensive-selftests-1.c } \\\n+    { dump_plugin.c \\\n+\t  dump-1.c } \\\n ]\n \n foreach plugin_test $plugin_test_list {"}]}