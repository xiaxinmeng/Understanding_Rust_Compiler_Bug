{"sha": "d27153f038c2f39ed1b7e6ba9dab59f88b8ca245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3MTUzZjAzOGMyZjM5ZWQxYjdlNmJhOWRhYjU5Zjg4YjhjYTI0NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-15T14:00:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-15T15:52:25Z"}, "message": "libstdc++: Add missing return and use reserved name\n\nThe once_flag::_M_activate() function is only ever called immediately\nafter a call to once_flag::_M_passive(), and so in the non-gthreads case\nit is impossible for _M_passive() to be true in the body of\n_M_activate(). Add a check for it anyway, to avoid warnings about\nmissing return.\n\nAlso replace a non-reserved name with a reserved one.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/mutex (once_flag::_M_activate()): Add explicit\n\treturn statement for passive case.\n\t(once_flag::_M_finish(bool)): Use reserved name for parameter.", "tree": {"sha": "ab414963f73495cd1e61545cffb3294fd254c31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab414963f73495cd1e61545cffb3294fd254c31d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe07a74bb7a2692eff2af151ca54e749ed5eba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe07a74bb7a2692eff2af151ca54e749ed5eba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe07a74bb7a2692eff2af151ca54e749ed5eba6"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f96c48e88ecf681d74eab13f87c14d407d5b702f", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27153f038c2f39ed1b7e6ba9dab59f88b8ca245/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=d27153f038c2f39ed1b7e6ba9dab59f88b8ca245", "patch": "@@ -706,6 +706,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool _M_activate();\n \n     // Must be called to complete an active execution.\n+    // The argument is true if the active execution was a returning execution,\n+    // false if it was an exceptional execution.\n     void _M_finish(bool __returning) noexcept;\n \n     // RAII helper to call _M_finish.\n@@ -742,18 +744,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline bool\n   once_flag::_M_activate()\n   {\n-    if (_M_once == _Bits::_Init)\n+    if (_M_once == _Bits::_Init) [[__likely__]]\n       {\n \t_M_once = _Bits::_Active;\n \treturn true;\n       }\n-    else if (!_M_passive())\n+    else if (_M_passive()) // Caller should have checked this already.\n+      return false;\n+    else\n       __throw_system_error(EDEADLK);\n   }\n \n   inline void\n-  once_flag::_M_finish(bool returning) noexcept\n-  { _M_once = returning ? _Bits::_Done : _Bits::_Init; }\n+  once_flag::_M_finish(bool __returning) noexcept\n+  { _M_once = __returning ? _Bits::_Done : _Bits::_Init; }\n \n #elif defined _GLIBCXX_HAVE_LINUX_FUTEX\n "}]}