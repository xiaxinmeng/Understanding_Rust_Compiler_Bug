{"sha": "01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmOGE4YjQ4ZTUwY2JhYTY4Yjg3OGQ5ZjhhMzMwYjhjMDczNmJlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:26:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:34:16Z"}, "message": "openmp: Diagnose syntax mismatches between declare target and end declare target\n\nOpenMP 5.1 says:\nFor any directive that has a paired end directive, including those with a begin\nand end pair, both directives must use either the attribute syntax or the\npragma syntax.\n\nThe following patch enforces it with the only pair so far recognized in C++\n(Fortran has many, but on the other side doesn't have attribute syntax).\n\nWhile I initially wanted to use vec<bool, va_gc> *member; in there, that\nunfortunately doesn't work, one gets linker errors and I guess it is fixable,\nbut for begin declare target we'll need a struct anyway to store device_type\netc.\n\n2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n\n\t* cp-tree.h (omp_declare_target_attr): New type.\n\t(struct saved_scope): Change type of omp_declare_target_attribute\n\tfrom int to vec<omp_declare_target_attr, va_gc> * and move it.\n\t* parser.c (cp_parser_omp_declare_target): Instead of\n\tincrementing scope_chain->omp_declare_target_attribute, push\n\ta struct containing parser->lexer->in_omp_attribute_pragma to\n\tthe vector.\n\t(cp_parser_omp_end_declare_target): Instead of decrementing\n\tscope_chain->omp_declare_target_attribute, pop a structure\n\tfrom it.  Diagnose mismatching declare target vs.\n\tend declare target syntax.\n\t* semantics.c (finish_translation_unit): Use vec_safe_length\n\tand vec_safe_truncate on scope_chain->omp_declare_target_attributes.\n\t* decl2.c (cplus_decl_attributes): Use vec_safe_length\n\ton scope_chain->omp_declare_target_attributes.\n\n\t* g++.dg/gomp/attrs-12.C: New test.", "tree": {"sha": "b07d5d4e0f30c9177afdb77c60e6922ec600f64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b07d5d4e0f30c9177afdb77c60e6922ec600f64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "bd3f12a393e4d1507b2400586c91ce19a6687e77", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "patch": "@@ -1789,6 +1789,10 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n };\n \n \f\n+struct GTY(()) omp_declare_target_attr {\n+  bool attr_syntax;\n+};\n+\n /* Global state.  */\n \n struct GTY(()) saved_scope {\n@@ -1826,9 +1830,6 @@ struct GTY(()) saved_scope {\n   int unevaluated_operand;\n   int inhibit_evaluation_warnings;\n   int noexcept_operand;\n-  /* If non-zero, implicit \"omp declare target\" attribute is added into the\n-     attribute lists.  */\n-  int omp_declare_target_attribute;\n   int ref_temp_count;\n \n   struct stmt_tree_s x_stmt_tree;\n@@ -1837,6 +1838,7 @@ struct GTY(()) saved_scope {\n   cp_binding_level *bindings;\n \n   hash_map<tree, tree> *GTY((skip)) x_local_specializations;\n+  vec<omp_declare_target_attr, va_gc> *omp_declare_target_attribute;\n \n   struct saved_scope *prev;\n };"}, {"sha": "0c9d2f468a02f2a487f3811f86e98c21e28ecc38", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "patch": "@@ -1551,7 +1551,7 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n     return;\n \n   /* Add implicit \"omp declare target\" attribute if requested.  */\n-  if (scope_chain->omp_declare_target_attribute\n+  if (vec_safe_length (scope_chain->omp_declare_target_attribute)\n       && ((VAR_P (*decl)\n \t   && (TREE_STATIC (*decl) || DECL_EXTERNAL (*decl)))\n \t  || TREE_CODE (*decl) == FUNCTION_DECL))"}, {"sha": "74de52992bca9c5f6bd8c63515dd7192c6f117c6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "patch": "@@ -44641,8 +44641,10 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n     }\n   else\n     {\n+      struct omp_declare_target_attr a\n+\t= { parser->lexer->in_omp_attribute_pragma };\n+      vec_safe_push (scope_chain->omp_declare_target_attribute, a);\n       cp_parser_require_pragma_eol (parser, pragma_tok);\n-      scope_chain->omp_declare_target_attribute++;\n       return;\n     }\n   for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n@@ -44723,6 +44725,7 @@ static void\n cp_parser_omp_end_declare_target (cp_parser *parser, cp_token *pragma_tok)\n {\n   const char *p = \"\";\n+  bool in_omp_attribute_pragma = parser->lexer->in_omp_attribute_pragma;\n   if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n     {\n       tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n@@ -44753,12 +44756,26 @@ cp_parser_omp_end_declare_target (cp_parser *parser, cp_token *pragma_tok)\n       return;\n     }\n   cp_parser_require_pragma_eol (parser, pragma_tok);\n-  if (!scope_chain->omp_declare_target_attribute)\n+  if (!vec_safe_length (scope_chain->omp_declare_target_attribute))\n     error_at (pragma_tok->location,\n \t      \"%<#pragma omp end declare target%> without corresponding \"\n \t      \"%<#pragma omp declare target%>\");\n   else\n-    scope_chain->omp_declare_target_attribute--;\n+    {\n+      omp_declare_target_attr\n+\ta = scope_chain->omp_declare_target_attribute->pop ();\n+      if (a.attr_syntax != in_omp_attribute_pragma)\n+\t{\n+\t  if (a.attr_syntax)\n+\t    error_at (pragma_tok->location,\n+\t\t      \"%<declare target%> in attribute syntax terminated \"\n+\t\t      \"with %<end declare target%> in pragma syntax\");\n+\t  else\n+\t    error_at (pragma_tok->location,\n+\t\t      \"%<declare target%> in pragma syntax terminated \"\n+\t\t      \"with %<end declare target%> in attribute syntax\");\n+\t}\n+    }\n }\n \n /* Helper function of cp_parser_omp_declare_reduction.  Parse the combiner"}, {"sha": "2e23818cdd98752f2a17541425c7a30bd17c9db5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "patch": "@@ -3271,12 +3271,12 @@ finish_translation_unit (void)\n   /* Do file scope __FUNCTION__ et al.  */\n   finish_fname_decls ();\n \n-  if (scope_chain->omp_declare_target_attribute)\n+  if (vec_safe_length (scope_chain->omp_declare_target_attribute))\n     {\n       if (!errorcount)\n \terror (\"%<#pragma omp declare target%> without corresponding \"\n \t       \"%<#pragma omp end declare target%>\");\n-      scope_chain->omp_declare_target_attribute = 0;\n+      vec_safe_truncate (scope_chain->omp_declare_target_attribute, 0);\n     }\n }\n "}, {"sha": "b613872952e6df89b336b8fd94e56b03a7288733", "filename": "gcc/testsuite/g++.dg/gomp/attrs-12.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f8a8b48e50cbaa68b878d9f8a330b8c0736bed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-12.C?ref=01f8a8b48e50cbaa68b878d9f8a330b8c0736bed", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { target c++11 } }\n+\n+#pragma omp declare target\n+#pragma omp declare target\n+[[omp::directive (declare target)]];\n+int a;\n+[[omp::directive (end declare target)]];\n+#pragma omp end declare target\n+#pragma omp end declare target\n+[[omp::directive (declare target)]];\n+int b;\n+#pragma omp end declare target\t\t// { dg-error \"'declare target' in attribute syntax terminated with 'end declare target' in pragma syntax\" }\n+#pragma omp declare target\n+int c;\n+[[omp::directive (end declare target)]];// { dg-error \"'declare target' in pragma syntax terminated with 'end declare target' in attribute syntax\" }\n+#pragma omp declare target\n+[[omp::directive (declare target)]];\n+int d;\n+#pragma omp end declare target\t\t// { dg-error \"'declare target' in attribute syntax terminated with 'end declare target' in pragma syntax\" }\n+#pragma omp declare target\n+int e;\n+[[omp::directive (end declare target)]];// { dg-error \"'declare target' in pragma syntax terminated with 'end declare target' in attribute syntax\" }\n+#pragma omp end declare target\n+[[omp::directive (declare target)]];\n+[[omp::directive (declare target)]];\n+int f;\n+#pragma omp end declare target\t\t// { dg-error \"'declare target' in attribute syntax terminated with 'end declare target' in pragma syntax\" }\n+#pragma omp declare target\n+int g;\n+[[omp::directive (end declare target)]];// { dg-error \"'declare target' in pragma syntax terminated with 'end declare target' in attribute syntax\" }\n+[[omp::directive (end declare target)]];\n+[[omp::directive (declare target)]];\n+#pragma omp declare target\n+int h;\n+#pragma omp end declare target\n+#pragma omp end declare target\t\t// { dg-error \"'declare target' in attribute syntax terminated with 'end declare target' in pragma syntax\" }\n+#pragma omp declare target\n+[[omp::directive (declare target)]];\n+int i;\n+[[omp::directive (end declare target)]];\n+[[omp::directive (end declare target)]];// { dg-error \"'declare target' in pragma syntax terminated with 'end declare target' in attribute syntax\" }"}]}