{"sha": "bf183413c6f6e745f1324e39586a65a4f9fcea3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxODM0MTNjNmY2ZTc0NWYxMzI0ZTM5NTg2YTY1YTRmOWZjZWEzZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-05T01:40:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-05T01:41:16Z"}, "message": "Go frontend: add -fgo-embedcfg option\n\nThis option will be used by the go command to implement go:embed directives,\nwhich are new with the upcoming Go 1.16 release.\n\n\t* lang.opt (fgo-embedcfg): New option.\n\t* go-c.h (struct go_create_gogo_args): Add embedcfg field.\n\t* go-lang.c (go_embedcfg): New static variable.\n\t(go_langhook_init): Set go_create_gogo_args embedcfg field.\n\t(go_langhook_handle_option): Handle OPT_fgo_embedcfg_.\n\t* gccgo.texi (Invoking gccgo): Document -fgo-embedcfg.", "tree": {"sha": "88af7c87a0e550bf34ab1942412ab28b58c26f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88af7c87a0e550bf34ab1942412ab28b58c26f9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf183413c6f6e745f1324e39586a65a4f9fcea3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf183413c6f6e745f1324e39586a65a4f9fcea3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf183413c6f6e745f1324e39586a65a4f9fcea3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf183413c6f6e745f1324e39586a65a4f9fcea3f/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15af33a88065f983181550fc53821f1c6e14c5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15af33a88065f983181550fc53821f1c6e14c5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15af33a88065f983181550fc53821f1c6e14c5c7"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "ce6b518bb7b01ce0a4eec9c91a678d4ad3943643", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=bf183413c6f6e745f1324e39586a65a4f9fcea3f", "patch": "@@ -262,6 +262,15 @@ Apply special rules for compiling the runtime package.  Implicit\n memory allocation is forbidden.  Some additional compiler directives\n are supported.\n \n+@item -fgo-embedcfg=@var{file}\n+@cindex @option{-fgo-embedcfg}\n+Identify a JSON file used to map patterns used with special\n+@code{//go:embed} comments to the files named by the patterns.  The\n+JSON file should have two components: @code{Patterns} maps each\n+pattern to a list of file names, and @code{Files} maps each file name\n+to a full path to the file.  This option is intended for use by the\n+@command{go} command to implement @code{//go:embed}.\n+\n @item -g\n @cindex @option{-g for gccgo}\n This is the standard @command{gcc} option (@pxref{Debugging Options, ,"}, {"sha": "5930eadf7fd8d892bdef7c142d039822f6b19710", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=bf183413c6f6e745f1324e39586a65a4f9fcea3f", "patch": "@@ -41,6 +41,7 @@ struct go_create_gogo_args\n   const char* prefix;\n   const char* relative_import_path;\n   const char* c_header;\n+  const char* embedcfg;\n   Backend* backend;\n   Linemap* linemap;\n   bool check_divide_by_zero;"}, {"sha": "a01db8dbdcd9a3a08989161762484275036da257", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=bf183413c6f6e745f1324e39586a65a4f9fcea3f", "patch": "@@ -89,6 +89,7 @@ static const char *go_pkgpath = NULL;\n static const char *go_prefix = NULL;\n static const char *go_relative_import_path = NULL;\n static const char *go_c_header = NULL;\n+static const char *go_embedcfg = NULL;\n \n /* Language hooks.  */\n \n@@ -112,6 +113,7 @@ go_langhook_init (void)\n   args.prefix = go_prefix;\n   args.relative_import_path = go_relative_import_path;\n   args.c_header = go_c_header;\n+  args.embedcfg = go_embedcfg;\n   args.check_divide_by_zero = go_check_divide_zero;\n   args.check_divide_overflow = go_check_divide_overflow;\n   args.compiling_runtime = go_compiling_runtime;\n@@ -282,6 +284,10 @@ go_langhook_handle_option (\n       go_c_header = arg;\n       break;\n \n+    case OPT_fgo_embedcfg_:\n+      go_embedcfg = arg;\n+      break;\n+\n     default:\n       /* Just return 1 to indicate that the option is valid.  */\n       break;"}, {"sha": "7d6780eb0cdb878f0b58e10b960c69455109c09b", "filename": "gcc/go/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf183413c6f6e745f1324e39586a65a4f9fcea3f/gcc%2Fgo%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Flang.opt?ref=bf183413c6f6e745f1324e39586a65a4f9fcea3f", "patch": "@@ -57,6 +57,10 @@ fgo-dump-\n Go Joined RejectNegative\n -fgo-dump-<type>\tDump Go frontend internal information.\n \n+fgo-embedcfg=\n+Go Joined RejectNegative\n+-fgo-embedcfg=<file>\tList embedded files via go:embed\n+\n fgo-optimize-\n Go Joined\n -fgo-optimize-<type>\tTurn on optimization passes in the frontend."}]}