{"sha": "231de190d1c8666748eb1c346d22c73946aba743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxZGUxOTBkMWM4NjY2NzQ4ZWIxYzM0NmQyMmM3Mzk0NmFiYTc0Mw==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-06-18T19:13:01Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-06-18T19:47:51Z"}, "message": "Use correct DWARF encoding for i8 and u8 types\n\nCurrently, the i8 and u8 types use the DWARF character encoding, like:\n\n <1><113>: Abbrev Number: 3 (DW_TAG_base_type)\n    <114>   DW_AT_byte_size   : 1\n    <115>   DW_AT_encoding    : 8\t(unsigned char)\n    <116>   DW_AT_name        : u8\n\nThis happens because gccrs uses signed_char_type_node and\nunsigned_char_type_node for i8 and u8, respectively.\n\nThis patch fixes this problem by arranging to use a custom integer\ntype instead.  Another option is to clear TYPE_STRING_FLAG on these\ntypes, but it was unclear to me whether this would impact other parts\nof GCC.", "tree": {"sha": "af6862493d16f88c204951bbe2b4e785a6dd715a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6862493d16f88c204951bbe2b4e785a6dd715a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231de190d1c8666748eb1c346d22c73946aba743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231de190d1c8666748eb1c346d22c73946aba743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231de190d1c8666748eb1c346d22c73946aba743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231de190d1c8666748eb1c346d22c73946aba743/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e200b89c0f62df1b1dd76c75ccfb90ea82fbb7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e200b89c0f62df1b1dd76c75ccfb90ea82fbb7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e200b89c0f62df1b1dd76c75ccfb90ea82fbb7e5"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "e6c8858a28d50c6c2e98dbdd654e764942db82fb", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231de190d1c8666748eb1c346d22c73946aba743/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231de190d1c8666748eb1c346d22c73946aba743/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=231de190d1c8666748eb1c346d22c73946aba743", "patch": "@@ -1,5 +1,5 @@\n // rust-gcc.cc -- Rust frontend to gcc IR.\n-// Copyright (C) 2011-2020 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2021 Free Software Foundation, Inc.\n // Contributed by Ian Lance Taylor, Google.\n // forked from gccgo\n \n@@ -867,8 +867,6 @@ Gcc_backend::integer_type (bool is_unsigned, int bits)\n     {\n       if (bits == INT_TYPE_SIZE)\n \ttype = unsigned_type_node;\n-      else if (bits == CHAR_TYPE_SIZE)\n-\ttype = unsigned_char_type_node;\n       else if (bits == SHORT_TYPE_SIZE)\n \ttype = short_unsigned_type_node;\n       else if (bits == LONG_TYPE_SIZE)\n@@ -882,8 +880,6 @@ Gcc_backend::integer_type (bool is_unsigned, int bits)\n     {\n       if (bits == INT_TYPE_SIZE)\n \ttype = integer_type_node;\n-      else if (bits == CHAR_TYPE_SIZE)\n-\ttype = signed_char_type_node;\n       else if (bits == SHORT_TYPE_SIZE)\n \ttype = short_integer_type_node;\n       else if (bits == LONG_TYPE_SIZE)"}, {"sha": "8f0dd19f3467c2f3fbb7a11726567ed83f6103d8", "filename": "gcc/testsuite/rust/debug/i8u8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231de190d1c8666748eb1c346d22c73946aba743/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231de190d1c8666748eb1c346d22c73946aba743/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs?ref=231de190d1c8666748eb1c346d22c73946aba743", "patch": "@@ -0,0 +1,12 @@\n+// i8 and u8 types should not have the DWARF 'char' encoding.\n+fn main () {\n+    let x : i8 = 5;\n+    let y : u8 = 7;\n+// { dg-do compile }\n+// Use -w to avoid warnings about the unused variables\n+// { dg-options \"-w -g -dA\" }\n+// DW_ATE_signed_char = 6\n+// { dg-final { scan-assembler-not \"0x6\\[^\\n\\r]* DW_AT_language\" } } */\n+// DW_ATE_unsigned_char = 8\n+// { dg-final { scan-assembler-not \"0x8\\[^\\n\\r]* DW_AT_language\" } } */\n+}"}]}