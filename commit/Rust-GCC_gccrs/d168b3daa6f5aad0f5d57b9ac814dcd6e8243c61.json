{"sha": "d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2OGIzZGFhNmY1YWFkMGY1ZDU3YjlhYzgxNGRjZDZlODI0M2M2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-17T21:40:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-17T21:40:41Z"}, "message": "PR c++/68377 - parenthesized expr in fold-expression\n\n\t* parser.c (cp_parser_fold_expression): Check TREE_NO_WARNING.\n\nFrom-SVN: r242561", "tree": {"sha": "56646e223299a79082b059fd82e40ca294c9e3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56646e223299a79082b059fd82e40ca294c9e3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77b384c53f2229b05513fb4b297d4c93da04f01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b384c53f2229b05513fb4b297d4c93da04f01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b384c53f2229b05513fb4b297d4c93da04f01a"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "5775ba64ac4ad6fceddc34f0a03e0c0c6633627d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "patch": "@@ -1,3 +1,8 @@\n+2016-11-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68377\n+\t* parser.c (cp_parser_fold_expression): Check TREE_NO_WARNING.\n+\n 2016-11-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/78373"}, {"sha": "3ab0b68653280d4d0864f2557627b2000c551319", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "patch": "@@ -4679,7 +4679,9 @@ cp_parser_fold_expression (cp_parser *parser, tree expr1)\n   /* The operands of a fold-expression are cast-expressions, so binary or\n      conditional expressions are not allowed.  We check this here to avoid\n      tentative parsing.  */\n-  if (is_binary_op (TREE_CODE (expr1)))\n+  if (EXPR_P (expr1) && TREE_NO_WARNING (expr1))\n+    /* OK, the expression was parenthesized.  */;\n+  else if (is_binary_op (TREE_CODE (expr1)))\n     error_at (location_of (expr1),\n \t      \"binary expression in operand of fold-expression\");\n   else if (TREE_CODE (expr1) == COND_EXPR)"}, {"sha": "e27db7a5dcf36262042df1f357174d901a67200c", "filename": "gcc/testsuite/g++.dg/cpp1z/fold8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C?ref=d168b3daa6f5aad0f5d57b9ac814dcd6e8243c61", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/68377\n+// { dg-options -std=c++1z }\n+\n+struct Sink { } s;\n+template <class T> Sink& operator<<(Sink&, const T&);\n+\n+template<class... Tx> \n+int f(Tx... xs) {\n+  return ((xs+1) + ...);\n+}\n+\n+int main() {\n+  s << f(3,4,5) << \"\\n\";\n+  return 0;\n+}"}]}