{"sha": "f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwMDdkOTlmODg4MjJhNTE3ZDE1YzZlNTZkY2JmYTY2ZThiNWRlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-18T19:42:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-18T19:42:56Z"}, "message": "re PR pch/54117 (FAIL: ./decl-3.h  -O0 -g (internal compiler error))\n\n\tPR pch/54117\n\t* c-opts.c (c_common_post_options): If debug info is enabled\n\tand non-dwarf*, refuse to load PCH files and when writing PCH\n\tfile warn.\n\n\t* lib/dg-pch.exp (pch-init, pch-finish,\n\tcheck_effective_target_pch_supported_debug): New procs.\n\t(dg-flags-pch): If $pch_unsupported, make tests UNSUPPORTED.\n\tLikewise if $pch_unsupported_debug and $flags include -g.\n\tSkip FAILs about missing *.gch file if $pch_unsupported_debug\n\tand dg-require-effective-target pch_unsupported_debug.\n\t* g++.dg/pch/pch.exp: Call pch-init and pch-finish.\n\t* objc.dg/pch/pch.exp: Likewise.\n\t* gcc.dg/pch/pch.exp: Likewise.\n\t* gcc.dg/pch/valid-1.c: Add dg-require-effective-target\n\tpch_unsupported_debug.\n\t* gcc.dg/pch/valid-1.hs: Likewise.\n\t* gcc.dg/pch/valid-1b.c: Likewise.\n\t* gcc.dg/pch/valid-1b.hs: Likewise.\n\nCo-Authored-By: Steven Bosscher <steven@gcc.gnu.org>\n\nFrom-SVN: r196124", "tree": {"sha": "7b02cc9cec1f8f91a89897774e64d87b4e3c7b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b02cc9cec1f8f91a89897774e64d87b4e3c7b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f587ca3697be53b818d72d06f763cd9d52186e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f587ca3697be53b818d72d06f763cd9d52186e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f587ca3697be53b818d72d06f763cd9d52186e6"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "40b6e5569560f98f3687a4bb90c89a03d8517265", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,11 @@\n+2013-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\t    Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR pch/54117\n+\t* c-opts.c (c_common_post_options): If debug info is enabled\n+\tand non-dwarf*, refuse to load PCH files and when writing PCH\n+\tfile warn.\n+\n 2013-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56167"}, {"sha": "4b6990a60c19b727c7b377423d81a0cae2b2cdbd", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -945,6 +945,16 @@ c_common_post_options (const char **pfilename)\n \t because the default address space slot then can't be used\n \t for the output PCH file.  */\n       if (pch_file)\n+\t{\n+\t  c_common_no_more_pch ();\n+\t  /* Only -g0 and -gdwarf* are supported with PCH, for other\n+\t     debug formats we warn here and refuse to load any PCH files.  */\n+\t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n+\t    warning (OPT_Wdeprecated,\n+\t\t     \"the \\\"%s\\\" debug format cannot be used with \"\n+\t\t     \"pre-compiled headers\", debug_type_names[write_symbols]);\n+\t}\n+      else if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n \tc_common_no_more_pch ();\n \n       /* Yuk.  WTF is this?  I do know ObjC relies on it somewhere.  */"}, {"sha": "8458cce659e428419edcf08ed98ff4a55412929f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,21 @@\n+2013-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/54117\n+\t* lib/dg-pch.exp (pch-init, pch-finish,\n+\tcheck_effective_target_pch_supported_debug): New procs.\n+\t(dg-flags-pch): If $pch_unsupported, make tests UNSUPPORTED.\n+\tLikewise if $pch_unsupported_debug and $flags include -g.\n+\tSkip FAILs about missing *.gch file if $pch_unsupported_debug\n+\tand dg-require-effective-target pch_unsupported_debug.\n+\t* g++.dg/pch/pch.exp: Call pch-init and pch-finish.\n+\t* objc.dg/pch/pch.exp: Likewise.\n+\t* gcc.dg/pch/pch.exp: Likewise.\n+\t* gcc.dg/pch/valid-1.c: Add dg-require-effective-target\n+\tpch_unsupported_debug.\n+\t* gcc.dg/pch/valid-1.hs: Likewise.\n+\t* gcc.dg/pch/valid-1b.c: Likewise.\n+\t* gcc.dg/pch/valid-1b.hs: Likewise.\n+\n 2013-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56366"}, {"sha": "db67c24f5b9dd385767439f92773646e0b426173", "filename": "gcc/testsuite/g++.dg/pch/pch.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -23,6 +23,7 @@ load_lib dg-pch.exp\n \n # Initialize `dg'.\n dg-init\n+pch-init\n \n set old_dg_do_what_default \"${dg-do-what-default}\"\n \n@@ -36,4 +37,5 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n set dg-do-what-default \"$old_dg_do_what_default\"\n \n # All done.\n+pch-finish\n dg-finish"}, {"sha": "7bf64df172c7a669ef745b5f13ea49f4e33d8c42", "filename": "gcc/testsuite/gcc.dg/pch/pch.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -26,6 +26,7 @@ load_lib torture-options.exp\n dg-init\n torture-init\n set-torture-options $DG_TORTURE_OPTIONS\n+pch-init\n \n set old_dg_do_what_default \"${dg-do-what-default}\"\n \n@@ -59,5 +60,6 @@ file delete $testh\n set dg-do-what-default \"$old_dg_do_what_default\"\n \n # All done.\n+pch-finish\n torture-finish\n dg-finish"}, {"sha": "d445c47d6f3c3c7df3b2e1d7b39d9cb4774d5ef1", "filename": "gcc/testsuite/gcc.dg/pch/valid-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.c?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target pch_supported_debug } */\n /* { dg-options \"-I. -Winvalid-pch -g\" } */\n \n #include \"valid-1.h\"/* { dg-warning \"created with -gnone, but used with -g\" } */"}, {"sha": "20d9f65dd72ecf34b1a6b9c6ec9d3e8716ec5fc8", "filename": "gcc/testsuite/gcc.dg/pch/valid-1.hs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1.hs?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target pch_supported_debug } */\n /* { dg-options \"-I. -Winvalid-pch -g0\" } */\n \n extern int x;"}, {"sha": "3113d0f744de6235c802aaef373d34a71bcd4b4c", "filename": "gcc/testsuite/gcc.dg/pch/valid-1b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.c?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target pch_supported_debug } */\n /* { dg-options \"-I. -Winvalid-pch -g0\" } */\n \n #include \"valid-1b.h\""}, {"sha": "93b2256e3555dcc065ec2017db6c716bdbf7b022", "filename": "gcc/testsuite/gcc.dg/pch/valid-1b.hs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fvalid-1b.hs?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target pch_supported_debug } */\n /* { dg-options \"-I. -Winvalid-pch -g\" } */\n \n extern int x;"}, {"sha": "1b3591a7506a142447e79ea511def68f4fd2672e", "filename": "gcc/testsuite/lib/dg-pch.exp", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -16,8 +16,49 @@\n \n load_lib copy-file.exp\n \n+proc pch-init { args } {\n+    global pch_unsupported_debug pch_unsupported\n+\n+    if [info exists pch_unsupported_debug] {\n+\terror \"pch-init: pch_unsupported_debug is not empty as expected\"\n+    }\n+    if [info exists pch_unsupported] {\n+\terror \"pch-init: pch_unsupported is not empty as expected\"\n+    }\n+\n+    set result [check_compile pchtest object \"int i;\" \"-g -x c-header\"]\n+    set pch_unsupported_debug \\\n+\t[regexp \"debug format cannot be used with pre-compiled headers\" \\\n+\t\t[lindex $result 0]]\n+\n+    set pch_unsupported 0\n+    if { $pch_unsupported_debug } {\n+\tverbose -log \"pch is unsupported with the debug info format\"\n+\n+\tset result [check_compile pchtest object \"int i;\" \"-x c-header\"]\n+\t    set pch_unsupported \\\n+\t\t[regexp \"debug format cannot be used with pre-compiled headers\" \\\n+\t\t\t[lindex $result 0]]\n+    }\n+}\n+\n+proc pch-finish { args } {\n+    global pch_unsupported_debug pch_unsupported\n+    unset pch_unsupported_debug\n+    unset pch_unsupported\n+}\n+\n+proc check_effective_target_pch_supported_debug { } {\n+    global pch_unsupported_debug\n+    if { $pch_unsupported_debug } {\n+\treturn 0\n+    }\n+    return 1\n+}\n+\n proc dg-flags-pch { subdir test otherflags options suffix } {\n     global runtests dg-do-what-default\n+    global pch_unsupported_debug pch_unsupported\n \n     # If we're only testing specific files and this isn't one of them, skip it.\n     if ![runtest_file_p $runtests $test] {\n@@ -35,6 +76,13 @@ proc dg-flags-pch { subdir test otherflags options suffix } {\n     foreach flags $options {\n \tverbose \"Testing $nshort, $otherflags $flags\" 1\n \n+\tif { $pch_unsupported != 0 \\\n+\t     || ( $pch_unsupported_debug != 0 && [regexp \" -g\" \" $flags\"] ) } {\n+\t    verbose -log \"$nshort unsupported because debug format conflicts with PCH\"\n+\t    unsupported \"$nshort $flags\"\n+\t    continue\n+\t}\n+\n \t# For the header files, the default is to precompile.\n \tset dg-do-what-default precompile\n \tcatch { file_on_host delete \"$bname$suffix\" }\n@@ -78,7 +126,8 @@ proc dg-flags-pch { subdir test otherflags options suffix } {\n  \t\t    fail \"$nshort $flags assembly comparison\"\n \t\t}\n \t    }\n-\t} else {\n+\t} elseif { $pch_unsupported_debug == 0 \\\n+\t\t   || [llength [grep $test \"{\\[ \\t\\]\\+dg-require-effective-target\\[ \\t\\]\\+pch_supported_debug\\[ \\t\\]\\+.*\\[ \\t\\]\\+}\"]] > 0 } {\n \t    verbose -log \"pch file '$bname$suffix.gch' missing\"\n \t    fail \"$nshort $flags\"\n \t    if { !$have_errs } {"}, {"sha": "e380390bba6220a8c464a8d9b80e3bc6df298959", "filename": "gcc/testsuite/objc.dg/pch/pch.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6007d99f88822a517d15c6e56dcbfa66e8b5dec/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp?ref=f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "patch": "@@ -24,8 +24,8 @@ load_lib torture-options.exp\n \n # Initialize `dg'.\n dg-init\n-\n torture-init\n+pch-init\n \n set-torture-options $DG_TORTURE_OPTIONS\n \n@@ -59,5 +59,6 @@ if [istarget \"*-*-darwin*\" ] {\n set dg-do-what-default \"$old_dg_do_what_default\"\n \n # All done.\n+pch-finish\n torture-finish\n dg-finish"}]}