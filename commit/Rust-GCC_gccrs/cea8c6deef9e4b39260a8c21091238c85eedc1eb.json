{"sha": "cea8c6deef9e4b39260a8c21091238c85eedc1eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhOGM2ZGVlZjllNGIzOTI2MGE4YzIxMDkxMjM4Yzg1ZWVkYzFlYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-31T12:50:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-31T12:50:31Z"}, "message": "basic_string.h: Use noexcept per the FDIS (minus compare(const string&)...\n\n2011-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h: Use noexcept per the FDIS (minus\n\tcompare(const string&), which uses char_traits::compare, which\n\tisn't noexcept; also no noexcept in the move assignment operator\n\tand move assign, see c++std-lib-30855).\n\t* include/bits/basic_string.tcc: Likewise.\n\t* include/ext/vstring.h: Likewise.\n\t* include/ext/vstring.tcc: Likewise.\n\t* include/debug/string: Likewise.\n\nFrom-SVN: r174479", "tree": {"sha": "41026865ae3bf7df9b8b46f92059b682c8662da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41026865ae3bf7df9b8b46f92059b682c8662da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cea8c6deef9e4b39260a8c21091238c85eedc1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea8c6deef9e4b39260a8c21091238c85eedc1eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea8c6deef9e4b39260a8c21091238c85eedc1eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea8c6deef9e4b39260a8c21091238c85eedc1eb/comments", "author": null, "committer": null, "parents": [{"sha": "35979cc235b090b2607d17598f73e6b079142e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35979cc235b090b2607d17598f73e6b079142e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35979cc235b090b2607d17598f73e6b079142e23"}], "stats": {"total": 221, "additions": 136, "deletions": 85}, "files": [{"sha": "6fcf67fe01fc8d3d6fe20f51537c3e5f020bf69c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -1,3 +1,14 @@\n+2011-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h: Use noexcept per the FDIS (minus\n+\tcompare(const string&), which uses char_traits::compare, which\n+\tisn't noexcept; also no noexcept in the move assignment operator\n+\tand move assign, see c++std-lib-30855).\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/ext/vstring.tcc: Likewise.\n+\t* include/debug/string: Likewise.\n+\n 2011-05-31  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/status_cxx200x.xml: Update."}, {"sha": "f82cfbb85b2406225033565dccf2f09f6d662610", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -499,7 +499,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The newly-created string contains the exact contents of @a str.\n        *  @a str is a valid, but unspecified string.\n        **/\n-      basic_string(basic_string&& __str)\n+      basic_string(basic_string&& __str) noexcept\n       : _M_dataplus(__str._M_dataplus)\n       {\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\t\n@@ -597,7 +597,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the %string.  Unshares the string.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       {\n \t_M_leak();\n \treturn iterator(_M_data());\n@@ -608,15 +608,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  character in the %string.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data()); }\n \n       /**\n        *  Returns a read/write iterator that points one past the last\n        *  character in the %string.  Unshares the string.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       {\n \t_M_leak();\n \treturn iterator(_M_data() + this->size());\n@@ -627,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  last character in the %string.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data() + this->size()); }\n \n       /**\n@@ -636,7 +636,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  order.  Unshares the string.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->end()); }\n \n       /**\n@@ -645,7 +645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->end()); }\n \n       /**\n@@ -654,7 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  element order.  Unshares the string.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->begin()); }\n \n       /**\n@@ -663,7 +663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -672,15 +672,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  character in the %string.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(this->_M_data()); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(this->_M_data() + this->size()); }\n \n       /**\n@@ -689,7 +689,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n \n       /**\n@@ -698,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n #endif\n \n@@ -707,18 +707,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_rep()->_M_length; }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      length() const\n+      length() const _GLIBCXX_NOEXCEPT\n       { return _M_rep()->_M_length; }\n \n       ///  Returns the size() of the largest possible %string.\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return _Rep::_S_max_size; }\n \n       /**\n@@ -765,7 +765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  before needing to allocate more memory.\n        */\n       size_type\n-      capacity() const\n+      capacity() const _GLIBCXX_NOEXCEPT\n       { return _M_rep()->_M_capacity; }\n \n       /**\n@@ -792,15 +792,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Erases the string, making it empty.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { _M_mutate(0, this->size(), 0); }\n \n       /**\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n \n       // Element access:\n@@ -1763,7 +1763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  happen.\n       */\n       const _CharT*\n-      c_str() const\n+      c_str() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n       /**\n@@ -1773,14 +1773,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  happen.\n       */\n       const _CharT*\n-      data() const\n+      data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_dataplus; }\n \n       /**\n@@ -1809,6 +1809,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1839,7 +1840,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  returns npos.\n       */\n       size_type\n-      find(_CharT __c, size_type __pos = 0) const;\n+      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a string.\n@@ -1853,6 +1854,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       rfind(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1897,7 +1899,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  returns npos.\n       */\n       size_type\n-      rfind(_CharT __c, size_type __pos = npos) const;\n+      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character of string.\n@@ -1911,6 +1913,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_first_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1957,7 +1960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Note: equivalent to find(c, pos).\n       */\n       size_type\n-      find_first_of(_CharT __c, size_type __pos = 0) const\n+      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n \n       /**\n@@ -1972,6 +1975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_last_of(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -2018,7 +2022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Note: equivalent to rfind(c, pos).\n       */\n       size_type\n-      find_last_of(_CharT __c, size_type __pos = npos) const\n+      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n \n       /**\n@@ -2033,6 +2037,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -2078,7 +2083,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  If not found, returns npos.\n       */\n       size_type\n-      find_first_not_of(_CharT __c, size_type __pos = 0) const;\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character not in string.\n@@ -2092,6 +2098,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -2137,7 +2144,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  found.  If not found, returns npos.\n       */\n       size_type\n-      find_last_not_of(_CharT __c, size_type __pos = npos) const;\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Get a substring."}, {"sha": "056e2657390d0c2e139be02bd6cf2a52c2e4dd9d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -759,7 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n-    find(_CharT __c, size_type __pos) const\n+    find(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __ret = npos;\n       const size_type __size = this->size();\n@@ -798,7 +798,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n-    rfind(_CharT __c, size_type __pos) const\n+    rfind(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __size = this->size();\n       if (__size)\n@@ -863,7 +863,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n-    find_first_not_of(_CharT __c, size_type __pos) const\n+    find_first_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       for (; __pos < this->size(); ++__pos)\n \tif (!traits_type::eq(_M_data()[__pos], __c))\n@@ -895,7 +895,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n-    find_last_not_of(_CharT __c, size_type __pos) const\n+    find_last_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __size = this->size();\n       if (__size)"}, {"sha": "0af690128c9dbaf50f7d72533b2bdb95c1cef8fa", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -1,6 +1,6 @@\n // Debugging string implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -114,7 +114,7 @@ namespace __gnu_debug\n       { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    basic_string(basic_string&& __str)\n+    basic_string(basic_string&& __str) noexcept\n     : _Base(std::move(__str))\n     { }\n \n@@ -171,37 +171,55 @@ namespace __gnu_debug\n \n     // 21.3.2 iterators:\n     iterator\n-    begin()\n+    begin() _GLIBCXX_NOEXCEPT\n     { return iterator(_Base::begin(), this); }\n \n     const_iterator\n-    begin() const\n+    begin() const _GLIBCXX_NOEXCEPT\n     { return const_iterator(_Base::begin(), this); }\n \n     iterator\n-    end()\n+    end() _GLIBCXX_NOEXCEPT\n     { return iterator(_Base::end(), this); }\n \n     const_iterator\n-    end() const\n+    end() const _GLIBCXX_NOEXCEPT\n     { return const_iterator(_Base::end(), this); }\n \n     reverse_iterator\n-    rbegin()\n+    rbegin() _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(end()); }\n \n     const_reverse_iterator\n-    rbegin() const\n+    rbegin() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(end()); }\n \n     reverse_iterator\n-    rend()\n+    rend() _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(begin()); }\n \n     const_reverse_iterator\n-    rend() const\n+    rend() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    const_iterator\n+    cbegin() const noexcept\n+    { return const_iterator(_Base::begin(), this); }\n+\n+    const_iterator\n+    cend() const noexcept\n+    { return const_iterator(_Base::end(), this); }\n+\n+    const_reverse_iterator\n+    crbegin() const noexcept\n+    { return const_reverse_iterator(end()); }\n+\n+    const_reverse_iterator\n+    crend() const noexcept\n+    { return const_reverse_iterator(begin()); }\n+#endif\n+\n     // 21.3.3 capacity:\n     using _Base::size;\n     using _Base::length;\n@@ -226,7 +244,7 @@ namespace __gnu_debug\n     using _Base::reserve;\n \n     void\n-    clear()\n+    clear() _GLIBCXX_NOEXCEPT\n     {\n       _Base::clear();\n       this->_M_invalidate_all();\n@@ -672,15 +690,15 @@ namespace __gnu_debug\n \n     // 21.3.6 string operations:\n     const _CharT*\n-    c_str() const\n+    c_str() const _GLIBCXX_NOEXCEPT\n     {\n       const _CharT* __res = _Base::c_str();\n       this->_M_invalidate_all();\n       return __res;\n     }\n \n     const _CharT*\n-    data() const\n+    data() const _GLIBCXX_NOEXCEPT\n     {\n       const _CharT* __res = _Base::data();\n       this->_M_invalidate_all();\n@@ -691,6 +709,7 @@ namespace __gnu_debug\n \n     size_type\n     find(const basic_string& __str, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find(__str, __pos); }\n \n     size_type\n@@ -708,11 +727,12 @@ namespace __gnu_debug\n     }\n \n     size_type\n-    find(_CharT __c, size_type __pos = 0) const\n+    find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n     { return _Base::find(__c, __pos); }\n \n     size_type\n     rfind(const basic_string& __str, size_type __pos = _Base::npos) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::rfind(__str, __pos); }\n \n     size_type\n@@ -730,11 +750,12 @@ namespace __gnu_debug\n     }\n \n     size_type\n-    rfind(_CharT __c, size_type __pos = _Base::npos) const\n+    rfind(_CharT __c, size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n     { return _Base::rfind(__c, __pos); }\n \n     size_type\n     find_first_of(const basic_string& __str, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find_first_of(__str, __pos); }\n \n     size_type\n@@ -752,12 +773,12 @@ namespace __gnu_debug\n     }\n \n     size_type\n-    find_first_of(_CharT __c, size_type __pos = 0) const\n+    find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n     { return _Base::find_first_of(__c, __pos); }\n \n     size_type\n     find_last_of(const basic_string& __str, \n-\t\t size_type __pos = _Base::npos) const\n+\t\t size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n     { return _Base::find_last_of(__str, __pos); }\n \n     size_type\n@@ -776,10 +797,12 @@ namespace __gnu_debug\n \n     size_type\n     find_last_of(_CharT __c, size_type __pos = _Base::npos) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find_last_of(__c, __pos); }\n \n     size_type\n     find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find_first_not_of(__str, __pos); }\n \n     size_type\n@@ -797,12 +820,13 @@ namespace __gnu_debug\n     }\n \n     size_type\n-    find_first_not_of(_CharT __c, size_type __pos = 0) const\n+    find_first_not_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n     { return _Base::find_first_not_of(__c, __pos); }\n \n     size_type\n     find_last_not_of(const basic_string& __str,\n \t\t\t\t  size_type __pos = _Base::npos) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find_last_not_of(__str, __pos); }\n \n     size_type\n@@ -821,6 +845,7 @@ namespace __gnu_debug\n \n     size_type\n     find_last_not_of(_CharT __c, size_type __pos = _Base::npos) const\n+      _GLIBCXX_NOEXCEPT\n     { return _Base::find_last_not_of(__c, __pos); }\n \n     basic_string\n@@ -868,10 +893,10 @@ namespace __gnu_debug\n     }\n \n     _Base&\n-    _M_base() { return *this; }\n+    _M_base() _GLIBCXX_NOEXCEPT       { return *this; }\n \n     const _Base&\n-    _M_base() const { return *this; }\n+    _M_base() const _GLIBCXX_NOEXCEPT { return *this; }\n \n     using _Safe_base::_M_invalidate_all;\n   };"}, {"sha": "08e85264655ccaef58ac8246d6d76048ec7f6161", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -156,7 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @a str.  The contents of @a str are a valid, but unspecified\n        *  string.\n        */\n-      __versa_string(__versa_string&& __str)\n+      __versa_string(__versa_string&& __str) noexcept\n       : __vstring_base(std::move(__str)) { }\n \n       /**\n@@ -309,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the %string.  Unshares the string.\n        */\n       iterator\n-      begin()\n+      begin() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_leak();\n \treturn iterator(this->_M_data());\n@@ -320,15 +320,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  character in the %string.\n        */\n       const_iterator\n-      begin() const\n+      begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_data()); }\n \n       /**\n        *  Returns a read/write iterator that points one past the last\n        *  character in the %string.  Unshares the string.\n        */\n       iterator\n-      end()\n+      end() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_leak();\n \treturn iterator(this->_M_data() + this->size());\n@@ -339,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  last character in the %string.\n        */\n       const_iterator\n-      end() const\n+      end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_data() + this->size()); }\n \n       /**\n@@ -348,7 +348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  order.  Unshares the string.\n        */\n       reverse_iterator\n-      rbegin()\n+      rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->end()); }\n \n       /**\n@@ -357,7 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      rbegin() const\n+      rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->end()); }\n \n       /**\n@@ -366,7 +366,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  element order.  Unshares the string.\n        */\n       reverse_iterator\n-      rend()\n+      rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->begin()); }\n \n       /**\n@@ -375,7 +375,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      rend() const\n+      rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -384,15 +384,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  character in the %string.\n        */\n       const_iterator\n-      cbegin() const\n+      cbegin() const noexcept\n       { return const_iterator(this->_M_data()); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(this->_M_data() + this->size()); }\n \n       /**\n@@ -401,7 +401,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  reverse element order.\n        */\n       const_reverse_iterator\n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n \n       /**\n@@ -410,7 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is done in reverse element order.\n        */\n       const_reverse_iterator\n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n #endif\n \n@@ -419,18 +419,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return this->_M_length(); }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      length() const\n+      length() const _GLIBCXX_NOEXCEPT\n       { return this->_M_length(); }\n \n       /// Returns the size() of the largest possible %string.\n       size_type\n-      max_size() const\n+      max_size() const _GLIBCXX_NOEXCEPT\n       { return this->_M_max_size(); }\n \n       /**\n@@ -477,7 +477,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  hold before needing to allocate more memory.\n        */\n       size_type\n-      capacity() const\n+      capacity() const _GLIBCXX_NOEXCEPT\n       { return this->_M_capacity(); }\n \n       /**\n@@ -505,15 +505,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Erases the string, making it empty.\n        */\n       void\n-      clear()\n+      clear() _GLIBCXX_NOEXCEPT\n       { this->_M_clear(); }\n \n       /**\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n       bool\n-      empty() const\n+      empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n \n       // Element access:\n@@ -1484,7 +1484,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  happen.\n       */\n       const _CharT*\n-      c_str() const\n+      c_str() const _GLIBCXX_NOEXCEPT\n       { return this->_M_data(); }\n \n       /**\n@@ -1494,14 +1494,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  happen.\n       */\n       const _CharT*\n-      data() const\n+      data() const _GLIBCXX_NOEXCEPT\n       { return this->_M_data(); }\n \n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */\n       allocator_type\n-      get_allocator() const\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n       { return allocator_type(this->_M_get_allocator()); }\n \n       /**\n@@ -1531,6 +1531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find(const __versa_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1561,7 +1562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  found.  If not found, returns npos.\n       */\n       size_type\n-      find(_CharT __c, size_type __pos = 0) const;\n+      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a string.\n@@ -1575,6 +1576,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       rfind(const __versa_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1620,7 +1622,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  found.  If not found, returns npos.\n       */\n       size_type\n-      rfind(_CharT __c, size_type __pos = npos) const;\n+      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character of string.\n@@ -1634,6 +1636,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_first_of(const __versa_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1681,7 +1684,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Note: equivalent to find(c, pos).\n       */\n       size_type\n-      find_first_of(_CharT __c, size_type __pos = 0) const\n+      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n \n       /**\n@@ -1697,6 +1700,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_last_of(const __versa_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1744,7 +1748,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Note: equivalent to rfind(c, pos).\n       */\n       size_type\n-      find_last_of(_CharT __c, size_type __pos = npos) const\n+      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n \n       /**\n@@ -1759,6 +1763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_first_not_of(const __versa_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1805,7 +1810,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  index where it was found.  If not found, returns npos.\n       */\n       size_type\n-      find_first_not_of(_CharT __c, size_type __pos = 0) const;\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character not in string.\n@@ -1820,7 +1826,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       size_type\n       find_last_not_of(const __versa_string& __str,\n-\t\t       size_type __pos = npos) const\n+\t\t       size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -1867,7 +1873,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  index where it was found.  If not found, returns npos.\n       */\n       size_type\n-      find_last_not_of(_CharT __c, size_type __pos = npos) const;\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Get a substring."}, {"sha": "2e059e0764ddc0b35914d1d1a2f5f9a4c87442dd", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea8c6deef9e4b39260a8c21091238c85eedc1eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=cea8c6deef9e4b39260a8c21091238c85eedc1eb", "patch": "@@ -291,7 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   template <typename, typename, typename> class _Base>\n     typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    find(_CharT __c, size_type __pos) const\n+    find(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __ret = npos;\n       const size_type __size = this->size();\n@@ -332,7 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   template <typename, typename, typename> class _Base>\n     typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    rfind(_CharT __c, size_type __pos) const\n+    rfind(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __size = this->size();\n       if (__size)\n@@ -402,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   template <typename, typename, typename> class _Base>\n     typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    find_first_not_of(_CharT __c, size_type __pos) const\n+    find_first_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       for (; __pos < this->size(); ++__pos)\n \tif (!traits_type::eq(this->_M_data()[__pos], __c))\n@@ -436,7 +436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   template <typename, typename, typename> class _Base>\n     typename __versa_string<_CharT, _Traits, _Alloc, _Base>::size_type\n     __versa_string<_CharT, _Traits, _Alloc, _Base>::\n-    find_last_not_of(_CharT __c, size_type __pos) const\n+    find_last_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n     {\n       size_type __size = this->size();\n       if (__size)"}]}