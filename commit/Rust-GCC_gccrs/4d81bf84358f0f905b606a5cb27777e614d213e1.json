{"sha": "4d81bf84358f0f905b606a5cb27777e614d213e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4MWJmODQzNThmMGY5MDViNjA2YTVjYjI3Nzc3ZTYxNGQyMTNlMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-28T11:30:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-28T11:30:41Z"}, "message": "re PR target/28806 (lround is not expanded inline to SSE conversion sequence)\n\n2006-10-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR target/28806\n\t* builtins.c (expand_builtin_int_roundingfn_2): Expand\n\tBUILT_IN_LROUND and BUILT_IN_LLROUND from here.\n\t(expand_builtin): Adjust likewise.\n\t* genopinit.c (optabs[]): Add lround optab.\n\t* optabs.c (init_optabs): Initialize lround_optab.\n\t* optabs.h (enum convert_optab_index): Add COI_lround.\n\t(lround_optab): Define.\n\t* config/i386/i386-protos.h (ix86_expand_lround): Declare.\n\t* config/i386/i386.c (ix86_sse_copysign_to_positive): New\n\tstatic function.\n\t(ix86_expand_lround): New function.\n\t* config/i386/i386.md (lround<mode>di2, lround<mode>si2):\n\tNew expanders.\n\t* doc/md.texi (lroundMN2): Document.\n\n\t* gcc.target/i386/math-torture/lround.c: New testcase.\n\nFrom-SVN: r118105", "tree": {"sha": "984f65a3da9766999d6ccf8748f98e89fbad2338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/984f65a3da9766999d6ccf8748f98e89fbad2338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d81bf84358f0f905b606a5cb27777e614d213e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d81bf84358f0f905b606a5cb27777e614d213e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d81bf84358f0f905b606a5cb27777e614d213e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d81bf84358f0f905b606a5cb27777e614d213e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f16dafb641b6c935c94f87c8ceaac9458dadc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f16dafb641b6c935c94f87c8ceaac9458dadc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f16dafb641b6c935c94f87c8ceaac9458dadc72"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "e64b3f487de267dc0835e2f0675e38c4d0f30f3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -1,3 +1,21 @@\n+2006-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/28806\n+\t* builtins.c (expand_builtin_int_roundingfn_2): Expand\n+\tBUILT_IN_LROUND and BUILT_IN_LLROUND from here.\n+\t(expand_builtin): Adjust likewise.\n+\t* genopinit.c (optabs[]): Add lround optab.\n+\t* optabs.c (init_optabs): Initialize lround_optab.\n+\t* optabs.h (enum convert_optab_index): Add COI_lround.\n+\t(lround_optab): Define.\n+\t* config/i386/i386-protos.h (ix86_expand_lround): Declare.\n+\t* config/i386/i386.c (ix86_sse_copysign_to_positive): New\n+\tstatic function.\n+\t(ix86_expand_lround): New function.\n+\t* config/i386/i386.md (lround<mode>di2, lround<mode>si2):\n+\tNew expanders.\n+\t* doc/md.texi (lroundMN2): Document.\n+\n 2006-10-28 Uros Bizjak <uros@kss-loka.si>\n \n \tPR target/29377"}, {"sha": "ecd946176998c54df17691cbea3137e758de2b7a", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -2341,6 +2341,9 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n       builtin_optab = lrint_optab; break;\n+    CASE_FLT_FN (BUILT_IN_LROUND):\n+    CASE_FLT_FN (BUILT_IN_LLROUND):\n+      builtin_optab = lround_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5770,6 +5773,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n+    CASE_FLT_FN (BUILT_IN_LROUND):\n+    CASE_FLT_FN (BUILT_IN_LLROUND):\n       target = expand_builtin_int_roundingfn_2 (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "13e80641ba82a629a71d77f8dd5e19aab8b34fae", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -157,6 +157,8 @@ extern void ix86_emit_i387_log1p (rtx, rtx);\n \n extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n \n+extern void ix86_expand_lround (rtx, rtx);\n+\n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);"}, {"sha": "a535b45f12c1de130f3507e659282e72f15c93cc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -19223,5 +19223,57 @@ asm_preferred_eh_data_format (int code, int global)\n     return DW_EH_PE_udata4;\n   return DW_EH_PE_absptr;\n }\n+\f\n+/* Expand copysign from SIGN to the positive value ABS_VALUE\n+   storing in RESULT.  */\n+static void\n+ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign)\n+{\n+  enum machine_mode mode = GET_MODE (sign);\n+  rtx sgn = gen_reg_rtx (mode);\n+  rtx mask = ix86_build_signbit_mask (mode, VECTOR_MODE_P (mode), false);\n+  if (!VECTOR_MODE_P (mode))\n+    {\n+      /* We need to generate a scalar mode mask in this case.  */\n+      rtx tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, const0_rtx));\n+      tmp = gen_rtx_VEC_SELECT (mode, mask, tmp);\n+      mask = gen_reg_rtx (mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, mask, tmp));\n+    }\n+  emit_insn (gen_rtx_SET (VOIDmode, sgn,\n+\t\t\t  gen_rtx_AND (mode, mask, sign)));\n+  emit_insn (gen_rtx_SET (VOIDmode, result,\n+\t\t\t  gen_rtx_IOR (mode, abs_value, sgn)));\n+}\n+\n+/* Expand SSE sequence for computing lround from OP1 storing\n+   into OP0.  */\n+void\n+ix86_expand_lround (rtx op0, rtx op1)\n+{\n+  /* C code for the stuff we're doing below:\n+       tmp = op1 + copysign (nextafter (0.5, 0.0), op1)\n+       return (long)tmp;\n+   */\n+  enum machine_mode mode = GET_MODE (op1);\n+  const struct real_format *fmt;\n+  REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+  rtx adj;\n+\n+  /* load nextafter (0.5, 0.0) */\n+  fmt = REAL_MODE_FORMAT (mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1);\n+  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+\n+  /* adj = copysign (0.5, op1) */\n+  adj = force_reg (mode, const_double_from_real_value (pred_half, mode));\n+  ix86_sse_copysign_to_positive (adj, adj, force_reg (mode, op1));\n+\n+  /* adj = op1 + adj */\n+  expand_simple_binop (mode, PLUS, adj, op1, adj, 0, OPTAB_DIRECT);\n+\n+  /* op0 = (imode)adj */\n+  expand_fix (op0, adj, 0);\n+}\n \n #include \"gt-i386.h\""}, {"sha": "d7c273377fc5c4d4b513873ce956b51c84b96059", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -17347,6 +17347,26 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"\")\n \n+(define_expand \"lround<mode>di2\"\n+  [(match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH && TARGET_64BIT\n+   && !flag_trapping_math && !flag_rounding_math\"\n+{\n+  ix86_expand_lround (operand0, operand1);\n+  DONE;\n+})\n+\n+(define_expand \"lround<mode>si2\"\n+  [(match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+   && !flag_trapping_math && !flag_rounding_math\"\n+{\n+  ix86_expand_lround (operand0, operand1);\n+  DONE;\n+})\n+\n ;; Rounding mode control word calculation could clobber FLAGS_REG.\n (define_insn_and_split \"frndintxf2_floor\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")"}, {"sha": "7b55db73c5edcebb502efb0b4e6113e504590200", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -3708,6 +3708,12 @@ Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number according to the current\n rounding mode and store in operand 0 (which has mode @var{n}).\n \n+@cindex @code{lround@var{m}@var{n}2}\n+@item @samp{lround@var{m}2}\n+Convert operand 1 (valid for floating point mode @var{m}) to fixed\n+point mode @var{n} as a signed number rounding to nearest and away\n+from zero and store in operand 0 (which has mode @var{n}).\n+\n @cindex @code{copysign@var{m}3} instruction pattern\n @item @samp{copysign@var{m}3}\n Store a value with the magnitude of operand 1 and the sign of operand"}, {"sha": "fcd2a68ff148dadc8294383af072e2e8956ed230", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -128,6 +128,7 @@ static const char * const optabs[] =\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\",\n   \"rint_optab->handlers[$A].insn_code = CODE_FOR_$(rint$a2$)\",\n   \"lrint_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lrint$F$a$I$b2$)\",\n+  \"lround_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lround$F$a$I$b2$)\",\n   \"sincos_optab->handlers[$A].insn_code = CODE_FOR_$(sincos$a3$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"asin_optab->handlers[$A].insn_code = CODE_FOR_$(asin$a2$)\","}, {"sha": "ea6b7f3a6ca38c7fa20f8f62948b60ed789b53d4", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -5365,6 +5365,7 @@ init_optabs (void)\n   sfloat_optab = init_convert_optab (FLOAT);\n   ufloat_optab = init_convert_optab (UNSIGNED_FLOAT);\n   lrint_optab = init_convert_optab (UNKNOWN);\n+  lround_optab = init_convert_optab (UNKNOWN);\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n@@ -5486,6 +5487,8 @@ init_optabs (void)\n \t\t\t\t MODE_INT, MODE_DECIMAL_FLOAT);\n   init_interclass_conv_libfuncs (lrint_optab, \"lrint\",\n \t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (lround_optab, \"lround\",\n+\t\t\t\t MODE_INT, MODE_FLOAT);\n \n   /* sext_optab is also used for FLOAT_EXTEND.  */\n   init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);"}, {"sha": "0afc2ecc68c27b51f8932ff20040f7e8889252c5", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -406,6 +406,7 @@ enum convert_optab_index\n   COI_ufloat,\n \n   COI_lrint,\n+  COI_lround,\n \n   COI_MAX\n };\n@@ -422,6 +423,7 @@ extern GTY(()) convert_optab convert_optab_table[COI_MAX];\n #define sfloat_optab (convert_optab_table[COI_sfloat])\n #define ufloat_optab (convert_optab_table[COI_ufloat])\n #define lrint_optab (convert_optab_table[COI_lrint])\n+#define lround_optab (convert_optab_table[COI_lround])\n \n /* These arrays record the insn_code of insns that may be needed to\n    perform input and output reloads of special objects.  They provide a"}, {"sha": "8f5a43528bf8ac2afbde7bd2bb659bf26cb5fc48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -1,3 +1,8 @@\n+2006-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/28806\n+\t* gcc.target/i386/math-torture/lround.c: New testcase.\n+\n 2006-10-27  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.dg/builtins-43.c: Add -fno-finite-math-only."}, {"sha": "756356d62d63fc689ffd3daab637315b9ea6cece", "filename": "gcc/testsuite/gcc.target/i386/math-torture/lround.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flround.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d81bf84358f0f905b606a5cb27777e614d213e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flround.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flround.c?ref=4d81bf84358f0f905b606a5cb27777e614d213e1", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do assemble } */\n+\n+long testlf (float x)\n+{\n+  return __builtin_lroundf (x);\n+}\n+long testl (double x)\n+{\n+  return __builtin_lround (x);\n+}\n+long testll (long double x)\n+{\n+  return __builtin_lroundl (x);\n+}\n+long long testllf (float x)\n+{\n+  return __builtin_llroundf (x);\n+}\n+long long testll_ (double x)\n+{\n+  return __builtin_llround (x);\n+}\n+long long testlll (long double x)\n+{\n+  return __builtin_llroundl (x);\n+}"}]}