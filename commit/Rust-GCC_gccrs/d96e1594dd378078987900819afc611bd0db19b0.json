{"sha": "d96e1594dd378078987900819afc611bd0db19b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2ZTE1OTRkZDM3ODA3ODk4NzkwMDgxOWFmYzYxMWJkMGRiMTliMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-13T21:14:28Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-16T14:07:50Z"}, "message": "This brings in resolution and type checking of the unit-type.\n\nIt is possible to assign and declare variables of unit-type which\ntranslate down to zero sized void_type_node.\n\nMore work is needed to handle array and ADT types using unit-type\nwhen emiting gimple. The name+type resolution should be generic enough.", "tree": {"sha": "7105c8abfaaabe2dbd997aee37e13fe0bed860c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7105c8abfaaabe2dbd997aee37e13fe0bed860c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96e1594dd378078987900819afc611bd0db19b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96e1594dd378078987900819afc611bd0db19b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96e1594dd378078987900819afc611bd0db19b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96e1594dd378078987900819afc611bd0db19b0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b9f235566d7d361709c5bc44e7c36598515946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b9f235566d7d361709c5bc44e7c36598515946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b9f235566d7d361709c5bc44e7c36598515946"}], "stats": {"total": 220, "additions": 198, "deletions": 22}, "files": [{"sha": "8a1fd6ee71ee72af04f5f9788665c3e1430ba7df", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -1345,6 +1345,8 @@ class TupleExpr : public ExprWithoutBlock\n     return tuple_elems;\n   }\n \n+  bool is_unit () const { return tuple_elems.size () == 0; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "5a0805b140fcc3ef405c0ed3444d6136baa5bcf3", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -223,8 +223,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-\n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n@@ -233,6 +231,11 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ParamType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::UnitType &type) override\n+  {\n+    translated = ctx->get_backend ()->void_type ();\n+  }\n+\n   void visit (TyTy::ADTType &type) override\n   {\n     ::Btype *compiled_type = nullptr;"}, {"sha": "d38ef04e28f404476f9b7b819ee7523787f32f41", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -38,7 +38,16 @@ class CompileExpr : public HIRCompileBase\n     return compiler.translated;\n   }\n \n-  virtual ~CompileExpr () {}\n+  void visit (HIR::TupleExpr &expr)\n+  {\n+    if (expr.is_unit ())\n+      {\n+\ttranslated = ctx->get_backend ()->unit_expression ();\n+\treturn;\n+      }\n+\n+    gcc_unreachable ();\n+  }\n \n   void visit (HIR::ReturnExpr &expr)\n   {\n@@ -85,10 +94,6 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n-    printf (\"have ast node id %u ref %u for expr [%s]\\n\",\n-\t    expr.get_mappings ().get_nodeid (), ref_node_id,\n-\t    expr.as_string ().c_str ());\n-\n     // these ref_node_ids will resolve to a pattern declaration but we are\n     // interested in the definition that this refers to get the parent id\n     Resolver::Definition def;"}, {"sha": "c52f605c14fa47930a04097d34bb934cf395960f", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -71,6 +71,18 @@ class CompileStmt : public HIRCompileBase\n     if (!stmt.has_init_expr ())\n       return;\n \n+    TyTy::TyBase *ty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (stmt.get_mappings ().get_hirid (),\n+\t\t\t\t\t &ty))\n+      {\n+\trust_fatal_error (stmt.get_locus (), \"failed to lookup var decl type\");\n+\treturn;\n+      }\n+\n+    // there is an ICE in GCC for void_node\n+    if (ty->get_kind () == TyTy::TypeKind::UNIT)\n+      return;\n+\n     Bvariable *var = nullptr;\n     if (!ctx->lookup_var_decl (stmt.get_mappings ().get_hirid (), &var))\n       {\n@@ -79,7 +91,8 @@ class CompileStmt : public HIRCompileBase\n \treturn;\n       }\n \n-    auto *init = CompileExpr::Compile (stmt.get_init_expr (), ctx);\n+    Bexpression *init = CompileExpr::Compile (stmt.get_init_expr (), ctx);\n+\n     auto fnctx = ctx->peek_fn ();\n     auto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var, init);\n     ctx->add_statement (s);"}, {"sha": "cd220e03b06b65aa93d8a6a7e93ef223e7db882f", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -45,8 +45,6 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &type) override { gcc_unreachable (); }\n-\n   void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n \n   void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n@@ -57,6 +55,11 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::UnitType &type) override\n+  {\n+    translated = backend->void_type ();\n+  }\n+\n   void visit (TyTy::FnType &type) override\n   {\n     Backend::Btyped_identifier receiver;"}, {"sha": "701efd5ae43ca2107c0ff2255269817fa2a4be99", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -132,7 +132,27 @@ class ASTLoweringExpr : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  virtual ~ASTLoweringExpr () {}\n+  void visit (AST::TupleExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> inner_attribs;\n+    std::vector<HIR::Attribute> outer_attribs;\n+    std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n+    for (auto &e : expr.get_tuple_elems ())\n+      {\n+\tHIR::Expr *t = ASTLoweringExpr::translate (e.get ());\n+\ttuple_elements.push_back (std::unique_ptr<HIR::Expr> (t));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n+\t\t\t    std::move (inner_attribs),\n+\t\t\t    std::move (outer_attribs), expr.get_locus ());\n+  }\n \n   void visit (AST::IfExpr &expr)\n   {"}, {"sha": "fdf8f46964bb6a0b7ec77d23b29a27dde276e0cc", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -33,12 +33,34 @@ class ASTLoweringType : public ASTLoweringBase\n   {\n     ASTLoweringType resolver;\n     type->accept_vis (resolver);\n+\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (),\n+      type->get_locus_slow ());\n+\n     return resolver.translated;\n   }\n \n-  virtual ~ASTLoweringType () {}\n+  void visit (AST::TupleType &tuple)\n+  {\n+    std::vector<std::unique_ptr<HIR::Type> > elems;\n+    for (auto &e : tuple.get_elems ())\n+      {\n+\tHIR::Type *t = ASTLoweringType::translate (e.get ());\n+\telems.push_back (std::unique_ptr<HIR::Type> (t));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, tuple.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::TupleType (std::move (mapping), std::move (elems),\n+\t\t\t\t     tuple.get_locus ());\n+  }\n \n-  virtual void visit (AST::TypePathSegment &segment)\n+  void visit (AST::TypePathSegment &segment)\n   {\n     HIR::PathIdentSegment ident (segment.get_ident_segment ().as_string ());\n     translated_segment\n@@ -47,7 +69,7 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t  segment.get_locus ());\n   }\n \n-  virtual void visit (AST::TypePath &path)\n+  void visit (AST::TypePath &path)\n   {\n     std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n "}, {"sha": "5d6350705b061e8b84ff7e5906db7b0b0154c61c", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -1233,6 +1233,17 @@ class TupleExpr : public ExprWithoutBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  const std::vector<std::unique_ptr<Expr> > &get_tuple_elems () const\n+  {\n+    return tuple_elems;\n+  }\n+  std::vector<std::unique_ptr<Expr> > &get_tuple_elems ()\n+  {\n+    return tuple_elems;\n+  }\n+\n+  bool is_unit () const { return tuple_elems.size () == 0; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "abab2689a9677fdaae714d0b9bc7d23154c564b0", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -35,7 +35,13 @@ class ResolveExpr : public ResolverBase\n     expr->accept_vis (resolver);\n   };\n \n-  ~ResolveExpr () {}\n+  void visit (AST::TupleExpr &expr)\n+  {\n+    if (expr.is_unit ())\n+      return;\n+\n+    gcc_unreachable ();\n+  }\n \n   void visit (AST::PathInExpression &expr)\n   {"}, {"sha": "ae352b927a94de09418d92c74c979612b29831de", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -40,7 +40,17 @@ class ResolveType : public ResolverBase\n       }\n   };\n \n-  ~ResolveType () {}\n+  void visit (AST::TupleType &tuple)\n+  {\n+    if (tuple.is_unit_type ())\n+      {\n+\tresolved_node = resolver->get_unit_type_node_id ();\n+\treturn;\n+      }\n+\n+    // TODO see github #78\n+    gcc_unreachable ();\n+  }\n \n   void visit (AST::TypePath &path)\n   {"}, {"sha": "e0b4f3ad7ed921bf5819e4ba64d3c870ff1b60fb", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -113,7 +113,7 @@ Resolver::insert_builtin_types (Rib *r)\n \t\t    Linemap::predeclared_location ());\n }\n \n-std::vector<AST::TypePath *> &\n+std::vector<AST::Type *> &\n Resolver::get_builtin_types ()\n {\n   return builtins;\n@@ -160,6 +160,16 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"bool\", builtins, rbool);\n   MKBUILTIN_TYPE (\"f32\", builtins, f32);\n   MKBUILTIN_TYPE (\"f64\", builtins, f64);\n+\n+  // unit type ()\n+  TyTy::UnitType *unit_tyty = new TyTy::UnitType (mappings->get_next_hir_id ());\n+  std::vector<std::unique_ptr<AST::Type> > elems;\n+  AST::TupleType *unit_type\n+    = new AST::TupleType (std::move (elems), Linemap::predeclared_location ());\n+  builtins.push_back (unit_type);\n+  tyctx->insert_builtin (unit_tyty->get_ref (), unit_type->get_node_id (),\n+\t\t\t unit_tyty);\n+  set_unit_type_node_id (unit_type->get_node_id ());\n }\n \n void"}, {"sha": "4d98e7fd46d59f157c0cbee71ae09b76e4faf606", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -209,7 +209,7 @@ class Resolver\n \n   // these will be required for type resolution passes to\n   // map back to tyty nodes\n-  std::vector<AST::TypePath *> &get_builtin_types ();\n+  std::vector<AST::Type *> &get_builtin_types ();\n \n   void push_new_name_rib (Rib *r);\n   void push_new_type_rib (Rib *r);\n@@ -232,6 +232,9 @@ class Resolver\n \n   NodeId get_global_type_node_id () { return global_type_node_id; }\n \n+  void set_unit_type_node_id (NodeId id) { unit_ty_node_id = id; }\n+  NodeId get_unit_type_node_id () { return unit_ty_node_id; }\n+\n private:\n   Resolver ();\n \n@@ -240,12 +243,13 @@ class Resolver\n   Analysis::Mappings *mappings;\n   TypeCheckContext *tyctx;\n \n-  std::vector<AST::TypePath *> builtins;\n+  std::vector<AST::Type *> builtins;\n \n   Scope name_scope;\n   Scope type_scope;\n \n   NodeId global_type_node_id;\n+  NodeId unit_ty_node_id;\n \n   // map a AST Node to a Rib\n   std::map<NodeId, Rib *> name_ribs;"}, {"sha": "02c12ee718a7ce6a82fb0c232687cb962804e6cf", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -254,6 +254,8 @@ class Backend\n   // Create a nil pointer expression.\n   virtual Bexpression *nil_pointer_expression () = 0;\n \n+  virtual Bexpression *unit_expression () = 0;\n+\n   // Create a reference to a variable.\n   virtual Bexpression *var_expression (Bvariable *var, Location) = 0;\n "}, {"sha": "748aa5a060fda4b69a1e224b9c2ae04ea35c5bf3", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -225,6 +225,8 @@ class Gcc_backend : public Backend\n     return this->make_expression (null_pointer_node);\n   }\n \n+  Bexpression *unit_expression () { return this->make_expression (void_node); }\n+\n   Bexpression *var_expression (Bvariable *var, Location);\n \n   Bexpression *indirect_expression (Btype *, Bexpression *expr,"}, {"sha": "d7729cc8be0b23adc0e7f6f77bcc9217065185cd", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -43,6 +43,22 @@ class TypeCheckExpr : public TypeCheckBase\n     return resolver.infered;\n   }\n \n+  void visit (HIR::TupleExpr &expr)\n+  {\n+    if (expr.is_unit ())\n+      {\n+\tauto unit_node_id = resolver->get_unit_type_node_id ();\n+\tif (!context->lookup_builtin (unit_node_id, &infered))\n+\t  {\n+\t    rust_error_at (expr.get_locus (),\n+\t\t\t   \"failed to lookup builtin unit type\");\n+\t  }\n+\treturn;\n+      }\n+\n+    gcc_unreachable ();\n+  }\n+\n   void visit (HIR::ReturnExpr &expr)\n   {\n     auto ret = context->peek_return_type ();"}, {"sha": "fdb4176002628cd15755ad6e0d0814d65b49cc58", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -76,6 +76,22 @@ class TypeCheckType : public TypeCheckBase\n     return resolver.translated;\n   }\n \n+  void visit (HIR::TupleType &tuple)\n+  {\n+    if (tuple.is_unit_type ())\n+      {\n+\tauto unit_node_id = resolver->get_unit_type_node_id ();\n+\tif (!context->lookup_builtin (unit_node_id, &translated))\n+\t  {\n+\t    rust_error_at (tuple.get_locus (),\n+\t\t\t   \"failed to lookup builtin unit type\");\n+\t  }\n+\treturn;\n+      }\n+\n+    gcc_unreachable ();\n+  }\n+\n   void visit (HIR::TypePath &path)\n   {\n     // check if this is already defined or not"}, {"sha": "3572f228915a54b6e0deb63b5b7d21d06fa3d388", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -33,6 +33,7 @@ class TypeCheckContext\n \n   ~TypeCheckContext ();\n \n+  bool lookup_builtin (NodeId id, TyTy::TyBase **type);\n   bool lookup_builtin (std::string name, TyTy::TyBase **type);\n   void insert_builtin (HirId id, NodeId ref, TyTy::TyBase *type);\n "}, {"sha": "15b4c2682200f4ba7b975afaa0be2e8a05790f6b", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -35,6 +35,21 @@ TypeCheckContext::TypeCheckContext () {}\n \n TypeCheckContext::~TypeCheckContext () {}\n \n+bool\n+TypeCheckContext::lookup_builtin (NodeId id, TyTy::TyBase **type)\n+{\n+  auto ref_it = node_id_refs.find (id);\n+  if (ref_it == node_id_refs.end ())\n+    return false;\n+\n+  auto it = resolved.find (ref_it->second);\n+  if (it == resolved.end ())\n+    return false;\n+\n+  *type = it->second;\n+  return true;\n+}\n+\n bool\n TypeCheckContext::lookup_builtin (std::string name, TyTy::TyBase **type)\n {"}, {"sha": "3c3107684a06b9bcd67ed0de45bd9ebee00cd665", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -108,13 +108,19 @@ class TyTyResolver\n \t{\n \t  auto combined = resolved_tyty->combine (it);\n \t  if (combined == nullptr)\n-\t    break;\n+\t    {\n+\t      rust_fatal_error (decl->get_locus_slow (),\n+\t\t\t\t\"type-check resolver failed\");\n+\t      break;\n+\t    }\n \n \t  resolved_tyty = combined;\n \t}\n \n       // something is not inferred we need to look at all references now\n-      if (resolved_tyty == nullptr || resolved_tyty->is_unit ())\n+      if (resolved_tyty == nullptr\n+\t  || resolved_tyty->get_kind () == TyTy::TypeKind::INFER\n+\t  || resolved_tyty->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  rust_fatal_error (decl->get_locus_slow (), \"failed to resolve type\");\n \t  return false;"}, {"sha": "ce23fa27536b7c7e21ead5df246653a5cef0ba26", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -215,7 +215,10 @@ class UnitRules : protected BaseRules\n     return resolved;\n   }\n \n-  void visit (IntType &type) override { rust_assert (false); }\n+  void visit (UnitType &type) override\n+  {\n+    resolved = new UnitType (type.get_ref ());\n+  }\n \n private:\n   UnitType *base;"}, {"sha": "ea1ebb3f0fdf5607039382a35b5ef2c9e8d8c7b5", "filename": "gcc/testsuite/rust.test/compilable/unit_type1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funit_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96e1594dd378078987900819afc611bd0db19b0/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funit_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funit_type1.rs?ref=d96e1594dd378078987900819afc611bd0db19b0", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a: () = ();\n+\n+    let b;\n+    b = ();\n+}"}]}