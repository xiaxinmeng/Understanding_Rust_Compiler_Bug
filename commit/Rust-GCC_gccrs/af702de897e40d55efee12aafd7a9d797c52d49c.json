{"sha": "af702de897e40d55efee12aafd7a9d797c52d49c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3MDJkZTg5N2U0MGQ1NWVmZWUxMmFhZmQ3YTlkNzk3YzUyZDQ5Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-02-04T17:01:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-02-04T17:01:30Z"}, "message": "c-typeck.c (build_c_cast): Warn when qualifiers are added to function types, not when they're taken away.\n\n\t* c-typeck.c (build_c_cast): Warn when qualifiers are added to\n\tfunction types, not when they're taken away.\n\nFrom-SVN: r49481", "tree": {"sha": "869f58d3da9166346a73429164908e4bd2f2cbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869f58d3da9166346a73429164908e4bd2f2cbd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af702de897e40d55efee12aafd7a9d797c52d49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af702de897e40d55efee12aafd7a9d797c52d49c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af702de897e40d55efee12aafd7a9d797c52d49c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af702de897e40d55efee12aafd7a9d797c52d49c/comments", "author": null, "committer": null, "parents": [{"sha": "e89a607588d6a34db572bb0277d65ec8334500ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89a607588d6a34db572bb0277d65ec8334500ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89a607588d6a34db572bb0277d65ec8334500ce"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "102e0abf8ebb0b232cc4a8002f2f6dc430f63992", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af702de897e40d55efee12aafd7a9d797c52d49c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af702de897e40d55efee12aafd7a9d797c52d49c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af702de897e40d55efee12aafd7a9d797c52d49c", "patch": "@@ -1,3 +1,8 @@\n+2002-02-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* c-typeck.c (build_c_cast): Warn when qualifiers are added to\n+\tfunction types, not when they're taken away.\n+\n Mon Feb  4 09:05:58 2002  Jeffrey A Law  (law@redhat.com)\n \n \t* cfgrtl.c (try_redirect_by_replacing_jump): Remove associated"}, {"sha": "a00c7241f7e0fc0f6873f408781f6c4a288782a4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af702de897e40d55efee12aafd7a9d797c52d49c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af702de897e40d55efee12aafd7a9d797c52d49c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=af702de897e40d55efee12aafd7a9d797c52d49c", "patch": "@@ -3819,7 +3819,8 @@ build_c_cast (type, expr)\n \t{\n \t  tree in_type = type;\n \t  tree in_otype = otype;\n-\t  int warn = 0;\n+\t  int added = 0;\n+\t  int discarded = 0;\n \n \t  /* Check that the qualifiers on IN_TYPE are a superset of\n \t     the qualifiers of IN_OTYPE.  The outermost level of\n@@ -3829,12 +3830,24 @@ build_c_cast (type, expr)\n \t    {\n \t      in_otype = TREE_TYPE (in_otype);\n \t      in_type = TREE_TYPE (in_type);\n-\t      warn |= (TYPE_QUALS (in_otype) & ~TYPE_QUALS (in_type));\n+\n+\t      /* GNU C allows cv-qualified function types.  'const'\n+\t\t means the function is very pure, 'volatile' means it\n+\t\t can't return.  We need to warn when such qualifiers\n+\t\t are added, not when they're taken away.  */\n+\t      if (TREE_CODE (in_otype) == FUNCTION_TYPE\n+\t\t  && TREE_CODE (in_type) == FUNCTION_TYPE)\n+\t\tadded |= (TYPE_QUALS (in_type) & ~TYPE_QUALS (in_otype));\n+\t      else\n+\t\tdiscarded |= (TYPE_QUALS (in_otype) & ~TYPE_QUALS (in_type));\n \t    }\n \t  while (TREE_CODE (in_type) == POINTER_TYPE\n \t\t && TREE_CODE (in_otype) == POINTER_TYPE);\n \n-\t  if (warn)\n+\t  if (added)\n+\t    warning (\"cast adds new qualifiers to function type\");\n+\n+\t  if (discarded)\n \t    /* There are qualifiers present in IN_OTYPE that are not\n \t       present in IN_TYPE.  */\n \t    warning (\"cast discards qualifiers from pointer target type\");"}]}