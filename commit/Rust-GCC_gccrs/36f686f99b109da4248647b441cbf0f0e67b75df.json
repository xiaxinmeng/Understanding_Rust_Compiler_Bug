{"sha": "36f686f99b109da4248647b441cbf0f0e67b75df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmNjg2Zjk5YjEwOWRhNDI0ODY0N2I0NDFjYmYwZjBlNjdiNzVkZg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2011-08-05T14:11:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T14:11:05Z"}, "message": "a-fihema.ads: Minor comment fix.\n\n2011-08-05  Bob Duff  <duff@adacore.com>\n\n\t* a-fihema.ads: Minor comment fix.\n\t* a-fihema.adb (Allocate, Deallocate): Assert that the alignment is\n\tcorrect.\n\t(Attach, Detach): Remove some unnecessary code.\n\t(Finalize): Remove Node_Ptr_To_Address, replace with a constant.\n\nFrom-SVN: r177440", "tree": {"sha": "84c79cf24c8a14efa901604c1f195d016ce3abcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c79cf24c8a14efa901604c1f195d016ce3abcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f686f99b109da4248647b441cbf0f0e67b75df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f686f99b109da4248647b441cbf0f0e67b75df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f686f99b109da4248647b441cbf0f0e67b75df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f686f99b109da4248647b441cbf0f0e67b75df/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7882673f4c6036951fbaea9bb23975f250587c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7882673f4c6036951fbaea9bb23975f250587c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7882673f4c6036951fbaea9bb23975f250587c01"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "90a95460b5827a9ea218d96a049d0b71ae793d5a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36f686f99b109da4248647b441cbf0f0e67b75df", "patch": "@@ -1,3 +1,11 @@\n+2011-08-05  Bob Duff  <duff@adacore.com>\n+\n+\t* a-fihema.ads: Minor comment fix.\n+\t* a-fihema.adb (Allocate, Deallocate): Assert that the alignment is\n+\tcorrect.\n+\t(Attach, Detach): Remove some unnecessary code.\n+\t(Finalize): Remove Node_Ptr_To_Address, replace with a constant.\n+\n 2011-08-05  Bob Duff  <duff@adacore.com>\n \n \t* a-fihema.ads, a-fihema.adb (Finalization_Collection): Avoid heap"}, {"sha": "7d54f533ace46b136485e6b676fe2e6d3c9c6d67", "filename": "gcc/ada/a-fihema.adb", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2Fa-fihema.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2Fa-fihema.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.adb?ref=36f686f99b109da4248647b441cbf0f0e67b75df", "patch": "@@ -131,6 +131,8 @@ package body Ada.Finalization.Heap_Management is\n             Storage_Size,\n             Alignment);\n       end if;\n+\n+      pragma Assert (Addr mod Alignment = 0);\n    end Allocate;\n \n    ------------\n@@ -147,11 +149,8 @@ package body Ada.Finalization.Heap_Management is\n       N.Prev := L;\n \n       Unlock_Task.all;\n-\n-   exception\n-      when others =>\n-         Unlock_Task.all;\n-         raise;\n+      --  Note: no need to unlock in case of exceptions; the above code cannot\n+      --  raise any.\n    end Attach;\n \n    ---------------\n@@ -176,6 +175,7 @@ package body Ada.Finalization.Heap_Management is\n       Alignment    : System.Storage_Elements.Storage_Count;\n       Has_Header   : Boolean := True)\n    is\n+      pragma Assert (Addr mod Alignment = 0);\n    begin\n       --  Deallocation of an object with controlled parts\n \n@@ -221,24 +221,35 @@ package body Ada.Finalization.Heap_Management is\n    ------------\n \n    procedure Detach (N : Node_Ptr) is\n+      pragma Assert (N.Next /= null and then N.Prev /= null);\n+      --  It must be attached to some list\n+\n+      procedure Null_Out_Pointers;\n+      --  Set Next/Prev pointer of N to null (for debugging)\n+\n+      ----------\n+      -- Head --\n+      ----------\n+\n+      procedure Null_Out_Pointers is\n+      begin\n+         N.Next := null;\n+         N.Prev := null;\n+      end Null_Out_Pointers;\n+\n    begin\n       Lock_Task.all;\n \n-      if N.Prev /= null\n-        and then N.Next /= null\n-      then\n-         N.Prev.Next := N.Next;\n-         N.Next.Prev := N.Prev;\n-         N.Prev := null;\n-         N.Next := null;\n-      end if;\n+      N.Prev.Next := N.Next;\n+      N.Next.Prev := N.Prev;\n \n       Unlock_Task.all;\n+      --  Note: no need to unlock in case of exceptions; the above code cannot\n+      --  raise any.\n \n-   exception\n-      when others =>\n-         Unlock_Task.all;\n-         raise;\n+      pragma Debug (Null_Out_Pointers);\n+      --  No need to null out the pointers, except that it makes pcol easier to\n+      --  understand.\n    end Detach;\n \n    --------------\n@@ -248,19 +259,6 @@ package body Ada.Finalization.Heap_Management is\n    overriding procedure Finalize\n      (Collection : in out Finalization_Collection)\n    is\n-      function Node_Ptr_To_Address (N : Node_Ptr) return Address;\n-      --  Not the reverse of Address_To_Node_Ptr. Return the address of the\n-      --  object following the list header.\n-\n-      -------------------------\n-      -- Node_Ptr_To_Address --\n-      -------------------------\n-\n-      function Node_Ptr_To_Address (N : Node_Ptr) return Address is\n-      begin\n-         return N.all'Address + Header_Offset;\n-      end Node_Ptr_To_Address;\n-\n       Curr_Ptr : Node_Ptr := Collection.Objects.Next; -- skip dummy head\n       Ex_Occur : Exception_Occurrence;\n       Raised   : Boolean := False;\n@@ -284,8 +282,13 @@ package body Ada.Finalization.Heap_Management is\n          --  primitive Finalize_Address has been determined.\n \n          if Collection.Finalize_Address /= null then\n+            declare\n+               Object_Address : constant Address :=\n+                 Curr_Ptr.all'Address + Header_Offset;\n+               --  Get address of object from address of header\n+\n             begin\n-               Collection.Finalize_Address (Node_Ptr_To_Address (Curr_Ptr));\n+               Collection.Finalize_Address (Object_Address);\n \n             exception\n                when Fin_Except : others =>"}, {"sha": "41659d6e0d62bed48b4579e6b375ee9b4e60aea2", "filename": "gcc/ada/a-fihema.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2Fa-fihema.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f686f99b109da4248647b441cbf0f0e67b75df/gcc%2Fada%2Fa-fihema.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.ads?ref=36f686f99b109da4248647b441cbf0f0e67b75df", "patch": "@@ -118,9 +118,10 @@ private\n \n    type Node is record\n       --  This should really be limited, but we can see the full view of\n-      --  Limited_Controlled, which NOT limited. If it were limited, we could\n-      --  default initialize here, and get rid of Initialize for\n-      --  Finalization_Collection.\n+      --  Limited_Controlled, which is NOT limited. Note that default\n+      --  initialization does not happen for this type (these pointers will not\n+      --  be automatically set to null), because of the games we're playing\n+      --  with address arithmetic.\n \n       Prev : Node_Ptr;\n       Next : Node_Ptr;"}]}