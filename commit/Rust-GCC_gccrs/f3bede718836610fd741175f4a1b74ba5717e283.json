{"sha": "f3bede718836610fd741175f4a1b74ba5717e283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiZWRlNzE4ODM2NjEwZmQ3NDExNzVmNGExYjc0YmE1NzE3ZTI4Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-10T06:10:49Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-10T06:10:49Z"}, "message": "re PR c/51849 (-Wc99-compat would be considered useful)\n\n\tPR c/51849\ngcc/\n\t* gcc/doc/invoke.texi: Document -Wc90-c99-compat.\ngcc/c-family/\n\t* c-opts.c (sanitize_cpp_opts): Pass warn_c90_c99_compat to libcpp.\n\t* c.opt (Wc90-c99-compat): Add option.\ngcc/c/\n\t* c-decl.c (build_array_declarator): Remove check for !flag_isoc99.\n\tCall pedwarn_c90 instead of pedwarn.\n\t(check_bitfield_type_and_width): Likewise.\n\t(declspecs_add_qual): Likewise.\n\t(declspecs_add_type): Likewise.\n\t(warn_variable_length_array): Unify function for -pedantic and -Wvla.\n\tAdjust to only call pedwarn_c90.\n\t(grokdeclarator): Remove pedantic && !flag_isoc99 check.  Call\n\tpedwarn_c90 instead of pedwarn.\n\t* c-errors.c (pedwarn_c90): Handle -Wc90-c99-compat.\n\t* c-parser.c (disable_extension_diagnostics): Handle\n\twarn_c90_c99_compat.\n\t(restore_extension_diagnostics): Likewise.\n\t(c_parser_enum_specifier): Remove check for !flag_isoc99.  Call\n\tpedwarn_c90 instead of pedwarn.\n\t(c_parser_initelt): Likewise.\n\t(c_parser_postfix_expression): Likewise.\n\t(c_parser_postfix_expression_after_paren_type): Likewise.\n\t(c_parser_compound_statement_nostart): Remove check for !flag_isoc99.\n\t* c-tree.h: Fix formatting.\n\t* c-typeck.c (build_array_ref): Remove check for !flag_isoc99.  Call\n\tpedwarn_c90 instead of pedwarn.\ngcc/testsuite/\n\t* gcc.dg/Wc90-c99-compat-1.c: New test.\n\t* gcc.dg/Wc90-c99-compat-2.c: New test.\n\t* gcc.dg/Wc90-c99-compat-3.c: New test.\n\t* gcc.dg/Wc90-c99-compat-4.c: New test.\n\t* gcc.dg/Wc90-c99-compat-5.c: New test.\n\t* gcc.dg/Wc90-c99-compat-6.c: New test.\n\t* gcc.dg/wvla-1.c: Adjust dg-warning.\n\t* gcc.dg/wvla-2.c: Adjust dg-warning.\n\t* gcc.dg/wvla-4.c: Adjust dg-warning.\n\t* gcc.dg/wvla-6.c: Adjust dg-warning.\nlibcpp/\n\t* lex.c (_cpp_lex_direct): Warn when -Wc90-c99-compat is in effect.\n\t* charset.c (_cpp_valid_ucn): Likewise.\n\t* include/cpplib.h (cpp_options): Add cpp_warn_c90_c99_compat.\n\t* macro.c (replace_args): Warn when -Wc90-c99-compat is in effect.\n\t(parse_params): Likewise.\n\nFrom-SVN: r213786", "tree": {"sha": "ad84805c19739010caa9af61cb0d2c384e5aa852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad84805c19739010caa9af61cb0d2c384e5aa852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3bede718836610fd741175f4a1b74ba5717e283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bede718836610fd741175f4a1b74ba5717e283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bede718836610fd741175f4a1b74ba5717e283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bede718836610fd741175f4a1b74ba5717e283/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a9f1eed30e169e4d1cfbe4167190db495213406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9f1eed30e169e4d1cfbe4167190db495213406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9f1eed30e169e4d1cfbe4167190db495213406"}], "stats": {"total": 620, "additions": 511, "deletions": 109}, "files": [{"sha": "2bf03efb557fa4bf84c1c5a8f4ac90076fc80068", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1,3 +1,8 @@\n+2014-08-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/51849\n+\t* gcc/doc/invoke.texi: Document -Wc90-c99-compat.\n+\n 2014-08-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (get_dynamic_type): Handle case when instance is in"}, {"sha": "e71f6edd2b8c5df9a34a335c764f10d5701e12d2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1,3 +1,9 @@\n+2014-08-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/51849\n+\t* c-opts.c (sanitize_cpp_opts): Pass warn_c90_c99_compat to libcpp.\n+\t* c.opt (Wc90-c99-compat): Add option.\n+\n 2014-08-07  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* c-gimplify.c, cilk.c: Remove includes of pointer-set.h."}, {"sha": "43a8b9db62db58b378ff926f0b1ee5be1db596f8", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1295,6 +1295,7 @@ sanitize_cpp_opts (void)\n   cpp_opts->unsigned_char = !flag_signed_char;\n   cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n   cpp_opts->warn_date_time = cpp_warn_date_time;\n+  cpp_opts->cpp_warn_c90_c99_compat = warn_c90_c99_compat;\n \n   /* Wlong-long is disabled by default. It is enabled by:\n       [-Wpedantic | -Wtraditional] -std=[gnu|c]++98 ; or"}, {"sha": "356a79fe358f74ff17ad840aee18cfe9dc2d69c0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -291,6 +291,10 @@ Wbuiltin-macro-redefined\n C ObjC C++ ObjC++ Warning\n Warn when a built-in preprocessor macro is undefined or redefined\n \n+Wc90-c99-compat\n+C ObjC Var(warn_c90_c99_compat) Warning\n+Warn about features not present in ISO C90, but present in ISO C99\n+\n Wc++-compat\n C ObjC Var(warn_cxx_compat) Warning\n Warn about C constructs that are not in the common subset of C and C++"}, {"sha": "154768b2a49e12025973b2023f16ab9dff34077e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1,3 +1,29 @@\n+2014-08-10 Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/51849\n+\t* c-decl.c (build_array_declarator): Remove check for !flag_isoc99.\n+\tCall pedwarn_c90 instead of pedwarn.\n+\t(check_bitfield_type_and_width): Likewise.\n+\t(declspecs_add_qual): Likewise.\n+\t(declspecs_add_type): Likewise.\n+\t(warn_variable_length_array): Unify function for -pedantic and -Wvla.\n+\tAdjust to only call pedwarn_c90.\n+\t(grokdeclarator): Remove pedantic && !flag_isoc99 check.  Call\n+\tpedwarn_c90 instead of pedwarn.\n+\t* c-errors.c (pedwarn_c90): Handle -Wc90-c99-compat.\n+\t* c-parser.c (disable_extension_diagnostics): Handle\n+\twarn_c90_c99_compat.\n+\t(restore_extension_diagnostics): Likewise.\n+\t(c_parser_enum_specifier): Remove check for !flag_isoc99.  Call\n+\tpedwarn_c90 instead of pedwarn.\n+\t(c_parser_initelt): Likewise.\n+\t(c_parser_postfix_expression): Likewise.\n+\t(c_parser_postfix_expression_after_paren_type): Likewise.\n+\t(c_parser_compound_statement_nostart): Remove check for !flag_isoc99.\n+\t* c-tree.h: Fix formatting.\n+\t* c-typeck.c (build_array_ref): Remove check for !flag_isoc99.  Call\n+\tpedwarn_c90 instead of pedwarn.\n+\n 2014-08-07  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* c-typeck.c: Remove include of pointer-set.h."}, {"sha": "7ba35bf7e09da46686768b82167bcc6191f15534", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 39, "deletions": 73, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -3968,16 +3968,13 @@ build_array_declarator (location_t loc,\n     }\n   declarator->u.array.static_p = static_p;\n   declarator->u.array.vla_unspec_p = vla_unspec_p;\n-  if (!flag_isoc99)\n-    {\n-      if (static_p || quals != NULL)\n-\tpedwarn (loc, OPT_Wpedantic,\n+  if (static_p || quals != NULL)\n+    pedwarn_c90 (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<static%> or type \"\n \t\t \"qualifiers in parameter array declarators\");\n-      if (vla_unspec_p)\n-\tpedwarn (loc, OPT_Wpedantic,\n+  if (vla_unspec_p)\n+    pedwarn_c90 (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<[*]%> array declarators\");\n-    }\n   if (vla_unspec_p)\n     {\n       if (!current_scope->parm_flag)\n@@ -4891,10 +4888,9 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n   if (!in_system_header_at (input_location)\n       && type_mv != integer_type_node\n       && type_mv != unsigned_type_node\n-      && type_mv != boolean_type_node\n-      && !flag_isoc99)\n-    pedwarn (input_location, OPT_Wpedantic,\n-\t     \"type of bit-field %qs is a GCC extension\", name);\n+      && type_mv != boolean_type_node)\n+    pedwarn_c90 (input_location, OPT_Wpedantic,\n+\t\t \"type of bit-field %qs is a GCC extension\", name);\n \n   max_width = TYPE_PRECISION (*type);\n \n@@ -4925,52 +4921,27 @@ static void\n warn_variable_length_array (tree name, tree size)\n {\n   int const_size = TREE_CONSTANT (size);\n+  enum opt_code opt = (warn_vla == -1 && !warn_c90_c99_compat)\n+\t\t      ? OPT_Wpedantic : OPT_Wvla;\n \n-  if (!flag_isoc99 && pedantic && warn_vla != 0)\n+  if (const_size)\n     {\n-      if (const_size)\n-\t{\n-\t  if (name)\n-\t    pedwarn (input_location, OPT_Wvla,\n+      if (name)\n+\tpedwarn_c90 (input_location, opt,\n \t\t     \"ISO C90 forbids array %qE whose size \"\n-\t\t     \"can%'t be evaluated\",\n-\t\t     name);\n-\t  else\n-\t    pedwarn (input_location, OPT_Wvla, \"ISO C90 forbids array whose size \"\n-\t\t     \"can%'t be evaluated\");\n-\t}\n+\t\t     \"can%'t be evaluated\", name);\n       else\n-\t{\n-\t  if (name)\n-\t    pedwarn (input_location, OPT_Wvla,\n-\t\t     \"ISO C90 forbids variable length array %qE\",\n-\t\t     name);\n-\t  else\n-\t    pedwarn (input_location, OPT_Wvla, \"ISO C90 forbids variable length array\");\n-\t}\n+\tpedwarn_c90 (input_location, opt, \"ISO C90 forbids array \"\n+\t\t     \"whose size can%'t be evaluated\");\n     }\n-  else if (warn_vla > 0)\n+  else\n     {\n-      if (const_size)\n-        {\n-\t  if (name)\n-\t    warning (OPT_Wvla,\n-\t\t     \"the size of array %qE can\"\n-\t\t     \"%'t be evaluated\", name);\n-\t  else\n-\t    warning (OPT_Wvla,\n-\t\t     \"the size of array can %'t be evaluated\");\n-\t}\n+      if (name)\n+\tpedwarn_c90 (input_location, opt,\n+\t\t     \"ISO C90 forbids variable length array %qE\", name);\n       else\n-\t{\n-\t  if (name)\n-\t    warning (OPT_Wvla,\n-\t\t     \"variable length array %qE is used\",\n-\t\t     name);\n-\t  else\n-\t    warning (OPT_Wvla,\n-\t\t     \"variable length array is used\");\n-\t}\n+\tpedwarn_c90 (input_location, opt, \"ISO C90 forbids variable \"\n+\t\t     \"length array\");\n     }\n }\n \n@@ -5186,18 +5157,14 @@ grokdeclarator (const struct c_declarator *declarator,\n   as2 = TYPE_ADDR_SPACE (element_type);\n   address_space = ADDR_SPACE_GENERIC_P (as1)? as2 : as1;\n \n-  if (pedantic && !flag_isoc99)\n-    {\n-      if (constp > 1)\n-\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<const%>\");\n-      if (restrictp > 1)\n-\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<restrict%>\");\n-      if (volatilep > 1)\n-\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<volatile%>\");\n-      if (atomicp > 1)\n-\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<_Atomic%>\");\n-\n-    }\n+  if (constp > 1)\n+    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %<const%>\");\n+  if (restrictp > 1)\n+    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %<restrict%>\");\n+  if (volatilep > 1)\n+    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %<volatile%>\");\n+  if (atomicp > 1)\n+    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %<_Atomic%>\");\n \n   if (!ADDR_SPACE_GENERIC_P (as1) && !ADDR_SPACE_GENERIC_P (as2) && as1 != as2)\n     error_at (loc, \"conflicting named address spaces (%s vs %s)\",\n@@ -5602,10 +5569,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    flexible_array_member = (t->kind == cdk_id);\n \t\t  }\n \t\tif (flexible_array_member\n-\t\t    && pedantic && !flag_isoc99\n \t\t    && !in_system_header_at (input_location))\n-\t\t  pedwarn (loc, OPT_Wpedantic,\n-\t\t\t   \"ISO C90 does not support flexible array members\");\n+\t\t  pedwarn_c90 (loc, OPT_Wpedantic, \"ISO C90 does not \"\n+\t\t\t       \"support flexible array members\");\n \n \t\t/* ISO C99 Flexible array members are effectively\n \t\t   identical to GCC's zero-length array extension.  */\n@@ -9136,8 +9102,8 @@ declspecs_add_qual (source_location loc,\n     default:\n       gcc_unreachable ();\n     }\n-  if (dupe && !flag_isoc99)\n-    pedwarn (loc, OPT_Wpedantic, \"duplicate %qE\", qual);\n+  if (dupe)\n+    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %qE\", qual);\n   return specs;\n }\n \n@@ -9381,9 +9347,9 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t      break;\n \t    case RID_COMPLEX:\n \t      dupe = specs->complex_p;\n-\t      if (!flag_isoc99 && !in_system_header_at (loc))\n-\t\tpedwarn (loc, OPT_Wpedantic,\n-\t\t\t \"ISO C90 does not support complex types\");\n+\t      if (!in_system_header_at (loc))\n+\t\tpedwarn_c90 (loc, OPT_Wpedantic,\n+\t\t\t     \"ISO C90 does not support complex types\");\n \t      if (specs->typespec_word == cts_auto_type)\n \t\terror_at (loc,\n \t\t\t  (\"both %<complex%> and %<__auto_type%> in \"\n@@ -9599,9 +9565,9 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\t}\n \t      return specs;\n \t    case RID_BOOL:\n-\t      if (!flag_isoc99 && !in_system_header_at (loc))\n-\t\tpedwarn (loc, OPT_Wpedantic,\n-\t\t\t \"ISO C90 does not support boolean types\");\n+\t      if (!in_system_header_at (loc))\n+\t\tpedwarn_c90 (loc, OPT_Wpedantic,\n+\t\t\t     \"ISO C90 does not support boolean types\");\n \t      if (specs->long_p)\n \t\terror_at (loc,\n \t\t\t  (\"both %<long%> and %<_Bool%> in \""}, {"sha": "5a95b88925a50d4c0971bff9c1e7897c2292d434", "filename": "gcc/c/c-errors.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-errors.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -44,21 +44,38 @@ pedwarn_c99 (location_t location, int opt, const char *gmsgid, ...)\n   va_end (ap);\n }\n \n-/* Issue an ISO C90 pedantic warning MSGID.  This function is supposed to\n-   be used for matters that are allowed in ISO C99 but not supported in\n-   ISO C90, thus we explicitly don't pedwarn when C99 is specified.\n-   (There is no flag_c90.)  */\n+/* Issue an ISO C90 pedantic warning MSGID if -pedantic outside C99 mode,\n+   otherwise issue warning MSGID if -Wc90-c99-compat is specified, or if\n+   a specific option such as -Wlong-long is specified.\n+   This function is supposed to be used for matters that are allowed in\n+   ISO C99 but not supported in ISO C90, thus we explicitly don't pedwarn\n+   when C99 is specified.  (There is no flag_c90.)  */\n \n void\n pedwarn_c90 (location_t location, int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n+  bool warned = false;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n-\t\t       flag_isoc99 ? DK_WARNING : DK_PEDWARN);\n-  diagnostic.option_index = opt;\n-  report_diagnostic (&diagnostic);\n+  if (pedantic && !flag_isoc99)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_PEDWARN);\n+      diagnostic.option_index = opt;\n+      warned = report_diagnostic (&diagnostic);\n+    }\n+  else if (opt != OPT_Wpedantic)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n+      diagnostic.option_index = opt;\n+      warned = report_diagnostic (&diagnostic);\n+    }\n+  if (warn_c90_c99_compat && !warned)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n+      diagnostic.option_index = OPT_Wc90_c99_compat;\n+      report_diagnostic (&diagnostic);\n+    }\n   va_end (ap);\n }"}, {"sha": "ca8577cd63a11d0bbd9c153c0683ce80184f8826", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1072,14 +1072,16 @@ disable_extension_diagnostics (void)\n \t     | (flag_iso << 3)\n \t     | (warn_long_long << 4)\n \t     | (warn_cxx_compat << 5)\n-\t     | (warn_overlength_strings << 6));\n+\t     | (warn_overlength_strings << 6)\n+\t     | (warn_c90_c99_compat << 7));\n   cpp_opts->cpp_pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n   cpp_opts->cpp_warn_traditional = warn_traditional = 0;\n   flag_iso = 0;\n   cpp_opts->cpp_warn_long_long = warn_long_long = 0;\n   warn_cxx_compat = 0;\n   warn_overlength_strings = 0;\n+  warn_c90_c99_compat = 0;\n   return ret;\n }\n \n@@ -1096,6 +1098,7 @@ restore_extension_diagnostics (int flags)\n   cpp_opts->cpp_warn_long_long = warn_long_long = (flags >> 4) & 1;\n   warn_cxx_compat = (flags >> 5) & 1;\n   warn_overlength_strings = (flags >> 6) & 1;\n+  warn_c90_c99_compat = (flags >> 7) & 1;\n }\n \n /* Possibly kinds of declarator to parse.  */\n@@ -2545,8 +2548,9 @@ c_parser_enum_specifier (c_parser *parser)\n \t    }\n \t  if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n \t    {\n-\t      if (seen_comma && !flag_isoc99)\n-\t\tpedwarn (comma_loc, OPT_Wpedantic, \"comma at end of enumerator list\");\n+\t      if (seen_comma)\n+\t\tpedwarn_c90 (comma_loc, OPT_Wpedantic,\n+\t\t\t     \"comma at end of enumerator list\");\n \t      c_parser_consume_token (parser);\n \t      break;\n \t    }\n@@ -4348,9 +4352,9 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t{\n \t  if (c_parser_next_token_is (parser, CPP_EQ))\n \t    {\n-\t      if (!flag_isoc99)\n-\t\tpedwarn (des_loc, OPT_Wpedantic,\n-\t\t\t \"ISO C90 forbids specifying subobject to initialize\");\n+\t      pedwarn_c90 (des_loc, OPT_Wpedantic,\n+\t\t\t   \"ISO C90 forbids specifying subobject \"\n+\t\t\t   \"to initialize\");\n \t      c_parser_consume_token (parser);\n \t    }\n \t  else\n@@ -4566,10 +4570,9 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true,\n \t\t\t\t\t true, NULL, vNULL);\n \t  if (last_stmt)\n-\t    pedwarn_c90 (loc,\n-\t\t\t (pedantic && !flag_isoc99)\n-\t\t\t ? OPT_Wpedantic\n-\t\t\t : OPT_Wdeclaration_after_statement,\n+\t    pedwarn_c90 (loc, (pedantic && !flag_isoc99)\n+\t\t\t       ? OPT_Wpedantic\n+\t\t\t       : OPT_Wdeclaration_after_statement,\n \t\t\t \"ISO C90 forbids mixed declarations and code\");\n \t  last_stmt = false;\n \t}\n@@ -4598,8 +4601,8 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t      restore_extension_diagnostics (ext);\n \t      if (last_stmt)\n \t\tpedwarn_c90 (loc, (pedantic && !flag_isoc99)\n-\t\t\t     ? OPT_Wpedantic\n-\t\t\t     : OPT_Wdeclaration_after_statement,\n+\t\t\t\t  ? OPT_Wpedantic\n+\t\t\t\t  : OPT_Wdeclaration_after_statement,\n \t\t\t     \"ISO C90 forbids mixed declarations and code\");\n \t      last_stmt = false;\n \t    }\n@@ -7401,9 +7404,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n \t      }\n-\t    if (!flag_isoc99)\n-\t      pedwarn (loc, OPT_Wpedantic,\n-\t\t       \"ISO C90 does not support complex types\");\n+\t    pedwarn_c90 (loc, OPT_Wpedantic,\n+\t\t\t \"ISO C90 does not support complex types\");\n \t    expr.value = build2 (COMPLEX_EXPR,\n \t\t\t\t build_complex_type\n \t\t\t\t   (TYPE_MAIN_VARIANT\n@@ -7607,8 +7609,7 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n       type = error_mark_node;\n     }\n \n-  if (!flag_isoc99)\n-    pedwarn (start_loc, OPT_Wpedantic, \"ISO C90 forbids compound literals\");\n+  pedwarn_c90 (start_loc, OPT_Wpedantic, \"ISO C90 forbids compound literals\");\n   non_const = ((init.value && TREE_CODE (init.value) == CONSTRUCTOR)\n \t       ? CONSTRUCTOR_NON_CONST (init.value)\n \t       : init.original_code == C_MAYBE_CONST_EXPR);"}, {"sha": "55e71dcb31b687e9c0af3228c51c701c11660a45", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -676,7 +676,9 @@ extern tree c_omp_reduction_lookup (tree, tree);\n extern tree c_check_omp_declare_reduction_r (tree *, int *, void *);\n \n /* In c-errors.c */\n-extern void pedwarn_c90 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n-extern void pedwarn_c99 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n+extern void pedwarn_c90 (location_t, int opt, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n+extern void pedwarn_c99 (location_t, int opt, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n \n #endif /* ! GCC_C_TREE_H */"}, {"sha": "0ed92c699f753feb5a6968a3dda6c051b3fc01f0", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2510,17 +2510,18 @@ build_array_ref (location_t loc, tree array, tree index)\n \t    return error_mark_node;\n \t}\n \n-      if (pedantic)\n+      if (pedantic || warn_c90_c99_compat)\n \t{\n \t  tree foo = array;\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && C_DECL_REGISTER (foo))\n \t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C forbids subscripting %<register%> array\");\n-\t  else if (!flag_isoc99 && !lvalue_p (foo))\n-\t    pedwarn (loc, OPT_Wpedantic,\n-\t\t     \"ISO C90 forbids subscripting non-lvalue array\");\n+\t  else if (!lvalue_p (foo))\n+\t    pedwarn_c90 (loc, OPT_Wpedantic,\n+\t\t\t \"ISO C90 forbids subscripting non-lvalue \"\n+\t\t\t \"array\");\n \t}\n \n       type = TREE_TYPE (TREE_TYPE (array));"}, {"sha": "fdb0b8494db897eec570bbf61defc23cba94c0fd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -241,6 +241,7 @@ Objective-C and Objective-C++ Dialects}.\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Waggressive-loop-optimizations -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n+-Wc90-c99-compat @gol\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  @gol\n@@ -4517,6 +4518,15 @@ example, warn if an unsigned variable is compared against zero with\n Warn whenever a function call is cast to a non-matching type.\n For example, warn if @code{int malloc()} is cast to @code{anything *}.\n \n+@item -Wc90-c99-compat @r{(C and Objective-C only)}\n+@opindex Wc90-c99-compat\n+@opindex Wno-c90-c99-compat\n+Warn about features not present in ISO C90, but present in ISO C99.\n+For instance, warn about use of variable length arrays, @code{long long}\n+type, @code{bool} type, compound literals, designated initializers, and so\n+on.  This option is independent of the standards mode.  Warnings are disabled\n+in the expression that follows @code{__extension__}.\n+\n @item -Wc++-compat @r{(C and Objective-C only)}\n Warn about ISO C constructs that are outside of the common subset of\n ISO C and ISO C++, e.g.@: request for implicit conversion from"}, {"sha": "55884e4230fc88bca907f2b974d0dfddeac631eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1,3 +1,17 @@\n+2014-08-10 Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/51849\n+\t* gcc.dg/Wc90-c99-compat-1.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-2.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-3.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-4.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-5.c: New test.\n+\t* gcc.dg/Wc90-c99-compat-6.c: New test.\n+\t* gcc.dg/wvla-1.c: Adjust dg-warning.\n+\t* gcc.dg/wvla-2.c: Adjust dg-warning.\n+\t* gcc.dg/wvla-4.c: Adjust dg-warning.\n+\t* gcc.dg/wvla-6.c: Adjust dg-warning.\n+\n 2014-08-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/61999"}, {"sha": "15e71e8f8da0b1626d5a41e6d10c036ab4b5eef7", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-1.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -Wpedantic -Wc90-c99-compat\" } */\n+\n+_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-warning \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-warning \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-warning \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-warning \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-warning \"duplicate .const.\" } */\n+volatile volatile v; /* { dg-warning \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-warning \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-warning \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-warning \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-warning \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-warning \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-warning \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-warning \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-warning \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-warning \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "d00f0df89fe2498def4e92f16c0c77258be9e196", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-2.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wc90-c99-compat -pedantic-errors\" } */\n+\n+_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-warning \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-warning \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-warning \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-warning \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-warning \"duplicate .const.\" } */\n+volatile volatile int v; /* { dg-warning \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-warning \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-warning \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-warning \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-warning \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-warning \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-warning \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-warning \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-warning \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-warning \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "78f012c48aa39451fd68168adbd5dc361808370b", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-3.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-3.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -Wc90-c99-compat -pedantic-errors\" } */\n+\n+_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-warning \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-warning \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-warning \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-warning \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-warning \"duplicate .const.\" } */\n+volatile volatile int v; /* { dg-warning \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-warning \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-warning \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-warning \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-warning \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-warning \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-warning \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-warning \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-warning \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-warning \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "e8d2f03457a56c7e72a7d0f219ce006295d233c7", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-4.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -Wpedantic -Wno-c90-c99-compat\" } */\n+\n+_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-warning \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-warning \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-warning \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-warning \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-warning \"duplicate .const.\" } */\n+volatile volatile int v; /* { dg-warning \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-warning \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-warning \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-warning \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-warning \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-warning \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-warning \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-warning \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-warning \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-warning \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-warning \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "1344ae8666560fa283580b70682703e5d75e2e8b", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-5.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-5.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -pedantic-errors -Wno-c90-c99-compat\" } */\n+\n+_Bool b; /* { dg-error \"ISO C90 does not support boolean types\" } */\n+_Complex double c = __builtin_complex (0.0, 0.0); /* { dg-error \"ISO C90 does not support complex types\" } */\n+long long l; /* { dg-error \"ISO C90 does not support .long long.\" } */\n+struct A { int i; char a[]; }; /* { dg-error \"ISO C90 does not support flexible array members\" } */\n+struct { long int b: 2; } s; /* { dg-error \"type of bit-field .b. is a GCC extension\" } */\n+const const int i; /* { dg-error \"duplicate .const.\" } */\n+volatile volatile int v; /* { dg-error \"duplicate .volatile.\" } */\n+\n+struct S { int a[2]; };\n+extern struct S foo (void);\n+\n+#define V(v, ...) (v, __VA_ARGS) /* { dg-error \"anonymous variadic macros were introduced in C99\" } */\n+\n+enum { E, }; /* { dg-error \"comma at end of enumerator list\" } */\n+\n+void fn1 (char [*]); /* { dg-error \"ISO C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators\" } */\n+\n+void\n+fn2 (char x[static 4]) /* { dg-error \"ISO C90 does not support .static. or type qualifiers\" } */\n+{\n+  int i = (int) { 1 }; /* { dg-error \"ISO C90 forbids compound literals\" } */\n+  struct A a = { .i = 3 }; /* { dg-error \"ISO C90 forbids specifying subobject to initialize\" } */\n+}\n+\n+void\n+fn3 (int n)\n+{\n+  n = 3;\n+  int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn4 (int n)\n+{\n+  n = 3;\n+  __extension__ int i; /* { dg-error \"ISO C90 forbids mixed declarations and code\" } */\n+}\n+\n+void\n+fn5 (void)\n+{\n+  (foo ()).a[0]; /* { dg-error \"ISO C90 forbids subscripting non-lvalue array\" } */\n+}\n+\n+#define F(a) a\n+\n+void\n+fn6 (void)\n+{\n+  F(); /* { dg-error \"invoking macro F argument\" } */\n+}\n+\n+void fn7 (int n, int a[n]); /* { dg-error \"ISO C90 forbids variable length array .a.\" } */"}, {"sha": "8728cd9be98ed84c243e88489488ba694ecc2c90", "filename": "gcc/testsuite/gcc.dg/Wc90-c99-compat-6.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWc90-c99-compat-6.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90 -Wc90-c99-compat\" } */\n+\n+__extension__ _Bool b;\n+__extension__ _Complex double c = __builtin_complex (0.0, 0.0);\n+__extension__ long long l;\n+__extension__ struct A { int i; char a[]; };\n+__extension__ struct { long int b: 2; } s;\n+__extension__ const const int i;\n+__extension__ volatile volatile int v;\n+__extension__ struct S { int a[2]; };\n+extern struct S foo (void);\n+__extension__ enum { E, };\n+__extension__ void fn1 (char [*]);\n+\n+__extension__ void\n+fn2 (char x[static 4])\n+{\n+  int i = (int) { 1 };\n+  struct A a = { .i = 3 };\n+}\n+\n+__extension__ void\n+fn5 (void)\n+{\n+  (foo ()).a[0];\n+}\n+\n+__extension__ void fn7 (int n, int a[n]);"}, {"sha": "d2e3cb57d4fa4eb62fccd58c1e65b92d2e993fbd", "filename": "gcc/testsuite/gcc.dg/wvla-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-1.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=c89 -Wvla\" } */\n \n extern void \n-func (int i, int array[i]); /* { dg-warning \"variable length array 'array' is used\" } */\n+func (int i, int array[i]); /* { dg-warning \"ISO C90 forbids variable length array 'array'\" } */"}, {"sha": "92c67ed639f8f3d507d3cd0d09502b40cbd8b6e7", "filename": "gcc/testsuite/gcc.dg/wvla-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-2.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=c99 -Wvla\" } */\n \n extern void \n-func (int i, int array[i]); /* { dg-warning \"variable length array 'array' is used\" } */\n+func (int i, int array[i]); /* { dg-warning \"ISO C90 forbids variable length array 'array'\" } */"}, {"sha": "ae2e0b064a9974fcc583df8dc0492a913527ed11", "filename": "gcc/testsuite/gcc.dg/wvla-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-4.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-pedantic-errors -std=c99 -Wvla\" } */\n \n extern void \n-func (int i, int array[i]); /* { dg-warning \"variable length array 'array' is used\" } */\n+func (int i, int array[i]); /* { dg-warning \"ISO C90 forbids variable length array 'array'\" } */"}, {"sha": "694a4cc16ca0b5157f5be611324272d3573869d8", "filename": "gcc/testsuite/gcc.dg/wvla-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwvla-6.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2,4 +2,4 @@\n /* { dg-options \"-std=c89 -Wvla\" } */\n \n extern void \n-func (int i, int [i]); /* { dg-warning \"variable length array is used\" } */\n+func (int i, int [i]); /* { dg-warning \"ISO C90 forbids variable length array\" } */"}, {"sha": "54581dd3b6773d1418af24832e779f052e6dad71", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1,3 +1,12 @@\n+2014-08-10 Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/51849\n+\t* lex.c (_cpp_lex_direct): Warn when -Wc90-c99-compat is in effect.\n+\t* charset.c (_cpp_valid_ucn): Likewise.\n+\t* include/cpplib.h (cpp_options): Add cpp_warn_c90_c99_compat.\n+\t* macro.c (replace_args): Warn when -Wc90-c99-compat is in effect.\n+\t(parse_params): Likewise.\n+\n 2014-07-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61861"}, {"sha": "fa46f9226d721cd7ff948d3441f084b49ae0b7b1", "filename": "libcpp/charset.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -995,6 +995,10 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n   if (!CPP_OPTION (pfile, cplusplus) && !CPP_OPTION (pfile, c99))\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"universal character names are only valid in C++ and C99\");\n+  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t   && !CPP_OPTION (pfile, cplusplus))\n+    cpp_error (pfile, CPP_DL_WARNING,\n+\t       \"C99's universal character names are incompatible with C90\");\n   else if (CPP_WTRADITIONAL (pfile) && identifier_pos == 0)\n     cpp_warning (pfile, CPP_W_TRADITIONAL,\n \t         \"the meaning of '\\\\%c' is different in traditional C\","}, {"sha": "4cd66cdceaf2e6d1b94adc38a23106995f844723", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -466,6 +466,9 @@ struct cpp_options\n   /* True if dependencies should be restored from a precompiled header.  */\n   bool restore_pch_deps;\n \n+  /* True if warn about differences between C90 and C99.  */\n+  bool cpp_warn_c90_c99_compat;\n+\n   /* Dependency generation.  */\n   struct\n   {"}, {"sha": "5cc2224329e0fc4c4eea132076f7c4c015bdf916", "filename": "libcpp/lex.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -2325,7 +2325,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n       else if (c == '/' && (CPP_OPTION (pfile, cplusplus_comments)\n \t\t\t    || cpp_in_system_header (pfile)))\n \t{\n-\t  /* Warn about comments only if pedantically GNUC89, and not\n+\t  /* Warn about comments if pedantically GNUC89, and not\n \t     in system headers.  */\n \t  if (CPP_OPTION (pfile, lang) == CLK_GNUC89 && CPP_PEDANTIC (pfile)\n \t      && ! buffer->warned_cplusplus_comments)\n@@ -2336,6 +2336,16 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t\t\t \"(this will be reported only once per input file)\");\n \t      buffer->warned_cplusplus_comments = 1;\n \t    }\n+\t  /* Or if specifically desired via -Wc90-c99-compat.  */\n+\t  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t\t   && ! buffer->warned_cplusplus_comments)\n+\t    {\n+\t      cpp_error (pfile, CPP_DL_WARNING,\n+\t\t\t \"C++ style comments are are incompatible with C90\");\n+\t      cpp_error (pfile, CPP_DL_WARNING,\n+\t\t\t \"(this will be reported only once per input file)\");\n+\t      buffer->warned_cplusplus_comments = 1;\n+\t    }\n \n \t  if (skip_line_comment (pfile) && CPP_OPTION (pfile, warn_comments))\n \t    cpp_warning (pfile, CPP_W_COMMENTS, \"multi-line comment\");"}, {"sha": "ff6685c2665b2a6af0cc722b8edcd69dea0232cd", "filename": "libcpp/macro.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bede718836610fd741175f4a1b74ba5717e283/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=f3bede718836610fd741175f4a1b74ba5717e283", "patch": "@@ -1795,6 +1795,16 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t       NODE_NAME (node),\n \t\t       src->val.macro_arg.arg_no);\n \t}\n+      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t       && ! macro->syshdr\n+\t       && ! cpp_in_system_header (pfile)\n+\t       && ! CPP_OPTION (pfile, cplusplus))\n+\tcpp_error (pfile, CPP_DL_WARNING,\n+\t\t   \"invoking macro %s argument %d: \"\n+\t\t   \"empty macro arguments are undefined\"\n+\t\t   \" in ISO C90\",\n+\t\t   NODE_NAME (node),\n+\t\t   src->val.macro_arg.arg_no);\n \n       /* Avoid paste on RHS (even case count == 0).  */\n       if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT))\n@@ -2848,6 +2858,10 @@ parse_params (cpp_reader *pfile, cpp_macro *macro)\n \t\t\t(pfile, CPP_W_VARIADIC_MACROS,\n \t\t\t\"anonymous variadic macros were introduced in C99\");\n \t\t}\n+\t      else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat)\n+\t\t       && ! CPP_OPTION (pfile, cplusplus))\n+\t\tcpp_error (pfile, CPP_DL_WARNING,\n+\t\t\t   \"anonymous variadic macros were introduced in C99\");\n \t    }\n \t  else if (CPP_OPTION (pfile, cpp_pedantic)\n \t\t   && CPP_OPTION (pfile, warn_variadic_macros))"}]}