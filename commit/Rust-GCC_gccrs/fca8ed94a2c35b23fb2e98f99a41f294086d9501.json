{"sha": "fca8ed94a2c35b23fb2e98f99a41f294086d9501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhOGVkOTRhMmMzNWIyM2ZiMmU5OGY5OWE0MWYyOTQwODZkOTUwMQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-09-22T00:27:56Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-09-22T00:27:56Z"}, "message": "target-supports.exp (check_effective_target_fixed_point): New to check if targets have fixed-point supports.\n\n\t* lib/target-supports.exp (check_effective_target_fixed_point): New to\n\tcheck if targets have fixed-point supports.\n\t* gcc.dg/fixed-point/fixed-point.exp: New file.\n\t* gcc.dg/fixed-point/addsub.c, gcc.dg/fixed-point/allconv.c,\n\t* gcc.dg/fixed-point/allop.c, gcc.dg/fixed-point/call-by-value.c,\n\t* gcc.dg/fixed-point/cast-bad.c, gcc.dg/fixed-point/composite-type.c,\n\t* gcc.dg/fixed-point/const-1.c, gcc.dg/fixed-point/constant.c,\n\t* gcc.dg/fixed-point/constants-pedantic.c,\n\t* gcc.dg/fixed-point/convert.c, gcc.dg/fixed-point/define.c,\n\t* gcc.dg/fixed-point/keywords-c89.c, gcc.dg/fixed-point/keywords-c99.c,\n\t* gcc.dg/fixed-point/keywords-ignored-c99.c,\n\t* gcc.dg/fixed-point/keywords-pedantic.c,\n\t* gcc.dg/fixed-point/keywords-reserved.c, gcc.dg/fixed-point/binary.c,\n\t* gcc.dg/fixed-point/modes.c, gcc.dg/fixed-point/noassoc.c,\n\t* gcc.dg/fixed-point/types.c, gcc.dg/fixed-point/typespec.c,\n\t* gcc.dg/fixed-point/unary.c, gcc.dg/fixed-point/func-array.c,\n\t* gcc.dg/fixed-point/func-scalar.c, gcc.dg/fixed-point/func-struct.c,\n\t* gcc.dg/fixed-point/func-vararg-mixed.c,\n\t* gcc.dg/fixed-point/operator-logical.c,\n\t* gcc.dg/fixed-point/struct-union.c,\n\t* gcc.dg/fixed-point/bit-complement.c,\n\t* gcc.dg/fixed-point/operator-bitwise.c,\n\t* gcc.dg/fixed-point/operator-comma.c,\n\t* gcc.dg/fixed-point/struct-layout-1.c,\n\t* gcc.dg/fixed-point/union-init.c,\n\t* gcc.dg/fixed-point/Wbad-function-cast-1.c,\n\t* gcc.dg/fixed-point/func-mixed.c,\n\t* gcc.dg/fixed-point/func-vararg-size0.c,\n\t* gcc.dg/fixed-point/func-vararg.c, gcc.dg/fixed-point/int-warning.c,\n\t* gcc.dg/fixed-point/loop-index.c, gcc.dg/fixed-point/operator-cond.c,\n\t* gcc.dg/fixed-point/operator-unary.c,\n\t* gcc.dg/fixed-point/allop-const.c,\n\t* gcc.dg/fixed-point/muldiv-warning.c,\n\t* gcc.dg/nofixed-point-1.c,\n\t* gcc.target/mips/dpaq_sa_l_w.c, gcc.target/mips/dpsq_sa_l_w.c,\n\t* gcc.target/mips/fixed-vector-type.c,\n\t* gcc.target/mips/fixed-scalar-type.c: New tests.\n\nFrom-SVN: r128661", "tree": {"sha": "f5dc51d3916f31749f7fac613ed79e055257b81f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5dc51d3916f31749f7fac613ed79e055257b81f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca8ed94a2c35b23fb2e98f99a41f294086d9501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca8ed94a2c35b23fb2e98f99a41f294086d9501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca8ed94a2c35b23fb2e98f99a41f294086d9501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca8ed94a2c35b23fb2e98f99a41f294086d9501/comments", "author": null, "committer": null, "parents": [{"sha": "fca1a50fd93729fc338af57b7615898c3823986d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca1a50fd93729fc338af57b7615898c3823986d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca1a50fd93729fc338af57b7615898c3823986d"}], "stats": {"total": 5305, "additions": 5305, "deletions": 0}, "files": [{"sha": "7558f8f36715cb16bc74473dd68650c5c6d9649a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -1,3 +1,43 @@\n+2007-09-21  Chao-ying Fu  <fu@mips.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_fixed_point): New to\n+\tcheck if targets have fixed-point supports.\n+\t* gcc.dg/fixed-point/fixed-point.exp: New file.\n+\t* gcc.dg/fixed-point/addsub.c, gcc.dg/fixed-point/allconv.c,\n+\t* gcc.dg/fixed-point/allop.c, gcc.dg/fixed-point/call-by-value.c,\n+\t* gcc.dg/fixed-point/cast-bad.c, gcc.dg/fixed-point/composite-type.c,\n+\t* gcc.dg/fixed-point/const-1.c, gcc.dg/fixed-point/constant.c,\n+\t* gcc.dg/fixed-point/constants-pedantic.c,\n+\t* gcc.dg/fixed-point/convert.c, gcc.dg/fixed-point/define.c,\n+\t* gcc.dg/fixed-point/keywords-c89.c, gcc.dg/fixed-point/keywords-c99.c,\n+\t* gcc.dg/fixed-point/keywords-ignored-c99.c,\n+\t* gcc.dg/fixed-point/keywords-pedantic.c,\n+\t* gcc.dg/fixed-point/keywords-reserved.c, gcc.dg/fixed-point/binary.c,\n+\t* gcc.dg/fixed-point/modes.c, gcc.dg/fixed-point/noassoc.c,\n+\t* gcc.dg/fixed-point/types.c, gcc.dg/fixed-point/typespec.c,\n+\t* gcc.dg/fixed-point/unary.c, gcc.dg/fixed-point/func-array.c,\n+\t* gcc.dg/fixed-point/func-scalar.c, gcc.dg/fixed-point/func-struct.c,\n+\t* gcc.dg/fixed-point/func-vararg-mixed.c,\n+\t* gcc.dg/fixed-point/operator-logical.c,\n+\t* gcc.dg/fixed-point/struct-union.c,\n+\t* gcc.dg/fixed-point/bit-complement.c,\n+\t* gcc.dg/fixed-point/operator-bitwise.c,\n+\t* gcc.dg/fixed-point/operator-comma.c,\n+\t* gcc.dg/fixed-point/struct-layout-1.c,\n+\t* gcc.dg/fixed-point/union-init.c,\n+\t* gcc.dg/fixed-point/Wbad-function-cast-1.c,\n+\t* gcc.dg/fixed-point/func-mixed.c,\n+\t* gcc.dg/fixed-point/func-vararg-size0.c,\n+\t* gcc.dg/fixed-point/func-vararg.c, gcc.dg/fixed-point/int-warning.c,\n+\t* gcc.dg/fixed-point/loop-index.c, gcc.dg/fixed-point/operator-cond.c,\n+\t* gcc.dg/fixed-point/operator-unary.c,\n+\t* gcc.dg/fixed-point/allop-const.c,\n+\t* gcc.dg/fixed-point/muldiv-warning.c,\n+\t* gcc.dg/nofixed-point-1.c,\n+\t* gcc.target/mips/dpaq_sa_l_w.c, gcc.target/mips/dpsq_sa_l_w.c,\n+\t* gcc.target/mips/fixed-vector-type.c,\n+\t* gcc.target/mips/fixed-scalar-type.c: New tests.\n+\n 2007-09-21  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/nested_subtype_byref.ad[bs]: Part of new test."}, {"sha": "e23983396596b39c78cd9cb239249e4e716b2e52", "filename": "gcc/testsuite/gcc.dg/fixed-point/Wbad-function-cast-1.c", "status": "added", "additions": 357, "deletions": 0, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2FWbad-function-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2FWbad-function-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2FWbad-function-cast-1.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,357 @@\n+/* Test operation of -Wbad-function-cast.  */\n+/* Based on gcc.dg/Wbad-function-cast-1.c.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wbad-function-cast\" } */\n+\n+int if1(void);\n+char if2(void);\n+long if3(void);\n+_Complex double cf(void);\n+\n+\n+#define FUNC(TYPE,NAME) \\\n+TYPE f ## NAME (void);\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+void\n+foo(void)\n+{\n+#define TEST(NAME) \\\n+  /* Casts to void types are always OK.  */ \\\n+  (void) f ## NAME (); \\\n+  (const void) f ## NAME (); \\\n+  /* Casts to the same type or similar types are OK.  */ \\\n+  (short _Fract) f ## NAME (); \\\n+  (_Fract) f ## NAME (); \\\n+  (long _Fract) f ## NAME (); \\\n+  (long long _Fract) f ## NAME (); \\\n+  (unsigned short _Fract) f ## NAME (); \\\n+  (unsigned _Fract) f ## NAME (); \\\n+  (unsigned long _Fract) f ## NAME (); \\\n+  (unsigned long long _Fract) f ## NAME (); \\\n+  (_Sat short _Fract) f ## NAME (); \\\n+  (_Sat _Fract) f ## NAME (); \\\n+  (_Sat long _Fract) f ## NAME (); \\\n+  (_Sat long long _Fract) f ## NAME (); \\\n+  (_Sat unsigned short _Fract) f ## NAME (); \\\n+  (_Sat unsigned _Fract) f ## NAME (); \\\n+  (_Sat unsigned long _Fract) f ## NAME (); \\\n+  (_Sat unsigned long long _Fract) f ## NAME (); \\\n+  (short _Accum) f ## NAME (); \\\n+  (_Accum) f ## NAME (); \\\n+  (long _Accum) f ## NAME (); \\\n+  (long long _Accum) f ## NAME (); \\\n+  (unsigned short _Accum) f ## NAME (); \\\n+  (unsigned _Accum) f ## NAME (); \\\n+  (unsigned long _Accum) f ## NAME (); \\\n+  (unsigned long long _Accum) f ## NAME (); \\\n+  (_Sat short _Accum) f ## NAME (); \\\n+  (_Sat _Accum) f ## NAME (); \\\n+  (_Sat long _Accum) f ## NAME (); \\\n+  (_Sat long long _Accum) f ## NAME (); \\\n+  (_Sat unsigned short _Accum) f ## NAME (); \\\n+  (_Sat unsigned _Accum) f ## NAME (); \\\n+  (_Sat unsigned long _Accum) f ## NAME (); \\\n+  (_Sat unsigned long long _Accum) f ## NAME (); \\\n+\n+  TEST (sf);\n+  TEST (f);\n+  TEST (lf);\n+  TEST (llf);\n+  TEST (usf);\n+  TEST (uf);\n+  TEST (ulf);\n+  TEST (ullf);\n+  TEST (Ssf);\n+  TEST (Sf);\n+  TEST (Slf);\n+  TEST (Sllf);\n+  TEST (Susf);\n+  TEST (Suf);\n+  TEST (Sulf);\n+  TEST (Sullf);\n+  TEST (sa);\n+  TEST (a);\n+  TEST (la);\n+  TEST (lla);\n+  TEST (usa);\n+  TEST (ua);\n+  TEST (ula);\n+  TEST (ulla);\n+  TEST (Ssa);\n+  TEST (Sa);\n+  TEST (Sla);\n+  TEST (Slla);\n+  TEST (Susa);\n+  TEST (Sua);\n+  TEST (Sula);\n+  TEST (Sulla);\n+\n+   /* Casts to types with different TREE_CODE (which is how this\n+     warning has been defined) are not OK, except for casts to void\n+     types.  */\n+  (short _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'short _Fract'\" } */\n+  (_Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Fract'\" } */\n+  (long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'long _Fract'\" } */\n+  (long long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'long long _Fract'\" } */\n+  (unsigned short _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned short _Fract'\" } */\n+  (unsigned _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned _Fract'\" } */\n+  (unsigned long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned long _Fract'\" } */\n+  (unsigned long long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned long long _Fract'\" } */\n+  (_Sat short _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat short _Fract'\" } */\n+  (_Sat _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat _Fract'\" } */\n+  (_Sat long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat long _Fract'\" } */\n+  (_Sat long long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat long long _Fract'\" } */\n+  (_Sat unsigned short _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned short _Fract'\" } */\n+  (_Sat unsigned _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned _Fract'\" } */\n+  (_Sat unsigned long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned long _Fract'\" } */\n+  (_Sat unsigned long long _Fract)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned long long _Fract'\" } */\n+  (short _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'short _Accum'\" } */\n+  (_Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Accum'\" } */\n+  (long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'long _Accum'\" } */\n+  (long long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'long long _Accum'\" } */\n+  (unsigned short _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned short _Accum'\" } */\n+  (unsigned _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned _Accum'\" } */\n+  (unsigned long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned long _Accum'\" } */\n+  (unsigned long long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'unsigned long long _Accum'\" } */\n+  (_Sat short _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat short _Accum'\" } */\n+  (_Sat _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat _Accum'\" } */\n+  (_Sat long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat long _Accum'\" } */\n+  (_Sat long long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat long long _Accum'\" } */\n+  (_Sat unsigned short _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned short _Accum'\" } */\n+  (_Sat unsigned _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned _Accum'\" } */\n+  (_Sat unsigned long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned long _Accum'\" } */\n+  (_Sat unsigned long long _Accum)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type '_Sat unsigned long long _Accum'\" } */\n+\n+  (short _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'short _Fract'\" } */\n+  (_Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Fract'\" } */\n+  (long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'long _Fract'\" } */\n+  (long long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'long long _Fract'\" } */\n+  (unsigned short _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned short _Fract'\" } */\n+  (unsigned _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned _Fract'\" } */\n+  (unsigned long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned long _Fract'\" } */\n+  (unsigned long long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned long long _Fract'\" } */\n+  (_Sat short _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat short _Fract'\" } */\n+  (_Sat _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat _Fract'\" } */\n+  (_Sat long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat long _Fract'\" } */\n+  (_Sat long long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat long long _Fract'\" } */\n+  (_Sat unsigned short _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned short _Fract'\" } */\n+  (_Sat unsigned _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned _Fract'\" } */\n+  (_Sat unsigned long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned long _Fract'\" } */\n+  (_Sat unsigned long long _Fract)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned long long _Fract'\" } */\n+  (short _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'short _Accum'\" } */\n+  (_Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Accum'\" } */\n+  (long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'long _Accum'\" } */\n+  (long long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'long long _Accum'\" } */\n+  (unsigned short _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned short _Accum'\" } */\n+  (unsigned _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned _Accum'\" } */\n+  (unsigned long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned long _Accum'\" } */\n+  (unsigned long long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'unsigned long long _Accum'\" } */\n+  (_Sat short _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat short _Accum'\" } */\n+  (_Sat _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat _Accum'\" } */\n+  (_Sat long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat long _Accum'\" } */\n+  (_Sat long long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat long long _Accum'\" } */\n+  (_Sat unsigned short _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned short _Accum'\" } */\n+  (_Sat unsigned _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned _Accum'\" } */\n+  (_Sat unsigned long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned long _Accum'\" } */\n+  (_Sat unsigned long long _Accum)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type '_Sat unsigned long long _Accum'\" } */\n+\n+  (short _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'short _Fract'\" } */\n+  (_Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Fract'\" } */\n+  (long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'long _Fract'\" } */\n+  (long long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'long long _Fract'\" } */\n+  (unsigned short _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned short _Fract'\" } */\n+  (unsigned _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned _Fract'\" } */\n+  (unsigned long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned long _Fract'\" } */\n+  (unsigned long long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned long long _Fract'\" } */\n+  (_Sat short _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat short _Fract'\" } */\n+  (_Sat _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat _Fract'\" } */\n+  (_Sat long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat long _Fract'\" } */\n+  (_Sat long long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat long long _Fract'\" } */\n+  (_Sat unsigned short _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned short _Fract'\" } */\n+  (_Sat unsigned _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned _Fract'\" } */\n+  (_Sat unsigned long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned long _Fract'\" } */\n+  (_Sat unsigned long long _Fract)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned long long _Fract'\" } */\n+  (short _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'short _Accum'\" } */\n+  (_Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Accum'\" } */\n+  (long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'long _Accum'\" } */\n+  (long long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'long long _Accum'\" } */\n+  (unsigned short _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned short _Accum'\" } */\n+  (unsigned _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned _Accum'\" } */\n+  (unsigned long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned long _Accum'\" } */\n+  (unsigned long long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type 'unsigned long long _Accum'\" } */\n+  (_Sat short _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat short _Accum'\" } */\n+  (_Sat _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat _Accum'\" } */\n+  (_Sat long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat long _Accum'\" } */\n+  (_Sat long long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat long long _Accum'\" } */\n+  (_Sat unsigned short _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned short _Accum'\" } */\n+  (_Sat unsigned _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned _Accum'\" } */\n+  (_Sat unsigned long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned long _Accum'\" } */\n+  (_Sat unsigned long long _Accum)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Sat unsigned long long _Accum'\" } */\n+\n+  (short _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'short _Fract'\" } */\n+  (_Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Fract'\" } */\n+  (long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'long _Fract'\" } */\n+  (long long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'long long _Fract'\" } */\n+  (unsigned short _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned short _Fract'\" } */\n+  (unsigned _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned _Fract'\" } */\n+  (unsigned long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned long _Fract'\" } */\n+  (unsigned long long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned long long _Fract'\" } */\n+  (_Sat short _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat short _Fract'\" } */\n+  (_Sat _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat _Fract'\" } */\n+  (_Sat long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat long _Fract'\" } */\n+  (_Sat long long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat long long _Fract'\" } */\n+  (_Sat unsigned short _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned short _Fract'\" } */\n+  (_Sat unsigned _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned _Fract'\" } */\n+  (_Sat unsigned long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned long _Fract'\" } */\n+  (_Sat unsigned long long _Fract)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned long long _Fract'\" } */\n+  (short _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'short _Accum'\" } */\n+  (_Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Accum'\" } */\n+  (long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'long _Accum'\" } */\n+  (long long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'long long _Accum'\" } */\n+  (unsigned short _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned short _Accum'\" } */\n+  (unsigned _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned _Accum'\" } */\n+  (unsigned long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned long _Accum'\" } */\n+  (unsigned long long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'unsigned long long _Accum'\" } */\n+  (_Sat short _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat short _Accum'\" } */\n+  (_Sat _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat _Accum'\" } */\n+  (_Sat long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat long _Accum'\" } */\n+  (_Sat long long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat long long _Accum'\" } */\n+  (_Sat unsigned short _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned short _Accum'\" } */\n+  (_Sat unsigned _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned _Accum'\" } */\n+  (_Sat unsigned long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned long _Accum'\" } */\n+  (_Sat unsigned long long _Accum)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type '_Sat unsigned long long _Accum'\" } */\n+\n+  (int)fsf(); /* { dg-warning \"cast from function call of type 'short _Fract' to non-matching type 'int'\" } */\n+  (int)ff(); /* { dg-warning \"cast from function call of type '_Fract' to non-matching type 'int'\" } */\n+  (int)flf(); /* { dg-warning \"cast from function call of type 'long _Fract' to non-matching type 'int'\" } */\n+  (int)fllf(); /* { dg-warning \"cast from function call of type 'long long _Fract' to non-matching type 'int'\" } */\n+  (int)fusf(); /* { dg-warning \"cast from function call of type 'unsigned short _Fract' to non-matching type 'int'\" } */\n+  (int)fuf(); /* { dg-warning \"cast from function call of type 'unsigned _Fract' to non-matching type 'int'\" } */\n+  (int)fulf(); /* { dg-warning \"cast from function call of type 'unsigned long _Fract' to non-matching type 'int'\" } */\n+  (int)fullf(); /* { dg-warning \"cast from function call of type 'unsigned long long _Fract' to non-matching type 'int'\" } */\n+  (int)fSsf(); /* { dg-warning \"cast from function call of type '_Sat short _Fract' to non-matching type 'int'\" } */\n+  (int)fSf(); /* { dg-warning \"cast from function call of type '_Sat _Fract' to non-matching type 'int'\" } */\n+  (int)fSlf(); /* { dg-warning \"cast from function call of type '_Sat long _Fract' to non-matching type 'int'\" } */\n+  (int)fSllf(); /* { dg-warning \"cast from function call of type '_Sat long long _Fract' to non-matching type 'int'\" } */\n+  (int)fSusf(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Fract' to non-matching type 'int'\" } */\n+  (int)fSuf(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Fract' to non-matching type 'int'\" } */\n+  (int)fSulf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Fract' to non-matching type 'int'\" } */\n+  (int)fSullf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Fract' to non-matching type 'int'\" } */\n+  (int)fsa(); /* { dg-warning \"cast from function call of type 'short _Accum' to non-matching type 'int'\" } */\n+  (int)fa(); /* { dg-warning \"cast from function call of type '_Accum' to non-matching type 'int'\" } */\n+  (int)fla(); /* { dg-warning \"cast from function call of type 'long _Accum' to non-matching type 'int'\" } */\n+  (int)flla(); /* { dg-warning \"cast from function call of type 'long long _Accum' to non-matching type 'int'\" } */\n+  (int)fusa(); /* { dg-warning \"cast from function call of type 'unsigned short _Accum' to non-matching type 'int'\" } */\n+  (int)fua(); /* { dg-warning \"cast from function call of type 'unsigned _Accum' to non-matching type 'int'\" } */\n+  (int)fula(); /* { dg-warning \"cast from function call of type 'unsigned long _Accum' to non-matching type 'int'\" } */\n+  (int)fulla(); /* { dg-warning \"cast from function call of type 'unsigned long long _Accum' to non-matching type 'int'\" } */\n+  (int)fSsa(); /* { dg-warning \"cast from function call of type '_Sat short _Accum' to non-matching type 'int'\" } */\n+  (int)fSa(); /* { dg-warning \"cast from function call of type '_Sat _Accum' to non-matching type 'int'\" } */\n+  (int)fSla(); /* { dg-warning \"cast from function call of type '_Sat long _Accum' to non-matching type 'int'\" } */\n+  (int)fSlla(); /* { dg-warning \"cast from function call of type '_Sat long long _Accum' to non-matching type 'int'\" } */\n+  (int)fSusa(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Accum' to non-matching type 'int'\" } */\n+  (int)fSua(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Accum' to non-matching type 'int'\" } */\n+  (int)fSula(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Accum' to non-matching type 'int'\" } */\n+  (int)fSulla(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Accum' to non-matching type 'int'\" } */\n+\n+  (long)fsf(); /* { dg-warning \"cast from function call of type 'short _Fract' to non-matching type 'long int'\" } */\n+  (long)ff(); /* { dg-warning \"cast from function call of type '_Fract' to non-matching type 'long int'\" } */\n+  (long)flf(); /* { dg-warning \"cast from function call of type 'long _Fract' to non-matching type 'long int'\" } */\n+  (long)fllf(); /* { dg-warning \"cast from function call of type 'long long _Fract' to non-matching type 'long int'\" } */\n+  (long)fusf(); /* { dg-warning \"cast from function call of type 'unsigned short _Fract' to non-matching type 'long int'\" } */\n+  (long)fuf(); /* { dg-warning \"cast from function call of type 'unsigned _Fract' to non-matching type 'long int'\" } */\n+  (long)fulf(); /* { dg-warning \"cast from function call of type 'unsigned long _Fract' to non-matching type 'long int'\" } */\n+  (long)fullf(); /* { dg-warning \"cast from function call of type 'unsigned long long _Fract' to non-matching type 'long int'\" } */\n+  (long)fSsf(); /* { dg-warning \"cast from function call of type '_Sat short _Fract' to non-matching type 'long int'\" } */\n+  (long)fSf(); /* { dg-warning \"cast from function call of type '_Sat _Fract' to non-matching type 'long int'\" } */\n+  (long)fSlf(); /* { dg-warning \"cast from function call of type '_Sat long _Fract' to non-matching type 'long int'\" } */\n+  (long)fSllf(); /* { dg-warning \"cast from function call of type '_Sat long long _Fract' to non-matching type 'long int'\" } */\n+  (long)fSusf(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Fract' to non-matching type 'long int'\" } */\n+  (long)fSuf(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Fract' to non-matching type 'long int'\" } */\n+  (long)fSulf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Fract' to non-matching type 'long int'\" } */\n+  (long)fSullf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Fract' to non-matching type 'long int'\" } */\n+  (long)fsa(); /* { dg-warning \"cast from function call of type 'short _Accum' to non-matching type 'long int'\" } */\n+  (long)fa(); /* { dg-warning \"cast from function call of type '_Accum' to non-matching type 'long int'\" } */\n+  (long)fla(); /* { dg-warning \"cast from function call of type 'long _Accum' to non-matching type 'long int'\" } */\n+  (long)flla(); /* { dg-warning \"cast from function call of type 'long long _Accum' to non-matching type 'long int'\" } */\n+  (long)fusa(); /* { dg-warning \"cast from function call of type 'unsigned short _Accum' to non-matching type 'long int'\" } */\n+  (long)fua(); /* { dg-warning \"cast from function call of type 'unsigned _Accum' to non-matching type 'long int'\" } */\n+  (long)fula(); /* { dg-warning \"cast from function call of type 'unsigned long _Accum' to non-matching type 'long int'\" } */\n+  (long)fulla(); /* { dg-warning \"cast from function call of type 'unsigned long long _Accum' to non-matching type 'long int'\" } */\n+  (long)fSsa(); /* { dg-warning \"cast from function call of type '_Sat short _Accum' to non-matching type 'long int'\" } */\n+  (long)fSa(); /* { dg-warning \"cast from function call of type '_Sat _Accum' to non-matching type 'long int'\" } */\n+  (long)fSla(); /* { dg-warning \"cast from function call of type '_Sat long _Accum' to non-matching type 'long int'\" } */\n+  (long)fSlla(); /* { dg-warning \"cast from function call of type '_Sat long long _Accum' to non-matching type 'long int'\" } */\n+  (long)fSusa(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Accum' to non-matching type 'long int'\" } */\n+  (long)fSua(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Accum' to non-matching type 'long int'\" } */\n+  (long)fSula(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Accum' to non-matching type 'long int'\" } */\n+  (long)fSulla(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Accum' to non-matching type 'long int'\" } */\n+\n+  (long int)fsf(); /* { dg-warning \"cast from function call of type 'short _Fract' to non-matching type 'long int'\" } */\n+  (long int)ff(); /* { dg-warning \"cast from function call of type '_Fract' to non-matching type 'long int'\" } */\n+  (long int)flf(); /* { dg-warning \"cast from function call of type 'long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fllf(); /* { dg-warning \"cast from function call of type 'long long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fusf(); /* { dg-warning \"cast from function call of type 'unsigned short _Fract' to non-matching type 'long int'\" } */\n+  (long int)fuf(); /* { dg-warning \"cast from function call of type 'unsigned _Fract' to non-matching type 'long int'\" } */\n+  (long int)fulf(); /* { dg-warning \"cast from function call of type 'unsigned long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fullf(); /* { dg-warning \"cast from function call of type 'unsigned long long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSsf(); /* { dg-warning \"cast from function call of type '_Sat short _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSf(); /* { dg-warning \"cast from function call of type '_Sat _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSlf(); /* { dg-warning \"cast from function call of type '_Sat long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSllf(); /* { dg-warning \"cast from function call of type '_Sat long long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSusf(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSuf(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSulf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fSullf(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Fract' to non-matching type 'long int'\" } */\n+  (long int)fsa(); /* { dg-warning \"cast from function call of type 'short _Accum' to non-matching type 'long int'\" } */\n+  (long int)fa(); /* { dg-warning \"cast from function call of type '_Accum' to non-matching type 'long int'\" } */\n+  (long int)fla(); /* { dg-warning \"cast from function call of type 'long _Accum' to non-matching type 'long int'\" } */\n+  (long int)flla(); /* { dg-warning \"cast from function call of type 'long long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fusa(); /* { dg-warning \"cast from function call of type 'unsigned short _Accum' to non-matching type 'long int'\" } */\n+  (long int)fua(); /* { dg-warning \"cast from function call of type 'unsigned _Accum' to non-matching type 'long int'\" } */\n+  (long int)fula(); /* { dg-warning \"cast from function call of type 'unsigned long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fulla(); /* { dg-warning \"cast from function call of type 'unsigned long long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSsa(); /* { dg-warning \"cast from function call of type '_Sat short _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSa(); /* { dg-warning \"cast from function call of type '_Sat _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSla(); /* { dg-warning \"cast from function call of type '_Sat long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSlla(); /* { dg-warning \"cast from function call of type '_Sat long long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSusa(); /* { dg-warning \"cast from function call of type '_Sat unsigned short _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSua(); /* { dg-warning \"cast from function call of type '_Sat unsigned _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSula(); /* { dg-warning \"cast from function call of type '_Sat unsigned long _Accum' to non-matching type 'long int'\" } */\n+  (long int)fSulla(); /* { dg-warning \"cast from function call of type '_Sat unsigned long long _Accum' to non-matching type 'long int'\" } */\n+\n+}"}, {"sha": "c2ab38fd48aca65408f606481ba7a6ed2c69b3b2", "filename": "gcc/testsuite/gcc.dg/fixed-point/addsub.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Faddsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Faddsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Faddsub.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check if GCC generates warnings when overflows.  */\n+\n+_Fract a0 = 0.5r + 0.5r; /* { dg-warning \"overflow\" } */\n+_Fract a1 = 0.5r + 0.6r; /* { dg-warning \"overflow\" } */\n+_Fract a2 = 0.5r + -0.6r;\n+_Fract a3 = -0.5r + 0.6r;\n+_Fract a4 = -0.5r + -0.5r;\n+_Fract a5 = -0.5r + -0.6r; /* { dg-warning \"overflow\" } */\n+_Fract a6 = 0.0r + __FRACT_MIN__;\n+_Fract a7 = 0.1r + __FRACT_MIN__;\n+_Fract a8 = -0.1r + __FRACT_MIN__; /* { dg-warning \"overflow\" } */\n+_Fract a9 = 0.0r + __FRACT_MAX__;\n+_Fract a10 = 0.1r + __FRACT_MAX__; /* { dg-warning \"overflow\" } */\n+_Fract a11 = -0.1r + __FRACT_MAX__;\n+\n+_Fract b0 = 0.5r - 0.5r;\n+_Fract b1 = 0.5r - 0.6r;\n+_Fract b2 = 0.5r - -0.6r; /* { dg-warning \"overflow\" } */\n+_Fract b3 = -0.5r - 0.6r; /* { dg-warning \"overflow\" } */\n+_Fract b4 = -0.5r - -0.5r;\n+_Fract b5 = -0.5r - -0.6r;\n+_Fract b6 = 0.0r - __FRACT_MIN__; /* { dg-warning \"overflow\" } */\n+_Fract b7 = 0.1r - __FRACT_MIN__; /* { dg-warning \"overflow\" } */\n+_Fract b8 = -0.1r - __FRACT_MIN__;\n+_Fract b9 = 0.0r - __FRACT_MAX__;\n+_Fract b10 = 0.1r - __FRACT_MAX__;\n+_Fract b11 = -0.1r - __FRACT_MAX__; /* { dg-warning \"overflow\" } */"}, {"sha": "e0440dac254c2e350d11d130d207951edf7b083e", "filename": "gcc/testsuite/gcc.dg/fixed-point/allconv.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallconv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallconv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallconv.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,150 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check if all conversions are ok.  */\n+\n+#define CONV(TYPE, NAME) \\\n+        float NAME ## _to_SF (TYPE a) { return a; } \\\n+        float Sat ## NAME ## _to_SF (_Sat TYPE a) { return a; } \\\n+        double NAME ## _to_DF (TYPE a) { return a; } \\\n+        double Sat ## NAME ## _to_DF (_Sat TYPE a) { return a; } \\\n+        TYPE SF_to_ ## NAME (float a) { return a; } \\\n+        _Sat TYPE SF_to_Sat ## NAME (float a) { return a; } \\\n+        TYPE DF_to_ ## NAME (double a) { return a; } \\\n+        _Sat TYPE DF_to_Sat ## NAME (double a) { return a; } \\\n+        signed char NAME ## _to_schar (TYPE a) { return a; } \\\n+        signed char Sat ## NAME ## _to_schar (_Sat TYPE a) { return a; } \\\n+        unsigned char NAME ## _to_uchar (TYPE a) { return a; } \\\n+        unsigned char Sat ## NAME ## _to_uchar (_Sat TYPE a) { return a; } \\\n+        short NAME ## _to_short (TYPE a) { return a; } \\\n+        short _Sat ## NAME ## _to_short (_Sat TYPE a) { return a; } \\\n+        unsigned short NAME ## _to_ushort (TYPE a) { return a; } \\\n+        unsigned short _Sat ## NAME ## _to_ushort (_Sat TYPE a) { return a; } \\\n+        int NAME ## _to_int (TYPE a) { return a; } \\\n+        int _Sat ## NAME ## _to_int (_Sat TYPE a) { return a; } \\\n+        unsigned int NAME ## _to_uint (TYPE a) { return a; } \\\n+        unsigned int _Sat ## NAME ## _to_uint (_Sat TYPE a) { return a; } \\\n+        long NAME ## _to_long (TYPE a) { return a; } \\\n+        unsigned long NAME ## _to_ulong (TYPE a) { return a; } \\\n+        long _Sat ## NAME ## _to_long (TYPE a) { return a; } \\\n+        unsigned long _Sat ## NAME ## _to_ulong (TYPE a) { return a; } \\\n+        long long NAME ## _to_longlong (TYPE a) { return a; } \\\n+        long long _Sat ## NAME ## _to_longlong (TYPE a) { return a; } \\\n+        unsigned long long NAME ## _to_ulonglong (TYPE a) { return a; } \\\n+        unsigned long long _Sat ## NAME ## _to_ulonglong (TYPE a) { return a; } \\\n+        TYPE schar_to_ ## NAME (signed char a) { return a; } \\\n+        _Sat TYPE schar_to_Sat ## NAME (signed char a) { return a; } \\\n+        TYPE uchar_to_ ## NAME (unsigned char a) { return a; } \\\n+        _Sat TYPE uchar_to_Sat ## NAME (unsigned char a) { return a; } \\\n+        TYPE short_to_ ## NAME (short a) { return a; } \\\n+        TYPE ushort_to_ ## NAME (unsigned short a) { return a; } \\\n+        TYPE int_to_ ## NAME (int a) { return a; } \\\n+        TYPE uint_to_ ## NAME (unsigned int a) { return a; } \\\n+        TYPE long_to_ ## NAME (long a) { return a; } \\\n+        TYPE ulong_to_ ## NAME (unsigned long a) { return a; } \\\n+        TYPE longlong_to_ ## NAME (long long a) { return a; } \\\n+        TYPE ulonglong_to_ ## NAME (unsigned long long a) { return a; } \\\n+        _Sat TYPE short_to_Sat ## NAME (short a) { return a; } \\\n+        _Sat TYPE ushort_to_Sat ## NAME (unsigned short a) { return a; } \\\n+        _Sat TYPE int_to_Sat ## NAME (int a) { return a; } \\\n+        _Sat TYPE uint_to_Sat ## NAME (unsigned int a) { return a; } \\\n+        _Sat TYPE long_to_Sat ## NAME (long a) { return a; } \\\n+        _Sat TYPE ulong_to_Sat ## NAME (unsigned long a) { return a; } \\\n+        _Sat TYPE longlong_to_Sat ## NAME (long long a) { return a; } \\\n+        _Sat TYPE ulonglong_to_Sat ## NAME (unsigned long long a) { return a; } \\\n+\tTYPE SFR_to ## NAME (short _Fract a) { return a; } \\\n+\tTYPE FR_to ## NAME (_Fract a) { return a; } \\\n+\tTYPE LFR_to ## NAME (long _Fract a) { return a; } \\\n+\tTYPE LLFR_to ## NAME (long long _Fract a) { return a; } \\\n+\tTYPE USFR_to ## NAME (unsigned short _Fract a) { return a; } \\\n+\tTYPE UFR_to ## NAME (unsigned _Fract a) { return a; } \\\n+\tTYPE ULFR_to ## NAME (unsigned long _Fract a) { return a; } \\\n+\tTYPE ULLFR_to ## NAME (unsigned long long _Fract a) { return a; } \\\n+\tTYPE SAC_to ## NAME (short _Accum a) { return a; } \\\n+\tTYPE AC_to ## NAME (_Accum a) { return a; } \\\n+\tTYPE LAC_to ## NAME (long _Accum a) { return a; } \\\n+\tTYPE LLAC_to ## NAME (long long _Accum a) { return a; } \\\n+\tTYPE USAC_to ## NAME (unsigned short _Accum a) { return a; } \\\n+\tTYPE UAC_to ## NAME (unsigned _Accum a) { return a; } \\\n+\tTYPE ULAC_to ## NAME (unsigned long _Accum a) { return a; } \\\n+\tTYPE ULLAC_to ## NAME (unsigned long long _Accum a) { return a; } \\\n+\tTYPE SATSFR_to ## NAME (_Sat short _Fract a) { return a; } \\\n+\tTYPE SATFR_to ## NAME (_Sat _Fract a) { return a; } \\\n+\tTYPE SATLFR_to ## NAME (_Sat long _Fract a) { return a; } \\\n+\tTYPE SATLLFR_to ## NAME (_Sat long long _Fract a) { return a; } \\\n+\tTYPE SATUSFR_to ## NAME (_Sat unsigned short _Fract a) { return a; } \\\n+\tTYPE SATUFR_to ## NAME (_Sat unsigned _Fract a) { return a; } \\\n+\tTYPE SATULFR_to ## NAME (_Sat unsigned long _Fract a) { return a; } \\\n+\tTYPE SATULLFR_to ## NAME (_Sat unsigned long long _Fract a) { return a; } \\\n+\tTYPE SATSAC_to ## NAME (_Sat short _Accum a) { return a; } \\\n+\tTYPE SATAC_to ## NAME (_Sat _Accum a) { return a; } \\\n+\tTYPE SATLAC_to ## NAME (_Sat long _Accum a) { return a; } \\\n+\tTYPE SATLLAC_to ## NAME (_Sat long long _Accum a) { return a; } \\\n+\tTYPE SATUSAC_to ## NAME (_Sat unsigned short _Accum a) { return a; } \\\n+\tTYPE SATUAC_to ## NAME (_Sat unsigned _Accum a) { return a; } \\\n+\tTYPE SATULAC_to ## NAME (_Sat unsigned long _Accum a) { return a; } \\\n+\tTYPE SATULLAC_to ## NAME (_Sat unsigned long long _Accum a) { return a; } \\\n+\t_Sat TYPE SFR_to_SAT ## NAME (short _Fract a) { return a; } \\\n+\t_Sat TYPE FR_to_SAT ## NAME (_Fract a) { return a; } \\\n+\t_Sat TYPE LFR_to_SAT ## NAME (long _Fract a) { return a; } \\\n+\t_Sat TYPE LLFR_to_SAT ## NAME (long long _Fract a) { return a; } \\\n+\t_Sat TYPE USFR_to_SAT ## NAME (unsigned short _Fract a) { return a; } \\\n+\t_Sat TYPE UFR_to_SAT ## NAME (unsigned _Fract a) { return a; } \\\n+\t_Sat TYPE ULFR_to_SAT ## NAME (unsigned long _Fract a) { return a; } \\\n+\t_Sat TYPE ULLFR_to_SAT ## NAME (unsigned long long _Fract a) { return a; } \\\n+\t_Sat TYPE SAC_to_SAT ## NAME (short _Accum a) { return a; } \\\n+\t_Sat TYPE AC_to_SAT ## NAME (_Accum a) { return a; } \\\n+\t_Sat TYPE LAC_to_SAT ## NAME (long _Accum a) { return a; } \\\n+\t_Sat TYPE LLAC_to_SAT ## NAME (long long _Accum a) { return a; } \\\n+\t_Sat TYPE USAC_to_SAT ## NAME (unsigned short _Accum a) { return a; } \\\n+\t_Sat TYPE UAC_to_SAT ## NAME (unsigned _Accum a) { return a; } \\\n+\t_Sat TYPE ULAC_to_SAT ## NAME (unsigned long _Accum a) { return a; } \\\n+\t_Sat TYPE ULLAC_to_SAT ## NAME (unsigned long long _Accum a) { return a; } \\\n+\t_Sat TYPE SATSFR_to_SAT ## NAME (_Sat short _Fract a) { return a; } \\\n+\t_Sat TYPE SATFR_to_SAT ## NAME (_Sat _Fract a) { return a; } \\\n+\t_Sat TYPE SATLFR_to_SAT ## NAME (_Sat long _Fract a) { return a; } \\\n+\t_Sat TYPE SATLLFR_to_SAT ## NAME (_Sat long long _Fract a) { return a; } \\\n+\t_Sat TYPE SATUSFR_to_SAT ## NAME (_Sat unsigned short _Fract a) { return a; } \\\n+\t_Sat TYPE SATUFR_to_SAT ## NAME (_Sat unsigned _Fract a) { return a; } \\\n+\t_Sat TYPE SATULFR_to_SAT ## NAME (_Sat unsigned long _Fract a) { return a; } \\\n+\t_Sat TYPE SATULLFR_to_SAT ## NAME (_Sat unsigned long long _Fract a) { return a; } \\\n+\t_Sat TYPE SATSAC_to_SAT ## NAME (_Sat short _Accum a) { return a; } \\\n+\t_Sat TYPE SATAC_to_SAT ## NAME (_Sat _Accum a) { return a; } \\\n+\t_Sat TYPE SATLAC_to_SAT ## NAME (_Sat long _Accum a) { return a; } \\\n+\t_Sat TYPE SATLLAC_to_SAT ## NAME (_Sat long long _Accum a) { return a; } \\\n+\t_Sat TYPE SATUSAC_to_SAT ## NAME (_Sat unsigned short _Accum a) { return a; } \\\n+\t_Sat TYPE SATUAC_to_SAT ## NAME (_Sat unsigned _Accum a) { return a; } \\\n+\t_Sat TYPE SATULAC_to_SAT ## NAME (_Sat unsigned long _Accum a) { return a; } \\\n+\t_Sat TYPE SATULLAC_to_SAT ## NAME (_Sat unsigned long long _Accum a) { return a; } \\\n+\t_Complex int NAME ## _to_CI (TYPE a) { return a; } \\\n+\t_Complex unsigned int NAME ## _to_CUI (TYPE a) { return a; } \\\n+\t_Complex float NAME ## _to_CF (TYPE a) { return a; } \\\n+\t_Complex double NAME ## _to_CD (TYPE a) { return a; } \\\n+\tTYPE CI_to_ ## NAME (_Complex int a) { return a; } \\\n+\tTYPE CUI_to_ ## NAME (_Complex unsigned int a) { return a; } \\\n+\tTYPE CF_to_ ## NAME (_Complex float a) { return a; } \\\n+\tTYPE CD_to_ ## NAME (_Complex double a) { return a; } \\\n+\t_Sat TYPE CI_to_SAT ## NAME (_Complex int a) { return a; } \\\n+\t_Sat TYPE CUI_to_SAT ## NAME (_Complex unsigned int a) { return a; } \\\n+\t_Sat TYPE CF_to_SAT ## NAME (_Complex float a) { return a; } \\\n+\t_Sat TYPE CD_to_SAT ## NAME (_Complex double a) { return a; }\n+\n+CONV(short _Fract, sf);\n+CONV(_Fract, f);\n+CONV(long _Fract, lf);\n+CONV(long long _Fract, llf);\n+CONV(unsigned short _Fract, usf);\n+CONV(unsigned _Fract, uf);\n+CONV(unsigned long _Fract, ulf);\n+CONV(unsigned long long _Fract, ullf);\n+\n+CONV(short _Accum, sk);\n+CONV(_Accum, k);\n+CONV(long _Accum, lk);\n+CONV(long long _Accum, llk);\n+CONV(unsigned short _Accum, usk);\n+CONV(unsigned _Accum, uk);\n+CONV(unsigned long _Accum, ulk);\n+CONV(unsigned long long _Accum, ullk);"}, {"sha": "1cf859861060195bf032a47009e8b30574a05cd1", "filename": "gcc/testsuite/gcc.dg/fixed-point/allop-const.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop-const.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,147 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.5.7 - Bitwise shift operands.\n+   C99 6.5.3 Unary operators.\n+   C99 6.5.5 Multiplicative operators.\n+   C99 6.5.6 Additive operators.\n+   C99 6.5.7 Bitwise shift operators.\n+   C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   C99 6.5.16 Assignment operators.\n+\n+   Check if all operations on constants are ok.  */\n+\n+#define ALLOPCONST(TYPE,NAME,POSTFIX) \\\n+\tTYPE NAME ## plus = +0.1 ## POSTFIX; \\\n+\tunsigned TYPE NAME ## u_plus = +0.1u ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_plus = +(_Sat TYPE)0.1 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_plus = +(_Sat unsigned TYPE)0.1u ## POSTFIX; \\\n+\tTYPE NAME ## neg = -0.1 ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_neg = -(_Sat TYPE)0.1 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_neg = -(_Sat unsigned TYPE)0.1u ## POSTFIX; \\\n+\tint NAME ## logneg1 = !0.1 ## POSTFIX; \\\n+\tint NAME ## logneg1u = !0.1u ## POSTFIX; \\\n+\tint NAME ## logneg2 = !0.0 ## POSTFIX; \\\n+\tint NAME ## logneg2u = !0.0u ## POSTFIX; \\\n+\tTYPE NAME ## add = 0.1 ## POSTFIX + 0.2 ## POSTFIX; \\\n+\tunsigned TYPE NAME ## u_add = 0.1u ## POSTFIX + 0.2u ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_add = (_Sat TYPE)0.8 ## POSTFIX + 0.3 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_add = (_Sat unsigned TYPE)0.8u ## POSTFIX + 0.3u ## POSTFIX; \\\n+\tTYPE NAME ## sub = 0.1 ## POSTFIX - 0.2 ## POSTFIX; \\\n+\tunsigned TYPE NAME ## u_sub = 0.2u ## POSTFIX - 0.1u ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_sub = (_Sat TYPE)0.1 ## POSTFIX - 0.2 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_sub = (_Sat unsigned TYPE)0.1u ## POSTFIX - 0.2u ## POSTFIX; \\\n+\tTYPE NAME ## mul = 0.1 ## POSTFIX * 0.2 ## POSTFIX; \\\n+\tunsigned TYPE NAME ## u_mul = 0.1u ## POSTFIX * 0.2u ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_mul = (_Sat TYPE)0.1 ## POSTFIX * 0.2 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_mul = (_Sat unsigned TYPE)0.1u ## POSTFIX * 0.2u ## POSTFIX; \\\n+\tTYPE NAME ## div = 0.1 ## POSTFIX / 0.3 ## POSTFIX; \\\n+\tunsigned TYPE NAME ## u_div = 0.1u ## POSTFIX / 0.3u ## POSTFIX; \\\n+\t_Sat TYPE NAME ## sat_div = (_Sat TYPE)0.3 ## POSTFIX / 0.1 ## POSTFIX; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_div = (_Sat unsigned TYPE)0.3u ## POSTFIX / 0.1u ## POSTFIX; \\\n+\tTYPE NAME ## shl = 0.1 ## POSTFIX << 3; \\\n+\tunsigned TYPE NAME ## u_shl = 0.1u ## POSTFIX << 3; \\\n+\t_Sat TYPE NAME ## sat_shl = (_Sat TYPE)0.8 ## POSTFIX << 3; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_shl = (_Sat unsigned TYPE)0.8u ## POSTFIX << 3; \\\n+\tTYPE NAME ## shr = 0.1 ## POSTFIX >> 5; \\\n+\tunsigned TYPE NAME ## u_shr = 0.1u ## POSTFIX >> 5; \\\n+\t_Sat TYPE NAME ## sat_shr = (_Sat TYPE)0.1 ## POSTFIX >> 5; \\\n+\t_Sat unsigned TYPE NAME ## sat_u_shr = (_Sat unsigned TYPE)0.1 ## POSTFIX >> 5; \\\n+\tint NAME ## ne = 0.1 ## POSTFIX != 0.2 ## POSTFIX; \\\n+\tint NAME ## u_ne = 0.1u ## POSTFIX != 0.2u ## POSTFIX; \\\n+\tint NAME ## eq = 0.1 ## POSTFIX == 0.2 ## POSTFIX; \\\n+\tint NAME ## u_eq = 0.1u ## POSTFIX == 0.2u ## POSTFIX; \\\n+\tint NAME ## gt = 0.1 ## POSTFIX > 0.2 ## POSTFIX; \\\n+\tint NAME ## u_gt = 0.1u ## POSTFIX > 0.2u ## POSTFIX; \\\n+\tint NAME ## ge = 0.1 ## POSTFIX >= 0.2 ## POSTFIX; \\\n+\tint NAME ## u_ge = 0.1u ## POSTFIX >= 0.2 ## POSTFIX; \\\n+\tint NAME ## lt = 0.1 ## POSTFIX < 0.2 ## POSTFIX; \\\n+\tint NAME ## u_lt = 0.1u ## POSTFIX < 0.2 ## POSTFIX; \\\n+\tint NAME ## le = 0.1 ## POSTFIX <= 0.2 ## POSTFIX; \\\n+\tint NAME ## u_le = 0.1u ## POSTFIX <= 0.2 ## POSTFIX; \\\n+\tint NAME ## ne2 = 0.2 ## POSTFIX != 0.2 ## POSTFIX; \\\n+\tint NAME ## u_ne2 = 0.2u ## POSTFIX != 0.2u ## POSTFIX; \\\n+\tint NAME ## eq2 = 0.2 ## POSTFIX == 0.2 ## POSTFIX; \\\n+\tint NAME ## u_eq2 = 0.2u ## POSTFIX == 0.2u ## POSTFIX; \\\n+\tint NAME ## gt2 = 0.2 ## POSTFIX > 0.2 ## POSTFIX; \\\n+\tint NAME ## u_gt2 = 0.2u ## POSTFIX > 0.2u ## POSTFIX; \\\n+\tint NAME ## ge2 = 0.2 ## POSTFIX >= 0.2 ## POSTFIX; \\\n+\tint NAME ## u_ge2 = 0.2u ## POSTFIX >= 0.2 ## POSTFIX; \\\n+\tint NAME ## lt2 = 0.2 ## POSTFIX < 0.2 ## POSTFIX; \\\n+\tint NAME ## u_lt2 = 0.2u ## POSTFIX < 0.2 ## POSTFIX; \\\n+\tint NAME ## le2 = 0.2 ## POSTFIX <= 0.2 ## POSTFIX; \\\n+\tint NAME ## u_le2 = 0.2u ## POSTFIX <= 0.2 ## POSTFIX; \\\n+\tTYPE NAME ## hr_signed = 0.1hr; \\\n+\tunsigned TYPE NAME ## hr_unsigned = 0.1hr; \\\n+\t_Sat TYPE NAME ## hr_sat_signed = 0.1hr; \\\n+\t_Sat unsigned TYPE NAME ## hr_sat_unsigned = 0.1hr; \\\n+\tTYPE NAME ## r_signed = 0.1r; \\\n+\tunsigned TYPE NAME ## r_unsigned = 0.1r; \\\n+\t_Sat TYPE NAME ## r_sat_signed = 0.1r; \\\n+\t_Sat unsigned TYPE NAME ## r_sat_unsigned = 0.1r; \\\n+\tTYPE NAME ## lr_signed = 0.1lr; \\\n+\tunsigned TYPE NAME ## lr_unsigned = 0.1lr; \\\n+\t_Sat TYPE NAME ## lr_sat_signed = 0.1lr; \\\n+\t_Sat unsigned TYPE NAME ## lr_sat_unsigned = 0.1lr; \\\n+\tTYPE NAME ## llr_signed = 0.1llr; \\\n+\tunsigned TYPE NAME ## llr_unsigned = 0.1llr; \\\n+\t_Sat TYPE NAME ## llr_sat_signed = 0.1llr; \\\n+\t_Sat unsigned TYPE NAME ## llr_sat_unsigned = 0.1llr; \\\n+\tTYPE NAME ## uhr_signed = 0.1uhr; \\\n+\tunsigned TYPE NAME ## uhr_unsigned = 0.1uhr; \\\n+\t_Sat TYPE NAME ## uhr_sat_signed = 0.1uhr; \\\n+\t_Sat unsigned TYPE NAME ## uhr_sat_unsigned = 0.1uhr; \\\n+\tTYPE NAME ## ur_signed = 0.1ur; \\\n+\tunsigned TYPE NAME ## ur_unsigned = 0.1ur; \\\n+\t_Sat TYPE NAME ## ur_sat_signed = 0.1ur; \\\n+\t_Sat unsigned TYPE NAME ## ur_sat_unsigned = 0.1ur; \\\n+\tTYPE NAME ## ulr_signed = 0.1ulr; \\\n+\tunsigned TYPE NAME ## ulr_unsigned = 0.1ulr; \\\n+\t_Sat TYPE NAME ## ulr_sat_signed = 0.1ulr; \\\n+\t_Sat unsigned TYPE NAME ## ulr_sat_unsigned = 0.1ulr; \\\n+\tTYPE NAME ## ullr_signed = 0.1ullr; \\\n+\tunsigned TYPE NAME ## ullr_unsigned = 0.1ullr; \\\n+\t_Sat TYPE NAME ## ullr_sat_signed = 0.1ullr; \\\n+\t_Sat unsigned TYPE NAME ## ullr_sat_unsigned = 0.1ullr; \\\n+\tTYPE NAME ## hk_signed = 0.1hk; \\\n+\tunsigned TYPE NAME ## hk_unsigned = 0.1hk; \\\n+\t_Sat TYPE NAME ## hk_sat_signed = 5.1hk; \\\n+\t_Sat unsigned TYPE NAME ## hk_sat_unsigned = 5.1hk; \\\n+\tTYPE NAME ## k_signed = 0.1k; \\\n+\tunsigned TYPE NAME ## k_unsigned = 0.1k; \\\n+\t_Sat TYPE NAME ## k_sat_signed = 5.1k; \\\n+\t_Sat unsigned TYPE NAME ## k_sat_unsigned = 5.1k; \\\n+\tTYPE NAME ## lk_signed = 0.1lk; \\\n+\tunsigned TYPE NAME ## lk_unsigned = 0.1lk; \\\n+\t_Sat TYPE NAME ## lk_sat_signed = 5.1lk; \\\n+\t_Sat unsigned TYPE NAME ## lk_sat_unsigned = 5.1lk; \\\n+\tTYPE NAME ## llk_signed = 0.1llk; \\\n+\tunsigned TYPE NAME ## llk_unsigned = 0.1llk; \\\n+\t_Sat TYPE NAME ## llk_sat_signed = 5.1llk; \\\n+\t_Sat unsigned TYPE NAME ## llk_sat_unsigned = 5.1llk; \\\n+\tTYPE NAME ## uhk_signed = 0.1uhk; \\\n+\tunsigned TYPE NAME ## uhk_unsigned = 0.1uhk; \\\n+\t_Sat TYPE NAME ## uhk_sat_signed = 5.1uhk; \\\n+\t_Sat unsigned TYPE NAME ## uhk_sat_unsigned = 5.1uhk; \\\n+\tTYPE NAME ## uk_signed = 0.1uk; \\\n+\tunsigned TYPE NAME ## uk_unsigned = 0.1uk; \\\n+\t_Sat TYPE NAME ## uk_sat_signed = 5.1uk; \\\n+\t_Sat unsigned TYPE NAME ## uk_sat_unsigned = 5.1uk; \\\n+\tTYPE NAME ## ulk_signed = 0.1ulk; \\\n+\tunsigned TYPE NAME ## ulk_unsigned = 0.1ulk; \\\n+\t_Sat TYPE NAME ## ulk_sat_signed = 5.1ulk; \\\n+\t_Sat unsigned TYPE NAME ## ulk_sat_unsigned = 5.1ulk; \\\n+\tTYPE NAME ## ullk_signed = 0.1ullk; \\\n+\tunsigned TYPE NAME ## ullk_unsigned = 0.1ullk; \\\n+\t_Sat TYPE NAME ## ullk_sat_signed = 5.1ullk; \\\n+\t_Sat unsigned TYPE NAME ## ullk_sat_unsigned = 5.1ullk; \\\n+\n+ALLOPCONST(short _Fract, sf, hr);\n+ALLOPCONST(_Fract, f, r);\n+ALLOPCONST(long _Fract, lf, lr);\n+ALLOPCONST(long long _Fract, llf, llr);\n+ALLOPCONST(short _Accum, sa, hk);\n+ALLOPCONST(_Accum, a, k);\n+ALLOPCONST(long _Accum, la, lk);\n+ALLOPCONST(long long _Accum, lla, llk);"}, {"sha": "eb36c097c231e131a3ced4cf3ffcb2662feccafa", "filename": "gcc/testsuite/gcc.dg/fixed-point/allop.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fallop.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.5.7 - Bitwise shift operands.\n+   C99 6.5.3 Unary operators.\n+   C99 6.5.5 Multiplicative operators.\n+   C99 6.5.6 Additive operators.\n+   C99 6.5.7 Bitwise shift operators.\n+   C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   C99 6.5.16 Assignment operators.\n+\n+   Check if all operations are ok.  */\n+\n+void true();\n+void false();\n+\n+#define ALLOP(TYPE,NAME) \\\n+  TYPE test1 ## NAME (TYPE a)  { return +a; } \\\n+  TYPE test2 ## NAME (TYPE a)  { return -a; } \\\n+  int test3 ## NAME (TYPE a)  { return !a; } \\\n+  TYPE test4 ## NAME (TYPE a, TYPE b) { return a + b; } \\\n+  TYPE test5 ## NAME (TYPE a, TYPE b) { return a - b; } \\\n+  TYPE test6 ## NAME (TYPE a, TYPE b) { return a * b; } \\\n+  TYPE test7 ## NAME (TYPE a, TYPE b) { return a / b; } \\\n+  TYPE test8 ## NAME (TYPE a, TYPE b) { a += b; return a; } \\\n+  TYPE test9 ## NAME (TYPE a, TYPE b) { a -= b; return a; } \\\n+  TYPE test10 ## NAME (TYPE a, TYPE b) { a *= b; return a; } \\\n+  TYPE test11 ## NAME (TYPE a, TYPE b) { a /= b; return a; } \\\n+  TYPE test12 ## NAME (TYPE a, int b) { return a << b; } \\\n+  TYPE test13 ## NAME (TYPE a, int b) { return a >> b; } \\\n+  TYPE test14 ## NAME (TYPE a, int b) { a <<= b; return a; } \\\n+  TYPE test15 ## NAME (TYPE a, int b) { a >>= b; return a; } \\\n+  int test16 ## NAME (TYPE a, TYPE b) { return a == b; } \\\n+  int test17 ## NAME (TYPE a, TYPE b) { return a != b; } \\\n+  int test18 ## NAME (TYPE a, TYPE b) { return a < b; } \\\n+  int test19 ## NAME (TYPE a, TYPE b) { return a <= b; } \\\n+  int test20 ## NAME (TYPE a, TYPE b) { return a >= b; } \\\n+  int test21 ## NAME (TYPE a, TYPE b) { return a > b; } \\\n+  void test22 ## NAME (TYPE a, TYPE b) { if(a == b)true(); else false(); } \\\n+  void test23 ## NAME (TYPE a, TYPE b) { if(a != b)true(); else false(); } \\\n+  void test24 ## NAME (TYPE a, TYPE b) { if(a < b)true(); else false(); } \\\n+  void test25 ## NAME (TYPE a, TYPE b) { if(a <= b)true(); else false(); } \\\n+  void test26 ## NAME (TYPE a, TYPE b) { if(a >= b)true(); else false(); } \\\n+  void test27 ## NAME (TYPE a, TYPE b) { if(a > b)true(); else false(); } \\\n+  TYPE test28 ## NAME (TYPE a) { return ++a; } \\\n+  TYPE test29 ## NAME (TYPE a) { return --a; } \\\n+  TYPE test30 ## NAME (TYPE *a) { return ++(*a); } \\\n+  TYPE test31 ## NAME (TYPE *a) { return (*a)++; } \\\n+  TYPE test32 ## NAME (TYPE *a) { return --(*a); } \\\n+  TYPE test33 ## NAME (TYPE *a) { return (*a)--; }\n+\n+ALLOP(short _Fract, sf);\n+ALLOP(_Fract, f);\n+ALLOP(long _Fract, lf);\n+ALLOP(long long _Fract, llf);\n+ALLOP(short _Accum, sa);\n+ALLOP(_Accum, a);\n+ALLOP(long _Accum, la);\n+ALLOP(long long _Accum, lla);\n+\n+ALLOP(unsigned short _Fract, usf);\n+ALLOP(unsigned _Fract, uf);\n+ALLOP(unsigned long _Fract, ulf);\n+ALLOP(unsigned long long _Fract, ullf);\n+ALLOP(unsigned short _Accum, usa);\n+ALLOP(unsigned _Accum, ua);\n+ALLOP(unsigned long _Accum, ula);\n+ALLOP(unsigned long long _Accum, ulla);\n+\n+ALLOP(_Sat short _Fract, Ssf);\n+ALLOP(_Sat _Fract, Sf);\n+ALLOP(_Sat long _Fract, Slf);\n+ALLOP(_Sat long long _Fract, Sllf);\n+ALLOP(_Sat short _Accum, Ssa);\n+ALLOP(_Sat _Accum, Sa);\n+ALLOP(_Sat long _Accum, Sla);\n+ALLOP(_Sat long long _Accum, Slla);\n+\n+ALLOP(_Sat unsigned short _Fract, Susf);\n+ALLOP(_Sat unsigned  _Fract, Suf);\n+ALLOP(_Sat unsigned long _Fract, Sulf);\n+ALLOP(_Sat unsigned long long _Fract, Sullf);\n+ALLOP(_Sat unsigned short _Accum, Susa);\n+ALLOP(_Sat unsigned  _Accum, Sua);\n+ALLOP(_Sat unsigned long _Accum, Sula);\n+ALLOP(_Sat unsigned long long _Accum, Sulla);"}, {"sha": "e2cb6ea258c205455a8898acc6e2a53b14715346", "filename": "gcc/testsuite/gcc.dg/fixed-point/binary.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbinary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbinary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbinary.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.5.7 - Bitwise shift operands.\n+   C99 6.5.5 Multiplicative operators.\n+   C99 6.5.6 Additive operators.\n+   C99 6.5.7 Bitwise shift operators.\n+   C99 6.5.8 Relational operators.\n+   C99 6.5.9 Equality operators.\n+   C99 6.5.16 Assignment operators.\n+\n+   Check binary operators + - * / << >> < <= >= > == != += -= *= /= <<= >>=.  */\n+\n+extern void abort (void);\n+\n+#define BINARY(TYPE,POSTFIX) \\\n+  { TYPE a = 0.5 ## POSTFIX; \\\n+    TYPE b = 0.25 ## POSTFIX; \\\n+    if (a + b != 0.75 ## POSTFIX) \\\n+      abort(); \\\n+    if (a - b != 0.25 ## POSTFIX) \\\n+      abort(); \\\n+    if (a * b != 0.125 ## POSTFIX) \\\n+      abort(); \\\n+    if (b / a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (b << 1 != a) \\\n+      abort(); \\\n+    if (a >> 1 != b) \\\n+      abort(); \\\n+    if (a < b != 0) \\\n+      abort(); \\\n+    if (a <= b != 0) \\\n+      abort(); \\\n+    if (a > b != 1) \\\n+      abort(); \\\n+    if (a >= b != 1) \\\n+      abort(); \\\n+    if (a == b != 0) \\\n+      abort(); \\\n+    if (a != b != 1) \\\n+      abort(); \\\n+    a += b; \\\n+    if (a != 0.75 ## POSTFIX) \\\n+      abort(); \\\n+    a -= b; \\\n+    if (a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    a *= b; \\\n+    if (a != 0.125 ## POSTFIX) \\\n+      abort(); \\\n+    a /= b; \\\n+    if (a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    a >>= 2; \\\n+    if (a != 0.125 ## POSTFIX) \\\n+      abort(); \\\n+    a <<= 1; \\\n+    if (a != 0.25 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_BINARY(TYPE,POSTFIX) \\\n+  { TYPE a = 0.7 ## POSTFIX; \\\n+    TYPE b = 0.9 ## POSTFIX; \\\n+    if (a + b != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.7 ## POSTFIX; \\\n+    b = -0.9 ## POSTFIX; \\\n+    if (a + b != -0.5 ## POSTFIX - 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    a = 0.7 ## POSTFIX; \\\n+    b = -0.9 ## POSTFIX; \\\n+    if (a - b != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.7 ## POSTFIX; \\\n+    b = 0.9 ## POSTFIX; \\\n+    if (a - b != -0.5 ## POSTFIX - 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.5 ## POSTFIX - 0.5 ## POSTFIX; \\\n+    if (a * a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = 0.8 ## POSTFIX; \\\n+    b = 0.5 ## POSTFIX; \\\n+    if (a / b != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.8 ## POSTFIX; \\\n+    b = 0.5 ## POSTFIX; \\\n+    if (a / b != -0.5 ## POSTFIX - 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    a = 0.1 ## POSTFIX; \\\n+    if (a << 4 != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.8 ## POSTFIX; \\\n+    if (a << 4 != -0.5 ## POSTFIX - 0.5 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_UNS_BINARY(TYPE,POSTFIX) \\\n+  { TYPE a = 0.7 ## POSTFIX; \\\n+    TYPE b = 0.9 ## POSTFIX; \\\n+    if (a + b != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a - b != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (b / a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a << 1 != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+int main ()\n+{\n+  BINARY(short _Fract, hr);\n+  BINARY(_Fract, r);\n+  BINARY(long _Fract, lr);\n+  BINARY(long long _Fract, llr);\n+  BINARY(unsigned short _Fract, uhr);\n+  BINARY(unsigned _Fract, ur);\n+  BINARY(unsigned long _Fract, ulr);\n+  BINARY(unsigned long long _Fract, ullr);\n+  BINARY(_Sat short _Fract, hr);\n+  BINARY(_Sat _Fract, r);\n+  BINARY(_Sat long _Fract, lr);\n+  BINARY(_Sat long long _Fract, llr);\n+  BINARY(_Sat unsigned short _Fract, uhr);\n+  BINARY(_Sat unsigned _Fract, ur);\n+  BINARY(_Sat unsigned long _Fract, ulr);\n+  BINARY(_Sat unsigned long long _Fract, ullr);\n+  BINARY(short _Accum, hk);\n+  BINARY(_Accum, k);\n+  BINARY(long _Accum, lk);\n+  BINARY(long long _Accum, llk);\n+  BINARY(unsigned short _Accum, uhk);\n+  BINARY(unsigned _Accum, uk);\n+  BINARY(unsigned long _Accum, ulk);\n+  BINARY(unsigned long long _Accum, ullk);\n+  BINARY(_Sat short _Accum, hk);\n+  BINARY(_Sat _Accum, k);\n+  BINARY(_Sat long _Accum, lk);\n+  BINARY(_Sat long long _Accum, llk);\n+  BINARY(_Sat unsigned short _Accum, uhk);\n+  BINARY(_Sat unsigned _Accum, uk);\n+  BINARY(_Sat unsigned long _Accum, ulk);\n+  BINARY(_Sat unsigned long long _Accum, ullk);\n+\n+  FRACT_SAT_BINARY(_Sat short _Fract, hr);\n+  FRACT_SAT_BINARY(_Sat _Fract, r);\n+  FRACT_SAT_BINARY(_Sat long _Fract, lr);\n+  FRACT_SAT_BINARY(_Sat long long _Fract, llr);\n+\n+  FRACT_SAT_UNS_BINARY(_Sat unsigned short _Fract, uhr);\n+  FRACT_SAT_UNS_BINARY(_Sat unsigned _Fract, ur);\n+  FRACT_SAT_UNS_BINARY(_Sat unsigned long _Fract, ulr);\n+  FRACT_SAT_UNS_BINARY(_Sat unsigned long long _Fract, ullr);\n+\n+  return 0;\n+}"}, {"sha": "76c20d0d43f6280af653899234afc0732359a0d0", "filename": "gcc/testsuite/gcc.dg/fixed-point/bit-complement.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbit-complement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbit-complement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fbit-complement.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.3 Unary ~.  */\n+\n+void test ()\n+{\n+  short _Fract sf;\n+  _Fract f;\n+  long _Fract lf;\n+  long long _Fract llf;\n+  unsigned short _Fract usf;\n+  unsigned _Fract uf;\n+  unsigned long _Fract ulf;\n+  unsigned long long _Fract ullf;\n+  _Sat short _Fract Ssf;\n+  _Sat _Fract Sf;\n+  _Sat long _Fract Slf;\n+  _Sat long long _Fract Sllf;\n+  _Sat unsigned short _Fract Susf;\n+  _Sat unsigned _Fract Suf;\n+  _Sat unsigned long _Fract Sulf;\n+  _Sat unsigned long long _Fract Sullf;\n+  short _Accum sa;\n+  _Accum a;\n+  long _Accum la;\n+  long long _Accum lla;\n+  unsigned short _Accum usa;\n+  unsigned _Accum ua;\n+  unsigned long _Accum ula;\n+  unsigned long long _Accum ulla;\n+  _Sat short _Accum Ssa;\n+  _Sat _Accum Sa;\n+  _Sat long _Accum Sla;\n+  _Sat long long _Accum Slla;\n+  _Sat unsigned short _Accum Susa;\n+  _Sat unsigned _Accum Sua;\n+  _Sat unsigned long _Accum Sula;\n+  _Sat unsigned long long _Accum Sulla;\n+\n+  /* C99 Section 6.5.3.3 ~ shall have integer types.  */\n+\n+  ~sf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~f; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~lf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~llf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~usf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~uf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~ulf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~ullf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Ssf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Slf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sllf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Susf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Suf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sulf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sullf; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~sa; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~a; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~la; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~lla; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~usa; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~ua; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~ula; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~ulla; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Ssa; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sa; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sla; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Slla; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Susa; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sua; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sula; /* { dg-error \"wrong type argument to bit-complement\" } */\n+  ~Sulla; /* { dg-error \"wrong type argument to bit-complement\" } */\n+\n+}"}, {"sha": "8b9d8225db825ee6d892267a88c3f8da8bd69630", "filename": "gcc/testsuite/gcc.dg/fixed-point/call-by-value.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcall-by-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcall-by-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcall-by-value.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.9.1(9) Function definitions; parameter has automatic storage.\n+\n+   Test that actual parameters are passed by value and that modifications\n+   made within functions are lost on function return.\n+\n+   This test is copied from gcc.dg/dfp/ and changed for fixed-point types.  */\n+\n+extern void abort (void);\n+\n+#define FOO_FUN(NAME,TYPE,VALUE) \\\n+int foo ## NAME (TYPE z) \\\n+{ \\\n+  z = z + VALUE; \\\n+}\n+\n+#define FOO_TEST(NAME,TYPE,VALUE) \\\n+  { \\\n+    TYPE NAME = VALUE; \\\n+    foo ## NAME (NAME); \\\n+    if (NAME != VALUE) \\\n+      abort (); \\\n+  }\n+\n+FOO_FUN (sf, short _Fract, 0.2hr)\n+FOO_FUN (f, _Fract, 0.2r)\n+FOO_FUN (lf, long _Fract, 0.2lr)\n+FOO_FUN (llf, long long _Fract, 0.2llr)\n+FOO_FUN (usf, unsigned short _Fract, 0.2uhr)\n+FOO_FUN (uf, unsigned _Fract, 0.2ur)\n+FOO_FUN (ulf, unsigned long _Fract, 0.2ulr)\n+FOO_FUN (ullf, unsigned long long _Fract, 0.2ullr)\n+FOO_FUN (Ssf, _Sat short _Fract, 0.2hr)\n+FOO_FUN (Sf, _Sat _Fract, 0.2r)\n+FOO_FUN (Slf, _Sat long _Fract, 0.2lr)\n+FOO_FUN (Sllf, _Sat long long _Fract, 0.2llr)\n+FOO_FUN (Susf, _Sat unsigned short _Fract, 0.2uhr)\n+FOO_FUN (Suf, _Sat unsigned _Fract, 0.2ur)\n+FOO_FUN (Sulf, _Sat unsigned long _Fract, 0.2ulr)\n+FOO_FUN (Sullf, _Sat unsigned long long _Fract, 0.2ullr)\n+FOO_FUN (sa, short _Accum, 0.2hk)\n+FOO_FUN (a, _Accum, 0.2k)\n+FOO_FUN (la, long _Accum, 0.2lk)\n+FOO_FUN (lla, long long _Accum, 0.2llk)\n+FOO_FUN (usa, unsigned short _Accum, 0.2uhk)\n+FOO_FUN (ua, unsigned _Accum, 0.2uk)\n+FOO_FUN (ula, unsigned long _Accum, 0.2ulk)\n+FOO_FUN (ulla, unsigned long long _Accum, 0.2ullk)\n+FOO_FUN (Ssa, _Sat short _Accum, 0.2hk)\n+FOO_FUN (Sa, _Sat _Accum, 0.2k)\n+FOO_FUN (Sla, _Sat long _Accum, 0.2lk)\n+FOO_FUN (Slla, _Sat long long _Accum, 0.2llk)\n+FOO_FUN (Susa, _Sat unsigned short _Accum, 0.2uhk)\n+FOO_FUN (Sua, _Sat unsigned _Accum, 0.2uk)\n+FOO_FUN (Sula, _Sat unsigned long _Accum, 0.2ulk)\n+FOO_FUN (Sulla, _Sat unsigned long long _Accum, 0.2ullk)\n+\n+int\n+main ()\n+{\n+  FOO_TEST (sf, short _Fract, 0.2hr)\n+  FOO_TEST (f, _Fract, 0.2r)\n+  FOO_TEST (lf, long _Fract, 0.2lr)\n+  FOO_TEST (llf, long long _Fract, 0.2llr)\n+  FOO_TEST (usf, unsigned short _Fract, 0.2uhr)\n+  FOO_TEST (uf, unsigned _Fract, 0.2ur)\n+  FOO_TEST (ulf, unsigned long _Fract, 0.2ulr)\n+  FOO_TEST (ullf, unsigned long long _Fract, 0.2ullr)\n+  FOO_TEST (Ssf, _Sat short _Fract, 0.2hr)\n+  FOO_TEST (Sf, _Sat _Fract, 0.2r)\n+  FOO_TEST (Slf, _Sat long _Fract, 0.2lr)\n+  FOO_TEST (Sllf, _Sat long long _Fract, 0.2llr)\n+  FOO_TEST (Susf, _Sat unsigned short _Fract, 0.2uhr)\n+  FOO_TEST (Suf, _Sat unsigned _Fract, 0.2ur)\n+  FOO_TEST (Sulf, _Sat unsigned long _Fract, 0.2ulr)\n+  FOO_TEST (Sullf, _Sat unsigned long long _Fract, 0.2ullr)\n+  FOO_TEST (sa, short _Accum, 0.2hk)\n+  FOO_TEST (a, _Accum, 0.2k)\n+  FOO_TEST (la, long _Accum, 0.2lk)\n+  FOO_TEST (lla, long long _Accum, 0.2llk)\n+  FOO_TEST (usa, unsigned short _Accum, 0.2uhk)\n+  FOO_TEST (ua, unsigned _Accum, 0.2uk)\n+  FOO_TEST (ula, unsigned long _Accum, 0.2ulk)\n+  FOO_TEST (ulla, unsigned long long _Accum, 0.2ullk)\n+  FOO_TEST (Ssa, _Sat short _Accum, 0.2hk)\n+  FOO_TEST (Sa, _Sat _Accum, 0.2k)\n+  FOO_TEST (Sla, _Sat long _Accum, 0.2lk)\n+  FOO_TEST (Slla, _Sat long long _Accum, 0.2llk)\n+  FOO_TEST (Susa, _Sat unsigned short _Accum, 0.2uhk)\n+  FOO_TEST (Sua, _Sat unsigned _Accum, 0.2uk)\n+  FOO_TEST (Sula, _Sat unsigned long _Accum, 0.2ulk)\n+  FOO_TEST (Sulla, _Sat unsigned long long _Accum, 0.2ullk)\n+\n+  return 0;\n+}"}, {"sha": "ec8ea805a8e96df75f8e51d270b6716d76a2e235", "filename": "gcc/testsuite/gcc.dg/fixed-point/cast-bad.c", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcast-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcast-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcast-bad.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,279 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.4 Cast operators.\n+\n+   Test invalid casts involving fixed-point.  */\n+\n+#define CAST(NAME,TYPE) \\\n+  struct s ## NAME { TYPE NAME; } as ## NAME; \\\n+  union u ## NAME { TYPE NAME; } au ## NAME; \\\n+  TYPE NAME; \\\n+  TYPE * NAME ## p;\n+\n+CAST (sf, short _Fract)\n+CAST (f, _Fract)\n+CAST (lf, long _Fract)\n+CAST (llf, long long _Fract)\n+CAST (usf, unsigned short _Fract)\n+CAST (uf, unsigned _Fract)\n+CAST (ulf, unsigned long _Fract)\n+CAST (ullf, unsigned long long _Fract)\n+CAST (Ssf, _Sat short _Fract)\n+CAST (Sf, _Sat _Fract)\n+CAST (Slf, _Sat long _Fract)\n+CAST (Sllf, _Sat long long _Fract)\n+CAST (Susf, _Sat unsigned short _Fract)\n+CAST (Suf, _Sat unsigned _Fract)\n+CAST (Sulf, _Sat unsigned long _Fract)\n+CAST (Sullf, _Sat unsigned long long _Fract)\n+CAST (sa, short _Accum)\n+CAST (a, _Accum)\n+CAST (la, long _Accum)\n+CAST (lla, long long _Accum)\n+CAST (usa, unsigned short _Accum)\n+CAST (ua, unsigned _Accum)\n+CAST (ula, unsigned long _Accum)\n+CAST (ulla, unsigned long long _Accum)\n+CAST (Ssa, _Sat short _Accum)\n+CAST (Sa, _Sat _Accum)\n+CAST (Sla, _Sat long _Accum)\n+CAST (Slla, _Sat long long _Accum)\n+CAST (Susa, _Sat unsigned short _Accum)\n+CAST (Sua, _Sat unsigned _Accum)\n+CAST (Sula, _Sat unsigned long _Accum)\n+CAST (Sulla, _Sat unsigned long long _Accum)\n+\n+void\n+test (void)\n+{\n+  (short _Fract []) sfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Fract []) fp; /* { dg-error \"cast specifies array type\" } */\n+  (long _Fract []) lfp; /* { dg-error \"cast specifies array type\" } */\n+  (long long _Fract []) llfp; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned short _Fract []) usfp; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned _Fract []) ufp; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned long _Fract []) ulfp; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned long long _Fract []) ullfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat short _Fract []) Ssfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat _Fract []) Sfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat long _Fract []) Slfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat long long _Fract []) Sllfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned short _Fract []) Susfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned _Fract []) Sufp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned long _Fract []) Sulfp; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned long long _Fract []) Sullfp; /* { dg-error \"cast specifies array type\" } */\n+  (short _Accum []) sap; /* { dg-error \"cast specifies array type\" } */\n+  (_Accum []) ap; /* { dg-error \"cast specifies array type\" } */\n+  (long _Accum []) lap; /* { dg-error \"cast specifies array type\" } */\n+  (long long _Accum []) llap; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned short _Accum []) usap; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned _Accum []) uap; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned long _Accum []) ulap; /* { dg-error \"cast specifies array type\" } */\n+  (unsigned long long _Accum []) ullap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat short _Accum []) Ssap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat _Accum []) Sap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat long _Accum []) Slap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat long long _Accum []) Sllap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned short _Accum []) Susap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned _Accum []) Suap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned long _Accum []) Sulap; /* { dg-error \"cast specifies array type\" } */\n+  (_Sat unsigned long long _Accum []) Sullap; /* { dg-error \"cast specifies array type\" } */\n+\n+  (short _Fract ()) sfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Fract ()) fp; /* { dg-error \"cast specifies function type\" } */\n+  (long _Fract ()) lfp; /* { dg-error \"cast specifies function type\" } */\n+  (long long _Fract ()) llfp; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned short _Fract ()) usfp; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned _Fract ()) ufp; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned long _Fract ()) ulfp; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned long long _Fract ()) ullfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat short _Fract ()) Ssfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat _Fract ()) Sfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat long _Fract ()) Slfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat long long _Fract ()) Sllfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned short _Fract ()) Susfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned _Fract ()) Sufp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned long _Fract ()) Sulfp; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned long long _Fract ()) Sullfp; /* { dg-error \"cast specifies function type\" } */\n+  (short _Accum ()) sap; /* { dg-error \"cast specifies function type\" } */\n+  (_Accum ()) ap; /* { dg-error \"cast specifies function type\" } */\n+  (long _Accum ()) lap; /* { dg-error \"cast specifies function type\" } */\n+  (long long _Accum ()) llap; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned short _Accum ()) usap; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned _Accum ()) uap; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned long _Accum ()) ulap; /* { dg-error \"cast specifies function type\" } */\n+  (unsigned long long _Accum ()) ullap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat short _Accum ()) Ssap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat _Accum ()) Sap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat long _Accum ()) Slap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat long long _Accum ()) Sllap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned short _Accum ()) Susap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned _Accum ()) Suap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned long _Accum ()) Sulap; /* { dg-error \"cast specifies function type\" } */\n+  (_Sat unsigned long long _Accum ()) Sullap; /* { dg-error \"cast specifies function type\" } */\n+\n+  (struct ssf) sf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sf) f; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct slf) lf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sllf) llf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct susf) usf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct suf) uf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sulf) ulf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sullf) ullf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSsf) Ssf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSf) Sf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSlf) Slf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSllf) Sllf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSusf) Susf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSuf) Suf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSulf) Sulf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSullf) Sullf; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct ssa) sa; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sa) a; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sla) la; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct slla) lla; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct susa) usa; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sua) ua; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sula) ula; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sulla) ulla; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSsa) Ssa; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSa) Sa; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSla) Sla; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSlla) Slla; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSusa) Susa; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSua) Sua; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSula) Sula; /* { dg-error \"conversion to non-scalar type requested\" } */\n+  (struct sSulla) Sulla; /* { dg-error \"conversion to non-scalar type requested\" } */\n+\n+  (union usf) sf;\n+  (union uf) f;\n+  (union ulf) lf;\n+  (union ullf) llf;\n+  (union uusf) usf;\n+  (union uuf) uf;\n+  (union uulf) ulf;\n+  (union uullf) ullf;\n+  (union uSsf) Ssf;\n+  (union uSf) Sf;\n+  (union uSlf) Slf;\n+  (union uSllf) Sllf;\n+  (union uSusf) Susf;\n+  (union uSuf) Suf;\n+  (union uSulf) Sulf;\n+  (union uSullf) Sullf;\n+  (union usa) sa;\n+  (union ua) a;\n+  (union ula) la;\n+  (union ulla) lla;\n+  (union uusa) usa;\n+  (union uua) ua;\n+  (union uula) ula;\n+  (union uulla) ulla;\n+  (union uSsa) Ssa;\n+  (union uSa) Sa;\n+  (union uSla) Sla;\n+  (union uSlla) Slla;\n+  (union uSusa) Susa;\n+  (union uSua) Sua;\n+  (union uSula) Sula;\n+  (union uSulla) Sulla;\n+\n+  (union usf) f; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) lf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) llf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) usf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) uf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) ulf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) ullf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Ssf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Slf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sllf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Susf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Suf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sulf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sullf; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) sa; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) a; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) la; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) lla; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) usa; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) ua; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) ula; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) ulla; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Ssa; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sa; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sla; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Slla; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Susa; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sua; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sula; /* { dg-error \"cast to union type from type not present in union\" } */\n+  (union usf) Sulla; /* { dg-error \"cast to union type from type not present in union\" } */\n+\n+  (short _Fract) assf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Fract) asf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long _Fract) aslf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long long _Fract) asllf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned short _Fract) asusf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned _Fract) asuf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long _Fract) asulf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long long _Fract) asullf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat short _Fract) asSsf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat _Fract) asSf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long _Fract) asSlf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long long _Fract) asSllf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned short _Fract) asSusf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned _Fract) asSuf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long _Fract) asSulf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long long _Fract) asSullf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (short _Accum) assa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Accum) asa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long _Accum) asla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long long _Accum) aslla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned short _Accum) asusa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned _Accum) asua; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long _Accum) asula; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long long _Accum) asulla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat short _Accum) asSsa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat _Accum) asSa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long _Accum) asSla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long long _Accum) asSlla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned short _Accum) asSusa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned _Accum) asSua; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long _Accum) asSula; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long long _Accum) asSulla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+\n+  (short _Fract) ausf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Fract) auf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long _Fract) aulf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long long _Fract) aullf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned short _Fract) auusf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned _Fract) auuf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long _Fract) auulf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long long _Fract) auullf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat short _Fract) auSsf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat _Fract) auSf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long _Fract) auSlf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long long _Fract) auSllf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned short _Fract) auSusf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned _Fract) auSuf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long _Fract) auSulf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long long _Fract) auSullf; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (short _Accum) ausa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Accum) aua; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long _Accum) aula; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (long long _Accum) aulla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned short _Accum) auusa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned _Accum) auua; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long _Accum) auula; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (unsigned long long _Accum) auulla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat short _Accum) auSsa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat _Accum) auSa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long _Accum) auSla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat long long _Accum) auSlla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned short _Accum) auSusa; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned _Accum) auSua; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long _Accum) auSula; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+  (_Sat unsigned long long _Accum) auSulla; /* { dg-error \"aggregate value used where a fixed-point was expected\" } */\n+}"}, {"sha": "990d4f0f1ac6fb3ed241c2a316d5c8bb963dadd6", "filename": "gcc/testsuite/gcc.dg/fixed-point/composite-type.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fcomposite-type.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O -Wall\" } */\n+\n+/* C99 6.2.7: Compatible type and composite type.  */\n+\n+#define FIXED_POINT_COMPOSITE_DECL(TYPE,NAME) \\\n+  TYPE g1_##NAME(); \\\n+  TYPE g2_##NAME(); \\\n+  TYPE (*h1_##NAME)[2]; \\\n+  TYPE (*h2_##NAME)[3]; \\\n+  TYPE (*h3_##NAME)[4]; \\\n+  TYPE f1_##NAME(TYPE(*)()); \\\n+  TYPE f1_##NAME(TYPE(*)(TYPE*)); \\\n+  TYPE f1_##NAME (TYPE(*g)(TYPE*)) \\\n+   { \\\n+     TYPE NAME; \\\n+     NAME = ((TYPE (*) (TYPE*)) g)(&NAME); \\\n+     NAME = ((TYPE (*) ()) g); \\\n+     return NAME; \\\n+   } \\\n+  TYPE f2_##NAME(TYPE(*)[]); \\\n+  TYPE f2_##NAME(TYPE(*)[3]);\n+\n+#define FIXED_POINT_COMPOSITE_TEST(TYPE, NAME) \\\n+do \\\n+{ \\\n+ TYPE NAME; \\\n+ NAME = f1_##NAME(g1_##NAME); \\\n+ NAME = f1_##NAME(g2_##NAME); \\\n+ NAME = f2_##NAME(h1_##NAME); \\\n+ NAME = f2_##NAME(h2_##NAME); \\\n+ NAME = f2_##NAME(h3_##NAME); \\\n+} while(0)\n+\n+FIXED_POINT_COMPOSITE_DECL(short _Fract, sf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Fract, f);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(long _Fract, lf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(long long _Fract, llf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned short _Fract, usf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned _Fract, uf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned long _Fract, ulf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned long long _Fract, ullf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat short _Fract, Ssf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat _Fract, Sf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat long _Fract, Slf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat long long _Fract, Sllf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned short _Fract, Susf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned _Fract, Suf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned long _Fract, Sulf);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned long long _Fract, Sullf);  /* { dg-error \"incompatible types in assignment\" } */\n+\n+FIXED_POINT_COMPOSITE_DECL(short _Accum, sk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Accum, k);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(long _Accum, lk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(long long _Accum, llk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned short _Accum, usk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned _Accum, uk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned long _Accum, ulk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(unsigned long long _Accum, ullk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat short _Accum, Ssk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat _Accum, Sk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat long _Accum, Slk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat long long _Accum, Sllk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned short _Accum, Susk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned _Accum, Suk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned long _Accum, Sulk);  /* { dg-error \"incompatible types in assignment\" } */\n+FIXED_POINT_COMPOSITE_DECL(_Sat unsigned long long _Accum, Sullk);  /* { dg-error \"incompatible types in assignment\" } */\n+\n+int main()\n+{\n+  FIXED_POINT_COMPOSITE_TEST(short _Fract, sf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Fract, f);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(long _Fract, lf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(long long _Fract, llf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned short _Fract, usf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned _Fract, uf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned long _Fract, ulf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned long long _Fract, ullf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat short _Fract, Ssf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat _Fract, Sf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat long _Fract, Slf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat long long _Fract, Sllf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned short _Fract, Susf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned _Fract, Suf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned long _Fract, Sulf);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned long long _Fract, Sullf);  /* { dg-warning \"incompatible pointer type\" } */\n+\n+  FIXED_POINT_COMPOSITE_TEST(short _Accum, sk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Accum, k);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(long _Accum, lk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(long long _Accum, llk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned short _Accum, usk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned _Accum, uk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned long _Accum, ulk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(unsigned long long _Accum, ullk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat short _Accum, Ssk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat _Accum, Sk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat long _Accum, Slk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat long long _Accum, Sllk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned short _Accum, Susk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned _Accum, Suk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned long _Accum, Sulk);  /* { dg-warning \"incompatible pointer type\" } */\n+  FIXED_POINT_COMPOSITE_TEST(_Sat unsigned long long _Accum, Sullk);  /* { dg-warning \"incompatible pointer type\" } */\n+\n+  return 0;\n+}"}, {"sha": "5df0b4adcb58bfad4e48d062d4f1f94de309ff62", "filename": "gcc/testsuite/gcc.dg/fixed-point/const-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconst-1.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.4.4 - Constants.\n+\n+   Check if the constant 1 is ok.  */\n+\n+short _Fract sf = 1.0hr;\n+_Fract f = 1.0r;\n+long _Fract lf = 1.0lr;\n+long long _Fract llf = 1.0llr;\n+\n+unsigned short _Fract usf = 1.0uhr;\n+unsigned _Fract uf = 1.0ur;\n+unsigned long _Fract ulf = 1.0ulr;\n+unsigned long long _Fract ullf = 1.0ullr;\n+\n+short _Fract sfF = 1.0;  /* { dg-warning \"overflow\" } */\n+_Fract fF = 1.0;  /* { dg-warning \"overflow\" } */\n+long _Fract lfF = 1.0;  /* { dg-warning \"overflow\" } */\n+long long _Fract llfF = 1.0;  /* { dg-warning \"overflow\" } */\n+\n+unsigned short _Fract usfF = 1.0;  /* { dg-warning \"overflow\" } */\n+unsigned _Fract ufF = 1.0;  /* { dg-warning \"overflow\" } */\n+unsigned long _Fract ulfF = 1.0;  /* { dg-warning \"overflow\" } */\n+unsigned long long _Fract ullfF = 1.0;  /* { dg-warning \"overflow\" } */\n+\n+short _Fract sfI = 1;  /* { dg-warning \"overflow\" } */\n+_Fract fI = 1;  /* { dg-warning \"overflow\" } */\n+long _Fract lfI = 1;  /* { dg-warning \"overflow\" } */\n+long long _Fract llfI = 1;  /* { dg-warning \"overflow\" } */\n+\n+unsigned short _Fract usfI = 1;  /* { dg-warning \"overflow\" } */\n+unsigned _Fract ufI = 1;  /* { dg-warning \"overflow\" } */\n+unsigned long _Fract ulfI = 1;  /* { dg-warning \"overflow\" } */\n+unsigned long long _Fract ullfI = 1;  /* { dg-warning \"overflow\" } */"}, {"sha": "18abb4501603c03f5ba0035344875d7151c96f65", "filename": "gcc/testsuite/gcc.dg/fixed-point/constant.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstant.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.4.4.2a - Fixed-point constants (NEW CLAUSE).\n+\n+   Check if fixed-point constants are ok.  */\n+\n+_Accum k0 = 0k;\n+_Accum k1 = 9999.0e0k;\n+_Accum k2 = 9999.0k;\n+_Accum k3 = 9999k;\n+_Accum k4 = 9999e0k;\n+_Accum k5 = 09999k;\n+_Accum k6 = 09999e0k;\n+_Accum k7 = 09999.0e0k;\n+_Accum k8 = 09999.0k;\n+_Accum k9 = 0x270fp0k;\n+_Accum k10 = 0x270f.0p0k;\n+\n+_Fract r0 = 0r;\n+_Fract r1 = 0e0r;\n+_Fract r2 = 0.0e0r;\n+_Fract r3 = 0.1e0r;\n+_Fract r4 = 0.0r;\n+_Fract r5 = 0.1r;\n+_Fract r6 = 0x0p0r;\n+_Fract r7 = 0x0.0p0r;\n+_Fract r8 = 0x0.1p0r;"}, {"sha": "9392381ba9f1907dc5c20a005ab23b2ce93e28c4", "filename": "gcc/testsuite/gcc.dg/fixed-point/constants-pedantic.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstants-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstants-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconstants-pedantic.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+/* N1169 6.4.4.2a - Fixed-point constants (NEW CLAUSE).  */\n+\n+_Accum k0 = 0k;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k1 = 9999.0e0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k2 = 9999.0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k3 = 9999k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k4 = 9999e0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k5 = 09999k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k6 = 09999e0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k7 = 09999.0e0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k8 = 09999.0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k9 = 0x270fp0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum k10 = 0x270f.0p0k;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+\n+_Fract r0 = 0r;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r1 = 0e0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r2 = 0.0e0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r3 = 0.1e0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r4 = 0.0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r5 = 0.1r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r6 = 0x0p0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r7 = 0x0.0p0r;\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Fract r8 = 0x0.1p0r;\t/* { dg-warning \"GCC extension|ISO C\" } */"}, {"sha": "f4e373f2d60923f200e30188ceaa231853d632de", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert.c", "status": "added", "additions": 432, "deletions": 0, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,432 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+/* Fixed-point to fixed-point.  */\n+#define CONV(TYPE1,POSTFIX1,TYPE2,POSTFIX2) \\\n+  { \\\n+    TYPE1 a = 0.5 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    if (b != 0.5 ## POSTFIX2) \\\n+      abort(); \\\n+  }\n+\n+/* TYPE1 with VALUE1 to TYPE2 with VALUE2.  */\n+#define CONV2(TYPE1,VALUE1,TYPE2,VALUE2) \\\n+  { \\\n+    TYPE1 a = VALUE1; \\\n+    TYPE2 b = a; \\\n+    if (b != VALUE2) \\\n+      abort(); \\\n+  }\n+\n+/* Fixed-point to integer, and integer to fixed-point.  */\n+#define CONV_INT(TYPE1,POSTFIX1,TYPE2) \\\n+  { \\\n+    TYPE1 a = 0.5 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    TYPE2 c = 0; \\\n+    TYPE1 d = c; \\\n+    if (b != 0) \\\n+      abort(); \\\n+    if (d != 0.0 ## POSTFIX1) \\\n+      abort(); \\\n+  }\n+\n+/* Signed fixed-point to integer.  */\n+#define CONV_INT2(TYPE1,POSTFIX1,TYPE2) \\\n+  { \\\n+    TYPE1 a = -0.5 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    if (b != 0) \\\n+      abort(); \\\n+    a = -0.0 ## POSTFIX1; \\\n+    b = a; \\\n+    if (b != 0) \\\n+      abort(); \\\n+    a = +0.0 ## POSTFIX1; \\\n+    b = a; \\\n+    if (b != 0) \\\n+      abort(); \\\n+    a = +0.1 ## POSTFIX1; \\\n+    b = a; \\\n+    if (b != 0) \\\n+      abort(); \\\n+    a = -0.1 ## POSTFIX1; \\\n+    b = a; \\\n+    if (b != 0) \\\n+      abort(); \\\n+  }\n+\n+/* Signed fixed-point to signed integer.  */\n+#define CONV_INT3(TYPE1,POSTFIX1,TYPE2) \\\n+  { \\\n+    TYPE1 a = -0.5 ## POSTFIX1 - 0.5 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    if (b != -1) \\\n+      abort(); \\\n+  }\n+\n+/* Fixed-point to floating-point, and floating-point to fixed-point.  */\n+#define CONV_FLOAT(TYPE1,POSTFIX1,TYPE2) \\\n+  { \\\n+    TYPE1 a = 0.5 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    TYPE2 c = 0.25; \\\n+    TYPE1 d = c; \\\n+    if (b != 0.5) \\\n+      abort(); \\\n+    if (d != 0.25 ## POSTFIX1) \\\n+      abort(); \\\n+  }\n+\n+/* Accum to integer, and integer to accum.  */\n+#define CONV_ACCUM_INT(TYPE1,POSTFIX1,TYPE2) \\\n+  { \\\n+    TYPE1 a = 99.12345 ## POSTFIX1; \\\n+    TYPE2 b = a; \\\n+    TYPE2 c = 123; \\\n+    TYPE1 d = c; \\\n+    if (b != 99) \\\n+      abort(); \\\n+    if (d != 123.0 ## POSTFIX1) \\\n+      abort(); \\\n+  }\n+\n+#define ALL_CONV(TYPE,POSTFIX) \\\n+  CONV(TYPE, POSTFIX, short _Fract, hr) \\\n+  CONV(TYPE, POSTFIX, _Fract, r) \\\n+  CONV(TYPE, POSTFIX, long _Fract, lr) \\\n+  CONV(TYPE, POSTFIX, long long _Fract, llr) \\\n+  CONV(TYPE, POSTFIX, unsigned short _Fract, uhr) \\\n+  CONV(TYPE, POSTFIX, unsigned _Fract, ur) \\\n+  CONV(TYPE, POSTFIX, unsigned long _Fract, ulr) \\\n+  CONV(TYPE, POSTFIX, unsigned long long _Fract, ullr) \\\n+  CONV(TYPE, POSTFIX, short _Accum, hk) \\\n+  CONV(TYPE, POSTFIX, _Accum, k) \\\n+  CONV(TYPE, POSTFIX, long _Accum, lk) \\\n+  CONV(TYPE, POSTFIX, long long _Accum, llk) \\\n+  CONV(TYPE, POSTFIX, unsigned short _Accum, uhk) \\\n+  CONV(TYPE, POSTFIX, unsigned _Accum, uk) \\\n+  CONV(TYPE, POSTFIX, unsigned long _Accum, ulk) \\\n+  CONV(TYPE, POSTFIX, unsigned long long _Accum, ullk) \\\n+  CONV(_Sat TYPE, POSTFIX, short _Fract, hr) \\\n+  CONV(_Sat TYPE, POSTFIX, _Fract, r) \\\n+  CONV(_Sat TYPE, POSTFIX, long _Fract, lr) \\\n+  CONV(_Sat TYPE, POSTFIX, long long _Fract, llr) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned short _Fract, uhr) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned _Fract, ur) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned long _Fract, ulr) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned long long _Fract, ullr) \\\n+  CONV(_Sat TYPE, POSTFIX, short _Accum, hk) \\\n+  CONV(_Sat TYPE, POSTFIX, _Accum, k) \\\n+  CONV(_Sat TYPE, POSTFIX, long _Accum, lk) \\\n+  CONV(_Sat TYPE, POSTFIX, long long _Accum, llk) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned short _Accum, uhk) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned _Accum, uk) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned long _Accum, ulk) \\\n+  CONV(_Sat TYPE, POSTFIX, unsigned long long _Accum, ullk) \\\n+  CONV(TYPE, POSTFIX, _Sat short _Fract, hr) \\\n+  CONV(TYPE, POSTFIX, _Sat _Fract, r) \\\n+  CONV(TYPE, POSTFIX, _Sat long _Fract, lr) \\\n+  CONV(TYPE, POSTFIX, _Sat long long _Fract, llr) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned short _Fract, uhr) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned _Fract, ur) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned long _Fract, ulr) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned long long _Fract, ullr) \\\n+  CONV(TYPE, POSTFIX, _Sat short _Accum, hk) \\\n+  CONV(TYPE, POSTFIX, _Sat _Accum, k) \\\n+  CONV(TYPE, POSTFIX, _Sat long _Accum, lk) \\\n+  CONV(TYPE, POSTFIX, _Sat long long _Accum, llk) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned short _Accum, uhk) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned _Accum, uk) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned long _Accum, ulk) \\\n+  CONV(TYPE, POSTFIX, _Sat unsigned long long _Accum, ullk) \\\n+  CONV_INT(TYPE, POSTFIX, signed char) \\\n+  CONV_INT(TYPE, POSTFIX, short) \\\n+  CONV_INT(TYPE, POSTFIX, int) \\\n+  CONV_INT(TYPE, POSTFIX, long) \\\n+  CONV_INT(TYPE, POSTFIX, long long) \\\n+  CONV_INT(TYPE, POSTFIX, unsigned char) \\\n+  CONV_INT(TYPE, POSTFIX, unsigned short) \\\n+  CONV_INT(TYPE, POSTFIX, unsigned int) \\\n+  CONV_INT(TYPE, POSTFIX, unsigned long) \\\n+  CONV_INT(TYPE, POSTFIX, unsigned long long) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, signed char) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, short) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, int) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, long) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, long long) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned char) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned short) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned int) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned long) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned long long) \\\n+  CONV_FLOAT(TYPE, POSTFIX, float) \\\n+  CONV_FLOAT(TYPE, POSTFIX, double) \\\n+  CONV_FLOAT(_Sat TYPE, POSTFIX, float) \\\n+  CONV_FLOAT(_Sat TYPE, POSTFIX, double)\n+\n+#define ALL_ACCUM_CONV(TYPE,POSTFIX) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, signed char) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, short) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, int) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, long) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, long long) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, unsigned char) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, unsigned short) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, unsigned int) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, unsigned long) \\\n+  CONV_ACCUM_INT(TYPE, POSTFIX, unsigned long long) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, signed char) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, short) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, int) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, long) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, long long) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, unsigned char) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, unsigned short) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, unsigned int) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, unsigned long) \\\n+  CONV_ACCUM_INT(_Sat TYPE, POSTFIX, unsigned long long)\n+\n+#define NEG_CONV(TYPE,POSTFIX) \\\n+  CONV_INT2(TYPE, POSTFIX, signed char) \\\n+  CONV_INT2(TYPE, POSTFIX, short) \\\n+  CONV_INT2(TYPE, POSTFIX, int) \\\n+  CONV_INT2(TYPE, POSTFIX, long) \\\n+  CONV_INT2(TYPE, POSTFIX, long long) \\\n+  CONV_INT2(TYPE, POSTFIX, unsigned char) \\\n+  CONV_INT2(TYPE, POSTFIX, unsigned short) \\\n+  CONV_INT2(TYPE, POSTFIX, unsigned int) \\\n+  CONV_INT2(TYPE, POSTFIX, unsigned long) \\\n+  CONV_INT2(TYPE, POSTFIX, unsigned long long) \\\n+  CONV_INT3(TYPE, POSTFIX, signed char) \\\n+  CONV_INT3(TYPE, POSTFIX, short) \\\n+  CONV_INT3(TYPE, POSTFIX, int) \\\n+  CONV_INT3(TYPE, POSTFIX, long) \\\n+  CONV_INT3(TYPE, POSTFIX, long long)\n+\n+/* Signed accum to _Sat unsigned/signed fract.  */\n+#define SAT_CONV1(TYPE, POSTFIX) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -3.2 ## POSTFIX, _Sat unsigned long long _Fract, 0.0ullr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -1.0 ## POSTFIX, _Sat unsigned long long _Fract, 0.0ullr)\n+\n+/* Unsigned accum to _Sat unsigned/signed fract.  */\n+#define SAT_CONV2(TYPE, POSTFIX) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, 3.2 ## POSTFIX, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, 1.0 ## POSTFIX, _Sat unsigned long long _Fract, 1.0ullr)\n+\n+/* Signed fract to _Sat unsigned fract.  */\n+#define SAT_CONV3(TYPE, POSTFIX) \\\n+  CONV2(TYPE, -0.5 ## POSTFIX, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, -0.5 ## POSTFIX, _Sat unsigned  _Fract, 0.0ur) \\\n+  CONV2(TYPE, -0.5 ## POSTFIX, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, -0.5 ## POSTFIX, _Sat unsigned long long _Fract, 0.0ullr)\n+\n+/* Signed integer to _Sat signed/unsigned fract.  */\n+#define SAT_CONV4(TYPE) \\\n+  CONV2(TYPE, 100, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -100, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 100, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -100, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 100, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -100, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 100, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -100, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 100, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -100, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 100, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -100, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 100, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -100, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 100, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -100, _Sat unsigned long long _Fract, 0.0ullr) \\\n+  CONV2(TYPE, 1, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -1, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 1, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -1, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 1, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -1, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 1, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -1, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 1, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -1, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 1, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -1, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 1, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -1, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 1, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -1, _Sat unsigned long long _Fract, 0.0ullr)\n+\n+/* Unsigned integer to _Sat signed/unsigned fract.  */\n+#define SAT_CONV5(TYPE) \\\n+  CONV2(TYPE, 100, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, 100, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, 100, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, 100, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, 100, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, 100, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, 100, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, 100, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, 1, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, 1, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, 1, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, 1, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, 1, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, 1, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, 1, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, 1, _Sat unsigned long long _Fract, 1.0ullr)\n+\n+/* Floating-point to _Sat signed/unsigned fract.  */\n+#define SAT_CONV6(TYPE) \\\n+  CONV2(TYPE, 100.0, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -100.0, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 100.0, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -100.0, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 100.0, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -100.0, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 100.0, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -100.0, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 100.0, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -100.0, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 100.0, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -100.0, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 100.0, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -100.0, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 100.0, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -100.0, _Sat unsigned long long _Fract, 0.0ullr) \\\n+  CONV2(TYPE, 1.0, _Sat short _Fract, 1.0hr) \\\n+  CONV2(TYPE, -1.0, _Sat short _Fract, -0.5hr - 0.5hr) \\\n+  CONV2(TYPE, 1.0, _Sat _Fract, 1.0r) \\\n+  CONV2(TYPE, -1.0, _Sat _Fract, -0.5r - 0.5r) \\\n+  CONV2(TYPE, 1.0, _Sat long _Fract, 1.0lr) \\\n+  CONV2(TYPE, -1.0, _Sat long _Fract, -0.5lr - 0.5lr) \\\n+  CONV2(TYPE, 1.0, _Sat long long _Fract, 1.0llr) \\\n+  CONV2(TYPE, -1.0, _Sat long long _Fract, -0.5llr - 0.5llr) \\\n+  CONV2(TYPE, 1.0, _Sat unsigned short _Fract, 1.0uhr) \\\n+  CONV2(TYPE, -1.0, _Sat unsigned short _Fract, 0.0uhr) \\\n+  CONV2(TYPE, 1.0, _Sat unsigned _Fract, 1.0ur) \\\n+  CONV2(TYPE, -1.0, _Sat unsigned _Fract, 0.0ur) \\\n+  CONV2(TYPE, 1.0, _Sat unsigned long _Fract, 1.0ulr) \\\n+  CONV2(TYPE, -1.0, _Sat unsigned long _Fract, 0.0ulr) \\\n+  CONV2(TYPE, 1.0, _Sat unsigned long long _Fract, 1.0ullr) \\\n+  CONV2(TYPE, -1.0, _Sat unsigned long long _Fract, 0.0ullr)\n+\n+int main ()\n+{\n+  ALL_CONV (short _Fract, hr);\n+  ALL_CONV (_Fract, r);\n+  ALL_CONV (long _Fract, lr);\n+  ALL_CONV (long long _Fract, llr);\n+  ALL_CONV (unsigned short _Fract, uhr);\n+  ALL_CONV (unsigned _Fract, ur);\n+  ALL_CONV (unsigned long _Fract, ulr);\n+  ALL_CONV (unsigned long long _Fract, ullr);\n+  ALL_CONV (short _Accum, hk);\n+  ALL_CONV (_Accum, k);\n+  ALL_CONV (long _Accum, lk);\n+  ALL_CONV (long long _Accum, llk);\n+  ALL_CONV (unsigned short _Accum, uhk);\n+  ALL_CONV (unsigned _Accum, uk);\n+  ALL_CONV (unsigned long _Accum, ulk);\n+  ALL_CONV (unsigned long long _Accum, ullk);\n+\n+  ALL_ACCUM_CONV (short _Accum, hk);\n+  ALL_ACCUM_CONV (_Accum, k);\n+  ALL_ACCUM_CONV (long _Accum, lk);\n+  ALL_ACCUM_CONV (long long _Accum, llk);\n+  ALL_ACCUM_CONV (unsigned short _Accum, uhk);\n+  ALL_ACCUM_CONV (unsigned _Accum, uk);\n+  ALL_ACCUM_CONV (unsigned long _Accum, ulk);\n+  ALL_ACCUM_CONV (unsigned long long _Accum, ullk);\n+\n+  NEG_CONV (short _Fract, hr);\n+  NEG_CONV (_Fract, r);\n+  NEG_CONV (long _Fract, lr);\n+  NEG_CONV (long long _Fract, llr);\n+  NEG_CONV (short _Accum, hk);\n+  NEG_CONV (_Accum, k);\n+  NEG_CONV (long _Accum, lk);\n+  NEG_CONV (long long _Accum, llk);\n+\n+  SAT_CONV1 (short _Accum, hk);\n+  SAT_CONV1 (_Accum, k);\n+  SAT_CONV1 (long _Accum, lk);\n+  SAT_CONV1 (long long _Accum, llk);\n+\n+  SAT_CONV2 (unsigned short _Accum, uhk);\n+  SAT_CONV2 (unsigned _Accum, uk);\n+  SAT_CONV2 (unsigned long _Accum, ulk);\n+  SAT_CONV2 (unsigned long long _Accum, ullk);\n+\n+  SAT_CONV3 (short _Fract, hr);\n+  SAT_CONV3 (_Fract, r);\n+  SAT_CONV3 (long _Fract, lr);\n+  SAT_CONV3 (long long _Fract, llr);\n+\n+  SAT_CONV4 (signed char);\n+  SAT_CONV4 (short);\n+  SAT_CONV4 (int);\n+  SAT_CONV4 (long);\n+  SAT_CONV4 (long long);\n+\n+  SAT_CONV5 (unsigned char);\n+  SAT_CONV5 (unsigned short);\n+  SAT_CONV5 (unsigned int);\n+  SAT_CONV5 (unsigned long);\n+  SAT_CONV5 (unsigned long long);\n+\n+  SAT_CONV6 (float);\n+  SAT_CONV6 (double);\n+\n+  return 0;\n+}"}, {"sha": "b66ade7e4874368849c2f3422258465b7b955b20", "filename": "gcc/testsuite/gcc.dg/fixed-point/define.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fdefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fdefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fdefine.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 7.18a.3 - Precision macros.\n+\n+   Check if defined fixed-point constants are ok.  */\n+\n+#include <stdfix.h>\n+\n+short fract sf = SFRACT_MAX;\n+fract f = FRACT_MAX;\n+long fract lf = LFRACT_MAX;\n+long long fract llf = LLFRACT_MAX;\n+\n+unsigned short fract usf = USFRACT_MAX;\n+unsigned fract uf = UFRACT_MAX;\n+unsigned long fract ulf = ULFRACT_MAX;\n+unsigned long long fract ullf = ULLFRACT_MAX;\n+\n+sat short fract Ssf = SFRACT_MAX;\n+sat fract Sf = FRACT_MAX;\n+sat long fract Slf = LFRACT_MAX;\n+sat long long fract Sllf = LLFRACT_MAX;\n+\n+sat unsigned short fract Susf = USFRACT_MAX;\n+sat unsigned fract Suf = UFRACT_MAX;\n+sat unsigned long fract Sulf = ULFRACT_MAX;\n+sat unsigned long long fract Sullf = ULLFRACT_MAX;\n+\n+short fract sfm = SFRACT_MIN;\n+fract fm = FRACT_MIN;\n+long fract lfm = LFRACT_MIN;\n+long long fract llfm = LLFRACT_MIN;\n+\n+unsigned short fract usfm = USFRACT_MIN;\n+unsigned fract ufm = UFRACT_MIN;\n+unsigned long fract ulfm = ULFRACT_MIN;\n+unsigned long long fract ullfm = ULLFRACT_MIN;\n+\n+sat short fract Ssfm = SFRACT_MIN;\n+sat fract Sfm = FRACT_MIN;\n+sat long fract Slfm = LFRACT_MIN;\n+sat long long fract Sllfm = LLFRACT_MIN;\n+\n+sat unsigned short fract Susfm = USFRACT_MIN;\n+sat unsigned fract Sufm = UFRACT_MIN;\n+sat unsigned long fract Sulfm = ULFRACT_MIN;\n+sat unsigned long long fract Sullfm = ULLFRACT_MIN;\n+\n+short fract sfE = SFRACT_EPSILON;\n+fract fE = FRACT_EPSILON;\n+long fract lfE = LFRACT_EPSILON;\n+long long fract llfE = LLFRACT_EPSILON;\n+\n+unsigned short fract usfE = USFRACT_EPSILON;\n+unsigned fract ufE = UFRACT_EPSILON;\n+unsigned long fract ulfE = ULFRACT_EPSILON;\n+unsigned long long fract ullfE = ULLFRACT_EPSILON;\n+\n+sat short fract SsfE = SFRACT_EPSILON;\n+sat fract SfE = FRACT_EPSILON;\n+sat long fract SlfE = LFRACT_EPSILON;\n+sat long long fract SllfE = LLFRACT_EPSILON;\n+\n+sat unsigned short fract SusfE = USFRACT_EPSILON;\n+sat unsigned fract SufE = UFRACT_EPSILON;\n+sat unsigned long fract SulfE = ULFRACT_EPSILON;\n+sat unsigned long long fract SullfE = ULLFRACT_EPSILON;\n+\n+short accum sk = SACCUM_MAX;\n+accum k = ACCUM_MAX;\n+long accum lk = LACCUM_MAX;\n+long long accum llk = LLACCUM_MAX;\n+\n+unsigned short accum usk = USACCUM_MAX;\n+unsigned accum uk = UACCUM_MAX;\n+unsigned long accum ulk = ULACCUM_MAX;\n+unsigned long long accum ullk = ULLACCUM_MAX;\n+\n+sat short accum Ssk = SACCUM_MAX;\n+sat accum Sk = ACCUM_MAX;\n+sat long accum Slk = LACCUM_MAX;\n+sat long long accum Sllk = LLACCUM_MAX;\n+\n+sat unsigned short accum Susk = USACCUM_MAX;\n+sat unsigned accum Suk = UACCUM_MAX;\n+sat unsigned long accum Sulk = ULACCUM_MAX;\n+sat unsigned long long accum Sullk = ULLACCUM_MAX;\n+\n+short accum skm = SACCUM_MIN;\n+accum km = ACCUM_MIN;\n+long accum lkm = LACCUM_MIN;\n+long long accum llkm = LLACCUM_MIN;\n+\n+unsigned short accum uskm = USACCUM_MIN;\n+unsigned accum ukm = UACCUM_MIN;\n+unsigned long accum ulkm = ULACCUM_MIN;\n+unsigned long long accum ullkm = ULLACCUM_MIN;\n+\n+sat short accum Sskm = SACCUM_MIN;\n+sat accum Skm = ACCUM_MIN;\n+sat long accum Slkm = LACCUM_MIN;\n+sat long long accum Sllkm = LLACCUM_MIN;\n+\n+sat unsigned short accum Suskm = USACCUM_MIN;\n+sat unsigned accum Sukm = UACCUM_MIN;\n+sat unsigned long accum Sulkm = ULACCUM_MIN;\n+sat unsigned long long accum Sullkm = ULLACCUM_MIN;\n+\n+short accum skE = SACCUM_EPSILON;\n+accum kE = ACCUM_EPSILON;\n+long accum lkE = LACCUM_EPSILON;\n+long long accum llkE = LLACCUM_EPSILON;\n+\n+unsigned short accum uskE = USACCUM_EPSILON;\n+unsigned accum ukE = UACCUM_EPSILON;\n+unsigned long accum ulkE = ULACCUM_EPSILON;\n+unsigned long long accum ullkE = ULLACCUM_EPSILON;\n+\n+sat short accum SskE = SACCUM_EPSILON;\n+sat accum SkE = ACCUM_EPSILON;\n+sat long accum SlkE = LACCUM_EPSILON;\n+sat long long accum SllkE = LLACCUM_EPSILON;\n+\n+sat unsigned short accum SuskE = USACCUM_EPSILON;\n+sat unsigned accum SukE = UACCUM_EPSILON;\n+sat unsigned long accum SulkE = ULACCUM_EPSILON;\n+sat unsigned long long accum SullkE = ULLACCUM_EPSILON;\n+\n+int fbit_sf = SFRACT_FBIT;\n+int fbit_f = FRACT_FBIT;\n+int fbit_lf = LFRACT_FBIT;\n+int fbit_llf = LLFRACT_FBIT;\n+\n+int fbit_usf = USFRACT_FBIT;\n+int fbit_uf = UFRACT_FBIT;\n+int fbit_ulf = ULFRACT_FBIT;\n+int fbit_ullf = ULLFRACT_FBIT;\n+\n+int fbit_sk = SACCUM_FBIT;\n+int fbit_k = ACCUM_FBIT;\n+int fbit_lk = LACCUM_FBIT;\n+int fbit_llk = LLACCUM_FBIT;\n+\n+int fbit_usk = USACCUM_FBIT;\n+int fbit_uk = UACCUM_FBIT;\n+int fbit_ulk = ULACCUM_FBIT;\n+int fbit_ullk = ULLACCUM_FBIT;\n+\n+int ibit_sk = SACCUM_IBIT;\n+int ibit_k = ACCUM_IBIT;\n+int ibit_lk = LACCUM_IBIT;\n+int ibit_llk = LLACCUM_IBIT;\n+\n+int ibit_usk = USACCUM_IBIT;\n+int ibit_uk = UACCUM_IBIT;\n+int ibit_ulk = ULACCUM_IBIT;\n+int ibit_ullk = ULLACCUM_IBIT;"}, {"sha": "fb7e73d1866a3d6a7e2717ba600a406bbc42c951", "filename": "gcc/testsuite/gcc.dg/fixed-point/fixed-point.exp", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffixed-point.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffixed-point.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffixed-point.exp?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,40 @@\n+# Copyright (C) 1997, 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Skip these tests for targets that don't support this extension.\n+if { ![check_effective_target_fixed_point] } {\n+    return;\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "0d0e8c191f6e54be9c24a4e59b13b14bad616f1b", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-array.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-array.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing array elements involving fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return the Nth argument of\n+   an incoming array.  */\n+\n+#define FUNC(TYPE,NAME) \\\n+TYPE NAME ## 0 (TYPE args[]) { return args[0]; } \\\n+TYPE NAME ## 1 (TYPE args[]) { return args[1]; } \\\n+TYPE NAME ## 2 (TYPE args[]) { return args[2]; } \\\n+TYPE NAME ## 3 (TYPE args[]) { return args[3]; } \\\n+TYPE NAME ## 4 (TYPE args[]) { return args[4]; } \\\n+TYPE NAME ## 5 (TYPE args[]) { return args[5]; }\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(TYPE,NAME,PF) \\\n+  { \\\n+    TYPE NAME[] = { 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, \\\n+\t\t    0.5 ## PF }; \\\n+    if (NAME ## 0 (NAME) != 0.0 ## PF) abort (); \\\n+    if (NAME ## 1 (NAME) != 0.1 ## PF) abort (); \\\n+    if (NAME ## 2 (NAME) != 0.2 ## PF) abort (); \\\n+    if (NAME ## 3 (NAME) != 0.3 ## PF) abort (); \\\n+    if (NAME ## 4 (NAME) != 0.4 ## PF) abort (); \\\n+    if (NAME ## 5 (NAME) != 0.5 ## PF) abort (); \\\n+  }\n+\n+  TEST (short _Fract, sf, hr)\n+  TEST (_Fract, f, r)\n+  TEST (long _Fract, lf, lr)\n+  TEST (long long _Fract, llf, llr)\n+  TEST (unsigned short _Fract, usf, uhr)\n+  TEST (unsigned _Fract, uf, ur)\n+  TEST (unsigned long _Fract, ulf, ulr)\n+  TEST (unsigned long long _Fract, ullf, ullr)\n+  TEST (_Sat short _Fract, Ssf, hr)\n+  TEST (_Sat _Fract, Sf, r)\n+  TEST (_Sat long _Fract, Slf, lr)\n+  TEST (_Sat long long _Fract, Sllf, llr)\n+  TEST (_Sat unsigned short _Fract, Susf, uhr)\n+  TEST (_Sat unsigned _Fract, Suf, ur)\n+  TEST (_Sat unsigned long _Fract, Sulf, ulr)\n+  TEST (_Sat unsigned long long _Fract, Sullf, ullr)\n+  TEST (short _Accum, sa, hk)\n+  TEST (_Accum, a, k)\n+  TEST (long _Accum, la, lk)\n+  TEST (long long _Accum, lla, llk)\n+  TEST (unsigned short _Accum, usa, uhk)\n+  TEST (unsigned _Accum, ua, uk)\n+  TEST (unsigned long _Accum, ula, ulk)\n+  TEST (unsigned long long _Accum, ulla, ullk)\n+  TEST (_Sat short _Accum, Ssa, hk)\n+  TEST (_Sat _Accum, Sa, k)\n+  TEST (_Sat long _Accum, Sla, lk)\n+  TEST (_Sat long long _Accum, Slla, llk)\n+  TEST (_Sat unsigned short _Accum, Susa, uhk)\n+  TEST (_Sat unsigned _Accum, Sua, uk)\n+  TEST (_Sat unsigned long _Accum, Sula, ulk)\n+  TEST (_Sat unsigned long long _Accum, Sulla, ullk)\n+\n+  return 0;\n+}"}, {"sha": "01930e4505bb3c5dcbd9fdd43ca8eb79c6dc60c9", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-mixed.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-mixed.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test scalar passing and return values involving fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return the Nth argument of\n+   an incoming array.  */\n+\n+#define FUNC(TYPE,NAME) \\\n+TYPE NAME ## 0 (TYPE arg0, int arg1, unsigned arg2, float arg3, double arg4) \\\n+  { return arg0; } \\\n+TYPE NAME ## 1 (int arg0, TYPE arg1, unsigned arg2, float arg3, double arg4) \\\n+  { return arg1; } \\\n+TYPE NAME ## 2 (int arg0, unsigned arg1, TYPE arg2, float arg3, double arg4) \\\n+  { return arg2; } \\\n+TYPE NAME ## 3 (int arg0, unsigned arg1, float arg2, TYPE arg3, double arg4) \\\n+  { return arg3; } \\\n+TYPE NAME ## 4 (int arg0, unsigned arg1, float arg2, double arg3, TYPE arg4) \\\n+  { return arg4; }\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(TYPE,NAME,PF) \\\n+  { \\\n+    if (NAME ## 0 (0.1 ## PF, -1, 1, 0.3f, 0.5) != 0.1 ## PF) abort (); \\\n+    if (NAME ## 1 (-1, 0.1 ## PF, 1, 0.3f, 0.5) != 0.1 ## PF) abort (); \\\n+    if (NAME ## 2 (-1, 1, 0.1 ## PF, 0.3f, 0.5) != 0.1 ## PF) abort (); \\\n+    if (NAME ## 3 (-1, 1, 0.3f, 0.1 ## PF, 0.5) != 0.1 ## PF) abort (); \\\n+    if (NAME ## 4 (-1, 1, 0.3f, 0.5, 0.1 ## PF) != 0.1 ## PF) abort (); \\\n+  }\n+\n+  TEST (short _Fract, sf, hr)\n+  TEST (_Fract, f, r)\n+  TEST (long _Fract, lf, lr)\n+  TEST (long long _Fract, llf, llr)\n+  TEST (unsigned short _Fract, usf, uhr)\n+  TEST (unsigned _Fract, uf, ur)\n+  TEST (unsigned long _Fract, ulf, ulr)\n+  TEST (unsigned long long _Fract, ullf, ullr)\n+  TEST (_Sat short _Fract, Ssf, hr)\n+  TEST (_Sat _Fract, Sf, r)\n+  TEST (_Sat long _Fract, Slf, lr)\n+  TEST (_Sat long long _Fract, Sllf, llr)\n+  TEST (_Sat unsigned short _Fract, Susf, uhr)\n+  TEST (_Sat unsigned _Fract, Suf, ur)\n+  TEST (_Sat unsigned long _Fract, Sulf, ulr)\n+  TEST (_Sat unsigned long long _Fract, Sullf, ullr)\n+  TEST (short _Accum, sa, hk)\n+  TEST (_Accum, a, k)\n+  TEST (long _Accum, la, lk)\n+  TEST (long long _Accum, lla, llk)\n+  TEST (unsigned short _Accum, usa, uhk)\n+  TEST (unsigned _Accum, ua, uk)\n+  TEST (unsigned long _Accum, ula, ulk)\n+  TEST (unsigned long long _Accum, ulla, ullk)\n+  TEST (_Sat short _Accum, Ssa, hk)\n+  TEST (_Sat _Accum, Sa, k)\n+  TEST (_Sat long _Accum, Sla, lk)\n+  TEST (_Sat long long _Accum, Slla, llk)\n+  TEST (_Sat unsigned short _Accum, Susa, uhk)\n+  TEST (_Sat unsigned _Accum, Sua, uk)\n+  TEST (_Sat unsigned long _Accum, Sula, ulk)\n+  TEST (_Sat unsigned long long _Accum, Sulla, ullk)\n+\n+  return 0;\n+}"}, {"sha": "957b56281187afefe2cfcf1e392b27934cb3faed", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-scalar.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-scalar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-scalar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-scalar.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test scalar passing and return values involving fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+/* A handful of functions that return the Nth argument of\n+   an incoming array.  */\n+\n+#define FUNC(TYPE,NAME) \\\n+TYPE NAME ## 0 (TYPE arg0, TYPE arg1, TYPE arg2, TYPE arg3, TYPE arg4) \\\n+  { return arg0; } \\\n+TYPE NAME ## 1 (TYPE arg0, TYPE arg1, TYPE arg2, TYPE arg3, TYPE arg4) \\\n+  { return arg1; } \\\n+TYPE NAME ## 2 (TYPE arg0, TYPE arg1, TYPE arg2, TYPE arg3, TYPE arg4) \\\n+  { return arg2; } \\\n+TYPE NAME ## 3 (TYPE arg0, TYPE arg1, TYPE arg2, TYPE arg3, TYPE arg4) \\\n+  { return arg3; } \\\n+TYPE NAME ## 4 (TYPE arg0, TYPE arg1, TYPE arg2, TYPE arg3, TYPE arg4) \\\n+  { return arg4; }\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(TYPE,NAME,PF) \\\n+  { \\\n+    if (NAME ## 0 (0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, 0.5 ## PF) \\\n+\t!= 0.1 ## PF) abort (); \\\n+    if (NAME ## 1 (0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, 0.5 ## PF) \\\n+\t!= 0.2 ## PF) abort (); \\\n+    if (NAME ## 2 (0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, 0.5 ## PF) \\\n+\t!= 0.3 ## PF) abort (); \\\n+    if (NAME ## 3 (0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, 0.5 ## PF) \\\n+\t!= 0.4 ## PF) abort (); \\\n+    if (NAME ## 4 (0.1 ## PF, 0.2 ## PF, 0.3 ## PF, 0.4 ## PF, 0.5 ## PF) \\\n+\t!= 0.5 ## PF) abort (); \\\n+  }\n+\n+  TEST (short _Fract, sf, hr)\n+  TEST (_Fract, f, r)\n+  TEST (long _Fract, lf, lr)\n+  TEST (long long _Fract, llf, llr)\n+  TEST (unsigned short _Fract, usf, uhr)\n+  TEST (unsigned _Fract, uf, ur)\n+  TEST (unsigned long _Fract, ulf, ulr)\n+  TEST (unsigned long long _Fract, ullf, ullr)\n+  TEST (_Sat short _Fract, Ssf, hr)\n+  TEST (_Sat _Fract, Sf, r)\n+  TEST (_Sat long _Fract, Slf, lr)\n+  TEST (_Sat long long _Fract, Sllf, llr)\n+  TEST (_Sat unsigned short _Fract, Susf, uhr)\n+  TEST (_Sat unsigned _Fract, Suf, ur)\n+  TEST (_Sat unsigned long _Fract, Sulf, ulr)\n+  TEST (_Sat unsigned long long _Fract, Sullf, ullr)\n+  TEST (short _Accum, sa, hk)\n+  TEST (_Accum, a, k)\n+  TEST (long _Accum, la, lk)\n+  TEST (long long _Accum, lla, llk)\n+  TEST (unsigned short _Accum, usa, uhk)\n+  TEST (unsigned _Accum, ua, uk)\n+  TEST (unsigned long _Accum, ula, ulk)\n+  TEST (unsigned long long _Accum, ulla, ullk)\n+  TEST (_Sat short _Accum, Ssa, hk)\n+  TEST (_Sat _Accum, Sa, k)\n+  TEST (_Sat long _Accum, Sla, lk)\n+  TEST (_Sat long long _Accum, Slla, llk)\n+  TEST (_Sat unsigned short _Accum, Susa, uhk)\n+  TEST (_Sat unsigned _Accum, Sua, uk)\n+  TEST (_Sat unsigned long _Accum, Sula, ulk)\n+  TEST (_Sat unsigned long long _Accum, Sulla, ullk)\n+\n+  return 0;\n+}"}, {"sha": "c75388863cc86dba0abfe03f55f9ccc471d45210", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-struct.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-struct.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,191 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test structure passing and return values involving fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+struct example\n+{\n+  short _Fract sf;\n+  char dummy1;\n+  _Fract f;\n+  char dummy2;\n+  long _Fract lf;\n+  char dummy3;\n+  long long _Fract llf;\n+  char dummy4;\n+  unsigned short _Fract usf;\n+  char dummy5;\n+  unsigned _Fract uf;\n+  char dummy6;\n+  unsigned long _Fract ulf;\n+  char dummy7;\n+  unsigned long long _Fract ullf;\n+  char dummy8;\n+  _Sat short _Fract Ssf;\n+  char dummy9;\n+  _Sat _Fract Sf;\n+  char dummy10;\n+  _Sat long _Fract Slf;\n+  char dummy11;\n+  _Sat long long _Fract Sllf;\n+  char dummy12;\n+  _Sat unsigned short _Fract Susf;\n+  char dummy13;\n+  _Sat unsigned _Fract Suf;\n+  char dummy14;\n+  _Sat unsigned long _Fract Sulf;\n+  char dummy15;\n+  _Sat unsigned long long _Fract Sullf;\n+  char dummy16;\n+  short _Accum sa;\n+  char dummya1;\n+  _Accum a;\n+  char dummya2;\n+  long _Accum la;\n+  char dummya3;\n+  long long _Accum lla;\n+  char dummya4;\n+  unsigned short _Accum usa;\n+  char dummya5;\n+  unsigned _Accum ua;\n+  char dummya6;\n+  unsigned long _Accum ula;\n+  char dummya7;\n+  unsigned long long _Accum ulla;\n+  char dummya8;\n+  _Sat short _Accum Ssa;\n+  char dummya9;\n+  _Sat _Accum Sa;\n+  char dummya10;\n+  _Sat long _Accum Sla;\n+  char dummya11;\n+  _Sat long long _Accum Slla;\n+  char dummya12;\n+  _Sat unsigned short _Accum Susa;\n+  char dummya13;\n+  _Sat unsigned _Accum Sua;\n+  char dummya14;\n+  _Sat unsigned long _Accum Sula;\n+  char dummya15;\n+  _Sat unsigned long long _Accum Sulla;\n+  char dummya16;\n+} nums = { 0.1hr, 'a',\n+\t   0.2r, 'b',\n+\t   0.3lr, 'c',\n+\t   0.4llr, 'd',\n+\t   0.5uhr, 'e',\n+\t   0.6ur, 'f',\n+\t   0.7ulr, 'g',\n+\t   0.8ullr, 'h',\n+\t   0.11r, 'i',\n+\t   0.22r, 'j',\n+\t   0.33lr, 'k',\n+\t   0.44llr, 'l',\n+\t   0.55uhr, 'm',\n+\t   0.66ur, 'n',\n+\t   0.77ulr, 'o',\n+\t   0.88ullr, 'p',\n+\t   0.1hk, 'q',\n+\t   0.2k, 'r',\n+\t   0.3lk, 's',\n+\t   0.4llk, 't',\n+\t   0.5uhk, 'u',\n+\t   0.6uk, 'v',\n+\t   0.7ulk, 'w',\n+\t   0.8ullk, 'x',\n+\t   0.11k, 'y',\n+\t   0.22k, 'z',\n+\t   0.33lk, '0',\n+\t   0.44llk, '1',\n+\t   0.55uhk, '2',\n+\t   0.66uk, '3',\n+\t   0.77ulk, '4',\n+\t   0.88ullk, '5'\n+\t };\n+\n+/* A handful of functions that return the Nth argument of\n+   an incoming array.  */\n+\n+#define FUNC(TYPE,NAME) \\\n+TYPE NAME ## _func (struct example s) \\\n+  { return s. NAME; }\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(TYPE,NAME,VALUE) \\\n+  { \\\n+    if (NAME ## _func (nums) != VALUE) abort (); \\\n+  }\n+\n+  TEST (short _Fract, sf, 0.1hr)\n+  TEST (_Fract, f, 0.2r)\n+  TEST (long _Fract, lf, 0.3lr)\n+  TEST (long long _Fract, llf, 0.4llr)\n+  TEST (unsigned short _Fract, usf, 0.5uhr)\n+  TEST (unsigned _Fract, uf, 0.6ur)\n+  TEST (unsigned long _Fract, ulf, 0.7ulr)\n+  TEST (unsigned long long _Fract, ullf, 0.8ullr)\n+  TEST (_Sat short _Fract, Ssf, 0.11hr)\n+  TEST (_Sat _Fract, Sf, 0.22r)\n+  TEST (_Sat long _Fract, Slf, 0.33lr)\n+  TEST (_Sat long long _Fract, Sllf, 0.44llr)\n+  TEST (_Sat unsigned short _Fract, Susf, 0.55uhr)\n+  TEST (_Sat unsigned _Fract, Suf, 0.66ur)\n+  TEST (_Sat unsigned long _Fract, Sulf, 0.77ulr)\n+  TEST (_Sat unsigned long long _Fract, Sullf, 0.88ullr)\n+  TEST (short _Accum, sa, 0.1hk)\n+  TEST (_Accum, a, 0.2k)\n+  TEST (long _Accum, la, 0.3lk)\n+  TEST (long long _Accum, lla, 0.4llk)\n+  TEST (unsigned short _Accum, usa, 0.5uhk)\n+  TEST (unsigned _Accum, ua, 0.6uk)\n+  TEST (unsigned long _Accum, ula, 0.7ulk)\n+  TEST (unsigned long long _Accum, ulla, 0.8ullk)\n+  TEST (_Sat short _Accum, Ssa, 0.11hk)\n+  TEST (_Sat _Accum, Sa, 0.22k)\n+  TEST (_Sat long _Accum, Sla, 0.33lk)\n+  TEST (_Sat long long _Accum, Slla, 0.44llk)\n+  TEST (_Sat unsigned short _Accum, Susa, 0.55uhk)\n+  TEST (_Sat unsigned _Accum, Sua, 0.66uk)\n+  TEST (_Sat unsigned long _Accum, Sula, 0.77ulk)\n+  TEST (_Sat unsigned long long _Accum, Sulla, 0.88ullk)\n+\n+  return 0;\n+}"}, {"sha": "61a30e76519f15fbeaff19d930b721650237066e", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-vararg-mixed.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-mixed.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,145 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing varargs of fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+static int\n+vararg_int (unsigned arg, ...)\n+{\n+  va_list ap;\n+  int result_i;\n+  va_start (ap, arg);\n+  result_i = va_arg (ap, int);\n+  return result_i;\n+}\n+\n+static _Fract\n+vararg_fract (unsigned arg, ...)\n+{\n+  va_list ap;\n+  int result_i;\n+  _Fract result_fr; \\\n+  va_start (ap, arg);\n+  result_i = va_arg (ap, int);\n+  result_fr = va_arg (ap, _Fract); \\\n+  return result_fr;\n+}\n+\n+static int\n+vararg_double (unsigned arg, ...)\n+{\n+  va_list ap;\n+  int result_i;\n+  _Fract result_fr; \\\n+  double result_d;\n+  va_start (ap, arg);\n+  result_i = va_arg (ap, int);\n+  result_fr = va_arg (ap, _Fract); \\\n+  result_d = va_arg (ap, double); \\\n+  return result_d;\n+}\n+\n+#define FUNC(TYPE, NAME) \\\n+static TYPE \\\n+vararg_ ## NAME (unsigned arg, ...) \\\n+{ \\\n+  va_list ap; \\\n+  int result_i; \\\n+  _Fract result_fr; \\\n+  double result_d; \\\n+  TYPE result; \\\n+  va_start (ap, arg); \\\n+  result_i = va_arg (ap, int); \\\n+  result_fr = va_arg (ap, _Fract); \\\n+  result_d = va_arg (ap, double); \\\n+  result = va_arg (ap, TYPE); \\\n+  va_end (ap); \\\n+  return result; \\\n+}\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(NAME,PF) \\\n+  if (vararg_int  (0, 100, 0.9r, 55.0, 0.2 ## PF) != 100) \\\n+    abort (); \\\n+  if (vararg_fract  (1, 100, 0.9r, 55.0, 0.2 ## PF) != 0.9r) \\\n+    abort (); \\\n+  if (vararg_double  (2, 100, 0.9r, 55.0, 0.2 ## PF) != 55.0) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (3, 100, 0.9r, 55.0, 0.2 ## PF) != 0.2 ## PF) \\\n+    abort (); \\\n+\n+  TEST(sf, hr)\n+  TEST(f, r)\n+  TEST(lf, lr)\n+  TEST(llf, llr)\n+  TEST(usf, uhr)\n+  TEST(uf, ur)\n+  TEST(ulf, ulr)\n+  TEST(ullf, ullr)\n+  TEST(Ssf, hr)\n+  TEST(Sf, r)\n+  TEST(Slf, lr)\n+  TEST(Sllf, llr)\n+  TEST(Susf, uhr)\n+  TEST(Suf, ur)\n+  TEST(Sulf, ulr)\n+  TEST(Sullf, ullr)\n+  TEST(sa, hk)\n+  TEST(a, k)\n+  TEST(la, lk)\n+  TEST(lla, llk)\n+  TEST(usa, uhk)\n+  TEST(ua, uk)\n+  TEST(ula, ulk)\n+  TEST(ulla, ullk)\n+  TEST(Ssa, hk)\n+  TEST(Sa, k)\n+  TEST(Sla, lk)\n+  TEST(Slla, llk)\n+  TEST(Susa, uhk)\n+  TEST(Sua, uk)\n+  TEST(Sula, ulk)\n+  TEST(Sulla, ullk)\n+\n+  return 0;\n+}"}, {"sha": "7c54e91b28deae8ae13420efe549d079b36f707a", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-vararg-size0.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-size0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-size0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg-size0.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Based on the test from ../dfp/.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct S1\n+{\n+  struct\n+  {\n+    _Fract e;\n+  } b[0];\n+};\n+\n+/* Test handling vararg parameters whose size is 0.  */\n+\n+int check_var(int z,...)\n+{\n+  double d;\n+  struct S1 s1;\n+  long long result;\n+  va_list ap;\n+  va_start (ap, z);\n+  d = va_arg (ap, double);\n+  s1 = va_arg (ap, struct S1);\n+  result = va_arg (ap, long long);\n+  va_end (ap);\n+  return (result == 2LL);\n+\n+}\n+\n+int\n+main ()\n+{\n+  struct S1 s1;\n+  struct S1 a1[5];\n+\n+  if (check_var(5, 1.0, s1, 2LL, a1[2], a1[2]) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "9f517ae52630963d7b8ce2de8ec7ae38ece6cfb1", "filename": "gcc/testsuite/gcc.dg/fixed-point/func-vararg.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ffunc-vararg.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing varargs of fixed-point types.\n+   Based on the test from ../dfp/.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+#define FUNC(TYPE, NAME) \\\n+static TYPE \\\n+vararg_ ## NAME (unsigned arg, ...) \\\n+{ \\\n+  int i; \\\n+  va_list ap; \\\n+  TYPE result; \\\n+  va_start (ap, arg); \\\n+  for (i = 0; i <= arg; i++) \\\n+    result = va_arg (ap, TYPE); \\\n+  va_end (ap); \\\n+  return result; \\\n+}\n+\n+FUNC (short _Fract, sf)\n+FUNC (_Fract, f)\n+FUNC (long _Fract, lf)\n+FUNC (long long _Fract, llf)\n+FUNC (unsigned short _Fract, usf)\n+FUNC (unsigned _Fract, uf)\n+FUNC (unsigned long _Fract, ulf)\n+FUNC (unsigned long long _Fract, ullf)\n+FUNC (_Sat short _Fract, Ssf)\n+FUNC (_Sat _Fract, Sf)\n+FUNC (_Sat long _Fract, Slf)\n+FUNC (_Sat long long _Fract, Sllf)\n+FUNC (_Sat unsigned short _Fract, Susf)\n+FUNC (_Sat unsigned _Fract, Suf)\n+FUNC (_Sat unsigned long _Fract, Sulf)\n+FUNC (_Sat unsigned long long _Fract, Sullf)\n+FUNC (short _Accum, sa)\n+FUNC (_Accum, a)\n+FUNC (long _Accum, la)\n+FUNC (long long _Accum, lla)\n+FUNC (unsigned short _Accum, usa)\n+FUNC (unsigned _Accum, ua)\n+FUNC (unsigned long _Accum, ula)\n+FUNC (unsigned long long _Accum, ulla)\n+FUNC (_Sat short _Accum, Ssa)\n+FUNC (_Sat _Accum, Sa)\n+FUNC (_Sat long _Accum, Sla)\n+FUNC (_Sat long long _Accum, Slla)\n+FUNC (_Sat unsigned short _Accum, Susa)\n+FUNC (_Sat unsigned _Accum, Sua)\n+FUNC (_Sat unsigned long _Accum, Sula)\n+FUNC (_Sat unsigned long long _Accum, Sulla)\n+\n+int main()\n+{\n+#define TEST(NAME,PF) \\\n+  if (vararg_ ## NAME (0, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.0 ## PF) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (1, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.1 ## PF) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (2, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.2 ## PF) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (3, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.3 ## PF) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (4, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.4 ## PF) \\\n+    abort (); \\\n+  if (vararg_ ## NAME (5, 0.0 ## PF, 0.1 ## PF, 0.2 ## PF, 0.3 ## PF, \\\n+\t\t       0.4 ## PF, 0.5 ## PF) != 0.5 ## PF) \\\n+    abort ();\n+\n+  TEST(sf, hr)\n+  TEST(f, r)\n+  TEST(lf, lr)\n+  TEST(llf, llr)\n+  TEST(usf, uhr)\n+  TEST(uf, ur)\n+  TEST(ulf, ulr)\n+  TEST(ullf, ullr)\n+  TEST(Ssf, hr)\n+  TEST(Sf, r)\n+  TEST(Slf, lr)\n+  TEST(Sllf, llr)\n+  TEST(Susf, uhr)\n+  TEST(Suf, ur)\n+  TEST(Sulf, ulr)\n+  TEST(Sullf, ullr)\n+  TEST(sa, hk)\n+  TEST(a, k)\n+  TEST(la, lk)\n+  TEST(lla, llk)\n+  TEST(usa, uhk)\n+  TEST(ua, uk)\n+  TEST(ula, ulk)\n+  TEST(ulla, ullk)\n+  TEST(Ssa, hk)\n+  TEST(Sa, k)\n+  TEST(Sla, lk)\n+  TEST(Slla, llk)\n+  TEST(Susa, uhk)\n+  TEST(Sua, uk)\n+  TEST(Sula, ulk)\n+  TEST(Sulla, ullk)\n+\n+  return 0;\n+}"}, {"sha": "cf48e4ba2b3f0fe6743725e797ccb962c1afaf21", "filename": "gcc/testsuite/gcc.dg/fixed-point/int-warning.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fint-warning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fint-warning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fint-warning.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+\n+/* N1169 Conversion from fixed-point to integer.\n+   Test if GCC warns when overflow or underflow.  */\n+\n+signed char sc;\n+unsigned char uc;\n+\n+void test()\n+{\n+  sc = 500k; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  sc = -500k; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  sc = 500lk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  sc = -500lk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  sc = 500llk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  sc = -500llk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = 500k; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = -500k; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = 500lk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = -500lk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = 500llk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+  uc = -500llk; /* { dg-warning \"overflow in implicit constant conversion\" } */\n+}"}, {"sha": "df852148ee60a27df3d01de0b591bf3be0fd27b4", "filename": "gcc/testsuite/gcc.dg/fixed-point/keywords-c89.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c89.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89\" } */\n+\n+/* Flixed-point keywords are not recognized in C89 mode.  */\n+\n+_Fract w;\t\t/* { dg-error \"\" } */\n+_Accum x;\t\t/* { dg-error \"\" } */\n+_Sat _Fract y;\t\t/* { dg-error \"\" } */\n+_Sat _Accum z;\t\t/* { dg-error \"\" } */"}, {"sha": "471e00446c8fdc160b2edc336f3251b4373d02bd", "filename": "gcc/testsuite/gcc.dg/fixed-point/keywords-c99.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-c99.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Fixed-point keywords are not recognized in C99 mode.  */\n+\n+_Fract w;\t\t/* { dg-error \"\" } */\n+_Accum x;\t\t/* { dg-error \"\" } */\n+_Sat _Fract y;\t\t/* { dg-error \"\" } */\n+_Sat _Fract z;\t\t/* { dg-error \"\" } */"}, {"sha": "c20b8e4ac04b0b7e63d67aa0cd1bb2945b38c985", "filename": "gcc/testsuite/gcc.dg/fixed-point/keywords-ignored-c99.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-ignored-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-ignored-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-ignored-c99.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* Fixed-point keywords are not reserved for c99.  */\n+\n+int _Fract (void)\n+{\n+  return 0;\n+}\n+\n+int _Accum (void)\n+{\n+  return 0;\n+}\n+\n+int _Sat (void)\n+{\n+  return 0;\n+}\n+\n+int foo1 (int i)\n+{\n+  int _Fract = i * 2;\n+  return _Fract;\n+}\n+\n+int foo2 (int i)\n+{\n+  int _Accum = i * 2;\n+  return _Accum;\n+}\n+\n+int foo3 (int i)\n+{\n+  int _Sat = i * 2;\n+  return _Sat;\n+}"}, {"sha": "654710671139b902196d01475dd9bcf2bdcab2a0", "filename": "gcc/testsuite/gcc.dg/fixed-point/keywords-pedantic.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-pedantic.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+/* Fixed-point is a GCC extension.  */\n+\n+_Fract w;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Accum x;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Sat _Fract y;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n+_Sat _Accum z;\t\t/* { dg-warning \"GCC extension|ISO C\" } */"}, {"sha": "63b6349820fd239d3a638620793daed83f03937e", "filename": "gcc/testsuite/gcc.dg/fixed-point/keywords-reserved.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fkeywords-reserved.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.4.1: Keywords.\n+   C99 6.4.1(2): Keywords.\n+   Fixed-point keywords cannot be used in other contexts.  */\n+\n+int _Fract (void)\t\t/* { dg-error \"\" } */\n+{\n+  return 0;\n+}\n+\n+int _Accum (void)\t\t/* { dg-error \"\" } */\n+{\n+  return 0;\n+}\n+\n+int _Sat (void)\t\t\t/* { dg-error \"\" } */\n+{\n+  return 0;\n+}\n+\n+int foo1 (int i)\n+{\n+  int _Fract = i * 2;\t\t/* { dg-error \"\" } */\n+  return _Fract;\t\t/* { dg-error \"\" } */\n+}\n+\n+int foo2 (int i)\n+{\n+  int _Accum = i * 2;\t\t/* { dg-error \"\" } */\n+  return _Accum;\t\t/* { dg-error \"\" } */\n+}\n+\n+int foo3 (int i)\n+{\n+  int _Sat = i * 2;\t\t/* { dg-error \"\" } */\n+  return _Sat;\t\t\t/* { dg-error \"\" } */\n+}"}, {"sha": "d7ed9116f658dbe505eb67631c5d8365223c4acb", "filename": "gcc/testsuite/gcc.dg/fixed-point/loop-index.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Floop-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Floop-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Floop-index.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.8.5.2: The for statement.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+#define FUNC(TYPE,NAME,PF) \\\n+void \\\n+NAME (void) \\\n+{ \\\n+  TYPE d; \\\n+  int i; \\\n+  for (d = 0.1 ## PF, i = 0; d <= 0.8 ## PF; d += 0.1 ## PF) \\\n+    i++; \\\n+  if (i != 8) \\\n+    abort(); \\\n+}\n+\n+FUNC (short _Fract, sf, hr)\n+FUNC (_Fract, f, r)\n+FUNC (long _Fract, lf, lr)\n+FUNC (long long _Fract, llf, llr)\n+FUNC (unsigned short _Fract, usf, uhr)\n+FUNC (unsigned _Fract, uf, ur)\n+FUNC (unsigned long _Fract, ulf, ulr)\n+FUNC (unsigned long long _Fract, ullf, ullr)\n+FUNC (_Sat short _Fract, Ssf, hr)\n+FUNC (_Sat _Fract, Sf, r)\n+FUNC (_Sat long _Fract, Slf, lr)\n+FUNC (_Sat long long _Fract, Sllf, llr)\n+FUNC (_Sat unsigned short _Fract, Susf, uhr)\n+FUNC (_Sat unsigned _Fract, Suf, ur)\n+FUNC (_Sat unsigned long _Fract, Sulf, ulr)\n+FUNC (_Sat unsigned long long _Fract, Sullf, ullr)\n+FUNC (short _Accum, sa, hk)\n+FUNC (_Accum, a, k)\n+FUNC (long _Accum, la, lk)\n+FUNC (long long _Accum, lla, llk)\n+FUNC (unsigned short _Accum, usa, uhk)\n+FUNC (unsigned _Accum, ua, uk)\n+FUNC (unsigned long _Accum, ula, ulk)\n+FUNC (unsigned long long _Accum, ulla, ullk)\n+FUNC (_Sat short _Accum, Ssa, hk)\n+FUNC (_Sat _Accum, Sa, k)\n+FUNC (_Sat long _Accum, Sla, lk)\n+FUNC (_Sat long long _Accum, Slla, llk)\n+FUNC (_Sat unsigned short _Accum, Susa, uhk)\n+FUNC (_Sat unsigned _Accum, Sua, uk)\n+FUNC (_Sat unsigned long _Accum, Sula, ulk)\n+FUNC (_Sat unsigned long long _Accum, Sulla, ullk)\n+\n+int\n+main ()\n+{\n+  sf ();\n+  f ();\n+  lf ();\n+  llf ();\n+  usf ();\n+  uf ();\n+  ulf ();\n+  ullf ();\n+  Ssf ();\n+  Sf ();\n+  Slf ();\n+  Sllf ();\n+  Susf ();\n+  Suf ();\n+  Sulf ();\n+  Sullf ();\n+  sa ();\n+  a ();\n+  la ();\n+  lla ();\n+  usa ();\n+  ua ();\n+  ula ();\n+  ulla ();\n+  Ssa ();\n+  Sa ();\n+  Sla ();\n+  Slla ();\n+  Susa ();\n+  Sua ();\n+  Sula ();\n+  Sulla ();\n+\n+  return 0;\n+}"}, {"sha": "082b2b2c4a82df90e904f834adbe1136b55f5609", "filename": "gcc/testsuite/gcc.dg/fixed-point/modes.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmodes.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef _Fract qq  __attribute__ ((mode (QQ)));\n+typedef _Fract hq  __attribute__ ((mode (HQ)));\n+typedef _Fract sq  __attribute__ ((mode (SQ)));\n+typedef _Fract dq  __attribute__ ((mode (DQ)));\n+typedef unsigned _Fract uqq  __attribute__ ((mode (UQQ)));\n+typedef unsigned _Fract uhq  __attribute__ ((mode (UHQ)));\n+typedef unsigned _Fract usq  __attribute__ ((mode (USQ)));\n+typedef unsigned _Fract udq  __attribute__ ((mode (UDQ)));\n+typedef _Sat _Fract Sqq  __attribute__ ((mode (QQ)));\n+typedef _Sat _Fract Shq  __attribute__ ((mode (HQ)));\n+typedef _Sat _Fract Ssq  __attribute__ ((mode (SQ)));\n+typedef _Sat _Fract Sdq  __attribute__ ((mode (DQ)));\n+typedef _Sat unsigned _Fract Suqq  __attribute__ ((mode (UQQ)));\n+typedef _Sat unsigned _Fract Suhq  __attribute__ ((mode (UHQ)));\n+typedef _Sat unsigned _Fract Susq  __attribute__ ((mode (USQ)));\n+typedef _Sat unsigned _Fract Sudq  __attribute__ ((mode (UDQ)));\n+typedef _Accum ha  __attribute__ ((mode (HA)));\n+typedef _Accum sa  __attribute__ ((mode (SA)));\n+typedef _Accum da  __attribute__ ((mode (DA)));\n+typedef unsigned _Accum uha  __attribute__ ((mode (UHA)));\n+typedef unsigned _Accum usa  __attribute__ ((mode (USA)));\n+typedef unsigned _Accum uda  __attribute__ ((mode (UDA)));\n+typedef _Sat _Accum Sha  __attribute__ ((mode (HA)));\n+typedef _Sat _Accum Ssa  __attribute__ ((mode (SA)));\n+typedef _Sat _Accum Sda  __attribute__ ((mode (DA)));\n+typedef _Sat unsigned _Accum Suha  __attribute__ ((mode (UHA)));\n+typedef _Sat unsigned _Accum Susa  __attribute__ ((mode (USA)));\n+typedef _Sat unsigned _Accum Suda  __attribute__ ((mode (UDA)));\n+\n+/* Not all platforms support TQ, UTQ, TA, UTA modes.  */\n+#if defined(__LP64__) && !defined(__hppa__)\n+typedef _Fract tq  __attribute__ ((mode (TQ)));\n+typedef unsigned _Fract utq  __attribute__ ((mode (UTQ)));\n+typedef _Sat _Fract Stq  __attribute__ ((mode (TQ)));\n+typedef _Sat unsigned _Fract Sutq  __attribute__ ((mode (UTQ)));\n+typedef _Accum ta  __attribute__ ((mode (TA)));\n+typedef unsigned _Accum uta  __attribute__ ((mode (UTA)));\n+typedef _Sat _Accum Sta  __attribute__ ((mode (TA)));\n+typedef _Sat unsigned _Accum Suta  __attribute__ ((mode (UTA)));\n+\n+int tqsize[sizeof (tq) == 16 ? 1 : -1];\n+int utqsize[sizeof (utq) == 16 ? 1 : -1];\n+int Stqsize[sizeof (Stq) == 16 ? 1 : -1];\n+int Sutqsize[sizeof (Sutq) == 16 ? 1 : -1];\n+int tasize[sizeof (ta) == 16 ? 1 : -1];\n+int utasize[sizeof (uta) == 16 ? 1 : -1];\n+int Stasize[sizeof (Sta) == 16 ? 1 : -1];\n+int Sutasize[sizeof (Suta) == 16 ? 1 : -1];\n+\n+int tqalign = __alignof (tq);\n+int utqalign = __alignof (utq);\n+int Stqalign = __alignof (Stq);\n+int Sutqalign = __alignof (Sutq);\n+int taalign = __alignof (ta);\n+int utaalign = __alignof (uta);\n+int Staalign = __alignof (Sta);\n+int Sutaalign = __alignof (Suta);\n+#endif\n+\n+int qqsize[sizeof (qq) == 1 ? 1 : -1];\n+int hqsize[sizeof (hq) == 2 ? 1 : -1];\n+int sqsize[sizeof (sq) == 4 ? 1 : -1];\n+int dqsize[sizeof (dq) == 8 ? 1 : -1];\n+int uqqsize[sizeof (qq) == 1 ? 1 : -1];\n+int uhqsize[sizeof (hq) == 2 ? 1 : -1];\n+int usqsize[sizeof (sq) == 4 ? 1 : -1];\n+int udqsize[sizeof (dq) == 8 ? 1 : -1];\n+int Sqqsize[sizeof (Sqq) == 1 ? 1 : -1];\n+int Shqsize[sizeof (Shq) == 2 ? 1 : -1];\n+int Ssqsize[sizeof (Ssq) == 4 ? 1 : -1];\n+int Sdqsize[sizeof (Sdq) == 8 ? 1 : -1];\n+int Suqqsize[sizeof (Sqq) == 1 ? 1 : -1];\n+int Suhqsize[sizeof (Shq) == 2 ? 1 : -1];\n+int Susqsize[sizeof (Ssq) == 4 ? 1 : -1];\n+int Sudqsize[sizeof (Sdq) == 8 ? 1 : -1];\n+int hasize[sizeof (ha) == 2 ? 1 : -1];\n+int sasize[sizeof (sa) == 4 ? 1 : -1];\n+int dasize[sizeof (da) == 8 ? 1 : -1];\n+int uhasize[sizeof (uha) == 2 ? 1 : -1];\n+int usasize[sizeof (usa) == 4 ? 1 : -1];\n+int udasize[sizeof (uda) == 8 ? 1 : -1];\n+int Shasize[sizeof (Sha) == 2 ? 1 : -1];\n+int Ssasize[sizeof (Ssa) == 4 ? 1 : -1];\n+int Sdasize[sizeof (Sda) == 8 ? 1 : -1];\n+int Suhasize[sizeof (Suha) == 2 ? 1 : -1];\n+int Susasize[sizeof (Susa) == 4 ? 1 : -1];\n+int Sudasize[sizeof (Suda) == 8 ? 1 : -1];\n+\n+int qqalign = __alignof (qq);\n+int hqalign = __alignof (hq);\n+int sqalign = __alignof (sq);\n+int dqalign = __alignof (dq);\n+int uqqalign = __alignof (uqq);\n+int uhqalign = __alignof (uhq);\n+int usqalign = __alignof (usq);\n+int udqalign = __alignof (udq);\n+int Sqqalign = __alignof (Sqq);\n+int Shqalign = __alignof (Shq);\n+int Ssqalign = __alignof (Ssq);\n+int Sdqalign = __alignof (Sdq);\n+int Suqqalign = __alignof (Suqq);\n+int Suhqalign = __alignof (Suhq);\n+int Susqalign = __alignof (Susq);\n+int Sudqalign = __alignof (Sudq);\n+int haalign = __alignof (ha);\n+int saalign = __alignof (sa);\n+int daalign = __alignof (da);\n+int uhaalign = __alignof (uha);\n+int usaalign = __alignof (usa);\n+int udaalign = __alignof (uda);\n+int Shaalign = __alignof (Sha);\n+int Ssaalign = __alignof (Ssa);\n+int Sdaalign = __alignof (Sda);\n+int Suhaalign = __alignof (Suha);\n+int Susaalign = __alignof (Susa);\n+int Sudaalign = __alignof (Suda);"}, {"sha": "4ac553139e880616ff68e26b4b6a829ba386125d", "filename": "gcc/testsuite/gcc.dg/fixed-point/muldiv-warning.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmuldiv-warning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmuldiv-warning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fmuldiv-warning.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check if GCC generates warnings when overflows for mul and div.  */\n+\n+short _Fract sf0 = __SFRACT_MIN__ * __SFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+_Fract f0 = __FRACT_MIN__ * __FRACT_MIN__; /* { dg-warning \"overflow\" } */\n+long _Fract lf0 = __LFRACT_MIN__ * __LFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+long long _Fract llf0 = __LLFRACT_MIN__ * __LLFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+short _Fract sf1 = __SFRACT_MAX__ * __SFRACT_MIN__;\n+_Fract f1 = __FRACT_MAX__ * __FRACT_MIN__;\n+long _Fract lf1 = __LFRACT_MAX__ * __LFRACT_MIN__;\n+long long _Fract llf1 = __LLFRACT_MAX__ * __LLFRACT_MIN__;\n+short _Fract sf2 = __SFRACT_MIN__ / __SFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+_Fract f2 = __FRACT_MIN__ / __FRACT_MIN__; /* { dg-warning \"overflow\" } */\n+long _Fract lf2 = __LFRACT_MIN__ / __LFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+long long _Fract llf2 = __LLFRACT_MIN__ / __LLFRACT_MIN__; /* { dg-warning \"overflow\" } */\n+short _Fract sf3 = __SFRACT_MAX__ / __SFRACT_MIN__;\n+_Fract f3 = __FRACT_MAX__ / __FRACT_MIN__;\n+long _Fract lf3 = __LFRACT_MAX__ / __LFRACT_MIN__;\n+long long _Fract llf3 = __LLFRACT_MAX__ / __LLFRACT_MIN__;\n+\n+unsigned short _Fract usf0 = __USFRACT_MIN__ * __USFRACT_MIN__;\n+unsigned _Fract uf0 = __UFRACT_MIN__ * __UFRACT_MIN__;\n+unsigned long _Fract ulf0 = __ULFRACT_MIN__ * __ULFRACT_MIN__;\n+unsigned long long _Fract ullf0 = __ULLFRACT_MIN__ * __ULLFRACT_MIN__;\n+unsigned short _Fract usf1 = __USFRACT_MAX__ * __USFRACT_MIN__;\n+unsigned _Fract uf1 = __UFRACT_MAX__ * __UFRACT_MIN__;\n+unsigned long _Fract ulf1 = __ULFRACT_MAX__ * __ULFRACT_MIN__;\n+unsigned long long _Fract ullf1 = __ULLFRACT_MAX__ * __ULLFRACT_MIN__;\n+unsigned short _Fract usf2 = __USFRACT_MAX__ / __USFRACT_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned _Fract uf2 = __UFRACT_MAX__ / __UFRACT_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned long _Fract ulf2 = __ULFRACT_MAX__ / __ULFRACT_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned long long _Fract ullf2 = __ULLFRACT_MAX__ / __ULLFRACT_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned short _Fract usf3 = __USFRACT_MIN__ / __USFRACT_MAX__;\n+unsigned _Fract uf3 = __UFRACT_MIN__ / __UFRACT_MAX__;\n+unsigned long _Fract ulf3 = __ULFRACT_MIN__ / __ULFRACT_MAX__;\n+unsigned long long _Fract ullf3 = __ULLFRACT_MIN__ / __ULLFRACT_MAX__;\n+\n+short _Accum sa0 = __SACCUM_MIN__ * __SACCUM_MIN__; /* { dg-warning \"overflow\" } */\n+_Accum a0 = __ACCUM_MIN__ * __ACCUM_MIN__; /* { dg-warning \"overflow\" } */\n+long _Accum la0 = __LACCUM_MIN__ * __LACCUM_MIN__; /* { dg-warning \"overflow\" } */\n+long long _Accum lla0 = __LLACCUM_MIN__ * __LLACCUM_MIN__; /* { dg-warning \"overflow\" } */\n+short _Accum sa1 = __SACCUM_MAX__ * 0.1hk;\n+_Accum a1 = __ACCUM_MAX__ * 0.1k;\n+long _Accum la1 = __LACCUM_MAX__ * 0.1lk;\n+long long _Accum lla1 = __LLACCUM_MAX__ * 0.1llk;\n+short _Accum sa2 = __SACCUM_MIN__ / 0.1hk; /* { dg-warning \"overflow\" } */\n+_Accum a2 = __ACCUM_MIN__ / 0.1k; /* { dg-warning \"overflow\" } */\n+long _Accum la2 = __LACCUM_MIN__ / 0.1lk; /* { dg-warning \"overflow\" } */\n+long long _Accum lla2 = __LLACCUM_MIN__ / 0.1llk; /* { dg-warning \"overflow\" } */\n+short _Accum sa3 = __SACCUM_MAX__ / __SACCUM_MIN__;\n+_Accum a3 = __ACCUM_MAX__ / __ACCUM_MIN__;\n+long _Accum la3 = __LACCUM_MAX__ / __LACCUM_MIN__;\n+long long _Accum lla3 = __LLACCUM_MAX__ / __LLACCUM_MIN__;\n+\n+unsigned short _Accum usa0 = __USACCUM_MIN__ * __USACCUM_MIN__;\n+unsigned _Accum ua0 = __UACCUM_MIN__ * __UACCUM_MIN__;\n+unsigned long _Accum ula0 = __ULACCUM_MIN__ * __ULACCUM_MIN__;\n+unsigned long long _Accum ulla0 = __ULLACCUM_MIN__ * __ULLACCUM_MIN__;\n+unsigned short _Accum usa1 = __USACCUM_MAX__ * __USACCUM_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned _Accum ua1 = __UACCUM_MAX__ * __UACCUM_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned long _Accum ula1 = __ULACCUM_MAX__ * __ULACCUM_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned long long _Accum ulla1 = __ULLACCUM_MAX__ * __ULLACCUM_MAX__; /* { dg-warning \"overflow\" } */\n+unsigned short _Accum usa2 = __USACCUM_MAX__ / 0.5hk; /* { dg-warning \"overflow\" } */\n+unsigned _Accum ua2 = __UACCUM_MAX__ / 0.5k; /* { dg-warning \"overflow\" } */\n+unsigned long _Accum ula2 = __ULACCUM_MAX__ / 0.5lk; /* { dg-warning \"overflow\" } */\n+unsigned long long _Accum ulla2 = __ULLACCUM_MAX__ / 0.5llk; /* { dg-warning \"overflow\" } */\n+unsigned short _Accum usa3 = __USACCUM_MIN__ / __USACCUM_MAX__;\n+unsigned _Accum ua3 = __UACCUM_MIN__ / __UACCUM_MAX__;\n+unsigned long _Accum ula3 = __ULACCUM_MIN__ / __ULACCUM_MAX__;\n+unsigned long long _Accum ulla3 = __ULLACCUM_MIN__ / __ULLACCUM_MAX__;"}, {"sha": "5d134e1583105a4ec46f6255275fe70232168b01", "filename": "gcc/testsuite/gcc.dg/fixed-point/noassoc.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fnoassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fnoassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fnoassoc.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+extern void abort (void);\n+\n+/* Make sure GCC knows there is no associativity for saturating types.  */\n+\n+/* Don't transform to (temp + (0.5r + 0.8r))  */\n+_Sat _Fract add_test (_Sat _Fract temp)\n+{\n+  return temp + 0.5r + 0.8r;\n+}\n+\n+/* Don't transform to (temp * ((-0.5r - 0.5r) * (-0.5r - 0.5r)))  */\n+_Sat _Fract mul_test (_Sat _Fract temp)\n+{\n+  return temp * (-0.5r - 0.5r) * (-0.5r - 0.5r);\n+}\n+\n+/* Don't transform to ((temp1 + temp2) * 0.5r)  */\n+_Sat _Fract mul_add_test (_Sat _Fract temp1, _Sat _Fract temp2)\n+{\n+  return temp1 * 0.5r + temp2 * 0.5r;\n+}\n+\n+/* Don't transform to ((temp1 - temp2) * 0.5r)  */\n+_Sat _Fract mul_sub_test (_Sat _Fract temp1, _Sat _Fract temp2)\n+{\n+  return temp1 * 0.5r - temp2 * 0.5r;\n+}\n+\n+int main ()\n+{\n+  _Sat _Fract a;\n+\n+  a = add_test (-0.5r);\n+  if (a != 0.8r)\n+    abort ();\n+\n+  a = mul_test (0.1r);\n+  if (a != 0.1r)\n+    abort ();\n+\n+  a = mul_add_test (0.75r, 0.5r);\n+  if (a != 0.625r)\n+    abort ();\n+\n+  a = mul_sub_test (0.75r, -0.5r);\n+  if (a != 0.625r)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "31aecf5585813e2e1e9de6322e3bb1883285d166", "filename": "gcc/testsuite/gcc.dg/fixed-point/operator-bitwise.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-bitwise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-bitwise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-bitwise.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.10: Bitwise AND operator.\n+   C99 6.5.11: Bitwise exclusive OR operator.\n+   C99 6.5.12: Bitwise inclusive OR operator.\n+\n+   Test that these operators do not accept fixed-point operands.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+#define OPERATE(OPRD1,OPRT,OPRD2)\t\t\\\n+do\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  OPRD1 OPRT OPRD2;\t\t\t\t\\\n+} while (0)\n+\n+\n+\n+#define BITWISE_OPERATOR(OPRT,OPRD)\t\t\\\n+do\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+OPERATE(OPRD,OPRT,1);\t\t\t\t\\\n+OPERATE(OPRD,OPRT,0);\t\t\t\t\\\n+OPERATE(OPRD,OPRT,0x15);\t\t\t\\\n+OPERATE(0,OPRT,OPRD);\t\t\t\t\\\n+OPERATE(1,OPRT,OPRD);\t\t\t\t\\\n+OPERATE(0x15,OPRT,OPRD);\t\t\t\\\n+} while (0)\n+\n+void operator_notfor_fixed_point()\n+{\n+  short _Fract sf;\n+  _Fract f;\n+  long _Fract lf;\n+  long long _Fract llf;\n+  unsigned short _Fract usf;\n+  unsigned _Fract uf;\n+  unsigned long _Fract ulf;\n+  unsigned long long _Fract ullf;\n+  _Sat short _Fract Ssf;\n+  _Sat _Fract Sf;\n+  _Sat long _Fract Slf;\n+  _Sat long long _Fract Sllf;\n+  _Sat unsigned short _Fract Susf;\n+  _Sat unsigned _Fract Suf;\n+  _Sat unsigned long _Fract Sulf;\n+  _Sat unsigned long long _Fract Sullf;\n+  short _Accum sa;\n+  _Accum a;\n+  long _Accum la;\n+  long long _Accum lla;\n+  unsigned short _Accum usa;\n+  unsigned _Accum ua;\n+  unsigned long _Accum ula;\n+  unsigned long long _Accum ulla;\n+  _Sat short _Accum Ssa;\n+  _Sat _Accum Sa;\n+  _Sat long _Accum Sla;\n+  _Sat long long _Accum Slla;\n+  _Sat unsigned short _Accum Susa;\n+  _Sat unsigned _Accum Sua;\n+  _Sat unsigned long _Accum Sula;\n+  _Sat unsigned long long _Accum Sulla;\n+\n+  /* C99 Section 6.5.{10,11,12} Bitwise operator.  Constraints: Each of\n+   the operands shall have integer type.  Fixed-point type is rejected\n+   by compiler when bitwise operation is performed.  */\n+\n+  BITWISE_OPERATOR(&,sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,f); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,f); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,f); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,lf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,lf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,lf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,llf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,llf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,llf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,usf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,usf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,usf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,uf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,uf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,uf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,ulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,ulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,ulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,ullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,ullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,ullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Ssf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Ssf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Ssf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Slf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Slf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Slf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sllf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sllf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sllf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Susf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Susf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Susf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Suf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Suf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Suf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sulf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sullf); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,a); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,a); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,a); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,la); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,la); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,la); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,lla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,lla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,lla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,usa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,usa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,usa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,ua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,ua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,ua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,ula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,ula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,ula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,ulla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,ulla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,ulla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Ssa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Ssa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Ssa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Slla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Slla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Slla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Susa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Susa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Susa); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sua); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sula); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(&,Sulla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(|,Sulla); /* { dg-error \"invalid operands to binary\" } */\n+  BITWISE_OPERATOR(^,Sulla); /* { dg-error \"invalid operands to binary\" } */\n+}"}, {"sha": "2f1316cfc0019f99c5b4bb1c71444caf546e29fc", "filename": "gcc/testsuite/gcc.dg/fixed-point/operator-comma.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-comma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-comma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-comma.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.17: Comma operator.\n+   Test with fixed-point operands.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+#define FUNC(TYPE,NAME,PF) \\\n+volatile TYPE NAME ## a, NAME ## b, NAME ## c; \\\n+void \\\n+init_ ## NAME () \\\n+{ \\\n+  NAME ## b = 0.2 ## PF; \\\n+  NAME ## c = 0.3 ## PF; \\\n+}\n+\n+FUNC (short _Fract, sf, hr)\n+FUNC (_Fract, f, r)\n+FUNC (long _Fract, lf, lr)\n+FUNC (long long _Fract, llf, llr)\n+FUNC (unsigned short _Fract, usf, uhr)\n+FUNC (unsigned _Fract, uf, ur)\n+FUNC (unsigned long _Fract, ulf, ulr)\n+FUNC (long long _Fract, ullf, ullr)\n+FUNC (_Sat short _Fract, Ssf, hr)\n+FUNC (_Sat _Fract, Sf, r)\n+FUNC (_Sat long _Fract, Slf, lr)\n+FUNC (_Sat long long _Fract, Sllf, llr)\n+FUNC (_Sat unsigned short _Fract, Susf, uhr)\n+FUNC (_Sat unsigned _Fract, Suf, ur)\n+FUNC (_Sat unsigned long _Fract, Sulf, ulr)\n+FUNC (_Sat long long _Fract, Sullf, ullr)\n+FUNC (short _Accum, sa, hk)\n+FUNC (_Accum, a, k)\n+FUNC (long _Accum, la, lk)\n+FUNC (long long _Accum, lla, llk)\n+FUNC (unsigned short _Accum, usa, uhk)\n+FUNC (unsigned _Accum, ua, uk)\n+FUNC (unsigned long _Accum, ula, ulk)\n+FUNC (long long _Accum, ulla, ullk)\n+FUNC (_Sat short _Accum, Ssa, hk)\n+FUNC (_Sat _Accum, Sa, k)\n+FUNC (_Sat long _Accum, Sla, lk)\n+FUNC (_Sat long long _Accum, Slla, llk)\n+FUNC (_Sat unsigned short _Accum, Susa, uhk)\n+FUNC (_Sat unsigned _Accum, Sua, uk)\n+FUNC (_Sat unsigned long _Accum, Sula, ulk)\n+FUNC (_Sat long long _Accum, Sulla, ullk)\n+\n+int\n+main ()\n+{\n+#define TEST(NAME) \\\n+  init_ ## NAME (); \\\n+  NAME ## a = (NAME ## b, NAME ## c); \\\n+  if (NAME ## a != NAME ## c) \\\n+    abort (); \\\n+  NAME ## a = (NAME ## c, 123, NAME ## b); \\\n+  if (NAME ## a != NAME ## b) \\\n+    abort ();\n+\n+  TEST(sf)\n+  TEST(f)\n+  TEST(lf)\n+  TEST(llf)\n+  TEST(usf)\n+  TEST(uf)\n+  TEST(ulf)\n+  TEST(ullf)\n+  TEST(Ssf)\n+  TEST(Sf)\n+  TEST(Slf)\n+  TEST(Sllf)\n+  TEST(Susf)\n+  TEST(Suf)\n+  TEST(Sulf)\n+  TEST(Sullf)\n+  TEST(sa)\n+  TEST(a)\n+  TEST(la)\n+  TEST(lla)\n+  TEST(usa)\n+  TEST(ua)\n+  TEST(ula)\n+  TEST(ulla)\n+  TEST(Ssa)\n+  TEST(Sa)\n+  TEST(Sla)\n+  TEST(Slla)\n+  TEST(Susa)\n+  TEST(Sua)\n+  TEST(Sula)\n+  TEST(Sulla)\n+\n+  return 0;\n+}"}, {"sha": "94b0de0a9333dd7f328ec05a632cecfe87805d14", "filename": "gcc/testsuite/gcc.dg/fixed-point/operator-cond.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-cond.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.5.15 Conditional operator.\n+   Test with fixed-point operands.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+volatile int yes, no;\n+\n+#define FUNC(TYPE,NAME,PF) \\\n+volatile TYPE NAME ## a, NAME ## b, NAME ## c; \\\n+void \\\n+init_ ## NAME () \\\n+{ \\\n+  NAME ## b = 0.2 ## PF; \\\n+  NAME ## c = 0.3 ## PF; \\\n+  yes = 1; \\\n+  no = 0; \\\n+}\n+\n+FUNC (short _Fract, sf, hr)\n+FUNC (_Fract, f, r)\n+FUNC (long _Fract, lf, lr)\n+FUNC (long long _Fract, llf, llr)\n+FUNC (unsigned short _Fract, usf, uhr)\n+FUNC (unsigned _Fract, uf, ur)\n+FUNC (unsigned long _Fract, ulf, ulr)\n+FUNC (long long _Fract, ullf, ullr)\n+FUNC (_Sat short _Fract, Ssf, hr)\n+FUNC (_Sat _Fract, Sf, r)\n+FUNC (_Sat long _Fract, Slf, lr)\n+FUNC (_Sat long long _Fract, Sllf, llr)\n+FUNC (_Sat unsigned short _Fract, Susf, uhr)\n+FUNC (_Sat unsigned _Fract, Suf, ur)\n+FUNC (_Sat unsigned long _Fract, Sulf, ulr)\n+FUNC (_Sat long long _Fract, Sullf, ullr)\n+FUNC (short _Accum, sa, hk)\n+FUNC (_Accum, a, k)\n+FUNC (long _Accum, la, lk)\n+FUNC (long long _Accum, lla, llk)\n+FUNC (unsigned short _Accum, usa, uhk)\n+FUNC (unsigned _Accum, ua, uk)\n+FUNC (unsigned long _Accum, ula, ulk)\n+FUNC (long long _Accum, ulla, ullk)\n+FUNC (_Sat short _Accum, Ssa, hk)\n+FUNC (_Sat _Accum, Sa, k)\n+FUNC (_Sat long _Accum, Sla, lk)\n+FUNC (_Sat long long _Accum, Slla, llk)\n+FUNC (_Sat unsigned short _Accum, Susa, uhk)\n+FUNC (_Sat unsigned _Accum, Sua, uk)\n+FUNC (_Sat unsigned long _Accum, Sula, ulk)\n+FUNC (_Sat long long _Accum, Sulla, ullk)\n+\n+int\n+main ()\n+{\n+#define TEST(NAME) \\\n+  init_ ## NAME (); \\\n+  NAME ## a = yes ? NAME ## b : NAME ## c; \\\n+  if (NAME ## a != NAME ## b) \\\n+    abort (); \\\n+  NAME ## a = no ? NAME ## b : NAME ## c; \\\n+  if (NAME ## a != NAME ## c) \\\n+    abort ();\n+\n+  TEST(sf)\n+  TEST(f)\n+  TEST(lf)\n+  TEST(llf)\n+  TEST(usf)\n+  TEST(uf)\n+  TEST(ulf)\n+  TEST(ullf)\n+  TEST(Ssf)\n+  TEST(Sf)\n+  TEST(Slf)\n+  TEST(Sllf)\n+  TEST(Susf)\n+  TEST(Suf)\n+  TEST(Sulf)\n+  TEST(Sullf)\n+  TEST(sa)\n+  TEST(a)\n+  TEST(la)\n+  TEST(lla)\n+  TEST(usa)\n+  TEST(ua)\n+  TEST(ula)\n+  TEST(ulla)\n+  TEST(Ssa)\n+  TEST(Sa)\n+  TEST(Sla)\n+  TEST(Slla)\n+  TEST(Susa)\n+  TEST(Sua)\n+  TEST(Sula)\n+  TEST(Sulla)\n+\n+  return 0;\n+}"}, {"sha": "3873b258870fb824183f6ea5a1dca1f1b09e349c", "filename": "gcc/testsuite/gcc.dg/fixed-point/operator-logical.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-logical.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-logical.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-logical.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 Logical AND operator.\n+   C99 Logical OR operator.\n+   Test with fixed-point operands.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+#define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  if (( (OPRD1) OPRT (OPRD2) )!= RLT)\t\\\n+    abort ();\t\t\t\t\\\n+} while (0)\n+\n+#define FIXED_POINT_LOGICAL(OPRD)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+  OPRD = 0.1;\t\t\t\t\\\n+  OPERATE(1,||,OPRD,1);\t\t\t\\\n+  OPERATE(0,||,OPRD,1);\t\t\t\\\n+  OPERATE(OPRD,||,1,1);\t\t\t\\\n+  OPERATE(OPRD,||,0,1);\t\t\t\\\n+  OPRD = 0;\t\t\t\t\\\n+  OPERATE(1,||,OPRD,1);\t\t\t\\\n+  OPERATE(0,||,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,||,1,1);\t\t\t\\\n+  OPERATE(OPRD,||,0,0);\t\t\t\\\n+  OPRD = 0.1;\t\t\t\t\\\n+  OPERATE(1,&&,OPRD,1);\t\t\t\\\n+  OPERATE(0,&&,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,&&,1,1);\t\t\t\\\n+  OPERATE(OPRD,&&,0,0);\t\t\t\\\n+  OPRD = 0;\t\t\t\t\\\n+  OPERATE(1,&&,OPRD,0);\t\t\t\\\n+  OPERATE(0,&&,OPRD,0);\t\t\t\\\n+  OPERATE(OPRD,&&,1,0);\t\t\t\\\n+  OPERATE(OPRD,&&,0,0);\t\t\t\\\n+} while (0)\n+\n+int\n+main ()\n+{\n+  short _Fract sf;\n+  _Fract f;\n+  long _Fract lf;\n+  long long _Fract llf;\n+  unsigned short _Fract usf;\n+  unsigned _Fract uf;\n+  unsigned long _Fract ulf;\n+  unsigned long long _Fract ullf;\n+  _Sat short _Fract Ssf;\n+  _Sat _Fract Sf;\n+  _Sat long _Fract Slf;\n+  _Sat long long _Fract Sllf;\n+  _Sat unsigned short _Fract Susf;\n+  _Sat unsigned _Fract Suf;\n+  _Sat unsigned long _Fract Sulf;\n+  _Sat unsigned long long _Fract Sullf;\n+  short _Accum sa;\n+  _Accum a;\n+  long _Accum la;\n+  long long _Accum lla;\n+  unsigned short _Accum usa;\n+  unsigned _Accum ua;\n+  unsigned long _Accum ula;\n+  unsigned long long _Accum ulla;\n+  _Sat short _Accum Ssa;\n+  _Sat _Accum Sa;\n+  _Sat long _Accum Sla;\n+  _Sat long long _Accum Slla;\n+  _Sat unsigned short _Accum Susa;\n+  _Sat unsigned _Accum Sua;\n+  _Sat unsigned long _Accum Sula;\n+  _Sat unsigned long long _Accum Sulla;\n+\n+  /* C99 Section 6.5.{13,14} Logical operator.  Constraints Each of the\n+     operands shall have scalar type.  Fixed-point types would obey this.  */\n+  FIXED_POINT_LOGICAL (sf);\n+  FIXED_POINT_LOGICAL (f);\n+  FIXED_POINT_LOGICAL (lf);\n+  FIXED_POINT_LOGICAL (llf);\n+  FIXED_POINT_LOGICAL (usf);\n+  FIXED_POINT_LOGICAL (uf);\n+  FIXED_POINT_LOGICAL (ulf);\n+  FIXED_POINT_LOGICAL (ullf);\n+  FIXED_POINT_LOGICAL (Ssf);\n+  FIXED_POINT_LOGICAL (Sf);\n+  FIXED_POINT_LOGICAL (Slf);\n+  FIXED_POINT_LOGICAL (Sllf);\n+  FIXED_POINT_LOGICAL (Susf);\n+  FIXED_POINT_LOGICAL (Suf);\n+  FIXED_POINT_LOGICAL (Sulf);\n+  FIXED_POINT_LOGICAL (Sullf);\n+  FIXED_POINT_LOGICAL (sa);\n+  FIXED_POINT_LOGICAL (a);\n+  FIXED_POINT_LOGICAL (la);\n+  FIXED_POINT_LOGICAL (lla);\n+  FIXED_POINT_LOGICAL (usa);\n+  FIXED_POINT_LOGICAL (ua);\n+  FIXED_POINT_LOGICAL (ula);\n+  FIXED_POINT_LOGICAL (ulla);\n+  FIXED_POINT_LOGICAL (Ssa);\n+  FIXED_POINT_LOGICAL (Sa);\n+  FIXED_POINT_LOGICAL (Sla);\n+  FIXED_POINT_LOGICAL (Slla);\n+  FIXED_POINT_LOGICAL (Susa);\n+  FIXED_POINT_LOGICAL (Sua);\n+  FIXED_POINT_LOGICAL (Sula);\n+  FIXED_POINT_LOGICAL (Sulla);\n+\n+  return 0;\n+}"}, {"sha": "5ad420b02c2b40d7c0b4f0edac4d5901edc4e1d0", "filename": "gcc/testsuite/gcc.dg/fixed-point/operator-unary.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-unary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-unary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Foperator-unary.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.3 Unary operators & and *.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+#define UNARY_OPERATOR(TYPE,SUFFIX)\t\\\n+do\t\t\t\t\t\\\n+{\t\t\t\t\t\\\n+ TYPE unary_d = 0.1 ## SUFFIX;\t\t\\\n+ TYPE* unary_dp;\t\t\t\\\n+ /*  & operator.  */\t\t\t\\\n+ unary_dp = &(unary_d);\t\t\t\\\n+ /*  * operator.  */\t\t\t\\\n+ unary_d = *(unary_dp);\t\t\t\\\n+} while (0)\n+\n+int\n+main ()\n+{\n+  /*  C99 6.5.3 Unary operators.  */\n+  UNARY_OPERATOR(short _Fract, hr);\n+  UNARY_OPERATOR(_Fract, r);\n+  UNARY_OPERATOR(long _Fract, lr);\n+  UNARY_OPERATOR(long long _Fract, llr);\n+  UNARY_OPERATOR(unsigned short _Fract, uhr);\n+  UNARY_OPERATOR(unsigned _Fract, ur);\n+  UNARY_OPERATOR(unsigned long _Fract, ulr);\n+  UNARY_OPERATOR(unsigned long long _Fract, ullr);\n+  UNARY_OPERATOR(_Sat short _Fract, hr);\n+  UNARY_OPERATOR(_Sat _Fract, r);\n+  UNARY_OPERATOR(_Sat long _Fract, lr);\n+  UNARY_OPERATOR(_Sat long long _Fract, llr);\n+  UNARY_OPERATOR(_Sat unsigned short _Fract, uhr);\n+  UNARY_OPERATOR(_Sat unsigned _Fract, ur);\n+  UNARY_OPERATOR(_Sat unsigned long _Fract, ulr);\n+  UNARY_OPERATOR(_Sat unsigned long long _Fract, ullr);\n+  UNARY_OPERATOR(short _Accum, hk);\n+  UNARY_OPERATOR(_Accum, k);\n+  UNARY_OPERATOR(long _Accum, lk);\n+  UNARY_OPERATOR(long long _Accum, llk);\n+  UNARY_OPERATOR(unsigned short _Accum, uhk);\n+  UNARY_OPERATOR(unsigned _Accum, uk);\n+  UNARY_OPERATOR(unsigned long _Accum, ulk);\n+  UNARY_OPERATOR(unsigned long long _Accum, ullk);\n+  UNARY_OPERATOR(_Sat short _Accum, hk);\n+  UNARY_OPERATOR(_Sat _Accum, k);\n+  UNARY_OPERATOR(_Sat long _Accum, lk);\n+  UNARY_OPERATOR(_Sat long long _Accum, llk);\n+  UNARY_OPERATOR(_Sat unsigned short _Accum, uhk);\n+  UNARY_OPERATOR(_Sat unsigned _Accum, uk);\n+  UNARY_OPERATOR(_Sat unsigned long _Accum, ulk);\n+  UNARY_OPERATOR(_Sat unsigned long long _Accum, ullk);\n+\n+  return 0;\n+}"}, {"sha": "b9a02f0c7a820f9815ab6e5cff0d609586636d7c", "filename": "gcc/testsuite/gcc.dg/fixed-point/struct-layout-1.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-layout-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-layout-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-layout-1.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* This test is based on the test from ../dfp/.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct S1\n+{\n+  long _Fract a[0];\n+};\n+\n+struct S2\n+{\n+  struct\n+  {\n+    long _Fract e;\n+  } b[0];\n+};\n+\n+struct S3\n+{\n+  union\n+  {\n+    long _Fract c;\n+  } a[0];\n+};\n+\n+struct S4\n+{\n+  int a[0];\n+  long _Fract b[0];\n+};\n+\n+struct S5\n+{\n+  union\n+  {\n+    long _Fract c[0];\n+  } a;\n+};\n+\n+int check_var (int z, ...)\n+{\n+  long long result;\n+  va_list ap;\n+  va_start (ap, z);\n+  va_arg (ap, struct S1);\n+  result = va_arg (ap, long long);\n+  va_end (ap);\n+\n+  return (result == 2LL);\n+}\n+\n+int main ()\n+{\n+  struct S1 s1;\n+  struct S2 s2;\n+  struct S3 s3;\n+  struct S4 s4;\n+  struct S5 s5;\n+\n+  if (check_var (2, s1, 2LL) == 0)\n+    abort ();\n+  if (check_var (2, s2, 2LL) == 0)\n+    abort ();\n+  if (check_var (2, s3, 2LL) == 0)\n+    abort ();\n+  if (check_var (2, s4, 2LL) == 0)\n+    abort ();\n+  if (check_var (2, s5, 2LL) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "11477526652c6ad5f2641d56caf790fc95aad2c0", "filename": "gcc/testsuite/gcc.dg/fixed-point/struct-union.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fstruct-union.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wall\" } */\n+\n+/* C99 6.5.2.3 Structure and union members.\n+   If the first expression has qualified type, the result has the so-qualified\n+   version of the type of the designated member.\n+   Based on the test from ../dfp/.  */\n+\n+struct s {_Fract f; const long _Fract lf;};\n+struct sv { volatile _Fract f; volatile long _Fract lf; };\n+union u\n+{\n+  const long _Fract lf;\n+  _Fract f;\n+  const struct s cs;\n+};\n+\n+struct s s;\n+struct sv sv;\n+const struct s cs;\n+\n+union u u;\n+const union u cu;\n+\n+struct s g (struct s s)\n+{\n+  return s;\n+}\n+\n+union u h (union u u)\n+{\n+  return u;\n+}\n+\n+void f()\n+{\n+  cs.f = 0.1r; /* { dg-error \"assignment of read-only variable\" } */\n+  cs.lf = 0.2lr; /* { dg-error \"assignment of read-only variable\" } */\n+  s.lf = 0.3lr;  /* { dg-error \"assignment of read-only member\" } */\n+\n+  s.f = 0.4r;\n+  u.f = 0.5r;\n+\n+  u.lf = 0.6lr;    /* { dg-error \"assignment of read-only member\" } */\n+  u.cs.f = 0.7r; /* { dg-error \"assignment of read-only member\" } */\n+  u.cs.lf = 0.8lr; /* { dg-error \"assignment of read-only member\" } */\n+\n+  cu.f = 0.9r;   /* { dg-error \"assignment of read-only variable\" } */\n+\n+  cu.lf = 0.01lr;    /* { dg-error \"assignment of read-only variable\" } */\n+  cu.cs.f = 0.02r; /* { dg-error \"assignment of read-only variable\" } */\n+  cu.cs.lf = 0.03lr; /* { dg-error \"assignment of read-only variable\" } */\n+\n+  /* f().x is a valid postfix expression but is not an lvalue if\n+     function f() returning a structure or union.  */\n+  g(s).f = 0.04r;  /* { dg-error \"lvalue required\" } */\n+  h(u).lf = 0.05lr;  /* { dg-error \"lvalue required\" } */\n+\n+  /* Test assignment to volatile structure members.  */\n+  sv.f = 0.06r;\n+  sv.lf = 0.07lr;\n+}\n+"}, {"sha": "011345cf3f091f799552bc290bd07a08e23a7ac3", "filename": "gcc/testsuite/gcc.dg/fixed-point/types.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypes.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1169 6.3.1.3a - Fixed-point types (NEW CLAUSE).\n+\n+   Check if all types are ok.  */\n+\n+short _Fract q0;\n+_Fract q1;\n+long _Fract q2;\n+long long _Fract q3;\n+unsigned short _Fract q4;\n+unsigned _Fract q5;\n+unsigned long _Fract q6;\n+unsigned long long _Fract q7;\n+_Sat short _Fract sq0;\n+_Sat _Fract sq1;\n+_Sat long _Fract sq2;\n+_Sat long long _Fract sq3;\n+_Sat unsigned short _Fract sq4;\n+_Sat unsigned _Fract sq5;\n+_Sat unsigned long _Fract sq6;\n+_Sat unsigned long long _Fract sq7;\n+\n+short _Accum a0;\n+_Accum a1;\n+long _Accum a2;\n+long long _Accum a3;\n+unsigned short _Accum a4;\n+unsigned _Accum a5;\n+unsigned long _Accum a6;\n+unsigned long long _Accum a7;\n+_Sat short _Accum sa0;\n+_Sat _Accum sa1;\n+_Sat long _Accum sa2;\n+_Sat long long _Accum sa3;\n+_Sat unsigned short _Accum sa4;\n+_Sat unsigned _Accum sa5;\n+_Sat unsigned long _Accum sa6;\n+_Sat unsigned long long _Accum sa7;"}, {"sha": "9eaa29f8409670ab135ce5ffa5ca38b58ac1427b", "filename": "gcc/testsuite/gcc.dg/fixed-point/typespec.c", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypespec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypespec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Ftypespec.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,303 @@\n+/* Test for valid and invalid combinations of type specifiers.\n+   Based off gcc.dg/test-spec-1.c */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef char type;\n+\n+void _Fract *x0;  /* { dg-error \"\" \"void _Fract\" } */\n+char _Fract *x3;  /* { dg-error \"\" \"char _Fract\" } */\n+short _Fract *x6;\n+int _Fract *x9;   /* { dg-error \"\" \"int _Fract\" } */\n+long _Fract *x12;\n+float _Fract *x15;   /* { dg-error \"\" \"float _Fract\" } */\n+double _Fract *x18;   /* { dg-error \"\" \"double _Fract\" } */\n+signed _Fract *x21;\n+_Bool _Fract *x24;   /* { dg-error \"\" \"_Bool _Fract\" } */\n+int _Fract *x27;    /* { dg-error \"\" \"int _Fract\" } */\n+type _Fract *x30;   /* { dg-error \"\" \"type _Fract\" } */\n+char signed _Fract *x33;  /* { dg-error \"\" \"char signed _Fract\" } */\n+char unsigned _Fract *x36; /* { dg-error \"\" \"char unsigned _Fract\" } */\n+short _Fract *x39;\n+short signed _Fract *x42;\n+short unsigned _Fract *x45;\n+_Fract short*x48;\n+_Fract short signed*x51;\n+_Fract short unsigned*x54;\n+_Fract long*x57;\n+_Fract long signed*x60;\n+_Fract long unsigned*x63;\n+_Fract signed long*x66;\n+_Fract signed short*x69;\n+int signed _Fract *x72;  /* { dg-error \"\" \"int signed _Fract\" } */\n+int unsigned _Fract *x75;  /* { dg-error \"\" \"int unsigned _Fract\" } */\n+long int _Fract *x78;  /* { dg-error \"\" \"long int _Fract\" } */\n+long long _Fract *x81;\n+long double _Fract *x84;  /* { dg-error \"\" \"long double _Fract\" } */\n+long signed _Fract *x87;\n+long unsigned _Fract *x90;\n+double long _Fract *x93;  /* { dg-error \"\" \"double long _Fract\" } */\n+signed char _Fract *x96;   /* { dg-error \"\" \"signed char _Fract\" } */\n+signed short _Fract *x99;\n+signed int _Fract *x102;  /* { dg-error \"\" \"signed int _Fract\" } */\n+signed long _Fract *x105;\n+unsigned char _Fract *x108; /* { dg-error \"\" \"unsigned char _Fract\" } */\n+unsigned short _Fract *x111;\n+unsigned int _Fract *x114; /* { dg-error \"\" \"unsigned int _Fract\" } */\n+unsigned long _Fract *x117;\n+short int signed _Fract *x120; /* { dg-error \"\" \"short int signed _Fract\" } */\n+short int unsigned _Fract *x123; /* { dg-error \"\" \"short int unsigned _Fract\" } */\n+short signed int _Fract *x126; /* { dg-error \"\" \"short signed int _Fract\" } */\n+short unsigned int _Fract *x129; /* { dg-error \"\" \"short unsigned int _Fract\" } */\n+int short signed _Fract *x132; /* { dg-error \"\" \"int short signed _Fract\" } */\n+int short unsigned _Fract *x135; /* { dg-error \"\" \"int short unsigned _Fract\" } */\n+int long long _Fract *x138; /* { dg-error \"\" \"int long long _Fract\" } */\n+int long signed _Fract *x141; /* { dg-error \"\" \"int long signed _Fract\" } */\n+int long unsigned _Fract *x144; /* { dg-error \"\" \"int long unsigned _Fract\" } */\n+int signed short _Fract *x147; /* { dg-error \"\" \"int signed short _Fract\" } */\n+int signed long _Fract *x150; /* { dg-error \"\" \"int signed long _Fract\" } */\n+int unsigned short _Fract *x153; /* { dg-error \"\" \"int unsigned short _Fract\" } */\n+int unsigned long _Fract *x156; /* { dg-error \"\" \"int unsigned long _Fract\" } */\n+long int long _Fract *x159; /* { dg-error \"\" \"long int long _Fract\" } */\n+long int signed _Fract *x162; /* { dg-error \"\" \"long int signed _Fract\" } */\n+long int unsigned _Fract *x165; /* { dg-error \"\" \"long int unsigned _Fract\" } */\n+long long int _Fract *x168; /* { dg-error \"\" \"long long int _Fract\" } */\n+long long signed _Fract *x171;\n+long long unsigned _Fract *x175;\n+long signed int _Fract *x178; /* { dg-error \"\" \"long signed int _Fract\" } */\n+long unsigned int _Fract *x181; /* { dg-error \"\" \"long unsigned int _Fract\" } */\n+long unsigned long _Fract *x184;\n+signed short int _Fract *x187; /* { dg-error \"\" \"signed short int _Fract\" } */\n+signed int short _Fract *x190; /* { dg-error \"\" \"signed int short _Fract\" } */\n+signed int long _Fract *x192; /* { dg-error \"\" \"signed int long _Fract\" } */\n+signed long int _Fract *x195; /* { dg-error \"\" \"signed long int _Fract\" } */\n+signed long long _Fract *x198;\n+unsigned short int _Fract *x201; /* { dg-error \"\" \"unsigned short int _Fract\" } */\n+unsigned int short _Fract *x204; /* { dg-error \"\" \"unsigned int short _Fract\" } */\n+unsigned int long _Fract *x207; /* { dg-error \"\" \"unsigned int long _Fract\" } */\n+unsigned long int _Fract *x210; /* { dg-error \"\" \"unsigned long int _Fract\" } */\n+unsigned long long _Fract *x213;\n+int long long signed _Fract *x216; /* { dg-error \"\" \"int long long signed _Fract\" } */\n+int long long unsigned _Fract *x219; /* { dg-error \"\" \"int long long unsigned _Fract\" } */\n+int long signed long _Fract *x222; /* { dg-error \"\" \"int long signed long _Fract\" } */\n+int long unsigned long _Fract *x226; /* { dg-error \"\" \"int long unsigned long _Fract\" } */\n+int signed long long _Fract *x229; /* { dg-error \"\" \"int signed long long _Fract\" } */\n+int unsigned long long _Fract *x232; /* { dg-error \"\" \"int unsigned long long _Fract\" } */\n+long int long signed _Fract *x235; /* { dg-error \"\" \"long int long signed _Fract\" } */\n+long int long unsigned _Fract *x238; /* { dg-error \"\" \"long int long unsigned _Fract\" } */\n+long int signed long _Fract *x241; /* { dg-error \"\" \"long int signed long _Fract\" } */\n+long int unsigned long _Fract *x244; /* { dg-error \"\" \"long int unsigned long _Fract\" } */\n+long long int signed _Fract *x247; /* { dg-error \"\" \"long long int signed _Fract\" } */\n+long long int unsigned _Fract *x250; /* { dg-error \"\" \"long long int unsigned _Fract\" } */\n+long long signed int _Fract *x253; /* { dg-error \"\" \"long long signed int _Fract\" } */\n+long long unsigned int _Fract *x256; /* { dg-error \"\" \"long long unsigned int _Fract\" } */\n+long signed int long _Fract *x259; /* { dg-error \"\" \"long signed int long _Fract\" } */\n+long signed long int _Fract *x262; /* { dg-error \"\" \"long signed long int _Fract\" } */\n+long unsigned int long _Fract *x265; /* { dg-error \"\" \"long unsigned int long _Fract\" } */\n+long unsigned long int _Fract *x268; /* { dg-error \"\" \"long unsigned long int _Fract\" } */\n+signed long long int _Fract *x271; /* { dg-error \"\" \"signed long long int _Fract\" } */\n+unsigned int long long _Fract *x274; /* { dg-error \"\" \"unsigned int long long _Fract\" } */\n+unsigned long int long _Fract *x277; /* { dg-error \"\" \"unsigned long int long _Fract\" } */\n+unsigned long long int _Fract *x280; /* { dg-error \"\" \"unsigned long long int _Fract\" } */\n+_Complex _Fract *x283; /* { dg-error \"\" \"_Complex _Fract\" } */\n+_Fract _Complex *x286; /* { dg-error \"\" \"_Fract _Complex\" } */\n+unsigned _Fract *x289;\n+signed _Fract *x292;\n+\n+void _Accum *k0;  /* { dg-error \"\" \"void _Accum\" } */\n+char _Accum *k3;  /* { dg-error \"\" \"char _Accum\" } */\n+short _Accum *k6;\n+int _Accum *k9;   /* { dg-error \"\" \"int _Accum\" } */\n+long _Accum *k12;\n+float _Accum *k15;   /* { dg-error \"\" \"float _Accum\" } */\n+double _Accum *k18;   /* { dg-error \"\" \"double _Accum\" } */\n+signed _Accum *k21;\n+_Bool _Accum *k24;   /* { dg-error \"\" \"_Bool _Accum\" } */\n+int _Accum *k27;    /* { dg-error \"\" \"int _Accum\" } */\n+type _Accum *k30;   /* { dg-error \"\" \"type _Accum\" } */\n+char signed _Accum *k33;  /* { dg-error \"\" \"char signed _Accum\" } */\n+char unsigned _Accum *k36; /* { dg-error \"\" \"char unsigned _Accum\" } */\n+short _Accum *k39;\n+short signed _Accum *k42;\n+short unsigned _Accum *k45;\n+_Accum short*k48;\n+_Accum short signed*k51;\n+_Accum short unsigned*k54;\n+_Accum long*k57;\n+_Accum long signed*k60;\n+_Accum long unsigned*k63;\n+_Accum signed long*k66;\n+_Accum signed short*k69;\n+int signed _Accum *k72;  /* { dg-error \"\" \"int signed _Accum\" } */\n+int unsigned _Accum *k75;  /* { dg-error \"\" \"int unsigned _Accum\" } */\n+long int _Accum *k78;  /* { dg-error \"\" \"long int _Accum\" } */\n+long long _Accum *k81;\n+long double _Accum *k84;  /* { dg-error \"\" \"long double _Accum\" } */\n+long signed _Accum *k87;\n+long unsigned _Accum *k90;\n+double long _Accum *k93;  /* { dg-error \"\" \"double long _Accum\" } */\n+signed char _Accum *k96;   /* { dg-error \"\" \"signed char _Accum\" } */\n+signed short _Accum *k99;\n+signed int _Accum *k102;  /* { dg-error \"\" \"signed int _Accum\" } */\n+signed long _Accum *k105;\n+unsigned char _Accum *k108; /* { dg-error \"\" \"unsigned char _Accum\" } */\n+unsigned short _Accum *k111;\n+unsigned int _Accum *k114; /* { dg-error \"\" \"unsigned int _Accum\" } */\n+unsigned long _Accum *k117;\n+short int signed _Accum *k120; /* { dg-error \"\" \"short int signed _Accum\" } */\n+short int unsigned _Accum *k123; /* { dg-error \"\" \"short int unsigned _Accum\" } */\n+short signed int _Accum *k126; /* { dg-error \"\" \"short signed int _Accum\" } */\n+short unsigned int _Accum *k129; /* { dg-error \"\" \"short unsigned int _Accum\" } */\n+int short signed _Accum *k132; /* { dg-error \"\" \"int short signed _Accum\" } */\n+int short unsigned _Accum *k135; /* { dg-error \"\" \"int short unsigned _Accum\" } */\n+int long long _Accum *k138; /* { dg-error \"\" \"int long long _Accum\" } */\n+int long signed _Accum *k141; /* { dg-error \"\" \"int long signed _Accum\" } */\n+int long unsigned _Accum *k144; /* { dg-error \"\" \"int long unsigned _Accum\" } */\n+int signed short _Accum *k147; /* { dg-error \"\" \"int signed short _Accum\" } */\n+int signed long _Accum *k150; /* { dg-error \"\" \"int signed long _Accum\" } */\n+int unsigned short _Accum *k153; /* { dg-error \"\" \"int unsigned short _Accum\" } */\n+int unsigned long _Accum *k156; /* { dg-error \"\" \"int unsigned long _Accum\" } */\n+long int long _Accum *k159; /* { dg-error \"\" \"long int long _Accum\" } */\n+long int signed _Accum *k162; /* { dg-error \"\" \"long int signed _Accum\" } */\n+long int unsigned _Accum *k165; /* { dg-error \"\" \"long int unsigned _Accum\" } */\n+long long int _Accum *k168; /* { dg-error \"\" \"long long int _Accum\" } */\n+long long signed _Accum *k171;\n+long long unsigned _Accum *k175;\n+long signed int _Accum *k178; /* { dg-error \"\" \"long signed int _Accum\" } */\n+long unsigned int _Accum *k181; /* { dg-error \"\" \"long unsigned int _Accum\" } */\n+long unsigned long _Accum *k184;\n+signed short int _Accum *k187; /* { dg-error \"\" \"signed short int _Accum\" } */\n+signed int short _Accum *k190; /* { dg-error \"\" \"signed int short _Accum\" } */\n+signed int long _Accum *k192; /* { dg-error \"\" \"signed int long _Accum\" } */\n+signed long int _Accum *k195; /* { dg-error \"\" \"signed long int _Accum\" } */\n+signed long long _Accum *k198;\n+unsigned short int _Accum *k201; /* { dg-error \"\" \"unsigned short int _Accum\" } */\n+unsigned int short _Accum *k204; /* { dg-error \"\" \"unsigned int short _Accum\" } */\n+unsigned int long _Accum *k207; /* { dg-error \"\" \"unsigned int long _Accum\" } */\n+unsigned long int _Accum *k210; /* { dg-error \"\" \"unsigned long int _Accum\" } */\n+unsigned long long _Accum *k213;\n+int long long signed _Accum *k216; /* { dg-error \"\" \"int long long signed _Accum\" } */\n+int long long unsigned _Accum *k219; /* { dg-error \"\" \"int long long unsigned _Accum\" } */\n+int long signed long _Accum *k222; /* { dg-error \"\" \"int long signed long _Accum\" } */\n+int long unsigned long _Accum *k226; /* { dg-error \"\" \"int long unsigned long _Accum\" } */\n+int signed long long _Accum *k229; /* { dg-error \"\" \"int signed long long _Accum\" } */\n+int unsigned long long _Accum *k232; /* { dg-error \"\" \"int unsigned long long _Accum\" } */\n+long int long signed _Accum *k235; /* { dg-error \"\" \"long int long signed _Accum\" } */\n+long int long unsigned _Accum *k238; /* { dg-error \"\" \"long int long unsigned _Accum\" } */\n+long int signed long _Accum *k241; /* { dg-error \"\" \"long int signed long _Accum\" } */\n+long int unsigned long _Accum *k244; /* { dg-error \"\" \"long int unsigned long _Accum\" } */\n+long long int signed _Accum *k247; /* { dg-error \"\" \"long long int signed _Accum\" } */\n+long long int unsigned _Accum *k250; /* { dg-error \"\" \"long long int unsigned _Accum\" } */\n+long long signed int _Accum *k253; /* { dg-error \"\" \"long long signed int _Accum\" } */\n+long long unsigned int _Accum *k256; /* { dg-error \"\" \"long long unsigned int _Accum\" } */\n+long signed int long _Accum *k259; /* { dg-error \"\" \"long signed int long _Accum\" } */\n+long signed long int _Accum *k262; /* { dg-error \"\" \"long signed long int _Accum\" } */\n+long unsigned int long _Accum *k265; /* { dg-error \"\" \"long unsigned int long _Accum\" } */\n+long unsigned long int _Accum *k268; /* { dg-error \"\" \"long unsigned long int _Accum\" } */\n+signed long long int _Accum *k271; /* { dg-error \"\" \"signed long long int _Accum\" } */\n+unsigned int long long _Accum *k274; /* { dg-error \"\" \"unsigned int long long _Accum\" } */\n+unsigned long int long _Accum *k277; /* { dg-error \"\" \"unsigned long int long _Accum\" } */\n+unsigned long long int _Accum *k280; /* { dg-error \"\" \"unsigned long long int _Accum\" } */\n+_Complex _Accum *k283; /* { dg-error \"\" \"_Complex _Accum\" } */\n+_Accum _Complex *k286; /* { dg-error \"\" \"_Accum _Complex\" } */\n+unsigned _Accum *k289;\n+signed _Accum *k292;\n+\n+void _Sat *s0;  /* { dg-error \"\" \"void _Sat\" } */\n+char _Sat *s3;  /* { dg-error \"\" \"char _Sat\" } */\n+short _Sat *s6; /* { dg-error \"\" \"short _Sat\" } */\n+int _Sat *s9;   /* { dg-error \"\" \"int _Sat\" } */\n+long _Sat *s12;   /* { dg-error \"\" \"long _Sat\" } */\n+float _Sat *s15;   /* { dg-error \"\" \"float _Sat\" } */\n+double _Sat *s18;   /* { dg-error \"\" \"double _Sat\" } */\n+signed _Sat *s21;   /* { dg-error \"\" \"signed _Sat\" } */\n+_Bool _Sat *s24;   /* { dg-error \"\" \"_Bool _Sat\" } */\n+int _Sat *s27;   /* { dg-error \"\" \"int _Sat\" } */\n+type _Sat *s30;   /* { dg-error \"\" \"type _Sat\" } */\n+char signed _Sat *s33;  /* { dg-error \"\" \"char signed _Sat\" } */\n+char unsigned _Sat *s36; /* { dg-error \"\" \"char unsigned _Sat\" } */\n+short _Sat *s39;  /* { dg-error \"\" \"short _Sat\" } */\n+short signed _Sat *s42;  /* { dg-error \"\" \"short signed _Sat\" } */\n+short unsigned _Sat *s45;  /* { dg-error \"\" \"short unsigned _Sat\" } */\n+_Sat short*s48;  /* { dg-error \"\" \"_Sat short\" } */\n+_Sat short signed*s51;  /* { dg-error \"\" \"_Sat short signed\" } */\n+_Sat short unsigned*s54;  /* { dg-error \"\" \"_Sat short unsigned\" } */\n+_Sat long*s57;  /* { dg-error \"\" \"_Sat long\" } */\n+_Sat long signed*s60;  /* { dg-error \"\" \"_Sat long signed\" } */\n+_Sat long unsigned*s63;  /* { dg-error \"\" \"_Sat long unsigned\" } */\n+_Sat signed long*s66;  /* { dg-error \"\" \"_Sat signed long\" } */\n+_Sat signed short*s69;  /* { dg-error \"\" \"_Sat signed short\" } */\n+int signed _Sat *s72;  /* { dg-error \"\" \"int signed _Sat\" } */\n+int unsigned _Sat *s75;  /* { dg-error \"\" \"int unsigned _Sat\" } */\n+long int _Sat *s78;  /* { dg-error \"\" \"long int _Sat\" } */\n+long long _Sat *s81;  /* { dg-error \"\" \"long long _Sat\" } */\n+long double _Sat *s84;  /* { dg-error \"\" \"long double _Sat\" } */\n+long signed _Sat *s87;  /* { dg-error \"\" \"long signed _Sat\" } */\n+long unsigned _Sat *s90;  /* { dg-error \"\" \"long unsigned _Sat\" } */\n+double long _Sat *s93;  /* { dg-error \"\" \"double long _Sat\" } */\n+signed char _Sat *s96;   /* { dg-error \"\" \"signed char _Sat\" } */\n+signed short _Sat *s99;   /* { dg-error \"\" \"signed short _Sat\" } */\n+signed int _Sat *s102;  /* { dg-error \"\" \"signed int _Sat\" } */\n+signed long _Sat *s105; /* { dg-error \"\" \"signed long _Sat\" } */\n+unsigned char _Sat *s108; /* { dg-error \"\" \"unsigned char _Sat\" } */\n+unsigned short _Sat *s111; /* { dg-error \"\" \"unsigned short _Sat\" } */\n+unsigned int _Sat *s114; /* { dg-error \"\" \"unsigned int _Sat\" } */\n+unsigned long _Sat *s117; /* { dg-error \"\" \"unsigned long _Sat\" } */\n+short int signed _Sat *s120; /* { dg-error \"\" \"short int signed _Sat\" } */\n+short int unsigned _Sat *s123; /* { dg-error \"\" \"short int unsigned _Sat\" } */\n+short signed int _Sat *s126; /* { dg-error \"\" \"short signed int _Sat\" } */\n+short unsigned int _Sat *s129; /* { dg-error \"\" \"short unsigned int _Sat\" } */\n+int short signed _Sat *s132; /* { dg-error \"\" \"int short signed _Sat\" } */\n+int short unsigned _Sat *s135; /* { dg-error \"\" \"int short unsigned _Sat\" } */\n+int long long _Sat *s138; /* { dg-error \"\" \"int long long _Sat\" } */\n+int long signed _Sat *s141; /* { dg-error \"\" \"int long signed _Sat\" } */\n+int long unsigned _Sat *s144; /* { dg-error \"\" \"int long unsigned _Sat\" } */\n+int signed short _Sat *s147; /* { dg-error \"\" \"int signed short _Sat\" } */\n+int signed long _Sat *s150; /* { dg-error \"\" \"int signed long _Sat\" } */\n+int unsigned short _Sat *s153; /* { dg-error \"\" \"int unsigned short _Sat\" } */\n+int unsigned long _Sat *s156; /* { dg-error \"\" \"int unsigned long _Sat\" } */\n+long int long _Sat *s159; /* { dg-error \"\" \"long int long _Sat\" } */\n+long int signed _Sat *s162; /* { dg-error \"\" \"long int signed _Sat\" } */\n+long int unsigned _Sat *s165; /* { dg-error \"\" \"long int unsigned _Sat\" } */\n+long long int _Sat *s168; /* { dg-error \"\" \"long long int _Sat\" } */\n+long long signed _Sat *s171; /* { dg-error \"\" \"long long signed _Sat\" } */\n+long long unsigned _Sat *s175; /* { dg-error \"\" \"long long unsigned _Sat\" } */\n+long signed int _Sat *s178; /* { dg-error \"\" \"long signed int _Sat\" } */\n+long unsigned int _Sat *s181; /* { dg-error \"\" \"long unsigned int _Sat\" } */\n+long unsigned long _Sat *s184; /* { dg-error \"\" \"long unsigned long _Sat\" } */\n+signed short int _Sat *s187; /* { dg-error \"\" \"signed short int _Sat\" } */\n+signed int short _Sat *s190; /* { dg-error \"\" \"signed int short _Sat\" } */\n+signed int long _Sat *s192; /* { dg-error \"\" \"signed int long _Sat\" } */\n+signed long int _Sat *s195; /* { dg-error \"\" \"signed long int _Sat\" } */\n+signed long long _Sat *s198; /* { dg-error \"\" \"signed long long _Sat\" } */\n+unsigned short int _Sat *s201; /* { dg-error \"\" \"unsigned short int _Sat\" } */\n+unsigned int short _Sat *s204; /* { dg-error \"\" \"unsigned int short _Sat\" } */\n+unsigned int long _Sat *s207; /* { dg-error \"\" \"unsigned int long _Sat\" } */\n+unsigned long int _Sat *s210; /* { dg-error \"\" \"unsigned long int _Sat\" } */\n+unsigned long long _Sat *s213; /* { dg-error \"\" \"unsigned long long _Sat\" } */\n+int long long signed _Sat *s216; /* { dg-error \"\" \"int long long signed _Sat\" } */\n+int long long unsigned _Sat *s219; /* { dg-error \"\" \"int long long unsigned _Sat\" } */\n+int long signed long _Sat *s222; /* { dg-error \"\" \"int long signed long _Sat\" } */\n+int long unsigned long _Sat *s226; /* { dg-error \"\" \"int long unsigned long _Sat\" } */\n+int signed long long _Sat *s229; /* { dg-error \"\" \"int signed long long _Sat\" } */\n+int unsigned long long _Sat *s232; /* { dg-error \"\" \"int unsigned long long _Sat\" } */\n+long int long signed _Sat *s235; /* { dg-error \"\" \"long int long signed _Sat\" } */\n+long int long unsigned _Sat *s238; /* { dg-error \"\" \"long int long unsigned _Sat\" } */\n+long int signed long _Sat *s241; /* { dg-error \"\" \"long int signed long _Sat\" } */\n+long int unsigned long _Sat *s244; /* { dg-error \"\" \"long int unsigned long _Sat\" } */\n+long long int signed _Sat *s247; /* { dg-error \"\" \"long long int signed _Sat\" } */\n+long long int unsigned _Sat *s250; /* { dg-error \"\" \"long long int unsigned _Sat\" } */\n+long long signed int _Sat *s253; /* { dg-error \"\" \"long long signed int _Sat\" } */\n+long long unsigned int _Sat *s256; /* { dg-error \"\" \"long long unsigned int _Sat\" } */\n+long signed int long _Sat *s259; /* { dg-error \"\" \"long signed int long _Sat\" } */\n+long signed long int _Sat *s262; /* { dg-error \"\" \"long signed long int _Sat\" } */\n+long unsigned int long _Sat *s265; /* { dg-error \"\" \"long unsigned int long _Sat\" } */\n+long unsigned long int _Sat *s268; /* { dg-error \"\" \"long unsigned long int _Sat\" } */\n+signed long long int _Sat *s271; /* { dg-error \"\" \"signed long long int _Sat\" } */\n+unsigned int long long _Sat *s274; /* { dg-error \"\" \"unsigned int long long _Sat\" } */\n+unsigned long int long _Sat *s277; /* { dg-error \"\" \"unsigned long int long _Sat\" } */\n+unsigned long long int _Sat *s280; /* { dg-error \"\" \"unsigned long long int _Sat\" } */\n+_Complex _Sat *s283; /* { dg-error \"\" \"_Complex _Sat\" } */\n+_Sat _Complex *s286; /* { dg-error \"\" \"_Sat _Complex\" } */\n+unsigned _Sat *s289; /* { dg-error \"\" \"unsigned _Sat\" } */\n+signed _Sat *s292; /* { dg-error \"\" \"signed _Sat\" } */"}, {"sha": "4e0954902aa194d7ba6325658856f842afb7a999", "filename": "gcc/testsuite/gcc.dg/fixed-point/unary.c", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funary.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,256 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* C99 6.5.3 Unary operators.\n+\n+   Check unary operators ++ -- + - !.  */\n+\n+extern void abort (void);\n+\n+#define INCDEC(TYPE,POSTFIX) \\\n+  { TYPE a = 0.0 ## POSTFIX; \\\n+    if (a++ != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a-- != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (++a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (--a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_INCDEC(TYPE,POSTFIX) \\\n+  { TYPE a = -0.5 ## POSTFIX; \\\n+    if (a++ != -0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (a-- != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != -0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (++a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != 0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (--a != -0.5 ## POSTFIX) \\\n+      abort(); \\\n+    if (a != -0.5 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_INCDEC(TYPE,POSTFIX) \\\n+  { TYPE a = 0.9 ## POSTFIX; \\\n+    if (++a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = -0.1 ## POSTFIX; \\\n+    if (--a != -0.5 ## POSTFIX - 0.5 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_UNS_INCDEC(TYPE,POSTFIX) \\\n+  { TYPE a = 0.9 ## POSTFIX; \\\n+    if (++a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+    a = 0.1 ## POSTFIX; \\\n+    if (--a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define PLUS(TYPE,POSTFIX) \\\n+  { TYPE a = 0.1 ## POSTFIX; \\\n+    if (+a != 0.1 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define NEG(TYPE,POSTFIX) \\\n+  { TYPE a = -0.1 ## POSTFIX; \\\n+    if (-a != 0.1 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_NEG(TYPE,POSTFIX) \\\n+  { TYPE a = -0.5 ## POSTFIX - 0.5 ## POSTFIX; \\\n+    if (-a != 1.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define UNS_NEG(TYPE,POSTFIX) \\\n+  { TYPE a = 0.0 ## POSTFIX; \\\n+    if (-a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define FRACT_SAT_UNS_NEG(TYPE,POSTFIX) \\\n+  { TYPE a = 0.5 ## POSTFIX; \\\n+    if (-a != 0.0 ## POSTFIX) \\\n+      abort(); \\\n+  }\n+\n+#define LOGNEG(TYPE,POSTFIX) \\\n+  { TYPE a = 0.0 ## POSTFIX; \\\n+    TYPE b = 0.1 ## POSTFIX; \\\n+    if (!a != 1) \\\n+      abort(); \\\n+    if (!b != 0) \\\n+      abort(); \\\n+  }\n+\n+int main ()\n+{\n+  FRACT_INCDEC(short _Fract, hr);\n+  FRACT_INCDEC(_Fract, r);\n+  FRACT_INCDEC(long _Fract, lr);\n+  FRACT_INCDEC(long long _Fract, llr);\n+  FRACT_INCDEC(_Sat short _Fract, hr);\n+  FRACT_INCDEC(_Sat _Fract, r);\n+  FRACT_INCDEC(_Sat long _Fract, lr);\n+  FRACT_INCDEC(_Sat long long _Fract, llr);\n+\n+  INCDEC(short _Accum, hk);\n+  INCDEC(_Accum, k);\n+  INCDEC(long _Accum, lk);\n+  INCDEC(long long _Accum, llk);\n+  INCDEC(unsigned short _Accum, uhk);\n+  INCDEC(unsigned _Accum, uk);\n+  INCDEC(unsigned long _Accum, ulk);\n+  INCDEC(unsigned long long _Accum, ullk);\n+  INCDEC(_Sat short _Accum, hk);\n+  INCDEC(_Sat _Accum, k);\n+  INCDEC(_Sat long _Accum, lk);\n+  INCDEC(_Sat long long _Accum, llk);\n+  INCDEC(_Sat unsigned short _Accum, uhk);\n+  INCDEC(_Sat unsigned _Accum, uk);\n+  INCDEC(_Sat unsigned long _Accum, ulk);\n+  INCDEC(_Sat unsigned long long _Accum, ullk);\n+\n+  FRACT_SAT_INCDEC(_Sat short _Fract, hr);\n+  FRACT_SAT_INCDEC(_Sat _Fract, r);\n+  FRACT_SAT_INCDEC(_Sat long _Fract, lr);\n+  FRACT_SAT_INCDEC(_Sat long long _Fract, llr);\n+\n+  FRACT_SAT_UNS_INCDEC(_Sat unsigned short _Fract, uhr);\n+  FRACT_SAT_UNS_INCDEC(_Sat unsigned _Fract, ur);\n+  FRACT_SAT_UNS_INCDEC(_Sat unsigned long _Fract, ulr);\n+  FRACT_SAT_UNS_INCDEC(_Sat unsigned long long _Fract, ullr);\n+\n+  PLUS(short _Fract, hr);\n+  PLUS(_Fract, r);\n+  PLUS(long _Fract, lr);\n+  PLUS(long long _Fract, llr);\n+  PLUS(unsigned short _Fract, uhr);\n+  PLUS(unsigned _Fract, ur);\n+  PLUS(unsigned long _Fract, ulr);\n+  PLUS(unsigned long long _Fract, ullr);\n+  PLUS(_Sat short _Fract, hr);\n+  PLUS(_Sat _Fract, r);\n+  PLUS(_Sat long _Fract, lr);\n+  PLUS(_Sat long long _Fract, llr);\n+  PLUS(_Sat unsigned short _Fract, uhr);\n+  PLUS(_Sat unsigned _Fract, ur);\n+  PLUS(_Sat unsigned long _Fract, ulr);\n+  PLUS(_Sat unsigned long long _Fract, ullr);\n+  PLUS(short _Accum, hk);\n+  PLUS(_Accum, k);\n+  PLUS(long _Accum, lk);\n+  PLUS(long long _Accum, llk);\n+  PLUS(unsigned short _Accum, uhk);\n+  PLUS(unsigned _Accum, uk);\n+  PLUS(unsigned long _Accum, ulk);\n+  PLUS(unsigned long long _Accum, ullk);\n+  PLUS(_Sat short _Accum, hk);\n+  PLUS(_Sat _Accum, k);\n+  PLUS(_Sat long _Accum, lk);\n+  PLUS(_Sat long long _Accum, llk);\n+  PLUS(_Sat unsigned short _Accum, uhk);\n+  PLUS(_Sat unsigned _Accum, uk);\n+  PLUS(_Sat unsigned long _Accum, ulk);\n+  PLUS(_Sat unsigned long long _Accum, ullk);\n+\n+  NEG(short _Fract, hr);\n+  NEG(_Fract, r);\n+  NEG(long _Fract, lr);\n+  NEG(long long _Fract, llr);\n+  NEG(_Sat short _Fract, hr);\n+  NEG(_Sat _Fract, r);\n+  NEG(_Sat long _Fract, lr);\n+  NEG(_Sat long long _Fract, llr);\n+  NEG(short _Accum, hk);\n+  NEG(_Accum, k);\n+  NEG(long _Accum, lk);\n+  NEG(long long _Accum, llk);\n+  NEG(_Sat short _Accum, hk);\n+  NEG(_Sat _Accum, k);\n+  NEG(_Sat long _Accum, lk);\n+  NEG(_Sat long long _Accum, llk);\n+\n+  FRACT_SAT_NEG(_Sat short _Fract, hr);\n+  FRACT_SAT_NEG(_Sat _Fract, r);\n+  FRACT_SAT_NEG(_Sat long _Fract, lr);\n+  FRACT_SAT_NEG(_Sat long long _Fract, llr);\n+\n+  UNS_NEG(short _Fract, hr);\n+  UNS_NEG(_Fract, r);\n+  UNS_NEG(long _Fract, lr);\n+  UNS_NEG(long long _Fract, llr);\n+  UNS_NEG(_Sat short _Fract, hr);\n+  UNS_NEG(_Sat _Fract, r);\n+  UNS_NEG(_Sat long _Fract, lr);\n+  UNS_NEG(_Sat long long _Fract, llr);\n+  UNS_NEG(short _Accum, hk);\n+  UNS_NEG(_Accum, k);\n+  UNS_NEG(long _Accum, lk);\n+  UNS_NEG(long long _Accum, llk);\n+  UNS_NEG(_Sat short _Accum, hk);\n+  UNS_NEG(_Sat _Accum, k);\n+  UNS_NEG(_Sat long _Accum, lk);\n+  UNS_NEG(_Sat long long _Accum, llk);\n+\n+  FRACT_SAT_UNS_NEG(_Sat unsigned short _Fract, uhr);\n+  FRACT_SAT_UNS_NEG(_Sat unsigned _Fract, ur);\n+  FRACT_SAT_UNS_NEG(_Sat unsigned long _Fract, ulr);\n+  FRACT_SAT_UNS_NEG(_Sat unsigned long long _Fract, ullr);\n+\n+  LOGNEG(short _Fract, hr);\n+  LOGNEG(_Fract, r);\n+  LOGNEG(long _Fract, lr);\n+  LOGNEG(long long _Fract, llr);\n+  LOGNEG(unsigned short _Fract, uhr);\n+  LOGNEG(unsigned _Fract, ur);\n+  LOGNEG(unsigned long _Fract, ulr);\n+  LOGNEG(unsigned long long _Fract, ullr);\n+  LOGNEG(_Sat short _Fract, hr);\n+  LOGNEG(_Sat _Fract, r);\n+  LOGNEG(_Sat long _Fract, lr);\n+  LOGNEG(_Sat long long _Fract, llr);\n+  LOGNEG(_Sat unsigned short _Fract, uhr);\n+  LOGNEG(_Sat unsigned _Fract, ur);\n+  LOGNEG(_Sat unsigned long _Fract, ulr);\n+  LOGNEG(_Sat unsigned long long _Fract, ullr);\n+  LOGNEG(short _Accum, hk);\n+  LOGNEG(_Accum, k);\n+  LOGNEG(long _Accum, lk);\n+  LOGNEG(long long _Accum, llk);\n+  LOGNEG(unsigned short _Accum, uhk);\n+  LOGNEG(unsigned _Accum, uk);\n+  LOGNEG(unsigned long _Accum, ulk);\n+  LOGNEG(unsigned long long _Accum, ullk);\n+  LOGNEG(_Sat short _Accum, hk);\n+  LOGNEG(_Sat _Accum, k);\n+  LOGNEG(_Sat long _Accum, lk);\n+  LOGNEG(_Sat long long _Accum, llk);\n+  LOGNEG(_Sat unsigned short _Accum, uhk);\n+  LOGNEG(_Sat unsigned _Accum, uk);\n+  LOGNEG(_Sat unsigned long _Accum, ulk);\n+  LOGNEG(_Sat unsigned long long _Accum, ullk);\n+\n+  return 0;\n+}"}, {"sha": "126cc9e72cf5181710ecd72179cc0e8a557778d4", "filename": "gcc/testsuite/gcc.dg/fixed-point/union-init.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funion-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funion-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Funion-init.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Cast to union is a GNU C extension.\n+   Based on the test from ../dfp/.  */\n+\n+extern void abort (void);\n+\n+union u\n+{\n+  long _Fract lf;\n+  double d;\n+};\n+\n+union n\n+{\n+  double d;\n+  _Fract f;\n+};\n+\n+int main ()\n+{\n+  static union u u1 = { 0.1lr };\n+  static union u u2 = { 0.2lr };\n+  static union u u4 = { 0.0 };\n+\n+  static union n n1 = { 0.3r };\n+  static union n n2 = { 3.25 };\n+\n+  long _Fract lf;\n+  _Fract f;\n+  double d;\n+\n+  if (u1.lf != 0.1lr)\n+    abort ();\n+\n+  if (u2.lf != 0.2lr)\n+    abort ();\n+\n+  /* cast fixed-point to union type.  */\n+  lf = 0.4lr;\n+  f = 0.5r;\n+  d = 3.25;\n+\n+  u4 = (union u) lf;\n+  if (u4.lf != 0.4lr)\n+    abort ();\n+\n+  u4 = (union u) d;\n+  if (u4.d != 3.25)\n+    abort ();\n+\n+  n1 = (union n) f;\n+  if (n1.f != 0.5r)\n+    abort ();\n+\n+  n1 = (union n)d;\n+  if (n1.d != 3.25)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "babbe5989113df9d3ae58b3b6a04643e365549e7", "filename": "gcc/testsuite/gcc.dg/nofixed-point-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-1.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target {! fixed_point} } } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+_Fract w;       /* { dg-error \"not supported\" \"reject fixed-point\" } */\n+_Sat _Fract x;  /* { dg-error \"not supported\" \"reject fixed-point\" } */\n+_Accum y;       /* { dg-error \"not supported\" \"reject fixed-point\" } */\n+_Sat _Accum z;  /* { dg-error \"not supported\" \"reject fixed-point\" } */"}, {"sha": "2565e17329011dc8d352e540a274305fd4d3ea73", "filename": "gcc/testsuite/gcc.target/mips/dpaq_sa_l_w.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpaq_sa_l_w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpaq_sa_l_w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpaq_sa_l_w.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile { target {fixed_point} } } */\n+/* { dg-mips-options \"-O2 -mips32r2 -mdsp\" } */\n+/* { dg-final { scan-assembler-times \"\\tdpaq_sa.l.w\\t\\\\\\$ac\" 3 } } */\n+\n+_Sat long long _Fract\n+f1 (_Sat long _Fract x, _Sat long _Fract y, _Sat long long _Fract z)\n+{\n+  return (_Sat long long _Fract) x * y + z;\n+}\n+\n+_Sat long long _Fract\n+f2 (_Sat long _Fract x, _Sat long _Fract y, _Sat long long _Fract z)\n+{\n+  return z + (_Sat long long _Fract) y * x;\n+}\n+\n+_Sat long long _Fract\n+f3 (_Sat long _Fract x, _Sat long _Fract y, _Sat long long _Fract z)\n+{\n+  _Sat long long _Fract t = (_Sat long long _Fract) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z = t + z; /* Need to put z at the end.  GCC does not swap operands to\n+\t\t  match the ssmadd pattern, because types are saturating.  */\n+  return z;\n+}\n+\n+long long _Fract\n+f4 (long _Fract x, long _Fract y, long long _Fract z)\n+{\n+  return (long long _Fract) x * y + z;\n+}\n+\n+long long _Fract\n+f5 (long _Fract x, long _Fract y, long long _Fract z)\n+{\n+  return z + (long long _Fract) y * x;\n+}\n+\n+long long _Fract\n+f6 (long _Fract x, long _Fract y, long long _Fract z)\n+{\n+  long long _Fract t = (long long _Fract) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z = t + z; /* Need to put z at the end.  GCC does not swap operands to\n+\t\t  match the ssmadd pattern, because types are saturating.  */\n+  return z;\n+}"}, {"sha": "f418a13bf5e62a2561402926dd850a6855d46c45", "filename": "gcc/testsuite/gcc.target/mips/dpsq_sa_l_w.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpsq_sa_l_w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpsq_sa_l_w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdpsq_sa_l_w.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target {fixed_point} } } */\n+/* { dg-mips-options \"-O2 -mips32r2 -mdsp\" } */\n+/* { dg-final { scan-assembler-times \"\\tdpsq_sa.l.w\\t\\\\\\$ac\" 2 } } */\n+\n+_Sat long long _Fract\n+f1 (_Sat long _Fract x, _Sat long _Fract y, _Sat long long _Fract z)\n+{\n+  return z - (_Sat long long _Fract) x * y;\n+}\n+\n+_Sat long long _Fract\n+f2 (_Sat long _Fract x, _Sat long _Fract y, _Sat long long _Fract z)\n+{\n+  _Sat long long _Fract t = (_Sat long long _Fract) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z -= t;\n+  return z;\n+}\n+\n+long long _Fract\n+f3 (long _Fract x, long _Fract y, long long _Fract z)\n+{\n+  return z - (long long _Fract) x * y;\n+}\n+\n+long long _Fract\n+f4 (long _Fract x, long _Fract y, long long _Fract z)\n+{\n+  long long _Fract t = (long long _Fract) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z -= t;\n+  return z;\n+}"}, {"sha": "4455d3d693cc2a6796f79c7e93e0498b6b3ff5d1", "filename": "gcc/testsuite/gcc.target/mips/fixed-scalar-type.c", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-scalar-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-scalar-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-scalar-type.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,215 @@\n+/* Test scalar fixed-point instructions */\n+/* { dg-do compile { target {fixed_point} } } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\taddu\\t\" 10 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu\\t\" 10 } } */\n+/* { dg-final { scan-assembler \"\\taddu_s.qb\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\taddu_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\taddq_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\taddq_s.w\\t\" 2 } } */\n+/* { dg-final { scan-assembler \"\\tsubu_s.qb\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubq_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubq_s.w\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tmulq_rs.ph\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tmulq_rs.w\\t\" 1 } } */\n+\n+short _Fract non_sat_test1 (short _Fract a, short _Fract b)\n+{\n+  return a + b;\n+}\n+\n+_Fract non_sat_test2 (_Fract a, _Fract b)\n+{\n+  return a + b;\n+}\n+\n+long _Fract non_sat_test3 (long _Fract a, long _Fract b)\n+{\n+  return a + b;\n+}\n+\n+unsigned short _Fract non_sat_test4 (unsigned short _Fract a,\n+\t\t\t\t     unsigned short _Fract b)\n+{\n+  return a + b;\n+}\n+\n+unsigned _Fract non_sat_test5 (unsigned _Fract a, unsigned _Fract b)\n+{\n+  return a + b;\n+}\n+\n+unsigned long _Fract non_sat_test6 (unsigned long _Fract a,\n+\t\t\t\t    unsigned long _Fract b)\n+{\n+  return a + b;\n+}\n+\n+short _Accum non_sat_test7 (short _Accum a, short _Accum b)\n+{\n+  return a + b;\n+}\n+\n+_Accum non_sat_test8 (_Accum a, _Accum b)\n+{\n+  return a + b;\n+}\n+\n+unsigned short _Accum non_sat_test9 (unsigned short _Accum a,\n+\t\t\t\t     unsigned short _Accum b)\n+{\n+  return a + b;\n+}\n+\n+unsigned _Accum non_sat_test10 (unsigned _Accum a, unsigned _Accum b)\n+{\n+  return a + b;\n+}\n+\n+short _Fract non_sat_test11 (short _Fract a, short _Fract b)\n+{\n+  return a - b;\n+}\n+\n+_Fract non_sat_test12 (_Fract a, _Fract b)\n+{\n+  return a - b;\n+}\n+\n+long _Fract non_sat_test13 (long _Fract a, long _Fract b)\n+{\n+  return a - b;\n+}\n+\n+unsigned short _Fract non_sat_test14 (unsigned short _Fract a,\n+\t\t\t\t     unsigned short _Fract b)\n+{\n+  return a - b;\n+}\n+\n+unsigned _Fract non_sat_test15 (unsigned _Fract a, unsigned _Fract b)\n+{\n+  return a - b;\n+}\n+\n+unsigned long _Fract non_sat_test16 (unsigned long _Fract a,\n+\t\t\t\t    unsigned long _Fract b)\n+{\n+  return a - b;\n+}\n+\n+short _Accum non_sat_test17 (short _Accum a, short _Accum b)\n+{\n+  return a - b;\n+}\n+\n+_Accum non_sat_test18 (_Accum a, _Accum b)\n+{\n+  return a - b;\n+}\n+\n+unsigned short _Accum non_sat_test19 (unsigned short _Accum a,\n+\t\t\t\t     unsigned short _Accum b)\n+{\n+  return a - b;\n+}\n+\n+unsigned _Accum non_sat_test20 (unsigned _Accum a, unsigned _Accum b)\n+{\n+  return a - b;\n+}\n+\n+_Sat unsigned short _Fract test1 (_Sat unsigned short _Fract a,\n+\t\t\t\t  _Sat unsigned short _Fract b)\n+{\n+  return a + b;\n+}\n+\n+_Sat unsigned _Fract test2 (_Sat unsigned  _Fract a, _Sat unsigned _Fract b)\n+{\n+  return a + b;\n+}\n+\n+_Sat unsigned short _Accum test3 (_Sat unsigned short _Accum a,\n+\t\t\t\t  _Sat unsigned short _Accum b)\n+{\n+  return a + b;\n+}\n+\n+_Sat _Fract test4 (_Sat _Fract a, _Sat _Fract b)\n+{\n+  return a + b;\n+}\n+\n+_Sat long _Fract test5 (_Sat long _Fract a, _Sat long _Fract b)\n+{\n+  return a + b;\n+}\n+\n+_Sat short _Accum test6 (_Sat short _Accum a, _Sat short _Accum b)\n+{\n+  return a + b;\n+}\n+\n+_Sat _Accum test7 (_Sat _Accum a, _Sat _Accum b)\n+{\n+  return a + b;\n+}\n+\n+_Sat unsigned short _Fract test8 (_Sat unsigned short _Fract a,\n+\t\t\t\t  _Sat unsigned short _Fract b)\n+{\n+  return a - b;\n+}\n+\n+_Sat unsigned _Fract test9 (_Sat unsigned  _Fract a, _Sat unsigned _Fract b)\n+{\n+  return a - b;\n+}\n+\n+_Sat unsigned short _Accum test10 (_Sat unsigned short _Accum a,\n+\t\t\t\t  _Sat unsigned short _Accum b)\n+{\n+  return a - b;\n+}\n+\n+_Sat _Fract test11 (_Sat _Fract a, _Sat _Fract b)\n+{\n+  return a - b;\n+}\n+\n+_Sat long _Fract test12 (_Sat long _Fract a, _Sat long _Fract b)\n+{\n+  return a - b;\n+}\n+\n+_Sat short _Accum test13 (_Sat short _Accum a, _Sat short _Accum b)\n+{\n+  return a - b;\n+}\n+\n+_Sat _Accum test14 (_Sat _Accum a, _Sat _Accum b)\n+{\n+  return a - b;\n+}\n+\n+_Sat _Fract test15 (_Sat _Fract a, _Sat _Fract b)\n+{\n+  return a * b;\n+}\n+\n+_Sat long _Fract test16 (_Sat long _Fract a, _Sat long _Fract b)\n+{\n+  return a * b;\n+}\n+\n+_Fract test17 (_Fract a, _Fract b)\n+{\n+  return a * b;\n+}\n+\n+long _Fract test18 (long _Fract a, long _Fract b)\n+{\n+  return a * b;\n+}"}, {"sha": "30dba5b6460e15986cff3e9a561c177852fc56eb", "filename": "gcc/testsuite/gcc.target/mips/fixed-vector-type.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-vector-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-vector-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffixed-vector-type.c?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -0,0 +1,132 @@\n+/* Test vector fixed-point instructions */\n+/* { dg-do compile { target {fixed_point} } } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\taddq_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubq_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\taddu_s.qb\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\taddu_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu_s.qb\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu_s.ph\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tmulq_rs.ph\\t\" 1 } } */\n+\n+typedef _Sat unsigned short _Fract sat_v4uqq __attribute__ ((vector_size(4)));\n+typedef _Sat unsigned _Fract sat_v2uhq __attribute__ ((vector_size(4)));\n+typedef _Sat unsigned short _Accum sat_v2uha __attribute__ ((vector_size(4)));\n+typedef _Sat _Fract sat_v2hq __attribute__ ((vector_size(4)));\n+typedef _Sat short _Accum sat_v2ha __attribute__ ((vector_size(4)));\n+\n+typedef unsigned short _Fract v4uqq __attribute__ ((vector_size(4)));\n+typedef unsigned _Fract v2uhq __attribute__ ((vector_size(4)));\n+typedef unsigned short _Accum v2uha __attribute__ ((vector_size(4)));\n+typedef _Fract v2hq __attribute__ ((vector_size(4)));\n+typedef short _Accum v2ha __attribute__ ((vector_size(4)));\n+\n+sat_v2hq test1 (sat_v2hq a, sat_v2hq b)\n+{\n+  return a + b;\n+}\n+\n+sat_v2ha test2 (sat_v2ha a, sat_v2ha b)\n+{\n+  return a + b;\n+}\n+\n+sat_v2hq test3 (sat_v2hq a, sat_v2hq b)\n+{\n+  return a - b;\n+}\n+\n+sat_v2ha test4 (sat_v2ha a, sat_v2ha b)\n+{\n+  return a - b;\n+}\n+\n+sat_v4uqq test5 (sat_v4uqq a, sat_v4uqq b)\n+{\n+  return a + b;\n+}\n+\n+sat_v2uhq test6 (sat_v2uhq a, sat_v2uhq b)\n+{\n+  return a + b;\n+}\n+\n+sat_v2uha test7 (sat_v2uha a, sat_v2uha b)\n+{\n+  return a + b;\n+}\n+\n+sat_v4uqq test8 (sat_v4uqq a, sat_v4uqq b)\n+{\n+  return a - b;\n+}\n+\n+sat_v2uhq test9 (sat_v2uhq a, sat_v2uhq b)\n+{\n+  return a - b;\n+}\n+\n+sat_v2uha test10 (sat_v2uha a, sat_v2uha b)\n+{\n+  return a - b;\n+}\n+\n+sat_v2hq test11 (sat_v2hq a, sat_v2hq b)\n+{\n+  return a * b;\n+}\n+\n+v2hq test12 (v2hq a, v2hq b)\n+{\n+  return a + b;\n+}\n+\n+v2hq test13 (v2hq a, v2hq b)\n+{\n+  return a - b;\n+}\n+\n+v2hq test14 (v2hq a, v2hq b)\n+{\n+  return a * b;\n+}\n+\n+v2ha test15 (v2ha a, v2ha b)\n+{\n+  return a + b;\n+}\n+\n+v2ha test16 (v2ha a, v2ha b)\n+{\n+  return a - b;\n+}\n+\n+v4uqq test17 (v4uqq a, v4uqq b)\n+{\n+  return a + b;\n+}\n+\n+v4uqq test18 (v4uqq a, v4uqq b)\n+{\n+  return a - b;\n+}\n+\n+v2uhq test19 (v2uhq a, v2uhq b)\n+{\n+  return a + b;\n+}\n+\n+v2uhq test20 (v2uhq a, v2uhq b)\n+{\n+  return a - b;\n+}\n+\n+v2uha test21 (v2uha a, v2uha b)\n+{\n+  return a + b;\n+}\n+\n+v2uha test22 (v2uha a, v2uha b)\n+{\n+  return a - b;\n+}"}, {"sha": "2aa8bcc1465010707942ac36d449d525d822247e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca8ed94a2c35b23fb2e98f99a41f294086d9501/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fca8ed94a2c35b23fb2e98f99a41f294086d9501", "patch": "@@ -1271,6 +1271,14 @@ proc check_effective_target_large_long_double { } {\n     }]\n }\n \n+# Return 1 if the target supports compiling fixed-point,\n+# 0 otherwise.\n+\n+proc check_effective_target_fixed_point { } {\n+    return [check_no_compiler_messages fixed_point object {\n+        _Sat _Fract x; _Sat _Accum y;\n+    }]\n+}\n \n # Return 1 if the target supports compiling decimal floating point,\n # 0 otherwise."}]}