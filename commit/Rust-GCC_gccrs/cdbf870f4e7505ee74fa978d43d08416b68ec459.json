{"sha": "cdbf870f4e7505ee74fa978d43d08416b68ec459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RiZjg3MGY0ZTc1MDVlZTc0ZmE5NzhkNDNkMDg0MTZiNjhlYzQ1OQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2012-12-17T16:39:19Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-12-17T16:39:19Z"}, "message": "arm.md (zero_extend<mode>di2): Add extra alternatives for NEON registers.\n\n2012-12-17  Andrew Stubbs  <ams@codesourcery.com>\n\t    Ulrich Weigand  <ulrich.weigand@linaro.org>\n\n\tgcc/\n\t* config/arm/arm.md (zero_extend<mode>di2): Add extra alternatives\n\tfor NEON registers.\n\tAdd alternative for one-instruction extend-in-place.\n\t(extend<mode>di2): Likewise.\n\tAdd constraints for Thumb-mode memory loads.\n\tPrevent extend splitters doing NEON alternatives.\n\t* config/arm/iterators.md (qhs_extenddi_cstr, qhs_zextenddi_cstr):\n\tAdjust constraints to add new alternatives.\n\t* config/arm/neon.md: Add splitters for zero- and sign-extend.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon-extend-1.c: New file.\n\t* gcc.target/arm/neon-extend-2.c: New file.\n\nCo-Authored-By: Ulrich Weigand <ulrich.weigand@linaro.org>\n\nFrom-SVN: r194558", "tree": {"sha": "39d8d4f5cab7cfe22cf74f6a34e24eb1e4551bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d8d4f5cab7cfe22cf74f6a34e24eb1e4551bc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdbf870f4e7505ee74fa978d43d08416b68ec459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbf870f4e7505ee74fa978d43d08416b68ec459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdbf870f4e7505ee74fa978d43d08416b68ec459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbf870f4e7505ee74fa978d43d08416b68ec459/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55ebe5ab1411369f3043dd817fccddd9606eb6c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ebe5ab1411369f3043dd817fccddd9606eb6c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ebe5ab1411369f3043dd817fccddd9606eb6c7"}], "stats": {"total": 130, "additions": 121, "deletions": 9}, "files": [{"sha": "fb99af08af158ce60e4c97cec25c6ff80861e31d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -1,3 +1,16 @@\n+2012-12-17  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* config/arm/arm.md (zero_extend<mode>di2): Add extra alternatives\n+\tfor NEON registers.\n+\tAdd alternative for one-instruction extend-in-place.\n+\t(extend<mode>di2): Likewise.\n+\tAdd constraints for Thumb-mode memory loads.\n+\tPrevent extend splitters doing NEON alternatives.\n+\t* config/arm/iterators.md (qhs_extenddi_cstr, qhs_zextenddi_cstr):\n+\tAdjust constraints to add new alternatives.\n+\t* config/arm/neon.md: Add splitters for zero- and sign-extend.\n+\n 2012-12-17  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n         * config/arm/arm.md (type): Add \"simple_alu_shift\" to attribute \"type\"."}, {"sha": "9add9e56becd1cf8057f10a8ce48322b07115716", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -4488,33 +4488,36 @@\n ;; Zero and sign extension instructions.\n \n (define_insn \"zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r\")\n         (zero_extend:DI (match_operand:QHSI 1 \"<qhs_zextenddi_op>\"\n \t\t\t\t\t    \"<qhs_zextenddi_cstr>\")))]\n   \"TARGET_32BIT <qhs_zextenddi_cond>\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")\n+  [(set_attr \"length\" \"8,4,8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r,?r\")\n         (sign_extend:DI (match_operand:QHSI 1 \"<qhs_extenddi_op>\"\n \t\t\t\t\t    \"<qhs_extenddi_cstr>\")))]\n   \"TARGET_32BIT <qhs_sextenddi_cond>\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")\n+  [(set_attr \"length\" \"8,4,8,8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"*,*,a,t\")]\n )\n \n ;; Splits for all extensions to DImode\n (define_split\n   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n         (zero_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && (!TARGET_NEON\n+\t\t    || (reload_completed\n+\t\t\t&& !(IS_VFP_REGNUM (REGNO (operands[0])))))\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n   rtx lo_part = gen_lowpart (SImode, operands[0]);\n@@ -4540,7 +4543,9 @@\n (define_split\n   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n         (sign_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && (!TARGET_NEON\n+\t\t    || (reload_completed\n+\t\t\t&& !(IS_VFP_REGNUM (REGNO (operands[0])))))\"\n   [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (const_int 31)))]\n {\n   rtx lo_part = gen_lowpart (SImode, operands[0]);"}, {"sha": "3a20f5fea8368598809cb47e3e11af6c50085361", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -429,8 +429,8 @@\n (define_mode_attr qhs_extenddi_op [(SI \"s_register_operand\")\n \t\t\t\t   (HI \"nonimmediate_operand\")\n \t\t\t\t   (QI \"arm_reg_or_extendqisi_mem_op\")])\n-(define_mode_attr qhs_extenddi_cstr [(SI \"r\") (HI \"rm\") (QI \"rUq\")])\n-(define_mode_attr qhs_zextenddi_cstr [(SI \"r\") (HI \"rm\") (QI \"rm\")])\n+(define_mode_attr qhs_extenddi_cstr [(SI \"r,0,r,r\") (HI \"r,0,rm,rm\") (QI \"r,0,rUq,rm\")])\n+(define_mode_attr qhs_zextenddi_cstr [(SI \"r,0,r\") (HI \"r,0,rm\") (QI \"r,0,rm\")])\n \n ;; Mode attributes used for fixed-point support.\n (define_mode_attr qaddsub_suf [(V4UQQ \"8\") (V2UHQ \"16\") (UQQ \"8\") (UHQ \"16\")"}, {"sha": "c3f14bb8edf42c9ac3a43dbc56a92e13fb1be4fc", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -5932,3 +5932,65 @@\n                                    (const_string \"neon_fp_vadd_qqq_vabs_qq\"))\n                      (const_string \"neon_int_5\")))]\n )\n+\n+;; Copy from core-to-neon regs, then extend, not vice-versa\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V2SI (match_dup 1)))\n+   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 32)))]\n+  {\n+    operands[2] = gen_rtx_REG (V2SImode, REGNO (operands[0]));\n+  })\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:HI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V4HI (match_dup 1)))\n+   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 48)))]\n+  {\n+    operands[2] = gen_rtx_REG (V4HImode, REGNO (operands[0]));\n+  })\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:QI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V8QI (match_dup 1)))\n+   (set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))]\n+  {\n+    operands[2] = gen_rtx_REG (V8QImode, REGNO (operands[0]));\n+  })\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V2SI (match_dup 1)))\n+   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 32)))]\n+  {\n+    operands[2] = gen_rtx_REG (V2SImode, REGNO (operands[0]));\n+  })\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:HI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V4HI (match_dup 1)))\n+   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 48)))]\n+  {\n+    operands[2] = gen_rtx_REG (V4HImode, REGNO (operands[0]));\n+  })\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:QI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_NEON && reload_completed && IS_VFP_REGNUM (REGNO (operands[0]))\"\n+  [(set (match_dup 2) (vec_duplicate:V8QI (match_dup 1)))\n+   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 56)))]\n+  {\n+    operands[2] = gen_rtx_REG (V8QImode, REGNO (operands[0]));\n+  })"}, {"sha": "0d8b3e7de2485d416a89b2b5b9354b12a9f64b67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -1,3 +1,9 @@\n+2012-12-17  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* gcc.target/arm/neon-extend-1.c: New file.\n+\t* gcc.target/arm/neon-extend-2.c: New file.\n+\n 2012-12-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* lib/target-supports.exp (add_options_for_arm_v8_neon):"}, {"sha": "cfe83ce1bde260cdd99ae47963dde6676627cca3", "filename": "gcc/testsuite/gcc.target/arm/neon-extend-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-1.c?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+void\n+f (unsigned int a)\n+{\n+  unsigned long long b = a;\n+  asm volatile (\"@ extended to %0\" : : \"w\" (b));\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.32\" } } */\n+/* { dg-final { scan-assembler \"vshr.u64\" } } */"}, {"sha": "1c5a17e427859146f53828ec4a02b439ab0580ff", "filename": "gcc/testsuite/gcc.target/arm/neon-extend-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf870f4e7505ee74fa978d43d08416b68ec459/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-extend-2.c?ref=cdbf870f4e7505ee74fa978d43d08416b68ec459", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+void\n+f (int a)\n+{\n+  long long b = a;\n+  asm volatile (\"@ extended to %0\" : : \"w\" (b));\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.32\" } } */\n+/* { dg-final { scan-assembler \"vshr.s64\" } } */"}]}