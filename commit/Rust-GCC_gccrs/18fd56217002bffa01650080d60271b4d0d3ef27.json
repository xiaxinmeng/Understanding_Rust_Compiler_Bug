{"sha": "18fd56217002bffa01650080d60271b4d0d3ef27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmZDU2MjE3MDAyYmZmYTAxNjUwMDgwZDYwMjcxYjRkMGQzZWYyNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-08-11T05:00:51Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-11T05:00:51Z"}, "message": "alpha.c (common_object_handler): New function.\n\n\n\t* config/alpha/alpha.c (common_object_handler): New function.\n\t(vms_attribute_table): Declare a single attribute \"common_object\".\n\t(vms_output_aligned_decl_common): New global function.\n\t(SECTION_VMS_OVERLAY): Delete.\n\t(SECTION_VMS_GLOBAL): Likewise.\n\t(SECTION_VMS_INITIALIZE): Likewise.\n\t(vms_asm_named_section): Remove support for above flags.\n\t(vms_section_type_flags): Delete.\n\t(TARGET_SECTION_TYPE_FLAGS): Likewise.\n\t* config/alpha/alpha-protos.h (vms_output_aligned_decl_common): New.\n\t* config/alpha/vms.h (ASM_OUTPUT_ALIGNED_COMMON): Delete.\n\t(ASM_OUTPUT_ALIGNED_DECL_COMMON): New macro.\n\n\nCo-Authored-By: Douglas B Rupp <rupp@gnat.com>\n\nFrom-SVN: r150645", "tree": {"sha": "b77d96baf000236b01d23fd7081e2435379fccda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77d96baf000236b01d23fd7081e2435379fccda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fd56217002bffa01650080d60271b4d0d3ef27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd56217002bffa01650080d60271b4d0d3ef27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fd56217002bffa01650080d60271b4d0d3ef27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd56217002bffa01650080d60271b4d0d3ef27/comments", "author": null, "committer": null, "parents": [{"sha": "41ca42469f7e41bf8f4ae180c99e52695f6d4c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ca42469f7e41bf8f4ae180c99e52695f6d4c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ca42469f7e41bf8f4ae180c99e52695f6d4c77"}], "stats": {"total": 106, "additions": 61, "deletions": 45}, "files": [{"sha": "17d7f63816ba6fec91d455427904e7ea581bbdc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18fd56217002bffa01650080d60271b4d0d3ef27", "patch": "@@ -1,3 +1,19 @@\n+2009-08-10  Eric Botcazou  <botcazou@adacore.com>\n+            Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (common_object_handler): New function.\n+\t(vms_attribute_table): Declare a single attribute \"common_object\".\n+\t(vms_output_aligned_decl_common): New global function.\n+\t(SECTION_VMS_OVERLAY): Delete.\n+\t(SECTION_VMS_GLOBAL): Likewise.\n+\t(SECTION_VMS_INITIALIZE): Likewise.\n+\t(vms_asm_named_section): Remove support for above flags.\n+\t(vms_section_type_flags): Delete.\n+\t(TARGET_SECTION_TYPE_FLAGS): Likewise.\n+\t* config/alpha/alpha-protos.h (vms_output_aligned_decl_common): New.\n+\t* config/alpha/vms.h (ASM_OUTPUT_ALIGNED_COMMON): Delete.\n+\t(ASM_OUTPUT_ALIGNED_DECL_COMMON): New macro.\n+\n 2009-08-10  SUGIOKA Toshinobu  <sugioka@itonet.co.jp>\n \n \tPR target/41015"}, {"sha": "39091b7fd312bb75700e51754c011e0861491c77", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=18fd56217002bffa01650080d60271b4d0d3ef27", "patch": "@@ -113,6 +113,10 @@ extern rtx alpha_use_linkage (rtx, tree, int, int);\n extern enum avms_arg_type alpha_arg_type (enum machine_mode);\n extern rtx alpha_arg_info_reg_val (CUMULATIVE_ARGS);\n extern void avms_asm_output_external (FILE *, tree, const char *);\n+extern void vms_output_aligned_decl_common (FILE *, tree, const char *,\n+\t\t\t\t\t    unsigned HOST_WIDE_INT,\n+\t\t\t\t\t    unsigned int);\n+\n #endif\n \n extern rtx unicosmk_add_call_info_word (rtx);"}, {"sha": "84c2b7ce42003b885d367fc4b4fd6903b769699d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=18fd56217002bffa01650080d60271b4d0d3ef27", "patch": "@@ -7461,16 +7461,50 @@ alpha_using_fp (void)\n }\n \n #if TARGET_ABI_OPEN_VMS\n+#define COMMON_OBJECT \"common_object\"\n+\n+static tree\n+common_object_handler (tree *node, tree name ATTRIBUTE_UNUSED,\n+\t\t       tree args ATTRIBUTE_UNUSED, int flags ATTRIBUTE_UNUSED,\n+\t\t       bool *no_add_attrs ATTRIBUTE_UNUSED)\n+{\n+  tree decl = *node;\n+  gcc_assert (DECL_P (decl));\n+\n+  DECL_COMMON (decl) = 1;\n+  return NULL_TREE;\n+}\n \n static const struct attribute_spec vms_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"overlaid\",   0, 0, true,  false, false, NULL },\n-  { \"global\",     0, 0, true,  false, false, NULL },\n-  { \"initialize\", 0, 0, true,  false, false, NULL },\n-  { NULL,         0, 0, false, false, false, NULL }\n+  { COMMON_OBJECT,   0, 1, true,  false, false, common_object_handler },\n+  { NULL,            0, 0, false, false, false, NULL }\n };\n \n+void\n+vms_output_aligned_decl_common(FILE *file, tree decl, const char *name,\n+\t\t\t       unsigned HOST_WIDE_INT size,\n+\t\t\t       unsigned int align)\n+{\n+  tree attr = DECL_ATTRIBUTES (decl);\n+  fprintf (file, \"%s\", COMMON_ASM_OP);\n+  assemble_name (file, name);\n+  fprintf (file, \",\" HOST_WIDE_INT_PRINT_UNSIGNED, size);\n+  /* ??? Unlike on OSF/1, the alignment factor is not in log units.  */\n+  fprintf (file, \",%u\", align / BITS_PER_UNIT);\n+  if (attr)\n+    {\n+      attr = lookup_attribute (COMMON_OBJECT, attr);\n+      if (attr)\n+        fprintf (file, \",%s\",\n+\t\t IDENTIFIER_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+    }\n+  fputc ('\\n', file);\n+}\n+\n+#undef COMMON_OBJECT\n+\n #endif\n \n static int\n@@ -9971,31 +10005,6 @@ alpha_write_linkage (FILE *stream, const char *funname, tree fundecl)\n     }\n }\n \n-/* Given a decl, a section name, and whether the decl initializer\n-   has relocs, choose attributes for the section.  */\n-\n-#define SECTION_VMS_OVERLAY\tSECTION_FORGET\n-#define SECTION_VMS_GLOBAL SECTION_MACH_DEP\n-#define SECTION_VMS_INITIALIZE (SECTION_VMS_GLOBAL << 1)\n-\n-static unsigned int\n-vms_section_type_flags (tree decl, const char *name, int reloc)\n-{\n-  unsigned int flags = default_section_type_flags (decl, name, reloc);\n-\n-  if (decl && DECL_ATTRIBUTES (decl)\n-      && lookup_attribute (\"overlaid\", DECL_ATTRIBUTES (decl)))\n-    flags |= SECTION_VMS_OVERLAY;\n-  if (decl && DECL_ATTRIBUTES (decl)\n-      && lookup_attribute (\"global\", DECL_ATTRIBUTES (decl)))\n-    flags |= SECTION_VMS_GLOBAL;\n-  if (decl && DECL_ATTRIBUTES (decl)\n-      && lookup_attribute (\"initialize\", DECL_ATTRIBUTES (decl)))\n-    flags |= SECTION_VMS_INITIALIZE;\n-\n-  return flags;\n-}\n-\n /* Switch to an arbitrary section NAME with attributes as specified\n    by FLAGS.  ALIGN specifies any known alignment requirements for\n    the section; 0 if the default should be used.  */\n@@ -10007,12 +10016,6 @@ vms_asm_named_section (const char *name, unsigned int flags,\n   fputc ('\\n', asm_out_file);\n   fprintf (asm_out_file, \".section\\t%s\", name);\n \n-  if (flags & SECTION_VMS_OVERLAY)\n-    fprintf (asm_out_file, \",OVR\");\n-  if (flags & SECTION_VMS_GLOBAL)\n-    fprintf (asm_out_file, \",GBL\");\n-  if (flags & SECTION_VMS_INITIALIZE)\n-    fprintf (asm_out_file, \",NOMOD\");\n   if (flags & SECTION_DEBUG)\n     fprintf (asm_out_file, \",NOWRT\");\n \n@@ -10876,8 +10879,6 @@ alpha_init_libfuncs (void)\n #if TARGET_ABI_OPEN_VMS\n # undef TARGET_ATTRIBUTE_TABLE\n # define TARGET_ATTRIBUTE_TABLE vms_attribute_table\n-# undef TARGET_SECTION_TYPE_FLAGS\n-# define TARGET_SECTION_TYPE_FLAGS vms_section_type_flags\n #endif\n \n #undef TARGET_IN_SMALL_DATA_P"}, {"sha": "fa7e3c2f9766b5bd52493e7f1e5b7219415e1e51", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fd56217002bffa01650080d60271b4d0d3ef27/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=18fd56217002bffa01650080d60271b4d0d3ef27", "patch": "@@ -242,14 +242,9 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n \n #define COMMON_ASM_OP \"\\t.comm\\t\"\n \n-#undef ASM_OUTPUT_ALIGNED_COMMON\n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n-} while (0)\n-\n+#undef ASM_OUTPUT_ALIGNED_DECL_COMMON\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  vms_output_aligned_decl_common (FILE, DECL, NAME, SIZE, ALIGN)\n \f\n #undef TRAMPOLINE_TEMPLATE\n "}]}