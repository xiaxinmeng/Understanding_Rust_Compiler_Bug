{"sha": "f958d1717745ad66a19c346c0e4b0bba1c813e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1OGQxNzE3NzQ1YWQ2NmExOWMzNDZjMGU0YjBiYmExYzgxM2U3Yg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-17T14:42:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-17T14:42:02Z"}, "message": "Merge #378\n\n378: Add Check for unconstrained type parameters r=philberty a=philberty\n\nWhen we have an impl<X,Y> Foo<X>, the type parameter Y is unconstrained\r\nso that we cannot be sure how Y should be substituted later on.\r\n\r\nFixes #354\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "c0744f0944f6236bc4e9082bf7d9602ae361d3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0744f0944f6236bc4e9082bf7d9602ae361d3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f958d1717745ad66a19c346c0e4b0bba1c813e7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgevO6CRBK7hj4Ov3rIwAA+JIIAIdzv6O0HtFx+iPOub8TYG3A\nDg2F8T4Pe1l8aHh9nmtuunTamQH4izTg71LdK3uOSHvKnwDP6q1sjL8fFuBtpqru\n4Shzu+egts8F2JOuBhDVeEcdlYQdJLEt5dAZ8dKIZV4tgcJbm2Ld25Xhc+U3rgAe\np/gKHi4Po+P1xYFqgevNWWtNCePDuaF1aNEuocKXrxo6PKTquYkrlqeFD8CwRGjX\nDeXEI0PdS0BemOUgbPhleX4Qs6wMK7cNV2e21PTapYwkEEhRnIK74tCbdf10y9hA\n1z3U6gLQaeFS85QzeCJDNAaagEZSyJBLANRtQWt8dhM2pjO3NSNWDAesE3fK8UQ=\n=hwgV\n-----END PGP SIGNATURE-----\n", "payload": "tree c0744f0944f6236bc4e9082bf7d9602ae361d3da\nparent 3ee4bf774c517b25baaec0863550ab6c52f4b120\nparent 9c53eb530a69e92f0ecacce2ff5ae907e16acfc3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618670522 +0000\ncommitter GitHub <noreply@github.com> 1618670522 +0000\n\nMerge #378\n\n378: Add Check for unconstrained type parameters r=philberty a=philberty\n\nWhen we have an impl<X,Y> Foo<X>, the type parameter Y is unconstrained\r\nso that we cannot be sure how Y should be substituted later on.\r\n\r\nFixes #354\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f958d1717745ad66a19c346c0e4b0bba1c813e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f958d1717745ad66a19c346c0e4b0bba1c813e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f958d1717745ad66a19c346c0e4b0bba1c813e7b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee4bf774c517b25baaec0863550ab6c52f4b120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee4bf774c517b25baaec0863550ab6c52f4b120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee4bf774c517b25baaec0863550ab6c52f4b120"}, {"sha": "9c53eb530a69e92f0ecacce2ff5ae907e16acfc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c53eb530a69e92f0ecacce2ff5ae907e16acfc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c53eb530a69e92f0ecacce2ff5ae907e16acfc3"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "356faa6497283754784ddbb54d7957620decbb23", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=f958d1717745ad66a19c346c0e4b0bba1c813e7b", "patch": "@@ -211,7 +211,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t  }\n       }\n \n-    auto self = TypeCheckType::Resolve (impl_block.get_type ().get ());\n+    auto self\n+      = TypeCheckType::Resolve (impl_block.get_type ().get (), &substitutions);\n     if (self == nullptr || self->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (impl_block.get_locus (), \"failed to resolve impl type\");"}, {"sha": "65569479bea58e308bffedec61631231dc87c4f4", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=f958d1717745ad66a19c346c0e4b0bba1c813e7b", "patch": "@@ -95,9 +95,11 @@ class TypeCheckType : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static TyTy::BaseType *Resolve (HIR::Type *type)\n+  static TyTy::BaseType *\n+  Resolve (HIR::Type *type,\n+\t   std::vector<TyTy::SubstitutionParamMapping> *mappings = nullptr)\n   {\n-    TypeCheckType resolver;\n+    TypeCheckType resolver (mappings);\n     type->accept_vis (resolver);\n \n     if (resolver.translated == nullptr)\n@@ -186,6 +188,11 @@ class TypeCheckType : public TypeCheckBase\n \t\t    translated\n \t\t      = SubstMapper::Resolve (translated, path.get_locus (),\n \t\t\t\t\t      &args);\n+\t\t    if (translated->get_kind () != TyTy::TypeKind::ERROR\n+\t\t\t&& mappings != nullptr)\n+\t\t      {\n+\t\t\tcheck_for_unconstrained (args.get_type_args ());\n+\t\t      }\n \t\t  }\n \t\telse\n \t\t  {\n@@ -241,8 +248,39 @@ class TypeCheckType : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckType () : TypeCheckBase (), translated (nullptr) {}\n+  TypeCheckType (std::vector<TyTy::SubstitutionParamMapping> *mappings)\n+    : TypeCheckBase (), mappings (mappings), translated (nullptr)\n+  {}\n+\n+  void\n+  check_for_unconstrained (std::vector<std::unique_ptr<HIR::Type> > &type_args)\n+  {\n+    std::map<std::string, Location> param_location_map;\n+    std::set<std::string> param_tys;\n+    for (auto &mapping : *mappings)\n+      {\n+\tstd::string sym = mapping.get_param_ty ()->get_symbol ();\n+\tparam_tys.insert (sym);\n+\tparam_location_map[sym]\n+\t  = mapping.get_generic_param ()->get_locus_slow ();\n+      }\n+\n+    std::set<std::string> args;\n+    for (auto &arg : type_args)\n+      args.insert (arg->as_string ());\n+\n+    for (auto &exp : param_tys)\n+      {\n+\tbool used = args.find (exp) != args.end ();\n+\tif (!used)\n+\t  {\n+\t    Location locus = param_location_map.at (exp);\n+\t    rust_error_at (locus, \"unconstrained type parameter\");\n+\t  }\n+      }\n+  }\n \n+  std::vector<TyTy::SubstitutionParamMapping> *mappings;\n   TyTy::BaseType *translated;\n };\n "}, {"sha": "34be7fd4f2f81179572a0f53ea97cf00bd3f674d", "filename": "gcc/testsuite/rust.test/xfail_compile/unconstrained_type_param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f958d1717745ad66a19c346c0e4b0bba1c813e7b/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs?ref=f958d1717745ad66a19c346c0e4b0bba1c813e7b", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<T>(T, bool);\n+\n+impl<X, Y> Foo<X> {\n+    // { dg-error \"unconstrained type parameter\" \"\" { target { *-*-* } } .-1 }\n+    fn test() -> Y {\n+        123\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo::test();\n+}"}]}