{"sha": "d1accaa33ddcbf491edbb6023d639f6d3579bc00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhY2NhYTMzZGRjYmY0OTFlZGJiNjAyM2Q2MzlmNmQzNTc5YmMwMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-09-10T22:28:30Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-09-10T22:28:30Z"}, "message": "configure.in: Add check for GAS subsection -1 support.\n\n\t* configure.in: Add check for GAS subsection -1 support.\n\t* acconfig.h (HAVE_GAS_SUBSECTION_ORDERING): Add.\n\t* configure config.in: Rebuilt.\n\t* config/sparc/sparc.h (CASE_VECTOR_MODE): For V9 flag_pic, use\n\tSImode is subsection -1 works, else use DImode.\n\t(ASM_OUTPUT_ADDR_VEC_START, ASM_OUTPUT_ADDR_VEC_END): Define if\n\tsubsection -1 works.\n\t* config/sparc/sparc.c (sparc_output_addr_vec,\n\tsparc_output_addr_diff_vec): Use them if defined.\n\nFrom-SVN: r22383", "tree": {"sha": "c8b5a568b15e1730be67b19c2270b0fd997a8876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b5a568b15e1730be67b19c2270b0fd997a8876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1accaa33ddcbf491edbb6023d639f6d3579bc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1accaa33ddcbf491edbb6023d639f6d3579bc00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1accaa33ddcbf491edbb6023d639f6d3579bc00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1accaa33ddcbf491edbb6023d639f6d3579bc00/comments", "author": null, "committer": null, "parents": [{"sha": "6cf624a0a5db1265c836e04134f3d8b4e7b86b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf624a0a5db1265c836e04134f3d8b4e7b86b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf624a0a5db1265c836e04134f3d8b4e7b86b3b"}], "stats": {"total": 131, "additions": 130, "deletions": 1}, "files": [{"sha": "753ebeac1c6b54091eba0081a832d30b9606dd06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -1,3 +1,15 @@\n+Thu Sep 10 21:19:10 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+\t* configure.in: Add check for GAS subsection -1 support.\n+\t* acconfig.h (HAVE_GAS_SUBSECTION_ORDERING): Add.\n+\t* configure config.in: Rebuilt.\n+\t* config/sparc/sparc.h (CASE_VECTOR_MODE): For V9 flag_pic, use\n+\tSImode is subsection -1 works, else use DImode.\n+\t(ASM_OUTPUT_ADDR_VEC_START, ASM_OUTPUT_ADDR_VEC_END): Define if\n+\tsubsection -1 works.\n+\t* config/sparc/sparc.c (sparc_output_addr_vec,\n+\tsparc_output_addr_diff_vec): Use them if defined.\n+\n Thu Sep 10 10:46:01 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* tree.h (DECL_ORIGIN): New macro."}, {"sha": "0e43b153e213ae1df9807def4925ee81eaf0eb20", "filename": "gcc/acconfig.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -20,6 +20,10 @@\n /* Define if your assembler supports .balign and .p2align.  */\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN\n \n+/* Define if your assembler supports .subsection and .subsection -1 starts\n+   emitting at the beginning of your section */\n+#undef HAVE_GAS_SUBSECTION_ORDERING\n+\n /* Define if you have a working <inttypes.h> header file.  */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "0c5b6963a0172fdceb14e48327cfed080ec8b339", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -21,6 +21,10 @@\n /* Define if your assembler supports .balign and .p2align.  */\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN\n \n+/* Define if your assembler supports .subsection and .subsection -1 starts\n+   emitting at the beginning of your section */\n+#undef HAVE_GAS_SUBSECTION_ORDERING\n+\n /* Define if you have a working <inttypes.h> header file.  */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "6e7d27af75cbcef903eb06b5e62a16dc55eeaba6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -7196,6 +7196,10 @@ sparc_output_addr_vec (vec)\n   rtx lab = XEXP (vec, 0), body = XEXP (vec, 1);\n   int idx, vlen = XVECLEN (body, 0);\n \n+#ifdef ASM_OUTPUT_ADDR_VEC_START  \n+  ASM_OUTPUT_ADDR_VEC_START (asm_out_file);\n+#endif\n+\n #ifdef ASM_OUTPUT_CASE_LABEL\n   ASM_OUTPUT_CASE_LABEL (asm_out_file, \"L\", CODE_LABEL_NUMBER (lab),\n \t\t\t NEXT_INSN (lab));\n@@ -7208,6 +7212,10 @@ sparc_output_addr_vec (vec)\n       ASM_OUTPUT_ADDR_VEC_ELT\n \t(asm_out_file, CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 0, idx), 0)));\n     }\n+    \n+#ifdef ASM_OUTPUT_ADDR_VEC_END\n+  ASM_OUTPUT_ADDR_VEC_END (asm_out_file);\n+#endif\n }\n \n static void \n@@ -7218,6 +7226,10 @@ sparc_output_addr_diff_vec (vec)\n   rtx base = XEXP (XEXP (body, 0), 0);\n   int idx, vlen = XVECLEN (body, 1);\n \n+#ifdef ASM_OUTPUT_ADDR_VEC_START  \n+  ASM_OUTPUT_ADDR_VEC_START (asm_out_file);\n+#endif\n+\n #ifdef ASM_OUTPUT_CASE_LABEL\n   ASM_OUTPUT_CASE_LABEL (asm_out_file, \"L\", CODE_LABEL_NUMBER (lab),\n \t\t\t NEXT_INSN (lab));\n@@ -7233,6 +7245,10 @@ sparc_output_addr_diff_vec (vec)\n          CODE_LABEL_NUMBER (XEXP (XVECEXP (body, 1, idx), 0)),\n          CODE_LABEL_NUMBER (base));\n     }\n+    \n+#ifdef ASM_OUTPUT_ADDR_VEC_END\n+  ASM_OUTPUT_ADDR_VEC_END (asm_out_file);\n+#endif\n }\n \n static void"}, {"sha": "c68c3d02916836551c2af9ac8c2d01465142e84f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -2473,8 +2473,15 @@ extern struct rtx_def *legitimize_pic_address ();\n    for the index in the tablejump instruction.  */\n /* If we ever implement any of the full models (such as CM_FULLANY),\n    this has to be DImode in that case */\n+#ifdef HAVE_GAS_SUBSECTION_ORDERING\n #define CASE_VECTOR_MODE \\\n (! TARGET_PTR64 ? SImode : flag_pic ? SImode : TARGET_CM_MEDLOW ? SImode : DImode)\n+#else\n+/* If assembler does not have working .subsection -1, we use DImode for pic, as otherwise\n+   we have to sign extend which slows things down. */\n+#define CASE_VECTOR_MODE \\\n+(! TARGET_PTR64 ? SImode : flag_pic ? DImode : TARGET_CM_MEDLOW ? SImode : DImode)\n+#endif\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n@@ -2999,6 +3006,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n } while (0)\n \n+/* This is what to output before and after case-vector (both\n+   relative and absolute).  If .subsection -1 works, we put case-vectors\n+   at the beginning of the current section.  */\n+\n+#ifdef HAVE_GAS_SUBSECTION_ORDERING\n+\n+#define ASM_OUTPUT_ADDR_VEC_START(FILE)\t\t\t\t\t\\\n+  fprintf(FILE, \"\\t.subsection\\t-1\\n\")\n+\n+#define ASM_OUTPUT_ADDR_VEC_END(FILE)\t\t\t\t\t\\\n+  fprintf(FILE, \"\\t.previous\\n\")\n+\n+#endif\n+\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "608019a7896cef3b3ad11586235a68f39a7a79d4", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -5534,6 +5534,44 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n+echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n+echo \"configure:5539: checking assembler subsection support\" >&5\n+gcc_cv_as_subsections=\n+if test x$gcc_cv_as != x; then\n+\t# Check if we have .subsection\n+\techo \".subsection 1\" > conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_subsections=\".subsection\"\n+\t\tif test -x nm$host_exeext; then\n+\t\t\tgcc_cv_nm=./nm$host_exeext\n+\t\telif test x$host = x$target; then\n+\t\t\t# Native build.\n+\t\t\tgcc_cv_nm=nm$host_exeext\n+\t\tfi\n+\t\tif test x$gcc_cv_nm != x; then\n+\t\t\tcat > conftest.s <<EOF\n+conftest_label1: .word 0\n+.subsection -1\n+conftest_label2: .word 0\n+.previous\n+EOF\n+\t\t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\t\t\t$gcc_cv_nm conftest.o | grep conftest_label1 > conftest.nm1\n+\t\t\t\t$gcc_cv_nm conftest.o | grep conftest_label2 | sed -e 's/label2/label1/' > conftest.nm2\n+\t\t\t\tif ! cmp conftest.nm1 conftest.nm2 > /dev/null 2>&1; then\n+\t\t\t\t\tgcc_cv_as_subsections=\"working .subsection -1\"\n+\t\t\t\t\tcat >> confdefs.h <<\\EOF\n+#define HAVE_GAS_SUBSECTION_ORDERING 1\n+EOF\n+\n+\t\t\t\tfi\n+\t\t\tfi\n+\t\tfi\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n+\n # Figure out what language subdirectories are present.\n subdirs=\n for lang in ${srcdir}/*/config-lang.in ..\n@@ -5731,7 +5769,7 @@ fi\n \n # Warn if using init_priority.\n echo $ac_n \"checking whether to enable init_priority by default\"\"... $ac_c\" 1>&6\n-echo \"configure:5735: checking whether to enable init_priority by default\" >&5\n+echo \"configure:5773: checking whether to enable init_priority by default\" >&5\n if test x$enable_init_priority != xyes; then\n   enable_init_priority=no\n fi"}, {"sha": "98848d40a24564d6e80fecfd84574bd783fd5a3d", "filename": "gcc/configure.in", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1accaa33ddcbf491edbb6023d639f6d3579bc00/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=d1accaa33ddcbf491edbb6023d639f6d3579bc00", "patch": "@@ -3669,6 +3669,40 @@ if test x$gcc_cv_as != x; then\n fi\n AC_MSG_RESULT($gcc_cv_as_alignment_features)\n \n+AC_MSG_CHECKING(assembler subsection support)\n+gcc_cv_as_subsections=\n+if test x$gcc_cv_as != x; then\n+\t# Check if we have .subsection\n+\techo \".subsection 1\" > conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_subsections=\".subsection\"\n+\t\tif test -x nm$host_exeext; then\n+\t\t\tgcc_cv_nm=./nm$host_exeext\n+\t\telif test x$host = x$target; then\n+\t\t\t# Native build.\n+\t\t\tgcc_cv_nm=nm$host_exeext\n+\t\tfi\n+\t\tif test x$gcc_cv_nm != x; then\n+\t\t\tcat > conftest.s <<EOF\n+conftest_label1: .word 0\n+.subsection -1\n+conftest_label2: .word 0\n+.previous\n+EOF\n+\t\t\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\t\t\t$gcc_cv_nm conftest.o | grep conftest_label1 > conftest.nm1\n+\t\t\t\t$gcc_cv_nm conftest.o | grep conftest_label2 | sed -e 's/label2/label1/' > conftest.nm2\n+\t\t\t\tif ! cmp conftest.nm1 conftest.nm2 > /dev/null 2>&1; then\n+\t\t\t\t\tgcc_cv_as_subsections=\"working .subsection -1\"\n+\t\t\t\t\tAC_DEFINE(HAVE_GAS_SUBSECTION_ORDERING)\n+\t\t\t\tfi\n+\t\t\tfi\n+\t\tfi\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+AC_MSG_RESULT($gcc_cv_as_subsections)\n+\n # Figure out what language subdirectories are present.\n subdirs=\n for lang in ${srcdir}/*/config-lang.in .."}]}