{"sha": "46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjNmUxZTIwZTU4YThlMDcxYzE2M2Q5ZjFhOGVhMTc5YTQzN2ZkMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-08T16:57:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-08T16:57:27Z"}, "message": "PR c/68757: fix uninitialized src_range for various builtins\n\ngcc/c/ChangeLog:\n\tPR c/68757\n\t* c-parser.c (c_parser_get_builtin_args): Add\n\t\"out_close_paren_loc\" param, and write back to it.\n\t(c_parser_postfix_expression): Capture the closing\n\tparenthesis location for RID_CHOOSE_EXPR,\n\tRID_BUILTIN_CALL_WITH_STATIC_CHAIN, RID_BUILTIN_COMPLEX,\n\tRID_BUILTIN_SHUFFLE and use it to set the source range\n\tfor such expressions; within RID_BUILTIN_COMPLEX set\n\tthe underlying location.\n\ngcc/testsuite/ChangeLog:\n\tPR c/68757\n\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n\t(test_builtin_choose_expr): New test function.\n\t(test_builtin_call_with_static_chain): Likewise.\n\t(test_builtin_complex): Likewise.\n\t(test_builtin_shuffle): Likewise.\n\nFrom-SVN: r231414", "tree": {"sha": "c3af79a3c9a843c1afc6cac97b3ba8ab635198e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3af79a3c9a843c1afc6cac97b3ba8ab635198e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b26a3da5cc6a2c5a09aef9c274190bff5fd9fa26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26a3da5cc6a2c5a09aef9c274190bff5fd9fa26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26a3da5cc6a2c5a09aef9c274190bff5fd9fa26"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "62d92c06b00ca63cefef6c84c2ecfe365320eae3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "patch": "@@ -1,3 +1,15 @@\n+2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68757\n+\t* c-parser.c (c_parser_get_builtin_args): Add\n+\t\"out_close_paren_loc\" param, and write back to it.\n+\t(c_parser_postfix_expression): Capture the closing\n+\tparenthesis location for RID_CHOOSE_EXPR,\n+\tRID_BUILTIN_CALL_WITH_STATIC_CHAIN, RID_BUILTIN_COMPLEX,\n+\tRID_BUILTIN_SHUFFLE and use it to set the source range\n+\tfor such expressions; within RID_BUILTIN_COMPLEX set\n+\tthe underlying location.\n+\n 2015-12-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68668"}, {"sha": "8ea0e959379d8bbbecdd93cbb9a4db992b6d5244", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "patch": "@@ -6933,11 +6933,14 @@ c_parser_alignof_expression (c_parser *parser)\n    for the middle-end nodes like COMPLEX_EXPR, VEC_PERM_EXPR and\n    others.  The name of the builtin is passed using BNAME parameter.\n    Function returns true if there were no errors while parsing and\n-   stores the arguments in CEXPR_LIST.  */\n+   stores the arguments in CEXPR_LIST.  If it returns true,\n+   *OUT_CLOSE_PAREN_LOC is written to with the location of the closing\n+   parenthesis.  */\n static bool\n c_parser_get_builtin_args (c_parser *parser, const char *bname,\n \t\t\t   vec<c_expr_t, va_gc> **ret_cexpr_list,\n-\t\t\t   bool choose_expr_p)\n+\t\t\t   bool choose_expr_p,\n+\t\t\t   location_t *out_close_paren_loc)\n {\n   location_t loc = c_parser_peek_token (parser)->location;\n   vec<c_expr_t, va_gc> *cexpr_list;\n@@ -6955,6 +6958,7 @@ c_parser_get_builtin_args (c_parser *parser, const char *bname,\n \n   if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n     {\n+      *out_close_paren_loc = c_parser_peek_token (parser)->location;\n       c_parser_consume_token (parser);\n       return true;\n     }\n@@ -6974,6 +6978,7 @@ c_parser_get_builtin_args (c_parser *parser, const char *bname,\n       vec_safe_push (cexpr_list, expr);\n     }\n \n+  *out_close_paren_loc = c_parser_peek_token (parser)->location;\n   if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n     return false;\n \n@@ -7594,11 +7599,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t    vec<c_expr_t, va_gc> *cexpr_list;\n \t    c_expr_t *e1_p, *e2_p, *e3_p;\n \t    tree c;\n+\t    location_t close_paren_loc;\n \n \t    c_parser_consume_token (parser);\n \t    if (!c_parser_get_builtin_args (parser,\n \t\t\t\t\t    \"__builtin_choose_expr\",\n-\t\t\t\t\t    &cexpr_list, true))\n+\t\t\t\t\t    &cexpr_list, true,\n+\t\t\t\t\t    &close_paren_loc))\n \t      {\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n@@ -7626,6 +7633,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\" a constant\");\n \t    constant_expression_warning (c);\n \t    expr = integer_zerop (c) ? *e3_p : *e2_p;\n+\t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n \t  }\n \tcase RID_TYPES_COMPATIBLE_P:\n@@ -7677,11 +7685,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t    vec<c_expr_t, va_gc> *cexpr_list;\n \t    c_expr_t *e2_p;\n \t    tree chain_value;\n+\t    location_t close_paren_loc;\n \n \t    c_parser_consume_token (parser);\n \t    if (!c_parser_get_builtin_args (parser,\n \t\t\t\t\t    \"__builtin_call_with_static_chain\",\n-\t\t\t\t\t    &cexpr_list, false))\n+\t\t\t\t\t    &cexpr_list, false,\n+\t\t\t\t\t    &close_paren_loc))\n \t      {\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n@@ -7710,17 +7720,20 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\"must be a pointer type\");\n \t    else\n \t      CALL_EXPR_STATIC_CHAIN (expr.value) = chain_value;\n+\t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n \t  }\n \tcase RID_BUILTIN_COMPLEX:\n \t  {\n \t    vec<c_expr_t, va_gc> *cexpr_list;\n \t    c_expr_t *e1_p, *e2_p;\n+\t    location_t close_paren_loc;\n \n \t    c_parser_consume_token (parser);\n \t    if (!c_parser_get_builtin_args (parser,\n \t\t\t\t\t    \"__builtin_complex\",\n-\t\t\t\t\t    &cexpr_list, false))\n+\t\t\t\t\t    &cexpr_list, false,\n+\t\t\t\t\t    &close_paren_loc))\n \t      {\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n@@ -7765,23 +7778,26 @@ c_parser_postfix_expression (c_parser *parser)\n \t      }\n \t    pedwarn_c90 (loc, OPT_Wpedantic,\n \t\t\t \"ISO C90 does not support complex types\");\n-\t    expr.value = build2 (COMPLEX_EXPR,\n-\t\t\t\t build_complex_type\n-\t\t\t\t   (TYPE_MAIN_VARIANT\n-\t\t\t\t     (TREE_TYPE (e1_p->value))),\n-\t\t\t\t e1_p->value, e2_p->value);\n+\t    expr.value = build2_loc (loc, COMPLEX_EXPR,\n+\t\t\t\t     build_complex_type\n+\t\t\t\t     (TYPE_MAIN_VARIANT\n+\t\t\t\t      (TREE_TYPE (e1_p->value))),\n+\t\t\t\t     e1_p->value, e2_p->value);\n+\t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n \t  }\n \tcase RID_BUILTIN_SHUFFLE:\n \t  {\n \t    vec<c_expr_t, va_gc> *cexpr_list;\n \t    unsigned int i;\n \t    c_expr_t *p;\n+\t    location_t close_paren_loc;\n \n \t    c_parser_consume_token (parser);\n \t    if (!c_parser_get_builtin_args (parser,\n \t\t\t\t\t    \"__builtin_shuffle\",\n-\t\t\t\t\t    &cexpr_list, false))\n+\t\t\t\t\t    &cexpr_list, false,\n+\t\t\t\t\t    &close_paren_loc))\n \t      {\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n@@ -7808,6 +7824,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t       \"%<__builtin_shuffle%>\");\n \t\texpr.value = error_mark_node;\n \t      }\n+\t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n \t  }\n \tcase RID_AT_SELECTOR:"}, {"sha": "00dc04197964cbb1deeb366d2967db3d85a31ac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "patch": "@@ -1,3 +1,12 @@\n+2015-12-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/68757\n+\t* gcc.dg/plugin/diagnostic-test-expressions-1.c\n+\t(test_builtin_choose_expr): New test function.\n+\t(test_builtin_call_with_static_chain): Likewise.\n+\t(test_builtin_complex): Likewise.\n+\t(test_builtin_shuffle): Likewise.\n+\n 2015-12-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/got_mem_hoist_1.c (dg-skip-if): Match big-endian"}, {"sha": "023385bccf05963c8dbd2e0b6d6f7c4502a3df7d", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-expressions-1.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6e1e20e58a8e071c163d9f1a8ea179a437fd3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.c?ref=46c6e1e20e58a8e071c163d9f1a8ea179a437fd3", "patch": "@@ -518,6 +518,56 @@ void test_builtin_offsetof (int i)\n    { dg-end-multiline-output \"\" } */\n }\n \n+void test_builtin_choose_expr (int i)\n+{\n+  __emit_expression_range (0,  __builtin_choose_expr (1, i, i) + i);  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  __builtin_choose_expr (1, i, i) + i);\n+                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0,  i + __builtin_choose_expr (1, i, i));  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  i + __builtin_choose_expr (1, i, i));\n+                                ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+extern int f (int);\n+void test_builtin_call_with_static_chain (int i, void *ptr)\n+{\n+  __emit_expression_range (0, __builtin_call_with_static_chain (f (i), ptr));  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, __builtin_call_with_static_chain (f (i), ptr));\n+                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_builtin_complex (float i, float j)\n+{\n+  __emit_expression_range (0,  __builtin_complex (i, j) );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  __builtin_complex (i, j) );\n+                                ^~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+void test_builtin_shuffle (v4si a, v4si b, v4si mask)\n+{\n+  __emit_expression_range (0,  __builtin_shuffle (a, mask) );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  __builtin_shuffle (a, mask) );\n+                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0,  __builtin_shuffle (a, b, mask) );  /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0,  __builtin_shuffle (a, b, mask) );\n+                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n /* Examples of non-trivial expressions.  ****************************/\n \n extern double sqrt (double x);"}]}