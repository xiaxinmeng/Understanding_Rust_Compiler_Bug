{"sha": "f235ad118fed420d99d985b116a3c6a1d054d398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzNWFkMTE4ZmVkNDIwZDk5ZDk4NWIxMTZhM2M2YTFkMDU0ZDM5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-28T04:30:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-28T04:30:55Z"}, "message": "Core DR 1288\n\n\tCore DR 1288\n\t* call.c (reference_binding): Only elide braces if the single\n\telement is reference-related.\n\nFrom-SVN: r207164", "tree": {"sha": "6f8b29307f926663f67c12f91ddb6e52c933453e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8b29307f926663f67c12f91ddb6e52c933453e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f235ad118fed420d99d985b116a3c6a1d054d398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f235ad118fed420d99d985b116a3c6a1d054d398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f235ad118fed420d99d985b116a3c6a1d054d398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f235ad118fed420d99d985b116a3c6a1d054d398/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30f6b7844aad824eb90adc0962a3663c73d5aa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f6b7844aad824eb90adc0962a3663c73d5aa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f6b7844aad824eb90adc0962a3663c73d5aa16"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "707032fab803455f5e9db64740ddec2b37b8a2db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f235ad118fed420d99d985b116a3c6a1d054d398", "patch": "@@ -1,5 +1,9 @@\n 2014-01-27  Jason Merrill  <jason@redhat.com>\n \n+\tCore DR 1288\n+\t* call.c (reference_binding): Only elide braces if the single\n+\telement is reference-related.\n+\n \tPR c++/58814\n \t* typeck.c (cp_build_modify_expr): Make the RHS an rvalue before\n \tstabilizing."}, {"sha": "7d6e621027aec260a59689c5b08a551db254825f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f235ad118fed420d99d985b116a3c6a1d054d398", "patch": "@@ -1460,16 +1460,29 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n   if (expr && BRACE_ENCLOSED_INITIALIZER_P (expr))\n     {\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n-      conv = implicit_conversion (to, from, expr, c_cast_p,\n-\t\t\t\t  flags, complain);\n-      if (!CLASS_TYPE_P (to)\n-\t  && CONSTRUCTOR_NELTS (expr) == 1)\n+      /* DR 1288: Otherwise, if the initializer list has a single element\n+\t of type E and ... [T's] referenced type is reference-related to E,\n+\t the object or reference is initialized from that element... */\n+      if (CONSTRUCTOR_NELTS (expr) == 1)\n \t{\n-\t  expr = CONSTRUCTOR_ELT (expr, 0)->value;\n-\t  if (error_operand_p (expr))\n+\t  tree elt = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t  if (error_operand_p (elt))\n \t    return NULL;\n-\t  from = TREE_TYPE (expr);\n+\t  tree etype = TREE_TYPE (elt);\n+\t  if (reference_related_p (to, etype))\n+\t    {\n+\t      expr = elt;\n+\t      from = etype;\n+\t      goto skip;\n+\t    }\n \t}\n+      /* Otherwise, if T is a reference type, a prvalue temporary of the\n+\t type referenced by T is copy-list-initialized or\n+\t direct-list-initialized, depending on the kind of initialization\n+\t for the reference, and the reference is bound to that temporary. */\n+      conv = implicit_conversion (to, from, expr, c_cast_p,\n+\t\t\t\t  flags, complain);\n+    skip:;\n     }\n \n   if (TREE_CODE (from) == REFERENCE_TYPE)"}, {"sha": "19aefd304d51519d102c97b8f6c5c0092958bf14", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist22.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f235ad118fed420d99d985b116a3c6a1d054d398/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist22.C?ref=f235ad118fed420d99d985b116a3c6a1d054d398", "patch": "@@ -1,4 +1,4 @@\n-// Core issue 934\n+// Core issue 934/1288\n // { dg-options \"-std=c++11\" }\n \n int i;\n@@ -13,12 +13,12 @@ struct A { int i; } a;\n \n A& r5 { i };\t\t\t// { dg-error \"\" } reference to temporary\n A&& r6 { i };\t\t\t// OK, aggregate initialization of temporary\n-A& r7 { a };\t\t\t// { dg-error \"\" } invalid aggregate initializer for A\n-A&& r8 { a };\t\t\t// { dg-error \"\" } invalid aggregate initializer for A\n+A& r7 { a };\t\t\t// OK, direct-initialization\n+A&& r8 { a };\t\t\t// { dg-error \"lvalue\" } binding && to lvalue\n \n struct B { B(int); int i; } b(0);\n \n B& r9 { i };\t\t\t// { dg-error \"\" } reference to temporary\n B&& r10 { i };\t\t\t// OK, make temporary with B(int) constructor\n-B& r11 { b };\t\t\t// { dg-error \"\" } reference to temporary\n-B&& r12 { b };\t\t\t// OK, make temporary with copy constructor\n+B& r11 { b };\t\t\t// OK, direct-initialization\n+B&& r12 { b };\t\t\t// { dg-error \"lvalue\" } binding && to lvalue"}]}