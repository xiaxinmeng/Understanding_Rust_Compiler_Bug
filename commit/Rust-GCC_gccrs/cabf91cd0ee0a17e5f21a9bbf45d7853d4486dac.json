{"sha": "cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiZjkxY2QwZWUwYTE3ZTVmMjFhOWJiZjQ1ZDc4NTNkNDQ4NmRhYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-04-25T00:49:08Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-04-25T00:49:08Z"}, "message": "rs6000.c (rs6000_emit_set_long_const): Tidy.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_set_long_const): Tidy.\n\nFrom-SVN: r198271", "tree": {"sha": "e9ffba74150058452c4b370503f22a0b98b7c92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ffba74150058452c4b370503f22a0b98b7c92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac/comments", "author": null, "committer": null, "parents": [{"sha": "f5a21a3a9b3ead20fe167cbe83c92bbd6a004d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a21a3a9b3ead20fe167cbe83c92bbd6a004d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a21a3a9b3ead20fe167cbe83c92bbd6a004d39"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "f1156915e4f579e3b32caa79997df2a2ff2a7db8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "patch": "@@ -1,9 +1,13 @@\n+2013-04-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_set_long_const): Tidy.\n+\n 2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tRevert:\n \t2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n \t* rtl.h (struct rtx_def): ...\n-\t\n+\n 2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimizations/57046\n@@ -43,7 +47,7 @@\n \n 2013-04-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n-        * rtl.h (struct rtx_def): Add comment for field jump.\n+\t* rtl.h (struct rtx_def): Add comment for field jump.\n \t(LRA_SUBREG_P): New macro.\n \t* recog.c (register_operand): Check LRA_SUBREG_P.\n \t* lra.c (lra): Add note at the end of RTL code. Align non-empty\n@@ -65,9 +69,9 @@\n \tnon-null disp.  Reload inner instead of disp when base and index\n \tare null.  Try to put lo_sum into register.\n \t(EBB_PROBABILITY_CUTOFF): Redefine probability in percents.\n-        (check_and_process_move): Move code for move cost check to\n+\t(check_and_process_move): Move code for move cost check to\n \tsimple_move_p.  Remove equiv_substitution.\n-        (simple_move_p): New function.\n+\t(simple_move_p): New function.\n \t(curr_insn_transform): Initialize sec_mem_p and change_p.  Set up\n \tcurr_insn_set.  Call check_and_process_move only for single set\n \tinsns.  Use the new function.  Move call of check_and_process_move\n@@ -95,9 +99,9 @@\n 2013-04-02  Catherine Moore  <clm@codesourcery.com>\n \t    Chao-ying Fu <fu@mips.com>\n \n-        * config/mips/micromips.md (jraddiusp): New pattern.\n-        * config/mips/mips.c (mips_expand_epilogue): Use the JRADDIUSP\n-        instruction if possible.\n+\t* config/mips/micromips.md (jraddiusp): New pattern.\n+\t* config/mips/mips.c (mips_expand_epilogue): Use the JRADDIUSP\n+\tinstruction if possible.\n \n 2013-04-24  Alan Modra  <amodra@gmail.com>\n \n@@ -162,19 +166,19 @@\n \n 2013-04-23  Shiva Chen  <shiva0217@gmail.com>\n \n-        * lra-assigns.c (find_hard_regno_for): Use lra_reg_val_equal_p\n-        to check the register content is equal or not.\n-        * lra-constraints.c (match_reload): Use lra_assign_reg_val\n-        to assign register content record.\n-        * lra-eliminations.c (update_reg_eliminate): Use\n+\t* lra-assigns.c (find_hard_regno_for): Use lra_reg_val_equal_p\n+\tto check the register content is equal or not.\n+\t* lra-constraints.c (match_reload): Use lra_assign_reg_val\n+\tto assign register content record.\n+\t* lra-eliminations.c (update_reg_eliminate): Use\n \tlra_update_reg_val_offset to update register content offset.\n-        * lra-int.h (struct lra_reg): Add offset member.\n-        (lra_reg_val_equal_p): New static inline function.\n-        (lra_update_reg_val_offset): New static inline function.\n-        (lra_assign_reg_val): New static inline function.\n-        * lra.c (lra_create_new_reg): Use lra_assign_reg_val\n-        to assign register content record.\n-        (initialize_lra_reg_info_element): Initial offset to zero.\n+\t* lra-int.h (struct lra_reg): Add offset member.\n+\t(lra_reg_val_equal_p): New static inline function.\n+\t(lra_update_reg_val_offset): New static inline function.\n+\t(lra_assign_reg_val): New static inline function.\n+\t* lra.c (lra_create_new_reg): Use lra_assign_reg_val\n+\tto assign register content record.\n+\t(initialize_lra_reg_info_element): Initial offset to zero.\n \n 2013-04-23  Catherine Moore  <clm@codesourcery.com>\n \n@@ -236,11 +240,11 @@\n \t* cfghhooks.c (dump_bb_for_graph): Dump profile count and frquency.\n \t* Makefile.in: New dependency\n \n-            David Daney <ddaney.cavm@gmail.com>\n+\t    David Daney <ddaney.cavm@gmail.com>\n \n-        * configure.ac (gcc_cv_as_micromips_support):  Use the\n-        --fatal-warnings option.\n-        * configure: Regenerate.\n+\t* configure.ac (gcc_cv_as_micromips_support):  Use the\n+\t--fatal-warnings option.\n+\t* configure: Regenerate.\n \n 2013-04-22  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "27245db142004cc44d6bd1e4df693007ce8688be", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cabf91cd0ee0a17e5f21a9bbf45d7853d4486dac", "patch": "@@ -7104,21 +7104,13 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \n       if ((ud4 == 0xffff && ud3 == 0xffff && ud2 == 0xffff && (ud1 & 0x8000))\n \t  || (ud4 == 0 && ud3 == 0 && ud2 == 0 && ! (ud1 & 0x8000)))\n-\t{\n-\t  if (ud1 & 0x8000)\n-\t    emit_move_insn (dest, GEN_INT (((ud1 ^ 0x8000) -  0x8000)));\n-\t  else\n-\t    emit_move_insn (dest, GEN_INT (ud1));\n-\t}\n+\temit_move_insn (dest, GEN_INT ((ud1 ^ 0x8000) - 0x8000));\n \n       else if ((ud4 == 0xffff && ud3 == 0xffff && (ud2 & 0x8000))\n \t       || (ud4 == 0 && ud3 == 0 && ! (ud2 & 0x8000)))\n \t{\n-\t  if (ud2 & 0x8000)\n-\t    emit_move_insn (dest, GEN_INT (((ud2 << 16) ^ 0x80000000)\n-\t\t\t\t\t   - 0x80000000));\n-\t  else\n-\t    emit_move_insn (dest, GEN_INT (ud2 << 16));\n+\t  emit_move_insn (dest, GEN_INT (((ud2 << 16) ^ 0x80000000)\n+\t\t\t\t\t - 0x80000000));\n \t  if (ud1 != 0)\n \t    emit_move_insn (copy_rtx (dest),\n \t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n@@ -7141,12 +7133,8 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n       else if ((ud4 == 0xffff && (ud3 & 0x8000))\n \t       || (ud4 == 0 && ! (ud3 & 0x8000)))\n \t{\n-\t  if (ud3 & 0x8000)\n-\t    emit_move_insn (dest, GEN_INT (((ud3 << 16) ^ 0x80000000)\n-\t\t\t\t\t   - 0x80000000));\n-\t  else\n-\t    emit_move_insn (dest, GEN_INT (ud3 << 16));\n-\n+\t  emit_move_insn (dest, GEN_INT (((ud3 << 16) ^ 0x80000000)\n+\t\t\t\t\t - 0x80000000));\n \t  if (ud2 != 0)\n \t    emit_move_insn (copy_rtx (dest),\n \t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n@@ -7161,12 +7149,8 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \t}\n       else\n \t{\n-\t  if (ud4 & 0x8000)\n-\t    emit_move_insn (dest, GEN_INT (((ud4 << 16) ^ 0x80000000)\n-\t\t\t\t\t   - 0x80000000));\n-\t  else\n-\t    emit_move_insn (dest, GEN_INT (ud4 << 16));\n-\n+\t  emit_move_insn (dest, GEN_INT (((ud4 << 16) ^ 0x80000000)\n+\t\t\t\t\t - 0x80000000));\n \t  if (ud3 != 0)\n \t    emit_move_insn (copy_rtx (dest),\n \t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n@@ -7181,7 +7165,8 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n \t\t\t\t\t GEN_INT (ud2 << 16)));\n \t  if (ud1 != 0)\n \t    emit_move_insn (copy_rtx (dest),\n-\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest), GEN_INT (ud1)));\n+\t\t\t    gen_rtx_IOR (DImode, copy_rtx (dest),\n+\t\t\t\t\t GEN_INT (ud1)));\n \t}\n     }\n   return dest;"}]}