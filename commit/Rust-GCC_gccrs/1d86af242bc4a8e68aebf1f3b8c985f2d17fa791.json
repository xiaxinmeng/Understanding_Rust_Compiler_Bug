{"sha": "1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "node_id": "C_kwDOANBUbNoAKDFkODZhZjI0MmJjNGE4ZTY4YWViZjFmM2I4Yzk4NWYyZDE3ZmE3OTE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:43Z"}, "message": "diagnostics: tweak diagnostic_path::interprocedural_p [PR106626]\n\nThe region-creation event at the start of...\n\n<source>: In function 'int_arr_write_element_after_end_off_by_one':\n<source>:14:11: warning: buffer overflow [CWE-787] [-Wanalyzer-out-of-bounds]\n   14 |   arr[10] = x;\n      |   ~~~~~~~~^~~\n  event 1\n    |\n    |   10 | int32_t arr[10];\n    |      |         ^~~\n    |      |         |\n    |      |         (1) capacity is 40 bytes\n    |\n    +--> 'int_arr_write_element_after_end_off_by_one': events 2-3\n           |\n           |   12 | void int_arr_write_element_after_end_off_by_one(int32_t x)\n           |      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           |      |      |\n           |      |      (2) entry to 'int_arr_write_element_after_end_off_by_one'\n           |   13 | {\n           |   14 |   arr[10] = x;  /* { dg-line line } */\n           |      |   ~~~~~~~~~~~\n           |      |           |\n           |      |           (3) out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\n           |\n<source>:14:11: note: write of 4 bytes to beyond the end of 'arr'\n   14 |   arr[10] = x;\n      |   ~~~~~~~~^~~\n<source>:14:11: note: valid subscripts for 'arr' are '[0]' to '[9]'\n\n...makes diagnostic_manager::finish_pruning consider the path to be\ninterprocedural, and so it doesn't prune the function entry event.\n\nThis patch tweaks diagnostic_path::interprocedural_p to ignore\nleading events outside of any function, so that it considers the\npath to be intraprocedural, and thus diagnostic_manager::finish_pruning\nprunes the function entry event, leading to this simpler output:\n\n<source>: In function 'int_arr_write_element_after_end_off_by_one':\n<source>:14:11: warning: buffer overflow [CWE-787] [-Wanalyzer-out-of-bounds]\n   14 |   arr[10] = x;\n      |   ~~~~~~~~^~~\n  event 1\n    |\n    |   10 | int32_t arr[10];\n    |      |         ^~~\n    |      |         |\n    |      |         (1) capacity is 40 bytes\n    |\n    +--> 'int_arr_write_element_after_end_off_by_one': event 2\n           |\n           |   14 |   arr[10] = x;\n           |      |   ~~~~~~~~^~~\n           |      |           |\n           |      |           (2) out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\n           |\n<source>:14:11: note: write of 4 bytes to beyond the end of 'arr'\n<source>:14:11: note: valid subscripts for 'arr' are '[0]' to '[9]'\n\ngcc/ChangeLog:\n\tPR analyzer/106626\n\t* diagnostic-path.h\n\t(diagnostic_path::get_first_event_in_a_function): New decl.\n\t* diagnostic.cc (diagnostic_path::get_first_event_in_a_function):\n\tNew.\n\t(diagnostic_path::interprocedural_p): Ignore leading events that\n\tare outside of any function.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106626\n\t* gcc.dg/analyzer/out-of-bounds-multiline-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "2353c4d7393853014fc9ec47f9582da896238a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2353c4d7393853014fc9ec47f9582da896238a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df460cf51b25868564dd2628a399b8c874ef309c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df460cf51b25868564dd2628a399b8c874ef309c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df460cf51b25868564dd2628a399b8c874ef309c"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "aa5cda8c23a81a8b4232515bafc84366bf763134", "filename": "gcc/diagnostic-path.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Fdiagnostic-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Fdiagnostic-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-path.h?ref=1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "patch": "@@ -167,6 +167,9 @@ class diagnostic_path\n   virtual const diagnostic_event & get_event (int idx) const = 0;\n \n   bool interprocedural_p () const;\n+\n+private:\n+  bool get_first_event_in_a_function (unsigned *out_idx) const;\n };\n \n /* Concrete subclasses.  */"}, {"sha": "322515b32428ab19f28cff6513707d93ae6420ba", "filename": "gcc/diagnostic.cc", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Fdiagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Fdiagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.cc?ref=1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "patch": "@@ -939,18 +939,49 @@ diagnostic_event::meaning::maybe_get_property_str (enum property p)\n \n /* class diagnostic_path.  */\n \n+/* Subroutint of diagnostic_path::interprocedural_p.\n+   Look for the first event in this path that is within a function\n+   i.e. has a non-NULL fndecl, and a non-zero stack depth.\n+   If found, write its index to *OUT_IDX and return true.\n+   Otherwise return false.  */\n+\n+bool\n+diagnostic_path::get_first_event_in_a_function (unsigned *out_idx) const\n+{\n+  const unsigned num = num_events ();\n+  for (unsigned i = 0; i < num; i++)\n+    {\n+      if (!(get_event (i).get_fndecl () == NULL\n+\t    && get_event (i).get_stack_depth () == 0))\n+\t{\n+\t  *out_idx = i;\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Return true if the events in this path involve more than one\n    function, or false if it is purely intraprocedural.  */\n \n bool\n diagnostic_path::interprocedural_p () const\n {\n+  /* Ignore leading events that are outside of any function.  */\n+  unsigned first_fn_event_idx;\n+  if (!get_first_event_in_a_function (&first_fn_event_idx))\n+    return false;\n+\n+  const diagnostic_event &first_fn_event = get_event (first_fn_event_idx);\n+  tree first_fndecl = first_fn_event.get_fndecl ();\n+  int first_fn_stack_depth = first_fn_event.get_stack_depth ();\n+\n   const unsigned num = num_events ();\n-  for (unsigned i = 0; i < num; i++)\n+  for (unsigned i = first_fn_event_idx + 1; i < num; i++)\n     {\n-      if (get_event (i).get_fndecl () != get_event (0).get_fndecl ())\n+      if (get_event (i).get_fndecl () != first_fndecl)\n \treturn true;\n-      if (get_event (i).get_stack_depth () != get_event (0).get_stack_depth ())\n+      if (get_event (i).get_stack_depth () != first_fn_stack_depth)\n \treturn true;\n     }\n   return false;"}, {"sha": "25301e9e2ffd3b2a37f245e6c978e4857cc30bd6", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-multiline-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c?ref=1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "patch": "@@ -0,0 +1,37 @@\n+/* Integration test of how the execution path looks for\n+   -Wanalyzer-out-of-bounds.  */\n+\n+/* { dg-additional-options \"-fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+\n+#include <stdint.h>\n+\n+int32_t arr[10];\n+\n+void int_arr_write_element_after_end_off_by_one(int32_t x)\n+{\n+  arr[10] = x;  /* { dg-line line } */\n+}\n+/* { dg-warning \"buffer overflow\" \"warning\" { target *-*-* } line } */\n+/* { dg-message \"valid subscripts for 'arr' are '\\\\\\[0\\\\\\]' to '\\\\\\[9\\\\\\]'\" \"valid subscript note\" { target *-*-* } line } */\n+\n+\n+/* { dg-begin-multiline-output \"\" }\n+   arr[10] = x;\n+   ~~~~~~~~^~~\n+  event 1 (depth 0)\n+    |\n+    | int32_t arr[10];\n+    |         ^~~\n+    |         |\n+    |         (1) capacity is 40 bytes\n+    |\n+    +--> 'int_arr_write_element_after_end_off_by_one': event 2 (depth 1)\n+           |\n+           |   arr[10] = x;\n+           |   ~~~~~~~~^~~\n+           |           |\n+           |           (2) out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\n+           |\n+   { dg-end-multiline-output \"\" } */"}]}