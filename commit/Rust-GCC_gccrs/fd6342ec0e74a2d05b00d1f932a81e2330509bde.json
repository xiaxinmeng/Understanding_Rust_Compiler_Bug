{"sha": "fd6342ec0e74a2d05b00d1f932a81e2330509bde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2MzQyZWMwZTc0YTJkMDViMDBkMWY5MzJhODFlMjMzMDUwOWJkZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2006-10-31T18:03:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:03:23Z"}, "message": "par-ch12.adb: Grammar update and cleanup.\n\n2006-10-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\t* par-ch12.adb: Grammar update and cleanup.\n\t(P_Formal_Type_Definition, P_Formal_Derived_Type_Definition): Add\n\tsupport for synchronized derived type definitions.\n\tAdd the new actual Abstract_Present to every call to\n\tP_Interface_Type_Definition.\n\t(P_Formal_Object_Declarations): Update grammar rules. Handle parsing of\n\ta formal object declaration with an access definition or a subtype mark\n\twith a null exclusion.\n\t(P_Generic_Association): Handle association with box, and others_choice\n\twith box, to support Ada 2005 partially parametrized formal packages.\n\nFrom-SVN: r118289", "tree": {"sha": "bce7fe5614af49f2d20b64abe5b584ec8b81d18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bce7fe5614af49f2d20b64abe5b584ec8b81d18a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd6342ec0e74a2d05b00d1f932a81e2330509bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6342ec0e74a2d05b00d1f932a81e2330509bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6342ec0e74a2d05b00d1f932a81e2330509bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6342ec0e74a2d05b00d1f932a81e2330509bde/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aae02e6a54268917087e18208664048475c4e2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae02e6a54268917087e18208664048475c4e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae02e6a54268917087e18208664048475c4e2e9"}], "stats": {"total": 181, "additions": 147, "deletions": 34}, "files": [{"sha": "036a766b873194f1ade7654cba879f5cd9276cc1", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 147, "deletions": 34, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6342ec0e74a2d05b00d1f932a81e2330509bde/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6342ec0e74a2d05b00d1f932a81e2330509bde/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=fd6342ec0e74a2d05b00d1f932a81e2330509bde", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -332,6 +332,34 @@ package body Ch12 is\n    begin\n       Generic_Assoc_Node := New_Node (N_Generic_Association, Token_Ptr);\n \n+      --  Ada2005: an association can be given by: others => <>.\n+\n+      if Token = Tok_Others then\n+         if Ada_Version < Ada_05 then\n+            Error_Msg_SP\n+              (\"partial parametrization of formal packages\" &\n+                \"  is an Ada 2005 extension\");\n+            Error_Msg_SP\n+              (\"\\unit must be compiled with -gnat05 switch\");\n+         end if;\n+\n+         Scan;  --  past OTHERS\n+\n+         if Token /= Tok_Arrow then\n+            Error_Msg_BC (\"expect arrow after others\");\n+         else\n+            Scan;  --  past arrow\n+         end if;\n+\n+         if Token /= Tok_Box then\n+            Error_Msg_BC (\"expect Box after arrow\");\n+         else\n+            Scan;  --  past box\n+         end if;\n+\n+         return New_Node (N_Others_Choice, Token_Ptr);\n+      end if;\n+\n       if Token in Token_Class_Desig then\n          Param_Name_Node := Token_Node;\n          Save_Scan_State (Scan_State); -- at designator\n@@ -345,7 +373,18 @@ package body Ch12 is\n          end if;\n       end if;\n \n-      Set_Explicit_Generic_Actual_Parameter (Generic_Assoc_Node, P_Expression);\n+      --  In Ada 2005 the actual can be a box.\n+\n+      if Token = Tok_Box then\n+         Scan;\n+         Set_Box_Present (Generic_Assoc_Node);\n+         Set_Explicit_Generic_Actual_Parameter (Generic_Assoc_Node, Empty);\n+\n+      else\n+         Set_Explicit_Generic_Actual_Parameter\n+           (Generic_Assoc_Node, P_Expression);\n+      end if;\n+\n       return Generic_Assoc_Node;\n    end P_Generic_Association;\n \n@@ -361,17 +400,20 @@ package body Ch12 is\n \n    --  FORMAL_OBJECT_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST :\n-   --      MODE SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+   --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+   --  | DEFINING_IDENTIFIER_LIST :\n+   --      MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION];\n \n    --  The caller has checked that the initial token is an identifier\n \n    --  Error recovery: cannot raise Error_Resync\n \n    procedure P_Formal_Object_Declarations (Decls : List_Id) is\n-      Decl_Node  : Node_Id;\n-      Scan_State : Saved_Scan_State;\n-      Num_Idents : Nat;\n-      Ident      : Nat;\n+      Decl_Node        : Node_Id;\n+      Ident            : Nat;\n+      Not_Null_Present : Boolean := False;\n+      Num_Idents       : Nat;\n+      Scan_State       : Saved_Scan_State;\n \n       Idents : array (Int range 1 .. 4096) of Entity_Id;\n       --  This array holds the list of defining identifiers. The upper bound\n@@ -405,9 +447,36 @@ package body Ch12 is\n          Decl_Node := New_Node (N_Formal_Object_Declaration, Token_Ptr);\n          Set_Defining_Identifier (Decl_Node, Idents (Ident));\n          P_Mode (Decl_Node);\n-         Set_Subtype_Mark (Decl_Node, P_Subtype_Mark_Resync);\n+\n+         Not_Null_Present := P_Null_Exclusion;  --  Ada 2005 (AI-423)\n+\n+         --  Ada 2005 (AI-423): Formal object with an access definition\n+\n+         if Token = Tok_Access then\n+\n+            --  The access definition is still parsed and set even though\n+            --  the compilation may not use the proper switch. This action\n+            --  ensures the required local error recovery.\n+\n+            Set_Access_Definition (Decl_Node,\n+              P_Access_Definition (Not_Null_Present));\n+\n+            if Ada_Version < Ada_05 then\n+               Error_Msg_SP\n+                 (\"access definition not allowed in formal object \" &\n+                  \"declaration\");\n+               Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n+            end if;\n+\n+         --  Formal object with a subtype mark\n+\n+         else\n+            Set_Null_Exclusion_Present (Decl_Node, Not_Null_Present);\n+            Set_Subtype_Mark (Decl_Node, P_Subtype_Mark_Resync);\n+         end if;\n+\n          No_Constraint;\n-         Set_Expression (Decl_Node, Init_Expr_Opt);\n+         Set_Default_Expression (Decl_Node, Init_Expr_Opt);\n \n          if Ident > 1 then\n             Set_Prev_Ids (Decl_Node, True);\n@@ -542,6 +611,12 @@ package body Ch12 is\n                   return P_Formal_Private_Type_Definition;\n                end if;\n \n+            --  Ada 2005 (AI-443): Abstract synchronized formal derived type\n+\n+            elsif Token = Tok_Synchronized then\n+               Restore_Scan_State (Scan_State); -- to ABSTRACT\n+               return P_Formal_Derived_Type_Definition;\n+\n             else\n                Restore_Scan_State (Scan_State); -- to ABSTRACT\n                return P_Formal_Private_Type_Definition;\n@@ -560,7 +635,8 @@ package body Ch12 is\n             return P_Formal_Floating_Point_Definition;\n \n          when Tok_Interface => --  Ada 2005 (AI-251)\n-            return P_Interface_Type_Definition (Is_Synchronized => False);\n+            return P_Interface_Type_Definition (Abstract_Present => False,\n+                                                Is_Synchronized => False);\n \n          when Tok_Left_Paren =>\n             return P_Formal_Discrete_Type_Definition;\n@@ -571,7 +647,8 @@ package body Ch12 is\n \n             if Token = Tok_Interface then\n                Typedef_Node := P_Interface_Type_Definition\n-                                (Is_Synchronized => False);\n+                                (Abstract_Present => False,\n+                                 Is_Synchronized  => False);\n                Set_Limited_Present (Typedef_Node);\n                return Typedef_Node;\n \n@@ -616,34 +693,51 @@ package body Ch12 is\n             Discard_Junk_Node (P_Record_Definition);\n             return Error;\n \n-         --  Ada 2005 (AI-345)\n+         --  Ada 2005 (AI-345): Task, Protected or Synchronized interface or\n+         --  (AI-443): Synchronized formal derived type declaration.\n \n          when Tok_Protected    |\n               Tok_Synchronized |\n               Tok_Task         =>\n \n-            Scan; -- past TASK, PROTECTED or SYNCHRONIZED\n-\n             declare\n-               Saved_Token  : constant Token_Type := Token;\n+               Saved_Token : constant Token_Type := Token;\n \n             begin\n-               Typedef_Node := P_Interface_Type_Definition\n-                                (Is_Synchronized => True);\n+               Scan; -- past TASK, PROTECTED or SYNCHRONIZED\n \n-               case Saved_Token is\n-                  when Tok_Task =>\n-                     Set_Task_Present         (Typedef_Node);\n+               --  Synchronized derived type\n \n-                  when Tok_Protected =>\n-                     Set_Protected_Present    (Typedef_Node);\n+               if Token = Tok_New then\n+                  Typedef_Node := P_Formal_Derived_Type_Definition;\n \n-                  when Tok_Synchronized =>\n+                  if Saved_Token = Tok_Synchronized then\n                      Set_Synchronized_Present (Typedef_Node);\n+                  else\n+                     Error_Msg_SC (\"invalid kind of formal derived type\");\n+                  end if;\n \n-                  when others =>\n-                     null;\n-               end case;\n+               --  Interface\n+\n+               else\n+                  Typedef_Node := P_Interface_Type_Definition\n+                                    (Abstract_Present => False,\n+                                     Is_Synchronized  => True);\n+\n+                  case Saved_Token is\n+                     when Tok_Task =>\n+                        Set_Task_Present         (Typedef_Node);\n+\n+                     when Tok_Protected =>\n+                        Set_Protected_Present    (Typedef_Node);\n+\n+                     when Tok_Synchronized =>\n+                        Set_Synchronized_Present (Typedef_Node);\n+\n+                     when others =>\n+                        null;\n+                  end case;\n+               end if;\n \n                return Typedef_Node;\n             end;\n@@ -723,11 +817,12 @@ package body Ch12 is\n    --------------------------------------------\n \n    --  FORMAL_DERIVED_TYPE_DEFINITION ::=\n-   --    [abstract] [limited]\n-   --         new SUBTYPE_MARK [[AND interface_list] with private]\n+   --    [abstract] [limited | synchronized]\n+   --         new SUBTYPE_MARK [[and INTERFACE_LIST] with private]\n \n-   --  The caller has checked the initial token(s) is/are NEW, ASTRACT NEW\n-   --  LIMITED NEW, or ABSTRACT LIMITED NEW\n+   --  The caller has checked the initial token(s) is/are NEW, ASTRACT NEW,\n+   --  or LIMITED NEW, ABSTRACT LIMITED NEW, SYNCHRONIZED NEW or ABSTRACT\n+   --  SYNCHRONIZED NEW.\n \n    --  Error recovery: cannot raise Error_Resync\n \n@@ -744,7 +839,7 @@ package body Ch12 is\n \n       if Token = Tok_Limited then\n          Set_Limited_Present (Def_Node);\n-         Scan;  --  past Limited\n+         Scan;  --  past LIMITED\n \n          if Ada_Version < Ada_05 then\n             Error_Msg_SP\n@@ -753,11 +848,22 @@ package body Ch12 is\n               (\"\\unit must be compiled with -gnat05 switch\");\n          end if;\n \n-         if Token = Tok_Abstract then\n-            Scan;  --  past ABSTRACT. diagnosed already in caller.\n+      elsif Token = Tok_Synchronized then\n+         Set_Synchronized_Present (Def_Node);\n+         Scan;  --  past SYNCHRONIZED\n+\n+         if Ada_Version < Ada_05 then\n+            Error_Msg_SP\n+              (\"SYNCHRONIZED in derived type is an Ada 2005 extension\");\n+            Error_Msg_SP\n+              (\"\\unit must be compiled with -gnat05 switch\");\n          end if;\n       end if;\n \n+      if Token = Tok_Abstract then\n+         Scan;  --  past ABSTRACT, diagnosed already in caller.\n+      end if;\n+\n       Scan; -- past NEW;\n       Set_Subtype_Mark (Def_Node, P_Subtype_Mark);\n       No_Constraint;\n@@ -1059,7 +1165,14 @@ package body Ch12 is\n    --      is new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART;\n \n    --  FORMAL_PACKAGE_ACTUAL_PART ::=\n-   --    (<>) | [GENERIC_ACTUAL_PART]\n+   --    ([OTHERS =>] <>) |\n+   --    [GENERIC_ACTUAL_PART]\n+   --    (FORMAL_PACKAGE_ASSOCIATION {, FORMAL_PACKAGE_ASSOCIATION}\n+   --      [, OTHERS => <>)\n+\n+   --  FORMAL_PACKAGE_ASSOCIATION ::=\n+   --    GENERIC_ASSOCIATION\n+   --    | GENERIC_FORMAL_PARAMETER_SELECTOR_NAME => <>\n \n    --  The caller has checked that the initial tokens are WITH PACKAGE,\n    --  and the initial WITH has been scanned out (so Token = Tok_Package)."}]}