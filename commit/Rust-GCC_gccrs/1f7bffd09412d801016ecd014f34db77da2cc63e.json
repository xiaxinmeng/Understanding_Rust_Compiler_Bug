{"sha": "1f7bffd09412d801016ecd014f34db77da2cc63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3YmZmZDA5NDEyZDgwMTAxNmVjZDAxNGYzNGRiNzdkYTJjYzYzZQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-10-26T16:40:25Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-10-26T16:40:25Z"}, "message": "Simplify frame layout for stack probing\n\nThis patch makes some changes to the frame layout in order to simplify\nstack probing.  We want to use the save of LR as a probe in any non-leaf\nfunction.  With shrinkwrapping we may only save LR before a call, so it\nis useful to define a fixed location in the callee-saves. So force LR at\nthe bottom of the callee-saves even with -fomit-frame-pointer.\n\nAlso remove a rarely used frame layout that saves the callee-saves first\nwith -fomit-frame-pointer.  Doing so allows the store of LR to be used as\na valid stack probe in all frames.\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_layout_frame):\n        Ensure LR is always stored at the bottom of the callee-saves.\n        Remove rarely used frame layout which saves callee-saves at top of\n        frame, so the store of LR can be used as a valid probe in all cases.\n\nFrom-SVN: r254112", "tree": {"sha": "71b31e5c29e57ca7945e6bd28b63998e849f2f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b31e5c29e57ca7945e6bd28b63998e849f2f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f7bffd09412d801016ecd014f34db77da2cc63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7bffd09412d801016ecd014f34db77da2cc63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7bffd09412d801016ecd014f34db77da2cc63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7bffd09412d801016ecd014f34db77da2cc63e/comments", "author": null, "committer": null, "parents": [{"sha": "37e4d57b99efe65710bb4a000093c596ab3f5124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e4d57b99efe65710bb4a000093c596ab3f5124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e4d57b99efe65710bb4a000093c596ab3f5124"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "f32a30b7730e195b39c741c5dd80b7ad418505a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7bffd09412d801016ecd014f34db77da2cc63e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7bffd09412d801016ecd014f34db77da2cc63e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f7bffd09412d801016ecd014f34db77da2cc63e", "patch": "@@ -1,3 +1,10 @@\n+2017-10-26  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_layout_frame):\n+\tEnsure LR is always stored at the bottom of the callee-saves.\n+\tRemove rarely used frame layout which saves callee-saves at top of\n+\tframe, so the store of LR can be used as a valid probe in all cases.\n+\n 2017-10-26  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_legitimize_address_displacement):"}, {"sha": "ed97e2d5de11e34f8b724ca5fd29c426e296e883", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7bffd09412d801016ecd014f34db77da2cc63e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7bffd09412d801016ecd014f34db77da2cc63e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1f7bffd09412d801016ecd014f34db77da2cc63e", "patch": "@@ -2885,7 +2885,8 @@ aarch64_frame_pointer_required (void)\n \n /* Mark the registers that need to be saved by the callee and calculate\n    the size of the callee-saved registers area and frame record (both FP\n-   and LR may be omitted).  */\n+   and LR may be omitted).  If the function is not a leaf, ensure LR is\n+   saved at the bottom of the callee-save area.  */\n static void\n aarch64_layout_frame (void)\n {\n@@ -2936,7 +2937,14 @@ aarch64_layout_frame (void)\n       cfun->machine->frame.wb_candidate1 = R29_REGNUM;\n       cfun->machine->frame.reg_offset[R30_REGNUM] = UNITS_PER_WORD;\n       cfun->machine->frame.wb_candidate2 = R30_REGNUM;\n-      offset += 2 * UNITS_PER_WORD;\n+      offset = 2 * UNITS_PER_WORD;\n+    }\n+  else if (!crtl->is_leaf)\n+    {\n+      /* Ensure LR is saved at the bottom of the callee-saves.  */\n+      cfun->machine->frame.reg_offset[R30_REGNUM] = 0;\n+      cfun->machine->frame.wb_candidate1 = R30_REGNUM;\n+      offset = UNITS_PER_WORD;\n     }\n \n   /* Now assign stack slots for them.  */\n@@ -3035,20 +3043,6 @@ aarch64_layout_frame (void)\n       cfun->machine->frame.final_adjust\n \t= cfun->machine->frame.frame_size - cfun->machine->frame.callee_adjust;\n     }\n-  else if (!frame_pointer_needed\n-\t   && varargs_and_saved_regs_size < max_push_offset)\n-    {\n-      /* Frame with large local area and outgoing arguments (this pushes the\n-\t callee-saves first, followed by the locals and outgoing area):\n-\t stp reg1, reg2, [sp, -varargs_and_saved_regs_size]!\n-\t stp reg3, reg4, [sp, 16]\n-\t sub sp, sp, frame_size - varargs_and_saved_regs_size  */\n-      cfun->machine->frame.callee_adjust = varargs_and_saved_regs_size;\n-      cfun->machine->frame.final_adjust\n-\t= cfun->machine->frame.frame_size - cfun->machine->frame.callee_adjust;\n-      cfun->machine->frame.hard_fp_offset = cfun->machine->frame.callee_adjust;\n-      cfun->machine->frame.locals_offset = cfun->machine->frame.hard_fp_offset;\n-    }\n   else\n     {\n       /* Frame with large local area and outgoing arguments using frame pointer:"}]}