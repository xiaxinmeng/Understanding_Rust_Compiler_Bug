{"sha": "da668e9c924505e5a4531dc69e40f916b988c73a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2NjhlOWM5MjQ1MDVlNWE0NTMxZGM2OWU0MGY5MTZiOTg4YzczYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-24T07:48:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-24T07:48:12Z"}, "message": "regs.h (reg_n_max): Don't declare.\n\n\t* regs.h (reg_n_max): Don't declare.\n\t* flow.c (reg_n_max): Don't define.\n\t* regclass.c (renumber): Don't initialize to zero.\n\t(regno_allocated): Likewise.\n\t(reg_n_max): Define.\n\t(allocate_reg_info): Don't initialize unnecessarily.\n\nFrom-SVN: r33374", "tree": {"sha": "72ec515e36e6f7edc2a8c0aea4b5125e07d67ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72ec515e36e6f7edc2a8c0aea4b5125e07d67ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da668e9c924505e5a4531dc69e40f916b988c73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da668e9c924505e5a4531dc69e40f916b988c73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da668e9c924505e5a4531dc69e40f916b988c73a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da668e9c924505e5a4531dc69e40f916b988c73a/comments", "author": null, "committer": null, "parents": [{"sha": "214701e2c3a0aae46b489704a7ce3e7f36bfcb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214701e2c3a0aae46b489704a7ce3e7f36bfcb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214701e2c3a0aae46b489704a7ce3e7f36bfcb51"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "935f71d8902d9bde4e2a7f682a5a0d851833382d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da668e9c924505e5a4531dc69e40f916b988c73a", "patch": "@@ -1,3 +1,12 @@\n+2000-04-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* regs.h (reg_n_max): Don't declare.\n+\t* flow.c (reg_n_max): Don't define.\n+\t* regclass.c (renumber): Don't initialize to zero.\n+\t(regno_allocated): Likewise.\n+\t(reg_n_max): Define.\n+\t(allocate_reg_info): Don't initialize unnecessarily.\n+\t\n Mon Apr 24 00:21:36 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* genattrtab.c (find_attr): Initialize unsigned_p, func_units_p"}, {"sha": "02172a1b857ade906c745664d19252beea53a94c", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=da668e9c924505e5a4531dc69e40f916b988c73a", "patch": "@@ -221,10 +221,6 @@ int max_regno;\n \n varray_type reg_n_info;\n \n-/* Size of the reg_n_info table.  */\n-\n-unsigned int reg_n_max;\n-\n /* Size of a regset for the current function,\n    in (1) bytes and (2) elements.  */\n "}, {"sha": "592edb099bab4375af0bf512f7ae820e6e11c5f1", "filename": "gcc/regclass.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=da668e9c924505e5a4531dc69e40f916b988c73a", "patch": "@@ -1983,8 +1983,9 @@ auto_inc_dec_reg_p (reg, mode)\n }\n #endif\n \f\n-static short *renumber = (short *)0;\n-static size_t regno_allocated = 0;\n+static short *renumber;\n+static size_t regno_allocated;\n+static unsigned int reg_n_max;\n \n /* Allocate enough space to hold NUM_REGS registers for the tables used for\n    reg_scan and flow_analysis that are indexed by the register number.  If\n@@ -2003,7 +2004,6 @@ allocate_reg_info (num_regs, new_p, renumber_p)\n   size_t size_renumber;\n   size_t min = (new_p) ? 0 : reg_n_max;\n   struct reg_info_data *reg_data;\n-  struct reg_info_data *reg_next;\n \n   if (num_regs > regno_allocated)\n     {\n@@ -2056,34 +2056,34 @@ allocate_reg_info (num_regs, new_p, renumber_p)\n     {\n       /* Loop through each of the segments allocated for the actual\n \t reg_info pages, and set up the pointers, zero the pages, etc.  */\n-      for (reg_data = reg_info_head; reg_data; reg_data = reg_next)\n+      for (reg_data = reg_info_head; \n+\t   reg_data && reg_data->max_index >= min;\n+\t   reg_data = reg_data->next)\n \t{\n \t  size_t min_index = reg_data->min_index;\n \t  size_t max_index = reg_data->max_index;\n+\t  size_t max = MIN (max_index, num_regs);\n+\t  size_t local_min = min - min_index;\n+\t  size_t i;\n \n-\t  reg_next = reg_data->next;\n-\t  if (min <= max_index)\n-\t    {\n-\t      size_t max = max_index;\n-\t      size_t local_min = min - min_index;\n-\t      size_t i;\n-\n-\t      if (min < min_index)\n-\t\tlocal_min = 0;\n-\t      if (!reg_data->used_p)\t/* page just allocated with calloc */\n-\t\treg_data->used_p = 1;\t/* no need to zero */\n-\t      else\n-\t\tbzero ((char *) &reg_data->data[local_min],\n-\t\t       sizeof (reg_info) * (max - min_index - local_min + 1));\n+\t  if (reg_data->min_index > num_regs)\n+\t    continue;\n \n-\t      for (i = min_index+local_min; i <= max; i++)\n-\t\t{\n-\t\t  VARRAY_REG (reg_n_info, i) = &reg_data->data[i-min_index];\n-\t\t  REG_BASIC_BLOCK (i) = REG_BLOCK_UNKNOWN;\n-\t\t  renumber[i] = -1;\n-\t\t  reg_pref_buffer[i].prefclass = (char) NO_REGS;\n-\t\t  reg_pref_buffer[i].altclass = (char) NO_REGS;\n-\t\t}\n+\t  if (min < min_index)\n+\t    local_min = 0;\n+\t  if (!reg_data->used_p)\t/* page just allocated with calloc */\n+\t    reg_data->used_p = 1;\t/* no need to zero */\n+\t  else\n+\t    bzero ((char *) &reg_data->data[local_min],\n+\t\t   sizeof (reg_info) * (max - min_index - local_min + 1));\n+\n+\t  for (i = min_index+local_min; i <= max; i++)\n+\t    {\n+\t      VARRAY_REG (reg_n_info, i) = &reg_data->data[i-min_index];\n+\t      REG_BASIC_BLOCK (i) = REG_BLOCK_UNKNOWN;\n+\t      renumber[i] = -1;\n+\t      reg_pref_buffer[i].prefclass = (char) NO_REGS;\n+\t      reg_pref_buffer[i].altclass = (char) NO_REGS;\n \t    }\n \t}\n     }"}, {"sha": "26fa2473104891453987bdc26970f880d30f3d36", "filename": "gcc/regs.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da668e9c924505e5a4531dc69e40f916b988c73a/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=da668e9c924505e5a4531dc69e40f916b988c73a", "patch": "@@ -60,8 +60,6 @@ typedef struct reg_info_def\n \n extern varray_type reg_n_info;\n \n-extern unsigned int reg_n_max;\n-\n /* Indexed by n, gives number of times (REG n) is used or set.\n    References within loops may be counted more times.  */\n "}]}