{"sha": "cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyYjM3ZDlmN2Q3ZWEyOTlkMDcxZDY0NjQxYmMzYWUxMDVmYTgwOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-22T22:56:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-22T22:56:12Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r819", "tree": {"sha": "78a9ef87209833d53c225d49936d73ad8198ec37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78a9ef87209833d53c225d49936d73ad8198ec37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/comments", "author": null, "committer": null, "parents": [{"sha": "878e0c14c4eb4367b849edc896d914b00687aa59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878e0c14c4eb4367b849edc896d914b00687aa59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878e0c14c4eb4367b849edc896d914b00687aa59"}], "stats": {"total": 1292, "additions": 646, "deletions": 646}, "files": [{"sha": "2e0fb883571d6a332c4df8f514eff521c888e21b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "patch": "@@ -113,7 +113,7 @@ non_short_cint_operand (op, mode)\n    ctr, or lr).  */\n \n int\n-gen_reg_operand (op, mode)\n+gpc_reg_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n@@ -147,7 +147,7 @@ reg_or_short_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return short_cint_operand (op, mode);\n \n-  return gen_reg_operand (op, mode);\n+  return gpc_reg_operand (op, mode);\n }\n \n /* Similar, except check if the negation of the constant would be valid for\n@@ -161,7 +161,7 @@ reg_or_neg_short_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return CONST_OK_FOR_LETTER_P (INTVAL (op), 'P');\n \n-  return gen_reg_operand (op, mode);\n+  return gpc_reg_operand (op, mode);\n }\n \n /* Return 1 if the operand is either a register or an integer whose high-order\n@@ -176,7 +176,7 @@ reg_or_u_short_operand (op, mode)\n       && (INTVAL (op) & 0xffff0000) == 0)\n     return 1;\n \n-  return gen_reg_operand (op, mode);\n+  return gpc_reg_operand (op, mode);\n }\n \n /* Return 1 is the operand is either a non-special register or ANY\n@@ -187,7 +187,7 @@ reg_or_cint_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-     return GET_CODE (op) == CONST_INT || gen_reg_operand (op, mode);\n+     return GET_CODE (op) == CONST_INT || gpc_reg_operand (op, mode);\n }\n \n /* Return 1 if the operand is a CONST_DOUBLE and it can be put into a\n@@ -279,7 +279,7 @@ logical_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode;\n {\n-  return (gen_reg_operand (op, mode)\n+  return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n \t      && ((INTVAL (op) & 0xffff0000) == 0\n \t\t  || (INTVAL (op) & 0xffff) == 0)));\n@@ -364,7 +364,7 @@ reg_or_mem_operand (op, mode)\n      register rtx op;\n      register enum machine_mode mode;\n {\n-  return gen_reg_operand (op, mode) || memory_operand (op, mode);\n+  return gpc_reg_operand (op, mode) || memory_operand (op, mode);\n }\n \n /* Return 1 if the operand, used inside a MEM, is a valid first argument\n@@ -397,7 +397,7 @@ input_operand (op, mode)\n      is valid.  */\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT\n       || GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n-    return gen_reg_operand (op, mode);\n+    return gpc_reg_operand (op, mode);\n \n   /* The only cases left are integral modes one word or smaller (we\n      do not get called for MODE_CC values).  These can be in any"}, {"sha": "260c52c56443a823a5243d78691312d9b862a329", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cd2b37d9f7d7ea299d071d64641bc3ae105fa808", "patch": "@@ -1806,7 +1806,7 @@ toc_section ()\t\t\t\t\t\t\\\n   {\"short_cint_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\\\n-  {\"gen_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"gpc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"cc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\"}, {"sha": "775d8fc56a78831b17831d1e5957a0d5eadd894f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 637, "deletions": 637, "changes": 1274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd2b37d9f7d7ea299d071d64641bc3ae105fa808/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cd2b37d9f7d7ea299d071d64641bc3ae105fa808"}]}