{"sha": "d9bb58007e769e747896eb134370d08d8e250123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliYjU4MDA3ZTc2OWU3NDc4OTZlYjEzNDM3MGQwOGQ4ZTI1MDEyMw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2014-04-11T18:40:04Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2014-04-11T18:40:04Z"}, "message": "gcc:\n\n        * common/config/epiphany/epiphany-common.c\n        (epiphany_option_optimization_table): Enable section anchors by\n        default at -O1 or higher.\n        * config/epiphany/epiphany.c (TARGET_MAX_ANCHOR_OFFSET): Define.\n        (TARGET_MIN_ANCHOR_OFFSET): Likewise.\n        (epiphany_rtx_costs) <SET>: For binary operators, the set as such\n        carries no extra cost.\n        (epiphany_legitimate_address_p): For BLKmode, apply SImode check.\n        * config/epiphany/epiphany.h (ASM_OUTPUT_DEF): Define.\n        * config/epiphany/predicates.md (memclob_operand): New predicate.\n        * config/epiphany/epiphany.md (stack_adjust_add, stack_adjust_str):\n        Use memclob_operand predicate and X constraint for operand 3.\ngcc/testsuite:\n        * gcc.target/epiphany/t1068-2.c: New file.\n\nFrom-SVN: r209320", "tree": {"sha": "bd2ddc451cd395bd4cbcd63344363a4cedf06d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2ddc451cd395bd4cbcd63344363a4cedf06d81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9bb58007e769e747896eb134370d08d8e250123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bb58007e769e747896eb134370d08d8e250123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9bb58007e769e747896eb134370d08d8e250123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bb58007e769e747896eb134370d08d8e250123/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5d0ecea7981806ffb1277f3087b242104722d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0ecea7981806ffb1277f3087b242104722d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d0ecea7981806ffb1277f3087b242104722d36"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "6b5e623cec3a59b4d3842a41d0d6cc9dd7734a73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -1,3 +1,18 @@\n+2014-04-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* common/config/epiphany/epiphany-common.c\n+\t(epiphany_option_optimization_table): Enable section anchors by\n+\tdefault at -O1 or higher.\n+\t* config/epiphany/epiphany.c (TARGET_MAX_ANCHOR_OFFSET): Define.\n+\t(TARGET_MIN_ANCHOR_OFFSET): Likewise.\n+\t(epiphany_rtx_costs) <SET>: For binary operators, the set as such\n+\tcarries no extra cost.\n+\t(epiphany_legitimate_address_p): For BLKmode, apply SImode check.\n+\t* config/epiphany/epiphany.h (ASM_OUTPUT_DEF): Define.\n+\t* config/epiphany/predicates.md (memclob_operand): New predicate.\n+\t* config/epiphany/epiphany.md (stack_adjust_add, stack_adjust_str):\n+\tUse memclob_operand predicate and X constraint for operand 3.\n+\n 2014-04-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.c (epiphany_rtx_cost): Compare"}, {"sha": "23d372ef376d156821732ddd1d3f73c20054c416", "filename": "gcc/common/config/epiphany/epiphany-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fepiphany%2Fepiphany-common.c?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n static const struct default_options epiphany_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    /* Enable section anchors by default at -O1 or higher.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "f3955b916e9cd624a4a517132ee96d797d439f9f", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -145,6 +145,13 @@ static rtx frame_insn (rtx);\n   hook_bool_const_tree_hwi_hwi_const_tree_true\n #define TARGET_ASM_OUTPUT_MI_THUNK epiphany_output_mi_thunk\n \n+/* ??? we can use larger offsets for wider-mode sized accesses, but there\n+   is no concept of anchors being dependent on the modes that they are used\n+   for, so we can only use an offset range that would suit all modes.  */\n+#define TARGET_MAX_ANCHOR_OFFSET (optimize_size ? 31 : 2047)\n+/* We further restrict the minimum to be a multiple of eight.  */\n+#define TARGET_MIN_ANCHOR_OFFSET (optimize_size ? 0 : -2040)\n+\n #include \"target-def.h\"\n \n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -776,6 +783,15 @@ epiphany_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t  return false;\n \t}\n \n+\t\n+    case SET:\n+      {\n+\trtx src = SET_SRC (x);\n+\tif (BINARY_P (src))\n+\t  *total = 0;\n+\treturn false;\n+      }\n+\n     default:\n       return false;\n     }\n@@ -2016,7 +2032,7 @@ epiphany_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n       && LEGITIMATE_OFFSET_ADDRESS_P (mode, XEXP ((x), 1)))\n     return true;\n   if (mode == BLKmode)\n-    return true;\n+    return epiphany_legitimate_address_p (SImode, x, strict);\n   return false;\n }\n "}, {"sha": "1ca92e07b9e0b06dafb22825e3cec19dc551c477", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -942,4 +942,15 @@ extern rtl_opt_pass *make_pass_resolve_sw_modes (gcc::context *ctxt);\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n   epiphany_start_function ((FILE), (NAME), (DECL))\n \n+/* This is how we tell the assembler that two symbols have the same value.  */\n+#define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n+  do\t\t\t\t\t   \\\n+    {\t\t\t\t\t   \\\n+      assemble_name (FILE, NAME1); \t   \\\n+      fputs (\" = \", FILE);\t\t   \\\n+      assemble_name (FILE, NAME2);\t   \\\n+      fputc ('\\n', FILE);\t\t   \\\n+    }\t\t\t\t\t   \\\n+  while (0)\n+\n #endif /* !GCC_EPIPHANY_H */"}, {"sha": "d8d5555b099b96edb00f722ba93c587b516d6971", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -2380,7 +2380,7 @@\n \t(plus:SI (reg:SI GPR_SP) (match_operand:SI 0 \"arith_operand\" \"rL\")))\n    (clobber (reg:CC CC_REGNUM))\n    (clobber (reg:SI STATUS_REGNUM))\n-   (clobber (match_operand:BLK 1 \"memory_operand\" \"=m\"))]\n+   (clobber (match_operand:BLK 1 \"memclob_operand\" \"=X\"))]\n   \"reload_completed\"\n   \"add sp,sp,%0\")\n \n@@ -2396,7 +2396,7 @@\n \t(match_operand 1 \"any_gpr_operand\" \"r\"))\n    (set (reg:SI GPR_SP)\n \t(plus:SI (reg:SI GPR_SP) (match_operand:SI 2 \"nonmemory_operand\" \"rn\")))\n-   (clobber (match_operand:BLK 3 \"memory_operand\" \"=m\"))]\n+   (clobber (match_operand:BLK 3 \"memclob_operand\" \"=X\"))]\n   \"reload_completed\"\n {\n   return (GET_MODE_SIZE (GET_MODE (operands[0])) <= 4"}, {"sha": "fb5ee1239c4c1220127f3c3e6f6c4d78d869cfc7", "filename": "gcc/config/epiphany/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fpredicates.md?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -358,6 +358,11 @@\n   (and (match_code \"mem\")\n        (match_test \"post_modify_address (XEXP (op, 0), Pmode)\")))\n \n+; used in the memory clobber of stack_adjust_str, allows addresses with\n+; large offsets.\n+(define_predicate \"memclob_operand\"\n+  (match_code \"mem\"))\n+\n (define_predicate \"nonsymbolic_immediate_operand\"\n   (ior (match_test \"immediate_operand (op, mode)\")\n        (match_code \"const_vector\"))) /* Is this specific enough?  */"}, {"sha": "9e895272f3481129f6c67cf1a46b8ab732828807", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -1,3 +1,7 @@\n+2014-04-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* gcc.target/epiphany/t1068-2.c: New file.\n+\n 2014-04-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* gcc.target/epiphany/btst-1.c: New test."}, {"sha": "3baefcb909a1257aaf0900ae426d6b464ad8b7b2", "filename": "gcc/testsuite/gcc.target/epiphany/t1068-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Ft1068-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb58007e769e747896eb134370d08d8e250123/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Ft1068-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Ft1068-2.c?ref=d9bb58007e769e747896eb134370d08d8e250123", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-common\" } */\n+/* ??? we should be able to get down to 4 movt, but first we'll have to\n+   teach mov2add about flag handling.  Maybe add the code that was removed in\n+   r144425 from regmove to postreload; epiphany needs tweaks to the addsi3\n+   expander to generate a CC reg clobber in the pass.  */\n+/* { dg-final { scan-assembler-times \"movt\" 6 } } */\n+\n+typedef unsigned int uint32_t;\n+typedef unsigned int uint16_t;\n+\n+struct dma_desc {\n+   uint32_t config;\n+   uint32_t inner_stride;\n+   uint32_t count;\n+   uint32_t outer_stride;\n+   void *src_addr;\n+   void *dst_addr;\n+};\n+typedef struct dma_desc e_dma_desc_t;\n+\n+e_dma_desc_t dma;\n+int a;\n+int id[8];\n+#define NULL ((void *)0)\n+\n+static inline void _ez_dma_set(register e_dma_desc_t  *dma,\n+                uint32_t config,\n+                e_dma_desc_t *next,\n+                uint16_t inner_src, uint16_t inner_dst,\n+                uint16_t inner_count, uint16_t outer_count,\n+                uint16_t outer_src, uint16_t outer_dst,\n+                void *src, void*dst) {\n+   //register e_dma_desc_t *dmap = dma;\n+\n+   dma->config = config | (((uint32_t)next)<<16);\n+   dma->inner_stride = (inner_dst << 16) | inner_src;\n+   dma->count = (inner_count << 16) | outer_count;\n+   dma->outer_stride = (outer_dst << 16) | outer_src;\n+   dma->src_addr = src;\n+   dma->dst_addr = dst;\n+}\n+\n+void __attribute__((section(\".text.ds1\")))\n+dmas_inline1(void) {\n+   register e_dma_desc_t *dmap = &dma;\n+\n+   _ez_dma_set(dmap, 3, NULL,\n+          1, 2,\n+          12, 13,\n+          5, 1,\n+          id, &a);\n+}"}]}