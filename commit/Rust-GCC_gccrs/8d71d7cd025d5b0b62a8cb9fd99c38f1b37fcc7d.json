{"sha": "8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3MWQ3Y2QwMjVkNWIwYjYyYThjYjlmZDk5YzM4ZjFiMzdmY2M3ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-06-16T19:02:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-06-16T19:02:11Z"}, "message": "predict.c (force_edge_cold): Handle declaring edges impossible more aggresively.\n\n\n\n\t* predict.c (force_edge_cold): Handle declaring edges impossible\n\tmore aggresively.\n\nFrom-SVN: r249276", "tree": {"sha": "fed441147d5e488b93f698072d73bb2b5d0fd12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed441147d5e488b93f698072d73bb2b5d0fd12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d/comments", "author": null, "committer": null, "parents": [{"sha": "8fb0ae8223ee3529675d2f66aa4ca94af776e943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb0ae8223ee3529675d2f66aa4ca94af776e943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb0ae8223ee3529675d2f66aa4ca94af776e943"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "b22b567358efa826d79eae214c93de77f2d5d31e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "patch": "@@ -1,3 +1,8 @@\n+2017-06-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (force_edge_cold): Handle declaring edges impossible\n+\tmore aggresively.\n+\n 2017-06-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-loop-ivcanon.c (remove_exits_and_undefined_stmts): Update"}, {"sha": "60d1a094d1061ab579b346724d676708a80d57f1", "filename": "gcc/predict.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8d71d7cd025d5b0b62a8cb9fd99c38f1b37fcc7d", "patch": "@@ -3968,6 +3968,7 @@ force_edge_cold (edge e, bool impossible)\n   profile_count old_count = e->count;\n   int old_probability = e->probability;\n   int prob_scale = REG_BR_PROB_BASE;\n+  bool uninitialized_exit = false;\n \n   /* If edge is already improbably or cold, just return.  */\n   if (e->probability <= (impossible ? PROB_VERY_UNLIKELY : 0)\n@@ -3978,6 +3979,8 @@ force_edge_cold (edge e, bool impossible)\n       {\n \tif (e2->count.initialized_p ())\n \t  count_sum += e2->count;\n+\telse\n+\t  uninitialized_exit = true;\n \tprob_sum += e2->probability;\n       }\n \n@@ -3989,7 +3992,7 @@ force_edge_cold (edge e, bool impossible)\n \t = MIN (e->probability, impossible ? 0 : PROB_VERY_UNLIKELY);\n       if (impossible)\n \te->count = profile_count::zero ();\n-      if (old_probability)\n+      else if (old_probability)\n \te->count = e->count.apply_scale (e->probability, old_probability);\n       else\n         e->count = e->count.apply_scale (1, REG_BR_PROB_BASE);\n@@ -4016,6 +4019,34 @@ force_edge_cold (edge e, bool impossible)\n   else\n     {\n       e->probability = REG_BR_PROB_BASE;\n+      if (e->src->count == profile_count::zero ())\n+\treturn;\n+      if (count_sum == profile_count::zero () && !uninitialized_exit\n+\t  && impossible)\n+\t{\n+\t  bool found = false;\n+\t  for (gimple_stmt_iterator gsi = gsi_start_bb (e->src);\n+\t       !gsi_end_p (gsi); gsi_next (&gsi))\n+\t    {\n+\t      if (stmt_can_terminate_bb_p (gsi_stmt (gsi)))\n+\t\t{\n+\t\t  found = true;\n+\t          break;\n+\t\t}\n+\t    }\n+\t  if (!found)\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\tfprintf (dump_file,\n+\t\t\t \"Making bb %i impossible and dropping count to 0.\\n\",\n+\t\t\t e->src->index);\n+\t      e->count = profile_count::zero ();\n+\t      e->src->count = profile_count::zero ();\n+\t      FOR_EACH_EDGE (e2, ei, e->src->preds)\n+\t\tforce_edge_cold (e2, impossible);\n+\t      return;\n+\t    }\n+\t}\n \n       /* If we did not adjusting, the source basic block has no likely edeges\n  \t leaving other direction. In that case force that bb cold, too."}]}