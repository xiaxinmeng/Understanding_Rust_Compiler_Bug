{"sha": "58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhMTJiMGVhZGFjNjJlNjkxZmNmNzMyNWFiMmJjMmM5M2Q0NmI2MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:51:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-31T16:51:34Z"}, "message": "vect: Avoid generating out-of-range shifts [PR98302]\n\nIn this testcase we end up with:\n\n  unsigned long long x = ...;\n  char y = (char) (x << 37);\n\nThe overwidening pattern realised that only the low 8 bits\nof x << 37 are needed, but then tried to turn that into:\n\n  unsigned long long x = ...;\n  char y = (char) x << 37;\n\nwhich gives an out-of-range shift.  In this case y can simply\nbe replaced by zero, but as the comment in the patch says,\nit's kind-of awkward to do that in the middle of vectorisation.\n\nMost of the overwidening stuff is about keeping operations\nas narrow as possible, which is important for vectorisation\nbut could be counter-productive for scalars (especially on\nRISC targets).  In contrast, optimising y to zero in the above\nfeels like an independent optimisation that would benefit scalar\ncode and that should happen before vectorisation.\n\ngcc/\n\tPR tree-optimization/98302\n\t* tree-vect-patterns.c (vect_determine_precisions_from_users): Make\n\tsure that the precision remains greater than the shift count.\n\ngcc/testsuite/\n\tPR tree-optimization/98302\n\t* gcc.dg/vect/pr98302.c: New test.", "tree": {"sha": "b7ac28b1e0140db958c4791273cef3d0efea207f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ac28b1e0140db958c4791273cef3d0efea207f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a12b0eadac62e691fcf7325ab2bc2c93d46b61/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5b473b5b8e289b6542adfd5cfaddfb3036048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa5b473b5b8e289b6542adfd5cfaddfb3036048"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "dec601676299892182c51f9eee64a3a4ffb5f390", "filename": "gcc/testsuite/gcc.dg/vect/pr98302.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a12b0eadac62e691fcf7325ab2bc2c93d46b61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98302.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a12b0eadac62e691fcf7325ab2bc2c93d46b61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98302.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98302.c?ref=58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "patch": "@@ -0,0 +1,22 @@\n+#include \"tree-vect.h\"\n+\n+int c = 1705;\n+char a;\n+long f = 50887638;\n+unsigned long long *h(unsigned long long *k, unsigned long long *l) {\n+  return *k ? k : l;\n+}\n+void aa() {}\n+int main() {\n+  check_vect ();\n+\n+  long d = f;\n+  for (char g = 0; g < (char)c - 10; g += 2) {\n+    unsigned long long i = d, j = 4;\n+    a = *h(&i, &j) << ((d ? 169392992 : 0) - 169392955LL);\n+  }\n+  if (a)\n+    __builtin_abort();\n+\n+  return 0;\n+}"}, {"sha": "081ae80d430d857ad41c84ebdf0ba817bd30d1b8", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a12b0eadac62e691fcf7325ab2bc2c93d46b61/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a12b0eadac62e691fcf7325ab2bc2c93d46b61/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=58a12b0eadac62e691fcf7325ab2bc2c93d46b61", "patch": "@@ -4961,10 +4961,19 @@ vect_determine_precisions_from_users (stmt_vec_info stmt_info, gassign *stmt)\n \tunsigned int const_shift = TREE_INT_CST_LOW (shift);\n \tif (code == LSHIFT_EXPR)\n \t  {\n+\t    /* Avoid creating an undefined shift.\n+\n+\t       ??? We could instead use min_output_precision as-is and\n+\t       optimize out-of-range shifts to zero.  However, only\n+\t       degenerate testcases shift away all their useful input data,\n+\t       and it isn't natural to drop input operations in the middle\n+\t       of vectorization.  This sort of thing should really be\n+\t       handled before vectorization.  */\n+\t    operation_precision = MAX (stmt_info->min_output_precision,\n+\t\t\t\t       const_shift + 1);\n \t    /* We need CONST_SHIFT fewer bits of the input.  */\n-\t    operation_precision = stmt_info->min_output_precision;\n \t    min_input_precision = (MAX (operation_precision, const_shift)\n-\t\t\t\t    - const_shift);\n+\t\t\t\t   - const_shift);\n \t  }\n \telse\n \t  {"}]}