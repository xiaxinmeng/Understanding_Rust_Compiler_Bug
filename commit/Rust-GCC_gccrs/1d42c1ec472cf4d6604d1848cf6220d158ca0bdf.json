{"sha": "1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0MmMxZWM0NzJjZjRkNjYwNGQxODQ4Y2Y2MjIwZDE1OGNhMGJkZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-11T14:03:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-11T14:03:09Z"}, "message": "tree-vect-loop.c (get_initial_def_for_induction): Properly generate vector constants.\n\n2013-04-11  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (get_initial_def_for_induction): Properly\n\tgenerate vector constants.\n\nFrom-SVN: r197803", "tree": {"sha": "5d4910ad8f77a8ac100cf9768d4d40e057a15633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d4910ad8f77a8ac100cf9768d4d40e057a15633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6fcbc56da3aee8329a2c9c675b661ccd0cbb0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fcbc56da3aee8329a2c9c675b661ccd0cbb0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fcbc56da3aee8329a2c9c675b661ccd0cbb0b3"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "87683a4e02eedd39571aab77f27e0800aaf47e37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "patch": "@@ -1,3 +1,8 @@\n+2013-04-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Properly\n+\tgenerate vector constants.\n+\n 2013-04-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56878"}, {"sha": "a684c9ff5b6b3ca3576f29c16524bf0409514070", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "patch": "@@ -3226,30 +3226,36 @@ get_initial_def_for_induction (gimple iv_phi)\n \t}\n \n       vec_alloc (v, nunits);\n+      bool constant_p = is_gimple_min_invariant (new_name);\n       CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, new_name);\n       for (i = 1; i < nunits; i++)\n \t{\n \t  /* Create: new_name_i = new_name + step_expr  */\n \t  enum tree_code code = POINTER_TYPE_P (scalar_type)\n \t\t\t\t? POINTER_PLUS_EXPR : PLUS_EXPR;\n-\t  init_stmt = gimple_build_assign_with_ops (code, new_var,\n-\t\t\t\t\t\t    new_name, step_expr);\n-\t  new_name = make_ssa_name (new_var, init_stmt);\n-\t  gimple_assign_set_lhs (init_stmt, new_name);\n-\n-\t  new_bb = gsi_insert_on_edge_immediate (pe, init_stmt);\n-\t  gcc_assert (!new_bb);\n-\n-\t  if (dump_enabled_p ())\n+\t  new_name = fold_build2 (code, scalar_type, new_name, step_expr);\n+\t  if (!is_gimple_min_invariant (new_name))\n \t    {\n-\t      dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t       \"created new init_stmt: \");\n-\t      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, init_stmt, 0);\n+\t      init_stmt = gimple_build_assign (new_var, new_name);\n+\t      new_name = make_ssa_name (new_var, init_stmt);\n+\t      gimple_assign_set_lhs (init_stmt, new_name);\n+\t      new_bb = gsi_insert_on_edge_immediate (pe, init_stmt);\n+\t      gcc_assert (!new_bb);\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t   \"created new init_stmt: \");\n+\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, init_stmt, 0);\n+\t\t}\n+\t      constant_p = false;\n \t    }\n \t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, new_name);\n \t}\n       /* Create a vector from [new_name_0, new_name_1, ..., new_name_nunits-1]  */\n-      new_vec = build_constructor (vectype, v);\n+      if (constant_p)\n+\tnew_vec = build_vector_from_ctor (vectype, v);\n+      else\n+\tnew_vec = build_constructor (vectype, v);\n       vec_init = vect_init_vector (iv_phi, new_vec, vectype, NULL);\n     }\n "}]}