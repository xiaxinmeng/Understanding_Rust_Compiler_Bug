{"sha": "983de0da66b96b4f16808b60ebbc51cf6cc81917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzZGUwZGE2NmI5NmI0ZjE2ODA4YjYwZWJiYzUxY2Y2Y2M4MTkxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-09-29T21:14:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-29T21:14:43Z"}, "message": "std_sstream.h (basic_stringbuf(ios_base::openmode)): Don't use _M_stringbuf_init, keep the pointers null, per 27.7.1.1.\n\n2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/std_sstream.h (basic_stringbuf(ios_base::openmode)):\n\tDon't use _M_stringbuf_init, keep the pointers null, per 27.7.1.1.\n\t(str()): Slightly tweak, protect from pptr() == 0.\n\t(_M_update_egptr()): Likewise.\n\t* include/bits/sstream.tcc (ssekoff, seekpos): In order to check\n\tfor an empty buffer use __beg instead of _M_string.capacity().\n\t* testsuite/27_io/basic_stringbuf/cons/char/1.cc: New.\n\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/1.cc: Likewise.\n\n\t* testsuite/27_io/basic_filebuf/cons/char/1.cc: New.\n\t* testsuite/27_io/basic_filebuf/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/cons/char/1.cc: Update.\n\t* testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc: Likewise.\n\n2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/testsuite_io.h (class constraint_buf): New, extended\n\tand templatized version of constraint_filebuf; add typedefs for\n\tstreambuf/stringbuf/filebuf and wchar_t counterparts.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r88307", "tree": {"sha": "7ddbfb3d8fde45554eca1fb9fedb2a481d11dd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ddbfb3d8fde45554eca1fb9fedb2a481d11dd26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/983de0da66b96b4f16808b60ebbc51cf6cc81917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983de0da66b96b4f16808b60ebbc51cf6cc81917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/983de0da66b96b4f16808b60ebbc51cf6cc81917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983de0da66b96b4f16808b60ebbc51cf6cc81917/comments", "author": null, "committer": null, "parents": [{"sha": "302a2cc5c6b2e6e6e1778146f691e67a5ccd0eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302a2cc5c6b2e6e6e1778146f691e67a5ccd0eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302a2cc5c6b2e6e6e1778146f691e67a5ccd0eea"}], "stats": {"total": 422, "additions": 258, "deletions": 164}, "files": [{"sha": "d7feffc7b3ddb24a5e9aede5e5b0fcb4341e15b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -1,3 +1,26 @@\n+2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/std_sstream.h (basic_stringbuf(ios_base::openmode)):\n+\tDon't use _M_stringbuf_init, keep the pointers null, per 27.7.1.1.\n+\t(str()): Slightly tweak, protect from pptr() == 0.\n+\t(_M_update_egptr()): Likewise.\n+\t* include/bits/sstream.tcc (ssekoff, seekpos): In order to check\n+\tfor an empty buffer use __beg instead of _M_string.capacity().\n+\t* testsuite/27_io/basic_stringbuf/cons/char/1.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/1.cc: Likewise.\n+\n+\t* testsuite/27_io/basic_filebuf/cons/char/1.cc: New.\n+\t* testsuite/27_io/basic_filebuf/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/cons/char/1.cc: Update.\n+\t* testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc: Likewise.\n+\n+2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* testsuite/testsuite_io.h (class constraint_buf): New, extended\n+\tand templatized version of constraint_filebuf; add typedefs for\n+\tstreambuf/stringbuf/filebuf and wchar_t counterparts.\n+\n 2004-09-28  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/16612"}, {"sha": "bd05cc2eb43ca4e04303ccc7363667f44ba93111", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -123,6 +123,7 @@ namespace std\n \t{\n \t  // Update egptr() to match the actual string end.\n \t  _M_update_egptr();\n+\n \t  if (this->gptr() < this->egptr())\n \t    __ret = traits_type::to_int_type(*this->gptr());\n \t}\n@@ -141,10 +142,9 @@ namespace std\n       __testin &= !(__mode & ios_base::out);\n       __testout &= !(__mode & ios_base::in);\n \n-      if (_M_string.capacity() && (__testin || __testout || __testboth))\n+      const char_type* __beg = __testin ? this->eback() : this->pbase();\n+      if (__beg && (__testin || __testout || __testboth))\n \t{\n-\t  char_type* __beg = __testin ? this->eback() : this->pbase();\n-\n \t  _M_update_egptr();\n \n \t  off_type __newoffi = __off;\n@@ -181,15 +181,15 @@ namespace std\n     seekpos(pos_type __sp, ios_base::openmode __mode)\n     {\n       pos_type __ret =  pos_type(off_type(-1));\n-      if (_M_string.capacity())\n-\t{\n-\t  off_type __pos (__sp);\n-\t  const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n-\t  const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n-\t  char_type* __beg = __testin ? this->eback() : this->pbase();\n+      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n+      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n \n+      const char_type* __beg = __testin ? this->eback() : this->pbase();\n+      if (__beg)\n+\t{\n \t  _M_update_egptr();\n \n+\t  off_type __pos(__sp);\n \t  const bool __testpos = 0 <= __pos\n \t                         && __pos <=  this->egptr() - __beg;\n \t  if ((__testin || __testout) && __testpos)"}, {"sha": "0a6738adf8ad539b39d3150184f069a4258fa150", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -111,8 +111,8 @@ namespace std\n       */\n       explicit\n       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_mode(), _M_string()\n-      { _M_stringbuf_init(__mode); }\n+      : __streambuf_type(), _M_mode(__mode), _M_string()\n+      { }\n \n       /**\n        *  @brief  Starts with an existing string buffer.\n@@ -140,8 +140,7 @@ namespace std\n       __string_type\n       str() const\n       {\n-\tconst bool __testout = this->_M_mode & ios_base::out;\n-\tif (__testout)\n+\tif (this->pptr())\n \t  {\n \t    // The current egptr() may not be the actual string end.\n \t    if (this->pptr() > this->egptr())\n@@ -169,7 +168,7 @@ namespace std\n       }\n \n     protected:\n-      // Common initialization code for both ctors goes here.\n+      // Common initialization code goes here.\n       /**\n        *  @if maint\n        *  @doctodo\n@@ -277,9 +276,8 @@ namespace std\n       _M_update_egptr()\n       {\n \tconst bool __testin = this->_M_mode & ios_base::in;\n-\tconst bool __testout = this->_M_mode & ios_base::out;\n \n-\tif (__testout && this->pptr() > this->egptr())\n+\tif (this->pptr() && this->pptr() > this->egptr())\n \t  if (__testin)\n \t    this->setg(this->eback(), this->gptr(), this->pptr());\n \t  else"}, {"sha": "599309845cd7cf9e1ee1c798ecf5cbe5d3b669b7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/cons/char/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -0,0 +1,40 @@\n+// 2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.2  basic_filebuf constructors  [lib.filebuf.cons]\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-09/msg00243.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::constraint_filebuf fbuf;\n+  VERIFY( fbuf.check_pointers() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "083a81c0debad8607934f9e737b3e9eee400f6b8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/cons/wchar_t/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fwchar_t%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -0,0 +1,40 @@\n+// 2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.2  basic_filebuf constructors  [lib.filebuf.cons]\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-09/msg00243.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::constraint_wfilebuf fbuf;\n+  VERIFY( fbuf.check_pointers() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "76a344cfe233e27ce944f46a22c7d9e44f50fd43", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/char/1.cc", "status": "modified", "additions": 2, "deletions": 59, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fchar%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -31,69 +31,12 @@\n \n #include <streambuf>\n #include <testsuite_hooks.h>\n-\n-class testbuf : public std::streambuf\n-{\n-public:\n-\n-  // Typedefs:\n-  typedef std::streambuf::traits_type traits_type;\n-  typedef std::streambuf::char_type char_type;\n-\n-  testbuf(): std::streambuf() \n-  { }\n-\n-  bool\n-  check_pointers()\n-  { \n-    bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n-    return test;\n-  }\n-\n-  int_type \n-  pub_uflow() \n-  { return (this->uflow()); }\n-\n-  int_type \n-  pub_overflow(int_type __c = traits_type::eof()) \n-  { return (this->overflow(__c)); }\n-\n-  int_type \n-  pub_pbackfail(int_type __c) \n-  { return (this->pbackfail(__c)); }\n-\n-  void \n-  pub_setg(char* beg, char* cur, char *end) \n-  { this->setg(beg, cur, end); }\n-\n-  void \n-  pub_setp(char* beg, char* end) \n-  { this->setp(beg, end); }\n-\n-protected:\n-  int_type \n-  underflow() \n-  { \n-    int_type __retval = traits_type::eof();\n-    if (this->gptr() < this->egptr())\n-      __retval = traits_type::not_eof(0); \n-    return __retval;\n-  }\n-};\n+#include <testsuite_io.h>\n \n void test01()\n {\n-  typedef testbuf::traits_type traits_type;\n-  typedef testbuf::int_type int_type;\n-\n   bool test __attribute__((unused)) = true;\n-  testbuf buf01;\n+  __gnu_test::constraint_streambuf buf01;\n \n   // 27.5.2.1 basic_streambuf ctors\n   // default ctor initializes "}, {"sha": "1721e4a820a2f073b4f4b4e35c1bef61d2dc053e", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 59, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -32,69 +32,12 @@\n \n #include <streambuf>\n #include <testsuite_hooks.h>\n-\n-class testbuf : public std::wstreambuf\n-{\n-public:\n-\n-  // Typedefs:\n-  typedef std::wstreambuf::traits_type traits_type;\n-  typedef std::wstreambuf::char_type char_type;\n-\n-  testbuf(): std::wstreambuf() \n-  { }\n-\n-  bool\n-  check_pointers()\n-  { \n-    bool test __attribute__((unused)) = true;\n-    VERIFY( this->eback() == NULL );\n-    VERIFY( this->gptr() == NULL );\n-    VERIFY( this->egptr() == NULL );\n-    VERIFY( this->pbase() == NULL );\n-    VERIFY( this->pptr() == NULL );\n-    VERIFY( this->epptr() == NULL );\n-    return test;\n-  }\n-\n-  int_type \n-  pub_uflow() \n-  { return (this->uflow()); }\n-\n-  int_type \n-  pub_overflow(int_type __c = traits_type::eof()) \n-  { return (this->overflow(__c)); }\n-\n-  int_type \n-  pub_pbackfail(int_type __c) \n-  { return (this->pbackfail(__c)); }\n-\n-  void \n-  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n-  { this->setg(beg, cur, end); }\n-\n-  void \n-  pub_setp(wchar_t* beg, wchar_t* end) \n-  { this->setp(beg, end); }\n-\n-protected:\n-  int_type \n-  underflow() \n-  { \n-    int_type __retval = traits_type::eof();\n-    if (this->gptr() < this->egptr())\n-      __retval = traits_type::not_eof(0); \n-    return __retval;\n-  }\n-};\n+#include <testsuite_io.h>\n \n void test01()\n {\n-  typedef testbuf::traits_type traits_type;\n-  typedef testbuf::int_type int_type;\n-\n   bool test __attribute__((unused)) = true;\n-  testbuf buf01;\n+  __gnu_test::constraint_wstreambuf buf01;\n \n   // 27.5.2.1 basic_streambuf ctors\n   // default ctor initializes "}, {"sha": "cf82e029d616b47a7e6ee44c6740987aeae41d61", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/char/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -0,0 +1,40 @@\n+// 2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-09/msg00243.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::constraint_stringbuf sbuf;\n+  VERIFY( sbuf.check_pointers() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "10abc588786baccdea5c1bf358339d2fddac2734", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/wchar_t/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F1.cc?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -0,0 +1,40 @@\n+// 2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-09/msg00243.html\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::constraint_wstringbuf sbuf;\n+  VERIFY( sbuf.check_pointers() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "809d0801c6de5b931e75af627a41de98f8f49b94", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983de0da66b96b4f16808b60ebbc51cf6cc81917/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=983de0da66b96b4f16808b60ebbc51cf6cc81917", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n-// Testing filebuf for the C++ library testsuite.\n+// Testing streambuf/filebuf/stringbuf for the C++ library testsuite.\n //\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #define _GLIBCXX_TESTSUITE_IO_H\n \n #include <fstream>\n+#include <sstream>\n \n namespace __gnu_test\n {  \n@@ -44,34 +45,60 @@ namespace __gnu_test\n   //   Joint file position\n   // 27.8.1.4 - Overridden virtual functions p9\n   //   If unbuffered, pbase == pptr == NULL\n-  class constraint_filebuf: public std::filebuf\n-  {\n-  public:\n-    bool\n-    write_position() \n-    { \n-      bool two = this->pptr() != NULL; \n-      bool one = this->pptr() < this->epptr();\n-      return one && two;\n-    }\n-\n-    bool\n-    read_position()\n-    { \n-      bool one = this->gptr() != NULL; \n-      bool two = this->gptr() < this->egptr();\n-\n-      return one && two;\n-    }\n-\n-    bool\n-    unbuffered() \n-    { \n-      bool one = this->pbase() == NULL; \n-      bool two = this->pptr() == NULL; \n-      return one && two;\n-    }    \n-  };\n+  // 27.7.1.1 - Basic_stringbuf constructors p 1\n+  // 27.8.1.2 - Basic_filebuf constructors p 1\n+  //   ... , initializing the base class with basic_streambuf() 27.5.2.1\n+  template<typename T>\n+    class constraint_buf\n+    : public T\n+    {\n+    public:\n+      bool\n+      write_position() \n+      { \n+\tbool one = this->pptr() != NULL; \n+\tbool two = this->pptr() < this->epptr();\n+\treturn one && two;\n+      }\n+      \n+      bool\n+      read_position()\n+      { \n+\tbool one = this->gptr() != NULL; \n+\tbool two = this->gptr() < this->egptr();\n+\treturn one && two;\n+      }\n+      \n+      bool\n+      unbuffered() \n+      { \n+\tbool one = this->pbase() == NULL; \n+\tbool two = this->pptr() == NULL; \n+\treturn one && two;\n+      }\n+  \n+      bool\n+      check_pointers()\n+      {\n+\tbool one   = this->eback() == NULL;\n+\tbool two   = this->gptr() == NULL;\n+\tbool three = this->egptr() == NULL;\n+\t\n+\tbool four  = this->pbase() == NULL;\n+\tbool five  = this->pptr() == NULL;\n+\tbool six   = this->epptr() == NULL;\n+\treturn one && two && three && four && five && six;\n+      }\n+    };\n+\n+  typedef  constraint_buf<std::streambuf>   constraint_streambuf;\n+  typedef  constraint_buf<std::filebuf>     constraint_filebuf;\n+  typedef  constraint_buf<std::stringbuf>   constraint_stringbuf;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef  constraint_buf<std::wstreambuf>  constraint_wstreambuf;\n+  typedef  constraint_buf<std::wfilebuf>    constraint_wfilebuf;\n+  typedef  constraint_buf<std::wstringbuf>  constraint_wstringbuf;\n+#endif\n \n   // Used to check if basic_streambuf::pubsync() has been called.\n   // This is useful for checking if a function creates [io]stream::sentry"}]}