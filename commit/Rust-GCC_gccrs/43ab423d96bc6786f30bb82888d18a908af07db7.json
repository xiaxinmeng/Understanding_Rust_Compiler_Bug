{"sha": "43ab423d96bc6786f30bb82888d18a908af07db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhYjQyM2Q5NmJjNjc4NmYzMGJiODI4ODhkMThhOTA4YWYwN2RiNw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-09-25T18:34:06Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-09-25T18:34:06Z"}, "message": "altivec-6.C: Updated vec_splat() calls.\n\n[testsuite]\n\n2018-09-25  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n    * g++.dg/ext/altivec-6.C: Updated vec_splat() calls.\n    * gcc.target/powerpc/fold-vec-splat-char.c: Remove invalid\n    vec_splat calls from recently added tests. Update instruction counts.\n    * gcc.target/powerpc/fold-vec-splat-floatdouble.c: Same.\n    * gcc.target/powerpc/fold-vec-splat-int.c: Same.\n    * gcc.target/powerpc/fold-vec-splat-longlong.c: Same.\n    * gcc.target/powerpc/fold-vec-splat-pixel.c: Same.\n    * gcc.target/powerpc/fold-vec-splat-short.c: Same.\n\nFrom-SVN: r264582", "tree": {"sha": "e8ec25ad986af271e39c7c10c936035b12d1069a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ec25ad986af271e39c7c10c936035b12d1069a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ab423d96bc6786f30bb82888d18a908af07db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ab423d96bc6786f30bb82888d18a908af07db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ab423d96bc6786f30bb82888d18a908af07db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ab423d96bc6786f30bb82888d18a908af07db7/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5bfbcc85c030d2ae6efeca8224c587ef3beb2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bfbcc85c030d2ae6efeca8224c587ef3beb2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bfbcc85c030d2ae6efeca8224c587ef3beb2b7"}], "stats": {"total": 181, "additions": 46, "deletions": 135}, "files": [{"sha": "da2d96c4a3067b0607f0842b79fc26efa5e3fa4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -1,3 +1,14 @@\n+2018-09-25  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* g++.dg/ext/altivec-6.C: Updated vec_splat() calls.\n+\t* gcc.target/powerpc/fold-vec-splat-char.c: Remove invalid\n+\tvec_splat calls from recently added tests. Update instruction counts.\n+\t* gcc.target/powerpc/fold-vec-splat-floatdouble.c: Same.\n+\t* gcc.target/powerpc/fold-vec-splat-int.c: Same.\n+\t* gcc.target/powerpc/fold-vec-splat-longlong.c: Same.\n+\t* gcc.target/powerpc/fold-vec-splat-pixel.c: Same.\n+\t* gcc.target/powerpc/fold-vec-splat-short.c: Same.\n+\n 2018-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87425"}, {"sha": "4c863ef0e762fdfb10e6a80c26b8127ba388d406", "filename": "gcc/testsuite/g++.dg/ext/altivec-6.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-6.C?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -22,7 +22,9 @@ void foo(void) {\n \n   vp = vec_sld(vp, vp, 5);\n   vbc = vec_splat(vbc, 7);\n-  vbs = vec_splat(vbs, 12);\n-  vp = vec_splat(vp, 17);\n-  vbi = vec_splat(vbi, 31);  \n+  /*  The second argument to vec_splat needs to be less than the number of\n+   elements in the referenced vector.  */\n+  vbs = vec_splat(vbs, 4);\n+  vp = vec_splat(vp, 1);\n+  vbi = vec_splat(vbi, 15);  \n }"}, {"sha": "fbe347c67e6f6d34f45a4d73d3693926a8f19ccf", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-char.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-char.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -12,27 +12,18 @@ vector bool char testb_1  (vector bool char x) { return vec_splat (x, 0b00001);\n vector bool char testb_2  (vector bool char x) { return vec_splat (x, 0b00010); }\n vector bool char testb_4  (vector bool char x) { return vec_splat (x, 0b00100); }\n vector bool char testb_8  (vector bool char x) { return vec_splat (x, 0b01000); }\n-vector bool char testb_10 (vector bool char x) { return vec_splat (x, 0b10000); }\n-vector bool char testb_1e (vector bool char x) { return vec_splat (x, 0b11110); }\n-vector bool char testb_1f (vector bool char x) { return vec_splat (x, 0b11111); }\n \n vector signed char tests_0  (vector signed char x) { return vec_splat (x, 0b00000); }\n vector signed char tests_1  (vector signed char x) { return vec_splat (x, 0b00001); }\n vector signed char tests_2  (vector signed char x) { return vec_splat (x, 0b00010); }\n vector signed char tests_4  (vector signed char x) { return vec_splat (x, 0b00100); }\n vector signed char tests_8  (vector signed char x) { return vec_splat (x, 0b01000); }\n-vector signed char tests_10 (vector signed char x) { return vec_splat (x, 0b10000); }\n-vector signed char tests_1e (vector signed char x) { return vec_splat (x, 0b11110); }\n-vector signed char tests_1f (vector signed char x) { return vec_splat (x, 0b11111); }\n \n vector unsigned char testu_0  (vector unsigned char x) { return vec_splat (x, 0b00000); }\n vector unsigned char testu_1  (vector unsigned char x) { return vec_splat (x, 0b00001); }\n vector unsigned char testu_2  (vector unsigned char x) { return vec_splat (x, 0b00010); }\n vector unsigned char testu_4  (vector unsigned char x) { return vec_splat (x, 0b00100); }\n vector unsigned char testu_8  (vector unsigned char x) { return vec_splat (x, 0b01000); }\n-vector unsigned char testu_10 (vector unsigned char x) { return vec_splat (x, 0b10000); }\n-vector unsigned char testu_1e (vector unsigned char x) { return vec_splat (x, 0b11110); }\n-vector unsigned char testu_1f (vector unsigned char x) { return vec_splat (x, 0b11111); }\n \n /* Similar tests as above, but the source vector is a known constant. */\n const vector bool char by = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'};\n@@ -43,13 +34,7 @@ vector bool char test_bc (vector bool char x) { return vec_splat (by, 0b00010);\n vector signed char test_sc (vector signed char x) { return vec_splat (sy, 0b00011); }\n vector unsigned char test_uc (vector unsigned char x) { return vec_splat (uy, 0b00110); }\n \n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector bool char test_obc (vector bool char x) { return vec_splat (by, 0b10010); }\n-vector signed char test_osc (vector signed char x) { return vec_splat (sy, 0b10011); }\n-vector unsigned char test_ouc (vector unsigned char x) { return vec_splat (uy, 0b10110); }\n-\n // vec_splat() using variable vectors should generate the vspltb instruction.\n-/* { dg-final { scan-assembler-times \"vspltb\" 24 } } */\n-// vec_splat() using a constant vector should generate a load.\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M} 6 } } */\n+/* { dg-final { scan-assembler-times \"vspltb\" 15 } } */\n+// vec_splat() using a constant vector will generate a load or a splat immediate byte.\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvw4x\\M|\\mxxspltib\\M} 3 } } */"}, {"sha": "ab396967c3d418c6cf38642ae0fb2602d13db561", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-floatdouble.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -7,40 +7,25 @@\n \n #include <altivec.h>\n \n+/* Floats.  */\n vector float testf_00 (vector float x) { return vec_splat (x, 0b00000); }\n vector float testf_01 (vector float x) { return vec_splat (x, 0b00001); }\n vector float testf_02 (vector float x) { return vec_splat (x, 0b00010); }\n-vector float testf_04 (vector float x) { return vec_splat (x, 0b00100); }\n-vector float testf_08 (vector float x) { return vec_splat (x, 0b01000); }\n-vector float testf_0f (vector float x) { return vec_splat (x, 0b01111); }\n-vector float testf_10 (vector float x) { return vec_splat (x, 0b10000); }\n-vector float testf_1e (vector float x) { return vec_splat (x, 0b11110); }\n-vector float testf_1f (vector float x) { return vec_splat (x, 0b11111); }\n+vector float test_fc ()\n+{ const vector float y = { 7.1, 8.2, 9.3, 10.4}; return vec_splat (y, 0b00010); }\n \n+/* Doubles.  */\n vector double testd_00 (vector double x) { return vec_splat (x, 0b00000); }\n vector double testd_01 (vector double x) { return vec_splat (x, 0b00001); }\n-vector double testd_02 (vector double x) { return vec_splat (x, 0b00010); }\n-vector double testd_04 (vector double x) { return vec_splat (x, 0b00100); }\n-vector double testd_08 (vector double x) { return vec_splat (x, 0b01000); }\n-vector double testd_0f (vector double x) { return vec_splat (x, 0b01111); }\n-vector double testd_10 (vector double x) { return vec_splat (x, 0b10000); }\n-vector double testd_1e (vector double x) { return vec_splat (x, 0b11110); }\n-vector double testd_1f (vector double x) { return vec_splat (x, 0b11111); }\n-\n-/* Similar tests as above, but the source vector is a known constant. */\n-vector float test_fc () { const vector float y = { 7.1, 8.2, 9.3, 10.4}; return vec_splat (y, 0b00010); }\n-vector double test_dc () { const vector double y = { 3.0, 5.0 }; return vec_splat (y, 0b00010); }\n-\n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector float test_ofc () { const vector float y = { 7.1, 8.2, 9.3, 10.4}; return vec_splat (y, 0b10010); }\n-vector double test_odc () { const vector double y = { 3.0, 5.0 }; return vec_splat (y, 0b10010); }\n-\n-/* lvx or lxvd2x for loading of the constants.  */\n-/* vspltw or xxspltw for non-constants with the float type.  */\n-/* xxpermdi for non-constants with the double type.  */\n-\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M} 4 } } */\n-/* { dg-final { scan-assembler-times \"vspltw|xxspltw\" 9 } } */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 9 } } */\n+vector double test_dc ()\n+{ const vector double y = { 3.0, 5.0 }; return vec_splat (y, 0b00010); }\n+\n+/* If the source vector is a known constant, we will generate a load.  */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxv\\M} 2 } } */\n+\n+/* For float types, we generate a splat.  */\n+/* { dg-final { scan-assembler-times \"vspltw|xxspltw\" 3 } } */\n+\n+/* For double types, we will generate xxpermdi instructions.  */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 3 } } */\n "}, {"sha": "5df96d11acb5c696bd190294dd0ae5840de18fde", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-int.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-int.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -10,41 +10,20 @@\n vector bool int testb_0  (vector bool int x) { return vec_splat (x, 0b00000); }\n vector bool int testb_1  (vector bool int x) { return vec_splat (x, 0b00001); }\n vector bool int testb_2  (vector bool int x) { return vec_splat (x, 0b00010); }\n-vector bool int testb_4  (vector bool int x) { return vec_splat (x, 0b00100); }\n-vector bool int testb_8  (vector bool int x) { return vec_splat (x, 0b01000); }\n-vector bool int testb_10 (vector bool int x) { return vec_splat (x, 0b10000); }\n-vector bool int testb_1e (vector bool int x) { return vec_splat (x, 0b11110); }\n-vector bool int testb_1f (vector bool int x) { return vec_splat (x, 0b11111); }\n \n vector signed int tests_0  (vector signed int x) { return vec_splat (x, 0b00000); }\n vector signed int tests_1  (vector signed int x) { return vec_splat (x, 0b00001); }\n vector signed int tests_2  (vector signed int x) { return vec_splat (x, 0b00010); }\n-vector signed int tests_4  (vector signed int x) { return vec_splat (x, 0b00100); }\n-vector signed int tests_8  (vector signed int x) { return vec_splat (x, 0b01000); }\n-vector signed int tests_10 (vector signed int x) { return vec_splat (x, 0b10000); }\n-vector signed int tests_1e (vector signed int x) { return vec_splat (x, 0b11110); }\n-vector signed int tests_1f (vector signed int x) { return vec_splat (x, 0b11111); }\n \n vector unsigned int testu_0  (vector unsigned int x) { return vec_splat (x, 0b00000); }\n vector unsigned int testu_1  (vector unsigned int x) { return vec_splat (x, 0b00001); }\n vector unsigned int testu_2  (vector unsigned int x) { return vec_splat (x, 0b00010); }\n-vector unsigned int testu_4  (vector unsigned int x) { return vec_splat (x, 0b00100); }\n-vector unsigned int testu_8  (vector unsigned int x) { return vec_splat (x, 0b01000); }\n-vector unsigned int testu_10 (vector unsigned int x) { return vec_splat (x, 0b10000); }\n-vector unsigned int testu_1e (vector unsigned int x) { return vec_splat (x, 0b11110); }\n-vector unsigned int testu_1f (vector unsigned int x) { return vec_splat (x, 0b11111); }\n \n /* Similar test as above, but the source vector is a known constant. */\n vector bool int test_bic () { const vector bool int y = { 1,2,3,4}; return vec_splat (y, 0b00010); }\n vector signed int test_sic () { const vector signed int y = { 1,2,3,4}; return vec_splat (y, 0b00010); }\n vector unsigned int test_uic () { const vector unsigned int y = { 1,2,3,4}; return vec_splat (y, 0b00010); }\n \n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector bool int test_obic () { const vector bool int y = { 1,2,3,4}; return vec_splat (y, 0b10010); }\n-vector signed int test_osic () { const vector signed int y = { 1,2,3,4}; return vec_splat (y, 0b10010); }\n-vector unsigned int test_ouic () { const vector unsigned int y = { 1,2,3,4}; return vec_splat (y, 0b10010); }\n-\n-/* { dg-final { scan-assembler-times \"vspltisw\" 6 } } */\n-/* { dg-final { scan-assembler-times \"vspltw|xxspltw\" 24 } } */\n+/* { dg-final { scan-assembler-times \"vspltisw\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vspltw|xxspltw\" 9 } } */\n "}, {"sha": "4fa06c85ecc61df6d7e9e1acfc3b83fb32f439f8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-longlong.c", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -10,51 +10,26 @@\n vector bool long long testb_00 (vector bool long long x) { return vec_splat (x, 0b00000); }\n vector bool long long testb_01 (vector bool long long x) { return vec_splat (x, 0b00001); }\n vector bool long long testb_02 (vector bool long long x) { return vec_splat (x, 0b00010); }\n-vector bool long long testb_04 (vector bool long long x) { return vec_splat (x, 0b00100); }\n-vector bool long long testb_08 (vector bool long long x) { return vec_splat (x, 0b01000); }\n-vector bool long long testb_10 (vector bool long long x) { return vec_splat (x, 0b10000); }\n-vector bool long long testb_1e (vector bool long long x) { return vec_splat (x, 0b11110); }\n-vector bool long long testb_1f (vector bool long long x) { return vec_splat (x, 0b11111); }\n \n vector signed long long tests_00 (vector signed long long x) { return vec_splat (x, 0b00000); }\n vector signed long long tests_01 (vector signed long long x) { return vec_splat (x, 0b00001); }\n vector signed long long tests_02 (vector signed long long x) { return vec_splat (x, 0b00010); }\n-vector signed long long tests_04 (vector signed long long x) { return vec_splat (x, 0b00100); }\n-vector signed long long tests_08 (vector signed long long x) { return vec_splat (x, 0b01000); }\n-vector signed long long tests_10 (vector signed long long x) { return vec_splat (x, 0b10000); }\n-vector signed long long tests_1e (vector signed long long x) { return vec_splat (x, 0b11110); }\n-vector signed long long tests_1f (vector signed long long x) { return vec_splat (x, 0b11111); }\n \n vector unsigned long long testu_00 (vector unsigned long long x) { return vec_splat (x, 0b00000); }\n vector unsigned long long testu_01 (vector unsigned long long x) { return vec_splat (x, 0b00001); }\n vector unsigned long long testu_02 (vector unsigned long long x) { return vec_splat (x, 0b00010); }\n-vector unsigned long long testu_04 (vector unsigned long long x) { return vec_splat (x, 0b00100); }\n-vector unsigned long long testu_08 (vector unsigned long long x) { return vec_splat (x, 0b01000); }\n-vector unsigned long long testu_10 (vector unsigned long long x) { return vec_splat (x, 0b10000); }\n-vector unsigned long long testu_1e (vector unsigned long long x) { return vec_splat (x, 0b11110); }\n-vector unsigned long long testu_1f (vector unsigned long long x) { return vec_splat (x, 0b11111); }\n \n /* Similar test as above, but the source vector is a known constant. */\n vector bool long long test_bll () { const vector bool long long y = {12, 23}; return vec_splat (y, 0b00010); }\n vector signed long long test_sll () { const vector signed long long y = {34, 45}; return vec_splat (y, 0b00010); }\n vector unsigned long long test_ull () { const vector unsigned long long y = {56, 67}; return vec_splat (y, 0b00010); }\n \n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector bool long long test_obll () { const vector bool long long y = {12, 23}; return vec_splat (y, 0b10010); }\n-vector signed long long test_osll () { const vector signed long long y = {34, 45}; return vec_splat (y, 0b10010); }\n-vector unsigned long long test_oull () { const vector unsigned long long y = {56, 67}; return vec_splat (y, 0b10010); }\n-\n-/* lvx for the initialization with known constants. */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M} 6 } } */\n+/* Assorted load instructions for the initialization with known constants. */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxv\\M} 3 } } */\n \n /* xxpermdi for vec_splat of long long vectors.\n-   At the time of this writing, the number of xxpermdi instructions\n-   generated could be 24 or 26 or 27, ultimately depending on the\n-   platform and whether or not folding is enabled.\n-   Roughly:\n-\t24 occurrences on older targets (power5) regardless of folding state.\n-\t26 occurrences with gimple folding enabled (through power9).\n-\t27 occurrences with gimple folding disabled (through power9).\n-  So, ensure we have at least one hit.  */\n+ At the time of this writing, the number of xxpermdi instructions\n+ generated will vary depending on the target processor (p5/p6/p7/p8/...)\n+ and whether or not folding is enabled.\n+ So, ensure we have at least one hit.  */\n /* { dg-final { scan-assembler \"xxpermdi\" } } */"}, {"sha": "bb9b516fa5c65968fd6ade75f5d4a528237ad2b8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-pixel.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-pixel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-pixel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-pixel.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -11,17 +11,9 @@ vector pixel test1_00 (vector pixel x) { return vec_splat (x, 0b00000); }\n vector pixel test1_01 (vector pixel x) { return vec_splat (x, 0b00001); }\n vector pixel test1_02 (vector pixel x) { return vec_splat (x, 0b00010); }\n vector pixel test1_04 (vector pixel x) { return vec_splat (x, 0b00100); }\n-vector pixel test1_08 (vector pixel x) { return vec_splat (x, 0b01000); }\n-vector pixel test1_10 (vector pixel x) { return vec_splat (x, 0b10000); }\n-vector pixel test1_1e (vector pixel x) { return vec_splat (x, 0b11110); }\n-vector pixel test1_1f (vector pixel x) { return vec_splat (x, 0b11111); }\n \n /* Similar test as above, but the source vector is a known constant. */\n vector pixel test_p () { const vector pixel y = { 1,2,3,4}; return vec_splat (y, 0b00010); }\n \n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector pixel test_op () { const vector pixel y = { 1,2,3,4}; return vec_splat (y, 0b10010); }\n-\n-/* { dg-final { scan-assembler-times \"vspltish\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vsplth\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vspltish\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsplth\" 4 } } */"}, {"sha": "92bdfa4525fdc7c0915ec26c302fcadd6405cdf5", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-short.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ab423d96bc6786f30bb82888d18a908af07db7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-short.c?ref=43ab423d96bc6786f30bb82888d18a908af07db7", "patch": "@@ -11,39 +11,21 @@ vector bool short testb_00 (vector bool short x) { return vec_splat (x, 0b00000)\n vector bool short testb_01 (vector bool short x) { return vec_splat (x, 0b00001); }\n vector bool short testb_02 (vector bool short x) { return vec_splat (x, 0b00010); }\n vector bool short testb_04 (vector bool short x) { return vec_splat (x, 0b00100); }\n-vector bool short testb_08 (vector bool short x) { return vec_splat (x, 0b01000); }\n-vector bool short testb_10 (vector bool short x) { return vec_splat (x, 0b10000); }\n-vector bool short testb_1e (vector bool short x) { return vec_splat (x, 0b11110); }\n-vector bool short testb_1f (vector bool short x) { return vec_splat (x, 0b11111); }\n \n vector signed short tests_00 (vector signed short x) { return vec_splat (x, 0b00000); }\n vector signed short tests_01 (vector signed short x) { return vec_splat (x, 0b00001); }\n vector signed short tests_02 (vector signed short x) { return vec_splat (x, 0b00010); }\n vector signed short tests_04 (vector signed short x) { return vec_splat (x, 0b00100); }\n-vector signed short tests_08 (vector signed short x) { return vec_splat (x, 0b01000); }\n-vector signed short tests_10 (vector signed short x) { return vec_splat (x, 0b10000); }\n-vector signed short tests_1e (vector signed short x) { return vec_splat (x, 0b11110); }\n-vector signed short tests_1f (vector signed short x) { return vec_splat (x, 0b11111); }\n \n vector unsigned short testu_00 (vector unsigned short x) { return vec_splat (x, 0b00000); }\n vector unsigned short testu_01 (vector unsigned short x) { return vec_splat (x, 0b00001); }\n vector unsigned short testu_02 (vector unsigned short x) { return vec_splat (x, 0b00010); }\n vector unsigned short testu_04 (vector unsigned short x) { return vec_splat (x, 0b00100); }\n-vector unsigned short testu_08 (vector unsigned short x) { return vec_splat (x, 0b01000); }\n-vector unsigned short testu_10 (vector unsigned short x) { return vec_splat (x, 0b10000); }\n-vector unsigned short testu_1e (vector unsigned short x) { return vec_splat (x, 0b11110); }\n-vector unsigned short testu_1f (vector unsigned short x) { return vec_splat (x, 0b11111); }\n \n /* Similar test as above, but the source vector is a known constant. */\n vector bool short test_bs () { const vector bool short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b00010); }\n vector signed short test_ss () { const vector signed short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b00010); }\n vector unsigned short test_us () { const vector unsigned short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b00010); }\n \n-/* Similar tests as above, mask is greater than number of elements in the\n- source vector.  */\n-vector bool short test_obs () { const vector bool short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b10010); }\n-vector signed short test_oss () { const vector signed short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b10010); }\n-vector unsigned short test_ous () { const vector unsigned short y = {1, 2, 3, 4, 5, 6, 7, 8}; return vec_splat (y, 0b10010); }\n-\n-/* { dg-final { scan-assembler-times \"vspltish\" 6 } } */\n-/* { dg-final { scan-assembler-times \"vsplth\" 24 } } */\n+/* { dg-final { scan-assembler-times \"vspltish\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vsplth\" 12 } } */"}]}