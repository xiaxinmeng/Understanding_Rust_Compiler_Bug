{"sha": "a5d269f0c1cda545a86da960e8989bea862dd75e", "node_id": "C_kwDOANBUbNoAKGE1ZDI2OWYwYzFjZGE1NDVhODZkYTk2MGU4OTg5YmVhODYyZGQ3NWU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-29T10:45:11Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-29T10:48:06Z"}, "message": "x86_64: Improved V1TImode rotations by non-constant amounts.\n\nThis patch builds on the recent improvements to TImode rotations (and\nJakub's fixes to shldq/shrdq patterns).  Now that expanding a TImode\nrotation can never fail, it is safe to allow general_operand constraints\non the QImode shift amounts in rotlv1ti3 and rotrv1ti3 patterns.\nI've also made an additional tweak to ix86_expand_v1ti_to_ti to use\nvec_extract via V2DImode, which avoid using memory and takes advantage\nvpextrq on recent hardware.\n\nFor the following test case:\n\ntypedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\nuv1ti rotr(uv1ti x, unsigned int i) { return (x >> i) | (x << (128-i)); }\n\nGCC with -O2 -mavx2 would previously generate:\n\nrotr:   vmovdqa %xmm0, -24(%rsp)\n        movq    -16(%rsp), %rdx\n        movl    %edi, %ecx\n        xorl    %esi, %esi\n        movq    -24(%rsp), %rax\n        shrdq   %rdx, %rax\n        shrq    %cl, %rdx\n        testb   $64, %dil\n        cmovne  %rdx, %rax\n        cmovne  %rsi, %rdx\n        negl    %ecx\n        xorl    %edi, %edi\n        andl    $127, %ecx\n        vmovq   %rax, %xmm2\n        movq    -24(%rsp), %rax\n        vpinsrq $1, %rdx, %xmm2, %xmm1\n        movq    -16(%rsp), %rdx\n        shldq   %rax, %rdx\n        salq    %cl, %rax\n        testb   $64, %cl\n        cmovne  %rax, %rdx\n        cmovne  %rdi, %rax\n        vmovq   %rax, %xmm3\n        vpinsrq $1, %rdx, %xmm3, %xmm0\n        vpor    %xmm1, %xmm0, %xmm0\n        ret\n\nwith this patch, we now generate:\n\nrotr:\tmovl    %edi, %ecx\n        vpextrq $1, %xmm0, %rax\n        vmovq   %xmm0, %rdx\n        shrdq   %rax, %rdx\n        vmovq   %xmm0, %rsi\n        shrdq   %rsi, %rax\n        andl    $64, %ecx\n        movq    %rdx, %rsi\n        cmovne  %rax, %rsi\n        cmove   %rax, %rdx\n        vmovq   %rsi, %xmm0\n        vpinsrq $1, %rdx, %xmm0, %xmm0\n        ret\n\n2021-11-29  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.c (ix86_expand_v1ti_to_ti): Perform the\n\tconversion via V2DImode using vec_extractv2didi on TARGET_SSE2.\n\t* config/i386/sse.md (rotlv1ti3, rotrv1ti3): Change constraint\n\ton QImode shift amounts from const_int_operand to general_operand.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-v1ti-rotate.c: New test case.", "tree": {"sha": "dc3307b64b09747b2572afa6a88dacea79dfd275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3307b64b09747b2572afa6a88dacea79dfd275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d269f0c1cda545a86da960e8989bea862dd75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d269f0c1cda545a86da960e8989bea862dd75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d269f0c1cda545a86da960e8989bea862dd75e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d269f0c1cda545a86da960e8989bea862dd75e/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b31fe3692894e80de16b4059a89a309e409687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b31fe3692894e80de16b4059a89a309e409687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b31fe3692894e80de16b4059a89a309e409687"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "354a9a713b73cd8a40b5d71b725359dadc67285f", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a5d269f0c1cda545a86da960e8989bea862dd75e", "patch": "@@ -6162,7 +6162,17 @@ static rtx\n ix86_expand_v1ti_to_ti (rtx x)\n {\n   rtx result = gen_reg_rtx (TImode);\n-  emit_move_insn (result, gen_lowpart (TImode, x));\n+  if (TARGET_SSE2)\n+    {\n+      rtx temp = gen_reg_rtx (V2DImode);\n+      emit_move_insn (temp, gen_lowpart (V2DImode, x));\n+      rtx lo = gen_lowpart (DImode, result);\n+      emit_insn (gen_vec_extractv2didi (lo, temp, const0_rtx));\n+      rtx hi = gen_highpart (DImode, result);\n+      emit_insn (gen_vec_extractv2didi (hi, temp, const1_rtx));\n+    }\n+  else\n+    emit_move_insn (result, gen_lowpart (TImode, x));\n   return result;\n }\n "}, {"sha": "b6d03b89a04545c50f28a59e33811ca396238ba8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a5d269f0c1cda545a86da960e8989bea862dd75e", "patch": "@@ -15296,7 +15296,7 @@\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(rotate:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:QI 2 \"const_int_operand\")))]\n+\t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_rotate (ROTATE, operands);\n@@ -15307,7 +15307,7 @@\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(rotatert:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:QI 2 \"const_int_operand\")))]\n+\t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_rotate (ROTATERT, operands);"}, {"sha": "b4b2814a3d15d8f42921b7e89455d4c3ce79910b", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-rotate.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-rotate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d269f0c1cda545a86da960e8989bea862dd75e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-rotate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-rotate.c?ref=a5d269f0c1cda545a86da960e8989bea862dd75e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti rotr(uv1ti x, unsigned int i) { return (x >> i) | (x << (128-i)); }\n+uv1ti rotl(uv1ti x, unsigned int i) { return (x << i) | (x >> (128-i)); }\n+\n+/* { dg-final { scan-assembler-not \"shrq\" } } */\n+/* { dg-final { scan-assembler-not \"salq\" } } */"}]}