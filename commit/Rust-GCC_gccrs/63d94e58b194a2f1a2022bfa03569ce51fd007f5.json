{"sha": "63d94e58b194a2f1a2022bfa03569ce51fd007f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkOTRlNThiMTk0YTJmMWEyMDIyYmZhMDM1NjljZTUxZmQwMDdmNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-09-18T22:42:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-09-18T22:42:18Z"}, "message": "re PR middle-end/54617 (ICE on gcc.c-torture/compile/pr42025-2.c  with -m64 and -O1)\n\n\tPR middle-end/54617\n\t* expr.c (store_field): Handle a PARALLEL in more cases.\n\nFrom-SVN: r191451", "tree": {"sha": "c5455487e4e74681465fd8b3190660245814f0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5455487e4e74681465fd8b3190660245814f0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d94e58b194a2f1a2022bfa03569ce51fd007f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d94e58b194a2f1a2022bfa03569ce51fd007f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d94e58b194a2f1a2022bfa03569ce51fd007f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d94e58b194a2f1a2022bfa03569ce51fd007f5/comments", "author": null, "committer": null, "parents": [{"sha": "4f60e9d38fc40fc923451b9c0f03dcee86e6e4da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f60e9d38fc40fc923451b9c0f03dcee86e6e4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f60e9d38fc40fc923451b9c0f03dcee86e6e4da"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "ed8d8b1575b8f1a0d2d45e0b64119d586f607e84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d94e58b194a2f1a2022bfa03569ce51fd007f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d94e58b194a2f1a2022bfa03569ce51fd007f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d94e58b194a2f1a2022bfa03569ce51fd007f5", "patch": "@@ -1,3 +1,8 @@\n+2012-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/54617\n+\t* expr.c (store_field): Handle a PARALLEL in more cases.\n+\n 2012-09-18  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (sminsi3, smaxsi3, uminsi3, umaxsi3):"}, {"sha": "36f4dd7d53ec1626e4d795e502a78c100e62bb85", "filename": "gcc/expr.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d94e58b194a2f1a2022bfa03569ce51fd007f5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d94e58b194a2f1a2022bfa03569ce51fd007f5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=63d94e58b194a2f1a2022bfa03569ce51fd007f5", "patch": "@@ -6452,16 +6452,33 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \n       /* Handle calls that return values in multiple non-contiguous locations.\n \t The Irix 6 ABI has examples of this.  */\n-      if (bitpos == 0\n-\t  && bitsize == GET_MODE_BITSIZE (mode)\n-\t  && GET_CODE (temp) == PARALLEL)\n-\temit_group_store (target, temp, TREE_TYPE (exp),\n-\t\t\t  int_size_in_bytes (TREE_TYPE (exp)));\n-      else\n-\t/* Store the value in the bitfield.  */\n-\tstore_bit_field (target, bitsize, bitpos,\n-\t\t         bitregion_start, bitregion_end,\n-\t\t         mode, temp);\n+      if (GET_CODE (temp) == PARALLEL)\n+\t{\n+\t  rtx temp_target;\n+\n+\t  /* We are not supposed to have a true bitfield in this case.  */\n+\t  gcc_assert (bitsize == GET_MODE_BITSIZE (mode));\n+\n+\t  /* If we don't store at bit 0, we need an intermediate pseudo\n+\t     since emit_group_store only stores at bit 0.  */\n+\t  if (bitpos != 0)\n+\t    temp_target = gen_reg_rtx (mode);\n+\t  else\n+\t    temp_target = target;\n+\n+\t  emit_group_store (temp_target, temp, TREE_TYPE (exp),\n+\t\t\t    int_size_in_bytes (TREE_TYPE (exp)));\n+\n+\t  if (temp_target == target)\n+\t    return const0_rtx;\n+\n+\t  temp = temp_target;\n+\t}\n+\n+      /* Store the value in the bitfield.  */\n+      store_bit_field (target, bitsize, bitpos,\n+\t\t       bitregion_start, bitregion_end,\n+\t\t       mode, temp);\n \n       return const0_rtx;\n     }"}]}