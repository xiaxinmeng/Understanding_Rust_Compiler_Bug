{"sha": "2758481d8b5b40210ad9be0ba82664f3f6c6e17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1ODQ4MWQ4YjViNDAyMTBhZDliZTBiYTgyNjY0ZjNmNmM2ZTE3Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-08T02:14:04Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-08T02:14:04Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r418", "tree": {"sha": "e281b90fc6d39e2ef18b55fb4ccfbc9c303793a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e281b90fc6d39e2ef18b55fb4ccfbc9c303793a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2758481d8b5b40210ad9be0ba82664f3f6c6e17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2758481d8b5b40210ad9be0ba82664f3f6c6e17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2758481d8b5b40210ad9be0ba82664f3f6c6e17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2758481d8b5b40210ad9be0ba82664f3f6c6e17f/comments", "author": null, "committer": null, "parents": [{"sha": "86f8eff3d61312e6bc7dfe72c1ac48d9cd8f14f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f8eff3d61312e6bc7dfe72c1ac48d9cd8f14f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f8eff3d61312e6bc7dfe72c1ac48d9cd8f14f7"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "e26cefeae281bca2b366f92f7276c6278d9ba97c", "filename": "gcc/reload1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2758481d8b5b40210ad9be0ba82664f3f6c6e17f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2758481d8b5b40210ad9be0ba82664f3f6c6e17f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2758481d8b5b40210ad9be0ba82664f3f6c6e17f", "patch": "@@ -3260,6 +3260,16 @@ reload_as_needed (first, live_known)\n \t    }\n #endif /* SMALL_REGISTER_CLASSES */\n \n+\t  /* If this is a USE and CLOBBER of a MEM, ensure that any\n+\t     references to eliminable registers have been removed.  */\n+\n+\t  if ((GET_CODE (PATTERN (insn)) == USE\n+\t       || GET_CODE (PATTERN (insn)) == CLOBBER)\n+\t      && GET_CODE (XEXP (PATTERN (insn), 0)) == MEM)\n+\t    XEXP (XEXP (PATTERN (insn), 0), 0)\n+\t      = eliminate_regs (XEXP (XEXP (PATTERN (insn), 0), 0),\n+\t\t\t\tGET_MODE (XEXP (PATTERN (insn), 0)), 0);\n+\n \t  /* If we need to do register elimination processing, do so.\n \t     This might delete the insn, in which case we are done.  */\n \t  if (num_eliminable && GET_MODE (insn) == QImode)"}]}