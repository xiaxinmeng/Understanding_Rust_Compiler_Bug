{"sha": "f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YjU1YmRjMmExODBmYTRhOTgxY2VhYTg2MDQ2NjBkNmZhOTU4Yg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2009-11-30T12:17:43Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2009-11-30T12:17:43Z"}, "message": "tree-vect-stmts.c (vectorizable_assignment): Support multiple types.\n\n\n\t* tree-vect-stmts.c (vectorizable_assignment): Support\n\tmultiple types.\n\nFrom-SVN: r154794", "tree": {"sha": "4026dd213967db8ac7bbe7c6a014b6b01af77493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4026dd213967db8ac7bbe7c6a014b6b01af77493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43ccd04be77d9ed7ff4d52fddfc80132639b979a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ccd04be77d9ed7ff4d52fddfc80132639b979a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ccd04be77d9ed7ff4d52fddfc80132639b979a"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "c015dd4ecbcf3ddcf54abaa689e9e0da8b45339a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "patch": "@@ -1,3 +1,8 @@\n+2009-11-30  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_assignment): Support\n+\tmultiple types.\n+\n 2009-11-30  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/contrib.texi (Contributors): Add myself."}, {"sha": "4320d65045b46b6e12d628088658be69f196d837", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "patch": "@@ -1,3 +1,7 @@\n+2009-11-30  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gfortran.dg/vect/vect-7.f90: New test.\n+\n 2009-11-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/42119"}, {"sha": "adf01379d40ab4109be99b40ca93c302ec85fea1", "filename": "gcc/testsuite/gfortran.dg/vect/vect-7.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-7.f90?ref=f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile } \n+! { dg-require-effective-target vect_double } \n+\n+subroutine foo (x,nnd)\n+  dimension x(nnd) \n+  integer i\n+  \n+  do i=1,nnd\n+    x(i) = 1.d0 + (1.d0*i)/nnd\n+  end do\n+\n+end subroutine foo \n+\n+! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_unpack } } } \n+! { dg-final { cleanup-tree-dump \"vect\" } } \n+"}, {"sha": "99230909d7d955518a6ad73cef3853d37d6c6a10", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b55bdc2a180fa4a981ceaa8604660d6fa958b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f18b55bdc2a180fa4a981ceaa8604660d6fa958b", "patch": "@@ -1809,10 +1809,12 @@ vectorizable_assignment (gimple stmt, gimple_stmt_iterator *gsi,\n   enum vect_def_type dt[2] = {vect_unknown_def_type, vect_unknown_def_type};\n   int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   int ncopies;\n-  int i;\n+  int i, j;\n   VEC(tree,heap) *vec_oprnds = NULL;\n   tree vop;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n+  gimple new_stmt = NULL;\n+  stmt_vec_info prev_stmt_info = NULL;\n \n   /* Multiple types in SLP are handled by creating the appropriate number of\n      vectorized stmts for each SLP node. Hence, NCOPIES is always 1 in\n@@ -1823,8 +1825,6 @@ vectorizable_assignment (gimple stmt, gimple_stmt_iterator *gsi,\n     ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits;\n \n   gcc_assert (ncopies >= 1);\n-  if (ncopies > 1)\n-    return false; /* FORNOW */\n \n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n@@ -1870,20 +1870,35 @@ vectorizable_assignment (gimple stmt, gimple_stmt_iterator *gsi,\n   vec_dest = vect_create_destination_var (scalar_dest, vectype);\n \n   /* Handle use.  */\n-  vect_get_vec_defs (op, NULL, stmt, &vec_oprnds, NULL, slp_node);\n-\n-  /* Arguments are ready. create the new vector stmt.  */\n-  for (i = 0; VEC_iterate (tree, vec_oprnds, i, vop); i++)\n+  for (j = 0; j < ncopies; j++)\n     {\n-      *vec_stmt = gimple_build_assign (vec_dest, vop);\n-      new_temp = make_ssa_name (vec_dest, *vec_stmt);\n-      gimple_assign_set_lhs (*vec_stmt, new_temp);\n-      vect_finish_stmt_generation (stmt, *vec_stmt, gsi);\n-      STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt;\n+      /* Handle uses.  */\n+      if (j == 0)\n+        vect_get_vec_defs (op, NULL, stmt, &vec_oprnds, NULL, slp_node);\n+      else\n+        vect_get_vec_defs_for_stmt_copy (dt, &vec_oprnds, NULL);\n+\n+      /* Arguments are ready. create the new vector stmt.  */\n+      for (i = 0; VEC_iterate (tree, vec_oprnds, i, vop); i++)\n+       {\n+         new_stmt = gimple_build_assign (vec_dest, vop);\n+         new_temp = make_ssa_name (vec_dest, new_stmt);\n+         gimple_assign_set_lhs (new_stmt, new_temp);\n+         vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+         if (slp_node)\n+           VEC_quick_push (gimple, SLP_TREE_VEC_STMTS (slp_node), new_stmt);\n+       }\n \n       if (slp_node)\n-\tVEC_quick_push (gimple, SLP_TREE_VEC_STMTS (slp_node), *vec_stmt);\n-   }\n+        continue;\n+\n+      if (j == 0)\n+        STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt;\n+      else\n+        STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n+\n+      prev_stmt_info = vinfo_for_stmt (new_stmt);\n+    }\n \n   VEC_free (tree, heap, vec_oprnds);\n   return true;"}]}