{"sha": "a952487c45d701416fc353fef8eb540c9909e399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1MjQ4N2M0NWQ3MDE0MTZmYzM1M2ZlZjhlYjU0MGM5OTA5ZTM5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-21T13:00:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-21T13:00:30Z"}, "message": "i386.c (memory_address_length): Handle %r12 the same as %rsp and %r13 the same as %rbp.\n\n\t* config/i386/i386.c (memory_address_length): Handle %r12\n\tthe same as %rsp and %r13 the same as %rbp.  For %rsp and %rbp\n\talso check REGNO.\n\t(ix86_attr_length_address_default): For MODE_SI lea in 64-bit\n\tmode look through optional ZERO_EXTEND and SUBREG.\n\t* config/i386/i386.md (R12_REG): New define_constant.\n\t(prefix_data16): For sse unit set also for MODE_TI insns.\n\t(prefix_rex): For -m32 always return 0.  For TYPE_IMOVX\n\tinsns set if operand 1 is ext_QIreg_operand.\n\t(modrm): For TYPE_IMOV clear only if not MODE_DI.  For\n\tTYPE_{ALU{,1},ICMP,TEST} insn clear if there is non-shortened\n\timmediate.\n\t(*movdi_extzv_1, zero_extendhidi2, zero_extendqidi2): Change\n\tmode from MODE_DI to MODE_SI.\n\t(movdi_1_rex64): Override modrm and length_immediate attributes\n\tonly for movabs (TYPE_IMOV, alternative 2).\n\t(zero_extendsidi2_rex64): Clear prefix_0f attribute if TYPE_IMOVX.\n\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_interunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit): Set\n\tprefix_rex attribute if DImode.\n\t(*adddi_1_rex64, *adddi_2_rex64, *adddi_3_rex64, *adddi_5_rex64,\n\t*addsi_1, *addsi_1_zext, *addsi_2, *addsi_2_zext, *addsi_3,\n\t*addsi_3_zext, *addsi_5, *addhi_1_lea, *addhi_1, *addhi_2, *addhi_3,\n\t*addhi_5, *addqi_1_lea, *addqi_1): Override length_immediate\n\tattribute to 1 if TYPE_ALU and operand 2 is const128_operand.\n\t(pro_epilogue_adjust_stack_1, pro_epilogue_adjust_stack_rex64):\n\tLikewise.  For TYPE_IMOV clear length_immediate attribute.\n\t(*ashldi3_1_rex64, *ashldi3_cmp_rex64, *ashldi3_cconly_rex64,\n\t*ashlsi3_1, *ashlsi3_1_zext, *ashlsi3_cmp, **ashlsi3_cconly,\n\t*ashlsi3_cmp_zext, *ashlhi3_1_lea, *ashlhi3_1, *ashlhi3_cmp,\n\t*ashlhi3_cconly, *ashlqi3_1_lea, *ashlqi3_1, *ashlqi3_cmp,\n\t*ashlqi3_cconly): Override length_immediate attribute to 0 if TYPE_ALU\n\tor one operand TYPE_ISHIFT.\n\t(*ashrdi3_1_one_bit_rex64, *ashrdi3_one_bit_cmp_rex64,\n\t*ashrdi3_one_bit_cconly_rex64, *ashrsi3_1_one_bit,\n\t*ashrsi3_1_one_bit_zext, *ashrsi3_one_bit_cmp,\n\t*ashrsi3_one_bit_cconly, *ashrsi3_one_bit_cmp_zext,\n\t*ashrhi3_1_one_bit, *ashrhi3_one_bit_cmp, *ashrhi3_one_bit_cconly,\n\t*ashrqi3_1_one_bit, *ashrqi3_1_one_bit_slp, *ashrqi3_one_bit_cmp,\n\t*ashrqi3_one_bit_cconly, *lshrdi3_1_one_bit_rex64,\n\t*lshrdi3_cmp_one_bit_rex64, *lshrdi3_cconly_one_bit_rex64,\n\t*lshrsi3_1_one_bit, *lshrsi3_1_one_bit_zext, *lshrsi3_one_bit_cmp,\n\t*lshrsi3_one_bit_cconly, *lshrsi3_cmp_one_bit_zext,\n\t*lshrhi3_1_one_bit, *lshrhi3_one_bit_cmp, *lshrhi3_one_bit_cconly,\n\t*lshrqi3_1_one_bit, *lshrqi3_1_one_bit_slp, *lshrqi2_one_bit_cmp,\n\t*lshrqi2_one_bit_cconly, *rotlsi3_1_one_bit_rex64, *rotlsi3_1_one_bit,\n\t*rotlsi3_1_one_bit_zext, *rotlhi3_1_one_bit, *rotlqi3_1_one_bit_slp,\n\t*rotlqi3_1_one_bit, *rotrdi3_1_one_bit_rex64, *rotrsi3_1_one_bit,\n\t*rotrsi3_1_one_bit_zext, *rotrhi3_one_bit, *rotrqi3_1_one_bit,\n\t*rotrqi3_1_one_bit_slp): Override length_immediate attribute to 0,\n\tset mode attribute, don't override length attribute.\n\t(*btsq, *btrq, *btcq, *btdi_rex64, *btsi): Set prefix_0f attribute\n\tto 1.\n\t(return_internal_long): Set length attribute to 2 instead of 1.\n\t(*strmovqi_rex_1, *strsetqi_rex_1, *rep_stosqi_rex64,\n\t*cmpstrnqi_nz_rex_1, *cmpstrnqi_rex_1, *strlenqi_rex_1): Clear\n\tprefix_rex attribute.\n\t* config/i386/predicates.md (ext_QIreg_operand,\n\tconst128_operand): New predicates.\n\t(memory_displacement_only_operand): Always return 0 for\n\tTARGET_64BIT.\n\nFrom-SVN: r147763", "tree": {"sha": "3a11ae858478c49a8aafe9517c43dc145b1157db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a11ae858478c49a8aafe9517c43dc145b1157db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a952487c45d701416fc353fef8eb540c9909e399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a952487c45d701416fc353fef8eb540c9909e399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a952487c45d701416fc353fef8eb540c9909e399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a952487c45d701416fc353fef8eb540c9909e399/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64af62c2ba6343972fe89e24636420db12237f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64af62c2ba6343972fe89e24636420db12237f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64af62c2ba6343972fe89e24636420db12237f49"}], "stats": {"total": 680, "additions": 519, "deletions": 161}, "files": [{"sha": "29fd61b0e3d5ac9b3da4b002e0913e7f2d33fd64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a952487c45d701416fc353fef8eb540c9909e399/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a952487c45d701416fc353fef8eb540c9909e399/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a952487c45d701416fc353fef8eb540c9909e399", "patch": "@@ -1,3 +1,69 @@\n+2009-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (memory_address_length): Handle %r12\n+\tthe same as %rsp and %r13 the same as %rbp.  For %rsp and %rbp\n+\talso check REGNO.\n+\t(ix86_attr_length_address_default): For MODE_SI lea in 64-bit\n+\tmode look through optional ZERO_EXTEND and SUBREG.\n+\t* config/i386/i386.md (R12_REG): New define_constant.\n+\t(prefix_data16): For sse unit set also for MODE_TI insns.\n+\t(prefix_rex): For -m32 always return 0.  For TYPE_IMOVX\n+\tinsns set if operand 1 is ext_QIreg_operand.\n+\t(modrm): For TYPE_IMOV clear only if not MODE_DI.  For\n+\tTYPE_{ALU{,1},ICMP,TEST} insn clear if there is non-shortened\n+\timmediate.\n+\t(*movdi_extzv_1, zero_extendhidi2, zero_extendqidi2): Change\n+\tmode from MODE_DI to MODE_SI.\n+\t(movdi_1_rex64): Override modrm and length_immediate attributes\n+\tonly for movabs (TYPE_IMOV, alternative 2).\n+\t(zero_extendsidi2_rex64): Clear prefix_0f attribute if TYPE_IMOVX.\n+\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_interunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit): Set\n+\tprefix_rex attribute if DImode.\n+\t(*adddi_1_rex64, *adddi_2_rex64, *adddi_3_rex64, *adddi_5_rex64,\n+\t*addsi_1, *addsi_1_zext, *addsi_2, *addsi_2_zext, *addsi_3,\n+\t*addsi_3_zext, *addsi_5, *addhi_1_lea, *addhi_1, *addhi_2, *addhi_3,\n+\t*addhi_5, *addqi_1_lea, *addqi_1): Override length_immediate\n+\tattribute to 1 if TYPE_ALU and operand 2 is const128_operand.\n+\t(pro_epilogue_adjust_stack_1, pro_epilogue_adjust_stack_rex64):\n+\tLikewise.  For TYPE_IMOV clear length_immediate attribute.\n+\t(*ashldi3_1_rex64, *ashldi3_cmp_rex64, *ashldi3_cconly_rex64,\n+\t*ashlsi3_1, *ashlsi3_1_zext, *ashlsi3_cmp, **ashlsi3_cconly,\n+\t*ashlsi3_cmp_zext, *ashlhi3_1_lea, *ashlhi3_1, *ashlhi3_cmp,\n+\t*ashlhi3_cconly, *ashlqi3_1_lea, *ashlqi3_1, *ashlqi3_cmp,\n+\t*ashlqi3_cconly): Override length_immediate attribute to 0 if TYPE_ALU\n+\tor one operand TYPE_ISHIFT.\n+\t(*ashrdi3_1_one_bit_rex64, *ashrdi3_one_bit_cmp_rex64,\n+\t*ashrdi3_one_bit_cconly_rex64, *ashrsi3_1_one_bit,\n+\t*ashrsi3_1_one_bit_zext, *ashrsi3_one_bit_cmp,\n+\t*ashrsi3_one_bit_cconly, *ashrsi3_one_bit_cmp_zext,\n+\t*ashrhi3_1_one_bit, *ashrhi3_one_bit_cmp, *ashrhi3_one_bit_cconly,\n+\t*ashrqi3_1_one_bit, *ashrqi3_1_one_bit_slp, *ashrqi3_one_bit_cmp,\n+\t*ashrqi3_one_bit_cconly, *lshrdi3_1_one_bit_rex64,\n+\t*lshrdi3_cmp_one_bit_rex64, *lshrdi3_cconly_one_bit_rex64,\n+\t*lshrsi3_1_one_bit, *lshrsi3_1_one_bit_zext, *lshrsi3_one_bit_cmp,\n+\t*lshrsi3_one_bit_cconly, *lshrsi3_cmp_one_bit_zext,\n+\t*lshrhi3_1_one_bit, *lshrhi3_one_bit_cmp, *lshrhi3_one_bit_cconly,\n+\t*lshrqi3_1_one_bit, *lshrqi3_1_one_bit_slp, *lshrqi2_one_bit_cmp,\n+\t*lshrqi2_one_bit_cconly, *rotlsi3_1_one_bit_rex64, *rotlsi3_1_one_bit,\n+\t*rotlsi3_1_one_bit_zext, *rotlhi3_1_one_bit, *rotlqi3_1_one_bit_slp,\n+\t*rotlqi3_1_one_bit, *rotrdi3_1_one_bit_rex64, *rotrsi3_1_one_bit,\n+\t*rotrsi3_1_one_bit_zext, *rotrhi3_one_bit, *rotrqi3_1_one_bit,\n+\t*rotrqi3_1_one_bit_slp): Override length_immediate attribute to 0,\n+\tset mode attribute, don't override length attribute.\n+\t(*btsq, *btrq, *btcq, *btdi_rex64, *btsi): Set prefix_0f attribute\n+\tto 1.\n+\t(return_internal_long): Set length attribute to 2 instead of 1.\n+\t(*strmovqi_rex_1, *strsetqi_rex_1, *rep_stosqi_rex64,\n+\t*cmpstrnqi_nz_rex_1, *cmpstrnqi_rex_1, *strlenqi_rex_1): Clear\n+\tprefix_rex attribute.\n+\t* config/i386/predicates.md (ext_QIreg_operand,\n+\tconst128_operand): New predicates.\n+\t(memory_displacement_only_operand): Always return 0 for\n+\tTARGET_64BIT.\n+\n 2009-05-21  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/thumb2.md (orsi_notsi_si): Fix typo in pattern."}, {"sha": "ad3481bcc6dc05f1aca1e166f15adaaf8411e313", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a952487c45d701416fc353fef8eb540c9909e399", "patch": "@@ -19308,17 +19308,23 @@ memory_address_length (rtx addr)\n \n   /* Rule of thumb:\n        - esp as the base always wants an index,\n-       - ebp as the base always wants a displacement.  */\n+       - ebp as the base always wants a displacement,\n+       - r12 as the base always wants an index,\n+       - r13 as the base always wants a displacement.  */\n \n   /* Register Indirect.  */\n   if (base && !index && !disp)\n     {\n       /* esp (for its index) and ebp (for its displacement) need\n-\t the two-byte modrm form.  */\n-      if (addr == stack_pointer_rtx\n-\t  || addr == arg_pointer_rtx\n-\t  || addr == frame_pointer_rtx\n-\t  || addr == hard_frame_pointer_rtx)\n+\t the two-byte modrm form.  Similarly for r12 and r13 in 64-bit\n+\t code.  */\n+      if (REG_P (addr)\n+\t  && (addr == arg_pointer_rtx\n+\t      || addr == frame_pointer_rtx\n+\t      || REGNO (addr) == SP_REG\n+\t      || REGNO (addr) == BP_REG\n+\t      || REGNO (addr) == R12_REG\n+\t      || REGNO (addr) == R13_REG))\n \tlen = 1;\n     }\n \n@@ -19336,16 +19342,18 @@ memory_address_length (rtx addr)\n \t  else\n \t    len = 4;\n \t}\n-      /* ebp always wants a displacement.  */\n-      else if (base == hard_frame_pointer_rtx)\n+      /* ebp always wants a displacement.  Similarly r13.  */\n+      else if (REG_P (base)\n+\t       && (REGNO (base) == BP_REG || REGNO (base) == R13_REG))\n         len = 1;\n \n       /* An index requires the two-byte modrm form....  */\n       if (index\n-\t  /* ...like esp, which always wants an index.  */\n-\t  || base == stack_pointer_rtx\n+\t  /* ...like esp (or r12), which always wants an index.  */\n \t  || base == arg_pointer_rtx\n-\t  || base == frame_pointer_rtx)\n+\t  || base == frame_pointer_rtx\n+\t  || (REG_P (base)\n+\t      && (REGNO (base) == SP_REG || REGNO (base) == R12_REG)))\n \tlen += 1;\n     }\n \n@@ -19398,14 +19406,23 @@ ix86_attr_length_address_default (rtx insn)\n \n   if (get_attr_type (insn) == TYPE_LEA)\n     {\n-      rtx set = PATTERN (insn);\n+      rtx set = PATTERN (insn), addr;\n \n       if (GET_CODE (set) == PARALLEL)\n \tset = XVECEXP (set, 0, 0);\n \n       gcc_assert (GET_CODE (set) == SET);\n \n-      return memory_address_length (SET_SRC (set));\n+      addr = SET_SRC (set);\n+      if (TARGET_64BIT && get_attr_mode (insn) == MODE_SI)\n+\t{\n+\t  if (GET_CODE (addr) == ZERO_EXTEND)\n+\t    addr = XEXP (addr, 0);\n+\t  if (GET_CODE (addr) == SUBREG)\n+\t    addr = SUBREG_REG (addr);\n+\t}\n+\n+      return memory_address_length (addr);\n     }\n \n   extract_insn_cached (insn);"}, {"sha": "6d439f082f8aa73eaf18330dc78f8596e7b7ecdc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 407, "deletions": 148, "changes": 555, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a952487c45d701416fc353fef8eb540c9909e399", "patch": "@@ -312,6 +312,7 @@\n    (R9_REG\t\t\t38)\n    (R10_REG\t\t\t39)\n    (R11_REG\t\t\t40)\n+   (R12_REG\t\t\t41)\n    (R13_REG\t\t\t42)\n    (XMM8_REG\t\t\t45)\n    (XMM9_REG\t\t\t46)\n@@ -416,7 +417,7 @@\n ;; Set when length prefix is used.\n (define_attr \"prefix_data16\" \"\"\n   (if_then_else (ior (eq_attr \"mode\" \"HI\")\n-\t\t     (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"V2DF\")))\n+\t\t     (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"V2DF,TI\")))\n     (const_int 1)\n     (const_int 0)))\n \n@@ -436,7 +437,9 @@\n \n ;; Set when REX opcode prefix is used.\n (define_attr \"prefix_rex\" \"\"\n-  (cond [(and (eq_attr \"mode\" \"DI\")\n+  (cond [(ne (symbol_ref \"!TARGET_64BIT\") (const_int 0))\n+\t   (const_int 0)\n+\t (and (eq_attr \"mode\" \"DI\")\n   \t      (eq_attr \"type\" \"!push,pop,call,callv,leave,ibr\"))\n \t   (const_int 1)\n \t (and (eq_attr \"mode\" \"QI\")\n@@ -446,6 +449,9 @@\n \t (ne (symbol_ref \"x86_extended_reg_mentioned_p (insn)\")\n \t     (const_int 0))\n \t   (const_int 1)\n+\t (and (eq_attr \"type\" \"imovx\")\n+\t      (match_operand:QI 1 \"ext_QIreg_operand\" \"\"))\n+\t   (const_int 1)\n \t]\n \t(const_int 0)))\n \n@@ -491,19 +497,23 @@\n \t      (not (match_operand 0 \"memory_operand\" \"\")))\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"imov\")\n-\t      (ior (and (match_operand 0 \"register_operand\" \"\")\n-\t\t\t(match_operand 1 \"immediate_operand\" \"\"))\n-\t\t   (ior (and (match_operand 0 \"ax_reg_operand\" \"\")\n-\t\t\t     (match_operand 1 \"memory_displacement_only_operand\" \"\"))\n-\t\t\t(and (match_operand 0 \"memory_displacement_only_operand\" \"\")\n-\t\t\t     (match_operand 1 \"ax_reg_operand\" \"\")))))\n+\t      (and (not (eq_attr \"mode\" \"DI\"))\n+\t\t   (ior (and (match_operand 0 \"register_operand\" \"\")\n+\t\t\t     (match_operand 1 \"immediate_operand\" \"\"))\n+\t\t        (ior (and (match_operand 0 \"ax_reg_operand\" \"\")\n+\t\t\t\t  (match_operand 1 \"memory_displacement_only_operand\" \"\"))\n+\t\t\t     (and (match_operand 0 \"memory_displacement_only_operand\" \"\")\n+\t\t\t\t  (match_operand 1 \"ax_reg_operand\" \"\"))))))\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"call\")\n \t      (match_operand 0 \"constant_call_address_operand\" \"\"))\n \t     (const_int 0)\n \t (and (eq_attr \"type\" \"callv\")\n \t      (match_operand 1 \"constant_call_address_operand\" \"\"))\n \t     (const_int 0)\n+\t (and (eq_attr \"type\" \"alu,alu1,icmp,test\")\n+\t      (match_operand 0 \"ax_reg_operand\" \"\"))\n+\t     (symbol_ref \"(get_attr_length_immediate (insn) <= (get_attr_mode (insn) != MODE_QI))\")\n \t ]\n \t (const_int 1)))\n \n@@ -2283,7 +2293,7 @@\n   \"TARGET_64BIT\"\n   \"movz{bl|x}\\t{%h1, %k0|%k0, %h1}\"\n   [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*movsi_extzv_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=R\")\n@@ -2631,8 +2641,16 @@\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n-   (set_attr \"modrm\" \"*,0,0,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"*,4,8,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")\n+   (set (attr \"modrm\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n+\t (const_string \"0\")\n+\t (const_string \"*\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n+\t (const_string \"8\")\n+\t (const_string \"*\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"11,12,13,14,15,16\")\n        (const_string \"maybe_vex\")\n@@ -4101,6 +4119,7 @@\n    %vmovd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imovx,imov,mmxmov,mmxmov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"orig,*,orig,orig,maybe_vex,maybe_vex\")\n+   (set_attr \"prefix_0f\" \"0,*,*,*,*,*\")\n    (set_attr \"mode\" \"SI,DI,DI,DI,TI,TI\")])\n \n (define_split\n@@ -4135,15 +4154,15 @@\n   \"TARGET_64BIT\"\n   \"movz{wl|x}\\t{%1, %k0|%k0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n      (zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_64BIT\"\n   \"movz{bl|x}\\t{%1, %k0|%k0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"SI\")])\n \f\n ;; Sign extension instructions\n \n@@ -5488,6 +5507,12 @@\n   [(set_attr \"type\" \"fmov,sseicvt,sseicvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex,maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"prefix\" \"maybe_vex\")\n+\t    (ne (symbol_ref \"<SSEMODEI24:MODE>mode == DImode\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"unit\" \"i387,*,*\")\n    (set_attr \"athlon_decode\" \"*,double,direct\")\n    (set_attr \"amdfam10_decode\" \"*,vector,double\")\n@@ -5506,6 +5531,12 @@\n   [(set_attr \"type\" \"fmov,sseicvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"prefix\" \"maybe_vex\")\n+\t    (ne (symbol_ref \"<SSEMODEI24:MODE>mode == DImode\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"*,direct\")\n    (set_attr \"amdfam10_decode\" \"*,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n@@ -5682,6 +5713,12 @@\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"prefix\" \"maybe_vex\")\n+\t    (ne (symbol_ref \"<SSEMODEI24:MODE>mode == DImode\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n@@ -5711,6 +5748,12 @@\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"prefix\" \"maybe_vex\")\n+\t    (ne (symbol_ref \"<SSEMODEI24:MODE>mode == DImode\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"athlon_decode\" \"direct\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n@@ -6430,6 +6473,11 @@\n \t      (const_string \"incdec\")\n \t   ]\n \t   (const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -6494,6 +6542,11 @@\n      (if_then_else (match_operand:DI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*adddi_3_rex64\"\n@@ -6543,6 +6596,11 @@\n      (if_then_else (match_operand:DI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n ; For comparisons against 1, -1 and 128, we may generate better code\n@@ -6639,6 +6697,11 @@\n      (if_then_else (match_operand:DI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n \n@@ -6699,6 +6762,11 @@\n \t      (const_string \"incdec\")\n \t   ]\n \t   (const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -6779,6 +6847,11 @@\n \t      (const_string \"incdec\")\n \t   ]\n \t   (const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -6842,6 +6915,11 @@\n      (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n@@ -6888,6 +6966,11 @@\n      (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi_3\"\n@@ -6932,6 +7015,11 @@\n      (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n@@ -6976,6 +7064,11 @@\n      (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ; For comparisons against 1, -1 and 128, we may generate better code\n@@ -7067,6 +7160,11 @@\n      (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"addhi3\"\n@@ -7121,6 +7219,11 @@\n \t(if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n \t   (const_string \"incdec\")\n \t   (const_string \"alu\"))))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"HI,HI,SI\")])\n \n (define_insn \"*addhi_1\"\n@@ -7160,6 +7263,11 @@\n      (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_2\"\n@@ -7202,6 +7310,11 @@\n      (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*addhi_3\"\n@@ -7241,6 +7354,11 @@\n      (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n ; See comments above addsi_4 for details.\n@@ -7321,6 +7439,11 @@\n      (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_expand \"addqi3\"\n@@ -7379,6 +7502,11 @@\n \t(if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n \t   (const_string \"incdec\")\n \t   (const_string \"alu\"))))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"QI,QI,SI,SI\")])\n \n (define_insn \"*addqi_1\"\n@@ -7425,6 +7553,11 @@\n      (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set (attr \"length_immediate\")\n+      (if_then_else\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n+\t(const_string \"1\")\n+\t(const_string \"*\")))\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n (define_insn \"*addqi_1_slp\"\n@@ -11513,6 +11646,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -11572,6 +11714,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*ashldi3_cconly_rex64\"\n@@ -11614,6 +11765,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*ashldi3_1\"\n@@ -11753,6 +11913,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -11837,6 +12006,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n@@ -11898,6 +12076,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashlsi3_cconly\"\n@@ -11939,6 +12126,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashlsi3_cmp_zext\"\n@@ -11981,6 +12177,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"ashlhi3\"\n@@ -12026,6 +12231,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"HI,SI\")])\n \n (define_insn \"*ashlhi3_1\"\n@@ -12060,6 +12274,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n@@ -12105,6 +12328,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*ashlhi3_cconly\"\n@@ -12146,6 +12378,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"HI\")])\n \n (define_expand \"ashlqi3\"\n@@ -12211,6 +12452,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"QI,SI,SI\")])\n \n (define_insn \"*ashlqi3_1\"\n@@ -12263,6 +12513,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"QI,SI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n@@ -12308,6 +12567,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*ashlqi3_cconly\"\n@@ -12349,6 +12617,15 @@\n \t      (const_string \"alu\")\n \t   ]\n \t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t      (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_int 0)))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n ;; See comment above `ashldi3' about how this works.\n@@ -12467,10 +12744,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*ashrdi3_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -12501,10 +12776,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*ashrdi3_one_bit_cconly_rex64\"\n   [(set (reg FLAGS_REG)\n@@ -12519,7 +12792,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -12687,10 +12961,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashrsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -12702,7 +12974,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -12744,10 +13017,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashrsi3_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -12761,7 +13032,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*ashrsi3_one_bit_cmp_zext\"\n   [(set (reg FLAGS_REG)\n@@ -12777,7 +13049,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -12843,10 +13116,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*ashrhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -12876,10 +13147,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*ashrhi3_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -12893,7 +13162,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -12943,10 +13213,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*ashrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n@@ -12958,10 +13226,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*ashrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n@@ -13004,10 +13270,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*ashrqi3_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -13021,7 +13285,8 @@\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -13143,10 +13408,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*lshrdi3_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13177,10 +13440,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*lshrdi3_cconly_one_bit_rex64\"\n   [(set (reg FLAGS_REG)\n@@ -13195,7 +13456,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -13280,10 +13542,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lshrsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -13295,7 +13555,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lshrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13338,10 +13599,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lshrsi3_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -13355,7 +13614,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*lshrsi3_cmp_one_bit_zext\"\n   [(set (reg FLAGS_REG)\n@@ -13371,7 +13631,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -13437,10 +13698,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*lshrhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13470,10 +13729,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*lshrhi3_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -13487,7 +13744,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -13537,10 +13795,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*lshrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n@@ -13551,10 +13807,8 @@\n    && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*lshrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n@@ -13597,10 +13851,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*lshrqi2_one_bit_cconly\"\n   [(set (reg FLAGS_REG)\n@@ -13614,7 +13866,8 @@\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -13703,10 +13956,8 @@\n    && ix86_binary_operator_ok (ROTATE, DImode, operands)\"\n   \"rol{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*rotldi3_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13736,10 +13987,8 @@\n    && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rotlsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -13752,7 +14001,8 @@\n    && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rotlsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13795,10 +14045,8 @@\n    && ix86_binary_operator_ok (ROTATE, HImode, operands)\"\n   \"rol{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*rotlhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13838,10 +14086,8 @@\n    && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*rotlqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n@@ -13852,10 +14098,8 @@\n    && ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*rotlqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n@@ -13935,10 +14179,8 @@\n    && ix86_binary_operator_ok (ROTATERT, DImode, operands)\"\n   \"ror{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:DI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*rotrdi3_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -13968,10 +14210,8 @@\n    && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rotrsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -13984,10 +14224,8 @@\n    && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rotrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -14030,10 +14268,8 @@\n    && ix86_binary_operator_ok (ROTATERT, HImode, operands)\"\n   \"ror{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*rotrhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n@@ -14073,10 +14309,8 @@\n    && ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*rotrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n@@ -14087,10 +14321,8 @@\n    && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n-   (set (attr \"length\")\n-     (if_then_else (match_operand 0 \"register_operand\" \"\")\n-\t(const_string \"2\")\n-\t(const_string \"*\")))])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*rotrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n@@ -14198,7 +14430,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"bts{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")])\n \n (define_insn \"*btrq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n@@ -14208,7 +14441,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"btr{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")])\n \n (define_insn \"*btcq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n@@ -14218,7 +14452,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"btc{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")])\n \n ;; Allow Nocona to avoid these instructions if a register is available.\n \n@@ -14329,7 +14564,8 @@\n \t  (const_int 0)))]\n   \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n   \"bt{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")])\n \n (define_insn \"*btsi\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14341,7 +14577,8 @@\n \t  (const_int 0)))]\n   \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"bt{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")])\n \f\n ;; Store-flag instructions.\n \n@@ -15487,7 +15724,7 @@\n    (unspec [(const_int 0)] UNSPEC_REP)]\n   \"reload_completed\"\n   \"rep\\;ret\"\n-  [(set_attr \"length\" \"1\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -19365,6 +19602,7 @@\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"rep_mov\"\n@@ -19621,6 +19859,7 @@\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"rep_stos\"\n@@ -19714,6 +19953,7 @@\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"cmpstrnsi\"\n@@ -19840,6 +20080,7 @@\n   \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n ;; The same, but the count is not known to not be zero.\n@@ -19893,6 +20134,7 @@\n   \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n (define_expand \"strlensi\"\n@@ -19954,6 +20196,7 @@\n   \"repnz scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n+   (set_attr \"prefix_rex\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n ;; Peephole optimizations to clean up after cmpstrn*.  This should be\n@@ -20474,6 +20717,14 @@\n \t\t (const_string \"imov\")\n \t      ]\n \t      (const_string \"lea\")))\n+   (set (attr \"length_immediate\")\n+\t(cond [(eq_attr \"type\" \"imov\")\n+\t\t (const_string \"0\")\n+\t       (and (eq_attr \"type\" \"alu\")\n+\t\t    (match_operand 2 \"const128_operand\" \"\"))\n+\t\t (const_string \"1\")\n+\t      ]\n+\t      (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"pro_epilogue_adjust_stack_rex64\"\n@@ -20518,6 +20769,14 @@\n \t\t (const_string \"imov\")\n \t      ]\n \t      (const_string \"lea\")))\n+   (set (attr \"length_immediate\")\n+\t(cond [(eq_attr \"type\" \"imov\")\n+\t\t (const_string \"0\")\n+\t       (and (eq_attr \"type\" \"alu\")\n+\t\t    (match_operand 2 \"const128_operand\" \"\"))\n+\t\t (const_string \"1\")\n+\t      ]\n+\t      (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"pro_epilogue_adjust_stack_rex64_2\""}, {"sha": "fc89ec4d1f5269e754036fd61750547bba35d446", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a952487c45d701416fc353fef8eb540c9909e399/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a952487c45d701416fc353fef8eb540c9909e399", "patch": "@@ -76,6 +76,14 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == FLAGS_REG\")))\n \n+;; Return true if op is a QImode register operand other than\n+;; %[abcd][hl].\n+(define_predicate \"ext_QIreg_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"TARGET_64BIT\n+\t\t    && GET_MODE (op) == QImode\n+\t\t    && REGNO (op) > BX_REG\")))\n+\n ;; Return true if op is not xmm0 register.\n (define_predicate \"reg_not_xmm0_operand\"\n    (and (match_operand 0 \"register_operand\")\n@@ -574,6 +582,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) == 8\")))\n \n+;; Match exactly 128.\n+(define_predicate \"const128_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 128\")))\n+\n ;; Match 2, 4, or 8.  Used for leal multiplicands.\n (define_predicate \"const248_operand\"\n   (match_code \"const_int\")\n@@ -878,6 +891,9 @@\n   struct ix86_address parts;\n   int ok;\n \n+  if (TARGET_64BIT)\n+    return 0;\n+\n   ok = ix86_decompose_address (XEXP (op, 0), &parts);\n   gcc_assert (ok);\n "}]}