{"sha": "d674eb2f5c198a128ea401681e2f0937587e6369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3NGViMmY1YzE5OGExMjhlYTQwMTY4MWUyZjA5Mzc1ODdlNjM2OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-09-26T19:56:22Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-26T19:56:22Z"}, "message": "float1.c (value_type): New typedef.\n\n\t* testsuite/libffi.call/float1.c (value_type): New typedef.\n\t(CANARY): New define.\n\t(main): Check for result buffer overflow.\n\t* src/powerpc/linux64.S: Handle linux64 long double returns.\n\t* src/powerpc/ffi.c (FLAG_RETURNS_128BITS): New constant.\n\t(ffi_prep_cif_machdep): Handle linux64 long double returns.\n\nFrom-SVN: r104660", "tree": {"sha": "46d3d81e265f2f30ae68f0c9b3ef0bd546515080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d3d81e265f2f30ae68f0c9b3ef0bd546515080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d674eb2f5c198a128ea401681e2f0937587e6369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d674eb2f5c198a128ea401681e2f0937587e6369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d674eb2f5c198a128ea401681e2f0937587e6369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d674eb2f5c198a128ea401681e2f0937587e6369/comments", "author": null, "committer": null, "parents": [{"sha": "608af77dc182f5ef8a440bce31713ac11d5fa8d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608af77dc182f5ef8a440bce31713ac11d5fa8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608af77dc182f5ef8a440bce31713ac11d5fa8d4"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "df544ba0f852032abdf5c6ad964b6e5900c82d89", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=d674eb2f5c198a128ea401681e2f0937587e6369", "patch": "@@ -1,3 +1,12 @@\n+2005-09-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* testsuite/libffi.call/float1.c (value_type): New typedef.\n+\t(CANARY): New define.\n+\t(main): Check for result buffer overflow.\n+\t* src/powerpc/linux64.S: Handle linux64 long double returns.\n+\t* src/powerpc/ffi.c (FLAG_RETURNS_128BITS): New constant.\n+\t(ffi_prep_cif_machdep): Handle linux64 long double returns.\n+\n 2005-08-25  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/23404"}, {"sha": "7d8bf3a1dff9c973bd503d3d3bde3bac9aa39c2d", "filename": "libffi/src/powerpc/ffi.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi.c?ref=d674eb2f5c198a128ea401681e2f0937587e6369", "patch": "@@ -39,6 +39,7 @@ enum {\n   FLAG_RETURNS_NOTHING  = 1 << (31-30), /* These go in cr7 */\n   FLAG_RETURNS_FP       = 1 << (31-29),\n   FLAG_RETURNS_64BITS   = 1 << (31-28),\n+  FLAG_RETURNS_128BITS  = 1 << (31-27),\n \n   FLAG_ARG_NEEDS_COPY   = 1 << (31- 7),\n   FLAG_FP_ARGUMENTS     = 1 << (31- 6), /* cr1.eq; specified by ABI */\n@@ -543,6 +544,12 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n       /* else fall through.  */\n #if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n     case FFI_TYPE_LONGDOUBLE:\n+      if (type == FFI_TYPE_LONGDOUBLE && cif->abi == FFI_LINUX64)\n+\t{\n+\t  flags |= FLAG_RETURNS_128BITS;\n+\t  flags |= FLAG_RETURNS_FP;\n+\t  break;\n+\t}\n #endif\n       intarg_count++;\n       flags |= FLAG_RETVAL_REFERENCE;"}, {"sha": "25b2c4f455be708aab5b857edaa1b969f40cf4d7", "filename": "libffi/src/powerpc/linux64.S", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64.S?ref=d674eb2f5c198a128ea401681e2f0937587e6369", "patch": "@@ -120,9 +120,13 @@ ffi_call_LINUX64:\n \tblr\n \n .Lfp_return_value:\n+\tbt\t27, .Lfd_return_value\n \tbf\t28, .Lfloat_return_value\n \tstfd\t%f1, 0(%r30)\n-\tstfd\t%f2, 8(%r30)\t/* It might be a long double */\n+\tb\t.Ldone_return_value\n+.Lfd_return_value:\n+\tstfd\t%f1, 0(%r30)\n+\tstfd\t%f2, 8(%r30)\n \tb\t.Ldone_return_value\n .Lfloat_return_value:\n \tstfs\t%f1, 0(%r30)"}, {"sha": "fb81d7d7fd0d8db6bf5eb16d8982a339b6de0203", "filename": "libffi/testsuite/libffi.call/float1.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Ftestsuite%2Flibffi.call%2Ffloat1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d674eb2f5c198a128ea401681e2f0937587e6369/libffi%2Ftestsuite%2Flibffi.call%2Ffloat1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ffloat1.c?ref=d674eb2f5c198a128ea401681e2f0937587e6369", "patch": "@@ -8,6 +8,14 @@\n #include \"ffitest.h\"\n #include \"float.h\"\n \n+typedef union\n+{\n+  double d;\n+  unsigned char c[sizeof (double)];\n+} value_type;\n+\n+#define CANARY 0xba\n+\n static double dblit(float f)\n {\n   return f/3.0;\n@@ -19,8 +27,8 @@ int main (void)\n   ffi_type *args[MAX_ARGS];\n   void *values[MAX_ARGS];\n   float f;\n-  double d;\n-\n+  value_type result[2];\n+  int i;\n \n   args[0] = &ffi_type_float;\n   values[0] = &f;\n@@ -31,11 +39,19 @@ int main (void)\n   \n   f = 3.14159;\n   \n-  ffi_call(&cif, FFI_FN(dblit), &d, values);\n+  /* Put a canary in the return array.  This is a regression test for\n+     a buffer overrun.  */\n+  memset(result[1].c, CANARY, sizeof (double));\n+\n+  ffi_call(&cif, FFI_FN(dblit), &result[0].d, values);\n   \n   /* These are not always the same!! Check for a reasonable delta */\n  \n-  CHECK(d - dblit(f) < DBL_EPSILON);\n+  CHECK(result[0].d - dblit(f) < DBL_EPSILON);\n+\n+  /* Check the canary.  */\n+  for (i = 0; i < sizeof (double); ++i)\n+    CHECK(result[1].c[i] == CANARY);\n \n   exit(0);\n "}]}