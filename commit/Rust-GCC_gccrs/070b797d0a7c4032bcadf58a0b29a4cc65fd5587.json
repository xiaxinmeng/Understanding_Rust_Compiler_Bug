{"sha": "070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwYjc5N2QwYTdjNDAzMmJjYWRmNThhMGIyOWE0Y2M2NWZkNTU4Nw==", "commit": {"author": {"name": "Bernhard Fischer", "email": "aldot@gcc.gnu.org", "date": "2007-08-26T21:23:27Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2007-08-26T21:23:27Z"}, "message": "tree-ssa-sccvn.c, [...]: Remove unnecessary trailing whitespace.\n\n2007-08-26  Bernhard Fischer  <aldot@gcc.gnu.org>\n\n\t* tree-ssa-sccvn.c, tree-ssa-sccvn.h, tree-vn.c,\n\ttree-ssa-pre.c: Remove unnecessary trailing whitespace.\n\nFrom-SVN: r127816", "tree": {"sha": "b5b45ac9caa20d8ace98b1add7996f0736b98134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b45ac9caa20d8ace98b1add7996f0736b98134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/comments", "author": null, "committer": null, "parents": [{"sha": "0393c663156b9f4184737d78ebc25e51299a5e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0393c663156b9f4184737d78ebc25e51299a5e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0393c663156b9f4184737d78ebc25e51299a5e20"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "fbcc0e816264e12bc49184109246883f4789dd18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "patch": "@@ -1,3 +1,8 @@\n+2007-08-26  Bernhard Fischer  <aldot@gcc.gnu.org>\n+\n+\t* tree-ssa-sccvn.c, tree-ssa-sccvn.h, tree-vn.c,\n+\ttree-ssa-pre.c: Remove unnecessary trailing whitespace.\n+\n 2007-08-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/32991"}, {"sha": "33c44ee0d1ba10ac23b142673b7390b56752d0d1", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "patch": "@@ -111,7 +111,7 @@ along with GCC; see the file COPYING3.  If not see\n \n    Fourth, we eliminate fully redundant expressions.\n    This is a simple statement walk that replaces redundant\n-   calculations  with the now available values.  */\n+   calculations with the now available values.  */\n \n /* Representations of value numbers:\n \n@@ -189,7 +189,7 @@ DEF_VEC_P (vuse_vec);\n DEF_VEC_ALLOC_P (vuse_vec, heap);\n \n static VEC(vuse_vec, heap) *expression_vuses;\n-\t\t\t\t\t\t \n+\n /* Mapping from expression to id number we can use in bitmap sets.  */\n static VEC(tree, heap) *expressions;\n \n@@ -545,7 +545,7 @@ phi_trans_add (tree e, tree v, basic_block pred, VEC (tree, gc) *vuses)\n static inline bool\n constant_expr_p (tree v)\n {\n-  return TREE_CODE (v) != VALUE_HANDLE && \n+  return TREE_CODE (v) != VALUE_HANDLE &&\n     (TREE_CODE (v) == FIELD_DECL || is_gimple_min_invariant (v));\n }\n \n@@ -965,7 +965,7 @@ find_leader_in_sets (tree expr, bitmap_set_t set1, bitmap_set_t set2)\n    the phis in PRED.  SEEN is a bitmap saying which expression we have\n    translated since we started translation of the toplevel expression.\n    Return NULL if we can't find a leader for each part of the\n-   translated expression.  */  \n+   translated expression.  */\n \n static tree\n phi_translate_1 (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n@@ -1323,13 +1323,13 @@ phi_translate_1 (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n \t  {\n \t    tree val;\n \t    tree def = PHI_ARG_DEF (phi, e->dest_idx);\n-\t    \n+\n \t    if (is_gimple_min_invariant (def))\n \t      return def;\n-\t    \n+\n \t    if (is_undefined_value (def))\n \t      return NULL;\n-\t    \n+\n \t    val = get_value_handle (def);\n \t    gcc_assert (val);\n \t    return def;\n@@ -1343,9 +1343,9 @@ phi_translate_1 (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n }\n \n /* Translate EXPR using phis in PHIBLOCK, so that it has the values of\n-   the phis in PRED. \n+   the phis in PRED.\n    Return NULL if we can't find a leader for each part of the\n-   translated expression.  */  \n+   translated expression.  */\n \n static tree\n phi_translate (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n@@ -2063,7 +2063,7 @@ can_value_number_call (tree stmt)\n }\n \n /* Return true if OP is an exception handler related operation, such as\n-   FILTER_EXPRor EXC_PTR_EXPR.  */\n+   FILTER_EXPR or EXC_PTR_EXPR.  */\n \n static bool\n is_exception_related (tree op)\n@@ -2077,7 +2077,7 @@ is_exception_related (tree op)\n static bool\n can_value_number_operation (tree op)\n {\n-  return (UNARY_CLASS_P (op) \n+  return (UNARY_CLASS_P (op)\n \t  && !is_exception_related (TREE_OPERAND (op, 0)))\n     || BINARY_CLASS_P (op)\n     || COMPARISON_CLASS_P (op)\n@@ -2523,7 +2523,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n \n   NECESSARY (temp) = 0;\n   VN_INFO_GET (PHI_RESULT (temp))->valnum = PHI_RESULT (temp);\n-  \n+\n   VEC_safe_push (tree, heap, inserted_exprs, temp);\n   FOR_EACH_EDGE (pred, ei, block->preds)\n     add_phi_arg (temp, avail[pred->src->index], pred);\n@@ -2892,7 +2892,7 @@ is_undefined_value (tree expr)\n }\n \n /* Add OP to EXP_GEN (block), and possibly to the maximal set if it is\n-   not defined by a phi node.   \n+   not defined by a phi node.\n    PHI nodes can't go in the maximal sets because they are not in\n    TMP_GEN, so it is possible to get into non-monotonic situations\n    during ANTIC calculation, because it will *add* bits.  */\n@@ -2956,7 +2956,7 @@ find_existing_value_expr (tree t, VEC (tree, gc) *vuses)\n     vh = vn_lookup_with_vuses (t, vuses);\n   else\n     vh = vn_lookup (t);\n-  \n+\n   if (!vh)\n     return NULL;\n   exprset = VALUE_HANDLE_EXPR_SET (vh);\n@@ -3036,7 +3036,7 @@ create_value_expr_from (tree expr, basic_block block, VEC (tree, gc) *vuses)\n \t}\n       if (TREE_CODE (op) != TREE_LIST)\n \tadd_to_exp_gen (block, op);\n-      \n+\n       if (TREE_CODE (val) == VALUE_HANDLE)\n \tTREE_TYPE (val) = TREE_TYPE (TREE_OPERAND (vexpr, i));\n \n@@ -3247,7 +3247,7 @@ get_sccvn_value (tree name)\n       if (!valvh && !is_invariant)\n \t{\n \t  tree defstmt = SSA_NAME_DEF_STMT (val);\n-\t  \n+\n \t  gcc_assert (VN_INFO (val)->valnum == val);\n \t  /* PHI nodes can't have vuses and attempts to iterate over\n \t     their VUSE operands will crash.  */\n@@ -3261,7 +3261,7 @@ get_sccvn_value (tree name)\n \t  }\n \t  valvh = vn_lookup_or_add_with_stmt (val, defstmt);\n \t}\n-      \n+\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"SCCVN says \");\n@@ -3275,7 +3275,7 @@ get_sccvn_value (tree name)\n \t      fprintf (dump_file, \")\\n\");\n \t    }\n \t  else\n-\t    print_generic_stmt (dump_file, val, 0);  \n+\t    print_generic_stmt (dump_file, val, 0);\n \t}\n       if (valvh)\n \treturn valvh;\n@@ -3320,13 +3320,13 @@ make_values_for_stmt (tree stmt, basic_block block)\n   tree valvh = NULL_TREE;\n   tree lhsval;\n   VEC (tree, gc) *vuses = NULL;\n-  \n+\n   valvh = get_sccvn_value (lhs);\n \n   if (valvh)\n     {\n       vn_add (lhs, valvh);\n-      bitmap_value_insert_into_set (AVAIL_OUT (block), lhs);      \n+      bitmap_value_insert_into_set (AVAIL_OUT (block), lhs);\n       /* Shortcut for FRE. We have no need to create value expressions,\n \t just want to know what values are available where.  */\n       if (in_fre)\n@@ -3343,7 +3343,7 @@ make_values_for_stmt (tree stmt, basic_block block)\n       bitmap_value_insert_into_set (AVAIL_OUT (block), lhs);\n       return true;\n     }\n-  \n+\n   lhsval = valvh ? valvh : get_value_handle (lhs);\n   vuses = copy_vuses_from_stmt (stmt);\n   STRIP_USELESS_TYPE_CONVERSION (rhs);\n@@ -3370,10 +3370,10 @@ make_values_for_stmt (tree stmt, basic_block block)\n \t      tree val = vn_lookup_or_add_with_vuses (newt, vuses);\n \t      vn_add (lhs, val);\n \t    }\n-\t  \n+\n \t  add_to_exp_gen (block, newt);\n-\t}      \n-      \n+\t}\n+\n       bitmap_insert_into_set (TMP_GEN (block), lhs);\n       bitmap_value_insert_into_set (AVAIL_OUT (block), lhs);\n       return true;\n@@ -3385,7 +3385,7 @@ make_values_for_stmt (tree stmt, basic_block block)\n \t   || TREE_INVARIANT (rhs)\n \t   || DECL_P (rhs))\n     {\n-      \n+\n       if (lhsval)\n \t{\n \t  set_expression_vuses (rhs, vuses);\n@@ -3460,7 +3460,7 @@ compute_avail (void)\n \t  tree def = gimple_default_def (cfun, param);\n \n \t  vn_lookup_or_add (def);\n-\t  if (!in_fre) \n+\t  if (!in_fre)\n \t    {\n \t      bitmap_insert_into_set (TMP_GEN (ENTRY_BLOCK_PTR), def);\n \t      bitmap_value_insert_into_set (maximal_set, def);\n@@ -3621,7 +3621,7 @@ eliminate (void)\n \n \t      sprime = bitmap_find_leader (AVAIL_OUT (b),\n \t\t\t\t\t   get_value_handle (lhs));\n-\t      \n+\n \t      if (sprime\n \t\t  && sprime != lhs\n \t\t  && (TREE_CODE (*rhs_p) != SSA_NAME\n@@ -3793,7 +3793,7 @@ static void\n init_pre (bool do_fre)\n {\n   basic_block bb;\n-  \n+\n   next_expression_id = 0;\n   expressions = NULL;\n   expression_vuses = NULL;"}, {"sha": "855f42af9952e8a3cbad732259d7d96c5b980e1e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "patch": "@@ -90,7 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n    In order to value number memory, we assign value numbers to vuses.\n    This enables us to note that, for example, stores to the same\n    address of the same value from the same starting memory states are\n-   equivalent.  \n+   equivalent.\n    TODO:\n \n    1. We can iterate only the changing portions of the SCC's, but\n@@ -264,7 +264,7 @@ VN_INFO_SET (tree name, vn_ssa_aux_t value)\n }\n \n /* Get the value numbering info for a given SSA name, creating it if\n-   it does not exist.  */ \n+   it does not exist.  */\n \n vn_ssa_aux_t\n VN_INFO_GET (tree name)\n@@ -367,7 +367,7 @@ vn_reference_eq (const void *p1, const void *p2)\n       if (VEC_index (tree, vr2->vuses, i) != v)\n \treturn false;\n     }\n-  \n+\n   for (i = 0; VEC_iterate (vn_reference_op_s, vr1->operands, i, vro); i++)\n     {\n       if (!vn_reference_op_eq (VEC_index (vn_reference_op_s, vr2->operands, i),\n@@ -554,7 +554,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n-\t  \n+\n \t}\n       VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n \n@@ -1078,7 +1078,7 @@ visit_copy (tree lhs, tree rhs)\n   /* Follow chains of copies to their destination.  */\n   while (SSA_VAL (rhs) != rhs && TREE_CODE (SSA_VAL (rhs)) == SSA_NAME)\n     rhs = SSA_VAL (rhs);\n-  \n+\n   /* The copy may have a more interesting constant filled expression\n      (we don't, since we know our RHS is just an SSA name).  */\n   VN_INFO (lhs)->has_constants = VN_INFO (rhs)->has_constants;\n@@ -1302,10 +1302,10 @@ visit_phi (tree phi)\n \t  VN_INFO (PHI_RESULT (phi))->has_constants = false;\n \t  VN_INFO (PHI_RESULT (phi))->expr = sameval;\n \t}\n-      \n+\n       if (TREE_CODE (sameval) == SSA_NAME)\n \treturn visit_copy (PHI_RESULT (phi), sameval);\n-      \n+\n       return set_ssa_val_to (PHI_RESULT (phi), sameval);\n     }\n \n@@ -1601,7 +1601,7 @@ visit_use (tree use)\n \t\t have been value numbering optimistically, and\n \t\t iterating. They may become non-constant in this case,\n \t\t even if they were optimistically constant. */\n-\t\t \n+\n \t      VN_INFO (lhs)->has_constants = false;\n \t      VN_INFO (lhs)->expr = lhs;\n \t    }\n@@ -1730,7 +1730,7 @@ process_scc (VEC (tree, heap) *scc)\n   if (VEC_length (tree, scc) == 1)\n     {\n       tree use = VEC_index (tree, scc, 0);\n-      if (!VN_INFO (use)->use_processed) \n+      if (!VN_INFO (use)->use_processed)\n \tvisit_use (use);\n     }\n   else\n@@ -1988,7 +1988,7 @@ free_scc_vn (void)\n \t    SSA_NAME_VALUE (name) = NULL;\n \t}\n     }\n-      \n+\n   VEC_free (vn_ssa_aux_t, heap, vn_ssa_aux_table);\n   VEC_free (tree, heap, sccstack);\n   free_vn_table (valid_info);"}, {"sha": "6d8f258ddd3dda95efda37858e9b430ae92f67eb", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "patch": "@@ -59,6 +59,6 @@ tree vn_reference_lookup (tree, VEC (tree, gc) *);\n void vn_reference_insert (tree, tree, VEC (tree, gc) *);\n VEC (tree, gc) *shared_vuses_from_stmt (tree);\n VEC (tree, gc) *copy_vuses_from_stmt (tree);\n-\t\t\t\t  \n+\n \n #endif /* TREE_SSA_SCCVN_H  */"}, {"sha": "a23d7beb4679ee801ec27774d01f8d95f2585911", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070b797d0a7c4032bcadf58a0b29a4cc65fd5587/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "patch": "@@ -59,7 +59,7 @@ bool\n expressions_equal_p (tree e1, tree e2)\n {\n   tree te1, te2;\n-  \n+\n   if (e1 == e2)\n     return true;\n \n@@ -82,7 +82,7 @@ expressions_equal_p (tree e1, tree e2)\n       return true;\n \n     }\n-  else if (TREE_CODE (e1) == TREE_CODE (e2) \n+  else if (TREE_CODE (e1) == TREE_CODE (e2)\n \t   && (te1 == te2\n \t       || types_compatible_p (te1, te2))\n \t   && operand_equal_p (e1, e2, OEP_PURE_SAME))\n@@ -92,7 +92,7 @@ expressions_equal_p (tree e1, tree e2)\n }\n \n /* Set the value handle for expression E to value V.  */\n-   \n+\n void\n set_value_handle (tree e, tree v)\n {\n@@ -132,12 +132,12 @@ print_creation_to_file (tree v, tree expr, VEC (tree, gc) *vuses)\n   print_generic_expr (dump_file, v, dump_flags);\n   fprintf (dump_file, \" for \");\n   print_generic_expr (dump_file, expr, dump_flags);\n-  \n+\n   if (vuses && VEC_length (tree, vuses) != 0)\n     {\n       size_t i;\n       tree vuse;\n-      \n+\n       fprintf (dump_file, \" vuses: (\");\n       for (i = 0; VEC_iterate (tree, vuses, i, vuse); i++)\n \t{\n@@ -146,15 +146,15 @@ print_creation_to_file (tree v, tree expr, VEC (tree, gc) *vuses)\n \t    fprintf (dump_file, \",\");\n \t}\n       fprintf (dump_file, \")\");\n-    }\t\t   \n+    }\n   fprintf (dump_file, \"\\n\");\n }\n \n \n /* Sort the VUSE array so that we can do equality comparisons\n    quicker on two vuse vecs.  */\n \n-void \n+void\n sort_vuses (VEC (tree,gc) *vuses)\n {\n   if (VEC_length (tree, vuses) > 1)\n@@ -167,7 +167,7 @@ sort_vuses (VEC (tree,gc) *vuses)\n /* Sort the VUSE array so that we can do equality comparisons\n    quicker on two vuse vecs.  */\n \n-void \n+void\n sort_vuses_heap (VEC (tree,heap) *vuses)\n {\n   if (VEC_length (tree, vuses) > 1)\n@@ -279,7 +279,7 @@ vn_lookup (tree expr)\n       if (TREE_CODE (expr) == CALL_EXPR || DECL_P (expr))\n \treturn vn_reference_lookup (expr, NULL);\n       else if (TREE_CODE (expr) == SSA_NAME)\n-\treturn SSA_NAME_VALUE (expr);      \n+\treturn SSA_NAME_VALUE (expr);\n       else if (TREE_CODE (expr) == ADDR_EXPR)\n \treturn vn_unary_op_lookup (expr);\n       /* FALLTHROUGH */\n@@ -291,7 +291,7 @@ vn_lookup (tree expr)\n \n /* Search in the value numbering tables for an existing instance of\n    expression EXPR,  and return its value, or NULL if none has been set.  STMT\n-   represents the stmt associated with EXPR.  It is used when computing the \n+   represents the stmt associated with EXPR.  It is used when computing the\n    hash value for EXPR for reference operations.  */\n \n tree\n@@ -328,9 +328,9 @@ static tree\n create_value_handle_for_expr (tree expr, VEC(tree, gc) *vuses)\n {\n   tree v;\n-  \n+\n   v = make_value_handle (TREE_TYPE (expr));\n-  \n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     print_creation_to_file (v, expr, vuses);\n   return v;\n@@ -343,7 +343,7 @@ tree\n vn_lookup_or_add (tree expr)\n {\n   tree v = vn_lookup (expr);\n-  \n+\n   if (v == NULL_TREE)\n     {\n       v = create_value_handle_for_expr (expr, NULL);\n@@ -387,10 +387,10 @@ tree\n vn_lookup_or_add_with_vuses (tree expr, VEC (tree, gc) *vuses)\n {\n   tree v;\n-  \n+\n   if (!vuses || VEC_length (tree, vuses) == 0)\n     return vn_lookup_or_add (expr);\n-  \n+\n   v = vn_lookup_with_vuses (expr, vuses);\n   if (v == NULL_TREE)\n     {"}]}