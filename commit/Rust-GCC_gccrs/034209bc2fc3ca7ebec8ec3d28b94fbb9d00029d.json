{"sha": "034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0MjA5YmMyZmMzY2E3ZWJlYzhlYzNkMjhiOTRmYmI5ZDAwMDI5ZA==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-03-05T16:33:55Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-03-05T16:33:55Z"}, "message": "libitm: Update texinfo docs.\n\n\tlibitm/\n\t* libitm.texi: Link to specification and add a usage example.\n\nFrom-SVN: r184940", "tree": {"sha": "12503e1030fed3ecdac53d9ad427b3c410d29540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12503e1030fed3ecdac53d9ad427b3c410d29540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93d9a365d2902f186abe62968df871102b2b5b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d9a365d2902f186abe62968df871102b2b5b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d9a365d2902f186abe62968df871102b2b5b7a"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "1be02b525b4bd847d41ee2cbaaaa7f3df82c80ed", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "patch": "@@ -1,3 +1,7 @@\n+2012-03-02  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* libitm.texi: Link to specification and add a usage example.\n+\n 2012-02-24  Torvald Riegel  <triegel@redhat.com>\n \n \t* retry.cc (GTM::gtm_thread::number_of_threads_changed): Change"}, {"sha": "6cfcaf9277d008c5a48afc3ae0de876d9c39f84f", "filename": "libitm/libitm.texi", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d/libitm%2Flibitm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d/libitm%2Flibitm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.texi?ref=034209bc2fc3ca7ebec8ec3d28b94fbb9d00029d", "patch": "@@ -82,8 +82,8 @@ several threads.\n \n To activate support for TM in C/C++, the compile-time flag @option{-fgnu-tm}\n must be specified. This enables TM language-level constructs such as\n-transaction statements (@code{__transaction}, @pxref{C/C++ Language\n-Constructs for TM} for details).\n+transaction statements (e.g., @code{__transaction_atomic}, @pxref{C/C++\n+Language Constructs for TM} for details).\n \n @c ---------------------------------------------------------------------\n @c C/C++ Language Constructs for TM\n@@ -92,7 +92,35 @@ Constructs for TM} for details).\n @node C/C++ Language Constructs for TM\n @chapter C/C++ Language Constructs for TM\n \n-TODO: link to the C++ TM spec. a few examples. how gcc's support differs. \n+Transactions are supported in C++ and C in the form of transaction statements,\n+transaction expressions, and function transactions. In the following example,\n+both @code{a} and @code{b} will be read and the difference will be written to\n+@code{c}, all atomically and isolated from other transactions:\n+\n+@example\n+__transaction_atomic @{ c = a - b; @}\n+@end example\n+\n+Therefore, another thread can use the following code to concurrently update\n+@code{b} without ever causing @code{c} to hold a negative value (and without\n+having to use other synchronization constructs such as locks or C++11\n+atomics):\n+\n+@example\n+__transaction_atomic @{ if (a > b) b++; @}\n+@end example\n+\n+GCC follows the @uref{https://sites.google.com/site/tmforcplusplus/, Draft\n+Specification of Transactional Language Constructs for C++ (v1.1)} in its\n+implementation of transactions.\n+\n+The precise semantics of transactions are defined in terms of the C++11/C11\n+memory model (see the specification). Roughly, transactions provide\n+synchronization guarantees that are similar to what would be guaranteed when\n+using a single global lock as a guard for all transactions. Note that like\n+other synchronization constructs in C/C++, transactions rely on a\n+data-race-free program (e.g., a nontransactional write that is concurrent\n+with a transactional read to the same memory location is a data race).\n \n @c ---------------------------------------------------------------------\n @c The libitm ABI"}]}