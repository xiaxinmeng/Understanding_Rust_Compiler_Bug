{"sha": "939e9f696b843f2c6472ac0fd541399e2b3faa7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5ZTlmNjk2Yjg0M2YyYzY0NzJhYzBmZDU0MTM5OWUyYjNmYWE3ZQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-02T17:04:57Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-02T17:04:57Z"}, "message": "re PR fortran/91942 (ICE in match_vtag, at fortran/io.c:1485)\n\n2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91942\n\t* io.c (match_vtag): Check for non-NULL result->symtree.\n\t(match_out_tag): Check for invalid constant due to inquiry parameter.\n\t(match_filepos): Instead of a syntax error, go to cleanup to get better\n\terror messages.\n\n2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91942\n\t* gfortran.dg/pr91587.f90: Update dg-error regex.\n\t* gfortran.dg/pr91942.f90: New test.\n\nFrom-SVN: r276472", "tree": {"sha": "6bcf774400741a997958500188cbca00b1bb7529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bcf774400741a997958500188cbca00b1bb7529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939e9f696b843f2c6472ac0fd541399e2b3faa7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939e9f696b843f2c6472ac0fd541399e2b3faa7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939e9f696b843f2c6472ac0fd541399e2b3faa7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939e9f696b843f2c6472ac0fd541399e2b3faa7e/comments", "author": null, "committer": null, "parents": [{"sha": "8b4e5e711d9b2b979dcee445498a7f570ea49e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4e5e711d9b2b979dcee445498a7f570ea49e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4e5e711d9b2b979dcee445498a7f570ea49e2e"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "476973d5cf23668b93363c4b0b34408f27b47180", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=939e9f696b843f2c6472ac0fd541399e2b3faa7e", "patch": "@@ -1,3 +1,11 @@\n+2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91942\n+\t* io.c (match_vtag): Check for non-NULL result->symtree.\n+\t(match_out_tag): Check for invalid constant due to inquiry parameter.\n+\t(match_filepos): Instead of a syntax error, go to cleanup to get better\n+\terror messages.\n+\n 2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91943"}, {"sha": "b969a1a4738514119c2a70aa639f98555b673977", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=939e9f696b843f2c6472ac0fd541399e2b3faa7e", "patch": "@@ -1482,24 +1482,29 @@ match_vtag (const io_tag *tag, gfc_expr **v)\n       return MATCH_ERROR;\n     }\n \n-  if (result->symtree->n.sym->attr.intent == INTENT_IN)\n+  if (result->symtree)\n     {\n-      gfc_error (\"Variable %s cannot be INTENT(IN) at %C\", tag->name);\n-      gfc_free_expr (result);\n-      return MATCH_ERROR;\n-    }\n+      bool impure;\n \n-  bool impure = gfc_impure_variable (result->symtree->n.sym);\n-  if (impure && gfc_pure (NULL))\n-    {\n-      gfc_error (\"Variable %s cannot be assigned in PURE procedure at %C\",\n-\t\t tag->name);\n-      gfc_free_expr (result);\n-      return MATCH_ERROR;\n-    }\n+      if (result->symtree->n.sym->attr.intent == INTENT_IN)\n+\t{\n+\t  gfc_error (\"Variable %s cannot be INTENT(IN) at %C\", tag->name);\n+\t  gfc_free_expr (result);\n+\t  return MATCH_ERROR;\n+\t}\n+\n+      impure = gfc_impure_variable (result->symtree->n.sym);\n+      if (impure && gfc_pure (NULL))\n+\t{\n+\t  gfc_error (\"Variable %s cannot be assigned in PURE procedure at %C\",\n+\t\t     tag->name);\n+\t  gfc_free_expr (result);\n+\t  return MATCH_ERROR;\n+\t}\n \n-  if (impure)\n-    gfc_unset_implicit_pure (NULL);\n+      if (impure)\n+\tgfc_unset_implicit_pure (NULL);\n+    }\n \n   *v = result;\n   return MATCH_YES;\n@@ -1515,7 +1520,16 @@ match_out_tag (const io_tag *tag, gfc_expr **result)\n \n   m = match_vtag (tag, result);\n   if (m == MATCH_YES)\n-    gfc_check_do_variable ((*result)->symtree);\n+    {\n+      if ((*result)->symtree)\n+\tgfc_check_do_variable ((*result)->symtree);\n+\n+      if ((*result)->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_error (\"Expecting a variable at %L\", &(*result)->where);\n+\t  return MATCH_ERROR;\n+\t}\n+    }\n \n   return m;\n }\n@@ -2845,7 +2859,7 @@ match_filepos (gfc_statement st, gfc_exec_op op)\n \n   m = match_file_element (fp);\n   if (m == MATCH_ERROR)\n-    goto syntax;\n+    goto cleanup;\n   if (m == MATCH_NO)\n     {\n       m = gfc_match_expr (&fp->unit);"}, {"sha": "88e4d32695b82e6d75a64346ecaa0e28bb4579bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=939e9f696b843f2c6472ac0fd541399e2b3faa7e", "patch": "@@ -1,3 +1,9 @@\n+2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91942\n+\t* gfortran.dg/pr91587.f90: Update dg-error regex.\n+\t* gfortran.dg/pr91942.f90: New test.\n+\n 2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91943"}, {"sha": "c304be116c08bcb506ab46b63790694950b86b75", "filename": "gcc/testsuite/gfortran.dg/pr91587.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91587.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91587.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91587.f90?ref=939e9f696b843f2c6472ac0fd541399e2b3faa7e", "patch": "@@ -2,9 +2,9 @@\n ! PR fortran/91587\n ! Code contributed by Gerhard Steinmetz\n program p\n-   backspace(err=!)  ! { dg-error \"Syntax error in\" }\n-   flush(err=!)      ! { dg-error \"Syntax error in\" }\n-   rewind(err=!)     ! { dg-error \"Syntax error in\" }\n+   backspace(err=!)  ! { dg-error \"Invalid value for\" }\n+   flush(err=!)      ! { dg-error \"Invalid value for\" }\n+   rewind(err=!)     ! { dg-error \"Invalid value for\" }\n end\n \n subroutine bar       ! An other matcher runs, and gives a different error."}, {"sha": "cd237d386601f3b97ff45012caa17a835d79941f", "filename": "gcc/testsuite/gfortran.dg/pr91942.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91942.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939e9f696b843f2c6472ac0fd541399e2b3faa7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91942.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91942.f90?ref=939e9f696b843f2c6472ac0fd541399e2b3faa7e", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR fortran/91942\n+! Code contributed by Gerhard Steinmetz\n+program p\n+   integer :: i\n+   backspace (iostat=i%kind) ! { dg-error \"Expecting a variable at\" }\n+   endfile (iostat=i%kind) ! { dg-error \"Expecting END PROGRAM\" }\n+   flush (iostat=i%kind) ! { dg-error \"Expecting a variable at\" }\n+   rewind (iostat=i%kind) ! { dg-error \"Expecting a variable at\" }\n+end"}]}