{"sha": "38109dbe011a7f69dc36c402186f6ffb2b385ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxMDlkYmUwMTFhN2Y2OWRjMzZjNDAyMTg2ZjZmZmIyYjM4NWFjNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-12T22:13:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-12T22:13:01Z"}, "message": "compiler: If unary & does not escape, the var does not escape.\n\nIf we have a unary & that takes the address of a variable, do\nnot force the variable to escape if the unary & does not\nescape.\n\nFrom-SVN: r223100", "tree": {"sha": "1068b1cbe6a9bafec00ef2500175bb992cd8cfec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1068b1cbe6a9bafec00ef2500175bb992cd8cfec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38109dbe011a7f69dc36c402186f6ffb2b385ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38109dbe011a7f69dc36c402186f6ffb2b385ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38109dbe011a7f69dc36c402186f6ffb2b385ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38109dbe011a7f69dc36c402186f6ffb2b385ac5/comments", "author": null, "committer": null, "parents": [{"sha": "7e269fe8753df7018b2bcf29fe1bff3e01d09138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e269fe8753df7018b2bcf29fe1bff3e01d09138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e269fe8753df7018b2bcf29fe1bff3e01d09138"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "05ab42b55da44e867c42a50267e090bada7869b7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38109dbe011a7f69dc36c402186f6ffb2b385ac5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38109dbe011a7f69dc36c402186f6ffb2b385ac5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=38109dbe011a7f69dc36c402186f6ffb2b385ac5", "patch": "@@ -3668,7 +3668,12 @@ Unary_expression::do_flatten(Gogo* gogo, Named_object*,\n \n   if (this->op_ == OPERATOR_AND)\n     {\n-      if (this->expr_->var_expression() != NULL)\n+      // If this->escapes_ is false at this point, then it was set to\n+      // false by an explicit call to set_does_not_escape, and the\n+      // value does not escape.  If this->escapes_ is true, we may be\n+      // able to set it to false if taking the address of a variable\n+      // that does not escape.\n+      if (this->escapes_ && this->expr_->var_expression() != NULL)\n \t{\n \t  Named_object* var = this->expr_->var_expression()->named_object();\n \t  if (var->is_variable())"}]}