{"sha": "b01890ffd36bdd210e37b212b86eb3548ab325b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxODkwZmZkMzZiZGQyMTBlMzdiMjEyYjg2ZWIzNTQ4YWIzMjViNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-12-01T16:45:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-12-01T16:45:36Z"}, "message": "tree.c (build_common_builtin_nodes): Do not initialize BUILT_IN_PROFILE_FUNC_ENTER and BUILT_IN_PROFILE_FUNC_EXIT.\n\n\n\t* tree.c (build_common_builtin_nodes): Do not initialize\n\tBUILT_IN_PROFILE_FUNC_ENTER and BUILT_IN_PROFILE_FUNC_EXIT.\n\t* builtins.c (expand_builtin_profile_func): Remove.\n\t(expand_builtin): Do not handle BUILT_IN_PROFILE_FUNC_ENTER and\n\tBUILT_IN_PROFILE_FUNC_EXIT.\n\t* builtins.def (profile_func_enter, profile_func_exit): Remove stubs.\n\t(__cyg_profile_func_enter, __cyg_profile_func_exit): New.\n\t* gimplify.c (gimplify_function_tree): Reorganize code calling\n\tprofiling functions.\n\nFrom-SVN: r167342", "tree": {"sha": "1a9bb0dbdc363905b0b9554093c37fa22dc1183a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9bb0dbdc363905b0b9554093c37fa22dc1183a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01890ffd36bdd210e37b212b86eb3548ab325b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01890ffd36bdd210e37b212b86eb3548ab325b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01890ffd36bdd210e37b212b86eb3548ab325b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01890ffd36bdd210e37b212b86eb3548ab325b6/comments", "author": null, "committer": null, "parents": [{"sha": "0df226a41f324eb82b72efd37298f83aed7dff97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df226a41f324eb82b72efd37298f83aed7dff97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df226a41f324eb82b72efd37298f83aed7dff97"}], "stats": {"total": 77, "additions": 37, "deletions": 40}, "files": [{"sha": "26c6e8ef095a6b9a2842627a86c629f4849d3ded", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b01890ffd36bdd210e37b212b86eb3548ab325b6", "patch": "@@ -1,3 +1,15 @@\n+2010-12-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (build_common_builtin_nodes): Do not initialize\n+\tBUILT_IN_PROFILE_FUNC_ENTER and BUILT_IN_PROFILE_FUNC_EXIT.\n+\t* builtins.c (expand_builtin_profile_func): Remove.\n+\t(expand_builtin): Do not handle BUILT_IN_PROFILE_FUNC_ENTER and\n+\tBUILT_IN_PROFILE_FUNC_EXIT.\n+\t* builtins.def (profile_func_enter, profile_func_exit): Remove stubs.\n+\t(__cyg_profile_func_enter, __cyg_profile_func_exit): New.\n+\t* gimplify.c (gimplify_function_tree): Reorganize code calling\n+\tprofiling functions.\n+\n 2010-12-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts.c: Expand comment on tm.h include."}, {"sha": "2816a7e1e618f54c5ea78ac887d1107d70b176dc", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b01890ffd36bdd210e37b212b86eb3548ab325b6", "patch": "@@ -5202,30 +5202,6 @@ build_string_literal (int len, const char *str)\n   return t;\n }\n \n-/* Expand a call to either the entry or exit function profiler.  */\n-\n-static rtx\n-expand_builtin_profile_func (bool exitp)\n-{\n-  rtx this_rtx, which;\n-\n-  this_rtx = DECL_RTL (current_function_decl);\n-  gcc_assert (MEM_P (this_rtx));\n-  this_rtx = XEXP (this_rtx, 0);\n-\n-  if (exitp)\n-    which = profile_function_exit_libfunc;\n-  else\n-    which = profile_function_entry_libfunc;\n-\n-  emit_library_call (which, LCT_NORMAL, VOIDmode, 2, this_rtx, Pmode,\n-\t\t     expand_builtin_return_addr (BUILT_IN_RETURN_ADDRESS,\n-\t\t\t\t\t\t 0),\n-\t\t     Pmode);\n-\n-  return const0_rtx;\n-}\n-\n /* Expand a call to __builtin___clear_cache.  */\n \n static rtx\n@@ -6364,11 +6340,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_builtin_prefetch (exp);\n       return const0_rtx;\n \n-    case BUILT_IN_PROFILE_FUNC_ENTER:\n-      return expand_builtin_profile_func (false);\n-    case BUILT_IN_PROFILE_FUNC_EXIT:\n-      return expand_builtin_profile_func (true);\n-\n     case BUILT_IN_INIT_TRAMPOLINE:\n       return expand_builtin_init_trampoline (exp);\n     case BUILT_IN_ADJUST_TRAMPOLINE:"}, {"sha": "3e102e316253fbf49b081292b105467a8926c588", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=b01890ffd36bdd210e37b212b86eb3548ab325b6", "patch": "@@ -743,8 +743,10 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_VFPRINTF_CHK, \"__vfprintf_chk\", BT_FN_INT_FILEP\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_VPRINTF_CHK, \"__vprintf_chk\", BT_FN_INT_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n \n /* Profiling hooks.  */\n-DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\")\n-DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\")\n+DEF_BUILTIN (BUILT_IN_PROFILE_FUNC_ENTER, \"__cyg_profile_func_enter\", BUILT_IN_NORMAL, BT_FN_VOID_PTR_PTR, BT_LAST,\n+\t     false, false, false, ATTR_NULL, true, true)\n+DEF_BUILTIN (BUILT_IN_PROFILE_FUNC_EXIT, \"__cyg_profile_func_exit\", BUILT_IN_NORMAL, BT_FN_VOID_PTR_PTR, BT_LAST,\n+\t     false, false, false, ATTR_NULL, true, true)\n \n /* TLS emulation.  */\n DEF_BUILTIN (BUILT_IN_EMUTLS_GET_ADDRESS, targetm.emutls.get_address,"}, {"sha": "10e2b24a33e4e0a13d11c3e38588268b00d88fb4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b01890ffd36bdd210e37b212b86eb3548ab325b6", "patch": "@@ -7861,13 +7861,31 @@ gimplify_function_tree (tree fndecl)\n       gimple new_bind;\n       gimple tf;\n       gimple_seq cleanup = NULL, body = NULL;\n-\n+      tree tmp_var;\n+      gimple call;\n+\n+      x = implicit_built_in_decls[BUILT_IN_RETURN_ADDRESS];\n+      call = gimple_build_call (x, 0);\n+      tmp_var = create_tmp_var (ptr_type_node, \"return_addr\");\n+      gimple_call_set_lhs (call, tmp_var);\n+      gimplify_seq_add_stmt (&cleanup, call);\n       x = implicit_built_in_decls[BUILT_IN_PROFILE_FUNC_EXIT];\n-      gimplify_seq_add_stmt (&cleanup, gimple_build_call (x, 0));\n+      call = gimple_build_call (x, 2,\n+\t\t\t\tbuild_fold_addr_expr (current_function_decl),\n+\t\t\t\ttmp_var);\n+      gimplify_seq_add_stmt (&cleanup, call);\n       tf = gimple_build_try (seq, cleanup, GIMPLE_TRY_FINALLY);\n \n+      x = implicit_built_in_decls[BUILT_IN_RETURN_ADDRESS];\n+      call = gimple_build_call (x, 0);\n+      tmp_var = create_tmp_var (ptr_type_node, \"return_addr\");\n+      gimple_call_set_lhs (call, tmp_var);\n+      gimplify_seq_add_stmt (&body, call);\n       x = implicit_built_in_decls[BUILT_IN_PROFILE_FUNC_ENTER];\n-      gimplify_seq_add_stmt (&body, gimple_build_call (x, 0));\n+      call = gimple_build_call (x, 2,\n+\t\t\t\tbuild_fold_addr_expr (current_function_decl),\n+\t\t\t\ttmp_var);\n+      gimplify_seq_add_stmt (&body, call);\n       gimplify_seq_add_stmt (&body, tf);\n       new_bind = gimple_build_bind (NULL, body, gimple_bind_block (bind));\n       /* Clear the block for BIND, since it is no longer directly inside"}, {"sha": "3a41244cd0f51afe8332b1900c2031da77728125", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01890ffd36bdd210e37b212b86eb3548ab325b6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b01890ffd36bdd210e37b212b86eb3548ab325b6", "patch": "@@ -9324,12 +9324,6 @@ build_common_builtin_nodes (void)\n \t\t\tBUILT_IN_STACK_RESTORE,\n \t\t\t\"__builtin_stack_restore\", ECF_NOTHROW | ECF_LEAF);\n \n-  ftype = build_function_type_list (void_type_node, NULL_TREE);\n-  local_define_builtin (\"__builtin_profile_func_enter\", ftype,\n-\t\t\tBUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\", 0);\n-  local_define_builtin (\"__builtin_profile_func_exit\", ftype,\n-\t\t\tBUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\", 0);\n-\n   /* If there's a possibility that we might use the ARM EABI, build the\n     alternate __cxa_end_cleanup node used to resume from C++ and Java.  */\n   if (targetm.arm_eabi_unwinder)"}]}