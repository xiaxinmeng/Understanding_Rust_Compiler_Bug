{"sha": "1841e25ca581e68d4a331135fc5bdee2da7b6514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0MWUyNWNhNTgxZTY4ZDRhMzMxMTM1ZmM1YmRlZTJkYTdiNjUxNA==", "commit": {"author": {"name": "Marcel B\u00f6hme", "email": "boehme.marcel@gmail.com", "date": "2016-08-04T16:53:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-08-04T16:53:18Z"}, "message": "re PR c++/71696 (Libiberty Demangler segfaults (6))\n\n2016-08-04  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n\n\tPR c++/71696\n\t* cplus-dem.c: Prevent infinite recursion when there is a cycle\n\tin the referencing of remembered mangled types.\n\t(work_stuff): New stack to keep track of the remembered mangled\n\ttypes that are currently being processed.\n\t(push_processed_type): New method to push currently processed\n\tremembered type onto the stack.\n\t(pop_processed_type): New method to pop currently processed\n\tremembered type from the stack.\n\t(work_stuff_copy_to_from): Copy values of new variables.\n\t(delete_non_B_K_work_stuff): Free stack memory.\n\t(demangle_args): Push/Pop currently processed remembered type.\n\t(do_type): Do not demangle a cyclic reference and push/pop\n\treferenced remembered type.\n\nFrom-SVN: r239143", "tree": {"sha": "bd35487dce4bd0a9442cecd0fbd76b70a3e759cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd35487dce4bd0a9442cecd0fbd76b70a3e759cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1841e25ca581e68d4a331135fc5bdee2da7b6514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1841e25ca581e68d4a331135fc5bdee2da7b6514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1841e25ca581e68d4a331135fc5bdee2da7b6514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1841e25ca581e68d4a331135fc5bdee2da7b6514/comments", "author": {"login": "dbgbench", "id": 29189320, "node_id": "MDQ6VXNlcjI5MTg5MzIw", "avatar_url": "https://avatars.githubusercontent.com/u/29189320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbgbench", "html_url": "https://github.com/dbgbench", "followers_url": "https://api.github.com/users/dbgbench/followers", "following_url": "https://api.github.com/users/dbgbench/following{/other_user}", "gists_url": "https://api.github.com/users/dbgbench/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbgbench/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbgbench/subscriptions", "organizations_url": "https://api.github.com/users/dbgbench/orgs", "repos_url": "https://api.github.com/users/dbgbench/repos", "events_url": "https://api.github.com/users/dbgbench/events{/privacy}", "received_events_url": "https://api.github.com/users/dbgbench/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da84183c71bfd681545d046d1d81ab46fe96a818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da84183c71bfd681545d046d1d81ab46fe96a818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da84183c71bfd681545d046d1d81ab46fe96a818"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "e7ff8c3d33795f0fc08cb0440c0ccae39276cb7b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=1841e25ca581e68d4a331135fc5bdee2da7b6514", "patch": "@@ -1,3 +1,20 @@\n+2016-08-04  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n+\n+\tPR c++/71696\n+\t* cplus-dem.c: Prevent infinite recursion when there is a cycle\n+\tin the referencing of remembered mangled types.\n+\t(work_stuff): New stack to keep track of the remembered mangled\n+\ttypes that are currently being processed.\n+\t(push_processed_type): New method to push currently processed\n+\tremembered type onto the stack.\n+\t(pop_processed_type): New method to pop currently processed\n+\tremembered type from the stack.\n+\t(work_stuff_copy_to_from): Copy values of new variables.\n+\t(delete_non_B_K_work_stuff): Free stack memory.\n+\t(demangle_args): Push/Pop currently processed remembered type.\n+\t(do_type): Do not demangle a cyclic reference and push/pop\n+\treferenced remembered type.\n+\n 2016-07-29  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* make-relative-prefix.c (make_relative_prefix_1): Fall back to\n@@ -16,7 +33,7 @@\n \t(d_template_args_1): Split out from d_template_args.\n \t(d_args_length): New.\n \n-2016-07-13  Marcel B\u00c3hme  <boehme.marcel@gmail.com>\n+2016-07-13  Marcel B\u00f6hme  <boehme.marcel@gmail.com>\n \n \tPR c++/70926\n \t* cplus-dem.c: Handle large values and overflow when demangling"}, {"sha": "f95405062c9eec334f30df3efb1faaba0be90e5c", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=1841e25ca581e68d4a331135fc5bdee2da7b6514", "patch": "@@ -144,6 +144,9 @@ struct work_stuff\n   string* previous_argument; /* The last function argument demangled.  */\n   int nrepeats;         /* The number of times to repeat the previous\n \t\t\t   argument.  */\n+  int *proctypevec;     /* Indices of currently processed remembered typevecs.  */\n+  int proctypevec_size;\n+  int nproctypes;\n };\n \n #define PRINT_ANSI_QUALIFIERS (work -> options & DMGL_ANSI)\n@@ -436,6 +439,10 @@ iterate_demangle_function (struct work_stuff *,\n \n static void remember_type (struct work_stuff *, const char *, int);\n \n+static void push_processed_type (struct work_stuff *, int);\n+\n+static void pop_processed_type (struct work_stuff *);\n+\n static void remember_Btype (struct work_stuff *, const char *, int, int);\n \n static int register_Btype (struct work_stuff *);\n@@ -1302,6 +1309,10 @@ work_stuff_copy_to_from (struct work_stuff *to, struct work_stuff *from)\n       memcpy (to->btypevec[i], from->btypevec[i], len);\n     }\n \n+  if (from->proctypevec)\n+    to->proctypevec =\n+      XDUPVEC (int, from->proctypevec, from->proctypevec_size);\n+\n   if (from->ntmpl_args)\n     to->tmpl_argvec = XNEWVEC (char *, from->ntmpl_args);\n \n@@ -1330,11 +1341,17 @@ delete_non_B_K_work_stuff (struct work_stuff *work)\n   /* Discard the remembered types, if any.  */\n \n   forget_types (work);\n-  if (work -> typevec != NULL)\n+  if (work->typevec != NULL)\n     {\n-      free ((char *) work -> typevec);\n-      work -> typevec = NULL;\n-      work -> typevec_size = 0;\n+      free ((char *) work->typevec);\n+      work->typevec = NULL;\n+      work->typevec_size = 0;\n+    }\n+  if (work->proctypevec != NULL)\n+    {\n+      free (work->proctypevec);\n+      work->proctypevec = NULL;\n+      work->proctypevec_size = 0;\n     }\n   if (work->tmpl_argvec)\n     {\n@@ -3555,6 +3572,8 @@ static int\n do_type (struct work_stuff *work, const char **mangled, string *result)\n {\n   int n;\n+  int i;\n+  int is_proctypevec;\n   int done;\n   int success;\n   string decl;\n@@ -3567,6 +3586,7 @@ do_type (struct work_stuff *work, const char **mangled, string *result)\n \n   done = 0;\n   success = 1;\n+  is_proctypevec = 0;\n   while (success && !done)\n     {\n       int member;\n@@ -3627,8 +3647,15 @@ do_type (struct work_stuff *work, const char **mangled, string *result)\n \t      success = 0;\n \t    }\n \t  else\n-\t    {\n-\t      remembered_type = work -> typevec[n];\n+\t    for (i = 0; i < work->nproctypes; i++)\n+\t      if (work -> proctypevec [i] == n)\n+\t        success = 0;\n+\n+\t  if (success)\n+\t    {    \n+\t      is_proctypevec = 1;\n+\t      push_processed_type (work, n);\n+\t      remembered_type = work->typevec[n];\n \t      mangled = &remembered_type;\n \t    }\n \t  break;\n@@ -3850,6 +3877,9 @@ do_type (struct work_stuff *work, const char **mangled, string *result)\n     string_delete (result);\n   string_delete (&decl);\n \n+  if (is_proctypevec)\n+    pop_processed_type (work); \n+\n   if (success)\n     /* Assume an integral type, if we're not sure.  */\n     return (int) ((tk == tk_none) ? tk_integral : tk);\n@@ -4262,6 +4292,41 @@ do_arg (struct work_stuff *work, const char **mangled, string *result)\n   return 1;\n }\n \n+static void\n+push_processed_type (struct work_stuff *work, int typevec_index)\n+{\n+  if (work->nproctypes >= work->proctypevec_size)\n+    {\n+      if (!work->proctypevec_size)\n+\t{\n+\t  work->proctypevec_size = 4;\n+\t  work->proctypevec = XNEWVEC (int, work->proctypevec_size);\n+\t}\n+      else \n+\t{\n+\t  if (work->proctypevec_size < 16)\n+\t    /* Double when small.  */\n+\t    work->proctypevec_size *= 2;\n+\t  else\n+\t    {\n+\t      /* Grow slower when large.  */\n+\t      if (work->proctypevec_size > (INT_MAX / 3) * 2)\n+                xmalloc_failed (INT_MAX);\n+              work->proctypevec_size = (work->proctypevec_size * 3 / 2);\n+\t    }   \n+          work->proctypevec\n+            = XRESIZEVEC (int, work->proctypevec, work->proctypevec_size);\n+\t}\n+    }\n+    work->proctypevec [work->nproctypes++] = typevec_index;\n+}\n+\n+static void\n+pop_processed_type (struct work_stuff *work)\n+{\n+  work->nproctypes--;\n+}\n+\n static void\n remember_type (struct work_stuff *work, const char *start, int len)\n {\n@@ -4526,10 +4591,13 @@ demangle_args (struct work_stuff *work, const char **mangled,\n \t\t{\n \t\t  string_append (declp, \", \");\n \t\t}\n+\t      push_processed_type (work, t);  \n \t      if (!do_arg (work, &tem, &arg))\n \t\t{\n+\t\t  pop_processed_type (work);\n \t\t  return (0);\n \t\t}\n+\t      pop_processed_type (work);\n \t      if (PRINT_ARG_TYPES)\n \t\t{\n \t\t  string_appends (declp, &arg);"}, {"sha": "a5a658a7095948fd17edf5a11bfb88a1b83d8f05", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1841e25ca581e68d4a331135fc5bdee2da7b6514/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=1841e25ca581e68d4a331135fc5bdee2da7b6514", "patch": "@@ -4587,3 +4587,8 @@ _Z80800000000000000000000\n \n __t2m05B500000000000000000_\n __t2m05B500000000000000000_\n+#\n+# Tests stack overflow PR71696\n+\n+__10%0__S4_0T0T0\n+%0<>::%0(%0<>)"}]}