{"sha": "eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5YzFiYjZlMjdkZTg5MWZjYzExZjY5YjgzYTE5NDlkMzVjZTI3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-01T16:29:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-01T16:29:09Z"}, "message": "i960.c (i960_br_predict_opcode): Remove.\n\n        * i960.c (i960_br_predict_opcode): Remove.\n        (i960_print_operand) [+]: Emit branch prediction hints.\n        (i960_function_arg): Return early for VOIDmode.\n        (i960_round_align): Return early for incomplete types.\n        * i960.h (PRINT_OPERAND_PUNCT_VALID_P): New.\n        * i960.md (all conditional branches): Add \"%+\".\n\nFrom-SVN: r34342", "tree": {"sha": "0e95b0ea756363d89c4d4ef75ec1b00f2e0d484b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e95b0ea756363d89c4d4ef75ec1b00f2e0d484b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/comments", "author": null, "committer": null, "parents": [{"sha": "f824e5c36eea7d0a9a5b9a5147751278de4778c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f824e5c36eea7d0a9a5b9a5147751278de4778c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f824e5c36eea7d0a9a5b9a5147751278de4778c0"}], "stats": {"total": 92, "additions": 45, "deletions": 47}, "files": [{"sha": "098343e60e2cd54e01716a037a779066ec8d3bdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "patch": "@@ -1,3 +1,12 @@\n+2000-06-01  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i960.c (i960_br_predict_opcode): Remove.\n+\t(i960_print_operand) [+]: Emit branch prediction hints.\n+\t(i960_function_arg): Return early for VOIDmode.\n+\t(i960_round_align): Return early for incomplete types.\n+\t* i960.h (PRINT_OPERAND_PUNCT_VALID_P): New.\n+\t* i960.md (all conditional branches): Add \"%+\".\n+\n Thu Jun  1 12:24:21 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* alias.c (get_alias_set): Don't call language-specific routine more\n@@ -22,7 +31,7 @@ Thu Jun  1 09:37:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* Makefile.in (c-decl.o): Depend on $(EXPR_H), not expr.h.\n \n-        * c-decl.c (init_decl_processing): Set lang_get_alias_set first thing.\n+\t* c-decl.c (init_decl_processing): Set lang_get_alias_set first thing.\n \n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "e8e046db2e4c768388630985238900d2d616c264", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "patch": "@@ -1755,40 +1755,6 @@ i960_output_ret_insn (insn)\n   return \"ret\";\n }\n \f\n-#if 0\n-/* Return a character string representing the branch prediction\n-   opcode to be tacked on an instruction.  This must at least\n-   return a null string.  */\n-\n-const char *\n-i960_br_predict_opcode (lab_ref, insn)\n-     rtx lab_ref, insn;\n-{\n-  if (TARGET_BRANCH_PREDICT)\n-    {\n-      unsigned long label_uid;\n-      \n-      if (GET_CODE (lab_ref) == CODE_LABEL)\n-\tlabel_uid = INSN_UID (lab_ref);\n-      else if (GET_CODE (lab_ref) == LABEL_REF)\n-\tlabel_uid = INSN_UID (XEXP (lab_ref, 0));\n-      else\n-\treturn \".f\";\n-\n-      /* If not optimizing, then the insn_addresses array will not be\n-\t valid.  In this case, always return \".t\" since most branches\n-\t are taken.  If optimizing, return .t for backward branches\n-\t and .f for forward branches.  */\n-      if (! optimize\n-\t  || insn_addresses[label_uid] < insn_addresses[INSN_UID (insn)])\n-\treturn \".t\";\n-      return \".f\";\n-    }\n-    \n-  return \"\";\n-}\n-#endif\n-\n /* Print the operand represented by rtx X formatted by code CODE.  */\n \n void\n@@ -1797,7 +1763,7 @@ i960_print_operand (file, x, code)\n      rtx x;\n      int code;\n {\n-  enum rtx_code rtxcode = GET_CODE (x);\n+  enum rtx_code rtxcode = x ? GET_CODE (x) : NIL;\n \n   if (rtxcode == REG)\n     {\n@@ -1918,6 +1884,19 @@ i960_print_operand (file, x, code)\n       else abort ();\n       break;\n \n+    case '+':\n+      /* For conditional branches, substitute \".t\" or \".f\".  */\n+      if (TARGET_BRANCH_PREDICT)\n+\t{\n+\t  x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n+\t  if (x)\n+\t    {\n+\t      int pred_val = INTVAL (XEXP (x, 0));\n+\t      fputs ((pred_val < REG_BR_PROB_BASE / 2 ? \".f\" : \".t\"), file);\n+\t    }\n+\t}\n+      break;\n+\n     case 0:\n       output_addr_const (file, x);\n       break;\n@@ -2509,6 +2488,9 @@ i960_function_arg (cum, mode, type, named)\n   rtx ret;\n   int size, align;\n \n+  if (mode == VOIDmode)\n+    return 0;\n+\n   i960_arg_size_and_align (mode, type, &size, &align);\n \n   if (size > 4 || cum->ca_nstackparms != 0\n@@ -2601,7 +2583,7 @@ i960_round_align (align, tsize)\n {\n   int new_align;\n \n-  if (TREE_CODE (tsize) != INTEGER_CST)\n+  if (! tsize || TREE_CODE (tsize) != INTEGER_CST)\n     return align;\n \n   new_align = i960_object_bytes_bitalign (TREE_INT_CST_LOW (tsize)"}, {"sha": "cc12d45ad13c5681456fe7eb1a38d26b947e765d", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "patch": "@@ -1564,6 +1564,13 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)\t\\\n   i960_print_operand_addr (FILE, ADDR)\n+\n+/* Determine which codes are valid without a following integer.  These must\n+   not be alphabetic (the characters are chosen so that\n+   PRINT_OPERAND_PUNCT_VALID_P translates into a simple range change when\n+   using ASCII).  */\n+\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE)   ((CODE) == '+')\n \f\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */"}, {"sha": "e42a894dffaf171ea985ea651c3ab12ff94e37e9", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9c1bb6e27de891fcc11f69b83a1949d35ce27d/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=eb9c1bb6e27de891fcc11f69b83a1949d35ce27d", "patch": "@@ -171,7 +171,7 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbs\t%2,%1,%l3\"\n+  \"bbs%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -184,7 +184,7 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbc\t%2,%1,%l3\"\n+  \"bbc%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -197,7 +197,7 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbs\t%2,%1,%l3\"\n+  \"bbs%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -210,7 +210,7 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"bbc\t%2,%1,%l3\"\n+  \"bbc%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \n ;; ??? These will never match.  The LOG_LINKs necessary to make these match\n@@ -483,7 +483,7 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"b%C0 %l1\"\n+  \"b%C0%+ %l1\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -493,7 +493,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n-  \"b%I0 %l1\"\n+  \"b%I0%+ %l1\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -503,7 +503,7 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"b%C0 %l1\"\n+  \"b%C0%+ %l1\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -513,7 +513,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n-  \"b%I0 %l1\"\n+  \"b%I0%+ %l1\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -525,7 +525,7 @@\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"cmp%S0%B0%R0\t%2,%1,%l3\"\n+  \"cmp%S0%B0%R0%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -537,7 +537,7 @@\n \t (pc)\n \t (label_ref (match_operand 3 \"\" \"\"))))]\n   \"\"\n-  \"cmp%S0%B0%X0\t%2,%1,%l3\"\n+  \"cmp%S0%B0%X0%+\t%2,%1,%l3\"\n   [(set_attr \"type\" \"branch\")])\n \f\n ;; Now the trap instructions.  The i960 appears to only have conditional"}]}