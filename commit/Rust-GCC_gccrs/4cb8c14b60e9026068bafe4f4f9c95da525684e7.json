{"sha": "4cb8c14b60e9026068bafe4f4f9c95da525684e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiOGMxNGI2MGU5MDI2MDY4YmFmZTRmNGY5Yzk1ZGE1MjU2ODRlNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-26T23:18:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-26T23:18:37Z"}, "message": "(OBJC_VERSION): Version 7.\n\n(build_objc_string_object): Build a full declaration if not using the next\nruntime.\n(objc_add_static_instance): New function.\n(init_module_descriptor): Add reference to static instances table.\n(build_module_descriptor): Add field for static instances table.\n(get_objc_string_decl): New function.\n(generate_static_references): New function.\n(finish_objc): Call generate_static_references if needed.\n\nFrom-SVN: r9500", "tree": {"sha": "6dd2c1cbffba6a2658331cdbb6c07c006948a87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd2c1cbffba6a2658331cdbb6c07c006948a87e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cb8c14b60e9026068bafe4f4f9c95da525684e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb8c14b60e9026068bafe4f4f9c95da525684e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb8c14b60e9026068bafe4f4f9c95da525684e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb8c14b60e9026068bafe4f4f9c95da525684e7/comments", "author": null, "committer": null, "parents": [{"sha": "0df0f84cb57740b5a068f15175f05116a3cf0f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df0f84cb57740b5a068f15175f05116a3cf0f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df0f84cb57740b5a068f15175f05116a3cf0f04"}], "stats": {"total": 202, "additions": 193, "deletions": 9}, "files": [{"sha": "0569c0cf1cc408e674bb1d33f43fe432bcbd495b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 193, "deletions": 9, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cb8c14b60e9026068bafe4f4f9c95da525684e7/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cb8c14b60e9026068bafe4f4f9c95da525684e7/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4cb8c14b60e9026068bafe4f4f9c95da525684e7", "patch": "@@ -1,6 +1,6 @@\n /* Implement classes and message passing for Objective C.\n    Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n-   Author: Steve Naroff.\n+   Contributed by Steve Naroff.\n \n This file is part of GNU CC.\n \n@@ -124,11 +124,17 @@ static struct obstack util_obstack;\n    so we can free the whole contents.  */\n char *util_firstobj;\n \n+/* List of classes with list of their static instances.  */\n+static tree objc_static_instances;\n+\n+/* The declaration of the array administrating the static instances.  */\n+static tree static_instances_decl;\n+\n /* for encode_method_def */\n #include \"rtl.h\"\n #include \"c-parse.h\"\n \n-#define OBJC_VERSION\t(flag_next_runtime ? 5 : 6)\n+#define OBJC_VERSION\t(flag_next_runtime ? 5 : 7)\n #define PROTOCOL_VERSION 2\n \n #define NULLT\t(tree) 0\n@@ -155,6 +161,8 @@ static tree get_proto_encoding \t\t\tPROTO((tree));\n static void build_selector_translation_table\tPROTO((void));\n static tree build_ivar_chain\t\t\tPROTO((tree, int));\n \n+static tree objc_add_static_instance\t\tPROTO((tree, tree));\n+\n static tree build_ivar_template\t\t\tPROTO((void));\n static tree build_method_template\t\tPROTO((void));\n static tree build_private_template\t\tPROTO((tree));\n@@ -321,6 +329,7 @@ static void handle_class_ref\t\t\tPROTO((tree));\n #define UTAG_METHOD_LIST\t\"_objc_method_list\"\n #define UTAG_CATEGORY\t\t\"_objc_category\"\n #define UTAG_MODULE\t\t\"_objc_module\"\n+#define UTAG_STATICS\t\t\"_objc_statics\"\n #define UTAG_SYMTAB\t\t\"_objc_symtab\"\n #define UTAG_SUPER\t\t\"_objc_super\"\n #define UTAG_SELECTOR\t\t\"_objc_selector\"\n@@ -1122,8 +1131,10 @@ synth_module_prologue ()\n       UOBJC_SELECTOR_TABLE_decl\n \t= create_builtin_decl (VAR_DECL, temp_type,\n \t\t\t       \"_OBJC_SELECTOR_TABLE\");\n-    }\n \n+      /* Avoid warning when not sending messages.  */\n+      TREE_USED (UOBJC_SELECTOR_TABLE_decl) = 1;\n+    }\n \n   generate_forward_declaration_to_string_table ();\n \n@@ -1204,13 +1215,59 @@ build_objc_string_object (strings)\n   /* & ((NXConstantString) {0, string, length})  */\n \n   initlist = build_tree_list (NULLT, build_int_2 (0, 0));\n-  initlist = tree_cons (NULLT, build_unary_op (ADDR_EXPR, string, 1),\n-\t\t\tinitlist);\n-  initlist = tree_cons (NULLT, build_int_2 (length, 0), initlist);\n+  initlist = perm_tree_cons (NULLT,\n+\t\t\t     copy_node (build_unary_op (ADDR_EXPR, string, 1)),\n+\t\t\t     initlist);\n+  initlist = perm_tree_cons (NULLT, build_int_2 (length, 0), initlist);\n   constructor = build_constructor (constant_string_type,\n \t\t\t\t   nreverse (initlist));\n \n-  return build_unary_op (ADDR_EXPR, constructor, 1);\n+  if (!flag_next_runtime)\n+    constructor = objc_add_static_instance (constructor, constant_string_type);\n+  return (build_unary_op (ADDR_EXPR, constructor, 1));\n+}\n+\n+/* Declare a static instance of CLASS_DECL initialized by CONSTRUCTOR.  */\n+static tree\n+objc_add_static_instance (constructor, class_decl)\n+     tree constructor, class_decl;\n+{\n+  static int num_static_inst;\n+  struct obstack *save_current_obstack = current_obstack;\n+  struct obstack *save_rtl_obstack = rtl_obstack;\n+  tree *chain, decl, decl_spec, decl_expr;\n+  char buf[256];\n+\n+  rtl_obstack = current_obstack = &permanent_obstack;\n+\n+  /* Find the list of static instances for the CLASS_DECL.  Create one if\n+     not found.  */\n+  for (chain = &objc_static_instances;\n+       *chain && TREE_VALUE (*chain) != class_decl;\n+       chain = &TREE_CHAIN (*chain));\n+  if (!*chain)\n+    {\n+      *chain = perm_tree_cons (NULLT, class_decl, NULLT);\n+      add_objc_string (TYPE_NAME (class_decl), class_names);\n+    }\n+\n+  sprintf (buf, \"_OBJC_INSTANCE_%d\", num_static_inst++);\n+  decl_expr = get_identifier (buf);\n+  decl_spec = tree_cons (NULLT, class_decl,\n+\t\t\t build_tree_list (NULLT,\n+\t\t\t\t\t  ridpointers[(int) RID_STATIC]));\n+  decl = start_decl (decl_expr, decl_spec, 1);\n+  end_temporary_allocation ();\n+\n+  /* Barf!  Make sure this decl will end up at the global binding level.  */\n+  finish_decl_top_level (decl, constructor, NULLT);\n+\n+  current_obstack = save_current_obstack;\n+  rtl_obstack = save_rtl_obstack;\n+\n+  /* Add the DECL to the head of this CLASS' list.  */\n+  TREE_PURPOSE (*chain) = perm_tree_cons (NULLT, decl, TREE_PURPOSE (*chain));\n+  return (decl);\n }\n \n /* Build a static constant CONSTRUCTOR\n@@ -1440,6 +1497,18 @@ init_module_descriptor (type)\n   expr = add_objc_string (get_identifier (input_filename), class_names);\n   initlist = tree_cons (NULLT, expr, initlist);\n \n+\n+  if (!flag_next_runtime)\n+    {\n+      /* statics = { ..., _OBJC_STATIC_INSTANCES, ... }  */\n+      if (static_instances_decl)\n+\texpr = build_unary_op (ADDR_EXPR, static_instances_decl, 0);\n+      else\n+\texpr = build_int_2 (0, 0);\n+      initlist = tree_cons (NULLT, expr, initlist);\n+    }\n+\n+\n   /* symtab = { ..., _OBJC_SYMBOLS, ... } */\n \n   if (UOBJC_SYMBOLS_decl)\n@@ -1489,6 +1558,20 @@ build_module_descriptor ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n+\n+  if (!flag_next_runtime)\n+    {\n+      /* void *statics */\n+\n+      decl_specs = get_identifier (UTAG_STATICS);\n+      decl_specs = build_tree_list (NULLT, xref_tag (RECORD_TYPE, decl_specs));\n+      field_decl = build1 (INDIRECT_REF, NULLT, get_identifier (\"statics\"));\n+      field_decl = grokfield (input_filename, lineno, field_decl,\n+\t\t\t      decl_specs, NULLT);\n+      chainon (field_decl_chain, field_decl);\n+    }\n+\n+\n   /* struct objc_symtab *symtab; */\n \n   decl_specs = get_identifier (UTAG_SYMTAB);\n@@ -1598,6 +1681,104 @@ generate_forward_declaration_to_string_table ()\n   UOBJC_STRINGS_decl = define_decl (expr_decl, decl_specs);\n }\n \n+/* Return the DECL of the string IDENT in the SECTION.  */\n+static tree\n+get_objc_string_decl (ident, section)\n+     tree ident;\n+     enum string_section section;\n+{\n+  tree chain, decl;\n+\n+  if (section == class_names)\n+    chain = class_names_chain;\n+  else if (section == meth_var_names)\n+    chain = meth_var_names_chain;\n+  else if (section == meth_var_types)\n+    chain = meth_var_types_chain;\n+\n+  while (chain)\n+    {\n+      if (TREE_VALUE (chain) == ident)\n+\treturn (TREE_PURPOSE (chain));\n+\n+      chain = TREE_CHAIN (chain);\n+    }\n+\n+  abort ();\n+  return NULLT;\n+}\n+\n+/* Output references to all statically allocated objects.  Return the DECL\n+   for the array built.  */\n+static tree\n+generate_static_references ()\n+{\n+  tree decls = NULLT, ident, decl_spec, expr_decl, expr = NULLT;\n+  tree class_name, class, decl, instance, idecl, initlist;\n+  tree cl_chain, in_chain, type;\n+  int num_inst, num_class;\n+  char buf[256];\n+\n+  if (flag_next_runtime)\n+    abort ();\n+\n+\n+  for (cl_chain = objc_static_instances, num_class = 0;\n+       cl_chain; cl_chain = TREE_CHAIN (cl_chain), num_class++)\n+    {\n+      for (num_inst = 0, in_chain = TREE_PURPOSE (cl_chain);\n+\t   in_chain; num_inst++, in_chain = TREE_CHAIN (in_chain));\n+\n+      sprintf (buf, \"_OBJC_STATIC_INSTANCES_%d\", num_class);\n+      ident = get_identifier (buf);\n+\n+      expr_decl = build_nt (ARRAY_REF, ident, NULLT);\n+      decl_spec = tree_cons (NULLT, build_pointer_type (void_type_node),\n+\t\t\t     build_tree_list (NULLT,\n+\t\t\t\t\t      ridpointers[(int) RID_STATIC]));\n+      decl = start_decl (expr_decl, decl_spec, 1);\n+      end_temporary_allocation ();\n+\n+      /* Output {class_name, ...}.  */\n+      class = TREE_VALUE (cl_chain);\n+      class_name = get_objc_string_decl (TYPE_NAME (class), class_names);\n+      initlist = build_tree_list (NULLT,\n+\t\t\t\t  build_unary_op (ADDR_EXPR, class_name, 1));\n+\n+      /* Output {..., instance, ...}.  */\n+      for (in_chain = TREE_PURPOSE (cl_chain);\n+\t   in_chain; in_chain = TREE_CHAIN (in_chain))\n+\t{\n+\t  expr = build_unary_op (ADDR_EXPR, TREE_VALUE (in_chain), 1);\n+\t  initlist = tree_cons (NULLT, expr, initlist);\n+\t}\n+\n+      /* Output {..., NULL}.  */\n+      initlist = tree_cons (NULLT, build_int_2 (0, 0), initlist);\n+\n+      expr = build_constructor (TREE_TYPE (decl), nreverse (initlist));\n+      finish_decl (decl, expr, NULLT);\n+      TREE_USED (decl) = 1;\n+\n+      type = build_array_type (build_pointer_type (void_type_node), 0);\n+      decl = build_decl (VAR_DECL, ident, type);\n+      make_decl_rtl (decl, 0, 1);\n+      TREE_USED (decl) = 1;\n+      decls = tree_cons (NULLT, build_unary_op (ADDR_EXPR, decl, 1), decls);\n+    }\n+  decls = tree_cons (NULLT, build_int_2 (0, 0), decls);\n+  ident = get_identifier (\"_OBJC_STATIC_INSTANCES\");\n+  expr_decl = build_nt (ARRAY_REF, ident, NULLT);\n+  decl_spec = tree_cons (NULLT, build_pointer_type (void_type_node),\n+\t\t\t build_tree_list (NULLT,\n+\t\t\t\t\t  ridpointers[(int) RID_STATIC]));\n+  static_instances_decl = start_decl (expr_decl, decl_spec, 1);\n+  end_temporary_allocation ();\n+  expr = build_constructor (TREE_TYPE (static_instances_decl),\n+\t\t\t    nreverse (decls));\n+  finish_decl (static_instances_decl, expr, NULLT);\n+}\n+\n /* Output all strings. */\n \n static void\n@@ -2049,7 +2230,7 @@ build_objc_string_decl (name, section)\n   TREE_USED (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   TREE_CONSTANT (decl) = 1;\n-\n+ \n   make_decl_rtl (decl, 0, 1); /* usually called from `rest_of_decl_compilation */\n   pushdecl_top_level (decl);  /* our `extended/custom' pushdecl in c-decl.c */\n \n@@ -7531,7 +7712,10 @@ finish_objc ()\n   if (protocol_chain)\n     generate_protocols ();\n \n-  if (implementation_context || class_names_chain\n+  if (objc_static_instances)\n+    generate_static_references ();\n+\n+  if (implementation_context || class_names_chain || objc_static_instances\n       || meth_var_names_chain || meth_var_types_chain || sel_ref_chain)\n     {\n       /* Arrange for Objc data structures to be initialized at run time.  */"}]}