{"sha": "60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkMzQwZWZhNzdjMWFlMDFjZjNlN2E2NmJjZjQwMmNhNzc5M2Q3Zg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-07-08T19:34:49Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-07-08T19:34:49Z"}, "message": "re PR fortran/40675 (Support -fnosign-zero for SIGN intrinsic for Fortran 77 compatibility)\n\n2009-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40675\n        * simplify.c (gfc_simplify_sign): Handle signed zero correctly.\n        * trans-intrinsic.c (gfc_conv_intrinsic_sign): Support\n        -fno-sign-zero.\n        * invoke.texi (-fno-sign-zero): Add text regarding SIGN\n        * intrinsic.\n\n2009-07-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/40675\n        * gfortran.dg/nosigned_zero_1.f90: New test.\n        * gfortran.dg/nosigned_zero_2.f90: New test.\n\nFrom-SVN: r149390", "tree": {"sha": "0a5ea8221f10c4245ae6b6625bf67d42c5a11bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5ea8221f10c4245ae6b6625bf67d42c5a11bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f158db0bf587d51a8527e7399d258b5391bdfef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f158db0bf587d51a8527e7399d258b5391bdfef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f158db0bf587d51a8527e7399d258b5391bdfef"}], "stats": {"total": 106, "additions": 95, "deletions": 11}, "files": [{"sha": "77c5f61f53300fd255fb1ff2b10a1988266e60d0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -1,3 +1,11 @@\n+2009-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40675\n+\t* simplify.c (gfc_simplify_sign): Handle signed zero correctly.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sign): Support\n+\t-fno-sign-zero.\n+\t* invoke.texi (-fno-sign-zero): Add text regarding SIGN intrinsic.\n+\n 2008-07-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/40591"}, {"sha": "68cc0128eed00ca940355359f4a339f500d8a3a8", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -1024,9 +1024,12 @@ really useful for use by the gfortran testsuite.\n \n @item -fsign-zero\n @opindex @code{fsign-zero}\n-When writing zero values, show the negative sign if the sign bit is set.\n-@code{fno-sign-zero} does not print the negative sign of zero values for\n-compatibility with F77.  Default behavior is to show the negative sign.\n+When enabled, floating point numbers of value zero with the sign bit set\n+are written as negative number in formatted output and treated as\n+negative in the @code{SIGN} intrinsic.  @code{fno-sign-zero} does not\n+print the negative sign of zero values and regards zero as positive\n+number in the @code{SIGN} intrinsic for compatibility with F77.\n+Default behavior is to show the negative sign.\n @end table\n \n @node Code Gen Options"}, {"sha": "c619f14be1ec319664260a48817e11c259fe490e", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -4957,16 +4957,15 @@ gfc_simplify_sign (gfc_expr *x, gfc_expr *y)\n       mpz_abs (result->value.integer, x->value.integer);\n       if (mpz_sgn (y->value.integer) < 0)\n \tmpz_neg (result->value.integer, result->value.integer);\n-\n       break;\n \n     case BT_REAL:\n-      /* TODO: Handle -0.0 and +0.0 correctly on machines that support\n-\t it.  */\n-      mpfr_abs (result->value.real, x->value.real, GFC_RND_MODE);\n-      if (mpfr_sgn (y->value.real) < 0)\n-\tmpfr_neg (result->value.real, result->value.real, GFC_RND_MODE);\n-\n+      if (gfc_option.flag_sign_zero)\n+\tmpfr_copysign (result->value.real, x->value.real, y->value.real,\n+\t\t       GFC_RND_MODE);\n+      else\n+\tmpfr_setsign (result->value.real, x->value.real,\n+\t\t      mpfr_sgn (y->value.real) < 0 ? 1 : 0, GFC_RND_MODE);\n       break;\n \n     default:"}, {"sha": "89b98ec72799d4586d2aeb9874d7b122c1c72765", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -1263,22 +1263,41 @@ gfc_conv_intrinsic_sign (gfc_se * se, gfc_expr * expr)\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n   if (expr->ts.type == BT_REAL)\n     {\n+      tree abs;\n+\n       switch (expr->ts.kind)\n \t{\n \tcase 4:\n \t  tmp = built_in_decls[BUILT_IN_COPYSIGNF];\n+\t  abs = built_in_decls[BUILT_IN_FABSF];\n \t  break;\n \tcase 8:\n \t  tmp = built_in_decls[BUILT_IN_COPYSIGN];\n+\t  abs = built_in_decls[BUILT_IN_FABS];\n \t  break;\n \tcase 10:\n \tcase 16:\n \t  tmp = built_in_decls[BUILT_IN_COPYSIGNL];\n+\t  abs = built_in_decls[BUILT_IN_FABSL];\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      se->expr = build_call_expr (tmp, 2, args[0], args[1]);\n+\n+      /* We explicitly have to ignore the minus sign. We do so by using\n+\t result = (arg1 == 0) ? abs(arg0) : copysign(arg0, arg1).  */\n+      if (!gfc_option.flag_sign_zero\n+\t  && MODE_HAS_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (args[1]))))\n+\t{\n+\t  tree cond, zero;\n+\t  zero = build_real_from_int_cst (TREE_TYPE (args[1]), integer_zero_node);\n+\t  cond = fold_build2 (EQ_EXPR, boolean_type_node, args[1], zero);\n+\t  se->expr = fold_build3 (COND_EXPR, TREE_TYPE (args[0]), cond,\n+\t\t\t\t  build_call_expr (abs, 1, args[0]),\n+\t\t\t\t  build_call_expr (tmp, 2, args[0], args[1]));\n+\t}\n+      else\n+\tse->expr = build_call_expr (tmp, 2, args[0], args[1]);\n       return;\n     }\n "}, {"sha": "fa2998a0165c5471c2d1cc65c19982f91e95dec4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -1,3 +1,9 @@\n+2009-07-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/40675\n+\t* gfortran.dg/nosigned_zero_1.f90: New test.\n+\t* gfortran.dg/nosigned_zero_2.f90: New test.\n+\n 2009-07-08  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/torture/ssa-pta-fn-1.c: Fix invalid testcase again."}, {"sha": "51ac87945ce62ab1c7158d44e7ee4fb3f9081467", "filename": "gcc/testsuite/gfortran.dg/nosigned_zero_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_1.f90?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+!\n+! PR fortran/40675\n+!\n+! Fortran 77 just had: \"The value of a signed zero is the same as\n+! the value of an unsigned zero.\" and g77 returned for SIGN(1.0, -0.0) = 1.0\n+!\n+! Fortran 95+ has for SIGN: \"Case  (iv):  If B is of type real and is zero,\n+! then ... (c) If B is negative real zero, the value of the result is -|A|\".\n+! On architectures, where signed zeros are supported, gfortran's SIGN thus\n+! returns for B=-0.0 the -|A|.\n+!\n+program s\n+   x = sign(1.,0.)\n+   y = sign(1.,-0.)\n+   if (x /=  1.) call abort()\n+   if (y /= -1.) call abort()\n+   x = 1.\n+   y = 0.\n+   x = sign(x, y)\n+   y = sign(x, -y)\n+   if (x /=  1.) call abort()\n+   if (y /= -1.) call abort()\n+end program s"}, {"sha": "af05574ed3e5e1a8e3a1df9f17988f39ee4c6473", "filename": "gcc/testsuite/gfortran.dg/nosigned_zero_2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d340efa77c1ae01cf3e7a66bcf402ca7793d7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnosigned_zero_2.f90?ref=60d340efa77c1ae01cf3e7a66bcf402ca7793d7f", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-fno-sign-zero\" }\n+!\n+! PR fortran/40675\n+!\n+! Fortran 77 just had: \"The value of a signed zero is the same as\n+! the value of an unsigned zero.\" and g77 returned for SIGN(1.0, -0.0) = 1.0\n+!\n+! Fortran 95+ has for SIGN: \"Case  (iv):  If B is of type real and is zero,\n+! then ... (c) If B is negative real zero, the value of the result is -|A|\".\n+! On architectures, where signed zeros are supported, gfortran's SIGN thus\n+! returns for B=-0.0 the -|A|.\n+!\n+program s\n+   x = sign(1.,0.)\n+   y = sign(1.,-0.)\n+   if (x /= 1.) call abort()\n+   if (y /= 1.) call abort()\n+   x = 1.\n+   y = 0.\n+   x = sign(x, y)\n+   y = sign(x, -y)\n+   if (x /= 1.) call abort()\n+   if (y /= 1.) call abort()\n+end program s"}]}