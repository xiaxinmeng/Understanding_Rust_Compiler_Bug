{"sha": "633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzYTNmMmFlYTlkMDQ3YzIxYWZkMWFlN2ZiMmQ1YzAyNTg5ZTg4Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T08:52:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T08:52:35Z"}, "message": "ada-tree.h (LOOP_STMT_NO_UNROLL): New define.\n\n\t* gcc-interface/ada-tree.h (LOOP_STMT_NO_UNROLL): New define.\n\t(LOOP_STMT_UNROLL): Likewise.\n\t(LOOP_STMT_NO_VECTOR): Likewise.\n\t(LOOP_STMT_VECTOR): Likewise.\n\t* gcc-interface/trans.c (struct loop_info_d): Replace label field\n\twith stmt field.\n\t(Pragma_to_gnu) <Pragma_Loop_Optimize>: New case.\n\t(Loop_Statement_to_gnu): Save the loop statement onto the stack\n\tinstead of the label.\n\t(gnat_to_gnu) <N_Exit_Statement>: Retrieve the loop label.\n\nFrom-SVN: r199281", "tree": {"sha": "18fe171da5a381948dfbf137744f8dee636874af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18fe171da5a381948dfbf137744f8dee636874af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/comments", "author": null, "committer": null, "parents": [{"sha": "f2423384e6b5de57267b6b6004301f71e8878ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2423384e6b5de57267b6b6004301f71e8878ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2423384e6b5de57267b6b6004301f71e8878ec9"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "af8c0262cba5b3fad1eb16b6f6bd446e01789b05", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "patch": "@@ -1,3 +1,16 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (LOOP_STMT_NO_UNROLL): New define.\n+\t(LOOP_STMT_UNROLL): Likewise.\n+\t(LOOP_STMT_NO_VECTOR): Likewise.\n+\t(LOOP_STMT_VECTOR): Likewise.\n+\t* gcc-interface/trans.c (struct loop_info_d): Replace label field\n+\twith stmt field.\n+\t(Pragma_to_gnu) <Pragma_Loop_Optimize>: New case.\n+\t(Loop_Statement_to_gnu): Save the loop statement onto the stack\n+\tinstead of the label.\n+\t(gnat_to_gnu) <N_Exit_Statement>: Retrieve the loop label.\n+\n 2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c: Include diagnostic.h and opts.h.\n@@ -27,7 +40,7 @@\n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Use\n \tint_const_binop to shift bounds by 1 when they are integer constants.\n \n-2013-04-25  Arnaud Charlet  <charlet@adacore.com>\n+2013-04-25  Arnaud Charlet  <charlet@adacore.com>>\n \n \t* gcc-interface/Makefile.in (ADA_EXCLUDE_SRCS): Exclude s-init.ad{s,b}\n "}, {"sha": "15d1cdd1e82c76bf4fb3206b3125e379e9c45854", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -507,5 +507,11 @@ do {\t\t\t\t\t\t   \\\n #define LOOP_STMT_BOTTOM_COND_P(NODE) TREE_LANG_FLAG_0 (LOOP_STMT_CHECK (NODE))\n #define LOOP_STMT_TOP_UPDATE_P(NODE)  TREE_LANG_FLAG_1 (LOOP_STMT_CHECK (NODE))\n \n+/* Optimization hints on loops.  */\n+#define LOOP_STMT_NO_UNROLL(NODE) TREE_LANG_FLAG_2 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_UNROLL(NODE)    TREE_LANG_FLAG_3 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_NO_VECTOR(NODE) TREE_LANG_FLAG_4 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_VECTOR(NODE)    TREE_LANG_FLAG_5 (LOOP_STMT_CHECK (NODE))\n+\n #define EXIT_STMT_COND(NODE)     TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 0)\n #define EXIT_STMT_LABEL(NODE)    TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 1)"}, {"sha": "d95b3f6a3ce4c862c485fa1db8d4e81608b3c1d8", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/633a3f2aea9d047c21afd1ae7fb2d5c02589e883/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=633a3f2aea9d047c21afd1ae7fb2d5c02589e883", "patch": "@@ -212,7 +212,7 @@ typedef struct range_check_info_d *range_check_info;\n \n /* Structure used to record information for a loop.  */\n struct GTY(()) loop_info_d {\n-  tree label;\n+  tree stmt;\n   tree loop_var;\n   vec<range_check_info, va_gc> *checks;\n };\n@@ -1189,8 +1189,8 @@ Pragma_to_gnu (Node_Id gnat_node)\n   tree gnu_result = alloc_stmt_list ();\n   Node_Id gnat_temp;\n \n-  /* Check for (and ignore) unrecognized pragma and do nothing if we are just\n-     annotating types.  */\n+  /* Do nothing if we are just annotating types and check for (and ignore)\n+     unrecognized pragmas.  */\n   if (type_annotate_only\n       || !Is_Pragma_Name (Chars (Pragma_Identifier (gnat_node))))\n     return gnu_result;\n@@ -1252,6 +1252,37 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t}\n       break;\n \n+    case Pragma_Loop_Optimize:\n+      for (gnat_temp = First (Pragma_Argument_Associations (gnat_node));\n+\t   Present (gnat_temp);\n+\t   gnat_temp = Next (gnat_temp))\n+\t{\n+\t  tree gnu_loop_stmt = gnu_loop_stack ->last ()->stmt;\n+\n+\t  switch (Chars (Expression (gnat_temp)))\n+\t    {\n+\t    case Name_No_Unroll:\n+\t      LOOP_STMT_NO_UNROLL (gnu_loop_stmt) = 1;\n+\t      break;\n+\n+\t    case Name_Unroll:\n+\t      LOOP_STMT_UNROLL (gnu_loop_stmt) = 1;\n+\t      break;\n+\n+\t    case Name_No_Vector:\n+\t      LOOP_STMT_NO_VECTOR (gnu_loop_stmt) = 1;\n+\t      break;\n+\n+\t    case Name_Vector:\n+\t      LOOP_STMT_VECTOR (gnu_loop_stmt) = 1;\n+\t      break;\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n+      break;\n+\n     case Pragma_Optimize:\n       switch (Chars (Expression\n \t\t     (First (Pragma_Argument_Associations (gnat_node)))))\n@@ -1363,6 +1394,9 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\t\t\t&global_options_set, global_dc);\n       }\n       break;\n+\n+    default:\n+      break;\n     }\n \n   return gnu_result;\n@@ -2424,8 +2458,8 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n \t\t &DECL_SOURCE_LOCATION (gnu_loop_label));\n   LOOP_STMT_LABEL (gnu_loop_stmt) = gnu_loop_label;\n \n-  /* Save the label so that a corresponding N_Exit_Statement can find it.  */\n-  gnu_loop_info->label = gnu_loop_label;\n+  /* Save the statement for later reuse.  */\n+  gnu_loop_info->stmt = gnu_loop_stmt;\n \n   /* Set the condition under which the loop must keep going.\n      For the case \"LOOP .... END LOOP;\" the condition is always true.  */\n@@ -6370,7 +6404,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t   ? gnat_to_gnu (Condition (gnat_node)) : NULL_TREE),\n \t\t  (Present (Name (gnat_node))\n \t\t   ? get_gnu_tree (Entity (Name (gnat_node)))\n-\t\t   : gnu_loop_stack->last ()->label));\n+\t\t   : LOOP_STMT_LABEL (gnu_loop_stack->last ()->stmt)));\n       break;\n \n     case N_Simple_Return_Statement:"}]}