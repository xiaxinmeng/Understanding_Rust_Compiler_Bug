{"sha": "0447929f11e6a3e1b076841712b90a8b6bc7d33a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ0NzkyOWYxMWU2YTNlMWIwNzY4NDE3MTJiOTBhOGI2YmM3ZDMzYQ==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-05-11T02:06:20Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-05-11T02:12:46Z"}, "message": "Add handling of MULT_EXPR/PLUS_EXPR for wrapping overflow in affine combination(PR83403)\n\nUse determine_value_range to get value range info for fold convert expressions\nwith internal operation PLUS_EXPR/MINUS_EXPR/MULT_EXPR when not overflow on\nwrapping overflow inner type.  i.e.:\n\n(long unsigned int)((unsigned int)n * 10 + 1)\n=>\n(long unsigned int)n * (long unsigned int)10 + (long unsigned int)1\n\nWith this patch for affine combination, load/store motion could detect\nmore address refs independency and promote some memory expressions to\nregisters within loop.\n\nPS: Replace the previous \"(T1)(X + CST) as (T1)X - (T1)(-CST))\"\nto \"(T1)(X + CST) as (T1)X + (T1)(CST))\" for wrapping overflow.\n\nBootstrap and regression tested pass on Power8-LE.\n\ngcc/ChangeLog\n\n\t2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR tree-optimization/83403\n\t* tree-affine.c (expr_to_aff_combination): Replace SSA_NAME with\n\tdetermine_value_range, Add fold conversion of MULT_EXPR, fix the\n\tprevious PLUS_EXPR.\n\ngcc/testsuite/ChangeLog\n\n\t2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR tree-optimization/83403\n\t* gcc.dg/tree-ssa/pr83403-1.c: New test.\n\t* gcc.dg/tree-ssa/pr83403-2.c: New test.\n\t* gcc.dg/tree-ssa/pr83403.h: New header.", "tree": {"sha": "ffc4b06c5fda9efeb839ecdea5cea6986b92169d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc4b06c5fda9efeb839ecdea5cea6986b92169d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0447929f11e6a3e1b076841712b90a8b6bc7d33a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0447929f11e6a3e1b076841712b90a8b6bc7d33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0447929f11e6a3e1b076841712b90a8b6bc7d33a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0447929f11e6a3e1b076841712b90a8b6bc7d33a/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ae6d32c7df009973616d62829a431a6d206ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ae6d32c7df009973616d62829a431a6d206ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ae6d32c7df009973616d62829a431a6d206ccc"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "d23ebffc24b22bab6667468b66b92ca2311d2351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR tree-optimization/83403\n+\t* tree-affine.c (expr_to_aff_combination): Replace SSA_NAME with\n+\tdetermine_value_range, Add fold conversion of MULT_EXPR, fix the\n+\tprevious PLUS_EXPR.\n+\n 2020-05-10  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config/i386/i386-c.c (ix86_target_macros): Define _ILP32 and"}, {"sha": "aa11ca3fd993ab7b26fac2fd7f5afd45ffb3b472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR tree-optimization/83403\n+\t* gcc.dg/tree-ssa/pr83403-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr83403-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr83403.h: New header.\n+\n 2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/93499"}, {"sha": "748375b03afeae87a778f1341276a2010b32916e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83403-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-1.c?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -funroll-loops -fdump-tree-lim2-details\" } */\n+\n+#define TYPE unsigned int\n+\n+#include \"pr83403.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 10 \"lim2\" } } */"}, {"sha": "ca2e6bbd61c0a3328d1b211d7b80dacfdf0e7f1d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83403-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403-2.c?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -funroll-loops -fdump-tree-lim2-details\" } */\n+\n+#define TYPE int\n+\n+#include \"pr83403.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 10 \"lim2\" } } */"}, {"sha": "0da8a835b5f2ecdc8d178d6536877b6a0bb4ac2c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr83403.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr83403.h?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -0,0 +1,30 @@\n+__attribute__ ((noinline)) void\n+calculate (const double *__restrict__ A, const double *__restrict__ B,\n+\t   double *__restrict__ C)\n+{\n+  TYPE m = 0;\n+  TYPE n = 0;\n+  TYPE k = 0;\n+\n+  A = (const double *) __builtin_assume_aligned (A, 16);\n+  B = (const double *) __builtin_assume_aligned (B, 16);\n+  C = (double *) __builtin_assume_aligned (C, 16);\n+\n+  for (n = 0; n < 9; n++)\n+    {\n+      for (m = 0; m < 10; m++)\n+\t{\n+\t  C[(n * 10) + m] = 0.0;\n+\t}\n+\n+      for (k = 0; k < 17; k++)\n+\t{\n+#pragma simd\n+\t  for (m = 0; m < 10; m++)\n+\t    {\n+\t      C[(n * 10) + m] += A[(k * 20) + m] * B[(n * 20) + k];\n+\t    }\n+\t}\n+    }\n+}\n+"}, {"sha": "5620e6bf28f304251e9cd5106ca4403272343903", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0447929f11e6a3e1b076841712b90a8b6bc7d33a/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=0447929f11e6a3e1b076841712b90a8b6bc7d33a", "patch": "@@ -343,24 +343,28 @@ expr_to_aff_combination (aff_tree *comb, tree_code code, tree type,\n \t    wide_int minv, maxv;\n \t    /* If inner type has wrapping overflow behavior, fold conversion\n \t       for below case:\n-\t\t (T1)(X - CST) -> (T1)X - (T1)CST\n-\t       if X - CST doesn't overflow by range information.  Also handle\n-\t       (T1)(X + CST) as (T1)(X - (-CST)).  */\n+\t\t (T1)(X *+- CST) -> (T1)X *+- (T1)CST\n+\t       if X *+- CST doesn't overflow by range information.  */\n \t    if (TYPE_UNSIGNED (itype)\n \t\t&& TYPE_OVERFLOW_WRAPS (itype)\n-\t\t&& TREE_CODE (op0) == SSA_NAME\n \t\t&& TREE_CODE (op1) == INTEGER_CST\n-\t\t&& icode != MULT_EXPR\n-\t\t&& get_range_info (op0, &minv, &maxv) == VR_RANGE)\n+\t\t&& determine_value_range (op0, &minv, &maxv) == VR_RANGE)\n \t      {\n+\t\twi::overflow_type overflow = wi::OVF_NONE;\n+\t\tsignop sign = UNSIGNED;\n \t\tif (icode == PLUS_EXPR)\n-\t\t  op1 = wide_int_to_tree (itype, -wi::to_wide (op1));\n-\t\tif (wi::geu_p (minv, wi::to_wide (op1)))\n+\t\t  wi::add (maxv, wi::to_wide (op1), sign, &overflow);\n+\t\telse if (icode == MULT_EXPR)\n+\t\t  wi::mul (maxv, wi::to_wide (op1), sign, &overflow);\n+\t\telse\n+\t\t  wi::sub (minv, wi::to_wide (op1), sign, &overflow);\n+\n+\t\tif (overflow == wi::OVF_NONE)\n \t\t  {\n \t\t    op0 = fold_convert (otype, op0);\n \t\t    op1 = fold_convert (otype, op1);\n-\t\t    return expr_to_aff_combination (comb, MINUS_EXPR, otype,\n-\t\t\t\t\t\t    op0, op1);\n+\t\t    return expr_to_aff_combination (comb, icode, otype, op0,\n+\t\t\t\t\t\t    op1);\n \t\t  }\n \t      }\n \t  }"}]}