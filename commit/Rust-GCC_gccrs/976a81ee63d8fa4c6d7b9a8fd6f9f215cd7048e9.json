{"sha": "976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2YTgxZWU2M2Q4ZmE0YzZkN2I5YThmZDZmOWYyMTVjZDcwNDhlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-13T13:31:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-13T13:31:18Z"}, "message": "re PR lto/56295 (Missed optimization with LTO)\n\n2013-02-13  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/56295\n\t* gimple-streamer-out.c (output_gimple_stmt): Undo wrapping\n\tglobals in MEM_REFs.\n\nFrom-SVN: r196013", "tree": {"sha": "daa5e9d640693f6ab9ee02da3be5335a6bb04b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa5e9d640693f6ab9ee02da3be5335a6bb04b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c8064fbd1222b5e30d6ef0d1c4e087346cf37db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8064fbd1222b5e30d6ef0d1c4e087346cf37db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8064fbd1222b5e30d6ef0d1c4e087346cf37db"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "334f8fedccfe580d6c5557f74d3551915877a27b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "patch": "@@ -1,3 +1,9 @@\n+2013-02-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/56295\n+\t* gimple-streamer-out.c (output_gimple_stmt): Undo wrapping\n+\tglobals in MEM_REFs.\n+\n 2013-02-13  Richard Biener  <rguenther@suse.de>\n \n \t* loop-init.c (loop_optimizer_init): Clear loop state when"}, {"sha": "adf230ed93acffc8debc56c125ac835c48edd6eb", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=976a81ee63d8fa4c6d7b9a8fd6f9f215cd7048e9", "patch": "@@ -116,13 +116,14 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n       for (i = 0; i < gimple_num_ops (stmt); i++)\n \t{\n \t  tree op = gimple_op (stmt, i);\n+\t  tree *basep = NULL;\n \t  /* Wrap all uses of non-automatic variables inside MEM_REFs\n \t     so that we do not have to deal with type mismatches on\n \t     merged symbols during IL read in.  The first operand\n \t     of GIMPLE_DEBUG must be a decl, not MEM_REF, though.  */\n \t  if (op && (i || !is_gimple_debug (stmt)))\n \t    {\n-\t      tree *basep = &op;\n+\t      basep = &op;\n \t      while (handled_component_p (*basep))\n \t\tbasep = &TREE_OPERAND (*basep, 0);\n \t      if (TREE_CODE (*basep) == VAR_DECL\n@@ -136,8 +137,13 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n \t\t\t\t\t\t  (TREE_TYPE (*basep)), 0));\n \t\t  TREE_THIS_VOLATILE (*basep) = volatilep;\n \t\t}\n+\t      else\n+\t\tbasep = NULL;\n \t    }\n \t  stream_write_tree (ob, op, true);\n+\t  /* Restore the original base if we wrapped it inside a MEM_REF.  */\n+\t  if (basep)\n+\t    *basep = TREE_OPERAND (TREE_OPERAND (*basep, 0), 0);\n \t}\n       if (is_gimple_call (stmt))\n \t{"}]}