{"sha": "66fcd40c62ed289e13886f11bc66e503456c3f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZmY2Q0MGM2MmVkMjg5ZTEzODg2ZjExYmM2NmU1MDM0NTZjM2YzMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T21:10:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T21:10:21Z"}, "message": "sched-ebb.c: Use rtx_insn (requires touching sched-int.h and config/c6x/c6x.c)\n\ngcc/\n2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n\n\t* sched-int.h (schedule_ebb): Strengthen params \"head\", \"tail\"\n\tfrom rtx to rtx_insn *.\n\n\t* sched-ebb.c (earliest_block_with_similiar_load): Strengthen\n\tlocals \"insn1\", \"insn2\" from rtx to rtx_insn *.\n\t(add_deps_for_risky_insns): Likewise for params \"head\", \"tail\" and\n\tlocals \"insn\", \"prev\", \"last_jump\", \"next_tail\".\n\t(schedule_ebb): Likewise for params \"head\", \"tail\".\n\t(schedule_ebbs): Likewise for locals \"tail\", \"head\".\n\n\t* config/c6x/c6x.c (hwloop_optimize): For now, add a checked cast\n\tto rtx_insn on \"last_insn\" in one of the invocations of\n\tschedule_ebb.\n\nFrom-SVN: r214375", "tree": {"sha": "c9a250146197489a8ef70cf05a56ee28c99ae589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a250146197489a8ef70cf05a56ee28c99ae589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66fcd40c62ed289e13886f11bc66e503456c3f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66fcd40c62ed289e13886f11bc66e503456c3f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66fcd40c62ed289e13886f11bc66e503456c3f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66fcd40c62ed289e13886f11bc66e503456c3f30/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "974c43e9cc0a14d6815d67dfad92f18f23ae6274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974c43e9cc0a14d6815d67dfad92f18f23ae6274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974c43e9cc0a14d6815d67dfad92f18f23ae6274"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "2d3e7502affe5498a55ee5999d32d7db497ba08b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66fcd40c62ed289e13886f11bc66e503456c3f30", "patch": "@@ -1,3 +1,19 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sched-int.h (schedule_ebb): Strengthen params \"head\", \"tail\"\n+\tfrom rtx to rtx_insn *.\n+\n+\t* sched-ebb.c (earliest_block_with_similiar_load): Strengthen\n+\tlocals \"insn1\", \"insn2\" from rtx to rtx_insn *.\n+\t(add_deps_for_risky_insns): Likewise for params \"head\", \"tail\" and\n+\tlocals \"insn\", \"prev\", \"last_jump\", \"next_tail\".\n+\t(schedule_ebb): Likewise for params \"head\", \"tail\".\n+\t(schedule_ebbs): Likewise for locals \"tail\", \"head\".\n+\n+\t* config/c6x/c6x.c (hwloop_optimize): For now, add a checked cast\n+\tto rtx_insn on \"last_insn\" in one of the invocations of\n+\tschedule_ebb.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sched-deps.c (maybe_add_or_update_dep_1): Strengthen locals"}, {"sha": "99987346555be664433ddfb7c78490a91e0ccdd0", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=66fcd40c62ed289e13886f11bc66e503456c3f30", "patch": "@@ -5669,7 +5669,9 @@ hwloop_optimize (hwloop_info loop)\n       schedule_ebbs_init ();\n       set_modulo_params (sp_ii, max_parallel, n_real_insns,\n \t\t\t sploop_max_uid_iter0);\n-      tmp_bb = schedule_ebb (BB_HEAD (bb), last_insn, true);\n+      tmp_bb = schedule_ebb (BB_HEAD (bb),\n+\t\t\t     safe_as_a <rtx_insn *> (last_insn),\n+\t\t\t     true);\n       schedule_ebbs_finish ();\n \n       if (tmp_bb)"}, {"sha": "100bf5bf5e22b148bbc31643508a39ec29c030ce", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=66fcd40c62ed289e13886f11bc66e503456c3f30", "patch": "@@ -61,7 +61,7 @@ static const char *ebb_print_insn (const_rtx, int);\n static int rank (rtx, rtx);\n static int ebb_contributes_to_priority (rtx, rtx);\n static basic_block earliest_block_with_similiar_load (basic_block, rtx);\n-static void add_deps_for_risky_insns (rtx, rtx);\n+static void add_deps_for_risky_insns (rtx_insn *, rtx_insn *);\n static void debug_ebb_dependencies (rtx, rtx);\n \n static void ebb_add_remove_insn (rtx, int);\n@@ -338,7 +338,7 @@ earliest_block_with_similiar_load (basic_block last_block, rtx load_insn)\n \n   FOR_EACH_DEP (load_insn, SD_LIST_BACK, back_sd_it, back_dep)\n     {\n-      rtx insn1 = DEP_PRO (back_dep);\n+      rtx_insn *insn1 = DEP_PRO (back_dep);\n \n       if (DEP_TYPE (back_dep) == REG_DEP_TRUE)\n \t/* Found a DEF-USE dependence (insn1, load_insn).  */\n@@ -348,7 +348,7 @@ earliest_block_with_similiar_load (basic_block last_block, rtx load_insn)\n \n \t  FOR_EACH_DEP (insn1, SD_LIST_FORW, fore_sd_it, fore_dep)\n \t    {\n-\t      rtx insn2 = DEP_CON (fore_dep);\n+\t      rtx_insn *insn2 = DEP_CON (fore_dep);\n \t      basic_block insn2_block = BLOCK_FOR_INSN (insn2);\n \n \t      if (DEP_TYPE (fore_dep) == REG_DEP_TRUE)\n@@ -381,12 +381,12 @@ earliest_block_with_similiar_load (basic_block last_block, rtx load_insn)\n    insns in given ebb.  */\n \n static void\n-add_deps_for_risky_insns (rtx head, rtx tail)\n+add_deps_for_risky_insns (rtx_insn *head, rtx_insn *tail)\n {\n-  rtx insn, prev;\n+  rtx_insn *insn, *prev;\n   int classification;\n-  rtx last_jump = NULL_RTX;\n-  rtx next_tail = NEXT_INSN (tail);\n+  rtx_insn *last_jump = NULL;\n+  rtx_insn *next_tail = NEXT_INSN (tail);\n   basic_block last_block = NULL, bb;\n \n   for (insn = head; insn != next_tail; insn = NEXT_INSN (insn))\n@@ -477,7 +477,7 @@ add_deps_for_risky_insns (rtx head, rtx tail)\n    NULL_RTX.  */\n \n basic_block\n-schedule_ebb (rtx head, rtx tail, bool modulo_scheduling)\n+schedule_ebb (rtx_insn *head, rtx_insn *tail, bool modulo_scheduling)\n {\n   basic_block first_bb, target_bb;\n   struct deps_desc tmp_deps;\n@@ -621,7 +621,7 @@ schedule_ebbs (void)\n {\n   basic_block bb;\n   int probability_cutoff;\n-  rtx tail;\n+  rtx_insn *tail;\n \n   /* Taking care of this degenerate case makes the rest of\n      this code simpler.  */\n@@ -639,7 +639,7 @@ schedule_ebbs (void)\n   /* Schedule every region in the subroutine.  */\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx head = BB_HEAD (bb);\n+      rtx_insn *head = BB_HEAD (bb);\n \n       if (bb->flags & BB_DISABLE_SCHEDULE)\n \tcontinue;"}, {"sha": "ae048c1f6460d24a4fd4c71b37d8109d72fe66da", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66fcd40c62ed289e13886f11bc66e503456c3f30/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=66fcd40c62ed289e13886f11bc66e503456c3f30", "patch": "@@ -1377,7 +1377,7 @@ extern int number_in_ready (void);\n \f\n /* Types and functions in sched-ebb.c.  */\n \n-extern basic_block schedule_ebb (rtx, rtx, bool);\n+extern basic_block schedule_ebb (rtx_insn *, rtx_insn *, bool);\n extern void schedule_ebbs_init (void);\n extern void schedule_ebbs_finish (void);\n \f"}]}