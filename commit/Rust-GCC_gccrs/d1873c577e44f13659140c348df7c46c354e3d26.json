{"sha": "d1873c577e44f13659140c348df7c46c354e3d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4NzNjNTc3ZTQ0ZjEzNjU5MTQwYzM0OGRmN2M0NmMzNTRlM2QyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-25T21:47:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-25T21:47:41Z"}, "message": "i386.md (general_sext_operand): New mode attr.\n\n\t* config/i386/i386.md (general_sext_operand): New mode attr.\n\t(addv<mode>4, subv<mode>4, mulv<mode>4): If operands[2] is CONST_INT,\n\tdon't generate (sign_extend (const_int)).\n\t(*addv<mode>4, *subv<mode>4, *mulv<mode>4): Disallow CONST_INT_P\n\toperands[2].  Use We constraint instead of <i> and <general_sext_operand>\n\tpredicate instead of <general_operand>.\n\t(*addv<mode>4_1, *subv<mode>4_1, *mulv<mode>4_1): New insns.\n\t* config/i386/constraints.md (We): New constraint.\n\t* config/i386/predicates.md (x86_64_sext_operand,\n\tsext_operand): New predicates.\n\nFrom-SVN: r208824", "tree": {"sha": "90bb464a57ef483773fda01901c9e456ed83995e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90bb464a57ef483773fda01901c9e456ed83995e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1873c577e44f13659140c348df7c46c354e3d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1873c577e44f13659140c348df7c46c354e3d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1873c577e44f13659140c348df7c46c354e3d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1873c577e44f13659140c348df7c46c354e3d26/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ec16257caebe7fb1fe3595f523acfbb383c9d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec16257caebe7fb1fe3595f523acfbb383c9d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec16257caebe7fb1fe3595f523acfbb383c9d60"}], "stats": {"total": 203, "additions": 179, "deletions": 24}, "files": [{"sha": "596e25d96d22cf920189bb877e7f567b65a1fd6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1873c577e44f13659140c348df7c46c354e3d26", "patch": "@@ -1,3 +1,16 @@\n+2014-03-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (general_sext_operand): New mode attr.\n+\t(addv<mode>4, subv<mode>4, mulv<mode>4): If operands[2] is CONST_INT,\n+\tdon't generate (sign_extend (const_int)).\n+\t(*addv<mode>4, *subv<mode>4, *mulv<mode>4): Disallow CONST_INT_P\n+\toperands[2].  Use We constraint instead of <i> and <general_sext_operand>\n+\tpredicate instead of <general_operand>.\n+\t(*addv<mode>4_1, *subv<mode>4_1, *mulv<mode>4_1): New insns.\n+\t* config/i386/constraints.md (We): New constraint.\n+\t* config/i386/predicates.md (x86_64_sext_operand,\n+\tsext_operand): New predicates.\n+\n 2014-03-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/60600"}, {"sha": "567e705646a984a4301425e146e9163e4c2d3902", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=d1873c577e44f13659140c348df7c46c354e3d26", "patch": "@@ -220,6 +220,13 @@\n ;; We use W prefix to denote any number of\n ;; constant-or-symbol-reference constraints\n \n+(define_constraint \"We\"\n+  \"32-bit signed integer constant, or a symbolic reference known\n+   to fit that range (for sign-extending conversion operations that\n+   require non-VOIDmode immediate operands).\"\n+  (and (match_operand 0 \"x86_64_immediate_operand\")\n+       (match_test \"GET_MODE (op) != VOIDmode\")))\n+\n (define_constraint \"Wz\"\n   \"32-bit unsigned integer constant, or a symbolic reference known\n    to fit that range (for zero-extending conversion operations that"}, {"sha": "ca16173abbb58ada1c3edef412806bc082f4c4a9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 145, "deletions": 24, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d1873c577e44f13659140c348df7c46c354e3d26", "patch": "@@ -971,6 +971,15 @@\n \t (DI \"x86_64_general_operand\")\n \t (TI \"x86_64_general_operand\")])\n \n+;; General sign extend operand predicate for integer modes,\n+;; which disallows VOIDmode operands and thus it is suitable\n+;; for use inside sign_extend.\n+(define_mode_attr general_sext_operand\n+\t[(QI \"sext_operand\")\n+\t (HI \"sext_operand\")\n+\t (SI \"x86_64_sext_operand\")\n+\t (DI \"x86_64_sext_operand\")])\n+\n ;; General sign/zero extend operand predicate for integer modes.\n (define_mode_attr general_szext_operand\n \t[(QI \"general_operand\")\n@@ -5821,26 +5830,34 @@\n \t\t   (eq:CCO (plus:<DWI>\n \t\t\t      (sign_extend:<DWI>\n \t\t\t\t (match_operand:SWI 1 \"nonimmediate_operand\"))\n-\t\t\t      (sign_extend:<DWI>\n-\t\t\t\t (match_operand:SWI 2 \"<general_operand>\")))\n+\t\t\t      (match_dup 4))\n \t\t\t   (sign_extend:<DWI>\n-\t\t\t      (plus:SWI (match_dup 1) (match_dup 2)))))\n+\t\t\t      (plus:SWI (match_dup 1)\n+\t\t\t\t\t(match_operand:SWI 2\n+\t\t\t\t\t   \"<general_operand>\")))))\n \t      (set (match_operand:SWI 0 \"register_operand\")\n \t\t   (plus:SWI (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n \t       (pc)))]\n   \"\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\")\n+{\n+  ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n+  if (CONST_INT_P (operands[2]))\n+    operands[4] = operands[2];\n+  else\n+    operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n+})\n \n (define_insn \"*addv<mode>4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (plus:<DWI>\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>\")))\n+\t\t      (match_operand:SWI 2 \"<general_sext_operand>\"\n+\t\t\t\t\t   \"<r>mWe,<r>We\")))\n \t\t(sign_extend:<DWI>\n \t\t   (plus:SWI (match_dup 1) (match_dup 2)))))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n@@ -5850,6 +5867,31 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*addv<mode>4_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO (plus:<DWI>\n+\t\t   (sign_extend:<DWI>\n+\t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n+\t\t(sign_extend:<DWI>\n+\t\t   (plus:SWI (match_dup 1)\n+\t\t\t     (match_operand:SWI 2 \"x86_64_immediate_operand\"\n+\t\t\t\t\t\t  \"<i>\")))))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(plus:SWI (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n+   && CONST_INT_P (operands[2])\n+   && INTVAL (operands[2]) == INTVAL (operands[3])\"\n+  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length_immediate\")\n+\t(cond [(match_test \"IN_RANGE (INTVAL (operands[2]), -128, 127)\")\n+\t\t  (const_string \"1\")\n+\t       (match_test \"<MODE_SIZE> == 8\")\n+\t\t  (const_string \"4\")]\n+\t      (const_string \"<MODE_SIZE>\")))])\n+\n ;; The lea patterns for modes less than 32 bits need to be matched by\n ;; several insns converted to real lea by splitters.\n \n@@ -6093,26 +6135,34 @@\n \t\t   (eq:CCO (minus:<DWI>\n \t\t\t      (sign_extend:<DWI>\n \t\t\t\t (match_operand:SWI 1 \"nonimmediate_operand\"))\n-\t\t\t      (sign_extend:<DWI>\n-\t\t\t\t (match_operand:SWI 2 \"<general_operand>\")))\n+\t\t\t      (match_dup 4))\n \t\t\t   (sign_extend:<DWI>\n-\t\t\t      (minus:SWI (match_dup 1) (match_dup 2)))))\n+\t\t\t      (minus:SWI (match_dup 1)\n+\t\t\t\t\t (match_operand:SWI 2\n+\t\t\t\t\t    \"<general_operand>\")))))\n \t      (set (match_operand:SWI 0 \"register_operand\")\n \t\t   (minus:SWI (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n \t       (pc)))]\n   \"\"\n-  \"ix86_fixup_binary_operands_no_copy (MINUS, <MODE>mode, operands);\")\n+{\n+  ix86_fixup_binary_operands_no_copy (MINUS, <MODE>mode, operands);\n+  if (CONST_INT_P (operands[2]))\n+    operands[4] = operands[2];\n+  else\n+    operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n+})\n \n (define_insn \"*subv<mode>4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (minus:<DWI>\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+\t\t      (match_operand:SWI 2 \"<general_sext_operand>\"\n+\t\t\t\t\t   \"<r>We,<r>m\")))\n \t\t(sign_extend:<DWI>\n \t\t   (minus:SWI (match_dup 1) (match_dup 2)))))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n@@ -6122,6 +6172,31 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*subv<mode>4_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO (minus:<DWI>\n+\t\t   (sign_extend:<DWI>\n+\t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n+\t\t(sign_extend:<DWI>\n+\t\t   (minus:SWI (match_dup 1)\n+\t\t\t      (match_operand:SWI 2 \"x86_64_immediate_operand\"\n+\t\t\t\t\t\t   \"<i>\")))))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(minus:SWI (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && CONST_INT_P (operands[2])\n+   && INTVAL (operands[2]) == INTVAL (operands[3])\"\n+  \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length_immediate\")\n+\t(cond [(match_test \"IN_RANGE (INTVAL (operands[2]), -128, 127)\")\n+\t\t  (const_string \"1\")\n+\t       (match_test \"<MODE_SIZE> == 8\")\n+\t\t  (const_string \"4\")]\n+\t      (const_string \"<MODE_SIZE>\")))])\n+\n (define_insn \"*sub<mode>_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6442,52 +6517,98 @@\n \t\t   (eq:CCO (mult:<DWI>\n \t\t\t      (sign_extend:<DWI>\n \t\t\t\t (match_operand:SWI48 1 \"register_operand\"))\n-\t\t\t      (sign_extend:<DWI>\n-\t\t\t\t (match_operand:SWI48 2 \"<general_operand>\")))\n+\t\t\t      (match_dup 4))\n \t\t\t   (sign_extend:<DWI>\n-\t\t\t      (mult:SWI48 (match_dup 1) (match_dup 2)))))\n+\t\t\t      (mult:SWI48 (match_dup 1)\n+\t\t\t\t\t  (match_operand:SWI48 2\n+\t\t\t\t\t     \"<general_operand>\")))))\n \t      (set (match_operand:SWI48 0 \"register_operand\")\n \t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n-\t       (pc)))])\n+\t       (pc)))]\n+  \"\"\n+{\n+  if (CONST_INT_P (operands[2]))\n+    operands[4] = operands[2];\n+  else\n+    operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n+})\n \n (define_insn \"*mulv<mode>4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (mult:<DWI>\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"%rm,rm,0\"))\n+\t\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"%rm,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 2 \"<general_operand>\" \"K,<i>,mr\")))\n+\t\t      (match_operand:SWI48 2 \"<general_sext_operand>\"\n+\t\t\t\t\t     \"We,mr\")))\n \t\t(sign_extend:<DWI>\n-\t\t   (mult:SWI (match_dup 1) (match_dup 2)))))\n-   (set (match_operand:SWI 0 \"register_operand\" \"=r,r,r\")\n-\t(mult:SWI (match_dup 1) (match_dup 2)))]\n+\t\t   (mult:SWI48 (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(mult:SWI48 (match_dup 1) (match_dup 2)))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n-   imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\n    imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\n    imul{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"imul\")\n-   (set_attr \"prefix_0f\" \"0,0,1\")\n+   (set_attr \"prefix_0f\" \"0,1\")\n    (set (attr \"athlon_decode\")\n \t(cond [(eq_attr \"cpu\" \"athlon\")\n \t\t  (const_string \"vector\")\n-\t       (eq_attr \"alternative\" \"1\")\n+\t       (eq_attr \"alternative\" \"0\")\n \t\t  (const_string \"vector\")\n-\t       (and (eq_attr \"alternative\" \"2\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n \t\t    (match_operand 1 \"memory_operand\"))\n \t\t  (const_string \"vector\")]\n \t      (const_string \"direct\")))\n    (set (attr \"amdfam10_decode\")\n-\t(cond [(and (eq_attr \"alternative\" \"0,1\")\n+\t(cond [(and (eq_attr \"alternative\" \"1\")\n \t\t    (match_operand 1 \"memory_operand\"))\n \t\t  (const_string \"vector\")]\n \t      (const_string \"direct\")))\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*mulv<mode>4_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO (mult:<DWI>\n+\t\t   (sign_extend:<DWI>\n+\t\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm,rm\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"K,i\"))\n+\t\t(sign_extend:<DWI>\n+\t\t   (mult:SWI48 (match_dup 1)\n+\t\t\t       (match_operand:SWI 2 \"x86_64_immediate_operand\"\n+\t\t\t\t\t\t    \"K,<i>\")))))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(mult:SWI48 (match_dup 1) (match_dup 2)))]\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\n+   && CONST_INT_P (operands[2])\n+   && INTVAL (operands[2]) == INTVAL (operands[3])\"\n+  \"@\n+   imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\n+   imul{<imodesuffix>}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"imul\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"cpu\" \"athlon\")\n+\t\t  (const_string \"vector\")\n+\t       (eq_attr \"alternative\" \"1\")\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n+   (set (attr \"amdfam10_decode\")\n+\t(cond [(match_operand 1 \"memory_operand\")\n+\t\t  (const_string \"vector\")]\n+\t      (const_string \"direct\")))\n+   (set_attr \"bdver1_decode\" \"direct\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length_immediate\")\n+\t(cond [(match_test \"IN_RANGE (INTVAL (operands[2]), -128, 127)\")\n+\t\t  (const_string \"1\")\n+\t       (match_test \"<MODE_SIZE> == 8\")\n+\t\t  (const_string \"4\")]\n+\t      (const_string \"<MODE_SIZE>\")))])\n+\n (define_expand \"<u>mul<mode><dwi>3\"\n   [(parallel [(set (match_operand:<DWI> 0 \"register_operand\")\n \t\t   (mult:<DWI>"}, {"sha": "2ef1384246ee076c9f44fd3473420e98b517ff6f", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1873c577e44f13659140c348df7c46c354e3d26/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=d1873c577e44f13659140c348df7c46c354e3d26", "patch": "@@ -338,6 +338,20 @@\n \t (match_operand 0 \"x86_64_immediate_operand\"))\n     (match_operand 0 \"general_operand\")))\n \n+;; Return true if OP is non-VOIDmode general operand representable\n+;; on x86_64.  This predicate is used in sign-extending conversion\n+;; operations that require non-VOIDmode immediate operands.\n+(define_predicate \"x86_64_sext_operand\"\n+  (and (match_test \"GET_MODE (op) != VOIDmode\")\n+       (match_operand 0 \"x86_64_general_operand\")))\n+\n+;; Return true if OP is non-VOIDmode general operand.  This predicate\n+;; is used in sign-extending conversion operations that require\n+;; non-VOIDmode immediate operands.\n+(define_predicate \"sext_operand\"\n+  (and (match_test \"GET_MODE (op) != VOIDmode\")\n+       (match_operand 0 \"general_operand\")))\n+\n ;; Return true if OP is representable on x86_64 as zero-extended operand.\n ;; This predicate is used in zero-extending conversion operations that\n ;; require non-VOIDmode immediate operands."}]}