{"sha": "230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwMzc3ZGM2OWZlNmJkNDRkYzc1NzgwYTNmMzdlMDlmY2EyYWUyYw==", "commit": {"author": {"name": "David Asher", "email": "david.asher@cavium.com", "date": "2004-02-15T17:19:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-15T17:19:00Z"}, "message": "re PR libstdc++/11352 (crash while internal padding numeric 0)\n\n2004-02-15  David Asher  <david.asher@cavium.com>\n\n\tPR libstdc++/11352\n\t* include/bits/locale_facets.tcc (__pad<>::_S_pad): Don't\n\taccess __olds beyond __oldlen.\n\nFrom-SVN: r77858", "tree": {"sha": "9e89d012ba7ca00cf60b079c16a8e3aabc8e30a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e89d012ba7ca00cf60b079c16a8e3aabc8e30a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230377dc69fe6bd44dc75780a3f37e09fca2ae2c/comments", "author": null, "committer": null, "parents": [{"sha": "bf3e82838383870195d5981acb31d2ad16bf7adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3e82838383870195d5981acb31d2ad16bf7adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3e82838383870195d5981acb31d2ad16bf7adf"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "2765ee1c740aea8e2536ebc86bf7d695a22b66b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230377dc69fe6bd44dc75780a3f37e09fca2ae2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230377dc69fe6bd44dc75780a3f37e09fca2ae2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "patch": "@@ -1,3 +1,9 @@\n+2004-02-15  David Asher  <david.asher@cavium.com>\n+\n+\tPR libstdc++/11352\n+\t* include/bits/locale_facets.tcc (__pad<>::_S_pad): Don't\n+\taccess __olds beyond __oldlen.\n+\n 2004-02-14  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/basic_filebuf/overflow/char/9182-2.cc: Make"}, {"sha": "afbd96c70ae2d3c1fe6de3892250adb73a886411", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230377dc69fe6bd44dc75780a3f37e09fca2ae2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230377dc69fe6bd44dc75780a3f37e09fca2ae2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=230377dc69fe6bd44dc75780a3f37e09fca2ae2c", "patch": "@@ -2261,14 +2261,14 @@ namespace std\n \t  // Who came up with these rules, anyway? Jeeze.\n           const locale& __loc = __io._M_getloc();\n \t  const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-\t  const _CharT __minus = __ctype.widen('-');\n-\t  const _CharT __plus = __ctype.widen('+');\n-\t  const bool __testsign = _Traits::eq(__olds[0], __minus)\n-\t                          || _Traits::eq(__olds[0], __plus);\n-\n-\t  const bool __testhex = _Traits::eq(__ctype.widen('0'), __olds[0])\n-\t                         && (_Traits::eq(__ctype.widen('x'), __olds[1])\n-\t\t\t\t     || _Traits::eq(__ctype.widen('X'), __olds[1]));\n+\n+\t  const bool __testsign = _Traits::eq(__ctype.widen('-'), __olds[0])\n+\t                          || _Traits::eq(__ctype.widen('+'), __olds[0]);\n+\t  const bool __testhex = (_Traits::eq(__ctype.widen('0'), __olds[0])\n+\t\t\t\t  && __oldlen > 1\n+\t\t\t\t  && (_Traits::eq(__ctype.widen('x'), __olds[1])\n+\t\t\t\t      || _Traits::eq(__ctype.widen('X'),\n+\t\t\t\t\t\t     __olds[1])));\n \t  if (__testhex)\n \t    {\n \t      __news[0] = __olds[0];\n@@ -2292,24 +2292,24 @@ namespace std\n   bool\n   __verify_grouping(const char* __grouping, size_t __grouping_size,\n \t\t    const string& __grouping_tmp)\n-    {\n-      const size_t __n = __grouping_tmp.size() - 1;\n-      const size_t __min = std::min(__n, __grouping_size - 1);\n-      size_t __i = __n;\n-      bool __test = true;\n-\n-      // Parsed number groupings have to match the\n-      // numpunct::grouping string exactly, starting at the\n-      // right-most point of the parsed sequence of elements ...\n-      for (size_t __j = 0; __j < __min && __test; --__i, ++__j)\n-\t__test = __grouping_tmp[__i] == __grouping[__j];\n-      for (; __i && __test; --__i)\n-\t__test = __grouping_tmp[__i] == __grouping[__min];\n-      // ... but the last parsed grouping can be <= numpunct\n-      // grouping.\n-      __test &= __grouping_tmp[0] <= __grouping[__min];\n-      return __test;\n-    }\n+  {\n+    const size_t __n = __grouping_tmp.size() - 1;\n+    const size_t __min = std::min(__n, __grouping_size - 1);\n+    size_t __i = __n;\n+    bool __test = true;\n+    \n+    // Parsed number groupings have to match the\n+    // numpunct::grouping string exactly, starting at the\n+    // right-most point of the parsed sequence of elements ...\n+    for (size_t __j = 0; __j < __min && __test; --__i, ++__j)\n+      __test = __grouping_tmp[__i] == __grouping[__j];\n+    for (; __i && __test; --__i)\n+      __test = __grouping_tmp[__i] == __grouping[__min];\n+    // ... but the last parsed grouping can be <= numpunct\n+    // grouping.\n+    __test &= __grouping_tmp[0] <= __grouping[__min];\n+    return __test;\n+  }\n \n   template<typename _CharT>\n     _CharT*"}]}