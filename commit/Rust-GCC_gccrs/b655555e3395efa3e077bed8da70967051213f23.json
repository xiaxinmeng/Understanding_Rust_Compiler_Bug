{"sha": "b655555e3395efa3e077bed8da70967051213f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1NTU1NWUzMzk1ZWZhM2UwNzdiZWQ4ZGE3MDk2NzA1MTIxM2YyMw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-06-04T05:02:44Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-06-04T05:02:44Z"}, "message": "* config.gcc (sh5-*-netbsd*, sh5l*-*-netbsd*)\n(sh64-*-netbsd*, sh64l*-*-netbsd*): New targets.\n* config/sh/netbsd-elf.h (TARGET_VERSION_ENDIAN)\n(TARGET_VERSION_CPU): Define according to the\ndefault target.\n(TARGET_VERSION): Use TARGET_VERSION_ENDIAN and\nTARGET_VERSION_CPU.\n(TARGET_OS_CPP_BUILTINS): Use NETBSD_OS_CPP_BUILTINS_LP64\nif TARGET_SHMEDIA64.\n(LINK_DEFAULT_CPU_EMUL): Define according to the\ndefault target.\n(SUBTARGET_LINK_EMUL_SUFFIX): Define.\n(SUBTARGET_LINK_SPEC): Define.\n(LINK_SPEC): Use SH_LINK_SPEC.\n(ASM_SPEC): Remove.\n(TARGET_DEFAULT): Use TARGET_CPU_DEFAULT.\n(FUNCTION_PROFILER): Add cases for TARGET_SHMEDIA32\nand TARGET_SHMEDIA64 which abort, for now.\n* config/sh/t-netbsd-sh5: New file.\n* config/sh/t-netbsd-sh5-32: New file.\n* config/sh/t-netbsd-sh5-64: New file.\n\nFrom-SVN: r54230", "tree": {"sha": "dba477555760564dfc58c022fd821810cc866ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba477555760564dfc58c022fd821810cc866ee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b655555e3395efa3e077bed8da70967051213f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b655555e3395efa3e077bed8da70967051213f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b655555e3395efa3e077bed8da70967051213f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b655555e3395efa3e077bed8da70967051213f23/comments", "author": null, "committer": null, "parents": [{"sha": "6d8fd7bbd7f1fa8a0b985e3cd0e2120143d4d557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8fd7bbd7f1fa8a0b985e3cd0e2120143d4d557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8fd7bbd7f1fa8a0b985e3cd0e2120143d4d557"}], "stats": {"total": 181, "additions": 144, "deletions": 37}, "files": [{"sha": "db487f90ccb67d0295c712de219adb0f4a26dbea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -1,3 +1,27 @@\n+2002-06-04  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config.gcc (sh5-*-netbsd*, sh5l*-*-netbsd*)\n+\t(sh64-*-netbsd*, sh64l*-*-netbsd*): New targets.\n+\t* config/sh/netbsd-elf.h (TARGET_VERSION_ENDIAN)\n+\t(TARGET_VERSION_CPU): Define according to the\n+\tdefault target.\n+\t(TARGET_VERSION): Use TARGET_VERSION_ENDIAN and\n+\tTARGET_VERSION_CPU.\n+\t(TARGET_OS_CPP_BUILTINS): Use NETBSD_OS_CPP_BUILTINS_LP64\n+\tif TARGET_SHMEDIA64.\n+\t(LINK_DEFAULT_CPU_EMUL): Define according to the\n+\tdefault target.\n+\t(SUBTARGET_LINK_EMUL_SUFFIX): Define.\n+\t(SUBTARGET_LINK_SPEC): Define.\n+\t(LINK_SPEC): Use SH_LINK_SPEC.\n+\t(ASM_SPEC): Remove.\n+\t(TARGET_DEFAULT): Use TARGET_CPU_DEFAULT.\n+\t(FUNCTION_PROFILER): Add cases for TARGET_SHMEDIA32\n+\tand TARGET_SHMEDIA64 which abort, for now.\n+\t* config/sh/t-netbsd-sh5: New file.\n+\t* config/sh/t-netbsd-sh5-32: New file.\n+\t* config/sh/t-netbsd-sh5-64: New file.\n+\n 2002-06-03  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "7dd42e2be6849abe5e8c929cd5081e189246c8f4", "filename": "gcc/config.gcc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -2248,7 +2248,8 @@ sh-*-linux*)\n \tfi\n \tfloat_format=sh\n \t;;\n-sh-*-netbsdelf* | shl*-*-netbsdelf*)\n+sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n+  sh64-*-netbsd* | sh64l*-*-netbsd*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sh/elf.h netbsd.h netbsd-elf.h sh/netbsd-elf.h\"\n \ttmake_file=\"${tmake_file} sh/t-sh sh/t-elf\"\n \tcase $machine in\n@@ -2260,7 +2261,23 @@ sh-*-netbsdelf* | shl*-*-netbsdelf*)\n \t\ttmake_file=\"${tmake_file} sh/t-be\"\n \t\t;;\n \tesac\n-\ttmake_file=\"${tmake_file} sh/t-netbsd\"\n+\tcase $machine in\n+\tsh5*-*)\n+\t\t# SHmedia, 32-bit ABI\n+\t\ttarget_cpu_default=\"SH5_BIT|SH4_BIT|SH3E_BIT\"\n+\t\ttmake_file=\"${tmake_file} sh/t-netbsd-sh5 sh/t-netbsd-sh5-32\"\n+\t\t;;\n+\tsh64*-*)\n+\t\t# SHmedia, 64-bit ABI\n+\t\ttarget_cpu_default=\"SH5_BIT|SH4_BIT\"\n+\t\ttmake_file=\"${tmake_file} sh/t-netbsd-sh5 sh/t-netbsd-sh5-64\"\n+\t\t;;\n+\t*)\n+\t\t# SH3, software floating point\n+\t\ttarget_cpu_default=\"SH1_BIT|SH2_BIT|SH3_BIT\"\n+\t\ttmake_file=\"${tmake_file} sh/t-netbsd\"\n+\t\t;;\n+\tesac\n \tfloat_format=sh\n \t;;\n sh-*-*)"}, {"sha": "fd9f0c324ebdab1703eea036e392ca189775e81f", "filename": "gcc/config/sh/netbsd-elf.h", "status": "modified", "additions": 77, "deletions": 35, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -20,69 +20,111 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Run-time Target Specification.  */\n-#undef TARGET_VERSION\n #if TARGET_ENDIAN_DEFAULT == LITTLE_ENDIAN_BIT\n-#define TARGET_VERSION  fputs (\" (NetBSD/shle ELF)\", stderr);\n+#define TARGET_VERSION_ENDIAN \"le\"\n #else\n-#define TARGET_VERSION\tfputs (\" (NetBSD/sh ELF)\", stderr);\n+#define TARGET_VERSION_ENDIAN \"\"\n #endif\n \n+#if TARGET_CPU_DEFAULT & SH5_BIT\n+#if TARGET_CPU_DEFAULT & SH3E_BIT\n+#define TARGET_VERSION_CPU \"sh5\"\n+#else\n+#define TARGET_VERSION_CPU \"sh64\"\n+#endif /* SH3E_BIT */\n+#else\n+#define TARGET_VERSION_CPU \"sh\"\n+#endif /* SH5_BIT */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION\tfprintf (stderr, \" (NetBSD/%s%s ELF)\",\t\t\\\n+                                 TARGET_VERSION_CPU, TARGET_VERSION_ENDIAN)\n+\n+\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       NETBSD_OS_CPP_BUILTINS_ELF();\t\t\t\t\t\\\n+      if (TARGET_SHMEDIA64)\t\t\t\t\t\t\\\n+\tNETBSD_OS_CPP_BUILTINS_LP64();\t\t\t\t\t\\\n       builtin_define (\"__NO_LEADING_UNDERSCORES__\");\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* Provide a LINK_SPEC appropriate for a NetBSD/sh ELF target.\n-   This is a copy of LINK_SPEC from <netbsd-elf.h> tweaked for\n-   the SH target.  */\n+   We use the SH_LINK_SPEC from sh/sh.h, and define the appropriate\n+   SUBTARGET_LINK_SPEC that pulls in what we need from a generic\n+   NetBSD ELF LINK_SPEC.  */\n \n-#undef LINK_SPEC\n-#define LINK_SPEC\t\t\t\t\t\t\t\\\n-  \"%{assert*} %{R*}\t\t\t\t\t\t\t\\\n-   %{mb:-m shelf_nbsd}\t\t\t\t\t\t\t\\\n-   %{ml:-m shlelf_nbsd}\t\t\t\t\t\t\t\\\n-   %{mrelax:-relax}\t\t\t\t\t\t\t\\\n-   %{shared:-shared}\t\t\t\t\t\t\t\\\n-   %{!shared:\t\t\t\t\t\t\t\t\\\n-     -dc -dp\t\t\t\t\t\t\t\t\\\n-     %{!nostdlib:\t\t\t\t\t\t\t\\\n-       %{!r*:\t\t\t\t\t\t\t\t\\\n-\t %{!e*:-e __start}}}\t\t\t\t\t\t\\\n-     %{!static:\t\t\t\t\t\t\t\t\\\n-       %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n-       %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}}\t\\\n+/* LINK_EMUL_PREFIX from sh/elf.h */\n+\n+#undef LINK_DEFAULT_CPU_EMUL\n+#if TARGET_CPU_DEFAULT & SH5_BIT\n+#if TARGET_CPU_DEFAULT & SH3E_BIT\n+#define LINK_DEFAULT_CPU_EMUL \"32\"\n+#else\n+#define LINK_DEFAULT_CPU_EMUL \"64\"\n+#endif /* SH3E_BIT */\n+#else\n+#define LINK_DEFAULT_CPU_EMUL \"\"\n+#endif /* SH5_BIT */\n+\n+#undef SUBTARGET_LINK_EMUL_SUFFIX\n+#define SUBTARGET_LINK_EMUL_SUFFIX \"_nbsd\"\n+\n+#undef SUBTARGET_LINK_SPEC\n+#define SUBTARGET_LINK_SPEC \\\n+  \"%{assert*} %{R*} \\\n+   %{shared:-shared} \\\n+   %{!shared: \\\n+     -dc -dp \\\n+     %{!nostdlib: \\\n+       %{!r*: \\\n+\t %{!e*:-e __start}}} \\\n+     %{!static: \\\n+       %{rdynamic:-export-dynamic} \\\n+       %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}} \\\n      %{static:-static}}\"\n \n+#undef LINK_SPEC\n+#define LINK_SPEC SH_LINK_SPEC\n+\n \n /* Provide a CPP_SPEC appropriate for NetBSD.  */\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n \n-/* Restore the ASM_SPEC from sh/sh.h; sh/elf.h clobbers it.  */\n-#undef ASM_SPEC\n-#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax}\"\n-\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (SH1_BIT|SH2_BIT|SH3_BIT | USERMODE_BIT | TARGET_ENDIAN_DEFAULT)\n+  (TARGET_CPU_DEFAULT | USERMODE_BIT | TARGET_ENDIAN_DEFAULT)\n \n  \n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(STREAM,LABELNO)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    fprintf((STREAM), \"\\tmov.l\\t%cLP%d,r1\\n\",\t\t\t\t\\\n-            LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n-    fprintf((STREAM), \"\\tmova\\t%cLP%dr,r0\\n\",\t\t\t\t\\\n-            LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n-    fprintf((STREAM), \"\\tjmp\\t@r1\\n\");\t\t\t\t\t\\\n-    fprintf((STREAM), \"\\tnop\\n\");\t\t\t\t\t\\\n-    fprintf((STREAM), \"\\t.align\\t2\\n\");\t\t\t\t\t\\\n-    fprintf((STREAM), \"%cLP%d:\\t.long\\t__mcount\\n\",\t\t\t\\\n-            LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n-    fprintf((STREAM), \"%cLP%dr:\\n\", LOCAL_LABEL_PREFIX, (LABELNO));\t\\\n+    if (TARGET_SHMEDIA32)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* FIXME */\t\t\t\t\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else if (TARGET_SHMEDIA64)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* FIXME */\t\t\t\t\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        fprintf((STREAM), \"\\tmov.l\\t%cLP%d,r1\\n\",\t\t\t\\\n+                LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n+        fprintf((STREAM), \"\\tmova\\t%cLP%dr,r0\\n\",\t\t\t\\\n+                LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n+        fprintf((STREAM), \"\\tjmp\\t@r1\\n\");\t\t\t\t\\\n+        fprintf((STREAM), \"\\tnop\\n\");\t\t\t\t\t\\\n+        fprintf((STREAM), \"\\t.align\\t2\\n\");\t\t\t\t\\\n+        fprintf((STREAM), \"%cLP%d:\\t.long\\t__mcount\\n\",\t\t\t\\\n+                LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n+        fprintf((STREAM), \"%cLP%dr:\\n\", LOCAL_LABEL_PREFIX, (LABELNO));\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)"}, {"sha": "3a2dd69d535a173d9da0389b9290e9a1019d96f2", "filename": "gcc/config/sh/t-netbsd-sh5", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -0,0 +1,18 @@\n+TARGET_LIBGCC2_CFLAGS = -fpic\n+\n+LIB1ASMFUNCS = \\\n+  _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n+  _shcompact_call_trampoline _shcompact_return_trampoline \\\n+  _shcompact_incoming_args _ic_invalidate _nested_trampoline \\\n+  _push_pop_shmedia_regs\n+\n+LIB2FUNCS_EXTRA=\n+\n+EXTRA_MULTILIB_PARTS=\n+\n+# NetBSD's C library includes a fast software FP library that\n+# has support for setting/setting the rounding mode, exception\n+# mask, etc.  Therefore, we don't want to include software FP\n+# in libgcc.\n+FPBIT =\n+DPBIT ="}, {"sha": "95860196665558fb21ffe19a79737f6e54605f14", "filename": "gcc/config/sh/t-netbsd-sh5-32", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-32?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -0,0 +1,3 @@\n+MULTILIB_OPTIONS += m5-32media-nofpu/m5-compact/m5-compact-nofpu/m5-64media/m5-64media-nofpu\n+MULTILIB_DIRNAMES=\n+MULTILIB_MATCHES ="}, {"sha": "74052cbe19799616f7a9a3c12ac2ee9c47ad95db", "filename": "gcc/config/sh/t-netbsd-sh5-64", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b655555e3395efa3e077bed8da70967051213f23/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-netbsd-sh5-64?ref=b655555e3395efa3e077bed8da70967051213f23", "patch": "@@ -0,0 +1,3 @@\n+MULTILIB_OPTIONS += m5-64media-nofpu/m5-compact/m5-compact-nofpu/m5-32media/m5-32media-nofpu\n+MULTILIB_DIRNAMES=\n+MULTILIB_MATCHES ="}]}