{"sha": "c965b169438a609791fa0b0922b8aea3adb37c4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2NWIxNjk0MzhhNjA5NzkxZmEwYjA5MjJiOGFlYTNhZGIzN2M0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-03-05T23:03:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-05T23:03:44Z"}, "message": "re PR c++/9440 (error message about \"non-lvalue in unary '&'\" when using ?: operator)\n\n        PR c++/9440\n        * call.c (build_conditional_expr): Use convert rather than an\n        explicit NOP_EXPR.\n\nFrom-SVN: r63872", "tree": {"sha": "5118b85c7cd9201505f901dec701c5aa4091988c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5118b85c7cd9201505f901dec701c5aa4091988c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c965b169438a609791fa0b0922b8aea3adb37c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c965b169438a609791fa0b0922b8aea3adb37c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c965b169438a609791fa0b0922b8aea3adb37c4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c965b169438a609791fa0b0922b8aea3adb37c4d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98857de85a8f3f2ad43f463cac579b3b86f9e4b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98857de85a8f3f2ad43f463cac579b3b86f9e4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98857de85a8f3f2ad43f463cac579b3b86f9e4b5"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "5e04f442428cb7fef7e64e26e334ee4b75a444e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965b169438a609791fa0b0922b8aea3adb37c4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965b169438a609791fa0b0922b8aea3adb37c4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c965b169438a609791fa0b0922b8aea3adb37c4d", "patch": "@@ -1,3 +1,9 @@\n+2003-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/9440\n+\t* call.c (build_conditional_expr): Use convert rather than an\n+\texplicit NOP_EXPR.\n+\n 2003-03-02  Matt Austern  <austern@apple.com>\n \n \t* decl.c (cp_binding_level): Add static_decls varray member."}, {"sha": "fe2686683ccac25e208d9444801cbbfeb7f4d9a9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965b169438a609791fa0b0922b8aea3adb37c4d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965b169438a609791fa0b0922b8aea3adb37c4d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c965b169438a609791fa0b0922b8aea3adb37c4d", "patch": "@@ -3112,21 +3112,17 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n \t  arg2 = convert_from_reference (arg2);\n \t  /* That may not quite have done the trick.  If the two types\n \t     are cv-qualified variants of one another, we will have\n-\t     just used an IDENTITY_CONV.  (There's no conversion from\n-\t     an lvalue of one class type to an lvalue of another type,\n-\t     even a cv-qualified variant, and we don't want to lose\n-\t     lvalue-ness here.)  So, we manually add a NOP_EXPR here\n-\t     if necessary.  */\n+\t     just used an IDENTITY_CONV.  */\n \t  if (!same_type_p (TREE_TYPE (arg2), arg3_type))\n-\t    arg2 = build1 (NOP_EXPR, arg3_type, arg2);\n+\t    arg2 = convert (arg3_type, arg2);\n \t  arg2_type = TREE_TYPE (arg2);\n \t}\n       else if (conv3 && !ICS_BAD_FLAG (conv3))\n \t{\n \t  arg3 = convert_like (conv3, arg3);\n \t  arg3 = convert_from_reference (arg3);\n \t  if (!same_type_p (TREE_TYPE (arg3), arg2_type))\n-\t    arg3 = build1 (NOP_EXPR, arg2_type, arg3);\n+\t    arg3 = convert (arg2_type, arg3);\n \t  arg3_type = TREE_TYPE (arg3);\n \t}\n     }"}]}