{"sha": "2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwYWE4MTc5ZjRjNDM1MjExZTFlNWIzZmFkYjA5MGNmNzEyYTliNw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2001-08-15T15:57:41Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2001-08-15T15:57:41Z"}, "message": "std_limits.h [...]: Define appropriate long double limits for m68k extended floating point.\n\n\t* include/bits/std_limits.h [__glibcpp_long_double_bits == 96]:\n\tDefine appropriate long double limits for m68k extended floating\n\tpoint.\n\t(__glibcpp_f32_digits10): Corrected, off by one.\n\t(__glibcpp_f80_digits10): Likewise.\n\t(__glibcpp_f128_digits10): Likewise.\n\t* config/os/gnu-linux/bits/os_defines.h\n\t(__glibcpp_long_double_bits) [__mc68000__]: Define to 96.\n\nFrom-SVN: r44924", "tree": {"sha": "34bf35318eed8253791f8813140f776d988e20f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34bf35318eed8253791f8813140f776d988e20f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ad48e84df035fd325684bf59baf86c67ae1bdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad48e84df035fd325684bf59baf86c67ae1bdb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad48e84df035fd325684bf59baf86c67ae1bdb1"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "cfb754f0212f17e86c4d88dfc75d4b534be3f35e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "patch": "@@ -1,3 +1,14 @@\n+2001-08-15  Andreas Schwab  <schwab@suse.de>\n+\n+\t* include/bits/std_limits.h [__glibcpp_long_double_bits == 96]:\n+\tDefine appropriate long double limits for m68k extended floating\n+\tpoint.\n+\t(__glibcpp_f32_digits10): Corrected, off by one.\n+\t(__glibcpp_f80_digits10): Likewise.\n+\t(__glibcpp_f128_digits10): Likewise.\n+\t* config/os/gnu-linux/bits/os_defines.h\n+\t(__glibcpp_long_double_bits) [__mc68000__]: Define to 96.\n+\n 2001-08-15  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* testsuite/18_support/numeric_limits.cc: Add more tests."}, {"sha": "db67d9752d46c7c5ad1981bbd924e884ca1e5711", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "patch": "@@ -75,5 +75,9 @@ typedef __loff_t __off64_t;\n #define __glibcpp_long_double_bits 64\n #endif\n \n+#if defined (__mc68000__)\n+#define __glibcpp_long_double_bits 96\n+#endif\n+\n #endif\n "}, {"sha": "a1572df3e7db5932bc62ed28c25d9dc00bfddebd", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0aa8179f4c435211e1e5b3fadb090cf712a9b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=2e0aa8179f4c435211e1e5b3fadb090cf712a9b7", "patch": "@@ -175,7 +175,7 @@\n #define __glibcpp_f32_min 1.17549435e-38F\n #define __glibcpp_f32_max 3.40282347e+38F\n #define __glibcpp_f32_digits 24\n-#define __glibcpp_f32_digits10 7\n+#define __glibcpp_f32_digits10 6\n #define __glibcpp_f32_radix 2\n #define __glibcpp_f32_epsilon 1.19209290e-07F\n #define __glibcpp_f32_round_error 1.0F\n@@ -197,18 +197,29 @@\n #define __glibcpp_f80_min 3.36210314311209350626e-4932L\n #define __glibcpp_f80_max 1.18973149535723176502e+4932L\n #define __glibcpp_f80_digits 64\n-#define __glibcpp_f80_digits10 19\n+#define __glibcpp_f80_digits10 18\n #define __glibcpp_f80_radix 2\n #define __glibcpp_f80_epsilon 1.08420217248550443401e-19L\n #define __glibcpp_f80_round_error 1.0L\n #define __glibcpp_f80_min_exponent -16381\n #define __glibcpp_f80_min_exponent10 -4931\n #define __glibcpp_f80_max_exponent 16384\n #define __glibcpp_f80_max_exponent10 4932\n+#define __glibcpp_f96_min 1.68105157155604675313e-4932L\n+#define __glibcpp_f96_max 1.18973149535723176502e+4932L\n+#define __glibcpp_f96_digits 64\n+#define __glibcpp_f96_digits10 18\n+#define __glibcpp_f96_radix 2\n+#define __glibcpp_f96_epsilon 1.08420217248550443401e-19L\n+#define __glibcpp_f96_round_error 1.0L\n+#define __glibcpp_f96_min_exponent -16382\n+#define __glibcpp_f96_min_exponent10 -4931\n+#define __glibcpp_f96_max_exponent 16384\n+#define __glibcpp_f96_max_exponent10 4932\n #define __glibcpp_f128_min 3.362103143112093506262677817321752603E-4932L\n #define __glibcpp_f128_max 1.189731495357231765085759326628007016E+4932L\n #define __glibcpp_f128_digits 113\n-#define __glibcpp_f128_digits10 34\n+#define __glibcpp_f128_digits10 33\n #define __glibcpp_f128_radix 2\n #define __glibcpp_f128_epsilon 1.925929944387235853055977942584927319E-34L\n #define __glibcpp_f128_round_error 1.0L\n@@ -766,6 +777,18 @@\n #define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n #define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n #define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#elif __glibcpp_long_double_bits == 96\n+#define __glibcpp_long_double_min __glibcpp_f96_min\n+#define __glibcpp_long_double_max __glibcpp_f96_max\n+#define __glibcpp_long_double_digits __glibcpp_f96_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f96_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n #elif __glibcpp_long_double_bits == 128\n #define __glibcpp_long_double_min __glibcpp_f128_min\n #define __glibcpp_long_double_max __glibcpp_f128_max"}]}