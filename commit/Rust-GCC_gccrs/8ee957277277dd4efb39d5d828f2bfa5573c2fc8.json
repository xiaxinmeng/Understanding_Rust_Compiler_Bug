{"sha": "8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlOTU3Mjc3Mjc3ZGQ0ZWZiMzlkNWQ4MjhmMmJmYTU1NzNjMmZjOA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2011-12-22T16:40:11Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2011-12-22T16:40:11Z"}, "message": "ia64.c (ia64_promote_function_mode): Remove.\n\n2011-12-22  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/ia64/ia64.c (ia64_promote_function_mode): Remove.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Remove.\n\t(ia64_function_value): Call promote_function_mode instead of\n\tia64_promote_function_mode.\n\t* config/ia64/vms.h (PROMOTE_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\nFrom-SVN: r182627", "tree": {"sha": "7bf3daa55d25df3c0217a9acf9699af3680700a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf3daa55d25df3c0217a9acf9699af3680700a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64729d8c5d47f1d2f50f508f61303e3be0c1b64a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64729d8c5d47f1d2f50f508f61303e3be0c1b64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64729d8c5d47f1d2f50f508f61303e3be0c1b64a"}], "stats": {"total": 82, "additions": 34, "deletions": 48}, "files": [{"sha": "cc8a2a4fbfb6b1c7d589dd7f9f7d9af7b32e9b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "patch": "@@ -1,3 +1,12 @@\n+2011-12-22  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/ia64/ia64.c (ia64_promote_function_mode): Remove.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Remove.\n+\t(ia64_function_value): Call promote_function_mode instead of\n+\tia64_promote_function_mode.\n+\t* config/ia64/vms.h (PROMOTE_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\n 2011-12-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/27468"}, {"sha": "d74eeb6299b69b4863f306b22eb549e69d42c898", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "patch": "@@ -316,11 +316,6 @@ static const char *ia64_invalid_conversion (const_tree, const_tree);\n static const char *ia64_invalid_unary_op (int, const_tree);\n static const char *ia64_invalid_binary_op (int, const_tree, const_tree);\n static enum machine_mode ia64_c_mode_for_suffix (char);\n-static enum machine_mode ia64_promote_function_mode (const_tree,\n-\t\t\t\t\t\t     enum machine_mode,\n-\t\t\t\t\t\t     int *,\n-\t\t\t\t\t\t     const_tree,\n-\t\t\t\t\t\t     int);\n static void ia64_trampoline_init (rtx, tree, rtx);\n static void ia64_override_options_after_change (void);\n \n@@ -546,9 +541,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL ia64_output_dwarf_dtprel\n #endif\n \n-#undef TARGET_PROMOTE_FUNCTION_MODE\n-#define TARGET_PROMOTE_FUNCTION_MODE ia64_promote_function_mode\n-\n /* ??? Investigate.  */\n #if 0\n #undef TARGET_PROMOTE_PROTOTYPES\n@@ -5013,9 +5005,9 @@ ia64_function_value (const_tree valtype,\n \t  return gen_rtx_PARALLEL (mode, gen_rtvec_v (i, loc));\n \t}\n \n-      mode = ia64_promote_function_mode (valtype, mode, &unsignedp,\n-\t\t\t\t\t func ? TREE_TYPE (func) : NULL_TREE,\n-\t\t\t\t\t true);\n+      mode = promote_function_mode (valtype, mode, &unsignedp,\n+                                    func ? TREE_TYPE (func) : NULL_TREE,\n+                                    true);\n \n       return gen_rtx_REG (mode, GR_RET_FIRST);\n     }\n@@ -10984,43 +10976,6 @@ ia64_c_mode_for_suffix (char suffix)\n   return VOIDmode;\n }\n \n-static enum machine_mode\n-ia64_promote_function_mode (const_tree type,\n-\t\t\t    enum machine_mode mode,\n-\t\t\t    int *punsignedp,\n-\t\t\t    const_tree funtype,\n-\t\t\t    int for_return)\n-{\n-  /* Special processing required for OpenVMS ...  */\n-\n-  if (!TARGET_ABI_OPEN_VMS)\n-    return default_promote_function_mode(type, mode, punsignedp, funtype,\n-\t\t\t\t\t for_return);\n-\n-  /* HP OpenVMS Calling Standard dated June, 2004, that describes\n-     HP OpenVMS I64 Version 8.2EFT,\n-     chapter 4 \"OpenVMS I64 Conventions\"\n-     section 4.7 \"Procedure Linkage\"\n-     subsection 4.7.5.2, \"Normal Register Parameters\"\n-\n-     \"Unsigned integral (except unsigned 32-bit), set, and VAX floating-point\n-     values passed in registers are zero-filled; signed integral values as\n-     well as unsigned 32-bit integral values are sign-extended to 64 bits.\n-     For all other types passed in the general registers, unused bits are\n-     undefined.\"  */\n-\n-  if (for_return != 2\n-      && GET_MODE_CLASS (mode) == MODE_INT\n-      && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n-    {\n-      if (mode == SImode)\n-\t*punsignedp = 0;\n-      return DImode;\n-    }\n-  else\n-    return promote_mode (type, mode, punsignedp);\n-}\n-   \n static GTY(()) rtx ia64_dconst_0_5_rtx;\n \n rtx"}, {"sha": "f34ee78465ab081d3e6f1349374088e274e4d7ea", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee957277277dd4efb39d5d828f2bfa5573c2fc8/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=8ee957277277dd4efb39d5d828f2bfa5573c2fc8", "patch": "@@ -135,3 +135,25 @@ STATIC func_ptr __CTOR_LIST__[1]                                             \\\n \n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION ia64_vms_elf_asm_named_section\n+\n+/* Define this macro if it is advisable to hold scalars in registers\n+   in a wider mode than that declared by the program.  In such cases,\n+   the value is constrained to be within the bounds of the declared\n+   type, but kept valid in the wider mode.  The signedness of the\n+   extension may differ from that of the type.\n+\n+   For ia64, we always store objects in a full register.  32-bit integers\n+   are always sign-extended, but smaller objects retain their signedness.  */\n+\n+#undef PROMOTE_MODE\n+#define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)\t\t\t\\\n+  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n+      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if ((MODE) == SImode)\t\t\t\t\t\\\n+\t(UNSIGNEDP) = 0;\t\t\t\t\t\\\n+      (MODE) = DImode;\t\t\t\t\t\t\\\n+    }\n+\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote"}]}