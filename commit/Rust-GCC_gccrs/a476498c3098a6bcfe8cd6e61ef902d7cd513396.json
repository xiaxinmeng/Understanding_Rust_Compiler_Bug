{"sha": "a476498c3098a6bcfe8cd6e61ef902d7cd513396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NjQ5OGMzMDk4YTZiY2ZlOGNkNmU2MWVmOTAyZDdjZDUxMzM5Ng==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2017-06-12T12:10:12Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-06-12T12:10:12Z"}, "message": "config.gcc (*-*-vxworks*): Set use_gcc_stdint to \"provide\".\n\n2017-06-12  Doug Rupp  <rupp@adacore.com>\n\n\tgcc/\n\t* config.gcc (*-*-vxworks*): Set use_gcc_stdint to \"provide\".\n\tAppend vxworks-stdint.h to the tm_file list.\n\t* config/vxworks-stdint.h: New file.\n\n\tfixincludes/\n\t* inclhack.def (AAB_vxworks_stdint): Remove hack.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r249121", "tree": {"sha": "cd512b7c3896a613cf972fa8e83c424f2afd7f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd512b7c3896a613cf972fa8e83c424f2afd7f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a476498c3098a6bcfe8cd6e61ef902d7cd513396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a476498c3098a6bcfe8cd6e61ef902d7cd513396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a476498c3098a6bcfe8cd6e61ef902d7cd513396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a476498c3098a6bcfe8cd6e61ef902d7cd513396/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9c15e27492888cb0491b72af28ece83f79e4d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c15e27492888cb0491b72af28ece83f79e4d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c15e27492888cb0491b72af28ece83f79e4d72"}], "stats": {"total": 314, "additions": 72, "deletions": 242}, "files": [{"sha": "ffd171843e15c515d5ecfca22fde05edbcbca7ee", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -1,3 +1,8 @@\n+2017-06-12  Doug Rupp  <rupp@adacore.com>\n+\n+\t* inclhack.def (AAB_vxworks_stdint): Remove hack.\n+\t* fixincl.x: Regenerate.\n+\n 2017-02-25  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/68739"}, {"sha": "8d8be9c4c7db5f750244c014e792dcdd9dd69fe6", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 6, "deletions": 126, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -1,12 +1,12 @@\n /*  -*- buffer-read-only: t -*- vi: set ro:\n- * \n+ *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n- * \n- * It has been AutoGen-ed  Saturday February 25, 2017 at 03:25:44 PM EST\n+ *\n+ * It has been AutoGen-ed  June  8, 2017 at 10:50:04 AM by AutoGen 5.18.4\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat 25 Feb 2017 15:25:44 EST\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Jun  8 10:50:04 CEST 2017\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 248 fixup descriptions.\n+ * This file contains 247 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -579,120 +579,6 @@ static const char* apzAab_Vxworks_Regs_VxtypesPatch[] = {\n #endif\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Aab_Vxworks_Stdint fix\n- */\n-tSCC zAab_Vxworks_StdintName[] =\n-     \"AAB_vxworks_stdint\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zAab_Vxworks_StdintList[] =\n-  \"stdint.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzAab_Vxworks_StdintMachs[] = {\n-        \"*-*-vxworks*\",\n-        (const char*)NULL };\n-#define AAB_VXWORKS_STDINT_TEST_CT  0\n-#define aAab_Vxworks_StdintTests   (tTestDesc*)NULL\n-\n-/*\n- *  Fix Command Arguments for Aab_Vxworks_Stdint\n- */\n-static const char* apzAab_Vxworks_StdintPatch[] = {\n-\"#ifndef _STDINT_H\\n\\\n-#define _STDINT_H\\n\\\n-/* get int*_t, uint*_t */\\n\\\n-#include <types/vxTypes.h>\\n\\n\\\n-/* get legacy vxworks types for compatibility */\\n\\\n-#include <types/vxTypesOld.h>\\n\\n\\\n-typedef long intptr_t;\\n\\\n-typedef unsigned long uintptr_t;\\n\\n\\\n-typedef int64_t intmax_t;\\n\\\n-typedef uint64_t uintmax_t;\\n\\n\\\n-typedef int8_t int_least8_t;\\n\\\n-typedef int16_t int_least16_t;\\n\\\n-typedef int32_t int_least32_t;\\n\\\n-typedef int64_t int_least64_t;\\n\\n\\\n-typedef uint8_t uint_least8_t;\\n\\\n-typedef uint16_t uint_least16_t;\\n\\\n-typedef uint32_t uint_least32_t;\\n\\\n-typedef uint64_t uint_least64_t;\\n\\n\\\n-typedef int8_t int_fast8_t;\\n\\\n-typedef int int_fast16_t;\\n\\\n-typedef int32_t int_fast32_t;\\n\\\n-typedef int64_t int_fast64_t;\\n\\n\\\n-typedef uint8_t uint_fast8_t;\\n\\\n-typedef unsigned int uint_fast16_t;\\n\\\n-typedef uint32_t uint_fast32_t;\\n\\\n-typedef uint64_t uint_fast64_t;\\n\\n\\\n-/* Ranges */\\n\\\n-#define UINT8_MAX (~(uint8_t)0)\\n\\\n-#define UINT8_MIN 0\\n\\\n-#define UINT16_MAX (~(uint16_t)0)\\n\\\n-#define UINT16_MIN 0\\n\\\n-#define UINT32_MAX (~(uint32_t)0)\\n\\\n-#define UINT32_MIN 0\\n\\\n-#define UINT64_MAX (~(uint64_t)0)\\n\\\n-#define UINT64_MIN 0\\n\\n\\\n-#define UINTPTR_MAX (~(uintptr_t)0)\\n\\\n-#define UINTPTR_MIN 0\\n\\n\\\n-/* Need to do int_fast16_t as well, as type\\n\\\n-   size may be architecture dependent */\\n\\\n-#define UINT_FAST16_MAX (~(uint_fast16_t)0)\\n\\\n-#define UINT_FAST16_MAX 0\\n\\n\\\n-#define INT8_MAX (UINT8_MAX>>1)\\n\\\n-#define INT8_MIN (INT8_MAX+1)\\n\\\n-#define INT16_MAX (UINT16_MAX>>1)\\n\\\n-#define INT16_MIN (INT16_MAX+1)\\n\\\n-#define INT32_MAX (UINT32_MAX>>1)\\n\\\n-#define INT32_MIN (INT32_MAX+1)\\n\\\n-#define INT64_MAX (UINT64_MAX>>1)\\n\\\n-#define INT64_MIN (INT64_MAX+1)\\n\\n\\\n-#define INTPTR_MAX (UINTPTR_MAX>>1)\\n\\\n-#define INTPTR_MIN (INTPTR_MAX+1)\\t\\n\\n\\\n-#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)\\n\\\n-#define INT_FAST16_MIN (INT_FAST16_MAX+1)\\n\\n\\\n-/* now define equiv. constants */\\n\\\n-#define UINT_FAST8_MAX UINT8_MAX\\n\\\n-#define UINT_FAST8_MIN UINT_FAST8_MIN\\n\\\n-#define INT_FAST8_MAX INT8_MAX\\n\\\n-#define INT_FAST8_MIN INT8_MIN\\n\\\n-#define UINT_FAST32_MAX UINT32_MAX\\n\\\n-#define UINT_FAST32_MIN UINT32_MIN\\n\\\n-#define INT_FAST32_MAX INT32_MAX\\n\\\n-#define INT_FAST32_MIN INT32_MIN\\n\\\n-#define UINT_FAST64_MAX UINT64_MAX\\n\\\n-#define UINT_FAST64_MIN UINT64_MIN\\n\\\n-#define INT_FAST64_MAX INT64_MAX\\n\\\n-#define INT_FAST64_MIN INT64_MIN\\n\\n\\\n-#define UINT_LEAST8_MAX UINT8_MAX\\n\\\n-#define UINT_LEAST8_MIN UINT8_MIN\\n\\\n-#define INT_LEAST8_MAX INT8_MAX\\n\\\n-#define INT_LEAST8_MIN INT8_MIN\\n\\\n-#define UINT_LEAST16_MAX UINT16_MAX\\n\\\n-#define UINT_LEAST16_MIN UINT16_MIN\\n\\\n-#define INT_LEAST16_MAX INT16_MAX\\n\\\n-#define INT_LEAST16_MIN INT16_MIN\\n\\\n-#define UINT_LEAST32_MAX UINT32_MAX\\n\\\n-#define UINT_LEAST32_MIN UINT32_MIN\\n\\\n-#define INT_LEAST32_MAX INT32_MAX\\n\\\n-#define INT_LEAST32_MIN INT32_MIN\\n\\\n-#define UINT_LEAST64_MAX UINT64_MAX\\n\\\n-#define UINT_LEAST64_MIN UINT64_MIN\\n\\\n-#define INT_LEAST64_MAX INT64_MAX\\n\\\n-#define INT_LEAST64_MIN INT64_MIN\\n\\n\\\n-#define UINTMAX_MAX UINT64_MAX\\n\\\n-#define UINTMAX_MIN UINT64_MIN\\n\\\n-#define INTMAX_MAX INT64_MAX\\n\\\n-#define INTMAX_MIN INT64_MIN\\n\\n\\\n-#endif\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aab_Vxworks_Unistd fix\n@@ -10141,7 +10027,7 @@ static const char* apzX11_SprintfPatch[] = {\n  */\n #define REGEX_COUNT          285\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            248\n+#define FIX_COUNT            247\n \n /*\n  *  Enumerate the fixes\n@@ -10157,7 +10043,6 @@ typedef enum {\n     AAB_SUN_MEMCPY_FIXIDX,\n     AAB_VXWORKS_ASSERT_FIXIDX,\n     AAB_VXWORKS_REGS_VXTYPES_FIXIDX,\n-    AAB_VXWORKS_STDINT_FIXIDX,\n     AAB_VXWORKS_UNISTD_FIXIDX,\n     AIX_ASSERT_FIXIDX,\n     AIX_COMPLEX_FIXIDX,\n@@ -10448,11 +10333,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      AAB_VXWORKS_REGS_VXTYPES_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n      aAab_Vxworks_Regs_VxtypesTests,   apzAab_Vxworks_Regs_VxtypesPatch, 0 },\n \n-  {  zAab_Vxworks_StdintName,    zAab_Vxworks_StdintList,\n-     apzAab_Vxworks_StdintMachs,\n-     AAB_VXWORKS_STDINT_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n-     aAab_Vxworks_StdintTests,   apzAab_Vxworks_StdintPatch, 0 },\n-\n   {  zAab_Vxworks_UnistdName,    zAab_Vxworks_UnistdList,\n      apzAab_Vxworks_UnistdMachs,\n      AAB_VXWORKS_UNISTD_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,"}, {"sha": "fd0034f3aaa055f649a3828e41e3a25dc303a961", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -426,122 +426,6 @@ fix = {\n \t_EndOfHeader_;\n };\n \n-/*\n- * Make VxWorks stdint.h a bit more compliant - add typedefs\n- */\n-fix = {\n-    hackname    = AAB_vxworks_stdint;\n-    files       = stdint.h;\n-    mach        = \"*-*-vxworks*\";\n-        \n-    replace     = <<- _EndOfHeader_\n-\t#ifndef _STDINT_H\n-\t#define _STDINT_H\n-\t/* get int*_t, uint*_t */\n-\t#include <types/vxTypes.h>\n-\t\n-\t/* get legacy vxworks types for compatibility */\n-\t#include <types/vxTypesOld.h>\n-\t\n-\ttypedef long intptr_t;\n-\ttypedef unsigned long uintptr_t;\n-\t\n-\ttypedef int64_t intmax_t;\n-\ttypedef uint64_t uintmax_t;\n-\t\n-\ttypedef int8_t int_least8_t;\n-\ttypedef int16_t int_least16_t;\n-\ttypedef int32_t int_least32_t;\n-\ttypedef int64_t int_least64_t;\n-\t\n-\ttypedef uint8_t uint_least8_t;\n-\ttypedef uint16_t uint_least16_t;\n-\ttypedef uint32_t uint_least32_t;\n-\ttypedef uint64_t uint_least64_t;\n-\t\n-\ttypedef int8_t int_fast8_t;\n-\ttypedef int int_fast16_t;\n-\ttypedef int32_t int_fast32_t;\n-\ttypedef int64_t int_fast64_t;\n-\t\n-\ttypedef uint8_t uint_fast8_t;\n-\ttypedef unsigned int uint_fast16_t;\n-\ttypedef uint32_t uint_fast32_t;\n-\ttypedef uint64_t uint_fast64_t;\n-\t\n-\t/* Ranges */\n-\t#define UINT8_MAX (~(uint8_t)0)\n-\t#define UINT8_MIN 0\n-\t#define UINT16_MAX (~(uint16_t)0)\n-\t#define UINT16_MIN 0\n-\t#define UINT32_MAX (~(uint32_t)0)\n-\t#define UINT32_MIN 0\n-\t#define UINT64_MAX (~(uint64_t)0)\n-\t#define UINT64_MIN 0\n-\t\n-\t#define UINTPTR_MAX (~(uintptr_t)0)\n-\t#define UINTPTR_MIN 0\n-\t\n-\t/* Need to do int_fast16_t as well, as type\n-\t   size may be architecture dependent */\n-\t#define UINT_FAST16_MAX (~(uint_fast16_t)0)\n-\t#define UINT_FAST16_MAX 0\n-\t\n-\t#define INT8_MAX (UINT8_MAX>>1)\n-\t#define INT8_MIN (INT8_MAX+1)\n-\t#define INT16_MAX (UINT16_MAX>>1)\n-\t#define INT16_MIN (INT16_MAX+1)\n-\t#define INT32_MAX (UINT32_MAX>>1)\n-\t#define INT32_MIN (INT32_MAX+1)\n-\t#define INT64_MAX (UINT64_MAX>>1)\n-\t#define INT64_MIN (INT64_MAX+1)\n-\t\n-\t#define INTPTR_MAX (UINTPTR_MAX>>1)\n-\t#define INTPTR_MIN (INTPTR_MAX+1)\t\n-\t\n-\t#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)\n-\t#define INT_FAST16_MIN (INT_FAST16_MAX+1)\n-\t\n-\t/* now define equiv. constants */\n-\t#define UINT_FAST8_MAX UINT8_MAX\n-\t#define UINT_FAST8_MIN UINT_FAST8_MIN\n-\t#define INT_FAST8_MAX INT8_MAX\n-\t#define INT_FAST8_MIN INT8_MIN\n-\t#define UINT_FAST32_MAX UINT32_MAX\n-\t#define UINT_FAST32_MIN UINT32_MIN\n-\t#define INT_FAST32_MAX INT32_MAX\n-\t#define INT_FAST32_MIN INT32_MIN\n-\t#define UINT_FAST64_MAX UINT64_MAX\n-\t#define UINT_FAST64_MIN UINT64_MIN\n-\t#define INT_FAST64_MAX INT64_MAX\n-\t#define INT_FAST64_MIN INT64_MIN\n-\t\n-\t#define UINT_LEAST8_MAX UINT8_MAX\n-\t#define UINT_LEAST8_MIN UINT8_MIN\n-\t#define INT_LEAST8_MAX INT8_MAX\n-\t#define INT_LEAST8_MIN INT8_MIN\n-\t#define UINT_LEAST16_MAX UINT16_MAX\n-\t#define UINT_LEAST16_MIN UINT16_MIN\n-\t#define INT_LEAST16_MAX INT16_MAX\n-\t#define INT_LEAST16_MIN INT16_MIN\n-\t#define UINT_LEAST32_MAX UINT32_MAX\n-\t#define UINT_LEAST32_MIN UINT32_MIN\n-\t#define INT_LEAST32_MAX INT32_MAX\n-\t#define INT_LEAST32_MIN INT32_MIN\n-\t#define UINT_LEAST64_MAX UINT64_MAX\n-\t#define UINT_LEAST64_MIN UINT64_MIN\n-\t#define INT_LEAST64_MAX INT64_MAX\n-\t#define INT_LEAST64_MIN INT64_MIN\n-\t\n-\t#define UINTMAX_MAX UINT64_MAX\n-\t#define UINTMAX_MIN UINT64_MIN\n-\t#define INTMAX_MAX INT64_MAX\n-\t#define INTMAX_MIN INT64_MIN\n-\t\n-\t#endif\n-\t_EndOfHeader_;\n-};\n-\n /*\n  *  This hack makes makes unistd.h more POSIX-compliant on VxWorks\n  */"}, {"sha": "619352776ed823206e68d53bc8ae763508e44148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -1,3 +1,9 @@\n+2017-06-12  Doug Rupp  <rupp@adacore.com>\n+\n+\t* config.gcc (*-*-vxworks*): Set use_gcc_stdint to \"provide\".\n+\tAppend vxworks-stdint.h to the tm_file list.\n+\t* config/vxworks-stdint.h: New file.\n+\n 2017-06-12  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/81041"}, {"sha": "8b00e663a53bf6c632169c4c1e889647a52391ac", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -917,6 +917,8 @@ case ${target} in\n   xm_defines=POSIX\n   extra_options=\"${extra_options} vxworks.opt\"\n   extra_objs=\"$extra_objs vxworks.o\"\n+  use_gcc_stdint=provide\n+  tm_file=\"${tm_file} vxworks-stdint.h\"\n   case ${enable_threads} in\n     no) ;;\n     \"\" | yes | vxworks) thread_file='vxworks' ;;"}, {"sha": "2595e8364f6a89413d5d3e49edddc2b1f9a2b074", "filename": "gcc/config/vxworks-stdint.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2Fconfig%2Fvxworks-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a476498c3098a6bcfe8cd6e61ef902d7cd513396/gcc%2Fconfig%2Fvxworks-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks-stdint.h?ref=a476498c3098a6bcfe8cd6e61ef902d7cd513396", "patch": "@@ -0,0 +1,53 @@\n+/* Definitions for <stdint.h> types on systems using VxWorks.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define SIG_ATOMIC_TYPE \"unsigned char\"\n+\n+#define INT8_TYPE \"signed char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+#define INT_LEAST8_TYPE \"signed char\"\n+#define INT_LEAST16_TYPE \"short int\"\n+#define INT_LEAST32_TYPE \"int\"\n+#define INT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_LEAST8_TYPE \"unsigned char\"\n+#define UINT_LEAST16_TYPE \"short unsigned int\"\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+#define UINT_LEAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+#define INT_FAST8_TYPE \"signed char\"\n+#define INT_FAST16_TYPE \"int\"\n+#define INT_FAST32_TYPE \"int\"\n+#define INT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"long long int\")\n+#define UINT_FAST8_TYPE \"unsigned char\"\n+#define UINT_FAST16_TYPE \"unsigned int\"\n+#define UINT_FAST32_TYPE \"unsigned int\"\n+#define UINT_FAST64_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"long long unsigned int\")\n+\n+#define INTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n+#define UINTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")"}]}