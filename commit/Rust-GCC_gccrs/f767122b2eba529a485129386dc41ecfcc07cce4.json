{"sha": "f767122b2eba529a485129386dc41ecfcc07cce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2NzEyMmIyZWJhNTI5YTQ4NTEyOTM4NmRjNDFlY2ZjYzA3Y2NlNA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-01-24T14:46:47Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-01-24T14:46:47Z"}, "message": "unwind-dw2-fde.c (get_cie_encoding): Replaced _Unwind_Word with _uleb128_t and _Unwind_SWord with _sleb128_t.\n\n2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* unwind-dw2-fde.c (get_cie_encoding): Replaced _Unwind_Word with \n\t_uleb128_t and _Unwind_SWord with _sleb128_t.\n\t* unwind-dw2.c (extract_cie_info, execute_stack_op, execute_cfa_program,\n\tuw_frame_state_for, uw_update_context_1): Likewise.\n\t* unwind-c.c (parse_lsda_header, PERSONALITY_FUNCTION): Likewise.\n\t* unwind-pe.h (read_uleb128, read_sleb128,\n\tread_encoded_value_with_base): Likewise.\n\t* unwind-generic.h: Define _sleb128_t and _uleb128_t types.\n\n2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* libsupc++/eh_personality.cc (parse_lsda_header, check_exception_spec,\n\tget_ttype_entry, empty_exception_spec, PERSONALITY_FUNCTION): Replaced\n\t_Unwind_Word with _uleb128_t and _Unwind_SWord with _sleb128_t.\n\n2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* exception.cc (parse_lsda_header, PERSONALITY_FUNCTION): Replaced\n\t_Unwind_Word with _uleb128_t and _Unwind_SWord with _sleb128_t.\n\nFrom-SVN: r121116", "tree": {"sha": "40d181be30a62b741ff60c3fc615a9ba1edb4fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d181be30a62b741ff60c3fc615a9ba1edb4fe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f767122b2eba529a485129386dc41ecfcc07cce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f767122b2eba529a485129386dc41ecfcc07cce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f767122b2eba529a485129386dc41ecfcc07cce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f767122b2eba529a485129386dc41ecfcc07cce4/comments", "author": null, "committer": null, "parents": [{"sha": "877cc28c99f98cb1ef2bdc9fda528344006de9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877cc28c99f98cb1ef2bdc9fda528344006de9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877cc28c99f98cb1ef2bdc9fda528344006de9d0"}], "stats": {"total": 178, "additions": 122, "deletions": 56}, "files": [{"sha": "8164f0094b582c87847ba3d7e4d333c28bcc7421", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -1,3 +1,14 @@\n+2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* unwind-dw2-fde.c (get_cie_encoding): Replaced _Unwind_Word with \n+\t_uleb128_t and _Unwind_SWord with _sleb128_t.\n+\t* unwind-dw2.c (extract_cie_info, execute_stack_op, execute_cfa_program,\n+\tuw_frame_state_for, uw_update_context_1): Likewise.\n+\t* unwind-c.c (parse_lsda_header, PERSONALITY_FUNCTION): Likewise.\n+\t* unwind-pe.h (read_uleb128, read_sleb128,\n+\tread_encoded_value_with_base): Likewise.\n+\t* unwind-generic.h: Define _sleb128_t and _uleb128_t types.\n+\n 2007-01-24  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (expand_builtin_cexpi): Get the fndecl"}, {"sha": "f287ea2d9e628fc2ffcf95d24eb8c2d297e2641f", "filename": "gcc/unwind-c.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-c.c?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -50,7 +50,7 @@ static const unsigned char *\n parse_lsda_header (struct _Unwind_Context *context, const unsigned char *p,\n \t\t   lsda_header_info *info)\n {\n-  _Unwind_Word tmp;\n+  _uleb128_t tmp;\n   unsigned char lpstart_encoding;\n \n   info->Start = (context ? _Unwind_GetRegionStart (context) : 0);\n@@ -175,7 +175,7 @@ PERSONALITY_FUNCTION (int version,\n     return _URC_CONTINUE_UNWIND;\n   else\n     {\n-      _Unwind_Word cs_lp, cs_action;\n+      _uleb128_t cs_lp, cs_action;\n       do\n \t{\n \t  p = read_uleb128 (p, &cs_lp);\n@@ -185,7 +185,7 @@ PERSONALITY_FUNCTION (int version,\n \n       /* Can never have null landing pad for sjlj -- that would have\n \t been indicated by a -1 call site index.  */\n-      landing_pad = cs_lp + 1;\n+      landing_pad = (_Unwind_Ptr)cs_lp + 1;\n       if (cs_action)\n \taction_record = info.action_table + cs_action - 1;\n       goto found_something;\n@@ -195,7 +195,7 @@ PERSONALITY_FUNCTION (int version,\n   while (p < info.action_table)\n     {\n       _Unwind_Ptr cs_start, cs_len, cs_lp;\n-      _Unwind_Word cs_action;\n+      _uleb128_t cs_action;\n \n       /* Note that all call-site encodings are \"absolute\" displacements.  */\n       p = read_encoded_value (0, info.call_site_encoding, p, &cs_start);"}, {"sha": "880ba51bf3819ef91f64f4ef05f4382515be5d1f", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -266,8 +266,8 @@ get_cie_encoding (const struct dwarf_cie *cie)\n {\n   const unsigned char *aug, *p;\n   _Unwind_Ptr dummy;\n-  _Unwind_Word utmp;\n-  _Unwind_Sword stmp;\n+  _uleb128_t utmp;\n+  _sleb128_t stmp;\n \n   aug = cie->augmentation;\n   if (aug[0] != 'z')"}, {"sha": "b40b16fda552b84c96ec7b0c843f4f1a4e17cea9", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -349,7 +349,8 @@ extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,\n   const unsigned char *aug = cie->augmentation;\n   const unsigned char *p = aug + strlen ((const char *)aug) + 1;\n   const unsigned char *ret = NULL;\n-  _Unwind_Word utmp;\n+  _uleb128_t utmp;\n+  _sleb128_t stmp;\n \n   /* g++ v2 \"eh\" has pointer immediately following augmentation string,\n      so it must be handled first.  */\n@@ -362,12 +363,17 @@ extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,\n \n   /* Immediately following the augmentation are the code and\n      data alignment and return address column.  */\n-  p = read_uleb128 (p, &fs->code_align);\n-  p = read_sleb128 (p, &fs->data_align);\n+  p = read_uleb128 (p, &utmp);\n+  fs->code_align = (_Unwind_Word)utmp;\n+  p = read_sleb128 (p, &stmp);\n+  fs->data_align = (_Unwind_Sword)stmp;\n   if (cie->version == 1)\n     fs->retaddr_column = *p++;\n   else\n-    p = read_uleb128 (p, &fs->retaddr_column);\n+    {\n+      p = read_uleb128 (p, &utmp);\n+      fs->retaddr_column = (_Unwind_Word)utmp;\n+    }\n   fs->lsda_encoding = DW_EH_PE_omit;\n \n   /* If the augmentation starts with 'z', then a uleb128 immediately\n@@ -442,8 +448,9 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n   while (op_ptr < op_end)\n     {\n       enum dwarf_location_atom op = *op_ptr++;\n-      _Unwind_Word result, reg, utmp;\n-      _Unwind_Sword offset, stmp;\n+      _Unwind_Word result;\n+      _uleb128_t reg, utmp;\n+      _sleb128_t offset, stmp;\n \n       switch (op)\n \t{\n@@ -520,11 +527,12 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t  op_ptr += 8;\n \t  break;\n \tcase DW_OP_constu:\n-\t  op_ptr = read_uleb128 (op_ptr, &result);\n+\t  op_ptr = read_uleb128 (op_ptr, &utmp);\n+\t  result = (_Unwind_Word)utmp;\n \t  break;\n \tcase DW_OP_consts:\n \t  op_ptr = read_sleb128 (op_ptr, &stmp);\n-\t  result = stmp;\n+\t  result = (_Unwind_Sword)stmp;\n \t  break;\n \n \tcase DW_OP_reg0:\n@@ -604,7 +612,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \tcase DW_OP_bregx:\n \t  op_ptr = read_uleb128 (op_ptr, &reg);\n \t  op_ptr = read_sleb128 (op_ptr, &offset);\n-\t  result = _Unwind_GetGR (context, reg) + offset;\n+\t  result = _Unwind_GetGR (context, reg) + (_Unwind_Word)offset;\n \t  break;\n \n \tcase DW_OP_dup:\n@@ -698,7 +706,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t      break;\n \t    case DW_OP_plus_uconst:\n \t      op_ptr = read_uleb128 (op_ptr, &utmp);\n-\t      result += utmp;\n+\t      result += (_Unwind_Word)utmp;\n \t      break;\n \n \t    default:\n@@ -857,8 +865,8 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t && fs->pc < context->ra + _Unwind_IsSignalFrame (context))\n     {\n       unsigned char insn = *insn_ptr++;\n-      _Unwind_Word reg, utmp;\n-      _Unwind_Sword offset, stmp;\n+      _uleb128_t reg, utmp;\n+      _sleb128_t offset, stmp;\n \n       if ((insn & 0xc0) == DW_CFA_advance_loc)\n \tfs->pc += (insn & 0x3f) * fs->code_align;\n@@ -928,11 +936,12 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \n \tcase DW_CFA_register:\n \t  {\n-\t    _Unwind_Word reg2;\n+\t    _uleb128_t reg2;\n \t    insn_ptr = read_uleb128 (insn_ptr, &reg);\n \t    insn_ptr = read_uleb128 (insn_ptr, &reg2);\n \t    fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].how = REG_SAVED_REG;\n-\t    fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.reg = reg2;\n+\t    fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (reg)].loc.reg =\n+\t      (_Unwind_Word)reg2;\n \t  }\n \t  break;\n \n@@ -962,14 +971,16 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_offset = utmp;\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Word)utmp;\n \t  fs->regs.cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n \tcase DW_CFA_def_cfa_register:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n \t  fs->regs.cfa_how = CFA_REG_OFFSET;\n \t  break;\n \n@@ -1005,14 +1016,17 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_def_cfa_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &fs->regs.cfa_reg);\n-\t  insn_ptr = read_sleb128 (insn_ptr, &fs->regs.cfa_offset);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n \t  fs->regs.cfa_how = CFA_REG_OFFSET;\n \t  fs->regs.cfa_offset *= fs->data_align;\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset_sf:\n-\t  insn_ptr = read_sleb128 (insn_ptr, &fs->regs.cfa_offset);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n \t  fs->regs.cfa_offset *= fs->data_align;\n \t  /* cfa_how deliberately not set.  */\n \t  break;\n@@ -1054,7 +1068,8 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  break;\n \n \tcase DW_CFA_GNU_args_size:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &context->args_size);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  context->args_size = (_Unwind_Word)utmp;\n \t  break;\n \n \tcase DW_CFA_GNU_negative_offset_extended:\n@@ -1125,7 +1140,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   insn = NULL;\n   if (fs->saw_z)\n     {\n-      _Unwind_Word i;\n+      _uleb128_t i;\n       aug = read_uleb128 (aug, &i);\n       insn = aug + i;\n     }\n@@ -1268,7 +1283,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n     case CFA_EXP:\n       {\n \tconst unsigned char *exp = fs->regs.cfa_exp;\n-\t_Unwind_Word len;\n+\t_uleb128_t len;\n \n \texp = read_uleb128 (exp, &len);\n \tcfa = (void *) (_Unwind_Ptr)\n@@ -1307,7 +1322,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       case REG_SAVED_EXP:\n \t{\n \t  const unsigned char *exp = fs->regs.reg[i].loc.exp;\n-\t  _Unwind_Word len;\n+\t  _uleb128_t len;\n \t  _Unwind_Ptr val;\n \n \t  exp = read_uleb128 (exp, &len);\n@@ -1326,7 +1341,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       case REG_SAVED_VAL_EXP:\n \t{\n \t  const unsigned char *exp = fs->regs.reg[i].loc.exp;\n-\t  _Unwind_Word len;\n+\t  _uleb128_t len;\n \t  _Unwind_Ptr val;\n \n \t  exp = read_uleb128 (exp, &len);"}, {"sha": "1218d8c2b5397c4908d11e4f45397acd42b4f54f", "filename": "gcc/unwind-generic.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-generic.h?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -230,6 +230,35 @@ extern _Unwind_Ptr _Unwind_GetTextRelBase (struct _Unwind_Context *);\n    contains it.  */\n extern void * _Unwind_FindEnclosingFunction (void *pc);\n \n+#ifndef __SIZEOF_LONG__\n+  #error \"__SIZEOF_LONG__ macro not defined\"\n+#endif\n+\n+#ifndef __SIZEOF_POINTER__\n+  #error \"__SIZEOF_POINTER__ macro not defined\"\n+#endif\n+\n+\n+/* leb128 type numbers have a potentially unlimited size.\n+   The target of the following definitions of _sleb128_t and _uleb128_t\n+   is to have efficient data types large enough to hold the leb128 type\n+   numbers used in the unwind code.\n+   Mostly these types will simply be defined to long and unsigned long\n+   except when a unsigned long data type on the target machine is not\n+   capable of storing a pointer.  */\n+\n+#if __SIZEOF_LONG__ < __SIZEOF_POINTER__\n+#ifdef HAVE_LONG_LONG\n+  typedef long long _sleb128_t;\n+  typedef unsigned long long _uleb128_t;\n+#else\n+  #error \"long long data type is needed to define _sleb128_t\"\n+#endif\n+#else\n+  typedef long _sleb128_t;\n+  typedef unsigned long _uleb128_t;\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "9c56af0848618972a3747a91faac3f76bd316db7", "filename": "gcc/unwind-pe.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/gcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-pe.h?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -130,17 +130,17 @@ base_of_encoded_value (unsigned char encoding, struct _Unwind_Context *context)\n    pointers should not be leb128 encoded on that target.  */\n \n static const unsigned char *\n-read_uleb128 (const unsigned char *p, _Unwind_Word *val)\n+read_uleb128 (const unsigned char *p, _uleb128_t *val)\n {\n   unsigned int shift = 0;\n   unsigned char byte;\n-  _Unwind_Word result;\n+  _uleb128_t result;\n \n   result = 0;\n   do\n     {\n       byte = *p++;\n-      result |= ((_Unwind_Word)byte & 0x7f) << shift;\n+      result |= ((_uleb128_t)byte & 0x7f) << shift;\n       shift += 7;\n     }\n   while (byte & 0x80);\n@@ -152,26 +152,26 @@ read_uleb128 (const unsigned char *p, _Unwind_Word *val)\n /* Similar, but read a signed leb128 value.  */\n \n static const unsigned char *\n-read_sleb128 (const unsigned char *p, _Unwind_Sword *val)\n+read_sleb128 (const unsigned char *p, _sleb128_t *val)\n {\n   unsigned int shift = 0;\n   unsigned char byte;\n-  _Unwind_Word result;\n+  _uleb128_t result;\n \n   result = 0;\n   do\n     {\n       byte = *p++;\n-      result |= ((_Unwind_Word)byte & 0x7f) << shift;\n+      result |= ((_uleb128_t)byte & 0x7f) << shift;\n       shift += 7;\n     }\n   while (byte & 0x80);\n \n   /* Sign-extend a negative value.  */\n   if (shift < 8 * sizeof(result) && (byte & 0x40) != 0)\n-    result |= -(((_Unwind_Word)1L) << shift);\n+    result |= -(((_uleb128_t)1L) << shift);\n \n-  *val = (_Unwind_Sword) result;\n+  *val = (_sleb128_t) result;\n   return p;\n }\n \n@@ -215,15 +215,15 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n \n \tcase DW_EH_PE_uleb128:\n \t  {\n-\t    _Unwind_Word tmp;\n+\t    _uleb128_t tmp;\n \t    p = read_uleb128 (p, &tmp);\n \t    result = (_Unwind_Internal_Ptr) tmp;\n \t  }\n \t  break;\n \n \tcase DW_EH_PE_sleb128:\n \t  {\n-\t    _Unwind_Sword tmp;\n+\t    _sleb128_t tmp;\n \t    p = read_sleb128 (p, &tmp);\n \t    result = (_Unwind_Internal_Ptr) tmp;\n \t  }"}, {"sha": "63b3f01a982dac8ebce931a991e7ec7e051177a4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -1,3 +1,8 @@\n+2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* exception.cc (parse_lsda_header, PERSONALITY_FUNCTION): Replaced\n+\t_Unwind_Word with _uleb128_t and _Unwind_SWord with _sleb128_t.\n+\n 2007-01-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libgcj/30550"}, {"sha": "4875dfde52f55652a83af73087483d0682653e61", "filename": "libjava/exception.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -128,7 +128,7 @@ static const unsigned char *\n parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n \t\t   lsda_header_info *info)\n {\n-  _Unwind_Word tmp;\n+  _uleb128_t tmp;\n   unsigned char lpstart_encoding;\n \n   info->Start = (context ? _Unwind_GetRegionStart (context) : 0);\n@@ -251,7 +251,7 @@ PERSONALITY_FUNCTION (int version,\n     return _URC_CONTINUE_UNWIND;\n   else\n     {\n-      _Unwind_Word cs_lp, cs_action;\n+      _uleb128_t cs_lp, cs_action;\n       do\n \t{\n \t  p = read_uleb128 (p, &cs_lp);\n@@ -271,7 +271,7 @@ PERSONALITY_FUNCTION (int version,\n   while (p < info.action_table)\n     {\n       _Unwind_Ptr cs_start, cs_len, cs_lp;\n-      _Unwind_Word cs_action;\n+      _uleb128_t cs_action;\n \n       // Note that all call-site encodings are \"absolute\" displacements.\n       p = read_encoded_value (0, info.call_site_encoding, p, &cs_start);\n@@ -317,7 +317,7 @@ PERSONALITY_FUNCTION (int version,\n   else\n     {\n       // Otherwise we have a catch handler.\n-      _Unwind_Sword ar_filter, ar_disp;\n+      _sleb128_t ar_filter, ar_disp;\n \n       while (1)\n \t{"}, {"sha": "56f746ab99366ba82b99f29f493721399df46e9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -1,3 +1,9 @@\n+2007-01-24  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* libsupc++/eh_personality.cc (parse_lsda_header, check_exception_spec,\n+\tget_ttype_entry, empty_exception_spec, PERSONALITY_FUNCTION): Replaced\n+\t_Unwind_Word with _uleb128_t and _Unwind_SWord with _sleb128_t.\n+\n 2007-01-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (__fill_aux(unsigned char*,"}, {"sha": "1e7cc8034dfe9ae7e2be0f93381331e0294f5d50", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767122b2eba529a485129386dc41ecfcc07cce4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767122b2eba529a485129386dc41ecfcc07cce4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=f767122b2eba529a485129386dc41ecfcc07cce4", "patch": "@@ -56,7 +56,7 @@ static const unsigned char *\n parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n \t\t   lsda_header_info *info)\n {\n-  _Unwind_Word tmp;\n+  _uleb128_t tmp;\n   unsigned char lpstart_encoding;\n \n   info->Start = (context ? _Unwind_GetRegionStart (context) : 0);\n@@ -92,7 +92,7 @@ parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n // Return an element from a type table.\n \n static const std::type_info*\n-get_ttype_entry(lsda_header_info* info, _Unwind_Word i)\n+get_ttype_entry(lsda_header_info* info, _uleb128_t i)\n {\n   _Unwind_Ptr ptr;\n \n@@ -112,15 +112,15 @@ typedef _Unwind_Control_Block _throw_typet;\n \n static bool\n check_exception_spec(lsda_header_info* info, _throw_typet* throw_type,\n-\t\t     void* thrown_ptr, _Unwind_Sword filter_value)\n+\t\t     void* thrown_ptr, _sleb128_t filter_value)\n {\n-  const _Unwind_Word* e = ((const _Unwind_Word*) info->TType)\n+  const _uleb128_t* e = ((const _uleb128_t*) info->TType)\n \t\t\t  - filter_value - 1;\n \n   while (1)\n     {\n       const std::type_info* catch_type;\n-      _Unwind_Word tmp;\n+      _uleb128_t tmp;\n \n       tmp = *e;\n       \n@@ -210,7 +210,7 @@ typedef const std::type_info _throw_typet;\n // Return an element from a type table.\n \n static const std::type_info *\n-get_ttype_entry (lsda_header_info *info, _Unwind_Word i)\n+get_ttype_entry (lsda_header_info *info, _uleb128_t i)\n {\n   _Unwind_Ptr ptr;\n \n@@ -253,14 +253,14 @@ get_adjusted_ptr (const std::type_info *catch_type,\n \n static bool\n check_exception_spec(lsda_header_info* info, _throw_typet* throw_type,\n-\t\t      void* thrown_ptr, _Unwind_Sword filter_value)\n+\t\t      void* thrown_ptr, _sleb128_t filter_value)\n {\n   const unsigned char *e = info->TType - filter_value - 1;\n \n   while (1)\n     {\n       const std::type_info *catch_type;\n-      _Unwind_Word tmp;\n+      _uleb128_t tmp;\n \n       e = read_uleb128 (e, &tmp);\n \n@@ -329,7 +329,7 @@ static bool\n empty_exception_spec (lsda_header_info *info, _Unwind_Sword filter_value)\n {\n   const unsigned char *e = info->TType - filter_value - 1;\n-  _Unwind_Word tmp;\n+  _uleb128_t tmp;\n \n   e = read_uleb128 (e, &tmp);\n   return tmp == 0;\n@@ -489,7 +489,7 @@ PERSONALITY_FUNCTION (int version,\n   while (p < info.action_table)\n     {\n       _Unwind_Ptr cs_start, cs_len, cs_lp;\n-      _Unwind_Word cs_action;\n+      _uleb128_t cs_action;\n \n       // Note that all call-site encodings are \"absolute\" displacements.\n       p = read_encoded_value (0, info.call_site_encoding, p, &cs_start);\n@@ -535,7 +535,7 @@ PERSONALITY_FUNCTION (int version,\n     {\n       // Otherwise we have a catch handler or exception specification.\n \n-      _Unwind_Sword ar_filter, ar_disp;\n+      _sleb128_t ar_filter, ar_disp;\n       const std::type_info* catch_type;\n       _throw_typet* throw_type;\n       bool saw_cleanup = false;"}]}