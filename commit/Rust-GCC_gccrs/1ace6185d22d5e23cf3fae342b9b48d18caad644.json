{"sha": "1ace6185d22d5e23cf3fae342b9b48d18caad644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjZTYxODVkMjJkNWUyM2NmM2ZhZTM0MmI5YjQ4ZDE4Y2FhZDY0NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-14T15:27:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-14T15:27:24Z"}, "message": "re PR fortran/49103 (local variables exchange values / wrong code with -O3)\n\n\tPR fortran/49103\n\t* tree.h (DECL_NONSHAREABLE): Define.\n\t(struct tree_decl_common): Change decl_common_unused to\n\tdecl_nonshareable_flag.\n\t* cfgexpand.c (expand_used_vars_for_block, clear_tree_used):\n\tIgnore vars with DECL_NONSHAREABLE bit set.\n\t* tree-cfg.c (gimple_duplicate_bb): Set DECL_NONSHAREABLE\n\ton stores to automatic aggregate vars.\n\n\t* gfortran.dg/pr49103.f90: New test.\n\nFrom-SVN: r175028", "tree": {"sha": "a038a08891c77147df8061be5e5979cdc97b4947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a038a08891c77147df8061be5e5979cdc97b4947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ace6185d22d5e23cf3fae342b9b48d18caad644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ace6185d22d5e23cf3fae342b9b48d18caad644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ace6185d22d5e23cf3fae342b9b48d18caad644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ace6185d22d5e23cf3fae342b9b48d18caad644/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b14c6d7ffc25b92aeea21f0c0c050582d3ed771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b14c6d7ffc25b92aeea21f0c0c050582d3ed771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b14c6d7ffc25b92aeea21f0c0c050582d3ed771"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "2c4b86c99f491629da4cf2f37f17fdcf99decde6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -1,5 +1,14 @@\n 2011-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/49103\n+\t* tree.h (DECL_NONSHAREABLE): Define.\n+\t(struct tree_decl_common): Change decl_common_unused to\n+\tdecl_nonshareable_flag.\n+\t* cfgexpand.c (expand_used_vars_for_block, clear_tree_used):\n+\tIgnore vars with DECL_NONSHAREABLE bit set.\n+\t* tree-cfg.c (gimple_duplicate_bb): Set DECL_NONSHAREABLE\n+\ton stores to automatic aggregate vars.\n+\n \tPR rtl-optimization/49390\n \tRevert:\n \t2010-06-29  Bernd Schmidt  <bernds@codesourcery.com>"}, {"sha": "491c2fc48cc7fbda4731c14ab15225e02879a4fd", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -1098,7 +1098,9 @@ expand_used_vars_for_block (tree block, bool toplevel)\n \n   /* Expand all variables at this level.  */\n   for (t = BLOCK_VARS (block); t ; t = DECL_CHAIN (t))\n-    if (TREE_USED (t))\n+    if (TREE_USED (t)\n+        && ((TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != RESULT_DECL)\n+\t    || !DECL_NONSHAREABLE (t)))\n       expand_one_var (t, toplevel, true);\n \n   this_sv_num = stack_vars_num;\n@@ -1131,6 +1133,8 @@ clear_tree_used (tree block)\n \n   for (t = BLOCK_VARS (block); t ; t = DECL_CHAIN (t))\n     /* if (!TREE_STATIC (t) && !DECL_EXTERNAL (t)) */\n+    if ((TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != RESULT_DECL)\n+\t|| !DECL_NONSHAREABLE (t))\n       TREE_USED (t) = 0;\n \n   for (t = BLOCK_SUBBLOCKS (block); t ; t = BLOCK_CHAIN (t))"}, {"sha": "c450a2231d45c7b72cf9b204ea738617a8e8456b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -1,3 +1,8 @@\n+2011-06-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/49103\n+\t* gfortran.dg/pr49103.f90: New test.\n+\n 2011-06-14  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/45098"}, {"sha": "e744c9bbe7f178c35e1d558a50a86be4108b8ef9", "filename": "gcc/testsuite/gfortran.dg/pr49103.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49103.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49103.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49103.f90?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -0,0 +1,19 @@\n+! PR fortran/49103\n+! { dg-do run }\n+  integer :: a(2), b(2), i, j\n+  open (10, status='scratch')\n+  do j = 1, 2\n+    a = (/ 0, 0 /)\n+    b = (/ 1, 1 /)\n+    do i = 1, 2\n+      write (10, *) a\n+      write (10, *) b\n+    end do\n+  end do\n+  rewind (10)\n+  do i = 0, 7\n+    read (10, *) a\n+    if (any (a .ne. mod (i, 2))) call abort\n+  end do\n+  close (10)\n+end"}, {"sha": "44b5c65837445a5e358e88de829fc6dc00a36d87", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -5090,6 +5090,7 @@ gimple_duplicate_bb (basic_block bb)\n     {\n       def_operand_p def_p;\n       ssa_op_iter op_iter;\n+      tree lhs;\n \n       stmt = gsi_stmt (gsi);\n       if (gimple_code (stmt) == GIMPLE_LABEL)\n@@ -5103,6 +5104,24 @@ gimple_duplicate_bb (basic_block bb)\n       maybe_duplicate_eh_stmt (copy, stmt);\n       gimple_duplicate_stmt_histograms (cfun, copy, cfun, stmt);\n \n+      /* When copying around a stmt writing into a local non-user\n+\t aggregate, make sure it won't share stack slot with other\n+\t vars.  */\n+      lhs = gimple_get_lhs (stmt);\n+      if (lhs && TREE_CODE (lhs) != SSA_NAME)\n+\t{\n+\t  tree base = get_base_address (lhs);\n+\t  if (base\n+\t      && (TREE_CODE (base) == VAR_DECL\n+\t\t  || TREE_CODE (base) == RESULT_DECL)\n+\t      && DECL_IGNORED_P (base)\n+\t      && !TREE_STATIC (base)\n+\t      && !DECL_EXTERNAL (base)\n+\t      && (TREE_CODE (base) != VAR_DECL\n+\t\t  || !DECL_HAS_VALUE_EXPR_P (base)))\n+\t    DECL_NONSHAREABLE (base) = 1;\n+\t}\n+\n       /* Create new names for all the definitions created by COPY and\n \t add replacement mappings for each new name.  */\n       FOR_EACH_SSA_DEF_OPERAND (def_p, copy, op_iter, SSA_OP_ALL_DEFS)"}, {"sha": "f55574dd5f138809343eec97791d9d4768ae468f", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace6185d22d5e23cf3fae342b9b48d18caad644/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1ace6185d22d5e23cf3fae342b9b48d18caad644", "patch": "@@ -1398,6 +1398,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define DECL_READ_P(NODE) \\\n   (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_read_flag)\n \n+#define DECL_NONSHAREABLE(NODE) \\\n+  (TREE_CHECK2 (NODE, VAR_DECL, \\\n+\t\tRESULT_DECL)->decl_common.decl_nonshareable_flag)\n+\n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n    thunked-to function.  */\n #define CALL_FROM_THUNK_P(NODE) (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n@@ -2887,8 +2891,9 @@ struct GTY(()) tree_decl_common {\n      being set.  */\n   unsigned decl_read_flag : 1;\n \n-  /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n-  unsigned decl_common_unused : 1;\n+  /* In VAR_DECL or RESULT_DECL set when significant code movement precludes\n+     attempting to share the stack slot with some other variable.  */\n+  unsigned decl_nonshareable_flag : 1;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;"}]}