{"sha": "41387ffdc6f349d55bf96e7245527f93f1cf36e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzODdmZmRjNmYzNDlkNTViZjk2ZTcyNDU1MjdmOTNmMWNmMzZlMg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-02-23T21:03:21Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-02-23T21:03:21Z"}, "message": "* config/c4x/c4x.c (c4x_process_after_reload): Split all insns.\n\nFrom-SVN: r32125", "tree": {"sha": "74865a18c4e47a2c615731b60a96cf06ee48cd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74865a18c4e47a2c615731b60a96cf06ee48cd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41387ffdc6f349d55bf96e7245527f93f1cf36e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41387ffdc6f349d55bf96e7245527f93f1cf36e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41387ffdc6f349d55bf96e7245527f93f1cf36e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41387ffdc6f349d55bf96e7245527f93f1cf36e2/comments", "author": null, "committer": null, "parents": [{"sha": "c45c5e092dd08db116ed749332f3b19e96830d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45c5e092dd08db116ed749332f3b19e96830d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45c5e092dd08db116ed749332f3b19e96830d22"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "da14ccebfa8d0304707f774bf18408e2f18d95c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41387ffdc6f349d55bf96e7245527f93f1cf36e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41387ffdc6f349d55bf96e7245527f93f1cf36e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41387ffdc6f349d55bf96e7245527f93f1cf36e2", "patch": "@@ -1,3 +1,7 @@\n+2000-02-24  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (c4x_process_after_reload): Split all insns.\n+\n 2000-02-23  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* cpplib.h (enum cpp_token): Added CPP_WCHAR and CPP_WSTRING."}, {"sha": "6090200cb54f2b38c571169d469a345bf37bae1d", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41387ffdc6f349d55bf96e7245527f93f1cf36e2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41387ffdc6f349d55bf96e7245527f93f1cf36e2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=41387ffdc6f349d55bf96e7245527f93f1cf36e2", "patch": "@@ -2250,6 +2250,7 @@ c4x_process_after_reload (first)\n       if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n \t{\n \t  int insn_code_number;\n+\t  rtx old;\n \n \t  insn_code_number = recog_memoized (insn);\n \n@@ -2261,26 +2262,22 @@ c4x_process_after_reload (first)\n \t  if (insn_code_number == CODE_FOR_rptb_end)\n \t    c4x_rptb_insert(insn);\n \n-\t  /* When the optimization level less than 2 we need to split\n-\t     the insn here.  Otherwise the calls to force_const_mem\n-\t     will not work.  */\n-\t  if (optimize < 2)\n-\t    {\n-\t      rtx old = insn;\n+\t  /* We need to split the insn here. Otherwise the calls to\n+\t     force_const_mem will not work for load_immed_address.  */\n+\t  old = insn;\n \n-\t      /* Don't split the insn if it has been deleted.  */\n-\t      if (! INSN_DELETED_P (old))\n-\t        insn = try_split (PATTERN(old), old, 1);\n+\t  /* Don't split the insn if it has been deleted.  */\n+\t  if (! INSN_DELETED_P (old))\n+\t    insn = try_split (PATTERN(old), old, 1);\n \n-\t      /* When not optimizing, the old insn will be still left around\n-\t\t with only the 'deleted' bit set.  Transform it into a note\n-\t\t to avoid confusion of subsequent processing.  */\n-\t      if (INSN_DELETED_P (old))\n-\t\t{\n-\t\t  PUT_CODE (old, NOTE);\n-\t\t  NOTE_LINE_NUMBER (old) = NOTE_INSN_DELETED;\n-\t\t  NOTE_SOURCE_FILE (old) = 0;\n-\t\t}\n+\t  /* When not optimizing, the old insn will be still left around\n+\t     with only the 'deleted' bit set.  Transform it into a note\n+\t     to avoid confusion of subsequent processing.  */\n+\t  if (INSN_DELETED_P (old))\n+\t    {\n+\t      PUT_CODE (old, NOTE);\n+\t      NOTE_LINE_NUMBER (old) = NOTE_INSN_DELETED;\n+\t      NOTE_SOURCE_FILE (old) = 0;\n \t    }\n \t}\n     }\n@@ -4413,7 +4410,7 @@ static struct name_list *extern_head;\n \n void\n c4x_global_label (name)\n-     char *name;\n+     const char *name;\n {\n   struct name_list *p, *last;\n \n@@ -4454,7 +4451,7 @@ c4x_global_label (name)\n \n void\n c4x_external_ref (name)\n-     char *name;\n+     const char *name;\n {\n   struct name_list *p;\n "}]}