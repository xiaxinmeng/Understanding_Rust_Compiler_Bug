{"sha": "df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4MTUxNDFlZjM3Y2YwZDFkNmNkYmM2Y2ZkMjgxMmQxNDI3MmYxYg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-07-14T22:18:35Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-07-14T22:18:35Z"}, "message": "2002-07-14\ufffd Mark Wielaard\ufffd <mark@klomp.org>\n\n    * gnu/java/security/der/DEREncodingException.java,\n    gnu/java/security/provider/DERReader.java,\n    gnu/java/security/provider/DERWriter.java,\n    gnu/java/security/provider/DSAKeyPairGenerator.java,\n    gnu/java/security/provider/DSAParameterGenerator.java,\n    gnu/java/security/provider/DSAParameters.java,\n    gnu/java/security/provider/DSASignature.java,\n    gnu/java/security/provider/GnuDSAPrivateKey.java,\n    gnu/java/security/provider/GnuDSAPublicKey.java,\n    gnu/java/security/provider/MD5.java,\n    gnu/java/security/util/Prime.java: New files from Classpath.\n    * Makefile.am (ordinary_java_source_files): Add new files.\n    * Makefile.in: Regenerate.\n\n2002-07-14\ufffd C. Brian Jones <cbj@gnu.org>\n\n    * gnu/java/security/provider/DefaultPolicy.java\n    (getPermissions): do not maintain static class variable of\n    Permissions\n    * gnu/java/security/provider/SHA.java\n    (engineUpdate): algorithm change\n    (engineDigest): algorithm change\n\nFrom-SVN: r55444", "tree": {"sha": "7cb57a36124c45a3ef3cec7310d2cd8c1f4a6928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb57a36124c45a3ef3cec7310d2cd8c1f4a6928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/comments", "author": null, "committer": null, "parents": [{"sha": "05d495014ecc0fe9951d1225af380f9a1f51058b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d495014ecc0fe9951d1225af380f9a1f51058b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d495014ecc0fe9951d1225af380f9a1f51058b"}], "stats": {"total": 1795, "additions": 1779, "deletions": 16}, "files": [{"sha": "4475ade9934f034510ab09f86622c2b11a2f29c2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -1,3 +1,28 @@\n+2002-07-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/java/security/der/DEREncodingException.java,\n+\tgnu/java/security/provider/DERReader.java,\n+\tgnu/java/security/provider/DERWriter.java,\n+\tgnu/java/security/provider/DSAKeyPairGenerator.java,\n+\tgnu/java/security/provider/DSAParameterGenerator.java,\n+\tgnu/java/security/provider/DSAParameters.java,\n+\tgnu/java/security/provider/DSASignature.java,\n+\tgnu/java/security/provider/GnuDSAPrivateKey.java,\n+\tgnu/java/security/provider/GnuDSAPublicKey.java,\n+\tgnu/java/security/provider/MD5.java,\n+\tgnu/java/security/util/Prime.java: New files from Classpath.\n+\t* Makefile.am (ordinary_java_source_files): Add new files.\n+\t* Makefile.in: Regenerate.\n+\n+2002-07-14  C. Brian Jones <cbj@gnu.org>\n+\n+\t* gnu/java/security/provider/DefaultPolicy.java\n+\t(getPermissions): do not maintain static class variable of\n+\tPermissions\n+\t* gnu/java/security/provider/SHA.java \n+\t(engineUpdate): algorithm change\n+\t(engineDigest): algorithm change\n+\n 2002-07-12  Jesse Rosenstock  <jmr@fulcrummicro.com>\n \n \tFor PR libgcj/7292:"}, {"sha": "84c985b4405fd01dbca58f21eed4768e7e79f29b", "filename": "libjava/Makefile.am", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -1428,10 +1428,21 @@ gnu/java/locale/LocaleInformation_zh_HK.java \\\n gnu/java/locale/LocaleInformation_zh_SG.java \\\n gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n+gnu/java/security/der/DEREncodingException.java \\\n+gnu/java/security/provider/DERReader.java \\\n+gnu/java/security/provider/DERWriter.java \\\n+gnu/java/security/provider/DSAKeyPairGenerator.java \\\n+gnu/java/security/provider/DSAParameterGenerator.java \\\n+gnu/java/security/provider/DSAParameters.java \\\n+gnu/java/security/provider/DSASignature.java \\\n gnu/java/security/provider/DefaultPolicy.java \\\n gnu/java/security/provider/Gnu.java \\\n+gnu/java/security/provider/GnuDSAPrivateKey.java \\\n+gnu/java/security/provider/GnuDSAPublicKey.java \\\n+gnu/java/security/provider/MD5.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n+gnu/java/security/util/Prime.java \\\n gnu/java/text/BaseBreakIterator.java \\\n gnu/java/text/CharacterBreakIterator.java \\\n gnu/java/text/LineBreakIterator.java \\"}, {"sha": "e47c4e56b8e2dd47b208031d43b4483158178dea", "filename": "libjava/Makefile.in", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -1190,10 +1190,21 @@ gnu/java/locale/LocaleInformation_zh_HK.java \\\n gnu/java/locale/LocaleInformation_zh_SG.java \\\n gnu/java/locale/LocaleInformation_zh_TW.java \\\n gnu/java/math/MPN.java \\\n+gnu/java/security/der/DEREncodingException.java \\\n+gnu/java/security/provider/DERReader.java \\\n+gnu/java/security/provider/DERWriter.java \\\n+gnu/java/security/provider/DSAKeyPairGenerator.java \\\n+gnu/java/security/provider/DSAParameterGenerator.java \\\n+gnu/java/security/provider/DSAParameters.java \\\n+gnu/java/security/provider/DSASignature.java \\\n gnu/java/security/provider/DefaultPolicy.java \\\n gnu/java/security/provider/Gnu.java \\\n+gnu/java/security/provider/GnuDSAPrivateKey.java \\\n+gnu/java/security/provider/GnuDSAPublicKey.java \\\n+gnu/java/security/provider/MD5.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n+gnu/java/security/util/Prime.java \\\n gnu/java/text/BaseBreakIterator.java \\\n gnu/java/text/CharacterBreakIterator.java \\\n gnu/java/text/LineBreakIterator.java \\\n@@ -1765,7 +1776,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2033,10 +2044,21 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/rmi/server/UnicastRemoteStub.P \\\n .deps/gnu/java/rmi/server/UnicastServer.P \\\n .deps/gnu/java/rmi/server/UnicastServerRef.P \\\n+.deps/gnu/java/security/der/DEREncodingException.P \\\n+.deps/gnu/java/security/provider/DERReader.P \\\n+.deps/gnu/java/security/provider/DERWriter.P \\\n+.deps/gnu/java/security/provider/DSAKeyPairGenerator.P \\\n+.deps/gnu/java/security/provider/DSAParameterGenerator.P \\\n+.deps/gnu/java/security/provider/DSAParameters.P \\\n+.deps/gnu/java/security/provider/DSASignature.P \\\n .deps/gnu/java/security/provider/DefaultPolicy.P \\\n .deps/gnu/java/security/provider/Gnu.P \\\n+.deps/gnu/java/security/provider/GnuDSAPrivateKey.P \\\n+.deps/gnu/java/security/provider/GnuDSAPublicKey.P \\\n+.deps/gnu/java/security/provider/MD5.P \\\n .deps/gnu/java/security/provider/SHA.P \\\n .deps/gnu/java/security/provider/SHA1PRNG.P \\\n+.deps/gnu/java/security/util/Prime.P \\\n .deps/gnu/java/text/BaseBreakIterator.P \\\n .deps/gnu/java/text/CharacterBreakIterator.P \\\n .deps/gnu/java/text/LineBreakIterator.P \\"}, {"sha": "eea40b8d95aa35bd877568cc46292ddf1a3c5812", "filename": "libjava/gnu/java/security/der/DEREncodingException.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,53 @@\n+/* DEREncodingException.java --- DER Encoding Exception\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.der;\n+\n+public class DEREncodingException extends Exception\n+{\n+\n+  public DEREncodingException()\n+  {\n+    super ();\n+  }\n+  \n+  public DEREncodingException (String msg)\n+  {\n+    super (msg);\n+  }\n+}"}, {"sha": "0f6e492a5f5302d65bccf738dd33aded53a5973b", "filename": "libjava/gnu/java/security/provider/DERReader.java", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERReader.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,152 @@\n+/* DERReader.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import gnu.java.security.der.DEREncodingException;\n+\n+public class DERReader\n+{\n+  byte source[];\n+  int pos;\n+\n+  static final int UNIVERSAL = 1;\n+  static final int APPLICATION = 2;\n+  static final int CONTEXT_SPECIFIC = 3;\n+  static final int PRIVATE = 4;\n+\n+\n+  public DERReader()\n+  {\n+    source = null;\n+    pos = 0;\n+  }\n+\n+  public DERReader( byte source[] )\n+  {\n+    init( source );\n+  }\n+\n+  public void init( String source )\n+  {\n+    init( source.getBytes() );\n+  }\n+\n+  public void init( byte source[] )\n+  {\n+    this.source = source;\n+    pos = 0;\n+  }\n+\n+  public BigInteger getBigInteger() throws DEREncodingException\n+  {\n+    return new BigInteger( getPrimitive() );\n+  }\n+\n+  //Reads Primitive, definite-length method\n+  private byte[] getPrimitive() throws DEREncodingException\n+  {\n+    int tmp = pos;\n+\t\n+    //Read Identifier\n+    byte identifier = source[tmp++];\n+    if( (0x20 & identifier) != 0)\n+      throw new DEREncodingException();\n+    int type = translateLeadIdentifierByte(identifier);\n+    //System.out.println(\"Type: \" + type);\n+\n+    //get tag\n+    int tag = (0x1f & identifier);\n+    //if( tag == 0x1f)\n+    //\ttag = getIdentifier(tmp);\n+    //System.out.println(\"Tag: \" + tag);\n+\n+    //get length\n+    byte len = source[tmp]; //may be length of length parameter\n+    long length =  0x7f & len;\n+    int i;\n+    if( (0x80 & len) != 0 ) {\n+      //System.out.println(\"Extra Long Length\");\n+      len &= 0x7f;\n+      //System.out.println(\"Length of Length: \" + len);\n+      //get length here\n+      length = 0;\n+      for( i = 0; i < len; i++ ) {\n+\ttmp++;\n+\tlength <<= 8;\n+\tlength += (source[tmp] < 0 ) ? \n+\t  (256 + source[tmp]) : \n+\t  source[tmp];\n+\t//System.out.println(\"Length of Length: \" + length);\n+      }\n+      tmp++;\n+    } else\n+      tmp++;\n+\n+    /*System.out.println(\"Position: \" + tmp);\n+      System.out.println(\"Length: \" + length);\n+      for( i = 0; i < 10; i++)\n+      System.out.print(source[tmp + i] + \" \");\n+      System.out.println();*/\n+\n+    byte tmpb[] = new byte[ (int)length ];\n+    System.arraycopy( source, tmp, tmpb, 0, (int)length);\n+    pos = (int)(tmp + length);\n+    return tmpb;\t\n+  }\n+\n+  private int translateLeadIdentifierByte(byte b)\n+  {\n+    if( (0x3f & b ) == b)\n+      return UNIVERSAL;\n+    else if( (0x7f & b ) == b)\n+      return APPLICATION;\n+    else if( (0xbf & b ) == b)\n+      return CONTEXT_SPECIFIC;\n+    else \n+      return PRIVATE;\n+  }\n+\n+  private int getIdentifier(int tpos)\n+  {\n+    while( (0x80 & source[tpos]) != 0)\n+      tpos++;\n+    return tpos;\n+  }\n+}"}, {"sha": "4add1191e06a7a3265e2ca3ec7dbfbdb8968e8a7", "filename": "libjava/gnu/java/security/provider/DERWriter.java", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDERWriter.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,142 @@\n+/* DERWriter.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+\n+public class DERWriter\n+{\n+  static final int UNIVERSAL = 1;\n+  static final int APPLICATION = 2;\n+  static final int CONTEXT_SPECIFIC = 3;\n+  static final int PRIVATE = 4;\n+\n+  public DERWriter()\n+  {}\n+\n+  public byte[] writeBigInteger( BigInteger i)\n+  {\n+    return writePrimitive( 0x02, UNIVERSAL, (int)Math.ceil((double)i.bitLength() / 8), i.toByteArray() );\n+  }\n+\n+  private byte[] writePrimitive( int identifier, int identifierencoding,\n+\t\t\t\t int length, byte contents[])\n+  {\n+    return joinarrays( generateIdentifier( identifier, identifierencoding ), generateLength( length ), contents);\n+  }\n+\n+  public byte[] joinarrays( byte a[], byte b[])\n+  {\n+    byte d[] = new byte[ a.length + b.length];\n+    System.arraycopy( a, 0, d, 0, a.length);\n+    System.arraycopy( b, 0, d, a.length, b.length);\n+    return d;\n+  }\n+\n+  public byte[] joinarrays( byte a[], byte b[], byte c[])\n+  {\n+    byte d[] = new byte[ a.length + b.length + c.length];\n+    System.arraycopy( a, 0, d, 0, a.length);\n+    System.arraycopy( b, 0, d, a.length, b.length);\n+    System.arraycopy( c, 0, d, a.length + b.length, c.length);\n+    return d;\n+  }\n+\n+  private byte[] generateIdentifier(int identifier, \n+\t\t\t\t    int identifierencoding)\n+  {\n+    byte b[];\n+    if( identifier > 31 ) {\n+      int count = (int)(Math.log( identifier ) / Math.log( 256 ));\n+      b = new byte[ count + 1 ];\n+      b[0] = (byte)(translateLeadIdentifierByte(identifierencoding) \n+\t\t    | 0x1f);\n+      int i;\n+      for( i = 1; i < (count + 1); i++) {\n+\tb[i] = (byte)(0x7f & ( identifier >> (7 * (count - i)) ));\n+\tb[i] |= 0x80;\n+      }\n+      b[i - 1] ^= 0x80;\n+      //System.out.println(\"Identifier1: \" + b[0]);\n+      return b;\n+    } else {\n+      b = new byte[1];\n+      b[0] = (byte)((translateLeadIdentifierByte(identifierencoding)\n+\t\t     | (byte)( identifier & 0x1f )) & 0xdf);\n+      //System.out.println(\"Identifier2: \" + b[0]);\n+      return b;\n+    }\n+  }\n+\n+  private byte translateLeadIdentifierByte(int b)\n+  {\n+    if( b == UNIVERSAL)\n+      return (byte)0x3f;\n+    else if( b == APPLICATION)\n+      return (byte)0x7f;\n+    else if( b == CONTEXT_SPECIFIC)\n+      return (byte)0xbf;\n+    else \n+      return (byte)0xC0;\n+  }\n+\n+  private byte[] generateLength( int length )\n+  {\n+    byte b[];\n+    if( length > 127 ) {\n+      int count = (int)Math.ceil(Math.log( length ) / Math.log( 256 ));\n+      //System.out.println(\"Length byte count: \" + count);\n+      b = new byte[ count + 1 ];\n+      b[0] = (byte)((count & 0x7f) | 0x80);\n+      for( int i = 1; i < (count + 1); i++) {\n+\tb[i] = (byte)( length >>> (8 * ( count - i) ));\n+\t//System.out.println(\"Length1 byte1: \" + (length >>> (8 * ( count - i) )));\n+\t//System.out.println(\"Length1 byte2: \" + b[i]);\n+      }\n+\n+      //System.out.println(\"Length1: \" + length);\n+      return b;\n+    } else {\n+      b = new byte[1];\n+      b[0] = (byte)( length & 0x7f );\n+      //System.out.println(\"Length2: \" + length);\n+      return b;\n+    }\n+  }\n+}"}, {"sha": "72f7b0eeddbc0d490c77c109bbbed10032bbb1d3", "filename": "libjava/gnu/java/security/provider/DSAKeyPairGenerator.java", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAKeyPairGenerator.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,173 @@\n+/* GnuDSAKeyPairGenerator.java --- Gnu DSA Key Pair Generator\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import java.security.AlgorithmParameters;\n+import java.security.AlgorithmParameterGenerator;\n+import java.security.KeyPairGeneratorSpi;\n+import java.security.KeyPair;\n+import java.security.SecureRandom;\n+import java.security.InvalidParameterException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.interfaces.DSAParams;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.DSAParameterSpec;\n+import java.util.Random;\n+\n+import gnu.java.security.util.Prime;\n+\n+public class DSAKeyPairGenerator extends KeyPairGeneratorSpi \n+\timplements java.security.interfaces.DSAKeyPairGenerator\n+{\n+int keysize;\n+SecureRandom random;\n+private BigInteger q = null; // the small prime\n+private BigInteger p = null; // the big prime\n+private BigInteger g = null;\n+\n+DSAKeyPairGenerator()\n+{\n+\tkeysize = 1024;\n+}\n+\n+public void initialize(int keysize, SecureRandom random)\n+{\n+\t//if( ((keysize % 64) != 0) || (keysize < 512) || (keysize > 1024) )\n+        //        throw new InvalidAlgorithmParameterException(\"Invalid key size\");\n+\n+\tthis.keysize = keysize;\n+\tthis.random = random;\n+}\n+\n+public void initialize(AlgorithmParameterSpec params,\n+                       SecureRandom random)\n+                throws InvalidAlgorithmParameterException\n+{\n+\tif( !( params instanceof DSAParameterSpec ) )\n+\t\tthrow new InvalidAlgorithmParameterException(\"Must be DSAParameterSpec\");\n+\n+\tDSAParameterSpec dsaparameterspec = (DSAParameterSpec)params;\n+\tp = dsaparameterspec.getP();\n+\tq = dsaparameterspec.getQ();\n+\tg = dsaparameterspec.getG();\n+\tthis.random = random;\n+}\n+\n+public void initialize(DSAParams params, SecureRandom random) \n+\tthrows InvalidParameterException\n+{\n+\tif(params.getP() != null) \n+\t\tp = params.getP();\n+\telse\n+\t\tthrow new InvalidParameterException();\n+\n+\tif(params.getQ() != null) \n+\t\tq = params.getQ();\n+\telse\n+\t\tthrow new InvalidParameterException();\n+\t\n+\tif(params.getG() != null) \n+\t\tg = params.getG();\n+\telse\n+\t\tthrow new InvalidParameterException();\n+\t\n+\tthis.random = random;\n+}\n+\n+public void initialize(int modlen, boolean genParams, SecureRandom random) \n+\tthrows InvalidParameterException\n+{\n+\tif( ((modlen % 64) != 0) || (modlen < 512) || (modlen > 1024) )\n+                throw new InvalidParameterException();\n+\n+\tif( (genParams == false) && (modlen != 512) && (modlen != 768) && (modlen != 1024)  )\n+\t\tthrow new InvalidParameterException();\n+\tthis.keysize = modlen;\n+\tthis.random = random;\n+\tp = null;\n+\tq = null;\n+\tg = null;\n+}\n+\n+public KeyPair generateKeyPair()\n+{\n+\tif( getDefaults() == false) {\n+\t\ttry {\n+\t\t\tAlgorithmParameterGenerator apgDSA = AlgorithmParameterGenerator.getInstance(\"DSA\");\n+\t\t\tAlgorithmParameters apDSA = apgDSA.generateParameters();\n+\t\t\tDSAParameterSpec dsaparameterspec = (DSAParameterSpec)apDSA.getParameterSpec( DSAParameterSpec.class );\n+\t\t\tp = dsaparameterspec.getP();\n+\t\t\tq = dsaparameterspec.getQ();\n+\t\t\tg = dsaparameterspec.getG();\n+\t\t} catch ( Exception e ) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tBigInteger x = new BigInteger( 159, new Random() );\n+\n+\tBigInteger y = g.modPow( x, p );\n+\n+\treturn new KeyPair( new GnuDSAPublicKey(y,p,q,g), new GnuDSAPrivateKey(x,p,q,g));\n+\t//return new KeyPair( public, private );\n+}\n+\n+//These constants are Sun's Constants copied from the \n+//Cryptography Specification\n+private boolean getDefaults()\n+{\n+\tif( keysize == 512) {\n+\t\tp = new BigInteger(\"fca682ce8e12caba26efccf7110e526db078b05edecbcd1eb4a208f3ae1617ae01f35b91a47e6df63413c5e12ed0899bcd132acd50d99151bdc43ee737592e17\", 16);\n+\t\tq = new BigInteger(\"962eddcc369cba8ebb260ee6b6a126d9346e38c5\", 16);\n+\t\tg = new BigInteger(\"678471b27a9cf44ee91a49c5147db1a9aaf244f05a434d6486931d2d14271b9e35030b71fd73da179069b32e2935630e1c2062354d0da20a6c416e50be794ca4\", 16);\n+\t\treturn true;\n+\t} else if( keysize == 768) {\n+\t\tp = new BigInteger(\"e9e642599d355f37c97ffd3567120b8e25c9cd43e927b3a9670fbec5d890141922d2c3b3ad2480093799869d1e846aab49fab0ad26d2ce6a22219d470bce7d777d4a21fbe9c270b57f607002f3cef8393694cf45ee3688c11a8c56ab127a3daf\", 16);\n+\t\tq = new BigInteger(\"9cdbd84c9f1ac2f38d0f80f42ab952e7338bf511\", 16);\n+\t\tg = new BigInteger(\"30470ad5a005fb14ce2d9dcd87e38bc7d1b1c5facbaecbe95f190aa7a31d23c4dbbcbe06174544401a5b2c020965d8c2bd2171d3668445771f74ba084d2029d83c1c158547f3a9f1a2715be23d51ae4d3e5a1f6a7064f316933a346d3f529252\", 16);\n+\t} else if( keysize == 512) {\n+\t\tp = new BigInteger(\"fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c7\", 16);\n+\t\tq = new BigInteger(\"9760508f15230bccb292b982a2eb840bf0581cf5\", 16);\n+\t\tg = new BigInteger(\"f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a\", 16);\n+\t}\n+\treturn false;\n+}\n+\n+}"}, {"sha": "f481f294dda04fe32dad9ba3fe28595b0ae7ca8f", "filename": "libjava/gnu/java/security/provider/DSAParameterGenerator.java", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameterGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameterGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameterGenerator.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,128 @@\n+/* DSAParameterGenerator.java --- DSA Parameter Generator Implementation\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import java.security.AlgorithmParameters;\n+import java.security.AlgorithmParameterGeneratorSpi;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.DSAParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.util.Random;\n+\n+import gnu.java.security.util.Prime;\n+\n+public class DSAParameterGenerator extends AlgorithmParameterGeneratorSpi\n+{\n+  private int size;\n+  private SecureRandom random = null;\n+\n+  public DSAParameterGenerator()\n+  {\n+    size = 1024;\n+  }\n+\n+  public void engineInit(int size, SecureRandom random)\n+  {\n+    if( (size < 512) || (size > 1024) || ( (size % 64) != 0) )\n+      //throw new InvalidAlgorithmParameterException(\"Invalid Size\");\n+      return;\n+    this.size = size;\n+    this.random = random;\n+  }\n+\n+  public void engineInit(AlgorithmParameterSpec genParamSpec, SecureRandom random)\n+    throws InvalidAlgorithmParameterException\n+  {\n+    if( !( genParamSpec instanceof DSAParameterSpec ) )\n+      throw new InvalidAlgorithmParameterException(\"Must be DSAParameterSpec\");\n+\n+    DSAParameterSpec dsaparameterspec = (DSAParameterSpec)genParamSpec;\n+    int tmp = dsaparameterspec.getP().bitLength();\n+\n+    if( (tmp < 512) || (tmp > 1024) || ( (tmp % 64) != 0) )\n+      throw new InvalidAlgorithmParameterException(\"Invalid Size\");\n+\n+    this.random = random;\n+  }\n+\n+  //For more information see IEEE P1363 A.16.1 (10/05/98 Draft)\n+  public AlgorithmParameters engineGenerateParameters()\n+  {\n+    DSAParameterSpec dsaparameterspec;\n+\n+    int L = size;\n+    BigInteger r, p, k, h, g;\n+\n+    //q 2^159 < q < 2^160\n+    r = Prime.generateRandomPrime( 159, 160, BigInteger.valueOf(1));\n+\n+    // 2^(L-1) < p < 2^L\n+    p = Prime.generateRandomPrime( r, BigInteger.valueOf(1), L - 1, L, BigInteger.valueOf(1));\n+\n+    k = p.subtract( BigInteger.valueOf(1) );\n+    k = k.divide( r );\n+\n+    Random rand = new Random();\n+    h = BigInteger.valueOf(1);\n+\n+    for(;;) {\n+      h = h.add(BigInteger.valueOf( 1 ) );\n+\n+      g = h.modPow(k, p);\n+\n+      if( g.compareTo( BigInteger.valueOf(1) ) != 1 )\n+\tbreak;\n+    }\n+\n+    try {\n+      dsaparameterspec = new DSAParameterSpec(p, r, g);\n+      AlgorithmParameters ap = AlgorithmParameters.getInstance(\"DSA\");\n+      ap.init( dsaparameterspec );\n+      return ap;\n+    } catch ( NoSuchAlgorithmException nsae ) {\n+      return null;\n+    } catch ( InvalidParameterSpecException ipse) {\n+      return null;\n+    }\n+  }\n+}"}, {"sha": "a8f998b2cf068bf57fa040062c304ab866d81638", "filename": "libjava/gnu/java/security/provider/DSAParameters.java", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameters.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameters.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSAParameters.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,141 @@\n+/* DSAParameters.java --- DSA Parameters Implementation\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.DSAParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.util.Random;\n+import gnu.java.security.der.DEREncodingException;\n+\n+import gnu.java.security.util.Prime;\n+\n+/*\n+\tASN.1 Encoding for DSA from rfc2459 \n+\n+        id-dsa ID ::= { iso(1) member-body(2) us(840) x9-57(10040)\n+                  x9cm(4) 1 }\n+\n+        Dss-Parms  ::=  SEQUENCE  {\n+            p             INTEGER,\n+            q             INTEGER,\n+            g             INTEGER  }\n+\n+*/\n+public class DSAParameters extends AlgorithmParametersSpi\n+{\n+private BigInteger q; // the small prime\n+private BigInteger p; // the big prime\n+private BigInteger g;\n+\n+\n+public void engineInit(AlgorithmParameterSpec paramSpec)\n+                            throws InvalidParameterSpecException\n+{\n+\tif( paramSpec instanceof DSAParameterSpec ) {\n+\t\tDSAParameterSpec dsaParamSpec = (DSAParameterSpec)paramSpec;\n+\t\tp = dsaParamSpec.getP();\n+\t\tq = dsaParamSpec.getQ();\n+\t\tq = dsaParamSpec.getG();\n+\t}\n+\telse\n+\t\tthrow new InvalidParameterSpecException(\"Only accepts DSAParameterSpec\");\n+}\n+\n+public void engineInit(byte[] params)\n+                            throws IOException\n+{\n+\tDERReader reader = new DERReader( params );\n+\ttry {\n+\n+\t\tp = reader.getBigInteger();\n+\t\tq = reader.getBigInteger();\n+\t\tg = reader.getBigInteger();\n+\n+\t} catch ( DEREncodingException DERee) {\n+\t\tthrow new IOException(\"Invalid Format: Only accepts ASN.1\");\n+\t}\n+}\n+\n+public void engineInit(byte[] params, String format)\n+                            throws IOException\n+{\n+\tif( !format.equals(\"ASN.1\") )\n+\t\tthrow new IOException(\"Invalid Format: Only accepts ASN.1\");\n+\tengineInit( params );\t\n+}\n+\n+public AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec)\n+                          throws InvalidParameterSpecException\n+{\n+\tif( paramSpec.isAssignableFrom(DSAParameterSpec.class) )\n+\t\treturn new DSAParameterSpec(p, q, g);\n+\telse\n+\t\tthrow new InvalidParameterSpecException(\"Only accepts DSAParameterSpec\");\n+}\n+\n+public byte[] engineGetEncoded()\n+                                    throws IOException\n+{\n+\tDERWriter writer = new DERWriter();\n+\treturn writer.joinarrays( writer.writeBigInteger(p), \n+\t\t\t\twriter.writeBigInteger(q), \n+\t\t\t\twriter.writeBigInteger(g) );\n+}\n+\n+\n+public byte[] engineGetEncoded(String format)\n+                                    throws IOException\n+{\n+\tif( !format.equals(\"ASN.1\") )\n+\t\tthrow new IOException(\"Invalid Format: Only accepts ASN.1\");\n+\treturn engineGetEncoded();\n+}\n+\n+public String engineToString()\n+{\n+\tString lineSeparator = System.getProperty(\"line.seperator\");\n+\treturn (\"q: \" + q + lineSeparator + \"p: \" + p + lineSeparator + \"g:\" + g);\n+}\n+\n+}"}, {"sha": "f33f048aebd58417069d48cac05542df5ed913da", "filename": "libjava/gnu/java/security/provider/DSASignature.java", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSASignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSASignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDSASignature.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,247 @@\n+/* DSASignature.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.InvalidParameterException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import java.security.SignatureException;\n+import java.security.SignatureSpi;\n+import java.security.interfaces.DSAPrivateKey;\n+import java.security.interfaces.DSAPublicKey;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Random;\n+import gnu.java.security.der.DEREncodingException;\n+\n+public class DSASignature extends SignatureSpi\n+{\n+  private DSAPublicKey publicKey;\n+  private DSAPrivateKey privateKey;\n+  private MessageDigest digest = null;\n+\n+  public DSASignature()\n+  {}\n+\n+  private void init()\n+  {\n+    if( digest == null ) {\n+      try {\n+\tdigest = MessageDigest.getInstance( \"SHA1\", \"GNU\" );\n+      } catch ( NoSuchAlgorithmException nsae ) {\n+\tdigest = null;\n+      } catch ( NoSuchProviderException nspe ) {\n+\tdigest = null;\n+      }\n+    }\n+    digest.reset();\n+  }\n+\n+  public void engineInitVerify(PublicKey publicKey)\n+    throws InvalidKeyException\n+  {\n+    if( publicKey instanceof DSAPublicKey )\n+      this.publicKey = (DSAPublicKey)publicKey;\n+    else\n+      throw new InvalidKeyException();\n+    init();\n+  }\n+\n+  public void engineInitSign(PrivateKey privateKey)\n+    throws InvalidKeyException\n+  {\n+    if( privateKey instanceof DSAPrivateKey )\n+      this.privateKey = (DSAPrivateKey)privateKey;\n+    else\n+      throw new InvalidKeyException();\n+\n+    init();\n+  }\n+\n+  public void engineInitSign(PrivateKey privateKey, \n+\t\t\t     SecureRandom random)\n+    throws InvalidKeyException\n+  {\n+    if( privateKey instanceof DSAPrivateKey )\n+      this.privateKey = (DSAPrivateKey)privateKey;\n+    else\n+      throw new InvalidKeyException();\n+\n+    appRandom = random;\n+    init();\n+  }\n+\n+  public void engineUpdate(byte b)\n+    throws SignatureException\n+  {\n+    if( digest == null )\n+      throw new SignatureException();\t\t\n+\n+    digest.update( b );\n+  }\n+\n+  public void engineUpdate(byte[] b, int off, int len)\n+    throws SignatureException\n+  {\n+    if( digest == null )\n+      throw new SignatureException();\t\t\n+\n+    digest.update( b, off, len );\n+  }\n+\n+  public byte[] engineSign()\n+    throws SignatureException\n+  {\n+    if( digest == null )\n+      throw new SignatureException();\t\t\n+    if( privateKey == null)\n+      throw new SignatureException();\t\t\n+\n+    try {\n+\n+      BigInteger g = privateKey.getParams().getG();\n+      BigInteger p = privateKey.getParams().getP();\n+      BigInteger q = privateKey.getParams().getQ();\n+\n+      BigInteger x = privateKey.getX();\n+\n+      BigInteger k = new BigInteger( 159, (Random)appRandom );\n+\n+      BigInteger r = g.modPow(k, p);\n+      r = r.mod(q);\n+\n+      byte bytes[] = digest.digest();\n+      BigInteger sha = new BigInteger(1, bytes);\n+\n+      BigInteger s = sha.add( x.multiply( r ) );\n+      s = s.multiply( k.modInverse(q) ).mod( q );\n+\n+      DERWriter writer = new DERWriter();\n+      return writer.joinarrays( writer.writeBigInteger( r ),  writer.writeBigInteger( s ) );\n+\n+    } catch ( ArithmeticException ae ) {\n+      throw new SignatureException();\n+    }\n+  }\n+\n+  public int engineSign(byte[] outbuf, int offset, int len)\n+    throws SignatureException\n+  {\n+    byte tmp[] = engineSign();\n+    if( tmp.length > len )\n+      throw new SignatureException();\n+    System.arraycopy( tmp, 0, outbuf, offset, tmp.length );\n+    return tmp.length;\n+  }\n+\n+  public boolean engineVerify(byte[] sigBytes)\n+    throws SignatureException\n+  {\n+    //Decode sigBytes from ASN.1 DER encoding\n+    try {\n+      DERReader reader = new DERReader( sigBytes );\n+      BigInteger r = reader.getBigInteger();\n+      BigInteger s = reader.getBigInteger();\n+\n+      BigInteger g = publicKey.getParams().getG();\n+      BigInteger p = publicKey.getParams().getP();\n+      BigInteger q = publicKey.getParams().getQ();\n+\n+      BigInteger y = publicKey.getY();\n+\n+      BigInteger w = s.modInverse( q );\n+\n+      byte bytes[] = digest.digest();\n+      BigInteger sha = new BigInteger(1, bytes);\n+\n+      BigInteger u1 = w.multiply( sha ).mod( q );\n+\n+      BigInteger u2 = r.multiply( w ).mod( q );\n+\n+      //This should test the compiler :)\n+      BigInteger v = g.modPow( u1, p ).multiply( y.modPow( u2, p ) ).mod( p ).mod( q );\n+\n+      if( v.equals( r ) )\n+\treturn true;\n+      else\n+\treturn false;\n+    } catch ( DEREncodingException deree ) {\n+      throw new SignatureException();\n+    }\n+  }\n+\n+  public void engineSetParameter(String param,\n+\t\t\t\t Object value)\n+    throws InvalidParameterException\n+  {\n+    throw new InvalidParameterException();\n+  }\n+\n+  public void engineSetParameter(AlgorithmParameterSpec params)\n+    throws InvalidAlgorithmParameterException\n+  {\n+    throw new InvalidParameterException();\n+\n+  }\n+\n+  public Object engineGetParameter(String param)\n+    throws InvalidParameterException\n+  {\n+    throw new InvalidParameterException();\n+  }\n+\n+  public Object clone()\n+    //throws CloneNotSupportedException\n+  {\n+    return new DSASignature( this );\n+  }\n+\n+  private DSASignature( DSASignature copy )\n+  {\n+    this();\n+    this.publicKey = copy.publicKey;\n+    this.privateKey = copy.privateKey;\n+    this.digest = copy.digest;\n+  }\n+}"}, {"sha": "f3385fa04fb85003318e2d814edaaf2872f8c664", "filename": "libjava/gnu/java/security/provider/DefaultPolicy.java", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -1,5 +1,5 @@\n /* DefaultPolicy.java \n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -47,16 +47,13 @@\n   */\n public class DefaultPolicy extends Policy\n {\n-  static Permissions allPermissions = new Permissions();\n-  \n-  static\n-  {\n-    allPermissions.add(new AllPermission());\n-  }\n+  static Permission allPermission = new AllPermission();\n \n   public PermissionCollection getPermissions(CodeSource codesource)\n   {\n-    return allPermissions;\n+    Permissions perms = new Permissions();\n+    perms.add(allPermission);\n+    return perms;\n   }\n   \n   public void refresh()"}, {"sha": "45446c713bf95082e54e40bb08a4aed3427f5242", "filename": "libjava/gnu/java/security/provider/GnuDSAPrivateKey.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPrivateKey.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,85 @@\n+/* GnuDSAPrivateKey.java --- Gnu DSA Private Key\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import java.security.interfaces.DSAPrivateKey;\n+import java.security.interfaces.DSAParams;\n+import java.security.spec.DSAParameterSpec;\n+\n+public class GnuDSAPrivateKey implements DSAPrivateKey\n+{\n+  BigInteger x;\n+  BigInteger p;\n+  BigInteger q;\n+  BigInteger g;\n+\n+  public GnuDSAPrivateKey(BigInteger x, BigInteger p, BigInteger q, BigInteger g ) \n+  {\n+    this.x = x;\n+    this.p = p;\n+    this.q = q;\n+    this.g = g;\n+  }\n+\n+  public String getAlgorithm()\n+  {\n+    return \"DSA\";\n+  }\n+\n+  public String getFormat()\n+  {\n+    return null;\n+  }\n+\n+  public byte[] getEncoded()\n+  {\n+    return null;\n+  }\n+\n+  public DSAParams getParams()\n+  {\n+    return (DSAParams)(new DSAParameterSpec(p,q,g));\n+  }\n+\n+  public BigInteger getX()\n+  {\n+    return x;\n+  }\n+}"}, {"sha": "2f23abbcc5f73a593bd9bdcb46fa785d6a28af16", "filename": "libjava/gnu/java/security/provider/GnuDSAPublicKey.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FGnuDSAPublicKey.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,85 @@\n+/* GnuDSAPublicKey.java --- Gnu DSA Public Key\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+\n+import java.math.BigInteger;\n+import java.security.interfaces.DSAPublicKey;\n+import java.security.interfaces.DSAParams;\n+import java.security.spec.DSAParameterSpec;\n+\n+public class GnuDSAPublicKey implements DSAPublicKey\n+{\n+  BigInteger y;\n+  BigInteger p;\n+  BigInteger q;\n+  BigInteger g;\n+\n+  public GnuDSAPublicKey(BigInteger y, BigInteger p, BigInteger q, BigInteger g ) \n+  {\n+    this.y = y;\n+    this.p = p;\n+    this.q = q;\n+    this.g = g;\n+  }\n+\n+  public String getAlgorithm()\n+  {\n+    return \"DSA\";\n+  }\n+\n+  public String getFormat()\n+  {\n+    return null;\n+  }\n+\n+  public byte[] getEncoded()\n+  {\n+    return null;\n+  }\n+\n+  public DSAParams getParams()\n+  {\n+    return (DSAParams)(new DSAParameterSpec(p,q,g));\n+  }\n+\n+  public BigInteger getY()\n+  {\n+    return y;\n+  }\n+}"}, {"sha": "9f7f601611e25c400f453c5c7f6eb039e4f9144e", "filename": "libjava/gnu/java/security/provider/MD5.java", "status": "added", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FMD5.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FMD5.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FMD5.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,338 @@\n+/* MD5.java -- Class implementing the MD5 algorithm as specified in RFC1321.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.provider;\n+import java.security.MessageDigestSpi;\n+\n+/**\n+   This class implements the MD5 algorithm as described in RFC1321.\n+\n+   @see java.security.MessageDigest\n+*/\n+public class MD5 extends MessageDigestSpi implements Cloneable\n+{\n+  private final int W[] = new int[16];\n+  private long bytecount;\n+  private int A;\n+  private int B;\n+  private int C;\n+  private int D;\n+\n+  public MD5()\n+  {\n+    super();\n+    engineReset ();\n+  }\n+\n+  public Object clone()\n+  {\n+    return new MD5 (this);\n+  }\n+\n+  private MD5 (MD5 copy)\n+  {\n+    this ();\n+    bytecount = copy.bytecount;\n+    A = copy.A;\n+    B = copy.B;\n+    C = copy.C;\n+    D = copy.D;\n+    System.arraycopy (copy.W, 0, W, 0, 16);\n+  }\n+\n+  public int engineGetDigestLength()\n+  {\n+    return 20;\n+  }\n+\n+  // Intialize the A,B,C,D needed for the hash\n+  public void engineReset()\n+  {\n+    bytecount = 0;\n+    A = 0x67452301;\n+    B = 0xefcdab89;\n+    C = 0x98badcfe;\n+    D = 0x10325476;\n+    for(int i = 0; i < 16; i++)\n+      W[i] = 0;\n+  }\n+\n+  public void engineUpdate (byte b)\n+  {\n+    int i = (int)bytecount % 64;\n+    int shift = (3 - i % 4) * 8;\n+    int idx = i / 4;\n+\n+    // if you could index ints, this would be: W[idx][shift/8] = b\n+    W[idx] = (W[idx] & ~(0xff << shift)) | ((b & 0xff) << shift);\n+\n+    // if we've filled up a block, then process it\n+    if ((++ bytecount) % 64 == 0)\n+      munch ();\n+  }\n+\n+  public void engineUpdate (byte bytes[], int off, int len)\n+  {\n+    if (len < 0)\n+      throw new ArrayIndexOutOfBoundsException ();\n+\n+    int end = off + len;\n+    while (off < end)\n+      engineUpdate (bytes[off++]);\n+  }\n+\n+  public byte[] engineDigest()\n+  {\n+    long bitcount = bytecount * 8;\n+    engineUpdate ((byte)0x80); // 10000000 in binary; the start of the padding\n+\n+    // add the rest of the padding to fill this block out, but leave 8\n+    // bytes to put in the original bytecount\n+    while ((int)bytecount % 64 != 56)\n+      engineUpdate ((byte)0);\n+\n+    // add the length of the original, unpadded block to the end of\n+    // the padding\n+    W[14] = SWAP((int)(0xffffffff & bitcount));\n+    W[15] = SWAP((int)(0xffffffff & (bitcount >>> 32)));\n+    bytecount += 8;\n+\n+    // digest the fully padded block\n+    munch ();\n+\n+    A = SWAP(A);\n+    B = SWAP(B);\n+    C = SWAP(C);\n+    D = SWAP(D);\n+    byte[] result = new byte[] {(byte)(A >>> 24), (byte)(A >>> 16),\n+\t\t\t\t(byte)(A >>> 8), (byte)A,\n+\t\t\t\t(byte)(B >>> 24), (byte)(B >>> 16),\n+\t\t\t\t(byte)(B >>> 8), (byte)B,\n+\t\t\t\t(byte)(C >>> 24), (byte)(C >>> 16),\n+\t\t\t\t(byte)(C >>> 8), (byte)C,\n+\t\t\t\t(byte)(D >>> 24), (byte)(D >>> 16),\n+\t\t\t\t(byte)(D >>> 8), (byte)D};\n+    \n+    engineReset ();\n+    return result;\n+  }\n+\n+  private int F( int X, int Y, int Z)\n+  {\n+    return ((X & Y) | (~X & Z));\n+  }\n+\n+  private int G( int X, int Y, int Z)\n+  {\n+    return ((X & Z) | (Y & ~Z));\n+  }\n+\n+  private int H( int X, int Y, int Z)\n+  {\n+    return (X ^ Y ^ Z);\n+  }\n+\n+  private int I( int X, int Y, int Z)\n+  {\n+    return (Y ^ (X | ~Z));\n+  }\n+\n+  private int rotateLeft( int i, int count)\n+  {\n+    //Taken from FIPS 180-1\n+    return ( (i << count) | (i >>> (32 - count)) ) ;\n+  }\n+\n+  /* Round 1. */\n+  private int FF( int a, int b, int c, int d, int k, int s, int i)\n+  {\n+    /* Let [abcd k s i] denote the operation */\n+    a += F(b,c,d) + k + i;\n+    return b + rotateLeft(a, s); \n+  } \n+  /* Round 2. */\n+  private int GG( int a, int b, int c, int d, int k, int s, int i)\n+  {\n+    /* Let [abcd k s i] denote the operation */\n+    a += G(b,c,d) + k + i;\n+    return b + rotateLeft(a, s);\n+  } \n+  /* Round 3. */\n+  private int HH( int a, int b, int c, int d, int k, int s, int i)\n+  {\n+    /* Let [abcd k s t] denote the operation */\n+    a += H(b,c,d) + k + i;\n+    return b + rotateLeft(a, s);\n+  } \n+\n+  /* Round 4. */\n+  private int II( int a, int b, int c, int d, int k, int s, int i)\n+  {\n+    /* Let [abcd k s t] denote the operation */\n+    a += I(b,c,d) + k + i;\n+    return b + rotateLeft(a, s);\n+  } \n+\n+  private int SWAP(int n)\n+  {\n+    //Copied from md5.c in FSF Gnu Privacy Guard 0.9.2\n+    return (( (0xff & n) << 24) | ((n & 0xff00) << 8) | ((n >>> 8) & 0xff00) | (n >>> 24));\n+  }\n+\n+  private void munch()\n+  {\n+    int AA,BB,CC,DD, j;\n+    int X[] = new int[16];\n+\n+    /* Copy block i into X. */\n+    for(j = 0; j < 16; j++)\n+      X[j] = SWAP(W[j]);\n+\n+    /* Save A as AA, B as BB, C as CC, and D as DD. */\n+    AA = A;\n+    BB = B;\n+    CC = C;\n+    DD = D;\n+\n+    /* The hex constants are from md5.c \n+       in FSF Gnu Privacy Guard 0.9.2 */\n+    /* Round 1. */\n+    /* Let [abcd k s i] denote the operation\n+       a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */\n+    /* Do the following 16 operations. */\n+    A = FF(A,B,C,D,  X[0],  7,  0xd76aa478);\n+    D = FF(D,A,B,C,  X[1], 12,  0xe8c7b756);\n+    C = FF(C,D,A,B,  X[2], 17,  0x242070db);\n+    B = FF(B,C,D,A,  X[3], 22,  0xc1bdceee);\n+\n+    A = FF(A,B,C,D,  X[4],  7,  0xf57c0faf);\n+    D = FF(D,A,B,C,  X[5], 12,  0x4787c62a);\n+    C = FF(C,D,A,B,  X[6], 17,  0xa8304613);\n+    B = FF(B,C,D,A,  X[7], 22,  0xfd469501);\n+\n+    A = FF(A,B,C,D,  X[8],  7,  0x698098d8);\n+    D = FF(D,A,B,C,  X[9], 12,  0x8b44f7af);\n+    C = FF(C,D,A,B, X[10], 17,  0xffff5bb1);\n+    B = FF(B,C,D,A, X[11], 22,  0x895cd7be);\n+\n+    A = FF(A,B,C,D, X[12],  7,  0x6b901122);\n+    D = FF(D,A,B,C, X[13], 12,  0xfd987193);\n+    C = FF(C,D,A,B, X[14], 17,  0xa679438e);\n+    B = FF(B,C,D,A, X[15], 22,  0x49b40821);\n+\n+    /* Round 2. */\n+    /* Let [abcd k s i] denote the operation\n+       a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */\n+    /* Do the following 16 operations. */\n+    A = GG(A,B,C,D,  X[1],  5, 0xf61e2562);\n+    D = GG(D,A,B,C,  X[6],  9, 0xc040b340);\n+    C = GG(C,D,A,B, X[11], 14, 0x265e5a51);\n+    B = GG(B,C,D,A,  X[0], 20, 0xe9b6c7aa);\n+\n+    A = GG(A,B,C,D,  X[5],  5, 0xd62f105d);\n+    D = GG(D,A,B,C, X[10],  9, 0x02441453);\n+    C = GG(C,D,A,B, X[15], 14, 0xd8a1e681);\n+    B = GG(B,C,D,A,  X[4], 20, 0xe7d3fbc8);\n+\n+    A = GG(A,B,C,D,  X[9],  5, 0x21e1cde6);\n+    D = GG(D,A,B,C, X[14],  9, 0xc33707d6);\n+    C = GG(C,D,A,B,  X[3], 14, 0xf4d50d87);\n+    B = GG(B,C,D,A,  X[8], 20, 0x455a14ed);\n+\n+    A = GG(A,B,C,D, X[13],  5, 0xa9e3e905);\n+    D = GG(D,A,B,C,  X[2],  9, 0xfcefa3f8);\n+    C = GG(C,D,A,B,  X[7], 14, 0x676f02d9);\n+    B = GG(B,C,D,A, X[12], 20, 0x8d2a4c8a);\n+\n+    /* Round 3. */\n+    /* Let [abcd k s t] denote the operation\n+       a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */\n+    /* Do the following 16 operations. */\n+    A = HH(A,B,C,D,  X[5],  4, 0xfffa3942);\n+    D = HH(D,A,B,C,  X[8], 11, 0x8771f681);\n+    C = HH(C,D,A,B, X[11], 16, 0x6d9d6122);\n+    B = HH(B,C,D,A, X[14], 23, 0xfde5380c);\n+\n+    A = HH(A,B,C,D,  X[1],  4, 0xa4beea44);\n+    D = HH(D,A,B,C,  X[4], 11, 0x4bdecfa9);\n+    C = HH(C,D,A,B,  X[7], 16, 0xf6bb4b60);\n+    B = HH(B,C,D,A, X[10], 23, 0xbebfbc70);\n+\n+    A = HH(A,B,C,D, X[13],  4, 0x289b7ec6);\n+    D = HH(D,A,B,C,  X[0], 11, 0xeaa127fa);\n+    C = HH(C,D,A,B,  X[3], 16, 0xd4ef3085);\n+    B = HH(B,C,D,A,  X[6], 23, 0x04881d05);\n+\n+    A = HH(A,B,C,D,  X[9],  4, 0xd9d4d039);\n+    D = HH(D,A,B,C, X[12], 11, 0xe6db99e5);\n+    C = HH(C,D,A,B, X[15], 16, 0x1fa27cf8);\n+    B = HH(B,C,D,A,  X[2], 23, 0xc4ac5665);\n+\n+    /* Round 4. */\n+    /* Let [abcd k s t] denote the operation\n+       a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */\n+    /* Do the following 16 operations. */\n+    A = II(A,B,C,D,  X[0],  6, 0xf4292244);\n+    D = II(D,A,B,C,  X[7], 10, 0x432aff97);\n+    C = II(C,D,A,B, X[14], 15, 0xab9423a7);\n+    B = II(B,C,D,A,  X[5], 21, 0xfc93a039);\n+\n+    A = II(A,B,C,D, X[12],  6, 0x655b59c3);\n+    D = II(D,A,B,C,  X[3], 10, 0x8f0ccc92);\n+    C = II(C,D,A,B, X[10], 15, 0xffeff47d);\n+    B = II(B,C,D,A,  X[1], 21, 0x85845dd1);\n+\n+    A = II(A,B,C,D,  X[8],  6, 0x6fa87e4f);\n+    D = II(D,A,B,C, X[15], 10, 0xfe2ce6e0);\n+    C = II(C,D,A,B,  X[6], 15, 0xa3014314);\n+    B = II(B,C,D,A, X[13], 21, 0x4e0811a1);\n+\n+    A = II(A,B,C,D,  X[4],  6, 0xf7537e82);\n+    D = II(D,A,B,C, X[11], 10, 0xbd3af235);\n+    C = II(C,D,A,B,  X[2], 15, 0x2ad7d2bb);\n+    B = II(B,C,D,A,  X[9], 21, 0xeb86d391);\n+\n+    /* Then perform the following additions. (That is increment each\n+       of the four registers by the value it had before this block\n+       was started.) */\n+    A = A + AA;\n+    B = B + BB;\n+    C = C + CC;\n+    D = D + DD;\n+  }\n+}"}, {"sha": "90459466a899f84b1129c3fa323a88788b53b8ec", "filename": "libjava/gnu/java/security/provider/SHA.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -63,15 +63,15 @@ public int engineGetDigestLength()\n \n   public void engineUpdate (byte b)\n   {\n-    int i = (int)bytecount % 64;\n-    int shift = (3 - i % 4) * 8;\n+    int i = ((int)bytecount) & 0x3f; //wgs\n+    int shift = (3 - i % 4) << 3;\n     int idx = i / 4;\n \n-    // if you could index ints, this would be: W[idx][shift/8] = b\n-    W[idx] = (W[idx] & ~(0xff << shift)) | ((b & 0xff) << shift);\n+    i = (int)b;\n+    W[idx] = (W[idx] & ~(0xff << shift)) | ((i & 0xff) << shift);\n \n     // if we've filled up a block, then process it\n-    if ((++ bytecount) % 64 == 0)\n+    if (((++bytecount) & 0x3f) == 0)\n       munch ();\n   }\n \n@@ -99,12 +99,12 @@ public void engineReset ()\n \n   public byte[] engineDigest ()\n   {\n-    long bitcount = bytecount * 8;\n+    long bitcount = bytecount << 3;\n     engineUpdate ((byte)0x80); // 10000000 in binary; the start of the padding\n \n     // add the rest of the padding to fill this block out, but leave 8\n     // bytes to put in the original bytecount\n-    while ((int)bytecount % 64 != 56)\n+    while ((bytecount & 0x3f) != 56)\n       engineUpdate ((byte)0);\n \n     // add the length of the original, unpadded block to the end of"}, {"sha": "06d059e1eebc11032a79ffbba2dc3b04d470e42a", "filename": "libjava/gnu/java/security/util/Prime.java", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df815141ef37cf0d1d6cdbc6cfd2812d14272f1b/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java?ref=df815141ef37cf0d1d6cdbc6cfd2812d14272f1b", "patch": "@@ -0,0 +1,164 @@\n+/* Prime.java --- Prime number generation utilities\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.util;\n+import java.math.BigInteger;\n+import java.util.Random;\n+//import java.security.SecureRandom;\n+\n+public final class Prime\n+{\n+\n+  /*\n+    See IEEE P1363 A.15.4 (10/05/98 Draft)\n+  */\n+  public static BigInteger generateRandomPrime( int pmin, int pmax, BigInteger f )\n+  {\n+    BigInteger d;\n+\n+    //Step 1 - generate prime\n+    BigInteger p = new BigInteger( (pmax + pmin)/2, new Random() );\n+    if( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmin ) ) <= 0 )\n+      {\n+\tp.add( BigInteger.valueOf( 1 ).shiftLeft( pmin ).subtract( p ) );\n+      }\n+\t\n+    //Step 2 - test for even\n+    if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+      p.add( BigInteger.valueOf( 1 ) );\n+\n+    for(;;)\n+      {\n+\t//Step 3\n+\tif( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmax)) > 0)\n+\t  {\n+\t    //Step 3.1\n+\t    p = p.subtract( BigInteger.valueOf( 1 ).shiftLeft( pmax) );\n+\t    p = p.add( BigInteger.valueOf( 1 ).shiftLeft( pmin) );\n+\t    p = p.subtract( BigInteger.valueOf( 1 ) );\n+\n+\t    //Step 3.2\n+\t    // put step 2 code here so looping code is cleaner\n+\t    //Step 2 - test for even\n+\t    if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+\t      p.add( BigInteger.valueOf( 1 ) );\n+\t    continue;\n+\t  }\n+\t\n+\t//Step 4 - compute GCD\n+\td = p.subtract( BigInteger.valueOf(1) );\n+\td = d.gcd( f );\n+\n+\t//Step 5 - test d\n+\tif( d.compareTo( BigInteger.valueOf( 1 ) ) == 0)\n+\t  {\n+\t    //Step 5.1 - test primality\n+\t    if( p.isProbablePrime( 1 ) == true )\n+\t      {\n+\t\t\t\t//Step 5.2;\n+\t\treturn p;\n+\t      }\n+\t  }\n+\t//Step 6\n+\tp = p.add( BigInteger.valueOf( 2 ) );\n+\n+\t//Step 7\n+      }\n+  }\n+\n+\n+  /*\n+    See IEEE P1363 A.15.5 (10/05/98 Draft)\n+  */\n+  public static BigInteger generateRandomPrime( BigInteger r, BigInteger a, int pmin, int pmax, BigInteger f )\n+  {\n+    BigInteger d, w;\n+\n+    //Step 1 - generate prime\n+    BigInteger p = new BigInteger( (pmax + pmin)/2, new Random() );\n+\n+  steptwo:{ //Step 2\n+      w = p.mod( r.multiply( BigInteger.valueOf(2) ));\n+\n+      //Step 3\n+      p = p.add( r.multiply( BigInteger.valueOf(2) ) );\n+      p = p.subtract( w );\n+      p = p.add(a);\n+\n+      //Step 4 - test for even\n+      if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+\tp.add( r );\n+\n+      for(;;)\n+\t{\n+\t  //Step 5\n+\t  if( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmax)) > 0)\n+\t    {\n+\t      //Step 5.1\n+\t      p = p.subtract( BigInteger.valueOf( 1 ).shiftLeft( pmax) );\n+\t      p = p.add( BigInteger.valueOf( 1 ).shiftLeft( pmin) );\n+\t      p = p.subtract( BigInteger.valueOf( 1 ) );\n+\n+\t      //Step 5.2 - goto to Step 2\n+\t      break steptwo;\n+\t    }\n+\n+\t  //Step 6\n+\t  d = p.subtract( BigInteger.valueOf(1) );\n+\t  d = d.gcd( f );\n+\n+\t  //Step 7 - test d\n+\t  if( d.compareTo( BigInteger.valueOf( 1 ) ) == 0)\n+\t    {\n+\t      //Step 7.1 - test primality\n+\t      if( p.isProbablePrime( 1 ) == true )\n+\t\t{\n+\t\t\t\t//Step 7.2;\n+\t\t  return p;\n+\t\t}\n+\t    }\n+\t  //Step 8\n+\t  p = p.add( r.multiply( BigInteger.valueOf(2) ) );\n+\n+\t  //Step 9\n+\t}\n+    }\n+    //Should never reach here but makes the compiler happy\n+    return BigInteger.valueOf(0);\t\n+  }\n+}"}]}