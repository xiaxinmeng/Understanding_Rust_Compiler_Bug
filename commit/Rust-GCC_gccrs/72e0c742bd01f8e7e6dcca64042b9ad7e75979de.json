{"sha": "72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "node_id": "C_kwDOANBUbNoAKDcyZTBjNzQyYmQwMWY4ZTdlNmRjY2E2NDA0MmI5YWQ3ZTc1OTc5ZGU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-09T11:02:24Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-13T13:26:58Z"}, "message": "gcov: make profile merging smarter\n\nSupport merging of profiles that are built from a different .o files\nbut belong to the same source file. Moreover, a checksum is verified\nduring profile merging and so we can safely combine such profile.\n\n\tPR gcov-profile/90364\n\ngcc/ChangeLog:\n\n\t* coverage.c (build_info): Emit checksum to the global variable.\n\t(build_info_type): Add new field for checksum.\n\t(coverage_obj_finish): Pass object_checksum.\n\t(coverage_init): Use 0 as checksum for .gcno files.\n\t* gcov-dump.c (dump_gcov_file): Dump also new checksum field.\n\t* gcov.c (read_graph_file): Read also checksum.\n\t* doc/invoke.texi: Document the behaviour change.\n\nlibgcc/ChangeLog:\n\n\t* libgcov-driver.c (merge_one_data): Skip timestamp and verify\n\tchecksums.\n\t(write_one_data): Write also checksum.\n\t* libgcov-util.c (read_gcda_file): Read also checksum field.\n\t* libgcov.h (struct gcov_info): Add new field.", "tree": {"sha": "b902a8580178ec7ed6d4dc9416679a4d92f81e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b902a8580178ec7ed6d4dc9416679a4d92f81e78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489c8f27296362dcfbc967aecef17ba7c5cab0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489c8f27296362dcfbc967aecef17ba7c5cab0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489c8f27296362dcfbc967aecef17ba7c5cab0f2"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "4467f1eaa5ce7ec42203dd37254478a839ef738a", "filename": "gcc/coverage.c", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -129,16 +129,7 @@ static const char *const ctr_names[GCOV_COUNTERS] = {\n #undef DEF_GCOV_COUNTER\n \n /* Forward declarations.  */\n-static void read_counts_file (void);\n static tree build_var (tree, tree, int);\n-static void build_fn_info_type (tree, unsigned, tree);\n-static void build_info_type (tree, tree);\n-static tree build_fn_info (const struct coverage_data *, tree, tree);\n-static tree build_info (tree, tree);\n-static bool coverage_obj_init (void);\n-static vec<constructor_elt, va_gc> *coverage_obj_fn\n-(vec<constructor_elt, va_gc> *, tree, struct coverage_data const *);\n-static void coverage_obj_finish (vec<constructor_elt, va_gc> *);\n \f\n /* Return the type node for gcov_type.  */\n \n@@ -218,6 +209,9 @@ read_counts_file (void)\n   tag = gcov_read_unsigned ();\n   bbg_file_stamp = crc32_unsigned (bbg_file_stamp, tag);\n \n+  /* Read checksum.  */\n+  gcov_read_unsigned ();\n+\n   counts_hash = new hash_table<counts_entry> (10);\n   while ((tag = gcov_read_unsigned ()))\n     {\n@@ -935,6 +929,12 @@ build_info_type (tree type, tree fn_info_ptr_type)\n   DECL_CHAIN (field) = fields;\n   fields = field;\n \n+  /* Checksum.  */\n+  field = build_decl (BUILTINS_LOCATION, FIELD_DECL, NULL_TREE,\n+\t\t      get_gcov_unsigned_t ());\n+  DECL_CHAIN (field) = fields;\n+  fields = field;\n+\n   /* Filename */\n   field = build_decl (BUILTINS_LOCATION, FIELD_DECL, NULL_TREE,\n \t\t      build_pointer_type (build_qualified_type\n@@ -977,7 +977,7 @@ build_info_type (tree type, tree fn_info_ptr_type)\n    function info objects.  */\n \n static tree\n-build_info (tree info_type, tree fn_ary)\n+build_info (tree info_type, tree fn_ary, unsigned object_checksum)\n {\n   tree info_fields = TYPE_FIELDS (info_type);\n   tree merge_fn_type, n_funcs;\n@@ -996,13 +996,19 @@ build_info (tree info_type, tree fn_ary)\n   /* next -- NULL */\n   CONSTRUCTOR_APPEND_ELT (v1, info_fields, null_pointer_node);\n   info_fields = DECL_CHAIN (info_fields);\n-  \n+\n   /* stamp */\n   CONSTRUCTOR_APPEND_ELT (v1, info_fields,\n \t\t\t  build_int_cstu (TREE_TYPE (info_fields),\n \t\t\t\t\t  bbg_file_stamp));\n   info_fields = DECL_CHAIN (info_fields);\n \n+  /* Checksum.  */\n+  CONSTRUCTOR_APPEND_ELT (v1, info_fields,\n+\t\t\t  build_int_cstu (TREE_TYPE (info_fields),\n+\t\t\t\t\t  object_checksum));\n+  info_fields = DECL_CHAIN (info_fields);\n+\n   /* Filename */\n   da_file_name_len = strlen (da_file_name);\n   filename_string = build_string (da_file_name_len + 1, da_file_name);\n@@ -1214,7 +1220,8 @@ coverage_obj_fn (vec<constructor_elt, va_gc> *ctor, tree fn,\n    function objects from CTOR.  Generate the gcov_info initializer.  */\n \n static void\n-coverage_obj_finish (vec<constructor_elt, va_gc> *ctor)\n+coverage_obj_finish (vec<constructor_elt, va_gc> *ctor,\n+\t\t     unsigned object_checksum)\n {\n   unsigned n_functions = vec_safe_length (ctor);\n   tree fn_info_ary_type = build_array_type\n@@ -1231,7 +1238,7 @@ coverage_obj_finish (vec<constructor_elt, va_gc> *ctor)\n   varpool_node::finalize_decl (fn_info_ary);\n   \n   DECL_INITIAL (gcov_info_var)\n-    = build_info (TREE_TYPE (gcov_info_var), fn_info_ary);\n+    = build_info (TREE_TYPE (gcov_info_var), fn_info_ary, object_checksum);\n   varpool_node::finalize_decl (gcov_info_var);\n }\n \n@@ -1300,7 +1307,6 @@ coverage_init (const char *filename)\n   strcpy (da_file_name + prefix_len + len, GCOV_DATA_SUFFIX);\n \n   bbg_file_stamp = local_tick;\n-  \n   if (flag_auto_profile)\n     read_autofdo_file ();\n   else if (flag_branch_probabilities)\n@@ -1328,6 +1334,8 @@ coverage_init (const char *filename)\n \t  gcov_write_unsigned (GCOV_NOTE_MAGIC);\n \t  gcov_write_unsigned (GCOV_VERSION);\n \t  gcov_write_unsigned (bbg_file_stamp);\n+\t  /* Use an arbitrary checksum */\n+\t  gcov_write_unsigned (0);\n \t  gcov_write_string (getpwd ());\n \n \t  /* Do not support has_unexecuted_blocks for Ada.  */\n@@ -1353,14 +1361,24 @@ coverage_finish (void)\n        cannot uniquely stamp it.  If we can stamp it, libgcov will DTRT.  */\n     unlink (da_file_name);\n \n+  /* Global GCDA checksum that aggregates all functions.  */\n+  unsigned object_checksum = 0;\n+\n   if (coverage_obj_init ())\n     {\n       vec<constructor_elt, va_gc> *fn_ctor = NULL;\n       struct coverage_data *fn;\n       \n       for (fn = functions_head; fn; fn = fn->next)\n-\tfn_ctor = coverage_obj_fn (fn_ctor, fn->fn_decl, fn);\n-      coverage_obj_finish (fn_ctor);\n+\t{\n+\t  fn_ctor = coverage_obj_fn (fn_ctor, fn->fn_decl, fn);\n+\n+\t  object_checksum = crc32_unsigned (object_checksum, fn->ident);\n+\t  object_checksum = crc32_unsigned (object_checksum,\n+\t\t\t\t\t    fn->lineno_checksum);\n+\t  object_checksum = crc32_unsigned (object_checksum, fn->cfg_checksum);\n+\t}\n+      coverage_obj_finish (fn_ctor, object_checksum);\n     }\n \n   XDELETEVEC (da_file_name);"}, {"sha": "03234c887dc0244bec13e6d329186d100db79218", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -14882,6 +14882,10 @@ supports locking, the data files will be correctly updated.  Unless\n a strict ISO C dialect option is in effect, @code{fork} calls are\n detected and correctly handled without double counting.\n \n+Moreover, an object file can be recompiled multiple times\n+and the corresponding @file{.gcda} file merges as long as\n+the source file and the compiler options are unchanged.\n+\n @item\n For profile-directed optimizations, compile the source files again with\n the same optimization and code generation options plus"}, {"sha": "bfaf735d2ffb9f17ab846eaecbcd85c1efa34138", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -206,11 +206,12 @@ dump_gcov_file (const char *filename)\n   }\n \n   /* stamp */\n-  {\n-    unsigned stamp = gcov_read_unsigned ();\n+  unsigned stamp = gcov_read_unsigned ();\n+  printf (\"%s:stamp %lu\\n\", filename, (unsigned long)stamp);\n \n-    printf (\"%s:stamp %lu\\n\", filename, (unsigned long)stamp);\n-  }\n+  /* Checksum */\n+  unsigned checksum = gcov_read_unsigned ();\n+  printf (\"%s:checksum %lu\\n\", filename, (unsigned long)checksum);\n \n   if (!is_data_type)\n     {"}, {"sha": "829e955a63ba0970df3f950d3276d798601872b5", "filename": "gcc/gcov.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -1814,6 +1814,8 @@ read_graph_file (void)\n \t       bbg_file_name, v, e);\n     }\n   bbg_stamp = gcov_read_unsigned ();\n+  /* Read checksum.  */\n+  gcov_read_unsigned ();\n   bbg_cwd = xstrdup (gcov_read_string ());\n   bbg_supports_has_unexecuted_blocks = gcov_read_unsigned ();\n \n@@ -2031,6 +2033,9 @@ read_count_file (void)\n       goto cleanup;\n     }\n \n+  /* Read checksum.  */\n+  gcov_read_unsigned ();\n+\n   while ((tag = gcov_read_unsigned ()))\n     {\n       unsigned length = gcov_read_unsigned ();"}, {"sha": "7aa97bbb06a48ba3272b9dc4595c5d7094e0c088", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -260,12 +260,15 @@ merge_one_data (const char *filename,\n   if (!gcov_version (gi_ptr, length, filename))\n     return -1;\n \n+  /* Skip timestamp.  */\n+  gcov_read_unsigned ();\n+\n   length = gcov_read_unsigned ();\n-  if (length != gi_ptr->stamp)\n+  if (length != gi_ptr->checksum)\n     {\n       /* Read from a different compilation.  Overwrite the file.  */\n       gcov_error (GCOV_PROF_PREFIX \"overwriting an existing profile data \"\n-\t\t  \"with a different timestamp\\n\", filename);\n+\t\t  \"with a different checksum\\n\", filename);\n       return 0;\n     }\n \n@@ -495,6 +498,7 @@ write_one_data (const struct gcov_info *gi_ptr,\n   dump_unsigned (GCOV_DATA_MAGIC, dump_fn, arg);\n   dump_unsigned (GCOV_VERSION, dump_fn, arg);\n   dump_unsigned (gi_ptr->stamp, dump_fn, arg);\n+  dump_unsigned (gi_ptr->checksum, dump_fn, arg);\n \n #ifdef NEED_L_GCOV\n   /* Generate whole program statistics.  */"}, {"sha": "766ca3559c4e046f71becb8a5515ba11ea047333", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -310,6 +310,9 @@ read_gcda_file (const char *filename)\n   /* Read stamp.  */\n   obj_info->stamp = gcov_read_unsigned ();\n \n+  /* Read checksum.  */\n+  obj_info->checksum = gcov_read_unsigned ();\n+\n   while (1)\n     {\n       gcov_position_t base;"}, {"sha": "2a365c95759981b3f17abd36c870098fbb70bb92", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e0c742bd01f8e7e6dcca64042b9ad7e75979de/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "patch": "@@ -230,6 +230,7 @@ struct gcov_info\n   struct gcov_info *next;\t/* link to next, used by libgcov */\n \n   gcov_unsigned_t stamp;\t/* uniquifying time stamp */\n+  gcov_unsigned_t checksum;\t/* unique object checksum */\n   const char *filename;\t\t/* output file name */\n \n   gcov_merge_fn merge[GCOV_COUNTERS];  /* merge functions (null for"}]}