{"sha": "0c521d18750b0d1706ec61bae60c85fc364c13fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1MjFkMTg3NTBiMGQxNzA2ZWM2MWJhZTYwYzg1ZmMzNjRjMTNmYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-03T01:53:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-03T01:53:36Z"}, "message": "Check whether we are using setjmp/longjmp exceptions.\n\nFrom-SVN: r169777", "tree": {"sha": "4c14f86ce89f5533332a96c295ccd2adc1ed0f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c14f86ce89f5533332a96c295ccd2adc1ed0f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c521d18750b0d1706ec61bae60c85fc364c13fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c521d18750b0d1706ec61bae60c85fc364c13fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c521d18750b0d1706ec61bae60c85fc364c13fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c521d18750b0d1706ec61bae60c85fc364c13fa/comments", "author": null, "committer": null, "parents": [{"sha": "28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fc3eee79d92a367a179ef4e7fa5d8ed134fe61"}], "stats": {"total": 124, "additions": 121, "deletions": 3}, "files": [{"sha": "22d6f721e2d09221cdf94a14abfcbc5a13516757", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=0c521d18750b0d1706ec61bae60c85fc364c13fa", "patch": "@@ -70,6 +70,9 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n+/* Define if the C++ compiler is configured for setjmp/longjmp exceptions. */\n+#undef LIBGO_SJLJ_EXCEPTIONS\n+\n /* Define if the linker support split stack adjustments */\n #undef LINKER_SUPPORTS_SPLIT_STACK\n "}, {"sha": "ddb61c00262d11e386f54d462f499927bb12b656", "filename": "libgo/configure", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=0c521d18750b0d1706ec61bae60c85fc364c13fa", "patch": "@@ -786,6 +786,7 @@ enable_libtool_lock\n enable_version_specific_runtime_libs\n with_libffi\n with_system_libunwind\n+enable_sjlj_exceptions\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1425,6 +1426,8 @@ Optional Features:\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n+  --enable-sjlj-exceptions\n+                          force use of builtin_setjmp for exceptions\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -10903,7 +10906,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10906 \"configure\"\n+#line 10909 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11009,7 +11012,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11012 \"configure\"\n+#line 11015 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14076,6 +14079,68 @@ $as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n   fi\n \n \n+# Check whether --enable-sjlj-exceptions was given.\n+if test \"${enable_sjlj_exceptions+set}\" = set; then :\n+  enableval=$enable_sjlj_exceptions; case \"$enableval\" in\n+   yes|no|auto) ;;\n+   *) as_fn_error \"unknown argument to --enable-sjlj-exceptions\" \"$LINENO\" 5 ;;\n+   esac\n+else\n+  enable_sjlj_exceptions=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use setjmp/longjmp exceptions\" >&5\n+$as_echo_n \"checking whether to use setjmp/longjmp exceptions... \" >&6; }\n+if test \"${libgo_cv_lib_sjlj_exceptions+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+void bar ();\n+void clean (int *);\n+void foo ()\n+{\n+  int i __attribute__ ((cleanup (clean)));\n+  bar();\n+}\n+\n+_ACEOF\n+CFLAGS_hold=$CFLAGS\n+CFLAGS=\"--save-temps -fexceptions\"\n+libgo_cv_lib_sjlj_exceptions=unknown\n+if ac_fn_c_try_compile; then :\n+  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n+    libgo_cv_lib_sjlj_exceptions=yes\n+  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n+    libgo_cv_lib_sjlj_exceptions=no\n+  fi\n+fi\n+CFLAGS=$CFLAGS_hold\n+rm -f conftest*\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_lib_sjlj_exceptions\" >&5\n+$as_echo \"$libgo_cv_lib_sjlj_exceptions\" >&6; }\n+\n+if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n+  enable_sjlj_exceptions=$libgo_cv_lib_sjlj_exceptions\n+fi\n+\n+case $enable_sjlj_exceptions in\n+yes)\n+\n+$as_echo \"#define LIBGO_SJLJ_EXCEPTIONS 1\" >>confdefs.h\n+\n+  ;;\n+no)\n+  ;;\n+*)\n+  as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n+  ;;\n+esac\n+\n for ac_header in sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/user.h sys/utsname.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`"}, {"sha": "1c75b3ef6d2ec4a276e2c48cd4a0418a2cb7349f", "filename": "libgo/configure.ac", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=0c521d18750b0d1706ec61bae60c85fc364c13fa", "patch": "@@ -328,6 +328,56 @@ AC_C_BIGENDIAN\n \n GCC_CHECK_UNWIND_GETIPINFO\n \n+AC_ARG_ENABLE(sjlj-exceptions,\n+  AC_HELP_STRING([--enable-sjlj-exceptions],\n+\t\t [force use of builtin_setjmp for exceptions]),\n+  [case \"$enableval\" in\n+   yes|no|auto) ;;\n+   *) AC_MSG_ERROR([unknown argument to --enable-sjlj-exceptions]) ;;\n+   esac],\n+  [enable_sjlj_exceptions=auto])\n+\n+AC_CACHE_CHECK([whether to use setjmp/longjmp exceptions],\n+[libgo_cv_lib_sjlj_exceptions],\n+[AC_LANG_CONFTEST(\n+  [AC_LANG_SOURCE([\n+void bar ();\n+void clean (int *);\n+void foo ()\n+{\n+  int i __attribute__ ((cleanup (clean)));\n+  bar();\n+}\n+])])\n+CFLAGS_hold=$CFLAGS\n+CFLAGS=\"--save-temps -fexceptions\"\n+libgo_cv_lib_sjlj_exceptions=unknown\n+AS_IF([ac_fn_c_try_compile],\n+  [if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n+    libgo_cv_lib_sjlj_exceptions=yes\n+  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n+    libgo_cv_lib_sjlj_exceptions=no\n+  fi])\n+CFLAGS=$CFLAGS_hold\n+rm -f conftest*\n+])\n+\n+if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n+  enable_sjlj_exceptions=$libgo_cv_lib_sjlj_exceptions\n+fi\n+\n+case $enable_sjlj_exceptions in\n+yes)\n+  AC_DEFINE(LIBGO_SJLJ_EXCEPTIONS, 1,\n+\t[Define if the C++ compiler is configured for setjmp/longjmp exceptions.])\n+  ;;\n+no)\n+  ;;\n+*)\n+  AC_MSG_ERROR([unable to detect exception model])\n+  ;;\n+esac\n+\n AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/user.h sys/utsname.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n AC_CHECK_FUNCS(srandom random strsignal)"}, {"sha": "c0fc59cef84f889c0cbda2c28fca36701f7b68c6", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c521d18750b0d1706ec61bae60c85fc364c13fa/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=0c521d18750b0d1706ec61bae60c85fc364c13fa", "patch": "@@ -126,7 +126,7 @@ __go_check_defer (void *frame)\n \n   hdr = (struct _Unwind_Exception *) __go_panic_defer->__exception;\n \n-#ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n+#ifdef LIBGO_SJLJ_EXCEPTIONS\n   _Unwind_SjLj_Resume_or_Rethrow (hdr);\n #else\n #if defined(_LIBUNWIND_STD_ABI)"}]}