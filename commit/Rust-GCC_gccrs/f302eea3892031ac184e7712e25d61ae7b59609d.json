{"sha": "f302eea3892031ac184e7712e25d61ae7b59609d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwMmVlYTM4OTIwMzFhYzE4NGU3NzEyZTI1ZDYxYWU3YjU5NjA5ZA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-02-19T00:39:39Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-02-19T00:39:39Z"}, "message": "reload.c (find_reloads_address): Treat (plus (minus reg reg) const) the same as (plus (plus reg reg) const).\n\n\t* reload.c (find_reloads_address): Treat (plus (minus reg reg) const)\n\tthe same as (plus (plus reg reg) const).\nBack out this patch.\n\nFrom-SVN: r13663", "tree": {"sha": "24ba341739cc1b3060fbcde5de1e5ce93782b342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24ba341739cc1b3060fbcde5de1e5ce93782b342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f302eea3892031ac184e7712e25d61ae7b59609d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f302eea3892031ac184e7712e25d61ae7b59609d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f302eea3892031ac184e7712e25d61ae7b59609d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f302eea3892031ac184e7712e25d61ae7b59609d/comments", "author": null, "committer": null, "parents": [{"sha": "5b6f7b962e25d0d94538d83692a2a260eb0b448d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6f7b962e25d0d94538d83692a2a260eb0b448d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6f7b962e25d0d94538d83692a2a260eb0b448d"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "ac3f9d2e6840d0a0cdbe8839db461323bbfdb0ed", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f302eea3892031ac184e7712e25d61ae7b59609d/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f302eea3892031ac184e7712e25d61ae7b59609d/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f302eea3892031ac184e7712e25d61ae7b59609d", "patch": "@@ -4410,9 +4410,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n   /* If we have an indexed stack slot, there are three possible reasons why\n      it might be invalid: The index might need to be reloaded, the address\n      might have been made by frame pointer elimination and hence have a\n-     constant out of range, or the address is the result of register\n-     elimination and (plus (plus reg reg) const), which has been\n-     canonicalized from (plus (plus reg const) reg), isn't a valid address.\n+     constant out of range, or both reasons might apply.  \n \n      We can easily check for an index needing reload, but even if that is the\n      case, we might also have an invalid constant.  To avoid making the\n@@ -4439,11 +4437,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n      innermost PLUS.  */\n \n   else if (GET_CODE (ad) == PLUS && GET_CODE (XEXP (ad, 1)) == CONST_INT\n-\t   && (GET_CODE (XEXP (ad, 0)) == PLUS\n-\t       /* MINUS can happen as a result of register elimination of\n-\t\t  (minus eliminable reg) which gets canonicalized as\n-\t\t  (plus (minus reg reg) const).  */\n-\t       || GET_CODE (XEXP (ad, 0)) == MINUS)\n+\t   && GET_CODE (XEXP (ad, 0)) == PLUS\n \t   && (XEXP (XEXP (ad, 0), 0) == frame_pointer_rtx\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n \t       || XEXP (XEXP (ad, 0), 0) == hard_frame_pointer_rtx\n@@ -4454,7 +4448,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t       || XEXP (XEXP (ad, 0), 0) == stack_pointer_rtx)\n \t   && ! memory_address_p (mode, ad))\n     {\n-      *loc = ad = gen_rtx (GET_CODE (XEXP (ad, 0)), GET_MODE (ad),\n+      *loc = ad = gen_rtx (PLUS, GET_MODE (ad),\n \t\t\t   plus_constant (XEXP (XEXP (ad, 0), 0),\n \t\t\t\t\t  INTVAL (XEXP (ad, 1))),\n \t\t\t   XEXP (XEXP (ad, 0), 1));"}]}