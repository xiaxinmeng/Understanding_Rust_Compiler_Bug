{"sha": "db33efde17932fb29fd08f19eaeef0e527adb065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzM2VmZGUxNzkzMmZiMjlmZDA4ZjE5ZWFlZWYwZTUyN2FkYjA2NQ==", "commit": {"author": {"name": "Nina Dinka Ranns", "email": "dinka.ranns@gmail.com", "date": "2019-05-14T11:48:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T11:48:31Z"}, "message": "Inconsistency wrt Allocators in basic_string assignment (LWG2579)\n\n2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n\n\tInconsistency wrt Allocators in basic_string assignment (LWG2579)\n\t* include/bits/basic_string.h: (operator=(const basic_string&):\n\tMove allocator decision to assign.\n\t(assign(const basic_string&)): Move allocator decision here.\n\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n\tAdd tests.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n\tAdd tests.\n\nFrom-SVN: r271165", "tree": {"sha": "a59cec6e2335b171d4581888c383f4deae8ac866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59cec6e2335b171d4581888c383f4deae8ac866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db33efde17932fb29fd08f19eaeef0e527adb065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33efde17932fb29fd08f19eaeef0e527adb065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33efde17932fb29fd08f19eaeef0e527adb065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33efde17932fb29fd08f19eaeef0e527adb065/comments", "author": {"login": "NinaRanns", "id": 57705710, "node_id": "MDQ6VXNlcjU3NzA1NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/57705710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NinaRanns", "html_url": "https://github.com/NinaRanns", "followers_url": "https://api.github.com/users/NinaRanns/followers", "following_url": "https://api.github.com/users/NinaRanns/following{/other_user}", "gists_url": "https://api.github.com/users/NinaRanns/gists{/gist_id}", "starred_url": "https://api.github.com/users/NinaRanns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NinaRanns/subscriptions", "organizations_url": "https://api.github.com/users/NinaRanns/orgs", "repos_url": "https://api.github.com/users/NinaRanns/repos", "events_url": "https://api.github.com/users/NinaRanns/events{/privacy}", "received_events_url": "https://api.github.com/users/NinaRanns/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4593483f15ca2a82049500b9434e736996bb0891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4593483f15ca2a82049500b9434e736996bb0891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4593483f15ca2a82049500b9434e736996bb0891"}], "stats": {"total": 142, "additions": 113, "deletions": 29}, "files": [{"sha": "9a90e1b8bfcd5e34dc9f299a94536e5da43a80d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=db33efde17932fb29fd08f19eaeef0e527adb065", "patch": "@@ -1,3 +1,14 @@\n+2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n+\n+\tInconsistency wrt Allocators in basic_string assignment (LWG2579)\n+\t* include/bits/basic_string.h: (operator=(const basic_string&):\n+\tMove allocator decision to assign.\n+\t(assign(const basic_string&)): Move allocator decision here.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n+\tAdd tests.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n+\tAdd tests.\n+\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/util/testsuite_allocator.h (memory_resource)"}, {"sha": "897acaa8c022bb5d231726b60ca9cb7095c78b2b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=db33efde17932fb29fd08f19eaeef0e527adb065", "patch": "@@ -664,35 +664,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       operator=(const basic_string& __str)\n       {\n-#if __cplusplus >= 201103L\n-\tif (_Alloc_traits::_S_propagate_on_copy_assign())\n-\t  {\n-\t    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\n-\t\t&& _M_get_allocator() != __str._M_get_allocator())\n-\t      {\n-\t\t// Propagating allocator cannot free existing storage so must\n-\t\t// deallocate it before replacing current allocator.\n-\t\tif (__str.size() <= _S_local_capacity)\n-\t\t  {\n-\t\t    _M_destroy(_M_allocated_capacity);\n-\t\t    _M_data(_M_local_data());\n-\t\t    _M_set_length(0);\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    const auto __len = __str.size();\n-\t\t    auto __alloc = __str._M_get_allocator();\n-\t\t    // If this allocation throws there are no effects:\n-\t\t    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);\n-\t\t    _M_destroy(_M_allocated_capacity);\n-\t\t    _M_data(__ptr);\n-\t\t    _M_capacity(__len);\n-\t\t    _M_set_length(__len);\n-\t\t  }\n-\t      }\n-\t    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());\n-\t  }\n-#endif\n \treturn this->assign(__str);\n       }\n \n@@ -1363,6 +1334,35 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       assign(const basic_string& __str)\n       {\n+#if __cplusplus >= 201103L\n+\tif (_Alloc_traits::_S_propagate_on_copy_assign())\n+\t  {\n+\t    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\n+\t\t&& _M_get_allocator() != __str._M_get_allocator())\n+\t      {\n+\t\t// Propagating allocator cannot free existing storage so must\n+\t\t// deallocate it before replacing current allocator.\n+\t\tif (__str.size() <= _S_local_capacity)\n+\t\t  {\n+\t\t    _M_destroy(_M_allocated_capacity);\n+\t\t    _M_data(_M_local_data());\n+\t\t    _M_set_length(0);\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    const auto __len = __str.size();\n+\t\t    auto __alloc = __str._M_get_allocator();\n+\t\t    // If this allocation throws there are no effects:\n+\t\t    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);\n+\t\t    _M_destroy(_M_allocated_capacity);\n+\t\t    _M_data(__ptr);\n+\t\t    _M_capacity(__len);\n+\t\t    _M_set_length(__len);\n+\t\t  }\n+\t      }\n+\t    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());\n+\t  }\n+#endif\n \tthis->_M_assign(__str);\n \treturn *this;\n       }"}, {"sha": "fa9f2c75918145a6a6678dd5bcff5542729d0545", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy_assign.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc?ref=db33efde17932fb29fd08f19eaeef0e527adb065", "patch": "@@ -133,10 +133,47 @@ void test03()\n   VERIFY( v1.get_allocator() == a2 );\n }\n \n+void test04()\n+{\n+  // LWG2579\n+  typedef propagating_allocator<C, true> alloc_type;\n+\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(\"tralalala\",alloc_type(1));\n+  test_type v2(\"content\", alloc_type(2));\n+  test_type v3(\"content2\", alloc_type(3));\n+\n+  v1.assign(v2);\n+  v3 = v2;\n+  VERIFY(2 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v3.get_allocator().get_personality());\n+\n+}\n+\n+void test05()\n+{\n+  // LWG2579\n+  typedef propagating_allocator<C, false> alloc_type;\n+\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(\"tralalala\",alloc_type(1));\n+  test_type v2(\"content\", alloc_type(2));\n+  test_type v3(\"content2\", alloc_type(3));\n+\n+  v1.assign(v2);\n+  v3 = v2;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n+  test05();\n   return 0;\n }"}, {"sha": "e7e15a97acd0326614a2694067476ecd48d0675c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33efde17932fb29fd08f19eaeef0e527adb065/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc?ref=db33efde17932fb29fd08f19eaeef0e527adb065", "patch": "@@ -133,10 +133,46 @@ void test03()\n   VERIFY( v1.get_allocator() == a2 );\n }\n \n+void test04()\n+{\n+  // LWG2579\n+  typedef propagating_allocator<C, true> alloc_type;\n+\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(L\"tralalala\",alloc_type(1));\n+  test_type v2(L\"content\", alloc_type(2));\n+  test_type v3(L\"content2\", alloc_type(3));\n+\n+  v1.assign(v2);\n+  v3 = v2;\n+  VERIFY(2 == v1.get_allocator().get_personality());\n+  VERIFY(2 == v3.get_allocator().get_personality());\n+\n+}\n+\n+void test05()\n+{\n+  // LWG2579\n+  typedef propagating_allocator<C, false> alloc_type;\n+\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+\n+  test_type v1(L\"tralalala\",alloc_type(1));\n+  test_type v2(L\"content\", alloc_type(2));\n+  test_type v3(L\"content2\", alloc_type(3));\n+\n+  v1.assign(v2);\n+  v3 = v2;\n+  VERIFY(1 == v1.get_allocator().get_personality());\n+  VERIFY(3 == v3.get_allocator().get_personality());\n+}\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n+  test05();\n   return 0;\n }"}]}