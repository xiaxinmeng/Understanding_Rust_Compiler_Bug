{"sha": "daefe58e9352e710127683fa6d4da4f460186c9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlZmU1OGU5MzUyZTcxMDEyNzY4M2ZhNmQ0ZGE0ZjQ2MDE4NmM5ZQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-06-16T20:55:56Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-16T20:55:56Z"}, "message": "AccessException.java: Remerge from Classpath.\n\n2002-06-16  Nathanael Nerode  <neroden@twcny.rr.com>\n\n\t* java/rmi/AccessException.java: Remerge from Classpath.\n\t* java/rmi/AlreadyBoundException.java: Ditto.\n\t* java/rmi/ConnectException.java: Ditto.\n\t* java/rmi/ConnectIOException.java: Ditto.\n\t* java/rmi/MarshalException.java: Ditto.\n\t* java/rmi/NoSuchObjectException.java: Ditto.\n\t* java/rmi/NotBoundException.java: Ditto.\n\t* java/rmi/RemoteException.java: Ditto.\n\t* java/rmi/RMISecurityException.java: Ditto.\n\t* java/rmi/ServerError.java: Ditto.\n\t* java/rmi/ServerException.java: Ditto.\n\t* java/rmi/ServerRuntimeException.java: Ditto.\n\t* java/rmi/StubNotFoundException.java: Ditto.\n\t* java/rmi/UnexpectedExcpetion.java: Ditto.\n\t* java/rmi/UnknownHostException.java: Ditto.\n\t* java/rmi/UnmarshalException.java: Ditto.\n\nFrom-SVN: r54678", "tree": {"sha": "73f6b132b22f59924674c89196211107624c9e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f6b132b22f59924674c89196211107624c9e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daefe58e9352e710127683fa6d4da4f460186c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daefe58e9352e710127683fa6d4da4f460186c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daefe58e9352e710127683fa6d4da4f460186c9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daefe58e9352e710127683fa6d4da4f460186c9e/comments", "author": null, "committer": null, "parents": [{"sha": "65a90f3c706e0c2f28dfa46e327f14c947987cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a90f3c706e0c2f28dfa46e327f14c947987cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a90f3c706e0c2f28dfa46e327f14c947987cd8"}], "stats": {"total": 878, "additions": 637, "deletions": 241}, "files": [{"sha": "f27fe76ccc4de70b15dc1e8c8d7597a44def0456", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,3 +1,22 @@\n+2002-06-16  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* java/rmi/AccessException.java: Remerge from Classpath.\n+\t* java/rmi/AlreadyBoundException.java: Ditto.\n+\t* java/rmi/ConnectException.java: Ditto.\n+\t* java/rmi/ConnectIOException.java: Ditto.\n+\t* java/rmi/MarshalException.java: Ditto.\n+\t* java/rmi/NoSuchObjectException.java: Ditto.\n+\t* java/rmi/NotBoundException.java: Ditto.\n+\t* java/rmi/RemoteException.java: Ditto.\n+\t* java/rmi/RMISecurityException.java: Ditto.\n+\t* java/rmi/ServerError.java: Ditto.\n+\t* java/rmi/ServerException.java: Ditto.\n+\t* java/rmi/ServerRuntimeException.java: Ditto.\n+\t* java/rmi/StubNotFoundException.java: Ditto.\n+\t* java/rmi/UnexpectedExcpetion.java: Ditto.\n+\t* java/rmi/UnknownHostException.java: Ditto.\n+\t* java/rmi/UnmarshalException.java: Ditto.\n+\n 2002-06-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/AbstractMethodError.java: Re-merged with Classpath."}, {"sha": "389d2df059c851470a4d057533055a18e80dd3a4", "filename": "libjava/java/rmi/AccessException.java", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FAccessException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FAccessException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FAccessException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* AccessException.java -- thrown if the caller does not have access\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,40 @@\n \n package java.rmi;\n \n-public class AccessException \n-\textends RemoteException {\n-\n-public static final long serialVersionUID = 6314925228044966088l;\n+/**\n+ * Thrown to indicate that the caller does not have permission to access\n+ * certain data, such as <code>bind</code> in an ActivationSystem.\n+ *\n+ * @author unknown\n+ * @see Naming\n+ * @see ActivationSystem\n+ * @since 1.1\n+ */\n+public class AccessException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 6314925228044966088l;\n \n-public AccessException(String s) {\n-\tsuper(s);\n-}\n-\n-public AccessException(String s, Exception e) {\n-\tsuper (s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public AccessException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public AccessException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "2062aede1ec6c99f0aa12a52263093219b745426", "filename": "libjava/java/rmi/AlreadyBoundException.java", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FAlreadyBoundException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* AlreadyBoundException.java -- thrown if a binding is already bound\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,15 +37,37 @@\n \n package java.rmi;\n \n-public class AlreadyBoundException \n-\textends Exception {\n-\n-public AlreadyBoundException() {\n-\tsuper();\n-}\n+/**\n+ * Thrown on an attempt to bind an object in the registry that is already\n+ * bound.\n+ *\n+ * @author unknown\n+ * @see Naming#bind(String, Remote)\n+ * @see Registry#bind(String, Remote)\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class AlreadyBoundException extends Exception\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 9218657361741657110L;\n \n-public AlreadyBoundException(String s) {\n-\tsuper (s);\n-}\n+  /**\n+   * Create an exception with no message.\n+   */\n+  public AlreadyBoundException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public AlreadyBoundException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "75a7c454fd545fb47cc9588442516e3b8a835e6a", "filename": "libjava/java/rmi/ConnectException.java", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FConnectException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ConnectException.java -- thrown if a connection is refused\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,16 +37,38 @@\n \n package java.rmi;\n \n-public class ConnectException \n-\textends RemoteException {\n-\n+/**\n+ * Thrown if a connection is refused for a remote call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ConnectException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 4863550261346652506L;\n \n-public ConnectException(String s) {\n-\tsuper(s);\n-}\n-\n-public ConnectException(String s, Exception e) {\n-\tsuper (s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ConnectException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ConnectException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "24c779d2bff260d58a705465c39574d9cb02214b", "filename": "libjava/java/rmi/ConnectIOException.java", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FConnectIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FConnectIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FConnectIOException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ConnectIOException.java -- thrown if an IO exception occurs during connect\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,16 +37,38 @@\n \n package java.rmi;\n \n-public class ConnectIOException \n-\textends RemoteException {\n-\n+/**\n+ * Wraps an I/O Exception thrown while connecting for a remote call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ConnectIOException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -8087809532704668744L;\n \n-public ConnectIOException(String s) {\n-\tsuper(s);\n-}\n-\n-public ConnectIOException(String s, Exception e) {\n-\tsuper (s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ConnectIOException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ConnectIOException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "98482a965b5984ed3d850cc0680c03b2c4201f87", "filename": "libjava/java/rmi/MarshalException.java", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FMarshalException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FMarshalException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FMarshalException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* MarshalException.java -- wraps error while marshalling parameters\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,16 +37,40 @@\n \n package java.rmi;\n \n-public class MarshalException \n-\textends RemoteException {\n-\n+/**\n+ * Thrown if an exception occurs while marshalling data to send in a remote\n+ * call. The call may not be retransmitted, if the \"at most once\" semantics\n+ * are to be preserved.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class MarshalException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 6223554758134037936L;\n \n-public MarshalException(String s) {\n-\tsuper(s);\n-}\n-\n-public MarshalException(String s, Exception e) {\n-\tsuper (s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public MarshalException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public MarshalException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "dd61f950cb166afdfb48436ac12a84c42285aa36", "filename": "libjava/java/rmi/NoSuchObjectException.java", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FNoSuchObjectException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* NoSuchObjectException.java -- thrown if the remote object no longer exists\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,13 +37,32 @@\n \n package java.rmi;\n \n-public class NoSuchObjectException\n-\textends RemoteException {\n-\n-public static final long serialVersionUID = 6619395951570472985L;\n-\n-public NoSuchObjectException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown on an attempt to invoke a call on an object that no longer exists\n+ * in the remote Virtual Machine. The call may be retransmitted and still\n+ * obey the semantics of \"at most once\".\n+ *\n+ * @author unknown\n+ * @see RemoteObject#toStub(Remote)\n+ * @see UnicastRemoteObject#unexportObject(Remote, boolean)\n+ * @see Activatable#unexportObject(Remote, boolean)\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class NoSuchObjectException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 6619395951570472985L;\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public NoSuchObjectException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "95af177f399227228a52eaaf18372b175dd521cf", "filename": "libjava/java/rmi/NotBoundException.java", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FNotBoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FNotBoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FNotBoundException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* NotBoundException.java -- attempt to use a registry name with no binding\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,39 @@\n \n package java.rmi;\n \n-public class NotBoundException \n-\textends Exception {\n-\n-public static final long serialVersionUID = -1857741824849069317l;\n+/**\n+ * Thrown on an attempt to lookup or unbind a registry name that has no\n+ * associated binding.\n+ *\n+ * @author unknown\n+ * @see Naming#lookup(String)\n+ * @see Naming#unbind(String)\n+ * @see Registry#lookup(String)\n+ * @see Registry#unbind(String)\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class NotBoundException extends Exception\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -1857741824849069317l;\n \n-public NotBoundException() {\n-\tsuper();\n-}\n-\n-public NotBoundException(String s) {\n-\tsuper (s);\n-}\n+  /**\n+   * Create an exception with no message.\n+   */\n+  public NotBoundException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public NotBoundException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "3697b7c9580afa972ef69d4a8b6d7d2f91059cc3", "filename": "libjava/java/rmi/RMISecurityException.java", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FRMISecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FRMISecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRMISecurityException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* RMISecurityException.java -- deprecated version of SecurityException\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,41 @@\n \n package java.rmi;\n \n-import java.lang.SecurityException;\n-\n-public class RMISecurityException\n-\textends SecurityException {\n+/**\n+ * Never thrown, but originally intended to wrap a java.lang.SecurityException.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @deprecated use {@link SecurityException} instead\n+ * @status updated to 1.4\n+ */\n+public class RMISecurityException extends SecurityException\n+{\n+  /**\n+   * Compatible with JDK 1.1.\n+   */\n+  private static final long serialVersionUID = -8433406075740433514L;\n \n-public RMISecurityException(String n) {\n-\tsuper(n);\n-}\n-\n-public RMISecurityException(String n, String a) {\n-\tsuper(n);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   * @deprecated no longer needed\n+   */\n+  public RMISecurityException(String n)\n+  {\n+    super(n);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   * @deprecated no longer needed\n+   */\n+  public RMISecurityException(String n, String a)\n+  {\n+    super(n);\n+  }\n }"}, {"sha": "17e38b30bd703cd45c05fe178217ff3f53381c7d", "filename": "libjava/java/rmi/RemoteException.java", "status": "modified", "additions": 88, "deletions": 56, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FRemoteException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FRemoteException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FRemoteException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* RemoteException.java -- common superclass for exceptions in java.rmi\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,59 +37,91 @@\n \n package java.rmi;\n \n-import java.lang.Throwable;\n import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n-\n-public class RemoteException \n-\textends IOException {\n-\n-public static final long serialVersionUID = -5148567311918794206l;\n-\n-public Throwable detail;\n-\n-public RemoteException() {\n-\tsuper();\n-\tdetail = null;\n-}\n-\n-public RemoteException(String s) {\n-\tsuper(s);\n-\tdetail = null;\n-}\n-\n-public RemoteException(String s, Throwable e) {\n-\tsuper(s);\n-\tdetail = e;\n-}\n-\n-public String getMessage() {\n-\tif (detail == null) {\n-\t\treturn (super.getMessage());\n-\t}\n-\telse {\n-\t\treturn (super.getMessage() + \"; nested exception is: \" + detail.getMessage());\n-\t}\n-}\n-\n-public void printStackTrace(PrintStream s) {\n-\tif (detail != null) {\n-\t\tdetail.printStackTrace(s);\n-\t}\n-\tsuper.printStackTrace(s);\n-}\n-\n-public void printStackTrace(PrintWriter s) {\n-\tif (detail != null) {\n-\t\tdetail.printStackTrace(s);\n-\t}\n-\tsuper.printStackTrace(s);\n-}\n-\n-public void printStackTrace() {\n-\tprintStackTrace(System.err);\n-}\n \n+/**\n+ * The superclass of exceptions related to RMI (remote method invocation).\n+ * Classes that implement <code>java.rmi.Remote</code> should list this\n+ * exception in their throws clause.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class RemoteException extends IOException\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -5148567311918794206l;\n+\n+  /**\n+   * The cause of this exception. This pre-dates the exception chaining\n+   * of Throwable; and although you can change this field, you are wiser\n+   * to leave it alone.\n+   *\n+   * @serial the exception cause\n+   */\n+  public Throwable detail;\n+\n+  /**\n+   * Create an exception with no message, and cause initialized to null.\n+   */\n+  public RemoteException()\n+  {\n+    this(null, null);\n+  }\n+\n+  /**\n+   * Create an exception with the given message, and cause initialized to null.\n+   *\n+   * @param s the message\n+   */\n+  public RemoteException(String s)\n+  {\n+    this(s, null);\n+  }\n+\n+  /**\n+   * Create an exception with the given message and cause.\n+   *\n+   * @param s the message\n+   * @param ex the cause\n+   */\n+  public RemoteException(String s, Throwable e)\n+  {\n+    super(s);\n+    initCause(e);\n+    detail = e;\n+  }\n+\n+  /**\n+   * This method returns a message indicating what went wrong, in this\n+   * format:\n+   * <code>super.getMessage() + (detail == null ? \"\"\n+   *    : \"; nested exception is:\\n\\t\" + detail)<code>.\n+   *\n+   * @return the chained message\n+   */\n+  public String getMessage()\n+  {\n+    if (detail == this || detail == null)\n+      return super.getMessage();\n+    return super.getMessage() + \"; nested exception is:\\n\\t\" + detail;\n+  }\n+\n+  /**\n+   * Returns the cause of this exception. Note that this may not be the\n+   * original cause, thanks to the <code>detail</code> field being public\n+   * and non-final (yuck). However, to avoid violating the contract of\n+   * Throwable.getCause(), this returns null if <code>detail == this</code>,\n+   * as no exception can be its own cause.\n+   *\n+   * @return the cause\n+   * @since 1.4\n+   */\n+  public Throwable getCause()\n+  {\n+    return detail == this ? null : detail;\n+  }\n }"}, {"sha": "59c6a55a41f142fca7dcefbfa5779ce61ab76414", "filename": "libjava/java/rmi/ServerError.java", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerError.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ServerError.java -- wraps an error while creating the server\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,11 +37,28 @@\n \n package java.rmi;\n \n-public class ServerError\n-\textends RemoteException {\n-\n-public ServerError(String s, Error e) {\n-\tsuper(s, e);\n-}\n+/**\n+ * Wraps any error thrown while processing the server of a remote call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ServerError extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 8455284893909696482L;\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ServerError(String s, Error e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "17c3a5790977edc242f8c7d9efc617ee30cca15d", "filename": "libjava/java/rmi/ServerException.java", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ServerException.java -- wraps an exception while creating the server\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,38 @@\n \n package java.rmi;\n \n-public class ServerException\n-\textends RemoteException {\n-\n-public static final long serialVersionUID = -4775845313121906682l;\n+/**\n+ * Wraps any exception thrown while processing the server of a remote call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ServerException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -4775845313121906682l;\n \n-public ServerException(String s) {\n-\tsuper(s);\n-}\n-\n-public ServerException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ServerException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ServerException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "d7e11916a69c09f5c8714c8ff656f1694b281742", "filename": "libjava/java/rmi/ServerRuntimeException.java", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerRuntimeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FServerRuntimeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FServerRuntimeException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ServerRuntimeException.java -- wraps an exception while creating the server\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,11 +37,31 @@\n \n package java.rmi;\n \n-public class ServerRuntimeException\n-\textends RemoteException {\n-\n-public ServerRuntimeException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+/**\n+ * Wraps any runtime exception thrown while processing the server of a\n+ * remote call. Note, this exception is no longer used.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @deprecated no replacement\n+ * @status updated to 1.4\n+ */\n+public class ServerRuntimeException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1.\n+   */\n+  private static final long serialVersionUID = 7054464920481467219L;\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   * @deprecated no longer needed\n+   */\n+  public ServerRuntimeException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "837153bca81240fa3d4eb43f4ecafcf214e52cc2", "filename": "libjava/java/rmi/StubNotFoundException.java", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FStubNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FStubNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FStubNotFoundException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* StubNotFoundException.java -- thrown if a valid stub is not found\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,15 +37,41 @@\n \n package java.rmi;\n \n-public class StubNotFoundException\n-\textends RemoteException {\n+/**\n+ * Thrown if a valid stub class is not found for an object when it is exported.\n+ *\n+ * @author unknown\n+ * @see UnicastRemoteObject\n+ * @see Activatable\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class StubNotFoundException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -7088199405468872373L;\n \n-public StubNotFoundException(String s) {\n-\tsuper(s);\n-}\n \n-public StubNotFoundException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public StubNotFoundException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public StubNotFoundException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "42b6f15d506524bd5a594817369e0b68eddb27ec", "filename": "libjava/java/rmi/UnexpectedException.java", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnexpectedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnexpectedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnexpectedException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnexpectedException.java -- an unexpected checked exception was received\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,15 +37,39 @@\n \n package java.rmi;\n \n-public class UnexpectedException\n-\textends RemoteException {\n-\n-public UnexpectedException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown if an unexpected checked exception was received in a remote\n+ * procedure call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class UnexpectedException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 1800467484195073863L;\n \n-public UnexpectedException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public UnexpectedException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public UnexpectedException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "089800c362ce2a8ec1d7eb18226bd6ea69a345fb", "filename": "libjava/java/rmi/UnknownHostException.java", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnknownHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnknownHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnknownHostException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnknownHostException.java -- wraps java.net.UnknownHostException in RMI\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,15 +37,39 @@\n \n package java.rmi;\n \n-public class UnknownHostException\n-\textends RemoteException {\n-\n-public UnknownHostException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown if a java.net.UnknownHostException occurs during a remote\n+ * procedure call.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class UnknownHostException extends RemoteException \n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -8152710247442114228L;\n \n-public UnknownHostException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public UnknownHostException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public UnknownHostException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "cff74a9357fc2c6a32c7ffeb1147748688d2a13a", "filename": "libjava/java/rmi/UnmarshalException.java", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnmarshalException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefe58e9352e710127683fa6d4da4f460186c9e/libjava%2Fjava%2Frmi%2FUnmarshalException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2FUnmarshalException.java?ref=daefe58e9352e710127683fa6d4da4f460186c9e", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnmarshalException.java -- wraps error while unmarshalling parameters\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,52 @@\n \n package java.rmi;\n \n-public class UnmarshalException\n-\textends RemoteException {\n-\n-public static final long serialVersionUID = 594380845140740218l;\n+/**\n+ * Thrown if an exception occurs while unmarshalling parameters or results\n+ * of a remote method call. This includes:<br><ul>\n+ * <li>if an exception occurs while unmarshalling the call header</li>\n+ * <li>if the protocol for the return value is invalid</li>\n+ * <li>if a java.io.IOException occurs unmarshalling parameters (on the\n+ *   server side) or the return value (on the client side).</li>\n+ * <li>if a java.lang.ClassNotFoundException occurs during unmarshalling\n+ *   parameters or return values</li>\n+ * <li>if no skeleton can be loaded on the server-side; note that skeletons\n+ *   are required in the 1.1 stub protocol, but not in the 1.2 stub\n+ *   protocol.</li>\n+ * <li>if the method hash is invalid (i.e., missing method).</li>\n+ * <li>if there is a failure to create a remote reference object for a remote\n+ *   object's stub when it is unmarshalled.</li>\n+ * </ul>\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class UnmarshalException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 594380845140740218l;\n \n-public UnmarshalException(String s) {\n-\tsuper(s);\n-}\n-\n-public UnmarshalException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public UnmarshalException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public UnmarshalException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}]}