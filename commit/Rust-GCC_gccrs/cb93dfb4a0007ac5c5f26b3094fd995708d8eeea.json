{"sha": "cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5M2RmYjRhMDAwN2FjNWM1ZjI2YjMwOTRmZDk5NTcwOGQ4ZWVlYQ==", "commit": {"author": {"name": "Philip Martin", "email": "philip@codematters.co.uk", "date": "2001-12-12T20:23:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-12T20:23:30Z"}, "message": "Ross Smith <r-smith@ihug.co.nz> Paolo Carlini <pcarlini@unitus.it>\n\n2001-12-12  Philip Martin  <philip@codematters.co.uk>\n            Ross Smith     <r-smith@ihug.co.nz>\n            Paolo Carlini  <pcarlini@unitus.it>\n\n\tlibstdc++/5045\n\t* include/bits/std_limits.h (defines, numeric_limits<bool>::digits10):\n\tFix digits10 values for integral types.\n\t* include/bits/locale_facets.tcc (num_get::do_get for integral types):\n\tTweak _M_extract_int call.\n\t* testsuite/27_io/istream_extractor_arith.cc (test13, test12_aux):\n\tTweak overflowing number of digits.\n\t* testsuite/18_support/numeric_limits.cc (test03): New testcase.\n\nCo-Authored-By: Paolo Carlini <pcarlini@unitus.it>\nCo-Authored-By: Ross Smith <r-smith@ihug.co.nz>\n\nFrom-SVN: r47947", "tree": {"sha": "56e8da00ceec7f916bcb815c0648e9350da063eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e8da00ceec7f916bcb815c0648e9350da063eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/comments", "author": null, "committer": null, "parents": [{"sha": "2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bee6045244207d5fb97b9b0a96ffd69eb5b9b74"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "8081d4cf26a4681cd90dad52afee177818ccae79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "patch": "@@ -1,3 +1,16 @@\n+2001-12-12  Philip Martin  <philip@codematters.co.uk>\n+            Ross Smith     <r-smith@ihug.co.nz>\n+            Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tlibstdc++/5045\n+\t* include/bits/std_limits.h (defines, numeric_limits<bool>::digits10):\n+\tFix digits10 values for integral types.\n+\t* include/bits/locale_facets.tcc (num_get::do_get for integral types):\n+\tTweak _M_extract_int call.\n+\t* testsuite/27_io/istream_extractor_arith.cc (test13, test12_aux):\n+\tTweak overflowing number of digits.\n+\t* testsuite/18_support/numeric_limits.cc (test03): New testcase.\n+\n 2001-12-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/os/generic/bits/ctype_inline.h: Remove spaces."}, {"sha": "026f7833d9db22a3e53d033e67e30dc4a51e894b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "patch": "@@ -390,8 +390,12 @@ namespace std\n           // integral types\n           char __xtrc[32];\n           int __base;\n+\t  // According to 18.2.1.2.9, digits10 is \"Number of base 10 digits\n+\t  // that can be represented without change\" so we have to add 1 to it\n+\t  // in order to obtain the max number of digits. The same for the\n+\t  // other do_get for integral types below.\n           _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t\t numeric_limits<bool>::digits10, __base);\n+\t\t\t numeric_limits<bool>::digits10 + 1, __base);\n \n           // Stage 2: convert and store results.\n           char* __sanity;\n@@ -456,7 +460,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<long>::digits10, __base);\n+\t\t     numeric_limits<long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -482,7 +486,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned short>::digits10, __base);\n+\t\t     numeric_limits<unsigned short>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -509,7 +513,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned int>::digits10, __base);\n+\t\t     numeric_limits<unsigned int>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -536,7 +540,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned long>::digits10, __base);\n+\t\t     numeric_limits<unsigned long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -563,7 +567,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<long long>::digits10, __base);\n+\t\t     numeric_limits<long long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -589,7 +593,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc,\n-\t\t     numeric_limits<unsigned long long>::digits10, __base);\n+\t\t     numeric_limits<unsigned long long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;\n@@ -718,7 +722,7 @@ namespace std\n       char __xtrc[32];\n       int __base;\n       _M_extract_int(__beg, __end, __io, __err, __xtrc, \n-\t\t     numeric_limits<unsigned long>::digits10, __base);\n+\t\t     numeric_limits<unsigned long>::digits10 + 1, __base);\n \n       // Stage 2: convert and store results.\n       char* __sanity;"}, {"sha": "dd69401cf68e0582b7d11a6ae0fdaa2da46f9a57", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "patch": "@@ -144,31 +144,31 @@\n #define __glibcpp_s8_max 127\n #define __glibcpp_s8_min (-__glibcpp_s8_max - 1)\n #define __glibcpp_s8_digits 7\n-#define __glibcpp_s8_digits10 3\n+#define __glibcpp_s8_digits10 2\n #define __glibcpp_u8_min 0U\n #define __glibcpp_u8_max (__glibcpp_s8_max * 2 + 1)\n #define __glibcpp_u8_digits 8\n-#define __glibcpp_u8_digits10 3\n+#define __glibcpp_u8_digits10 2\n #define __glibcpp_s16_max 32767\n #define __glibcpp_s16_min (-__glibcpp_s16_max - 1)\n #define __glibcpp_s16_digits 15\n-#define __glibcpp_s16_digits10 5\n+#define __glibcpp_s16_digits10 4\n #define __glibcpp_u16_min 0U\n #define __glibcpp_u16_max (__glibcpp_s16_max * 2 + 1)\n #define __glibcpp_u16_digits 16\n-#define __glibcpp_u16_digits10 5\n+#define __glibcpp_u16_digits10 4\n #define __glibcpp_s32_max 2147483647L\n #define __glibcpp_s32_min (-__glibcpp_s32_max - 1)\n #define __glibcpp_s32_digits 31\n-#define __glibcpp_s32_digits10 10\n+#define __glibcpp_s32_digits10 9\n #define __glibcpp_u32_min 0UL\n #define __glibcpp_u32_max (__glibcpp_s32_max * 2U + 1)\n #define __glibcpp_u32_digits 32\n-#define __glibcpp_u32_digits10 10\n+#define __glibcpp_u32_digits10 9\n #define __glibcpp_s64_max 9223372036854775807LL\n #define __glibcpp_s64_min (-__glibcpp_s64_max - 1)\n #define __glibcpp_s64_digits 63\n-#define __glibcpp_s64_digits10 19\n+#define __glibcpp_s64_digits10 18\n #define __glibcpp_u64_min 0ULL\n #define __glibcpp_u64_max (__glibcpp_s64_max * 2ULL + 1)\n #define __glibcpp_u64_digits 64\n@@ -1033,7 +1033,7 @@ namespace std\n       { return true; }\n \n       static const int digits = __glibcpp_bool_digits;\n-      static const int digits10 = 1;\n+      static const int digits10 = 0;\n       static const bool is_signed = false;\n       static const bool is_integer = true;\n       static const bool is_exact = true;"}, {"sha": "22c2a32d0808da79efa5b585a6be0b1a5dc0c254", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "patch": "@@ -155,10 +155,34 @@ void test02()\n   const bool* pb1 = &b_nl_type::traps;\n }\n \n+// libstdc++/5045\n+bool test03()\n+{\n+  bool test = true;\n+\n+  VERIFY( std::numeric_limits<bool>::digits10 == 0 );\n+  VERIFY( __glibcpp_s8_digits10 == 2 );\n+  VERIFY( __glibcpp_u8_digits10 == 2 );\n+  VERIFY( __glibcpp_s16_digits10 == 4 );\n+  VERIFY( __glibcpp_u16_digits10 == 4 );\n+  VERIFY( __glibcpp_s32_digits10 == 9 );\n+  VERIFY( __glibcpp_u32_digits10 == 9 );\n+  VERIFY( __glibcpp_s64_digits10 == 18 );\n+  VERIFY( __glibcpp_u64_digits10 == 19 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n \n   test_extrema<char>();\n   test_extrema<signed char>();"}, {"sha": "c3181391850de5e041f6d104a863745ef6f115a5", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb93dfb4a0007ac5c5f26b3094fd995708d8eeea/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc?ref=cb93dfb4a0007ac5c5f26b3094fd995708d8eeea", "patch": "@@ -523,7 +523,7 @@ bool test12_aux(bool integer_type)\n   int digits_overflow;\n   if (integer_type)\n     // This many digits will overflow integer types in base 10.\n-    digits_overflow = std::numeric_limits<T>::digits10 + 1;\n+    digits_overflow = std::numeric_limits<T>::digits10 + 2;\n   else\n     // This might do it, unsure.\n     digits_overflow = std::numeric_limits<T>::max_exponent10 + 1;\n@@ -573,7 +573,7 @@ void test13()\n   // 2\n   // quick test for failbit on maximum length extraction.\n   int i;\n-  int max_digits = numeric_limits<int>::digits10;\n+  int max_digits = numeric_limits<int>::digits10 + 1;\n   string digits;\n   for (int j = 0; j < max_digits; ++j)\n     digits += '1';"}]}