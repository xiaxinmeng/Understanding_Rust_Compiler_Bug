{"sha": "084b6d7b052f5589658b07de9f60ca2f79f1fc42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0YjZkN2IwNTJmNTU4OTY1OGIwN2RlOWY2MGNhMmY3OWYxZmM0Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-30T10:24:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-30T10:24:28Z"}, "message": "(c_build_type_variant): Remove last change; instead, copy TYPE if not\nin old obstack.\n\nFrom-SVN: r7618", "tree": {"sha": "9c42ef79c7154cf0eb17c6bef3e6c687125030fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c42ef79c7154cf0eb17c6bef3e6c687125030fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084b6d7b052f5589658b07de9f60ca2f79f1fc42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084b6d7b052f5589658b07de9f60ca2f79f1fc42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084b6d7b052f5589658b07de9f60ca2f79f1fc42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084b6d7b052f5589658b07de9f60ca2f79f1fc42/comments", "author": null, "committer": null, "parents": [{"sha": "14e7bf7c23ef7c73505606524baaab8fae79186b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e7bf7c23ef7c73505606524baaab8fae79186b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e7bf7c23ef7c73505606524baaab8fae79186b"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "920c73d26d991f7cc48e27813d879d1f9cf119fd", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084b6d7b052f5589658b07de9f60ca2f79f1fc42/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084b6d7b052f5589658b07de9f60ca2f79f1fc42/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=084b6d7b052f5589658b07de9f60ca2f79f1fc42", "patch": "@@ -1972,16 +1972,26 @@ c_build_type_variant (type, constp, volatilep)\n {\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n-      push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n+      tree real_main_variant = TYPE_MAIN_VARIANT (type);\n+\n+      push_obstacks (TYPE_OBSTACK (real_main_variant),\n+\t\t     TYPE_OBSTACK (real_main_variant));\n       type = build_array_type (c_build_type_variant (TREE_TYPE (type),\n \t\t\t\t\t\t     constp, volatilep),\n \t\t\t       TYPE_DOMAIN (type));\n-      pop_obstacks ();\n \n-      /* If the old TYPE had variants, we lose them here.  However,\n-\t since the new TYPE can be in the permanent obstack and the\n-\t old one may not be, preserving this chain would cause permanent\n-\t objects to point to non-permanent ones.  */\n+      /* TYPE must be on same obstack as REAL_MAIN_VARIANT.  If not,\n+\t make a copy.  (TYPE might have come from the hash table and\n+\t REAL_MAIN_VARIANT might be in some function's obstack.)  */\n+\n+      if (TYPE_OBSTACK (type) != TYPE_OBSTACK (real_main_variant))\n+\t{\n+\t  type = copy_node (type);\n+\t  TYPE_POINTER_TO (type) = TYPE_REFERENCE_TO (type) = 0;\n+\t}\n+\n+      TYPE_MAIN_VARIANT (type) = real_main_variant;\n+      pop_obstacks ();\n     }\n   return build_type_variant (type, constp, volatilep);\n }"}]}