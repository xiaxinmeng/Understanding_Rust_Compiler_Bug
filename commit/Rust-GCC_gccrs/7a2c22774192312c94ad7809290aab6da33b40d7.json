{"sha": "7a2c22774192312c94ad7809290aab6da33b40d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyYzIyNzc0MTkyMzEyYzk0YWQ3ODA5MjkwYWFiNmRhMzNiNDBkNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:24:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:24:47Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add section on Wide_Wide_Character encodings.\n\t* erroutc.adb (Output_Error_Msgs): Take wide characters into\n\taccount in computing position of error flags.\n\t* sinput.adb (Get_Column_Number): Take wide characters into\n\taccount.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch3.adb (P_Access_Type_Definition): The subtype indication\n\tin an access type definition can carry a null_exclusion indicator.\n\t* sem_ch3.adb (Access_Type_Declaration): If the subtype indication\n\tcarries a null_exclusion indicator, verify that the subtype\n\tindication denotes an access type, and create a null-excluding\n\tsubtype for it.\n\t* sinfo.ads, sinfo.adb: New attribute Null_Excluding_Subtype,\n\tdefined on N_Access_To_Object_Definition to indicate that the\n\tsubtype indication carries a null_exclusion indicator.\n\n2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Add_Extra_Actual): Do not construct\n\tthe extra actual by name, generate a reference instead.\n\n2014-07-29  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Do not crash analyzing\n\tAllow_Integer_Address if already set.\n\t* a-except-2005.adb (Rcheck_PE_Stream_Operation_Not_Allowed):\n\tFix order, for consistency with Rmsg_xx declarations.\n\nFrom-SVN: r213172", "tree": {"sha": "542aa6635d05a7788fedc10cb0cc8f14ab489077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/542aa6635d05a7788fedc10cb0cc8f14ab489077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2c22774192312c94ad7809290aab6da33b40d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c22774192312c94ad7809290aab6da33b40d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2c22774192312c94ad7809290aab6da33b40d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c22774192312c94ad7809290aab6da33b40d7/comments", "author": null, "committer": null, "parents": [{"sha": "28e18b4f5612d2578757dd65ccee6800324a59e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e18b4f5612d2578757dd65ccee6800324a59e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e18b4f5612d2578757dd65ccee6800324a59e9"}], "stats": {"total": 288, "additions": 251, "deletions": 37}, "files": [{"sha": "d85f48729783de328b72fa5216a79ba3f2df34f2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -1,3 +1,35 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add section on Wide_Wide_Character encodings.\n+\t* erroutc.adb (Output_Error_Msgs): Take wide characters into\n+\taccount in computing position of error flags.\n+\t* sinput.adb (Get_Column_Number): Take wide characters into\n+\taccount.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch3.adb (P_Access_Type_Definition): The subtype indication\n+\tin an access type definition can carry a null_exclusion indicator.\n+\t* sem_ch3.adb (Access_Type_Declaration): If the subtype indication\n+\tcarries a null_exclusion indicator, verify that the subtype\n+\tindication denotes an access type, and create a null-excluding\n+\tsubtype for it.\n+\t* sinfo.ads, sinfo.adb: New attribute Null_Excluding_Subtype,\n+\tdefined on N_Access_To_Object_Definition to indicate that the\n+\tsubtype indication carries a null_exclusion indicator.\n+\n+2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Extra_Actual): Do not construct\n+\tthe extra actual by name, generate a reference instead.\n+\n+2014-07-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Do not crash analyzing\n+\tAllow_Integer_Address if already set.\n+\t* a-except-2005.adb (Rcheck_PE_Stream_Operation_Not_Allowed):\n+\tFix order, for consistency with Rmsg_xx declarations.\n+\n 2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Complete_Object_Operation): If the type of the"}, {"sha": "ab29b0988f6d833459b9d91f55f665edb229b926", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -403,6 +403,9 @@ package body Ada.Exceptions is\n    --  These routines raise a specific exception with a reason message\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n+   --  Note that these routines should be declared in the same order as the\n+   --  corresponding Rmsg_xx constants below, this is needed by the\n+   --  .NET runtime (see exceptmsg.awk script).\n \n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer);\n@@ -462,8 +465,6 @@ package body Ada.Exceptions is\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Potentially_Blocking_Operation\n      (File : System.Address; Line : Integer);\n-   procedure Rcheck_PE_Stream_Operation_Not_Allowed\n-     (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Stubbed_Subprogram_Called\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_PE_Unchecked_Union_Restriction\n@@ -476,6 +477,8 @@ package body Ada.Exceptions is\n      (File : System.Address; Line : Integer);\n    procedure Rcheck_SE_Object_Too_Large\n      (File : System.Address; Line : Integer);\n+   procedure Rcheck_PE_Stream_Operation_Not_Allowed\n+     (File : System.Address; Line : Integer);\n \n    procedure Rcheck_CE_Access_Check_Ext\n      (File : System.Address; Line, Column : Integer);"}, {"sha": "4e5070a74f29acd644ea6c929e12e229927513d9", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -42,6 +42,7 @@ with Snames;   use Snames;\n with Stringt;  use Stringt;\n with Targparm; use Targparm;\n with Uintp;    use Uintp;\n+with Widechar; use Widechar;\n \n package body Erroutc is\n \n@@ -445,32 +446,75 @@ package body Erroutc is\n            and then Errors.Table (T).Line = Errors.Table (E).Line\n            and then Errors.Table (T).Sfile = Errors.Table (E).Sfile\n          loop\n-            --  Loop to output blanks till current flag position\n+            declare\n+               Src : Source_Buffer_Ptr\n+                       renames Source_Text (Errors.Table (T).Sfile);\n \n-            while P < Errors.Table (T).Sptr loop\n-               if Source_Text (Errors.Table (T).Sfile) (P) = ASCII.HT then\n-                  Write_Char (ASCII.HT);\n-               else\n-                  Write_Char (' ');\n-               end if;\n+            begin\n+               --  Loop to output blanks till current flag position\n \n-               P := P + 1;\n-            end loop;\n+               while P < Errors.Table (T).Sptr loop\n \n-            --  Output flag (unless already output, this happens if more\n-            --  than one error message occurs at the same flag position).\n+                  --  Horizontal tab case, just echo the tab\n \n-            if P = Errors.Table (T).Sptr then\n-               if (Flag_Num = 1 and then not Mult_Flags)\n-                 or else Flag_Num > 9\n-               then\n-                  Write_Char ('|');\n-               else\n-                  Write_Char (Character'Val (Character'Pos ('0') + Flag_Num));\n-               end if;\n+                  if Src (P) = ASCII.HT then\n+                     Write_Char (ASCII.HT);\n+                     P := P + 1;\n \n-               P := P + 1;\n-            end if;\n+                  --  Deal with wide character case, but don't include brackets\n+                  --  notation in this circuit, since we know that this will\n+                  --  display unencoded (no one encodes brackets notation).\n+\n+                  elsif Src (P) /= '['\n+                    and then Is_Start_Of_Wide_Char (Src, P)\n+                  then\n+                     Skip_Wide (Src, P);\n+                     Write_Char (' ');\n+\n+                  --  Normal non-wide character case (or bracket)\n+\n+                  else\n+                     P := P + 1;\n+                     Write_Char (' ');\n+                  end if;\n+               end loop;\n+\n+               --  Output flag (unless already output, this happens if more\n+               --  than one error message occurs at the same flag position).\n+\n+               if P = Errors.Table (T).Sptr then\n+                  if (Flag_Num = 1 and then not Mult_Flags)\n+                    or else Flag_Num > 9\n+                  then\n+                     Write_Char ('|');\n+                  else\n+                     Write_Char\n+                       (Character'Val (Character'Pos ('0') + Flag_Num));\n+                  end if;\n+\n+                  --  Skip past the corresponding source text character\n+\n+                  --  Horizontal tab case, we output a flag at the tab position\n+                  --  so now we output a tab to match up with the text.\n+\n+                  if Src (P) = ASCII.HT then\n+                     Write_Char (ASCII.HT);\n+                     P := P + 1;\n+\n+                  --  Skip wide character other than left bracket\n+\n+                  elsif Src (P) /= '['\n+                    and then Is_Start_Of_Wide_Char (Src, P)\n+                  then\n+                     Skip_Wide (Src, P);\n+\n+                  --  Skip normal non-wide character case (or bracket)\n+\n+                  else\n+                     P := P + 1;\n+                  end if;\n+               end if;\n+            end;\n \n             Set_Next_Non_Deleted_Msg (T);\n             Flag_Num := Flag_Num + 1;"}, {"sha": "703a4279d482e6ab6a98f04670123963fb839abe", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -2106,7 +2106,7 @@ package body Exp_Ch6 is\n \n          Append_To (Extra_Actuals,\n            Make_Parameter_Association (Loc,\n-             Selector_Name             => Make_Identifier (Loc, Chars (EF)),\n+             Selector_Name             => New_Occurrence_Of (EF, Loc),\n              Explicit_Actual_Parameter => Expr));\n \n          Analyze_And_Resolve (Expr, Etype (EF));"}, {"sha": "b4a7025fcfcd688626b5f4dc3f7d6ee7803c7297", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -1378,7 +1378,8 @@ of the compiler (@pxref{Character Set Control}).\n @menu\n * Latin-1::\n * Other 8-Bit Codes::\n-* Wide Character Encodings::\n+* Wide_Character Encodings::\n+* Wide_Wide_Character Encodings::\n @end menu\n \n @node Latin-1\n@@ -1471,8 +1472,8 @@ equivalences that are recognized, see the file @file{csets.adb} in\n the GNAT compiler sources. You will need to obtain a full source release\n of GNAT to obtain this file.\n \n-@node Wide Character Encodings\n-@subsection Wide Character Encodings\n+@node Wide_Character Encodings\n+@subsection Wide_Character Encodings\n \n @noindent\n GNAT allows wide character codes to appear in character and string\n@@ -1545,8 +1546,9 @@ where the @var{xxx} bits correspond to the left-padded bits of the\n are represented as ASCII bytes and all upper half characters and\n other wide characters are represented as sequences of upper-half\n (The full UTF-8 scheme allows for encoding 31-bit characters as\n-6-byte sequences, but in this implementation, all UTF-8 sequences\n-of four or more bytes length will be treated as illegal).\n+6-byte sequences, and in the following section on wide wide\n+characters, the use of these sequences is documented).\n+\n @item Brackets Coding\n In this encoding, a wide character is represented by the following eight\n character sequence:\n@@ -1564,8 +1566,8 @@ Brackets coding for upper half characters. For example, the code\n @code{16#A3#} can be represented as @code{[``A3'']}.\n \n This scheme is compatible with use of the full Wide_Character set,\n-and is also the method used for wide character encoding in the standard\n-ACVC (Ada Compiler Validation Capability) test suite distributions.\n+and is also the method used for wide character encoding in some standard\n+ACATS (Ada Conformity Assessment Test Suite) test suite distributions.\n \n @end table\n \n@@ -1574,6 +1576,60 @@ Note: Some of these coding schemes do not permit the full use of the\n Ada character set. For example, neither Shift JIS, nor EUC allow the\n use of the upper half of the Latin-1 set.\n \n+@node Wide_Wide_Character Encodings\n+@subsection Wide_Wide_Character Encodings\n+\n+@noindent\n+GNAT allows wide wide character codes to appear in character and string\n+literals, and also optionally in identifiers, by means of the following\n+possible encoding schemes:\n+\n+@table @asis\n+\n+@item UTF-8 Coding\n+A wide character is represented using\n+UCS Transformation Format 8 (UTF-8) as defined in Annex R of ISO\n+10646-1/Am.2. Depending on the character value, the representation\n+of character codes with values greater than 16#FFFF# is a\n+is a four, five, or six byte sequence:\n+\n+@smallexample\n+@iftex\n+@leftskip=.7cm\n+@end iftex\n+16#01_0000#-16#10_FFFF#:     11110xxx 10xxxxxx 10xxxxxx\n+                             10xxxxxx\n+16#0020_0000#-16#03FF_FFFF#: 111110xx 10xxxxxx 10xxxxxx\n+                             10xxxxxx 10xxxxxx\n+16#0400_0000#-16#7FFF_FFFF#: 1111110x 10xxxxxx 10xxxxxx\n+                             10xxxxxx 10xxxxxx 10xxxxxx\n+@end smallexample\n+\n+@noindent\n+where the @var{xxx} bits correspond to the left-padded bits of the\n+32-bit character value.\n+\n+@item Brackets Coding\n+In this encoding, a wide wide character is represented by the following ten or\n+twelve byte character sequence:\n+\n+@smallexample\n+[ \" a b c d e f \" ]\n+[ \" a b c d e f g h \" ]\n+@end smallexample\n+\n+@noindent\n+Where @code{a-h} are the six or eight hexadecimal\n+characters (using uppercase letters) of the wide wide character code. For\n+example, [\"1F4567\"] is used to represent the wide wide character with code\n+@code{16#001F_4567#}.\n+\n+This scheme is compatible with use of the full Wide_Wide_Character set,\n+and is also the method used for wide wide character encoding in some standard\n+ACATS (Ada Conformity Assessment Test Suite) test suite distributions.\n+\n+@end table\n+\n @node File Naming Rules\n @section File Naming Rules\n \n@@ -7222,7 +7278,7 @@ UTF-8 encoding (brackets encoding also recognized)\n Brackets encoding only (default value)\n @end table\n For full details on these encoding\n-methods see @ref{Wide Character Encodings}.\n+methods see @ref{Wide_Character Encodings}.\n Note that brackets coding is always accepted, even if one of the other\n options is specified, so for example @option{-gnatW8} specifies that both\n brackets and UTF-8 encodings will be recognized. The units that are"}, {"sha": "1bad0054b094863de3fd8a79f602a648be316587", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -3930,6 +3930,7 @@ package body Ch3 is\n       Access_Loc       : constant Source_Ptr := Token_Ptr;\n       Prot_Flag        : Boolean;\n       Not_Null_Present : Boolean := False;\n+      Not_Null_Subtype : Boolean := False;\n       Type_Def_Node    : Node_Id;\n       Result_Not_Null  : Boolean;\n       Result_Node      : Node_Id;\n@@ -3964,8 +3965,16 @@ package body Ch3 is\n \n    begin\n       if not Header_Already_Parsed then\n-         Not_Null_Present := P_Null_Exclusion;         --  Ada 2005 (AI-231)\n+\n+         --  not null access .. is a common form of access definition\n+         --  access non null ..  is certainly rare, but syntactically legal.\n+         --  not null access not null .. is rarer yet, and also legal.\n+         --  The last two cases are only meaningful if the following subtype\n+         --  indication denotes an access type (semantic check).\n+\n+         Not_Null_Present := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n          Scan; -- past ACCESS\n+         Not_Null_Subtype := P_Null_Exclusion;     --  Might also appear.\n       end if;\n \n       if Token_Name = Name_Protected then\n@@ -4040,6 +4049,7 @@ package body Ch3 is\n          Type_Def_Node :=\n            New_Node (N_Access_To_Object_Definition, Access_Loc);\n          Set_Null_Exclusion_Present (Type_Def_Node, Not_Null_Present);\n+         Set_Null_Excluding_Subtype (Type_Def_Node, Not_Null_Subtype);\n \n          if Token = Tok_All or else Token = Tok_Constant then\n             if Ada_Version = Ada_83 then"}, {"sha": "e93230ae2bcc3392ea18ce92f52612cd6c9379eb", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -1337,6 +1337,34 @@ package body Sem_Ch3 is\n               Process_Subtype (S, P, T, 'P'));\n          end if;\n \n+         --  If the access definition is of the form : access not null ..\n+         --  the subtype indication must be of an access type. Create\n+         --  a null-excluding subtype of it.\n+\n+         if Null_Excluding_Subtype (Def) then\n+            if not Is_Access_Type (Entity (S)) then\n+               Error_Msg_N (\"null exclusion must apply to access type\", Def);\n+\n+            else\n+               declare\n+                  Loc  : constant Source_Ptr := Sloc (S);\n+                  Decl : Node_Id;\n+                  Nam  : constant Entity_Id := Make_Temporary (Loc, 'S');\n+\n+               begin\n+                  Decl :=\n+                    Make_Subtype_Declaration (Loc,\n+                      Defining_Identifier => Nam,\n+                      Subtype_Indication =>\n+                        New_Occurrence_Of (Entity (S), Loc));\n+                  Set_Null_Exclusion_Present (Decl);\n+                  Insert_Before (Parent (Def), Decl);\n+                  Analyze (Decl);\n+                  Set_Entity (S, Nam);\n+               end;\n+            end if;\n+         end if;\n+\n       else\n          Set_Directly_Designated_Type (T,\n            Process_Subtype (S, P, T, 'P'));"}, {"sha": "208a9541d25ee17ce7bb6d6f2c6a5935805ed09d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -11019,8 +11019,13 @@ package body Sem_Prag is\n             --  integer address values. If Address is not private (e.g. on\n             --  VMS, where it is an integer type), then this pragma has no\n             --  purpose, so it is simply ignored.\n+            --  If Allow_Integer_Address is already set do nothing, otherwise\n+            --  calling RTE on RE_Address would cause a crash when loading\n+            --  system.ads.\n \n-            if Is_Private_Type (RTE (RE_Address)) then\n+            if not Opt.Allow_Integer_Address\n+              and then Is_Private_Type (RTE (RE_Address))\n+            then\n                Opt.Allow_Integer_Address := True;\n             end if;\n "}, {"sha": "3ea385c3877c6254fd1442f675128408ae6baaed", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -2382,6 +2382,14 @@ package body Sinfo is\n       return Flag13 (N);\n    end Null_Present;\n \n+   function Null_Excluding_Subtype\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_To_Object_Definition);\n+      return Flag16 (N);\n+   end Null_Excluding_Subtype;\n+\n    function Null_Exclusion_Present\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5565,6 +5573,14 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Null_Present;\n \n+   procedure Set_Null_Excluding_Subtype\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_To_Object_Definition);\n+      Set_Flag16 (N, Val);\n+   end Set_Null_Excluding_Subtype;\n+\n    procedure Set_Null_Exclusion_Present\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "1b2ae3ea2d61851458136e7a0d905143dc61e7e1", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -3369,6 +3369,7 @@ package Sinfo is\n       --  Sloc points to ACCESS\n       --  All_Present (Flag15)\n       --  Null_Exclusion_Present (Flag11)\n+      --  Null_Excluding_Subtype (Flag16)\n       --  Subtype_Indication (Node5)\n       --  Constant_Present (Flag17)\n \n@@ -9363,6 +9364,9 @@ package Sinfo is\n    function Null_Present\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Null_Excluding_Subtype\n+     (N : Node_Id) return Boolean;    -- Flag16\n+\n    function Null_Exclusion_Present\n      (N : Node_Id) return Boolean;    -- Flag11\n \n@@ -10377,6 +10381,9 @@ package Sinfo is\n    procedure Set_Null_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Null_Excluding_Subtype\n+     (N : Node_Id; Val : Boolean := True);    -- Flag16\n+\n    procedure Set_Null_Exclusion_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n@@ -12652,6 +12659,7 @@ package Sinfo is\n    pragma Inline (No_Truncation);\n    pragma Inline (Non_Aliased_Prefix);\n    pragma Inline (Null_Present);\n+   pragma Inline (Null_Excluding_Subtype);\n    pragma Inline (Null_Exclusion_Present);\n    pragma Inline (Null_Exclusion_In_Return_Present);\n    pragma Inline (Null_Record_Present);\n@@ -12985,6 +12993,7 @@ package Sinfo is\n    pragma Inline (Set_No_Minimize_Eliminate);\n    pragma Inline (Set_No_Truncation);\n    pragma Inline (Set_Non_Aliased_Prefix);\n+   pragma Inline (Set_Null_Excluding_Subtype);\n    pragma Inline (Set_Null_Exclusion_Present);\n    pragma Inline (Set_Null_Exclusion_In_Return_Present);\n    pragma Inline (Set_Null_Present);"}, {"sha": "70d44816f94938da5e1f93183107a3813302771f", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c22774192312c94ad7809290aab6da33b40d7/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=7a2c22774192312c94ad7809290aab6da33b40d7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -331,11 +331,22 @@ package body Sinput is\n          while S < P loop\n             if Src (S) = HT then\n                C := (C - 1) / 8 * 8 + (8 + 1);\n+               S := S + 1;\n+\n+            --  Deal with wide character case, but don't include brackets\n+            --  notation in this circuit, since we know that this will\n+            --  display unencoded (no one encodes brackets notation).\n+\n+            elsif Src (S) /= '[' and then Is_Start_Of_Wide_Char (Src, S) then\n+               C := C + 1;\n+               Skip_Wide (Src, S);\n+\n+            --  Normal (non-wide) character case or brackets sequence\n+\n             else\n                C := C + 1;\n+               S := S + 1;\n             end if;\n-\n-            S := S + 1;\n          end loop;\n \n          return C;"}]}