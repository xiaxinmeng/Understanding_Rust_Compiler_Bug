{"sha": "7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxYTUxNTZmOWU1YjgyMTk4M2MxMDM3NWE0NmE5MjM2Y2RmYzljYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-08-01T14:31:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:31:20Z"}, "message": "einfo.ads (Has_Private_Ancestor): Remove obsolete usage.\n\n2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads (Has_Private_Ancestor): Remove obsolete usage.\n\t* exp_ch4.adb (Expand_Composite_Equality): Add conversion\n\tof the actuals in the case of untagged record types too.\n\t* sem_ch3.adb (Build_Full_Derivation): New procedure to create the\n\tfull derivation of a derived private type, extracted from...\n\t(Copy_And_Build): In the case of record types and most\n\tenumeration types, copy the original declaration.  Build the\n\tfull derivation according to the approach extracted from...\n\t(Build_Derived_Private_Type): ...here.\tCall Build_Full_Derivation\n\tto create the full derivation in all existing cases and also\n\tcreate it in the no-discriminants/discriminants case instead of\n\tderiving directly from the full view.\n\t(Is_Visible_Component): Remove obsolete code.\n\t* sem_aggr.adb (Resolve_Record_Aggregate): Likewise.\n\nFrom-SVN: r213476", "tree": {"sha": "57d5f2429f8a62011a2db25fc2155db30eea6d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57d5f2429f8a62011a2db25fc2155db30eea6d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/comments", "author": null, "committer": null, "parents": [{"sha": "b5119ab13d85cabd201d037d3a20a720b7c1aa05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5119ab13d85cabd201d037d3a20a720b7c1aa05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5119ab13d85cabd201d037d3a20a720b7c1aa05"}], "stats": {"total": 388, "additions": 177, "deletions": 211}, "files": [{"sha": "5371789dc93130c0fd8ba8539ab5863c944bc1af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "patch": "@@ -1,3 +1,20 @@\n+2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Has_Private_Ancestor): Remove obsolete usage.\n+\t* exp_ch4.adb (Expand_Composite_Equality): Add conversion\n+\tof the actuals in the case of untagged record types too.\n+\t* sem_ch3.adb (Build_Full_Derivation): New procedure to create the\n+\tfull derivation of a derived private type, extracted from...\n+\t(Copy_And_Build): In the case of record types and most\n+\tenumeration types, copy the original declaration.  Build the\n+\tfull derivation according to the approach extracted from...\n+\t(Build_Derived_Private_Type): ...here.\tCall Build_Full_Derivation\n+\tto create the full derivation in all existing cases and also\n+\tcreate it in the no-discriminants/discriminants case instead of\n+\tderiving directly from the full view.\n+\t(Is_Visible_Component): Remove obsolete code.\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Likewise.\n+\n 2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n \n \t* fe.h (GNAT_Mode): New."}, {"sha": "fc8275a9567c964b42f7dcb1ac0516a996c98e21", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "patch": "@@ -1799,14 +1799,12 @@ package Einfo is\n --       is defined for the type.\n \n --    Has_Private_Ancestor (Flag151)\n---       Applies to untagged derived types and to type extensions. True when\n---       some ancestor is derived from a private type, making some components\n---       invisible and aggregates illegal. Used to check the legality of\n---       selected components and aggregates. The flag is set at the point of\n---       derivation. The legality of an aggregate of a type with a private\n---       ancestor must be checked because it also depends on the visibility\n---       at the point the aggregate is resolved. See sem_aggr.adb. This is\n---       part of AI05-0115.\n+--       Applies to type extensions. True if some ancestor is derived from a\n+--       private type, making some components invisible and aggregates illegal.\n+--       This flag is set at the point of derivation. The legality of the\n+--       aggregate must be rechecked because it also depends on the visibility\n+--       at the point the aggregate is resolved. See sem_aggr.adb.\n+--       This is part of AI05-0115.\n \n --    Has_Private_Declaration (Flag155)\n --       Defined in all entities. Set if it is the defining entity of a private"}, {"sha": "3692617f0d467621b3afc956e5c6f064cb37203c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "patch": "@@ -2829,10 +2829,17 @@ package body Exp_Ch4 is\n                   end;\n \n                else\n-                  return\n-                    Make_Function_Call (Loc,\n-                      Name                   => New_Occurrence_Of (Eq_Op, Loc),\n-                      Parameter_Associations => New_List (Lhs, Rhs));\n+                  declare\n+                     T : constant Entity_Id := Etype (First_Formal (Eq_Op));\n+\n+                  begin\n+                     return\n+                       Make_Function_Call (Loc,\n+                         Name => New_Occurrence_Of (Eq_Op, Loc),\n+                         Parameter_Associations => New_List (\n+                           OK_Convert_To (T, Lhs),\n+                           OK_Convert_To (T, Rhs)));\n+                  end;\n                end if;\n             end if;\n "}, {"sha": "5a0fb100f525c4bb9b5837c48e35836b8230b524", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "patch": "@@ -3984,21 +3984,6 @@ package body Sem_Aggr is\n          --  Typ is not a derived tagged type\n \n          else\n-            --  A type derived from an untagged private type whose full view\n-            --  has discriminants is constructed as a record type but there\n-            --  are no legal aggregates for it.\n-\n-            if Is_Derived_Type (Typ)\n-              and then Has_Private_Ancestor (Typ)\n-              and then Nkind (N) /= N_Extension_Aggregate\n-            then\n-               Error_Msg_Node_2 := Base_Type (Etype (Typ));\n-               Error_Msg_NE\n-                 (\"no aggregate available for type& derived from \"\n-                  & \"private type&\", N, Typ);\n-               return;\n-            end if;\n-\n             Record_Def := Type_Definition (Parent (Base_Type (Typ)));\n \n             if Null_Present (Record_Def) then"}, {"sha": "3196b33e2e850b67612c06fd066f0cde86dbc4c4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 143, "deletions": 184, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1a5156f9e5b821983c10375a46a9236cdfc9cc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7f1a5156f9e5b821983c10375a46a9236cdfc9cc", "patch": "@@ -6543,40 +6543,143 @@ package body Sem_Ch3 is\n       Loc         : constant Source_Ptr := Sloc (N);\n       Der_Base    : Entity_Id;\n       Discr       : Entity_Id;\n-      Full_Decl   : Node_Id := Empty;\n       Full_Der    : Entity_Id;\n       Full_P      : Entity_Id;\n       Last_Discr  : Entity_Id;\n       Par_Scope   : constant Entity_Id := Scope (Base_Type (Parent_Type));\n-      Swapped     : Boolean := False;\n+\n+      procedure Build_Full_Derivation;\n+      --  Build full derivation, i.e. derive from the full view\n \n       procedure Copy_And_Build;\n       --  Copy derived type declaration, replace parent with its full view,\n-      --  and analyze new declaration.\n+      --  and build derivation\n+\n+      ---------------------------\n+      -- Build_Full_Derivation --\n+      ---------------------------\n+\n+      procedure Build_Full_Derivation is\n+      begin\n+         --  If parent scope is not open, install the declarations\n+\n+         if not In_Open_Scopes (Par_Scope) then\n+            Install_Private_Declarations (Par_Scope);\n+            Install_Visible_Declarations (Par_Scope);\n+            Copy_And_Build;\n+            Uninstall_Declarations (Par_Scope);\n+\n+         --  If parent scope is open and in another unit, and parent has a\n+         --  completion, then the derivation is taking place in the visible\n+         --  part of a child unit. In that case retrieve the full view of\n+         --  the parent momentarily.\n+\n+         elsif not In_Same_Source_Unit (N, Parent_Type) then\n+            Full_P := Full_View (Parent_Type);\n+            Exchange_Declarations (Parent_Type);\n+            Copy_And_Build;\n+            Exchange_Declarations (Full_P);\n+\n+         --  Otherwise it is a local derivation\n+\n+         else\n+            Copy_And_Build;\n+         end if;\n+      end Build_Full_Derivation;\n \n       --------------------\n       -- Copy_And_Build --\n       --------------------\n \n       procedure Copy_And_Build is\n-         Full_N : Node_Id;\n+         Full_N      : Node_Id;\n+         Full_Parent : Entity_Id := Parent_Type;\n \n       begin\n-         if Ekind (Parent_Type) in Record_Kind\n+         --  If the parent is itself derived from another private type,\n+         --  installing the private declarations has not affected its\n+         --  privacy status, so use its own full view explicitly.\n+\n+         if Is_Private_Type (Full_Parent)\n+           and then Present (Full_View (Full_Parent))\n+         then\n+            Full_Parent := Full_View (Full_Parent);\n+         end if;\n+\n+         if Ekind (Full_Parent) in Record_Kind\n            or else\n-             (Ekind (Parent_Type) in Enumeration_Kind\n-               and then not Is_Standard_Character_Type (Parent_Type)\n-               and then not Is_Generic_Type (Root_Type (Parent_Type)))\n+             (Ekind (Full_Parent) in Enumeration_Kind\n+               and then not Is_Standard_Character_Type (Full_Parent)\n+               and then not Is_Generic_Type (Root_Type (Full_Parent)))\n          then\n+            --  Copy declaration to provide a completion for what is a private\n+            --  declaration. Indicate that full view is internally generated.\n+\n             Full_N := New_Copy_Tree (N);\n+            Full_Der := New_Copy (Derived_Type);\n+            Set_Comes_From_Source (Full_N, False);\n+            Set_Comes_From_Source (Full_Der, False);\n+            Set_Defining_Identifier (Full_N, Full_Der);\n+            Set_Parent (Full_Der, Full_N);\n             Insert_After (N, Full_N);\n-            Build_Derived_Type (\n-              Full_N, Parent_Type, Full_Der, True, Derive_Subps => False);\n+\n+            --  Build full view of derived type from full view of parent which\n+            --  is now installed. Subprograms have been derived on the partial\n+            --  view, the completion does not derive them anew.\n+\n+            if Ekind (Full_Parent) in Record_Kind then\n+               --  If parent type is tagged, the completion inherits the proper\n+               --  primitive operations.\n+\n+               if Is_Tagged_Type (Parent_Type) then\n+                  Build_Derived_Record_Type (\n+                    Full_N, Full_Parent, Full_Der, Derive_Subps);\n+               else\n+                  Build_Derived_Record_Type (\n+                    Full_N, Full_Parent, Full_Der, Derive_Subps => False);\n+               end if;\n+\n+            else\n+               Build_Derived_Enumeration_Type (Full_N, Full_Parent, Full_Der);\n+            end if;\n+\n+            --  The full declaration has been introduced into the tree and\n+            --  processed in the step above. It should not be analyzed again\n+            --  (when encountered later in the current list of declarations)\n+            --  to prevent spurious name conflicts. The full entity remains\n+            --  invisible.\n+\n+            Set_Analyzed (Full_N);\n \n          else\n+            Full_Der :=\n+              Make_Defining_Identifier\n+                (Sloc (Derived_Type), Chars (Derived_Type));\n+            Set_Is_Itype (Full_Der);\n+            Set_Associated_Node_For_Itype (Full_Der, N);\n+            Set_Parent (Full_Der, N);\n             Build_Derived_Type (\n-              N, Parent_Type, Full_Der, True, Derive_Subps => False);\n+              N, Full_Parent, Full_Der, True, Derive_Subps => False);\n          end if;\n+\n+         Set_Has_Private_Declaration (Full_Der);\n+         Set_Has_Private_Declaration (Derived_Type);\n+\n+         Set_Scope                (Full_Der, Scope (Derived_Type));\n+         Set_Is_First_Subtype     (Full_Der, Is_First_Subtype (Derived_Type));\n+         Set_Has_Size_Clause      (Full_Der, False);\n+         Set_Has_Alignment_Clause (Full_Der, False);\n+         Set_Has_Delayed_Freeze   (Full_Der);\n+         Set_Is_Frozen            (Full_Der, False);\n+         Set_Freeze_Node          (Full_Der, Empty);\n+         Set_Depends_On_Private   (Full_Der, Has_Private_Component (Full_Der));\n+         Set_Is_Public            (Full_Der, Is_Public (Derived_Type));\n+\n+         --  The convention on the base type may be set in the private part\n+         --  and not propagated to the subtype until later, so we obtain the\n+         --  convention from the base type of the parent.\n+\n+         Set_Convention (Full_Der, Convention (Base_Type (Full_Parent)));\n       end Copy_And_Build;\n \n    --  Start of processing for Build_Derived_Private_Type\n@@ -6688,18 +6791,10 @@ package body Sem_Ch3 is\n       elsif Has_Discriminants (Parent_Type) then\n          if Present (Full_View (Parent_Type)) then\n             if not Is_Completion then\n+               --  If this is not a completion, construct the implicit full\n+               --  view by deriving from the full view of the parent type.\n \n-               --  Copy declaration for subsequent analysis, to provide a\n-               --  completion for what is a private declaration. Indicate that\n-               --  the full type is internally generated.\n-\n-               Full_Decl := New_Copy_Tree (N);\n-               Full_Der  := New_Copy (Derived_Type);\n-               Set_Comes_From_Source (Full_Decl, False);\n-               Set_Comes_From_Source (Full_Der, False);\n-               Set_Parent (Full_Der, Full_Decl);\n-\n-               Insert_After (N, Full_Decl);\n+               Build_Full_Derivation;\n \n             else\n                --  If this is a completion, the full view being built is itself\n@@ -6736,58 +6831,7 @@ package body Sem_Ch3 is\n            (N, Parent_Type, Derived_Type, Derive_Subps);\n \n          if Present (Full_View (Parent_Type)) and then not Is_Completion then\n-            if not In_Open_Scopes (Par_Scope)\n-              or else not In_Same_Source_Unit (N, Parent_Type)\n-            then\n-               --  Swap partial and full views temporarily\n-\n-               Install_Private_Declarations (Par_Scope);\n-               Install_Visible_Declarations (Par_Scope);\n-               Swapped := True;\n-            end if;\n-\n-            --  Build full view of derived type from full view of parent which\n-            --  is now installed. Subprograms have been derived on the partial\n-            --  view, the completion does not derive them anew.\n-\n-            if not Is_Tagged_Type (Parent_Type) then\n-\n-               --  If the parent is itself derived from another private type,\n-               --  installing the private declarations has not affected its\n-               --  privacy status, so use its own full view explicitly.\n-\n-               if Is_Private_Type (Parent_Type) then\n-                  Build_Derived_Record_Type\n-                    (Full_Decl, Full_View (Parent_Type), Full_Der, False);\n-               else\n-                  Build_Derived_Record_Type\n-                    (Full_Decl, Parent_Type, Full_Der, False);\n-               end if;\n-\n-            else\n-               --  If full view of parent is tagged, the completion inherits\n-               --  the proper primitive operations.\n-\n-               Set_Defining_Identifier (Full_Decl, Full_Der);\n-               Build_Derived_Record_Type\n-                 (Full_Decl, Parent_Type, Full_Der, Derive_Subps);\n-            end if;\n-\n-            --  The full declaration has been introduced into the tree and\n-            --  processed in the step above. It should not be analyzed again\n-            --  (when encountered later in the current list of declarations)\n-            --  to prevent spurious name conflicts. The full entity remains\n-            --  invisible.\n-\n-            Set_Analyzed (Full_Decl);\n-\n-            if Swapped then\n-               Uninstall_Declarations (Par_Scope);\n-\n-               if In_Open_Scopes (Par_Scope) then\n-                  Install_Visible_Declarations (Par_Scope);\n-               end if;\n-            end if;\n+            --  Install full view in derived type (base type and subtype)\n \n             Der_Base := Base_Type (Derived_Type);\n             Set_Full_View (Derived_Type, Full_Der);\n@@ -6815,18 +6859,10 @@ package body Sem_Ch3 is\n             Set_First_Entity (Derived_Type, First_Entity (Der_Base));\n             Set_Last_Entity  (Derived_Type, Last_Entity  (Der_Base));\n             Set_Stored_Constraint (Full_Der, Stored_Constraint (Derived_Type));\n-\n-         else\n-            --  If this is a completion, the derived type stays private and\n-            --  there is no need to create a further full view, except in the\n-            --  unusual case when the derivation is nested within a child unit,\n-            --  see below.\n-\n-            null;\n          end if;\n \n       elsif Present (Full_View (Parent_Type))\n-        and then  Has_Discriminants (Full_View (Parent_Type))\n+        and then Has_Discriminants (Full_View (Parent_Type))\n       then\n          if Has_Unknown_Discriminants (Parent_Type)\n            and then Nkind (Subtype_Indication (Type_Definition (N))) =\n@@ -6838,43 +6874,20 @@ package body Sem_Ch3 is\n             return;\n          end if;\n \n-         --  If full view of parent is a record type, build full view as a\n-         --  derivation from the parent's full view. Partial view remains\n-         --  private. For code generation and linking, the full view must have\n-         --  the same public status as the partial one. This full view is only\n-         --  needed if the parent type is in an enclosing scope, so that the\n-         --  full view may actually become visible, e.g. in a child unit. This\n-         --  is both more efficient, and avoids order of freezing problems with\n-         --  the added entities.\n+         if not Is_Completion then\n+            --  If this is not a completion, construct the implicit full view\n+            --  by deriving from the full view of the parent type.\n \n-         if not Is_Private_Type (Full_View (Parent_Type))\n-           and then (In_Open_Scopes (Scope (Parent_Type)))\n-         then\n-            Full_Der :=\n-              Make_Defining_Identifier (Sloc (Derived_Type),\n-                Chars => Chars (Derived_Type));\n-\n-            Set_Is_Itype (Full_Der);\n-            Set_Has_Private_Declaration (Full_Der);\n-            Set_Has_Private_Declaration (Derived_Type);\n-            Set_Associated_Node_For_Itype (Full_Der, N);\n-            Set_Parent (Full_Der, Parent (Derived_Type));\n+            Build_Full_Derivation;\n             Set_Full_View (Derived_Type, Full_Der);\n-            Set_Is_Public (Full_Der, Is_Public (Derived_Type));\n-            Full_P := Full_View (Parent_Type);\n-            Exchange_Declarations (Parent_Type);\n-            Copy_And_Build;\n-            Exchange_Declarations (Full_P);\n \n          else\n-            Build_Derived_Record_Type\n-              (N, Full_View (Parent_Type), Derived_Type,\n-               Derive_Subps => False);\n+            --  If this is a completion, the full view being built is itself\n+            --  private. Construct an underlying full view by deriving from\n+            --  the full view of the parent type.\n \n-            --  Except in the context of the full view of the parent, there\n-            --  are no non-extension aggregates for the derived type.\n-\n-            Set_Has_Private_Ancestor (Derived_Type);\n+            Build_Full_Derivation;\n+            Set_Underlying_Full_View (Derived_Type, Full_Der);\n          end if;\n \n          --  In any case, the primitive operations are inherited from the\n@@ -6886,6 +6899,10 @@ package body Sem_Ch3 is\n             Derive_Subprograms (Parent_Type, Derived_Type);\n          end if;\n \n+         Set_Stored_Constraint (Derived_Type, No_Elist);\n+         Set_Is_Constrained\n+           (Derived_Type, Is_Constrained (Full_View (Parent_Type)));\n+\n       else\n          --  Untagged type, No discriminants on either view\n \n@@ -6917,9 +6934,8 @@ package body Sem_Ch3 is\n               (Base_Type (Derived_Type), Finalize_Storage_Only (Parent_Type));\n          end if;\n \n-         --  Construct the implicit full view by deriving from full view of the\n-         --  parent type. In order to get proper visibility, we install the\n-         --  parent scope and its declarations.\n+         --  If this is not a completion, construct the implicit full view by\n+         --  deriving from the full view of the parent type.\n \n          --  ??? If the parent is untagged private and its completion is\n          --  tagged, this mechanism will not work because we cannot derive from\n@@ -6929,51 +6945,8 @@ package body Sem_Ch3 is\n            and then not Is_Tagged_Type (Full_View (Parent_Type))\n            and then not Is_Completion\n          then\n-            Full_Der :=\n-              Make_Defining_Identifier\n-                (Sloc (Derived_Type), Chars (Derived_Type));\n-            Set_Is_Itype (Full_Der);\n-            Set_Has_Private_Declaration (Full_Der);\n-            Set_Has_Private_Declaration (Derived_Type);\n-            Set_Associated_Node_For_Itype (Full_Der, N);\n-            Set_Parent (Full_Der, Parent (Derived_Type));\n+            Build_Full_Derivation;\n             Set_Full_View (Derived_Type, Full_Der);\n-\n-            if not In_Open_Scopes (Par_Scope) then\n-               Install_Private_Declarations (Par_Scope);\n-               Install_Visible_Declarations (Par_Scope);\n-               Copy_And_Build;\n-               Uninstall_Declarations (Par_Scope);\n-\n-            --  If parent scope is open and in another unit, and parent has a\n-            --  completion, then the derivation is taking place in the visible\n-            --  part of a child unit. In that case retrieve the full view of\n-            --  the parent momentarily.\n-\n-            elsif not In_Same_Source_Unit (N, Parent_Type) then\n-               Full_P := Full_View (Parent_Type);\n-               Exchange_Declarations (Parent_Type);\n-               Copy_And_Build;\n-               Exchange_Declarations (Full_P);\n-\n-            --  Otherwise it is a local derivation\n-\n-            else\n-               Copy_And_Build;\n-            end if;\n-\n-            Set_Scope                (Full_Der, Current_Scope);\n-            Set_Is_First_Subtype     (Full_Der,\n-                                       Is_First_Subtype (Derived_Type));\n-            Set_Has_Size_Clause      (Full_Der, False);\n-            Set_Has_Alignment_Clause (Full_Der, False);\n-            Set_Next_Entity          (Full_Der, Empty);\n-            Set_Has_Delayed_Freeze   (Full_Der);\n-            Set_Is_Frozen            (Full_Der, False);\n-            Set_Freeze_Node          (Full_Der, Empty);\n-            Set_Depends_On_Private   (Full_Der,\n-                                       Has_Private_Component (Full_Der));\n-            Set_Public_Status        (Full_Der);\n          end if;\n       end if;\n \n@@ -7012,25 +6985,17 @@ package body Sem_Ch3 is\n             --  underlying full view that will be installed when the enclosing\n             --  child body is compiled.\n \n-            Full_Der :=\n-              Make_Defining_Identifier\n-                (Sloc (Derived_Type), Chars (Derived_Type));\n-            Set_Is_Itype (Full_Der);\n-            Build_Itype_Reference (Full_Der, N);\n+            if Present (Underlying_Full_View (Derived_Type)) then\n+               Full_Der := Underlying_Full_View (Derived_Type);\n+            else\n+               Build_Full_Derivation;\n+               Set_Underlying_Full_View (Derived_Type, Full_Der);\n+            end if;\n \n             --  The full view will be used to swap entities on entry/exit to\n             --  the body, and must appear in the entity list for the package.\n \n             Append_Entity (Full_Der, Scope (Derived_Type));\n-            Set_Has_Private_Declaration (Full_Der);\n-            Set_Has_Private_Declaration (Derived_Type);\n-            Set_Associated_Node_For_Itype (Full_Der, N);\n-            Set_Parent (Full_Der, Parent (Derived_Type));\n-            Full_P := Full_View (Parent_Type);\n-            Exchange_Declarations (Parent_Type);\n-            Copy_And_Build;\n-            Exchange_Declarations (Full_P);\n-            Set_Underlying_Full_View (Derived_Type, Full_Der);\n          end if;\n       end if;\n    end Build_Derived_Private_Type;\n@@ -16991,16 +16956,10 @@ package body Sem_Ch3 is\n          Type_Scope     := Scope (Base_Type (Scope (C)));\n       end if;\n \n-      --  For an untagged type derived from a private type, the only visible\n-      --  components are new discriminants. In an instance all components are\n-      --  visible (see Analyze_Selected_Component).\n+      --  This test only concerns tagged types\n \n       if not Is_Tagged_Type (Original_Scope) then\n-         return not Has_Private_Ancestor (Original_Scope)\n-           or else In_Open_Scopes (Scope (Original_Scope))\n-           or else In_Instance\n-           or else (Ekind (Original_Comp) = E_Discriminant\n-                     and then Original_Scope = Type_Scope);\n+         return True;\n \n       --  If it is _Parent or _Tag, there is no visibility issue\n "}]}