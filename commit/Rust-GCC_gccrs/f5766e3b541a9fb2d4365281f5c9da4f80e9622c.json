{"sha": "f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3NjZlM2I1NDFhOWZiMmQ0MzY1MjgxZjVjOWRhNGY4MGU5NjIyYw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-09-19T08:13:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:13:43Z"}, "message": "[Ada] Move SPARK borrow-checker to gnat2why codebase\n\nUnit sem_spark was implementing the borrow-checker for the support of\nownership pointers in SPARK. It has been moved to gnat2why codebase to\nfacilitate its evolution and allow the more powerful flow analysis to\nprovide its results for better analysis on pointers.\n\n2019-09-19  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* gcc-interface/Make-lang.in: Remove references to sem_spark.\n\t* sem_spark.adb, sem_spark.ads: Remove unit.\n\nFrom-SVN: r275944", "tree": {"sha": "0aaba9f2889d98fbd1d3597ff8aa0501c13723cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aaba9f2889d98fbd1d3597ff8aa0501c13723cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5766e3b541a9fb2d4365281f5c9da4f80e9622c/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ec2787e0ba7b508c968c330b04575d2cbf97d7"}], "stats": {"total": 6362, "additions": 5, "deletions": 6357}, "files": [{"sha": "6fa4edf21ca67c213f4b4de48c67a6a41867f54a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5766e3b541a9fb2d4365281f5c9da4f80e9622c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5766e3b541a9fb2d4365281f5c9da4f80e9622c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "patch": "@@ -1,3 +1,8 @@\n+2019-09-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: Remove references to sem_spark.\n+\t* sem_spark.adb, sem_spark.ads: Remove unit.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Treat"}, {"sha": "276c41c2edf2cd5fa5dad1307ac71173fbfd6bb4", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5766e3b541a9fb2d4365281f5c9da4f80e9622c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5766e3b541a9fb2d4365281f5c9da4f80e9622c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=f5766e3b541a9fb2d4365281f5c9da4f80e9622c", "patch": "@@ -450,7 +450,6 @@ GNAT_ADA_OBJS =\t\\\n  ada/sem_res.o\t\\\n  ada/sem_scil.o\t\\\n  ada/sem_smem.o\t\\\n- ada/sem_spark.o\t\\\n  ada/sem_type.o\t\\\n  ada/sem_util.o\t\\\n  ada/sem_warn.o\t\\"}, {"sha": "e4a8b3ecaaf9e4eef9703e7591cf72b9f8632edf", "filename": "gcc/ada/sem_spark.adb", "status": "removed", "additions": 0, "deletions": 6179, "changes": 6179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=d8ec2787e0ba7b508c968c330b04575d2cbf97d7"}, {"sha": "ff9aa633ab0b93c19dc7770fb6f1da69f0a2d1a1", "filename": "gcc/ada/sem_spark.ads", "status": "removed", "additions": 0, "deletions": 177, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ec2787e0ba7b508c968c330b04575d2cbf97d7/gcc%2Fada%2Fsem_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.ads?ref=d8ec2787e0ba7b508c968c330b04575d2cbf97d7", "patch": "@@ -1,177 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                            S E M _ S P A R K                             --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---              Copyright (C) 2017-2019, Free Software Foundation, Inc.     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package implements an ownership analysis for access types. The rules\n---  that are enforced are defined in section 3.10 of the SPARK Reference\n---  Manual.\n---\n---  Check_Safe_Pointers is called by Gnat1drv, when GNATprove mode is\n---  activated. It does an analysis of the source code, looking for code that is\n---  considered as SPARK and launches another function called Analyze_Node that\n---  will do the whole analysis.\n---\n---  A path is an abstraction of a name, of which all indices, slices (for\n---  indexed components) and function calls have been abstracted and all\n---  dereferences are made explicit. A path is the atomic element viewed by the\n---  analysis, with the notion of prefixes and extensions of different paths.\n---\n---  The analysis explores the AST, and looks for different constructs\n---  that may involve aliasing. These main constructs are assignments\n---  (N_Assignment_Statement, N_Object_Declaration, ...), or calls\n---  (N_Procedure_Call_Statement, N_Entry_Call_Statement, N_Function_Call).\n---  The analysis checks the permissions of each construct and updates them\n---  according to the SPARK RM. This can follow three main different types\n---  of operations: move, borrow, and observe.\n-\n-----------------------------\n--- Deep and shallow types --\n-----------------------------\n-\n---  The analysis focuses on objects that can cause problems in terms of pointer\n---  aliasing. These objects have types that are called deep. Deep types are\n---  defined as being either types with an access part or class-wide types\n---  (which may have an access part in a derived type). Non-deep types are\n---  called shallow. Some objects of shallow type may cause pointer aliasing\n---  problems when they are explicitely marked as aliased (and then the aliasing\n---  occurs when we take the Access to this object and store it in a pointer).\n-\n-----------\n--- Move --\n-----------\n-\n---  Moves can happen at several points in the program: during assignment (and\n---  any similar statement such as object declaration with initial value), or\n---  during return statements.\n---\n---  The underlying concept consists of transferring the ownership of any path\n---  on the right-hand side to the left-hand side. There are some details that\n---  should be taken into account so as not to transfer paths that appear only\n---  as intermediate results of a more complex expression.\n-\n---  More specifically, the SPARK RM defines moved expressions, and any moved\n---  expression that points directly to a path is then checked and sees its\n---  permissions updated accordingly.\n-\n-------------\n--- Borrow --\n-------------\n-\n---  Borrows can happen in subprogram calls. They consist of a temporary\n---  transfer of ownership from a caller to a callee. Expressions that can be\n---  borrowed can be found in either procedure or entry actual parameters, and\n---  consist of parameters of mode either \"out\" or \"in out\", or parameters of\n---  mode \"in\" that are of type nonconstant access-to-variable. We consider\n---  global variables as implicit parameters to subprograms, with their mode\n---  given by the Global contract associated to the subprogram. Note that the\n---  analysis looks for such a Global contract mentioning any global variable\n---  of deep type accessed directly in the subprogram, and it raises an error if\n---  there is no Global contract, or if the Global contract does not mention the\n---  variable.\n---\n---  A borrow of a parameter X is equivalent in terms of aliasing to moving\n---  X'Access to the callee, and then assigning back X at the end of the call.\n---\n---  Borrowed parameters should have read-write permission (or write-only for\n---  \"out\" parameters), and should all have read-write permission at the end\n---  of the call (this guarantee is ensured by the callee).\n-\n--------------\n--- Observe --\n--------------\n-\n---  Observed parameters are all the other parameters that are not borrowed and\n---  that may cause problems with aliasing. They are considered as being sent to\n---  the callee with Read-Only permission, so that they can be aliased safely.\n---  This is the only construct that allows aliasing that does not prevent\n---  accessing the old path that is being aliased. However, this comes with\n---  the restriction that those aliased path cannot be written in the callee.\n-\n---------------------\n--- Implementation --\n---------------------\n-\n---  The implementation is based on trees that represent the possible paths\n---  in the source code. Those trees can be unbounded in depth, hence they are\n---  represented using lazy data structures, whose laziness is handled manually.\n---  Each time an identifier is declared, its path is added to the permission\n---  environment as a tree with only one node, the declared identifier. Each\n---  time a path is checked or updated, we look in the tree at the adequate\n---  node, unfolding the tree whenever needed.\n-\n---  For this, each node has several variables that indicate whether it is\n---  deep (Is_Node_Deep), what permission it has (Permission), and what is\n---  the lowest permission of all its descendants (Children_Permission). After\n---  unfolding the tree, we update the permissions of each node, deleting the\n---  Children_Permission, and specifying new ones for the leaves of the unfolded\n---  tree.\n-\n---  After assigning a path, the descendants of the assigned path are dumped\n---  (and hence the tree is folded back), given that all descendants directly\n---  get read-write permission, which can be specified using the node's\n---  Children_Permission field.\n-\n---  The implementation is done as a generic, so that GNATprove can instantiate\n---  it with suitable formal arguments that depend on the SPARK_Mode boundary\n---  as well as the two-phase architecture of GNATprove (which runs the GNAT\n---  front end twice, once for global generation and once for analysis).\n-\n-with Types; use Types;\n-\n-generic\n-   with function Retysp (X : Entity_Id) return Entity_Id;\n-   --  Return the representative type in SPARK for a type.\n-\n-   with function Component_Is_Visible_In_SPARK (C : Entity_Id) return Boolean;\n-   --  Return whether a component is visible in SPARK. No aliasing check is\n-   --  performed for a component that is visible.\n-\n-   with function Emit_Messages return Boolean;\n-   --  Return True when error messages should be emitted.\n-\n-   with function Is_Pledge_Function (E : Entity_Id) return Boolean;\n-   --  Return True if E is annotated with a pledge annotation\n-\n-package Sem_SPARK is\n-\n-   function Is_Legal (N : Node_Id) return Boolean;\n-   --  Test the legality of a node wrt ownership-checking rules. This does not\n-   --  check rules related to the validity of permissions associated with paths\n-   --  from objects, so that it can be called from GNATprove on code of library\n-   --  units analyzed in SPARK_Mode Auto.\n-\n-   procedure Check_Safe_Pointers (N : Node_Id);\n-   --  The entry point of this package. It analyzes a node and reports errors\n-   --  when there are violations of ownership rules.\n-\n-   function Is_Deep (Typ : Entity_Id) return Boolean;\n-   --  Returns True if the type passed as argument is deep\n-\n-   function Is_Traversal_Function (E : Entity_Id) return Boolean;\n-\n-   function Is_Local_Context (Scop : Entity_Id) return Boolean;\n-   --  Return if a given scope defines a local context where it is legal to\n-   --  declare a variable of anonymous access type.\n-\n-end Sem_SPARK;"}]}