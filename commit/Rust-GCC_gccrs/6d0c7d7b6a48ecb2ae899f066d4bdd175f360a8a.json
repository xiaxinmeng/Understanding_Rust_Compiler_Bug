{"sha": "6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwYzdkN2I2YTQ4ZWNiMmFlODk5ZjA2NmQ0YmRkMTc1ZjM2MGE4YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-02-05T16:04:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-02-05T16:04:28Z"}, "message": "Deflater.java, [...]: Reformated and javadoc comments merged from classpath.\n\n2004-02-05  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/zip/Deflater.java,\n\tjava/util/zip/DeflaterOutputStream.java,\n\tjava/util/zip/GZIPInputStream.java:\n\tReformated and javadoc comments merged from classpath.\n\nFrom-SVN: r77319", "tree": {"sha": "ce654604dce9adb57febbdba4c0002b56fc4a48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce654604dce9adb57febbdba4c0002b56fc4a48d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/comments", "author": null, "committer": null, "parents": [{"sha": "99814868c136ea369dbd4515ece0f7713d1998f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99814868c136ea369dbd4515ece0f7713d1998f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99814868c136ea369dbd4515ece0f7713d1998f4"}], "stats": {"total": 408, "additions": 299, "deletions": 109}, "files": [{"sha": "86b1ad6a9d98e3da31b7b74429281da6028f601a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "patch": "@@ -1,3 +1,10 @@\n+2004-02-05  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/zip/Deflater.java,\n+\tjava/util/zip/DeflaterOutputStream.java,\n+\tjava/util/zip/GZIPInputStream.java:\n+\tReformated and javadoc comments merged from classpath.\n+\n 2004-02-05  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/NIOServerSocket.java"}, {"sha": "333555f0ac326f674c78df09769a6f5170095b30", "filename": "libjava/java/util/zip/Deflater.java", "status": "modified", "additions": 200, "deletions": 57, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java?ref=6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "patch": "@@ -1,5 +1,5 @@\n /* Deflater.java - Compress a data stream\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,13 +40,15 @@\n import gnu.gcj.RawData;\n \n /**\n+ * This is the Deflater class.  The deflater class compresses input\n+ * with the deflate algorithm described in RFC 1951.  It has several\n+ * compression levels and three different strategies described below.\n+ * \n+ * This class is <i>not</i> thread safe.  This is inherent in the API, due\n+ * to the split of deflate and setInput.\n+ * \n+ * @author Jochen Hoenicke\n  * @author Tom Tromey\n- * @date May 17, 1999\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification\n- * and JCL book.\n- * Believed complete and correct.\n  */\n public class Deflater\n {\n@@ -91,95 +93,236 @@\n    */\n   public static final int DEFLATED = 8;\n \n-  public int deflate (byte[] buf)\n-  {\n-    return deflate (buf, 0, buf.length);\n-  }\n+  /** Compression level. */\n+  private int level;\n \n-  public native int deflate (byte[] buf, int off, int len);\n-  private native void init (int level, boolean noHeader);\n-  private native void update ();\n+  /** Compression strategy. */\n+  private int strategy;\n+\n+  /** The zlib stream. */\n+  private RawData zstream;\n \n-  public Deflater ()\n+  /** True if finished. */\n+  private boolean is_finished;\n+\n+  /** `Flush' flag to pass to next call to deflate. */\n+  private int flush_flag;\n+\n+  /**\n+   * Creates a new deflater with default compression level.\n+   */\n+  public Deflater()\n   {\n-    this (DEFAULT_COMPRESSION, false);\n+    this(DEFAULT_COMPRESSION, false);\n   }\n \n-  public Deflater (int lvl)\n+  /**\n+   * Creates a new deflater with given compression level.\n+   * @param lvl the compression level, a value between NO_COMPRESSION\n+   * and BEST_COMPRESSION, or DEFAULT_COMPRESSION.  \n+   * @exception IllegalArgumentException if lvl is out of range.\n+   */\n+  public Deflater(int lvl)\n   {\n-    this (lvl, false);\n+    this(lvl, false);\n   }\n \n-  public Deflater (int lvl, boolean noHeader)\n+  /**\n+   * Creates a new deflater with given compression level.\n+   * @param lvl the compression level, a value between NO_COMPRESSION\n+   * and BEST_COMPRESSION.  \n+   * @param nowrap true, iff we should suppress the deflate header at the\n+   * beginning and the adler checksum at the end of the output.  This is\n+   * useful for the GZIP format.\n+   * @exception IllegalArgumentException if lvl is out of range.\n+   */\n+  public Deflater(int lvl, boolean noHeader)\n   {\n     this.strategy = DEFAULT_STRATEGY;\n-    init (lvl, noHeader);\n-    setLevel (lvl);\n+    init(lvl, noHeader);\n+    setLevel(lvl);\n   }\n \n-  public native void end ();\n+  private native void init(int level, boolean noHeader);\n+  \n+  private native void update();\n \n-  protected void finalize ()\n-  {\n-    end ();\n-  }\n+  /** \n+   * Resets the deflater.  The deflater acts afterwards as if it was\n+   * just created with the same compression level and strategy as it\n+   * had before.  \n+   */\n+  public native void reset();\n+  \n+  /**\n+   * Frees all objects allocated by the compressor.  There's no\n+   * reason to call this, since you can just rely on garbage\n+   * collection.  Exists only for compatibility against Sun's JDK,\n+   * where the compressor allocates native memory.\n+   * If you call any method (even reset) afterwards the behaviour is\n+   * <i>undefined</i>.  \n+   * @deprecated Just clear all references to deflater instead.\n+   */\n+  public native void end();\n \n-  public native void finish ();\n+  /** \n+   * Gets the current adler checksum of the data that was processed so\n+   * far.\n+   */\n+  public native int getAdler();\n \n-  public synchronized boolean finished ()\n+  /** \n+   * Gets the number of input bytes processed so far.\n+   */\n+  public native int getTotalIn();\n+\n+  /** \n+   * Gets the number of output bytes so far.\n+   */\n+  public native int getTotalOut();\n+\n+  /** \n+   * Finalizes this object.\n+   */\n+  protected void finalize()\n   {\n-    return is_finished;\n+    end();\n   }\n \n-  public native int getAdler ();\n-  public native int getTotalIn ();\n-  public native int getTotalOut ();\n-  public native boolean needsInput ();\n-  public native void reset ();\n+  /** \n+   * Finishes the deflater with the current input block.  It is an error\n+   * to give more input after this method was called.  This method must\n+   * be called to force all bytes to be flushed.\n+   */\n+  public native void finish();\n \n-  public void setDictionary (byte[] buf)\n+  /** \n+   * Returns true iff the stream was finished and no more output bytes\n+   * are available.\n+   */\n+  public synchronized boolean finished()\n   {\n-    setDictionary (buf, 0, buf.length);\n+    return is_finished;\n   }\n \n-  public native void setDictionary (byte[] buf, int off, int len);\n+  /**\n+   * Returns true, if the input buffer is empty.\n+   * You should then call setInput(). <br>\n+   *\n+   * <em>NOTE</em>: This method can also return true when the stream\n+   * was finished.  \n+   */\n+  public native boolean needsInput();\n \n-  public void setInput (byte[] buf)\n+  /**\n+   * Sets the data which should be compressed next.  This should be only\n+   * called when needsInput indicates that more input is needed.\n+   * If you call setInput when needsInput() returns false, the\n+   * previous input that is still pending will be thrown away.\n+   * The given byte array should not be changed, before needsInput() returns\n+   * true again.\n+   * This call is equivalent to <code>setInput(input, 0, input.length)</code>.\n+   * @param input the buffer containing the input data.\n+   * @exception IllegalStateException if the buffer was finished() or ended().\n+   */\n+  public void setInput(byte[] input)\n   {\n-    setInput (buf, 0, buf.length);\n+    setInput(input, 0, input.length);\n   }\n \n-  public native void setInput (byte[] buf, int off, int len);\n+  /**\n+   * Sets the data which should be compressed next.  This should be\n+   * only called when needsInput indicates that more input is needed.\n+   * The given byte array should not be changed, before needsInput() returns\n+   * true again.\n+   * @param input the buffer containing the input data.\n+   * @param off the start of the data.\n+   * @param len the length of the data.  \n+   * @exception IllegalStateException if the buffer was finished() or ended()\n+   * or if previous input is still pending.\n+   */\n+  public native void setInput(byte[] input, int off, int len);\n \n-  public synchronized void setLevel (int lvl)\n+  /** \n+   * Sets the compression level.  There is no guarantee of the exact\n+   * position of the change, but if you call this when needsInput is\n+   * true the change of compression level will occur somewhere near\n+   * before the end of the so far given input.  \n+   * @param lvl the new compression level.\n+   */\n+  public synchronized void setLevel(int lvl)\n   {\n     if (lvl != -1 && (lvl < 0 || lvl > 9))\n-      throw new IllegalArgumentException ();\n+      throw new IllegalArgumentException();\n     level = (lvl == -1) ? 6 : lvl;\n-    update ();\n+    update();\n   }\n \n-  public synchronized void setStrategy (int stgy)\n+  /** \n+   * Sets the compression strategy. Strategy is one of\n+   * DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact\n+   * position where the strategy is changed, the same as for\n+   * setLevel() applies.\n+   * @param stgy the new compression strategy.\n+   */\n+  public synchronized void setStrategy(int stgy)\n   {\n     if (stgy != DEFAULT_STRATEGY && stgy != FILTERED\n \t&& stgy != HUFFMAN_ONLY)\n-      throw new IllegalArgumentException ();\n+      throw new IllegalArgumentException();\n     strategy = stgy;\n-    update ();\n+    update();\n   }\n \n-  // Compression level.\n-  private int level;\n-\n-  // Compression strategy.\n-  private int strategy;\n+  /**\n+   * Deflates the current input block to the given array.  It returns \n+   * the number of bytes compressed, or 0 if either \n+   * needsInput() or finished() returns true or length is zero.\n+   * @param output the buffer where to write the compressed data.\n+   */\n+  public int deflate(byte[] output)\n+  {\n+    return deflate(output, 0, output.length);\n+  }\n \n-  // The zlib stream.\n-  private RawData zstream;\n+  /**\n+   * Deflates the current input block to the given array.  It returns \n+   * the number of bytes compressed, or 0 if either \n+   * needsInput() or finished() returns true or length is zero.\n+   * @param output the buffer where to write the compressed data.\n+   * @param offset the offset into the output array.\n+   * @param length the maximum number of bytes that may be written.\n+   * @exception IllegalStateException if end() was called.\n+   * @exception IndexOutOfBoundsException if offset and/or length\n+   * don't match the array length.  \n+   */\n+  public native int deflate(byte[] output, int off, int len);\n \n-  // True if finished.\n-  private boolean is_finished;\n+  /**\n+   * Sets the dictionary which should be used in the deflate process.\n+   * This call is equivalent to <code>setDictionary(dict, 0,\n+   * dict.length)</code>.  \n+   * @param dict the dictionary.  \n+   * @exception IllegalStateException if setInput () or deflate ()\n+   * were already called or another dictionary was already set.  \n+   */\n+  public void setDictionary(byte[] dict)\n+  {\n+    setDictionary(dict, 0, dict.length);\n+  }\n \n-  // `Flush' flag to pass to next call to deflate.\n-  private int flush_flag;\n+  /**\n+   * Sets the dictionary which should be used in the deflate process.\n+   * The dictionary should be a byte array containing strings that are\n+   * likely to occur in the data which should be compressed.  The\n+   * dictionary is not stored in the compressed output, only a\n+   * checksum.  To decompress the output you need to supply the same\n+   * dictionary again.\n+   * @param dict the dictionary.\n+   * @param offset an offset into the dictionary.\n+   * @param length the length of the dictionary.\n+   * @exception IllegalStateException if setInput () or deflate () were\n+   * already called or another dictionary was already set.\n+   */\n+  public native void setDictionary(byte[] buf, int off, int len);\n }"}, {"sha": "6cc3fbf9c2365e7a08de45b5405ce7abd84d4fdc", "filename": "libjava/java/util/zip/DeflaterOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java?ref=6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "patch": "@@ -1,5 +1,5 @@\n /* DeflaterOutputStream.java - Output filter for compressing.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "6699e56ee69578152e454ed90668f62c71cf994a", "filename": "libjava/java/util/zip/GZIPInputStream.java", "status": "modified", "additions": 91, "deletions": 51, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FGZIPInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a/libjava%2Fjava%2Futil%2Fzip%2FGZIPInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FGZIPInputStream.java?ref=6d0c7d7b6a48ecb2ae899f066d4bdd175f360a8a", "patch": "@@ -1,5 +1,5 @@\n /* GZIPInputStream.java - Input filter for reading gzip file\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,73 +41,81 @@\n import java.io.IOException;\n \n /**\n+ * This filter stream is used to decompress a \"GZIP\" format stream. \n+ * The \"GZIP\" format is described in RFC 1952.\n+ *\n+ * @author John Leuner\n  * @author Tom Tromey\n- * @date May 17, 1999\n+ * @since JDK 1.1\n  */\n-\n-/* Written using on-line Java Platform 1.2 API Specification\n- * and JCL book.\n- * Believed complete and correct.\n- */\n-\n-public class GZIPInputStream extends InflaterInputStream\n+public class GZIPInputStream\n+  extends InflaterInputStream\n {\n+  /**\n+   * The magic number found at the start of a GZIP stream.\n+   */\n   public static final int GZIP_MAGIC = 0x8b1f;\n \n-  public void close () throws IOException\n-  {\n-    // Nothing to do here.\n-    super.close();\n-  }\n-\n-  public GZIPInputStream (InputStream istream) throws IOException\n+  /**\n+   * Creates a GZIPInputStream with the default buffer size.\n+   *\n+   * @param in The stream to read compressed data from \n+   *           (in GZIP format).\n+   *\n+   * @throws IOException if an error occurs during an I/O operation.\n+   */\n+  public GZIPInputStream(InputStream in)\n+    throws IOException\n   {\n-    this (istream, 512);\n+    this(in, 512);\n   }\n \n-  private final int eof_read () throws IOException\n-  {\n-    int r = in.read();\n-    if (r == -1)\n-      throw new ZipException (\"gzip header corrupted\");\n-    return r & 0xff;\n-  }\n-\n-  public GZIPInputStream (InputStream istream, int readsize)\n+  /**\n+   * Creates a GZIPInputStream with the specified buffer size.\n+   *\n+   * @param in The stream to read compressed data from \n+   *           (in GZIP format).\n+   * @param size The size of the buffer to use.\n+   *\n+   * @throws IOException if an error occurs during an I/O operation.\n+   * @throws IllegalArgumentException if <code>size</code>\n+   * is less than or equal to 0.\n+   */\n+  public GZIPInputStream(InputStream in, int size)\n     throws IOException\n   {\n-    super (istream, new Inflater (true), readsize);\n+    super(in, new Inflater(true), size);\n \n     // NOTE: header reading code taken from zlib's gzio.c.\n \n     // Read the magic number.\n-    int magic = eof_read () | (eof_read () << 8);\n+    int magic = eof_read() | (eof_read() << 8);\n     if (magic != GZIP_MAGIC)\n-      throw new ZipException (\"gzip header corrupted\");\n+      throw new ZipException(\"gzip header corrupted\");\n \n-    int method = eof_read ();\n-    int flags = eof_read ();\n+    int method = eof_read();\n+    int flags = eof_read();\n     // Test from zlib.\n     if (method != Z_DEFLATED || (flags & RESERVED) != 0)\n-      throw new ZipException (\"gzip header corrupted\");\n+      throw new ZipException(\"gzip header corrupted\");\n \n     // Discard time, xflags, OS code.\n     for (int i = 0; i < 6; ++i)\n-      eof_read ();\n+      eof_read();\n \n     // Skip the extra field.\n     if ((flags & EXTRA_FIELD) != 0)\n       {\n-\tint len = eof_read () | (eof_read () << 8);\n+\tint len = eof_read() | (eof_read() << 8);\n \twhile (len-- != 0)\n-\t  eof_read ();\n+\t  eof_read();\n       }\n \n     if ((flags & ORIG_NAME) != 0)\n       {\n \twhile (true)\n \t  {\n-\t    int c = eof_read ();\n+\t    int c = eof_read();\n \t    if (c == 0)\n \t      break;\n \t  }\n@@ -117,7 +125,7 @@ public GZIPInputStream (InputStream istream, int readsize)\n       {\n \twhile (true)\n \t  {\n-\t    int c = eof_read ();\n+\t    int c = eof_read();\n \t    if (c == 0)\n \t      break;\n \t  }\n@@ -126,46 +134,78 @@ public GZIPInputStream (InputStream istream, int readsize)\n     if ((flags & HEAD_CRC) != 0)\n       {\n \t// FIXME: consider checking CRC of the header.\n-\teof_read ();\n-\teof_read ();\n+\teof_read();\n+\teof_read();\n       }\n \n-    crc = new CRC32 ();\n+    crc = new CRC32();\n+  }\n+\n+  /**\n+   * Closes the input stream.\n+   *\n+   * @throws IOException if an error occurs during an I/O operation.\n+   */\n+  public void close()\n+    throws IOException\n+  {\n+    // Nothing to do here.\n+    super.close();\n+  }\n+\n+  private final int eof_read() throws IOException\n+  {\n+    int r = in.read();\n+    if (r == -1)\n+      throw new ZipException(\"gzip header corrupted\");\n+    return r & 0xff;\n   }\n \n-  public int read (byte[] buf, int off, int len) throws IOException\n+  /**\n+   * Reads in GZIP-compressed data and stores it in uncompressed form\n+   * into an array of bytes.  The method will block until either\n+   * enough input data becomes available or the compressed stream\n+   * reaches its end.\n+   *\n+   * @param buf the buffer into which the uncompressed data will\n+   *            be stored.\n+   * @param offset the offset indicating where in <code>buf</code>\n+   *               the uncompressed data should be placed.\n+   * @param len the number of uncompressed bytes to be read.\n+   */\n+  public int read(byte[] buf, int offset, int len) throws IOException\n   {\n     if (eos)\n       return -1;\n-    int r = super.read(buf, off, len);\n+    int r = super.read(buf, offset, len);\n     if (r == -1)\n       {\n \teos = true;\n \n \tbyte[] tmp = new byte[8];\n \t// First copy remaining bytes from inflater input buffer.\n-\tint avail = inf.getRemaining ();\n-\tSystem.arraycopy (this.buf, this.len - avail, tmp, 0, avail);\n+\tint avail = inf.getRemaining();\n+\tSystem.arraycopy(this.buf, this.len - avail, tmp, 0, avail);\n \n \t// Now read remaining bytes from wrapped input stream.\n \tfor (int i = avail; i < 8; ++i)\n \t  {\n-\t    tmp[i] = (byte) eof_read ();\n+\t    tmp[i] = (byte) eof_read();\n \t  }\n \n-\tint header_crc = read4 (tmp, 0);\n+\tint header_crc = read4(tmp, 0);\n \tif (crc.getValue() != header_crc)\n-\t  throw new ZipException (\"corrupted gzip file - crc mismatch\");\n-\tint isize = read4 (tmp, 4);\n+\t  throw new ZipException(\"corrupted gzip file - crc mismatch\");\n+\tint isize = read4(tmp, 4);\n \tif (inf.getTotalOut() != isize)\n-\t  throw new ZipException (\"corrupted gzip file - size mismatch\");\n+\t  throw new ZipException(\"corrupted gzip file - size mismatch\");\n \treturn -1;\n       }\n-    crc.update(buf, off, r);\n+    crc.update(buf, offset, r);\n     return r;\n   }\n \n-  private final int read4 (byte[] buf, int offset) throws IOException\n+  private final int read4(byte[] buf, int offset) throws IOException\n   {\n     return (((buf[offset + 3] & 0xFF) << 24) + ((buf[offset + 2] & 0xFF) << 16)\n \t    + ((buf[offset + 1] & 0xFF) << 8) + (buf[offset] & 0xFF));"}]}