{"sha": "6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkODNiZWM0Yjc2ZTE5MTc1YTQyNWI3ZTE4NDFkOWM1ZDBkMTY0ZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-06-29T10:41:28Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-06-29T10:41:28Z"}, "message": "re PR tree-optimization/81196 (Number of iterations found for p!=q but not for p<q)\n\n\tPR tree-optimization/81196\n\t* tree-ssa-loop-niter.c (number_of_iterations_cond): Handle loop\n\texit condition comparing two IVs.\n\n\tgcc/testsuite\n\t* gcc.dg/vect/pr81196.c: New.\n\nFrom-SVN: r249778", "tree": {"sha": "c6e71e3aaba5005f83a4159c4ed5f4696d06f7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e71e3aaba5005f83a4159c4ed5f4696d06f7d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/comments", "author": null, "committer": null, "parents": [{"sha": "a7c9a3042453642fd220e01b2063307cd479472a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c9a3042453642fd220e01b2063307cd479472a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c9a3042453642fd220e01b2063307cd479472a"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "bed5b90f86820d8da8fe6be98599c7004d7b8f79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "patch": "@@ -1,3 +1,9 @@\n+2017-06-29  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/81196\n+\t* tree-ssa-loop-niter.c (number_of_iterations_cond): Handle loop\n+\texit condition comparing two IVs.\n+\n 2017-06-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/parsecpu.awk (gen_comm_data): Add initializer for"}, {"sha": "c38422a7797cac3329f1e7410f62a7c7b041b24b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "patch": "@@ -1,3 +1,8 @@\n+2017-06-29  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/81196\n+\t* gcc.dg/vect/pr81196.c: New.\n+\n 2017-06-29  Michael Collison  <michael.collison@arm.com>\n \n \tFix date on previous ChangeLog entry."}, {"sha": "46d7a9ebc57b4512f137e8f0c9bef7f4ed0f3227", "filename": "gcc/testsuite/gcc.dg/vect/pr81196.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81196.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81196.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81196.c?ref=6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_perm_short } */\n+\n+void f(short*p){\n+  p=(short*)__builtin_assume_aligned(p,64);\n+  short*q=p+256;\n+  for(;p!=q;++p,--q){\n+    short t=*p;*p=*q;*q=t;\n+  }\n+}\n+void b(short*p){\n+  p=(short*)__builtin_assume_aligned(p,64);\n+  short*q=p+256;\n+  for(;p<q;++p,--q){\n+    short t=*p;*p=*q;*q=t;\n+  }\n+}\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */"}, {"sha": "5a7cab529bfbab1d27dc72af6ab5896a1c51961e", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd83bec4b76e19175a425b7e1841d9c5d0d164e/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=6cd83bec4b76e19175a425b7e1841d9c5d0d164e", "patch": "@@ -1668,18 +1668,34 @@ number_of_iterations_cond (struct loop *loop,\n \texit_must_be_taken = true;\n     }\n \n-  /* We can handle the case when neither of the sides of the comparison is\n-     invariant, provided that the test is NE_EXPR.  This rarely occurs in\n-     practice, but it is simple enough to manage.  */\n+  /* We can handle cases which neither of the sides of the comparison is\n+     invariant:\n+\n+       {iv0.base, iv0.step} cmp_code {iv1.base, iv1.step}\n+     as if:\n+       {iv0.base, iv0.step - iv1.step} cmp_code {iv1.base, 0}\n+\n+     provided that either below condition is satisfied:\n+\n+       a) the test is NE_EXPR;\n+       b) iv0.step - iv1.step is positive integer.\n+\n+     This rarely occurs in practice, but it is simple enough to manage.  */\n   if (!integer_zerop (iv0->step) && !integer_zerop (iv1->step))\n     {\n       tree step_type = POINTER_TYPE_P (type) ? sizetype : type;\n-      if (code != NE_EXPR)\n+      tree step = fold_binary_to_constant (MINUS_EXPR, step_type,\n+\t\t\t\t\t   iv0->step, iv1->step);\n+\n+      /* No need to check sign of the new step since below code takes care\n+\t of this well.  */\n+      if (code != NE_EXPR && TREE_CODE (step) != INTEGER_CST)\n \treturn false;\n \n-      iv0->step = fold_binary_to_constant (MINUS_EXPR, step_type,\n-\t\t\t\t\t   iv0->step, iv1->step);\n-      iv0->no_overflow = false;\n+      iv0->step = step;\n+      if (!POINTER_TYPE_P (type))\n+\tiv0->no_overflow = false;\n+\n       iv1->step = build_int_cst (step_type, 0);\n       iv1->no_overflow = true;\n     }"}]}