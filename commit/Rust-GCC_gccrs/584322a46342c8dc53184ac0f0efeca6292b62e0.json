{"sha": "584322a46342c8dc53184ac0f0efeca6292b62e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg0MzIyYTQ2MzQyYzhkYzUzMTg0YWMwZjBlZmVjYTYyOTJiNjJlMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T09:29:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-14T09:29:26Z"}, "message": "Removed due to issues\n\nFrom-SVN: r2454", "tree": {"sha": "c6d2e0e83c8cb9978af4ae7d951be6e23636804b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d2e0e83c8cb9978af4ae7d951be6e23636804b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/584322a46342c8dc53184ac0f0efeca6292b62e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584322a46342c8dc53184ac0f0efeca6292b62e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584322a46342c8dc53184ac0f0efeca6292b62e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584322a46342c8dc53184ac0f0efeca6292b62e0/comments", "author": null, "committer": null, "parents": [{"sha": "da8dce4a2943c06343a5cdb00fdfdcfdf3b891b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8dce4a2943c06343a5cdb00fdfdcfdf3b891b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8dce4a2943c06343a5cdb00fdfdcfdf3b891b5"}], "stats": {"total": 160, "additions": 47, "deletions": 113}, "files": [{"sha": "859ae6f870923fd9747942f8f1cf5a557f8c78e2", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 47, "deletions": 113, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584322a46342c8dc53184ac0f0efeca6292b62e0/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584322a46342c8dc53184ac0f0efeca6292b62e0/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=584322a46342c8dc53184ac0f0efeca6292b62e0", "patch": "@@ -1,6 +1,5 @@\n-/* -*-c-*- */\n-\n-/* Copyright (C) 1989, 1992 Free Software Foundation, Inc.\n+/* Basic data types for Objective C.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -23,68 +22,19 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    the resulting executable to be covered by the GNU General Public License.\n    This exception does not however invalidate any other reasons why\n    the executable file might be covered by the GNU General Public License.  */\n-\n-/* \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/include/RCS/objc.h,v 0.11 1992/04/13 11:40:53 dennisg Exp dennisg $\n-  $Author: dennisg $\n-  $Date: 1992/04/13 11:40:53 $\n-  $Log: objc.h,v $\n- * Revision 0.11  1992/04/13  11:40:53  dennisg\n- * Check in after array version of run-time works.\n- * Expect more changes as hash version and other changes are made.\n- *\n- * Revision 0.10  1991/12/31  20:16:08  dennisg\n- * Deleted index variable stuff.  Index variables are a hack to the language.\n- * Cleaned up some documentation.\n- *\n- * Revision 0.9  1991/12/10  12:04:22  dennisg\n- * Cleaned up file format for a distribution.\n- *\n- * Revision 0.8  1991/12/01  01:29:29  dennisg\n- * modified to remove changes previously made to\n- * implement posing.  posing just got easy.\n- *\n- * Revision 0.7  1991/11/29  22:00:10  dennisg\n- * modified to implement set functions.\n- *\n- * Revision 0.6  1991/11/29  20:02:01  dennisg\n- * fixed several const decls.  bozo.\n- *\n- * Revision 0.5  1991/11/29  00:24:14  dennisg\n- * many changes including posing, things to make the compiler\n- * happier, structure changes, and things to make it play better.\n- *\n- * Revision 0.4  1991/11/19  12:37:49  dennisg\n- * changed typedef and struct decls.\n- * the run-time was changed and those decls changed too.\n- *\n- * Revision 0.3  1991/11/16  15:57:35  dennisg\n- * changed the defs for class structures for new implementation of run-time.\n- * changed def of SEL back to its original type.\n- *\n- * Revision 0.2  1991/11/07  22:31:42  dennisg\n- * added copyleft.\n- *\n- * Revision 0.1  1991/10/24  00:19:24  dennisg\n- * Initial check in.  Preliminary development stage.\n- *\n-*/\n  \n \n-#ifndef _objc_INCLUDE_GNU\n-#define _objc_INCLUDE_GNU\n+#ifndef __objc_INCLUDE_GNU\n+#define __objc_INCLUDE_GNU\n \n-                                                /* If someone is using a c++\n-                                                  compiler then adjust the \n-                                                  types in the file back \n-                                                  to C. */\n+/* If someone is using a c++ compiler then adjust the types in the\n+   file back to C.  */\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n-#include  <sys/types.h>\n-#include  <record-inline.h>\n-#include  <stdarg.h>\n+#include  \"record.h\"\n+#include  \"gstdarg.h\"\n \n \n #define nil (id)0                               /* id of Nil instance */\n@@ -96,36 +46,26 @@ typedef char  BOOL;\n #define YES   (BOOL)1\n #define NO    (BOOL)0\n \n-                                                /* Definition of a \n-                                                  selector.  Selectors are \n-                                                  really of type char*. The\n-                                                  run-time hashes the \n-                                                  string's address to locate\n-                                                  the method.  If the method\n-                                                  isn't in the hash table then\n-                                                  a search is made through the \n-                                                  class hierarchy using \n-                                                  strcmp() to locate the\n-                                                  method. */\n+/* Definition of a selector.  Selectors are really of type char*. The\n+   run-time hashes the string's address to locate the method.  If the\n+   method isn't in the hash table then a search is made through the\n+   class hierarchy using strcmp to locate the method.  */\n #if 0\n typedef struct objc_selector*   SEL;\n #else\n typedef void* SEL;\n #endif\n \n-                                                /* ObjC uses this typedef \n-                                                  for untyped instances. */\n+/* ObjC uses this typedef for untyped instances.  */\n+\n typedef struct objc_object {\n-  struct objc_class*  isa;\n+  struct objc_class*  class_pointer;\n } *id;\n \n-                                                /* Prototype for method \n-                                                  functions. */\n-typedef id  ( *IMP )( id, SEL, ... ); \n+/* Prototype for method functions. */\n+typedef id  (*IMP)(id, SEL, ...); \n \n-                                                /* Filer types used to \n-                                                  describe Ivars and \n-                                                  Methods. */\n+/* Filer types used to describe Ivars and Methods.  */\n #define _C_ID       '@'\n #define _C_CLASS    '#'\n #define _C_SEL      ':'\n@@ -151,10 +91,8 @@ typedef id  ( *IMP )( id, SEL, ... );\n #define _C_STRUCT_B '{'\n #define _C_STRUCT_E '}'\n \n-/*\n- * These definitions are masks used with the \"info\" member variable in the\n- * class and meta class structures. \n- */\n+/* These definitions are masks used with the \"info\" member variable in\n+   the lass and meta class structures.  */\n #define CLS_CLASS         0x1L                  /* The structure is of type\n                                                   class (Class_t). */\n #define CLS_META          0x2L                  /* The structure is of type\n@@ -167,10 +105,9 @@ typedef id  ( *IMP )( id, SEL, ... );\n #define CLS_RTI           0x8L                  /* The class has been initialized\n \t\t\t\t\t\t   within the run time library. */\n \n-                                                /* Set this variable to !0 to\n-                                                  have the messager print\n-                                                  messaging operations. */\n-  extern BOOL objc_trace;\n+/* Set this variable nonzero to print a line describing each\n+   message that is sent.  */\n+extern BOOL objc_trace;\n \n \n /*\n@@ -182,11 +119,11 @@ typedef id  ( *IMP )( id, SEL, ... );\n  * categories  defined in the module. \n  */\n typedef struct objc_symtab {\n-  u_long    sel_ref_cnt;                        /* Unknown. */\n+  unsigned long sel_ref_cnt;                     /* Unknown. */\n   SEL       *refs;                              /* Unknown. */\n-  u_short   cls_def_cnt;                        /* Number of classes compiled\n+  unsigned short cls_def_cnt;                   /* Number of classes compiled\n                                                   (defined) in the module. */\n-  u_short   cat_def_cnt;                        /* Number of categories \n+  unsigned short cat_def_cnt;                   /* Number of categories \n                                                   compiled (defined) in the \n                                                   module. */\n   void      *defs[1];                           /* Variable array of pointers.\n@@ -206,8 +143,8 @@ typedef struct objc_symtab {\n  * That array holds a pointer to each module structure of the executable. \n  */\n typedef struct objc_module {\n-  u_long      version;                          /* Compiler revision. */\n-  u_long      size;                             /* sizeof(Module). */\n+  unsigned long version;                        /* Compiler revision. */\n+  unsigned long size;                           /* sizeof(Module). */\n   const char* name;                             /* Name of the file where the \n                                                   module was generated.   The \n                                                   name includes the path. */\n@@ -266,9 +203,9 @@ typedef struct objc_method_list {\n     SEL         method_name;                  /* This variable is the method's \n                                                 name.  It is a char*. \n                                                   The unique integer passed to \n-                                                objc_msgSend() is a char* too.  \n+                                                objc_msgSend is a char* too.  \n                                                 It is compared against \n-                                                method_name using strcmp(). */\n+                                                method_name using strcmp. */\n     const char* method_types;                 /* Description of the method's\n                                                 parameter list.  Useful for\n                                                 debuggers. */\n@@ -289,11 +226,10 @@ typedef struct objc_method_list {\n  * This structure is generated by the compiler in the executable and used by\n  * the run-time during normal messaging operations.  Therefore some members\n  * change type. The compiler generates \"char* const\" and places a string in\n- * the following member variables:  isa and super_class. \n+ * the following member variables:  class_pointer and super_class. \n  */\n typedef struct objc_metaClass {     \n-  struct objc_metaClass*  isa;                /* Pointer to Object meta\n-                                                class. */\n+  struct objc_metaClass*  class_pointer;      /* Pointer to Object meta class. */\n   struct objc_metaClass*  super_class;        /* Pointer to meta class's\n                                                 super class. NULL for \n                                                 Object. */\n@@ -307,8 +243,7 @@ typedef struct objc_metaClass {\n                                                 Object.  Should be ignored. */\n   MethodList_t            methods;            /* Linked List of factory methods \n                                                 for the class. */\n-  Record_t*               cache;              /* Pointer to factory method\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch table. */\n+  struct record **        cache;              /* Pointer to factory method dispatch table. */\n } MetaClass, *MetaClass_t;\n \n \n@@ -323,7 +258,7 @@ typedef struct objc_metaClass {\n  * the following member variables:  super_class. \n  */\n typedef struct objc_class {     \n-  MetaClass_t         isa;                    /* Pointer to the class's\n+  MetaClass_t         class_pointer;          /* Pointer to the class's\n                                                 meta class. */\n   struct objc_class*  super_class;            /* Pointer to the super \n                                                 class. NULL for class \n@@ -346,8 +281,7 @@ typedef struct objc_class {\n   MethodList_t        methods;                /* Linked list of instance\n                                                 methods defined for the \n                                                 class. */\n-  Record_t*           cache;                  /* Pointer to instance method \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch table. */\n+  struct record **    cache;                  /* Pointer to instance method dispatch table. */\n } Class, *Class_t;\n \n \n@@ -375,7 +309,7 @@ typedef struct objc_category {\n /*\n  * Structure used when a message is send to a class's super class.  The\n  * compiler generates one of these structures and passes it to\n- * objc_msgSuper(). \n+ * objc_msgSuper. \n  */\n typedef struct objc_super {\n   id      receiver;                           /* Id of the object sending\n@@ -384,38 +318,38 @@ typedef struct objc_super {\n } Super, *Super_t;\n \n /*\n- * _alloc points to the function, called through class_createInstance(), used\n+ * _alloc points to the function, called through class_createInstance, used\n  * to allocate memory for new instances. \n  */\n-extern id (*_alloc)(Class_t aClass);\n+extern id (*_alloc)(Class_t);\n /*\n- * _dealloc points to the function, called through object_dispose(), used to\n+ * _dealloc points to the function, called through object_dispose, used to\n  * free instances. \n  */\n-extern id (*_dealloc)(id aObject);\n+extern id (*_dealloc)(id);\n /*\n- * _realloc points to the function, called through object_realloc(), used to\n+ * _realloc points to the function, called through object_realloc, used to\n  * reallocate memory for an object \n  */\n-extern id (*_realloc)(id aObject, u_int newSize);\n+extern id (*_realloc)(id, unsigned int);\n \n /*\n- * _copy points to the function, called through object_copy(), used to create\n+ * _copy points to the function, called through object_copy, used to create\n  * an exact copy of an object. \n  */\n-extern  id (*_copy)(id aObject);\n+extern  id (*_copy)(id);\n \n /*\n  * _error points to the function that the run-time system calls in response\n  * to an error.  By default, it prints formatted error messages to the\n- * standard error stream and calls abort() to produce a core file. \n+ * standard error stream and calls abort to produce a core file. \n  */\n-extern void (*_error)(id aObject, const char* fmt, va_list ap);\n+extern void (*_error)(id object, const char *fmt, va_list ap);\n \n \n #ifdef __cplusplus\n }\n #endif\n \n \n-#endif\n+#endif /* not __objc_INCLUDE_GNU */"}]}