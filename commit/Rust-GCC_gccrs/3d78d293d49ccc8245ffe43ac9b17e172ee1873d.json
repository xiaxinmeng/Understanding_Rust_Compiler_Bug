{"sha": "3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3OGQyOTNkNDljY2M4MjQ1ZmZlNDNhYzliMTdlMTcyZWUxODczZA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2009-07-08T18:07:47Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2009-07-08T18:07:47Z"}, "message": "re PR debug/40659 (A simple struct member offset doesn't need a full dwarf location expression)\n\n2009-07-08  Mark Wielaard  <mjw@redhat.com>\n\n\tPR debug/40659\n\t* dwarf2out.c (add_data_member_location_attribute): When we have\n\tonly a constant offset don't emit a new location description using\n\tDW_OP_plus_uconst, but just add the constant with add_AT_int, when\n\tdwarf_version > 2.\n\nFrom-SVN: r149377", "tree": {"sha": "01104f4e6c33221391ecb469d8281e5275c76006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01104f4e6c33221391ecb469d8281e5275c76006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d78d293d49ccc8245ffe43ac9b17e172ee1873d/comments", "author": null, "committer": null, "parents": [{"sha": "ac2e563fcfce40295dc962d8e98796b794726b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2e563fcfce40295dc962d8e98796b794726b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2e563fcfce40295dc962d8e98796b794726b0f"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "c78577a456e9409d1b9db16490fa02458e5f9807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78d293d49ccc8245ffe43ac9b17e172ee1873d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78d293d49ccc8245ffe43ac9b17e172ee1873d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "patch": "@@ -1,3 +1,11 @@\n+2009-07-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/40659\n+\t* dwarf2out.c (add_data_member_location_attribute): When we have\n+\tonly a constant offset don't emit a new location description using\n+\tDW_OP_plus_uconst, but just add the constant with add_AT_int, when\n+\tdwarf_version > 2.\n+\n 2009-07-08  Richard Henderson  <rth@redhat.com>\n \n \tPR target/38900"}, {"sha": "2e30a0c6702bc0bb6c0b9cb31883a43a47b45e30", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d78d293d49ccc8245ffe43ac9b17e172ee1873d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d78d293d49ccc8245ffe43ac9b17e172ee1873d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3d78d293d49ccc8245ffe43ac9b17e172ee1873d", "patch": "@@ -11475,22 +11475,31 @@ add_data_member_location_attribute (dw_die_ref die, tree decl)\n \n   if (! loc_descr)\n     {\n-      enum dwarf_location_atom op;\n-\n-      /* The DWARF2 standard says that we should assume that the structure\n-\t address is already on the stack, so we can specify a structure field\n-\t address by using DW_OP_plus_uconst.  */\n-\n+      if (dwarf_version > 2)\n+\t{\n+\t  /* Don't need to output a location expression, just the constant. */\n+\t  add_AT_int (die, DW_AT_data_member_location, offset);\n+\t  return;\n+\t}\n+      else\n+\t{\n+\t  enum dwarf_location_atom op;\n+\t  \n+\t  /* The DWARF2 standard says that we should assume that the structure\n+\t     address is already on the stack, so we can specify a structure\n+\t     field address by using DW_OP_plus_uconst.  */\n+\t  \n #ifdef MIPS_DEBUGGING_INFO\n-      /* ??? The SGI dwarf reader does not handle the DW_OP_plus_uconst\n-\t operator correctly.  It works only if we leave the offset on the\n-\t stack.  */\n-      op = DW_OP_constu;\n+\t  /* ??? The SGI dwarf reader does not handle the DW_OP_plus_uconst\n+\t     operator correctly.  It works only if we leave the offset on the\n+\t     stack.  */\n+\t  op = DW_OP_constu;\n #else\n-      op = DW_OP_plus_uconst;\n+\t  op = DW_OP_plus_uconst;\n #endif\n-\n-      loc_descr = new_loc_descr (op, offset, 0);\n+\t  \n+\t  loc_descr = new_loc_descr (op, offset, 0);\n+\t}\n     }\n \n   add_AT_loc (die, DW_AT_data_member_location, loc_descr);"}]}