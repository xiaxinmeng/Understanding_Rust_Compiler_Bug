{"sha": "60893f43178c015357ff117043231b3d1ac75030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4OTNmNDMxNzhjMDE1MzU3ZmYxMTcwNDMyMzFiM2QxYWM3NTAzMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-06T22:52:03Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-06T22:52:03Z"}, "message": "cppinit.c: Include cppdefault.h.\n\n\t* cppinit.c: Include cppdefault.h.  Refer to\n\tcpp_GCC_INCLUDE_DIR and cpp_GCC_INCLUDE_DIR_len, not directly\n\tto GCC_INCLUDE_DIR and its length.\n\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE,\n\tUSER_LABEL_PREFIX, REGISTER_PREFIX, struct default_include,\n\tSTANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT):  Move to\n\tcppdefault.h.\n\t(include_defaults_array): Move to cppdefault.c.\n\n\t* cppdefault.h: New file.\n\t* cppdefault.c: New file.\n\n\t* Makefile.in (LIBCPP_OBJS): Add cppdefault.o.\n\t(cppinit.o): Don't apply $(PREPROCESSOR_DEFINES) to this file.\n\t(cppdefault.o): New rule; apply $(PREPROCESSOR_DEFINES) to\n\tthis file.\n\nFrom-SVN: r34892", "tree": {"sha": "e1f0d045fe9ad582c633fe044290f01a2df67b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f0d045fe9ad582c633fe044290f01a2df67b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60893f43178c015357ff117043231b3d1ac75030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60893f43178c015357ff117043231b3d1ac75030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60893f43178c015357ff117043231b3d1ac75030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60893f43178c015357ff117043231b3d1ac75030/comments", "author": null, "committer": null, "parents": [{"sha": "db30db99382a43a9469489a3b7b46f8d249838ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db30db99382a43a9469489a3b7b46f8d249838ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db30db99382a43a9469489a3b7b46f8d249838ab"}], "stats": {"total": 339, "additions": 215, "deletions": 124}, "files": [{"sha": "d7e95ee04fa938810ea898133efcab69cea05fcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60893f43178c015357ff117043231b3d1ac75030/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60893f43178c015357ff117043231b3d1ac75030/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60893f43178c015357ff117043231b3d1ac75030", "patch": "@@ -1,3 +1,22 @@\n+2000-07-06  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppinit.c: Include cppdefault.h.  Refer to\n+\tcpp_GCC_INCLUDE_DIR and cpp_GCC_INCLUDE_DIR_len, not directly\n+\tto GCC_INCLUDE_DIR and its length.\n+\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE,\n+\tUSER_LABEL_PREFIX, REGISTER_PREFIX, struct default_include,\n+\tSTANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT):  Move to\n+\tcppdefault.h.\n+\t(include_defaults_array): Move to cppdefault.c.\n+\n+\t* cppdefault.h: New file.\n+\t* cppdefault.c: New file.\n+\n+\t* Makefile.in (LIBCPP_OBJS): Add cppdefault.o.\n+\t(cppinit.o): Don't apply $(PREPROCESSOR_DEFINES) to this file.\n+\t(cppdefault.o): New rule; apply $(PREPROCESSOR_DEFINES) to\n+\tthis file.\n+\n Thu Jul  6 18:30:36 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* reload.c (push_reload): When seeing if can reuse a register,"}, {"sha": "339113216962bfac00ba875523012dc4c89ba901", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60893f43178c015357ff117043231b3d1ac75030/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60893f43178c015357ff117043231b3d1ac75030/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=60893f43178c015357ff117043231b3d1ac75030", "patch": "@@ -1778,7 +1778,7 @@ PREPROCESSOR_DEFINES = \\\n   -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\"\n \n LIBCPP_OBJS =\tcpplib.o cpphash.o cpperror.o cppexp.o cppfiles.o \\\n-\t\tcppinit.o cppulp.o cpplex.o mkdeps.o \\\n+\t\tcppinit.o cppulp.o cpplex.o cppdefault.o mkdeps.o \\\n \t\tprefix.o version.o mbchar.o @extra_cpp_objs@\n \n LIBCPP_DEPS =\tcpplib.h cpphash.h intl.h system.h\n@@ -1804,12 +1804,13 @@ cpplex.o:   cpplex.c   $(CONFIG_H) $(LIBCPP_DEPS)\n cpplib.o:   cpplib.c   $(CONFIG_H) $(LIBCPP_DEPS) $(OBSTACK_H)\n cpphash.o:  cpphash.c  $(CONFIG_H) $(LIBCPP_DEPS) $(OBSTACK_H) $(HASHTAB_H)\n cppfiles.o: cppfiles.c $(CONFIG_H) $(LIBCPP_DEPS) $(SPLAY_TREE_H) mkdeps.h\n+cppinit.o:  cppinit.c  $(CONFIG_H) $(LIBCPP_DEPS) cppdefault.h \\\n+\t\tmkdeps.h prefix.h output.h version.h\n \n-cppinit.o: cppinit.c $(CONFIG_H) $(LIBCPP_DEPS) \\\n-\t\tmkdeps.h prefix.h output.h Makefile version.h\n+cppdefault.o: cppdefault.c $(CONFIG_H) system.h cppdefault.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  $(PREPROCESSOR_DEFINES) \\\n-\t  -c `echo $(srcdir)/cppinit.c | sed 's,^\\./,,'`\n+\t  -c `echo $(srcdir)/cppdefault.c | sed 's,^\\./,,'`\n \n mkdeps.o: mkdeps.c $(CONFIG_H) system.h mkdeps.h\n "}, {"sha": "7a4ec0c107fcf5342adcd4b8fedcf8f9f42e8b01", "filename": "gcc/cppdefault.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=60893f43178c015357ff117043231b3d1ac75030", "patch": "@@ -0,0 +1,72 @@\n+/* CPP Library.\n+   Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000 Free Software Foundation, Inc.\n+   Contributed by Per Bothner, 1994-95.\n+   Based on CCCP program by Paul Rubin, June 1986\n+   Adapted to ANSI C, Richard Stallman, Jan 1987\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+/* This file contains data definitions shared between cpplib and\n+   tradcpp.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"cppdefault.h\"\n+\n+const struct default_include cpp_include_defaults[]\n+#ifdef INCLUDE_DEFAULTS\n+= INCLUDE_DEFAULTS;\n+#else\n+= {\n+#ifdef GPLUSPLUS_INCLUDE_DIR\n+    /* Pick up GNU C++ specific include files.  */\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\n+#endif\n+#ifdef LOCAL_INCLUDE_DIR\n+    /* /usr/local/include comes before the fixincluded header files.  */\n+    { LOCAL_INCLUDE_DIR, 0, 0, 1 },\n+#endif\n+#ifdef GCC_INCLUDE_DIR\n+    /* This is the dir for fixincludes and for gcc's private headers.  */\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\n+#endif\n+#ifdef CROSS_INCLUDE_DIR\n+    /* One place the target system's headers might be.  */\n+    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0 },\n+#endif\n+#ifdef TOOL_INCLUDE_DIR\n+    /* Another place the target system's headers might be.  */\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1 },\n+#endif\n+#ifdef SYSTEM_INCLUDE_DIR\n+    /* Some systems have an extra dir of include files.  */\n+    { SYSTEM_INCLUDE_DIR, 0, 0, 0 },\n+#endif\n+#ifdef STANDARD_INCLUDE_DIR\n+    /* /usr/include comes dead last.  */\n+    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 },\n+#endif\n+    { 0, 0, 0, 0 }\n+  };\n+#endif /* no INCLUDE_DEFAULTS */\n+\n+#ifdef GCC_INCLUDE_DIR\n+const char cpp_GCC_INCLUDE_DIR[] = GCC_INCLUDE_DIR;\n+const size_t cpp_GCC_INCLUDE_DIR_len = sizeof GCC_INCLUDE_DIR - 8;\n+#else\n+const char cpp_GCC_INCLUDE_DIR[] = \"\";\n+const size_t cpp_GCC_INCLUDE_DIR_len = 0;\n+#endif"}, {"sha": "58ff9396460f894ad8e190979e4c0667dea6bd81", "filename": "gcc/cppdefault.h", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=60893f43178c015357ff117043231b3d1ac75030", "patch": "@@ -0,0 +1,106 @@\n+/* CPP Library.\n+   Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000 Free Software Foundation, Inc.\n+   Contributed by Per Bothner, 1994-95.\n+   Based on CCCP program by Paul Rubin, June 1986\n+   Adapted to ANSI C, Richard Stallman, Jan 1987\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+#ifndef __GCC_CPPDEFAULT__\n+#define __GCC_CPPDEFAULT__\n+\n+/* This header contains declarations and/or #defines for all the\n+   hard-wired defaults in cpp.  Note it's used by both cpplib and\n+   tradcpp.  */\n+\n+#ifndef STANDARD_INCLUDE_DIR\n+#define STANDARD_INCLUDE_DIR \"/usr/include\"\n+#endif\n+\n+#ifndef STANDARD_INCLUDE_COMPONENT\n+#define STANDARD_INCLUDE_COMPONENT 0\n+#endif\n+\n+#ifdef CROSS_COMPILE\n+#undef LOCAL_INCLUDE_DIR\n+#undef SYSTEM_INCLUDE_DIR\n+#undef STANDARD_INCLUDE_DIR\n+#else\n+#undef CROSS_INCLUDE_DIR\n+#endif\n+\n+/* We let tm.h override the types used here, to handle trivial differences\n+   such as the choice of unsigned int or long unsigned int for size_t.\n+   When machines start needing nontrivial differences in the size type,\n+   it would be best to do something here to figure out automatically\n+   from other information what type to use.  */\n+\n+/* The string value for __SIZE_TYPE__.  */\n+\n+#ifndef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+#endif\n+\n+/* The string value for __PTRDIFF_TYPE__.  */\n+\n+#ifndef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+#endif\n+\n+/* The string value for __WCHAR_TYPE__.  */\n+\n+#ifndef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+#endif\n+\n+/* The string value for __USER_LABEL_PREFIX__ */\n+\n+#ifndef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"\"\n+#endif\n+\n+/* The string value for __REGISTER_PREFIX__ */\n+\n+#ifndef REGISTER_PREFIX\n+#define REGISTER_PREFIX \"\"\n+#endif\n+\n+/* This is the default list of directories to search for include files.\n+   It may be overridden by the various -I and -ixxx options.\n+\n+   #include \"file\" looks in the same directory as the current file,\n+   then this list.\n+   #include <file> just looks in this list.\n+\n+   All these directories are treated as `system' include directories\n+   (they are not subject to pedantic warnings in some cases).  */\n+\n+struct default_include\n+{\n+  const char *fname;\t\t/* The name of the directory.  */\n+  const char *component;\t/* The component containing the directory\n+\t\t\t\t   (see update_path in prefix.c) */\n+  int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n+  int cxx_aware;\t\t/* Includes in this directory don't need to\n+\t\t\t\t   be wrapped in extern \"C\" when compiling\n+\t\t\t\t   C++.  */\n+};\n+\n+extern const struct default_include cpp_include_defaults[];\n+extern const char cpp_GCC_INCLUDE_DIR[];\n+extern const size_t cpp_GCC_INCLUDE_DIR_len;\n+\n+#endif /* cppdefault.h */"}, {"sha": "8785a7b63390ef3227b84d8684cf4ddce52c6aee", "filename": "gcc/cppinit.c", "status": "modified", "additions": 13, "deletions": 120, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60893f43178c015357ff117043231b3d1ac75030/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=60893f43178c015357ff117043231b3d1ac75030", "patch": "@@ -28,6 +28,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"intl.h\"\n #include \"version.h\"\n #include \"mkdeps.h\"\n+#include \"cppdefault.h\"\n \n /* Predefined symbols, built-in macros, and the default include path. */\n \n@@ -46,116 +47,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define INO_T_EQ(a, b) ((a) == (b))\n #endif\n \n-#ifndef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/usr/include\"\n-#endif\n-\n-/* We let tm.h override the types used here, to handle trivial differences\n-   such as the choice of unsigned int or long unsigned int for size_t.\n-   When machines start needing nontrivial differences in the size type,\n-   it would be best to do something here to figure out automatically\n-   from other information what type to use.  */\n-\n-/* The string value for __SIZE_TYPE__.  */\n-\n-#ifndef SIZE_TYPE\n-#define SIZE_TYPE \"long unsigned int\"\n-#endif\n-\n-/* The string value for __PTRDIFF_TYPE__.  */\n-\n-#ifndef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-#endif\n-\n-/* The string value for __WCHAR_TYPE__.  */\n-\n-#ifndef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-#endif\n-\n-/* The string value for __USER_LABEL_PREFIX__ */\n-\n-#ifndef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-#endif\n-\n-/* The string value for __REGISTER_PREFIX__ */\n-\n-#ifndef REGISTER_PREFIX\n-#define REGISTER_PREFIX \"\"\n-#endif\n-\n-/* This is the default list of directories to search for include files.\n-   It may be overridden by the various -I and -ixxx options.\n-\n-   #include \"file\" looks in the same directory as the current file,\n-   then this list.\n-   #include <file> just looks in this list.\n-\n-   All these directories are treated as `system' include directories\n-   (they are not subject to pedantic warnings in some cases).  */\n-\n-struct default_include\n-{\n-  const char *fname;\t\t/* The name of the directory.  */\n-  const char *component;\t/* The component containing the directory\n-\t\t\t\t   (see update_path in prefix.c) */\n-  int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n-  int cxx_aware;\t\t/* Includes in this directory don't need to\n-\t\t\t\t   be wrapped in extern \"C\" when compiling\n-\t\t\t\t   C++.  */\n-};\n-\n-#ifndef STANDARD_INCLUDE_COMPONENT\n-#define STANDARD_INCLUDE_COMPONENT 0\n-#endif\n-\n-#ifdef CROSS_COMPILE\n-#undef LOCAL_INCLUDE_DIR\n-#undef SYSTEM_INCLUDE_DIR\n-#undef STANDARD_INCLUDE_DIR\n-#else\n-#undef CROSS_INCLUDE_DIR\n-#endif\n-\n-static const struct default_include include_defaults_array[]\n-#ifdef INCLUDE_DEFAULTS\n-= INCLUDE_DEFAULTS;\n-#else\n-= {\n-#ifdef GPLUSPLUS_INCLUDE_DIR\n-    /* Pick up GNU C++ specific include files.  */\n-    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\n-#endif\n-#ifdef LOCAL_INCLUDE_DIR\n-    /* /usr/local/include comes before the fixincluded header files.  */\n-    { LOCAL_INCLUDE_DIR, 0, 0, 1 },\n-#endif\n-#ifdef GCC_INCLUDE_DIR\n-    /* This is the dir for fixincludes and for gcc's private headers.  */\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\n-#endif\n-#ifdef CROSS_INCLUDE_DIR\n-    /* One place the target system's headers might be.  */\n-    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0 },\n-#endif\n-#ifdef TOOL_INCLUDE_DIR\n-    /* Another place the target system's headers might be.  */\n-    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1 },\n-#endif\n-#ifdef SYSTEM_INCLUDE_DIR\n-    /* Some systems have an extra dir of include files.  */\n-    { SYSTEM_INCLUDE_DIR, 0, 0, 0 },\n-#endif\n-#ifdef STANDARD_INCLUDE_DIR\n-    /* /usr/include comes dead last.  */\n-    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 },\n-#endif\n-    { 0, 0, 0, 0 }\n-  };\n-#endif /* no INCLUDE_DEFAULTS */\n-\n /* Internal structures and prototypes. */\n \n /* A `struct pending_option' remembers one -D, -A, -U, -include, or -imacros\n@@ -785,18 +676,18 @@ initialize_standard_includes (pfile)\n \n   /* Search \"translated\" versions of GNU directories.\n      These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n-  if (specd_prefix != 0)\n+  if (specd_prefix != 0 && cpp_GCC_INCLUDE_DIR_len)\n     {\n-      char *default_prefix = (char *) alloca (sizeof GCC_INCLUDE_DIR - 7);\n       /* Remove the `include' from /usr/local/lib/gcc.../include.\n \t GCC_INCLUDE_DIR will always end in /include. */\n-      int default_len = sizeof GCC_INCLUDE_DIR - 8;\n+      int default_len = cpp_GCC_INCLUDE_DIR_len;\n+      char *default_prefix = (char *) alloca (default_len + 1);\n       int specd_len = strlen (specd_prefix);\n \n-      memcpy (default_prefix, GCC_INCLUDE_DIR, default_len);\n+      memcpy (default_prefix, cpp_GCC_INCLUDE_DIR, default_len);\n       default_prefix[default_len] = '\\0';\n \n-      for (p = include_defaults_array; p->fname; p++)\n+      for (p = cpp_include_defaults; p->fname; p++)\n \t{\n \t  /* Some standard dirs are only for C++.  */\n \t  if (!p->cplusplus\n@@ -823,7 +714,7 @@ initialize_standard_includes (pfile)\n     }\n \n   /* Search ordinary names for GNU include directories.  */\n-  for (p = include_defaults_array; p->fname; p++)\n+  for (p = cpp_include_defaults; p->fname; p++)\n     {\n       /* Some standard dirs are only for C++.  */\n       if (!p->cplusplus\n@@ -1697,12 +1588,14 @@ handle_option (pfile, argc, argv)\n \t\tmemcpy (fname, CPP_OPTION (pfile, include_prefix), ipl);\n \t\tmemcpy (fname + ipl, arg, len + 1);\n \t      }\n-\t    else\n+\t    else if (cpp_GCC_INCLUDE_DIR_len)\n \t      {\n-\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n-\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n-\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, arg, len + 1);\n+\t\tfname = xmalloc (cpp_GCC_INCLUDE_DIR_len + len + 1);\n+\t\tmemcpy (fname, cpp_GCC_INCLUDE_DIR, cpp_GCC_INCLUDE_DIR_len);\n+\t\tmemcpy (fname + cpp_GCC_INCLUDE_DIR_len, arg, len + 1);\n \t      }\n+\t    else\n+\t      fname = xstrdup (arg);\n \n \t    append_include_chain (pfile, CPP_OPTION (pfile, pending), fname,\n \t\t\t  opt_code == OPT_iwithprefix ? SYSTEM: BRACKET, 0);"}]}