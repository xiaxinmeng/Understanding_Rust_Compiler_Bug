{"sha": "8990e73a27e10f3a0ba4a210a5001eb8622b2771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5MGU3M2EyN2UxMGYzYTBiYTRhMjEwYTUwMDFlYjg2MjJiMjc3MQ==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-07-04T13:23:59Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-07-04T13:23:59Z"}, "message": "Vector Cost Model.\n\n2013-07-04  Tejas Belagod  <tejas.belagod@arm.com>\n\n\tVector Cost Model.\n        * config/aarch64/aarch64-protos.h (cpu_vector_cost): New.\n        (tune_params): New member 'const vec_costs'.\n        * config/aarch64/aarch64.c (generic_vector_cost): New.\n        (generic_tunings): New member 'generic_vector_cost'.\n        (aarch64_builtin_vectorization_cost): New.\n        (aarch64_add_stmt_cost): New.\n        (TARGET_VECTORIZE_ADD_STMT_COST): New.\n        (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): New.\n\nFrom-SVN: r200670", "tree": {"sha": "09627b111dde9fca60a127a43c29e34e8be2713c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09627b111dde9fca60a127a43c29e34e8be2713c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8990e73a27e10f3a0ba4a210a5001eb8622b2771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8990e73a27e10f3a0ba4a210a5001eb8622b2771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8990e73a27e10f3a0ba4a210a5001eb8622b2771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8990e73a27e10f3a0ba4a210a5001eb8622b2771/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93b47944fccb71577d5881bf6c0735a24f65447f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b47944fccb71577d5881bf6c0735a24f65447f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b47944fccb71577d5881bf6c0735a24f65447f"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "23c3cdeb17286292bf9712d62d439ac723466512", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8990e73a27e10f3a0ba4a210a5001eb8622b2771", "patch": "@@ -1,3 +1,14 @@\n+2013-07-04  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (cpu_vector_cost): New.\n+\t(tune_params): New member 'const vec_costs'.\n+\t* config/aarch64/aarch64.c (generic_vector_cost): New.\n+\t(generic_tunings): New member 'generic_vector_cost'.\n+\t(aarch64_builtin_vectorization_cost): New.\n+\t(aarch64_add_stmt_cost): New.\n+\t(TARGET_VECTORIZE_ADD_STMT_COST): New.\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): New.\n+\n 2013-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57777"}, {"sha": "a024bd2ed2d8dc399a70f9dc0150b31a92516766", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8990e73a27e10f3a0ba4a210a5001eb8622b2771", "patch": "@@ -134,11 +134,34 @@ struct cpu_regmove_cost\n   const int FP2FP;\n };\n \n+/* Cost for vector insn classes.  */\n+struct cpu_vector_cost\n+{\n+  const int scalar_stmt_cost;\t\t /* Cost of any scalar operation,\n+\t\t\t\t\t    excluding load and store.  */\n+  const int scalar_load_cost;\t\t /* Cost of scalar load.  */\n+  const int scalar_store_cost;\t\t /* Cost of scalar store.  */\n+  const int vec_stmt_cost;\t\t /* Cost of any vector operation,\n+\t\t\t\t\t    excluding load, store,\n+\t\t\t\t\t    vector-to-scalar and\n+\t\t\t\t\t    scalar-to-vector operation.  */\n+  const int vec_to_scalar_cost;\t\t /* Cost of vec-to-scalar operation.  */\n+  const int scalar_to_vec_cost;\t\t /* Cost of scalar-to-vector\n+\t\t\t\t\t    operation.  */\n+  const int vec_align_load_cost;\t /* Cost of aligned vector load.  */\n+  const int vec_unalign_load_cost;\t /* Cost of unaligned vector load.  */\n+  const int vec_unalign_store_cost;\t /* Cost of unaligned vector store.  */\n+  const int vec_store_cost;\t\t /* Cost of vector store.  */\n+  const int cond_taken_branch_cost;\t /* Cost of taken branch.  */\n+  const int cond_not_taken_branch_cost;  /* Cost of not taken branch.  */\n+};\n+\n struct tune_params\n {\n   const struct cpu_rtx_cost_table *const insn_extra_cost;\n   const struct cpu_addrcost_table *const addr_cost;\n   const struct cpu_regmove_cost *const regmove_cost;\n+  const struct cpu_vector_cost *const vec_costs;\n   const int memmov_cost;\n };\n "}, {"sha": "4ba46d215d749bc5146ab19fa0355e24ab5158cc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990e73a27e10f3a0ba4a210a5001eb8622b2771/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8990e73a27e10f3a0ba4a210a5001eb8622b2771", "patch": "@@ -45,6 +45,8 @@\n #include \"gimple.h\"\n #include \"optabs.h\"\n #include \"dwarf2.h\"\n+#include \"cfgloop.h\"\n+#include \"tree-vectorizer.h\"\n \n /* Classifies an address.\n \n@@ -184,6 +186,26 @@ static const struct cpu_regmove_cost generic_regmove_cost =\n   NAMED_PARAM (FP2FP, 4)\n };\n \n+/* Generic costs for vector insn classes.  */\n+#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n+__extension__\n+#endif\n+static const struct cpu_vector_cost generic_vector_cost =\n+{\n+  NAMED_PARAM (scalar_stmt_cost, 1),\n+  NAMED_PARAM (scalar_load_cost, 1),\n+  NAMED_PARAM (scalar_store_cost, 1),\n+  NAMED_PARAM (vec_stmt_cost, 1),\n+  NAMED_PARAM (vec_to_scalar_cost, 1),\n+  NAMED_PARAM (scalar_to_vec_cost, 1),\n+  NAMED_PARAM (vec_align_load_cost, 1),\n+  NAMED_PARAM (vec_unalign_load_cost, 1),\n+  NAMED_PARAM (vec_unalign_store_cost, 1),\n+  NAMED_PARAM (vec_store_cost, 1),\n+  NAMED_PARAM (cond_taken_branch_cost, 3),\n+  NAMED_PARAM (cond_not_taken_branch_cost, 1)\n+};\n+\n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n #endif\n@@ -192,6 +214,7 @@ static const struct tune_params generic_tunings =\n   &generic_rtx_cost_table,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n+  &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4)\n };\n \n@@ -4719,6 +4742,101 @@ aarch64_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return aarch64_tune_params->memmov_cost;\n }\n \n+/* Vectorizer cost model target hooks.  */\n+\n+/* Implement targetm.vectorize.builtin_vectorization_cost.  */\n+static int\n+aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n+\t\t\t\t    tree vectype,\n+\t\t\t\t    int misalign ATTRIBUTE_UNUSED)\n+{\n+  unsigned elements;\n+\n+  switch (type_of_cost)\n+    {\n+      case scalar_stmt:\n+\treturn aarch64_tune_params->vec_costs->scalar_stmt_cost;\n+\n+      case scalar_load:\n+\treturn aarch64_tune_params->vec_costs->scalar_load_cost;\n+\n+      case scalar_store:\n+\treturn aarch64_tune_params->vec_costs->scalar_store_cost;\n+\n+      case vector_stmt:\n+\treturn aarch64_tune_params->vec_costs->vec_stmt_cost;\n+\n+      case vector_load:\n+\treturn aarch64_tune_params->vec_costs->vec_align_load_cost;\n+\n+      case vector_store:\n+\treturn aarch64_tune_params->vec_costs->vec_store_cost;\n+\n+      case vec_to_scalar:\n+\treturn aarch64_tune_params->vec_costs->vec_to_scalar_cost;\n+\n+      case scalar_to_vec:\n+\treturn aarch64_tune_params->vec_costs->scalar_to_vec_cost;\n+\n+      case unaligned_load:\n+\treturn aarch64_tune_params->vec_costs->vec_unalign_load_cost;\n+\n+      case unaligned_store:\n+\treturn aarch64_tune_params->vec_costs->vec_unalign_store_cost;\n+\n+      case cond_branch_taken:\n+\treturn aarch64_tune_params->vec_costs->cond_taken_branch_cost;\n+\n+      case cond_branch_not_taken:\n+\treturn aarch64_tune_params->vec_costs->cond_not_taken_branch_cost;\n+\n+      case vec_perm:\n+      case vec_promote_demote:\n+\treturn aarch64_tune_params->vec_costs->vec_stmt_cost;\n+\n+      case vec_construct:\n+        elements = TYPE_VECTOR_SUBPARTS (vectype);\n+\treturn elements / 2 + 1;\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\n+\n+/* Implement targetm.vectorize.add_stmt_cost.  */\n+static unsigned\n+aarch64_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n+\t\t       struct _stmt_vec_info *stmt_info, int misalign,\n+\t\t       enum vect_cost_model_location where)\n+{\n+  unsigned *cost = (unsigned *) data;\n+  unsigned retval = 0;\n+\n+  if (flag_vect_cost_model)\n+    {\n+      tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;\n+      int stmt_cost =\n+\t    aarch64_builtin_vectorization_cost (kind, vectype, misalign);\n+\n+      /* Statements in an inner loop relative to the loop being\n+\t vectorized are weighted more heavily.  The value here is\n+\t a function (linear for now) of the loop nest level.  */\n+      if (where == vect_body && stmt_info && stmt_in_inner_loop_p (stmt_info))\n+\t{\n+\t  loop_vec_info loop_info = STMT_VINFO_LOOP_VINFO (stmt_info);\n+\t  struct loop *loop =  LOOP_VINFO_LOOP (loop_info);\n+\t  unsigned nest_level = loop_depth (loop);\n+\n+\t  count *= nest_level;\n+\t}\n+\n+      retval = (unsigned) (count * stmt_cost);\n+      cost[where] += retval;\n+    }\n+\n+  return retval;\n+}\n+\n static void initialize_aarch64_code_model (void);\n \n /* Parse the architecture extension string.  */\n@@ -8080,6 +8198,13 @@ aarch64_vectorize_vec_perm_const_ok (enum machine_mode vmode,\n #undef TARGET_ARRAY_MODE_SUPPORTED_P\n #define TARGET_ARRAY_MODE_SUPPORTED_P aarch64_array_mode_supported_p\n \n+#undef TARGET_VECTORIZE_ADD_STMT_COST\n+#define TARGET_VECTORIZE_ADD_STMT_COST aarch64_add_stmt_cost\n+\n+#undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n+  aarch64_builtin_vectorization_cost\n+\n #undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n #define TARGET_VECTORIZE_PREFERRED_SIMD_MODE aarch64_preferred_simd_mode\n "}]}