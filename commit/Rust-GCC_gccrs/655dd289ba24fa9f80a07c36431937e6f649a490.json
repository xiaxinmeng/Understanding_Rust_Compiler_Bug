{"sha": "655dd289ba24fa9f80a07c36431937e6f649a490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1ZGQyODliYTI0ZmE5ZjgwYTA3YzM2NDMxOTM3ZTZmNjQ5YTQ5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-14T21:06:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-14T21:06:26Z"}, "message": "except.c (remove_unreachable_regions): New.\n\n\t* except.c (remove_unreachable_regions): New.\n\t(free_eh_status): Clear exception_handler_labels.\n\t(convert_from_eh_region_ranges): Call remove_unreachable_regions.\n\t(find_exception_handler_labels): Don't add the same label more than\n\tonce.\n\t(remove_exception_handler_label): Don't die if\n\tfind_exception_handler_labels hasn't been called for the current\n\tfunction yet.\n\nFrom-SVN: r48845", "tree": {"sha": "ec54cec524d78b39ae5d7136e8cd28a953bc4958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec54cec524d78b39ae5d7136e8cd28a953bc4958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/655dd289ba24fa9f80a07c36431937e6f649a490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655dd289ba24fa9f80a07c36431937e6f649a490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655dd289ba24fa9f80a07c36431937e6f649a490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655dd289ba24fa9f80a07c36431937e6f649a490/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6a5e4628761239be448d4dfd14eed42bc37383c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a5e4628761239be448d4dfd14eed42bc37383c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a5e4628761239be448d4dfd14eed42bc37383c"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "e61e195aaeeb736858414e369f8f9145f9d7f775", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dd289ba24fa9f80a07c36431937e6f649a490/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dd289ba24fa9f80a07c36431937e6f649a490/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=655dd289ba24fa9f80a07c36431937e6f649a490", "patch": "@@ -1,3 +1,14 @@\n+2002-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* except.c (remove_unreachable_regions): New.\n+\t(free_eh_status): Clear exception_handler_labels.\n+\t(convert_from_eh_region_ranges): Call remove_unreachable_regions.\n+\t(find_exception_handler_labels): Don't add the same label more than\n+\tonce.\n+\t(remove_exception_handler_label): Don't die if\n+\tfind_exception_handler_labels hasn't been called for the current\n+\tfunction yet.\n+\n Mon Jan 14 21:26:13 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* toplev.c (rest_of_compilation): Rebuild jump labels after"}, {"sha": "2ce69f2c05dc669e415cd9c43729aa68a446c902", "filename": "gcc/except.c", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655dd289ba24fa9f80a07c36431937e6f649a490/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655dd289ba24fa9f80a07c36431937e6f649a490/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=655dd289ba24fa9f80a07c36431937e6f649a490", "patch": "@@ -263,6 +263,7 @@ static rtx get_exception_filter\t\t\tPARAMS ((struct function *));\n static void collect_eh_region_array\t\tPARAMS ((void));\n static void resolve_fixup_regions\t\tPARAMS ((void));\n static void remove_fixup_regions\t\tPARAMS ((void));\n+static void remove_unreachable_regions\t\tPARAMS ((rtx));\n static void convert_from_eh_region_ranges_1\tPARAMS ((rtx *, int *, int));\n \n static struct eh_region *duplicate_eh_region_1\tPARAMS ((struct eh_region *,\n@@ -632,6 +633,7 @@ free_eh_status (f)\n \n   free (eh);\n   f->eh = NULL;\n+  exception_handler_labels = NULL;\n }\n \n \f\n@@ -1212,6 +1214,69 @@ remove_fixup_regions ()\n     }\n }\n \n+/* Remove all regions whose labels are not reachable from insns.  */\n+\n+static void\n+remove_unreachable_regions (insns)\n+     rtx insns;\n+{\n+  int i, *uid_region_num;\n+  bool *reachable;\n+  struct eh_region *r;\n+  rtx insn;\n+\n+  uid_region_num = xcalloc (get_max_uid (), sizeof(int));\n+  reachable = xcalloc (cfun->eh->last_region_number + 1, sizeof(bool));\n+\n+  for (i = cfun->eh->last_region_number; i > 0; --i)\n+    {\n+      r = cfun->eh->region_array[i];\n+      if (!r || r->region_number != i)\n+\tcontinue;\n+\n+      if (r->resume)\n+        {\n+\t  if (uid_region_num[INSN_UID (r->resume)])\n+\t    abort ();\n+\t  uid_region_num[INSN_UID (r->resume)] = i;\n+        }\n+      if (r->label)\n+        {\n+\t  if (uid_region_num[INSN_UID (r->label)])\n+\t    abort ();\n+\t  uid_region_num[INSN_UID (r->label)] = i;\n+        }\n+      if (r->type == ERT_TRY && r->u.try.continue_label)\n+        {\n+\t  if (uid_region_num[INSN_UID (r->u.try.continue_label)])\n+\t    abort ();\n+\t  uid_region_num[INSN_UID (r->u.try.continue_label)] = i;\n+        }\n+    }\n+\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    reachable[uid_region_num[INSN_UID (insn)]] = true;\n+\n+  for (i = cfun->eh->last_region_number; i > 0; --i)\n+    {\n+      r = cfun->eh->region_array[i];\n+      if (r && r->region_number == i && !reachable[i])\n+\t{\n+\t  /* Don't remove ERT_THROW regions if their outer region\n+\t     is reachable.  */\n+\t  if (r->type == ERT_THROW\n+\t      && r->outer\n+\t      && reachable[r->outer->region_number])\n+\t    continue;\n+\n+\t  remove_eh_handler (r);\n+\t}\n+    }\n+\n+  free (reachable);\n+  free (uid_region_num);\n+}\n+\n /* Turn NOTE_INSN_EH_REGION notes into REG_EH_REGION notes for each\n    can_throw instruction in the region.  */\n \n@@ -1314,6 +1379,7 @@ convert_from_eh_region_ranges ()\n   free (stack);\n \n   remove_fixup_regions ();\n+  remove_unreachable_regions (insns);\n }\n \n void\n@@ -1332,7 +1398,7 @@ find_exception_handler_labels ()\n       struct eh_region *region = cfun->eh->region_array[i];\n       rtx lab;\n \n-      if (! region)\n+      if (! region || region->region_number != i)\n \tcontinue;\n       if (cfun->eh->built_landing_pads)\n \tlab = region->landing_pad;\n@@ -2427,6 +2493,11 @@ remove_exception_handler_label (label)\n {\n   rtx *pl, l;\n \n+  /* If exception_handler_labels was not built yet,\n+     there is nothing to do.  */\n+  if (exception_handler_labels == NULL)\n+    return;\n+\n   for (pl = &exception_handler_labels, l = *pl;\n        XEXP (l, 0) != label;\n        pl = &XEXP (l, 1), l = *pl)"}]}