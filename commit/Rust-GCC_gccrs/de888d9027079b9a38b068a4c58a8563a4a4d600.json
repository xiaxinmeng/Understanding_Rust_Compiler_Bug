{"sha": "de888d9027079b9a38b068a4c58a8563a4a4d600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4ODhkOTAyNzA3OWI5YTM4YjA2OGE0YzU4YTg1NjNhNGE0ZDYwMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-14T20:07:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-14T20:07:22Z"}, "message": "re PR debug/47946 (Dwarf uses 64-bits to refer to a structure offset unnecessarily)\n\n\tPR debug/47946\n\t* dwarf2out.c (add_bit_offset_attribute): If bit_offset is negative,\n\temit it as add_AT_int instead of add_AT_unsigned.\n\nFrom-SVN: r170956", "tree": {"sha": "e82c884105511edf160c6ea4422ba0988d643447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e82c884105511edf160c6ea4422ba0988d643447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de888d9027079b9a38b068a4c58a8563a4a4d600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de888d9027079b9a38b068a4c58a8563a4a4d600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de888d9027079b9a38b068a4c58a8563a4a4d600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de888d9027079b9a38b068a4c58a8563a4a4d600/comments", "author": null, "committer": null, "parents": [{"sha": "f4e749b49840f856b460fdf2a8e501d4436fbc16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e749b49840f856b460fdf2a8e501d4436fbc16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e749b49840f856b460fdf2a8e501d4436fbc16"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "a9d4d62072746f37249074cdd18729dd24870932", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de888d9027079b9a38b068a4c58a8563a4a4d600/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de888d9027079b9a38b068a4c58a8563a4a4d600/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de888d9027079b9a38b068a4c58a8563a4a4d600", "patch": "@@ -1,4 +1,10 @@\n-2011-01-14  Tom Tromey  <tromey@redhat.com>\n+2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/47946\n+\t* dwarf2out.c (add_bit_offset_attribute): If bit_offset is negative,\n+\temit it as add_AT_int instead of add_AT_unsigned.\n+\n+2011-03-14  Tom Tromey  <tromey@redhat.com>\n \n \t* unwind-dw2.c: Include sys/sdt.h if it exists.\n \t(_Unwind_DebugHook): Use STAP_PROBE2."}, {"sha": "3319c61cbcd6af759f70bd8932325d101cc1eba8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de888d9027079b9a38b068a4c58a8563a4a4d600/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de888d9027079b9a38b068a4c58a8563a4a4d600/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=de888d9027079b9a38b068a4c58a8563a4a4d600", "patch": "@@ -1,6 +1,6 @@\n /* Output Dwarf2 format symbol table information from GCC.\n    Copyright (C) 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Gary Funck (gary@intrepid.com).\n    Derived from DWARF 1 implementation of Ron Guilmette (rfg@monkeys.com).\n@@ -17685,7 +17685,7 @@ add_bit_offset_attribute (dw_die_ref die, tree decl)\n   HOST_WIDE_INT bitpos_int;\n   HOST_WIDE_INT highest_order_object_bit_offset;\n   HOST_WIDE_INT highest_order_field_bit_offset;\n-  HOST_WIDE_INT unsigned bit_offset;\n+  HOST_WIDE_INT bit_offset;\n \n   /* Must be a field and a bit field.  */\n   gcc_assert (type && TREE_CODE (decl) == FIELD_DECL);\n@@ -17718,7 +17718,10 @@ add_bit_offset_attribute (dw_die_ref die, tree decl)\n        ? highest_order_object_bit_offset - highest_order_field_bit_offset\n        : highest_order_field_bit_offset - highest_order_object_bit_offset);\n \n-  add_AT_unsigned (die, DW_AT_bit_offset, bit_offset);\n+  if (bit_offset < 0)\n+    add_AT_int (die, DW_AT_bit_offset, bit_offset);\n+  else\n+    add_AT_unsigned (die, DW_AT_bit_offset, (unsigned HOST_WIDE_INT) bit_offset);\n }\n \n /* For a FIELD_DECL node which represents a bit field, output an attribute"}]}