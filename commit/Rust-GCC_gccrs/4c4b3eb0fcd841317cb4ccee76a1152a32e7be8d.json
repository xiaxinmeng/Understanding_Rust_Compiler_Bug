{"sha": "4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0YjNlYjBmY2Q4NDEzMTdjYjRjY2VlNzZhMTE1MmEzMmU3YmU4ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-01-02T18:53:27Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-01-02T18:53:27Z"}, "message": "re PR libgomp/25259 (bootstrap failures on non-C99 platforms (no stdint.h))\n\nconfig:\n2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/25259\n\t* stdint.m4: New.\n\ngcc:\n2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/25259\n\t* Makefile.in (DECNUMINC): Include libdecnumber's build directory.\n\nlibgfortran:\n2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/25259\n\t* configure.ac: Use GCC_HEADER_STDINT.\n\t* libgfortran.h: Include gstdint.h.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nlibdecnumber:\n2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/25259\n\t* configure.ac: Use GCC_HEADER_STDINT.\n\t* decContext.h: Include gstdint.h.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r109241", "tree": {"sha": "617d15c744e086d1f228e2064e3a25400263e524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617d15c744e086d1f228e2064e3a25400263e524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6fbc1e26b60d2d7b3ce0b820d4a9e12e426fd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fbc1e26b60d2d7b3ce0b820d4a9e12e426fd75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fbc1e26b60d2d7b3ce0b820d4a9e12e426fd75"}], "stats": {"total": 7637, "additions": 7343, "deletions": 294}, "files": [{"sha": "cf60516185eb17bdbcf5b0d9719e33f76cb6e65c", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,3 +1,8 @@\n+2006-02-01  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR target/25259\n+        * stdint.m4: New.\n+\n 2005-12-20  Paolo Bonzini  <bonzini@gnu.org>\n \n \tRevert Ada-related part of the previous change."}, {"sha": "21ef2ec43ac1903cb9fe5c18ea451abcba21c9a5", "filename": "config/stdint.m4", "status": "added", "additions": 486, "deletions": 0, "changes": 486, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/config%2Fstdint.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/config%2Fstdint.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fstdint.m4?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -0,0 +1,486 @@\n+dnl @synopsis GCC_HEADER_STDINT [( HEADER-TO-GENERATE [, HEADERS-TO-CHECK])]\n+dnl\n+dnl the \"ISO C9X: 7.18 Integer types <stdint.h>\" section requires the\n+dnl existence of an include file <stdint.h> that defines a set of\n+dnl typedefs, especially uint8_t,int32_t,uintptr_t.\n+dnl Many older installations will not provide this file, but some will\n+dnl have the very same definitions in <inttypes.h>. In other enviroments\n+dnl we can use the inet-types in <sys/types.h> which would define the\n+dnl typedefs int8_t and u_int8_t respectivly.\n+dnl\n+dnl This macros will create a local \"_stdint.h\" or the headerfile given as\n+dnl an argument. In many cases that file will pick the definition from a\n+dnl \"#include <stdint.h>\" or \"#include <inttypes.h>\" statement, while\n+dnl in other environments it will provide the set of basic 'stdint's defined:\n+dnl int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,intptr_t,uintptr_t\n+dnl int_least32_t.. int_fast32_t.. intmax_t\n+dnl which may or may not rely on the definitions of other files.\n+dnl\n+dnl Sometimes the stdint.h or inttypes.h headers conflict with sys/types.h,\n+dnl so we test the headers together with sys/types.h and always include it\n+dnl into the generated header (to match the tests with the generated file).\n+dnl Hopefully this is not a big annoyance.\n+dnl\n+dnl If your installed header files require the stdint-types you will want to\n+dnl create an installable file mylib-int.h that all your other installable\n+dnl header may include. So, for a library package named \"mylib\", just use\n+dnl      GCC_HEADER_STDINT(mylib-int.h)\n+dnl in configure.in and install that header file in Makefile.am along with\n+dnl the other headers (mylib.h).  The mylib-specific headers can simply\n+dnl use \"#include <mylib-int.h>\" to obtain the stdint-types.\n+dnl\n+dnl Remember, if the system already had a valid <stdint.h>, the generated\n+dnl file will include it directly. No need for fuzzy HAVE_STDINT_H things...\n+dnl\n+dnl @author  Guido Draheim <guidod@gmx.de>, Paolo Bonzini <bonzini@gnu.org>\n+\n+AC_DEFUN([GCC_HEADER_STDINT],\n+[m4_define(_GCC_STDINT_H, m4_ifval($1, $1, _stdint.h))\n+\n+inttype_headers=`echo inttypes.h sys/inttypes.h $2 | sed -e 's/,/ /g'`\n+\n+acx_cv_header_stdint=stddef.h\n+acx_cv_header_stdint_kind=\"(already complete)\"\n+for i in stdint.h $inttype_headers; do\n+  unset ac_cv_type_uintptr_t\n+  unset ac_cv_type_uintmax_t\n+  unset ac_cv_type_int_least32_t\n+  unset ac_cv_type_int_fast32_t\n+  unset ac_cv_type_uint64_t\n+  _AS_ECHO_N([looking for a compliant stdint.h in $i, ])\n+  AC_CHECK_TYPE(uintmax_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n+#include <$i>])\n+  AC_CHECK_TYPE(uintptr_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n+#include <$i>])\n+  AC_CHECK_TYPE(int_least32_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n+#include <$i>])\n+  AC_CHECK_TYPE(int_fast32_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n+#include <$i>])\n+  AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind=\"(lacks uint64_t)\"], [#include <sys/types.h>\n+#include <$i>])\n+  break\n+done\n+if test \"$acx_cv_header_stdint\" = stddef.h; then\n+  acx_cv_header_stdint_kind=\"(lacks uintptr_t)\"\n+  for i in stdint.h $inttype_headers; do\n+    unset ac_cv_type_uint32_t\n+    unset ac_cv_type_uint64_t\n+    _AS_ECHO_N([looking for an incomplete stdint.h in $i, ])\n+    AC_CHECK_TYPE(uint32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n+#include <$i>])\n+    AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind=\"(lacks uintptr_t and uint64_t)\"], [#include <sys/types.h>\n+#include <$i>])\n+    break\n+  done\n+fi\n+if test \"$acx_cv_header_stdint\" = stddef.h; then\n+  acx_cv_header_stdint_kind=\"(u_intXX_t style)\"\n+  for i in sys/types.h $inttype_headers; do\n+    unset ac_cv_type_u_int32_t\n+    unset ac_cv_type_u_int64_t\n+    _AS_ECHO_N([looking for u_intXX_t types in $i, ])\n+    AC_CHECK_TYPE(u_int32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n+#include <$i>])\n+    AC_CHECK_TYPE(u_int64_t,,[acx_cv_header_stdint_kind=\"(u_intXX_t style, lacks u_int64_t)\"], [#include <sys/types.h>\n+#include <$i>])\n+    break\n+  done\n+fi\n+if test \"$acx_cv_header_stdint\" = stddef.h; then\n+  acx_cv_header_stdint_kind=\"(using manual detection)\"\n+fi\n+\n+test -z \"$ac_cv_type_uintptr_t\" && ac_cv_type_uintptr_t=no\n+test -z \"$ac_cv_type_uint64_t\" && ac_cv_type_uint64_t=no\n+test -z \"$ac_cv_type_u_int64_t\" && ac_cv_type_u_int64_t=no\n+test -z \"$ac_cv_type_int_least32_t\" && ac_cv_type_int_least32_t=no\n+test -z \"$ac_cv_type_int_fast32_t\" && ac_cv_type_int_fast32_t=no\n+\n+# ----------------- Summarize what we found so far\n+\n+AC_MSG_CHECKING([what to include in _GCC_STDINT_H])\n+\n+case `AS_BASENAME(_GCC_STDINT_H)` in\n+  stdint.h) AC_MSG_WARN([are you sure you want it there?]) ;;\n+  inttypes.h) AC_MSG_WARN([are you sure you want it there?]) ;;\n+  *) ;;\n+esac\n+\n+AC_MSG_RESULT($acx_cv_header_stdint $acx_cv_header_stdint_kind)\n+\n+# ----------------- done included file, check C basic types --------\n+\n+# Lacking an uintptr_t?  Test size of void *\n+case \"$acx_cv_header_stdint:$ac_cv_type_uintptr_t\" in\n+  stddef.h:* | *:no) AC_CHECK_SIZEOF(void *) ;;\n+esac\n+\n+# Lacking an uint64_t?  Test size of long\n+case \"$acx_cv_header_stdint:$ac_cv_type_uint64_t:$ac_cv_type_u_int64_t\" in\n+  stddef.h:*:* | *:no:no) AC_CHECK_SIZEOF(long) ;;\n+esac\n+\n+if test $acx_cv_header_stdint = stddef.h; then\n+  # Lacking a good header?  Test size of everything and deduce all types.\n+  AC_CHECK_SIZEOF(int)\n+  AC_CHECK_SIZEOF(short)\n+  AC_CHECK_SIZEOF(char)\n+\n+  AC_MSG_CHECKING(for type equivalent to int8_t)\n+  case \"$ac_cv_sizeof_char\" in\n+    1) acx_cv_type_int8_t=char ;;\n+    *) AC_MSG_ERROR(no 8-bit type, please report a bug)\n+  esac\n+  AC_MSG_RESULT($acx_cv_type_int8_t)\n+\n+  AC_MSG_CHECKING(for type equivalent to int16_t)\n+  case \"$ac_cv_sizeof_int:$ac_cv_sizeof_short\" in\n+    2:*) acx_cv_type_int16_t=int ;;\n+    *:2) acx_cv_type_int16_t=short ;;\n+    *) AC_MSG_ERROR(no 16-bit type, please report a bug)\n+  esac\n+  AC_MSG_RESULT($acx_cv_type_int16_t)\n+\n+  AC_MSG_CHECKING(for type equivalent to int32_t)\n+  case \"$ac_cv_sizeof_int:$ac_cv_sizeof_long\" in\n+    4:*) acx_cv_type_int32_t=int ;;\n+    *:4) acx_cv_type_int32_t=long ;;\n+    *) AC_MSG_ERROR(no 32-bit type, please report a bug)\n+  esac\n+  AC_MSG_RESULT($acx_cv_type_int32_t)\n+fi\n+\n+# These tests are here to make the output prettier\n+\n+if test \"$ac_cv_type_uint64_t\" != yes && test \"$ac_cv_type_u_int64_t\" != yes; then\n+  case \"$ac_cv_sizeof_long\" in\n+    8) acx_cv_type_int64_t=long ;;\n+  esac\n+  AC_MSG_CHECKING(for type equivalent to int64_t)\n+  AC_MSG_RESULT(${acx_cv_type_int64_t-'using preprocessor symbols'})\n+fi\n+\n+# Now we can use the above types\n+\n+if test \"$ac_cv_type_uintptr_t\" != yes; then\n+  AC_MSG_CHECKING(for type equivalent to intptr_t)\n+  case $ac_cv_sizeof_void_p in\n+    2) acx_cv_type_intptr_t=int16_t ;;\n+    4) acx_cv_type_intptr_t=int32_t ;;\n+    8) acx_cv_type_intptr_t=int64_t ;;\n+    *) AC_MSG_ERROR(no equivalent for intptr_t, please report a bug)\n+  esac\n+  AC_MSG_RESULT($acx_cv_type_intptr_t)\n+fi\n+\n+# ----------------- done all checks, emit header -------------\n+AC_CONFIG_COMMANDS(_GCC_STDINT_H, [\n+if test \"$GCC\" = yes; then\n+  echo \"/* generated for \" `$CC --version | sed 1q` \"*/\" > tmp-stdint.h\n+else\n+  echo \"/* generated for $CC */\" > tmp-stdint.h\n+fi\n+\n+sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+  #ifndef GCC_GENERATED_STDINT_H\n+  #define GCC_GENERATED_STDINT_H 1\n+\n+  #include <sys/types.h>\n+EOF\n+\n+if test \"$acx_cv_header_stdint\" != stdint.h; then\n+  echo \"#include <stddef.h>\" >> tmp-stdint.h\n+fi\n+if test \"$acx_cv_header_stdint\" != stddef.h; then\n+  echo \"#include <$acx_cv_header_stdint>\" >> tmp-stdint.h\n+fi\n+\n+sed 's/^ *//' >> tmp-stdint.h <<EOF\n+  /* glibc uses these symbols as guards to prevent redefinitions.  */\n+  #ifdef __int8_t_defined\n+  #define _INT8_T\n+  #define _INT16_T\n+  #define _INT32_T\n+  #endif\n+  #ifdef __uint32_t_defined\n+  #define _UINT32_T\n+  #endif\n+\n+EOF\n+\n+# ----------------- done header, emit basic int types -------------\n+if test \"$acx_cv_header_stdint\" = stddef.h; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    #ifndef _UINT8_T\n+    #define _UINT8_T\n+    typedef unsigned $acx_cv_type_int8_t uint8_t;\n+    #endif\n+\n+    #ifndef _UINT16_T\n+    #define _UINT16_T\n+    typedef unsigned $acx_cv_type_int16_t uint16_t;\n+    #endif\n+\n+    #ifndef _UINT32_T\n+    #define _UINT32_T\n+    typedef unsigned $acx_cv_type_int32_t uint32_t;\n+    #endif\n+\n+    #ifndef _INT8_T\n+    #define _INT8_T\n+    typedef $acx_cv_type_int8_t int8_t;\n+    #endif\n+\n+    #ifndef _INT16_T\n+    #define _INT16_T\n+    typedef $acx_cv_type_int16_t int16_t;\n+    #endif\n+\n+    #ifndef _INT32_T\n+    #define _INT32_T\n+    typedef $acx_cv_type_int32_t int32_t;\n+    #endif\n+EOF\n+elif test \"$ac_cv_type_u_int32_t\" = yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* int8_t int16_t int32_t defined by inet code, we do the u_intXX types */\n+    #ifndef _INT8_T\n+    #define _INT8_T\n+    #endif\n+    #ifndef _INT16_T\n+    #define _INT16_T\n+    #endif\n+    #ifndef _INT32_T\n+    #define _INT32_T\n+    #endif\n+\n+    #ifndef _UINT8_T\n+    #define _UINT8_T\n+    typedef u_int8_t uint8_t;\n+    #endif\n+\n+    #ifndef _UINT16_T\n+    #define _UINT16_T\n+    typedef u_int16_t uint16_t;\n+    #endif\n+\n+    #ifndef _UINT32_T\n+    #define _UINT32_T\n+    typedef u_int32_t uint32_t;\n+    #endif\n+EOF\n+else\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* Some systems have guard macros to prevent redefinitions, define them.  */\n+    #ifndef _INT8_T\n+    #define _INT8_T\n+    #endif\n+    #ifndef _INT16_T\n+    #define _INT16_T\n+    #endif\n+    #ifndef _INT32_T\n+    #define _INT32_T\n+    #endif\n+    #ifndef _UINT8_T\n+    #define _UINT8_T\n+    #endif\n+    #ifndef _UINT16_T\n+    #define _UINT16_T\n+    #endif\n+    #ifndef _UINT32_T\n+    #define _UINT32_T\n+    #endif\n+EOF\n+fi\n+\n+# ------------- done basic int types, emit int64_t types ------------\n+if test \"$ac_cv_type_uint64_t\" = yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* system headers have good uint64_t and int64_t */\n+    #ifndef _INT64_T\n+    #define _INT64_T\n+    #endif\n+    #ifndef _UINT64_T\n+    #define _UINT64_T\n+    #endif\n+EOF\n+elif test \"$ac_cv_type_u_int64_t\" = yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* system headers have an u_int64_t (and int64_t) */\n+    #ifndef _INT64_T\n+    #define _INT64_T\n+    #endif\n+    #ifndef _UINT64_T\n+    #define _UINT64_T\n+    typedef u_int64_t uint64_t;\n+    #endif\n+EOF\n+elif test -n \"$acx_cv_type_int64_t\"; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* architecture has a 64-bit type, $acx_cv_type_int64_t */\n+    #ifndef _INT64_T\n+    #define _INT64_T\n+    typedef $acx_cv_type_int64_t int64_t;\n+    #endif\n+    #ifndef _UINT64_T\n+    #define _UINT64_T\n+    typedef unsigned $acx_cv_type_int64_t uint64_t;\n+    #endif\n+EOF\n+else\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* some common heuristics for int64_t, using compiler-specific tests */\n+    #if defined __STDC_VERSION__ && (__STDC_VERSION__-0) >= 199901L\n+    #ifndef _INT64_T\n+    #define _INT64_T\n+    typedef long long int64_t;\n+    #endif\n+    #ifndef _UINT64_T\n+    #define _UINT64_T\n+    typedef unsigned long long uint64_t;\n+    #endif\n+\n+    #elif defined __GNUC__ && defined (__STDC__) && __STDC__-0\n+    /* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and\n+       does not implement __extension__.  But that compiler doesn't define\n+       __GNUC_MINOR__.  */\n+    # if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)\n+    # define __extension__\n+    # endif\n+\n+    # ifndef _INT64_T\n+    # define _INT64_T\n+    __extension__ typedef long long int64_t;\n+    # endif\n+    # ifndef _UINT64_T\n+    # define _UINT64_T\n+    __extension__ typedef unsigned long long uint64_t;\n+    # endif\n+\n+    #elif !defined __STRICT_ANSI__\n+    # if defined _MSC_VER || defined __WATCOMC__ || defined __BORLANDC__\n+\n+    #  ifndef _INT64_T\n+    #  define _INT64_T\n+    typedef __int64 int64_t;\n+    #  endif\n+    #  ifndef _UINT64_T\n+    #  define _UINT64_T\n+    typedef unsigned __int64 uint64_t;\n+    #  endif\n+    # endif /* compiler */\n+\n+    #endif /* ANSI version */\n+EOF\n+fi\n+\n+# ------------- done int64_t types, emit intptr types ------------\n+if test \"$ac_cv_type_uintptr_t\" != yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* Define intptr_t based on sizeof(void*) = $ac_cv_sizeof_void_p */\n+    typedef u$acx_cv_type_intptr_t uintptr_t;\n+    typedef $acx_cv_type_intptr_t  intptr_t;\n+EOF\n+fi\n+\n+# ------------- done intptr types, emit int_least types ------------\n+if test \"$ac_cv_type_int_least32_t\" != yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* Define int_least types */\n+    typedef int8_t     int_least8_t;\n+    typedef int16_t    int_least16_t;\n+    typedef int32_t    int_least32_t;\n+    #ifdef _INT64_T\n+    typedef int64_t    int_least64_t;\n+    #endif\n+\n+    typedef uint8_t    uint_least8_t;\n+    typedef uint16_t   uint_least16_t;\n+    typedef uint32_t   uint_least32_t;\n+    #ifdef _UINT64_T\n+    typedef uint64_t   uint_least64_t;\n+    #endif\n+EOF\n+fi\n+\n+# ------------- done intptr types, emit int_fast types ------------\n+if test \"$ac_cv_type_int_fast32_t\" != yes; then\n+  dnl NOTE: The following code assumes that sizeof (int) > 1.\n+  dnl Fix when strange machines are reported.\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* Define int_fast types.  short is often slow */\n+    typedef int8_t       int_fast8_t;\n+    typedef int          int_fast16_t;\n+    typedef int32_t      int_fast32_t;\n+    #ifdef _INT64_T\n+    typedef int64_t      int_fast64_t;\n+    #endif\n+\n+    typedef uint8_t      uint_fast8_t;\n+    typedef unsigned int uint_fast16_t;\n+    typedef uint32_t     uint_fast32_t;\n+    #ifdef _UINT64_T\n+    typedef uint64_t     uint_fast64_t;\n+    #endif\n+EOF\n+fi\n+\n+if test \"$ac_cv_type_uintmax_t\" != yes; then\n+  sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+    /* Define intmax based on what we found */\n+    #ifdef _INT64_T\n+    typedef int64_t       intmax_t;\n+    #else\n+    typedef long          intmax_t;\n+    #endif\n+    #ifdef _UINT64_T\n+    typedef uint64_t      uintmax_t;\n+    #else\n+    typedef unsigned long uintmax_t;\n+    #endif\n+EOF\n+fi\n+\n+sed 's/^ *//' >> tmp-stdint.h <<EOF\n+\n+  #endif /* GCC_GENERATED_STDINT_H */\n+EOF\n+\n+if test -r ]_GCC_STDINT_H[ && cmp -s tmp-stdint.h ]_GCC_STDINT_H[; then\n+  rm -f tmp-stdint.h\n+else\n+  mv -f tmp-stdint.h ]_GCC_STDINT_H[\n+fi\n+\n+], [\n+GCC=\"$GCC\"\n+CC=\"$CC\"\n+acx_cv_header_stdint=\"$acx_cv_header_stdint\"\n+acx_cv_type_int8_t=\"$acx_cv_type_int8_t\"\n+acx_cv_type_int16_t=\"$acx_cv_type_int16_t\"\n+acx_cv_type_int32_t=\"$acx_cv_type_int32_t\"\n+acx_cv_type_int64_t=\"$acx_cv_type_int64_t\"\n+acx_cv_type_intptr_t=\"$acx_cv_type_intptr_t\"\n+ac_cv_type_uintmax_t=\"$ac_cv_type_uintmax_t\"\n+ac_cv_type_uintptr_t=\"$ac_cv_type_uintptr_t\"\n+ac_cv_type_uint64_t=\"$ac_cv_type_uint64_t\"\n+ac_cv_type_u_int64_t=\"$ac_cv_type_u_int64_t\"\n+ac_cv_type_u_int32_t=\"$ac_cv_type_u_int32_t\"\n+ac_cv_type_int_least32_t=\"$ac_cv_type_int_least32_t\"\n+ac_cv_type_int_fast32_t=\"$ac_cv_type_int_fast32_t\"\n+ac_cv_sizeof_void_p=\"$ac_cv_sizeof_void_p\"\n+])\n+\n+])"}, {"sha": "1342528f9c7bdcd0181330d22e5889d6063b2eee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,3 +1,8 @@\n+2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR target/25259\n+        * Makefile.in (DECNUMINC): Include libdecnumber's build directory.\n+\n 2006-01-02  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* config/arm/arm.c (all_fpus): Fix comment typo."}, {"sha": "6c7ca28853dcc1e26b8729c9e142ed70ce731351", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,8 +1,9 @@\n # Makefile for GNU Compiler Collection\n # Run 'configure' to generate Makefile from Makefile.in\n \n-# Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-# 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+# Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996,\n+# 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+# Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -300,7 +301,7 @@ CPPINC = -I$(srcdir)/../libcpp/include\n \n # Where to find decNumber\n DECNUM = $(srcdir)/../libdecnumber\n-DECNUMINC = -I$(DECNUM)\n+DECNUMINC = -I$(DECNUM) -I../libdecnumber\n LIBDECNUMBER = ../libdecnumber/libdecnumber.a\n \n # Substitution type for target's getgroups 2nd arg."}, {"sha": "e509a62c0540acf8dfe8888d24474988aed5c273", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,3 +1,11 @@\n+2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR target/25259\n+        * configure.ac: Use GCC_HEADER_STDINT.\n+        * decContext.h: Include gstdint.h.\n+        * aclocal.m4: Regenerate.\n+        * configure: Regenerate.\n+\n 2005-12-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* decNumber.c (decStrEq): Cast string contents to unsigned char"}, {"sha": "fcb0e11d54e2108d4af15955fe57e1088a7579dc", "filename": "libdecnumber/aclocal.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Faclocal.m4?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,7 +1,7 @@\n-# generated automatically by aclocal 1.9.3 -*- Autoconf -*-\n+# generated automatically by aclocal 1.9.5 -*- Autoconf -*-\n \n-# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n-# Free Software Foundation, Inc.\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+# 2005  Free Software Foundation, Inc.\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -11,5 +11,5 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n-m4_include([../config/acx.m4])\n+m4_include([../config/stdint.m4])\n m4_include([../config/warnings.m4])"}, {"sha": "f14a6aa4a55750d8c5f2dfeb8ed2501535aff3e3", "filename": "libdecnumber/configure", "status": "modified", "additions": 3298, "deletions": 37, "changes": 3335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d"}, {"sha": "956ff8d2028234b13a49c04ae2f7b3f7d52cc6b6", "filename": "libdecnumber/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure.ac?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,7 +1,7 @@\n # configure.ac for libdecnumber\t\t\t-*- Autoconf -*-\n # Process this file with autoconf to generate a configuration script.\n \n-# Copyright 2005 Free Software Foundation, Inc.\n+# Copyright 2005, 2006 Free Software Foundation, Inc.\n \n # This file is part of GCC.\n \n@@ -49,6 +49,7 @@ ACX_PROG_CC_WARNINGS_ARE_ERRORS([manual])\n \n # Checks for header files.\n AC_CHECK_HEADERS(ctype.h stddef.h string.h stdio.h)\n+GCC_HEADER_STDINT(gstdint.h)\n \n # Checks for typedefs, structures, and compiler characteristics.\n AC_C_CONST"}, {"sha": "537d319f1840eba194fcfff9a8218999dbc227f6", "filename": "libdecnumber/decContext.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2FdecContext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libdecnumber%2FdecContext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecContext.h?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,5 +1,5 @@\n /* Decimal Context module header for the decNumber C Library\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n    Contributed by IBM Corporation.  Author Mike Cowlishaw.\n \n    This file is part of GCC.\n@@ -40,9 +40,7 @@\n #define DECCFULLNAME \"Decimal Context Descriptor\"\t/* Verbose name */\n #define DECCAUTHOR   \"Mike Cowlishaw\"\t/* Who to blame */\n \n-#ifdef HAVE_STDINT_H\n-#include <stdint.h>\t\t/* C99 standard integers */\n-#endif\n+#include \"gstdint.h\"\t\t/* C99 standard integers */\n #include <signal.h>\t\t/* for traps */\n \n "}, {"sha": "0bfddc9730a0a28bcd68a0dc33c193c8b4bb3948", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,3 +1,11 @@\n+2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR target/25259\n+        * configure.ac: Use GCC_HEADER_STDINT.\n+        * libgfortran.h: Include gstdint.h.\n+        * aclocal.m4: Regenerate.\n+        * configure: Regenerate.\n+\n 2006-01-01  Steven G. Kargl  <kargls@comcast.net>\n \n \t* ChangeLog: Split into years ..."}, {"sha": "209b83d898bf04ca8462547f5bf897bc63c2c43a", "filename": "libgfortran/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Faclocal.m4?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -639,4 +639,6 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/lead-dot.m4])\n+m4_include([../config/no-executables.m4])\n+m4_include([../config/stdint.m4])\n m4_include([acinclude.m4])"}, {"sha": "5c7f926b37a560f725190e0314c1e385d81c3c88", "filename": "libgfortran/configure", "status": "modified", "additions": 3515, "deletions": 210, "changes": 3725, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d"}, {"sha": "e3cffa98f2a40e77da9acb0b2b190bc17ac1fe02", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -160,6 +160,7 @@ AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h floatingpoint.h ieeefp.h)\n AC_CHECK_HEADERS(fenv.h fptrap.h float.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n+GCC_HEADER_STDINT(gstdint.h)\n \n AC_CHECK_MEMBERS([struct stat.st_blksize])\n AC_CHECK_MEMBERS([struct stat.st_blocks])"}, {"sha": "3b8eed26cb99a9f0873080a22e5f2b56ad64bcf3", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=4c4b3eb0fcd841317cb4ccee76a1152a32e7be8d", "patch": "@@ -1,5 +1,5 @@\n-/* Common declarations for all of libgfor.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+/* Common declarations for all of libgfortran.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>, and\n    Andy Vaught <andy@xena.eas.asu.edu>\n \n@@ -51,39 +51,7 @@ Boston, MA 02110-1301, USA.  */\n #include <ieeefp.h>\n #endif\n \n-#if HAVE_STDINT_H\n-#include <stdint.h>\n-#endif\n-\n-#if HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#endif\n-\n-#if !defined(HAVE_STDINT_H) && !defined(HAVE_INTTYPES_H) && defined(TARGET_ILP32)\n-typedef char int8_t;\n-typedef short int16_t;\n-typedef int int32_t;\n-typedef long long int64_t;\n-typedef unsigned char uint8_t;\n-#if defined(__sun) && defined(__svr4__)\n-/* Prevent <pthread.h> from redefining uint8_t on Solaris 2.5.1\n-   FIXME when the header inclusion scheme is revisited.  */\n-#define _UINT8_T\n-#endif\n-typedef unsigned short uint16_t;\n-typedef unsigned int uint32_t;\n-#if defined(__sun) && defined(__svr4__)\n-/* Prevent <pthread.h> from redefining uint32_t on Solaris 2.5.1\n-   FIXME when the header inclusion scheme is revisited.  */\n-#define _UINT32_T\n-#endif\n-typedef unsigned long long uint64_t;\n-#if defined(__sun) && defined(__svr4__)\n-/* Prevent <pthread.h> from redefining uint64_t on Solaris 2.5.1\n-   FIXME when the header inclusion scheme is revisited.  */\n-#define _UINT64_T\n-#endif\n-#endif\n+#include \"gstdint.h\"\n \n #if HAVE_SYS_TYPES_H\n #include <sys/types.h>"}]}