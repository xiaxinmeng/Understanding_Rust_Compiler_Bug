{"sha": "0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkOGJiM2JjMGVkZGRlZmNkMzMyYTVhMmNmOTBjMDc4YzU3NTI4NA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-06-16T09:06:44Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-06-16T09:06:44Z"}, "message": "re PR target/49313 (Inefficient libgcc implementations for avr)\n\ngcc/\n\tPR target/49313\n\tPR target/29524\n\t* longlong.h: Add AVR support:\n\t(count_leading_zeros): New macro.\n\t(count_trailing_zeros): New macro.\n\t(COUNT_LEADING_ZEROS_0): New macro.\n\t* config/avr/t-avr (LIB1ASMFUNCS): Add\n\t_ffssi2, _ffshi2, _loop_ffsqi2,\n\t_ctzsi2, _ctzhi2, _clzdi2, _clzsi2, _clzhi2, \n\t_paritydi2, _paritysi2, _parityhi2,\n\t_popcounthi2,_popcountsi2, _popcountdi2, _popcountqi2,\n\t_bswapsi2, _bswapdi2,\n\t_ashldi3, _ashrdi3, _lshrdi3\n\t(LIB2FUNCS_EXCLUDE): Add _clz.\n\t* config/avr/libgcc.S (XCALL): Move up in file.\n\t(XJMP): New C Macro.\n\t(DEFUN): New asm macro.\n\t(ENDF): New asm macro.\n\t(__ffssi2): New function.\n\t(__ffshi2): New function.\n\t(__loop_ffsqi2): New function.\n\t(__ctzsi2): New function.\n\t(__ctzhi2): New function.\n\t(__clzdi2): New function.\n\t(__clzsi2): New function.\n\t(__clzhi2): New function.\n\t(__paritydi2): New function.\n\t(__paritysi2): New function.\n\t(__parityhi2): New function.\n\t(__popcounthi2): New function.\n\t(__popcountsi2): New function.\n\t(__popcountdi2): New function.\n\t(__popcountqi2): New function.\n\t(__bswapsi2): New function.\n\t(__bswapdi2): New function.\n\t(__ashldi3): New function.\n\t(__ashrdi3): New function.\n\t(__lshrdi3): New function.\n\tFix suspicous lines.\n\nlibgcc/\n\tPR target/49313\n\tPR target/29524\n\t* config/avr/t-avr: Fix line endings.\n\t(intfuncs16): Remove _ffsXX2,  _clzXX2, _ctzXX2, _popcountXX2,\n\t_parityXX2.\n\nFrom-SVN: r175097", "tree": {"sha": "3aa2868b134db45d625452c9326e4422d3ae4312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa2868b134db45d625452c9326e4422d3ae4312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12430896397b7477294814403674d75e668f9f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12430896397b7477294814403674d75e668f9f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12430896397b7477294814403674d75e668f9f22"}], "stats": {"total": 539, "additions": 509, "deletions": 30}, "files": [{"sha": "9e99f63daca6edaf741f00a30c35fcc43f7dbb8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -1,3 +1,45 @@\n+2011-06-16  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49313\n+\tPR target/29524\n+\t* longlong.h: Add AVR support:\n+\t(count_leading_zeros): New macro.\n+\t(count_trailing_zeros): New macro.\n+\t(COUNT_LEADING_ZEROS_0): New macro.\n+\t* config/avr/t-avr (LIB1ASMFUNCS): Add\n+\t_ffssi2, _ffshi2, _loop_ffsqi2,\n+\t_ctzsi2, _ctzhi2, _clzdi2, _clzsi2, _clzhi2, \n+\t_paritydi2, _paritysi2, _parityhi2,\n+\t_popcounthi2,_popcountsi2, _popcountdi2, _popcountqi2,\n+\t_bswapsi2, _bswapdi2,\n+\t_ashldi3, _ashrdi3, _lshrdi3\n+\t(LIB2FUNCS_EXCLUDE): Add _clz.\n+\t* config/avr/libgcc.S (XCALL): Move up in file.\n+\t(XJMP): New C Macro.\n+\t(DEFUN): New asm macro.\n+\t(ENDF): New asm macro.\n+\t(__ffssi2): New function.\n+\t(__ffshi2): New function.\n+\t(__loop_ffsqi2): New function.\n+\t(__ctzsi2): New function.\n+\t(__ctzhi2): New function.\n+\t(__clzdi2): New function.\n+\t(__clzsi2): New function.\n+\t(__clzhi2): New function.\n+\t(__paritydi2): New function.\n+\t(__paritysi2): New function.\n+\t(__parityhi2): New function.\n+\t(__popcounthi2): New function.\n+\t(__popcountsi2): New function.\n+\t(__popcountdi2): New function.\n+\t(__popcountqi2): New function.\n+\t(__bswapsi2): New function.\n+\t(__bswapdi2): New function.\n+\t(__ashldi3): New function.\n+\t(__ashrdi3): New function.\n+\t(__lshrdi3): New function.\n+\tFix suspicous lines.\n+\n 2011-06-16  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (canonicalize_cond_expr_cond): (bool)x is not"}, {"sha": "cf7d7683263228605d4db74ef0af7460a1b5f342", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 410, "deletions": 6, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -52,6 +52,26 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \t.endm\n \n+#if defined (__AVR_HAVE_JMP_CALL__)\n+#define XCALL call\n+#define XJMP  jmp\n+#else\n+#define XCALL rcall\n+#define XJMP  rjmp\n+#endif\n+\n+.macro DEFUN name\n+.global \\name\n+.func \\name\n+\\name:\n+.endm\n+\n+.macro ENDF name\n+.size \\name, .-\\name\n+.endfunc\n+.endm\n+\n+\f\n /* Note: mulqi3, mulhi3 are open-coded on the enhanced core.  */\n #if !defined (__AVR_HAVE_MUL__)\n /*******************************************************\n@@ -779,12 +799,6 @@ __do_clear_bss:\n /* __do_global_ctors and __do_global_dtors are only necessary\n    if there are any constructors/destructors.  */\n \n-#if defined (__AVR_HAVE_JMP_CALL__)\n-#define XCALL call\n-#else\n-#define XCALL rcall\n-#endif\n-\n #ifdef L_ctors\n \t.section .init6,\"ax\",@progbits\n \t.global\t__do_global_ctors\n@@ -897,3 +911,393 @@ __tablejump_elpm__:\n \t.endfunc\n #endif /* defined (L_tablejump_elpm) */\n \n+\f\n+/**********************************\n+ * Find first set Bit (ffs)\n+ **********************************/\n+\n+#if defined (L_ffssi2)\n+;; find first set bit\n+;; r25:r24 = ffs32 (r25:r22)\n+;; clobbers: r22, r26\n+DEFUN __ffssi2\n+    clr  r26\n+    tst  r22\n+    brne 1f\n+    subi r26, -8\n+    or   r22, r23\n+    brne 1f\n+    subi r26, -8\n+    or   r22, r24\n+    brne 1f\n+    subi r26, -8\n+    or   r22, r25\n+    brne 1f\n+    ret\n+1:  mov  r24, r22\n+    XJMP __loop_ffsqi2\n+ENDF __ffssi2\n+#endif /* defined (L_ffssi2) */\n+\n+#if defined (L_ffshi2)\n+;; find first set bit\n+;; r25:r24 = ffs16 (r25:r24)\n+;; clobbers: r26\n+DEFUN __ffshi2\n+    clr  r26\n+    cpse r24, __zero_reg__\n+1:  XJMP __loop_ffsqi2\n+    ldi  r26, 8\n+    or   r24, r25\n+    brne 1b\n+    ret\n+ENDF __ffshi2\n+#endif /* defined (L_ffshi2) */\n+\n+#if defined (L_loop_ffsqi2)\n+;; Helper for ffshi2, ffssi2\n+;; r25:r24 = r26 + zero_extend16 (ffs8(r24))\n+;; r24 must be != 0\n+;; clobbers: r26\n+DEFUN __loop_ffsqi2\n+    inc  r26\n+    lsr  r24\n+    brcc __loop_ffsqi2\n+    mov  r24, r26\n+    clr  r25\n+    ret    \n+ENDF __loop_ffsqi2\n+#endif /* defined (L_loop_ffsqi2) */\n+\n+\f\n+/**********************************\n+ * Count trailing Zeros (ctz)\n+ **********************************/\n+\n+#if defined (L_ctzsi2)\n+;; count trailing zeros\n+;; r25:r24 = ctz32 (r25:r22)\n+;; ctz(0) = 32\n+DEFUN __ctzsi2\n+    XCALL __ffssi2\n+    dec  r24\n+    sbrc r24, 7\n+    ldi  r24, 32\n+    ret\n+ENDF __ctzsi2\n+#endif /* defined (L_ctzsi2) */\n+\n+#if defined (L_ctzhi2)\n+;; count trailing zeros\n+;; r25:r24 = ctz16 (r25:r24)\n+;; ctz(0) = 16\n+DEFUN __ctzhi2\n+    XCALL __ffshi2\n+    dec  r24\n+    sbrc r24, 7\n+    ldi  r24, 16\n+    ret\n+ENDF __ctzhi2\n+#endif /* defined (L_ctzhi2) */\n+\n+\f\n+/**********************************\n+ * Count leading Zeros (clz)\n+ **********************************/\n+\n+#if defined (L_clzdi2)\n+;; count leading zeros\n+;; r25:r24 = clz64 (r25:r18)\n+;; clobbers: r22, r23, r26\n+DEFUN __clzdi2\n+    XCALL __clzsi2\n+    sbrs r24, 5\n+    ret\n+    mov_l r22, r18\n+    mov_h r23, r19\n+    mov_l r24, r20\n+    mov_h r25, r21\n+    XCALL __clzsi2\n+    subi r24, -32\n+    ret\n+ENDF __clzdi2\n+#endif /* defined (L_clzdi2) */\n+\n+#if defined (L_clzsi2)\n+;; count leading zeros\n+;; r25:r24 = clz32 (r25:r22)\n+;; clobbers: r26\n+DEFUN __clzsi2\n+    XCALL __clzhi2\n+    sbrs r24, 4\n+    ret\n+    mov_l r24, r22\n+    mov_h r25, r23\n+    XCALL __clzhi2\n+    subi r24, -16\n+    ret\n+ENDF __clzsi2\n+#endif /* defined (L_clzsi2) */\n+\n+#if defined (L_clzhi2)\n+;; count leading zeros\n+;; r25:r24 = clz16 (r25:r24)\n+;; clobbers: r26\n+DEFUN __clzhi2\n+    clr  r26\n+    tst  r25\n+    brne 1f\n+    subi r26, -8\n+    or   r25, r24\n+    brne 1f\n+    ldi  r24, 16\n+    ret\n+1:  cpi  r25, 16\n+    brsh 3f\n+    subi r26, -3\n+    swap r25\n+2:  inc  r26\n+3:  lsl  r25\n+    brcc 2b\n+    mov  r24, r26\n+    clr  r25\n+    ret\n+ENDF __clzhi2\n+#endif /* defined (L_clzhi2) */\n+\n+\f\n+/**********************************\n+ * Parity \n+ **********************************/\n+\n+#if defined (L_paritydi2)\n+;; r25:r24 = parity64 (r25:r18)\n+;; clobbers: __tmp_reg__\n+DEFUN __paritydi2\n+    eor  r24, r18\n+    eor  r24, r19\n+    eor  r24, r20\n+    eor  r24, r21\n+    XJMP __paritysi2\n+ENDF __paritydi2\n+#endif /* defined (L_paritydi2) */\n+\n+#if defined (L_paritysi2)\n+;; r25:r24 = parity32 (r25:r22)\n+;; clobbers: __tmp_reg__\n+DEFUN __paritysi2\n+    eor  r24, r22\n+    eor  r24, r23\n+    XJMP __parityhi2\n+ENDF __paritysi2\n+#endif /* defined (L_paritysi2) */\n+\n+#if defined (L_parityhi2)\n+;; r25:r24 = parity16 (r25:r24)\n+;; clobbers: __tmp_reg__\n+DEFUN __parityhi2\n+    eor  r24, r25\n+;; FALLTHRU\n+ENDF __parityhi2\n+\n+;; r25:r24 = parity8 (r24)\n+;; clobbers: __tmp_reg__\n+DEFUN __parityqi2\n+    ;; parity is in r24[0..7]\n+    mov  __tmp_reg__, r24\n+    swap __tmp_reg__\n+    eor  r24, __tmp_reg__\n+    ;; parity is in r24[0..3]\n+    subi r24, -4\n+    andi r24, -5\n+    subi r24, -6\n+    ;; parity is in r24[0,3]\n+    sbrc r24, 3\n+    inc  r24\n+    ;; parity is in r24[0]\n+    andi r24, 1\n+    clr  r25\n+    ret\n+ENDF __parityqi2\n+#endif /* defined (L_parityhi2) */\n+\n+\f\n+/**********************************\n+ * Population Count\n+ **********************************/\n+\n+#if defined (L_popcounthi2)\n+;; population count\n+;; r25:r24 = popcount16 (r25:r24)\n+;; clobbers: r30, __tmp_reg__\n+DEFUN __popcounthi2\n+    XCALL __popcountqi2\n+    mov  r30, r24\n+    mov  r24, r25\n+    XCALL __popcountqi2\n+    add  r24, r30\n+    clr  r25\n+    ret\n+ENDF __popcounthi2\n+#endif /* defined (L_popcounthi2) */\n+\n+#if defined (L_popcountsi2)\n+;; population count\n+;; r25:r24 = popcount32 (r25:r22)\n+;; clobbers: r26, r30, __tmp_reg__\n+DEFUN __popcountsi2\n+    XCALL __popcounthi2\n+    mov   r26, r24\n+    mov_l r24, r22\n+    mov_h r25, r23\n+    XCALL __popcounthi2\n+    add   r24, r26\n+    ret\n+ENDF __popcountsi2\n+#endif /* defined (L_popcountsi2) */\n+\n+#if defined (L_popcountdi2)\n+;; population count\n+;; r25:r24 = popcount64 (r25:r18)\n+;; clobbers: r22, r23, r26, r27, r30, __tmp_reg__\n+DEFUN __popcountdi2\n+    XCALL __popcountsi2\n+    mov   r27, r24\n+    mov_l r22, r18\n+    mov_h r23, r19\n+    mov_l r24, r20\n+    mov_h r25, r21\n+    XCALL __popcountsi2\n+    add   r24, r27\n+    ret\n+ENDF __popcountdi2\n+#endif /* defined (L_popcountdi2) */\n+\n+#if defined (L_popcountqi2)\n+;; population count\n+;; r24 = popcount8 (r24)\n+;; clobbers: __tmp_reg__\n+DEFUN __popcountqi2\n+    mov  __tmp_reg__, r24\n+    andi r24, 1\n+    lsr  __tmp_reg__    \n+    lsr  __tmp_reg__    \n+    adc  r24, __zero_reg__\n+    lsr  __tmp_reg__    \n+    adc  r24, __zero_reg__\n+    lsr  __tmp_reg__    \n+    adc  r24, __zero_reg__\n+    lsr  __tmp_reg__    \n+    adc  r24, __zero_reg__\n+    lsr  __tmp_reg__    \n+    adc  r24, __zero_reg__\n+    lsr  __tmp_reg__    \n+    adc  r24, __tmp_reg__    \n+    ret    \n+ENDF __popcountqi2\n+#endif /* defined (L_popcountqi2) */\n+\n+\f\n+/**********************************\n+ * Swap bytes\n+ **********************************/\n+\n+;; swap two registers with different register number\n+.macro bswap a, b\n+    eor \\a, \\b\n+    eor \\b, \\a\n+    eor \\a, \\b\n+.endm\n+\n+#if defined (L_bswapsi2)\n+;; swap bytes\n+;; r25:r22 = bswap32 (r25:r22)\n+DEFUN __bswapsi2\n+    bswap r22, r25\n+    bswap r23, r24\n+    ret\n+ENDF __bswapsi2\n+#endif /* defined (L_bswapsi2) */\n+\n+#if defined (L_bswapdi2)\n+;; swap bytes\n+;; r25:r18 = bswap64 (r25:r18)\n+DEFUN __bswapdi2\n+    bswap r18, r25\n+    bswap r19, r24\n+    bswap r20, r23\n+    bswap r21, r22\n+    ret\n+ENDF __bswapdi2\n+#endif /* defined (L_bswapdi2) */\n+\n+\f\n+/**********************************\n+ * 64-bit shifts\n+ **********************************/\n+\n+#if defined (L_ashrdi3)\n+;; Arithmetic shift right\n+;; r25:r18 = ashr64 (r25:r18, r17:r16)\n+DEFUN __ashrdi3\n+    push r16\n+    andi r16, 31\n+    breq 2f\n+1:  asr  r25\n+    ror  r24\n+    ror  r23\n+    ror  r22\n+    ror  r21\n+    ror  r20\n+    ror  r19\n+    ror  r18\n+    dec  r16\n+    brne 1b\n+2:  pop  r16\n+    ret\n+ENDF __ashrdi3\n+#endif /* defined (L_ashrdi3) */\n+\n+#if defined (L_lshrdi3)\n+;; Logic shift right\n+;; r25:r18 = lshr64 (r25:r18, r17:r16)\n+DEFUN __lshrdi3\n+    push r16\n+    andi r16, 31\n+    breq 2f\n+1:  lsr  r25\n+    ror  r24\n+    ror  r23\n+    ror  r22\n+    ror  r21\n+    ror  r20\n+    ror  r19\n+    ror  r18\n+    dec  r16\n+    brne 1b\n+2:  pop  r16\n+    ret\n+ENDF __lshrdi3\n+#endif /* defined (L_lshrdi3) */\n+\n+#if defined (L_ashldi3)\n+;; Shift left\n+;; r25:r18 = ashl64 (r25:r18, r17:r16)\n+DEFUN __ashldi3\n+    push r16\n+    andi r16, 31\n+    breq 2f\n+1:  lsl  r18\n+    rol  r19\n+    rol  r20\n+    rol  r21\n+    rol  r22\n+    rol  r23\n+    rol  r24\n+    rol  r25\n+    dec  r16\n+    brne 1b\n+2:  pop  r16\n+    ret\n+ENDF __ashldi3\n+#endif /* defined (L_ashldi3) */"}, {"sha": "4186178dbd2bfcfacf1c67ac7a14190bac1e95e4", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -24,12 +24,10 @@ driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\t\n \n avr-c.o: $(srcdir)/config/avr/avr-c.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\t\n \n \n LIB1ASMSRC = avr/libgcc.S\n@@ -52,7 +50,30 @@ LIB1ASMFUNCS = \\\n \t_copy_data \\\n \t_clear_bss \\\n \t_ctors \\\n-\t_dtors\n+\t_dtors \\\n+\t_ffssi2 \\\n+\t_ffshi2 \\\n+\t_loop_ffsqi2 \\\n+\t_ctzsi2 \\\n+\t_ctzhi2 \\\n+\t_clzdi2 \\\n+\t_clzsi2 \\\n+\t_clzhi2 \\\n+\t_paritydi2 \\\n+\t_paritysi2 \\\n+\t_parityhi2 \\\n+\t_popcounthi2 \\\n+\t_popcountsi2 \\\n+\t_popcountdi2 \\\n+\t_popcountqi2 \\\n+\t_bswapsi2 \\\n+\t_bswapdi2 \\\n+\t_ashldi3 \\\n+\t_ashrdi3 \\\n+\t_lshrdi3\n+\n+LIB2FUNCS_EXCLUDE = \\\n+\t_clz\n \n # We do not have the DF type.\n # Most of the C functions in libgcc2 use almost all registers,\n@@ -216,8 +237,8 @@ MULTILIB_MATCHES = \\\n \tmmcu?avr51=mmcu?at90can128 \\\n \tmmcu?avr51=mmcu?at90usb1286 \\\n \tmmcu?avr51=mmcu?at90usb1287 \\\n- \tmmcu?avr6=mmcu?atmega2560 \\\n- \tmmcu?avr6=mmcu?atmega2561\n+\tmmcu?avr6=mmcu?atmega2560 \\\n+\tmmcu?avr6=mmcu?atmega2561\n \n MULTILIB_EXCEPTIONS =\n "}, {"sha": "576247fc6361c205d6313b04ec25b63a1fe2ab96", "filename": "gcc/longlong.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -250,6 +250,12 @@ UDItype __umulsidi3 (USItype, USItype);\n #define COUNT_LEADING_ZEROS_0 32\n #endif\n \n+#if defined (__AVR__) && W_TYPE_SIZE == 32\n+#define count_leading_zeros(COUNT,X)  ((COUNT) = __builtin_clzl (X))\n+#define count_trailing_zeros(COUNT,X) ((COUNT) = __builtin_ctzl (X))\n+#define COUNT_LEADING_ZEROS_0 32\n+#endif /* defined (__AVR__) && W_TYPE_SIZE == 32 */\n+\n #if defined (__CRIS__) && __CRIS_arch_version >= 3\n #define count_leading_zeros(COUNT, X) ((COUNT) = __builtin_clz (X))\n #if __CRIS_arch_version >= 8"}, {"sha": "0f2384ea5dec87ec72e7fb2ccac6ba9ecf102284", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -1,3 +1,11 @@\n+2011-06-16  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/49313\n+\tPR target/29524\n+\t* config/avr/t-avr: Fix line endings.\n+\t(intfuncs16): Remove _ffsXX2,  _clzXX2, _ctzXX2, _popcountXX2,\n+\t_parityXX2.\n+\n 2011-06-14  Olivier Hainque  <hainque@adacore.com>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "7c8783ee2123c892a5fdd552505a5040f7667092", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad8bb3bc0edddefcd332a5a2cf90c078c575284/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=0ad8bb3bc0edddefcd332a5a2cf90c078c575284", "patch": "@@ -1,19 +1,17 @@\n-# Extra 16-bit integer functions.\r\n-intfuncs16 = _absvXX2 _addvXX3 _subvXX3 _mulvXX3 _negvXX2 _ffsXX2 _clzXX2 \\\r\n-             _ctzXX2 _popcountXX2 _parityXX2\r\n-hiintfuncs16 = $(subst XX,hi,$(intfuncs16))\r\n-siintfuncs16 = $(subst XX,si,$(intfuncs16))\r\n-\r\n-iter-items := $(hiintfuncs16)\r\n-iter-labels := $(siintfuncs16)\r\n-iter-sizes := $(patsubst %,2,$(siintfuncs16)) $(patsubst %,2,$(hiintfuncs16))\r\n-\r\n-\r\n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\r\n-libgcc-objects += $(patsubst %,%$(objext),$(hiintfuncs16))\r\n-\r\n-ifeq ($(enable_shared),yes)\r\n-libgcc-s-objects += $(patsubst %,%_s$(objext),$(hiintfuncs16))\r\n-endif\r\n-\r\n-\r\n+# Extra 16-bit integer functions.\n+intfuncs16 = _absvXX2 _addvXX3 _subvXX3 _mulvXX3 _negvXX2 \n+\n+hiintfuncs16 = $(subst XX,hi,$(intfuncs16))\n+siintfuncs16 = $(subst XX,si,$(intfuncs16))\n+\n+iter-items := $(hiintfuncs16)\n+iter-labels := $(siintfuncs16)\n+iter-sizes := $(patsubst %,2,$(siintfuncs16)) $(patsubst %,2,$(hiintfuncs16))\n+\n+\n+include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\n+libgcc-objects += $(patsubst %,%$(objext),$(hiintfuncs16))\n+\n+ifeq ($(enable_shared),yes)\n+libgcc-s-objects += $(patsubst %,%_s$(objext),$(hiintfuncs16))\n+endif"}]}