{"sha": "f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "node_id": "C_kwDOANBUbNoAKGY2MjlmNjNkMmQ5ZDdhZDJjNDNmOGU0NTFmMGY2ZTMyYjVmNGQwNmE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-12T10:58:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-12T20:57:34Z"}, "message": "libstdc++: Extend max_align_t special case to 64-bit HP-UX [PR77691]\n\nGCC's std::max_align_t doesn't agree with the system malloc on HP-UX, so\ngeneralize the current hack for Solaris to apply to that target too.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/77691\n\t* include/experimental/memory_resource\n\t(_GLIBCXX_MAX_ALIGN_MATCHES_MALLOC): Define.\n\t(do_allocate, do_deallocate): Check it.\n\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n\tRelax expected behaviour for 64-bit hppa-hp-hpux11.11.", "tree": {"sha": "9628467db8ba9df22445aca52f06bda7d92f384a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9628467db8ba9df22445aca52f06bda7d92f384a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac1c7fcce1f57ba83cfe868f82f8c9eb776ddc32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1c7fcce1f57ba83cfe868f82f8c9eb776ddc32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1c7fcce1f57ba83cfe868f82f8c9eb776ddc32"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "786392e89044967d1925acedac4cffcf74207cde", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "patch": "@@ -412,11 +412,20 @@ namespace pmr {\n       allocator_type get_allocator() const noexcept { return _M_alloc; }\n \n     protected:\n+#if (defined __sun__ || defined __VXWORKS__) && defined __i386__\n+// Cannot use max_align_t on 32-bit Solaris x86, see PR libstdc++/77691\n+# define _GLIBCXX_MAX_ALIGN_MATCHES_MALLOC 0\n+#elif defined __hpux__ && defined __hppa__ && defined __LP64__\n+// Ignore inconsistent long double and malloc alignment (libstdc++/77691)\n+# define _GLIBCXX_MAX_ALIGN_MATCHES_MALLOC 0\n+#else\n+# define _GLIBCXX_MAX_ALIGN_MATCHES_MALLOC 1\n+#endif\n+\n       virtual void*\n       do_allocate(size_t __bytes, size_t __alignment) override\n       {\n-\t// Cannot use max_align_t on 32-bit Solaris x86, see PR libstdc++/77691\n-#if ! ((defined __sun__ || defined __VXWORKS__) && defined __i386__)\n+#if _GLIBCXX_MAX_ALIGN_MATCHES_MALLOC\n \tif (__alignment == alignof(max_align_t))\n \t  return _M_allocate<alignof(max_align_t)>(__bytes);\n #endif\n@@ -442,7 +451,7 @@ namespace pmr {\n       do_deallocate(void* __ptr, size_t __bytes, size_t __alignment) noexcept\n       override\n       {\n-#if ! ((defined __sun__ || defined __VXWORKS__) && defined __i386__)\n+#if _GLIBCXX_MAX_ALIGN_MATCHES_MALLOC\n \tif (__alignment == alignof(max_align_t))\n \t  return (void) _M_deallocate<alignof(max_align_t)>(__ptr, __bytes);\n #endif"}, {"sha": "a7ecb54b905e107d56a1c065d9049c4729be449c", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/new_delete_resource.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc?ref=f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "patch": "@@ -27,6 +27,10 @@\n // See PR libstdc++/77691\n # define BAD_MAX_ALIGN_T 1\n #endif\n+#if defined __hpux__ && defined __hppa__ && defined __LP64__\n+// Ignore inconsistent long double and malloc alignment (libstdc++/77691)\n+# define BAD_MAX_ALIGN_T 1\n+#endif\n \n bool new_called = false;\n bool delete_called = false;"}]}