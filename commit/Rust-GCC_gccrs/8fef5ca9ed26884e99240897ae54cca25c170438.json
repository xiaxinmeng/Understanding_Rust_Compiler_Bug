{"sha": "8fef5ca9ed26884e99240897ae54cca25c170438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlZjVjYTllZDI2ODg0ZTk5MjQwODk3YWU1NGNjYTI1YzE3MDQzOA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-11-30T12:30:52Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-11-30T12:30:52Z"}, "message": "Force soft float in ARMv6-M and ARMv8-M Baseline options\n\n2016-11-29  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * lib/target-supports.exp (add_options_for_arm_arch_v6m): Add\n    -mfloat-abi=soft option.\n    (add_options_for_arm_arch_v8m_base): Likewise.  Reindent containing\n    foreach loop.\n\nFrom-SVN: r243013", "tree": {"sha": "46c3c916029c9cc35e7c2f33eff40d3834ae7c40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46c3c916029c9cc35e7c2f33eff40d3834ae7c40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fef5ca9ed26884e99240897ae54cca25c170438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef5ca9ed26884e99240897ae54cca25c170438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fef5ca9ed26884e99240897ae54cca25c170438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef5ca9ed26884e99240897ae54cca25c170438/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d3d820693627633e4f8057e0405ccd5907d2ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3d820693627633e4f8057e0405ccd5907d2ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3d820693627633e4f8057e0405ccd5907d2ae0"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "502d525e77e451b92c9d036452002b5f7be52687", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fef5ca9ed26884e99240897ae54cca25c170438/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fef5ca9ed26884e99240897ae54cca25c170438/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fef5ca9ed26884e99240897ae54cca25c170438", "patch": "@@ -1,3 +1,10 @@\n+2016-11-30  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_arch_v6m): Add\n+\t-mfloat-abi=soft option.\n+\t(add_options_for_arm_arch_v8m_base): Likewise.  Reindent containing\n+\tforeach loop.\n+\n 2016-11-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/78362"}, {"sha": "798cf6bb54540843280885af9775d71d6af8fc72", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fef5ca9ed26884e99240897ae54cca25c170438/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fef5ca9ed26884e99240897ae54cca25c170438/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8fef5ca9ed26884e99240897ae54cca25c170438", "patch": "@@ -3728,25 +3728,26 @@ proc check_effective_target_arm_fp16_hw { } {\n # Usage: /* { dg-require-effective-target arm_arch_v5_ok } */\n #        /* { dg-add-options arm_arch_v5 } */\n #\t /* { dg-require-effective-target arm_arch_v5_multilib } */\n-foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n-\t\t\t\t     v4t \"-march=armv4t\" __ARM_ARCH_4T__\n-\t\t\t\t     v5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n-\t\t\t\t     v5t \"-march=armv5t\" __ARM_ARCH_5T__\n-\t\t\t\t     v5te \"-march=armv5te\" __ARM_ARCH_5TE__\n-\t\t\t\t     v6 \"-march=armv6\" __ARM_ARCH_6__\n-\t\t\t\t     v6k \"-march=armv6k\" __ARM_ARCH_6K__\n-\t\t\t\t     v6t2 \"-march=armv6t2\" __ARM_ARCH_6T2__\n-\t\t\t\t     v6z \"-march=armv6z\" __ARM_ARCH_6Z__\n-\t\t\t\t     v6m \"-march=armv6-m -mthumb\" __ARM_ARCH_6M__\n-\t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__\n-\t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n-\t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n-\t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n-\t\t\t\t     v8a \"-march=armv8-a\" __ARM_ARCH_8A__\n-\t\t\t\t     v8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__\n-\t\t\t\t     v8_2a \"-march=armv8.2a\" __ARM_ARCH_8A__\n-\t\t\t\t     v8m_base \"-march=armv8-m.base -mthumb\" __ARM_ARCH_8M_BASE__\n-\t\t\t\t     v8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n+foreach { armfunc armflag armdef } {\n+\tv4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n+\tv4t \"-march=armv4t\" __ARM_ARCH_4T__\n+\tv5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n+\tv5t \"-march=armv5t\" __ARM_ARCH_5T__\n+\tv5te \"-march=armv5te\" __ARM_ARCH_5TE__\n+\tv6 \"-march=armv6\" __ARM_ARCH_6__\n+\tv6k \"-march=armv6k\" __ARM_ARCH_6K__\n+\tv6t2 \"-march=armv6t2\" __ARM_ARCH_6T2__\n+\tv6z \"-march=armv6z\" __ARM_ARCH_6Z__\n+\tv6m \"-march=armv6-m -mthumb -mfloat-abi=soft\" __ARM_ARCH_6M__\n+\tv7a \"-march=armv7-a\" __ARM_ARCH_7A__\n+\tv7r \"-march=armv7-r\" __ARM_ARCH_7R__\n+\tv7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n+\tv7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n+\tv8a \"-march=armv8-a\" __ARM_ARCH_8A__\n+\tv8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__\n+\tv8_2a \"-march=armv8.2a\" __ARM_ARCH_8A__\n+\tv8m_base \"-march=armv8-m.base -mthumb -mfloat-abi=soft\" __ARM_ARCH_8M_BASE__\n+\tv8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&"}]}