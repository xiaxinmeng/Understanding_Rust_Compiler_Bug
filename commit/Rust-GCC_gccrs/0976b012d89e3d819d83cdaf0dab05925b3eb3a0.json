{"sha": "0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "node_id": "C_kwDOANBUbNoAKDA5NzZiMDEyZDg5ZTNkODE5ZDgzY2RhZjBkYWIwNTkyNWIzZWIzYTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-25T12:53:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-28T08:00:18Z"}, "message": "tree-optimization/107867 - failed abnormal cleanup in forwprop\n\nThe following makes sure to perform abnormal cleanup when forwprop\npropagates into a call.\n\n\tPR tree-optimization/107867\n\t* tree-ssa-forwprop.cc (pass_forwprop::execute): Handle\n\tabnormal cleanup after substitution.\n\n\t* g++.dg/pr107867.C: New testcase.", "tree": {"sha": "50028a397868bde71a0ba884e1b10f12f252b473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50028a397868bde71a0ba884e1b10f12f252b473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976b012d89e3d819d83cdaf0dab05925b3eb3a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be591d00ed6cf8ac13850d5490749651acf10139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be591d00ed6cf8ac13850d5490749651acf10139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be591d00ed6cf8ac13850d5490749651acf10139"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "16c7499cf7b679ca46ef26dc281cef1f6c8f8f4c", "filename": "gcc/testsuite/g++.dg/pr107867.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976b012d89e3d819d83cdaf0dab05925b3eb3a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107867.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976b012d89e3d819d83cdaf0dab05925b3eb3a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107867.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107867.C?ref=0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-Os -fno-tree-ccp -Wuninitialized\" }\n+\n+void printf(...);\n+void __sigsetjmp_cancel() __attribute__((__returns_twice__));\n+int z, main_ret;\n+void func(void *) {}\n+\n+int\n+main()\n+{\n+  int x;\n+  void (*__cancel_routine)(void *)(func);\n+  __sigsetjmp_cancel();\n+  __cancel_routine(0);\n+  if (main_ret)\n+    x = z;\n+  printf(x);\n+}"}, {"sha": "160e49e097ed3cd7cd572c5aa4f005babc9c68bd", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0976b012d89e3d819d83cdaf0dab05925b3eb3a0/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0976b012d89e3d819d83cdaf0dab05925b3eb3a0/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "patch": "@@ -3367,6 +3367,7 @@ pass_forwprop::execute (function *fun)\n   auto_vec<gimple *, 4> to_fixup;\n   auto_vec<gimple *, 32> to_remove;\n   to_purge = BITMAP_ALLOC (NULL);\n+  bitmap need_ab_cleanup = BITMAP_ALLOC (NULL);\n   for (int i = 0; i < postorder_num; ++i)\n     {\n       gimple_stmt_iterator gsi;\n@@ -3682,6 +3683,9 @@ pass_forwprop::execute (function *fun)\n \t  /* Mark stmt as potentially needing revisiting.  */\n \t  gimple_set_plf (stmt, GF_PLF_1, false);\n \n+\t  bool can_make_abnormal_goto = (is_gimple_call (stmt)\n+\t\t\t\t\t && stmt_can_make_abnormal_goto (stmt));\n+\n \t  /* Substitute from our lattice.  We need to do so only once.  */\n \t  bool substituted_p = false;\n \t  use_operand_p usep;\n@@ -3700,6 +3704,10 @@ pass_forwprop::execute (function *fun)\n \t      && is_gimple_assign (stmt)\n \t      && gimple_assign_rhs_code (stmt) == ADDR_EXPR)\n \t    recompute_tree_invariant_for_addr_expr (gimple_assign_rhs1 (stmt));\n+\t  if (substituted_p\n+\t      && can_make_abnormal_goto\n+\t      && !stmt_can_make_abnormal_goto (stmt))\n+\t    bitmap_set_bit (need_ab_cleanup, bb->index);\n \n \t  bool changed;\n \t  do\n@@ -3901,7 +3909,9 @@ pass_forwprop::execute (function *fun)\n     }\n \n   cfg_changed |= gimple_purge_all_dead_eh_edges (to_purge);\n+  cfg_changed |= gimple_purge_all_dead_abnormal_call_edges (need_ab_cleanup);\n   BITMAP_FREE (to_purge);\n+  BITMAP_FREE (need_ab_cleanup);\n \n   if (cfg_changed)\n     todoflags |= TODO_cleanup_cfg;"}]}