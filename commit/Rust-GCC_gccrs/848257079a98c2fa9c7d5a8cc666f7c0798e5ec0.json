{"sha": "848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4MjU3MDc5YTk4YzJmYTljN2Q1YThjYzY2NmY3YzA3OThlNWVjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-18T21:58:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-18T21:58:51Z"}, "message": "re PR middle-end/48661 (wrong-code regression with devirtualization)\n\n\tPR middle-end/48661\n\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Return NULL\n\tif TREE_TYPE (v) is non-NULL.\n\n\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Renamed from\n\tgimple_get_virt_mehtod_for_binfo.\n\t* gimple.h (gimple_get_virt_method_for_binfo): Likewise.\n\t* ipa-cp.c (ipcp_process_devirtualization_opportunities): Adjust\n\tcallers.\n\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n\n\t* g++.dg/torture/pr48661.C: New test.\n\nFrom-SVN: r172677", "tree": {"sha": "9c65ab447ce980a3d0817af30fab2a1d53ba99f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c65ab447ce980a3d0817af30fab2a1d53ba99f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37a8ccfcdcfe73378717101f82767760ae35f5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a8ccfcdcfe73378717101f82767760ae35f5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a8ccfcdcfe73378717101f82767760ae35f5a5"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "2c136bf1244cb8283f5d44ece5bcd0d1612b9d21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -1,3 +1,16 @@\n+2011-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/48661\n+\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Return NULL\n+\tif TREE_TYPE (v) is non-NULL.\n+\n+\t* gimple-fold.c (gimple_get_virt_method_for_binfo): Renamed from\n+\tgimple_get_virt_mehtod_for_binfo.\n+\t* gimple.h (gimple_get_virt_method_for_binfo): Likewise.\n+\t* ipa-cp.c (ipcp_process_devirtualization_opportunities): Adjust\n+\tcallers.\n+\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n+\n 2011-05-18  Michael Matz  <matz@suse.de>\n \t    Steve Ellcey  <sje@cup.hp.com>\n "}, {"sha": "a6e326bdd1d1c9574067495e483ba6f2e355f743", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -1372,7 +1372,7 @@ gimple_fold_builtin (gimple stmt)\n    is a thunk (other than a this adjustment which is dealt with by DELTA). */\n \n tree\n-gimple_get_virt_mehtod_for_binfo (HOST_WIDE_INT token, tree known_binfo,\n+gimple_get_virt_method_for_binfo (HOST_WIDE_INT token, tree known_binfo,\n \t\t\t\t  tree *delta, bool refuse_thunks)\n {\n   HOST_WIDE_INT i;\n@@ -1391,6 +1391,10 @@ gimple_get_virt_mehtod_for_binfo (HOST_WIDE_INT token, tree known_binfo,\n       v = TREE_CHAIN (v);\n     }\n \n+  /* If BV_VCALL_INDEX is non-NULL, give up.  */\n+  if (TREE_TYPE (v))\n+    return NULL_TREE;\n+\n   fndecl = TREE_VALUE (v);\n   node = cgraph_get_node_or_alias (fndecl);\n   if (refuse_thunks"}, {"sha": "9ae29c4697df0311318dc0f3053401e8a3479e9c", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -896,7 +896,7 @@ unsigned get_gimple_rhs_num_ops (enum tree_code);\n gimple gimple_alloc_stat (enum gimple_code, unsigned MEM_STAT_DECL);\n const char *gimple_decl_printable_name (tree, int);\n bool gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace);\n-tree gimple_get_virt_mehtod_for_binfo (HOST_WIDE_INT, tree, tree *, bool);\n+tree gimple_get_virt_method_for_binfo (HOST_WIDE_INT, tree, tree *, bool);\n void gimple_adjust_this_by_delta (gimple_stmt_iterator *, tree);\n /* Returns true iff T is a valid GIMPLE statement.  */\n extern bool is_gimple_stmt (tree);"}, {"sha": "d8de9b7d9e819863a8a2fa7a5ab05f812378b03a", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -1266,7 +1266,7 @@ ipcp_process_devirtualization_opportunities (struct cgraph_node *node)\n \t{\n \t  tree binfo = VEC_index (tree, info->params[param_index].types, j);\n \t  tree d;\n-\t  tree t = gimple_get_virt_mehtod_for_binfo (token, binfo, &d, true);\n+\t  tree t = gimple_get_virt_method_for_binfo (token, binfo, &d, true);\n \n \t  if (!t)\n \t    {"}, {"sha": "811884f1342d6e324a65f1c8039c20c6eeeb4dbe", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -1718,7 +1718,7 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n   type = ie->indirect_info->otr_type;\n   binfo = get_binfo_at_offset (binfo, ie->indirect_info->anc_offset, type);\n   if (binfo)\n-    target = gimple_get_virt_mehtod_for_binfo (token, binfo, &delta, true);\n+    target = gimple_get_virt_method_for_binfo (token, binfo, &delta, true);\n   else\n     return NULL;\n "}, {"sha": "96fb5c5ace8814d9da1cd1e54d633fe2cc397464", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -1,5 +1,8 @@\n 2011-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/48661\n+\t* g++.dg/torture/pr48661.C: New test.\n+\n \tPR c++/48632\n \t* g++.dg/gomp/pr48632.C: New test.\n "}, {"sha": "8de2142f737ffb688bda51341b5d4c1024591f80", "filename": "gcc/testsuite/g++.dg/torture/pr48661.C", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48661.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848257079a98c2fa9c7d5a8cc666f7c0798e5ec0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48661.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48661.C?ref=848257079a98c2fa9c7d5a8cc666f7c0798e5ec0", "patch": "@@ -0,0 +1,77 @@\n+// PR middle-end/48661\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+__attribute__((noinline))\n+double\n+foo (double x, double y)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  return x + y;\n+}\n+\n+__attribute__((noinline, noclone))\n+void\n+bar (int x)\n+{\n+  if (x != 123)\n+    abort ();\n+}\n+\n+struct A\n+{\n+  double a1, a2;\n+};\n+\n+struct B \n+{\n+  virtual int m () const = 0 ;\n+};\n+\n+struct C\n+{\n+  virtual ~C () {}\n+};\n+\n+struct D : virtual public B, public C\n+{ \n+  explicit D (const A &x) : d(123) { foo (x.a2, x.a1); }\n+  int m () const { return d; }\n+  int d;\n+}; \n+\n+struct E\n+{\n+  E () : d(0) {}\n+  virtual void n (const B &x) { d = x.m (); x.m (); x.m (); }\n+  int d;\n+};\n+\n+void\n+test ()\n+{\n+  A a;\n+  a.a1 = 0;\n+  a.a2 = 1;\n+  E p;\n+  D q (a);\n+  const B &b = q;\n+  bar (b.m ());\n+  p.n (b);\n+  bar (p.d);\n+}\n+\n+void\n+baz ()\n+{\n+  A a;\n+  D p2 (a);\n+}\n+\n+int\n+main ()\n+{\n+  test ();\n+  return 0;\n+}"}]}