{"sha": "f28eb39cee72340b8f202c535368887111047bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4ZWIzOWNlZTcyMzQwYjhmMjAyYzUzNTM2ODg4NzExMTA0N2JmMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-06T06:53:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-06T06:53:29Z"}, "message": "sse.md (sse4_2_pcmpestr_cconly): Prefer pcmpestrm as flags setting insn.\n\n\t* config/i386/sse.md (sse4_2_pcmpestr_cconly): Prefer pcmpestrm\n\tas flags setting insn.\n\t(sse4_2_pcmpistr_cconly): Prefer pcmpistrm as flags setting insn.\n\n\t* config/i386/i386.md (UNSPEC_ROUNDP, UNSPEC_ROUNDS): Remove.\n\t(UNSPEC_ROUND): New.\n\t(\"sse4_1_round<mode>2\"): New insn pattern.\n\t(\"rint<mode>2\"): Expand using \"sse4_1_round<mode>2\" pattern for\n\tSSE4.1 targets.\n\t(\"floor<mode>2\"): Rename from floordf2 and floorsf2.  Macroize\n\texpander using SSEMODEF mode macro.  Expand using\n\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n\t(\"ceil<mode>2\"): Rename from ceildf2 and ceilsf2.  Macroize\n\texpander using SSEMODEF mode macro.  Expand using\n\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n\t(\"btrunc<mode>2\"): Rename from btruncdf2 and btruncsf2.  Macroize\n\texpander using SSEMODEF mode macro.  Expand using\n\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n\t* config/i386/sse.md (\"sse4_1_roundpd\", \"sse4_1_roundps\"): Use\n\tUNSPEC_ROUND instead of UNSPEC_ROUNDP.\n\t(\"sse4_1_roundsd\", \"sse4_1_roundss\"): Use UNSPEC_ROUND instead of\n\tUNSPEC_ROUNDS.\n\nFrom-SVN: r125356", "tree": {"sha": "d67f87e1cfccb0ba58ac15d3d96445d8295ca30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67f87e1cfccb0ba58ac15d3d96445d8295ca30e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f28eb39cee72340b8f202c535368887111047bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28eb39cee72340b8f202c535368887111047bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28eb39cee72340b8f202c535368887111047bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28eb39cee72340b8f202c535368887111047bf3/comments", "author": null, "committer": null, "parents": [{"sha": "69f2880c76592888802df4ab3621b9f32cf1523b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f2880c76592888802df4ab3621b9f32cf1523b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f2880c76592888802df4ab3621b9f32cf1523b"}], "stats": {"total": 266, "additions": 124, "deletions": 142}, "files": [{"sha": "937ac42ec568f32a169a91cfd91e9c59fa53980e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28eb39cee72340b8f202c535368887111047bf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28eb39cee72340b8f202c535368887111047bf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f28eb39cee72340b8f202c535368887111047bf3", "patch": "@@ -1,3 +1,30 @@\n+2007-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (sse4_2_pcmpestr_cconly): Prefer pcmpestrm\n+\tas flags setting insn.\n+\t(sse4_2_pcmpistr_cconly): Prefer pcmpistrm as flags setting insn.\n+\n+2007-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (UNSPEC_ROUNDP, UNSPEC_ROUNDS): Remove.\n+\t(UNSPEC_ROUND): New.\n+\t(\"sse4_1_round<mode>2\"): New insn pattern.\n+\t(\"rint<mode>2\"): Expand using \"sse4_1_round<mode>2\" pattern for\n+\tSSE4.1 targets.\n+\t(\"floor<mode>2\"): Rename from floordf2 and floorsf2.  Macroize\n+\texpander using SSEMODEF mode macro.  Expand using\n+\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n+\t(\"ceil<mode>2\"): Rename from ceildf2 and ceilsf2.  Macroize\n+\texpander using SSEMODEF mode macro.  Expand using\n+\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n+\t(\"btrunc<mode>2\"): Rename from btruncdf2 and btruncsf2.  Macroize\n+\texpander using SSEMODEF mode macro.  Expand using\n+\t\"sse4_1_round<mode>2\" pattern for SSE4.1 targets.\n+\t* config/i386/sse.md (\"sse4_1_roundpd\", \"sse4_1_roundps\"): Use\n+\tUNSPEC_ROUND instead of UNSPEC_ROUNDP.\n+\t(\"sse4_1_roundsd\", \"sse4_1_roundss\"): Use UNSPEC_ROUND instead of\n+\tUNSPEC_ROUNDS.\n+\n 2007-06-06  Jan Sjodin  <jan.sjodin@amd.com>\n \t    Sebastian Pop  <sebpop@gmail.com>\n \n@@ -53,7 +80,8 @@\n \t* cfgexpand (label_rtx_for_bb): Likewise.\n \t(expand_gimple_basic_block): Likewise.\n \t* cfghooks.c (dump_bb): Likewise.\n-\t(lv_adjust_loop_header_phi): Avoid using C++ keywords as variable names.\n+\t(lv_adjust_loop_header_phi): Avoid using C++ keywords as\n+\tvariable names.\n \t(lv_add_condition_to_bb): Likewise.\n \t* cfglayout (relink_block_chain): Cast according to the coding\n \tconventions.\n@@ -64,7 +92,8 @@\n \t(dump_recorded_exit): Likewise.\n \t* cfgloop.h (enum loop_estimation): Move out of struct scope...\n \t(struct loop): ... from here.\n-\t* cfgloopmanip.c (rpe_enum_p): Cast according to the coding conventions.\n+\t* cfgloopmanip.c (rpe_enum_p): Cast according to the coding\n+\tconventions.\n \t* cfgrtl.c (rtl_create_basic_block): Likewise.\n \t(rtl_split_block): Likewise.\n \t(rtl_dump_bb): Likewise."}, {"sha": "43e58ae8dc7eab44a359a6e5a28964c53ffdbb31", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 79, "deletions": 126, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28eb39cee72340b8f202c535368887111047bf3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28eb39cee72340b8f202c535368887111047bf3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f28eb39cee72340b8f202c535368887111047bf3", "patch": "@@ -171,8 +171,7 @@\n    (UNSPEC_MPSADBW\t\t138)\n    (UNSPEC_PHMINPOSUW\t\t139)\n    (UNSPEC_PTEST\t\t140)\n-   (UNSPEC_ROUNDP\t\t141)\n-   (UNSPEC_ROUNDS\t\t142)\n+   (UNSPEC_ROUND\t\t141)\n \n    ; For SSE4.2 support\n    (UNSPEC_CRC32\t\t143)\n@@ -16999,6 +16998,17 @@\n })\n \f\n \n+(define_insn \"sse4_1_round<mode>2\"\n+  [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=x\")\n+\t(unspec:SSEMODEF [(match_operand:SSEMODEF 1 \"register_operand\" \"x\")\n+\t\t\t  (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n+\t\t         UNSPEC_ROUND))]\n+  \"TARGET_SSE4_1\"\n+  \"rounds<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"rintxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n@@ -17018,12 +17028,18 @@\n     && flag_unsafe_math_optimizations)\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n        && !flag_trapping_math\n-       && !optimize_size)\"\n+       && (TARGET_SSE4_1 || !optimize_size))\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math\n-      && !optimize_size)\n-    ix86_expand_rint (operand0, operand1);\n+      && (TARGET_SSE4_1 || !optimize_size))\n+    {\n+      if (TARGET_SSE4_1)\n+\temit_insn (gen_sse4_1_round<mode>2\n+\t\t   (operands[0], operands[1], GEN_INT (0x04)));\n+      else\n+\tix86_expand_rint (operand0, operand1);\n+    }\n   else\n     {\n       rtx op0 = gen_reg_rtx (XFmode);\n@@ -17044,7 +17060,7 @@\n    && !flag_trapping_math && !flag_rounding_math\n    && !optimize_size\"\n {\n-  if ((<MODE>mode != DFmode) || TARGET_64BIT)\n+  if (TARGET_64BIT || (<MODE>mode != DFmode))\n     ix86_expand_round (operand0, operand1);\n   else\n     ix86_expand_rounddf_32 (operand0, operand1);\n@@ -17250,20 +17266,25 @@\n   DONE;\n })\n \n-(define_expand \"floordf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n+(define_expand \"floor<mode>2\"\n+  [(use (match_operand:SSEMODEF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SSEMODEF 1 \"register_operand\" \"\"))]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t|| TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations && !optimize_size)\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && (TARGET_SSE4_1 || !optimize_size))\"\n {\n-  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && (TARGET_SSE4_1 || !optimize_size))\n     {\n-      if (TARGET_64BIT)\n+      if (TARGET_SSE4_1)\n+\temit_insn (gen_sse4_1_round<mode>2\n+\t\t   (operands[0], operands[1], GEN_INT (0x01)));\n+      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_floorceil (operand0, operand1, true);\n       else\n \tix86_expand_floorceildf_32 (operand0, operand1, true);\n@@ -17273,36 +17294,10 @@\n       rtx op0 = gen_reg_rtx (XFmode);\n       rtx op1 = gen_reg_rtx (XFmode);\n \n-      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_floor (op0, op1));\n-\n-      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n-    }\n-  DONE;\n-})\n-\n-(define_expand \"floorsf2\"\n-  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n-{\n-  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n-    ix86_expand_floorceil (operand0, operand1, true);\n-  else\n-    {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n-\n-      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_floor (op0, op1));\n \n-      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n     }\n   DONE;\n })\n@@ -17536,20 +17531,25 @@\n   DONE;\n })\n \n-(define_expand \"ceildf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n+(define_expand \"ceil<mode>2\"\n+  [(use (match_operand:SSEMODEF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SSEMODEF 1 \"register_operand\" \"\"))]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t|| TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations && !optimize_size)\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && (TARGET_SSE4_1 || !optimize_size))\"\n {\n-  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && (TARGET_SSE4_1 || !optimize_size))\n     {\n-      if (TARGET_64BIT)\n+      if (TARGET_SSE4_1)\n+\temit_insn (gen_sse4_1_round<mode>2\n+\t\t   (operands[0], operands[1], GEN_INT (0x02)));\n+      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_floorceil (operand0, operand1, false);\n       else\n \tix86_expand_floorceildf_32 (operand0, operand1, false);\n@@ -17559,36 +17559,10 @@\n       rtx op0 = gen_reg_rtx (XFmode);\n       rtx op1 = gen_reg_rtx (XFmode);\n \n-      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_ceil (op0, op1));\n-\n-      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n-    }\n-  DONE;\n-})\n-\n-(define_expand \"ceilsf2\"\n-  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n-{\n-  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n-    ix86_expand_floorceil (operand0, operand1, false);\n-  else\n-    {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n-\n-      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_ceil (op0, op1));\n \n-      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n     }\n   DONE;\n })\n@@ -17820,20 +17794,25 @@\n   DONE;\n })\n \n-(define_expand \"btruncdf2\"\n-  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n+(define_expand \"btrunc<mode>2\"\n+  [(use (match_operand:SSEMODEF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SSEMODEF 1 \"register_operand\" \"\"))]\n+  \"(TARGET_USE_FANCY_MATH_387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t|| TARGET_MIX_SSE_I387)\n+    && flag_unsafe_math_optimizations && !optimize_size)\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+       && !flag_trapping_math\n+       && (TARGET_SSE4_1 || !optimize_size))\"\n {\n-  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+      && !flag_trapping_math\n+      && (TARGET_SSE4_1 || !optimize_size))\n     {\n-      if (TARGET_64BIT)\n+      if (TARGET_SSE4_1)\n+\temit_insn (gen_sse4_1_round<mode>2\n+\t\t   (operands[0], operands[1], GEN_INT (0x03)));\n+      else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_trunc (operand0, operand1);\n       else\n \tix86_expand_truncdf_32 (operand0, operand1);\n@@ -17843,36 +17822,10 @@\n       rtx op0 = gen_reg_rtx (XFmode);\n       rtx op1 = gen_reg_rtx (XFmode);\n \n-      emit_insn (gen_extenddfxf2 (op1, operands[1]));\n-      emit_insn (gen_frndintxf2_trunc (op0, op1));\n-\n-      emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));\n-    }\n-  DONE;\n-})\n-\n-(define_expand \"btruncsf2\"\n-  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"((TARGET_USE_FANCY_MATH_387\n-     && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-     && flag_unsafe_math_optimizations)\n-    || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-        && !flag_trapping_math))\n-   && !optimize_size\"\n-{\n-  if (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n-      && !flag_trapping_math)\n-    ix86_expand_trunc (operand0, operand1);\n-  else\n-    {\n-      rtx op0 = gen_reg_rtx (XFmode);\n-      rtx op1 = gen_reg_rtx (XFmode);\n-\n-      emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n       emit_insn (gen_frndintxf2_trunc (op0, op1));\n \n-      emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));\n+      emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n     }\n   DONE;\n })"}, {"sha": "042146ec6136bb048852c723eb623cefa0fd8a14", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28eb39cee72340b8f202c535368887111047bf3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28eb39cee72340b8f202c535368887111047bf3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f28eb39cee72340b8f202c535368887111047bf3", "patch": "@@ -6338,7 +6338,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\")\n \t\t      (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n-\t\t     UNSPEC_ROUNDP))]\n+\t\t     UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"roundpd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -6349,7 +6349,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")\n \t\t      (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n-\t\t     UNSPEC_ROUNDP))]\n+\t\t     UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"roundps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -6361,7 +6361,7 @@\n \t(vec_merge:V2DF\n \t  (unspec:V2DF [(match_operand:V2DF 2 \"register_operand\" \"x\")\n \t\t\t(match_operand:SI 3 \"const_0_to_15_operand\" \"n\")]\n-\t\t       UNSPEC_ROUNDS)\n+\t\t       UNSPEC_ROUND)\n \t  (match_operand:V2DF 1 \"register_operand\" \"0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE4_1\"\n@@ -6375,7 +6375,7 @@\n \t(vec_merge:V4SF\n \t  (unspec:V4SF [(match_operand:V4SF 2 \"register_operand\" \"x\")\n \t\t\t(match_operand:SI 3 \"const_0_to_15_operand\" \"n\")]\n-\t\t       UNSPEC_ROUNDS)\n+\t\t       UNSPEC_ROUND)\n \t  (match_operand:V4SF 1 \"register_operand\" \"0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE4_1\"\n@@ -6504,14 +6504,14 @@\n \t   (match_operand:SI 3 \"register_operand\" \"d,d,d,d\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n,n,n\")]\n \t  UNSPEC_PCMPESTR))\n-   (clobber (match_scratch:SI    5 \"=c,c,X,X\"))\n-   (clobber (match_scratch:V16QI 6 \"=X,X,Y0,Y0\"))]\n+   (clobber (match_scratch:V16QI 5 \"=Y0,Y0,X,X\"))\n+   (clobber (match_scratch:SI    6 \"= X, X,c,c\"))]\n   \"TARGET_SSE4_2\"\n   \"@\n-   pcmpestri\\t{%4, %2, %0|%0, %2, %4}\n-   pcmpestri\\t{%4, %2, %0|%0, %2, %4}\n    pcmpestrm\\t{%4, %2, %0|%0, %2, %4}\n-   pcmpestrm\\t{%4, %2, %0|%0, %2, %4}\"\n+   pcmpestrm\\t{%4, %2, %0|%0, %2, %4}\n+   pcmpestri\\t{%4, %2, %0|%0, %2, %4}\n+   pcmpestri\\t{%4, %2, %0|%0, %2, %4}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -6613,14 +6613,14 @@\n \t   (match_operand:V16QI 1 \"nonimmediate_operand\" \"x,m,x,m\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n,n,n,n\")]\n \t  UNSPEC_PCMPISTR))\n-   (clobber (match_scratch:SI    3 \"=c,c,X,X\"))\n-   (clobber (match_scratch:V16QI 4 \"=X,X,Y0,Y0\"))]\n+   (clobber (match_scratch:V16QI 3 \"=Y0,Y0,X,X\"))\n+   (clobber (match_scratch:SI    4 \"= X, X,c,c\"))]\n   \"TARGET_SSE4_2\"\n   \"@\n-   pcmpistri\\t{%2, %1, %0|%0, %1, %2}\n-   pcmpistri\\t{%2, %1, %0|%0, %1, %2}\n    pcmpistrm\\t{%2, %1, %0|%0, %1, %2}\n-   pcmpistrm\\t{%2, %1, %0|%0, %1, %2}\"\n+   pcmpistrm\\t{%2, %1, %0|%0, %1, %2}\n+   pcmpistri\\t{%2, %1, %0|%0, %1, %2}\n+   pcmpistri\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")"}]}