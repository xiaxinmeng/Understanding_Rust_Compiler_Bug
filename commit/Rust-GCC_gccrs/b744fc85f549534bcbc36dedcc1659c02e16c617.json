{"sha": "b744fc85f549534bcbc36dedcc1659c02e16c617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0NGZjODVmNTQ5NTM0YmNiYzM2ZGVkY2MxNjU5YzAyZTE2YzYxNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-06T11:34:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-06T11:34:47Z"}, "message": "[libcpp] struct deps renaming\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg00199.html\n\tlibcpp/\n\t* include/mkdeps.h: Rename struct deps to struct mkdeps.\n\t* mkdeps.c: Likewise.\n\t* include/cpplib.h (cpp_get_deps): Rename return type..\n\t* directives.c (cpp_get_deps): Likewise.\n\t* internal.h (struct cpp_reader): Rename deps field type.\n\n\tgcc/c-family/\n\t* c-opts.c (handle_defered_opts): Rename struct deps to struc mkdeps.\n\nFrom-SVN: r270905", "tree": {"sha": "ad770fda7112e4e6883f60edd3e908f1e17eebca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad770fda7112e4e6883f60edd3e908f1e17eebca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b744fc85f549534bcbc36dedcc1659c02e16c617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b744fc85f549534bcbc36dedcc1659c02e16c617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b744fc85f549534bcbc36dedcc1659c02e16c617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b744fc85f549534bcbc36dedcc1659c02e16c617/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b5e2d7b9075e5050755b5aead831a09c8b998f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5e2d7b9075e5050755b5aead831a09c8b998f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5e2d7b9075e5050755b5aead831a09c8b998f4"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "59810b8a0e0a56a40bd1190b5b873e530c010032", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -1,3 +1,7 @@\n+2019-05-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (handle_defered_opts): Rename struct deps to struc mkdeps.\n+\n 2019-04-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-common.c (c_common_init_ts): Use MARK_TS_EXP.  Mark SIZEOF_EXPR."}, {"sha": "bc7ea1769096d921f3a93a86368f72dc9b489e81", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -1277,18 +1277,15 @@ check_deps_environment_vars (void)\n static void\n handle_deferred_opts (void)\n {\n-  size_t i;\n-  struct deps *deps;\n-\n   /* Avoid allocating the deps buffer if we don't need it.\n      (This flag may be true without there having been -MT or -MQ\n      options, but we'll still need the deps buffer.)  */\n   if (!deps_seen)\n     return;\n \n-  deps = cpp_get_deps (parse_in);\n+  struct mkdeps *deps = cpp_get_deps (parse_in);\n \n-  for (i = 0; i < deferred_count; i++)\n+  for (size_t i = 0; i < deferred_count; i++)\n     {\n       struct deferred_opt *opt = &deferred_opts[i];\n "}, {"sha": "0e3fc56bc02bf2f6ce4b9fa8090cb3de11ada248", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -1,3 +1,11 @@\n+2019-05-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/mkdeps.h: Rename struct deps to struct mkdeps.\n+\t* mkdeps.c: Likewise.\n+\t* include/cpplib.h (cpp_get_deps): Rename return type..\n+\t* directives.c (cpp_get_deps): Likewise.\n+\t* internal.h (struct cpp_reader): Rename deps field type.\n+\n 2019-04-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* files.c (search_path_exhausted): Fix typo in comment."}, {"sha": "3ee8bc4053b9c11ccf1835c66b6be8f52064d36e", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -2539,7 +2539,7 @@ cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)\n }\n \n /* The dependencies structure.  (Creates one if it hasn't already been.)  */\n-struct deps *\n+struct mkdeps *\n cpp_get_deps (cpp_reader *pfile)\n {\n   if (!pfile->deps)"}, {"sha": "3edb93dce460d468a51c85c321c93a826feb279e", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -953,7 +953,7 @@ extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);\n extern cpp_options *cpp_get_options (cpp_reader *);\n extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n-extern struct deps *cpp_get_deps (cpp_reader *);\n+extern struct mkdeps *cpp_get_deps (cpp_reader *);\n \n /* This function reads the file, but does not start preprocessing.  It\n    returns the name of the original file; this is the same as the"}, {"sha": "b0e34728b5dc83b1b1d53b061bc88fabb5f98ac0", "filename": "libcpp/include/mkdeps.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finclude%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finclude%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fmkdeps.h?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -26,54 +26,54 @@ along with this program; see the file COPYING3.  If not see\n /* This is the data structure used by all the functions in mkdeps.c.\n    It's quite straightforward, but should be treated as opaque.  */\n \n-struct deps;\n+struct mkdeps;\n \n /* Create a deps buffer.  */\n-extern struct deps *deps_init (void);\n+extern struct mkdeps *deps_init (void);\n \n /* Destroy a deps buffer.  */\n-extern void deps_free (struct deps *);\n+extern void deps_free (struct mkdeps *);\n \n /* Add a set of \"vpath\" directories. The second argument is a colon-\n    separated list of pathnames, like you would set Make's VPATH\n    variable to.  If a dependency or target name begins with any of\n    these pathnames (and the next path element is not \"..\") that\n    pathname is stripped off.  */\n-extern void deps_add_vpath (struct deps *, const char *);\n+extern void deps_add_vpath (struct mkdeps *, const char *);\n \n /* Add a target (appears on left side of the colon) to the deps list.  Takes\n    a boolean indicating whether to quote the target for MAKE.  */\n-extern void deps_add_target (struct deps *, const char *, int);\n+extern void deps_add_target (struct mkdeps *, const char *, int);\n \n /* Sets the default target if none has been given already.  An empty\n    string as the default target is interpreted as stdin.  */\n-extern void deps_add_default_target (struct deps *, const char *);\n+extern void deps_add_default_target (struct mkdeps *, const char *);\n \n /* Add a dependency (appears on the right side of the colon) to the\n    deps list.  Dependencies will be printed in the order that they\n    were entered with this function.  By convention, the first\n    dependency entered should be the primary source file.  */\n-extern void deps_add_dep (struct deps *, const char *);\n+extern void deps_add_dep (struct mkdeps *, const char *);\n \n /* Write out a deps buffer to a specified file.  The third argument\n    is the number of columns to word-wrap at (0 means don't wrap).  */\n-extern void deps_write (const struct deps *, FILE *, unsigned int);\n+extern void deps_write (const struct mkdeps *, FILE *, unsigned int);\n \n /* Write out a deps buffer to a file, in a form that can be read back\n    with deps_restore.  Returns nonzero on error, in which case the\n    error number will be in errno.  */\n-extern int deps_save (struct deps *, FILE *);\n+extern int deps_save (struct mkdeps *, FILE *);\n \n /* Read back dependency information written with deps_save into\n    the deps buffer.  The third argument may be NULL, in which case\n    the dependency information is just skipped, or it may be a filename,\n    in which case that filename is skipped.  */\n-extern int deps_restore (struct deps *, FILE *, const char *);\n+extern int deps_restore (struct mkdeps *, FILE *, const char *);\n \n /* For each dependency *except the first*, emit a dummy rule for that\n    file, causing it to depend on nothing.  This is used to work around\n    the intermediate-file deletion misfeature in Make, in some\n    automatic dependency schemes.  */\n-extern void deps_phony_targets (const struct deps *, FILE *);\n+extern void deps_phony_targets (const struct mkdeps *, FILE *);\n \n #endif /* ! LIBCPP_MKDEPS_H */"}, {"sha": "5b9c389bb493d55d07a765388a2739dcc80ab693", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -512,7 +512,7 @@ struct cpp_reader\n   cpp_token eof;\n \n   /* Opaque handle to the dependencies of mkdeps.c.  */\n-  struct deps *deps;\n+  struct mkdeps *deps;\n \n   /* Obstack holding all macro hash nodes.  This never shrinks.\n      See identifiers.c */"}, {"sha": "3cbd75640aa1747b5255ae62cc0c218c6a412ec5", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b744fc85f549534bcbc36dedcc1659c02e16c617/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=b744fc85f549534bcbc36dedcc1659c02e16c617", "patch": "@@ -26,7 +26,7 @@ along with this program; see the file COPYING3.  If not see\n \n /* Keep this structure local to this file, so clients don't find it\n    easy to start making assumptions.  */\n-struct deps\n+struct mkdeps\n {\n   const char **targetv;\n   unsigned int ntargets;\t/* number of slots actually occupied */\n@@ -122,7 +122,7 @@ munge (const char *filename)\n /* If T begins with any of the partial pathnames listed in d->vpathv,\n    then advance T to point beyond that pathname.  */\n static const char *\n-apply_vpath (struct deps *d, const char *t)\n+apply_vpath (struct mkdeps *d, const char *t)\n {\n   if (d->vpathv)\n     {\n@@ -163,14 +163,14 @@ apply_vpath (struct deps *d, const char *t)\n \n /* Public routines.  */\n \n-struct deps *\n+struct mkdeps *\n deps_init (void)\n {\n-  return XCNEW (struct deps);\n+  return XCNEW (struct mkdeps);\n }\n \n void\n-deps_free (struct deps *d)\n+deps_free (struct mkdeps *d)\n {\n   unsigned int i;\n \n@@ -202,7 +202,7 @@ deps_free (struct deps *d)\n /* Adds a target T.  We make a copy, so it need not be a permanent\n    string.  QUOTE is true if the string should be quoted.  */\n void\n-deps_add_target (struct deps *d, const char *t, int quote)\n+deps_add_target (struct mkdeps *d, const char *t, int quote)\n {\n   if (d->ntargets == d->targets_size)\n     {\n@@ -223,7 +223,7 @@ deps_add_target (struct deps *d, const char *t, int quote)\n    string as the default target in interpreted as stdin.  The string\n    is quoted for MAKE.  */\n void\n-deps_add_default_target (struct deps *d, const char *tgt)\n+deps_add_default_target (struct mkdeps *d, const char *tgt)\n {\n   /* Only if we have no targets.  */\n   if (d->ntargets)\n@@ -253,7 +253,7 @@ deps_add_default_target (struct deps *d, const char *tgt)\n }\n \n void\n-deps_add_dep (struct deps *d, const char *t)\n+deps_add_dep (struct mkdeps *d, const char *t)\n {\n   t = munge (apply_vpath (d, t));  /* Also makes permanent copy.  */\n \n@@ -266,7 +266,7 @@ deps_add_dep (struct deps *d, const char *t)\n }\n \n void\n-deps_add_vpath (struct deps *d, const char *vpath)\n+deps_add_vpath (struct mkdeps *d, const char *vpath)\n {\n   const char *elem, *p;\n   char *copy;\n@@ -295,7 +295,7 @@ deps_add_vpath (struct deps *d, const char *vpath)\n }\n \n void\n-deps_write (const struct deps *d, FILE *fp, unsigned int colmax)\n+deps_write (const struct mkdeps *d, FILE *fp, unsigned int colmax)\n {\n   unsigned int size, i, column;\n \n@@ -346,7 +346,7 @@ deps_write (const struct deps *d, FILE *fp, unsigned int colmax)\n }\n \n void\n-deps_phony_targets (const struct deps *d, FILE *fp)\n+deps_phony_targets (const struct mkdeps *d, FILE *fp)\n {\n   unsigned int i;\n \n@@ -364,7 +364,7 @@ deps_phony_targets (const struct deps *d, FILE *fp)\n    error number will be in errno.  */\n \n int\n-deps_save (struct deps *deps, FILE *f)\n+deps_save (struct mkdeps *deps, FILE *f)\n {\n   unsigned int i;\n \n@@ -393,7 +393,7 @@ deps_save (struct deps *deps, FILE *f)\n    in which case that filename is skipped.  */\n \n int\n-deps_restore (struct deps *deps, FILE *fd, const char *self)\n+deps_restore (struct mkdeps *deps, FILE *fd, const char *self)\n {\n   unsigned int i, count;\n   size_t num_to_read;"}]}