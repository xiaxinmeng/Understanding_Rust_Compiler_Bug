{"sha": "b5193e352981fab8441c600b0a50efe1f30c1d30", "node_id": "C_kwDOANBUbNoAKGI1MTkzZTM1Mjk4MWZhYjg0NDFjNjAwYjBhNTBlZmUxZjMwYzFkMzA", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-12T18:59:57Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-12T19:03:16Z"}, "message": "i386: Add CC clobber and splits for 32-bit vector mode logic insns [PR100673, PR103861]\n\nAdd CC clobber to 32-bit vector mode logic insns to allow variants with\ngeneral-purpose registers.  Also improve ix86_sse_movcc to emit insn with\nCC clobber for narrow vector modes in order to re-enable conditional moves\nfor 16-bit and 32-bit narrow vector modes with -msse2.\n\n2022-01-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/100637\n\tPR target/103861\n\t* config/i386/i386-expand.c (ix86_emit_vec_binop): New static function.\n\t(ix86_expand_sse_movcc): Use ix86_emit_vec_binop instead of gen_rtx_X\n\twhen constructing vector logic RTXes.\n\t(expand_vec_perm_pshufb2): Ditto.\n\t* config/i386/mmx.md (negv2qi): Disparage GPR alternative a bit.\n\t(<plusminus:insn>v2qi3): Ditto.\n\t(vcond<mode><mode>): Re-enable for TARGET_SSE2.\n\t(vcondu<mode><mode>): Ditto.\n\t(vcond_mask_<mode><mode>): Ditto.\n\t(one_cmpl<VI_32:mode>2): Remove expander.\n\t(one_cmpl<VI_16_32:mode>2): Rename from one_cmplv2qi.\n\tUse VI_16_32 mode iterator.\n\t(one_cmpl<VI_16_32:mode>2 splitters): Use VI_16_32 mode iterator.\n\tUse lowpart_subreg instead of gen_lowpart to create subreg.\n\t(*andnot<VI_16_32:mode>3): Merge from \"*andnot<VI_32:mode>\" and\n\t\"*andnotv2qi3\" insn patterns using VI_16_32 mode iterator.\n\tDisparage GPR alternative a bit.  Add CC clobber.\n\t(*andnot<VI_16_32:mode>3 splitters): Use VI_16_32 mode iterator.\n\tUse lowpart_subreg instead of gen_lowpart to create subreg.\n\t(*<any_logic:code><VI_16_32:mode>3): Merge from\n\t\"*<any_logic:code><VI_32:mode>\" and \"*<any_logic:code>v2qi3\" insn patterns\n\tusing VI_16_32 mode iterator.  Disparage GPR alternative a bit.\n\tAdd CC clobber.\n\t(*<any_logic:code><VI_16_32:mode>3 splitters):Use VI_16_32 mode\n\titerator.  Use lowpart_subreg instead of gen_lowpart to create subreg.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100637\n\tPR target/103861\n\t* g++.target/i386/pr100637-1b.C (dg-options):\n\tUse -msse2 instead of -msse4.1.\n\t* g++.target/i386/pr100637-1w.C (dg-options): Ditto.\n\t* g++.target/i386/pr103861-1.C (dg-options): Ditto.\n\t* gcc.target/i386/pr100637-4b.c (dg-options): Ditto.\n\t* gcc.target/i386/pr103861-4.c (dg-options): Ditto.\n\t* gcc.target/i386/pr100637-1b.c: Remove scan-assembler\n\tdirectives for logic instructions.\n\t* gcc.target/i386/pr100637-1w.c: Ditto.\n\t* gcc.target/i386/warn-vect-op-2.c:\n\tUpdate dg-warning for vector logic operation.", "tree": {"sha": "f83b2aaeb4372f372ebb3dedb1795b91a34d7786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f83b2aaeb4372f372ebb3dedb1795b91a34d7786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5193e352981fab8441c600b0a50efe1f30c1d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5193e352981fab8441c600b0a50efe1f30c1d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5193e352981fab8441c600b0a50efe1f30c1d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5193e352981fab8441c600b0a50efe1f30c1d30/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d88d11973c63bda4e586b979b71d48c1d9b78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d88d11973c63bda4e586b979b71d48c1d9b78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d88d11973c63bda4e586b979b71d48c1d9b78a"}], "stats": {"total": 238, "additions": 105, "deletions": 133}, "files": [{"sha": "0318f1267855a30e5cb5c724aa65eb13ee086e0c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -3752,6 +3752,27 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n   return dest;\n }\n \n+/* Emit x86 binary operand CODE in mode MODE for SSE vector\n+   instructions that can be performed using GP registers.  */\n+\n+static void\n+ix86_emit_vec_binop (enum rtx_code code, machine_mode mode,\n+\t\t     rtx dst, rtx src1, rtx src2)\n+{\n+  rtx tmp;\n+\n+  tmp = gen_rtx_SET (dst, gen_rtx_fmt_ee (code, mode, src1, src2));\n+\n+  if (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (SImode)\n+      && GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n+    {\n+      rtx clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n+      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n+    }\n+\n+  emit_insn (tmp);\n+}\n+\n /* Expand DEST = CMP ? OP_TRUE : OP_FALSE into a sequence of logical\n    operations.  This is used for both scalar and vector conditional moves.  */\n \n@@ -3820,23 +3841,20 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n   else if (op_false == CONST0_RTX (mode))\n     {\n       op_true = force_reg (mode, op_true);\n-      x = gen_rtx_AND (mode, cmp, op_true);\n-      emit_insn (gen_rtx_SET (dest, x));\n+      ix86_emit_vec_binop (AND, mode, dest, cmp, op_true);\n       return;\n     }\n   else if (op_true == CONST0_RTX (mode))\n     {\n       op_false = force_reg (mode, op_false);\n       x = gen_rtx_NOT (mode, cmp);\n-      x = gen_rtx_AND (mode, x, op_false);\n-      emit_insn (gen_rtx_SET (dest, x));\n+      ix86_emit_vec_binop (AND, mode, dest, x, op_false);\n       return;\n     }\n   else if (INTEGRAL_MODE_P (mode) && op_true == CONSTM1_RTX (mode))\n     {\n       op_false = force_reg (mode, op_false);\n-      x = gen_rtx_IOR (mode, cmp, op_false);\n-      emit_insn (gen_rtx_SET (dest, x));\n+      ix86_emit_vec_binop (IOR, mode, dest, cmp, op_false);\n       return;\n     }\n   else if (TARGET_XOP)\n@@ -4010,15 +4028,12 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       else\n \tt3 = dest;\n \n-      x = gen_rtx_AND (mode, op_true, cmp);\n-      emit_insn (gen_rtx_SET (t2, x));\n+      ix86_emit_vec_binop (AND, mode, t2, op_true, cmp);\n \n       x = gen_rtx_NOT (mode, cmp);\n-      x = gen_rtx_AND (mode, x, op_false);\n-      emit_insn (gen_rtx_SET (t3, x));\n+      ix86_emit_vec_binop (AND, mode, t3, x, op_false);\n \n-      x = gen_rtx_IOR (mode, t3, t2);\n-      emit_insn (gen_rtx_SET (dest, x));\n+      ix86_emit_vec_binop (IOR, mode, dest, t3, t2);\n     }\n }\n \n@@ -20733,7 +20748,7 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n   op = d->target;\n   if (d->vmode != mode)\n     op = gen_reg_rtx (mode);\n-  emit_insn (gen_rtx_SET (op, gen_rtx_IOR (mode, l, h)));\n+  ix86_emit_vec_binop (IOR, mode, op, l, h);\n   if (op != d->target)\n     emit_move_insn (d->target, gen_lowpart (d->vmode, op));\n "}, {"sha": "8a8142c8a09fd8cc3a7091ff9e837e97d38d9a70", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 69, "deletions": 106, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1634,7 +1634,7 @@\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n (define_insn \"negv2qi2\"\n-  [(set (match_operand:V2QI 0 \"register_operand\" \"=Q,&Yw\")\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=?Q,&Yw\")\n         (neg:V2QI\n \t  (match_operand:V2QI 1 \"register_operand\" \"0,Yw\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -1740,7 +1740,7 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"<insn>v2qi3\"\n-  [(set (match_operand:V2QI 0 \"register_operand\" \"=Q,x,Yw\")\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=?Q,x,Yw\")\n         (plusminus:V2QI\n \t  (match_operand:V2QI 1 \"register_operand\" \"<comm>0,0,Yw\")\n \t  (match_operand:V2QI 2 \"register_operand\" \"Q,x,Yw\")))\n@@ -2587,7 +2587,7 @@\n \t     (match_operand:VI_16_32 5 \"register_operand\")])\n \t  (match_operand:VI_16_32 1)\n \t  (match_operand:VI_16_32 2)))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n@@ -2619,7 +2619,7 @@\n \t     (match_operand:VI_16_32 5 \"register_operand\")])\n \t  (match_operand:VI_16_32 1)\n \t  (match_operand:VI_16_32 2)))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n@@ -2645,7 +2645,7 @@\n \t  (match_operand:VI_16_32 1 \"register_operand\")\n \t  (match_operand:VI_16_32 2 \"register_operand\")\n \t  (match_operand:VI_16_32 3 \"register_operand\")))]\n-  \"TARGET_SSE4_1\"\n+  \"TARGET_SSE2\"\n {\n   ix86_expand_sse_movcc (operands[0], operands[3],\n \t\t\t operands[1], operands[2]);\n@@ -2752,51 +2752,41 @@\n   \"TARGET_MMX_WITH_SSE\"\n   \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n \n-(define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(xor:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\")\n-\t  (match_dup 2)))]\n-  \"TARGET_SSE2\"\n-  \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n-\n-(define_insn \"one_cmplv2qi2\"\n-  [(set (match_operand:V2QI 0 \"register_operand\" \"=r,&x,&v\")\n-\t(not:V2QI\n-\t  (match_operand:V2QI 1 \"register_operand\" \"0,x,v\")))]\n+(define_insn \"one_cmpl<mode>2\"\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=?r,&x,&v\")\n+\t(not:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"0,x,v\")))]\n   \"\"\n   \"#\"\n   [(set_attr \"isa\" \"*,sse2,avx512vl\")\n    (set_attr \"type\" \"negnot,sselog1,sselog1\")\n    (set_attr \"mode\" \"SI,TI,TI\")])\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n-\t(not:V2QI\n-\t  (match_operand:V2QI 1 \"general_reg_operand\")))]\n+  [(set (match_operand:VI_16_32 0 \"general_reg_operand\")\n+\t(not:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"general_reg_operand\")))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))]\n {\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = lowpart_subreg (SImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (SImode, operands[0], <MODE>mode);\n })\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n-\t(not:V2QI\n-\t  (match_operand:V2QI 1 \"sse_reg_operand\")))]\n+  [(set (match_operand:VI_16_32 0 \"sse_reg_operand\")\n+\t(not:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"sse_reg_operand\")))]\n   \"TARGET_SSE2 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(xor:V4QI\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 0)\n+\t(xor:V16QI\n \t  (match_dup 0) (match_dup 1)))]\n {\n-  emit_insn\n-   (gen_rtx_SET (gen_rtx_REG (V16QImode, REGNO (operands[0])),\n-\t\t CONSTM1_RTX (V16QImode)));\n-\n-  operands[1] = gen_lowpart (V4QImode, operands[1]);\n-  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+  operands[2] = CONSTM1_RTX (V16QImode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (V16QImode, operands[0], <MODE>mode);\n })\n \n (define_insn \"mmx_andnot<mode>3\"\n@@ -2816,24 +2806,11 @@\n    (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n (define_insn \"*andnot<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x,v\")\n-\t(and:VI_32\n-\t  (not:VI_32 (match_operand:VI_32 1 \"register_operand\" \"0,x,v\"))\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,x,v\")))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   pandn\\t{%2, %0|%0, %2}\n-   vpandn\\t{%2, %1, %0|%0, %1, %2}\n-   vpandnd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512vl\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*andnotv2qi3\"\n-  [(set (match_operand:V2QI 0 \"register_operand\" \"=&r,r,x,x,v\")\n-        (and:V2QI\n-\t  (not:V2QI (match_operand:V2QI 1 \"register_operand\" \"0,r,0,x,v\"))\n-\t  (match_operand:V2QI 2 \"register_operand\" \"r,r,x,x,v\")))\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=?&r,?r,x,x,v\")\n+        (and:VI_16_32\n+\t  (not:VI_16_32\n+\t    (match_operand:VI_16_32 1 \"register_operand\" \"0,r,0,x,v\"))\n+\t  (match_operand:VI_16_32 2 \"register_operand\" \"r,r,x,x,v\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"#\"\n@@ -2842,27 +2819,27 @@\n    (set_attr \"mode\" \"SI,SI,TI,TI,TI\")])\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n-        (and:V2QI\n-\t  (not:V2QI (match_operand:V2QI 1 \"general_reg_operand\"))\n-\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+  [(set (match_operand:VI_16_32 0 \"general_reg_operand\")\n+        (and:VI_16_32\n+\t  (not:VI_16_32 (match_operand:VI_16_32 1 \"general_reg_operand\"))\n+\t  (match_operand:VI_16_32 2 \"general_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_BMI && reload_completed\"\n   [(parallel\n      [(set (match_dup 0)\n \t   (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[2] = gen_lowpart (SImode, operands[2]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[2] = lowpart_subreg (SImode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (SImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (SImode, operands[0], <MODE>mode);\n })\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n-        (and:V2QI\n-\t  (not:V2QI (match_operand:V2QI 1 \"general_reg_operand\"))\n-\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+  [(set (match_operand:VI_16_32 0 \"general_reg_operand\")\n+        (and:VI_16_32\n+\t  (not:VI_16_32 (match_operand:VI_16_32 1 \"general_reg_operand\"))\n+\t  (match_operand:VI_16_32 2 \"general_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_BMI && reload_completed\"\n   [(set (match_dup 0)\n@@ -2872,24 +2849,24 @@\n \t   (and:SI (match_dup 0) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[2] = gen_lowpart (SImode, operands[2]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[2] = lowpart_subreg (SImode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (SImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (SImode, operands[0], <MODE>mode);\n })\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n-        (and:V2QI\n-\t  (not:V2QI (match_operand:V2QI 1 \"sse_reg_operand\"))\n-\t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n+  [(set (match_operand:VI_16_32 0 \"sse_reg_operand\")\n+        (and:VI_16_32\n+\t  (not:VI_16_32 (match_operand:VI_16_32 1 \"sse_reg_operand\"))\n+\t  (match_operand:VI_16_32 2 \"sse_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0)\n-\t(and:V4QI (not:V4QI (match_dup 1)) (match_dup 2)))]\n+\t(and:V16QI (not:V16QI (match_dup 1)) (match_dup 2)))]\n {\n-  operands[2] = gen_lowpart (V4QImode, operands[2]);\n-  operands[1] = gen_lowpart (V4QImode, operands[1]);\n-  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+  operands[2] = lowpart_subreg (V16QImode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (V16QImode, operands[0], <MODE>mode);\n })\n \n (define_expand \"mmx_<code><mode>3\"\n@@ -2925,24 +2902,10 @@\n    (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n (define_insn \"<code><mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x,v\")\n-        (any_logic:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"%0,x,v\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,x,v\")))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   p<logic>\\t{%2, %0|%0, %2}\n-   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n-   vp<logic>d\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512vl\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"<code>v2qi3\"\n-  [(set (match_operand:V2QI 0 \"register_operand\" \"=r,x,x,v\")\n-        (any_logic:V2QI\n-\t  (match_operand:V2QI 1 \"register_operand\" \"%0,0,x,v\")\n-\t  (match_operand:V2QI 2 \"register_operand\" \"r,x,x,v\")))\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=?r,x,x,v\")\n+        (any_logic:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"%0,0,x,v\")\n+\t  (match_operand:VI_16_32 2 \"register_operand\" \"r,x,x,v\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"#\"\n@@ -2951,35 +2914,35 @@\n    (set_attr \"mode\" \"SI,TI,TI,TI\")])\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n-        (any_logic:V2QI\n-\t  (match_operand:V2QI 1 \"general_reg_operand\")\n-\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+  [(set (match_operand:VI_16_32 0 \"general_reg_operand\")\n+        (any_logic:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"general_reg_operand\")\n+\t  (match_operand:VI_16_32 2 \"general_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\"\n   [(parallel\n      [(set (match_dup 0)\n \t   (any_logic:SI (match_dup 1) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[2] = gen_lowpart (SImode, operands[2]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[2] = lowpart_subreg (SImode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (SImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (SImode, operands[0], <MODE>mode);\n })\n \n (define_split\n-  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n-        (any_logic:V2QI\n-\t  (match_operand:V2QI 1 \"sse_reg_operand\")\n-\t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n+  [(set (match_operand:VI_16_32 0 \"sse_reg_operand\")\n+        (any_logic:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"sse_reg_operand\")\n+\t  (match_operand:VI_16_32 2 \"sse_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0)\n-\t(any_logic:V4QI (match_dup 1) (match_dup 2)))]\n+\t(any_logic:V16QI (match_dup 1) (match_dup 2)))]\n {\n-  operands[2] = gen_lowpart (V4QImode, operands[2]);\n-  operands[1] = gen_lowpart (V4QImode, operands[1]);\n-  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+  operands[2] = lowpart_subreg (V16QImode, operands[2], <MODE>mode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], <MODE>mode);\n+  operands[0] = lowpart_subreg (V16QImode, operands[0], <MODE>mode);\n })\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "35b5df7c9dde705709fe2100f1c43468d1ae8240", "filename": "gcc/testsuite/g++.target/i386/pr100637-1b.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1b.C?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse4\" } */\n+/* { dg-options \"-O2 -msse2\" } */\n \n typedef unsigned char __attribute__((__vector_size__ (4))) __v4qu;\n typedef char __attribute__((__vector_size__ (4))) __v4qi;"}, {"sha": "a3ed06fddee1aceddca20afce3456516c187022e", "filename": "gcc/testsuite/g++.target/i386/pr100637-1w.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100637-1w.C?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse4\" } */\n+/* { dg-options \"-O2 -msse2\" } */\n \n typedef unsigned short __attribute__((__vector_size__ (4))) __v2hu;\n typedef short __attribute__((__vector_size__ (4))) __v2hi;"}, {"sha": "6475728991e7ee09ea336926a02779e3543706c0", "filename": "gcc/testsuite/g++.target/i386/pr103861-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103861-1.C?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1,6 +1,6 @@\n /* PR target/103861 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse4\" } */\n+/* { dg-options \"-O2 -msse2\" } */\n \n typedef unsigned char __attribute__((__vector_size__ (2))) __v2qu;\n typedef char __attribute__((__vector_size__ (2))) __v2qi;"}, {"sha": "f5b1c122a6502368911b4493ef6f75cd1bba035b", "filename": "gcc/testsuite/gcc.target/i386/pr100637-1b.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1b.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -5,17 +5,14 @@\n typedef char __v4qi __attribute__ ((__vector_size__ (4)));\n \n __v4qi and (__v4qi a, __v4qi b) { return a & b; };\n-/* { dg-final { scan-assembler \"andv4qi3\" } } */\n \n __v4qi andn (__v4qi a, __v4qi b) { return a & ~b; };\n-/* { dg-final { scan-assembler \"andnotv4qi3\" } } */\n \n __v4qi or  (__v4qi a, __v4qi b) { return a | b; };\n-/* { dg-final { scan-assembler \"iorv4qi3\" } } */\n \n __v4qi xor  (__v4qi a, __v4qi b) { return a ^ b; };\n+\n __v4qi not  (__v4qi a) { return ~a; };\n-/* { dg-final { scan-assembler-times \"xorv4qi3\" 2 } } */\n \n __v4qi plus  (__v4qi a, __v4qi b) { return a + b; };\n /* { dg-final { scan-assembler \"addv4qi3\" } } */"}, {"sha": "5f2798878af6f1785541a5cf2e1fcc0faffa66ae", "filename": "gcc/testsuite/gcc.target/i386/pr100637-1w.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-1w.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -6,17 +6,14 @@ typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n typedef unsigned short __v2hu __attribute__ ((__vector_size__ (4)));\n \n __v2hi and (__v2hi a, __v2hi b) { return a & b; };\n-/* { dg-final { scan-assembler \"andv2hi3\" } } */\n \n __v2hi andn (__v2hi a, __v2hi b) { return a & ~b; };\n-/* { dg-final { scan-assembler \"andnotv2hi3\" } } */\n \n __v2hi or  (__v2hi a, __v2hi b) { return a | b; };\n-/* { dg-final { scan-assembler \"iorv2hi3\" } } */\n \n __v2hi xor  (__v2hi a, __v2hi b) { return a ^ b; };\n+\n __v2hi not  (__v2hi a) { return ~a; };\n-/* { dg-final { scan-assembler-times \"xorv2hi3\" 2 } } */\n \n __v2hi plus  (__v2hi a, __v2hi b) { return a + b; };\n /* { dg-final { scan-assembler \"addv2hi3\" } } */"}, {"sha": "198e3dd3352558d4db03a52c02bd1f0959876cf5", "filename": "gcc/testsuite/gcc.target/i386/pr100637-4b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n \n typedef char T;\n "}, {"sha": "54333697316c103018cf202c230c81d2f298a3ea", "filename": "gcc/testsuite/gcc.target/i386/pr103861-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-4.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n \n typedef char T;\n "}, {"sha": "5e378b6bd043eb1afcbfd6fcde359b5efc6e7b3f", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5193e352981fab8441c600b0a50efe1f30c1d30/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c?ref=b5193e352981fab8441c600b0a50efe1f30c1d30", "patch": "@@ -14,7 +14,7 @@ int main (int argc, char *argv[])\n     v0 + v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 - v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 > v1,              /* { dg-warning \"expanded piecewise\" }  */\n-    v0 & v1,              /* { dg-warning \"expanded piecewise\" }  */\n+    v0 & v1,              /* { dg-warning \"expanded in parallel\" }  */\n     __builtin_shuffle (v0, v1),        /* { dg-warning \"expanded piecewise\" }  */\n     __builtin_shuffle (v0, v1, v1)     /* { dg-warning \"expanded piecewise\" }  */\n   };"}]}