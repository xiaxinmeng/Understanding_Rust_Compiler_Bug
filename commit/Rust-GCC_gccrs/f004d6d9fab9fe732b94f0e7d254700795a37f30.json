{"sha": "f004d6d9fab9fe732b94f0e7d254700795a37f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwNGQ2ZDlmYWI5ZmU3MzJiOTRmMGU3ZDI1NDcwMDc5NWEzN2YzMA==", "commit": {"author": {"name": "Paul Fee", "email": "paul.f.fee@gmail.com", "date": "2021-01-27T12:11:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-01-27T12:37:36Z"}, "message": "libstdc++: Add string contains member functions for C++2b\n\nThis implements WG21 P1679R3, adding contains member functions to\nbasic_string_view and basic_string.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (basic_string::contains): New\n\tmember functions.\n\t* include/std/string_view (basic_string_view::contains):\n\tLikewise.\n\t* include/std/version (__cpp_lib_string_contains): Define.\n\t* testsuite/21_strings/basic_string/operations/starts_with/char/1.cc:\n\tRemove trailing whitespace.\n\t* testsuite/21_strings/basic_string/operations/starts_with/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/contains/char/1.cc: New test.\n\t* testsuite/21_strings/basic_string/operations/contains/wchar_t/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/contains/char/1.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/contains/char/2.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/contains/wchar_t/1.cc: New test.", "tree": {"sha": "4beb5e00be841b27653c7fe97e4d8e02ac43c3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4beb5e00be841b27653c7fe97e4d8e02ac43c3e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f004d6d9fab9fe732b94f0e7d254700795a37f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f004d6d9fab9fe732b94f0e7d254700795a37f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f004d6d9fab9fe732b94f0e7d254700795a37f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f004d6d9fab9fe732b94f0e7d254700795a37f30/comments", "author": {"login": "pfee", "id": 739087, "node_id": "MDQ6VXNlcjczOTA4Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/739087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfee", "html_url": "https://github.com/pfee", "followers_url": "https://api.github.com/users/pfee/followers", "following_url": "https://api.github.com/users/pfee/following{/other_user}", "gists_url": "https://api.github.com/users/pfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfee/subscriptions", "organizations_url": "https://api.github.com/users/pfee/orgs", "repos_url": "https://api.github.com/users/pfee/repos", "events_url": "https://api.github.com/users/pfee/events{/privacy}", "received_events_url": "https://api.github.com/users/pfee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4225af228b5d52e8d7593dea49584c91b4bc2e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4225af228b5d52e8d7593dea49584c91b4bc2e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4225af228b5d52e8d7593dea49584c91b4bc2e1f"}], "stats": {"total": 322, "additions": 318, "deletions": 4}, "files": [{"sha": "bfc97644bd0eef36296a61042c51c35e76d0da4d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -3073,6 +3073,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n #endif // C++20\n \n+#if __cplusplus > 202002L\n+      bool\n+      contains(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+\n+      bool\n+      contains(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+\n+      bool\n+      contains(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+#endif // C++23\n+\n       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:\n       template<typename, typename, typename> friend class basic_stringbuf;\n     };\n@@ -5998,6 +6012,21 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n #endif // C++20\n \n+#if __cplusplus >= 202011L \\\n+  || (__cplusplus == 202002L && !defined __STRICT_ANSI__)\n+      bool\n+      contains(basic_string_view<_CharT, _Traits> __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+\n+      bool\n+      contains(_CharT __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+\n+      bool\n+      contains(const _CharT* __x) const noexcept\n+      { return __sv_type(this->data(), this->size()).contains(__x); }\n+#endif // C++23\n+\n # ifdef _GLIBCXX_TM_TS_INTERNAL\n       friend void\n       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,"}, {"sha": "dba757fad6bdcc0b4f0966ba2726feb8b5f20d27", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -352,6 +352,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->ends_with(basic_string_view(__x)); }\n #endif // C++20\n \n+#if __cplusplus > 202002L\n+#define __cpp_lib_string_contains 202011L\n+      constexpr bool\n+      contains(basic_string_view __x) const noexcept\n+      { return this->find(__x) != npos; }\n+\n+      constexpr bool\n+      contains(_CharT __x) const noexcept\n+      { return this->find(__x) != npos; }\n+\n+      constexpr bool\n+      contains(const _CharT* __x) const noexcept\n+      { return this->find(__x) != npos; }\n+#endif // C++23\n+\n       // [string.view.find], searching\n \n       constexpr size_type"}, {"sha": "ace87cf42cfbd8c023c176f2f28f59100627a467", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -167,7 +167,7 @@\n #endif\n \n #if __cplusplus > 201703L\n-// c++2a\n+// c++20\n #define __cpp_lib_atomic_flag_test 201907L\n #define __cpp_lib_atomic_float 201711L\n #define __cpp_lib_atomic_ref 201806L\n@@ -256,7 +256,12 @@\n #define __cpp_lib_to_address 201711L\n #define __cpp_lib_to_array 201907L\n #endif\n-#endif // C++2a\n+\n+#if __cplusplus > 202002L\n+// c++2b\n+#define __cpp_lib_string_contains 202011L\n+#endif // C++2b\n+#endif // C++20\n #endif // C++17\n #endif // C++14\n #endif // C++11"}, {"sha": "d313bb553c899527c756ecfd3ae1053537eab073", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/contains/char/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fchar%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string contains\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+    const std::string haystack(\"no place for needles\");\n+\n+    VERIFY(haystack.contains(std::string(\"\")));\n+    VERIFY(haystack.contains(std::string(\"no\")));\n+    VERIFY(haystack.contains(std::string(\"needles\")));\n+    VERIFY(haystack.contains(std::string(\" for \")));\n+    VERIFY(!haystack.contains(std::string(\"places\")));\n+\n+    VERIFY(haystack.contains(std::string_view(\"\")));\n+    VERIFY(haystack.contains(std::string_view(\"no\")));\n+    VERIFY(haystack.contains(std::string_view(\"needles\")));\n+    VERIFY(haystack.contains(std::string_view(\" for \")));\n+    VERIFY(!haystack.contains(std::string_view(\"places\")));\n+\n+    VERIFY(!haystack.contains('\\0'));\n+    VERIFY(haystack.contains('n'));\n+    VERIFY(haystack.contains('e'));\n+    VERIFY(haystack.contains('s'));\n+    VERIFY(!haystack.contains('x'));\n+\n+    VERIFY(haystack.contains(\"\"));\n+    VERIFY(haystack.contains(\"no\"));\n+    VERIFY(haystack.contains(\"needles\"));\n+    VERIFY(haystack.contains(\" for \"));\n+    VERIFY(!haystack.contains(\"places\"));\n+\n+    const std::string nothing;\n+    VERIFY(nothing.contains(\"\"));\n+    VERIFY(!nothing.contains('\\0'));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "14471f97dbdb91670ffca46a299b6dec6259d289", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/contains/wchar_t/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fwchar_t%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string contains\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+    const std::wstring haystack(L\"no place for needles\");\n+\n+    VERIFY(haystack.contains(std::wstring(L\"\")));\n+    VERIFY(haystack.contains(std::wstring(L\"no\")));\n+    VERIFY(haystack.contains(std::wstring(L\"needles\")));\n+    VERIFY(haystack.contains(std::wstring(L\" for \")));\n+    VERIFY(!haystack.contains(std::wstring(L\"places\")));\n+\n+    VERIFY(haystack.contains(std::wstring_view(L\"\")));\n+    VERIFY(haystack.contains(std::wstring_view(L\"no\")));\n+    VERIFY(haystack.contains(std::wstring_view(L\"needles\")));\n+    VERIFY(haystack.contains(std::wstring_view(L\" for \")));\n+    VERIFY(!haystack.contains(std::wstring_view(L\"places\")));\n+\n+    VERIFY(!haystack.contains('\\0'));\n+    VERIFY(haystack.contains('n'));\n+    VERIFY(haystack.contains('e'));\n+    VERIFY(haystack.contains('s'));\n+    VERIFY(!haystack.contains('x'));\n+\n+    VERIFY(haystack.contains(L\"\"));\n+    VERIFY(haystack.contains(L\"no\"));\n+    VERIFY(haystack.contains(L\"needles\"));\n+    VERIFY(haystack.contains(L\" for \"));\n+    VERIFY(!haystack.contains(L\"places\"));\n+\n+    const std::wstring nothing;\n+    VERIFY(nothing.contains(L\"\"));\n+    VERIFY(!nothing.contains('\\0'));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4f4a8d2c20cb638b1110b770eb62f6b87aed3ff0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fchar%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -50,7 +50,7 @@ test01()\n \n int\n main()\n-{ \n+{\n   test01();\n   return 0;\n }"}, {"sha": "022f128a2a0087568fa76736557c83a124e7eaba", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fwchar_t%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -50,7 +50,7 @@ test01()\n \n int\n main()\n-{ \n+{\n   test01();\n   return 0;\n }"}, {"sha": "9aa87ad6a5062a7ae4bca3027571036b77097735", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/char/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view contains\n+\n+#include <string_view>\n+\n+#ifndef __cpp_lib_string_contains\n+# error \"Feature-test macro for contains missing in <string_view>\"\n+#elif __cpp_lib_string_contains != 202011L\n+# error \"Feature-test macro for contains has wrong value in <string_view>\"\n+#endif\n+\n+void\n+test01()\n+{\n+    constexpr std::string_view haystack(\"no place for needles\");\n+\n+    static_assert(haystack.contains(std::string_view(\"\")));\n+    static_assert(haystack.contains(std::string_view(\"no\")));\n+    static_assert(haystack.contains(std::string_view(\"needles\")));\n+    static_assert(haystack.contains(std::string_view(\" for \")));\n+    static_assert(!haystack.contains(std::string_view(\"places\")));\n+\n+    static_assert(!haystack.contains('\\0'));\n+    static_assert(haystack.contains('n'));\n+    static_assert(haystack.contains('e'));\n+    static_assert(haystack.contains('s'));\n+    static_assert(!haystack.contains('x'));\n+\n+    static_assert(haystack.contains(\"\"));\n+    static_assert(haystack.contains(\"no\"));\n+    static_assert(haystack.contains(\"needles\"));\n+    static_assert(haystack.contains(\" for \"));\n+    static_assert(!haystack.contains(\"places\"));\n+\n+    constexpr std::string_view nothing;\n+    static_assert(nothing.contains(\"\"));\n+    static_assert(!nothing.contains('\\0'));\n+}"}, {"sha": "8a9d783a63a295fcfb27b1cdb4b0512767d2a206", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/char/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_string_contains\n+# error \"Feature-test macro for contains missing in <string_view>\"\n+#elif __cpp_lib_string_contains != 202011L\n+# error \"Feature-test macro for contains has wrong value in <string_view>\"\n+#endif"}, {"sha": "b01bea123842fd9b1bf7230b50947326d0688e93", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/wchar_t/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004d6d9fab9fe732b94f0e7d254700795a37f30/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fwchar_t%2F1.cc?ref=f004d6d9fab9fe732b94f0e7d254700795a37f30", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view contains\n+\n+#include <string_view>\n+\n+void\n+test01()\n+{\n+    constexpr std::wstring_view haystack = L\"no place for needles\";\n+\n+    static_assert(haystack.contains(std::wstring_view(L\"\")));\n+    static_assert(haystack.contains(std::wstring_view(L\"no\")));\n+    static_assert(haystack.contains(std::wstring_view(L\"needles\")));\n+    static_assert(haystack.contains(std::wstring_view(L\" for \")));\n+    static_assert(!haystack.contains(std::wstring_view(L\"places\")));\n+\n+    static_assert(!haystack.contains('\\0'));\n+    static_assert(haystack.contains('n'));\n+    static_assert(haystack.contains('e'));\n+    static_assert(haystack.contains('s'));\n+    static_assert(!haystack.contains('x'));\n+\n+    static_assert(haystack.contains(L\"\"));\n+    static_assert(haystack.contains(L\"no\"));\n+    static_assert(haystack.contains(L\"needles\"));\n+    static_assert(haystack.contains(L\" for \"));\n+    static_assert(!haystack.contains(L\"places\"));\n+\n+    constexpr std::wstring_view nothing;\n+    static_assert(nothing.contains(L\"\"));\n+    static_assert(!nothing.contains('\\0'));\n+}"}]}