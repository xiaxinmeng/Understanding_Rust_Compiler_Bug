{"sha": "27646dba39c421705f0a651bf68223680e3351e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2NDZkYmEzOWM0MjE3MDVmMGE2NTFiZjY4MjIzNjgwZTMzNTFlOQ==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@redhat.com", "date": "2000-12-02T00:18:46Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-12-02T00:18:46Z"}, "message": "dbxout.c (dbxout_parms): Correctly describe parameters passed by invisible reference in registers...\n\n2000-12-01  Jim Blandy  <jimb@redhat.com>\n\n\t* dbxout.c (dbxout_parms): Correctly describe parameters passed by\n \tinvisible reference in registers, but then spilled to the stack.\n  \tRemove code to emit a second stab for such parameters; it attempts\n \tto describe the value's location by introducing a synthetic C++\n \t`reference' type, and then saying the stack slot has that\n \treference type.  This loses type information (breaking GDB's\n \t`ptype' command, among other things) just to describe a location\n \twhich stabs can represent correctly in other ways.\n\nFrom-SVN: r37936", "tree": {"sha": "a9017265fd3bf7b9904620d787cc6634e26be5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9017265fd3bf7b9904620d787cc6634e26be5dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27646dba39c421705f0a651bf68223680e3351e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27646dba39c421705f0a651bf68223680e3351e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27646dba39c421705f0a651bf68223680e3351e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27646dba39c421705f0a651bf68223680e3351e9/comments", "author": null, "committer": null, "parents": [{"sha": "08106825b963ae6505e978a0986d134d9860ac7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08106825b963ae6505e978a0986d134d9860ac7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08106825b963ae6505e978a0986d134d9860ac7a"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "82cbc8f601432ca837cf6a6613149095bd50d54e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27646dba39c421705f0a651bf68223680e3351e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27646dba39c421705f0a651bf68223680e3351e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27646dba39c421705f0a651bf68223680e3351e9", "patch": "@@ -1,3 +1,14 @@\n+2000-12-01  Jim Blandy  <jimb@redhat.com>\n+\n+\t* dbxout.c (dbxout_parms): Correctly describe parameters passed by\n+ \tinvisible reference in registers, but then spilled to the stack.\n+  \tRemove code to emit a second stab for such parameters; it attempts\n+ \tto describe the value's location by introducing a synthetic C++\n+ \t`reference' type, and then saying the stack slot has that\n+ \treference type.  This loses type information (breaking GDB's\n+ \t`ptype' command, among other things) just to describe a location\n+ \twhich stabs can represent correctly in other ways.\n+\n 2000-12-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* final.c (output_addr_const) <PLUS>: Don't assume at least one\n@@ -533,6 +544,7 @@ Tue Nov 28 09:53:50 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tMerge handling of -D and -U.  Update handling of pending\n \tdirectives.  Free the memory after use.\n \n+>>>>>>> 1.8477\n 2000-11-27  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* flow.c (entry_exit_blocks): Add entry for cond_local_set."}, {"sha": "268a6c6a0ab567f1a17e97c62bebec32a859cc72", "filename": "gcc/dbxout.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27646dba39c421705f0a651bf68223680e3351e9/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27646dba39c421705f0a651bf68223680e3351e9/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=27646dba39c421705f0a651bf68223680e3351e9", "patch": "@@ -2469,6 +2469,24 @@ dbxout_parms (parms)\n \t    dbxout_type (TREE_TYPE (parms), 0, 0);\n \t    dbxout_finish_symbol (parms);\n \t  }\n+\telse if (GET_CODE (DECL_RTL (parms)) == MEM\n+\t\t && GET_CODE (XEXP (DECL_RTL (parms), 0)) == MEM)\n+\t  {\n+\t    /* Parm was passed via invisible reference, with the reference\n+\t       living on the stack.  DECL_RTL looks like\n+\t       (MEM (MEM (PLUS (REG ...) (CONST_INT ...)))).  */\n+\t    const char *decl_name = (DECL_NAME (parms)\n+\t\t\t\t     ? IDENTIFIER_POINTER (DECL_NAME (parms))\n+\t\t\t\t     : \"(anon)\");\n+\t    current_sym_value\n+\t      = INTVAL (XEXP (XEXP (XEXP (DECL_RTL (parms), 0), 0), 1));\n+\t    current_sym_addr = 0;\n+\t      \n+\t    FORCE_TEXT;\n+\t    fprintf (asmfile, \"%s\\\"%s:v\", ASM_STABS_OP, decl_name);\n+\t    dbxout_type (TREE_TYPE (parms), 0, 0);\n+\t    dbxout_finish_symbol (parms);\n+\t  }\n \telse if (GET_CODE (DECL_RTL (parms)) == MEM\n \t\t && XEXP (DECL_RTL (parms), 0) != const0_rtx\n \t\t /* ??? A constant address for a parm can happen\n@@ -2477,22 +2495,14 @@ dbxout_parms (parms)\n \t\t && ! CONSTANT_P (XEXP (DECL_RTL (parms), 0)))\n \t  {\n \t    /* Parm was passed in registers but lives on the stack.  */\n-\t    int aux_sym_value = 0;\n \n \t    current_sym_code = N_PSYM;\n \t    /* DECL_RTL looks like (MEM (PLUS (REG...) (CONST_INT...))),\n \t       in which case we want the value of that CONST_INT,\n-\t       or (MEM (REG ...)) or (MEM (MEM ...)),\n+\t       or (MEM (REG ...)),\n \t       in which case we use a value of zero.  */\n \t    if (GET_CODE (XEXP (DECL_RTL (parms), 0)) == REG)\n \t      current_sym_value = 0;\n-\t    else if (GET_CODE (XEXP (DECL_RTL (parms), 0)) == MEM)\n-\t      {\n-\t\t/* Remember the location on the stack the parm is moved to */\n-\t        aux_sym_value\n-\t\t  = INTVAL (XEXP (XEXP (XEXP (DECL_RTL (parms), 0), 0), 1));\n-\t        current_sym_value = 0;\n-\t      }\n \t    else\n \t\tcurrent_sym_value\n \t\t  = INTVAL (XEXP (XEXP (DECL_RTL (parms), 0), 1));\n@@ -2532,17 +2542,6 @@ dbxout_parms (parms)\n \t\t\t\t     XEXP (DECL_RTL (parms), 0));\n \t    dbxout_type (TREE_TYPE (parms), 0, 0);\n \t    dbxout_finish_symbol (parms);\n-\t    if (aux_sym_value != 0)\n-\t      {\n-\t\t/* Generate an entry for the stack location */\n-\n-\t\tfprintf (asmfile, \"%s\\\"%s:\", ASM_STABS_OP,\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)));\n-\t\tcurrent_sym_value = aux_sym_value;\n-\t        current_sym_code = N_LSYM;\n-\t        dbxout_type (build_reference_type (TREE_TYPE (parms)), 0, 0);\n-\t        dbxout_finish_symbol (parms);\n-\t      }\n \t  }\n       }\n }"}]}