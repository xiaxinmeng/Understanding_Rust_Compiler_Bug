{"sha": "5fa79de857ef94a396c313826b290c4bb548c135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhNzlkZTg1N2VmOTRhMzk2YzMxMzgyNmIyOTBjNGJiNTQ4YzEzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-02T11:33:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-02T11:33:16Z"}, "message": "builtins.c (get_pointer_alignment_1): Handle POINTER_PLUS_EXPR.\n\n2015-07-02  Richard Biener  <rguenther@suse.de>\n\n\t* builtins.c (get_pointer_alignment_1): Handle POINTER_PLUS_EXPR.\n\t* fold-const.c (get_pointer_modulus_and_residue): Remove.\n\t(fold_binary_loc): Implement (T)ptr & CST in terms of\n\tget_pointer_alignment_1.\n\t* tree-vect-loop-manip.c (vect_gen_niters_for_prolog_loop):\n\tMake sure to build the alignment test on a SSA name without\n\tfinal alignment info valid only after the prologue.\n\nFrom-SVN: r225310", "tree": {"sha": "de2a914d4fee104b8455d4f67d8432cac9176a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2a914d4fee104b8455d4f67d8432cac9176a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa79de857ef94a396c313826b290c4bb548c135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa79de857ef94a396c313826b290c4bb548c135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa79de857ef94a396c313826b290c4bb548c135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa79de857ef94a396c313826b290c4bb548c135/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc2af70593133757b1671e184145eaa0b57db3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2af70593133757b1671e184145eaa0b57db3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2af70593133757b1671e184145eaa0b57db3bf"}], "stats": {"total": 126, "additions": 41, "deletions": 85}, "files": [{"sha": "07e091bb20a6dccc6922fc40aa56387bba7941f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fa79de857ef94a396c313826b290c4bb548c135", "patch": "@@ -1,3 +1,13 @@\n+2015-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* builtins.c (get_pointer_alignment_1): Handle POINTER_PLUS_EXPR.\n+\t* fold-const.c (get_pointer_modulus_and_residue): Remove.\n+\t(fold_binary_loc): Implement (T)ptr & CST in terms of\n+\tget_pointer_alignment_1.\n+\t* tree-vect-loop-manip.c (vect_gen_niters_for_prolog_loop):\n+\tMake sure to build the alignment test on a SSA name without\n+\tfinal alignment info valid only after the prologue.\n+\n 2015-07-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md (\"epilogue\"): Remove condition."}, {"sha": "5f53342205a1e924a3f540861898e38838a7c395", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5fa79de857ef94a396c313826b290c4bb548c135", "patch": "@@ -473,6 +473,28 @@ get_pointer_alignment_1 (tree exp, unsigned int *alignp,\n   if (TREE_CODE (exp) == ADDR_EXPR)\n     return get_object_alignment_2 (TREE_OPERAND (exp, 0),\n \t\t\t\t   alignp, bitposp, true);\n+  else if (TREE_CODE (exp) == POINTER_PLUS_EXPR)\n+    {\n+      unsigned int align;\n+      unsigned HOST_WIDE_INT bitpos;\n+      bool res = get_pointer_alignment_1 (TREE_OPERAND (exp, 0),\n+\t\t\t\t\t  &align, &bitpos);\n+      if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n+\tbitpos += TREE_INT_CST_LOW (TREE_OPERAND (exp, 1)) * BITS_PER_UNIT;\n+      else\n+\t{\n+\t  unsigned int trailing_zeros = tree_ctz (TREE_OPERAND (exp, 1));\n+\t  if (trailing_zeros < HOST_BITS_PER_INT)\n+\t    {\n+\t      unsigned int inner = (1U << trailing_zeros) * BITS_PER_UNIT;\n+\t      if (inner)\n+\t\talign = MIN (align, inner);\n+\t    }\n+\t}\n+      *alignp = align;\n+      *bitposp = bitpos & (align - 1);\n+      return res;\n+    }\n   else if (TREE_CODE (exp) == SSA_NAME\n \t   && POINTER_TYPE_P (TREE_TYPE (exp)))\n     {"}, {"sha": "a02cfb7b1f012b444cfb5cb62f0f79dee3c7b64d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 84, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5fa79de857ef94a396c313826b290c4bb548c135", "patch": "@@ -9350,83 +9350,6 @@ fold_mult_zconjz (location_t loc, tree type, tree expr)\n }\n \n \n-/* Subroutine of fold_binary.  If P is the value of EXPR, computes\n-   power-of-two M and (arbitrary) N such that M divides (P-N).  This condition\n-   guarantees that P and N have the same least significant log2(M) bits.\n-   N is not otherwise constrained.  In particular, N is not normalized to\n-   0 <= N < M as is common.  In general, the precise value of P is unknown.\n-   M is chosen as large as possible such that constant N can be determined.\n-\n-   Returns M and sets *RESIDUE to N.\n-\n-   If ALLOW_FUNC_ALIGN is true, do take functions' DECL_ALIGN_UNIT into\n-   account.  This is not always possible due to PR 35705.\n- */\n-\n-static unsigned HOST_WIDE_INT\n-get_pointer_modulus_and_residue (tree expr, unsigned HOST_WIDE_INT *residue,\n-\t\t\t\t bool allow_func_align)\n-{\n-  enum tree_code code;\n-\n-  *residue = 0;\n-\n-  code = TREE_CODE (expr);\n-  if (code == ADDR_EXPR)\n-    {\n-      unsigned int bitalign;\n-      get_object_alignment_1 (TREE_OPERAND (expr, 0), &bitalign, residue);\n-      *residue /= BITS_PER_UNIT;\n-      return bitalign / BITS_PER_UNIT;\n-    }\n-  else if (code == POINTER_PLUS_EXPR)\n-    {\n-      tree op0, op1;\n-      unsigned HOST_WIDE_INT modulus;\n-      enum tree_code inner_code;\n-\n-      op0 = TREE_OPERAND (expr, 0);\n-      STRIP_NOPS (op0);\n-      modulus = get_pointer_modulus_and_residue (op0, residue,\n-\t\t\t\t\t\t allow_func_align);\n-\n-      op1 = TREE_OPERAND (expr, 1);\n-      STRIP_NOPS (op1);\n-      inner_code = TREE_CODE (op1);\n-      if (inner_code == INTEGER_CST)\n-\t{\n-\t  *residue += TREE_INT_CST_LOW (op1);\n-\t  return modulus;\n-\t}\n-      else if (inner_code == MULT_EXPR)\n-\t{\n-\t  op1 = TREE_OPERAND (op1, 1);\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n-\t    {\n-\t      unsigned HOST_WIDE_INT align;\n-\n-\t      /* Compute the greatest power-of-2 divisor of op1.  */\n-\t      align = TREE_INT_CST_LOW (op1);\n-\t      align &= -align;\n-\n-\t      /* If align is non-zero and less than *modulus, replace\n-\t\t *modulus with align., If align is 0, then either op1 is 0\n-\t\t or the greatest power-of-2 divisor of op1 doesn't fit in an\n-\t\t unsigned HOST_WIDE_INT.  In either case, no additional\n-\t\t constraint is imposed.  */\n-\t      if (align)\n-\t\tmodulus = MIN (modulus, align);\n-\n-\t      return modulus;\n-\t    }\n-\t}\n-    }\n-\n-  /* If we get here, we were unable to determine anything useful about the\n-     expression.  */\n-  return 1;\n-}\n-\n /* Helper function for fold_vec_perm.  Store elements of VECTOR_CST or\n    CONSTRUCTOR ARG into array ELTS and return true if successful.  */\n \n@@ -11149,19 +11072,20 @@ fold_binary_loc (location_t loc,\n       /* If arg0 is derived from the address of an object or function, we may\n \t be able to fold this expression using the object or function's\n \t alignment.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (arg0)) && tree_fits_uhwi_p (arg1))\n+      if (POINTER_TYPE_P (TREE_TYPE (arg0)) && TREE_CODE (arg1) == INTEGER_CST)\n \t{\n-\t  unsigned HOST_WIDE_INT modulus, residue;\n-\t  unsigned HOST_WIDE_INT low = tree_to_uhwi (arg1);\n+\t  unsigned int align;\n+\t  unsigned HOST_WIDE_INT bitpos;\n \n-\t  modulus = get_pointer_modulus_and_residue (arg0, &residue,\n-\t\t\t\t\t\t     integer_onep (arg1));\n+\t  get_pointer_alignment_1 (arg0, &align, &bitpos);\n \n \t  /* This works because modulus is a power of 2.  If this weren't the\n \t     case, we'd have to replace it by its greatest power-of-2\n \t     divisor: modulus & -modulus.  */\n-\t  if (low < modulus)\n-\t    return build_int_cst (type, residue & low);\n+\t  if (wi::ltu_p (arg1, align / BITS_PER_UNIT))\n+\t    return wide_int_to_tree (type,\n+\t\t\t\t     wi::bit_and (arg1,\n+\t\t\t\t\t\t  bitpos / BITS_PER_UNIT));\n \t}\n \n       goto associate;"}, {"sha": "58d2c7feeff1f59da4bf84fe45f2a22987c9c453", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa79de857ef94a396c313826b290c4bb548c135/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=5fa79de857ef94a396c313826b290c4bb548c135", "patch": "@@ -1877,7 +1877,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters, int\n       gimple_seq new_stmts = NULL;\n       bool negative = tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0;\n       tree offset = negative\n-\t  ? size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1) : NULL_TREE;\n+\t  ? size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1) : size_zero_node;\n       tree start_addr = vect_create_addr_base_for_vector_ref (dr_stmt,\n \t\t\t\t\t\t&new_stmts, offset, loop);\n       tree type = unsigned_type_for (TREE_TYPE (start_addr));"}]}