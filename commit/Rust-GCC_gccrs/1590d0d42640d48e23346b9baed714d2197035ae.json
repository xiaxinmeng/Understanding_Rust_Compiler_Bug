{"sha": "1590d0d42640d48e23346b9baed714d2197035ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5MGQwZDQyNjQwZDQ4ZTIzMzQ2YjliYWVkNzE0ZDIxOTcwMzVhZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-28T15:45:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-28T15:45:11Z"}, "message": "cse.c (cse_reg_info_free_list, [...]): Remove.\n\n\t* cse.c (cse_reg_info_free_list, cse_reg_info_used_list,\n\tcse_reg_info_used_list_end): Remove.\n\t(cse_reg_info_list, cse_reg_info_list_free): New.\n\t(get_cse_reg_info): When allocating an instance of\n\tcse_reg_info, add it to the beginning of the cse_reg_info_list\n\tlist.  Remove code to maintain cse_reg_info_used_list.\n\t(new_basic_block): Reset the free list to the beginning of\n\tcse_reg_info_list.\n\nFrom-SVN: r94375", "tree": {"sha": "08e3587e57625e5360d746c62aa3941399a16c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08e3587e57625e5360d746c62aa3941399a16c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1590d0d42640d48e23346b9baed714d2197035ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1590d0d42640d48e23346b9baed714d2197035ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1590d0d42640d48e23346b9baed714d2197035ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1590d0d42640d48e23346b9baed714d2197035ae/comments", "author": null, "committer": null, "parents": [{"sha": "f6c2ac32c21b2d21034606cbf7549fecd9e878c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c2ac32c21b2d21034606cbf7549fecd9e878c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c2ac32c21b2d21034606cbf7549fecd9e878c6"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "8aac434028fe0a553d1f663882ebb20d130f398a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1590d0d42640d48e23346b9baed714d2197035ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1590d0d42640d48e23346b9baed714d2197035ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1590d0d42640d48e23346b9baed714d2197035ae", "patch": "@@ -1,3 +1,14 @@\n+2005-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cse.c (cse_reg_info_free_list, cse_reg_info_used_list,\n+\tcse_reg_info_used_list_end): Remove.\n+\t(cse_reg_info_list, cse_reg_info_list_free): New.\n+\t(get_cse_reg_info): When allocating an instance of\n+\tcse_reg_info, add it to the beginning of the cse_reg_info_list\n+\tlist.  Remove code to maintain cse_reg_info_used_list.\n+\t(new_basic_block): Reset the free list to the beginning of\n+\tcse_reg_info_list.\n+\n 2005-01-28  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/frv/frv.c (bdesc_2arg): Remove __MDPACKH."}, {"sha": "4bc201424da16523a43246ba779c4b47071991e0", "filename": "gcc/cse.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1590d0d42640d48e23346b9baed714d2197035ae/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1590d0d42640d48e23346b9baed714d2197035ae/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1590d0d42640d48e23346b9baed714d2197035ae", "patch": "@@ -329,12 +329,25 @@ struct cse_reg_info\n   unsigned int subreg_ticked;\n };\n \n-/* A free list of cse_reg_info entries.  */\n-static struct cse_reg_info *cse_reg_info_free_list;\n-\n-/* A used list of cse_reg_info entries.  */\n-static struct cse_reg_info *cse_reg_info_used_list;\n-static struct cse_reg_info *cse_reg_info_used_list_end;\n+/* We maintain a linked list of cse_reg_info instances, which is\n+   partitioned into two pieces.  The first part, pointed to by\n+   cse_reg_info_list, is a list of those entries that are in use.  The\n+   second part, pointed to by cse_reg_info_list_free, is a list of\n+   those entries that are not in use.\n+\n+   We combine these two parts into one linked list for efficiency.\n+   Specifically, when we take an element from the second part and want\n+   to move it to the first part, all we have to do is move the pointer\n+   cse_reg_info_list_free to the next element.  Also, if we wish to\n+   move all elements into the second part, we just have to move the\n+   pointer to the first element of the list.  */\n+\n+/* A linked list of cse_reg_info entries that have been allocated so\n+   far.  */\n+static struct cse_reg_info *cse_reg_info_list;\n+\n+/* A pointer to the first unused entry in the above linked list.  */\n+static struct cse_reg_info *cse_reg_info_list_free;\n \n /* A mapping from registers to cse_reg_info data structures.  */\n #define REGHASH_SHIFT\t7\n@@ -871,13 +884,17 @@ get_cse_reg_info (unsigned int regno)\n   if (p == NULL)\n     {\n       /* Get a new cse_reg_info structure.  */\n-      if (cse_reg_info_free_list)\n+      if (cse_reg_info_list_free)\n \t{\n-\t  p = cse_reg_info_free_list;\n-\t  cse_reg_info_free_list = p->next;\n+\t  p = cse_reg_info_list_free;\n+\t  cse_reg_info_list_free = p->next;\n \t}\n       else\n-\tp = xmalloc (sizeof (struct cse_reg_info));\n+\t{\n+\t  p = xmalloc (sizeof (struct cse_reg_info));\n+\t  p->next = cse_reg_info_list;\n+\t  cse_reg_info_list = p;\n+\t}\n \n       /* Insert into hash table.  */\n       p->hash_next = *hash_head;\n@@ -889,10 +906,6 @@ get_cse_reg_info (unsigned int regno)\n       p->subreg_ticked = -1;\n       p->reg_qty = -regno - 1;\n       p->regno = regno;\n-      p->next = cse_reg_info_used_list;\n-      cse_reg_info_used_list = p;\n-      if (!cse_reg_info_used_list_end)\n-\tcse_reg_info_used_list_end = p;\n     }\n \n   /* Cache this lookup; we tend to be looking up information about the\n@@ -917,12 +930,8 @@ new_basic_block (void)\n \n   memset (reg_hash, 0, sizeof reg_hash);\n \n-  if (cse_reg_info_used_list)\n-    {\n-      cse_reg_info_used_list_end->next = cse_reg_info_free_list;\n-      cse_reg_info_free_list = cse_reg_info_used_list;\n-      cse_reg_info_used_list = cse_reg_info_used_list_end = 0;\n-    }\n+  cse_reg_info_list_free = cse_reg_info_list;\n+\n   cached_cse_reg_info = 0;\n \n   CLEAR_HARD_REG_SET (hard_regs_in_table);"}]}