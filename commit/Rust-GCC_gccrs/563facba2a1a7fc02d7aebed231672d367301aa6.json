{"sha": "563facba2a1a7fc02d7aebed231672d367301aa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzZmFjYmEyYTFhN2ZjMDJkN2FlYmVkMjMxNjcyZDM2NzMwMWFhNg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-06-24T12:58:43Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-06-24T12:58:43Z"}, "message": "sparc.c (INIT_TARGET_OPTABS): If ARCH64, set the 32-bit ABI libfuncs to NULL.\n\n2002-06-24  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc.c (INIT_TARGET_OPTABS): If ARCH64, set the\n\t32-bit ABI libfuncs to NULL.\n\nFrom-SVN: r54952", "tree": {"sha": "b6733ff0f17d18b3c89ab3a4fd7a718247243f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6733ff0f17d18b3c89ab3a4fd7a718247243f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/563facba2a1a7fc02d7aebed231672d367301aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563facba2a1a7fc02d7aebed231672d367301aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563facba2a1a7fc02d7aebed231672d367301aa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563facba2a1a7fc02d7aebed231672d367301aa6/comments", "author": null, "committer": null, "parents": [{"sha": "b776892b916b79b4ae5db0b09a2cde2fd89baea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b776892b916b79b4ae5db0b09a2cde2fd89baea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b776892b916b79b4ae5db0b09a2cde2fd89baea7"}], "stats": {"total": 772, "additions": 305, "deletions": 467}, "files": [{"sha": "8f577798c9d8100ecceeb70ee95a84ce76db4b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563facba2a1a7fc02d7aebed231672d367301aa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563facba2a1a7fc02d7aebed231672d367301aa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=563facba2a1a7fc02d7aebed231672d367301aa6", "patch": "@@ -3,7 +3,8 @@\n \t* config/sparc/sparc.c (INIT_TARGET_OPTABS): If ARCH64, set the\n \t32-bit ABI libfuncs to NULL.\n \n-\t* config/sparc/sparc.md: Use define_insn_and_split.\n+\t* config/sparc/sparc.md: Use define_insn_and_split.  Use braced\n+\tstrings instead of quoted strings for code blocks.\n \n \t* expmed.c (expand_divmod): Do not set optab1/optab2 to the shift\n \toptabs if op1 is const0_rtx."}, {"sha": "6e802c8516efc76639093bfa40a44eb07cd9e946", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 303, "deletions": 466, "changes": 769, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563facba2a1a7fc02d7aebed231672d367301aa6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563facba2a1a7fc02d7aebed231672d367301aa6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=563facba2a1a7fc02d7aebed231672d367301aa6", "patch": "@@ -289,63 +289,58 @@\n \t(compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n \t\t    (match_operand:SI 1 \"arith_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   sparc_compare_op0 = operands[0];\n   sparc_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpdi\"\n   [(set (reg:CCX 100)\n \t(compare:CCX (match_operand:DI 0 \"register_operand\" \"\")\n \t\t     (match_operand:DI 1 \"arith_double_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n-  \"\n {\n   sparc_compare_op0 = operands[0];\n   sparc_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpsf\"\n   ;; The 96 here isn't ever used by anyone.\n   [(set (reg:CCFP 96)\n \t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"\")\n \t\t      (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n-  \"\n {\n   sparc_compare_op0 = operands[0];\n   sparc_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpdf\"\n   ;; The 96 here isn't ever used by anyone.\n   [(set (reg:CCFP 96)\n \t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"\")\n \t\t      (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n-  \"\n {\n   sparc_compare_op0 = operands[0];\n   sparc_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmptf\"\n   ;; The 96 here isn't ever used by anyone.\n   [(set (reg:CCFP 96)\n \t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"\")\n \t\t      (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n-  \"\n {\n   sparc_compare_op0 = operands[0];\n   sparc_compare_op1 = operands[1];\n   DONE;\n-}\")\n+})\n \n ;; Now the compare DEFINE_INSNs.\n \n@@ -370,25 +365,23 @@\n \t(compare:CCFPE (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_FPU\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmpes\\\\t%0, %1, %2\\\";\n-  return \\\"fcmpes\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmpes\\\\t%0, %1, %2\";\n+  return \"fcmpes\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"*cmpdf_fpe\"\n   [(set (match_operand:CCFPE 0 \"fcc_reg_operand\" \"=c\")\n \t(compare:CCFPE (match_operand:DF 1 \"register_operand\" \"e\")\n \t\t       (match_operand:DF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmped\\\\t%0, %1, %2\\\";\n-  return \\\"fcmped\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmped\\\\t%0, %1, %2\";\n+  return \"fcmped\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -397,38 +390,35 @@\n \t(compare:CCFPE (match_operand:TF 1 \"register_operand\" \"e\")\n \t\t       (match_operand:TF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmpeq\\\\t%0, %1, %2\\\";\n-  return \\\"fcmpeq\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmpeq\\\\t%0, %1, %2\";\n+  return \"fcmpeq\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"*cmpsf_fp\"\n   [(set (match_operand:CCFP 0 \"fcc_reg_operand\" \"=c\")\n \t(compare:CCFP (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_FPU\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmps\\\\t%0, %1, %2\\\";\n-  return \\\"fcmps\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmps\\\\t%0, %1, %2\";\n+  return \"fcmps\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")])\n \n (define_insn \"*cmpdf_fp\"\n   [(set (match_operand:CCFP 0 \"fcc_reg_operand\" \"=c\")\n \t(compare:CCFP (match_operand:DF 1 \"register_operand\" \"e\")\n \t\t      (match_operand:DF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmpd\\\\t%0, %1, %2\\\";\n-  return \\\"fcmpd\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmpd\\\\t%0, %1, %2\";\n+  return \"fcmpd\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -437,12 +427,11 @@\n \t(compare:CCFP (match_operand:TF 1 \"register_operand\" \"e\")\n \t\t      (match_operand:TF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"fcmpq\\\\t%0, %1, %2\\\";\n-  return \\\"fcmpq\\\\t%1, %2\\\";\n-}\"\n+    return \"fcmpq\\\\t%0, %1, %2\";\n+  return \"fcmpq\\\\t%1, %2\";\n+}\n   [(set_attr \"type\" \"fpcmp\")])\n \f\n ;; Next come the scc insns.  For seq, sne, sgeu, and sltu, we can do this\n@@ -463,7 +452,7 @@\n \t\t   (eq:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n   \"\"\n-  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n+  { operands[3] = gen_reg_rtx (SImode); })\n \n (define_expand \"seqdi_special\"\n   [(set (match_dup 3)\n@@ -472,7 +461,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n \t(eq:DI (match_dup 3) (const_int 0)))]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+  { operands[3] = gen_reg_rtx (DImode); })\n \n (define_expand \"snesi_special\"\n   [(set (match_dup 3)\n@@ -482,7 +471,7 @@\n \t\t   (ne:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n   \"\"\n-  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n+  { operands[3] = gen_reg_rtx (SImode); })\n \n (define_expand \"snedi_special\"\n   [(set (match_dup 3)\n@@ -491,7 +480,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ne:DI (match_dup 3) (const_int 0)))]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+  { operands[3] = gen_reg_rtx (DImode); })\n \n (define_expand \"seqdi_special_trunc\"\n   [(set (match_dup 3)\n@@ -500,7 +489,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(eq:SI (match_dup 3) (const_int 0)))]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+  { operands[3] = gen_reg_rtx (DImode); })\n \n (define_expand \"snedi_special_trunc\"\n   [(set (match_dup 3)\n@@ -509,7 +498,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ne:SI (match_dup 3) (const_int 0)))]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+  { operands[3] = gen_reg_rtx (DImode); })\n \n (define_expand \"seqsi_special_extend\"\n   [(set (match_dup 3)\n@@ -519,7 +508,7 @@\n \t\t   (eq:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n+  { operands[3] = gen_reg_rtx (SImode); })\n \n (define_expand \"snesi_special_extend\"\n   [(set (match_dup 3)\n@@ -529,15 +518,14 @@\n \t\t   (ne:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n   \"TARGET_ARCH64\"\n-  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n+  { operands[3] = gen_reg_rtx (SImode); })\n \n ;; ??? v9: Operand 0 needs a mode, so SImode was chosen.\n ;; However, the code handles both SImode and DImode.\n (define_expand \"seq\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(eq:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == SImode)\n     {\n@@ -582,15 +570,14 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n ;; ??? v9: Operand 0 needs a mode, so SImode was chosen.\n ;; However, the code handles both SImode and DImode.\n (define_expand \"sne\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ne:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == SImode)\n     {\n@@ -635,13 +622,12 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(gt:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -656,13 +642,12 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(lt:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -677,13 +662,12 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ge:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -698,13 +682,12 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"sle\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(le:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -719,13 +702,12 @@\n       /* fall through */\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"sgtu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(gtu:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (! TARGET_V9)\n     {\n@@ -754,41 +736,38 @@\n \tDONE;\n     }\n   FAIL;\n-}\")\n+})\n \n (define_expand \"sltu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ltu:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_V9)\n     {\n       if (gen_v9_scc (LTU, operands))\n \tDONE;\n     }\n   operands[1] = gen_compare_reg (LTU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"sgeu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(geu:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (TARGET_V9)\n     {\n       if (gen_v9_scc (GEU, operands))\n \tDONE;\n     }\n   operands[1] = gen_compare_reg (GEU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"sleu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(leu:SI (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"\n {\n   if (! TARGET_V9)\n     {\n@@ -817,7 +796,7 @@\n \tDONE;\n     }\n   FAIL;\n-}\")\n+})\n \n ;; Now the DEFINE_INSNs for the scc cases.\n \n@@ -1218,7 +1197,6 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1234,15 +1212,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (EQ, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bne\"\n   [(set (pc)\n \t(if_then_else (ne (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1258,15 +1235,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (NE, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bgt\"\n   [(set (pc)\n \t(if_then_else (gt (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1282,25 +1258,24 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bgtu\"\n   [(set (pc)\n \t(if_then_else (gtu (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n-{ operands[1] = gen_compare_reg (GTU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+{\n+  operands[1] = gen_compare_reg (GTU, sparc_compare_op0, sparc_compare_op1);\n+})\n \n (define_expand \"blt\"\n   [(set (pc)\n \t(if_then_else (lt (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1316,25 +1291,24 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bltu\"\n   [(set (pc)\n \t(if_then_else (ltu (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n-{ operands[1] = gen_compare_reg (LTU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+{\n+  operands[1] = gen_compare_reg (LTU, sparc_compare_op0, sparc_compare_op1);\n+})\n \n (define_expand \"bge\"\n   [(set (pc)\n \t(if_then_else (ge (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1350,25 +1324,24 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bgeu\"\n   [(set (pc)\n \t(if_then_else (geu (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n-{ operands[1] = gen_compare_reg (GEU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+{\n+  operands[1] = gen_compare_reg (GEU, sparc_compare_op0, sparc_compare_op1);\n+})\n \n (define_expand \"ble\"\n   [(set (pc)\n \t(if_then_else (le (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n@@ -1384,25 +1357,24 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bleu\"\n   [(set (pc)\n \t(if_then_else (leu (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n-{ operands[1] = gen_compare_reg (LEU, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+{\n+  operands[1] = gen_compare_reg (LEU, sparc_compare_op0, sparc_compare_op1);\n+})\n \n (define_expand \"bunordered\"\n   [(set (pc)\n \t(if_then_else (unordered (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1413,15 +1385,14 @@\n     }\n   operands[1] = gen_compare_reg (UNORDERED, sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bordered\"\n   [(set (pc)\n \t(if_then_else (ordered (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1431,15 +1402,14 @@\n     }\n   operands[1] = gen_compare_reg (ORDERED, sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bungt\"\n   [(set (pc)\n \t(if_then_else (ungt (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1448,15 +1418,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (UNGT, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bunlt\"\n   [(set (pc)\n \t(if_then_else (unlt (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1465,15 +1434,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (UNLT, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"buneq\"\n   [(set (pc)\n \t(if_then_else (uneq (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1482,15 +1450,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (UNEQ, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bunge\"\n   [(set (pc)\n \t(if_then_else (unge (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1499,15 +1466,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (UNGE, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bunle\"\n   [(set (pc)\n \t(if_then_else (unle (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1516,15 +1482,14 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (UNLE, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \n (define_expand \"bltgt\"\n   [(set (pc)\n \t(if_then_else (ltgt (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n     {\n@@ -1533,7 +1498,7 @@\n       DONE;\n     }\n   operands[1] = gen_compare_reg (LTGT, sparc_compare_op0, sparc_compare_op1);\n-}\")\n+})\n \f\n ;; Now match both normal and inverted jump.\n \n@@ -1545,12 +1510,11 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[0], operands[1], 1, 0,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"icc\")])\n \n@@ -1562,12 +1526,11 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[0], operands[1], 1, 1,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"icc\")])\n \n@@ -1580,12 +1543,11 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[1], operands[2], 2, 0,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"fcc\")])\n \n@@ -1598,12 +1560,11 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[1], operands[2], 2, 1,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"fcc\")])\n \n@@ -1616,12 +1577,11 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[1], operands[2], 2, 0,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"fcc\")])\n \n@@ -1634,12 +1594,11 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   return output_cbranch (operands[1], operands[2], 2, 1,\n \t\t\t final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"fcc\")])\n \n@@ -1657,12 +1616,11 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_ARCH64\"\n-  \"*\n {\n   return output_v9branch (operands[0], operands[2], 1, 2, 0,\n \t\t\t  final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t  ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"reg\")])\n \n@@ -1675,12 +1633,11 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"TARGET_ARCH64\"\n-  \"*\n {\n   return output_v9branch (operands[0], operands[2], 1, 2, 1,\n \t\t\t  final_sequence && INSN_ANNULLED_BRANCH_P (insn),\n \t\t\t  ! final_sequence, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"branch_type\" \"reg\")])\n \f\n@@ -1702,7 +1659,6 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Working with CONST_INTs is easier, so convert\n      a double if needed.  */\n@@ -1747,7 +1703,7 @@\n \n  movqi_is_ok:\n   ;\n-}\")\n+})\n \n (define_insn \"*movqi_insn\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m\")\n@@ -1765,7 +1721,6 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Working with CONST_INTs is easier, so convert\n      a double if needed.  */\n@@ -1815,7 +1770,7 @@\n     }\n  movhi_is_ok:\n   ;\n-}\")\n+})\n \n (define_insn \"*movhi_const64_special\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1848,7 +1803,6 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Working with CONST_INTs is easier, so convert\n      a double if needed.  */\n@@ -1914,7 +1868,7 @@\n     }\n  movsi_is_ok:\n   ;\n-}\")\n+})\n \n ;; This is needed to show CSE exactly which bits are set\n ;; in a 64-bit register by sethi instructions.\n@@ -1978,10 +1932,9 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_dup 5) (match_dup 4)))]\n   \"flag_pic\"\n-  \"\n {\n   current_function_uses_pic_offset_table = 1;\n-  operands[2] = gen_rtx_SYMBOL_REF (Pmode, \\\"_GLOBAL_OFFSET_TABLE_\\\");\n+  operands[2] = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n   if (no_new_pseudos)\n     {\n       operands[3] = operands[0];\n@@ -1993,7 +1946,7 @@\n       operands[4] = gen_reg_rtx (SImode);\n     }\n   operands[5] = pic_offset_table_rtx;\n-}\")\n+})\n \n (define_insn \"*movsi_high_pic_label_ref\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2015,7 +1968,6 @@\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"\")\n \t(match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Where possible, convert CONST_DOUBLE into a CONST_INT.  */\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -2094,7 +2046,7 @@\n \n  movdi_is_ok:\n   ;\n-}\")\n+})\n \n ;; Be careful, fmovd does not exist when !arch64.\n ;; We match MEM moves directly when we have correct even\n@@ -2218,10 +2170,9 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (minus:DI (match_dup 5) (match_dup 4)))]\n   \"TARGET_ARCH64 && flag_pic\"\n-  \"\n {\n   current_function_uses_pic_offset_table = 1;\n-  operands[2] = gen_rtx_SYMBOL_REF (Pmode, \\\"_GLOBAL_OFFSET_TABLE_\\\");\n+  operands[2] = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n   if (no_new_pseudos)\n     {\n       operands[3] = operands[0];\n@@ -2233,7 +2184,7 @@\n       operands[4] = gen_reg_rtx (DImode);\n     }\n   operands[5] = pic_offset_table_rtx;\n-}\")\n+})\n \n (define_insn \"*movdi_high_pic_label_ref\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2385,11 +2336,10 @@\n   \"(TARGET_CM_MEDANY\n     || TARGET_CM_EMBMEDANY)\n    && ! flag_pic\"\n-  \"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n-}\")\n+})\n \n (define_expand \"reload_outdi\"\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2398,19 +2348,17 @@\n   \"(TARGET_CM_MEDANY\n     || TARGET_CM_EMBMEDANY)\n    && ! flag_pic\"\n-  \"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n-}\")\n+})\n \n ;; Split up putting CONSTs and REGs into DI regs when !arch64\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"const_int_operand\" \"\"))]\n   \"! TARGET_ARCH64 && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n #if HOST_BITS_PER_WIDE_INT == 32\n   emit_insn (gen_movsi (gen_highpart (SImode, operands[0]),\n@@ -2435,14 +2383,13 @@\n     emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]), GEN_INT (low)));\n #endif\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"const_double_operand\" \"\"))]\n   \"! TARGET_ARCH64 && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   emit_insn (gen_movsi (gen_highpart (SImode, operands[0]),\n \t\t\tGEN_INT (CONST_DOUBLE_HIGH (operands[1]))));\n@@ -2462,14 +2409,13 @@\n \t\t\t    GEN_INT (CONST_DOUBLE_LOW (operands[1]))));\n     }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"register_operand\" \"\"))]\n   \"! TARGET_ARCH64 && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx set_src = operands[1];\n@@ -2494,7 +2440,7 @@\n       emit_insn (gen_movsi (dest2, src2));\n     }\n   DONE;\n-}\")\n+})\n \n ;; Now handle the cases of memory moves from/to non-even\n ;; DI mode register pairs.\n@@ -2505,7 +2451,6 @@\n     && reload_completed\n     && sparc_splitdi_legitimate (operands[0], operands[1]))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx word0 = adjust_address (operands[1], SImode, 0);\n   rtx word1 = adjust_address (operands[1], SImode, 4);\n@@ -2523,7 +2468,7 @@\n       emit_insn (gen_movsi (low_part, word1));\n     }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -2532,14 +2477,13 @@\n     && reload_completed\n     && sparc_splitdi_legitimate (operands[1], operands[0]))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   emit_insn (gen_movsi (adjust_address (operands[0], SImode, 0),\n \t\t\tgen_highpart (SImode, operands[1])));\n   emit_insn (gen_movsi (adjust_address (operands[0], SImode, 4),\n \t\t\tgen_lowpart (SImode, operands[1])));\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -2550,12 +2494,11 @@\n \t   && ! mem_min_alignment (operands[0], 8)))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   emit_insn (gen_movsi (adjust_address (operands[0], SImode, 0), const0_rtx));\n   emit_insn (gen_movsi (adjust_address (operands[0], SImode, 4), const0_rtx));\n   DONE;\n-}\")\n+})\n \f\n ;; Floating point move insns\n \n@@ -2566,7 +2509,6 @@\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n        || fp_zero_operand (operands[1], SFmode))\"\n-  \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && (which_alternative == 2\n@@ -2584,25 +2526,25 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"fmovs\\\\t%1, %0\\\";\n+      return \"fmovs\\\\t%1, %0\";\n     case 1:\n-      return \\\"clr\\\\t%0\\\";\n+      return \"clr\\\\t%0\";\n     case 2:\n-      return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n+      return \"sethi\\\\t%%hi(%a1), %0\";\n     case 3:\n-      return \\\"mov\\\\t%1, %0\\\";\n+      return \"mov\\\\t%1, %0\";\n     case 4:\n-      return \\\"#\\\";\n+      return \"#\";\n     case 5:\n     case 6:\n-      return \\\"ld\\\\t%1, %0\\\";\n+      return \"ld\\\\t%1, %0\";\n     case 7:\n     case 8:\n-      return \\\"st\\\\t%r1, %0\\\";\n+      return \"st\\\\t%r1, %0\";\n     default:\n       abort();\n     }\n-}\"\n+}\n   [(set_attr \"type\" \"fpmove,*,*,*,*,load,fpload,fpstore,store\")])\n \n (define_insn \"*movsf_insn_vis\"\n@@ -2612,7 +2554,6 @@\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n        || fp_zero_operand (operands[1], SFmode))\"\n-  \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && (which_alternative == 3\n@@ -2630,27 +2571,27 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"fmovs\\\\t%1, %0\\\";\n+      return \"fmovs\\\\t%1, %0\";\n     case 1:\n-      return \\\"fzeros\\\\t%0\\\";\n+      return \"fzeros\\\\t%0\";\n     case 2:\n-      return \\\"clr\\\\t%0\\\";\n+      return \"clr\\\\t%0\";\n     case 3:\n-      return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n+      return \"sethi\\\\t%%hi(%a1), %0\";\n     case 4:\n-      return \\\"mov\\\\t%1, %0\\\";\n+      return \"mov\\\\t%1, %0\";\n     case 5:\n-      return \\\"#\\\";\n+      return \"#\";\n     case 6:\n     case 7:\n-      return \\\"ld\\\\t%1, %0\\\";\n+      return \"ld\\\\t%1, %0\";\n     case 8:\n     case 9:\n-      return \\\"st\\\\t%r1, %0\\\";\n+      return \"st\\\\t%r1, %0\";\n     default:\n       abort();\n     }\n-}\"\n+}\n   [(set_attr \"type\" \"fpmove,fpmove,*,*,*,*,load,fpload,fpstore,store\")])\n \n ;; Exactly the same as above, except that all `f' cases are deleted.\n@@ -2664,7 +2605,6 @@\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n        || fp_zero_operand (operands[1], SFmode))\"\n-  \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && (which_alternative == 1\n@@ -2682,53 +2622,51 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"clr\\\\t%0\\\";\n+      return \"clr\\\\t%0\";\n     case 1:\n-      return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n+      return \"sethi\\\\t%%hi(%a1), %0\";\n     case 2:\n-      return \\\"mov\\\\t%1, %0\\\";\n+      return \"mov\\\\t%1, %0\";\n     case 3:\n-      return \\\"#\\\";\n+      return \"#\";\n     case 4:\n-      return \\\"ld\\\\t%1, %0\\\";\n+      return \"ld\\\\t%1, %0\";\n     case 5:\n-      return \\\"st\\\\t%r1, %0\\\";\n+      return \"st\\\\t%r1, %0\";\n     default:\n       abort();\n     }\n-}\"\n+}\n   [(set_attr \"type\" \"*,*,*,*,load,store\")])\n \n (define_insn \"*movsf_lo_sum\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n         (lo_sum:SF (match_operand:SF 1 \"register_operand\" \"r\")\n                    (match_operand:SF 2 \"const_double_operand\" \"S\")))]\n   \"fp_high_losum_p (operands[2])\"\n-  \"*\n {\n   REAL_VALUE_TYPE r;\n   long i;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n   REAL_VALUE_TO_TARGET_SINGLE (r, i);\n   operands[2] = GEN_INT (i);\n-  return \\\"or\\\\t%1, %%lo(%a2), %0\\\";\n-}\")\n+  return \"or\\\\t%1, %%lo(%a2), %0\";\n+})\n \n (define_insn \"*movsf_high\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n         (high:SF (match_operand:SF 1 \"const_double_operand\" \"S\")))]\n   \"fp_high_losum_p (operands[1])\"\n-  \"*\n {\n   REAL_VALUE_TYPE r;\n   long i;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n   REAL_VALUE_TO_TARGET_SINGLE (r, i);\n   operands[1] = GEN_INT (i);\n-  return \\\"sethi\\\\t%%hi(%1), %0\\\";\n-}\")\n+  return \"sethi\\\\t%%hi(%1), %0\";\n+})\n \n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n@@ -2743,7 +2681,6 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Force SFmode constants into memory.  */\n   if (GET_CODE (operands[0]) == REG\n@@ -2800,13 +2737,12 @@\n \n  movsf_is_ok:\n   ;\n-}\")\n+})\n \n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Force DFmode constants into memory.  */\n   if (GET_CODE (operands[0]) == REG\n@@ -2864,7 +2800,7 @@\n \n  movdf_is_ok:\n   ;\n-}\")\n+})\n \n ;; Be careful, fmovd does not exist when !v9.\n (define_insn \"*movdf_insn_sp32\"\n@@ -3047,7 +2983,6 @@\n    && ! fp_zero_operand(operands[1], DFmode)\n    && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   REAL_VALUE_TYPE r;\n   long l[2];\n@@ -3090,7 +3025,7 @@\n         }\n     }\n   DONE;\n-}\")\n+})\n \n ;; Ok, now the splits to handle all the multi insn and\n ;; mis-aligned memory address cases.\n@@ -3109,7 +3044,6 @@\n                 && REGNO (SUBREG_REG (operands[0])) < 32))))\n    && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx set_src = operands[1];\n@@ -3134,7 +3068,7 @@\n       emit_insn (gen_movsf (dest2, src2));\n     }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -3145,7 +3079,6 @@\n        || ! mem_min_alignment (operands[1], 8))\n    && offsettable_memref_p (operands[1])\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx word0 = adjust_address (operands[1], SFmode, 0);\n   rtx word1 = adjust_address (operands[1], SFmode, 4);\n@@ -3165,7 +3098,7 @@\n \t\t\t    word1));\n     }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n@@ -3176,7 +3109,6 @@\n        || ! mem_min_alignment (operands[0], 8))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx word0 = adjust_address (operands[0], SFmode, 0);\n   rtx word1 = adjust_address (operands[0], SFmode, 4);\n@@ -3186,7 +3118,7 @@\n   emit_insn (gen_movsf (word1,\n \t\t\tgen_lowpart (SFmode, operands[1])));\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n@@ -3197,7 +3129,6 @@\n \t   && ! mem_min_alignment (operands[0], 8)))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx dest1, dest2;\n \n@@ -3207,7 +3138,7 @@\n   emit_insn (gen_movsf (dest1, CONST0_RTX (SFmode)));\n   emit_insn (gen_movsf (dest2, CONST0_RTX (SFmode)));\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -3220,7 +3151,6 @@\n \t   && GET_CODE (SUBREG_REG (operands[0])) == REG\n \t   && REGNO (SUBREG_REG (operands[0])) < 32))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx dest1, dest2;\n@@ -3230,13 +3160,12 @@\n   emit_insn (gen_movsf (dest1, CONST0_RTX (SFmode)));\n   emit_insn (gen_movsf (dest2, CONST0_RTX (SFmode)));\n   DONE;\n-}\")\n+})\n \n (define_expand \"movtf\"\n   [(set (match_operand:TF 0 \"general_operand\" \"\")\n \t(match_operand:TF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   /* Force TFmode constants into memory.  */\n   if (GET_CODE (operands[0]) == REG\n@@ -3289,7 +3218,7 @@\n \n  movtf_is_ok:\n   ;\n-}\")\n+})\n \n ;; Be careful, fmovq and {st,ld}{x,q} do not exist when !arch64 so\n ;; we must split them all.  :-(\n@@ -3422,7 +3351,6 @@\n            && ! TARGET_HARD_QUAD)\n        || ! fp_register_operand (operands[0], TFmode))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx set_src = operands[1];\n@@ -3447,14 +3375,13 @@\n       emit_insn (gen_movdf (dest2, src2));\n     }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n   \"reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx dest1, dest2;\n@@ -3476,7 +3403,7 @@\n   emit_insn (gen_movdf (dest1, CONST0_RTX (DFmode)));\n   emit_insn (gen_movdf (dest2, CONST0_RTX (DFmode)));\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n@@ -3487,7 +3414,6 @@\n \t|| ! TARGET_HARD_QUAD\n \t|| ! fp_register_operand (operands[0], TFmode)))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx word0 = adjust_address (operands[1], DFmode, 0);\n   rtx word1 = adjust_address (operands[1], DFmode, 8);\n@@ -3512,7 +3438,7 @@\n       emit_insn (gen_movdf (dest2, word1));\n    }\n   DONE;\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:TF 0 \"memory_operand\" \"\")\n@@ -3523,7 +3449,6 @@\n \t|| ! TARGET_HARD_QUAD\n \t|| ! fp_register_operand (operands[1], TFmode)))\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_src = operands[1];\n \n@@ -3532,7 +3457,7 @@\n   emit_insn (gen_movdf (adjust_address (operands[0], DFmode, 8),\n \t\t\tgen_df_reg (set_src, 1)));\n   DONE;\n-}\")\n+})\n \f\n ;; Sparc V9 conditional move instructions.\n \n@@ -3548,7 +3473,6 @@\n \t\t\t (match_operand:QI 2 \"arith10_operand\" \"\")\n \t\t\t (match_operand:QI 3 \"arith10_operand\" \"\")))]\n   \"TARGET_V9\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3570,15 +3494,14 @@\n \t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movhicc\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:HI 2 \"arith10_operand\" \"\")\n \t\t\t (match_operand:HI 3 \"arith10_operand\" \"\")))]\n   \"TARGET_V9\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3600,15 +3523,14 @@\n \t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"arith10_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"arith10_operand\" \"\")))]\n   \"TARGET_V9\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n   enum machine_mode op0_mode = GET_MODE (sparc_compare_op0);\n@@ -3627,15 +3549,14 @@\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg),\n \t\t\t\t    cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movdicc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:DI 2 \"arith10_double_operand\" \"\")\n \t\t\t (match_operand:DI 3 \"arith10_double_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3654,15 +3575,14 @@\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg),\n \t\t\t\t    cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3684,15 +3604,14 @@\n \t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movdfcc\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3714,15 +3633,14 @@\n \t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n (define_expand \"movtfcc\"\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n \t(if_then_else:TF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:TF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:TF 3 \"register_operand\" \"\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n-  \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n \n@@ -3744,7 +3662,7 @@\n \t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n-}\")\n+})\n \n ;; Conditional move define_insns.\n \n@@ -3865,7 +3783,6 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx set_srca = operands[3];\n@@ -3895,7 +3812,7 @@\n       emit_insn (gen_movdf_cc_sp64 (dest2, operands[1], operands[2], srca2, srcb2));\n     }\n   DONE;\n-}\"\n+}\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*movqi_cc_reg_sp64\"\n@@ -4015,7 +3932,6 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx set_dest = operands[0];\n   rtx set_srca = operands[3];\n@@ -4045,7 +3961,7 @@\n       emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2], srca2, srcb2));\n     }\n   DONE;\n-}\"\n+}\n   [(set_attr \"length\" \"2\")])\n \n \f\n@@ -4059,7 +3975,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_16 = GEN_INT (16);\n@@ -4077,7 +3992,7 @@\n \t\t\t  shift_16));\n   emit_insn (gen_lshrsi3 (operand0, temp, shift_16));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*zero_extendhisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -4139,7 +4054,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n   rtx shift_48 = GEN_INT (48);\n@@ -4157,7 +4071,7 @@\n \t\t\t  shift_48));\n   emit_insn (gen_lshrdi3 (operand0, temp, shift_48));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*zero_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4193,7 +4107,6 @@\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n-  \"\n {\n   rtx dest1, dest2;\n \n@@ -4215,7 +4128,7 @@\n       operands[4] = dest2;\n       operands[5] = operands[1];\n     }\n-}\"\n+}\n   [(set_attr \"length\" \"2\")])\n \n ;; Simplify comparisons of extended values.\n@@ -4342,7 +4255,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_16 = GEN_INT (16);\n@@ -4360,7 +4272,7 @@\n \t\t\t  shift_16));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_16));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*sign_extendhisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -4374,7 +4286,6 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_24 = GEN_INT (24);\n@@ -4401,7 +4312,7 @@\n     operand0 = gen_rtx_SUBREG (SImode, operand0, op0_subbyte);\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*sign_extendqihi2_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -4415,7 +4326,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   rtx shift_24 = GEN_INT (24);\n@@ -4433,7 +4343,7 @@\n \t\t\t  shift_24));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*sign_extendqisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -4447,7 +4357,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n   rtx shift_56 = GEN_INT (56);\n@@ -4465,7 +4374,7 @@\n \t\t\t  shift_56));\n   emit_insn (gen_ashrdi3 (operand0, temp, shift_56));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*sign_extendqidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4479,7 +4388,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"TARGET_ARCH64\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n   rtx shift_48 = GEN_INT (48);\n@@ -4497,7 +4405,7 @@\n \t\t\t  shift_48));\n   emit_insn (gen_ashrdi3 (operand0, temp, shift_48));\n   DONE;\n-}\")\n+})\n \n (define_insn \"*sign_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4537,7 +4445,6 @@\n     && INTVAL (operands[2]) > 19)\n    || (GET_CODE (operands[2]) == CONST_DOUBLE\n        && CONST_DOUBLE_LOW (operands[2]) > 19)\"\n-  \"*\n {\n   int len = (GET_CODE (operands[1]) == CONST_INT\n              ? INTVAL (operands[1])\n@@ -4549,8 +4456,8 @@\n   HOST_WIDE_INT mask = ((1 << len) - 1) << pos;\n \n   operands[1] = GEN_INT (mask);\n-  return \\\"andcc\\\\t%0, %1, %%g0\\\";\n-}\"\n+  return \"andcc\\\\t%0, %1, %%g0\";\n+}\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_zero_extract_sp64\"\n@@ -4565,7 +4472,6 @@\n         && INTVAL (operands[2]) > 51)\n        || (GET_CODE (operands[2]) == CONST_DOUBLE\n            && CONST_DOUBLE_LOW (operands[2]) > 51))\"\n-  \"*\n {\n   int len = (GET_CODE (operands[1]) == CONST_INT\n              ? INTVAL (operands[1])\n@@ -4577,8 +4483,8 @@\n   HOST_WIDE_INT mask = (((unsigned HOST_WIDE_INT) 1 << len) - 1) << pos;\n \n   operands[1] = GEN_INT (mask);\n-  return \\\"andcc\\\\t%0, %1, %%g0\\\";\n-}\"\n+  return \"andcc\\\\t%0, %1, %%g0\";\n+}\n   [(set_attr \"type\" \"compare\")])\n \f\n ;; Conversions between float, double and long double.\n@@ -4829,7 +4735,6 @@\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n   \"\"\n-  \"\n {\n   HOST_WIDE_INT i;\n \n@@ -4858,7 +4763,7 @@\n       emit_insn (gen_movdi (operands[0], GEN_INT (i + 4096)));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn_and_split \"adddi3_insn_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4878,7 +4783,6 @@\n \t(plus:SI (plus:SI (match_dup 7)\n \t\t\t  (match_dup 8))\n \t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"\n {\n   operands[3] = gen_lowpart (SImode, operands[0]);\n   operands[4] = gen_lowpart (SImode, operands[1]);\n@@ -4896,7 +4800,7 @@\n   else\n #endif\n     operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n-}\"\n+}\n   [(set_attr \"length\" \"2\")])\n \n (define_split\n@@ -4915,7 +4819,6 @@\n \t(minus:SI (minus:SI (match_dup 7)\n \t\t\t    (match_dup 8))\n \t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"\n {\n   operands[3] = gen_lowpart (SImode, operands[0]);\n   operands[4] = gen_lowpart (SImode, operands[1]);\n@@ -4933,7 +4836,7 @@\n   else\n #endif\n     operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n-}\")\n+})\n \n ;; LTU here means \"carry set\"\n (define_insn \"addx\"\n@@ -5036,7 +4939,6 @@\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r,d\")\n \t\t (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n   \"\"\n-  \"\n {\n   if (arith_4096_operand(operands[2], SImode))\n     {\n@@ -5049,7 +4951,7 @@\n \t\t\t\t\t       GEN_INT(-4096))));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"*addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n@@ -5106,7 +5008,6 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"rHI\")))]\n   \"\"\n-  \"\n {\n   if (! TARGET_ARCH64)\n     {\n@@ -5125,7 +5026,7 @@\n \t\t\t\t\t    GEN_INT(-4096))));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn_and_split \"*subdi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5138,7 +5039,6 @@\n    && (GET_CODE (operands[2]) == CONST_INT\n        || GET_CODE (operands[2]) == CONST_DOUBLE)\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   rtx highp, lowp;\n \n@@ -5164,7 +5064,7 @@\n                            highp));\n     }\n   DONE;\n-}\"\n+}\n   [(set_attr \"length\" \"2\")])\n \n (define_split\n@@ -5175,7 +5075,6 @@\n   \"! TARGET_ARCH64\n    && reload_completed\"\n   [(clobber (const_int 0))]\n-  \"\n {\n   emit_insn (gen_cmp_minus_cc_set (gen_lowpart (SImode, operands[0]),\n                                    gen_lowpart (SImode, operands[1]),\n@@ -5184,7 +5083,7 @@\n                        gen_highpart (SImode, operands[1]),\n                        gen_highpart (SImode, operands[2])));\n   DONE;\n-}\")\n+})\n \n (define_insn_and_split \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5219,7 +5118,6 @@\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,d\")\n \t\t  (match_operand:SI 2 \"arith_add_operand\" \"rI,d\")))]\n   \"\"\n-  \"\n {\n   if (arith_4096_operand(operands[2], SImode))\n     {\n@@ -5228,7 +5126,7 @@\n \t\t\t\t\t    GEN_INT(-4096))));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"*subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n@@ -5298,14 +5196,13 @@\n \t(mult:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n-  \"\n {\n   if (TARGET_V8PLUS)\n     {\n       emit_insn (gen_muldi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"*muldi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5324,33 +5221,32 @@\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n   \"TARGET_V8PLUS\"\n-  \"*\n {\n   if (sparc_check_64 (operands[1], insn) <= 0)\n-    output_asm_insn (\\\"srl\\\\t%L1, 0, %L1\\\", operands);\n+    output_asm_insn (\"srl\\\\t%L1, 0, %L1\", operands);\n   if (which_alternative == 1)\n-    output_asm_insn (\\\"sllx\\\\t%H1, 32, %H1\\\", operands);\n+    output_asm_insn (\"sllx\\\\t%H1, 32, %H1\", operands);\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (which_alternative == 1)\n-\treturn \\\"or\\\\t%L1, %H1, %H1\\\\n\\\\tmulx\\\\t%H1, %2, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+\treturn \"or\\\\t%L1, %H1, %H1\\\\n\\\\tmulx\\\\t%H1, %2, %L0\\;srlx\\\\t%L0, 32, %H0\";\n       else\n-\treturn \\\"sllx\\\\t%H1, 32, %3\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tmulx\\\\t%3, %2, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\\\";\n+\treturn \"sllx\\\\t%H1, 32, %3\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tmulx\\\\t%3, %2, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\";\n     }\n   else if (rtx_equal_p (operands[1], operands[2]))\n     {\n       if (which_alternative == 1)\n-\treturn \\\"or\\\\t%L1, %H1, %H1\\\\n\\\\tmulx\\\\t%H1, %H1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+\treturn \"or\\\\t%L1, %H1, %H1\\\\n\\\\tmulx\\\\t%H1, %H1, %L0\\;srlx\\\\t%L0, 32, %H0\";\n       else\n-\treturn \\\"sllx\\\\t%H1, 32, %3\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tmulx\\\\t%3, %3, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\\\";\n+\treturn \"sllx\\\\t%H1, 32, %3\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tmulx\\\\t%3, %3, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\";\n     }\n   if (sparc_check_64 (operands[2], insn) <= 0)\n-    output_asm_insn (\\\"srl\\\\t%L2, 0, %L2\\\", operands);\n+    output_asm_insn (\"srl\\\\t%L2, 0, %L2\", operands);\n   if (which_alternative == 1)\n-    return \\\"or\\\\t%L1, %H1, %H1\\\\n\\\\tsllx\\\\t%H2, 32, %L1\\\\n\\\\tor\\\\t%L2, %L1, %L1\\\\n\\\\tmulx\\\\t%H1, %L1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+    return \"or\\\\t%L1, %H1, %H1\\\\n\\\\tsllx\\\\t%H2, 32, %L1\\\\n\\\\tor\\\\t%L2, %L1, %L1\\\\n\\\\tmulx\\\\t%H1, %L1, %L0\\;srlx\\\\t%L0, 32, %H0\";\n   else\n-    return \\\"sllx\\\\t%H1, 32, %3\\\\n\\\\tsllx\\\\t%H2, 32, %4\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tor\\\\t%L2, %4, %4\\\\n\\\\tmulx\\\\t%3, %4, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\\\";\n-}\"\n+    return \"sllx\\\\t%H1, 32, %3\\\\n\\\\tsllx\\\\t%H2, 32, %4\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tor\\\\t%L2, %4, %4\\\\n\\\\tmulx\\\\t%3, %4, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"9,8\")])\n \n@@ -5370,7 +5266,6 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\"))))]\n   \"TARGET_HARD_MUL\"\n-  \"\n {\n   if (CONSTANT_P (operands[2]))\n     {\n@@ -5387,7 +5282,7 @@\n       emit_insn (gen_mulsidi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n ;; V9 puts the 64 bit product in a 64 bit register.  Only out or global\n ;; registers can hold 64 bit values in the V8plus environment.\n@@ -5423,10 +5318,11 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HARD_MUL32\"\n-  \"*\n {\n-  return TARGET_SPARCLET ? \\\"smuld\\\\t%1, %2, %L0\\\" : \\\"smul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\\\";\n-}\"\n+  return TARGET_SPARCLET\n+         ? \"smuld\\\\t%1, %2, %L0\"\n+         : \"smul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\";\n+}\n   [(set (attr \"type\")\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_string \"imul\") (const_string \"multi\")))\n@@ -5450,10 +5346,11 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n   \"TARGET_HARD_MUL32\"\n-  \"*\n {\n-  return TARGET_SPARCLET ? \\\"smuld\\\\t%1, %2, %L0\\\" : \\\"smul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\\\";\n-}\"\n+  return TARGET_SPARCLET\n+         ? \"smuld\\\\t%1, %2, %L0\"\n+         : \"smul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\";\n+}\n   [(set (attr \"type\")\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_string \"imul\") (const_string \"multi\")))\n@@ -5476,7 +5373,6 @@\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n   \"TARGET_HARD_MUL && TARGET_ARCH32\"\n-  \"\n {\n   if (CONSTANT_P (operands[2]))\n     {\n@@ -5497,7 +5393,7 @@\n \t\t\t\t\t      operands[2], GEN_INT (32)));\n       DONE;\n     }\n-}\")\n+})\n \n ;; XXX\n (define_insn \"smulsi3_highpart_v8plus\"\n@@ -5576,7 +5472,6 @@\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\"))))]\n   \"TARGET_HARD_MUL\"\n-  \"\n {\n   if (CONSTANT_P (operands[2]))\n     {\n@@ -5593,7 +5488,7 @@\n       emit_insn (gen_umulsidi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n ;; XXX\n (define_insn \"umulsidi3_v8plus\"\n@@ -5614,10 +5509,11 @@\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_HARD_MUL32\"\n-  \"*\n {\n-  return TARGET_SPARCLET ? \\\"umuld\\\\t%1, %2, %L0\\\" : \\\"umul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\\\";\n-}\"\n+  return TARGET_SPARCLET\n+         ? \"umuld\\\\t%1, %2, %L0\"\n+         : \"umul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\";\n+}\n   [(set (attr \"type\")\n         (if_then_else (eq_attr \"isa\" \"sparclet\")\n                       (const_string \"imul\") (const_string \"multi\")))\n@@ -5641,10 +5537,11 @@\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"uns_small_int\" \"\")))]\n   \"TARGET_HARD_MUL32\"\n-  \"*\n {\n-  return TARGET_SPARCLET ? \\\"umuld\\\\t%1, %2, %L0\\\" : \\\"umul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\\\";\n-}\"\n+  return TARGET_SPARCLET\n+         ? \"umuld\\\\t%1, %2, %L0\"\n+         : \"umul\\\\t%1, %2, %L0\\\\n\\\\trd\\\\t%%y, %H0\";\n+}\n   [(set (attr \"type\")\n \t(if_then_else (eq_attr \"isa\" \"sparclet\")\n \t\t      (const_string \"imul\") (const_string \"multi\")))\n@@ -5680,7 +5577,6 @@\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n   \"TARGET_HARD_MUL && TARGET_ARCH32\"\n-  \"\n {\n   if (CONSTANT_P (operands[2]))\n     {\n@@ -5701,7 +5597,7 @@\n \t\t\t\t\t      operands[2], GEN_INT (32)));\n       DONE;\n     }\n-}\")\n+})\n \n ;; XXX\n (define_insn \"umulsi3_highpart_v8plus\"\n@@ -5766,7 +5662,6 @@\n \t\t\t   (match_operand:SI 2 \"input_operand\" \"rI,m\")))\n \t      (clobber (match_scratch:SI 3 \"=&r,&r\"))])]\n   \"TARGET_V8 || TARGET_DEPRECATED_V8_INSNS\"\n-  \"\n {\n   if (TARGET_ARCH64)\n     {\n@@ -5776,7 +5671,7 @@\n \t\t\t\t  operands[3]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"divsi3_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -5785,19 +5680,18 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"(TARGET_V8 || TARGET_DEPRECATED_V8_INSNS)\n    && TARGET_ARCH32\"\n-  \"*\n {\n   if (which_alternative == 0)\n     if (TARGET_V9)\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n+      return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdiv\\\\t%1, %2, %0\";\n     else\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %2, %0\\\";\n+      return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %2, %0\";\n   else\n     if (TARGET_V9)\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n+      return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tsdiv\\\\t%1, %3, %0\";\n     else\n-      return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %3, %0\\\";\n-}\"\n+      return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tld\\\\t%2, %3\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdiv\\\\t%1, %3, %0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n@@ -5830,13 +5724,12 @@\n \t(div:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n   \"TARGET_V8 || TARGET_DEPRECATED_V8_INSNS\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n+    return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tsdivcc\\\\t%1, %2, %0\";\n   else\n-    return \\\"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdivcc\\\\t%1, %2, %0\\\";\n-}\"\n+    return \"sra\\\\t%1, 31, %3\\\\n\\\\twr\\\\t%3, 0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tsdivcc\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n@@ -5857,19 +5750,18 @@\n   \"(TARGET_V8\n     || TARGET_DEPRECATED_V8_INSNS)\n    && TARGET_ARCH32\"\n-  \"*\n {\n-  output_asm_insn (\\\"wr\\\\t%%g0, %%g0, %%y\\\", operands);\n+  output_asm_insn (\"wr\\\\t%%g0, %%g0, %%y\", operands);\n   switch (which_alternative)\n     {\n     default:\n-      return \\\"nop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %2, %0\\\";\n+      return \"nop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %2, %0\";\n     case 1:\n-      return \\\"ld\\\\t%2, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %0, %0\\\";\n+      return \"ld\\\\t%2, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%1, %0, %0\";\n     case 2:\n-      return \\\"ld\\\\t%1, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%0, %2, %0\\\";\n+      return \"ld\\\\t%1, %0\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudiv\\\\t%0, %2, %0\";\n     }\n-}\"\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n \n@@ -5899,13 +5791,12 @@\n \t(udiv:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_V8\n    || TARGET_DEPRECATED_V8_INSNS\"\n-  \"*\n {\n   if (TARGET_V9)\n-    return \\\"wr\\\\t%%g0, %%g0, %%y\\\\n\\\\tudivcc\\\\t%1, %2, %0\\\";\n+    return \"wr\\\\t%%g0, %%g0, %%y\\\\n\\\\tudivcc\\\\t%1, %2, %0\";\n   else\n-    return \\\"wr\\\\t%%g0, %%g0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudivcc\\\\t%1, %2, %0\\\";\n-}\"\n+    return \"wr\\\\t%%g0, %%g0, %%y\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tnop\\\\n\\\\tudivcc\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n@@ -5998,10 +5889,9 @@\n    && (INTVAL (operands[2]) & 0x3ff) == 0x3ff\"\n   [(set (match_dup 3) (match_dup 4))\n    (set (match_dup 0) (and:SI (not:SI (match_dup 3)) (match_dup 1)))]\n-  \"\n {\n   operands[4] = GEN_INT (~INTVAL (operands[2]));\n-}\")\n+})\n \n ;; Split DImode logical operations requiring two instructions.\n (define_split\n@@ -6018,7 +5908,6 @@\n            && REGNO (SUBREG_REG (operands[0])) < 32))\"\n   [(set (match_dup 4) (match_op_dup:SI 1 [(match_dup 6) (match_dup 8)]))\n    (set (match_dup 5) (match_op_dup:SI 1 [(match_dup 7) (match_dup 9)]))]\n-  \"\n {\n   operands[4] = gen_highpart (SImode, operands[0]);\n   operands[5] = gen_lowpart (SImode, operands[0]);\n@@ -6036,7 +5925,7 @@\n #endif\n     operands[8] = gen_highpart_mode (SImode, DImode, operands[3]);\n   operands[9] = gen_lowpart (SImode, operands[3]);\n-}\")\n+})\n \n (define_insn_and_split \"*and_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6135,10 +6024,9 @@\n    && (INTVAL (operands[2]) & 0x3ff) == 0x3ff\"\n   [(set (match_dup 3) (match_dup 4))\n    (set (match_dup 0) (ior:SI (not:SI (match_dup 3)) (match_dup 1)))]\n-  \"\n {\n   operands[4] = GEN_INT (~INTVAL (operands[2]));\n-}\")\n+})\n \n (define_insn_and_split \"*or_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6245,10 +6133,9 @@\n    && (INTVAL (operands[2]) & 0x3ff) == 0x3ff\"\n   [(set (match_dup 3) (match_dup 4))\n    (set (match_dup 0) (not:SI (xor:SI (match_dup 3) (match_dup 1))))]\n-  \"\n {\n   operands[4] = GEN_INT (~INTVAL (operands[2]));\n-}\")\n+})\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -6260,10 +6147,9 @@\n    && (INTVAL (operands[2]) & 0x3ff) == 0x3ff\"\n   [(set (match_dup 3) (match_dup 4))\n    (set (match_dup 0) (xor:SI (match_dup 3) (match_dup 1)))]\n-  \"\n {\n   operands[4] = GEN_INT (~INTVAL (operands[2]));\n-}\")\n+})\n \n ;; xnor patterns.  Note that (a ^ ~b) == (~a ^ b) == ~(a ^ b).\n ;; Combine now canonicalizes to the rightmost expression.\n@@ -6466,7 +6352,6 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"\n {\n   if (! TARGET_ARCH64)\n     {\n@@ -6480,7 +6365,7 @@\n \t\t\t\t\t\t\t   SPARC_ICC_REG)))));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn_and_split \"*negdi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -7022,12 +6907,11 @@\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n-  \"*\n {\n   if (operands[2] == const1_rtx)\n-    return \\\"add\\\\t%1, %1, %0\\\";\n-  return \\\"sll\\\\t%1, %2, %0\\\";\n-}\"\n+    return \"add\\\\t%1, %1, %0\";\n+  return \"sll\\\\t%1, %2, %0\";\n+}\n   [(set (attr \"type\")\n \t(if_then_else (match_operand 2 \"const1_operand\" \"\")\n \t\t      (const_string \"ialu\") (const_string \"shift\")))])\n@@ -7037,7 +6921,6 @@\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n-  \"\n {\n   if (! TARGET_ARCH64)\n     {\n@@ -7046,19 +6929,18 @@\n       emit_insn (gen_ashldi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"*ashldi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n-  \"*\n {\n   if (operands[2] == const1_rtx)\n-    return \\\"add\\\\t%1, %1, %0\\\";\n-  return \\\"sllx\\\\t%1, %2, %0\\\";\n-}\"\n+    return \"add\\\\t%1, %1, %0\";\n+  return \"sllx\\\\t%1, %2, %0\";\n+}\n   [(set (attr \"type\")\n \t(if_then_else (match_operand 2 \"const1_operand\" \"\")\n \t\t      (const_string \"ialu\") (const_string \"shift\")))])\n@@ -7070,7 +6952,7 @@\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"*return sparc_v8plus_shift (operands, insn, \\\"sllx\\\");\"\n+  { return sparc_v8plus_shift (operands, insn, \"sllx\"); }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7083,12 +6965,11 @@\n ;\t\t\t    (match_operand:SI 1 \"arith_operand\" \"rI\"))\n ;\t\t (const_int -1)))]\n ;  \"0 && TARGET_V8PLUS\"\n-;  \"*\n ;{\n ;  if (GET_CODE (operands[1]) == REG && REGNO (operands[1]) == REGNO (operands[0]))\n-;    return \\\"mov\\\\t1, %L0\\;sllx\\\\t%L0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n-;  return \\\"mov\\\\t1, %H0\\;sllx\\\\t%H0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n-;}\"\n+;    return \"mov\\\\t1, %L0\\;sllx\\\\t%L0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\";\n+;  return \"mov\\\\t1, %H0\\;sllx\\\\t%H0, %1, %L0\\;sub\\\\t%L0, 1, %L0\\;srlx\\\\t%L0, 32, %H0\";\n+;}\n ;  [(set_attr \"type\" \"multi\")\n ;   (set_attr \"length\" \"4\")])\n \n@@ -7117,10 +6998,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n-  \"*\n-{\n-  return \\\"sra\\\\t%1, %2, %0\\\";\n-}\"\n+  \"sra\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"*ashrsi3_extend\"\n@@ -7145,20 +7023,18 @@\n \t   && !CONST_DOUBLE_HIGH (operands[2])\n            && CONST_DOUBLE_LOW (operands[2]) >= 32\n            && CONST_DOUBLE_LOW (operands[2]) < 64))\"\n-  \"*\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) - 32);\n \n-  return \\\"sra\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"sra\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_expand \"ashrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n-  \"\n {\n   if (! TARGET_ARCH64)\n     {\n@@ -7167,17 +7043,14 @@\n       emit_insn (gen_ashrdi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n-  \"*\n-{\n-  return \\\"srax\\\\t%1, %2, %0\\\";\n-}\"\n+  \"srax\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"shift\")])\n \n ;; XXX\n@@ -7187,7 +7060,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"*return sparc_v8plus_shift (operands, insn, \\\"srax\\\");\"\n+  { return sparc_v8plus_shift (operands, insn, \"srax\"); }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7196,10 +7069,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n-  \"*\n-{\n-  return \\\"srl\\\\t%1, %2, %0\\\";\n-}\"\n+  \"srl\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"shift\")])\n \n ;; This handles the case where\n@@ -7234,20 +7104,18 @@\n        || (GET_CODE (operands[2]) == CONST_DOUBLE\n \t   && CONST_DOUBLE_HIGH (operands[2]) == 0\n            && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n-  \"*\n {\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n \n-  return \\\"srl\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"srl\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n-  \"\n {\n   if (! TARGET_ARCH64)\n     {\n@@ -7256,17 +7124,14 @@\n       emit_insn (gen_lshrdi3_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n-  \"*\n-{\n-  return \\\"srlx\\\\t%1, %2, %0\\\";\n-}\"\n+  \"srlx\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"shift\")])\n \n ;; XXX\n@@ -7276,7 +7141,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"*return sparc_v8plus_shift (operands, insn, \\\"srlx\\\");\"\n+  { return sparc_v8plus_shift (operands, insn, \"srlx\"); }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7291,12 +7156,11 @@\n        || (GET_CODE (operands[2]) == CONST_DOUBLE\n \t   && !CONST_DOUBLE_HIGH (operands[2])\n            && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n-  \"*\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 32);\n \n-  return \\\"srax\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"srax\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"\"\n@@ -7310,12 +7174,11 @@\n        || (GET_CODE (operands[2]) == CONST_DOUBLE\n \t   && !CONST_DOUBLE_HIGH (operands[2])\n            && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n-  \"*\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 32);\n \n-  return \\\"srlx\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"srlx\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"\"\n@@ -7328,12 +7191,11 @@\n    && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) >= 32\n    && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) < 32\n    && (unsigned HOST_WIDE_INT) (INTVAL (operands[2]) + INTVAL (operands[3])) < 64\"\n-  \"*\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]));\n \n-  return \\\"srax\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"srax\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"\"\n@@ -7346,12 +7208,11 @@\n    && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) >= 32\n    && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) < 32\n    && (unsigned HOST_WIDE_INT) (INTVAL (operands[2]) + INTVAL (operands[3])) < 64\"\n-  \"*\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[3]));\n \n-  return \\\"srlx\\\\t%1, %2, %0\\\";\n-}\"\n+  return \"srlx\\\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \f\n ;; Unconditional and other jump instructions\n@@ -7361,7 +7222,6 @@\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"*\n {\n   /* TurboSparc is reported to have problems with\n      with\n@@ -7373,17 +7233,16 @@\n   if (! TARGET_V9 && flag_delayed_branch\n       && (INSN_ADDRESSES (INSN_UID (operands[0]))\n \t  == INSN_ADDRESSES (INSN_UID (insn))))\n-    return \\\"b\\\\t%l0%#\\\";\n+    return \"b\\\\t%l0%#\";\n   else\n-    return TARGET_V9 ? \\\"ba,pt%*\\\\t%%xcc, %l0%(\\\" : \\\"b%*\\\\t%l0%(\\\";\n-}\"\n+    return TARGET_V9 ? \"ba,pt%*\\\\t%%xcc, %l0%(\" : \"b%*\\\\t%l0%(\";\n+}\n   [(set_attr \"type\" \"uncond_branch\")])\n \n (define_expand \"tablejump\"\n   [(parallel [(set (pc) (match_operand 0 \"register_operand\" \"r\"))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n   \"\"\n-  \"\n {\n   if (GET_MODE (operands[0]) != CASE_VECTOR_MODE)\n     abort ();\n@@ -7401,7 +7260,7 @@\n       tmp = gen_rtx_PLUS (Pmode, tmp2, tmp);\n       operands[0] = memory_address (Pmode, tmp);\n     }\n-}\")\n+})\n \n (define_insn \"*tablejump_sp32\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))\n@@ -7435,7 +7294,6 @@\n   ;; operands[2] is next_arg_register\n   ;; operands[3] is struct_value_size_rtx.\n   \"\"\n-  \"\n {\n   rtx fn_rtx, nregs_rtx;\n \n@@ -7509,7 +7367,7 @@\n #endif\n \n   DONE;\n-}\")\n+})\n \n ;; We can't use the same pattern for these two insns, because then registers\n ;; in the address may not be properly reloaded.\n@@ -7610,7 +7468,6 @@\n   ;; operand 2 is stack_size_rtx\n   ;; operand 3 is next_arg_register\n   \"\"\n-  \"\n {\n   rtx fn_rtx, nregs_rtx;\n   rtvec vec;\n@@ -7637,7 +7494,7 @@\n   emit_call_insn (gen_rtx_PARALLEL (VOIDmode, vec));\n \n   DONE;\n-}\")\n+})\n \n (define_insn \"*call_value_address_sp32\"\n   [(set (match_operand 0 \"\" \"=rf\")\n@@ -7685,7 +7542,6 @@\n \t      (match_operand 1 \"\" \"\")\n \t      (match_operand 2 \"\" \"\")])]\n   \"\"\n-  \"\n {\n   int i;\n \n@@ -7706,7 +7562,7 @@\n   emit_insn (gen_blockage ());\n \n   DONE;\n-}\")\n+})\n \n ;;- tail calls\n (define_expand \"sibcall\"\n@@ -7776,7 +7632,6 @@\n   [(match_operand:BLK 0 \"memory_operand\" \"\")\n    (match_operand 1 \"\" \"\")]\n   \"\"\n-  \"\n {\n   rtx valreg1 = gen_rtx_REG (DImode, 24);\n   rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n@@ -7810,7 +7665,7 @@\n   expand_null_return ();\n \n   DONE;\n-}\")\n+})\n \n ;; This is a bit of a hack.  We're incrementing a fixed register (%i7),\n ;; and parts of the compiler don't want to believe that the add is needed.\n@@ -7852,7 +7707,6 @@\n    (match_operand:SI 2 \"general_operand\" \"\")\n    (match_operand:SI 3 \"\" \"\")]\n   \"\"\n-  \"\n {\n #if 0\n   rtx chain = operands[0];\n@@ -7906,13 +7760,13 @@\n   emit_jump_insn (gen_goto_handler_and_restore (labreg));\n   emit_barrier ();\n   DONE;\n-}\")\n+})\n \n ;; Special trap insn to flush register windows.\n (define_insn \"flush_register_windows\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_FLUSHW)]\n   \"\"\n-  \"* return TARGET_V9 ? \\\"flushw\\\" : \\\"ta\\\\t3\\\";\"\n+  { return TARGET_V9 ? \"flushw\" : \"ta\\\\t3\"; }\n   [(set_attr \"type\" \"flushw\")])\n \n (define_insn \"goto_handler_and_restore\"\n@@ -7950,34 +7804,32 @@\n (define_expand \"builtin_setjmp_setup\"\n   [(match_operand 0 \"register_operand\" \"r\")]\n   \"\"\n-  \"\n {\n   emit_insn (gen_do_builtin_setjmp_setup ());\n   DONE;\n-}\")\n+})\n \n (define_insn \"do_builtin_setjmp_setup\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_SETJMP)]\n   \"\"\n-  \"*\n {\n   if (! current_function_calls_alloca)\n-    return \\\"\\\";\n+    return \"\";\n   if (! TARGET_V9 || TARGET_FLAT)\n-    return \\\"\\tta\\t3\\n\\\";\n-  fputs (\\\"\\tflushw\\n\\\", asm_out_file);\n+    return \"\\tta\\t3\\n\";\n+  fputs (\"\\tflushw\\n\", asm_out_file);\n   if (flag_pic)\n-    fprintf (asm_out_file, \\\"\\tst%c\\t%%l7, [%%sp+%d]\\n\\\",\n+    fprintf (asm_out_file, \"\\tst%c\\t%%l7, [%%sp+%d]\\n\",\n \t     TARGET_ARCH64 ? 'x' : 'w',\n \t     SPARC_STACK_BIAS + 7 * UNITS_PER_WORD);\n-  fprintf (asm_out_file, \\\"\\tst%c\\t%%fp, [%%sp+%d]\\n\\\",\n+  fprintf (asm_out_file, \"\\tst%c\\t%%fp, [%%sp+%d]\\n\",\n \t   TARGET_ARCH64 ? 'x' : 'w',\n \t   SPARC_STACK_BIAS + 14 * UNITS_PER_WORD);\n-  fprintf (asm_out_file, \\\"\\tst%c\\t%%i7, [%%sp+%d]\\n\\\",\n+  fprintf (asm_out_file, \"\\tst%c\\t%%i7, [%%sp+%d]\\n\",\n \t   TARGET_ARCH64 ? 'x' : 'w',\n \t   SPARC_STACK_BIAS + 15 * UNITS_PER_WORD);\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n         (cond [(eq_attr \"current_function_calls_alloca\" \"false\")\n@@ -7995,28 +7847,25 @@\n (define_expand \"setjmp\"\n   [(const_int 0)]\n   \"\"\n-  \"\n {\n   if (TARGET_ARCH64)\n     emit_insn (gen_setjmp_64 ());\n   else\n     emit_insn (gen_setjmp_32 ());\n   DONE;\n-}\")\n+})\n \n (define_expand \"setjmp_32\"\n   [(set (mem:SI (plus:SI (reg:SI 14) (const_int 56))) (match_dup 0))\n    (set (mem:SI (plus:SI (reg:SI 14) (const_int 60))) (reg:SI 31))]\n   \"\"\n-  \"\n-{ operands[0] = frame_pointer_rtx; }\")\n+  { operands[0] = frame_pointer_rtx; })\n \n (define_expand \"setjmp_64\"\n   [(set (mem:DI (plus:DI (reg:DI 14) (const_int 112))) (match_dup 0))\n    (set (mem:DI (plus:DI (reg:DI 14) (const_int 120))) (reg:DI 31))]\n   \"\"\n-  \"\n-{ operands[0] = frame_pointer_rtx; }\")\n+  { operands[0] = frame_pointer_rtx; })\n \n ;; Special pattern for the FLUSH instruction.\n \n@@ -8028,13 +7877,13 @@\n (define_insn \"flush\"\n   [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n-  \"* return TARGET_V9 ? \\\"flush\\\\t%f0\\\" : \\\"iflush\\\\t%f0\\\";\"\n+  { return TARGET_V9 ? \"flush\\\\t%f0\" : \"iflush\\\\t%f0\"; }\n   [(set_attr \"type\" \"iflush\")])\n \n (define_insn \"flushdi\"\n   [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n-  \"* return TARGET_V9 ? \\\"flush\\\\t%f0\\\" : \\\"iflush\\\\t%f0\\\";\"\n+  { return TARGET_V9 ? \"flush\\\\t%f0\" : \"iflush\\\\t%f0\"; }\n   [(set_attr \"type\" \"iflush\")])\n \n \f\n@@ -8051,10 +7900,9 @@\n \t(ffs:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"TARGET_SPARCLITE || TARGET_SPARCLET\"\n-  \"*\n {\n-  return \\\"sub\\\\t%%g0, %1, %0\\;and\\\\t%0, %1, %0\\;scan\\\\t%0, 0, %0\\;mov\\\\t32, %2\\;sub\\\\t%2, %0, %0\\;sra\\\\t%0, 31, %2\\;and\\\\t%2, 31, %2\\;add\\\\t%2, %0, %0\\\";\n-}\"\n+  return \"sub\\\\t%%g0, %1, %0\\;and\\\\t%0, %1, %0\\;scan\\\\t%0, 0, %0\\;mov\\\\t32, %2\\;sub\\\\t%2, %0, %0\\;sra\\\\t%0, 31, %2\\;and\\\\t%2, 31, %2\\;add\\\\t%2, %0, %0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n@@ -8243,16 +8091,15 @@\n \t(match_operand:QI 1 \"arith_operand\" \"rI\"))\n    (return)]\n   \"sparc_emitting_epilogue\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\";\n   else if (TARGET_V9 && (GET_CODE (operands[1]) == CONST_INT\n \t\t\t || IN_OR_GLOBAL_P (operands[1])))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\";\n   else\n-    return \\\"ret\\\\n\\\\trestore %%g0, %1, %Y0\\\";\n-}\"\n+    return \"ret\\\\n\\\\trestore %%g0, %1, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8261,16 +8108,15 @@\n \t(match_operand:HI 1 \"arith_operand\" \"rI\"))\n    (return)]\n   \"sparc_emitting_epilogue\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\";\n   else if (TARGET_V9 && (GET_CODE (operands[1]) == CONST_INT\n \t\t\t || IN_OR_GLOBAL_P (operands[1])))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\";\n   else\n-    return \\\"ret\\;restore %%g0, %1, %Y0\\\";\n-}\"\n+    return \"ret\\;restore %%g0, %1, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8279,16 +8125,15 @@\n \t(match_operand:SI 1 \"arith_operand\" \"rI\"))\n    (return)]\n   \"sparc_emitting_epilogue\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\";\n   else if (TARGET_V9 && (GET_CODE (operands[1]) == CONST_INT\n \t\t\t || IN_OR_GLOBAL_P (operands[1])))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\";\n   else\n-    return \\\"ret\\;restore %%g0, %1, %Y0\\\";\n-}\"\n+    return \"ret\\;restore %%g0, %1, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8297,15 +8142,14 @@\n \t(match_operand:SF 1 \"register_operand\" \"r\"))\n    (return)]\n   \"sparc_emitting_epilogue\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %%g0, %1, %Y0\";\n   else if (TARGET_V9 && IN_OR_GLOBAL_P (operands[1]))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\";\n   else\n-    return \\\"ret\\;restore %%g0, %1, %Y0\\\";\n-}\"\n+    return \"ret\\;restore %%g0, %1, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8314,13 +8158,12 @@\n \t(match_operand:DF 1 \"register_operand\" \"r\"))\n    (return)]\n   \"sparc_emitting_epilogue && TARGET_ARCH64\"\n-  \"*\n {\n   if (IN_OR_GLOBAL_P (operands[1]))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\";\n   else\n-    return \\\"ret\\;restore %%g0, %1, %Y0\\\";\n-}\"\n+    return \"ret\\;restore %%g0, %1, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8330,18 +8173,17 @@\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n    (return)]\n   \"sparc_emitting_epilogue\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %r1, %2, %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %r1, %2, %Y0\";\n   /* If operands are global or in registers, can use return */\n   else if (TARGET_V9 && IN_OR_GLOBAL_P (operands[1])\n \t   && (GET_CODE (operands[2]) == CONST_INT\n \t       || IN_OR_GLOBAL_P (operands[2])))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tadd\\\\t%Y1, %Y2, %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tadd\\\\t%Y1, %Y2, %Y0\";\n   else\n-    return \\\"ret\\;restore %r1, %2, %Y0\\\";\n-}\"\n+    return \"ret\\;restore %r1, %2, %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8351,16 +8193,15 @@\n \t\t   (match_operand:SI 2 \"immediate_operand\" \"in\")))\n    (return)]\n   \"sparc_emitting_epilogue && ! TARGET_CM_MEDMID\"\n-  \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n-    return \\\"jmp\\\\t%%i7+12\\\\n\\\\trestore %r1, %%lo(%a2), %Y0\\\";\n+    return \"jmp\\\\t%%i7+12\\\\n\\\\trestore %r1, %%lo(%a2), %Y0\";\n   /* If operands are global or in registers, can use return */\n   else if (TARGET_V9 && IN_OR_GLOBAL_P (operands[1]))\n-    return \\\"return\\\\t%%i7+8\\\\n\\\\tor\\\\t%Y1, %%lo(%a2), %Y0\\\";\n+    return \"return\\\\t%%i7+8\\\\n\\\\tor\\\\t%Y1, %%lo(%a2), %Y0\";\n   else\n-    return \\\"ret\\;restore %r1, %%lo(%a2), %Y0\\\";\n-}\"\n+    return \"ret\\;restore %r1, %%lo(%a2), %Y0\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"2\")])\n \n@@ -8436,14 +8277,13 @@\n    (match_operand 1 \"const_int_operand\" \"\")\n    (match_operand 2 \"const_int_operand\" \"\")]\n   \"TARGET_V9\"\n-  \"\n {\n   if (TARGET_ARCH64)\n     emit_insn (gen_prefetch_64 (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_prefetch_32 (operands[0], operands[1], operands[2]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"prefetch_64\"\n   [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n@@ -8502,33 +8342,30 @@\n (define_expand \"prologue\"\n   [(const_int 1)]\n   \"flag_pic && current_function_uses_pic_offset_table\"\n-  \"\n {\n   load_pic_register ();\n   DONE;\n-}\")\n+})\n \n ;; We need to reload %l7 for -mflat -fpic,\n ;; otherwise %l7 should be preserved simply\n ;; by loading the function's register window\n (define_expand \"exception_receiver\"\n   [(const_int 0)]\n   \"TARGET_FLAT && flag_pic\"\n-  \"\n {\n   load_pic_register ();\n   DONE;\n-}\")\n+})\n \n ;; Likewise\n (define_expand \"builtin_setjmp_receiver\"\n   [(label_ref (match_operand 0 \"\" \"\"))]\n   \"TARGET_FLAT && flag_pic\"\n-  \"\n {\n   load_pic_register ();\n   DONE;\n-}\")\n+})\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 5))]"}]}