{"sha": "7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0MGU0OWYyNzQ1OGRlMWMzYjA0ODFiM2NmOTRlMDNiNzNmZGQ3Zg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-03T18:30:36Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-03T18:30:36Z"}, "message": "re PR fortran/48887 ([OOP] SELECT TYPE:  Associate name shall not be a pointer/allocatable)\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48887\n        * match.c (select_type_set_tmp): Don't set allocatable/pointer\n        attribute.\n        * class.c (gfc_build_class_symbol): Handle\n        attr.select_type_temporary.\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48887\n        * gfortran.dg/select_type_24.f90: New.\n        * gfortran.dg/select_type_23.f03: Add dg-error.\n        * gfortran.dg/class_45a.f03: Add missing TARGET attribute.\n\nFrom-SVN: r181975", "tree": {"sha": "fd93a90a523df23aa531f68dea337f8c7dd73fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd93a90a523df23aa531f68dea337f8c7dd73fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99b375d0b9802b28f3250ef3d2af6ac56d6d4c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b375d0b9802b28f3250ef3d2af6ac56d6d4c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b375d0b9802b28f3250ef3d2af6ac56d6d4c7c"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "fbe15b03218e74e3500ff5f7cd260ccd4d1c09ad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -1,3 +1,11 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48887\n+\t* match.c (select_type_set_tmp): Don't set allocatable/pointer\n+\tattribute.\n+\t* class.c (gfc_build_class_symbol): Handle\n+\tattr.select_type_temporary.\n+\n 2011-12-03  Tobias Burnus  <burnus@net-b.de>                                                                                                           \n \n \tPR fortran/50684"}, {"sha": "d3f7bf3ab4c153482b2e83b505aa64320c3d2c17", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -188,7 +188,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n     /* Class container has already been built.  */\n     return SUCCESS;\n \n-  attr->class_ok = attr->dummy || attr->pointer || attr->allocatable;\n+  attr->class_ok = attr->dummy || attr->pointer || attr->allocatable\n+\t\t   || attr->select_type_temporary;\n   \n   if (!attr->class_ok)\n     /* We can not build the class container yet.  */\n@@ -239,7 +240,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       c->attr.access = ACCESS_PRIVATE;\n       c->ts.u.derived = ts->u.derived;\n       c->attr.class_pointer = attr->pointer;\n-      c->attr.pointer = attr->pointer || attr->dummy;\n+      c->attr.pointer = attr->pointer || (attr->dummy && !attr->allocatable)\n+\t\t\t|| attr->select_type_temporary;\n       c->attr.allocatable = attr->allocatable;\n       c->attr.dimension = attr->dimension;\n       c->attr.codimension = attr->codimension;"}, {"sha": "3de9c72571eedf188d20a54cc5f1bb3607366802", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -5152,16 +5152,11 @@ select_type_set_tmp (gfc_typespec *ts)\n   gfc_get_sym_tree (name, gfc_current_ns, &tmp, false);\n   gfc_add_type (tmp->n.sym, ts, NULL);\n   gfc_set_sym_referenced (tmp->n.sym);\n-  if (select_type_stack->selector->ts.type == BT_CLASS &&\n-      CLASS_DATA (select_type_stack->selector)->attr.allocatable)\n-    gfc_add_allocatable (&tmp->n.sym->attr, NULL);\n-  else\n-    gfc_add_pointer (&tmp->n.sym->attr, NULL);\n   gfc_add_flavor (&tmp->n.sym->attr, FL_VARIABLE, name, NULL);\n+  tmp->n.sym->attr.select_type_temporary = 1;\n   if (ts->type == BT_CLASS)\n     gfc_build_class_symbol (&tmp->n.sym->ts, &tmp->n.sym->attr,\n \t\t\t    &tmp->n.sym->as, false);\n-  tmp->n.sym->attr.select_type_temporary = 1;\n \n   /* Add an association for it, so the rest of the parser knows it is\n      an associate-name.  The target will be set during resolution.  */"}, {"sha": "c7cfa2c430e774670b3617587b4bdd007ac9142a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -1,3 +1,10 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48887\n+\t* gfortran.dg/select_type_24.f90: New.\n+\t* gfortran.dg/select_type_23.f03: Add dg-error.\n+\t* gfortran.dg/class_45a.f03: Add missing TARGET attribute.\n+\n 2011-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vect/vect-122.c: New test."}, {"sha": "91f11c4ecce9d5945247dc18133359246e393db4", "filename": "gcc/testsuite/gfortran.dg/class_45a.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_45a.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_45a.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_45a.f03?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -18,7 +18,7 @@ module G_Nodes\n   function basicGet(self)\n     implicit none\n     class(t0), pointer :: basicGet\n-    class(t0), intent(in) :: self\n+    class(t0), target, intent(in) :: self\n     select type (self)\n     type is (t1)\n        basicGet => self"}, {"sha": "ced853745f4ffac042da40059c1eba7ddaf7f968", "filename": "gcc/testsuite/gfortran.dg/select_type_23.f03", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_23.f03?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -3,6 +3,8 @@\n ! PR 48699: [OOP] MOVE_ALLOC inside SELECT TYPE\n !\n ! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+!\n+! Updated for PR fortran/48887\n \n program testmv2\n \n@@ -16,7 +18,7 @@ program testmv2\n \n   select type(sm2) \n   type is (bar)\n-    call move_alloc(sm2,sm)\n+    call move_alloc(sm2,sm) ! { dg-error \"must be ALLOCATABLE\" }\n   end select\n \n end program testmv2"}, {"sha": "e47d00030f49972ec2356ff0595a57e556a395f9", "filename": "gcc/testsuite/gfortran.dg/select_type_24.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d40e49f27458de1c3b0481b3cf94e03b73fdd7f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_24.f90?ref=7d40e49f27458de1c3b0481b3cf94e03b73fdd7f", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48887\n+!\n+! \"If the selector is allocatable, it shall be allocated; the\n+!  associate name is associated with the data object and does\n+!  not have the ALLOCATABLE attribute.\"\n+!\n+module m\n+  type t\n+  end type t\n+contains\n+  subroutine one(a)\n+    class(t), allocatable :: a\n+    class(t), allocatable :: b\n+    allocate (b)\n+    select type (b)\n+      type is(t)\n+        call move_alloc (b, a) ! { dg-error \"must be ALLOCATABLE\" }\n+    end select\n+  end subroutine one\n+\n+  subroutine two (a)\n+    class(t), allocatable :: a\n+    type(t), allocatable :: b\n+    allocate (b)\n+    associate (c => b)\n+      call move_alloc (b, c) ! { dg-error \"must be ALLOCATABLE\" }\n+    end associate\n+  end subroutine two\n+end module m\n+\n+type t\n+end type t\n+class(t), allocatable :: x\n+\n+select type(x)\n+  type is(t)\n+    print *, allocated (x) ! { dg-error \"must be ALLOCATABLE\" }\n+end select\n+\n+select type(y=>x)\n+  type is(t)\n+    print *, allocated (y)  ! { dg-error \"must be ALLOCATABLE\" }\n+end select\n+\n+associate (y=>x)\n+  print *, allocated (y)  ! { dg-error \"must be ALLOCATABLE\" }\n+end associate\n+end"}]}