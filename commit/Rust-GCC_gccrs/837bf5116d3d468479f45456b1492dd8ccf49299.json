{"sha": "837bf5116d3d468479f45456b1492dd8ccf49299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM3YmY1MTE2ZDNkNDY4NDc5ZjQ1NDU2YjE0OTJkZDhjY2Y0OTI5OQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-18T11:21:51Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-18T11:21:51Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-18  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/list.tcc (_List_base::_M_clear, list::erase): Mark as\n\tnoexcept.\n\t* include/bits/stl_list.h (_List_iterator) [_List_iterator,\n\t_M_const_cast, operator*, operator->, operator++, operator--,\n\toperator==, operator!=]: Likewise.\n\t(_List_const_iterator) [_List_const_iterator, _M_const_cast, operator*,\n\toperator->, operator++, operator--, operator==, operator!=]: Likewise.\n\t(operator==(const _List_iterator&, const _List_const_iterator&),\n\toperator!=(const _List_iterator&, const _List_const_iterator&)):\n\tLikewise.\n\t(_List_impl) [_List_impl(const _Node_alloc_type&),\n\t_List_impl(_Node_alloc_type&&)]: Likewise.\n\t(_List_base) [_M_put_node, _List_base(const _Node_alloc_type&),\n\t_List_base(_List_base&&), _M_clear, _M_init]: Likewise.\n\t(list) [list(), list(const allocator_type&)]: Merge.\n\t(list) [list(const allocator_type&), front, back, pop_front, pop_back,\n\terase, _M_erase]: Mark as noexcept.\n\t* include/debug/list (list) [list(const _Allocator&), front, back,\n\tpop_front, pop_back, _M_erase, erase]: Likewise.\n\t* include/profile/list (list) [list(const _Allocator&), front, back,\n\tpop_front, pop_back, erase]: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust line number.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r202699", "tree": {"sha": "19d8297301f021ffc5cb9a40c7505418777811ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d8297301f021ffc5cb9a40c7505418777811ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837bf5116d3d468479f45456b1492dd8ccf49299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837bf5116d3d468479f45456b1492dd8ccf49299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837bf5116d3d468479f45456b1492dd8ccf49299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837bf5116d3d468479f45456b1492dd8ccf49299/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "309dc1aaeebb818182e8a3ff88b1548a0f63b2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309dc1aaeebb818182e8a3ff88b1548a0f63b2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309dc1aaeebb818182e8a3ff88b1548a0f63b2c3"}], "stats": {"total": 172, "additions": 100, "deletions": 72}, "files": [{"sha": "12854ea07e4a5c9cdca43e2681d37bfde2b9707e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -1,3 +1,36 @@\n+2013-09-18  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/list.tcc (_List_base::_M_clear, list::erase): Mark as\n+\tnoexcept.\n+\t* include/bits/stl_list.h (_List_iterator) [_List_iterator,\n+\t_M_const_cast, operator*, operator->, operator++, operator--,\n+\toperator==, operator!=]: Likewise.\n+\t(_List_const_iterator) [_List_const_iterator, _M_const_cast, operator*,\n+\toperator->, operator++, operator--, operator==, operator!=]: Likewise.\n+\t(operator==(const _List_iterator&, const _List_const_iterator&),\n+\toperator!=(const _List_iterator&, const _List_const_iterator&)):\n+\tLikewise.\n+\t(_List_impl) [_List_impl(const _Node_alloc_type&),\n+\t_List_impl(_Node_alloc_type&&)]: Likewise.\n+\t(_List_base) [_M_put_node, _List_base(const _Node_alloc_type&),\n+\t_List_base(_List_base&&), _M_clear, _M_init]: Likewise.\n+\t(list) [list(), list(const allocator_type&)]: Merge.\n+\t(list) [list(const allocator_type&), front, back, pop_front, pop_back,\n+\terase, _M_erase]: Mark as noexcept.\n+\t* include/debug/list (list) [list(const _Allocator&), front, back,\n+\tpop_front, pop_back, _M_erase, erase]: Likewise.\n+\t* include/profile/list (list) [list(const _Allocator&), front, back,\n+\tpop_front, pop_back, erase]: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust line number.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-09-17  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/58338"}, {"sha": "718dcec1e09f9e6993add8a8df3f19e9a7238220", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -63,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     void\n     _List_base<_Tp, _Alloc>::\n-    _M_clear()\n+    _M_clear() _GLIBCXX_NOEXCEPT\n     {\n       typedef _List_node<_Tp>  _Node;\n       _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n #if __cplusplus >= 201103L\n-    erase(const_iterator __position)\n+    erase(const_iterator __position) noexcept\n #else\n     erase(iterator __position)\n #endif"}, {"sha": "4b009ccfa155c2dc3eddb84d685c7fafd779f5b1", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -133,62 +133,62 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Tp*                               pointer;\n       typedef _Tp&                               reference;\n \n-      _List_iterator()\n+      _List_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n \n       explicit\n-      _List_iterator(__detail::_List_node_base* __x)\n+      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n       _Self\n-      _M_const_cast() const\n+      _M_const_cast() const _GLIBCXX_NOEXCEPT\n       { return *this; }\n \n       // Must downcast from _List_node_base to _List_node to get to _M_data.\n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Node*>(_M_node)->_M_data; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }\n \n       _Self&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _M_node->_M_next;\n \treturn *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _M_node->_M_next;\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _M_node->_M_prev;\n \treturn *this;\n       }\n \n       _Self\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _M_node->_M_prev;\n \treturn __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node != __x._M_node; }\n \n       // The only member points to the %list element.\n@@ -213,66 +213,67 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef const _Tp*                         pointer;\n       typedef const _Tp&                         reference;\n \n-      _List_const_iterator()\n+      _List_const_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n \n       explicit\n       _List_const_iterator(const __detail::_List_node_base* __x)\n+      _GLIBCXX_NOEXCEPT\n       : _M_node(__x) { }\n \n-      _List_const_iterator(const iterator& __x)\n+      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT\n       : _M_node(__x._M_node) { }\n \n       iterator\n-      _M_const_cast() const\n+      _M_const_cast() const _GLIBCXX_NOEXCEPT\n       { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }\n \n       // Must downcast from List_node_base to _List_node to get to\n       // _M_data.\n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Node*>(_M_node)->_M_data; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }\n \n       _Self&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _M_node->_M_next;\n \treturn *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _M_node->_M_next;\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = _M_node->_M_prev;\n \treturn *this;\n       }\n \n       _Self\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t_M_node = _M_node->_M_prev;\n \treturn __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_node != __x._M_node; }\n \n       // The only member points to the %list element.\n@@ -282,13 +283,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Val>\n     inline bool\n     operator==(const _List_iterator<_Val>& __x,\n-\t       const _List_const_iterator<_Val>& __y)\n+\t       const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node == __y._M_node; }\n \n   template<typename _Val>\n     inline bool\n     operator!=(const _List_iterator<_Val>& __x,\n-               const _List_const_iterator<_Val>& __y)\n+               const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node != __y._M_node; }\n \n \n@@ -324,12 +325,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Node_alloc_type(), _M_node()\n \t{ }\n \n-\t_List_impl(const _Node_alloc_type& __a)\n+\t_List_impl(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT\n \t: _Node_alloc_type(__a), _M_node()\n \t{ }\n \n #if __cplusplus >= 201103L\n-\t_List_impl(_Node_alloc_type&& __a)\n+\t_List_impl(_Node_alloc_type&& __a) _GLIBCXX_NOEXCEPT\n \t: _Node_alloc_type(std::move(__a)), _M_node()\n \t{ }\n #endif\n@@ -342,7 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_impl._Node_alloc_type::allocate(1); }\n \n       void\n-      _M_put_node(_List_node<_Tp>* __p)\n+      _M_put_node(_List_node<_Tp>* __p) _GLIBCXX_NOEXCEPT\n       { _M_impl._Node_alloc_type::deallocate(__p, 1); }\n \n   public:\n@@ -368,12 +369,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl()\n       { _M_init(); }\n \n-      _List_base(const _Node_alloc_type& __a)\n+      _List_base(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT\n       : _M_impl(__a)\n       { _M_init(); }\n \n #if __cplusplus >= 201103L\n-      _List_base(_List_base&& __x)\n+      _List_base(_List_base&& __x) noexcept\n       : _M_impl(std::move(__x._M_get_Node_allocator()))\n       {\n \t_M_init();\n@@ -386,10 +387,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_clear(); }\n \n       void\n-      _M_clear();\n+      _M_clear() _GLIBCXX_NOEXCEPT;\n \n       void\n-      _M_init()\n+      _M_init() _GLIBCXX_NOEXCEPT\n       {\n         this->_M_impl._M_node._M_next = &this->_M_impl._M_node;\n         this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;\n@@ -525,18 +526,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     public:\n       // [23.2.2.1] construct/copy/destroy\n       // (assign() and get_allocator() are also listed in this section)\n-      /**\n-       *  @brief  Default constructor creates no elements.\n-       */\n-      list()\n-      : _Base() { }\n-\n       /**\n        *  @brief  Creates a %list with no elements.\n        *  @param  __a  An allocator object.\n        */\n       explicit\n-      list(const allocator_type& __a)\n+      list(const allocator_type& __a = allocator_type()) _GLIBCXX_NOEXCEPT\n       : _Base(_Node_alloc_type(__a)) { }\n \n #if __cplusplus >= 201103L\n@@ -932,23 +927,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element of the %list.\n        */\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %list.\n        */\n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read/write reference to the data at the last element\n        *  of the %list.\n        */\n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       { \n \titerator __tmp = end();\n \t--__tmp;\n@@ -960,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element of the %list.\n        */\n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       { \n \tconst_iterator __tmp = end();\n \t--__tmp;\n@@ -1006,7 +1001,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  called.\n        */\n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       { this->_M_erase(begin()); }\n \n       /**\n@@ -1046,7 +1041,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is needed, it should be retrieved before pop_back() is called.\n        */\n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }\n \n #if __cplusplus >= 201103L\n@@ -1231,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position);\n+      erase(const_iterator __position) noexcept;\n #else\n       erase(iterator __position);\n #endif\n@@ -1256,7 +1251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __first, const_iterator __last)\n+      erase(const_iterator __first, const_iterator __last) noexcept\n #else\n       erase(iterator __first, iterator __last)\n #endif\n@@ -1687,7 +1682,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Erases element at position given.\n       void\n-      _M_erase(iterator __position)\n+      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT\n       {\n         __position._M_node->_M_unhook();\n         _Node* __n = static_cast<_Node*>(__position._M_node);"}, {"sha": "bd407e64a98e5374afe573f2a1caa529873569aa", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -70,7 +70,7 @@ namespace __debug\n \n       // 23.2.2.1 construct/copy/destroy:\n       explicit\n-      list(const _Allocator& __a = _Allocator())\n+      list(const _Allocator& __a = _Allocator()) _GLIBCXX_NOEXCEPT\n       : _Base(__a) { }\n \n #if __cplusplus >= 201103L\n@@ -320,28 +320,28 @@ namespace __debug\n \n       // element access:\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n@@ -355,7 +355,7 @@ namespace __debug\n #endif\n \n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \tthis->_M_invalidate_if(_Equal(_Base::begin()));\n@@ -369,7 +369,7 @@ namespace __debug\n #endif\n \n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \tthis->_M_invalidate_if(_Equal(--_Base::end()));\n@@ -455,7 +455,7 @@ namespace __debug\n     private:\n       _Base_iterator\n #if __cplusplus >= 201103L\n-      _M_erase(_Base_const_iterator __position)\n+      _M_erase(_Base_const_iterator __position) noexcept\n #else\n       _M_erase(_Base_iterator __position)\n #endif\n@@ -467,7 +467,7 @@ namespace __debug\n     public:\n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position)\n+      erase(const_iterator __position) noexcept\n #else\n       erase(iterator __position)\n #endif\n@@ -478,7 +478,7 @@ namespace __debug\n \n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __first, const_iterator __last)\n+      erase(const_iterator __first, const_iterator __last) noexcept\n #else\n       erase(iterator __first, iterator __last)\n #endif"}, {"sha": "778edf1e428c1d0a0ecfea8c3965f30ff66be679", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -65,7 +65,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       // 23.2.2.1 construct/copy/destroy:\n       explicit\n-      list(const _Allocator& __a = _Allocator())\n+      list(const _Allocator& __a = _Allocator()) _GLIBCXX_NOEXCEPT\n       : _Base(__a) \n       {\n         __profcxx_list_construct(this); \t// list2slist\n@@ -276,22 +276,22 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       // element access:\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { return _Base::front(); }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return _Base::front(); }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_rewind(this);\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_rewind(this);\n \treturn _Base::back();\n@@ -311,7 +311,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n #endif\n \n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_list_operation(this);\n \t_Base::pop_front();\n@@ -324,7 +324,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n #endif\n \n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \titerator __victim = end();\n \t--__victim;\n@@ -411,15 +411,15 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position)\n+      erase(const_iterator __position) noexcept\n #else\n       erase(iterator __position)\n #endif\n       {\treturn iterator(_Base::erase(__position.base()), this); }\n \n       iterator\n #if __cplusplus >= 201103L\n-      erase(const_iterator __position, const_iterator __last)\n+      erase(const_iterator __position, const_iterator __last) noexcept\n #else\n       erase(iterator __position, iterator __last)\n #endif"}, {"sha": "dd315f67a31768311ebe35529b8aa1172cdb3b14", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1651 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1646 }\n \n #include <list>\n "}, {"sha": "9454c741a685bdfecbbd294067fc7732346bd466", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1598 }\n \n #include <list>\n "}, {"sha": "9723db98a4862823519b64582caf36ad4a575fa2", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1598 }\n \n #include <list>\n #include <utility>"}, {"sha": "fdc2f11d6e2620e8afbab1ec8b39dc1aa91dd31b", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837bf5116d3d468479f45456b1492dd8ccf49299/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=837bf5116d3d468479f45456b1492dd8ccf49299", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1603 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1598 }\n \n #include <list>\n "}]}