{"sha": "6eef740212b6c2e5eb68d245ee5a2bda7f581841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlZjc0MDIxMmI2YzJlNWViNjhkMjQ1ZWU1YTJiZGE3ZjU4MTg0MQ==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2007-11-05T19:46:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-05T19:46:07Z"}, "message": "stl_vector.h (vector<>::push_back<>(_Args...), [...]): Add.\n\n2007-11-05  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_vector.h (vector<>::push_back<>(_Args...),\n\templace<>(iterator, _Args...), insert(iterator, _Tp&&),\n\t_M_insert_aux<>(iterator, _Args&&...)): Add.\n\t* include/bits/vector.tcc (insert(iterator, value_type&&),\n\templace<>(iterator, _Args...), _M_insert_aux<>(iterator, _Args&&...)):\n\tDefine.\n\t(_M_fill_insert(iterator, size_type, const value_type&),\n\t_M_range_insert(iterator, _ForwardIterator, _ForwardIterator,\n\tstd::forward_iterator_tag)): Use __uninitialized_move_a,\n\t_GLIBCXX_MOVE_BACKWARD3 when possible.\n\t* include/bits/stl_uninitialized.h (__uninitialized_move_a): Add.\n\t* include/debug/vector (vector<>::push_back<>(_Args...),\n\templace<>(iterator, _Args...), insert(iterator, _Tp&&)): Add.\n\t* testsuite/23_containers/vector/modifiers/moveable.cc: Enable.\n\t* testsuite/23_containers/vector/resize/moveable.cc: Likewise.\n\t* testsuite/23_containers/vector/cons/moveable.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r129907", "tree": {"sha": "01d64cc281df436959d334dee7ca39fcc4c91e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d64cc281df436959d334dee7ca39fcc4c91e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eef740212b6c2e5eb68d245ee5a2bda7f581841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eef740212b6c2e5eb68d245ee5a2bda7f581841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eef740212b6c2e5eb68d245ee5a2bda7f581841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eef740212b6c2e5eb68d245ee5a2bda7f581841/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77cfbfe79ea4a772ab71d09f82143c7baafee9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77cfbfe79ea4a772ab71d09f82143c7baafee9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77cfbfe79ea4a772ab71d09f82143c7baafee9ec"}], "stats": {"total": 262, "additions": 235, "deletions": 27}, "files": [{"sha": "36c9f4bfb4f120a92eddcc5a0c0d465e2db158c8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -1,3 +1,31 @@\n+2007-11-05  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_vector.h (vector<>::push_back<>(_Args...),\n+\templace<>(iterator, _Args...), insert(iterator, _Tp&&),\n+\t_M_insert_aux<>(iterator, _Args&&...)): Add.\n+\t* include/bits/vector.tcc (insert(iterator, value_type&&),\n+\templace<>(iterator, _Args...), _M_insert_aux<>(iterator, _Args&&...)):\n+\tDefine.\n+\t(_M_fill_insert(iterator, size_type, const value_type&),\n+\t_M_range_insert(iterator, _ForwardIterator, _ForwardIterator,\n+\tstd::forward_iterator_tag)): Use __uninitialized_move_a,\n+\t_GLIBCXX_MOVE_BACKWARD3 when possible.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_move_a): Add.\n+\t* include/debug/vector (vector<>::push_back<>(_Args...),\n+\templace<>(iterator, _Args...), insert(iterator, _Tp&&)): Add.\n+\t* testsuite/23_containers/vector/modifiers/moveable.cc: Enable.\n+\t* testsuite/23_containers/vector/resize/moveable.cc: Likewise.\n+\t* testsuite/23_containers/vector/cons/moveable.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2007-11-03  Paolo Carlini  <pcarlini@suse.de>\n \t    Kai-Uwe Bux  <bux@kubux.net>\n "}, {"sha": "6f7437aaf10989c2ae8d182c6d66a3f36e9d27a7", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -261,6 +261,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t   _ForwardIterator __result, allocator<_Tp>&)\n     { return std::uninitialized_copy(__first, __last, __result); }\n \n+  template<typename _InputIterator, typename _ForwardIterator,\n+\t   typename _Allocator>\n+    inline _ForwardIterator\n+    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,\n+\t\t\t   _ForwardIterator __result, _Allocator& __alloc)\n+    {\n+      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t\t\t\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(__last),\n+\t\t\t\t\t __result, __alloc);\n+    }\n+\n   template<typename _ForwardIterator, typename _Tp, typename _Allocator>\n     void\n     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,"}, {"sha": "bf2cc277ad665b9505972909e5c8dcd7fb48823d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -683,6 +683,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  done in constant time if the %vector has preallocated space\n        *  available.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       {\n@@ -694,6 +695,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \telse\n \t  _M_insert_aux(end(), __x);\n       }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_back(_Args&&... __args)\n+\t{\n+\t  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n+\t    {\n+\t      this->_M_impl.construct(this->_M_impl._M_finish,\n+\t\t\t\t      std::forward<_Args>(__args)...);\n+\t      ++this->_M_impl._M_finish;\n+\t    }\n+\t  else\n+\t    _M_insert_aux(end(), std::forward<_Args>(__args)...);\n+\t}\n+#endif\n \n       /**\n        *  @brief  Removes last element.\n@@ -711,6 +727,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->_M_impl.destroy(this->_M_impl._M_finish);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Inserts an object in %vector before specified iterator.\n+       *  @param  position  An iterator into the %vector.\n+       *  @param  args  Arguments.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert an object of type T constructed\n+       *  with T(std::forward<Args>(args)...) before the specified location.\n+       *  Note that this kind of operation could be expensive for a %vector\n+       *  and if it is frequently used the user should consider using\n+       *  std::list.\n+       */\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args&&... __args);\n+#endif\n+\n       /**\n        *  @brief  Inserts given value into %vector before specified iterator.\n        *  @param  position  An iterator into the %vector.\n@@ -725,6 +759,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Inserts given rvalue into %vector before specified iterator.\n+       *  @param  position  An iterator into the %vector.\n+       *  @param  x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given rvalue before\n+       *  the specified location.  Note that this kind of operation\n+       *  could be expensive for a %vector and if it is frequently\n+       *  used the user should consider using std::list.\n+       */\n+      iterator\n+      insert(iterator __position, value_type&& __x);\n+#endif\n+\n       /**\n        *  @brief  Inserts a number of copies of given data into the %vector.\n        *  @param  position  An iterator into the %vector.\n@@ -1014,8 +1064,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);\n \n       // Called by insert(p,x)\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       _M_insert_aux(iterator __position, const value_type& __x);\n+#else\n+      template<typename... _Args>\n+        void\n+        _M_insert_aux(iterator __position, _Args&&... __args);\n+#endif\n \n       // Called by the latter.\n       size_type"}, {"sha": "b097f44d2851a84fe17d6c9d3e2e9a577b386d0a", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 86, "deletions": 20, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -105,6 +105,26 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       return iterator(this->_M_impl._M_start + __n);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    typename vector<_Tp, _Alloc>::iterator\n+    vector<_Tp, _Alloc>::\n+    insert(iterator __position, value_type&& __x)\n+    {\n+      const size_type __n = __position - begin();\n+      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n+\t  && __position == end())\n+\t{\n+\t  this->_M_impl.construct(this->_M_impl._M_finish,\n+\t\t\t\t  std::forward<value_type>(__x));\n+\t  ++this->_M_impl._M_finish;\n+\t}\n+      else\n+        _M_insert_aux(__position, std::forward<value_type>(__x));\n+      return iterator(this->_M_impl._M_start + __n);\n+    }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     typename vector<_Tp, _Alloc>::iterator\n     vector<_Tp, _Alloc>::\n@@ -241,21 +261,53 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  }\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      typename vector<_Tp, _Alloc>::iterator\n+      vector<_Tp, _Alloc>::\n+      emplace(iterator __position, _Args&&... __args)\n+      {\n+\tconst size_type __n = __position - begin();\n+\tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n+\t    && __position == end())\n+\t  {\n+\t    this->_M_impl.construct(this->_M_impl._M_finish,\n+\t\t\t\t    std::forward<_Args>(__args)...);\n+\t    ++this->_M_impl._M_finish;\n+\t  }\n+\telse\n+\t  _M_insert_aux(__position, std::forward<_Args>(__args)...);\n+\treturn iterator(this->_M_impl._M_start + __n);\n+      }\n+\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      void\n+      vector<_Tp, _Alloc>::\n+      _M_insert_aux(iterator __position, _Args&&... __args)\n+      {\n+\t_Tp __x_copy(std::forward<_Args>(__args)...);\n+#else\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp, _Alloc>::\n     _M_insert_aux(iterator __position, const _Tp& __x)\n     {\n+#endif\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t{\n \t  this->_M_impl.construct(this->_M_impl._M_finish,\n-\t\t\t\t  *(this->_M_impl._M_finish - 1));\n+\t\t\t\t  _GLIBCXX_MOVE(*(this->_M_impl._M_finish\n+\t\t\t\t\t\t  - 1)));\n \t  ++this->_M_impl._M_finish;\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _Tp __x_copy = __x;\n-\t  std::copy_backward(__position.base(),\n-\t\t\t     this->_M_impl._M_finish - 2,\n-\t\t\t     this->_M_impl._M_finish - 1);\n-\t  *__position = __x_copy;\n+#endif\n+\t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n+\t\t\t\t  this->_M_impl._M_finish - 2,\n+\t\t\t\t  this->_M_impl._M_finish - 1);\n+\t  *__position = _GLIBCXX_MOVE(__x_copy);\n \t}\n       else\n \t{\n@@ -266,13 +318,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  try\n \t    {\n \t      __new_finish =\n-\t\tstd::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\tstd::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t    __position.base(), __new_start,\n \t\t\t\t\t    _M_get_Tp_allocator());\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t      this->_M_impl.construct(__new_finish, std::move(__x_copy));\n+#else\n \t      this->_M_impl.construct(__new_finish, __x);\n+#endif\n \t      ++__new_finish;\n \t      __new_finish =\n-\t\tstd::__uninitialized_copy_a(__position.base(),\n+\t\tstd::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t    this->_M_impl._M_finish,\n \t\t\t\t\t    __new_finish,\n \t\t\t\t\t    _M_get_Tp_allocator());\n@@ -301,21 +357,26 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     {\n       if (__n != 0)\n \t{\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t  value_type __x_copy = __x;\n+#endif\n \t  if (size_type(this->_M_impl._M_end_of_storage\n \t\t\t- this->_M_impl._M_finish) >= __n)\n \t    {\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t      value_type __x_copy = __x;\n+#endif\n \t      const size_type __elems_after = end() - __position;\n \t      pointer __old_finish(this->_M_impl._M_finish);\n \t      if (__elems_after > __n)\n \t\t{\n-\t\t  std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,\n+\t\t  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __n;\n-\t\t  std::copy_backward(__position.base(), __old_finish - __n,\n-\t\t\t\t     __old_finish);\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n+\t\t\t\t\t  __old_finish - __n, __old_finish);\n \t\t  std::fill(__position.base(), __position.base() + __n,\n \t\t\t    __x_copy);\n \t\t}\n@@ -326,7 +387,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t\t__x_copy,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __n - __elems_after;\n-\t\t  std::__uninitialized_copy_a(__position.base(), __old_finish,\n+\t\t  std::__uninitialized_move_a(__position.base(), __old_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __elems_after;\n@@ -342,15 +403,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t      try\n \t\t{\n \t\t  __new_finish =\n-\t\t    std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t\t__position.base(),\n \t\t\t\t\t\t__new_start,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t\t  std::__uninitialized_fill_n_a(__new_finish, __n, __x_copy,\n+#else\n \t\t  std::__uninitialized_fill_n_a(__new_finish, __n, __x,\n+#endif\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t  __new_finish += __n;\n \t\t  __new_finish =\n-\t\t    std::__uninitialized_copy_a(__position.base(),\n+\t\t    std::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t__new_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n@@ -405,13 +470,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\tpointer __old_finish(this->_M_impl._M_finish);\n \t\tif (__elems_after > __n)\n \t\t  {\n-\t\t    std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,\n+\t\t    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_finish += __n;\n-\t\t    std::copy_backward(__position.base(), __old_finish - __n,\n-\t\t\t\t       __old_finish);\n+\t\t    _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n+\t\t\t\t\t    __old_finish - __n, __old_finish);\n \t\t    std::copy(__first, __last, __position);\n \t\t  }\n \t\telse\n@@ -422,7 +487,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_finish += __n - __elems_after;\n-\t\t    std::__uninitialized_copy_a(__position.base(),\n+\t\t    std::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t\t__old_finish,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n@@ -439,15 +504,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\ttry\n \t\t  {\n \t\t    __new_finish =\n-\t\t      std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t      std::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t\t  __position.base(),\n \t\t\t\t\t\t  __new_start,\n \t\t\t\t\t\t  _M_get_Tp_allocator());\n \t\t    __new_finish =\n-\t\t      std::__uninitialized_copy_a(__first, __last, __new_finish,\n+\t\t      std::__uninitialized_copy_a(__first, __last,\n+\t\t\t\t\t\t  __new_finish,\n \t\t\t\t\t\t  _M_get_Tp_allocator());\n \t\t    __new_finish =\n-\t\t      std::__uninitialized_copy_a(__position.base(),\n+\t\t      std::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t\t  this->_M_impl._M_finish,\n \t\t\t\t\t\t  __new_finish,\n \t\t\t\t\t\t  _M_get_Tp_allocator());"}, {"sha": "977fbbd9ceec195bbcad272c7058bd197d49a0f6", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -278,6 +278,7 @@ namespace __debug\n       using _Base::data;\n \n       // 23.2.4.3 modifiers:\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const _Tp& __x)\n       {\n@@ -287,6 +288,18 @@ namespace __debug\n \t  this->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n       }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_back(_Args... __args)\n+\t{\n+\t  bool __realloc = _M_requires_reallocation(this->size() + 1);\n+\t  _Base::push_back(std::forward<_Args>(__args)...);\n+\t  if (__realloc)\n+\t    this->_M_invalidate_all();\n+\t  _M_update_guaranteed_capacity();\n+\t}\n+#endif\n \n       void\n       pop_back()\n@@ -297,6 +310,25 @@ namespace __debug\n \t_Base::pop_back();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args... __args)\n+\t{\n+\t  __glibcxx_check_insert(__position);\n+\t  bool __realloc = _M_requires_reallocation(this->size() + 1);\n+\t  difference_type __offset = __position - begin();\n+\t  typename _Base::iterator __res = _Base::emplace(__position.base(),\n+\t\t\t\t\t    std::forward<_Args>(__args)...);\n+\t  if (__realloc)\n+\t    this->_M_invalidate_all();\n+\t  else\n+\t    this->_M_invalidate_if(_After_nth(__offset, _M_base().begin()));\n+\t  _M_update_guaranteed_capacity();\n+\t  return iterator(__res, this);\n+\t}\n+#endif\n+\n       iterator\n       insert(iterator __position, const _Tp& __x)\n       {\n@@ -312,6 +344,24 @@ namespace __debug\n \treturn iterator(__res, this);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      insert(iterator __position, _Tp&& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\tbool __realloc = _M_requires_reallocation(this->size() + 1);\n+\tdifference_type __offset = __position - begin();\n+\ttypename _Base::iterator __res = _Base::insert(__position.base(),\n+\t\t\t\t\t\t       std::forward<_Tp>(__x));\n+\tif (__realloc)\n+\t  this->_M_invalidate_all();\n+\telse\n+\t  this->_M_invalidate_if(_After_nth(__offset, _M_base().begin()));\n+\t_M_update_guaranteed_capacity();\n+\treturn iterator(__res, this);\n+      }\n+#endif\n+\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {"}, {"sha": "688423e39b389284234167e69732fc88aa79f3bc", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fmoveable.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile } \n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}, {"sha": "15adafc26718fef8c4ef69cb1bff2767facf0943", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2007 Free Software Foundation, Inc."}, {"sha": "6e7d587300bccc4a2764c1d0510c6bb9417e38d6", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 945 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 995 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "532d89aea34d1ce0a96a807f146affce9d12b3cb", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 885 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 935 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "640aa798592eaeddb8799daf7a0abb4aa9d792b1", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 885 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 935 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "197131765668d76445e00b817dad03858fc32f07", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 986 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1036 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "f4dbc19da416909f6221a835556ea6aa3638a33a", "filename": "libstdc++-v3/testsuite/23_containers/vector/resize/moveable.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eef740212b6c2e5eb68d245ee5a2bda7f581841/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fresize%2Fmoveable.cc?ref=6eef740212b6c2e5eb68d245ee5a2bda7f581841", "patch": "@@ -1,4 +1,3 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc."}]}