{"sha": "f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "node_id": "C_kwDOANBUbNoAKGYyZTdkZDhiMDIzYjhkZTMwYWY2MDhhZmQ2OGUwZWNlZmE1YzFkZTY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T20:44:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T20:44:30Z"}, "message": "libstdc++: Implement LWG 3715 changes to view_interface::empty\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_util.h (view_interface::empty): Add\n\tpreferred overloads that use ranges::size when the range is\n\tsized as per LWG 3715.\n\t* testsuite/std/ranges/adaptors/lwg3715.cc: New test.", "tree": {"sha": "374f40f669575694fa234f5b8dade5c2cb33680d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374f40f669575694fa234f5b8dade5c2cb33680d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6/comments", "author": null, "committer": null, "parents": [{"sha": "19c5dfc29d83101e415590e778b99e7c37d9b730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c5dfc29d83101e415590e778b99e7c37d9b730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c5dfc29d83101e415590e778b99e7c37d9b730"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "880a0ce0143a48c1d927e87f2cfee6e4ed3d8af3", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "patch": "@@ -97,15 +97,27 @@ namespace ranges\n       constexpr bool\n       empty()\n       noexcept(noexcept(_S_empty(_M_derived())))\n-      requires forward_range<_Derived>\n+      requires forward_range<_Derived> && (!sized_range<_Derived>)\n       { return _S_empty(_M_derived()); }\n \n+      constexpr bool\n+      empty()\n+      noexcept(noexcept(ranges::size(_M_derived()) == 0))\n+      requires sized_range<_Derived>\n+      { return ranges::size(_M_derived()) == 0; }\n+\n       constexpr bool\n       empty() const\n       noexcept(noexcept(_S_empty(_M_derived())))\n-      requires forward_range<const _Derived>\n+      requires forward_range<const _Derived> && (!sized_range<const _Derived>)\n       { return _S_empty(_M_derived()); }\n \n+      constexpr bool\n+      empty() const\n+      noexcept(noexcept(ranges::size(_M_derived()) == 0))\n+      requires sized_range<const _Derived>\n+      { return ranges::size(_M_derived()) == 0; }\n+\n       constexpr explicit\n       operator bool() noexcept(noexcept(ranges::empty(_M_derived())))\n       requires requires { ranges::empty(_M_derived()); }"}, {"sha": "96ee7087be0931f7d72641cdf922dce1085b02c3", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lwg3715.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3715.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e7dd8b023b8de30af608afd68e0ecefa5c1de6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3715.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3715.cc?ref=f2e7dd8b023b8de30af608afd68e0ecefa5c1de6", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+// Verify LWG 3715 changes.\n+\n+#include <ranges>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream ints(\"0 1 2 3 4\");\n+  auto i = std::views::istream<int>(ints);\n+  auto r4 = std::views::counted(i.begin(), 4) | std::views::chunk(2);\n+  VERIFY( !r4.empty() );\n+}\n+\n+void\n+test02()\n+{\n+  std::istringstream ints(\"0 1 2 3 4\");\n+  auto i = std::views::istream<int>(ints);\n+  auto r0 = std::views::counted(i.begin(), 0) | std::views::chunk(2);\n+  VERIFY( r0.empty() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}