{"sha": "3cc50edcc07024dd3d34067654794a45f21dd408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NjNTBlZGNjMDcwMjRkZDNkMzQwNjc2NTQ3OTRhNDVmMjFkZDQwOA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-09-06T19:25:30Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-09-06T19:25:30Z"}, "message": "re PR libfortran/33298 (Wrong code for SPREAD on zero-sized arrays)\n\n2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/33298\n\t* intrinsics/spread_generic.c(spread_internal): Enable\n\tbounds checking by comparing extents if the bounds_check\n\toption has been set.  If any extent is <=0, return early.\n\n2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/33298\n\t* spread_zerosize_1.f90:  New test case.\n\t* spread_bounds_1.f90:  New test case.\n\nFrom-SVN: r128206", "tree": {"sha": "7548143d4fd494513065439cea1d484e2a9228a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7548143d4fd494513065439cea1d484e2a9228a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cc50edcc07024dd3d34067654794a45f21dd408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc50edcc07024dd3d34067654794a45f21dd408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc50edcc07024dd3d34067654794a45f21dd408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc50edcc07024dd3d34067654794a45f21dd408/comments", "author": null, "committer": null, "parents": [{"sha": "6f6cc094a09dca5d3ba1ad34c58e0007475f75ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6cc094a09dca5d3ba1ad34c58e0007475f75ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6cc094a09dca5d3ba1ad34c58e0007475f75ea"}], "stats": {"total": 102, "additions": 92, "deletions": 10}, "files": [{"sha": "8771b42e522235c9e12fdf798731429df33f4361", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cc50edcc07024dd3d34067654794a45f21dd408", "patch": "@@ -1,3 +1,9 @@\n+2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/33298\n+\t* spread_zerosize_1.f90:  New test case.\n+\t* spread_bounds_1.f90:  New test case.\n+\n 2007-09-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/32674"}, {"sha": "7e5bc651ff5fb8f045ca901b3ec918152f1ee3d8", "filename": "gcc/testsuite/gfortran.dg/spread_bounds_1.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_bounds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_bounds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_bounds_1.f90?ref=3cc50edcc07024dd3d34067654794a45f21dd408", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Incorrect extent in return value of SPREAD intrinsic in dimension 2: is 3, should be 2\" }\n+program main\n+  integer :: source(2), target(2,3)\n+  data source /1,2/\n+  integer :: times\n+  times = 2\n+  target = spread(source,2,times)\n+end program main\n+! { dg-output \"Fortran runtime error:  Incorrect extent in return value of SPREAD intrinsic in dimension 2: is 3, should be 2\"\n+"}, {"sha": "98a28484cf7ce23638109a6e2d409a74bbe7b9f8", "filename": "gcc/testsuite/gfortran.dg/spread_zerosize_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_zerosize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc50edcc07024dd3d34067654794a45f21dd408/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_zerosize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_zerosize_1.f90?ref=3cc50edcc07024dd3d34067654794a45f21dd408", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do run }\n+! PR 33298 - zero-sized arrays for spread were handled\n+!            incorrectly.\n+\n+program main\n+  real :: x(0,3), y(0)\n+  x = spread(y,2,3)\n+end"}, {"sha": "9fc369e678c8035bf93fde5b2f947a3d5a0cd560", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc50edcc07024dd3d34067654794a45f21dd408/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc50edcc07024dd3d34067654794a45f21dd408/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3cc50edcc07024dd3d34067654794a45f21dd408", "patch": "@@ -1,3 +1,10 @@\n+2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/33298\n+\t* intrinsics/spread_generic.c(spread_internal): Enable\n+\tbounds checking by comparing extents if the bounds_check\n+\toption has been set.  If any extent is <=0, return early.\n+\n 2007-09-06  David Edelsohn  <edelsohn@gnu.org>\n \n \t* libgfortran.h: Include config.h first."}, {"sha": "3752717aa8e35d840dbf9c7c05826d1f38882ad7", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc50edcc07024dd3d34067654794a45f21dd408/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc50edcc07024dd3d34067654794a45f21dd408/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=3cc50edcc07024dd3d34067654794a45f21dd408", "patch": "@@ -110,26 +110,75 @@ spread_internal (gfc_array_char *ret, const gfc_array_char *source,\n     }\n   else\n     {\n+      int zero_sized;\n+\n+      zero_sized = 0;\n+\n       dim = 0;\n       if (GFC_DESCRIPTOR_RANK(ret) != rrank)\n \truntime_error (\"rank mismatch in spread()\");\n \n-      for (n = 0; n < rrank; n++)\n+      if (compile_options.bounds_check)\n \t{\n-\t  if (n == *along - 1)\n+\t  for (n = 0; n < rrank; n++)\n \t    {\n-\t      rdelta = ret->dim[n].stride * size;\n+\t      index_type ret_extent;\n+\n+\t      ret_extent = ret->dim[n].ubound + 1 - ret->dim[n].lbound;\n+\t      if (n == *along - 1)\n+\t\t{\n+\t\t  rdelta = ret->dim[n].stride * size;\n+\n+\t\t  if (ret_extent != ncopies)\n+\t\t    runtime_error(\"Incorrect extent in return value of SPREAD\"\n+\t\t\t\t  \" intrinsic in dimension %d: is %ld,\"\n+\t\t\t\t  \" should be %ld\", n+1, (long int) ret_extent,\n+\t\t\t\t  (long int) ncopies);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  count[dim] = 0;\n+\t\t  extent[dim] = source->dim[dim].ubound + 1\n+\t\t    - source->dim[dim].lbound;\n+\t\t  if (ret_extent != extent[dim])\n+\t\t    runtime_error(\"Incorrect extent in return value of SPREAD\"\n+\t\t\t\t  \" intrinsic in dimension %d: is %ld,\"\n+\t\t\t\t  \" should be %ld\", n+1, (long int) ret_extent,\n+\t\t\t\t  (long int) extent[dim]);\n+\t\t    \n+\t\t  if (extent[dim] <= 0)\n+\t\t    zero_sized = 1;\n+\t\t  sstride[dim] = source->dim[dim].stride * size;\n+\t\t  rstride[dim] = ret->dim[n].stride * size;\n+\t\t  dim++;\n+\t\t}\n \t    }\n-\t  else\n+\t}\n+      else\n+\t{\n+\t  for (n = 0; n < rrank; n++)\n \t    {\n-\t      count[dim] = 0;\n-\t      extent[dim] = source->dim[dim].ubound + 1\n-\t\t- source->dim[dim].lbound;\n-\t      sstride[dim] = source->dim[dim].stride * size;\n-\t      rstride[dim] = ret->dim[n].stride * size;\n-\t      dim++;\n+\t      if (n == *along - 1)\n+\t\t{\n+\t\t  rdelta = ret->dim[n].stride * size;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  count[dim] = 0;\n+\t\t  extent[dim] = source->dim[dim].ubound + 1\n+\t\t    - source->dim[dim].lbound;\n+\t\t  if (extent[dim] <= 0)\n+\t\t    zero_sized = 1;\n+\t\t  sstride[dim] = source->dim[dim].stride * size;\n+\t\t  rstride[dim] = ret->dim[n].stride * size;\n+\t\t  dim++;\n+\t\t}\n \t    }\n \t}\n+\n+      if (zero_sized)\n+\treturn;\n+\n       if (sstride[0] == 0)\n \tsstride[0] = size;\n     }"}]}