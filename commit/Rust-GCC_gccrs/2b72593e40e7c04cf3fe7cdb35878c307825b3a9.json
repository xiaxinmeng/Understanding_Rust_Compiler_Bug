{"sha": "2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3MjU5M2U0MGU3YzA0Y2YzZmU3Y2RiMzU4NzhjMzA3ODI1YjNhOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-22T06:25:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-22T06:25:09Z"}, "message": "builtin-attrs.def: Fix comment formatting.\n\n\t* builtin-attrs.def: Fix comment formatting.\n\t* c-pretty-print.c: Likewise.\n\t* diagnostic.h: Likewise.\n\t* langhooks.h: Likewise.\n\t* recog.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* tree.def: Likewise.\n\nFrom-SVN: r70676", "tree": {"sha": "e50a7ba11e4692298c71e9fbaa8414131cd2a534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e50a7ba11e4692298c71e9fbaa8414131cd2a534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/comments", "author": null, "committer": null, "parents": [{"sha": "8a4a2253e3f665d4ed0d9bc7e35068081c338a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4a2253e3f665d4ed0d9bc7e35068081c338a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4a2253e3f665d4ed0d9bc7e35068081c338a15"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "e7c933549568f3c032e66e6e43d6823a1275acda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -1,3 +1,13 @@\n+2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtin-attrs.def: Fix comment formatting.\n+\t* c-pretty-print.c: Likewise.\n+\t* diagnostic.h: Likewise.\n+\t* langhooks.h: Likewise.\n+\t* recog.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* tree.def: Likewise.\n+\n 2003-08-22  Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/m68k-protos.h: Convert to ISO C90."}, {"sha": "92fe65e1e0df27570dd54eb135fcd361a7d3d04b", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -104,22 +104,22 @@ DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, \\\n \t\t\tATTR_NOTHROW_LIST)\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_3, ATTR_NONNULL, ATTR_LIST_3, \\\n \t\t\tATTR_NOTHROW_LIST)\n-/* Nothrow functions whose first and second parameters are nonnull pointers. */\n+/* Nothrow functions whose first and second parameters are nonnull pointers.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_2, ATTR_NONNULL, ATTR_LIST_2, \\\n \t\t\tATTR_NOTHROW_NONNULL_1)\n-/* Nothrow functions whose first and fourth parameters are nonnull pointers. */\n+/* Nothrow functions whose first and fourth parameters are nonnull pointers.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_4, ATTR_NONNULL, ATTR_LIST_4, \\\n \t\t\tATTR_NOTHROW_NONNULL_1)\n-/* Nothrow const functions whose first parameter is a nonnull pointer. */\n+/* Nothrow const functions whose first parameter is a nonnull pointer.  */\n DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_NONNULL_1, ATTR_CONST, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_1)\n-/* Nothrow pure functions whose first parameter is a nonnull pointer. */\n+/* Nothrow pure functions whose first parameter is a nonnull pointer.  */\n DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_NONNULL_1, ATTR_PURE, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_1)\n-/* Nothrow pure functions whose first and second parameters are nonnull pointers. */\n+/* Nothrow pure functions whose first and second parameters are nonnull pointers.  */\n DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_NONNULL_1_2, ATTR_PURE, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_1_2)\n-/* Nothrow malloc functions whose first parameter is a nonnull pointer. */\n+/* Nothrow malloc functions whose first parameter is a nonnull pointer.  */\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_NONNULL_1, ATTR_MALLOC, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_1)\n "}, {"sha": "6e12d6134d85150bb8be560efc30728d9d9bc0bc", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -1142,7 +1142,7 @@ pp_c_postfix_expression (c_pretty_printer ppi, tree e)\n           pp_c_id_expression (ppi, TREE_OPERAND (e, 0));\n           break;\n         }\n-      /* else fall through.   */\n+      /* else fall through.  */\n \n     default:\n       pp_primary_expression (ppi, e);"}, {"sha": "cf331e0df5fbee16d7bd2a0a279774840682ff1b", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -57,7 +57,7 @@ typedef diagnostic_starter_fn diagnostic_finalizer_fn;\n    the context of a diagnostic message.  */\n struct diagnostic_context\n {\n-  /* Where most of the diagnostic formatting work is done.   */\n+  /* Where most of the diagnostic formatting work is done.  */\n   pretty_printer *printer;\n \n   /* The number of times we have issued diagnostics.  */"}, {"sha": "7bcd4353734047b76b53eefafc19b0f9d972833a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -362,7 +362,7 @@ struct lang_hooks\n   tree (*expr_size) (tree);\n \n   /* Called from uninitialized_vars_warning to find out if a variable is\n-     uninitialized based on DECL_INITIAL. */\n+     uninitialized based on DECL_INITIAL.  */\n   bool (*decl_uninit) (tree);\n \n   /* Pointers to machine-independent attribute tables, for front ends"}, {"sha": "02ae71d5d538732dc7ca61a9b79f268d9ba08f49", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -1949,7 +1949,7 @@ offsettable_address_p (int strictp, enum machine_mode mode, rtx y)\n    because the amount of the increment depends on the mode.  */\n \n int\n-mode_dependent_address_p (rtx addr ATTRIBUTE_UNUSED /* Maybe used in GO_IF_MODE_DEPENDENT_ADDRESS. */)\n+mode_dependent_address_p (rtx addr ATTRIBUTE_UNUSED /* Maybe used in GO_IF_MODE_DEPENDENT_ADDRESS.  */)\n {\n   GO_IF_MODE_DEPENDENT_ADDRESS (addr, win);\n   return 0;"}, {"sha": "36a858536c7480ae5ab1273a239b4306e46755a4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -3163,7 +3163,7 @@ simplify_rtx (rtx x)\n       if (swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))\n \treturn simplify_gen_binary (code, mode, XEXP (x, 1), XEXP (x, 0));\n \n-      /* Fall through.... */\n+      /* Fall through....  */\n \n     case '2':\n       return simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));"}, {"sha": "085f9e478571b21f57971842d0cefa3b8e88944a", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b72593e40e7c04cf3fe7cdb35878c307825b3a9/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=2b72593e40e7c04cf3fe7cdb35878c307825b3a9", "patch": "@@ -274,7 +274,7 @@ DEFTREECODE (COMPLEX_CST, \"complex_cst\", 'c', 0)\n /* Contents are in TREE_VECTOR_CST_ELTS field.  */\n DEFTREECODE (VECTOR_CST, \"vector_cst\", 'c', 0)     \n \n-/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields. */\n+/* Contents are TREE_STRING_LENGTH and TREE_STRING_POINTER fields.  */\n DEFTREECODE (STRING_CST, \"string_cst\", 'c', 0)\n \n /* Declarations.  All references to names are represented as ..._DECL"}]}