{"sha": "b17e69852ea999547305b19e9c8da385f6c31e1e", "node_id": "C_kwDOANBUbNoAKGIxN2U2OTg1MmVhOTk5NTQ3MzA1YjE5ZTljOGRhMzg1ZjZjMzFlMWU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-27T08:50:06Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-27T11:24:37Z"}, "message": "Fix missing dead code analysis ICE on local enum definition\n\nWhen resolving local enum's within a Block the name resolution info is\nnot at the top of the stack so this patch introduces a new mappings class\nfor miscellaneous name resolutions which can be used during path analaysis.\n\nFixes #1272", "tree": {"sha": "8c1d4cb6c632a7bb468454b1b8c24d50743d665d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1d4cb6c632a7bb468454b1b8c24d50743d665d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17e69852ea999547305b19e9c8da385f6c31e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17e69852ea999547305b19e9c8da385f6c31e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17e69852ea999547305b19e9c8da385f6c31e1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17e69852ea999547305b19e9c8da385f6c31e1e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b37c71dd77db88e769b1119646cd25e99065c0da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c71dd77db88e769b1119646cd25e99065c0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37c71dd77db88e769b1119646cd25e99065c0da"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "19fbeb9ec9fdccc20c8dbdcdc6abb3c6c347fb84", "filename": "gcc/rust/checks/lints/rust-lint-marklive.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc?ref=b17e69852ea999547305b19e9c8da385f6c31e1e", "patch": "@@ -273,8 +273,11 @@ MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id)\n {\n   if (!resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n-      bool ok = resolver->lookup_resolved_type (ast_node_id, &ref_node_id);\n-      rust_assert (ok);\n+      if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n+\t{\n+\t  bool ok = resolver->lookup_resolved_misc (ast_node_id, &ref_node_id);\n+\t  rust_assert (ok);\n+\t}\n     }\n }\n "}, {"sha": "ba8c1a821e36c0ee342029508b76f3f1ababeb84", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=b17e69852ea999547305b19e9c8da385f6c31e1e", "patch": "@@ -499,5 +499,25 @@ Resolver::lookup_resolved_macro (NodeId refId, NodeId *defId)\n   return true;\n }\n \n+void\n+Resolver::insert_resolved_misc (NodeId refId, NodeId defId)\n+{\n+  auto it = misc_resolved_items.find (refId);\n+  rust_assert (it == misc_resolved_items.end ());\n+\n+  misc_resolved_items[refId] = defId;\n+}\n+\n+bool\n+Resolver::lookup_resolved_misc (NodeId refId, NodeId *defId)\n+{\n+  auto it = misc_resolved_items.find (refId);\n+  if (it == misc_resolved_items.end ())\n+    return false;\n+\n+  *defId = it->second;\n+  return true;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "3716bb053835042f0e02ce387b587c60b2b19ab0", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=b17e69852ea999547305b19e9c8da385f6c31e1e", "patch": "@@ -126,6 +126,9 @@ class Resolver\n   void insert_resolved_macro (NodeId refId, NodeId defId);\n   bool lookup_resolved_macro (NodeId refId, NodeId *defId);\n \n+  void insert_resolved_misc (NodeId refId, NodeId defId);\n+  bool lookup_resolved_misc (NodeId refId, NodeId *defId);\n+\n   // proxy for scoping\n   Scope &get_name_scope () { return name_scope; }\n   Scope &get_type_scope () { return type_scope; }\n@@ -202,6 +205,9 @@ class Resolver\n   std::map<NodeId, NodeId> resolved_labels;\n   std::map<NodeId, NodeId> resolved_macros;\n \n+  // misc\n+  std::map<NodeId, NodeId> misc_resolved_items;\n+\n   // keep track of the current module scope ids\n   std::vector<NodeId> current_module_stack;\n };"}, {"sha": "2450576f6e0da4d284162d73f92b2e7a2460c07c", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=b17e69852ea999547305b19e9c8da385f6c31e1e", "patch": "@@ -462,6 +462,11 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n       resolver->insert_resolved_type (expr_mappings.get_nodeid (),\n \t\t\t\t      resolved_node_id);\n     }\n+  else\n+    {\n+      resolver->insert_resolved_misc (expr_mappings.get_nodeid (),\n+\t\t\t\t      resolved_node_id);\n+    }\n \n   infered = tyseg;\n }"}, {"sha": "08adaaf944b55903d277519db173d4fe6ec293cf", "filename": "gcc/testsuite/rust/compile/issue-1272.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1272.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17e69852ea999547305b19e9c8da385f6c31e1e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1272.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1272.rs?ref=b17e69852ea999547305b19e9c8da385f6c31e1e", "patch": "@@ -0,0 +1,8 @@\n+fn main() -> i32 {\n+    enum E {\n+        X(u8),\n+    }\n+    let _v = E::X(4);\n+\n+    0\n+}"}]}