{"sha": "e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjNGY3ZmJkNmE0ZWU4ZTNhMTQ2ODUxNDA0NGJkOTQxZmEyODUyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-28T12:25:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-28T12:25:26Z"}, "message": "tree-vect-loop.c (vect_create_epilog_for_reduction): Use STMT_VINFO_REDUC_IDX from the actual stmt.\n\n2019-10-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n\tSTMT_VINFO_REDUC_IDX from the actual stmt.\n\t(vect_transform_reduction): Likewise.\n\t(vectorizable_reduction): Compute the reduction chain length,\n\tdo not recompute the reduction operand index.  Remove no longer\n\tnecessary restriction for condition reduction chains.\n\nFrom-SVN: r277513", "tree": {"sha": "ab8cb91c02d4b31498048a68e4debf7b7e00af00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8cb91c02d4b31498048a68e4debf7b7e00af00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb73e4e734e2a3fb8034137806a7c676b5d5f366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb73e4e734e2a3fb8034137806a7c676b5d5f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb73e4e734e2a3fb8034137806a7c676b5d5f366"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "dc39bf8e18beda32c107eeb2192f3f59e5286ed1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "patch": "@@ -1,3 +1,12 @@\n+2019-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n+\tSTMT_VINFO_REDUC_IDX from the actual stmt.\n+\t(vect_transform_reduction): Likewise.\n+\t(vectorizable_reduction): Compute the reduction chain length,\n+\tdo not recompute the reduction operand index.  Remove no longer\n+\tnecessary restriction for condition reduction chains.\n+\n 2019-10-28  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/92225"}, {"sha": "14d072b4cf763fd429cdd3ef6edb7ececcc7f3cb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c4f7fbd6a4ee8e3a1468514044bd941fa28522/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e0c4f7fbd6a4ee8e3a1468514044bd941fa28522", "patch": "@@ -4263,9 +4263,9 @@ vect_create_epilog_for_reduction (stmt_vec_info stmt_info,\n \t (CCOMPARE).  The then and else values mirror the main VEC_COND_EXPR:\n \t the reduction phi corresponds to NEW_PHI_TREE and the new values\n \t correspond to INDEX_BEFORE_INCR.  */\n-      gcc_assert (STMT_VINFO_REDUC_IDX (reduc_info) >= 1);\n+      gcc_assert (STMT_VINFO_REDUC_IDX (stmt_info) >= 1);\n       tree index_cond_expr;\n-      if (STMT_VINFO_REDUC_IDX (reduc_info) == 2)\n+      if (STMT_VINFO_REDUC_IDX (stmt_info) == 2)\n \tindex_cond_expr = build3 (VEC_COND_EXPR, cr_index_vector_type,\n \t\t\t\t  ccompare, indx_before_incr, new_phi_tree);\n       else\n@@ -5720,19 +5720,24 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n   gcc_assert (!STMT_VINFO_RELATED_STMT (phi_info));\n   gphi *reduc_def_phi = as_a <gphi *> (phi_info->stmt);\n \n-  /* Verify following REDUC_IDX from the latch def leads us back to the PHI.  */\n+  /* Verify following REDUC_IDX from the latch def leads us back to the PHI\n+     and compute the reduction chain length.  */\n   tree reduc_def = PHI_ARG_DEF_FROM_EDGE (reduc_def_phi,\n \t\t\t\t\t  loop_latch_edge (loop));\n+  unsigned reduc_chain_length = 0;\n+  bool only_slp_reduc_chain = true;\n   while (reduc_def != PHI_RESULT (reduc_def_phi))\n     {\n       stmt_vec_info def = loop_vinfo->lookup_def (reduc_def);\n       def = vect_stmt_to_vectorize (def);\n       gcc_assert (STMT_VINFO_REDUC_IDX (def) != -1);\n+      if (!REDUC_GROUP_FIRST_ELEMENT (def))\n+\tonly_slp_reduc_chain = false;\n       reduc_def = gimple_op (def->stmt, 1 + STMT_VINFO_REDUC_IDX (def));\n+      reduc_chain_length++;\n     }\n \n   reduc_def = PHI_RESULT (reduc_def_phi);\n-  int reduc_index = -1;\n   for (i = 0; i < op_type; i++)\n     {\n       tree op = gimple_op (stmt, i + 1);\n@@ -5753,7 +5758,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       if ((dt == vect_reduction_def || dt == vect_nested_cycle)\n \t  && op == reduc_def)\n \t{\n-\t  reduc_index = i;\n \t  continue;\n \t}\n \n@@ -5792,10 +5796,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n   if (!vectype_in)\n     vectype_in = vectype_out;\n   STMT_VINFO_REDUC_VECTYPE_IN (reduc_info) = vectype_in;\n-  /* For the SSA cycle we store on each participating stmt the operand index\n-     where the cycle continues.  Store the one relevant for the actual\n-     operation in the reduction meta.  */\n-  STMT_VINFO_REDUC_IDX (reduc_info) = reduc_index;\n \n   enum vect_reduction_type v_reduc_type = STMT_VINFO_REDUC_TYPE (phi_info);\n   STMT_VINFO_REDUC_TYPE (reduc_info) = v_reduc_type;\n@@ -5805,28 +5805,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       if (slp_node)\n \treturn false;\n \n-      /* TODO: We can't yet handle reduction chains, since we need to treat\n-\t each COND_EXPR in the chain specially, not just the last one.\n-\t E.g. for:\n-\n-\t    x_1 = PHI <x_3, ...>\n-\t    x_2 = a_2 ? ... : x_1;\n-\t    x_3 = a_3 ? ... : x_2;\n-\n-\t we're interested in the last element in x_3 for which a_2 || a_3\n-\t is true, whereas the current reduction chain handling would\n-\t vectorize x_2 as a normal VEC_COND_EXPR and only treat x_3\n-\t as a reduction operation.  */\n-      if (reduc_index == -1)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"conditional reduction chains not supported\\n\");\n-\t  return false;\n-\t}\n-\n       /* When the condition uses the reduction value in the condition, fail.  */\n-      if (reduc_index == 0)\n+      if (STMT_VINFO_REDUC_IDX (stmt_info) == 0)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5995,17 +5975,18 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t outer-loop vectorization is safe.  */\n       if (needs_fold_left_reduction_p (scalar_type, orig_code))\n \t{\n-\t  STMT_VINFO_REDUC_TYPE (reduc_info)\n-\t    = reduction_type = FOLD_LEFT_REDUCTION;\n-\t  /* When vectorizing a reduction chain w/o SLP the reduction PHI is not\n-\t     directy used in stmt.  */\n-\t  if (reduc_index == -1)\n+\t  /* When vectorizing a reduction chain w/o SLP the reduction PHI\n+\t     is not directy used in stmt.  */\n+\t  if (!only_slp_reduc_chain\n+\t      && reduc_chain_length != 1)\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"in-order reduction chain without SLP.\\n\");\n \t      return false;\n \t    }\n+\t  STMT_VINFO_REDUC_TYPE (reduc_info)\n+\t    = reduction_type = FOLD_LEFT_REDUCTION;\n \t}\n       else if (!commutative_tree_code (orig_code)\n \t       || !associative_tree_code (orig_code))\n@@ -6410,7 +6391,7 @@ vect_transform_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n      reduction variable.  */\n   stmt_vec_info phi_info = STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info));\n   gphi *reduc_def_phi = as_a <gphi *> (phi_info->stmt);\n-  int reduc_index = STMT_VINFO_REDUC_IDX (reduc_info);\n+  int reduc_index = STMT_VINFO_REDUC_IDX (stmt_info);\n   tree vectype_in = STMT_VINFO_REDUC_VECTYPE_IN (reduc_info);\n \n   if (slp_node)"}]}