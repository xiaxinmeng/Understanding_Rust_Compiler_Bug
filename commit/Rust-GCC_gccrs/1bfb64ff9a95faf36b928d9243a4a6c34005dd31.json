{"sha": "1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmYjY0ZmY5YTk1ZmFmMzZiOTI4ZDkyNDNhNGE2YzM0MDA1ZGQzMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-25T21:14:43Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-25T21:14:43Z"}, "message": "2003-09-25  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/DatagramChannelImpl.java\n\t(getNativeFD): New method.\n\t* gnu/java/nio/SelectionKeyImpl.java\n\t(SelectionKeyImpl): Class made abstract.\n\t(fd): Removed.\n\t(SelectionKeyImpl): Remove fd argument.\n\t(getNativeFD): New method.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(getNativeFD): New method.\n\tgnu/java/nio/DatagramChannelSelectionKey.java,\n\t* gnu/java/nio/SocketChannelSelectionKey.java:\n\tNew files.\n\t* Makefile.am (ordinary_java_source_files):\n\tAdded new files gnu/java/nio/DatagramChannelSelectionKey.java and\n\tgnu/java/nio/SocketChannelSelectionKey.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r71797", "tree": {"sha": "17b727bada732a4e8ec9d8c21dcfa11399a0d8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b727bada732a4e8ec9d8c21dcfa11399a0d8ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/comments", "author": null, "committer": null, "parents": [{"sha": "73a1415eb4165742522002a28850037448b9f477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a1415eb4165742522002a28850037448b9f477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a1415eb4165742522002a28850037448b9f477"}], "stats": {"total": 158, "additions": 154, "deletions": 4}, "files": [{"sha": "70cc0c546128fb949a885904e1548ee7f3ef59c5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -1,3 +1,22 @@\n+2003-09-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/DatagramChannelImpl.java\n+\t(getNativeFD): New method.\n+\t* gnu/java/nio/SelectionKeyImpl.java\n+\t(SelectionKeyImpl): Class made abstract.\n+\t(fd): Removed.\n+\t(SelectionKeyImpl): Remove fd argument.\n+\t(getNativeFD): New method.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(getNativeFD): New method.\n+\tgnu/java/nio/DatagramChannelSelectionKey.java,\n+\t* gnu/java/nio/SocketChannelSelectionKey.java:\n+\tNew files.\n+\t* Makefile.am (ordinary_java_source_files):\n+\tAdded new files gnu/java/nio/DatagramChannelSelectionKey.java and\n+\tgnu/java/nio/SocketChannelSelectionKey.java.\n+\t* Makefile.in: Regenerated.\n+\n 2003-09-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/lang/reflect/Proxy.java"}, {"sha": "2ba65bf3b817dc86f0f5b1f7f7a400d5ec66bea4", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -2183,6 +2183,7 @@ gnu/java/math/MPN.java \\\n gnu/java/net/PlainDatagramSocketImpl.java \\\n gnu/java/net/PlainSocketImpl.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n+gnu/java/nio/DatagramChannelSelectionKey.java \\\n gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n@@ -2193,6 +2194,7 @@ gnu/java/nio/SelectorImpl.java \\\n gnu/java/nio/SelectorProviderImpl.java \\\n gnu/java/nio/ServerSocketChannelImpl.java \\\n gnu/java/nio/SocketChannelImpl.java \\\n+gnu/java/nio/SocketChannelSelectionKey.java \\\n gnu/java/nio/charset/ISO_8859_1.java \\\n gnu/java/nio/charset/Provider.java \\\n gnu/java/nio/charset/US_ASCII.java \\"}, {"sha": "e744c0ddfb65231deaf1b80a278028e88ea84a1d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -1901,6 +1901,7 @@ gnu/java/math/MPN.java \\\n gnu/java/net/PlainDatagramSocketImpl.java \\\n gnu/java/net/PlainSocketImpl.java \\\n gnu/java/nio/DatagramChannelImpl.java \\\n+gnu/java/nio/DatagramChannelSelectionKey.java \\\n gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n@@ -1911,6 +1912,7 @@ gnu/java/nio/SelectorImpl.java \\\n gnu/java/nio/SelectorProviderImpl.java \\\n gnu/java/nio/ServerSocketChannelImpl.java \\\n gnu/java/nio/SocketChannelImpl.java \\\n+gnu/java/nio/SocketChannelSelectionKey.java \\\n gnu/java/nio/charset/ISO_8859_1.java \\\n gnu/java/nio/charset/Provider.java \\\n gnu/java/nio/charset/US_ASCII.java \\\n@@ -3026,13 +3028,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/net/natPlainDatagramSocketImpl.P \\\n .deps/gnu/java/net/natPlainSocketImpl.P \\\n .deps/gnu/java/nio/DatagramChannelImpl.P \\\n+.deps/gnu/java/nio/DatagramChannelSelectionKey.P \\\n .deps/gnu/java/nio/FileLockImpl.P .deps/gnu/java/nio/NIOConstants.P \\\n .deps/gnu/java/nio/NIODatagramSocket.P .deps/gnu/java/nio/NIOSocket.P \\\n .deps/gnu/java/nio/PipeImpl.P .deps/gnu/java/nio/SelectionKeyImpl.P \\\n .deps/gnu/java/nio/SelectorImpl.P \\\n .deps/gnu/java/nio/SelectorProviderImpl.P \\\n .deps/gnu/java/nio/ServerSocketChannelImpl.P \\\n .deps/gnu/java/nio/SocketChannelImpl.P \\\n+.deps/gnu/java/nio/SocketChannelSelectionKey.P \\\n .deps/gnu/java/nio/charset/ISO_8859_1.P \\\n .deps/gnu/java/nio/charset/Provider.P \\\n .deps/gnu/java/nio/charset/US_ASCII.P \\"}, {"sha": "b2dcd3242dd436575cdbe91c3dc243f006a27cf9", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -64,6 +64,11 @@ protected DatagramChannelImpl (SelectorProvider provider)\n     super (provider);\n     socket = new NIODatagramSocket (new PlainDatagramSocketImpl(), this);\n   }\n+\n+  public int getNativeFD()\n+  {\n+    return socket.getImpl().getNativeFD();\n+  }\n     \n   public DatagramSocket socket ()\n   {"}, {"sha": "33f8123e9e486657c1f87a4586356e40b17139f1", "filename": "libjava/gnu/java/nio/DatagramChannelSelectionKey.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelSelectionKey.java?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -0,0 +1,59 @@\n+/* DatagramChannelSelectionKey.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.nio;\n+\n+import java.nio.channels.spi.AbstractSelectableChannel;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class DatagramChannelSelectionKey\n+  extends SelectionKeyImpl\n+{\n+  public DatagramChannelSelectionKey (AbstractSelectableChannel channel,\n+                                      SelectorImpl selector)\n+  {\n+    super (channel, selector);\n+  }\n+\n+  public int getNativeFD()\n+  {\n+    return ((DatagramChannelImpl) ch).getNativeFD();\n+  }\n+}"}, {"sha": "0f704c9fb91194e6f8853876a9087efaf232dc7c", "filename": "libjava/gnu/java/nio/SelectionKeyImpl.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -43,19 +43,17 @@\n import java.nio.channels.Selector;\n import java.nio.channels.spi.AbstractSelectionKey;\n \n-public class SelectionKeyImpl extends AbstractSelectionKey\n+public abstract class SelectionKeyImpl extends AbstractSelectionKey\n {\n-  int fd;\n   private int readyOps;\n   private int interestOps;\n   private SelectorImpl impl;\n   private SelectableChannel ch;\n \n-  public SelectionKeyImpl (SelectableChannel ch, SelectorImpl impl, int fd)\n+  public SelectionKeyImpl (SelectableChannel ch, SelectorImpl impl)\n   {\n     this.ch  = ch;\n     this.impl = impl;\n-    this.fd  = fd;\n   }\n \n   public SelectableChannel channel ()\n@@ -101,4 +99,6 @@ public Selector selector ()\n   {\n     return impl;\n   }\n+\n+  public abstract int getNativeFD();\n }"}, {"sha": "589296f516639972aa91d7adaa89ab25bcdac80b", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -98,6 +98,11 @@ public void finalizer()\n       }\n   }\n \n+  int getNativeFD()\n+  {\n+    return socket.getImpl().getNativeFD();\n+  }\n+\n   protected void implCloseSelectableChannel () throws IOException\n   {\n     connected = false;"}, {"sha": "dcbc7bd372a75cc338f3278a19031e8774272e0f", "filename": "libjava/gnu/java/nio/SocketChannelSelectionKey.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfb64ff9a95faf36b928d9243a4a6c34005dd31/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelSelectionKey.java?ref=1bfb64ff9a95faf36b928d9243a4a6c34005dd31", "patch": "@@ -0,0 +1,56 @@\n+/* SocketChannelSelectionKey.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.nio;\n+\n+import java.nio.channels.spi.AbstractSelectableChannel;\n+\n+public final class SocketChannelSelectionKey\n+  extends SelectionKeyImpl\n+{\n+  public SocketChannelSelectionKey (AbstractSelectableChannel channel,\n+                                    SelectorImpl selector)\n+  {\n+    super (channel, selector);\n+  }\n+    \n+  public int getNativeFD()\n+  {\n+    return ((SocketChannelImpl) ch).getNativeFD();\n+  }\n+}"}]}