{"sha": "5ec47f6049561ec52125da7f3e44ba269f9372ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjNDdmNjA0OTU2MWVjNTIxMjVkYTdmM2U0NGJhMjY5ZjkzNzJlYQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2003-09-19T19:27:59Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2003-09-19T19:27:59Z"}, "message": "GtkDialogPeer.java (create()): Create a top-level GTK window.\n\n2003-09-19  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkDialogPeer.java (create()): Create a\n\ttop-level GTK window.\n\t(getArgs): Add \"title\" property.\n\t* gnu/java/awt/peer/gtk/GtkWindowPeer.java (setResizable): Use\n\t\"allow_shrink\" and \"allow_grow\" properties.\n\t* java/awt/Dialog.java: Initialize resizable to true and change\n\tcomments accordingly.  Initialize visible to false in\n\tconstructors.\n\t* java/awt/Frame.java (dispose): Remove method.\n\t* java/awt/Window.java (ownedWindows): New field.\n\t(Window(Window,GraphicsConfiguration)): Add a weak reference to\n\towner's ownedWindows vector.\n\t(finalize): Remove method.\n\t(hide): Hide owned windows.\n\t(dispose): Dispose of owned windows.\n\t(getOwnedWindows): Implement.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c: Remove\n\tunused GtkArg code.\n\t(set(String,boolean)): Clamp gboolean parameter to g_object_set\n\tto TRUE or FALSE.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n\t(create): Set window's size requisition.\n\t(connectHooks): Fix indentation.\n\t(setResizable): Remove function.\n\t(static setBounds): Likewise.\n\t(setBounds): Replace call to setBounds with GTK size requisition\n\tand resize calls.\n\nFrom-SVN: r71585", "tree": {"sha": "ff7ca98acd33333b6e7381165d753e8f45b4876c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7ca98acd33333b6e7381165d753e8f45b4876c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec47f6049561ec52125da7f3e44ba269f9372ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec47f6049561ec52125da7f3e44ba269f9372ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec47f6049561ec52125da7f3e44ba269f9372ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec47f6049561ec52125da7f3e44ba269f9372ea/comments", "author": null, "committer": null, "parents": [{"sha": "9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3bfa9b751ba8eeb11c0494c29df532fe3f91cb"}], "stats": {"total": 287, "additions": 158, "deletions": 129}, "files": [{"sha": "7954a43ebc397fb7580bb3901580d3baa5bfcbdd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -1,3 +1,33 @@\n+2003-09-19  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkDialogPeer.java (create()): Create a\n+\ttop-level GTK window.\n+\t(getArgs): Add \"title\" property.\n+\t* gnu/java/awt/peer/gtk/GtkWindowPeer.java (setResizable): Use\n+\t\"allow_shrink\" and \"allow_grow\" properties.\n+\t* java/awt/Dialog.java: Initialize resizable to true and change\n+\tcomments accordingly.  Initialize visible to false in\n+\tconstructors.\n+\t* java/awt/Frame.java (dispose): Remove method.\n+\t* java/awt/Window.java (ownedWindows): New field.\n+\t(Window(Window,GraphicsConfiguration)): Add a weak reference to\n+\towner's ownedWindows vector.\n+\t(finalize): Remove method.\n+\t(hide): Hide owned windows.\n+\t(dispose): Dispose of owned windows.\n+\t(getOwnedWindows): Implement.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c: Remove\n+\tunused GtkArg code.\n+\t(set(String,boolean)): Clamp gboolean parameter to g_object_set\n+\tto TRUE or FALSE.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n+\t(create): Set window's size requisition.\n+\t(connectHooks): Fix indentation.\n+\t(setResizable): Remove function.\n+\t(static setBounds): Likewise.\n+\t(setBounds): Replace call to setBounds with GTK size requisition\n+\tand resize calls.\n+\n 2003-09-19  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* win32-threads.cc: (ensure_interrupt_event_initialized) New"}, {"sha": "8c0f5ee510f95134a0273a93d4ae798938266e8d", "filename": "libjava/gnu/java/awt/peer/gtk/GtkDialogPeer.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -53,7 +53,7 @@ public GtkDialogPeer (Dialog dialog)\n \n   void create ()\n   {\n-    create (GTK_WINDOW_POPUP,\n+    create (GTK_WINDOW_TOPLEVEL,\n \t    awtComponent.getWidth(),\n \t    awtComponent.getHeight());\n   }\n@@ -64,6 +64,7 @@ public void getArgs (Component component, GtkArgList args)\n \n     Dialog dialog = (Dialog) component;\n \n+    args.add (\"title\", dialog.getTitle ());\n     args.add (\"modal\", dialog.isModal ());\n     args.add (\"allow_shrink\", dialog.isResizable ());\n     args.add (\"allow_grow\", dialog.isResizable ());"}, {"sha": "043c08276db69b252b29337723f3af3c28416b7a", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -84,6 +84,7 @@ public void getArgs (Component component, GtkArgList args)\n     args.add (\"allow_shrink\", frame.isResizable ());\n     args.add (\"allow_grow\", frame.isResizable ());\n   }\n+\n   public void setIconImage (Image image) \n   {\n       /* TODO: Waiting on Toolkit Image routines */"}, {"sha": "08b2bf67e90d2fe62eb7ef80026fe7201053c205", "filename": "libjava/gnu/java/awt/peer/gtk/GtkWindowPeer.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -53,7 +53,9 @@ public class GtkWindowPeer extends GtkContainerPeer\n \n   void create (int type)\n   {\n-    create (type, awtComponent.getWidth(), awtComponent.getHeight());\n+    create (type,\n+\t    awtComponent.getWidth(),\n+\t    awtComponent.getHeight());\n   }\n \n   void create ()\n@@ -75,7 +77,7 @@ public void getArgs (Component component, GtkArgList args)\n     args.add (\"visible\", component.isVisible ());\n     args.add (\"sensitive\", component.isEnabled ());\n   }\n-  \n+\n   native public void toBack ();\n   native public void toFront ();\n \n@@ -86,7 +88,11 @@ public void setTitle (String title)\n     set (\"title\", title);\n   }\n \n-  native public void setResizable (boolean r);\n+  public void setResizable (boolean resizable)\n+  {\n+    set (\"allow_shrink\", resizable);\n+    set (\"allow_grow\", resizable);\n+  }\n \n   protected void postConfigureEvent (int x, int y, int width, int height,\n \t\t\t\t     int top, int left, int bottom, int right)"}, {"sha": "eee8361146a09aca19ca3a032af4c6703c0e3456", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -70,7 +70,7 @@ public class Dialog extends Window\n /**\n   * @serial Indicates whether or not this dialog box is resizable.\n   */\n-private boolean resizable;\n+private boolean resizable = true;\n \n /**\n   * @serial The title string for this dialog box, which can be\n@@ -91,7 +91,7 @@ public class Dialog extends Window\n \n /**\n   * Initializes a new instance of <code>Dialog</code> with the specified\n-  * parent, that is not resizable and not modal, and which has no title.\n+  * parent, that is resizable and not modal, and which has no title.\n   *\n   * @param parent The parent frame of this dialog box.\n   *\n@@ -109,7 +109,7 @@ public class Dialog extends Window\n \n /**\n   * Initializes a new instance of <code>Dialog</code> with the specified\n-  * parent and modality, that is not resizable and which has no title.\n+  * parent and modality, that is resizable and which has no title.\n   *\n   * @param parent The parent frame of this dialog box.\n   * @param modal <true> if this dialog box is modal, <code>false</code>\n@@ -129,7 +129,7 @@ public class Dialog extends Window\n \n /**\n   * Initializes a new instance of <code>Dialog</code> with the specified\n-  * parent, that is not resizable and not modal, and which has the specified\n+  * parent, that is resizable and not modal, and which has the specified\n   * title.\n   *\n   * @param parent The parent frame of this dialog box.\n@@ -149,7 +149,7 @@ public class Dialog extends Window\n \n /**\n   * Initializes a new instance of <code>Dialog</code> with the specified,\n-  * parent, title, and modality, that is not resizable.\n+  * parent, title, and modality, that is resizable.\n   *\n   * @param parent The parent frame of this dialog box.\n   * @param title The title string for this dialog box.\n@@ -168,7 +168,7 @@ public class Dialog extends Window\n /**\n  * Initializes a new instance of <code>Dialog</code> with the specified,\n  * parent, title, modality and <code>GraphicsConfiguration</code>,\n- * that is not resizable.\n+ * that is resizable.\n  *\n  * @param parent The parent frame of this dialog box.\n  * @param title The title string for this dialog box.\n@@ -189,14 +189,14 @@ public class Dialog extends Window\n \n   this.title = title;\n   this.modal = modal;\n-  resizable = false;\n+  visible = false;\n \n   setLayout(new BorderLayout());\n }\n \n /**\n  * Initializes a new instance of <code>Dialog</code> with the specified,\n- * parent, that is not resizable.\n+ * parent, that is resizable.\n  *\n  * @exception IllegalArgumentException If parent is null. This exception is\n  * always thrown when GraphicsEnvironment.isHeadless() returns true.\n@@ -211,7 +211,7 @@ public class Dialog extends Window\n \n /**\n  * Initializes a new instance of <code>Dialog</code> with the specified,\n- * parent and title, that is not resizable.\n+ * parent and title, that is resizable.\n  *\n  * @exception IllegalArgumentException If parent is null. This exception is\n  * always thrown when GraphicsEnvironment.isHeadless() returns true.\n@@ -226,7 +226,7 @@ public class Dialog extends Window\n \n /**\n  * Initializes a new instance of <code>Dialog</code> with the specified,\n- * parent, title and modality, that is not resizable.\n+ * parent, title and modality, that is resizable.\n  *\n  * @exception IllegalArgumentException If parent is null. This exception is\n  * always thrown when GraphicsEnvironment.isHeadless() returns true.\n@@ -242,7 +242,7 @@ public class Dialog extends Window\n /**\n  * Initializes a new instance of <code>Dialog</code> with the specified,\n  * parent, title, modality and <code>GraphicsConfiguration</code>,\n- * that is not resizable.\n+ * that is resizable.\n  *\n  * @exception IllegalArgumentException If parent is null, the\n  * GraphicsConfiguration is not a screen device or\n@@ -255,10 +255,10 @@ public class Dialog extends Window\n {\n   super (parent, parent.getGraphicsConfiguration ());\n   \n-  this.modal = modal;\n   this.title = title;\n-  resizable = false;\n-  \n+  this.modal = modal;\n+  visible = false;\n+\n   setLayout (new BorderLayout ());\n }\n "}, {"sha": "b6a34272449c38b74d0dd3003a4c49d0d8c636f9", "filename": "libjava/java/awt/Frame.java", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFrame.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -437,25 +437,6 @@ public class Frame extends Window implements MenuContainer\n \n /*************************************************************************/\n \n-/**\n-  * Destroys any resources associated with this frame.  This includes\n-  * all components in the frame and all owned toplevel windows.\n-  */\n-public void\n-dispose()\n-{\n-  Enumeration e = ownedWindows.elements();\n-  while(e.hasMoreElements())\n-    {\n-      Window w = (Window)e.nextElement();\n-      w.dispose();\n-    }\n-\n-  super.dispose();\n-}\n-\n-/*************************************************************************/\n-\n /**\n   * Returns a debugging string describing this window.\n   *\n@@ -472,8 +453,6 @@ public class Frame extends Window implements MenuContainer\n {\n   //Frame[] array = new Frames[frames.size()];\n   //return frames.toArray(array);\n-    \n-    // see finalize() comment\n   String msg = \"FIXME: can't be implemented without weak references\";\n   throw new UnsupportedOperationException(msg);\n }"}, {"sha": "9f102751230c94d059744303e725f50737480314", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 73, "deletions": 25, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -43,9 +43,13 @@\n import java.awt.event.WindowListener;\n import java.awt.event.WindowStateListener;\n import java.awt.peer.WindowPeer;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.util.Iterator;\n import java.util.EventListener;\n import java.util.Locale;\n import java.util.ResourceBundle;\n+import java.util.Vector;\n import javax.accessibility.Accessible;\n import javax.accessibility.AccessibleContext;\n \n@@ -69,6 +73,9 @@ public class Window extends Container implements Accessible\n   /** @since 1.4 */\n   private boolean focusableWindowState = true;\n \n+  // A list of other top-level windows owned by this window.\n+  private transient Vector ownedWindows = new Vector();\n+\n   private transient WindowListener windowListener;\n   private transient WindowFocusListener windowFocusListener;\n   private transient WindowStateListener windowStateListener;\n@@ -139,11 +146,13 @@ public Window(Window owner, GraphicsConfiguration gc)\n     if (owner == null)\n       throw new IllegalArgumentException (\"owner must not be null\");\n \n-    this.parent = owner;\n-    \n-    // FIXME: add to owner's \"owned window\" list\n-    //owner.owned.add(this); // this should be a weak reference\n-    \n+    parent = owner;\n+\n+    synchronized (owner.ownedWindows)\n+      {\n+        owner.ownedWindows.add(new WeakReference(this));\n+      }\n+\n     // FIXME: make this text visible in the window.\n     SecurityManager s = System.getSecurityManager();\n     if (s != null && ! s.checkTopLevelWindow(this))\n@@ -170,18 +179,6 @@ GraphicsConfiguration getGraphicsConfigurationImpl()\n     return super.getGraphicsConfigurationImpl();\n   }\n \n-  /**\n-   * Disposes of the input methods and context, and removes the WeakReference\n-   * which formerly pointed to this Window from the parent's owned Window list.\n-   *\n-   * @exception Throwable The Exception raised by this method.\n-   */\n-  protected void finalize() throws Throwable\n-  {\n-    // FIXME: remove from owner's \"owned window\" list (Weak References)\n-    super.finalize();\n-  }\n-\n   /**\n    * Creates the native peer for this window.\n    */\n@@ -227,7 +224,23 @@ public void show()\n \n   public void hide()\n   {\n-    // FIXME: call hide() on any \"owned\" children here.\n+    synchronized (ownedWindows)\n+      {\n+\tIterator e = ownedWindows.iterator();\n+\twhile(e.hasNext())\n+\t  {\n+\t    Window w = (Window)(((Reference) e.next()).get());\n+\t    if (w != null)\n+\t      w.hide();\n+     \t    else\n+\t      // Remove null weak reference from ownedWindows.\n+\t      // Unfortunately this can't be done in the Window's\n+\t      // finalize method because there is no way to guarantee\n+\t      // synchronous access to ownedWindows there.\n+\t      e.remove();\n+\t  }\n+      }\n+\n     super.hide();\n   }\n \n@@ -239,15 +252,26 @@ public boolean isDisplayable()\n   }\n \n   /**\n-   * Called to free any resource associated with this window.\n+   * Destroys any resources associated with this window.  This includes\n+   * all components in the window and all owned top-level windows.\n    */\n   public void dispose()\n   {\n     hide();\n \n-    Window[] list = getOwnedWindows();\n-    for (int i=0; i<list.length; i++)\n-      list[i].dispose();\n+    synchronized (ownedWindows)\n+      {\n+\tIterator e = ownedWindows.iterator();\n+\twhile(e.hasNext())\n+\t  {\n+\t    Window w = (Window)(((Reference) e.next()).get());\n+\t    if (w != null)\n+\t      w.dispose();\n+\t    else\n+\t      // Remove null weak reference from ownedWindows.\n+\t      e.remove();\n+\t  }\n+      }\n \n     for (int i = 0; i < ncomponents; ++i)\n       component[i].removeNotify();\n@@ -340,9 +364,33 @@ public Window getOwner()\n   /** @since 1.2 */\n   public Window[] getOwnedWindows()\n   {\n-    // FIXME: return array containing all the windows this window currently \n-    // owns.\n-    return new Window[0];\n+    Window [] trimmedList;\n+    synchronized (ownedWindows)\n+      {\n+\t// Windows with non-null weak references in ownedWindows.\n+\tWindow [] validList = new Window [ownedWindows.size()];\n+\n+\tIterator e = ownedWindows.iterator();\n+\tint numValid = 0;\n+\twhile (e.hasNext())\n+\t  {\n+\t    Window w = (Window)(((Reference) e.next()).get());\n+\t    if (w != null)\n+\t      validList[numValid++] = w;\n+\t    else\n+\t      // Remove null weak reference from ownedWindows.\n+\t      e.remove();\n+\t  }\n+\n+\tif (numValid != validList.length)\n+\t  {\n+\t    trimmedList = new Window [numValid];\n+\t    System.arraycopy (validList, 0, trimmedList, 0, numValid);\n+\t  }\n+\telse\n+\t  trimmedList = validList;\n+      }\n+    return trimmedList;\n   }\n \n   /**"}, {"sha": "ed94b7d753928ff929ccc2e2682997bb368ca77a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -494,15 +494,11 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_S\n   const char *name;\n   const char *value;\n   void *ptr;\n-  GtkArg arg;\n \n   ptr = NSA_GET_PTR (env, obj);\n   name = (*env)->GetStringUTFChars (env, jname, NULL);\n   value = (*env)->GetStringUTFChars (env, jvalue, NULL);\n \n-  arg.type = GTK_TYPE_STRING;\n-  arg.name = (char *) name;\n-  GTK_VALUE_STRING (arg) = (char *) value;\n   gdk_threads_enter();\n   g_object_set(ptr, name, value, NULL);\n   gdk_threads_leave();\n@@ -512,20 +508,20 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_S\n }\n \n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Z\n-  (JNIEnv *env, jobject obj, jstring jname, jboolean value)\n+  (JNIEnv *env, jobject obj, jstring jname, jboolean jvalue)\n {\n   const char *name;\n+  gboolean value;\n   void *ptr;\n-  GtkArg arg;\n \n   ptr = NSA_GET_PTR (env, obj);\n-  name = (*env)->GetStringUTFChars (env, jname, NULL);\n \n-  arg.type = GTK_TYPE_BOOL;\n-  arg.name = (char *) name;\n-  GTK_VALUE_BOOL (arg) = value;\n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+  /* Apparently a jboolean can have a value greater than 1.  gboolean\n+     variables may only contain the value TRUE or FALSE. */\n+  value = jvalue ? TRUE : FALSE;\n \n-  gdk_threads_enter();                          \n+  gdk_threads_enter();\n   g_object_set(ptr, name, value, NULL);\n   gdk_threads_leave();\n \n@@ -537,15 +533,10 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_la\n {\n   const char *name;\n   void *ptr;\n-  GtkArg arg;\n \n   ptr = NSA_GET_PTR (env, obj);\n   name = (*env)->GetStringUTFChars (env, jname, NULL);\n \n-  arg.type = GTK_TYPE_INT;\n-  arg.name = (char *) name;\n-  GTK_VALUE_INT (arg) = value;\n-  \n   gdk_threads_enter();                          \n   g_object_set(ptr, name, value, NULL);\n   gdk_threads_leave();\n@@ -558,15 +549,10 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_la\n {\n   const char *name;\n   void *ptr;\n-  GtkArg arg;\n \n   ptr = NSA_GET_PTR (env, obj);\n   name = (*env)->GetStringUTFChars (env, jname, NULL);\n \n-  arg.type = GTK_TYPE_FLOAT;\n-  arg.name = (char *) name;\n-  GTK_VALUE_FLOAT (arg) = value;\n-  \n   gdk_threads_enter();                          \n   g_object_set(ptr, name, value, NULL);\n   gdk_threads_leave();\n@@ -580,7 +566,6 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_O\n {\n   const char *name;\n   void *ptr1, *ptr2;\n-  GtkArg arg;\n \n   ptr1 = NSA_GET_PTR (env, obj1);\n   ptr2 = NSA_GET_PTR (env, obj2);\n@@ -598,10 +583,6 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_O\n       return;\n     }\n \n-  arg.type = GTK_TYPE_OBJECT;\n-  arg.name = (char *) name;\n-  GTK_VALUE_OBJECT (arg) = GTK_OBJECT (ptr2);\n-  \n   gdk_threads_enter();                          \n   g_object_set(ptr1, name, ptr2, NULL);\n   gdk_threads_leave();"}, {"sha": "982a5cb605202509d515847555c12ff0851e3eed", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c", "status": "modified", "additions": 22, "deletions": 39, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec47f6049561ec52125da7f3e44ba269f9372ea/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c?ref=5ec47f6049561ec52125da7f3e44ba269f9372ea", "patch": "@@ -42,8 +42,6 @@ exception statement from your version. */\n #include <gdk/gdkprivate.h>\n #include <gdk/gdkx.h>\n \n-static void setBounds (GtkWidget *, jint, jint, jint, jint);\n-\n /*\n  * Make a new window (any type)\n  */\n@@ -60,6 +58,13 @@ Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create\n \n   gtk_window_set_default_size (GTK_WINDOW(window), width, height);\n \n+  /* We must set this window's size requisition.  Otherwise when a\n+     resize is queued (when gtk_widget_queue_resize is called) the\n+     window will snap to its default requisition of 0x0.  If we omit\n+     this call, Frames and Dialogs shrink to degenerate 1x1 windows\n+     when their resizable property changes. */\n+  gtk_widget_set_size_request (window, width, height);\n+\n   vbox = gtk_vbox_new (0, 0);\n   layout = gtk_layout_new (NULL, NULL);\n   gtk_box_pack_end (GTK_BOX (vbox), layout, 1, 1, 0);\n@@ -88,6 +93,7 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setVisible\n     gtk_widget_hide (GTK_WIDGET (ptr));\n \n   XFlush (GDK_DISPLAY ());\n+\n   gdk_threads_leave ();\n }\n \n@@ -102,20 +108,20 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n \n   gdk_threads_enter ();\n \n-   children = gtk_container_get_children(GTK_CONTAINER(ptr));\n-   vbox = children->data;\n+  children = gtk_container_get_children(GTK_CONTAINER(ptr));\n+  vbox = children->data;\n \n-   if(!GTK_IS_VBOX(vbox))\n-     {\n-       printf(\"*** this is not a vbox\\n\");\n-     }\n-   children = gtk_container_get_children(GTK_CONTAINER(vbox));\n-   layout = children->data;\n+  if(!GTK_IS_VBOX(vbox))\n+    {\n+      printf(\"*** this is not a vbox\\n\");\n+    }\n+  children = gtk_container_get_children(GTK_CONTAINER(vbox));\n+  layout = children->data;\n \n-   if(!GTK_IS_LAYOUT(layout))\n-     {\n+  if(!GTK_IS_LAYOUT(layout))\n+    {\n       printf(\"*** widget is not a layout ***\");\n-     }\n+    }\n \n   gtk_widget_realize (layout);\n \n@@ -176,24 +182,6 @@ Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setTitle\n   (*env)->ReleaseStringUTFChars (env, title, str);\n }\n \n-/*\n- * Set a window's resizing policy\n- */\n-\n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setResizable\n-  (JNIEnv *env, jobject obj, jboolean resize)\n-{\n-  void *ptr;\n-  \n-  ptr = NSA_GET_PTR (env, obj);\n-  \n-  gdk_threads_enter ();\n-  gtk_window_set_policy (GTK_WINDOW (ptr), resize, resize, 0);\n-  gdk_threads_leave ();\n-}\n-\n-\n /*\n  * Lower the z-level of a window. \n  */\n@@ -230,12 +218,6 @@ Java_gnu_java_awt_peer_gtk_GtkWindowPeer_toFront (JNIEnv *env,\n   gdk_threads_leave ();\n }\n \n-static void\n-setBounds (GtkWidget *widget, jint x, jint y, jint width, jint height)\n-{\n-  gtk_window_resize (GTK_WINDOW(widget), width, height);\n-}\n-\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setBounds\n   (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n {\n@@ -247,7 +229,8 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setBounds\n   gdk_threads_enter ();\n \n   widget = GTK_WIDGET (ptr);\n-  setBounds (widget, x, y, width, height);\n+  gtk_widget_set_size_request (widget, width, height);\n+  gtk_window_resize (GTK_WINDOW(widget), width, height);\n \n   gdk_threads_leave ();\n }\n@@ -306,7 +289,7 @@ gdk_window_get_root_geometry (GdkWindow *window,\n \t\t\t      gint      *depth)\n {\n   GdkWindow *private;\n-  \n+\n   g_return_if_fail (window != NULL);\n   \n   private = (GdkWindow*) window;"}]}