{"sha": "f2d52e0042fb5027ae6f8af48e39071648c6b65e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkNTJlMDA0MmZiNTAyN2FlNmY4YWY0OGUzOTA3MTY0OGM2YjY1ZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-07-25T19:03:00Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-07-25T19:03:00Z"}, "message": "re PR tree-optimization/91183 (strlen of a strcpy result with a conditional source not folded)\n\nPR tree-optimization/91183\nPR tree-optimization/86688\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/strlenopt-70.c: Fix bugs.\n\t* gcc.dg/strlenopt-71.c: Same.\n\t* gcc.dg/strlenopt-72.c: Same.\n\nFrom-SVN: r273812", "tree": {"sha": "653ee9e8bc96ffad05d4c8f5ab8e9663d8fdc02e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653ee9e8bc96ffad05d4c8f5ab8e9663d8fdc02e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d52e0042fb5027ae6f8af48e39071648c6b65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d52e0042fb5027ae6f8af48e39071648c6b65e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d52e0042fb5027ae6f8af48e39071648c6b65e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d52e0042fb5027ae6f8af48e39071648c6b65e/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f41de41eaf6d30d2b492c1f13d01dd8e90bba81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f41de41eaf6d30d2b492c1f13d01dd8e90bba81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f41de41eaf6d30d2b492c1f13d01dd8e90bba81"}], "stats": {"total": 544, "additions": 300, "deletions": 244}, "files": [{"sha": "b395a9afff1dd68dacea663a5997129a11cd02b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2d52e0042fb5027ae6f8af48e39071648c6b65e", "patch": "@@ -1,3 +1,11 @@\n+2019-07-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/91183\n+\tPR tree-optimization/86688\n+\t* gcc.dg/strlenopt-70.c: Fix bugs.\n+\t* gcc.dg/strlenopt-71.c: Same.\n+\t* gcc.dg/strlenopt-72.c: Same.\n+\n 2019-07-25  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/91223"}, {"sha": "97ba1408f1082eb73087535178310749e0f9219f", "filename": "gcc/testsuite/gcc.dg/strlenopt-70.c", "status": "modified", "additions": 235, "deletions": 203, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-70.c?ref=f2d52e0042fb5027ae6f8af48e39071648c6b65e", "patch": "@@ -11,10 +11,10 @@\n \n #define CHAR_BIT __CHAR_BIT__\n \n-typedef __INT16_TYPE__  int16_t;\n-typedef __INT32_TYPE__  int32_t;\n-typedef __INT64_TYPE__  int64_t;\n-typedef __UINT64_TYPE__ uint64_t;\n+typedef __UINT16_TYPE__  uint16_t;\n+typedef __UINT32_TYPE__  uint32_t;\n+typedef __UINT64_TYPE__  uint64_t;\n+typedef __UINT64_TYPE__  uint64_t;\n \n #define CAT(x, y) x ## y\n #define CONCAT(x, y) CAT (x, y)\n@@ -43,16 +43,6 @@ typedef __UINT64_TYPE__ uint64_t;\n     ELIM (!(strlen (a) expect));\t\t\t\t\\\n   } while (0)\n \n-/* Same as above but the assignment consisting of the two quadwords\n-   QW1 and QW2 to support int128_t.  */\n-#define T2(init, type, off, qw0, qw1, expect) do {\t\t\t\\\n-    char a[32];\t\t\t\t\t\t\t\t\\\n-    memcpy (a, init ? init : \"\", init ? sizeof init - 1: 0);\t\t\\\n-    type assign = ((type)qw0 << (sizeof (type) * CHAR_BIT / 2)) | (type)qw1; \\\n-    *(type*)(a + off) = assign;\t\t\t\t\t\t\\\n-    ELIM (!(strlen (a) expect));\t\t\t\t\t\\\n-  } while (0)\n-\n /* Same as T but works around the optimizer dropping the initializing\n    store before the assignment and defeating the strlen optimization.  */\n #define TX(init, type, off, assign, expect) do {\t\t\\\n@@ -63,231 +53,273 @@ typedef __UINT64_TYPE__ uint64_t;\n     ELIM (!(strlen (a) expect));\t\t\t\t\\\n   } while (0)\n \n+/* Evaluates to an element at index I of the literal S padded with nuls\n+   on the right.  */\n+#define ELT(s, i)   ((s \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\")[i])\n \n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n-#  define I16(s) ((s[0] << 8) + s[1])\n-#  define I32(s) ((s[0] << 24) + (s[1] << 16) + (s[2] << 8) + s[3])\n-#  define I64(s)\t\t\t\t\t\t\\\n-  (((uint64_t)s[0] << 56)\t\t\t\t\t\\\n-   + ((uint64_t)s[1] << 48)\t\t\t\t\t\\\n-   + ((uint64_t)s[2] << 40)\t\t\t\t\t\\\n-   + ((uint64_t)s[3] << 32)\t\t\t\t\t\\\n-   + ((uint64_t)s[4] << 24)\t\t\t\t\t\\\n-   + ((uint64_t)s[5] << 16)\t\t\t\t\t\\\n-   + ((uint64_t)s[6] << 8)\t\t\t\t\t\\\n-   + s[7])\n+/* Form a big-endian 16, 32, 64, and 128-byte integer from a string.  */\n+#  define I16(s) (((uint16_t)ELT (s, 0) << 8) + (uint16_t)ELT (s, 1))\n+#  define I32(s)\t\t\t\t\\\n+  (((uint32_t)ELT (s, 0) << 24)\t\t\t\\\n+   + ((uint32_t)ELT (s, 1) << 16)\t\t\\\n+   + ((uint32_t)ELT (s, 2) << 8)\t\t\\\n+   + (uint32_t)ELT (s, 3))\n+#  define I64(s)\t\t\t\t\\\n+  (((uint64_t)ELT (s, 0) << 56)\t\t\t\\\n+   + ((uint64_t)ELT (s, 1) << 48)\t\t\\\n+   + ((uint64_t)ELT (s, 2) << 40)\t\t\\\n+   + ((uint64_t)ELT (s, 3) << 32)\t\t\\\n+   + ((uint64_t)ELT (s, 4) << 24)\t\t\\\n+   + ((uint64_t)ELT (s, 5) << 16)\t\t\\\n+   + ((uint64_t)ELT (s, 6) << 8)\t\t\\\n+   + ELT (s, 7))\n+#  define I128(s)\t\t\t\t\\\n+  (((uint128_t)ELT (s, 0) << (64 + 56))\t\t\\\n+   + ((uint128_t)ELT (s, 1) << (64 + 48))\t\\\n+   + ((uint128_t)ELT (s, 2) << (64 + 40))\t\\\n+   + ((uint128_t)ELT (s, 3) << (64 + 32))\t\\\n+   + ((uint128_t)ELT (s, 4) << (64 + 24))\t\\\n+   + ((uint128_t)ELT (s, 5) << (64 + 16))\t\\\n+   + ((uint128_t)ELT (s, 6) << (64 + 8))\t\\\n+   + ((uint128_t)ELT (s, 7) << 64)\t\t\\\n+   + ((uint128_t)ELT (s, 8) << 56)\t\t\\\n+   + ((uint128_t)ELT (s, 9) << 48)\t\t\\\n+   + ((uint128_t)ELT (s, 10) << 40)\t\t\\\n+   + ((uint128_t)ELT (s, 11) << 32)\t\t\\\n+   + ((uint128_t)ELT (s, 12) << 24)\t\t\\\n+   + ((uint128_t)ELT (s, 13) << 16)\t\t\\\n+   + ((uint128_t)ELT (s, 14) << 8)\t\t\\\n+   + (uint128_t)ELT (s, 15))\n+\n #elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-#  define I16(s) ((s[1] << 8) + s[0])\n-#  define I32(s) ((s[3] << 24) + (s[2] << 16) + (s[1] << 8) + s[0])\n-#  define I64(s)\t\t\t\t\t\t\\\n-  (((uint64_t)s[7] << 56)\t\t\t\t\t\\\n-   + ((uint64_t)s[6] << 48)\t\t\t\t\t\\\n-   + ((uint64_t)s[5] << 40)\t\t\t\t\t\\\n-   + ((uint64_t)s[4] << 32)\t\t\t\t\t\\\n-   + ((uint64_t)s[3] << 24)\t\t\t\t\t\\\n-   + ((uint64_t)s[2] << 16)\t\t\t\t\t\\\n-   + ((uint64_t)s[1] << 8)\t\t\t\t\t\\\n-   + s[0])\n+/* Form a little-endian 16, 32, 64, and 128-byte integer from a string.  */\n+#  define I16(s) (((uint16_t)ELT (s, 1) << 8) + (uint16_t)ELT (s, 0))\n+#  define I32(s)\t\t\t\t\\\n+  (((uint32_t)ELT (s, 3) << 24)\t\t\t\\\n+   + ((uint32_t)ELT (s, 2) << 16)\t\t\\\n+   + ((uint32_t)ELT (s, 1) << 8)\t\t\\\n+   + (uint32_t)ELT (s, 0))\n+#  define I64(s)\t\t\t\t\\\n+  (((uint64_t)ELT (s, 7) << 56)\t\t\t\\\n+   + ((uint64_t)ELT (s, 6) << 48)\t\t\\\n+   + ((uint64_t)ELT (s, 5) << 40)\t\t\\\n+   + ((uint64_t)ELT (s, 4) << 32)\t\t\\\n+   + ((uint64_t)ELT (s, 3) << 24)\t\t\\\n+   + ((uint64_t)ELT (s, 2) << 16)\t\t\\\n+   + ((uint64_t)ELT (s, 1) << 8)\t\t\\\n+   + ELT (s, 0))\n+#  define I128(s)\t\t\t\t\\\n+  (((uint128_t)ELT (s, 15) << (64 + 56))\t\\\n+   + ((uint128_t)ELT (s, 14) << (64 + 48))\t\\\n+   + ((uint128_t)ELT (s, 13) << (64 + 40))\t\\\n+   + ((uint128_t)ELT (s, 12) << (64 + 32))\t\\\n+   + ((uint128_t)ELT (s, 11) << (64 + 24))\t\\\n+   + ((uint128_t)ELT (s, 10) << (64 + 16))\t\\\n+   + ((uint128_t)ELT (s, 9) << (64 + 8))\t\\\n+   + ((uint128_t)ELT (s, 8) << 64)\t\t\\\n+   + ((uint128_t)ELT (s, 7) << 56)\t\t\\\n+   + ((uint128_t)ELT (s, 6) << 48)\t\t\\\n+   + ((uint128_t)ELT (s, 5) << 40)\t\t\\\n+   + ((uint128_t)ELT (s, 4) << 32)\t\t\\\n+   + ((uint128_t)ELT (s, 3) << 24)\t\t\\\n+   + ((uint128_t)ELT (s, 2) << 16)\t\t\\\n+   + ((uint128_t)ELT (s, 1) << 8)\t\t\\\n+   + (uint128_t)ELT (s, 0))\n #endif\n \n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n \n void store_16bit_be (void)\n {\n-  T (\"xxx\", int16_t, 0, 0x0001, == 0);\n-  T (\"xxx\", int16_t, 0, 0x0010, == 0);\n-  T (\"xxx\", int16_t, 0, 0x0011, == 0);\n-  T (\"xxx\", int16_t, 0, 0x0100, == 1);\n-  T (\"xxx\", int16_t, 0, 0x1000, == 1);\n-  T (\"xxx\", int16_t, 0, 0x1100, == 1);\n+  T (\"xxx\", uint16_t, 0, 0x0001, == 0);\n+  T (\"xxx\", uint16_t, 0, 0x0010, == 0);\n+  T (\"xxx\", uint16_t, 0, 0x0011, == 0);\n+  T (\"xxx\", uint16_t, 0, 0x0100, == 1);\n+  T (\"xxx\", uint16_t, 0, 0x1000, == 1);\n+  T (\"xxx\", uint16_t, 0, 0x1100, == 1);\n }\n \n #elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n \n void store_16bit_le (int i)\n {\n-  int16_t x0000 = I16 (\"\\0\\0\");\n-  int16_t x0001 = 0x0001;\n-  int16_t x0010 = 0x0010;\n-  int16_t x0011 = 0x0011;\n-  int16_t x0100 = 0x0100;\n-  int16_t x1000 = 0x1000;\n-  int16_t x1100 = 0x1100;\n-\n-  T (0,        int16_t, 0, x0000, == 0);\n-  T (\"x\",      int16_t, 0, x0000, == 0);\n-  T (\"xx\",     int16_t, 0, x0000, == 0);\n-  T (\"xxxx\",   int16_t, 0, x0000, == 0);\n-  T (0,        int16_t, 0, x0001, == 1);\n-  T (\"\\0\\0\\0\", int16_t, 0, x0001, == 1);\n-  T (0,        int16_t, 0, x0010, == 1);\n-  T (\"x\\0\\0\",  int16_t, 0, x0010, == 1);\n-  T (0,        int16_t, 0, x0011, == 1);\n-  T (\"xx\\0\",   int16_t, 0, x0011, == 1);\n-  T (0,        int16_t, 0, x0100, == 0);\n-  T (\"\\0\\0\\0\", int16_t, 0, x0100, == 0);\n-  T (0,        int16_t, 0, x1000, == 0);\n-  T (\"x\\0\\0\",  int16_t, 0, x1000, == 0);\n-  T (0,        int16_t, 0, x1100, == 0);\n-  T (\"xx\\0\",   int16_t, 0, x1100, == 0);\n+  uint16_t x0000 = I16 (\"\\0\\0\");\n+  uint16_t x0001 = 0x0001;\n+  uint16_t x0010 = 0x0010;\n+  uint16_t x0011 = 0x0011;\n+  uint16_t x0100 = 0x0100;\n+  uint16_t x1000 = 0x1000;\n+  uint16_t x1100 = 0x1100;\n+\n+  T (0,        uint16_t, 0, x0000, == 0);\n+  T (\"x\",      uint16_t, 0, x0000, == 0);\n+  T (\"xx\",     uint16_t, 0, x0000, == 0);\n+  T (\"xxxx\",   uint16_t, 0, x0000, == 0);\n+  T (0,        uint16_t, 0, x0001, == 1);\n+  T (\"\\0\\0\\0\", uint16_t, 0, x0001, == 1);\n+  T (0,        uint16_t, 0, x0010, == 1);\n+  T (\"x\\0\\0\",  uint16_t, 0, x0010, == 1);\n+  T (0,        uint16_t, 0, x0011, == 1);\n+  T (\"xx\\0\",   uint16_t, 0, x0011, == 1);\n+  T (0,        uint16_t, 0, x0100, == 0);\n+  T (\"\\0\\0\\0\", uint16_t, 0, x0100, == 0);\n+  T (0,        uint16_t, 0, x1000, == 0);\n+  T (\"x\\0\\0\",  uint16_t, 0, x1000, == 0);\n+  T (0,        uint16_t, 0, x1100, == 0);\n+  T (\"xx\\0\",   uint16_t, 0, x1100, == 0);\n \n   // FIXME: This fails because of the next test but succeeds on its own.\n-  // T (0,        int16_t, 0, i ? x0001 : x0010, == 1);\n-  T (\"xxx\",    int16_t, 0, i ? x0100 : x1100, == 0);\n+  // T (0,        uint16_t, 0, i ? x0001 : x0010, == 1);\n+  T (\"xxx\",    uint16_t, 0, i ? x0100 : x1100, == 0);\n }\n \n #endif\n \n void store_32bit (volatile int i)\n {\n-  T (0,      int32_t, 0, 0, == 0);\n-  T (\"x\",    int32_t, 0, 0, == 0);\n-  T (\"xx\",   int32_t, 0, 0, == 0);\n-  T (\"xxx\",  int32_t, 0, 0, == 0);\n-  T (\"xxxx\", int32_t, 0, 0, == 0);\n-\n-  T (\"\\0\",   int32_t, 1, 0, == 0);\n-  T (\"x\",    int32_t, 1, 0, == 1);\n-  T (\"xx\",   int32_t, 2, 0, == 2);\n-  T (\"xxx\",  int32_t, 3, 0, == 3);\n-\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\01\\0\\0\\0\"), == 1);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\01\\0\\0\"), == 0);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\0\\01\\0\"), == 0);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\0\\0\\01\"), == 0);\n-\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\1\\2\\0\\0\"), == 2);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\1\\2\\0\"), == 0);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\0\\1\\2\"), == 0);\n-\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\1\\2\\3\\0\"), == 3);\n-  T (\"xxx\",  int32_t, 0, I32 (\"\\0\\1\\2\\3\"), == 0);\n-\n-  int32_t x00332211 = I32 (\"123\\0\");\n-  int32_t x00002211 = I32 (\"12\\0\\0\");\n-  int32_t x00000011 = I32 (\"1\\0\\0\\0\");\n-\n-  T (\"xxxx\", int32_t, 0, i ? x00332211 : x00002211, <= 3);\n-  T (\"xxxx\", int32_t, 0, i ? x00332211 : x00002211, >= 2);\n-  T (\"xxxx\", int32_t, 0, i ? x00332211 : x00000011, <= 3);\n-  T (\"xxxx\", int32_t, 0, i ? x00332211 : x00000011, >= 1);\n-\n-  TX (\"abcde\",  int32_t, 0, i ? I32 (\"1234\") : I32 (\"1235\"), == 5);\n-  TX (\"abcde\",  int32_t, 1, i ? I32 (\"1234\") : I32 (\"1235\"), == 5);\n-\n-  TX (\"abcdef\", int32_t, 0, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n-  TX (\"abcdef\", int32_t, 1, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n-  TX (\"abcdef\", int32_t, 2, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n-  TX (\"abcdef\", int32_t, 3, i ? I32 (\"124\\0\") : I32 (\"123\\0\"), == 6);\n-  TX (\"abcdef\", int32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"13\\0\\0\"), == 5);\n-\n-  TX (\"abcdef\", int32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"123\\0\"), >= 5);\n-  TX (\"abcdef\", int32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"123\\0\"), < 7);\n+  T (0,      uint32_t, 0, 0, == 0);\n+  T (\"x\",    uint32_t, 0, 0, == 0);\n+  T (\"xx\",   uint32_t, 0, 0, == 0);\n+  T (\"xxx\",  uint32_t, 0, 0, == 0);\n+  T (\"xxxx\", uint32_t, 0, 0, == 0);\n+\n+  T (\"\\0\",   uint32_t, 1, 0, == 0);\n+  T (\"x\",    uint32_t, 1, 0, == 1);\n+  T (\"xx\",   uint32_t, 2, 0, == 2);\n+  T (\"xxx\",  uint32_t, 3, 0, == 3);\n+\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\1\\0\\0\\0\"), == 1);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\1\\0\\0\"), == 0);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\0\\1\\0\"), == 0);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\0\\0\\1\"), == 0);\n+\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\1\\2\\0\\0\"), == 2);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\1\\2\\0\"), == 0);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\0\\1\\2\"), == 0);\n+\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\1\\2\\3\\0\"), == 3);\n+  T (\"xxx\",  uint32_t, 0, I32 (\"\\0\\1\\2\\3\"), == 0);\n+\n+  uint32_t x00332211 = I32 (\"123\\0\");\n+  uint32_t x00002211 = I32 (\"12\\0\\0\");\n+  uint32_t x00000011 = I32 (\"1\\0\\0\\0\");\n+\n+  T (\"xxxx\", uint32_t, 0, i ? x00332211 : x00002211, <= 3);\n+  T (\"xxxx\", uint32_t, 0, i ? x00332211 : x00002211, >= 2);\n+  T (\"xxxx\", uint32_t, 0, i ? x00332211 : x00000011, <= 3);\n+  T (\"xxxx\", uint32_t, 0, i ? x00332211 : x00000011, >= 1);\n+\n+  TX (\"abcde\",  uint32_t, 0, i ? I32 (\"1234\") : I32 (\"1235\"), == 5);\n+  TX (\"abcde\",  uint32_t, 1, i ? I32 (\"1234\") : I32 (\"1235\"), == 5);\n+\n+  TX (\"abcdef\", uint32_t, 0, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n+  TX (\"abcdef\", uint32_t, 1, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n+  TX (\"abcdef\", uint32_t, 2, i ? I32 (\"1235\") : I32 (\"1234\"), == 6);\n+  TX (\"abcdef\", uint32_t, 3, i ? I32 (\"124\\0\") : I32 (\"123\\0\"), == 6);\n+  TX (\"abcdef\", uint32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"13\\0\\0\"), == 5);\n+\n+  TX (\"abcdef\", uint32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"123\\0\"), >= 5);\n+  TX (\"abcdef\", uint32_t, 3, i ? I32 (\"12\\0\\0\") : I32 (\"123\\0\"), < 7);\n }\n \n void store_64bit (int i)\n {\n-  T2 (\"xxxxxxx\", int64_t, 0,                0, I32 (\"\\1\\0\\0\\0\"), == 1);\n-  T2 (\"xxxxxxx\", int64_t, 0,                0, I32 (\"\\0\\1\\0\\0\"), == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0,                0, I32 (\"\\0\\0\\1\\0\"), == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0,                0, I32 (\"\\0\\00\\0\\1\"), == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\1\\0\\0\\0\"), 0, == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\0\\1\\0\\0\"), 0, == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\0\\0\\1\\0\"), 0, == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\0\\0\\0\\1\"), 0, == 0);\n-\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\1\\2\\0\\0\"), == 2);\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\0\\1\\2\\0\"), == 0);\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\0\\0\\1\\2\"), == 0);\n-\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\1\\2\\3\\0\"), == 3);\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\0\\1\\2\\3\"), == 0);\n-\n-  T2 (\"xxxxxxx\", int64_t, 0, 0, I32 (\"\\1\\2\\3\\4\"), == 4);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\5\\0\\0\\0\"), I32 (\"\\1\\2\\3\\4\"), == 5);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\5\\6\\0\\0\"), I32 (\"\\1\\2\\3\\4\"), == 6);\n-  T2 (\"xxxxxxx\", int64_t, 0, I32 (\"\\5\\6\\7\\0\"), I32 (\"\\1\\2\\3\\4\"), == 7);\n-\n-  int64_t x7777777 = I64 (\"\\7\\7\\7\\7\\7\\7\\7\");\n-  int64_t x666666 = I64 (\"\\6\\6\\6\\6\\6\\6\\0\");\n-  int64_t x4444 = I64 (\"\\4\\4\\4\\4\\0\\0\\0\");\n-  int64_t x3333 = I64 (\"\\3\\3\\3\\3\\0\\0\\0\");\n-  int64_t x1 = I64 (\"\\1\\0\\0\\0\\0\\0\\0\");\n-\n-  T (\"x\\0xxxxxx\", int64_t, 0, i ? x7777777 : x666666, <= 7);\n-  T (\"xx\\0xxxxx\", int64_t, 0, i ? x7777777 : x666666, >= 6);\n-  T (\"xxx\\0xxxx\", int64_t, 0, i ? x666666 : x1, <= 6);\n-  T (\"xxxx\\0xxx\", int64_t, 0, i ? x666666 : x1, >= 1);\n-  T (\"xxxxxx\\0x\", int64_t, 0, i ? x4444 : x3333, == 4);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\0\\0\\0\\0\\0\\0\\0\\0\"), == 1);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\1\\0\\0\\0\\0\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\1\\0\\0\\0\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\0\\1\\0\\0\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\0\\0\\1\\0\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\0\\0\\0\\1\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\0\\0\\0\\0\\1\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\0\\0\\0\\0\\0\\1\\0\"), == 0);\n+\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\0\\0\\0\\0\\0\\0\\0\"), == 2);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\1\\2\\0\\0\\0\\0\\0\\0\"), == 0);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\0\\1\\2\\0\\0\\0\\0\\0\"), == 0);\n+\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\3\\0\\0\\0\\0\\0\\0\"), == 3);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\0\\1\\2\\3\\0\\0\\0\\0\\0\"), == 0);\n+\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\3\\4\\0\\0\\0\\0\\0\"), == 4);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\3\\4\\5\\0\\0\\0\\0\"), == 5);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\3\\4\\5\\6\\0\\0\\0\"), == 6);\n+  T (\"xxxxxxx\", uint64_t, 0, I64 (\"\\1\\2\\3\\4\\5\\6\\7\\0\\0\"), == 7);\n+\n+  uint64_t x7777777 = I64 (\"\\7\\7\\7\\7\\7\\7\\7\");\n+  uint64_t x666666 = I64 (\"\\6\\6\\6\\6\\6\\6\\0\");\n+  uint64_t x4444 = I64 (\"\\4\\4\\4\\4\\0\\0\\0\");\n+  uint64_t x3333 = I64 (\"\\3\\3\\3\\3\\0\\0\\0\");\n+  uint64_t x1 = I64 (\"\\1\\0\\0\\0\\0\\0\\0\");\n+\n+  T (\"x\\0xxxxxx\", uint64_t, 0, i ? x7777777 : x666666, <= 7);\n+  T (\"xx\\0xxxxx\", uint64_t, 0, i ? x7777777 : x666666, >= 6);\n+  T (\"xxx\\0xxxx\", uint64_t, 0, i ? x666666 : x1, <= 6);\n+  T (\"xxxx\\0xxx\", uint64_t, 0, i ? x666666 : x1, >= 1);\n+  T (\"xxxxxx\\0x\", uint64_t, 0, i ? x4444 : x3333, == 4);\n }\n \n-#ifdef __uint128_t\n+#if __SIZEOF_INT128__\n \n typedef __uint128_t     uint128_t;\n \n void store_128bit (void)\n {\n-  uint64_t x1 = I64 (\"\\1\\0\\0\\0\\0\\0\\0\\0\");\n-  uint64_t x01 = I64 (\"\\0\\1\\0\\0\\0\\0\\0\\0\");\n-  uint64_t x001 = I64 (\"\\0\\0\\1\\0\\0\\0\\0\\0\");\n-  uint64_t x0001 = I64 (\"\\0\\0\\0\\1\\0\\0\\0\\0\");\n-  uint64_t x00001 = I64 (\"\\0\\0\\0\\0\\1\\0\\0\\0\");\n-  uint64_t x000001 = I64 (\"\\0\\0\\0\\0\\0\\1\\0\\0\");\n-  uint64_t x0000001 = I64 (\"\\0\\0\\0\\0\\0\\0\\1\\0\");\n-  uint64_t x00000001 = I64 (\"\\0\\0\\0\\0\\0\\0\\0\\1\");\n-\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,        x1, == 1);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,       x01, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,      x001, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,     x0001, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,    x00001, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,   x000001, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0,  x0000001, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0, x00000001, == 0);\n-\n-  T2 (\"xxxxxxx\", uint128_t, 0,        x1, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,       x01, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,      x001, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,     x0001, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,    x00001, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,   x000001, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0,  x0000001, 0, == 0);\n-  T2 (\"xxxxxxx\", uint128_t, 0, x00000001, 0, == 0);\n-\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0, I64 (\"\\2\\1\\0\\0\\0\\0\\0\\0\"), == 2);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0, I64 (\"\\0\\2\\1\\0\\0\\0\\0\\0\"), == 0);\n-\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0, I64 (\"\\3\\2\\1\\0\\0\\0\\0\\0\"), == 3);\n-  T2 (\"xxxxxxx\", uint128_t, 0, 0, I64 (\"\\0\\3\\2\\1\\0\\0\\0\\0\"), == 0);\n-\n-  uint64_t x4321     = I64 (\"\\4\\3\\2\\1\\0\\0\\0\\0\");\n-  uint64_t x54321    = I64 (\"\\5\\4\\3\\2\\1\\0\\0\\0\");\n-  uint64_t x654321   = I64 (\"\\6\\5\\4\\3\\2\\1\\0\\0\");\n-  uint64_t x7654321  = I64 (\"\\7\\6\\5\\4\\3\\2\\1\\0\");\n-  uint64_t x87654321 = I64 (\"8\\7\\6\\5\\4\\3\\2\\1\");\n-  uint64_t x9        = I64 (\"9\\0\\0\\0\\0\\0\\0\\0\");\n-  uint64_t xa9       = I64 (\"a9\\0\\0\\0\\0\\0\\0\");\n-  uint64_t xba9      = I64 (\"ba9\\0\\0\\0\\0\\0\\0\");\n-  uint64_t xcba9     = I64 (\"cba9\\0\\0\\0\\0\\0\");\n-  uint64_t xdcba9    = I64 (\"dcba9\\0\\0\\0\\0\");\n-  uint64_t xedcba9   = I64 (\"edcba9\\0\\0\\0\\0\");\n-  uint64_t xfedcba9  = I64 (\"fedcba9\\0\\0\\0\");\n-\n-  T2 (0, uint128_t, 0,        0,     x4321, ==  4);\n-  T2 (0, uint128_t, 0,        0,    x54321, ==  5);\n-  T2 (0, uint128_t, 0,        0,   x654321, ==  6);\n-  T2 (0, uint128_t, 0,        0,  x7654321, ==  7);\n-  T2 (0, uint128_t, 0,        0, x87654321, ==  8);\n-  T2 (0, uint128_t, 0,       x9, x87654321, ==  9);\n-  T2 (0, uint128_t, 0,      xa9, x87654321, == 10);\n-  T2 (0, uint128_t, 0,     xba9, x87654321, == 11);\n-  T2 (0, uint128_t, 0,    xcba9, x87654321, == 12);\n-  T2 (0, uint128_t, 0,   xdcba9, x87654321, == 13);\n-  T2 (0, uint128_t, 0,  xedcba9, x87654321, == 14);\n-  T2 (0, uint128_t, 0, xfedcba9, x87654321, == 15);\n+  uint128_t x1    = I128 (\"\\1\");\n+  uint128_t x1z1  = I128 (\"\\0\\1\");\n+  uint128_t x2z1  = I128 (\"\\0\\0\\1\");\n+  uint128_t x3z1  = I128 (\"\\0\\0\\0\\1\");\n+  uint128_t x4z1  = I128 (\"\\0\\0\\0\\0\\1\");\n+  uint128_t x5z1  = I128 (\"\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x6z1  = I128 (\"\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x7z1  = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x8z1  = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x9z1  = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x10z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x11z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x12z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x13z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x14z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+  uint128_t x15z1 = I128 (\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\");\n+\n+  T (\"xxxxxxx\", uint128_t, 0, x1, == 1);\n+  T (\"xxxxxxx\", uint128_t, 0, x1z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x2z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x3z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x4z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x5z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x6z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x7z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x8z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x9z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x10z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x11z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x12z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x13z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x14z1, == 0);\n+  T (\"xxxxxxx\", uint128_t, 0, x15z1, == 0);\n+\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\2\\1\"), == 2);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\0\\2\\1\"), == 0);\n+\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\3\\2\\1\"), == 3);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\0\\3\\2\\1\"), == 0);\n+\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\"), == 4);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\"), == 5);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\"), == 6);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\"), == 7);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\"), == 8);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\"), == 9);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\"), == 10);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\\13\"), == 11);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\\13\\14\"), == 12);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\\13\\14\\15\"), == 13);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\\13\\14\\15\\16\"), == 14);\n+  T (\"xxxxxxx\", uint128_t, 0, I128 (\"\\1\\2\\3\\4\\5\\6\\7\\10\\11\\12\\13\\14\\15\\16\\17\"), == 15);\n }\n \n-#endif   // __uint128_t\n+#endif   // __SIZEOF_INT128__\n \n /* { dg-final { scan-tree-dump-times \"strlen\" 0 \"optimized\" } }\n    { dg-final { scan-tree-dump-times \"_not_eliminated_\" 0 \"optimized\" } } */"}, {"sha": "fd4c4a9e1f62528703e641965bf93260a766d754", "filename": "gcc/testsuite/gcc.dg/strlenopt-71.c", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-71.c?ref=f2d52e0042fb5027ae6f8af48e39071648c6b65e", "patch": "@@ -8,8 +8,8 @@\n \n #define CHAR_BIT __CHAR_BIT__\n \n-typedef __INT16_TYPE__ int16_t;\n-typedef __INT32_TYPE__ int32_t;\n+typedef __UINT16_TYPE__ uint16_t;\n+typedef __UINT32_TYPE__ uint32_t;\n \n #define NOIPA __attribute__ ((noclone, noinline, noipa))\n \n@@ -40,34 +40,45 @@ NOIPA void terminate (void)\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n+\n+#define ELT(s, i)   ((s \"\\0\\0\\0\\0\")[i])\n+\n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n-#  define I16(s) ((s[0] << 8) + s[1])\n-#  define I32(s) ((s[0] << 24) + (s[1] << 16) + (s[2] << 8) + s[3])\n+#  define I16(s) (((uint16_t)ELT (s, 0) << 8) + (uint16_t)ELT (s, 1))\n+#  define I32(s)\t\t\t\t\\\n+  (((uint32_t)ELT (s, 0) << 24)\t\t\t\\\n+   + ((uint32_t)ELT (s, 1) << 16)\t\t\\\n+   + ((uint32_t)ELT (s, 2) << 8)\t\t\\\n+   + (uint32_t)ELT (s, 3))\n #elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-#  define I16(s) ((s[1] << 8) + s[0])\n-#  define I32(s) ((s[3] << 24) + (s[2] << 16) + (s[1] << 8) + s[0])\n+#  define I16(s) (((uint16_t)ELT (s, 1) << 8) + (uint16_t)ELT (s, 0))\n+#  define I32(s)\t\t\t\t\\\n+  (((uint32_t)ELT (s, 3) << 24)\t\t\t\\\n+   + ((uint32_t)ELT (s, 2) << 16)\t\t\\\n+   + ((uint32_t)ELT (s, 1) << 8)\t\t\\\n+   + (uint32_t)ELT (s, 0))\n #endif\n \n char a[32];\n \n NOIPA void\n i16_1 (void)\n {\n-  *(int16_t*)a = I16 (\"12\");\n-  *(int16_t*)(a + 2) = I16 (\"3\");\n+  *(uint16_t*)a = I16 (\"12\");\n+  *(uint16_t*)(a + 2) = I16 (\"3\");\n   VERIFY (a, \"123\");\n \n-  *(int16_t*)(a + 1) = I16 (\"23\");\n+  *(uint16_t*)(a + 1) = I16 (\"23\");\n   VERIFY (a, \"123\");\n \n-  *(int16_t*)(a) = I16 (\"12\");\n+  *(uint16_t*)(a) = I16 (\"12\");\n   VERIFY (a, \"123\");\n \n-  *(int16_t*)(a + 1) = I16 (\"2\");\n+  *(uint16_t*)(a + 1) = I16 (\"2\");\n   VERIFY (a, \"12\");\n \n-  *(int16_t*)(a + 3) = I16 (\"45\");\n-  *(int16_t*)(a + 2) = I16 (\"34\");\n+  *(uint16_t*)(a + 3) = I16 (\"45\");\n+  *(uint16_t*)(a + 2) = I16 (\"34\");\n   VERIFY (a, \"12345\");\n }\n \n@@ -77,30 +88,30 @@ i16_2 (void)\n   strcpy (a, \"12\");\n   strcat (a, \"34\");\n \n-  *(int16_t*)a = I16 (\"12\");\n+  *(uint16_t*)a = I16 (\"12\");\n   VERIFY (a, \"1234\");\n \n-  *(int16_t*)(a + 1) = I16 (\"12\");\n+  *(uint16_t*)(a + 1) = I16 (\"12\");\n   VERIFY (a, \"1124\");\n \n-  *(int16_t*)(a + 2) = I16 (\"12\");\n+  *(uint16_t*)(a + 2) = I16 (\"12\");\n   VERIFY (a, \"1112\");\n \n-  *(int16_t*)(a + 3) = I16 (\"12\");\n+  *(uint16_t*)(a + 3) = I16 (\"12\");\n   VERIFY (a, \"11112\");\n \n-  *(int16_t*)(a + 4) = I16 (\"12\");\n+  *(uint16_t*)(a + 4) = I16 (\"12\");\n   VERIFY (a, \"111112\");\n }\n \n \n NOIPA void\n i32_1 (void)\n {\n-  *(int32_t*)a = I32 (\"1234\");\n+  *(uint32_t*)a = I32 (\"1234\");\n   VERIFY (a, \"1234\");\n \n-  *(int32_t*)(a + 1) = I32 (\"2345\");\n+  *(uint32_t*)(a + 1) = I32 (\"2345\");\n   VERIFY (a, \"12345\");\n }\n \n@@ -110,22 +121,22 @@ i32_2 (void)\n   strcpy (a, \"12\");\n   strcat (a, \"34\");\n \n-  *(int32_t*)a = I32 (\"1234\");\n+  *(uint32_t*)a = I32 (\"1234\");\n   VERIFY (a, \"1234\");\n \n-  *(int32_t*)(a + 4) = I32 (\"567\");\n+  *(uint32_t*)(a + 4) = I32 (\"567\");\n   VERIFY (a, \"1234567\");\n \n-  *(int32_t*)(a + 7) = I32 (\"89\\0\");\n+  *(uint32_t*)(a + 7) = I32 (\"89\\0\");\n   VERIFY (a, \"123456789\");\n \n-  *(int32_t*)(a + 3) = I32 (\"4567\");\n+  *(uint32_t*)(a + 3) = I32 (\"4567\");\n   VERIFY (a, \"123456789\");\n \n-  *(int32_t*)(a + 2) = I32 (\"3456\");\n+  *(uint32_t*)(a + 2) = I32 (\"3456\");\n   VERIFY (a, \"123456789\");\n \n-  *(int32_t*)(a + 1) = I32 (\"2345\");\n+  *(uint32_t*)(a + 1) = I32 (\"2345\");\n   VERIFY (a, \"123456789\");\n }\n \n@@ -136,25 +147,25 @@ i32_3 (void)\n   strcpy (a, \"1234\");\n   strcat (a, \"5678\");\n \n-  *(int32_t*)a = I32 (\"1234\");\n+  *(uint32_t*)a = I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)(a + 1) = I32 (\"234\");\n+  *(uint32_t*)(a + 1) = I32 (\"234\");\n   VERIFY (a, \"1234\");\n \n-  *(int32_t*)(a + 2) = I32 (\"3456\");\n+  *(uint32_t*)(a + 2) = I32 (\"3456\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)(a + 3) = I32 (\"4567\");\n+  *(uint32_t*)(a + 3) = I32 (\"4567\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)(a + 4) = I32 (\"5678\");\n+  *(uint32_t*)(a + 4) = I32 (\"5678\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)(a + 5) = I32 (\"6789\");\n+  *(uint32_t*)(a + 5) = I32 (\"6789\");\n   VERIFY (a, \"123456789\");\n \n-  *(int32_t*)(a + 6) = I32 (\"789A\");\n+  *(uint32_t*)(a + 6) = I32 (\"789A\");\n   VERIFY (a, \"123456789A\");\n }\n \n@@ -166,25 +177,25 @@ i32_4 (void)\n   strcpy (a, \"1234\");\n   strcat (a, \"5678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"1\\0\\0\\0\") : I32 (\"1234\");\n+  *(uint32_t*)a = vzero ? I32 (\"1\\0\\0\\0\") : I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"12\\0\\0\") : I32 (\"1234\");\n+  *(uint32_t*)a = vzero ? I32 (\"12\\0\\0\") : I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"123\\0\") : I32 (\"1234\");\n+  *(uint32_t*)a = vzero ? I32 (\"123\\0\") : I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"1234\") : I32 (\"1234\");\n+  *(uint32_t*)a = vzero ? I32 (\"1234\") : I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"1235\") : I32 (\"1234\");\n+  *(uint32_t*)a = vzero ? I32 (\"1235\") : I32 (\"1234\");\n   VERIFY (a, \"12345678\");\n \n-  *(int32_t*)a = vzero ? I32 (\"1234\") : I32 (\"123\\0\");\n+  *(uint32_t*)a = vzero ? I32 (\"1234\") : I32 (\"123\\0\");\n   VERIFY (a, \"123\");\n \n-  *(int32_t*)(a + 3) = vzero ? I32 (\"456\\0\") : I32 (\"4567\");\n+  *(uint32_t*)(a + 3) = vzero ? I32 (\"456\\0\") : I32 (\"4567\");\n   VERIFY (a, \"12345678\");\n }\n "}, {"sha": "9c00a95162f6515910ee07ae0ed4debebea0adaf", "filename": "gcc/testsuite/gcc.dg/strlenopt-72.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d52e0042fb5027ae6f8af48e39071648c6b65e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-72.c?ref=f2d52e0042fb5027ae6f8af48e39071648c6b65e", "patch": "@@ -5,7 +5,12 @@\n    unaligned stores and where GCC lowers multi-character stores into smaller\n    numbers of wider stores.\n    { dg-do compile }\n-   { dg-options \"-O2 -fdump-tree-optimized\" }  */\n+   { dg-options \"-O2 -fdump-tree-optimized\" }\n+   On strictly aligned targets the consecutive char assignments used\n+   by the test aren't merged.  When they involve multiple trailing nuls\n+   these assignments then defeat the strlen optimization as a result of\n+   pr83821.  When the bug is resolved the directive below can be removed.\n+   { dg-require-effective-target non_strict_align } */\n \n #include \"strlenopt.h\"\n "}]}