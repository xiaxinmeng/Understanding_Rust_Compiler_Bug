{"sha": "70d904ca8edc145e16c7d5720059eb437e439ee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkOTA0Y2E4ZWRjMTQ1ZTE2YzdkNTcyMDA1OWViNDM3ZTQzOWVlMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-08T13:09:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-08T13:09:37Z"}, "message": "freeze.adb (Generate_Prim_Op_References): New procedure, abstracted from Freeze_Entity.\n\n2008-08-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Generate_Prim_Op_References): New procedure, abstracted\n\tfrom Freeze_Entity. Used to generate cross-reference information for\n\ttypes declared in generic packages.\n\nFrom-SVN: r138881", "tree": {"sha": "b6aedb4afce185e19867baa3950522a436f2fda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6aedb4afce185e19867baa3950522a436f2fda4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d904ca8edc145e16c7d5720059eb437e439ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d904ca8edc145e16c7d5720059eb437e439ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d904ca8edc145e16c7d5720059eb437e439ee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d904ca8edc145e16c7d5720059eb437e439ee2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfb535550fe6fdd93b32091704b42812873ba267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb535550fe6fdd93b32091704b42812873ba267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb535550fe6fdd93b32091704b42812873ba267"}], "stats": {"total": 168, "additions": 107, "deletions": 61}, "files": [{"sha": "df7f18bf56093704941f1476c9a4f3cc84a5539b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d904ca8edc145e16c7d5720059eb437e439ee2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d904ca8edc145e16c7d5720059eb437e439ee2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=70d904ca8edc145e16c7d5720059eb437e439ee2", "patch": "@@ -1,3 +1,9 @@\n+2008-08-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Generate_Prim_Op_References): New procedure, abstracted\n+\tfrom Freeze_Entity. Used to generate cross-reference information for\n+\ttypes declared in generic packages.\n+\n 2008-08-08  Thomas Quinot  <quinot@adacore.com>\n \n \t* gcc-interface/Makefile.in: Reintroduce g-soccon.ads as a"}, {"sha": "5e069f4c7a4eec759af77351c3b46963cf28ea63", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 101, "deletions": 61, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d904ca8edc145e16c7d5720059eb437e439ee2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d904ca8edc145e16c7d5720059eb437e439ee2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=70d904ca8edc145e16c7d5720059eb437e439ee2", "patch": "@@ -134,6 +134,11 @@ package body Freeze is\n    --  the designated type. Otherwise freezing the access type does not freeze\n    --  the designated type.\n \n+   procedure Generate_Prim_Op_References\n+     (Typ      : Entity_Id);\n+   --  For a tagged type, generate implicit references to its primitive\n+   --  operations, for source navigation.\n+\n    procedure Process_Default_Expressions\n      (E     : Entity_Id;\n       After : in out Node_Id);\n@@ -2600,6 +2605,10 @@ package body Freeze is\n                      --\n                      --    type T is tagged;\n                      --    function F (X : Boolean) return T; -- ERROR\n+                     --  The type must be declared in the current scope\n+                     --  for the use to be legal, and the full view\n+                     --  must be available when the construct that mentions\n+                     --  it is frozen.\n \n                      elsif Ekind (Etype (E)) = E_Incomplete_Type\n                        and then Is_Tagged_Type (Etype (E))\n@@ -2608,7 +2617,7 @@ package body Freeze is\n                      then\n                         Error_Msg_N\n                           (\"(Ada 2005): invalid use of tagged incomplete type\",\n-                           E);\n+                            E);\n                      end if;\n                   end if;\n                end;\n@@ -2635,10 +2644,30 @@ package body Freeze is\n          --  Here for other than a subprogram or type\n \n          else\n+            --  For a generic package, freeze types within, so that proper\n+            --  cross-reference information is generated for tagged types.\n+            --  This is the only freeze processing needed for generic packages.\n+\n+            if Ekind (E) = E_Generic_Package then\n+               declare\n+                  T : Entity_Id;\n+\n+               begin\n+                  T := First_Entity (E);\n+\n+                  while Present (T) loop\n+                     if Is_Type (T) then\n+                        Generate_Prim_Op_References (T);\n+                     end if;\n+\n+                     Next_Entity (T);\n+                  end loop;\n+               end;\n+\n             --  If entity has a type, and it is not a generic unit, then\n             --  freeze it first (RM 13.14(10)).\n \n-            if Present (Etype (E))\n+            elsif Present (Etype (E))\n               and then Ekind (E) /= E_Generic_Function\n             then\n                Freeze_And_Append (Etype (E), Loc, Result);\n@@ -3628,66 +3657,9 @@ package body Freeze is\n             end if;\n          end if;\n \n-         --  Generate primitive operation references for a tagged type\n-\n-         if Is_Tagged_Type (E)\n-           and then not Is_Class_Wide_Type (E)\n-         then\n-            declare\n-               Prim_List : Elist_Id;\n-               Prim      : Elmt_Id;\n-               Ent       : Entity_Id;\n-               Aux_E     : Entity_Id;\n-\n-            begin\n-               --  Handle subtypes\n+         --  Generate references to primitive operations for a tagged type\n \n-               if Ekind (E) = E_Protected_Subtype\n-                 or else Ekind (E) = E_Task_Subtype\n-               then\n-                  Aux_E := Etype (E);\n-               else\n-                  Aux_E := E;\n-               end if;\n-\n-               --  Ada 2005 (AI-345): In case of concurrent type generate\n-               --  reference to the wrapper that allow us to dispatch calls\n-               --  through their implemented abstract interface types.\n-\n-               --  The check for Present here is to protect against previously\n-               --  reported critical errors.\n-\n-               if Is_Concurrent_Type (Aux_E)\n-                 and then Present (Corresponding_Record_Type (Aux_E))\n-               then\n-                  Prim_List := Primitive_Operations\n-                                (Corresponding_Record_Type (Aux_E));\n-               else\n-                  Prim_List := Primitive_Operations (Aux_E);\n-               end if;\n-\n-               --  Loop to generate references for primitive operations\n-\n-               if Present (Prim_List) then\n-                  Prim := First_Elmt (Prim_List);\n-                  while Present (Prim) loop\n-\n-                     --  If the operation is derived, get the original for\n-                     --  cross-reference purposes (it is the original for\n-                     --  which we want the xref, and for which the comes\n-                     --  from source test needs to be performed).\n-\n-                     Ent := Node (Prim);\n-                     while Present (Alias (Ent)) loop\n-                        Ent := Alias (Ent);\n-                     end loop;\n-\n-                     Generate_Reference (E, Ent, 'p', Set_Ref => False);\n-                     Next_Elmt (Prim);\n-                  end loop;\n-               end if;\n-            end;\n-         end if;\n+         Generate_Prim_Op_References (E);\n \n          --  Now that all types from which E may depend are frozen, see if the\n          --  size is known at compile time, if it must be unsigned, or if\n@@ -5231,6 +5203,74 @@ package body Freeze is\n       end if;\n    end Is_Fully_Defined;\n \n+   ---------------------------------\n+   -- Generate_Prim_Op_References --\n+   ---------------------------------\n+\n+   procedure Generate_Prim_Op_References\n+     (Typ      : Entity_Id)\n+   is\n+      Base_T    : Entity_Id;\n+      Prim      : Elmt_Id;\n+      Prim_List : Elist_Id;\n+      Ent       : Entity_Id;\n+\n+   begin\n+      --  Handle subtypes of synchronized types.\n+\n+      if Ekind (Typ) = E_Protected_Subtype\n+        or else Ekind (Typ) = E_Task_Subtype\n+      then\n+         Base_T := Etype (Typ);\n+      else\n+         Base_T := Typ;\n+      end if;\n+\n+      --  References to primitive operations are only relevant for tagged types\n+\n+      if not Is_Tagged_Type (Base_T)\n+           or else Is_Class_Wide_Type (Base_T)\n+      then\n+         return;\n+      end if;\n+\n+      --  Ada 2005 (AI-345): For synchronized types generate reference\n+      --  to the wrapper that allow us to dispatch calls through their\n+      --  implemented abstract interface types.\n+\n+      --  The check for Present here is to protect against previously\n+      --  reported critical errors.\n+\n+      if Is_Concurrent_Type (Base_T)\n+        and then Present (Corresponding_Record_Type (Base_T))\n+      then\n+         Prim_List := Primitive_Operations\n+                       (Corresponding_Record_Type (Base_T));\n+      else\n+         Prim_List := Primitive_Operations (Base_T);\n+      end if;\n+\n+      if No (Prim_List) then\n+         return;\n+      end if;\n+\n+      Prim := First_Elmt (Prim_List);\n+      while Present (Prim) loop\n+\n+         --  If the operation is derived, get the original for cross-reference\n+         --  reference purposes (it is the original for which we want the xref\n+         --  and for which the comes_from_source test must be performed).\n+\n+         Ent := Node (Prim);\n+         while Present (Alias (Ent)) loop\n+            Ent := Alias (Ent);\n+         end loop;\n+\n+         Generate_Reference (Typ, Ent, 'p', Set_Ref => False);\n+         Next_Elmt (Prim);\n+      end loop;\n+   end Generate_Prim_Op_References;\n+\n    ---------------------------------\n    -- Process_Default_Expressions --\n    ---------------------------------"}]}