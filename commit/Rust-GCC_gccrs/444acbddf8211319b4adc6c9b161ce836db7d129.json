{"sha": "444acbddf8211319b4adc6c9b161ce836db7d129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0YWNiZGRmODIxMTMxOWI0YWRjNmM5YjE2MWNlODM2ZGI3ZDEyOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:31:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:31:02Z"}, "message": "[multiple changes]\n\n2011-08-29  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb, prj.adb, prj.ads (Compute_All_Imported_Projects): Also\n\tinitialize aggregated projects.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Renamed_Entity): Within an instance, use scope\n\tdepth of candidates to resolve a potentially spurious ambiguity between\n\ttwo visible subprograms.\n\nFrom-SVN: r178225", "tree": {"sha": "3d87f1a7616c77e1cd8ee882c97c12269c878086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d87f1a7616c77e1cd8ee882c97c12269c878086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444acbddf8211319b4adc6c9b161ce836db7d129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444acbddf8211319b4adc6c9b161ce836db7d129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444acbddf8211319b4adc6c9b161ce836db7d129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444acbddf8211319b4adc6c9b161ce836db7d129/comments", "author": null, "committer": null, "parents": [{"sha": "e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02965831e0ec57a216cc64e38ebcdb10bc1e77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02965831e0ec57a216cc64e38ebcdb10bc1e77f"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "f96c6c882dc2225221493012c8935052ebd981a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=444acbddf8211319b4adc6c9b161ce836db7d129", "patch": "@@ -1,3 +1,14 @@\n+2011-08-29  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* make.adb, prj.adb, prj.ads (Compute_All_Imported_Projects): Also\n+\tinitialize aggregated projects.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Renamed_Entity): Within an instance, use scope\n+\tdepth of candidates to resolve a potentially spurious ambiguity between\n+\ttwo visible subprograms.\n+\n 2011-08-29  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Allow Test_Case pragma without"}, {"sha": "3cf73c8e449d82d0bb7e8e3f0e0b8745b39329f8", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=444acbddf8211319b4adc6c9b161ce836db7d129", "patch": "@@ -6621,7 +6621,7 @@ package body Make is\n          Add_Object_Directories (Main_Project, Project_Tree);\n \n          Recursive_Compute_Depth (Main_Project);\n-         Compute_All_Imported_Projects (Project_Tree);\n+         Compute_All_Imported_Projects (Main_Project, Project_Tree);\n \n       else\n "}, {"sha": "63fb12759deb0184c870764c3f69315cbe200e01", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 78, "deletions": 53, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=444acbddf8211319b4adc6c9b161ce836db7d129", "patch": "@@ -1283,72 +1283,97 @@ package body Prj is\n    -- Compute_All_Imported_Projects --\n    -----------------------------------\n \n-   procedure Compute_All_Imported_Projects (Tree : Project_Tree_Ref) is\n-      Project : Project_Id;\n-\n-      procedure Recursive_Add\n-        (Prj   : Project_Id;\n-         Tree  : Project_Tree_Ref;\n-         Dummy : in out Boolean);\n-      --  Recursively add the projects imported by project Project, but not\n-      --  those that are extended.\n-\n-      -------------------\n-      -- Recursive_Add --\n-      -------------------\n-\n-      procedure Recursive_Add\n-        (Prj   : Project_Id;\n-         Tree  : Project_Tree_Ref;\n-         Dummy : in out Boolean)\n+   procedure Compute_All_Imported_Projects\n+     (Root_Project : Project_Id;\n+      Tree         : Project_Tree_Ref)\n+   is\n+      procedure Analyze_Tree\n+        (Local_Root : Project_Id; Local_Tree : Project_Tree_Ref);\n+      --  Process Project and all its aggregated project to analyze their own\n+      --  imported projects.\n+\n+      ------------------\n+      -- Analyze_Tree --\n+      ------------------\n+\n+      procedure Analyze_Tree\n+        (Local_Root : Project_Id; Local_Tree : Project_Tree_Ref)\n       is\n-         pragma Unreferenced (Dummy, Tree);\n-         List    : Project_List;\n-         Prj2    : Project_Id;\n+         pragma Unreferenced (Local_Root);\n+\n+         Project : Project_Id;\n+\n+         procedure Recursive_Add\n+           (Prj   : Project_Id;\n+            Tree  : Project_Tree_Ref;\n+            Dummy : in out Boolean);\n+         --  Recursively add the projects imported by project Project, but not\n+         --  those that are extended.\n+\n+         -------------------\n+         -- Recursive_Add --\n+         -------------------\n+\n+         procedure Recursive_Add\n+           (Prj   : Project_Id;\n+            Tree  : Project_Tree_Ref;\n+            Dummy : in out Boolean)\n+         is\n+            pragma Unreferenced (Dummy, Tree);\n+            List    : Project_List;\n+            Prj2    : Project_Id;\n \n-      begin\n-         --  A project is not importing itself\n+         begin\n+            --  A project is not importing itself\n \n-         Prj2 := Ultimate_Extending_Project_Of (Prj);\n+            Prj2 := Ultimate_Extending_Project_Of (Prj);\n \n-         if Project /= Prj2 then\n+            if Project /= Prj2 then\n \n-            --  Check that the project is not already in the list. We know the\n-            --  one passed to Recursive_Add have never been visited before, but\n-            --  the one passed it are the extended projects.\n+               --  Check that the project is not already in the list. We know\n+               --  the one passed to Recursive_Add have never been visited\n+               --  before, but the one passed it are the extended projects.\n \n-            List := Project.All_Imported_Projects;\n-            while List /= null loop\n-               if List.Project = Prj2 then\n-                  return;\n-               end if;\n+               List := Project.All_Imported_Projects;\n+               while List /= null loop\n+                  if List.Project = Prj2 then\n+                     return;\n+                  end if;\n \n-               List := List.Next;\n-            end loop;\n+                  List := List.Next;\n+               end loop;\n \n-            --  Add it to the list\n+               --  Add it to the list\n \n-            Project.All_Imported_Projects :=\n-              new Project_List_Element'\n-                (Project => Prj2,\n-                 Next    => Project.All_Imported_Projects);\n-         end if;\n-      end Recursive_Add;\n+               Project.All_Imported_Projects :=\n+                 new Project_List_Element'\n+                   (Project => Prj2,\n+                    Next    => Project.All_Imported_Projects);\n+            end if;\n+         end Recursive_Add;\n \n-      procedure For_All_Projects is\n-        new For_Every_Project_Imported (Boolean, Recursive_Add);\n+         procedure For_All_Projects is\n+           new For_Every_Project_Imported (Boolean, Recursive_Add);\n \n-      Dummy : Boolean := False;\n-      List  : Project_List;\n+         Dummy   : Boolean := False;\n+         List    : Project_List;\n+      begin\n+         List := Local_Tree.Projects;\n+         while List /= null loop\n+            Project := List.Project;\n+            Free_List\n+              (Project.All_Imported_Projects, Free_Project => False);\n+            For_All_Projects\n+              (Project, Local_Tree, Dummy, Include_Aggregated => False);\n+            List := List.Next;\n+         end loop;\n+      end Analyze_Tree;\n+\n+      procedure For_Aggregates is\n+        new For_Project_And_Aggregated (Analyze_Tree);\n \n    begin\n-      List := Tree.Projects;\n-      while List /= null loop\n-         Project := List.Project;\n-         Free_List (Project.All_Imported_Projects, Free_Project => False);\n-         For_All_Projects (Project, Tree, Dummy, Include_Aggregated => False);\n-         List := List.Next;\n-      end loop;\n+      For_Aggregates (Root_Project, Tree);\n    end Compute_All_Imported_Projects;\n \n    -------------------"}, {"sha": "6cd46d323ac275d97c5bca9d8632498ff25d0306", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=444acbddf8211319b4adc6c9b161ce836db7d129", "patch": "@@ -909,9 +909,11 @@ package Prj is\n    --  If Only_If_Ada is True, then No_Name will be returned when the project\n    --  doesn't Ada sources.\n \n-   procedure Compute_All_Imported_Projects (Tree : Project_Tree_Ref);\n+   procedure Compute_All_Imported_Projects\n+     (Root_Project : Project_Id;\n+      Tree         : Project_Tree_Ref);\n    --  For all projects in the tree, compute the list of the projects imported\n-   --  directly or indirectly by project Project. The result is stored in\n+   --  directly or indirectly by project Root_Project. The result is stored in\n    --  Project.All_Imported_Projects for each project\n \n    function Ultimate_Extending_Project_Of"}, {"sha": "deb25af66060c5ced92bf20661307d6b6d72bd4d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444acbddf8211319b4adc6c9b161ce836db7d129/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=444acbddf8211319b4adc6c9b161ce836db7d129", "patch": "@@ -4841,7 +4841,9 @@ package body Sem_Ch8 is\n             Set_Entity_Or_Discriminal (N, E);\n \n             if Ada_Version >= Ada_2012\n-              and then Nkind (Parent (N)) in N_Subexpr\n+              and then\n+                (Nkind (Parent (N)) in N_Subexpr\n+                  or else Nkind (Parent (N)) = N_Object_Declaration)\n             then\n                Check_Implicit_Dereference (N, Etype (E));\n             end if;\n@@ -5531,13 +5533,30 @@ package body Sem_Ch8 is\n \n                      if Present (Inst) then\n                         if Within (It.Nam, Inst) then\n-                           return (It.Nam);\n+                           if Within (Old_S, Inst) then\n+\n+                              --  Choose the innermost subprogram, which would\n+                              --  have hidden the outer one in the generic.\n+\n+                              if Scope_Depth (It.Nam) <\n+                                Scope_Depth (Old_S)\n+                              then\n+                                 return Old_S;\n+\n+                              else\n+                                 return It.Nam;\n+                              end if;\n+                           end if;\n+\n                         elsif Within (Old_S, Inst) then\n                            return (Old_S);\n+\n                         else\n                            return Report_Overload;\n                         end if;\n \n+                     --  If not within an instance, ambiguity is real.\n+\n                      else\n                         return Report_Overload;\n                      end if;"}]}