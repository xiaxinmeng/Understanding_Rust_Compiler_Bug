{"sha": "f2e2cbd4a21cad06f5cb58e533209fa484acc672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlMmNiZDRhMjFjYWQwNmY1Y2I1OGU1MzMyMDlmYTQ4NGFjYzY3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-13T00:10:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T00:10:42Z"}, "message": "decl.c (xref_tag): Only complain once about using a typedef-name with 'struct'.\n\n\t* decl.c (xref_tag): Only complain once about using a typedef-name\n\twith 'struct'.  Downgrade to pedwarn.\n\t* decl.c (grokdeclarator): Allow [] syntax for zero-length array.\n\nFrom-SVN: r26392", "tree": {"sha": "8a25f3b6c9e80c0a5e909a8b53210b24fe44daa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a25f3b6c9e80c0a5e909a8b53210b24fe44daa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e2cbd4a21cad06f5cb58e533209fa484acc672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e2cbd4a21cad06f5cb58e533209fa484acc672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e2cbd4a21cad06f5cb58e533209fa484acc672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e2cbd4a21cad06f5cb58e533209fa484acc672/comments", "author": null, "committer": null, "parents": [{"sha": "20c395720e1d3731f347086be7b26ea35eb98bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c395720e1d3731f347086be7b26ea35eb98bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c395720e1d3731f347086be7b26ea35eb98bb6"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "5531d63f4ac8890db5337b7b23156e3ae3bc19ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e2cbd4a21cad06f5cb58e533209fa484acc672/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e2cbd4a21cad06f5cb58e533209fa484acc672/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2e2cbd4a21cad06f5cb58e533209fa484acc672", "patch": "@@ -1,5 +1,10 @@\n 1999-04-12  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (xref_tag): Only complain once about using a typedef-name\n+\twith 'struct'.  Downgrade to pedwarn.\n+\n+\t* decl.c (grokdeclarator): Allow [] syntax for zero-length array.\n+\n \t* parse.y (absdcl_intern): New nonterminal.\n \t(absdcl, direct_abstract_declarator): Use it.\n "}, {"sha": "89b136793bf5fdd6b64580acba268d19929870cb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e2cbd4a21cad06f5cb58e533209fa484acc672/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e2cbd4a21cad06f5cb58e533209fa484acc672/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f2e2cbd4a21cad06f5cb58e533209fa484acc672", "patch": "@@ -10090,6 +10090,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    if (type == error_mark_node)\n \t      continue;\n \n+\t    /* VC++ spells a zero-sized array with [].  */\n+\t    if (size == NULL_TREE && decl_context == FIELD && ! staticp)\n+\t      size = integer_zero_node;\n+\n \t    if (size)\n \t      {\n \t\t/* Must suspend_momentary here because the index\n@@ -12354,9 +12358,17 @@ xref_tag (code_type_node, name, globalize)\n \t{\n \t  if (t)\n \t    {\n-\t      if (t != TYPE_MAIN_VARIANT (t))\n+\t      /* [dcl.type.elab] If the identifier resolves to a\n+\t\t typedef-name or a template type-parameter, the\n+\t\t elaborated-type-specifier is ill-formed.  */\n+\t      if (t != TYPE_MAIN_VARIANT (t)\n+\t\t  || (CLASS_TYPE_P (t) && TYPE_WAS_ANONYMOUS (t)))\n \t\tcp_pedwarn (\"using typedef-name `%D' after `%s'\",\n \t\t\t    TYPE_NAME (t), tag_name (tag_code));\n+\t      else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)\n+\t\tcp_error (\"using template type parameter `%T' after `%s'\",\n+\t\t\t  t, tag_name (tag_code));\n+\n \t      ref = t;\n \t    }\n \t  else\n@@ -12481,19 +12493,6 @@ xref_tag (code_type_node, name, globalize)\n \n   TREE_TYPE (ref) = attributes;\n \n-  if (ref && TYPE_P (ref))\n-    {\n-      /* [dcl.type.elab]\n-\t     \n-\t If the identifier resolves to a typedef-name or a template\n-\t type-parameter, the elaborated-type-specifier is\n-\t ill-formed.  */\n-      if (TYPE_LANG_SPECIFIC (ref) && TYPE_WAS_ANONYMOUS (ref))\n-\tcp_error (\"`%T' is a typedef name\", ref);\n-      else if (TREE_CODE (ref) == TEMPLATE_TYPE_PARM)\n-\tcp_error (\"`%T' is a template type paramter\", ref);\n-    }\n-\n   return ref;\n }\n "}]}