{"sha": "896977b38f006cd69ace34097d1d2ee7e4cfa096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2OTc3YjM4ZjAwNmNkNjlhY2UzNDA5N2QxZDJlZTdlNGNmYTA5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-09T06:35:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-09T06:35:00Z"}, "message": "debug/dwarf: Support DWARF versions 3 and 4.\n\nFrom-SVN: r185126", "tree": {"sha": "960b64e864bf63b8cee1ecc8873321ff91cc3ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/960b64e864bf63b8cee1ecc8873321ff91cc3ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896977b38f006cd69ace34097d1d2ee7e4cfa096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896977b38f006cd69ace34097d1d2ee7e4cfa096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896977b38f006cd69ace34097d1d2ee7e4cfa096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896977b38f006cd69ace34097d1d2ee7e4cfa096/comments", "author": null, "committer": null, "parents": [{"sha": "9916d7ea44fe2864ebe12dc025ebc4d62aa2fae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9916d7ea44fe2864ebe12dc025ebc4d62aa2fae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9916d7ea44fe2864ebe12dc025ebc4d62aa2fae4"}], "stats": {"total": 148, "additions": 108, "deletions": 40}, "files": [{"sha": "08e37be4b38399623f900b20e8d14e5e7ffca1bd", "filename": "libgo/go/debug/dwarf/buf.go", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fbuf.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -13,17 +13,17 @@ import (\n \n // Data buffer being decoded.\n type buf struct {\n-\tdwarf    *Data\n-\torder    binary.ByteOrder\n-\tname     string\n-\toff      Offset\n-\tdata     []byte\n-\taddrsize int\n-\terr      error\n+\tdwarf *Data\n+\tu     *unit\n+\torder binary.ByteOrder\n+\tname  string\n+\toff   Offset\n+\tdata  []byte\n+\terr   error\n }\n \n-func makeBuf(d *Data, name string, off Offset, data []byte, addrsize int) buf {\n-\treturn buf{d, d.order, name, off, data, addrsize, nil}\n+func makeBuf(d *Data, u *unit, name string, off Offset, data []byte) buf {\n+\treturn buf{d, u, d.order, name, off, data, nil}\n }\n \n func (b *buf) uint8() uint8 {\n@@ -121,15 +121,17 @@ func (b *buf) int() int64 {\n \n // Address-sized uint.\n func (b *buf) addr() uint64 {\n-\tswitch b.addrsize {\n-\tcase 1:\n-\t\treturn uint64(b.uint8())\n-\tcase 2:\n-\t\treturn uint64(b.uint16())\n-\tcase 4:\n-\t\treturn uint64(b.uint32())\n-\tcase 8:\n-\t\treturn uint64(b.uint64())\n+\tif b.u != nil {\n+\t\tswitch b.u.addrsize {\n+\t\tcase 1:\n+\t\t\treturn uint64(b.uint8())\n+\t\tcase 2:\n+\t\t\treturn uint64(b.uint16())\n+\t\tcase 4:\n+\t\t\treturn uint64(b.uint32())\n+\t\tcase 8:\n+\t\t\treturn uint64(b.uint64())\n+\t\t}\n \t}\n \tb.error(\"unknown address size\")\n \treturn 0"}, {"sha": "ebe9a71a0c5d294f827026d91523c280f9ec53f1", "filename": "libgo/go/debug/dwarf/const.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fconst.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -207,6 +207,11 @@ const (\n \tformRef8        format = 0x14\n \tformRefUdata    format = 0x15\n \tformIndirect    format = 0x16\n+\t// following are defined in DWARF 4\n+\tformSecOffset   format = 0x17\n+\tformExprLoc     format = 0x18\n+\tformFlagPresent format = 0x19\n+\tformRefSig8     format = 0x20\n )\n \n // A Tag is the classification (the type) of an Entry."}, {"sha": "4761d74cd799572e079c5defe23db9c008546814", "filename": "libgo/go/debug/dwarf/entry.go", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fentry.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -40,7 +40,7 @@ func (d *Data) parseAbbrev(off uint32) (abbrevTable, error) {\n \t} else {\n \t\tdata = data[off:]\n \t}\n-\tb := makeBuf(d, \"abbrev\", 0, data, 0)\n+\tb := makeBuf(d, nil, \"abbrev\", 0, data)\n \n \t// Error handling is simplified by the buf getters\n \t// returning an endless stream of 0s after an error.\n@@ -182,13 +182,37 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\tcase formUdata:\n \t\t\tval = int64(b.uint())\n \n+\t\t// exprloc\n+\t\tcase formExprLoc:\n+\t\t\tval = b.bytes(int(b.uint()))\n+\n \t\t// flag\n \t\tcase formFlag:\n \t\t\tval = b.uint8() == 1\n+\t\tcase formFlagPresent:\n+\t\t\tval = true\n+\n+\t\t// lineptr, loclistptr, macptr, rangelistptr\n+\t\tcase formSecOffset:\n+\t\t\tif b.u == nil {\n+\t\t\t\tb.error(\"unknown size for DW_FORM_sec_offset\")\n+\t\t\t} else if b.u.dwarf64 {\n+\t\t\t\tval = Offset(b.uint64())\n+\t\t\t} else {\n+\t\t\t\tval = Offset(b.uint32())\n+\t\t\t}\n \n \t\t// reference to other entry\n \t\tcase formRefAddr:\n-\t\t\tval = Offset(b.addr())\n+\t\t\tif b.u == nil {\n+\t\t\t\tb.error(\"unknown version for DW_FORM_ref_addr\")\n+\t\t\t} else if b.u.version == 2 {\n+\t\t\t\tval = Offset(b.addr())\n+\t\t\t} else if b.u.dwarf64 {\n+\t\t\t\tval = Offset(b.uint64())\n+\t\t\t} else {\n+\t\t\t\tval = Offset(b.uint32())\n+\t\t\t}\n \t\tcase formRef1:\n \t\t\tval = Offset(b.uint8()) + ubase\n \t\tcase formRef2:\n@@ -199,6 +223,8 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t\tval = Offset(b.uint64()) + ubase\n \t\tcase formRefUdata:\n \t\t\tval = Offset(b.uint()) + ubase\n+\t\tcase formRefSig8:\n+\t\t\tval = b.uint64()\n \n \t\t// string\n \t\tcase formString:\n@@ -208,7 +234,7 @@ func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {\n \t\t\tif b.err != nil {\n \t\t\t\treturn nil\n \t\t\t}\n-\t\t\tb1 := makeBuf(b.dwarf, \"str\", 0, b.dwarf.str, 0)\n+\t\t\tb1 := makeBuf(b.dwarf, b.u, \"str\", 0, b.dwarf.str)\n \t\t\tb1.skip(int(off))\n \t\t\tval = b1.string()\n \t\t\tif b1.err != nil {\n@@ -251,7 +277,7 @@ func (d *Data) unitReader(i int) *Reader {\n \tr := &Reader{d: d}\n \tr.unit = i\n \tu := &d.unit[i]\n-\tr.b = makeBuf(d, \"info\", u.off, u.data, u.addrsize)\n+\tr.b = makeBuf(d, u, \"info\", u.off, u.data)\n \treturn r\n }\n \n@@ -267,7 +293,7 @@ func (r *Reader) Seek(off Offset) {\n \t\t}\n \t\tu := &d.unit[0]\n \t\tr.unit = 0\n-\t\tr.b = makeBuf(r.d, \"info\", u.off, u.data, u.addrsize)\n+\t\tr.b = makeBuf(r.d, u, \"info\", u.off, u.data)\n \t\treturn\n \t}\n \n@@ -278,7 +304,7 @@ func (r *Reader) Seek(off Offset) {\n \t\tu = &d.unit[i]\n \t\tif u.off <= off && off < u.off+Offset(len(u.data)) {\n \t\t\tr.unit = i\n-\t\t\tr.b = makeBuf(r.d, \"info\", off, u.data[off-u.off:], u.addrsize)\n+\t\t\tr.b = makeBuf(r.d, u, \"info\", off, u.data[off-u.off:])\n \t\t\treturn\n \t\t}\n \t}\n@@ -290,7 +316,7 @@ func (r *Reader) maybeNextUnit() {\n \tfor len(r.b.data) == 0 && r.unit+1 < len(r.d.unit) {\n \t\tr.unit++\n \t\tu := &r.d.unit[r.unit]\n-\t\tr.b = makeBuf(r.d, \"info\", u.off, u.data, u.addrsize)\n+\t\tr.b = makeBuf(r.d, u, \"info\", u.off, u.data)\n \t}\n }\n "}, {"sha": "f9c77cc87e46e67772f5e17e174e83fde58e3dd9", "filename": "libgo/go/debug/dwarf/line.go", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fline.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -74,9 +74,17 @@ func (d *Data) readUnitLine(i int, u *unit) error {\n \t\t\t\t// TODO: Handle AttrRanges and .debug_ranges.\n \t\t\t\t_ = f\n \t\t\t}\n-\t\t\tif off, ok := e.Val(AttrStmtList).(int64); ok {\n-\t\t\t\tu.lineoff = Offset(off)\n-\t\t\t\tsetLineOff = true\n+\t\t\tval := e.Val(AttrStmtList)\n+\t\t\tif val != nil {\n+\t\t\t\tif off, ok := val.(int64); ok {\n+\t\t\t\t\tu.lineoff = Offset(off)\n+\t\t\t\t\tsetLineOff = true\n+\t\t\t\t} else if off, ok := val.(Offset); ok {\n+\t\t\t\t\tu.lineoff = off\n+\t\t\t\t\tsetLineOff = true\n+\t\t\t\t} else {\n+\t\t\t\t\treturn errors.New(\"unrecognized format for DW_ATTR_stmt_list\")\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif dir, ok := e.Val(AttrCompDir).(string); ok {\n \t\t\t\tu.dir = dir\n@@ -177,30 +185,36 @@ func (d *Data) parseLine(u *unit) error {\n \tif u.lineoff+1 == 0 {\n \t\treturn errors.New(\"unknown line offset\")\n \t}\n-\tb := makeBuf(d, \"line\", u.lineoff, d.line, u.addrsize)\n+\tb := makeBuf(d, u, \"line\", u.lineoff, d.line[u.lineoff:])\n \tlen := uint64(b.uint32())\n-\toffSize := 4\n+\tdwarf64 := false\n \tif len == 0xffffffff {\n \t\tlen = b.uint64()\n-\t\toffSize = 8\n+\t\tdwarf64 = true\n \t}\n \tend := b.off + Offset(len)\n-\thdr := d.parseLineHdr(u, &b, offSize)\n+\thdr := d.parseLineHdr(u, &b, dwarf64)\n \tif b.err == nil {\n \t\td.parseLineProgram(u, &b, hdr, end)\n \t}\n \treturn b.err\n }\n \n // parseLineHdr parses a line number program header.\n-func (d *Data) parseLineHdr(u *unit, b *buf, offSize int) (hdr lineHdr) {\n+func (d *Data) parseLineHdr(u *unit, b *buf, dwarf64 bool) (hdr lineHdr) {\n \thdr.version = b.uint16()\n \tif hdr.version < 2 || hdr.version > 4 {\n \t\tb.error(\"unsupported DWARF version \" + strconv.Itoa(int(hdr.version)))\n \t\treturn\n \t}\n \n-\tb.bytes(offSize) // header length\n+\tvar hlen Offset\n+\tif dwarf64 {\n+\t\thlen = Offset(b.uint64())\n+\t} else {\n+\t\thlen = Offset(b.uint32())\n+\t}\n+\tend := b.off + hlen\n \n \thdr.minInsnLen = b.uint8()\n \tif hdr.version < 4 {\n@@ -241,6 +255,10 @@ func (d *Data) parseLineHdr(u *unit, b *buf, offSize int) (hdr lineHdr) {\n \t\thdr.files = append(hdr.files, f)\n \t}\n \n+\tif end > b.off {\n+\t\tb.bytes(int(end - b.off))\n+\t}\n+\n \treturn\n }\n \n@@ -296,6 +314,7 @@ func (d *Data) parseLineProgram(u *unit, b *buf, hdr lineHdr, end Offset) {\n \t\t\t\tu.lines = append(u.lines, lines...)\n \t\t\t\tlineInfo = resetLineInfo\n \t\t\t\tlines = nil\n+\t\t\t\tnewLineInfo = true\n \t\t\tcase LineExtSetAddress:\n \t\t\t\taddress = b.addr()\n \t\t\tcase LineExtDefineFile:"}, {"sha": "75798925296cff7375db930854e61f24ee67ae6c", "filename": "libgo/go/debug/dwarf/open.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fopen.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Fopen.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Fopen.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -24,7 +24,6 @@ type Data struct {\n \n \t// parsed data\n \tabbrevCache map[uint32]abbrevTable\n-\taddrsize    int\n \torder       binary.ByteOrder\n \ttypeCache   map[Offset]Type\n \tunit        []unit"}, {"sha": "2ef8ca01bf83e2aa6875d1bfb90e316b13c42d0b", "filename": "libgo/go/debug/dwarf/type.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Ftype.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -435,7 +435,7 @@ func (d *Data) Type(off Offset) (Type, error) {\n \t\t\t\t\tgoto Error\n \t\t\t\t}\n \t\t\t\tif loc, ok := kid.Val(AttrDataMemberLoc).([]byte); ok {\n-\t\t\t\t\tb := makeBuf(d, \"location\", 0, loc, d.addrsize)\n+\t\t\t\t\tb := makeBuf(d, nil, \"location\", 0, loc)\n \t\t\t\t\tif b.uint8() != opPlusUconst {\n \t\t\t\t\t\terr = DecodeError{\"info\", kid.Offset, \"unexpected opcode\"}\n \t\t\t\t\t\tgoto Error"}, {"sha": "b1903208715b913e7010c5a10614558d4a92fac5", "filename": "libgo/go/debug/dwarf/unit.go", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896977b38f006cd69ace34097d1d2ee7e4cfa096/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fdwarf%2Funit.go?ref=896977b38f006cd69ace34097d1d2ee7e4cfa096", "patch": "@@ -16,6 +16,8 @@ type unit struct {\n \tdata     []byte\n \tatable   abbrevTable\n \taddrsize int\n+\tversion  int\n+\tdwarf64  bool // True for 64-bit DWARF format\n \tdir      string\n \tpc       []addrRange   // PC ranges in this compilation unit\n \tlines    []mapLineInfo // PC -> line mapping\n@@ -30,23 +32,37 @@ type addrRange struct {\n func (d *Data) parseUnits() ([]unit, error) {\n \t// Count units.\n \tnunit := 0\n-\tb := makeBuf(d, \"info\", 0, d.info, 0)\n+\tb := makeBuf(d, nil, \"info\", 0, d.info)\n \tfor len(b.data) > 0 {\n-\t\tb.skip(int(b.uint32()))\n+\t\tlen := b.uint32()\n+\t\tif len == 0xffffffff {\n+\t\t\tlen64 := b.uint64()\n+\t\t\tif len64 != uint64(int(len64)) {\n+\t\t\t\tb.error(\"unit length overflow\")\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tlen = uint32(len64)\n+\t\t}\n+\t\tb.skip(int(len))\n \t\tnunit++\n \t}\n \tif b.err != nil {\n \t\treturn nil, b.err\n \t}\n \n \t// Again, this time writing them down.\n-\tb = makeBuf(d, \"info\", 0, d.info, 0)\n+\tb = makeBuf(d, nil, \"info\", 0, d.info)\n \tunits := make([]unit, nunit)\n \tfor i := range units {\n \t\tu := &units[i]\n \t\tu.base = b.off\n \t\tn := b.uint32()\n-\t\tif vers := b.uint16(); vers != 2 {\n+\t\tif n == 0xffffffff {\n+\t\t\tu.dwarf64 = true\n+\t\t\tn = uint32(b.uint64())\n+\t\t}\n+\t\tvers := b.uint16()\n+\t\tif vers < 2 || vers > 4 {\n \t\t\tb.error(\"unsupported DWARF version \" + strconv.Itoa(int(vers)))\n \t\t\tbreak\n \t\t}\n@@ -57,6 +73,7 @@ func (d *Data) parseUnits() ([]unit, error) {\n \t\t\t}\n \t\t\tbreak\n \t\t}\n+\t\tu.version = int(vers)\n \t\tu.atable = atable\n \t\tu.addrsize = int(b.uint8())\n \t\tu.off = b.off"}]}