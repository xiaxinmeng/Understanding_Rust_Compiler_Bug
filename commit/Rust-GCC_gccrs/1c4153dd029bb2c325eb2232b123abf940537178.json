{"sha": "1c4153dd029bb2c325eb2232b123abf940537178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0MTUzZGQwMjliYjJjMzI1ZWIyMjMyYjEyM2FiZjk0MDUzNzE3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-14T19:25:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-14T19:25:07Z"}, "message": "sse.md (vec_widen_smult_hi_v8hi, [...]): Macroize using VI2_AVX2 mode iterator and any_extend code iterator.\n\n\t* config/i386/sse.md (vec_widen_smult_hi_v8hi,\n\tvec_widen_smult_lo_v8hi, vec_widen_umult_hi_v8hi,\n\tvec_widen_umult_lo_v8hi): Macroize using VI2_AVX2\n\tmode iterator and any_extend code iterator.\n\t(vec_widen_<s>mult_hi_v8si, vec_widen_<s>mult_lo_v8si): New\n\texpanders.\n\t(vec_widen_smult_hi_v4si, vec_widen_smult_lo_v4si): Enable\n\talso for TARGET_SSE4_1 using pmuldq insn.\n\t(sdot_prodv8hi): Macroize using VI2_AVX2 iterator.\n\t(sse2_sse4_1): New code attr.\n\t(udot_prodv4si): Macroize using any_extend code iterator.\n\t(<s>dot_prodv8si): New expander.\n\n\t* gcc.target/i386/sse2-mul-1.c: New test.\n\t* gcc.target/i386/sse4_1-mul-1.c: New test.\n\t* gcc.target/i386/avx-mul-1.c: New test.\n\t* gcc.target/i386/xop-mul-1.c: New test.\n\t* gcc.target/i386/avx2-mul-1.c: New test.\n\nFrom-SVN: r180005", "tree": {"sha": "289b9e54641f238a9add6fe8535ad52978ef85c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/289b9e54641f238a9add6fe8535ad52978ef85c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4153dd029bb2c325eb2232b123abf940537178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4153dd029bb2c325eb2232b123abf940537178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4153dd029bb2c325eb2232b123abf940537178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4153dd029bb2c325eb2232b123abf940537178/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ec54555270d9259a136003370104ebeef96bb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec54555270d9259a136003370104ebeef96bb2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec54555270d9259a136003370104ebeef96bb2e"}], "stats": {"total": 518, "additions": 429, "deletions": 89}, "files": [{"sha": "da4707105bd6a4b6c9b357fbbf0f82380980ef29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -1,3 +1,18 @@\n+2011-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (vec_widen_smult_hi_v8hi,\n+\tvec_widen_smult_lo_v8hi, vec_widen_umult_hi_v8hi,\n+\tvec_widen_umult_lo_v8hi): Macroize using VI2_AVX2\n+\tmode iterator and any_extend code iterator.\n+\t(vec_widen_<s>mult_hi_v8si, vec_widen_<s>mult_lo_v8si): New\n+\texpanders.\n+\t(vec_widen_smult_hi_v4si, vec_widen_smult_lo_v4si): Enable\n+\talso for TARGET_SSE4_1 using pmuldq insn.\n+\t(sdot_prodv8hi): Macroize using VI2_AVX2 iterator.\n+\t(sse2_sse4_1): New code attr.\n+\t(udot_prodv4si): Macroize using any_extend code iterator.\n+\t(<s>dot_prodv8si): New expander.\n+\n 2011-10-14  Yakovlev Vladimir  <vladimir.b.yakovlev@intel.com>\n \n \t* config/i386/i386.c (atom_cost): Changed cost for loading"}, {"sha": "ff77003fa61602c9106330b2593075279b1ab976", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 145, "deletions": 89, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -5507,133 +5507,155 @@\n   DONE;\n })\n \n-(define_expand \"vec_widen_smult_hi_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")]\n+(define_expand \"vec_widen_<s>mult_hi_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (any_extend:<sseunpackmode>\n+     (match_operand:VI2_AVX2 1 \"register_operand\" \"\"))\n+   (match_operand:VI2_AVX2 2 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n   rtx op1, op2, t1, t2, dest;\n \n   op1 = operands[1];\n   op2 = operands[2];\n-  t1 = gen_reg_rtx (V8HImode);\n-  t2 = gen_reg_rtx (V8HImode);\n-  dest = gen_lowpart (V8HImode, operands[0]);\n+  t1 = gen_reg_rtx (<MODE>mode);\n+  t2 = gen_reg_rtx (<MODE>mode);\n+  dest = gen_lowpart (<MODE>mode, operands[0]);\n \n-  emit_insn (gen_mulv8hi3 (t1, op1, op2));\n-  emit_insn (gen_smulv8hi3_highpart (t2, op1, op2));\n-  emit_insn (gen_vec_interleave_highv8hi (dest, t1, t2));\n+  emit_insn (gen_mul<mode>3 (t1, op1, op2));\n+  emit_insn (gen_<s>mul<mode>3_highpart (t2, op1, op2));\n+  emit_insn (gen_vec_interleave_high<mode> (dest, t1, t2));\n   DONE;\n })\n \n-(define_expand \"vec_widen_smult_lo_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")]\n+(define_expand \"vec_widen_<s>mult_lo_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (any_extend:<sseunpackmode>\n+     (match_operand:VI2_AVX2 1 \"register_operand\" \"\"))\n+   (match_operand:VI2_AVX2 2 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n   rtx op1, op2, t1, t2, dest;\n \n   op1 = operands[1];\n   op2 = operands[2];\n-  t1 = gen_reg_rtx (V8HImode);\n-  t2 = gen_reg_rtx (V8HImode);\n-  dest = gen_lowpart (V8HImode, operands[0]);\n+  t1 = gen_reg_rtx (<MODE>mode);\n+  t2 = gen_reg_rtx (<MODE>mode);\n+  dest = gen_lowpart (<MODE>mode, operands[0]);\n \n-  emit_insn (gen_mulv8hi3 (t1, op1, op2));\n-  emit_insn (gen_smulv8hi3_highpart (t2, op1, op2));\n-  emit_insn (gen_vec_interleave_lowv8hi (dest, t1, t2));\n+  emit_insn (gen_mul<mode>3 (t1, op1, op2));\n+  emit_insn (gen_<s>mul<mode>3_highpart (t2, op1, op2));\n+  emit_insn (gen_vec_interleave_low<mode> (dest, t1, t2));\n   DONE;\n })\n \n-(define_expand \"vec_widen_umult_hi_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n+(define_expand \"vec_widen_<s>mult_hi_v8si\"\n+  [(match_operand:V4DI 0 \"register_operand\" \"\")\n+   (any_extend:V4DI (match_operand:V8SI 1 \"nonimmediate_operand\" \"\"))\n+   (match_operand:V8SI 2 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_AVX2\"\n {\n-  rtx op1, op2, t1, t2, dest;\n-\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  t1 = gen_reg_rtx (V8HImode);\n-  t2 = gen_reg_rtx (V8HImode);\n-  dest = gen_lowpart (V8HImode, operands[0]);\n+  rtx t1, t2, t3, t4;\n \n-  emit_insn (gen_mulv8hi3 (t1, op1, op2));\n-  emit_insn (gen_umulv8hi3_highpart (t2, op1, op2));\n-  emit_insn (gen_vec_interleave_highv8hi (dest, t1, t2));\n+  t1 = gen_reg_rtx (V4DImode);\n+  t2 = gen_reg_rtx (V4DImode);\n+  t3 = gen_reg_rtx (V8SImode);\n+  t4 = gen_reg_rtx (V8SImode);\n+  emit_insn (gen_avx2_permv4di_1 (t1, gen_lowpart (V4DImode, operands[1]),\n+\t\t\t\t  const0_rtx, const2_rtx,\n+\t\t\t\t  const1_rtx, GEN_INT (3)));\n+  emit_insn (gen_avx2_permv4di_1 (t2, gen_lowpart (V4DImode, operands[2]),\n+\t\t\t\t  const0_rtx, const2_rtx,\n+\t\t\t\t  const1_rtx, GEN_INT (3)));\n+  emit_insn (gen_avx2_pshufdv3 (t3, gen_lowpart (V8SImode, t1),\n+\t\t\t\tGEN_INT (2 + (2 << 2) + (3 << 4) + (3 << 6))));\n+  emit_insn (gen_avx2_pshufdv3 (t4, gen_lowpart (V8SImode, t2),\n+\t\t\t\tGEN_INT (2 + (2 << 2) + (3 << 4) + (3 << 6))));\n+  emit_insn (gen_avx2_<u>mulv4siv4di3 (operands[0], t3, t4));\n   DONE;\n })\n \n-(define_expand \"vec_widen_umult_lo_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n+(define_expand \"vec_widen_<s>mult_lo_v8si\"\n+  [(match_operand:V4DI 0 \"register_operand\" \"\")\n+   (any_extend:V4DI (match_operand:V8SI 1 \"nonimmediate_operand\" \"\"))\n+   (match_operand:V8SI 2 \"nonimmediate_operand\" \"\")]\n+  \"TARGET_AVX2\"\n {\n-  rtx op1, op2, t1, t2, dest;\n-\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  t1 = gen_reg_rtx (V8HImode);\n-  t2 = gen_reg_rtx (V8HImode);\n-  dest = gen_lowpart (V8HImode, operands[0]);\n+  rtx t1, t2, t3, t4;\n \n-  emit_insn (gen_mulv8hi3 (t1, op1, op2));\n-  emit_insn (gen_umulv8hi3_highpart (t2, op1, op2));\n-  emit_insn (gen_vec_interleave_lowv8hi (dest, t1, t2));\n+  t1 = gen_reg_rtx (V4DImode);\n+  t2 = gen_reg_rtx (V4DImode);\n+  t3 = gen_reg_rtx (V8SImode);\n+  t4 = gen_reg_rtx (V8SImode);\n+  emit_insn (gen_avx2_permv4di_1 (t1, gen_lowpart (V4DImode, operands[1]),\n+\t\t\t\t  const0_rtx, const2_rtx,\n+\t\t\t\t  const1_rtx, GEN_INT (3)));\n+  emit_insn (gen_avx2_permv4di_1 (t2,  gen_lowpart (V4DImode, operands[2]),\n+\t\t\t\t  const0_rtx, const2_rtx,\n+\t\t\t\t  const1_rtx, GEN_INT (3)));\n+  emit_insn (gen_avx2_pshufdv3 (t3, gen_lowpart (V8SImode, t1),\n+\t\t\t\tGEN_INT (0 + (0 << 2) + (1 << 4) + (1 << 6))));\n+  emit_insn (gen_avx2_pshufdv3 (t4, gen_lowpart (V8SImode, t2),\n+\t\t\t\tGEN_INT (0 + (0 << 2) + (1 << 4) + (1 << 6))));\n+  emit_insn (gen_avx2_<u>mulv4siv4di3 (operands[0], t3, t4));\n   DONE;\n })\n \n (define_expand \"vec_widen_smult_hi_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n    (match_operand:V4SI 1 \"register_operand\" \"\")\n    (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_XOP\"\n+  \"TARGET_SSE4_1\"\n {\n-  rtx t1, t2;\n+  rtx op1, op2, t1, t2;\n \n+  op1 = operands[1];\n+  op2 = operands[2];\n   t1 = gen_reg_rtx (V4SImode);\n   t2 = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_sse2_pshufd_1 (t1, operands[1],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse2_pshufd_1 (t2, operands[2],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_xop_mulv2div2di3_high (operands[0], t1, t2));\n+  if (TARGET_XOP)\n+    {\n+      emit_insn (gen_sse2_pshufd_1 (t1, op1, GEN_INT (0), GEN_INT (2),\n+\t\t\t\t    GEN_INT (1), GEN_INT (3)));\n+      emit_insn (gen_sse2_pshufd_1 (t2, op2, GEN_INT (0), GEN_INT (2),\n+\t\t\t\t    GEN_INT (1), GEN_INT (3)));\n+      emit_insn (gen_xop_mulv2div2di3_high (operands[0], t1, t2));\n+      DONE;\n+    }\n+\n+  emit_insn (gen_vec_interleave_highv4si (t1, op1, op1));\n+  emit_insn (gen_vec_interleave_highv4si (t2, op2, op2));\n+  emit_insn (gen_sse4_1_mulv2siv2di3 (operands[0], t1, t2));\n   DONE;\n })\n \n (define_expand \"vec_widen_smult_lo_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n    (match_operand:V4SI 1 \"register_operand\" \"\")\n    (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_XOP\"\n+  \"TARGET_SSE4_1\"\n {\n-  rtx t1, t2;\n+  rtx op1, op2, t1, t2;\n \n+  op1 = operands[1];\n+  op2 = operands[2];\n   t1 = gen_reg_rtx (V4SImode);\n   t2 = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_sse2_pshufd_1 (t1, operands[1],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_sse2_pshufd_1 (t2, operands[2],\n-\t\t\t\tGEN_INT (0),\n-\t\t\t\tGEN_INT (2),\n-\t\t\t\tGEN_INT (1),\n-\t\t\t\tGEN_INT (3)));\n-  emit_insn (gen_xop_mulv2div2di3_low (operands[0], t1, t2));\n+  if (TARGET_XOP)\n+    {\n+      emit_insn (gen_sse2_pshufd_1 (t1, op1, GEN_INT (0), GEN_INT (2),\n+\t\t\t\t    GEN_INT (1), GEN_INT (3)));\n+      emit_insn (gen_sse2_pshufd_1 (t2, op2, GEN_INT (0), GEN_INT (2),\n+\t\t\t\t    GEN_INT (1), GEN_INT (3)));\n+      emit_insn (gen_xop_mulv2div2di3_low (operands[0], t1, t2));\n+      DONE;\n+    }\n+\n+  emit_insn (gen_vec_interleave_lowv4si (t1, op1, op1));\n+  emit_insn (gen_vec_interleave_lowv4si (t2, op2, op2));\n+  emit_insn (gen_sse4_1_mulv2siv2di3 (operands[0], t1, t2));\n   DONE;\n })\n \n@@ -5675,30 +5697,35 @@\n   DONE;\n })\n \n-(define_expand \"sdot_prodv8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")\n-   (match_operand:V4SI 3 \"register_operand\" \"\")]\n+(define_expand \"sdot_prod<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI2_AVX2 1 \"register_operand\" \"\")\n+   (match_operand:VI2_AVX2 2 \"register_operand\" \"\")\n+   (match_operand:<sseunpackmode> 3 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n-  rtx t = gen_reg_rtx (V4SImode);\n-  emit_insn (gen_sse2_pmaddwd (t, operands[1], operands[2]));\n-  emit_insn (gen_addv4si3 (operands[0], operands[3], t));\n+  rtx t = gen_reg_rtx (<sseunpackmode>mode);\n+  emit_insn (gen_<sse2_avx2>_pmaddwd (t, operands[1], operands[2]));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_PLUS (<sseunpackmode>mode,\n+\t\t\t\t\toperands[3], t)));\n   DONE;\n })\n \n-(define_expand \"udot_prodv4si\"\n+(define_code_attr sse2_sse4_1\n+   [(zero_extend \"sse2\") (sign_extend \"sse4_1\")])\n+\n+(define_expand \"<s>dot_prodv4si\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n+   (any_extend:V2DI (match_operand:V4SI 1 \"register_operand\" \"\"))\n    (match_operand:V4SI 2 \"register_operand\" \"\")\n    (match_operand:V2DI 3 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n+  \"<CODE> == ZERO_EXTEND ? TARGET_SSE2 : TARGET_SSE4_1\"\n {\n   rtx t1, t2, t3, t4;\n \n   t1 = gen_reg_rtx (V2DImode);\n-  emit_insn (gen_sse2_umulv2siv2di3 (t1, operands[1], operands[2]));\n+  emit_insn (gen_<sse2_sse4_1>_<u>mulv2siv2di3 (t1, operands[1], operands[2]));\n   emit_insn (gen_addv2di3 (t1, t1, operands[3]));\n \n   t2 = gen_reg_rtx (V4SImode);\n@@ -5711,12 +5738,41 @@\n \t\t\t\t GEN_INT (32)));\n \n   t4 = gen_reg_rtx (V2DImode);\n-  emit_insn (gen_sse2_umulv2siv2di3 (t4, t2, t3));\n+  emit_insn (gen_<sse2_sse4_1>_<u>mulv2siv2di3 (t4, t2, t3));\n \n   emit_insn (gen_addv2di3 (operands[0], t1, t4));\n   DONE;\n })\n \n+(define_expand \"<s>dot_prodv8si\"\n+  [(match_operand:V4DI 0 \"register_operand\" \"\")\n+   (any_extend:V4DI (match_operand:V8SI 1 \"register_operand\" \"\"))\n+   (match_operand:V8SI 2 \"register_operand\" \"\")\n+   (match_operand:V4DI 3 \"register_operand\" \"\")]\n+  \"TARGET_AVX2\"\n+{\n+  rtx t1, t2, t3, t4;\n+\n+  t1 = gen_reg_rtx (V4DImode);\n+  emit_insn (gen_avx2_<u>mulv4siv4di3 (t1, operands[1], operands[2]));\n+  emit_insn (gen_addv4di3 (t1, t1, operands[3]));\n+\n+  t2 = gen_reg_rtx (V8SImode);\n+  t3 = gen_reg_rtx (V8SImode);\n+  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, t2),\n+\t\t\t\t gen_lowpart (V2TImode, operands[1]),\n+\t\t\t\t GEN_INT (32)));\n+  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, t3),\n+\t\t\t\t gen_lowpart (V2TImode, operands[2]),\n+\t\t\t\t GEN_INT (32)));\n+\n+  t4 = gen_reg_rtx (V4DImode);\n+  emit_insn (gen_avx2_<u>mulv4siv4di3 (t4, t2, t3));\n+\n+  emit_insn (gen_addv4di3 (operands[0], t1, t4));\n+  DONE;\n+})\n+\n (define_insn \"ashr<mode>3\"\n   [(set (match_operand:VI24_AVX2 0 \"register_operand\" \"=x,x\")\n \t(ashiftrt:VI24_AVX2"}, {"sha": "ca69717cae6c5eed52b4a8007d2562f79d4ad199", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -1,3 +1,11 @@\n+2011-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/sse2-mul-1.c: New test.\n+\t* gcc.target/i386/sse4_1-mul-1.c: New test.\n+\t* gcc.target/i386/avx-mul-1.c: New test.\n+\t* gcc.target/i386/xop-mul-1.c: New test.\n+\t* gcc.target/i386/avx2-mul-1.c: New test.\n+\n 2011-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50563"}, {"sha": "0d511c95cb80eed828003a1bee564e1306872165", "filename": "gcc/testsuite/gcc.target/i386/avx-mul-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-mul-1.c?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include \"sse2-mul-1.c\""}, {"sha": "0351fbb7c3d929747142627723be0af988315604", "filename": "gcc/testsuite/gcc.target/i386/avx2-mul-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-mul-1.c?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O3 -mavx2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx2_test\n+#endif\n+\n+#include \"sse2-mul-1.c\""}, {"sha": "5c792e8a4aa1cd6cfe47e983575b0d697f92cfde", "filename": "gcc/testsuite/gcc.target/i386/sse2-mul-1.c", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mul-1.c?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -0,0 +1,209 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O3 -msse2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <stdlib.h>\n+\n+#define N 512\n+static short a1[N], a2[N], a3[N];\n+static unsigned short b1[N], b2[N], b3[N];\n+static int c1[N], c2[N], c3[N];\n+static unsigned int d1[N], d2[N], d3[N];\n+static long long e1[N], e2[N], e3[N];\n+static unsigned long long g1[N], g2[N], g3[N];\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    a1[i] = a2[i] * a3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    b1[i] = b2[i] * b3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    c1[i] = c2[i] * c3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    d1[i] = d2[i] * d3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    e1[i] = e2[i] * e3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    g1[i] = g2[i] * g3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f7 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    c1[i] = a2[i] * a3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f8 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    d1[i] = (unsigned int) b2[i] * b3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f9 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    e1[i] = (long long) c2[i] * (long long) c3[i];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f10 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    g1[i] = (unsigned long long) d2[i] * (unsigned long long) d3[i];\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f11 (void)\n+{\n+  int i, r = 0;\n+  for (i = 0; i < N; ++i)\n+    r += a2[i] * a3[i];\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone)) unsigned int\n+f12 (void)\n+{\n+  int i;\n+  unsigned r = 0;\n+  for (i = 0; i < N; ++i)\n+    r += (unsigned int) b2[i] * b3[i];\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+f13 (void)\n+{\n+  int i;\n+  long long r = 0;\n+  for (i = 0; i < N; ++i)\n+    r += (long long) c2[i] * (long long) c3[i];\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone)) unsigned long long\n+f14 (void)\n+{\n+  int i;\n+  unsigned long long r = 0;\n+  for (i = 0; i < N; ++i)\n+    r += (unsigned long long) d2[i] * (unsigned long long) d3[i];\n+  return r;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int s1 = 0;\n+  unsigned int s2 = 0;\n+  long long s3 = 0;\n+  unsigned long long s4 = 0;\n+  for (i = 0; i < N; ++i)\n+    {\n+      asm volatile (\"\" : : \"r\" (&s1) : \"memory\");\n+      asm volatile (\"\" : : \"r\" (&s2) : \"memory\");\n+      asm volatile (\"\" : : \"r\" (&s3) : \"memory\");\n+      asm volatile (\"\" : : \"r\" (&s4) : \"memory\");\n+      b2[i] = (int) random ();\n+      b3[i] = (int) random ();\n+      a2[i] = b2[i];\n+      a3[i] = b3[i];\n+      d2[i] = (((int) random ()) << 16) | b2[i];\n+      d3[i] = (((int) random ()) << 16) | b3[i];\n+      c2[i] = d2[i];\n+      c3[i] = d3[i];\n+      s1 += a2[i] * a3[i];\n+      s2 += (unsigned int) b2[i] * b3[i];\n+      s3 += (long long) c2[i] * (long long) c3[i];\n+      s4 += (unsigned long long) d2[i] * (unsigned long long) d3[i];\n+    }\n+  f1 ();\n+  f2 ();\n+  f3 ();\n+  f4 ();\n+  f5 ();\n+  f6 ();\n+  for (i = 0; i < N; ++i)\n+    {\n+      if (a1[i] != (short) (a2[i] * a3[i]))\n+\tabort ();\n+      if (b1[i] != (unsigned short) (b2[i] * b3[i]))\n+\tabort ();\n+      if (c1[i] != c2[i] * c3[i])\n+\tabort ();\n+      if (d1[i] != d2[i] * d3[i])\n+\tabort ();\n+      if (e1[i] != e2[i] * e3[i])\n+\tabort ();\n+      if (g1[i] != g2[i] * g3[i])\n+\tabort ();\n+    }\n+  f7 ();\n+  f8 ();\n+  f9 ();\n+  f10 ();\n+  for (i = 0; i < N; ++i)\n+    {\n+      if (c1[i] != a2[i] * a3[i])\n+\tabort ();\n+      if (d1[i] != b2[i] * b3[i])\n+\tabort ();\n+      if (e1[i] != (long long) c2[i] * (long long) c3[i])\n+\tabort ();\n+      if (g1[i] != (unsigned long long) d2[i] * (unsigned long long) d3[i])\n+\tabort ();\n+    }\n+  if (f11 () != s1 || f12 () != s2 || f13 () != s3 || f14 () != s4)\n+    abort ();\n+}"}, {"sha": "20d03a515d7b32aaebef70b9ab3588812a2c7628", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-mul-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-mul-1.c?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O3 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include \"sse2-mul-1.c\""}, {"sha": "47ef1bc02bb5b62ca9be1943c95f2c743548b5fe", "filename": "gcc/testsuite/gcc.target/i386/xop-mul-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4153dd029bb2c325eb2232b123abf940537178/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-mul-1.c?ref=1c4153dd029bb2c325eb2232b123abf940537178", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target xop } */\n+/* { dg-options \"-O3 -mxop\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"xop-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST xop_test\n+#endif\n+\n+#include \"sse2-mul-1.c\""}]}