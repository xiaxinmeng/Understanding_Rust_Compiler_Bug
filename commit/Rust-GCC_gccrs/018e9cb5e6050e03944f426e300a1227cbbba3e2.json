{"sha": "018e9cb5e6050e03944f426e300a1227cbbba3e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4ZTljYjVlNjA1MGUwMzk0NGY0MjZlMzAwYTEyMjdjYmJiYTNlMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-01-24T15:20:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-01-24T15:20:53Z"}, "message": "PR c++/82249 - wrong mismatched pack length error.\n\n\t* pt.c (extract_fnparm_pack, tsubst_pack_expansion): Handle\n\tunsubstituted function parameter pack.\n\nFrom-SVN: r257018", "tree": {"sha": "fbbe2451dc630b36b36285a1f1fbf23890c5dfe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbe2451dc630b36b36285a1f1fbf23890c5dfe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018e9cb5e6050e03944f426e300a1227cbbba3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018e9cb5e6050e03944f426e300a1227cbbba3e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018e9cb5e6050e03944f426e300a1227cbbba3e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018e9cb5e6050e03944f426e300a1227cbbba3e2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a84aff585b6fea6445ae831d523f088c9662af73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84aff585b6fea6445ae831d523f088c9662af73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84aff585b6fea6445ae831d523f088c9662af73"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "2c499dbc323f7460016be4676621017919d06c54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=018e9cb5e6050e03944f426e300a1227cbbba3e2", "patch": "@@ -1,3 +1,9 @@\n+2018-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82249 - wrong mismatched pack length error.\n+\t* pt.c (extract_fnparm_pack, tsubst_pack_expansion): Handle\n+\tunsubstituted function parameter pack.\n+\n 2018-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/83921"}, {"sha": "abfdbd96ae8d0494033432f9b58c342200884a27", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=018e9cb5e6050e03944f426e300a1227cbbba3e2", "patch": "@@ -10961,7 +10961,12 @@ extract_fnparm_pack (tree tmpl_parm, tree *spec_p)\n   parmvec = make_tree_vec (len);\n   spec_parm = *spec_p;\n   for (i = 0; i < len; i++, spec_parm = DECL_CHAIN (spec_parm))\n-    TREE_VEC_ELT (parmvec, i) = spec_parm;\n+    {\n+      tree elt = spec_parm;\n+      if (DECL_PACK_P (elt))\n+\telt = make_pack_expansion (elt);\n+      TREE_VEC_ELT (parmvec, i) = elt;\n+    }\n \n   /* Build the argument packs.  */\n   SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n@@ -11414,6 +11419,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   tree pattern;\n   tree pack, packs = NULL_TREE;\n   bool unsubstituted_packs = false;\n+  bool unsubstituted_fn_pack = false;\n   int i, len = -1;\n   tree result;\n   hash_map<tree, tree> *saved_local_specializations = NULL;\n@@ -11484,6 +11490,13 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t      else\n \t\targ_pack = make_fnparm_pack (arg_pack);\n \t    }\n+\t  else if (argument_pack_element_is_expansion_p (arg_pack, 0))\n+\t    /* This argument pack isn't fully instantiated yet.  We set this\n+\t       flag rather than clear arg_pack because we do want to do the\n+\t       optimization below, and we don't want to substitute directly\n+\t       into the pattern (as that would expose a NONTYPE_ARGUMENT_PACK\n+\t       where it isn't expected).  */\n+\t    unsubstituted_fn_pack = true;\n \t}\n       else if (TREE_CODE (parm_pack) == FIELD_DECL)\n \targ_pack = tsubst_copy (parm_pack, args, complain, in_decl);\n@@ -11521,7 +11534,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n           if (len < 0)\n \t    len = my_len;\n-          else if (len != my_len)\n+          else if (len != my_len\n+\t\t   && !unsubstituted_fn_pack)\n             {\n \t      if (!(complain & tf_error))\n \t\t/* Fail quietly.  */;\n@@ -11574,7 +11588,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n   /* We cannot expand this expansion expression, because we don't have\n      all of the argument packs we need.  */\n-  if (use_pack_expansion_extra_args_p (packs, len, unsubstituted_packs))\n+  if (use_pack_expansion_extra_args_p (packs, len, (unsubstituted_packs\n+\t\t\t\t\t\t    || unsubstituted_fn_pack)))\n     {\n       /* We got some full packs, but we can't substitute them in until we\n \t have values for all the packs.  So remember these until then.  */"}, {"sha": "5c5af1441c0c7845fe4e427df82531a5999400b1", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018e9cb5e6050e03944f426e300a1227cbbba3e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic7.C?ref=018e9cb5e6050e03944f426e300a1227cbbba3e2", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/82249\n+// { dg-do compile { target c++14 } }\n+\n+template<class T, class U> T calc (T t, U u) { return t; }\n+template <class... Ts> void sink(Ts...);\n+\n+template < typename ... Ds >\n+void f(Ds ...) {\n+  [](auto ... n){\n+    sink (calc(n, Ds{}) ...);\n+  }(Ds{} ...);\n+}\n+\n+\n+int main(){\n+  f();      // Wrong error\n+  f(0, 0);  // Wrong error\n+  f(0);     // ICE\n+}"}]}