{"sha": "4838bfc05bf7b35b1e07a57a0878df308655d6d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzOGJmYzA1YmY3YjM1YjFlMDdhNTdhMDg3OGRmMzA4NjU1ZDZkOA==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.org", "date": "2007-01-27T21:46:15Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2007-01-27T21:46:15Z"}, "message": "re PR libgcj/30513 (Bootstrap failure with libgcj on sparc-sun-solaris2.10)\n\n2007-01-27  Andreas Tobler  <a.tobler@schweiz.org>\n\n\tPR libgcj/30513\n\t* configure.host: Add forgottten sysdep_dir to sparc. Add a flag to\n\tlibgcj_flags to undefine 'sun' at compile time.\n\t* sysdep/sparc/locks.h (read_barrier): New functions for 32 and 64 bit\n\tSparc.\n\t(write_barrier): Likewise.\n\nFrom-SVN: r121239", "tree": {"sha": "cc2a10bedf005955d32e29d096cd5baff68d2ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc2a10bedf005955d32e29d096cd5baff68d2ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4838bfc05bf7b35b1e07a57a0878df308655d6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4838bfc05bf7b35b1e07a57a0878df308655d6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4838bfc05bf7b35b1e07a57a0878df308655d6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4838bfc05bf7b35b1e07a57a0878df308655d6d8/comments", "author": null, "committer": null, "parents": [{"sha": "024abeb327c16c7197cf979fb252fadca61386a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024abeb327c16c7197cf979fb252fadca61386a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/024abeb327c16c7197cf979fb252fadca61386a2"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "7aea26537caa6a81357544c5b081923d586e860f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4838bfc05bf7b35b1e07a57a0878df308655d6d8", "patch": "@@ -1,3 +1,12 @@\n+2007-01-27  Andreas Tobler  <a.tobler@schweiz.org>\n+\n+\tPR libgcj/30513\n+\t* configure.host: Add forgottten sysdep_dir to sparc. Add a flag to\n+\tlibgcj_flags to undefine 'sun' at compile time.\n+\t* sysdep/sparc/locks.h (read_barrier): New functions for 32 and 64 bit\n+\tSparc.\n+\t(write_barrier): Likewise.\n+\n 2007-01-27  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n@@ -61,7 +70,7 @@\n     * libjava/testsuite/libjava.jvmti/jvmti-interp.exp: New file.\n     * libjava/testsuite/libjava.jvmti/interp: New folder.\n     * libjava/testsuite/lib/libjava.exp (exec_gij): New Method.\n-        \n+\n 2007-01-24  Keith Seitz  <keiths@redhat.com>\n \n \t* link.cc (_Jv_Linker::wait_for_state): Add JVMTI"}, {"sha": "edaa679b44e2d2ecd2ab99e71dc5b1196f78ab0b", "filename": "libjava/configure.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=4838bfc05bf7b35b1e07a57a0878df308655d6d8", "patch": "@@ -159,6 +159,10 @@ case \"${host}\" in\n \tenable_hash_synchronization_default=yes\n \t;;\n   sparc*-*)\n+\tsysdeps_dir=sparc\n+\t# On Solaris we have defined 'sun' which later conflicts with \n+\t# namespace usage. So to work this away we use the below undefine.\n+\tlibgcj_flags=\"${libgcj_flags} -Usun\"\n \tlibgcj_interpreter=yes\n         ;;\n   ia64-*)"}, {"sha": "7c30d7c3b0ff00ea80812b1940cee5d59ba7b37d", "filename": "libjava/sysdep/sparc/locks.h", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2Fsysdep%2Fsparc%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4838bfc05bf7b35b1e07a57a0878df308655d6d8/libjava%2Fsysdep%2Fsparc%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fsparc%2Flocks.h?ref=4838bfc05bf7b35b1e07a57a0878df308655d6d8", "patch": "@@ -1,6 +1,6 @@\n // locks.h - Thread synchronization primitives. Sparc implementation.\n \n-/* Copyright (C) 2002  Free Software Foundation\n+/* Copyright (C) 2002, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -38,12 +38,23 @@ release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n }\n \n inline static bool\n-compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+compare_and_swap_release(volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n {\n   return compare_and_swap(addr, old, new_val);\n }\n+\n+inline static void\n+read_barrier()\n+{\n+  __asm__ __volatile__(\"membar #LoadLoad | #LoadStore\" : : : \"memory\");\n+}\n+\n+inline static void\n+write_barrier()\n+{\n+  __asm__ __volatile__(\"membar #StoreLoad | #StoreStore\" : : : \"memory\");\n+}\n #else\n /* Sparc32 implementation, use a spinlock.  */\n static unsigned char __cas_lock = 0;\n@@ -109,12 +120,23 @@ release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n }\n \n inline static bool\n-compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+compare_and_swap_release(volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n {\n   return compare_and_swap(addr, old, new_val);\n }\n+\n+inline static void\n+read_barrier()\n+{\n+  __asm__ __volatile__ (\"\" : : : \"memory\");\n+}\n+\n+inline static void\n+write_barrier()\n+{\n+  __asm__ __volatile__ (\"\" : : : \"memory\");\n+}\n #endif /* __arch64__ */\n \n #endif /* ! __SYSDEP_LOCKS_H__ */"}]}