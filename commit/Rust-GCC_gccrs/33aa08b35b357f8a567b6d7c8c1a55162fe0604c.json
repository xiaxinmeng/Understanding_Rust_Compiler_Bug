{"sha": "33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhYTA4YjM1YjM1N2Y4YTU2N2I2ZDdjOGMxYTU1MTYyZmUwNjA0Yw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2011-10-18T14:14:14Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-10-18T14:14:14Z"}, "message": "config.host (arm*-*-linux*): Add driver-arm.o and x-arm.\n\n2011-10-18  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config.host (arm*-*-linux*): Add driver-arm.o and x-arm.\n\t* config/arm/arm.opt: Add 'native' processor_type and\n\tarm_arch enum values.\n\t* config/arm/arm.h (host_detect_local_cpu): New prototype.\n\t(EXTRA_SPEC_FUNCTIONS): New define.\n\t(MCPU_MTUNE_NATIVE_SPECS): New define.\n\t(DRIVER_SELF_SPECS): New define.\n\t* config/arm/driver-arm.c: New file.\n\t* config/arm/x-arm: New file.\n\t* doc/invoke.texi (ARM Options): Document -mcpu=native,\n\t-mtune=native and -march=native.\n\nFrom-SVN: r180139", "tree": {"sha": "8ecbf80cbd6e807c88fbc66f5ba482431661e5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ecbf80cbd6e807c88fbc66f5ba482431661e5ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa6e723726a1e0ab392e436112ba18d071f927af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6e723726a1e0ab392e436112ba18d071f927af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6e723726a1e0ab392e436112ba18d071f927af"}], "stats": {"total": 213, "additions": 213, "deletions": 0}, "files": [{"sha": "adb90666f17b65a211b775d1fa9f1db52b139663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -1,3 +1,17 @@\n+2011-10-18  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config.host (arm*-*-linux*): Add driver-arm.o and x-arm.\n+\t* config/arm/arm.opt: Add 'native' processor_type and\n+\tarm_arch enum values.\n+\t* config/arm/arm.h (host_detect_local_cpu): New prototype.\n+\t(EXTRA_SPEC_FUNCTIONS): New define.\n+\t(MCPU_MTUNE_NATIVE_SPECS): New define.\n+\t(DRIVER_SELF_SPECS): New define.\n+\t* config/arm/driver-arm.c: New file.\n+\t* config/arm/x-arm: New file.\n+\t* doc/invoke.texi (ARM Options): Document -mcpu=native,\n+\t-mtune=native and -march=native.\n+\n 2011-10-18  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/50205"}, {"sha": "696c79e350750dc299742509d99f5ad57b077394", "filename": "gcc/config.host", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -100,6 +100,14 @@ case ${host} in\n esac\n \n case ${host} in\n+  arm*-*-linux*)\n+    case ${target} in\n+      arm*-*-*)\n+\thost_extra_gcc_objs=\"driver-arm.o\"\n+\thost_xmake_file=\"${host_xmake_file} arm/x-arm\"\n+\t;;\n+    esac\n+    ;;\n   alpha*-*-linux* | alpha*-dec-osf*)\n     case ${target} in\n       alpha*-*-linux* | alpha*-dec-osf*)"}, {"sha": "85e2b9971c424f1d3bde3fa31066a5a768f42211", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -2255,4 +2255,21 @@ extern int making_const_table;\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* -mcpu=native handling only makes sense with compiler running on\n+   an ARM chip.  */\n+#if defined(__arm__)\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+\n+# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n+   \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\t\\\n+   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n+   \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#else\n+# define MCPU_MTUNE_NATIVE_SPECS \"\"\n+#endif\n+\n+#define DRIVER_SELF_SPECS MCPU_MTUNE_NATIVE_SPECS\n+\n #endif /* ! GCC_ARM_H */"}, {"sha": "934aa35775e66b3376691796ba2ac1ee0b9be47d", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -80,6 +80,11 @@ march=\n Target RejectNegative Joined Enum(arm_arch) Var(arm_arch_option)\n Specify the name of the target architecture\n \n+; Other arm_arch values are loaded from arm-tables.opt\n+; but that is a generated file and this is an odd-one-out.\n+EnumValue\n+Enum(arm_arch) String(native) Value(-1) DriverOnly\n+\n marm\n Target Report RejectNegative InverseMask(THUMB)\n Generate code in 32 bit ARM state.\n@@ -233,6 +238,11 @@ mtune=\n Target RejectNegative Joined Enum(processor_type) Var(arm_tune_option) Init(arm_none)\n Tune code for the given processor\n \n+; Other processor_type values are loaded from arm-tables.opt\n+; but that is a generated file and this is an odd-one-out.\n+EnumValue\n+Enum(processor_type) String(native) Value(-1) DriverOnly\n+\n mwords-little-endian\n Target Report RejectNegative Mask(LITTLE_WORDS)\n Assume big endian bytes, little endian words.  This option is deprecated."}, {"sha": "43b6e581fbe35e699ca0d3199f7ee0c34c0dc9b6", "filename": "gcc/config/arm/driver-arm.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fdriver-arm.c?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -0,0 +1,145 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"configargs.h\"\n+\n+struct vendor_cpu {\n+  const char *part_no;\n+  const char *arch_name;\n+  const char *cpu_name;\n+};\n+\n+static struct vendor_cpu arm_cpu_table[] = {\n+    {\"0x926\", \"armv5te\", \"arm926ej-s\"},\n+    {\"0xa26\", \"armv5te\", \"arm1026ej-s\"},\n+    {\"0xb02\", \"armv6k\", \"mpcore\"},\n+    {\"0xb36\", \"armv6j\", \"arm1136j-s\"},\n+    {\"0xb56\", \"armv6t2\", \"arm1156t2-s\"},\n+    {\"0xb76\", \"armv6zk\", \"arm1176jz-s\"},\n+    {\"0xc05\", \"armv7-a\", \"cortex-a5\"},\n+    {\"0xc08\", \"armv7-a\", \"cortex-a8\"},\n+    {\"0xc09\", \"armv7-a\", \"cortex-a9\"},\n+    {\"0xc0f\", \"armv7-a\", \"cortex-a15\"},\n+    {\"0xc14\", \"armv7-r\", \"cortex-r4\"},\n+    {\"0xc15\", \"armv7-r\", \"cortex-r5\"},\n+    {\"0xc20\", \"armv6-m\", \"cortex-m0\"},\n+    {\"0xc21\", \"armv6-m\", \"cortex-m1\"},\n+    {\"0xc23\", \"armv7-m\", \"cortex-m3\"},\n+    {\"0xc24\", \"armv7e-m\", \"cortex-m4\"},\n+    {NULL, NULL, NULL}\n+};\n+\n+struct {\n+  const char *vendor_no;\n+  const struct vendor_cpu *vendor_parts;\n+} vendors[] = {\n+    {\"0x41\", arm_cpu_table},\n+    {NULL, NULL}\n+};\n+\n+/* This will be called by the spec parser in gcc.c when it sees\n+   a %:local_cpu_detect(args) construct.  Currently it will be called\n+   with either \"arch\", \"cpu\" or \"tune\" as argument depending on if\n+   -march=native, -mcpu=native or -mtune=native is to be substituted.\n+\n+   It returns a string containing new command line parameters to be\n+   put at the place of the above two options, depending on what CPU\n+   this is executed.  E.g. \"-march=armv7-a\" on a Cortex-A8 for\n+   -march=native.  If the routine can't detect a known processor,\n+   the -march or -mtune option is discarded.\n+\n+   ARGC and ARGV are set depending on the actual arguments given\n+   in the spec.  */\n+const char *\n+host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *val = NULL;\n+  char buf[128];\n+  FILE *f;\n+  bool arch;\n+  const struct vendor_cpu *cpu_table = NULL;\n+\n+  if (argc < 1)\n+    goto not_found;\n+\n+  arch = strcmp (argv[0], \"arch\") == 0;\n+  if (!arch && strcmp (argv[0], \"cpu\") != 0 && strcmp (argv[0], \"tune\"))\n+    goto not_found;\n+\n+  f = fopen (\"/proc/cpuinfo\", \"r\");\n+  if (f == NULL)\n+    goto not_found;\n+\n+  while (fgets (buf, sizeof (buf), f) != NULL)\n+    {\n+      /* Ensure that CPU implementer is ARM (0x41).  */\n+      if (strncmp (buf, \"CPU implementer\", sizeof (\"CPU implementer\") - 1) == 0)\n+\t{\n+\t  int i;\n+\t  for (i = 0; vendors[i].vendor_no != NULL; i++)\n+\t    if (strstr (buf, vendors[i].vendor_no) != NULL)\n+\t      {\n+\t\tcpu_table = vendors[i].vendor_parts;\n+\t\tbreak;\n+\t      }\n+\t}\n+\n+      /* Detect arch/cpu.  */\n+      if (strncmp (buf, \"CPU part\", sizeof (\"CPU part\") - 1) == 0)\n+\t{\n+\t  int i;\n+\n+\t  if (cpu_table == NULL)\n+\t    goto not_found;\n+\n+\t  for (i = 0; cpu_table[i].part_no != NULL; i++)\n+\t    if (strstr (buf, cpu_table[i].part_no) != NULL)\n+\t      {\n+\t\tval = arch ? cpu_table[i].arch_name : cpu_table[i].cpu_name;\n+\t\tbreak;\n+\t      }\n+\t  break;\n+\t}\n+    }\n+\n+  fclose (f);\n+\n+  if (val == NULL)\n+    goto not_found;\n+\n+  return concat (\"-m\", argv[0], \"=\", val, NULL);\n+\n+not_found:\n+  {\n+    unsigned int i;\n+    unsigned int opt;\n+    const char *search[] = {NULL, \"arch\"};\n+    search[0] = argv[0];\n+    for (opt = 0; opt < ARRAY_SIZE (search); opt++)\n+      for (i = 0; i < ARRAY_SIZE (configure_default_options); i++)\n+\tif (strcmp (configure_default_options[i].name, search[opt]) == 0)\n+\t  return concat (\"-m\", search[opt], \"=\",\n+\t\t\t configure_default_options[i].value, NULL);\n+    return NULL;\n+  }\n+}"}, {"sha": "51cff1ed48baea8ff3b36ec9b391c426c441c5dd", "filename": "gcc/config/arm/x-arm", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Fx-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fconfig%2Farm%2Fx-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fx-arm?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -0,0 +1,3 @@\n+driver-arm.o: $(srcdir)/config/arm/driver-arm.c \\\n+  $(CONFIG_H) $(SYSTEM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "4f55dbc617595f58187b1860b6d4288a86a68df0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aa08b35b357f8a567b6d7c8c1a55162fe0604c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=33aa08b35b357f8a567b6d7c8c1a55162fe0604c", "patch": "@@ -10397,10 +10397,16 @@ assembly code.  Permissible names are: @samp{arm2}, @samp{arm250},\n @samp{fa526}, @samp{fa626},\n @samp{fa606te}, @samp{fa626te}, @samp{fmp626}, @samp{fa726te}.\n \n+\n @option{-mcpu=generic-@var{arch}} is also permissible, and is\n equivalent to @option{-march=@var{arch} -mtune=generic-@var{arch}}.\n See @option{-mtune} for more information.\n \n+@option{-mcpu=native} causes the compiler to auto-detect the CPU\n+of the build computer.  At present, this feature is only supported on\n+Linux, and not all architectures are recognised.  If the auto-detect is\n+unsuccessful the option has no effect.\n+\n @item -mtune=@var{name}\n @opindex mtune\n This option is very similar to the @option{-mcpu=} option, except that\n@@ -10419,6 +10425,11 @@ processors, balancing between optimizations that benefit some CPUs in the\n range, and avoiding performance pitfalls of other CPUs.  The effects of\n this option may change in future GCC versions as CPU models come and go.\n \n+@option{-mtune=native} causes the compiler to auto-detect the CPU\n+of the build computer.  At present, this feature is only supported on\n+Linux, and not all architectures are recognised.  If the auto-detect is\n+unsuccessful the option has no effect.\n+\n @item -march=@var{name}\n @opindex march\n This specifies the name of the target ARM architecture.  GCC uses this\n@@ -10432,6 +10443,11 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m},\n @samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n \n+@option{-march=native} causes the compiler to auto-detect the architecture\n+of the build computer.  At present, this feature is only supported on\n+Linux, and not all architectures are recognised.  If the auto-detect is\n+unsuccessful the option has no effect.\n+\n @item -mfpu=@var{name}\n @itemx -mfpe=@var{number}\n @itemx -mfp=@var{number}"}]}