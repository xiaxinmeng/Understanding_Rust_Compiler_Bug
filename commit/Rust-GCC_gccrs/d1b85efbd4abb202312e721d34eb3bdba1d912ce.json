{"sha": "d1b85efbd4abb202312e721d34eb3bdba1d912ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiODVlZmJkNGFiYjIwMjMxMmU3MjFkMzRlYjNiZGJhMWQ5MTJjZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-03-12T23:19:41Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-12T23:19:41Z"}, "message": "thumb2.md: Extend peephole to cover 3-arg subs.\n\n2008-03-12  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config/arm/thumb2.md: Extend peephole to cover 3-arg subs.\n\t(thumb2_alusi3_short): Exclude PLUS and MINUS.\n\t(thumb2_addsi_shortim): Rename ...\n\t(thumb2_addsi_short): ... to this.  Allow register operands.\n\t(thumb2_subsi_short): New pattern.\n\t(thumb2_one_cmplsi2_short,\n\tthumb2_negsi2_short): New patterns and peepholes.\n\nFrom-SVN: r133152", "tree": {"sha": "ae6fa6a42b75ba3f07abdcc23fac6bc81027b327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6fa6a42b75ba3f07abdcc23fac6bc81027b327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1b85efbd4abb202312e721d34eb3bdba1d912ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b85efbd4abb202312e721d34eb3bdba1d912ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b85efbd4abb202312e721d34eb3bdba1d912ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b85efbd4abb202312e721d34eb3bdba1d912ce/comments", "author": null, "committer": null, "parents": [{"sha": "09754904669228ef0719337ef439af36ae06a54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09754904669228ef0719337ef439af36ae06a54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09754904669228ef0719337ef439af36ae06a54f"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "94d21b541fee632ecea33389d7bc6c563a800fe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b85efbd4abb202312e721d34eb3bdba1d912ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b85efbd4abb202312e721d34eb3bdba1d912ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1b85efbd4abb202312e721d34eb3bdba1d912ce", "patch": "@@ -1,3 +1,13 @@\n+2008-03-12  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/thumb2.md: Extend peephole to cover 3-arg subs.\n+\t(thumb2_alusi3_short): Exclude PLUS and MINUS.\n+\t(thumb2_addsi_shortim): Rename ...\n+\t(thumb2_addsi_short): ... to this.  Allow register operands.\n+\t(thumb2_subsi_short): New pattern.\n+\t(thumb2_one_cmplsi2_short,\n+\tthumb2_negsi2_short): New patterns and peepholes.\n+\n 2008-03-12  Paul Brook  <paul@codesourcery.com>\n \n \tgcc/"}, {"sha": "f33d8206a1f2d2deb5d6c5a7481dc299652b50c3", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b85efbd4abb202312e721d34eb3bdba1d912ce/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b85efbd4abb202312e721d34eb3bdba1d912ce/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=d1b85efbd4abb202312e721d34eb3bdba1d912ce", "patch": "@@ -1002,7 +1002,10 @@\n         (match_operator:SI 3 \"thumb_16bit_operator\"\n \t [(match_operand:SI 1  \"low_register_operand\" \"\")\n \t  (match_operand:SI 2 \"low_register_operand\" \"\")]))]\n-  \"TARGET_THUMB2 && rtx_equal_p(operands[0], operands[1])\n+  \"TARGET_THUMB2\n+   && (rtx_equal_p(operands[0], operands[1])\n+       || GET_CODE(operands[3]) == PLUS\n+       || GET_CODE(operands[3]) == MINUS)\n    && peep2_regno_dead_p(0, CC_REGNUM)\"\n   [(parallel\n     [(set (match_dup 0)\n@@ -1019,7 +1022,9 @@\n \t [(match_operand:SI 1 \"s_register_operand\" \"0\")\n \t  (match_operand:SI 2 \"s_register_operand\" \"l\")]))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2 && reload_completed\"\n+  \"TARGET_THUMB2 && reload_completed\n+   && GET_CODE(operands[3]) != PLUS\n+   && GET_CODE(operands[3]) != MINUS\"\n   \"%I3%!\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"length\" \"2\")]\n@@ -1105,16 +1110,20 @@\n   \"\"\n )\n \n-(define_insn \"*thumb2_addsi_shortim\"\n+(define_insn \"*thumb2_addsi_short\"\n   [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n \t(plus:SI (match_operand:SI 1 \"low_register_operand\" \"l\")\n-\t\t (match_operand:SI 2 \"const_int_operand\" \"IL\")))\n+\t\t (match_operand:SI 2 \"low_reg_or_int_operand\" \"lIL\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2 && reload_completed\"\n   \"*\n     HOST_WIDE_INT val;\n \n-    val = INTVAL(operands[2]);\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      val = INTVAL(operands[2]);\n+    else\n+      val = 0;\n+\n     /* We prefer eg. subs rn, rn, #1 over adds rn, rn, #0xffffffff.  */\n     if (val < 0 && const_ok_for_arm(ARM_SIGN_EXTEND (-val)))\n       return \\\"sub%!\\\\t%0, %1, #%n2\\\";\n@@ -1145,6 +1154,17 @@\n    (set_attr \"insn\" \"udiv\")]\n )\n \n+(define_insn \"*thumb2_subsi_short\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+\t(minus:SI (match_operand:SI 1 \"low_register_operand\" \"l\")\n+\t\t  (match_operand:SI 2 \"low_register_operand\" \"l\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && reload_completed\"\n+  \"sub%!\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"2\")]\n+)\n+\n (define_insn \"*thumb2_cbz\"\n   [(set (pc) (if_then_else\n \t      (eq (match_operand:SI 0 \"s_register_operand\" \"l,?r\")\n@@ -1188,3 +1208,50 @@\n \t    (const_int 2)\n \t    (const_int 8)))]\n )\n+\n+;; 16-bit complement\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n+\t(not:SI (match_operand:SI 1 \"low_register_operand\" \"\")))]\n+  \"TARGET_THUMB2\n+   && peep2_regno_dead_p(0, CC_REGNUM)\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (not:SI (match_dup 1)))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+)\n+\n+(define_insn \"*thumb2_one_cmplsi2_short\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+\t(not:SI (match_operand:SI 1 \"low_register_operand\" \"l\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && reload_completed\"\n+  \"mvn%!\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"2\")]\n+)\n+\n+;; 16-bit negate\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n+\t(neg:SI (match_operand:SI 1 \"low_register_operand\" \"\")))]\n+  \"TARGET_THUMB2\n+   && peep2_regno_dead_p(0, CC_REGNUM)\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (neg:SI (match_dup 1)))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+)\n+\n+(define_insn \"*thumb2_negsi2_short\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+\t(neg:SI (match_operand:SI 1 \"low_register_operand\" \"l\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && reload_completed\"\n+  \"neg%!\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"2\")]\n+)\n+"}]}