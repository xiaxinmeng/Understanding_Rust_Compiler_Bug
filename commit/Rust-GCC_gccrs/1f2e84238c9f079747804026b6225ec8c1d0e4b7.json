{"sha": "1f2e84238c9f079747804026b6225ec8c1d0e4b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYyZTg0MjM4YzlmMDc5NzQ3ODA0MDI2YjYyMjVlYzhjMWQwZTRiNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-01-27T10:13:09Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-01-27T19:46:40Z"}, "message": "coroutines: Ensure the ramp return object is checked (PR93443).\n\nAs the PR shows, there is a pathway through the code where the\nno_warning value is not set, which corresponds to a missing check\nof the ramp return when it was constructed from the 'get return\nobject'  Fixed by ensuring that the check of the return value is\ncarried out for both return cases.\n\ngcc/cp/ChangeLog:\n\n2020-01-27  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/93443\n\t* coroutines.cc (morph_fn_to_coro): Check the ramp return\n\tvalue when it is constructed from the 'get return object'.", "tree": {"sha": "0892a7626c0499a62189acebd5968a7e50c8b952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0892a7626c0499a62189acebd5968a7e50c8b952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f2e84238c9f079747804026b6225ec8c1d0e4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2e84238c9f079747804026b6225ec8c1d0e4b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f2e84238c9f079747804026b6225ec8c1d0e4b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2e84238c9f079747804026b6225ec8c1d0e4b7/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73380abd6b2783215c7950a2ade5e3f4b271e2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73380abd6b2783215c7950a2ade5e3f4b271e2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73380abd6b2783215c7950a2ade5e3f4b271e2bc"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "b1bf4a0adffe44c1c2fe004318eead252848f3f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2e84238c9f079747804026b6225ec8c1d0e4b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2e84238c9f079747804026b6225ec8c1d0e4b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f2e84238c9f079747804026b6225ec8c1d0e4b7", "patch": "@@ -1,3 +1,9 @@\n+2020-01-27  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/93443\n+\t* coroutines.cc (morph_fn_to_coro): Check the ramp return\n+\tvalue when it is constructed from the 'get return object'.\n+\n 2020-01-27  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/91826"}, {"sha": "e8a6a4033f6f20694c0ce344d0fe1019d7f99d2c", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2e84238c9f079747804026b6225ec8c1d0e4b7/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2e84238c9f079747804026b6225ec8c1d0e4b7/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=1f2e84238c9f079747804026b6225ec8c1d0e4b7", "patch": "@@ -3526,14 +3526,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \n   /* Switch to using 'input_location' as the loc, since we're now more\n      logically doing things related to the end of the function.  */\n-  /* done, we just need the return value.  */\n-  bool no_warning;\n-  if (same_type_p (TREE_TYPE (gro), fn_return_type))\n-    {\n-      /* Already got the result.  */\n-      r = check_return_expr (DECL_RESULT (orig), &no_warning);\n-    }\n-  else\n+\n+  /* The ramp is done, we just need the return value.  */\n+  if (!same_type_p (TREE_TYPE (gro), fn_return_type))\n     {\n       /* construct the return value with a single GRO param.  */\n       vec<tree, va_gc> *args = make_tree_vector_single (gro);\n@@ -3545,6 +3540,13 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       add_stmt (r);\n       release_tree_vector (args);\n     }\n+  /* Else the GRO is the return and we already built it in place.  */\n+\n+  bool no_warning;\n+  r = check_return_expr (DECL_RESULT (orig), &no_warning);\n+  if (error_operand_p (r) && warn_return_type)\n+    /* Suppress -Wreturn-type for the ramp.  */\n+    TREE_NO_WARNING (orig) = true;\n \n   r = build_stmt (input_location, RETURN_EXPR, DECL_RESULT (orig));\n   TREE_NO_WARNING (r) |= no_warning;"}]}