{"sha": "a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhMDU5OThkZWNhNWNmNmZhYzk5ZTlhOWI2ZTgzNDNlYTNjMWIzZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-11-17T17:31:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-11-17T17:31:13Z"}, "message": "ggc.h: Delete ggc_add_string_root and ggc_mark_string.\n\n        * ggc.h: Delete ggc_add_string_root and ggc_mark_string.  Add\n        digit_vector and digit_string.\n        * stringpool.c (digit_vector): New.\n        (ggc_alloc_string): Use digit_string.\n\n        * stmt.c (digit_strings): Delete.\n        (init_stmt): Do not initialize digit_strings.\n        (expand_asm_operands): Use ggc.h's digit_string macro.\n        * toplev.c (mark_file_stack): Delete.\n        (compile_file): Don't call init_tree_codes.\n        (main): No need to make the file stack a GC root.\n        * tree.c (init_tree_codes): Delete.\n        * tree.h (init_tree_codes): Delete.\n\n        * c-lex.c: Don't include ggc.h.\n        (mark_splay_tree_node, mark_splay_tree): Delete.\n        (init_c_lex): No need to ggc_strdup string constant.  Don't add\n        file_info_tree to GGC roots.\n        (cb_enter_file, cb_rename_file): No need to ggc_strdup\n        ip->nominal_fname.\n\n        * Makefile.in (c-lex.o): No longer depends on $(GGC_H).\n\n        * dbxout.c (dbxout_init),\n        dwarf2out.c (dwarf2out_line),\n        ggc-common.c (ggc_mark_rtx_children, ggc_mark_trees),\n        varasm.c (mark_const_hash_entry, mark_pool_constant, init_varasm_once),\n        xcoffout.c (xcoffout_source_file),\n        i386.c (load_pic_register):\n        Delete call(s) to ggc_add_string_root and/or ggc_mark_string.\n\n        * except.c (create_rethrow_ref),\n        profile.c (init_edge_profiler),\n        toplev.c (compile_file),\n        varasm.c (named_section, assemble_static_space,\n        assemble_trampoline_template, output_constant_def, force_const_mem),\n        i386.c (load_pic_register),\n        ia64.c (ia64_encode_section_info),\n        rs6000.c (rs6000_emit_load_toc_table, create_TOC_reference,\n        rs6000_emit_prologue, rs6000_emit_epilogue),\n        rs6000.md (load_toc_aix_si, load_toc_aix_di):\n        Change ggc_alloc_string (var, -1) to ggc_strdup (var).\n\n        * profile.c (output_func_start_profiler),\n        tree.c (make_node),\n        i386.c (load_pic_register): No need to ggc_strdup string constant.\n\ncp:\n        * lex.c (mark_impl_file_chain): Delete.\n        (init_parse): Remove call to ggc_add_string_root.  No need to\n        ggc_strdup a string constant.  Do not add impl_file_chain to GC\n        roots.\n        (handle_pragma_implementation): No need to ggc_strdup main_filename.\n\nf:\n        * lex.c (ffelex_hash_): Change ggc_alloc_string (var, -1) to\n        ggc_strdup (var).\n\njava:\n        * parse.y (goal): Remove call to ggc_add_string_root.\n\nFrom-SVN: r37522", "tree": {"sha": "28ab3f3c8eaffc74f74093a91fbefd178d3d02b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ab3f3c8eaffc74f74093a91fbefd178d3d02b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/comments", "author": null, "committer": null, "parents": [{"sha": "9e7d5ee8095d41ef744b875de504a22b46f33fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7d5ee8095d41ef744b875de504a22b46f33fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7d5ee8095d41ef744b875de504a22b46f33fb8"}], "stats": {"total": 518, "additions": 219, "deletions": 299}, "files": [{"sha": "bddf1ec4bcf597ae93c4a1c977af6ef15d7ec981", "filename": "gcc/ChangeLog", "status": "modified", "additions": 152, "deletions": 103, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1,3 +1,52 @@\n+2000-11-17  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* ggc.h: Delete ggc_add_string_root and ggc_mark_string.  Add\n+\tdigit_vector and digit_string.\n+\t* stringpool.c (digit_vector): New.\n+\t(ggc_alloc_string): Use digit_string.\n+\n+\t* stmt.c (digit_strings): Delete.\n+\t(init_stmt): Do not initialize digit_strings.\n+\t(expand_asm_operands): Use ggc.h's digit_string macro.\n+\t* toplev.c (mark_file_stack): Delete.\n+\t(compile_file): Don't call init_tree_codes.\n+\t(main): No need to make the file stack a GC root.\n+\t* tree.c (init_tree_codes): Delete.\n+\t* tree.h (init_tree_codes): Delete.\n+\n+\t* c-lex.c: Don't include ggc.h.\n+\t(mark_splay_tree_node, mark_splay_tree): Delete.\n+\t(init_c_lex): No need to ggc_strdup string constant.  Don't add\n+\tfile_info_tree to GGC roots.\n+\t(cb_enter_file, cb_rename_file): No need to ggc_strdup\n+\tip->nominal_fname.\n+\n+\t* Makefile.in (c-lex.o): No longer depends on $(GGC_H).\n+\n+\t* dbxout.c (dbxout_init),\n+\tdwarf2out.c (dwarf2out_line),\n+\tggc-common.c (ggc_mark_rtx_children, ggc_mark_trees),\n+\tvarasm.c (mark_const_hash_entry, mark_pool_constant, init_varasm_once),\n+\txcoffout.c (xcoffout_source_file),\n+\ti386.c (load_pic_register):\n+\tDelete call(s) to ggc_add_string_root and/or ggc_mark_string.\n+\n+\t* except.c (create_rethrow_ref),\n+\tprofile.c (init_edge_profiler),\n+\ttoplev.c (compile_file),\n+\tvarasm.c (named_section, assemble_static_space,\n+\tassemble_trampoline_template, output_constant_def, force_const_mem),\n+\ti386.c (load_pic_register),\n+\tia64.c (ia64_encode_section_info),\n+\trs6000.c (rs6000_emit_load_toc_table, create_TOC_reference,\n+\trs6000_emit_prologue, rs6000_emit_epilogue),\n+\trs6000.md (load_toc_aix_si, load_toc_aix_di):\n+\tChange ggc_alloc_string (var, -1) to ggc_strdup (var).\n+\n+\t* profile.c (output_func_start_profiler),\n+\ttree.c (make_node),\n+\ti386.c (load_pic_register): No need to ggc_strdup string constant.\n+\n 2000-11-17  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* Makefile.in (config.status): Depend on config.gcc.\n@@ -112,17 +161,17 @@\n \n 2000-11-15  Neil Booth  <neilb@earthling.net>\n \n-        * cpplib.c (start_directive, end_directive): New functions.\n-        (_cpp_handle_directive, run_directive): Use them.\n-        (_cpp_handle_directive): Don't -Wtraditional on indented\n-        null directives.\n-        (_cpp_push_buffer): Don't re-clear was_skipping.\n-        * cpplib.h (struct cpp_reader): New member la_saved.\n-        * cppmacro.c (cpp_get_token): Don't interpret _Pragma in\n-        directives.\n+\t* cpplib.c (start_directive, end_directive): New functions.\n+\t(_cpp_handle_directive, run_directive): Use them.\n+\t(_cpp_handle_directive): Don't -Wtraditional on indented\n+\tnull directives.\n+\t(_cpp_push_buffer): Don't re-clear was_skipping.\n+\t* cpplib.h (struct cpp_reader): New member la_saved.\n+\t* cppmacro.c (cpp_get_token): Don't interpret _Pragma in\n+\tdirectives.\n \n-        gcc.dg/cpp/_Pragma1.c: Update.\n-        gcc.dg/cpp/_Pragma2.c: New test.\n+\tgcc.dg/cpp/_Pragma1.c: Update.\n+\tgcc.dg/cpp/_Pragma2.c: New test.\n \n 2000-11-15  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -177,7 +226,7 @@\n \t* configure.in: Move check for V3 above check for C++ header-file\n \tdirectory.\n \t* configure: Regenerated.\n-\t\n+\n 2000-11-14  DJ Delorie  <dj@redhat.com>\n \n \t* config/v850/v850.c: Remove obstacks.\n@@ -471,7 +520,7 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* configure.in: Turn on libstdc++ V3 by default.\n \t* configure: Regenerated.\n-\t\n+\n \t* fixinc/mkfixinc.sh: Use the ordinary fixincludes on Solaris.\n \n 2000-11-12  Jakub Jelinek  <jakub@redhat.com>\n@@ -488,7 +537,7 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tof #include headers.\n \n 2000-11-12  Marc Espie <espie@openbsd.org>\n-\t\n+\n \t* configure.in: Fix filds test.\n \t* configure: Regen.\n \n@@ -499,32 +548,32 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-11-12  Neil Booth  <neilb@earthling.net>\n \n-        * cppexp.c: Don't worry about pfile->skipping.\n-        * cpplib.c (struct if_stack): Make was_skipping unsigned char.\n-        (cpp_handle_directive): Save pfile->skipping in struct cpp_buffer\n-        for handled directives.\n-        (skip_rest_of_line): Use _cpp_lex_token after popping contexts\n-        and releasing lookaheads.\n-        (do_ifdef, do_ifndef, do_if): Use buffer->was_skipping.\n-        (do_else, do_elif, push_conditional): Update logic.\n-        (do_endif): Set buffer->was_skipping rather than pfile->skipping.\n-        (unwind_if_stack): Inline into cpp_pop_buffer.\n-        (cpp_push_buffer): Clear ifs->was_skipping for cpp_handle_directive.\n-        * cpplex.c (_cpp_lex_token): Clear skipping on EOF.  Handle\n-        multiple-include optimisation.\n-        * cpplib.h (struct cpp_buffer): New member was_skipping.\n-        * cppmacro.c (_cpp_get_token): Loop whilst pfile->skipping.  This\n-        works because skipping == 0 in directives.\n-        (_cpp_release_lookahead): Renamed from release_lookahead.\n-        (cpp_get_token): No need to check skipping as _cpp_get_token does\n-        this for us.  No need to handle MI optimisation.\n+\t* cppexp.c: Don't worry about pfile->skipping.\n+\t* cpplib.c (struct if_stack): Make was_skipping unsigned char.\n+\t(cpp_handle_directive): Save pfile->skipping in struct cpp_buffer\n+\tfor handled directives.\n+\t(skip_rest_of_line): Use _cpp_lex_token after popping contexts\n+\tand releasing lookaheads.\n+\t(do_ifdef, do_ifndef, do_if): Use buffer->was_skipping.\n+\t(do_else, do_elif, push_conditional): Update logic.\n+\t(do_endif): Set buffer->was_skipping rather than pfile->skipping.\n+\t(unwind_if_stack): Inline into cpp_pop_buffer.\n+\t(cpp_push_buffer): Clear ifs->was_skipping for cpp_handle_directive.\n+\t* cpplex.c (_cpp_lex_token): Clear skipping on EOF.  Handle\n+\tmultiple-include optimisation.\n+\t* cpplib.h (struct cpp_buffer): New member was_skipping.\n+\t* cppmacro.c (_cpp_get_token): Loop whilst pfile->skipping.  This\n+\tworks because skipping == 0 in directives.\n+\t(_cpp_release_lookahead): Renamed from release_lookahead.\n+\t(cpp_get_token): No need to check skipping as _cpp_get_token does\n+\tthis for us.  No need to handle MI optimisation.\n \n Sat Nov 11 21:14:02 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n \t* fixinc/inclhack.def (sunos_matherr_decl): Bypass matherr\n \tdeclarations that use `__MATH_EXCEPTION' in their prototypes, too.\n \t* fixinc/fixincl.x: Regenerated.\n-\t\n+\n 2000-11-11  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/inclhack.def (avoid_bool_type): avoid commenting out #endif\n@@ -543,7 +592,7 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n 2000-11-11  Jason Merrill  <jason@redhat.com>\n \n-\t* function.c (assign_parms): If TREE_ADDRESSABLE is set, try to \n+\t* function.c (assign_parms): If TREE_ADDRESSABLE is set, try to\n \tgive the parm a register and then call put_var_into_stack.\n \t* stmt.c (expand_decl): Likewise.\n \n@@ -567,7 +616,7 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* cppexp.c (lex): Don't handle CPP_PLACEMARKER.\n \t* cpplex.c (_cpp_lex_token): Rename skip_newlines to next_bol\n \t* cpplib.c (skip_rest_of_line, check_eol, cpp_push_buffer):\n-\t           Similarly.\n+\t\t   Similarly.\n \t* cpplib.h: Remove CPP_PLACEMARKER.\n \t(struct lexer_state): Rename skip_newlines to next_bol.\n \t* cppmacro.c (stringify_arg): Don't handle CPP_PLACEMARKER.\n@@ -669,15 +718,15 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* config/ia64/ia64.md (extendsfdf2, extendsftf2, extenddftf2): Emit\n \ta no-op move if regs are equal.\n \t* toplev.c (rest_of_compilation): Do the noop moves elimination pass\n-\twhen calling jump after post-reload splitting. \n+\twhen calling jump after post-reload splitting.\n \n 2000-11-09  Jan van Male  <jan.vanmale@fenk.wau.nl>\n \n-        * c-tree.texi: Fix typos.\n-        * extend.texi: Likewise\n-        * gcov.texi: Likewise\n-        * rtl.texi: Likewise\n-        * tm.texi: Likewise\n+\t* c-tree.texi: Fix typos.\n+\t* extend.texi: Likewise\n+\t* gcov.texi: Likewise\n+\t* rtl.texi: Likewise\n+\t* tm.texi: Likewise\n \n 2000-11-09  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -708,12 +757,12 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \t* c-common.c (flag_dump_translation_unit): Define it.\n \t(strip_array_types): New function.\n \t* c-decl.c (c_decode_option): Handle -fdump-translation-unit.\n-\t* c-lang.c (finish_file): Call dump_node_to_file if \n+\t* c-lang.c (finish_file): Call dump_node_to_file if\n \tflag_dump_translation_unit.\n \t* c-semantics.c (mark_rtl_for_local_static): Fix typo in comment.\n \t* c-tree.h (DECL_C_BIT_FIELD): Remove declaration.\n \t* c-dump.c: New file.\n-\t\n+\n 2000-11-09  Christopher Faylor <cgf@cygnus.com>\n \n \t* config/i386/cygwin.h: Add mingw startfile prefix.\n@@ -774,7 +823,7 @@ Sat Nov 11 18:41:20 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n 2000-11-09  Graham Stott  <grahams@redhat.com>\n \n-        * config/i386/i386.md (mmx_pinsrw): Output operands in correct\n+\t* config/i386/i386.md (mmx_pinsrw): Output operands in correct\n \torder for -mintel-syntax.  Remove comment now that the operand\n \torder has been checked.\n \t(mmx_pextrw): Likewise.\n@@ -846,15 +895,15 @@ Wed Nov  8 21:58:20 2000  Christopher Faylor <cgf@cygnus.com>\n \n 2000-11-08  Neil Booth  <neilb@earthling.net>\n \n-        Move directive handling into the lexer itself.\n-\t  \n-        * cpplex.c (_cpp_lex_token): Handle directives directly.\n-        In the case of a directive interrupting a function-like\n-        macro invocation, use extra_char since read_ahead is\n-        used to store the '#'.  Return a CPP_EOF in this case.\n-        * cppmacro.c (parse_arg): No need to handle CPP_DHASH any more.\n-        (cpp_get_token): Don't handle directives here.\n-        * cpplib.h: Remove CPP_DHASH token type.\n+\tMove directive handling into the lexer itself.\n+\n+\t* cpplex.c (_cpp_lex_token): Handle directives directly.\n+\tIn the case of a directive interrupting a function-like\n+\tmacro invocation, use extra_char since read_ahead is\n+\tused to store the '#'.  Return a CPP_EOF in this case.\n+\t* cppmacro.c (parse_arg): No need to handle CPP_DHASH any more.\n+\t(cpp_get_token): Don't handle directives here.\n+\t* cpplib.h: Remove CPP_DHASH token type.\n \n Wed Nov  8 21:53:41 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n@@ -885,7 +934,7 @@ Wed Nov  8 21:53:41 MET 2000  Jan Hubicka  <jh@suse.cz>\n \tpassed in multiple non-contiguous locations.\n \n 2000-11-08  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n-\t\n+\n \t* README.gnat: Remove file.\n \n 2000-11-08  Alexandre Oliva  <aoliva@redhat.com>\n@@ -922,7 +971,7 @@ Wed Nov  8 21:53:41 MET 2000  Jan Hubicka  <jh@suse.cz>\n \t* c-lang.c (start_cdtor, finish_cdtor): New functions.\n \t(finish_file): Use them in building constructor/destructor functions.\n \n-\t* config/alpha/alpha.h (HAS_INIT_SECTION, LD_INIT_SWITCH, \n+\t* config/alpha/alpha.h (HAS_INIT_SECTION, LD_INIT_SWITCH,\n \tLD_FINI_SWITCH): Move ...\n \t* config/alpha/osf.h: ... here.\n \t* config/alpha/alpha-interix.h: Don't undef them.\n@@ -1045,7 +1094,7 @@ Mon Nov  6 20:08:13 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-06  Neil Booth  <neilb@earthling.net>\n \n-        * tradcpp.c (special_symbol): Assign an null string rather\n+\t* tradcpp.c (special_symbol): Assign an null string rather\n \tthan writing to an unallocated buffer.\n \n 2000-11-06  Neil Booth  <neilb@earthling.net>\n@@ -1105,13 +1154,13 @@ Sat Sep 23 19:10:20 2000  Denis Chertykov  <denisc@overta.ru> & Marek Michalkiew\n \n 2000-11-04  Neil Booth  <neilb@earthling.net>\n \n-        * cpplex.c (parse_string): Don't allow multiline strings in\n-        #include family directives.\n+\t* cpplex.c (parse_string): Don't allow multiline strings in\n+\t#include family directives.\n \n 2000-11-04  Neil Booth  <neilb@earthling.net>\n \n \t* cpplib.c (do_line): Only warn pedantically if not reading\n-        preprocessed input.\n+\tpreprocessed input.\n \n 2000-11-04  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -1228,7 +1277,7 @@ config:\n \tsparc/sparc.h, sparc/sysv4.h, sparc/vxsim.h, sparc/vxsparc.h,\n \tv850/rtems.h, vax/netbsd.h, vax/openbsd.h, vax/ultrix.h, vax/vax.h,\n \tvax/vaxv.h, vax/vms.h, we32k/we32k.h\n-\t\n+\n \tReplace -A() with -A=, the new assertion syntax.\n \n Thu Nov  2 21:52:35 2000  J\"orn Rennecke <amylaar@redhat.com>\n@@ -1266,17 +1315,17 @@ Thu Nov  2 19:20:12 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-02  Zack Weinberg <zackw@Stanford.EDU>\n \n-        Integrated CPP.\n-\t  \n-        * c-lex.c (init_c_lex): Update cpp_start_read call.\n-        (cb_ident): Update for new callback prototype.\n-        (cb_def_pragma): Update for new cpp_get_token prototype.\n-        (c_lex): Similarly.  Use cpp_get_line.\n-\t  \n-        * c-parse.in (finish_parse): Update for new cpp_finish\n-        prototype.\n-\t  \n-        * cp/lex.c (finish_parse): Similarly.\n+\tIntegrated CPP.\n+\n+\t* c-lex.c (init_c_lex): Update cpp_start_read call.\n+\t(cb_ident): Update for new callback prototype.\n+\t(cb_def_pragma): Update for new cpp_get_token prototype.\n+\t(c_lex): Similarly.  Use cpp_get_line.\n+\n+\t* c-parse.in (finish_parse): Update for new cpp_finish\n+\tprototype.\n+\n+\t* cp/lex.c (finish_parse): Similarly.\n \n 2000-11-01  Geoff Keating  <geoffk@cygnus.com>\n \n@@ -1290,10 +1339,10 @@ Thu Nov  2 19:20:12 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-01  Neil Booth  <neilb@earthling.net>\n \n-        * cpplib.c (run_directive): Use correct line number for output\n-        of _Pragma.  Remember any in-progress directive. \n-  \n-        * gcc.dg/cpp/vararg2.c, gcc.dg/cpp/_Pragm1.c: New tests.\n+\t* cpplib.c (run_directive): Use correct line number for output\n+\tof _Pragma.  Remember any in-progress directive.\n+\n+\t* gcc.dg/cpp/vararg2.c, gcc.dg/cpp/_Pragm1.c: New tests.\n \n 2000-11-01  Richard Henderson  <rth@redhat.com>\n \n@@ -1313,7 +1362,7 @@ Thu Nov  2 19:20:12 2000  J\"orn Rennecke <amylaar@redhat.com>\n 2000-11-01  Richard Henderson  <rth@redhat.com>\n \n \t* stmt.c (expand_start_null_loop): New.\n-\t(expand_end_null_loop): New.\t\n+\t(expand_end_null_loop): New.\n \t* c-semantics.c (genrtl_do_stmt): Use them.\n \t* tree.h: Declare them.\n \n@@ -1376,7 +1425,7 @@ Thu Nov  2 19:20:12 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t(dwarf2out_end_block, dwarf2out_label): Likewise.\n \t* final.c (final_scan_insn, case NOTE_INSN_DELETED_LABEL): Likewise\n \t* config/ia64/ia64.h (ASM_OUTPUT_DEBUG_LABEL): Define.\n-\t\n+\n 2000-10-31  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (struct dw_loc_descr_struct): Add dw_loc_addr.\n@@ -1475,7 +1524,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-10-31  Bernd Schmidt  <bernds@redhat.co.uk>\n \n-        * config/i386/i386.c (ix86_init_builtins): Correct return type\n+\t* config/i386/i386.c (ix86_init_builtins): Correct return type\n \tbuilding v4hi_ftype_v4hi_int_int tree node.\n \t(ix86_expand_builtin): Use correct operand numbers 0 and 1.\n \tCopy operand 0 into a Pmode register, don't generate a MEM rtx.\n@@ -1555,7 +1604,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n 2000-10-29  Neil Booth  <neilb@earthling.net>\n \n \t* cppmacro.c (_cpp_create_definition): Optimize the case of\n-        a macro defined to itself.\n+\ta macro defined to itself.\n \n 2000-10-29  Neil Booth  <neilb@earthling.net>\n \n@@ -1625,7 +1674,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n 2000-10-28  Neil Booth  <neilb@earthling.net>\n \n \tNew macro expander.\n-\t\n+\n \t* cpplib.c (struct answer): New.\n \t(struct if_stack): Use cpp_lexer_pos rather than line and col.\n \tRename cmacro mi_cmacro.\n@@ -1766,7 +1815,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t_cpp_cleanup_hashtable.\n \n \t* Makefile.in: Remove cppoutput.c.\n-\t\n+\n \t* cppoutput.c: Delete\n \n \t* fixheader.c (read_scan_file): Update for new cpp_get_token\n@@ -1779,7 +1828,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t* scan.h (recognized_function): Update prototype.\n \n \t* po/POTFILES.in: Remove cppoutput.c.\n-\t\n+\n 2000-10-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-typeck.c (check_init_type_bitfields): Remove.\n@@ -1797,7 +1846,7 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n 2000-10-21  Mike Coleman  <mcoleman2@kc.rr.com>\n \n \t* c-pragma.c (handle_pragma_pack): Initialize align to -1.\n-\tImprove error messages.  Correct parsing of \n+\tImprove error messages.  Correct parsing of\n \t#pragma pack(pop [,id]).  Do not check the user-supplied\n \talignment if we're popping.\n \n@@ -1836,11 +1885,11 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n 2000-10-27  Bernd Schmidt  <bernds@redhat.co.uk>\n \t    Richard Henderson  <rth@redhat.com>\n \n-        * regrename.c: Rewrite to handle multi-register modes and\n-        cond_exec instructions.\n-        * Makefile.in (regrename.o): Update dependancies.\n-        * recog.h (struct operand_alternative): Add is_address.\n-        * recog.c (preprocess_constraints) [case 'p']: Set it.\n+\t* regrename.c: Rewrite to handle multi-register modes and\n+\tcond_exec instructions.\n+\t* Makefile.in (regrename.o): Update dependancies.\n+\t* recog.h (struct operand_alternative): Add is_address.\n+\t* recog.c (preprocess_constraints) [case 'p']: Set it.\n \n 2000-10-27  Zack Weinberg  <zack@wolery.stanford.edu>\n \n@@ -1857,23 +1906,23 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \tswitch is given, nothing otherwise.\n \t* configure.lang: Delete.\n \n-        * Makefile.in: Expunge all traces of extra_c_objs,\n-        extra_cxx_objs, and extra_cpp_objs.  Set MAYBE_CPPLIB from\n-        @maybe_cpplib@. Add $(MAYBE_CPPLIB) to C_AND_OBJC_OBJS.  Set\n-        warning options via a three level scheme so that -pedantic and\n-        -Wtraditional are not used for non-C front ends: LOOSE_WARN,\n-        STRICT1_WARN, STRICT2_WARN -> $(@D)-warn, GCC_WARN_CFLAGS ->\n-        WARN_CFLAGS.  Distinguish STAGE1_CFLAGS from BOOT_CFLAGS.\n+\t* Makefile.in: Expunge all traces of extra_c_objs,\n+\textra_cxx_objs, and extra_cpp_objs.  Set MAYBE_CPPLIB from\n+\t@maybe_cpplib@. Add $(MAYBE_CPPLIB) to C_AND_OBJC_OBJS.  Set\n+\twarning options via a three level scheme so that -pedantic and\n+\t-Wtraditional are not used for non-C front ends: LOOSE_WARN,\n+\tSTRICT1_WARN, STRICT2_WARN -> $(@D)-warn, GCC_WARN_CFLAGS ->\n+\tWARN_CFLAGS.  Distinguish STAGE1_CFLAGS from BOOT_CFLAGS.\n \tAdd -I$(@D) and -I$(srcdir)/$(@D) to INCLUDES.\n \tSet OUTPUT_OPTION, ZLIB, ZLIBINC.  Do not set P,\n-        LANG_FLAGS_TO_PASS.  Add OUTPUT_OPTION to all object-file\n-        generation rules.  Wrap all rules that change the current\n-        directory in parentheses; pmake doesn't spawn a new shell for\n-        each command.  Expunge all references to $(P).  When one\n-        command depends on another and they're run all at once, use &&\n-        to separate them, not ;.  Add libgcc_s$(SHLIB_EXT) to files\n-        deleted on make clean.  Force OUTPUT_OPTION='-o $@' in stage2\n-        and beyond.\n+\tLANG_FLAGS_TO_PASS.  Add OUTPUT_OPTION to all object-file\n+\tgeneration rules.  Wrap all rules that change the current\n+\tdirectory in parentheses; pmake doesn't spawn a new shell for\n+\teach command.  Expunge all references to $(P).  When one\n+\tcommand depends on another and they're run all at once, use &&\n+\tto separate them, not ;.  Add libgcc_s$(SHLIB_EXT) to files\n+\tdeleted on make clean.  Force OUTPUT_OPTION='-o $@' in stage2\n+\tand beyond.\n \n \t* objc/Make-lang.in: Wrap all rules that change the current\n \tdirectory in parentheses.  Expunge all references to $(P)."}, {"sha": "a210a26fde830dbb6b6378da9aaa1b2acd2efa18", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1153,7 +1153,7 @@ c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) $(C_TREE_H) \\\n     $(RTL_H) $(EXPR_H)\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n-    mbchar.h $(GGC_H) cpplib.h $(EXPR_H)\n+    mbchar.h cpplib.h $(EXPR_H)\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) $(C_TREE_H) \\\n     flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h"}, {"sha": "faa8e5957dbe60dfa9570c5f67628c28c792abc2", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -35,7 +35,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n-#include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n \n@@ -149,8 +148,6 @@ static tree lex_string\t\tPARAMS ((const char *, unsigned int, int));\n static tree lex_charconst\tPARAMS ((const char *, unsigned int, int));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n-static int mark_splay_tree_node PARAMS ((splay_tree_node, void *));\n-static void mark_splay_tree     PARAMS ((void *));\n \n #if !USE_CPPLIB\n static int skip_white_space\t\tPARAMS ((int));\n@@ -177,10 +174,7 @@ init_c_lex (filename)\n   file_info_tree = splay_tree_new ((splay_tree_compare_fn)strcmp,\n \t\t\t\t   0,\n \t\t\t\t   (splay_tree_delete_value_fn)free);\n-  /* Make sure to mark the filenames in the tree for GC.  */\n-  ggc_add_root (&file_info_tree, 1, sizeof (file_info_tree), \n-\t\tmark_splay_tree);\n-  toplevel = get_fileinfo (ggc_strdup (\"<top level>\"));\n+  toplevel = get_fileinfo (\"<top level>\");\n   if (flag_detailed_statistics)\n     {\n       header_time = 0;\n@@ -698,7 +692,7 @@ cb_enter_file (pfile)\n   if (ip->prev)\n     {\n       lex_lineno = lineno = ip->prev->lineno - 1;\n-      push_srcloc (ggc_alloc_string (ip->nominal_fname, -1), 1);\n+      push_srcloc (ip->nominal_fname, 1);\n       input_file_stack->indent_level = indent_level;\n       debug_start_source_file (ip->nominal_fname);\n     }\n@@ -769,7 +763,7 @@ cb_rename_file (pfile)\n   cpp_buffer *ip = CPP_BUFFER (pfile);\n   /* Bleah, need a better interface to this.  */\n   const char *flags = cpp_syshdr_flags (pfile, ip);\n-  input_filename = ggc_alloc_string (ip->nominal_fname, -1);\n+  input_filename = ip->nominal_fname;\n   lex_lineno = ip->lineno;\n   in_system_header = (flags[0] != 0);\n \n@@ -2550,25 +2544,3 @@ lex_charconst (str, len, wide)\n \n   return value;\n }\n-\n-/* Mark for GC a node in a splay tree whose keys are strings.  */\n-\n-static int\n-mark_splay_tree_node (n, data)\n-     splay_tree_node n;\n-     void *data ATTRIBUTE_UNUSED;\n-{\n-  ggc_mark_string ((char *) n->key);\n-  return 0;\n-}\n-\n-/* Mark for GC a splay tree whose keys are strings.  */\n-\n-static void\n-mark_splay_tree (p)\n-     void *p;\n-{\n-  splay_tree st = *(splay_tree *) p;\n-  \n-  splay_tree_foreach (st, mark_splay_tree_node, NULL);\n-}"}, {"sha": "8e54acc5a6095ceeaac57968a530ed41e353f094", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1677,7 +1677,6 @@ ix86_can_use_return_insn_p ()\n \f\n static const char *pic_label_name;\n static int pic_label_output;\n-static const char *global_offset_table_name;\n \n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n@@ -1721,22 +1720,15 @@ load_pic_register ()\n {\n   rtx gotsym, pclab;\n \n-  if (global_offset_table_name == NULL)\n-    {\n-      global_offset_table_name =\n-\tggc_alloc_string (\"_GLOBAL_OFFSET_TABLE_\", 21);\n-      ggc_add_string_root (&global_offset_table_name, 1);\n-    }\n-  gotsym = gen_rtx_SYMBOL_REF (Pmode, global_offset_table_name);\n+  gotsym = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n \n   if (TARGET_DEEP_BRANCH_PREDICTION)\n     {\n       if (pic_label_name == NULL)\n \t{\n \t  char buf[32];\n \t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LPR\", 0);\n-\t  pic_label_name = ggc_alloc_string (buf, -1);\n-\t  ggc_add_string_root (&pic_label_name, 1);\n+\t  pic_label_name = ggc_strdup (buf);\n \t}\n       pclab = gen_rtx_MEM (QImode, gen_rtx_SYMBOL_REF (Pmode, pic_label_name));\n     }"}, {"sha": "e318dbbefbe5ed8b7ea9e407d93ac728b8d81c6a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -4817,7 +4817,7 @@ ia64_encode_section_info (decl)\n   else if (symbol_str[0] == SDATA_NAME_FLAG_CHAR)\n     {\n       XSTR (XEXP (DECL_RTL (decl), 0), 0)\n-\t= ggc_alloc_string (symbol_str + 1, -1);\n+\t= ggc_strdup (symbol_str + 1);\n     }\n }\n \f"}, {"sha": "6dbcb25f14e23dc91e7736377512c5a54ca5e52f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -5114,10 +5114,10 @@ rs6000_emit_load_toc_table (fromprolog)\n \t      rtx symL;\n \t  \n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n-\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCL\", rs6000_pic_labelno);\n-\t      symL = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+\t      symL = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n \t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1 (tempLR, \n \t\t\t\t\t\t\t\t   symF)));\n@@ -5131,11 +5131,10 @@ rs6000_emit_load_toc_table (fromprolog)\n \t      rtx tocsym;\n \t      static int reload_toc_labelno = 0;\n \n-\t      tocsym = gen_rtx_SYMBOL_REF (Pmode, \n-\t\t      ggc_alloc_string (toc_label_name, -1));\n+\t      tocsym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (toc_label_name));\n \n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCG\", reload_toc_labelno++);\n-\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+\t      symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n \t      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1b (tempLR, \n \t\t\t\t\t\t\t\t    symF, \n@@ -5152,7 +5151,7 @@ rs6000_emit_load_toc_table (fromprolog)\n \t  char buf[30];\n \t  rtx realsym;\n \t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n-\t  realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+\t  realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \t  \n \t  rs6000_maybe_dead (emit_insn (gen_elf_high (dest, realsym)));\n \t  rs6000_maybe_dead (emit_insn (gen_elf_low (dest, dest, realsym)));\n@@ -5205,12 +5204,11 @@ rtx\n create_TOC_reference(symbol) \n     rtx symbol;\n {\n-    return gen_rtx_PLUS (Pmode, \n-\t     gen_rtx_REG (Pmode, TOC_REGISTER),\n-\t       gen_rtx_CONST (Pmode, \n-\t\t gen_rtx_MINUS (Pmode, symbol, \n-\t\t   gen_rtx_SYMBOL_REF (Pmode,\n-\t\t     ggc_alloc_string (toc_label_name, -1)))));\n+  return gen_rtx_PLUS (Pmode, \n+\t   gen_rtx_REG (Pmode, TOC_REGISTER),\n+\t     gen_rtx_CONST (Pmode, \n+\t       gen_rtx_MINUS (Pmode, symbol, \n+\t\t gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (toc_label_name)))));\n }\n \n #if TARGET_AIX\n@@ -5613,7 +5611,7 @@ rs6000_emit_prologue()\n \t\t\t\t\t\t       LINK_REGISTER_REGNUM));\n       sprintf (rname, \"%s%d%s\", SAVE_FP_PREFIX,\n \t       info->first_fp_reg_save - 32, SAVE_FP_SUFFIX);\n-      alloc_rname = ggc_alloc_string (rname, -1);\n+      alloc_rname = ggc_strdup (rname);\n       RTVEC_ELT (p, 1) = gen_rtx_USE (VOIDmode,\n \t\t\t\t      gen_rtx_SYMBOL_REF (Pmode,\n \t\t\t\t\t\t\t  alloc_rname));\n@@ -6061,7 +6059,7 @@ rs6000_emit_epilogue(sibcall)\n \n \t  sprintf (rname, \"%s%d%s\", RESTORE_FP_PREFIX, \n \t\t   info->first_fp_reg_save - 32, RESTORE_FP_SUFFIX);\n-\t  alloc_rname = ggc_alloc_string (rname, -1);\n+\t  alloc_rname = ggc_strdup (rname);\n \t  RTVEC_ELT (p, 2) = gen_rtx_USE (VOIDmode,\n \t\t\t\t\t  gen_rtx_SYMBOL_REF (Pmode,\n \t\t\t\t\t\t\t      alloc_rname));"}, {"sha": "e725f4318329cb890269fc90e31ad71fc2250300", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -9190,7 +9190,7 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n {\n   char buf[30];\n   ASM_GENERATE_INTERNAL_LABEL (buf, \\\"LCTOC\\\", 1);\n-  operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+  operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n   operands[2] = gen_rtx_REG (Pmode, 2);\n   return \\\"{l|lwz} %0,%1(%2)\\\";\n }\"\n@@ -9204,7 +9204,7 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n {\n   char buf[30];\n   ASM_GENERATE_INTERNAL_LABEL (buf, \\\"LCTOC\\\", 1);\n-  operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+  operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n   operands[2] = gen_rtx_REG (Pmode, 2);\n   return \\\"ld %0,%1(%2)\\\";\n }\""}, {"sha": "54d4237cb78371399b0df189beba9b60f7686fc7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1,3 +1,11 @@\n+2000-11-17  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* lex.c (mark_impl_file_chain): Delete.\n+\t(init_parse): Remove call to ggc_add_string_root.  No need to\n+\tggc_strdup a string constant.  Do not add impl_file_chain to GC\n+\troots.\n+\t(handle_pragma_implementation): No need to ggc_strdup main_filename.\n+\n 2000-11-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (tsubst_expr, DECL_STMT): Instantiate decl's type.\n@@ -101,7 +109,7 @@\n \t(cp_dump_tree): New function.\n \t* pt.c (add_maybe_template): Remove.\n \t* typeck.c (strip_array_types): Likewise.\n-\t\n+\n 2000-11-07  Eric Christopher  <echristo@redhat.com>\n \n \t* decl.c (init_decl_processing): Change definition of\n@@ -631,7 +639,7 @@ Thu Sep 14 12:10:45 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-09-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n-        * ir.texi: Add more documentation.\n+\t* ir.texi: Add more documentation.\n \n 2000-09-11  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "df5dc94f39306797622bfbbc7673ad8c297f7cd4", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -55,7 +55,6 @@ static int interface_strcmp PARAMS ((const char *));\n static int *init_cpp_parse PARAMS ((void));\n static void init_reswords PARAMS ((void));\n static void init_cp_pragma PARAMS ((void));\n-static void mark_impl_file_chain PARAMS ((PTR));\n \n static tree parse_strconst_pragma PARAMS ((const char *, int));\n static void handle_pragma_vtable PARAMS ((cpp_reader *));\n@@ -137,11 +136,6 @@ struct impl_files\n \n static struct impl_files *impl_file_chain;\n \n-/* The string used to represent the filename of internally generated\n-   tree nodes.  The variable, which is dynamically allocated, should\n-   be used; the macro is only used to initialize it.  */\n-static const char *internal_filename;\n-#define INTERNAL_FILENAME (\"<internal>\")\n \f\n /* Return something to represent absolute declarators containing a *.\n    TARGET is the absolute declarator that the * contains.\n@@ -708,9 +702,7 @@ init_parse (filename)\n   set_identifier_size (sizeof (struct lang_identifier));\n   decl_printable_name = lang_printable_name;\n \n-  internal_filename = ggc_alloc_string (INTERNAL_FILENAME,\n-\t\t\t\t\tsizeof (INTERNAL_FILENAME));\n-  input_filename = internal_filename;\n+  input_filename = \"<internal>\";\n \n   init_reswords ();\n   init_pragma ();\n@@ -764,10 +756,6 @@ init_parse (filename)\n   token_count = init_cpp_parse ();\n   interface_unknown = 1;\n \n-  ggc_add_string_root (&internal_filename, 1);\n-  ggc_add_root (&impl_file_chain, 1, sizeof (impl_file_chain),\n-\t\tmark_impl_file_chain);\n-\n   return init_c_lex (filename);\n }\n \n@@ -953,23 +941,6 @@ set_yydebug (value)\n #endif\n }\n \n-\f\n-/* Mark ARG (which is really a struct impl_files **) for GC.  */\n-\n-static void\n-mark_impl_file_chain (arg)\n-     void *arg;\n-{\n-  struct impl_files *ifs;\n-\n-  ifs = *(struct impl_files **) arg;\n-  while (ifs)\n-    {\n-      ggc_mark_string (ifs->filename);\n-      ifs = ifs->next;\n-    }\n-}\n-\n /* Helper function to load global variables with interface\n    information.  */\n \n@@ -1219,7 +1190,7 @@ handle_pragma_implementation (dfile)\n   if (ifiles == 0)\n     {\n       ifiles = (struct impl_files*) xmalloc (sizeof (struct impl_files));\n-      ifiles->filename = ggc_alloc_string (main_filename, -1);\n+      ifiles->filename = main_filename;\n       ifiles->next = impl_file_chain;\n       impl_file_chain = ifiles;\n     }"}, {"sha": "2c147f64109654233f3a8227e357ae70661187fe", "filename": "gcc/dbxout.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -454,8 +454,6 @@ dbxout_init (asm_file, input_file_name, syms)\n      and output them all, except for those already output.  */\n \n   dbxout_typedefs (syms);\n-\n-  ggc_add_string_root ((char **) &lastfile, 1);\n }\n \n /* Output any typedef names for types described by TYPE_DECLs in SYMS,"}, {"sha": "a96c01dad487cf82b07e49bc4001bf1e911c857c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -11029,9 +11029,6 @@ dwarf2out_line (filename, line)\n \t  /* Emit the .file and .loc directives understood by GNU as.  */\n \t  if (lastfile == 0 || strcmp (filename, lastfile))\n \t    {\n-\t      if (lastfile == 0)\n-\t\tggc_add_string_root ((char **) &lastfile, 1);\n-\n \t      fprintf (asm_out_file, \"\\t.file 0 \\\"%s\\\"\\n\", filename);\n \t      lastfile = filename;\n \t    }"}, {"sha": "5364b2503283f753e9f393ac376cdf41c8c6d269", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -504,7 +504,7 @@ create_rethrow_ref (region_num)\n   char buf[60];\n \n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LRTH\", region_num);\n-  ptr = ggc_alloc_string (buf, -1);\n+  ptr = ggc_strdup (buf);\n   def = gen_rtx_SYMBOL_REF (Pmode, ptr);\n   SYMBOL_REF_NEED_ADJUST (def) = 1;\n "}, {"sha": "9c118e32f7c97fbfbf80b12341542bd09d8a032b", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1,3 +1,8 @@\n+2000-11-17  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* lex.c (ffelex_hash_): Change ggc_alloc_string (var, -1) to\n+\tggc_strdup (var).\n+\n Thu Nov 16 23:14:07 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* malloc.c (malloc_init): Call xmalloc, not malloc."}, {"sha": "4c90f267f8458114a9eacd5836943a1328e5adf2", "filename": "gcc/f/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1317,7 +1317,7 @@ ffelex_hash_ (FILE *finput)\n       lineno = l;\n \n       if (ffelex_kludge_flag_)\n-\tinput_filename = ggc_alloc_string (ffelex_token_text (token), -1);\n+\tinput_filename = ggc_strdup (ffelex_token_text (token));\n       else\n \t{\n \t  wf = ffewhere_file_new (ffelex_token_text (token),"}, {"sha": "44f8cc2a1c7c9252037ee292de6fe0f3664f7fbb", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -224,7 +224,6 @@ ggc_mark_rtx_children (r)\n \t  break;\n \tcase CODE_LABEL:\n \t  ggc_mark_rtx (LABEL_REFS (r));\n-\t  ggc_mark_string (LABEL_ALTERNATE_NAME (r));\n \t  break;\n \tcase LABEL_REF:\n \t  ggc_mark_rtx (LABEL_NEXTREF (r));\n@@ -252,11 +251,6 @@ ggc_mark_rtx_children (r)\n \t      break;\n \n \t    default:\n-\t      if (NOTE_LINE_NUMBER (r) >= 0)\n-\t\t{\n-\t    case NOTE_INSN_DELETED_LABEL:\n-\t\t  ggc_mark_string (NOTE_SOURCE_FILE (r));\n-\t\t}\n \t      break;\n \t    }\n \t  break;\n@@ -354,10 +348,6 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (TREE_IMAGPART (t));\n \t  break;\n \n-\tcase STRING_CST:\n-\t  ggc_mark_string (TREE_STRING_POINTER (t));\n-\t  break;\n-\n \tcase PARM_DECL:\n \t  ggc_mark_rtx (DECL_INCOMING_RTL (t));\n \t  break;\n@@ -367,7 +357,6 @@ ggc_mark_trees ()\n \t  break;\n \n \tcase IDENTIFIER_NODE:\n-\t  ggc_mark_string (IDENTIFIER_POINTER (t));\n \t  lang_mark_tree (t);\n \t  continue;\n \n@@ -379,7 +368,6 @@ ggc_mark_trees ()\n       switch (TREE_CODE_CLASS (code))\n \t{\n \tcase 'd': /* A decl node.  */\n-\t  ggc_mark_string (DECL_SOURCE_FILE (t));\n \t  ggc_mark_tree (DECL_SIZE (t));\n \t  ggc_mark_tree (DECL_SIZE_UNIT (t));\n \t  ggc_mark_tree (DECL_NAME (t));"}, {"sha": "e222916a5a68be593d039eadb7a08b630ba8b171", "filename": "gcc/ggc.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -40,7 +40,9 @@ union  tree_node;\n struct varasm_status;\n \n /* Constants for general use.  */\n-extern const char empty_string[];\n+extern const char empty_string[];\t/* empty string */\n+extern const char digit_vector[];\t/* \"0\" .. \"9\" */\n+#define digit_string(d) (digit_vector + ((d) * 2))\n \n /* Trees that have been marked, but whose children still need marking.  */\n extern varray_type ggc_pending_trees;\n@@ -54,9 +56,6 @@ void ggc_add_tree_varray_root PARAMS ((struct varray_head_tag **, int nelt));\n void ggc_add_tree_hash_table_root PARAMS ((struct hash_table **, int nelt));\n void ggc_del_root PARAMS ((void *base));\n \n-/* Temporary */\n-#define ggc_add_string_root(ptr, nelt)  /* nothing */\n-\n /* Mark nodes from the gc_add_root callback.  These functions follow\n    pointers to mark other objects too.  */\n extern void ggc_mark_rtx_varray PARAMS ((struct varray_head_tag *));\n@@ -93,9 +92,6 @@ extern void ggc_mark_rtvec_children PARAMS ((struct rtvec_def *));\n       ggc_mark_rtvec_children (v__);            \\\n   } while (0)\n \n-/* Temporary */\n-#define ggc_mark_string(EXPR)  /* nothing */\n-\n #define ggc_mark(EXPR)\t\t\t\t\\\n   do {\t\t\t\t\t\t\\\n     const void *a__ = (EXPR);\t\t\t\\"}, {"sha": "6c482f49fa630111e3ad565d96c57ce38102ecaa", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1,3 +1,7 @@\n+2000-11-17  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* parse.y (goal): Remove call to ggc_add_string_root.\n+\n 2000-11-16  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* jcf-parse.c (get_constant), parse.y (do_merge_string_cste):"}, {"sha": "8f5eca1862f79e0d6111b6aab4aed8d5b9437d17", "filename": "gcc/java/parse.y", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -600,7 +600,6 @@ goal:\n \t\t  ggc_add_tree_root (&package_list, 1);\n \t\t  ggc_add_tree_root (&current_this, 1);\n \t\t  ggc_add_tree_root (&currently_caught_type_list, 1);\n-\t\t  ggc_add_string_root (&cyclic_inheritance_report, 1);\n \t\t  ggc_add_root (&ctxp, 1, \n \t\t\t\tsizeof (struct parser_ctxt *),\n \t\t\t\tmark_parser_ctxt);"}, {"sha": "1525391b90dd55938c4222afd452913af1992b03", "filename": "gcc/profile.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -1027,7 +1027,7 @@ init_edge_profiler ()\n   /* Generate and save a copy of this so it can be shared.  */\n   char buf[20];\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LPBX\", 2);\n-  profiler_label = gen_rtx_SYMBOL_REF (Pmode, ggc_alloc_string (buf, -1));\n+  profiler_label = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n   ggc_add_rtx_root (&profiler_label, 1);\n }\n \n@@ -1124,10 +1124,8 @@ output_func_start_profiler ()\n   /* Actually generate the code to call __bb_init_func. */\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LPBX\", 0);\n   table_address = force_reg (Pmode,\n-\t\t\t     gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t ggc_alloc_string (buf, -1)));\n-  emit_library_call (gen_rtx_SYMBOL_REF \n-\t\t     (Pmode, ggc_alloc_string (\"__bb_init_func\", 14)), 0,\n+\t\t\t     gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf)));\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_init_func\"), 0,\n \t\t     mode, 1, table_address, Pmode);\n \n   expand_function_end (input_filename, lineno, 0);"}, {"sha": "06242ce8e09237f328849cd2a4f9f99826471a0a", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -393,9 +393,6 @@ struct stmt_status\n /* Non-zero if we are using EH to handle cleanus.  */\n static int using_eh_for_cleanups_p = 0;\n \n-/* Character strings, each containing a single decimal digit.  */\n-static const char *digit_strings[10];\n-\n static int n_occurrences\t\tPARAMS ((int, const char *));\n static void expand_goto_internal\tPARAMS ((tree, rtx, rtx));\n static int expand_fixup\t\t\tPARAMS ((tree, rtx, rtx));\n@@ -597,18 +594,7 @@ mark_stmt_status (p)\n void\n init_stmt ()\n {\n-  int i;\n-  char buf[2];\n-\n   gcc_obstack_init (&stmt_obstack);\n-\n-  buf[1] = 0;\n-  for (i = 0; i < 10; i++)\n-    {\n-      buf[0] = '0' + i;\n-      digit_strings[i] = ggc_alloc_string (buf, 1);\n-    }\n-  ggc_add_string_root (digit_strings, 10);\n }\n \n void\n@@ -1809,7 +1795,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       ASM_OPERANDS_INPUT (body, ninputs - ninout + i)\n \t= output_rtx[j];\n       ASM_OPERANDS_INPUT_CONSTRAINT_EXP (body, ninputs - ninout + i)\n-\t= gen_rtx_ASM_INPUT (inout_mode[i], digit_strings[j]);\n+\t= gen_rtx_ASM_INPUT (inout_mode[i], digit_string (j));\n     }\n \n   generating_concat_p = old_generating_concat_p;"}, {"sha": "20db021009c91695d8ef6d246d0a514818df7467", "filename": "gcc/stringpool.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -40,6 +40,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* The \"\" allocated string.  */\n const char empty_string[] = \"\";\n \n+/* Character strings, each containing a single decimal digit.\n+   Written this way to save space.  */\n+const char digit_vector[] = {\n+  '0', 0, '1', 0, '2', 0, '3', 0, '4', 0,\n+  '5', 0, '6', 0, '7', 0, '8', 0, '9', 0\n+};\n+\n static struct obstack string_stack;\n \n /* This is the hash entry associated with each string.  It lives in\n@@ -262,6 +269,8 @@ ggc_alloc_string (contents, length)\n \n   if (length == 0)\n     return empty_string;\n+  if (length == 1 && contents[0] >= '0' && contents[0] <= '9')\n+    return digit_string (contents[0] - '0');\n \n   str = alloc_string (contents, length, INSERT);\n   return str->ptr;"}, {"sha": "de74f28968c94ad4bd2338f49b9c636b1d45951e", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -171,7 +171,6 @@ static void output_lang_identify PARAMS ((FILE *)) ATTRIBUTE_UNUSED;\n static void compile_file PARAMS ((const char *));\n static void display_help PARAMS ((void));\n static void display_target_options PARAMS ((void));\n-static void mark_file_stack PARAMS ((void *));\n \n static void decode_d_option PARAMS ((const char *));\n static int decode_f_option PARAMS ((const char *));\n@@ -1503,26 +1502,6 @@ decl_name (decl, verbosity)\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n \f\n-/* Mark P for GC.  Also mark main_input_filename and input_filename.  */\n-\n-static void\n-mark_file_stack (p)\n-     void *p;\n-{\n-  struct file_stack *stack = *(struct file_stack **)p;\n-\n-  /* We're only called for input_file_stack, so we can mark the current\n-     input_filename here as well.  */\n-  ggc_mark_string (main_input_filename);\n-  ggc_mark_string (input_filename);\n-\n-  while (stack)\n-    {\n-      ggc_mark_string (stack->name);\n-      stack = stack->next;\n-    }\n-}\n-\f\n \n /* This calls abort and is used to avoid problems when abort if a macro.\n    It is used when we need to pass the address of abort.  */\n@@ -2183,7 +2162,6 @@ compile_file (name)\n   /* Initialize data in various passes.  */\n \n   init_obstacks ();\n-  init_tree_codes ();\n   name = init_parse (name);\n   init_emit_once (debug_info_level == DINFO_LEVEL_NORMAL\n \t\t  || debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -2251,7 +2229,7 @@ compile_file (name)\n #endif\n \n   if (name != 0)\n-    name = ggc_alloc_string (name, strlen (name));\n+    name = ggc_strdup (name);\n \n   input_filename = name;\n \n@@ -4584,8 +4562,6 @@ main (argc, argv)\n   /* Initialize the garbage-collector.  */\n   init_ggc ();\n   init_stringpool ();\n-  ggc_add_root (&input_file_stack, 1, sizeof input_file_stack,\n-\t\tmark_file_stack);\n   ggc_add_rtx_root (&stack_limit_rtx, 1);\n   ggc_add_tree_root (&current_function_decl, 1);\n   ggc_add_tree_root (&current_function_func_begin_label, 1);"}, {"sha": "b0a1ae1875995a5968dee22d1e1b2143cc4b2548", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -179,12 +179,6 @@ static void finish_vector_type PARAMS((tree));\n void (*lang_unsave) PARAMS ((tree *));\n void (*lang_unsave_expr_now) PARAMS ((tree));\n \n-/* The string used as a placeholder instead of a source file name for\n-   built-in tree nodes.  The variable, which is dynamically allocated,\n-   should be used; the macro is only used to initialize it.  */\n-\n-static const char *built_in_filename;\n-#define BUILT_IN_FILENAME (\"<built-in>\")\n \f\n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n@@ -249,18 +243,6 @@ perm_calloc (nelem, size)\n   return rval;\n }\n \n-\f\n-/* Init the tables indexed by tree code.\n-   Note that languages can add to these tables to define their own codes.  */\n-\n-void\n-init_tree_codes ()\n-{\n-  built_in_filename\n-    = ggc_alloc_string (BUILT_IN_FILENAME, sizeof (BUILT_IN_FILENAME));\n-  ggc_add_string_root (&built_in_filename, 1);\n-}\n-\n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */\n size_t\n@@ -417,7 +399,7 @@ make_node (code)\n       DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       DECL_SOURCE_LINE (t) = lineno;\n       DECL_SOURCE_FILE (t) =\n-\t(input_filename) ? input_filename : built_in_filename;\n+\t(input_filename) ? input_filename : \"<built-in>\";\n       DECL_UID (t) = next_decl_uid++;\n       /* Note that we have not yet computed the alias set for this\n \t declaration.  */"}, {"sha": "ac0be894d022b569e3f1477d53cea1bcac0ffb3e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -2645,7 +2645,6 @@ extern tree type_hash_lookup\t\tPARAMS ((unsigned int, tree));\n extern void type_hash_add\t\tPARAMS ((unsigned int, tree));\n extern unsigned int type_hash_list\tPARAMS ((tree));\n extern int simple_cst_list_equal\tPARAMS ((tree, tree));\n-extern void init_tree_codes\t\tPARAMS ((void));\n extern void dump_tree_statistics\tPARAMS ((void));\n extern void print_obstack_statistics\tPARAMS ((const char *,\n \t\t\t\t\t\tstruct obstack *));"}, {"sha": "8faedda980f303d7652277767d2819911fad009d", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -319,7 +319,7 @@ named_section (decl, name, reloc)\n       abort ();\n #endif\n \n-      in_named_name = ggc_alloc_string (name, -1);\n+      in_named_name = ggc_strdup (name);\n       in_section = in_named;\n     }\n }\n@@ -1808,7 +1808,7 @@ assemble_static_space (size)\n \n   ASM_GENERATE_INTERNAL_LABEL (name, \"LF\", const_labelno);\n   ++const_labelno;\n-  namestring = ggc_alloc_string (name, -1);\n+  namestring = ggc_strdup (name);\n \n   x = gen_rtx_SYMBOL_REF (Pmode, namestring);\n \n@@ -1864,7 +1864,7 @@ assemble_trampoline_template ()\n \n   /* Record the rtl to refer to it.  */\n   ASM_GENERATE_INTERNAL_LABEL (label, \"LTRAMP\", 0);\n-  name = ggc_alloc_string (label, -1);\n+  name = ggc_strdup (label);\n   return gen_rtx_SYMBOL_REF (Pmode, name);\n }\n #endif\n@@ -2369,7 +2369,6 @@ mark_const_hash_entry (ptr)\n \n   while (desc)\n     {\n-      ggc_mark_string ((const char *)desc->label);\n       ggc_mark_rtx (desc->rtl);\n       desc = desc->next;\n     }\n@@ -3176,7 +3175,7 @@ output_constant_def (exp, defer)\n \n       desc = record_constant (exp);\n       desc->next = const_hash_table[hash];\n-      desc->label = ggc_alloc_string (label, -1);\n+      desc->label = ggc_strdup (label);\n       const_hash_table[hash] = desc;\n   \n       /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n@@ -3381,7 +3380,6 @@ mark_pool_constant (pc)\n     {\n       ggc_mark (pc);\n       ggc_mark_rtx (pc->constant);\n-      ggc_mark_string (pc->label);\n       pc = pc->next;\n     }\n }\n@@ -3693,7 +3691,7 @@ force_const_mem (mode, x)\n \n       ++const_labelno;\n \n-      desc->label = found = ggc_alloc_string (label, -1);\n+      desc->label = found = ggc_strdup (label);\n \n       /* Add label to symbol hash table.  */\n       hash = SYMHASH (found);\n@@ -4894,7 +4892,6 @@ init_varasm_once ()\n \t\tmark_const_hash_entry);\n   ggc_add_root (&const_str_htab, 1, sizeof const_str_htab,\n \t\tmark_const_str_htab);\n-  ggc_add_string_root (&in_named_name, 1);\n }\n \n /* Extra support for EH values.  */"}, {"sha": "6c8c2fe0599b25eb7435673b32c8e32d3385c107", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=a8a05998deca5cf6fac99e9a9b6e8343ea3c1b3f", "patch": "@@ -352,10 +352,6 @@ xcoffout_source_file (file, filename, inline_p)\n \t  fprintf (file, \"\\n\");\n \t  xcoff_current_include_file = filename;\n \t}\n-\n-      if (!xcoff_lastfile)\n-\tggc_add_string_root ((char **) &xcoff_lastfile, 1);\n-\n       xcoff_lastfile = filename;\n     }\n }"}]}