{"sha": "bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzNjQ3YmY3NmQxZDIwN2VhYTgwYzdjNmI1YTQ2MGZlY2MzMjdhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-23T09:17:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-23T09:17:34Z"}, "message": "re PR rtl-optimization/57344 (wrong code with pragma pack(1) and -O1 on x86)\n\n\tPR middle-end/57344\n\t* expmed.c (store_split_bit_field): If op0 is a REG or\n\tSUBREG of a REG, don't lower unit.  Handle unit not being\n\talways BITS_PER_WORD.\n\n\t* gcc.c-torture/execute/pr57344-1.c: New test.\n\t* gcc.c-torture/execute/pr57344-2.c: New test.\n\t* gcc.c-torture/execute/pr57344-3.c: New test.\n\t* gcc.c-torture/execute/pr57344-4.c: New test.\n\nFrom-SVN: r199238", "tree": {"sha": "57fea5153070c42926cb9de1a4e5502db3ae37bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57fea5153070c42926cb9de1a4e5502db3ae37bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a55757eae4c6711e558143595cbbfad97550b3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55757eae4c6711e558143595cbbfad97550b3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55757eae4c6711e558143595cbbfad97550b3e0"}], "stats": {"total": 153, "additions": 147, "deletions": 6}, "files": [{"sha": "a4bf07a1f92aac1ac1f01d713df4b291626eae20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -1,3 +1,10 @@\n+2013-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/57344\n+\t* expmed.c (store_split_bit_field): If op0 is a REG or\n+\tSUBREG of a REG, don't lower unit.  Handle unit not being\n+\talways BITS_PER_WORD.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/57341"}, {"sha": "daadd3def5d027980f8c53af3ddf5b034ede2d3d", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -1094,10 +1094,14 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n       thispos = (bitpos + bitsdone) % unit;\n \n       /* When region of bytes we can touch is restricted, decrease\n-\t UNIT close to the end of the region as needed.  */\n+\t UNIT close to the end of the region as needed.  If op0 is a REG\n+\t or SUBREG of REG, don't do this, as there can't be data races\n+\t on a register and we can expand shorter code in some cases.  */\n       if (bitregion_end\n \t  && unit > BITS_PER_UNIT\n-\t  && bitpos + bitsdone - thispos + unit > bitregion_end + 1)\n+\t  && bitpos + bitsdone - thispos + unit > bitregion_end + 1\n+\t  && !REG_P (op0)\n+\t  && (GET_CODE (op0) != SUBREG || !REG_P (SUBREG_REG (op0))))\n \t{\n \t  unit = unit / 2;\n \t  continue;\n@@ -1147,23 +1151,25 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n \t the current word starting from the base register.  */\n       if (GET_CODE (op0) == SUBREG)\n \t{\n-\t  int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD) + offset;\n+\t  int word_offset = (SUBREG_BYTE (op0) / UNITS_PER_WORD)\n+\t\t\t    + (offset * unit / BITS_PER_WORD);\n \t  enum machine_mode sub_mode = GET_MODE (SUBREG_REG (op0));\n \t  if (sub_mode != BLKmode && GET_MODE_SIZE (sub_mode) < UNITS_PER_WORD)\n \t    word = word_offset ? const0_rtx : op0;\n \t  else\n \t    word = operand_subword_force (SUBREG_REG (op0), word_offset,\n \t\t\t\t\t  GET_MODE (SUBREG_REG (op0)));\n-\t  offset = 0;\n+\t  offset &= BITS_PER_WORD / unit - 1;\n \t}\n       else if (REG_P (op0))\n \t{\n \t  enum machine_mode op0_mode = GET_MODE (op0);\n \t  if (op0_mode != BLKmode && GET_MODE_SIZE (op0_mode) < UNITS_PER_WORD)\n \t    word = offset ? const0_rtx : op0;\n \t  else\n-\t    word = operand_subword_force (op0, offset, GET_MODE (op0));\n-\t  offset = 0;\n+\t    word = operand_subword_force (op0, offset * unit / BITS_PER_WORD,\n+\t\t\t\t\t  GET_MODE (op0));\n+\t  offset &= BITS_PER_WORD / unit - 1;\n \t}\n       else\n \tword = op0;"}, {"sha": "6485a5cfbe01e34665125b26bad04c58d8630af4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -1,3 +1,11 @@\n+2013-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/57344\n+\t* gcc.c-torture/execute/pr57344-1.c: New test.\n+\t* gcc.c-torture/execute/pr57344-2.c: New test.\n+\t* gcc.c-torture/execute/pr57344-3.c: New test.\n+\t* gcc.c-torture/execute/pr57344-4.c: New test.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/57341"}, {"sha": "66893269efa5cd8ecd636a399594a9e84e2b85f9", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57344-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-1.c?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/57344 */\n+\n+struct __attribute__((packed)) S\n+{\n+  int a : 11;\n+#if __SIZEOF_INT__ * __CHAR_BIT__ >= 32\n+  int b : 22;\n+#else\n+  int b : 13;\n+#endif\n+  char c;\n+  int : 0;\n+} s[2];\n+int i;\n+\n+__attribute__((noinline, noclone)) void\n+foo (int x)\n+{\n+  if (x != -3161)\n+    __builtin_abort ();\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  struct S t = { 0, -3161L };\n+  s[1] = t;\n+  for (; i < 1; i++)\n+    foo (s[1].b);\n+  return 0;\n+}"}, {"sha": "9bf60cab8f05008fcf5ff3a4c5ecef634b4efef7", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57344-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-2.c?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/57344 */\n+\n+struct __attribute__((packed)) S\n+{\n+  int a : 27;\n+#if __SIZEOF_INT__ * __CHAR_BIT__ >= 32\n+  int b : 22;\n+#else\n+  int b : 13;\n+#endif\n+  char c;\n+  int : 0;\n+} s[2];\n+int i;\n+\n+__attribute__((noinline, noclone)) void\n+foo (int x)\n+{\n+  if (x != -3161)\n+    __builtin_abort ();\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  struct S t = { 0, -3161L };\n+  s[1] = t;\n+  for (; i < 1; i++)\n+    foo (s[1].b);\n+  return 0;\n+}"}, {"sha": "f9daea6d3a93afa923ddbef8a503950addd3e21e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57344-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-3.c?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/57344 */\n+\n+struct __attribute__((packed)) S\n+{\n+  long long int a : 43;\n+  long long int b : 22;\n+  char c;\n+  long long int : 0;\n+} s[2];\n+int i;\n+\n+__attribute__((noinline, noclone)) void\n+foo (long long int x)\n+{\n+  if (x != -3161LL)\n+    __builtin_abort ();\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  struct S t = { 0, -3161LL };\n+  s[1] = t;\n+  for (; i < 1; i++)\n+    foo (s[1].b);\n+  return 0;\n+}"}, {"sha": "0b2bf152490f33ccd78dd721f213847dc034aa5a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57344-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3647bf76d1d207eaa80c7c6b5a460fecc327a9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57344-4.c?ref=bd3647bf76d1d207eaa80c7c6b5a460fecc327a9", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/57344 */\n+\n+struct __attribute__((packed)) S\n+{\n+  long long int a : 59;\n+  long long int b : 54;\n+  char c;\n+  long long int : 0;\n+} s[2];\n+int i;\n+\n+__attribute__((noinline, noclone)) void\n+foo (long long int x)\n+{\n+  if (x != -1220975898975746LL)\n+    __builtin_abort ();\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  struct S t = { 0, -1220975898975746LL };\n+  s[1] = t;\n+  for (; i < 1; i++)\n+    foo (s[1].b);\n+  return 0;\n+}"}]}