{"sha": "8b5190aba09f9f1af9f655b543faee2b58f746ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1MTkwYWJhMDlmOWYxYWY5ZjY1NWI1NDNmYWVlMmI1OGY3NDZlZg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-05-08T11:49:02Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-05-08T11:49:02Z"}, "message": "[AArch64] Add vcond(u?)didi pattern\n\n\t* config/aarch64/aarch64-simd.md (aarch64_vcond_internal<mode><mode>,\n\tvcond<mode><mode>, vcondu<mode><mode>): Add DImode variant.\n\nFrom-SVN: r222908", "tree": {"sha": "26f2bc28f6119fb38a97eed85b3220bc000397bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26f2bc28f6119fb38a97eed85b3220bc000397bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5190aba09f9f1af9f655b543faee2b58f746ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5190aba09f9f1af9f655b543faee2b58f746ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5190aba09f9f1af9f655b543faee2b58f746ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5190aba09f9f1af9f655b543faee2b58f746ef/comments", "author": null, "committer": null, "parents": [{"sha": "938fb83d2ce3c27a1b23c2a992bce3767179b73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938fb83d2ce3c27a1b23c2a992bce3767179b73d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938fb83d2ce3c27a1b23c2a992bce3767179b73d"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "87a75d1398e31e69ef090de98b2734020adb5582", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5190aba09f9f1af9f655b543faee2b58f746ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5190aba09f9f1af9f655b543faee2b58f746ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b5190aba09f9f1af9f655b543faee2b58f746ef", "patch": "@@ -1,3 +1,8 @@\n+2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_vcond_internal<mode><mode>,\n+\tvcond<mode><mode>, vcondu<mode><mode>): Add DImode variant.\n+\n 2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* optabs.c (vector_compare_rtx): Handle RTL operands having VOIDmode."}, {"sha": "b90f93841f8ba505fb362a42646ef374ac18b2ec", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5190aba09f9f1af9f655b543faee2b58f746ef/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5190aba09f9f1af9f655b543faee2b58f746ef/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8b5190aba09f9f1af9f655b543faee2b58f746ef", "patch": "@@ -2057,13 +2057,13 @@\n })\n \n (define_expand \"aarch64_vcond_internal<mode><mode>\"\n-  [(set (match_operand:VDQ_I 0 \"register_operand\")\n-\t(if_then_else:VDQ_I\n+  [(set (match_operand:VSDQ_I_DI 0 \"register_operand\")\n+\t(if_then_else:VSDQ_I_DI\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQ_I 4 \"register_operand\")\n-\t     (match_operand:VDQ_I 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQ_I 1 \"nonmemory_operand\")\n-\t  (match_operand:VDQ_I 2 \"nonmemory_operand\")))]\n+\t    [(match_operand:VSDQ_I_DI 4 \"register_operand\")\n+\t     (match_operand:VSDQ_I_DI 5 \"nonmemory_operand\")])\n+\t  (match_operand:VSDQ_I_DI 1 \"nonmemory_operand\")\n+\t  (match_operand:VSDQ_I_DI 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   rtx op1 = operands[1];\n@@ -2365,13 +2365,13 @@\n })\n \n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\")\n-\t(if_then_else:VALL\n+  [(set (match_operand:VALLDI 0 \"register_operand\")\n+\t(if_then_else:VALLDI\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VALL 4 \"register_operand\")\n-\t     (match_operand:VALL 5 \"nonmemory_operand\")])\n-\t  (match_operand:VALL 1 \"nonmemory_operand\")\n-\t  (match_operand:VALL 2 \"nonmemory_operand\")))]\n+\t    [(match_operand:VALLDI 4 \"register_operand\")\n+\t     (match_operand:VALLDI 5 \"nonmemory_operand\")])\n+\t  (match_operand:VALLDI 1 \"nonmemory_operand\")\n+\t  (match_operand:VALLDI 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_vcond_internal<mode><mode> (operands[0], operands[1],\n@@ -2398,13 +2398,13 @@\n })\n \n (define_expand \"vcondu<mode><mode>\"\n-  [(set (match_operand:VDQ_I 0 \"register_operand\")\n-\t(if_then_else:VDQ_I\n+  [(set (match_operand:VSDQ_I_DI 0 \"register_operand\")\n+\t(if_then_else:VSDQ_I_DI\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQ_I 4 \"register_operand\")\n-\t     (match_operand:VDQ_I 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQ_I 1 \"nonmemory_operand\")\n-\t  (match_operand:VDQ_I 2 \"nonmemory_operand\")))]\n+\t    [(match_operand:VSDQ_I_DI 4 \"register_operand\")\n+\t     (match_operand:VSDQ_I_DI 5 \"nonmemory_operand\")])\n+\t  (match_operand:VSDQ_I_DI 1 \"nonmemory_operand\")\n+\t  (match_operand:VSDQ_I_DI 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_vcond_internal<mode><mode> (operands[0], operands[1],"}]}