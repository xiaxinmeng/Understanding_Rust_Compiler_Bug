{"sha": "e09366718ad8c93678618a47016e18cb6e927131", "node_id": "C_kwDOANBUbNoAKGUwOTM2NjcxOGFkOGM5MzY3ODYxOGE0NzAxNmUxOGNiNmU5MjcxMzE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-17T18:04:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-05T13:47:01Z"}, "message": "libstdc++: Reduce template instantiations in <regex>\n\nThis moves the last two template parameters of __regex_algo_impl to be\nruntime function parameters instead, so that we don't need four\ndifferent instantiations for the possible ways to call it. Most of the\nfunction (and what it instantiates) is the same in all cases, so making\nthem compile-time choices doesn't really have much benefit.\n\nUse  'if constexpr' for conditions that check template parameters, so\nthat when we do depend on a compile-time condition we only instantiate\nwhat we need to.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h (__regex_algo_impl): Change __policy and\n\t__match_mode template parameters to be function parameters.\n\t(regex_match, regex_search): Pass policy and match mode as\n\tfunction arguments.\n\t* include/bits/regex.tcc (__regex_algo_impl): Change template\n\tparameters to function parameters.\n\t* include/bits/regex_compiler.h (_RegexTranslatorBase): Use\n\t'if constexpr' for conditions using template parameters.\n\t(_RegexTranslator): Likewise.\n\t* include/bits/regex_executor.tcc (_Executor::_M_handle_accept):\n\tLikewise.\n\t* testsuite/util/testsuite_regex.h (regex_match_debug)\n\t(regex_search_debug): Move template arguments to function\n\targuments.", "tree": {"sha": "68ba1bd45d0963ee49e07fc2923d4d8b80f9ab45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ba1bd45d0963ee49e07fc2923d4d8b80f9ab45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09366718ad8c93678618a47016e18cb6e927131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09366718ad8c93678618a47016e18cb6e927131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09366718ad8c93678618a47016e18cb6e927131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09366718ad8c93678618a47016e18cb6e927131/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2451c1013c21e76da89df89c3c8e5e6afe6154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2451c1013c21e76da89df89c3c8e5e6afe6154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2451c1013c21e76da89df89c3c8e5e6afe6154"}], "stats": {"total": 76, "additions": 37, "deletions": 39}, "files": [{"sha": "7480b0a5f974c9da7d9a19915bb88b226344df76", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=e09366718ad8c93678618a47016e18cb6e927131", "patch": "@@ -45,15 +45,14 @@ namespace __detail\n   enum class _RegexExecutorPolicy : int { _S_auto, _S_alternate };\n \n   template<typename _BiIter, typename _Alloc,\n-\t   typename _CharT, typename _TraitsT,\n-\t   _RegexExecutorPolicy __policy,\n-\t   bool __match_mode>\n+\t   typename _CharT, typename _TraitsT>\n     bool\n-    __regex_algo_impl(_BiIter\t\t\t      __s,\n-\t\t      _BiIter\t\t\t      __e,\n+    __regex_algo_impl(_BiIter __s, _BiIter __e,\n \t\t      match_results<_BiIter, _Alloc>&      __m,\n \t\t      const basic_regex<_CharT, _TraitsT>& __re,\n-\t\t      regex_constants::match_flag_type     __flags);\n+\t\t      regex_constants::match_flag_type     __flags,\n+\t\t      _RegexExecutorPolicy\t\t   __policy,\n+\t\t      bool\t\t\t\t   __match_mode);\n \n   template<typename, typename, typename, bool>\n     class _Executor;\n@@ -792,12 +791,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_M_flags = __f;\n       }\n \n-      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n-\t__detail::_RegexExecutorPolicy, bool>\n+      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp>\n \tfriend bool\n \t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n \t\t\t\t    const basic_regex<_Cp, _Rp>&,\n-\t\t\t\t    regex_constants::match_flag_type);\n+\t\t\t\t    regex_constants::match_flag_type,\n+\t\t\t\t    _RegexExecutorPolicy, bool);\n \n       template<typename, typename, typename, bool>\n \tfriend class __detail::_Executor;\n@@ -2063,12 +2062,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       template<typename, typename, typename, bool>\n \tfriend class __detail::_Executor;\n \n-      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n-\t__detail::_RegexExecutorPolicy, bool>\n+      template<typename _Bp, typename _Ap, typename _Cp, typename _Rp>\n \tfriend bool\n \t__detail::__regex_algo_impl(_Bp, _Bp, match_results<_Bp, _Ap>&,\n \t\t\t\t    const basic_regex<_Cp, _Rp>&,\n-\t\t\t\t    regex_constants::match_flag_type);\n+\t\t\t\t    regex_constants::match_flag_type,\n+\t\t\t\t    _RegexExecutorPolicy, bool);\n \n       // Reset contents to __size unmatched sub_match objects\n       // (plus additional objects for prefix, suffix and unmatched sub).\n@@ -2206,9 +2205,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\tregex_constants::match_flag_type\t __flags\n \t\t\t       = regex_constants::match_default)\n     {\n-      return __detail::__regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t__detail::_RegexExecutorPolicy::_S_auto, true>\n-\t  (__s, __e, __m, __re, __flags);\n+      return __detail::__regex_algo_impl(__s, __e, __m, __re, __flags,\n+\t__detail::_RegexExecutorPolicy::_S_auto, true);\n     }\n \n   /**\n@@ -2363,9 +2361,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t regex_constants::match_flag_type __flags\n \t\t = regex_constants::match_default)\n     {\n-      return __detail::__regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t__detail::_RegexExecutorPolicy::_S_auto, false>\n-\t  (__s, __e, __m, __re, __flags);\n+      return __detail::__regex_algo_impl(__s, __e, __m, __re, __flags,\n+\t__detail::_RegexExecutorPolicy::_S_auto, false);\n     }\n \n   /**"}, {"sha": "2b90b04c560a5fc04602d70e62312d1cbb49b363", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=e09366718ad8c93678618a47016e18cb6e927131", "patch": "@@ -43,15 +43,15 @@ namespace __detail\n   //\n   // That __match_mode is true means regex_match, else regex_search.\n   template<typename _BiIter, typename _Alloc,\n-\t   typename _CharT, typename _TraitsT,\n-\t   _RegexExecutorPolicy __policy,\n-\t   bool __match_mode>\n+\t   typename _CharT, typename _TraitsT>\n     bool\n     __regex_algo_impl(_BiIter                              __s,\n \t\t      _BiIter                              __e,\n \t\t      match_results<_BiIter, _Alloc>&      __m,\n \t\t      const basic_regex<_CharT, _TraitsT>& __re,\n-\t\t      regex_constants::match_flag_type     __flags)\n+\t\t      regex_constants::match_flag_type     __flags,\n+\t\t      _RegexExecutorPolicy\t\t   __policy,\n+\t\t      bool\t\t\t\t   __match_mode)\n     {\n       if (__re._M_automaton == nullptr)\n \treturn false;"}, {"sha": "174aefe75f72b7d118831add221122ce5ba31309", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=e09366718ad8c93678618a47016e18cb6e927131", "patch": "@@ -221,9 +221,9 @@ namespace __detail\n       _CharT\n       _M_translate(_CharT __ch) const\n       {\n-\tif (__icase)\n+\tif _GLIBCXX17_CONSTEXPR (__icase)\n \t  return _M_traits.translate_nocase(__ch);\n-\telse if (__collate)\n+\telse if _GLIBCXX17_CONSTEXPR (__collate)\n \t  return _M_traits.translate(__ch);\n \telse\n \t  return __ch;\n@@ -285,9 +285,10 @@ namespace __detail\n       bool\n       _M_match_range(_CharT __first, _CharT __last, _CharT __ch) const\n       {\n-\tif (!__icase)\n+\tif _GLIBCXX17_CONSTEXPR (!__icase)\n \t  return __first <= __ch && __ch <= __last;\n-\treturn this->_M_in_range_icase(__first, __last, __ch);\n+\telse\n+\t  return this->_M_in_range_icase(__first, __last, __ch);\n       }\n     };\n "}, {"sha": "b93e958075e3d3266ae01b8dd1ffca8f41d67d4e", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=e09366718ad8c93678618a47016e18cb6e927131", "patch": "@@ -425,7 +425,7 @@ namespace __detail\n     void _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::\n     _M_handle_accept(_Match_mode __match_mode, _StateIdT)\n     {\n-      if (__dfs_mode)\n+      if _GLIBCXX17_CONSTEXPR (__dfs_mode)\n \t{\n \t  __glibcxx_assert(!_M_has_sol);\n \t  if (__match_mode == _Match_mode::_Exact)"}, {"sha": "4e163c3a3f8ada93ed85c8fbb3d6e4ce6c10f8da", "filename": "libstdc++-v3/testsuite/util/testsuite_regex.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09366718ad8c93678618a47016e18cb6e927131/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_regex.h?ref=e09366718ad8c93678618a47016e18cb6e927131", "patch": "@@ -143,13 +143,13 @@ namespace __gnu_test\n \t\t      = std::regex_constants::match_default)\n     {\n       using namespace std::__detail;\n-      auto __res1 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_auto, true>\n-\t(__s, __e, __m, __re, __flags);\n+      auto __res1 = __regex_algo_impl(__s, __e, __m, __re, __flags,\n+\t\t\t\t      _RegexExecutorPolicy::_S_auto,\n+\t\t\t\t      true);\n       match_results<_Bi_iter, _Alloc> __mm;\n-      auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_alternate, true>\n-\t(__s, __e, __mm, __re, __flags);\n+      auto __res2 = __regex_algo_impl(__s, __e, __mm, __re, __flags,\n+\t\t\t\t      _RegexExecutorPolicy::_S_alternate,\n+\t\t\t\t      true);\n       if (__res1 == __res2 && __m == __mm)\n \treturn __res1;\n       throw std::exception();\n@@ -229,13 +229,13 @@ namespace __gnu_test\n \t\t       = std::regex_constants::match_default)\n     {\n       using namespace std::__detail;\n-      auto __res1 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_auto, false>\n-        (__s, __e, __m, __re, __flags);\n+      auto __res1 = __regex_algo_impl(__s, __e, __m, __re, __flags,\n+\t\t\t\t      _RegexExecutorPolicy::_S_auto,\n+\t\t\t\t      false);\n       match_results<_Bi_iter, _Alloc> __mm;\n-      auto __res2 = __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits,\n-\t   _RegexExecutorPolicy::_S_alternate, false>\n-        (__s, __e, __mm, __re, __flags);\n+      auto __res2 = __regex_algo_impl(__s, __e, __mm, __re, __flags,\n+\t\t\t\t      _RegexExecutorPolicy::_S_alternate,\n+\t\t\t\t      false);\n       if (__res1 == __res2 && __m == __mm)\n         return __res1;\n       throw(std::exception()); // Let test fail. Give it a name."}]}