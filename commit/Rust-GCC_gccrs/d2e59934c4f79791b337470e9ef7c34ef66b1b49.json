{"sha": "d2e59934c4f79791b337470e9ef7c34ef66b1b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlNTk5MzRjNGY3OTc5MWIzMzc0NzBlOWVmN2MzNGVmNjZiMWI0OQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-12-07T06:58:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:38:06Z"}, "message": "[Ada] AI12-0397: Default_Initial_Condition expressions for derived types\n\ngcc/ada/\n\n\t* exp_util.adb (Add_Own_DIC): Suppress expansion of a DIC pragma\n\twhen the pragma occurs for an abstract type, since that could\n\tlead to a call to an abstract function, and such DIC checks can\n\tnever be performed for abstract types in any case.\n\t* sem_disp.adb (Check_Dispatching_Context): Suppress the check\n\tfor illegal calls to abstract subprograms when the call occurs\n\twithin a Default_Initial_Condition aspect and the call is passed\n\tthe current instance as an actual.\n\t(Has_Controlling_Current_Instance_Actual): New function to test\n\ta call to see if it has any actuals given by direct references\n\tto a current instance of a type\n\t* sem_res.adb (Resolve_Actuals): Issue an error for a call\n\twithin a DIC aspect to a nonprimitive subprogram with an actual\n\tgiven by the name of the DIC type's current instance (which will\n\tshow up as a reference to the formal parameter of a DIC\n\tprocedure).", "tree": {"sha": "981419d8f09a7ac810cee98d37a1871a56af59b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981419d8f09a7ac810cee98d37a1871a56af59b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e59934c4f79791b337470e9ef7c34ef66b1b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e59934c4f79791b337470e9ef7c34ef66b1b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e59934c4f79791b337470e9ef7c34ef66b1b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e59934c4f79791b337470e9ef7c34ef66b1b49/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb60efc5c75afa2c409c740b970f5f1e6fdd4890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb60efc5c75afa2c409c740b970f5f1e6fdd4890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb60efc5c75afa2c409c740b970f5f1e6fdd4890"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "36af89ba276d48526a30ac7f2976b2208ba97fce", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d2e59934c4f79791b337470e9ef7c34ef66b1b49", "patch": "@@ -1854,12 +1854,18 @@ package body Exp_Util is\n          end if;\n \n          --  Once the DIC assertion expression is fully processed, add a check\n-         --  to the statements of the DIC procedure.\n-\n-         Add_DIC_Check\n-           (DIC_Prag => DIC_Prag,\n-            DIC_Expr => Expr,\n-            Stmts    => Stmts);\n+         --  to the statements of the DIC procedure (unless the type is an\n+         --  abstract type, in which case we don't want the possibility of\n+         --  generating a call to an abstract function of the type; such DIC\n+         --  procedures can never be called in any case, so not generating the\n+         --  check at all is OK).\n+\n+         if not Is_Abstract_Type (DIC_Typ) then\n+            Add_DIC_Check\n+              (DIC_Prag => DIC_Prag,\n+               DIC_Expr => Expr,\n+               Stmts    => Stmts);\n+         end if;\n       end Add_Own_DIC;\n \n       ---------------------"}, {"sha": "360e73c1127e324071484f12c0d29a5f879faa45", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=d2e59934c4f79791b337470e9ef7c34ef66b1b49", "patch": "@@ -517,6 +517,12 @@ package body Sem_Disp is\n          procedure Abstract_Context_Error;\n          --  Error for abstract call dispatching on result is not dispatching\n \n+         function Has_Controlling_Current_Instance_Actual_In_DIC\n+           (Call : Node_Id) return Boolean;\n+         --  Return True if the subprogram call Call has a controlling actual\n+         --  given directly by a current instance referenced within a DIC\n+         --  aspect.\n+\n          ----------------------------\n          -- Abstract_Context_Error --\n          ----------------------------\n@@ -536,6 +542,44 @@ package body Sem_Disp is\n             end if;\n          end Abstract_Context_Error;\n \n+         ----------------------------------------\n+         -- Has_Current_Instance_Actual_In_DIC --\n+         ----------------------------------------\n+\n+         function Has_Controlling_Current_Instance_Actual_In_DIC\n+           (Call : Node_Id) return Boolean\n+         is\n+            A : Node_Id;\n+            F : Entity_Id;\n+         begin\n+            F := First_Formal (Subp_Entity);\n+            A := First_Actual (Call);\n+\n+            while Present (F) loop\n+\n+               --  Return True if the actual denotes a current instance (which\n+               --  will be represented by an in-mode formal of the enclosing\n+               --  DIC_Procedure) passed to a controlling formal. We don't have\n+               --  to worry about controlling access formals here, because its\n+               --  illegal to apply Access (etc.) attributes to a current\n+               --  instance within an aspect (by AI12-0068).\n+\n+               if Is_Controlling_Formal (F)\n+                 and then Nkind (A) = N_Identifier\n+                 and then Ekind (Entity (A)) = E_In_Parameter\n+                 and then Is_Subprogram (Scope (Entity (A)))\n+                 and then Is_DIC_Procedure (Scope (Entity (A)))\n+               then\n+                  return True;\n+               end if;\n+\n+               Next_Formal (F);\n+               Next_Actual (A);\n+            end loop;\n+\n+            return False;\n+         end Has_Controlling_Current_Instance_Actual_In_DIC;\n+\n          --  Local variables\n \n          Scop : constant Entity_Id := Current_Scope_No_Loops;\n@@ -591,6 +635,20 @@ package body Sem_Disp is\n             then\n                null;\n \n+            --  Similarly to the dispensation for postconditions, a call to\n+            --  an abstract function within a Default_Initial_Condition aspect\n+            --  can be legal when passed a current instance of the type. Such\n+            --  a call will be effectively mapped to a call to a primitive of\n+            --  a descendant type (see AI12-0397, as well as AI12-0170), so\n+            --  doesn't need to be dispatching. We test for being within a DIC\n+            --  procedure, since that's where the call will be analyzed.\n+\n+            elsif Is_Subprogram (Scop)\n+              and then Is_DIC_Procedure (Scop)\n+              and then Has_Controlling_Current_Instance_Actual_In_DIC (Call)\n+            then\n+               null;\n+\n             elsif Ekind (Current_Scope) = E_Function\n               and then Nkind (Unit_Declaration_Node (Scop)) =\n                          N_Generic_Subprogram_Declaration"}, {"sha": "fb551d35156f628fe3f5f0a123b1b085ad95d637", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e59934c4f79791b337470e9ef7c34ef66b1b49/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d2e59934c4f79791b337470e9ef7c34ef66b1b49", "patch": "@@ -5036,6 +5036,41 @@ package body Sem_Res is\n                end if;\n             end if;\n \n+            --  (AI12-0397): The target of a subprogram call that occurs within\n+            --  the expression of an Default_Initial_Condition aspect and has\n+            --  an actual that is the current instance of the type must be\n+            --  either a primitive of the type or a class-wide subprogram,\n+            --  because the type of the current instance in such an aspect is\n+            --  considered to be a notional formal derived type whose only\n+            --  operations correspond to the primitives of the enclosing type.\n+            --  Nonprimitives can be called, but the current instance must be\n+            --  converted rather than passed directly. Note that a current\n+            --  instance of a type with DIC will occur as a reference to an\n+            --  in-mode formal of an enclosing DIC procedure or partial DIC\n+            --  procedure. (It seems that this check should perhaps also apply\n+            --  to calls within Type_Invariant'Class, but not Type_Invariant,\n+            --  aspects???)\n+\n+            if Nkind (A) = N_Identifier\n+              and then Ekind (Entity (A)) = E_In_Parameter\n+\n+              and then Is_Subprogram (Scope (Entity (A)))\n+              and then Is_DIC_Procedure (Scope (Entity (A)))\n+\n+              --  We check Comes_From_Source to exclude inherited primitives\n+              --  from being flagged, because such subprograms turn out to not\n+              --  always have the Is_Primitive flag set. ???\n+\n+              and then Comes_From_Source (Nam)\n+\n+              and then not Is_Primitive (Nam)\n+              and then not Is_Class_Wide_Type (Etype (F))\n+            then\n+               Error_Msg_NE\n+                 (\"call to nonprimitive & with current instance not allowed \" &\n+                  \"for aspect\", A, Nam);\n+            end if;\n+\n             Next_Actual (A);\n \n          --  Case where actual is not present"}]}