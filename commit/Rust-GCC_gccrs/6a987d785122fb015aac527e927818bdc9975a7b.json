{"sha": "6a987d785122fb015aac527e927818bdc9975a7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5ODdkNzg1MTIyZmIwMTVhYWM1MjdlOTI3ODE4YmRjOTk3NWE3Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-22T18:37:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:20Z"}, "message": "[Ada] Get rid of more references to Universal_Integer in expanded code\n\n2020-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Others_Check): In the positional case, use the\n\tgeneral expression for the comparison only when needed.\n\t* exp_attr.adb (Expand_Fpt_Attribute;): Use a simple conversion\n\tto the target type instead of an unchecked conversion to the\n\tbase type to do the range check, as in the other cases.\n\t(Expand_N_Attribute_Reference) <Attribute_Storage_Size>: Do the\n\tMax operation in the type of the storage size variable, and use\n\tConvert_To as in the other cases.\n\t* tbuild.adb (Convert_To): Do not get rid of an intermediate\n\tconversion to Universal_Integer here...\n\t* sem_res.adb  (Simplify_Type_Conversion): ...but here instead.", "tree": {"sha": "a81f8f86b9718d479b7f992bc38ea84d4f38b6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81f8f86b9718d479b7f992bc38ea84d4f38b6d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a987d785122fb015aac527e927818bdc9975a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a987d785122fb015aac527e927818bdc9975a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a987d785122fb015aac527e927818bdc9975a7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a987d785122fb015aac527e927818bdc9975a7b/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b976a0de9d9e130a546dc637ddd52540a577f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b976a0de9d9e130a546dc637ddd52540a577f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b976a0de9d9e130a546dc637ddd52540a577f18"}], "stats": {"total": 109, "additions": 66, "deletions": 43}, "files": [{"sha": "dad83d4636a6d7569ea3f5a2c59668efa378538b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=6a987d785122fb015aac527e927818bdc9975a7b", "patch": "@@ -5853,26 +5853,51 @@ package body Exp_Aggr is\n          --       raise Constraint_Error;\n          --    end if;\n \n+         --  in the general case, but the following simpler test:\n+\n+         --    [constraint_error when\n+         --      Aggr_Lo + (Nb_Elements - 1) > Aggr_Hi];\n+\n+         --  instead if the index type is a signed integer.\n+\n          elsif Nb_Elements > Uint_0 then\n-            Cond :=\n-              Make_Op_Gt (Loc,\n-                Left_Opnd  =>\n-                  Make_Op_Add (Loc,\n-                    Left_Opnd  =>\n-                      Make_Attribute_Reference (Loc,\n-                        Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n-                        Attribute_Name => Name_Pos,\n-                        Expressions    =>\n-                          New_List\n-                            (Duplicate_Subexpr_Move_Checks (Aggr_Lo))),\n-                Right_Opnd => Make_Integer_Literal (Loc, Nb_Elements - 1)),\n+            if Nb_Elements = Uint_1 then\n+               Cond :=\n+                 Make_Op_Gt (Loc,\n+                   Left_Opnd  => Duplicate_Subexpr_Move_Checks (Aggr_Lo),\n+                   Right_Opnd => Duplicate_Subexpr_Move_Checks (Aggr_Hi));\n+\n+            elsif Is_Signed_Integer_Type (Ind_Typ) then\n+               Cond :=\n+                 Make_Op_Gt (Loc,\n+                   Left_Opnd  =>\n+                     Make_Op_Add (Loc,\n+                       Left_Opnd  => Duplicate_Subexpr_Move_Checks (Aggr_Lo),\n+                       Right_Opnd =>\n+                         Make_Integer_Literal (Loc, Nb_Elements - 1)),\n+                   Right_Opnd => Duplicate_Subexpr_Move_Checks (Aggr_Hi));\n \n-                Right_Opnd =>\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n-                    Attribute_Name => Name_Pos,\n-                    Expressions    => New_List (\n-                      Duplicate_Subexpr_Move_Checks (Aggr_Hi))));\n+            else\n+               Cond :=\n+                 Make_Op_Gt (Loc,\n+                   Left_Opnd  =>\n+                     Make_Op_Add (Loc,\n+                       Left_Opnd  =>\n+                         Make_Attribute_Reference (Loc,\n+                           Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n+                           Attribute_Name => Name_Pos,\n+                           Expressions    =>\n+                             New_List\n+                               (Duplicate_Subexpr_Move_Checks (Aggr_Lo))),\n+                   Right_Opnd => Make_Integer_Literal (Loc, Nb_Elements - 1)),\n+\n+                   Right_Opnd =>\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => New_Occurrence_Of (Ind_Typ, Loc),\n+                       Attribute_Name => Name_Pos,\n+                       Expressions    => New_List (\n+                         Duplicate_Subexpr_Move_Checks (Aggr_Hi))));\n+            end if;\n \n          --  If we are dealing with an aggregate containing an others choice\n          --  and discrete choices we generate the following test:"}, {"sha": "ce939e714a5bf1484a53cec70a3436475e4e2069", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=6a987d785122fb015aac527e927818bdc9975a7b", "patch": "@@ -1096,12 +1096,10 @@ package body Exp_Attr is\n           Selector_Name => Make_Identifier (Loc, Nam));\n \n       --  The generated call is given the provided set of parameters, and then\n-      --  wrapped in a conversion which converts the result to the target type\n-      --  We use the base type as the target because a range check may be\n-      --  required.\n+      --  wrapped in a conversion which converts the result to the target type.\n \n       Rewrite (N,\n-        Unchecked_Convert_To (Base_Type (Etype (N)),\n+        Convert_To (Typ,\n           Make_Function_Call (Loc,\n             Name                   => Fnm,\n             Parameter_Associations => Args)));\n@@ -6011,12 +6009,13 @@ package body Exp_Attr is\n          if Is_Access_Type (Ptyp) then\n             if Present (Storage_Size_Variable (Root_Type (Ptyp))) then\n                Rewrite (N,\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix => New_Occurrence_Of (Typ, Loc),\n-                   Attribute_Name => Name_Max,\n-                   Expressions => New_List (\n-                     Make_Integer_Literal (Loc, 0),\n-                     Convert_To (Typ,\n+                 Convert_To (Typ,\n+                   Make_Attribute_Reference (Loc,\n+                     Prefix => New_Occurrence_Of\n+                       (Etype (Storage_Size_Variable (Root_Type (Ptyp))), Loc),\n+                     Attribute_Name => Name_Max,\n+                     Expressions => New_List (\n+                       Make_Integer_Literal (Loc, 0),\n                        New_Occurrence_Of\n                          (Storage_Size_Variable (Root_Type (Ptyp)), Loc)))));\n \n@@ -6069,7 +6068,7 @@ package body Exp_Attr is\n \n                else\n                   Rewrite (N,\n-                    OK_Convert_To (Typ,\n+                    Convert_To (Typ,\n                       Make_Function_Call (Loc,\n                         Name =>\n                           New_Occurrence_Of (Alloc_Op, Loc),"}, {"sha": "143191b618050f159dc048fbbf5d1cad94860fbc", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6a987d785122fb015aac527e927818bdc9975a7b", "patch": "@@ -265,9 +265,7 @@ package body Sem_Res is\n \n    procedure Simplify_Type_Conversion (N : Node_Id);\n    --  Called after N has been resolved and evaluated, but before range checks\n-   --  have been applied. Currently simplifies a combination of floating-point\n-   --  to integer conversion and Rounding or Truncation attribute, and also the\n-   --  conversion of an integer literal to a dynamic integer type.\n+   --  have been applied. This rewrites the conversion into a simpler form.\n \n    function Unique_Fixed_Point_Type (N : Node_Id) return Entity_Id;\n    --  A universal_fixed expression in an universal context is unambiguous if\n@@ -12630,7 +12628,7 @@ package body Sem_Res is\n             --  Special processing for the conversion of an integer literal to\n             --  a dynamic type: we first convert the literal to the root type\n             --  and then convert the result to the target type, the goal being\n-            --  to avoid doing range checks in Universal_Integer type.\n+            --  to avoid doing range checks in universal integer.\n \n             elsif Is_Integer_Type (Target_Typ)\n               and then not Is_Generic_Type (Root_Type (Target_Typ))\n@@ -12639,6 +12637,17 @@ package body Sem_Res is\n             then\n                Convert_To_And_Rewrite (Root_Type (Target_Typ), Operand);\n                Analyze_And_Resolve (Operand);\n+\n+            --  If the expression is a conversion to universal integer of an\n+            --  an expression with an integer type, then we can eliminate the\n+            --  intermediate conversion to universal integer.\n+\n+            elsif Nkind (Operand) = N_Type_Conversion\n+              and then Entity (Subtype_Mark (Operand)) = Universal_Integer\n+              and then Is_Integer_Type (Etype (Expression (Operand)))\n+            then\n+               Rewrite (Operand, Relocate_Node (Expression (Operand)));\n+               Analyze_And_Resolve (Operand);\n             end if;\n          end;\n       end if;"}, {"sha": "0ce1071655e693f9fb690826b33c01710c908310", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a987d785122fb015aac527e927818bdc9975a7b/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=6a987d785122fb015aac527e927818bdc9975a7b", "patch": "@@ -119,16 +119,6 @@ package body Tbuild is\n       if Present (Etype (Expr)) and then Etype (Expr) = Typ then\n          return Relocate_Node (Expr);\n \n-      --  Case where the expression is a conversion to universal integer of\n-      --  an expression with an integer type, and we can thus eliminate the\n-      --  intermediate conversion to universal integer.\n-\n-      elsif Nkind (Expr) = N_Type_Conversion\n-        and then Entity (Subtype_Mark (Expr)) = Universal_Integer\n-        and then Is_Integer_Type (Etype (Expression (Expr)))\n-      then\n-         return Convert_To (Typ, Expression (Expr));\n-\n       else\n          Result :=\n            Make_Type_Conversion (Sloc (Expr),"}]}