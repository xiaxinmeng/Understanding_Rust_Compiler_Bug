{"sha": "b0241ce6e37031e1cbde73d5389ec7f1d063e099", "node_id": "C_kwDOANBUbNoAKGIwMjQxY2U2ZTM3MDMxZTFjYmRlNzNkNTM4OWVjN2YxZDA2M2UwOTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-27T09:51:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-27T09:51:35Z"}, "message": "tree: Fix up tree_code_{length,type}\n\nOn Thu, Jan 26, 2023 at 09:45:35AM -0500, Patrick Palka via Gcc-patches wrote:\n> > +#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n> > +#define END_OF_BASE_TREE_CODES tcc_exceptional,\n> > +\n> > +\n> >  /* Class of tree given its code.  */\n> > -extern const enum tree_code_class tree_code_type[];\n> > +constexpr enum tree_code_class tree_code_type[] = {\n> > +#include \"all-tree.def\"\n> > +};\n> > +\n> > +#undef DEFTREECODE\n> > +#undef END_OF_BASE_TREE_CODES\n> >\n> >  /* Each tree code class has an associated string representation.\n> >     These must correspond to the tree_code_class entries.  */\n> >  extern const char *const tree_code_class_strings[];\n> >\n> >  /* Number of argument-words in each kind of tree-node.  */\n> > -extern const unsigned char tree_code_length[];\n> > +\n> > +#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n> > +#define END_OF_BASE_TREE_CODES 0,\n> > +constexpr unsigned char tree_code_length[] = {\n> > +#include \"all-tree.def\"\n> > +};\n> > +\n> > +#undef DEFTREECODE\n> > +#undef END_OF_BASE_TREE_CODES\n>\n> IIUC defining these globals as non-inline constexpr gives them internal\n> linkage, and so each TU contains its own unique copy of these globals.\n> This bloats cc1plus by a tiny bit and is technically an ODR violation\n> because some inline functions such as tree_class_check also ODR-use\n> these variables and so each defn of tree_class_check will refer to a\n> \"different\" tree_code_class.  Since inline variables are a C++17\n> feature, I guess we could fix this by defining the globals the old way\n> before C++17 and as inline constexpr otherwise?\n\nAnd I'd argue with the tiny bit.\nIn my x86_64-linux cc1plus from today, I see 193 _ZL16tree_code_length vars,\n374 bytes each, and 324 _ZL14tree_code_type vars, 1496 bytes each.\nSo, that means waste of 555016 .rodata bytes, plus being highly non-cache\nfriendly.\n\nThe following patch does that.\n\nTested on x86_64-linux in my -O0 working tree (system gcc 12\ncompiler) where .rodata shrunk with the patch by 928896 bytes, in last\nstage of a bootstrapped tree (built by today's prev-gcc) where .rodata\nshrunk by 561728 bytes (in neither case .text or most other sections\nchanged sizes) and on powerpc64le-linux --disable-bootstrap\n(system gcc 4.8.5) to test also the non-C++17 case plus with\nfully x86_64-linux, i686-linux and powerpc64le-linux bootstraps/regtests.\n\nBTW, wonder if tree_code_type couldn't be an array of unsigned char\nelements rather than enum tree_code_class and we'd then cast it\nto the enum in the macro, that would shrink that array from 1496 bytes\nto 374.  Of course, that sounds like stage1 material.\n\n2023-01-27  Patrick Palka  <ppalka@redhat.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree-core.h (tree_code_type, tree_code_length): For\n\tC++17 and later, add inline keyword, otherwise don't define\n\tthe arrays, but declare extern arrays.\n\t* tree.cc (tree_code_type, tree_code_length): Define these\n\tarrays for C++14 and older.", "tree": {"sha": "a7d0a7ca12f4cee41f4d19fb9d3485ce25328344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d0a7ca12f4cee41f4d19fb9d3485ce25328344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0241ce6e37031e1cbde73d5389ec7f1d063e099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0241ce6e37031e1cbde73d5389ec7f1d063e099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0241ce6e37031e1cbde73d5389ec7f1d063e099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0241ce6e37031e1cbde73d5389ec7f1d063e099/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89483d952aca74c2e053ab9bee18f3d25695e2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89483d952aca74c2e053ab9bee18f3d25695e2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89483d952aca74c2e053ab9bee18f3d25695e2c9"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "acd8deea34ea892684db67bcc9715be7d757d07a", "filename": "gcc/tree-core.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0241ce6e37031e1cbde73d5389ec7f1d063e099/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0241ce6e37031e1cbde73d5389ec7f1d063e099/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=b0241ce6e37031e1cbde73d5389ec7f1d063e099", "patch": "@@ -2284,32 +2284,39 @@ struct floatn_type_info {\n /* Matrix describing the structures contained in a given tree code.  */\n extern bool tree_contains_struct[MAX_TREE_CODES][64];\n \n+/* Class of tree given its code.  */\n+#if __cpp_inline_variables >= 201606L\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n #define END_OF_BASE_TREE_CODES tcc_exceptional,\n \n-\n-/* Class of tree given its code.  */\n-constexpr enum tree_code_class tree_code_type[] = {\n+constexpr inline enum tree_code_class tree_code_type[] = {\n #include \"all-tree.def\"\n };\n \n #undef DEFTREECODE\n #undef END_OF_BASE_TREE_CODES\n+#else\n+extern const enum tree_code_class tree_code_type[];\n+#endif\n \n /* Each tree code class has an associated string representation.\n    These must correspond to the tree_code_class entries.  */\n extern const char *const tree_code_class_strings[];\n \n /* Number of argument-words in each kind of tree-node.  */\n \n+#if __cpp_inline_variables >= 201606L\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n #define END_OF_BASE_TREE_CODES 0,\n-constexpr unsigned char tree_code_length[] = {\n+constexpr inline unsigned char tree_code_length[] = {\n #include \"all-tree.def\"\n };\n \n #undef DEFTREECODE\n #undef END_OF_BASE_TREE_CODES\n+#else\n+extern const unsigned char tree_code_length[];\n+#endif\n \n /* Vector of all alias pairs for global symbols.  */\n extern GTY(()) vec<alias_pair, va_gc> *alias_pairs;"}, {"sha": "952bbece8cdc0c94c0e7a82adfc50e2b385b805b", "filename": "gcc/tree.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0241ce6e37031e1cbde73d5389ec7f1d063e099/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0241ce6e37031e1cbde73d5389ec7f1d063e099/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=b0241ce6e37031e1cbde73d5389ec7f1d063e099", "patch": "@@ -74,7 +74,33 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"ubsan.h\"\n \n+#if __cpp_inline_variables < 201606L\n+/* Tree code classes.  */\n \n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+#define END_OF_BASE_TREE_CODES tcc_exceptional,\n+\n+const enum tree_code_class tree_code_type[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+#define END_OF_BASE_TREE_CODES 0,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n+#endif\n \n /* Names of tree components.\n    Used for printing out the tree and error messages.  */"}]}