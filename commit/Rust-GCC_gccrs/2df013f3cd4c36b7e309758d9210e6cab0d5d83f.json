{"sha": "2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmMDEzZjNjZDRjMzZiN2UzMDk3NThkOTIxMGU2Y2FiMGQ1ZDgzZg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2013-05-18T03:48:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-05-18T03:48:18Z"}, "message": "gcse.c (compute_ld_motion_mems): If a non-simple MEM is found in a REG_EQUAL note, invalidate it.\n\n       * gcse.c (compute_ld_motion_mems): If a non-simple MEM is\n       found in a REG_EQUAL note, invalidate it.\n\nFrom-SVN: r199049", "tree": {"sha": "1ad77ed0fbaad974aac23c81dbb8249ba213341c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad77ed0fbaad974aac23c81dbb8249ba213341c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df013f3cd4c36b7e309758d9210e6cab0d5d83f/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "933f507d1fda886c1471c200f79b02e1c6d3fb2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/933f507d1fda886c1471c200f79b02e1c6d3fb2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/933f507d1fda886c1471c200f79b02e1c6d3fb2c"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "d6eab5f2ef174e9c182545cb6b3e4c28a08f1a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df013f3cd4c36b7e309758d9210e6cab0d5d83f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df013f3cd4c36b7e309758d9210e6cab0d5d83f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "patch": "@@ -1,3 +1,8 @@\n+2013-05-17  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gcse.c (compute_ld_motion_mems): If a non-simple MEM is\n+\tfound in a REG_EQUAL note, invalidate it.\n+\n 2013-05-17   Easwaran Raman  <eraman@google.com>\n \n \t* tree-ssa-reassoc.c (find_insert_point): New function."}, {"sha": "e485985ba72251d1614d5c86f84f947dbc72e24c", "filename": "gcc/gcse.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df013f3cd4c36b7e309758d9210e6cab0d5d83f/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df013f3cd4c36b7e309758d9210e6cab0d5d83f/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=2df013f3cd4c36b7e309758d9210e6cab0d5d83f", "patch": "@@ -3894,6 +3894,8 @@ compute_ld_motion_mems (void)\n \t\t{\n \t\t  rtx src = SET_SRC (PATTERN (insn));\n \t\t  rtx dest = SET_DEST (PATTERN (insn));\n+\t\t  rtx note = find_reg_equal_equiv_note (insn);\n+\t\t  rtx src_eq;\n \n \t\t  /* Check for a simple LOAD...  */\n \t\t  if (MEM_P (src) && simple_mem (src))\n@@ -3910,6 +3912,15 @@ compute_ld_motion_mems (void)\n \t\t      invalidate_any_buried_refs (src);\n \t\t    }\n \n+\t\t  if (note != 0 && REG_NOTE_KIND (note) == REG_EQUAL)\n+\t\t    src_eq = XEXP (note, 0);\n+\t\t  else\n+\t\t    src_eq = NULL_RTX;\n+\n+\t\t  if (src_eq != NULL_RTX\n+\t\t      && !(MEM_P (src_eq) && simple_mem (src_eq)))\n+\t\t    invalidate_any_buried_refs (src_eq);\n+\n \t\t  /* Check for stores. Don't worry about aliased ones, they\n \t\t     will block any movement we might do later. We only care\n \t\t     about this exact pattern since those are the only"}]}