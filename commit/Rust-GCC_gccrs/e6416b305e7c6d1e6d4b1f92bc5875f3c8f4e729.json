{"sha": "e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0MTZiMzA1ZTdjNmQxZTZkNGIxZjkyYmM1ODc1ZjNjOGY0ZTcyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-04-19T14:23:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-04-19T14:23:38Z"}, "message": "cgraph.h (cgraph_optimize_for_size_p): Declare.\n\n\t* cgraph.h (cgraph_optimize_for_size_p): Declare.\n\t* ipa-cp.c (ipcp_insert_stage): Use cgraph_optimize_for_size_p.\n\t* predict.c (cgraph_optimize_for_size_p): Break out from ...\n\t(optimize_function_for_size_p) ... here.\n\nFrom-SVN: r172711", "tree": {"sha": "e7abfb685c06837c0897e65f060f8fea73d402cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7abfb685c06837c0897e65f060f8fea73d402cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/comments", "author": null, "committer": null, "parents": [{"sha": "be7f782278465ae177c717f3b898906201c2471c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7f782278465ae177c717f3b898906201c2471c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7f782278465ae177c717f3b898906201c2471c"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "efad7e54f366213cc19e74766930762e6b6c0666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "patch": "@@ -1,3 +1,10 @@\n+2011-04-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.h (cgraph_optimize_for_size_p): Declare.\n+\t* ipa-cp.c (ipcp_insert_stage): Use cgraph_optimize_for_size_p.\n+\t* predict.c (cgraph_optimize_for_size_p): Break out from ...\n+\t(optimize_function_for_size_p) ... here.\n+\n 2011-04-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48207"}, {"sha": "a9c58798f570c1349d37e23a643f95afaf824006", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "patch": "@@ -656,6 +656,7 @@ bool cgraph_comdat_can_be_unshared_p (struct cgraph_node *);\n \n /* In predict.c  */\n bool cgraph_maybe_hot_edge_p (struct cgraph_edge *e);\n+bool cgraph_optimize_for_size_p (struct cgraph_node *);\n \n /* In varpool.c  */\n extern GTY(()) struct varpool_node *varpool_nodes_queue;"}, {"sha": "0c05711361472cf9027aee790979ebcc704263fc", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "patch": "@@ -1410,7 +1410,7 @@ ipcp_insert_stage (void)\n       if (new_size + growth > max_new_size)\n \tbreak;\n       if (growth\n-\t  && optimize_function_for_size_p (DECL_STRUCT_FUNCTION (node->decl)))\n+\t  && cgraph_optimize_for_size_p (node))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not versioning, cold code would grow\");"}, {"sha": "db9c5c5a8fe761bbcf006d1650869d44b1fdb977", "filename": "gcc/predict.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e6416b305e7c6d1e6d4b1f92bc5875f3c8f4e729", "patch": "@@ -196,7 +196,9 @@ maybe_hot_edge_p (edge e)\n   return maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n }\n \n+\n /* Return true in case BB is probably never executed.  */\n+\n bool\n probably_never_executed_bb_p (const_basic_block bb)\n {\n@@ -209,24 +211,31 @@ probably_never_executed_bb_p (const_basic_block bb)\n   return false;\n }\n \n-/* Return true when current function should always be optimized for size.  */\n+/* Return true if NODE should be optimized for size.  */\n \n bool\n-optimize_function_for_size_p (struct function *fun)\n+cgraph_optimize_for_size_p (struct cgraph_node *node)\n {\n-  struct cgraph_node *node;\n-\n   if (optimize_size)\n     return true;\n-  if (!fun || !fun->decl)\n-    return false;\n-  node = cgraph_get_node (fun->decl);\n   if (node && (node->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED))\n     return true;\n   else\n     return false;\n }\n \n+/* Return true when current function should always be optimized for size.  */\n+\n+bool\n+optimize_function_for_size_p (struct function *fun)\n+{\n+  if (optimize_size)\n+    return true;\n+  if (!fun || !fun->decl)\n+    return false;\n+  return cgraph_optimize_for_size_p (cgraph_get_node (fun->decl));\n+}\n+\n /* Return true when current function should always be optimized for speed.  */\n \n bool"}]}