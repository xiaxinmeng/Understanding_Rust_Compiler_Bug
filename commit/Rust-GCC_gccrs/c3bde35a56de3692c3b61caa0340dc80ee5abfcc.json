{"sha": "c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiZGUzNWE1NmRlMzY5MmMzYjYxY2FhMDM0MGRjODBlZTVhYmZjYw==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2017-02-09T00:34:00Z"}, "committer": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2017-02-09T00:34:00Z"}, "message": "gcc/arc: Make arc_selected_cpu global\n\nCurrently we only make the base_architecture globally available, this\nmeans we can tell if we have selected arc700/archs/etc but it's not\npossible to tell if the user has selected a specific cpu variant, for\nexample nps400.\n\nOne problem this causes is, for example, in arc-c.def, if we want to add\nan __NPS400__ define then we need a flag we can check to determine if\nthis is the right thing to do.\n\nIn this commit the arc_selected_cpu variable (previously local within\narc.c) has been made global.  Two other variables arc_base_cpu and\narc_selected_arch have been deleted, all of this information can be\nfound within (or through) arc_selected_cpu.\n\nAll uses of arc_base_cpu and arc_selected_arch have been updated.  This\ncommit does not introduce any new defines (like __NPS400__), this is\njust a restructuring commit.\n\nThe declaration of arc_selected_cpu has moved into arc-arch.h, in\ncontrast to the declaration of arc_base_cpu which was previously in\narc.h.  This avoids a compilation issue when building libgcc, as the\nstructure and enums declared in arc-arch.h are not included for libgcc\nthen declaring an arc_selected_cpu (a struct type) in arc.h would result\nin an unknown struct error.  We got away with this for arc_base_cpu as\nthat was an enum type.  The declaration of arc_selected_cpu in\narc.h could have been wrapped in a '#ifndef IN_LIBGCC2 ... #endif', but\nit felt neater to simply move the declaration into arc-arch.h.\n\ngcc/ChangeLog:\n\n\t* config/arc/arc-arch.h (arc_arch_t): Move unchanged to earlier in\n\tfile.\n\t(arc_cpu_t): Change base_architecture field, arch, to a arc_arc_t\n\tpointer, arch_info.\n\t(arc_cpu_types): Fill the arch_info field with a pointer into the\n\tarc_arch_types table.\n\t(arc_selected_cpu): Declare.\n\t* config/arc/arc.c (arc_selected_cpu): Make global.\n\t(arc_selected_arch): Delete.\n\t(arc_base_cpu): Delete.\n\t(arc_override_options): Remove references to deleted variables,\n\tupdate access to arch information.\n\t(ARC_OPT): Update access to arch information.\n\t(ARC_OPTX): Likewise.\n\t* config/arc/arc.h (arc_base_cpu): Remove declaration.\n\t(TARGET_ARC600): Update access to arch information.\n\t(TARGET_ARC601): Likewise.\n\t(TARGET_ARC700): Likewise.\n\t(TARGET_EM): Likewise.\n\t(TARGET_HS): Likewise.\n\t* config/arc/driver-arc.c (arc_cpu_to_as): Update access to arch\n\tinformation.\n\nFrom-SVN: r245293", "tree": {"sha": "f4c0cbf7ef5494a5b18c16e139c14879568096db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4c0cbf7ef5494a5b18c16e139c14879568096db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5896a41da8cb6cd887d9af86d81047e38c3df4f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5896a41da8cb6cd887d9af86d81047e38c3df4f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5896a41da8cb6cd887d9af86d81047e38c3df4f1"}], "stats": {"total": 127, "additions": 74, "deletions": 53}, "files": [{"sha": "4d8e92932557745a8079ec226987f7d820b75fb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "patch": "@@ -1,3 +1,28 @@\n+2017-02-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc-arch.h (arc_arch_t): Move unchanged to earlier in\n+\tfile.\n+\t(arc_cpu_t): Change base_architecture field, arch, to a arc_arc_t\n+\tpointer, arch_info.\n+\t(arc_cpu_types): Fill the arch_info field with a pointer into the\n+\tarc_arch_types table.\n+\t(arc_selected_cpu): Declare.\n+\t* config/arc/arc.c (arc_selected_cpu): Make global.\n+\t(arc_selected_arch): Delete.\n+\t(arc_base_cpu): Delete.\n+\t(arc_override_options): Remove references to deleted variables,\n+\tupdate access to arch information.\n+\t(ARC_OPT): Update access to arch information.\n+\t(ARC_OPTX): Likewise.\n+\t* config/arc/arc.h (arc_base_cpu): Remove declaration.\n+\t(TARGET_ARC600): Update access to arch information.\n+\t(TARGET_ARC601): Likewise.\n+\t(TARGET_ARC700): Likewise.\n+\t(TARGET_EM): Likewise.\n+\t(TARGET_HS): Likewise.\n+\t* config/arc/driver-arc.c (arc_cpu_to_as): Update access to arch\n+\tinformation.\n+\n 2017-02-08  Pat Haugen  <pthaugen@us.ibm.com>\n \n \tPR target/78604"}, {"sha": "2344a4b14a29d1cc1d645f46b48822067314cf4d", "filename": "gcc/config/arc/arc-arch.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "patch": "@@ -47,6 +47,23 @@ enum base_architecture\n     BASE_ARCH_END\n   };\n \n+/* Architecture specific propoerties.  */\n+\n+typedef struct\n+{\n+  /* Architecture name.  */\n+  const char *const name;\n+\n+  /* Architecture class.  */\n+  enum base_architecture arch_id;\n+\n+  /* All allowed flags for this architecture.  */\n+  const unsigned long long flags;\n+\n+  /* Default flags for this architecture.  It is a subset of\n+     FLAGS.  */\n+  const unsigned long long dflags;\n+} arc_arch_t;\n \n /* Tune variants.  Needs to match the attr_tune enum.  */\n \n@@ -66,7 +83,7 @@ typedef struct\n   const char *const name;\n \n   /* Architecture class.  */\n-  enum base_architecture arch;\n+  const arc_arch_t *arch_info;\n \n   /* Specific processor type.  */\n   enum processor_type processor;\n@@ -76,28 +93,8 @@ typedef struct\n \n   /* Tune value.  */\n   enum arc_tune_attr tune;\n-} arc_cpu_t;\n-\n-\n-/* Architecture specific propoerties.  */\n-\n-typedef struct\n-{\n-  /* Architecture name.  */\n-  const char *const name;\n-\n-  /* Architecture class.  */\n-  enum base_architecture arch;\n-\n-  /* All allowed flags for this architecture.  */\n-  const unsigned long long flags;\n-\n-  /* Default flags for this architecture.  It is a subset of\n-     FLAGS.  */\n-  const unsigned long long dflags;\n-} arc_arch_t;\n-\n \n+} arc_cpu_t;\n \n const arc_arch_t arc_arch_types[] =\n   {\n@@ -111,13 +108,16 @@ const arc_arch_t arc_arch_types[] =\n \n const arc_cpu_t arc_cpu_types[] =\n   {\n-    {\"none\", BASE_ARCH_NONE, PROCESSOR_NONE, 0, ARC_TUNE_NONE},\n+    {\"none\", NULL, PROCESSOR_NONE, 0, ARC_TUNE_NONE},\n #define ARC_CPU(NAME, ARCH, FLAGS, TUNE)\t\\\n-    {#NAME, BASE_ARCH_##ARCH, PROCESSOR_##NAME, FLAGS, ARC_TUNE_##TUNE},\n+    {#NAME, &arc_arch_types [BASE_ARCH_##ARCH], PROCESSOR_##NAME, FLAGS, ARC_TUNE_##TUNE },\n #include \"arc-cpus.def\"\n #undef ARC_CPU\n-    {NULL, BASE_ARCH_END, PROCESSOR_NONE, 0, ARC_TUNE_NONE}\n+    {NULL, NULL, PROCESSOR_NONE, 0, ARC_TUNE_NONE}\n   };\n \n+/* Currently selected cpu type.  */\n+extern const arc_cpu_t *arc_selected_cpu;\n+\n #endif\n #endif /* GCC_ARC_ARCH_H */"}, {"sha": "8a838f93c0b3a301ec710a78eb6b87528d0186a9", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "patch": "@@ -243,11 +243,8 @@ static bool arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\tenum by_pieces_operation op,\n \t\t\t\t\t\tbool);\n \n-static const arc_cpu_t *arc_selected_cpu;\n-static const arc_arch_t *arc_selected_arch;\n-\n-/* Global var which sets the current compilation architecture.  */\n-enum base_architecture arc_base_cpu;\n+/* Globally visible information about currently selected cpu.  */\n+const arc_cpu_t *arc_selected_cpu;\n \n /* Implements target hook vector_mode_supported_p.  */\n \n@@ -787,11 +784,9 @@ arc_override_options (void)\n \n   /* Set the default cpu options.  */\n   arc_selected_cpu = &arc_cpu_types[(int) arc_cpu];\n-  arc_selected_arch = &arc_arch_types[(int) arc_selected_cpu->arch];\n-  arc_base_cpu = arc_selected_arch->arch;\n \n   /* Set the architectures.  */\n-  switch (arc_selected_arch->arch)\n+  switch (arc_selected_cpu->arch_info->arch_id)\n     {\n     case BASE_ARCH_em:\n       arc_cpu_string = \"EM\";\n@@ -822,16 +817,16 @@ arc_override_options (void)\n     if ((arc_selected_cpu->flags & CODE)\t\t\\\n \t&& ((target_flags_explicit & MASK) == 0))\t\\\n       target_flags |= MASK;\t\t\t\t\\\n-    if (arc_selected_arch->dflags & CODE)\t\t\\\n+    if (arc_selected_cpu->arch_info->dflags & CODE)\t\\\n       target_flags |= MASK;\t\t\t\t\\\n   } while (0);\n-#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\\\n-  do {\t\t\t\t\t\t\\\n-    if ((arc_selected_cpu->flags & CODE)\t\\\n-\t&& (VAR == DEFAULT_##VAR))\t\t\\\n-      VAR = VAL;\t\t\t\t\\\n-    if (arc_selected_arch->dflags & CODE)\t\\\n-      VAR = VAL;\t\t\t\t\\\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    if ((arc_selected_cpu->flags & CODE)\t\t\\\n+\t&& (VAR == DEFAULT_##VAR))\t\t\t\\\n+      VAR = VAL;\t\t\t\t\t\\\n+    if (arc_selected_cpu->arch_info->dflags & CODE)\t\\\n+      VAR = VAL;\t\t\t\t\t\\\n   } while (0);\n \n #include \"arc-options.def\"\n@@ -844,18 +839,18 @@ arc_override_options (void)\n #define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     if ((VAR == VAL)\t\t\t\t\t\t\\\n-\t&& (!(arc_selected_arch->flags & CODE)))\t\t\\\n+\t&& (!(arc_selected_cpu->arch_info->flags & CODE)))\t\\\n       {\t\t\t\t\t\t\t\t\\\n \terror (\"%s is not available for %s architecture\",\t\\\n-\t       DOC, arc_selected_arch->name);\t\t\t\\\n+\t       DOC, arc_selected_cpu->arch_info->name);\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   } while (0);\n #define ARC_OPT(NAME, CODE, MASK, DOC)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     if ((target_flags & MASK)\t\t\t\t\t\\\n-\t&& (!(arc_selected_arch->flags & CODE)))\t\t\\\n+\t&& (!(arc_selected_cpu->arch_info->flags & CODE)))\t\\\n       error (\"%s is not available for %s architecture\",\t\t\\\n-\t     DOC, arc_selected_arch->name);\t\t\t\\\n+\t     DOC, arc_selected_cpu->arch_info->name);\t\t\\\n   } while (0);\n \n #include \"arc-options.def\""}, {"sha": "64a3724b6ccf0ed32d1946c64b69d8bf653dc066", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "patch": "@@ -215,15 +215,16 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n    use conditional execution?  */\n #define TARGET_AT_DBR_CONDEXEC  (!TARGET_ARC700 && !TARGET_V2)\n \n-extern enum base_architecture arc_base_cpu;\n-\n-#define TARGET_ARC600 ((arc_base_cpu == BASE_ARCH_6xx)\t\\\n+#define TARGET_ARC600 ((arc_selected_cpu->arch_info->arch_id\t\\\n+\t\t\t== BASE_ARCH_6xx)\t\t\t\\\n \t\t       && (TARGET_BARREL_SHIFTER))\n-#define TARGET_ARC601 ((arc_base_cpu == BASE_ARCH_6xx)\t\\\n+#define TARGET_ARC601 ((arc_selected_cpu->arch_info->arch_id\t\\\n+\t\t\t== BASE_ARCH_6xx)\t\t\t\\\n \t\t       && (!TARGET_BARREL_SHIFTER))\n-#define TARGET_ARC700 (arc_base_cpu == BASE_ARCH_700)\n-#define TARGET_EM (arc_base_cpu == BASE_ARCH_em)\n-#define TARGET_HS (arc_base_cpu == BASE_ARCH_hs)\n+#define TARGET_ARC700 (arc_selected_cpu->arch_info->arch_id\t\\\n+\t\t       == BASE_ARCH_700)\n+#define TARGET_EM (arc_selected_cpu->arch_info->arch_id == BASE_ARCH_em)\n+#define TARGET_HS (arc_selected_cpu->arch_info->arch_id == BASE_ARCH_hs)\n #define TARGET_V2 (TARGET_EM || TARGET_HS)\n \n #ifdef ARC_MULTILIB_CPU_DEFAULT"}, {"sha": "0e13878ff732a0b4e825ceac4fa186b0bb73bdb4", "filename": "gcc/config/arc/driver-arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Fdriver-arc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bde35a56de3692c3b61caa0340dc80ee5abfcc/gcc%2Fconfig%2Farc%2Fdriver-arc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fdriver-arc.c?ref=c3bde35a56de3692c3b61caa0340dc80ee5abfcc", "patch": "@@ -47,7 +47,7 @@ arc_cpu_to_as (int argc, const char **argv)\n \t}\n     }\n \n-  switch (arc_selected_cpu->arch)\n+  switch (arc_selected_cpu->arch_info->arch_id)\n     {\n     case BASE_ARCH_em:\n       if (arc_selected_cpu->flags & FL_CD)"}]}