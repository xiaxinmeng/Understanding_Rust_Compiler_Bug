{"sha": "eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4ZGE4Njg0Y2ZkZjAxOWYwYjBlZGZkODM0YTQ3OWFjMzY2ZjFkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-12-29T11:35:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-12-29T11:35:34Z"}, "message": "alpha.c (reg_or_6bit_operand): Remove CONSTANT_P_RTX handling.\n\n        * alpha.c (reg_or_6bit_operand): Remove CONSTANT_P_RTX handling.\n        (reg_or_8bit_operand, cint8_operand, add_operand): Likewise.\n        (sext_add_operand, and_operand, or_operand): Likewise.\n        (reg_or_cint_operand, some_operand, input_operand): Likewise.\n        * alpha.h (PREDICATE_CODES): Likewise.\n\nFrom-SVN: r24438", "tree": {"sha": "bf7110f4132cc69544d1c321cf6c4940d6cbf9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7110f4132cc69544d1c321cf6c4940d6cbf9aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8da8684cfdf019f0b0edfd834a479ac366f1d4/comments", "author": null, "committer": null, "parents": [{"sha": "8f8e7de31b408c5eab2d07cf753bd35a84875c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8e7de31b408c5eab2d07cf753bd35a84875c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8e7de31b408c5eab2d07cf753bd35a84875c09"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "152a1c0fea0827822b73717de459bc9c346804f8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8da8684cfdf019f0b0edfd834a479ac366f1d4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8da8684cfdf019f0b0edfd834a479ac366f1d4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "patch": "@@ -348,7 +348,6 @@ reg_or_6bit_operand (op, mode)\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 64)\n-\t  || GET_CODE (op) == CONSTANT_P_RTX\n \t  || register_operand (op, mode));\n }\n \n@@ -362,7 +361,6 @@ reg_or_8bit_operand (op, mode)\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100)\n-\t  || GET_CODE (op) == CONSTANT_P_RTX\n \t  || register_operand (op, mode));\n }\n \n@@ -374,8 +372,7 @@ cint8_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT\n-\t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100)\n-\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+\t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100));\n }\n \n /* Return 1 if the operand is a valid second operand to an add insn.  */\n@@ -389,8 +386,6 @@ add_operand (op, mode)\n     /* Constraints I, J, O and P are covered by K.  */\n     return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\n \t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n-  else if (GET_CODE (op) == CONSTANT_P_RTX)\n-    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -406,8 +401,6 @@ sext_add_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n \t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O'));\n-  else if (GET_CODE (op) == CONSTANT_P_RTX)\n-    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -438,8 +431,6 @@ and_operand (op, mode)\n     return ((unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n \t    || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100\n \t    || zap_mask (INTVAL (op)));\n-  else if (GET_CODE (op) == CONSTANT_P_RTX)\n-    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -454,8 +445,6 @@ or_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return ((unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n \t    || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100);\n-  else if (GET_CODE (op) == CONSTANT_P_RTX)\n-    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -555,7 +544,6 @@ reg_or_cint_operand (op, mode)\n     enum machine_mode mode;\n {\n      return (GET_CODE (op) == CONST_INT\n-\t     || GET_CODE (op) == CONSTANT_P_RTX\n \t     || register_operand (op, mode));\n }\n \n@@ -573,7 +561,7 @@ some_operand (op, mode)\n   switch (GET_CODE (op))\n     {\n     case REG:  case MEM:  case CONST_DOUBLE:  case CONST_INT:  case LABEL_REF:\n-    case SYMBOL_REF:  case CONST:  case CONSTANT_P_RTX:\n+    case SYMBOL_REF:  case CONST:\n       return 1;\n \n     case SUBREG:\n@@ -622,7 +610,6 @@ input_operand (op, mode)\n       return GET_MODE_CLASS (mode) == MODE_FLOAT && op == CONST0_RTX (mode);\n \n     case CONST_INT:\n-    case CONSTANT_P_RTX:\n       return mode == QImode || mode == HImode || add_operand (op, mode);\n \n     default:"}, {"sha": "6ce8d414ca8f0162bfafcad1ac44187d2c510f78", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8da8684cfdf019f0b0edfd834a479ac366f1d4/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8da8684cfdf019f0b0edfd834a479ac366f1d4/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=eb8da8684cfdf019f0b0edfd834a479ac366f1d4", "patch": "@@ -2265,15 +2265,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define PREDICATE_CODES \t\t\t\t\t\t\\\n   {\"reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n-  {\"reg_or_6bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-  {\"reg_or_8bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-  {\"cint8_operand\", {CONST_INT, CONSTANT_P_RTX}},                       \\\n-  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-  {\"add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n-  {\"sext_add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"reg_or_6bit_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"reg_or_8bit_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"cint8_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n+  {\"sext_add_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"const48_operand\", {CONST_INT}},\t\t\t\t\t\\\n-  {\"and_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n-  {\"or_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n+  {\"and_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n+  {\"or_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n   {\"mode_mask_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"mul8_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"mode_width_operand\", {CONST_INT}},\t\t\t\t\t\\\n@@ -2286,9 +2286,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\t\\\n   {\"call_operand\", {REG, SYMBOL_REF}},\t\t\t\t\t\\\n   {\"input_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\\n-\t\t     SYMBOL_REF, CONST, LABEL_REF, CONSTANT_P_RTX}},\t\\\n+\t\t     SYMBOL_REF, CONST, LABEL_REF}},\t\t\t\\\n   {\"some_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\\n-\t\t    SYMBOL_REF, CONST, LABEL_REF, CONSTANT_P_RTX}},\t\\\n+\t\t    SYMBOL_REF, CONST, LABEL_REF}},\t\t\t\\\n   {\"aligned_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"unaligned_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\t\t\\"}]}