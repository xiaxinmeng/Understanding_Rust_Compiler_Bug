{"sha": "51f4ec666943c03673484c21f621e1034550e4df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFmNGVjNjY2OTQzYzAzNjczNDg0YzIxZjYyMWUxMDM0NTUwZTRkZg==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-08-17T08:25:20Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-08-17T08:25:20Z"}, "message": "re PR c/40563 (-Wc++-compat does not warn about uninitialized const field in struct)\n\n/gcc\n2010-08-17  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/40563\n\t* c-decl.c (diagnose_uninitialized_cst_member): New function.\n\t(finish_decl): Use it to issue a -Wc++-compat warning about\n\tuninitialized const field in struct or union.\n\t\n\t(finish_struct): Use strip_array_types.\n\t\n/gcc/testsuite\n2010-08-17  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\tPR c/40563\n\t* gcc.dg/Wcxx-compat-20.c: New test.\n\nFrom-SVN: r163296", "tree": {"sha": "b2173160d60dbebd4e1f80ea7c24c0016432cdc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2173160d60dbebd4e1f80ea7c24c0016432cdc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51f4ec666943c03673484c21f621e1034550e4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f4ec666943c03673484c21f621e1034550e4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f4ec666943c03673484c21f621e1034550e4df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f4ec666943c03673484c21f621e1034550e4df/comments", "author": null, "committer": null, "parents": [{"sha": "571d54deb6edc944f1e9f361302b2fa99b568d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571d54deb6edc944f1e9f361302b2fa99b568d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571d54deb6edc944f1e9f361302b2fa99b568d64"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "e6f43ed6d788589febc6457ae16720a5a58a3d5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f4ec666943c03673484c21f621e1034550e4df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f4ec666943c03673484c21f621e1034550e4df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51f4ec666943c03673484c21f621e1034550e4df", "patch": "@@ -1,3 +1,12 @@\n+2010-08-17  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/40563\n+\t* c-decl.c (diagnose_uninitialized_cst_member): New function.\n+\t(finish_decl): Use it to issue a -Wc++-compat warning about\n+\tuninitialized const field in struct or union.\n+\t\n+\t(finish_struct): Use strip_array_types.\n+\n 2010-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* function.c (block_fragments_nreverse, blocks_nreverse_all): New"}, {"sha": "5606df82ec5f32cfbc8321d2196f046c251f7639", "filename": "gcc/c-decl.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=51f4ec666943c03673484c21f621e1034550e4df", "patch": "@@ -4103,6 +4103,35 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   return tem;\n }\n \n+/* Subroutine of finish_decl. TYPE is the type of an uninitialized object\n+   DECL or the non-array element type if DECL is an uninitialized array.\n+   If that type has a const member, diagnose this. */\n+\n+static void\n+diagnose_uninitialized_cst_member (tree decl, tree type)\n+{\n+  tree field;\n+  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n+    {\n+      tree field_type;\n+      if (TREE_CODE (field) != FIELD_DECL)\n+\tcontinue;\n+      field_type = strip_array_types (TREE_TYPE (field));\n+\n+      if (TYPE_QUALS (field_type) & TYPE_QUAL_CONST)\n+      \t{\n+\t  warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc___compat,\n+\t  \t      \"uninitialized const member in %qT is invalid in C++\",\n+\t\t      strip_array_types (TREE_TYPE (decl)));\n+\t  inform (DECL_SOURCE_LOCATION (field), \"%qD should be initialized\", field);\n+\t}\n+\n+      if (TREE_CODE (field_type) == RECORD_TYPE\n+\t  || TREE_CODE (field_type) == UNION_TYPE)\n+\tdiagnose_uninitialized_cst_member (decl, field_type);\n+    }\n+}\n+\n /* Finish processing of a declaration;\n    install its initial value.\n    If ORIGTYPE is not NULL_TREE, it is the original type of INIT.\n@@ -4420,11 +4449,18 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \n   if (warn_cxx_compat\n       && TREE_CODE (decl) == VAR_DECL\n-      && TREE_READONLY (decl)\n       && !DECL_EXTERNAL (decl)\n       && DECL_INITIAL (decl) == NULL_TREE)\n-    warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc___compat,\n-\t\t\"uninitialized const %qD is invalid in C++\", decl);\n+    {\n+      type = strip_array_types (type);\n+      if (TREE_READONLY (decl))\n+\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc___compat,\n+\t\t    \"uninitialized const %qD is invalid in C++\", decl);\n+      else if ((TREE_CODE (type) == RECORD_TYPE\n+\t      \t|| TREE_CODE (type) == UNION_TYPE)\n+\t       && C_TYPE_FIELDS_READONLY (type))\n+\tdiagnose_uninitialized_cst_member (decl, type);\n+    }\n }\n \n /* Given a parsed parameter declaration, decode it into a PARM_DECL.  */\n@@ -6872,9 +6908,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n       else\n \t{\n \t  /* A field that is pseudo-const makes the structure likewise.  */\n-\t  tree t1 = TREE_TYPE (x);\n-\t  while (TREE_CODE (t1) == ARRAY_TYPE)\n-\t    t1 = TREE_TYPE (t1);\n+\t  tree t1 = strip_array_types (TREE_TYPE (x));\n \t  if ((TREE_CODE (t1) == RECORD_TYPE || TREE_CODE (t1) == UNION_TYPE)\n \t      && C_TYPE_FIELDS_READONLY (t1))\n \t    C_TYPE_FIELDS_READONLY (t) = 1;"}, {"sha": "b312e3b5a5b55a5a57c79db66203dc1238d5ffec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51f4ec666943c03673484c21f621e1034550e4df", "patch": "@@ -1,3 +1,8 @@\n+2010-08-17  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/40563\n+\t* gcc.dg/Wcxx-compat-20.c: New test.\n+\n 2010-08-17  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/38936"}, {"sha": "af774acc81833ea4fa8be234b18974c8bef87baf", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-20.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51f4ec666943c03673484c21f621e1034550e4df/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-20.c?ref=51f4ec666943c03673484c21f621e1034550e4df", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+typedef struct s { const int i; } s; /* { dg-message \"should be initialized\" } */\n+union u {const int a; double b;}; /* { dg-message \"should be initialized\" } */\n+struct ts { int a; s v;};\n+struct ta { int a; s v[2];};\n+\n+void f ()\n+{\n+  s v1; /* { dg-warning \"uninitialized const member in\" } */\n+  s va[2]; /* { dg-warning \"uninitialized const member in\" } */\n+  union u v2; /* { dg-warning \"uninitialized const member in\" } */ \n+  struct ts v3; /* { dg-warning \"uninitialized const member in\" } */\n+  struct ta ta[2]; /* { dg-warning \"uninitialized const member in\" } */\n+} "}]}