{"sha": "2608859a394d28ddf6dc0f31954e252c7a562318", "node_id": "C_kwDOANBUbNoAKDI2MDg4NTlhMzk0ZDI4ZGRmNmRjMGYzMTk1NGUyNTJjN2E1NjIzMTg", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-16T03:30:19Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-14T12:35:57Z"}, "message": "Unify AST::IfLetExprConseqIf{,Let} into AST::IfLetExprConseqElse\n\nThis simplifies the AST's representation of if-let-statements\nto match the HIR.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-expr.h\n\t(class IfLetExprConseqElse): Make else_block ExprWithBlock.\n\t(class IfLetExprConseqIf): Remove.\n\t(class IfLetExprConseqIfLet): Remove.\n\t* ast/rust-ast-full-decls.h\n\t(class IfLetExprConseqIf): Remove.\n\t(class IfLetExprConseqIfLet): Remove.\n\t* ast/rust-ast.cc\n\t(IfLetExprConseqElse::as_string): Adjust output.\n\t(IfLetExprConseqIf::as_string): Remove.\n\t(IfLetExprConseqIfLet::as_string): Remove.\n\t(IfLetExprConseqIf::accept_vis): Remove.\n\t(IfLetExprConseqIfLet::accept_vis): Remove.\n\t* ast/rust-ast-visitor.h\n\t(ASTVisitor::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* ast/rust-ast-dump.cc\n\t(Dump::visit): Likewise.\n\t* ast/rust-ast-dump.h:\n\t(Dump::visit): Likewise.\n\t* ast/rust-ast-tokenstream.cc\n\t(TokenStream::visit): Likewise.\n\t* ast/rust-ast-tokenstream.h\n\t(TokenStream::visit): Likewise.\n\t* util/rust-attributes.cc\n\t(AttributeChecker::visit): Likewise.\n\t* util/rust-attributes.h:\n\t(AttributeChecker::visit): Likewise.\n\t* resolve/rust-early-name-resolver.cc\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-early-name-resolver.h\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.h\n\t(ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.cc\n\t(ResolverBase::visit): Likewise.\n\t* checks/errors/rust-feature-gate.h\n\t(FeatureGate::visit): Likewise.\n\t* expand/rust-cfg-strip.cc\n\t(CfgStrip::visit): Likewise.\n\t* expand/rust-cfg-strip.h:\n\t(CfgStrip::visit): Likewise.\n\t* expand/rust-expand-visitor.cc\n\t(ExpandVisitor::visit): Likewise.\n\t* expand/rust-expand-visitor.h\n\t(ExpandVisitor::visit): Likewise.\n\t* hir/rust-ast-lower-base.cc\n\t(ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-base.h:\n\t(ASTLoweringBase::visit): Likewise.\n\t* parse/rust-parse-impl.h\n\t(Parser::parse_if_let_expr): Replace IfLetExprConseqIf{,Let} with IfLetExprConseqElse.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "281579c4f987defd300b313df0e557839ded225f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/281579c4f987defd300b313df0e557839ded225f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2608859a394d28ddf6dc0f31954e252c7a562318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2608859a394d28ddf6dc0f31954e252c7a562318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2608859a394d28ddf6dc0f31954e252c7a562318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2608859a394d28ddf6dc0f31954e252c7a562318/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac79c65365bdbcee00916e3785fd6bb8aeee0ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac79c65365bdbcee00916e3785fd6bb8aeee0ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac79c65365bdbcee00916e3785fd6bb8aeee0ba2"}], "stats": {"total": 370, "additions": 14, "deletions": 356}, "files": [{"sha": "34cc4b0106549c67ab625f0aec12ca2013f1e660", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -944,14 +944,6 @@ void\n Dump::visit (IfLetExprConseqElse &)\n {}\n \n-void\n-Dump::visit (IfLetExprConseqIf &)\n-{}\n-\n-void\n-Dump::visit (IfLetExprConseqIfLet &)\n-{}\n-\n void\n Dump::visit (MatchExpr &)\n {}"}, {"sha": "1bfa80822788078b28f7432bb38f36c06f21ab93", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -186,8 +186,6 @@ class Dump : public ASTVisitor\n   void visit (IfExprConseqElse &expr);\n   void visit (IfLetExpr &expr);\n   void visit (IfLetExprConseqElse &expr);\n-  void visit (IfLetExprConseqIf &expr);\n-  void visit (IfLetExprConseqIfLet &expr);\n   void visit (MatchExpr &expr);\n   void visit (AwaitExpr &expr);\n   void visit (AsyncBlockExpr &expr);"}, {"sha": "23da27eb214103b7eebf6b14936966eb78c237e8", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -137,8 +137,6 @@ class IfExpr;\n class IfExprConseqElse;\n class IfLetExpr;\n class IfLetExprConseqElse;\n-class IfLetExprConseqIf;\n-class IfLetExprConseqIfLet;\n struct MatchArm;\n // class MatchCase;\n // class MatchCaseBlockExpr;"}, {"sha": "78b53852658f0f3556109f313424c0011463b134", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -1448,24 +1448,6 @@ TokenStream::visit (IfLetExprConseqElse &expr)\n   visit (expr.get_else_block ());\n }\n \n-void\n-TokenStream::visit (IfLetExprConseqIf &expr)\n-{\n-  visit (static_cast<IfLetExpr &> (expr));\n-  indentation ();\n-  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n-  visit (expr.get_conseq_if_expr ());\n-}\n-\n-void\n-TokenStream::visit (IfLetExprConseqIfLet &expr)\n-{\n-  visit (static_cast<IfLetExpr &> (expr));\n-  indentation ();\n-  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n-  visit (expr.get_conseq_if_let_expr ());\n-}\n-\n void\n TokenStream::visit (MatchArm &arm)\n {"}, {"sha": "24be831009a94326ab33a9945dad0ab31d04bcbf", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -200,8 +200,6 @@ class TokenStream : public ASTVisitor\n   void visit (IfExprConseqElse &expr);\n   void visit (IfLetExpr &expr);\n   void visit (IfLetExprConseqElse &expr);\n-  void visit (IfLetExprConseqIf &expr);\n-  void visit (IfLetExprConseqIfLet &expr);\n   void visit (MatchArm &arm);\n   void visit (MatchCase &arm);\n   void visit (MatchExpr &expr);"}, {"sha": "6cdb0278aed311122ef959b4485b34748d7975a2", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -117,8 +117,6 @@ class ASTVisitor\n   virtual void visit (IfExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n-  virtual void visit (IfLetExprConseqIf &expr) = 0;\n-  virtual void visit (IfLetExprConseqIfLet &expr) = 0;\n   // virtual void visit(MatchCase& match_case) = 0;\n   // virtual void visit (MatchCaseBlockExpr &match_case) = 0;\n   // virtual void visit (MatchCaseExpr &match_case) = 0;"}, {"sha": "754d5f302999fd5464b53676807f06fbf6a78707", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -1673,27 +1673,7 @@ IfLetExprConseqElse::as_string () const\n {\n   std::string str = IfLetExpr::as_string ();\n \n-  str += \"\\n Else block expr: \" + else_block->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfLetExprConseqIf::as_string () const\n-{\n-  std::string str = IfLetExpr::as_string ();\n-\n-  str += \"\\n Else if expr: \\n  \" + if_expr->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfLetExprConseqIfLet::as_string () const\n-{\n-  std::string str = IfLetExpr::as_string ();\n-\n-  str += \"\\n Else if let expr: \\n  \" + if_let_expr->as_string ();\n+  str += \"\\n Else expr: \" + else_block->as_string ();\n \n   return str;\n }\n@@ -4567,18 +4547,6 @@ IfLetExprConseqElse::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfLetExprConseqIf::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfLetExprConseqIfLet::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n MatchExpr::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "abe6e03ce45b23759e98b2502067eef783809b19", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 6, "deletions": 124, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -3945,16 +3945,16 @@ class IfLetExpr : public ExprWithBlock\n  * end */\n class IfLetExprConseqElse : public IfLetExpr\n {\n-  std::unique_ptr<BlockExpr> else_block;\n+  std::unique_ptr<ExprWithBlock> else_block;\n \n public:\n   std::string as_string () const override;\n \n   IfLetExprConseqElse (\n     std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n     std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<BlockExpr> else_block, std::vector<Attribute> outer_attrs,\n-    Location locus)\n+    std::unique_ptr<ExprWithBlock> else_block,\n+    std::vector<Attribute> outer_attrs, Location locus)\n     : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n \t\t std::move (if_block), std::move (outer_attrs), locus),\n       else_block (std::move (else_block))\n@@ -3963,7 +3963,7 @@ class IfLetExprConseqElse : public IfLetExpr\n \n   // copy constructor with clone\n   IfLetExprConseqElse (IfLetExprConseqElse const &other)\n-    : IfLetExpr (other), else_block (other.else_block->clone_block_expr ())\n+    : IfLetExpr (other), else_block (other.else_block->clone_expr_with_block ())\n   {}\n \n   // overload assignment operator to clone\n@@ -3973,7 +3973,7 @@ class IfLetExprConseqElse : public IfLetExpr\n     // match_arm_patterns = other.match_arm_patterns;\n     // value = other.value->clone_expr();\n     // if_block = other.if_block->clone_block_expr();\n-    else_block = other.else_block->clone_block_expr ();\n+    else_block = other.else_block->clone_expr_with_block ();\n     // outer_attrs = other.outer_attrs;\n \n     return *this;\n@@ -3986,7 +3986,7 @@ class IfLetExprConseqElse : public IfLetExpr\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_else_block ()\n+  std::unique_ptr<ExprWithBlock> &get_else_block ()\n   {\n     rust_assert (else_block != nullptr);\n     return else_block;\n@@ -4001,124 +4001,6 @@ class IfLetExprConseqElse : public IfLetExpr\n   }\n };\n \n-/* AST node representing \"if let\" expression with an \"else if\" expression at the\n- * end */\n-class IfLetExprConseqIf : public IfLetExpr\n-{\n-  std::unique_ptr<IfExpr> if_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfLetExprConseqIf (std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-\t\t     std::unique_ptr<Expr> value,\n-\t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfExpr> if_expr,\n-\t\t     std::vector<Attribute> outer_attrs, Location locus)\n-    : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n-\t\t std::move (if_block), std::move (outer_attrs), locus),\n-      if_expr (std::move (if_expr))\n-  {}\n-  // again, outer attributes not allowed\n-\n-  // copy constructor with clone\n-  IfLetExprConseqIf (IfLetExprConseqIf const &other)\n-    : IfLetExpr (other), if_expr (other.if_expr->clone_if_expr ())\n-  {}\n-\n-  // overload assignment operator to clone\n-  IfLetExprConseqIf &operator= (IfLetExprConseqIf const &other)\n-  {\n-    IfLetExpr::operator= (other);\n-    // match_arm_patterns = other.match_arm_patterns;\n-    // value = other.value->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_expr = other.if_expr->clone_if_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfLetExprConseqIf (IfLetExprConseqIf &&other) = default;\n-  IfLetExprConseqIf &operator= (IfLetExprConseqIf &&other) = default;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<IfExpr> &get_conseq_if_expr ()\n-  {\n-    rust_assert (if_expr != nullptr);\n-    return if_expr;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIf *clone_if_let_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIf (*this);\n-  }\n-};\n-\n-/* AST node representing \"if let\" expression with an \"else if let\" expression at\n- * the end */\n-class IfLetExprConseqIfLet : public IfLetExpr\n-{\n-  std::unique_ptr<IfLetExpr> if_let_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfLetExprConseqIfLet (\n-    std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-    std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<IfLetExpr> if_let_expr, std::vector<Attribute> outer_attrs,\n-    Location locus)\n-    : IfLetExpr (std::move (match_arm_patterns), std::move (value),\n-\t\t std::move (if_block), std::move (outer_attrs), locus),\n-      if_let_expr (std::move (if_let_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // copy constructor with clone\n-  IfLetExprConseqIfLet (IfLetExprConseqIfLet const &other)\n-    : IfLetExpr (other), if_let_expr (other.if_let_expr->clone_if_let_expr ())\n-  {}\n-\n-  // overload assignment operator to clone\n-  IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet const &other)\n-  {\n-    IfLetExpr::operator= (other);\n-    // match_arm_patterns = other.match_arm_patterns;\n-    // value = other.value->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_let_expr = other.if_let_expr->clone_if_let_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfLetExprConseqIfLet (IfLetExprConseqIfLet &&other) = default;\n-  IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet &&other) = default;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<IfLetExpr> &get_conseq_if_let_expr ()\n-  {\n-    rust_assert (if_let_expr != nullptr);\n-    return if_let_expr;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIfLet *clone_if_let_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIfLet (*this);\n-  }\n-};\n-\n // Match arm expression\n struct MatchArm\n {"}, {"sha": "e17e6ea06cd54a4a10bb7acd786c48678309106e", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -97,8 +97,6 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::IfExprConseqElse &expr) override {}\n   void visit (AST::IfLetExpr &expr) override {}\n   void visit (AST::IfLetExprConseqElse &expr) override {}\n-  void visit (AST::IfLetExprConseqIf &expr) override {}\n-  void visit (AST::IfLetExprConseqIfLet &expr) override {}\n   void visit (AST::MatchExpr &expr) override {}\n   void visit (AST::AwaitExpr &expr) override {}\n   void visit (AST::AsyncBlockExpr &expr) override {}"}, {"sha": "ece52991378570b1e7650720606259489724c0db", "filename": "gcc/rust/expand/rust-cfg-strip.cc", "status": "modified", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -1779,93 +1779,6 @@ CfgStrip::visit (AST::IfLetExprConseqElse &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-CfgStrip::visit (AST::IfLetExprConseqIf &expr)\n-{\n-  // initial strip test based on outer attrs\n-  expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n-    {\n-      expr.mark_for_strip ();\n-      return;\n-    }\n-\n-  for (auto &pattern : expr.get_patterns ())\n-    {\n-      pattern->accept_vis (*this);\n-      if (pattern->is_marked_for_strip ())\n-\trust_error_at (pattern->get_locus (),\n-\t\t       \"cannot strip pattern in this position\");\n-    }\n-\n-  // can't strip value expr itself, but can strip sub-expressions\n-  auto &value_expr = expr.get_value_expr ();\n-  value_expr->accept_vis (*this);\n-  if (value_expr->is_marked_for_strip ())\n-    rust_error_at (value_expr->get_locus (),\n-\t\t   \"cannot strip expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if block itself, but can strip sub-expressions\n-  auto &if_block = expr.get_if_block ();\n-  if_block->accept_vis (*this);\n-  if (if_block->is_marked_for_strip ())\n-    rust_error_at (if_block->get_locus (),\n-\t\t   \"cannot strip block expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if expr itself, but can strip sub-expressions\n-  auto &conseq_if_expr = expr.get_conseq_if_expr ();\n-  conseq_if_expr->accept_vis (*this);\n-  if (conseq_if_expr->is_marked_for_strip ())\n-    rust_error_at (conseq_if_expr->get_locus (),\n-\t\t   \"cannot strip consequent if expression in this \"\n-\t\t   \"position - outer attributes not allowed\");\n-}\n-void\n-CfgStrip::visit (AST::IfLetExprConseqIfLet &expr)\n-{\n-  // initial strip test based on outer attrs\n-  expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n-    {\n-      expr.mark_for_strip ();\n-      return;\n-    }\n-\n-  for (auto &pattern : expr.get_patterns ())\n-    {\n-      pattern->accept_vis (*this);\n-      if (pattern->is_marked_for_strip ())\n-\trust_error_at (pattern->get_locus (),\n-\t\t       \"cannot strip pattern in this position\");\n-    }\n-\n-  // can't strip value expr itself, but can strip sub-expressions\n-  auto &value_expr = expr.get_value_expr ();\n-  value_expr->accept_vis (*this);\n-  if (value_expr->is_marked_for_strip ())\n-    rust_error_at (value_expr->get_locus (),\n-\t\t   \"cannot strip expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if block itself, but can strip sub-expressions\n-  auto &if_block = expr.get_if_block ();\n-  if_block->accept_vis (*this);\n-  if (if_block->is_marked_for_strip ())\n-    rust_error_at (if_block->get_locus (),\n-\t\t   \"cannot strip block expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if let expr itself, but can strip sub-expressions\n-  auto &conseq_if_let_expr = expr.get_conseq_if_let_expr ();\n-  conseq_if_let_expr->accept_vis (*this);\n-  if (conseq_if_let_expr->is_marked_for_strip ())\n-    rust_error_at (conseq_if_let_expr->get_locus (),\n-\t\t   \"cannot strip consequent if let expression in this \"\n-\t\t   \"position - outer attributes not \"\n-\t\t   \"allowed\");\n-}\n-void\n CfgStrip::visit (AST::MatchExpr &expr)\n {\n   // initial strip test based on outer attrs"}, {"sha": "14d933b43a8650c74d27314fce3b013fa6a23673", "filename": "gcc/rust/expand/rust-cfg-strip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -133,8 +133,6 @@ class CfgStrip : public AST::ASTVisitor\n   void visit (AST::IfExprConseqElse &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n   void visit (AST::IfLetExprConseqElse &expr) override;\n-  void visit (AST::IfLetExprConseqIf &expr) override;\n-  void visit (AST::IfLetExprConseqIfLet &expr) override;\n   void visit (AST::MatchExpr &expr) override;\n   void visit (AST::AwaitExpr &expr) override;\n   void visit (AST::AsyncBlockExpr &expr) override;"}, {"sha": "c4191ce68d1a2fdbeb49d6e543359ffebe01e2bc", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -699,24 +699,6 @@ ExpandVisitor::visit (AST::IfLetExprConseqElse &expr)\n   visit (expr.get_else_block ());\n }\n \n-void\n-ExpandVisitor::visit (AST::IfLetExprConseqIf &expr)\n-{\n-  maybe_expand_expr (expr.get_value_expr ());\n-\n-  visit (expr.get_if_block ());\n-  visit (expr.get_conseq_if_expr ());\n-}\n-\n-void\n-ExpandVisitor::visit (AST::IfLetExprConseqIfLet &expr)\n-{\n-  maybe_expand_expr (expr.get_value_expr ());\n-\n-  visit (expr.get_if_block ());\n-  visit (expr.get_conseq_if_let_expr ());\n-}\n-\n void\n ExpandVisitor::visit (AST::MatchExpr &expr)\n {"}, {"sha": "f3123767213fb1558151ab4b837edc1921f979c9", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -218,8 +218,6 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::IfExprConseqElse &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n   void visit (AST::IfLetExprConseqElse &expr) override;\n-  void visit (AST::IfLetExprConseqIf &expr) override;\n-  void visit (AST::IfLetExprConseqIfLet &expr) override;\n   void visit (AST::MatchExpr &expr) override;\n   void visit (AST::AwaitExpr &expr) override;\n   void visit (AST::AsyncBlockExpr &expr) override;"}, {"sha": "1be58ad9bd278f2ca65c61587e7f09d22510711f", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -235,12 +235,6 @@ ASTLoweringBase::visit (AST::IfLetExpr &)\n void\n ASTLoweringBase::visit (AST::IfLetExprConseqElse &)\n {}\n-void\n-ASTLoweringBase::visit (AST::IfLetExprConseqIf &)\n-{}\n-void\n-ASTLoweringBase::visit (AST::IfLetExprConseqIfLet &)\n-{}\n //  void ASTLoweringBase::visit(MatchCasematch_case) {}\n // void ASTLoweringBase:: (AST::MatchCaseBlockExpr &) {}\n // void ASTLoweringBase:: (AST::MatchCaseExpr &) {}"}, {"sha": "38384d87c1e43b561d9224af3bdd20e719670e07", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -145,8 +145,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::IfExprConseqElse &expr);\n   virtual void visit (AST::IfLetExpr &expr);\n   virtual void visit (AST::IfLetExprConseqElse &expr);\n-  virtual void visit (AST::IfLetExprConseqIf &expr);\n-  virtual void visit (AST::IfLetExprConseqIfLet &expr);\n   //  virtual void visit(MatchCase& match_case);\n   // virtual void visit (AST::MatchCaseBlockExpr &match_case);\n   // virtual void visit (AST::MatchCaseExpr &match_case);"}, {"sha": "38f68ba75b20a9515f634de808cbbce771015a53", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -8219,8 +8219,8 @@ Parser<ManagedTokenSource>::parse_if_let_expr (AST::AttrVec outer_attrs,\n \t\t    return nullptr;\n \t\t  }\n \n-\t\treturn std::unique_ptr<AST::IfLetExprConseqIfLet> (\n-\t\t  new AST::IfLetExprConseqIfLet (\n+\t\treturn std::unique_ptr<AST::IfLetExprConseqElse> (\n+\t\t  new AST::IfLetExprConseqElse (\n \t\t    std::move (match_arm_patterns), std::move (scrutinee_expr),\n \t\t    std::move (if_let_body), std::move (if_let_expr),\n \t\t    std::move (outer_attrs), locus));\n@@ -8240,12 +8240,11 @@ Parser<ManagedTokenSource>::parse_if_let_expr (AST::AttrVec outer_attrs,\n \t\t    return nullptr;\n \t\t  }\n \n-\t\treturn std::unique_ptr<AST::IfLetExprConseqIf> (\n-\t\t  new AST::IfLetExprConseqIf (std::move (match_arm_patterns),\n-\t\t\t\t\t      std::move (scrutinee_expr),\n-\t\t\t\t\t      std::move (if_let_body),\n-\t\t\t\t\t      std::move (if_expr),\n-\t\t\t\t\t      std::move (outer_attrs), locus));\n+\t\treturn std::unique_ptr<AST::IfLetExprConseqElse> (\n+\t\t  new AST::IfLetExprConseqElse (\n+\t\t    std::move (match_arm_patterns), std::move (scrutinee_expr),\n+\t\t    std::move (if_let_body), std::move (if_expr),\n+\t\t    std::move (outer_attrs), locus));\n \t      }\n \t  }\n \tdefault:"}, {"sha": "55883e9fe7d7829b16b446da063c46b62a5bc47b", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -302,14 +302,6 @@ void\n ResolverBase::visit (AST::IfLetExprConseqElse &)\n {}\n \n-void\n-ResolverBase::visit (AST::IfLetExprConseqIf &)\n-{}\n-\n-void\n-ResolverBase::visit (AST::IfLetExprConseqIfLet &)\n-{}\n-\n void\n ResolverBase::visit (AST::MatchExpr &)\n {}"}, {"sha": "20e3be1138631e6d2a204e31f3fb4add47993feb", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -97,8 +97,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::IfExprConseqElse &);\n   void visit (AST::IfLetExpr &);\n   void visit (AST::IfLetExprConseqElse &);\n-  void visit (AST::IfLetExprConseqIf &);\n-  void visit (AST::IfLetExprConseqIfLet &);\n \n   void visit (AST::MatchExpr &);\n   void visit (AST::AwaitExpr &);"}, {"sha": "d32f2dcdbba39e970b0f7d63dcff904edb20bd8d", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -473,22 +473,6 @@ EarlyNameResolver::visit (AST::IfLetExprConseqElse &expr)\n   expr.get_else_block ()->accept_vis (*this);\n }\n \n-void\n-EarlyNameResolver::visit (AST::IfLetExprConseqIf &expr)\n-{\n-  expr.get_value_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_expr ()->accept_vis (*this);\n-}\n-\n-void\n-EarlyNameResolver::visit (AST::IfLetExprConseqIfLet &expr)\n-{\n-  expr.get_value_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_let_expr ()->accept_vis (*this);\n-}\n-\n void\n EarlyNameResolver::visit (AST::MatchExpr &expr)\n {"}, {"sha": "97b2a111f9ed91fe94dfadddd4982abe5e304cee", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -179,8 +179,6 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::IfExprConseqElse &expr);\n   virtual void visit (AST::IfLetExpr &expr);\n   virtual void visit (AST::IfLetExprConseqElse &expr);\n-  virtual void visit (AST::IfLetExprConseqIf &expr);\n-  virtual void visit (AST::IfLetExprConseqIfLet &expr);\n   virtual void visit (AST::MatchExpr &expr);\n   virtual void visit (AST::AwaitExpr &expr);\n   virtual void visit (AST::AsyncBlockExpr &expr);"}, {"sha": "bba4d128f3cd76d6dd8ae923b08617d667520fef", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -476,14 +476,6 @@ void\n AttributeChecker::visit (AST::IfLetExprConseqElse &)\n {}\n \n-void\n-AttributeChecker::visit (AST::IfLetExprConseqIf &)\n-{}\n-\n-void\n-AttributeChecker::visit (AST::IfLetExprConseqIfLet &)\n-{}\n-\n void\n AttributeChecker::visit (AST::MatchExpr &)\n {}"}, {"sha": "58f03111c7c7202955bdcab97e4025d71cdac43f", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2608859a394d28ddf6dc0f31954e252c7a562318/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=2608859a394d28ddf6dc0f31954e252c7a562318", "patch": "@@ -162,8 +162,6 @@ class AttributeChecker : public AST::ASTVisitor\n   void visit (AST::IfExprConseqElse &expr);\n   void visit (AST::IfLetExpr &expr);\n   void visit (AST::IfLetExprConseqElse &expr);\n-  void visit (AST::IfLetExprConseqIf &expr);\n-  void visit (AST::IfLetExprConseqIfLet &expr);\n   void visit (AST::MatchExpr &expr);\n   void visit (AST::AwaitExpr &expr);\n   void visit (AST::AsyncBlockExpr &expr);"}]}