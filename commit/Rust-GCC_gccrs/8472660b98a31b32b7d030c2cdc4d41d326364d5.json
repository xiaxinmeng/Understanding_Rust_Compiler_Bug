{"sha": "8472660b98a31b32b7d030c2cdc4d41d326364d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3MjY2MGI5OGEzMWIzMmI3ZDAzMGMyY2RjNGQ0MWQzMjYzNjRkNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-01-13T18:13:46Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-01-13T18:13:46Z"}, "message": "IPA: Avoid segfault in devirtualization_time_bonus (PR 93223)\n\n2020-01-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/93223\n\t* ipa-cp.c (devirtualization_time_bonus): Check whether isummary is\n\tNULL.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr93223.C: New test.", "tree": {"sha": "2307143e7fadf723fa137a74f02112cdd0213faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2307143e7fadf723fa137a74f02112cdd0213faa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8472660b98a31b32b7d030c2cdc4d41d326364d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8472660b98a31b32b7d030c2cdc4d41d326364d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8472660b98a31b32b7d030c2cdc4d41d326364d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8472660b98a31b32b7d030c2cdc4d41d326364d5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69dc042f91c70458ffb6e7b147f093799cee2100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dc042f91c70458ffb6e7b147f093799cee2100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69dc042f91c70458ffb6e7b147f093799cee2100"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "17da1d8e8a7f570699a9e595a9fa68e51fecc863", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8472660b98a31b32b7d030c2cdc4d41d326364d5/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8472660b98a31b32b7d030c2cdc4d41d326364d5/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=8472660b98a31b32b7d030c2cdc4d41d326364d5", "patch": "@@ -3158,7 +3158,7 @@ devirtualization_time_bonus (struct cgraph_node *node,\n       if (avail < AVAIL_AVAILABLE)\n \tcontinue;\n       isummary = ipa_fn_summaries->get (callee);\n-      if (!isummary->inlinable)\n+      if (!isummary || !isummary->inlinable)\n \tcontinue;\n \n       int size = ipa_size_summaries->get (callee)->size;"}, {"sha": "87f98b5e244bf881713b3babf6fc5e82bbcc2a5b", "filename": "gcc/testsuite/g++.dg/ipa/pr93223.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8472660b98a31b32b7d030c2cdc4d41d326364d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93223.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8472660b98a31b32b7d030c2cdc4d41d326364d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93223.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93223.C?ref=8472660b98a31b32b7d030c2cdc4d41d326364d5", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -std=gnu++14\" } */\n+\n+template <typename Function>\n+bool run(const int item_count,\n+         Function && process_range,\n+         const int max_parallelism,\n+         int* progress = nullptr)\n+{\n+    if (max_parallelism <= 1)\n+    {\n+        if (progress == nullptr)\n+        {\n+            return process_range(0);\n+        }\n+        else\n+        {\n+            auto result = true;\n+            for (int i = 0; i != item_count && result; ++i)\n+            {\n+                (*progress)++;\n+                result = process_range(i);\n+            }\n+            return result;\n+        }\n+    }\n+\n+    if (max_parallelism > 10)\n+    {\n+        if (progress == nullptr)\n+        {\n+            return process_range(0);\n+        }\n+        else\n+        {\n+            auto result = true;\n+            for (int i = 0; i != item_count && result; ++i)\n+            {\n+                (*progress)++;\n+                result = process_range(i);\n+            }\n+            return result;\n+        }\n+    }\n+    return false;\n+}\n+\n+namespace\n+{\n+__attribute__((optimize(0))) bool worker_fun(const int)\n+{\n+    return true;\n+}\n+}\n+\n+void demo(int n)\n+{\n+    for (int i = 0; i < n; ++i)\n+    {\n+        run(n, &worker_fun, n);\n+    }\n+}"}]}