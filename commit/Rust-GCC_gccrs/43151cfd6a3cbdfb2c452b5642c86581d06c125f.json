{"sha": "43151cfd6a3cbdfb2c452b5642c86581d06c125f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxNTFjZmQ2YTNjYmRmYjJjNDUyYjU2NDJjODY1ODFkMDZjMTI1Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2015-11-18T13:55:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T13:55:42Z"}, "message": "sem_ch4.adb (Try_Container_Indexing): When constructing the parameter list for the potentially overloaded calls to...\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Try_Container_Indexing): When constructing the\n\tparameter list for the potentially overloaded calls to indexing\n\tfunctions, do not propagate overloadings if the actual is a named\n\tassociation: overloadings appear directly on the expression in\n\tthe association.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_type.adb (Interface_Present_In_Ancestor): If the type is\n\tincomplete, the list of ancestors is found either on the full\n\tview or the non-limited view of the type.\n\nFrom-SVN: r230547", "tree": {"sha": "f73773bc1c7b479070a4679993a21d6823c39ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73773bc1c7b479070a4679993a21d6823c39ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43151cfd6a3cbdfb2c452b5642c86581d06c125f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43151cfd6a3cbdfb2c452b5642c86581d06c125f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43151cfd6a3cbdfb2c452b5642c86581d06c125f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43151cfd6a3cbdfb2c452b5642c86581d06c125f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e645cb39bb491e2a9b30ce4b7717bb2e23da0b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e645cb39bb491e2a9b30ce4b7717bb2e23da0b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e645cb39bb491e2a9b30ce4b7717bb2e23da0b88"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "2b9eed4cbe98504a3b176b32606bf32bcc2cb44c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43151cfd6a3cbdfb2c452b5642c86581d06c125f", "patch": "@@ -1,3 +1,17 @@\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): When constructing the\n+\tparameter list for the potentially overloaded calls to indexing\n+\tfunctions, do not propagate overloadings if the actual is a named\n+\tassociation: overloadings appear directly on the expression in\n+\tthe association.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_type.adb (Interface_Present_In_Ancestor): If the type is\n+\tincomplete, the list of ancestors is found either on the full\n+\tview or the non-limited view of the type.\n+\n 2015-11-18  Nicolas Roche  <roche@adacore.com>\n \n \t* sysdep.c (__gnat_localtime_tzoff): On Windows platform"}, {"sha": "94ecc23582ea61238a810f7e15a69c17e905120e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=43151cfd6a3cbdfb2c452b5642c86581d06c125f", "patch": "@@ -7437,7 +7437,14 @@ package body Sem_Ch4 is\n          Arg := First (Exprs);\n          while Present (Arg) loop\n             New_Arg := Relocate_Node (Arg);\n-            Save_Interps (Arg, New_Arg);\n+\n+            --  The arguments can be parameter associations, in which case the\n+            --  explicit actual parameter carries the overloadings.\n+\n+            if Nkind (New_Arg) /= N_Parameter_Association then\n+               Save_Interps (Arg, New_Arg);\n+            end if;\n+\n             Append (New_Arg, Assoc);\n             Next (Arg);\n          end loop;"}, {"sha": "f5826c488d92f60d8c2d0831f33304f7e61d7987", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43151cfd6a3cbdfb2c452b5642c86581d06c125f/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=43151cfd6a3cbdfb2c452b5642c86581d06c125f", "patch": "@@ -2619,8 +2619,16 @@ package body Sem_Type is\n       end if;\n \n       if Ekind (Target_Typ) = E_Incomplete_Type then\n-         pragma Assert (Present (Non_Limited_View (Target_Typ)));\n-         Target_Typ := Non_Limited_View (Target_Typ);\n+\n+         --  We must have either a full view or a non-limited view of the type\n+         --  to locate the list of ancestors.\n+\n+         if Present (Full_View (Target_Typ)) then\n+            Target_Typ := Full_View (Target_Typ);\n+         else\n+            pragma Assert (Present (Non_Limited_View (Target_Typ)));\n+            Target_Typ := Non_Limited_View (Target_Typ);\n+         end if;\n \n          --  Protect the frontend against previously detected errors\n "}]}