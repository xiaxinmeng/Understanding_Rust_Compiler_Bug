{"sha": "b23987ec2f0f24c38c78f7cf63c91a699da681bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIzOTg3ZWMyZjBmMjRjMzhjNzhmN2NmNjNjOTFhNjk5ZGE2ODFiZA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-10-21T02:38:30Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-10-21T02:38:30Z"}, "message": "tree.h (DECL_PTA_ARTIFICIAL): Remove.\n\n2006-10-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree.h (DECL_PTA_ARTIFICIAL): Remove.\n\t(tree_decl_with_vis): Remove artificial_pta_var flag.\n\t* tree-flow.h (referenced_var_check_and_insert): Expose.\n\t(nonlocal_all): New prototype.\n\t* tree-ssa-structalias.c (nonlocal_for_type): Remove.\n\t(nonlocal_all): Make global.\n\t(nonlocal_lookup): Remove.\n\t(nonlocal_insert): Ditto.\n\t(create_nonlocal_var): Do not call nonlocal_insert.\n\t(get_nonlocal_id_for_type): Remove.\n\t(find_global_initializers): Mark new vars we find for renaming.\n\t(intra_create_variable_infos): Only create one nonlocal.\n\t(expand_nonlocal_solutions): Remove.\n\t(compute_points_to_sets): Don't call it.\n\t(ipa_pta_execute): Ditto.\n\t(init_alias_heapvars): Don't create nonlocal_for_type.\n\t(delete_alias_heapvars): Don't remove it.\n\t* tree-ssa-operands.c (access_can_touch_variable): Don't prune\n\tnonlocal_all.\n\nFrom-SVN: r117922", "tree": {"sha": "99dbf892e72e49a46077548861e9578e380d4383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99dbf892e72e49a46077548861e9578e380d4383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b23987ec2f0f24c38c78f7cf63c91a699da681bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23987ec2f0f24c38c78f7cf63c91a699da681bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23987ec2f0f24c38c78f7cf63c91a699da681bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23987ec2f0f24c38c78f7cf63c91a699da681bd/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "552f68f8fb4dc82d707ec90c853133e5c860eb63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552f68f8fb4dc82d707ec90c853133e5c860eb63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552f68f8fb4dc82d707ec90c853133e5c860eb63"}], "stats": {"total": 219, "additions": 46, "deletions": 173}, "files": [{"sha": "e8aaef5c576bd1961b4fd6f5d10d733ca1792273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -1,3 +1,25 @@\n+2006-10-20  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree.h (DECL_PTA_ARTIFICIAL): Remove.\n+\t(tree_decl_with_vis): Remove artificial_pta_var flag.\n+\t* tree-flow.h (referenced_var_check_and_insert): Expose.\n+\t(nonlocal_all): New prototype.\n+\t* tree-ssa-structalias.c (nonlocal_for_type): Remove.\n+\t(nonlocal_all): Make global.\n+\t(nonlocal_lookup): Remove.\n+\t(nonlocal_insert): Ditto.\n+\t(create_nonlocal_var): Do not call nonlocal_insert.\n+\t(get_nonlocal_id_for_type): Remove.\n+\t(find_global_initializers): Mark new vars we find for renaming.\n+\t(intra_create_variable_infos): Only create one nonlocal.\n+\t(expand_nonlocal_solutions): Remove.\n+\t(compute_points_to_sets): Don't call it.\n+\t(ipa_pta_execute): Ditto.\n+\t(init_alias_heapvars): Don't create nonlocal_for_type.\n+\t(delete_alias_heapvars): Don't remove it.\n+\t* tree-ssa-operands.c (access_can_touch_variable): Don't prune\n+\tnonlocal_all.\n+\n 2006-10-19  Brooks Moses  <bmoses@stanford.edu>\n \n \t* doc/install.texi (Downloading GCC): Clarify mention of"}, {"sha": "a7e78a4dc70ded7726d40665ae0528575022355b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031015-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -14,5 +14,5 @@ main(void)\n }\n \n /* The V_*_DEF comes from the initial assignment and the asm.  */\n-/* { dg-final { scan-tree-dump-times \"_DEF\" 2 \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"_DEF\" 3 \"alias1\" } } */\n /* { dg-final { cleanup-tree-dump \"alias1\" } } */"}, {"sha": "e500f1178a661a431b886df2f4de2dded0f256bd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040517-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -17,5 +17,5 @@ void bar (void)\n    malloc functions may clobber global memory.  Only the function result\n    does not alias any other pointer.\n    Hence, we must have a VDEF for a before and after the call to foo().  */\n-/* { dg-final { scan-tree-dump-times \"V_MAY_DEF\" 1 \"alias1\"} } */\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF\" 2 \"alias1\"} } */\n /* { dg-final { cleanup-tree-dump \"alias1\" } } */"}, {"sha": "5ade6455d96d760c3337a587862171d2be778394", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -621,7 +621,7 @@ referenced_var_lookup (unsigned int uid)\n /* Check if TO is in the referenced_vars hash table and insert it if not.  \n    Return true if it required insertion.  */\n \n-static bool\n+bool\n referenced_var_check_and_insert (tree to)\n { \n   struct int_tree_map *h, in;"}, {"sha": "447b7328ffd32d2a2ed16e7076261b251b3a0438", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -425,6 +425,7 @@ extern GTY((param_is (struct int_tree_map))) htab_t referenced_vars;\n extern GTY((param_is (struct int_tree_map))) htab_t default_defs;\n \n extern tree referenced_var_lookup (unsigned int);\n+extern bool referenced_var_check_and_insert (tree);\n #define num_referenced_vars htab_elements (referenced_vars)\n #define referenced_var(i) referenced_var_lookup (i)\n \n@@ -437,6 +438,10 @@ extern GTY(()) VEC(tree,gc) *ssa_names;\n /* Artificial variable used to model the effects of function calls.  */\n extern GTY(()) tree global_var;\n \n+/* Artificial variable used to model the effects of nonlocal\n+   variables.  */\n+extern GTY(()) tree nonlocal_all;\n+\n /* Call clobbered variables in the function.  If bit I is set, then\n    REFERENCED_VARS (I) is call-clobbered.  */\n extern bitmap call_clobbered_vars;"}, {"sha": "4fa876de39c9e6d3e399f5d31a4a33618f100631", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -1053,7 +1053,9 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n   if (alias == global_var)\n     return true;\n \n-  if (TREE_CODE (alias) == VAR_DECL && DECL_PTA_ARTIFICIAL (alias))\n+  /* We cannot prune nonlocal aliases because they are not type\n+     specific.  */\n+  if (alias == nonlocal_all)\n     return true;\n \n   /* If ALIAS is an SFT, it can't be touched if the offset     "}, {"sha": "1c4a46e75ee846f12e611039dd49bd6d5d6d13f0", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 12, "deletions": 163, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -164,14 +164,8 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n htab_t heapvar_for_stmt;\n \n-\n-/* Represents nonlocals. */\n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n-htab_t nonlocal_for_type;\n-\n-/* If strict aliasing is off, we only use one variable to represent\n-   the nonlocal types.  */\n-static GTY (()) tree nonlocal_all;\n+/* One variable to represent all non-local accesses.  */\n+tree nonlocal_all;\n \n static bool use_field_sensitive = true;\n static int in_ipa_mode = 0;\n@@ -2516,40 +2510,6 @@ do_deref (VEC (ce_s, heap) **constraints)\n     }\n }\n \n-/* Lookup a nonlocal variable for type FROM, and return it if we find\n-   one.  */\n-\n-static tree \n-nonlocal_lookup (tree from)\n-{\n-  struct tree_map *h, in;\n-  in.from = from;\n-\n-  h = htab_find_with_hash (nonlocal_for_type, &in,\n-\t\t\t   htab_hash_pointer (from));\n-  if (h)\n-    return h->to;\n-  return NULL_TREE;\n-}\n-\n-/* Insert a mapping FROM->TO in the nonlocal variable for type\n-   hashtable.  */\n-\n-static void\n-nonlocal_insert (tree from, tree to)\n-{\n-  struct tree_map *h;\n-  void **loc;\n-\n-  h = ggc_alloc (sizeof (struct tree_map));\n-  h->hash = htab_hash_pointer (from);\n-  h->from = from;\n-  h->to = to;\n-  loc = htab_find_slot_with_hash (nonlocal_for_type, h, h->hash,\n-\t\t\t\t  INSERT);\n-  *(struct tree_map **) loc = h;\n-}\n-\n /* Create a nonlocal variable of TYPE to represent nonlocals we can\n    alias.  */\n \n@@ -2561,61 +2521,10 @@ create_nonlocal_var (tree type)\n   if (referenced_vars)\n     add_referenced_var (nonlocal);\n \n-  DECL_PTA_ARTIFICIAL (nonlocal) = 1;\n   DECL_EXTERNAL (nonlocal) = 1;\n-  nonlocal_insert (type, nonlocal);\n   return nonlocal;\n }\n \n-/* Get or create a nonlocal variable for TYPE, and return its\n-   variable info id.  */\n-\n-static unsigned int\n-get_nonlocal_id_for_type (tree type)\n-{\n-  tree nonlocal;\n-  unsigned int nonlocal_id;\n-  varinfo_t nonlocal_vi;\n-  \n-  /* For strict aliasing, we have one variable per type. For\n-     non-strict aliasing, we only need one variable.  */\n-  if (flag_strict_aliasing != 0)\n-    {\n-      nonlocal  = nonlocal_lookup (type);\n-    }\n-  else\n-    {\n-      if (!nonlocal_all)\n-\t{\n-\t  nonlocal = create_nonlocal_var (void_type_node);\n-\t  nonlocal_all = nonlocal;\n-\t}\n-      else\n-\tnonlocal = nonlocal_all;\n-    }\n-  \n-  if (nonlocal && lookup_id_for_tree (nonlocal, &nonlocal_id))\n-    return nonlocal_id;\n-\n-  if (!nonlocal)\n-    {\n-      gcc_assert (flag_strict_aliasing != 0);\n-      nonlocal = create_nonlocal_var (type);\n-    }\n-  \n-  /* Create variable info for the nonlocal var if it does not\n-     exist.  */\n-  nonlocal_id = create_variable_info_for (nonlocal,\n-\t\t\t\t\t  get_name (nonlocal));\n-  nonlocal_vi = get_varinfo (nonlocal_id);\n-  nonlocal_vi->is_artificial_var = 1;\n-  nonlocal_vi->is_heap_var = 1; \n-  nonlocal_vi->is_unknown_size_var = 1;\n-  nonlocal_vi->directly_dereferenced = true;\n-\t    \n-  return nonlocal_id;\n-}\n-\n /* Given a tree T, return the constraint expression for it.  */\n \n static void\n@@ -2756,7 +2665,6 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t\treturn;\n \t      }\n \t    break;\n-\t    \n \t  default:\n \t    {\n \t      temp.type = ADDRESSOF;\n@@ -4116,7 +4024,12 @@ find_global_initializers (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n     case VAR_DECL:\n       /* We might not have walked this because we skip\n \t DECL_EXTERNALs during the initial scan.  */\n-      add_referenced_var (t);   \n+      if (referenced_vars)\n+\t{\n+\t  get_var_ann (t);\n+\t  if (referenced_var_check_and_insert (t))\n+\t    mark_sym_for_renaming (t);\n+\t}\n       break;\n     default:\n       break;\n@@ -4336,8 +4249,8 @@ intra_create_variable_infos (void)\n {\n   tree t;\n   struct constraint_expr lhs, rhs;\n-  tree nonlocal;\n   varinfo_t nonlocal_vi;\n+\n   /* For each incoming pointer argument arg, ARG = ESCAPED_VARS or a\n      dummy variable if flag_argument_noalias > 2. */\n   for (t = DECL_ARGUMENTS (current_function_decl); t; t = TREE_CHAIN (t))\n@@ -4393,14 +4306,12 @@ intra_create_variable_infos (void)\n \t    make_constraint_from_escaped (p);\n \t}\n     }\n-  nonlocal = create_tmp_var_raw (void_type_node, \"NONLOCAL_ALL\");\n-  \n-  DECL_EXTERNAL (nonlocal) = 1;\n+  nonlocal_all = create_nonlocal_var (void_type_node);\n \n   /* Create variable info for the nonlocal var if it does not\n      exist.  */\n-  nonlocal_vars_id = create_variable_info_for (nonlocal,\n-\t\t\t\t\t       get_name (nonlocal));\n+  nonlocal_vars_id = create_variable_info_for (nonlocal_all,\n+\t\t\t\t\t       get_name (nonlocal_all));\n   nonlocal_vi = get_varinfo (nonlocal_vars_id);\n   nonlocal_vi->is_artificial_var = 1;\n   nonlocal_vi->is_heap_var = 1; \n@@ -4860,61 +4771,6 @@ find_escape_constraints (tree stmt)\n   VEC_free (ce_s, heap, rhsc);\n }\n \n-/* Expand the solutions that have nonlocal_id in them to include one\n-   variable for each type that is pointed to by nonlocal and\n-   dereferenced.  */\n-\n-static void\n-expand_nonlocal_solutions (void)\n-{\n-  int i;\n-  varinfo_t v;\n-  bitmap new_nonlocal_solution = BITMAP_ALLOC (&ptabitmap_obstack);\n-\n-  /*  We could do this faster by only checking non-collapsed nodes,\n-      unless the node was collapsed to one we would normally ignore in the\n-      rest of the loop.  Logic already seems complicated enough, and\n-      it wasn't a measurable speedup on any testcases i had.  */\n-  for (i = 0; VEC_iterate (varinfo_t, varmap, i, v); i++)\n-    {\n-      /* Where the solution for our variable is, since it may have\n-\t been collapsed to another varinfo.  */\n-      varinfo_t solv = v;\n-      \n-      if (v->is_special_var\n-\t  || v->id == nonlocal_vars_id\n-\t  || v->id == escaped_vars_id\n-\t  || !POINTER_TYPE_P (TREE_TYPE (v->decl)))\n-\tcontinue;\n-      \n-      if (v->node != v->id)\n-\tsolv = get_varinfo (v->node);\n-      if (bitmap_bit_p (solv->solution, nonlocal_vars_id))\n-\t{\n-\t  unsigned int new_nonlocal_id;\n-\t  tree pttype = TREE_TYPE (TREE_TYPE (v->decl));\n-\t  \n-\t  new_nonlocal_id = get_nonlocal_id_for_type (pttype);\n-\t  bitmap_set_bit (new_nonlocal_solution, new_nonlocal_id);\n-\t}\n-    }\n-\n-  if (!bitmap_empty_p (new_nonlocal_solution))\n-    {\n-\n-      for (i = 0; VEC_iterate (varinfo_t, varmap, i, v); i++)\n-\t{\n-\t  if (v->node != v->id)\n-\t    continue;\n-\t  if (bitmap_bit_p (v->solution, nonlocal_vars_id))\n-\t    {\n-\t      bitmap_clear_bit (v->solution, nonlocal_vars_id);\n-\t      bitmap_ior_into (v->solution, new_nonlocal_solution);\n-\t    }\n-\t}\n-    }\n-}\n-\t\t\t  \n /* Create points-to sets for the current function.  See the comments\n    at the start of the file for an algorithmic overview.  */\n \n@@ -4983,8 +4839,6 @@ compute_points_to_sets (struct alias_info *ai)\n       \n   solve_graph (graph);\n   \n-  expand_nonlocal_solutions ();\n-  \n   if (dump_file)\n     dump_sa_points_to_info (dump_file);\n   \n@@ -5129,8 +4983,6 @@ ipa_pta_execute (void)\n       \n   solve_graph (graph);\n   \n-  expand_nonlocal_solutions ();\n-  \n   if (dump_file)\n     dump_sa_points_to_info (dump_file);\n   in_ipa_mode = 0;\n@@ -5162,8 +5014,6 @@ init_alias_heapvars (void)\n {\n   heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, tree_map_eq,\n \t\t\t\t      NULL);\n-  nonlocal_for_type = htab_create_ggc (11, tree_map_hash, tree_map_eq,\n-\t\t\t\t       NULL);\n   nonlocal_all = NULL_TREE;\n }\n \n@@ -5172,7 +5022,6 @@ delete_alias_heapvars (void)\n {\n   nonlocal_all = NULL_TREE;\n   htab_delete (heapvar_for_stmt);\n-  htab_delete (nonlocal_for_type);\n }\n \n   "}, {"sha": "e6a861ca24af4a8efc911568d3645486d4dda162", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23987ec2f0f24c38c78f7cf63c91a699da681bd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b23987ec2f0f24c38c78f7cf63c91a699da681bd", "patch": "@@ -2858,10 +2858,6 @@ extern void decl_restrict_base_insert (tree, tree);\n    multiple translation units should be merged.  */\n #define DECL_ONE_ONLY(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.one_only)\n \n-/* Internal to points-to analysis and operand scanning.  Indicates\n-   that this DECL is an artificial points-to variable.  */\n-#define DECL_PTA_ARTIFICIAL(NODE) (VAR_DECL_CHECK (NODE)->decl_with_vis.artificial_pta_var)\n-\n struct tree_decl_with_vis GTY(())\n {\n  struct tree_decl_with_rtl common;\n@@ -2879,7 +2875,6 @@ struct tree_decl_with_vis GTY(())\n  unsigned based_on_restrict_p : 1;\n  /* Used by C++.  Might become a generic decl flag.  */\n  unsigned shadowed_for_var_p : 1;\n- unsigned artificial_pta_var : 1;\n \n  /* Don't belong to VAR_DECL exclusively.  */\n  unsigned in_system_header_flag : 1;\n@@ -2894,7 +2889,7 @@ struct tree_decl_with_vis GTY(())\n \n  /* Belongs to VAR_DECL exclusively.  */\n  ENUM_BITFIELD(tls_model) tls_model : 3;\n- /* 10 unused bits. */\n+ /* 11 unused bits. */\n };\n \n /* In a VAR_DECL that's static,"}]}