{"sha": "30f502eddecac8ecfbec4b86f3a80f1859076b6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmNTAyZWRkZWNhYzhlY2ZiZWM0Yjg2ZjNhODBmMTg1OTA3NmI2ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-07-03T09:39:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-07-03T09:39:59Z"}, "message": "tree-vect-stmts.c (vect_is_simple_use): Consolidate dumping, always set *dt.\n\n2018-07-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vect_is_simple_use): Consolidate dumping,\n\talways set *dt.  Dump vectype in vectype overload.\n\t* dumpfile.h (dump_gimple_expr): New function.\n\t(dump_gimple_expr_loc): Likewise.\n\t* dumpfile.c (dump_gimple_expr): New function.\n\t(dump_gimple_expr_loc): Likewise.\n\nFrom-SVN: r262330", "tree": {"sha": "26d48636b7712963d8eecf6332e4650812b40652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d48636b7712963d8eecf6332e4650812b40652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f502eddecac8ecfbec4b86f3a80f1859076b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f502eddecac8ecfbec4b86f3a80f1859076b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f502eddecac8ecfbec4b86f3a80f1859076b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f502eddecac8ecfbec4b86f3a80f1859076b6d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbdb1229e3a822bf84d93586d18540d0650d54da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdb1229e3a822bf84d93586d18540d0650d54da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdb1229e3a822bf84d93586d18540d0650d54da"}], "stats": {"total": 146, "additions": 90, "deletions": 56}, "files": [{"sha": "99226d5861fe1537083498eb580e592f9c181952", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30f502eddecac8ecfbec4b86f3a80f1859076b6d", "patch": "@@ -1,3 +1,12 @@\n+2018-07-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vect_is_simple_use): Consolidate dumping,\n+\talways set *dt.  Dump vectype in vectype overload.\n+\t* dumpfile.h (dump_gimple_expr): New function.\n+\t(dump_gimple_expr_loc): Likewise.\n+\t* dumpfile.c (dump_gimple_expr): New function.\n+\t(dump_gimple_expr_loc): Likewise.\n+\n 2018-07-02  Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md (movqi_h8300, movqi_h8300hs): Consolidate"}, {"sha": "3296299e86b746d9a5c85255a355d60c83e906b3", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=30f502eddecac8ecfbec4b86f3a80f1859076b6d", "patch": "@@ -492,6 +492,42 @@ dump_gimple_stmt_loc (dump_flags_t dump_kind, const dump_location_t &loc,\n     }\n }\n \n+/* Dump gimple statement GS with SPC indentation spaces and\n+   EXTRA_DUMP_FLAGS on the dump streams if DUMP_KIND is enabled.\n+   Do not terminate with a newline or semicolon.  */\n+\n+void\n+dump_gimple_expr (dump_flags_t dump_kind, dump_flags_t extra_dump_flags,\n+\t\t  gimple *gs, int spc)\n+{\n+  if (dump_file && (dump_kind & pflags))\n+    print_gimple_expr (dump_file, gs, spc, dump_flags | extra_dump_flags);\n+\n+  if (alt_dump_file && (dump_kind & alt_flags))\n+    print_gimple_expr (alt_dump_file, gs, spc, dump_flags | extra_dump_flags);\n+}\n+\n+/* Similar to dump_gimple_expr, except additionally print source location.  */\n+\n+void\n+dump_gimple_expr_loc (dump_flags_t dump_kind, const dump_location_t &loc,\n+\t\t      dump_flags_t extra_dump_flags, gimple *gs, int spc)\n+{\n+  location_t srcloc = loc.get_location_t ();\n+  if (dump_file && (dump_kind & pflags))\n+    {\n+      dump_loc (dump_kind, dump_file, srcloc);\n+      print_gimple_expr (dump_file, gs, spc, dump_flags | extra_dump_flags);\n+    }\n+\n+  if (alt_dump_file && (dump_kind & alt_flags))\n+    {\n+      dump_loc (dump_kind, alt_dump_file, srcloc);\n+      print_gimple_expr (alt_dump_file, gs, spc, dump_flags | extra_dump_flags);\n+    }\n+}\n+\n+\n /* Dump expression tree T using EXTRA_DUMP_FLAGS on dump streams if\n    DUMP_KIND is enabled.  */\n "}, {"sha": "a4172419c1dc5b8679a3c2146af3620d26fffd87", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=30f502eddecac8ecfbec4b86f3a80f1859076b6d", "patch": "@@ -431,6 +431,9 @@ extern void dump_generic_expr (dump_flags_t, dump_flags_t, tree);\n extern void dump_gimple_stmt_loc (dump_flags_t, const dump_location_t &,\n \t\t\t\t  dump_flags_t, gimple *, int);\n extern void dump_gimple_stmt (dump_flags_t, dump_flags_t, gimple *, int);\n+extern void dump_gimple_expr_loc (dump_flags_t, const dump_location_t &,\n+\t\t\t\t  dump_flags_t, gimple *, int);\n+extern void dump_gimple_expr (dump_flags_t, dump_flags_t, gimple *, int);\n extern void print_combine_total_stats (void);\n extern bool enable_rtl_dump_file (void);\n "}, {"sha": "ae62fc36401ac7a6c822326693f114ba3458bb22", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 42, "deletions": 56, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f502eddecac8ecfbec4b86f3a80f1859076b6d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=30f502eddecac8ecfbec4b86f3a80f1859076b6d", "patch": "@@ -10036,61 +10036,53 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n     {\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_is_simple_use: operand \");\n-      dump_generic_expr (MSG_NOTE, TDF_SLIM, operand);\n-      dump_printf (MSG_NOTE, \"\\n\");\n+      if (TREE_CODE (operand) == SSA_NAME\n+\t  && !SSA_NAME_IS_DEFAULT_DEF (operand))\n+\tdump_gimple_expr (MSG_NOTE, TDF_SLIM, SSA_NAME_DEF_STMT (operand), 0);\n+      else\n+\tdump_generic_expr (MSG_NOTE, TDF_SLIM, operand);\n     }\n \n   if (CONSTANT_CLASS_P (operand))\n-    {\n-      *dt = vect_constant_def;\n-      return true;\n-    }\n-\n-  if (is_gimple_min_invariant (operand))\n-    {\n-      *dt = vect_external_def;\n-      return true;\n-    }\n-\n-  if (TREE_CODE (operand) != SSA_NAME)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"not ssa-name.\\n\");\n-      return false;\n-    }\n-\n-  if (SSA_NAME_IS_DEFAULT_DEF (operand))\n-    {\n-      *dt = vect_external_def;\n-      return true;\n-    }\n-\n-  gimple *def_stmt = SSA_NAME_DEF_STMT (operand);\n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location, \"def_stmt: \");\n-      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n-    }\n-\n-  if (! vect_stmt_in_region_p (vinfo, def_stmt))\n+    *dt = vect_constant_def;\n+  else if (is_gimple_min_invariant (operand))\n+    *dt = vect_external_def;\n+  else if (TREE_CODE (operand) != SSA_NAME)\n+    *dt = vect_unknown_def_type;\n+  else if (SSA_NAME_IS_DEFAULT_DEF (operand))\n     *dt = vect_external_def;\n   else\n     {\n-      stmt_vec_info stmt_vinfo = vinfo_for_stmt (def_stmt);\n-      if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n+      gimple *def_stmt = SSA_NAME_DEF_STMT (operand);\n+      if (! vect_stmt_in_region_p (vinfo, def_stmt))\n+\t*dt = vect_external_def;\n+      else\n \t{\n-\t  def_stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n-\t  stmt_vinfo = vinfo_for_stmt (def_stmt);\n+\t  stmt_vec_info stmt_vinfo = vinfo_for_stmt (def_stmt);\n+\t  if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n+\t    {\n+\t      def_stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n+\t      stmt_vinfo = vinfo_for_stmt (def_stmt);\n+\t    }\n+\t  switch (gimple_code (def_stmt))\n+\t    {\n+\t    case GIMPLE_PHI:\n+\t    case GIMPLE_ASSIGN:\n+\t    case GIMPLE_CALL:\n+\t      *dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);\n+\t      break;\n+\t    default:\n+\t      *dt = vect_unknown_def_type;\n+\t      break;\n+\t    }\n \t}\n-      *dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);\n+      if (def_stmt_out)\n+\t*def_stmt_out = def_stmt;\n     }\n-  if (def_stmt_out)\n-    *def_stmt_out = def_stmt;\n \n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_NOTE, vect_location, \"type of def: \");\n+      dump_printf (MSG_NOTE, \", type of def: \");\n       switch (*dt)\n \t{\n \tcase vect_uninitialized_def:\n@@ -10131,19 +10123,6 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n       return false;\n     }\n \n-  switch (gimple_code (def_stmt))\n-    {\n-    case GIMPLE_PHI:\n-    case GIMPLE_ASSIGN:\n-    case GIMPLE_CALL:\n-      break;\n-    default:\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                         \"unsupported defining stmt:\\n\");\n-      return false;\n-    }\n-\n   return true;\n }\n \n@@ -10179,6 +10158,13 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n       stmt_vec_info stmt_info = vinfo_for_stmt (def_stmt);\n       *vectype = STMT_VINFO_VECTYPE (stmt_info);\n       gcc_assert (*vectype != NULL_TREE);\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"vect_is_simple_use: vectype \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, *vectype);\n+\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t}\n     }\n   else if (*dt == vect_uninitialized_def\n \t   || *dt == vect_constant_def"}]}