{"sha": "5ef0de9b1f67793d72ee02fa1c3215935f810c78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmMGRlOWIxZjY3NzkzZDcyZWUwMmZhMWMzMjE1OTM1ZjgxMGM3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-02T22:41:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-02T22:41:23Z"}, "message": "re PR tree-optimization/59358 (Infinite loop generated with >=O2)\n\n\tPR tree-optimization/59358\n\t* tree-vrp.c (union_ranges): To check for the partially\n\toverlapping ranges or adjacent ranges, also compare *vr0max\n\twith vr1max.\n\n\t* gcc.c-torture/execute/pr59358.c: New test.\n\nFrom-SVN: r205607", "tree": {"sha": "c3e546c3383a949708c786e474d4eb6b6121838b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e546c3383a949708c786e474d4eb6b6121838b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ef0de9b1f67793d72ee02fa1c3215935f810c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef0de9b1f67793d72ee02fa1c3215935f810c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef0de9b1f67793d72ee02fa1c3215935f810c78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef0de9b1f67793d72ee02fa1c3215935f810c78/comments", "author": null, "committer": null, "parents": [{"sha": "165b9e93525aaf88f9ef7dac6067e3ed040d9a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165b9e93525aaf88f9ef7dac6067e3ed040d9a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165b9e93525aaf88f9ef7dac6067e3ed040d9a2b"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "ef191664efe8a48e90aab337a0223a536fb7f0a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ef0de9b1f67793d72ee02fa1c3215935f810c78", "patch": "@@ -1,4 +1,11 @@\n-2013-12-02 Sterling Augustine \u00a0<saugustine@google.com>\n+2013-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59358\n+\t* tree-vrp.c (union_ranges): To check for the partially\n+\toverlapping ranges or adjacent ranges, also compare *vr0max\n+\twith vr1max.\n+\n+2013-12-02  Sterling Augustine \u00a0<saugustine@google.com>\n \n \t* dwarf2out.c (output_pubnames): Use comp_unit_die ()->die_offset\n \twhen there isn't a skeleton die."}, {"sha": "c79226b34dfc9b0cc0bd55aba89041a7b95b1b01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ef0de9b1f67793d72ee02fa1c3215935f810c78", "patch": "@@ -1,5 +1,8 @@\n 2013-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59358\n+\t* gcc.c-torture/execute/pr59358.c: New test.\n+\n \tPR lto/59326\n \t* gcc.target/i386/i386.exp (check_effective_target_avx2): Move to...\n \t* lib/target-supports.exp (check_effective_target_avx2): ... here."}, {"sha": "674026d62588d8ba0a84e9b15ae6dd6cd134f660", "filename": "gcc/testsuite/gcc.c-torture/execute/pr59358.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59358.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59358.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr59358.c?ref=5ef0de9b1f67793d72ee02fa1c3215935f810c78", "patch": "@@ -0,0 +1,44 @@\n+/* PR tree-optimization/59358 */\n+\n+__attribute__((noinline, noclone)) int\n+foo (int *x, int y)\n+{\n+  int z = *x;\n+  if (y > z && y <= 16)\n+    while (y > z)\n+      z *= 2;\n+  return z;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 1; i < 17; i++)\n+    {\n+      int j = foo (&i, 16);\n+      int k;\n+      if (i >= 8 && i <= 15)\n+\tk = 16 + (i - 8) * 2;\n+      else if (i >= 4 && i <= 7)\n+\tk = 16 + (i - 4) * 4;\n+      else if (i == 3)\n+\tk = 24;\n+      else\n+\tk = 16;\n+      if (j != k)\n+\t__builtin_abort ();\n+      j = foo (&i, 7);\n+      if (i >= 7)\n+\tk = i;\n+      else if (i >= 4)\n+\tk = 8 + (i - 4) * 2;\n+      else if (i == 3)\n+\tk = 12;\n+      else\n+\tk = 8;\n+      if (j != k)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "89f2ffd111ce41b9deefcc4f323a1fff75445f84", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef0de9b1f67793d72ee02fa1c3215935f810c78/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5ef0de9b1f67793d72ee02fa1c3215935f810c78", "patch": "@@ -7758,7 +7758,8 @@ union_ranges (enum value_range_type *vr0type,\n     }\n   else if ((operand_less_p (vr1min, *vr0max) == 1\n \t    || operand_equal_p (vr1min, *vr0max, 0))\n-\t   && operand_less_p (*vr0min, vr1min) == 1)\n+\t   && operand_less_p (*vr0min, vr1min) == 1\n+\t   && operand_less_p (*vr0max, vr1max) == 1)\n     {\n       /* [  (  ]  ) or [   ](   ) */\n       if (*vr0type == VR_RANGE\n@@ -7792,7 +7793,8 @@ union_ranges (enum value_range_type *vr0type,\n     }\n   else if ((operand_less_p (*vr0min, vr1max) == 1\n \t    || operand_equal_p (*vr0min, vr1max, 0))\n-\t   && operand_less_p (vr1min, *vr0min) == 1)\n+\t   && operand_less_p (vr1min, *vr0min) == 1\n+\t   && operand_less_p (vr1max, *vr0max) == 1)\n     {\n       /* (  [  )  ] or (   )[   ] */\n       if (*vr0type == VR_RANGE"}]}