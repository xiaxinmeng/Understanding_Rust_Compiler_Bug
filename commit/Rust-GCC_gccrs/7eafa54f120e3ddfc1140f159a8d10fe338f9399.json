{"sha": "7eafa54f120e3ddfc1140f159a8d10fe338f9399", "node_id": "C_kwDOANBUbNoAKDdlYWZhNTRmMTIwZTNkZGZjMTE0MGYxNTlhOGQxMGZlMzM4ZjkzOTk", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-10-27T20:04:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:38Z"}, "message": "[Ada] Extend optimized equality of 2-element arrays\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Array_Equality): Remove check of the array\n\tbound being an N_Range node; use Type_High_Bound/Type_Low_Bound,\n\twhich handle all kinds of array bounds.", "tree": {"sha": "005e2eb62ef7dbcf89696fe182a7683d8bc3216e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005e2eb62ef7dbcf89696fe182a7683d8bc3216e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eafa54f120e3ddfc1140f159a8d10fe338f9399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eafa54f120e3ddfc1140f159a8d10fe338f9399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eafa54f120e3ddfc1140f159a8d10fe338f9399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eafa54f120e3ddfc1140f159a8d10fe338f9399/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51d1dde83fd4b6b2730a2b6b45e5966245e0561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51d1dde83fd4b6b2730a2b6b45e5966245e0561"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "8fb0424f274ca8f54f9e2d75770ea68c8b76ea66", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eafa54f120e3ddfc1140f159a8d10fe338f9399/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eafa54f120e3ddfc1140f159a8d10fe338f9399/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7eafa54f120e3ddfc1140f159a8d10fe338f9399", "patch": "@@ -1988,43 +1988,41 @@ package body Exp_Ch4 is\n         and then Ltyp = Rtyp\n         and then Is_Constrained (Ltyp)\n         and then Number_Dimensions (Ltyp) = 1\n-        and then Nkind (First_Idx) = N_Range\n-        and then Compile_Time_Known_Value (Low_Bound (First_Idx))\n-        and then Compile_Time_Known_Value (High_Bound (First_Idx))\n-        and then Expr_Value (High_Bound (First_Idx)) =\n-                                         Expr_Value (Low_Bound (First_Idx)) + 1\n+        and then Compile_Time_Known_Bounds (Ltyp)\n+        and then Expr_Value (Type_High_Bound (Etype (First_Idx))) =\n+                   Expr_Value (Type_Low_Bound (Etype (First_Idx))) + 1\n       then\n          declare\n             Ctyp         : constant Entity_Id := Component_Type (Ltyp);\n+            Low_B        : constant Node_Id :=\n+              Type_Low_Bound (Etype (First_Idx));\n+            High_B       : constant Node_Id :=\n+              Type_High_Bound (Etype (First_Idx));\n             L, R         : Node_Id;\n             TestL, TestH : Node_Id;\n \n          begin\n             L :=\n               Make_Indexed_Component (Loc,\n                 Prefix      => New_Copy_Tree (New_Lhs),\n-                Expressions =>\n-                  New_List (New_Copy_Tree (Low_Bound (First_Idx))));\n+                Expressions => New_List (New_Copy_Tree (Low_B)));\n \n             R :=\n               Make_Indexed_Component (Loc,\n                 Prefix      => New_Copy_Tree (New_Rhs),\n-                Expressions =>\n-                  New_List (New_Copy_Tree (Low_Bound (First_Idx))));\n+                Expressions => New_List (New_Copy_Tree (Low_B)));\n \n             TestL := Expand_Composite_Equality (Nod, Ctyp, L, R, Bodies);\n \n             L :=\n               Make_Indexed_Component (Loc,\n                 Prefix      => New_Lhs,\n-                Expressions =>\n-                  New_List (New_Copy_Tree (High_Bound (First_Idx))));\n+                Expressions => New_List (New_Copy_Tree (High_B)));\n \n             R :=\n               Make_Indexed_Component (Loc,\n                 Prefix      => New_Rhs,\n-                Expressions =>\n-                  New_List (New_Copy_Tree (High_Bound (First_Idx))));\n+                Expressions => New_List (New_Copy_Tree (High_B)));\n \n             TestH := Expand_Composite_Equality (Nod, Ctyp, L, R, Bodies);\n "}]}