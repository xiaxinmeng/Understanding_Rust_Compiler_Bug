{"sha": "e6ca2c17dc359915ed37cbeea6da852873ff3b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjYTJjMTdkYzM1OTkxNWVkMzdjYmVlYTZkYTg1Mjg3M2ZmM2I5NA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-02-06T21:57:54Z"}, "committer": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-02-06T21:57:54Z"}, "message": "movdi 64 bit constants, use HOST_WIDE_INT, update tablejump\n\nFrom-SVN: r11178", "tree": {"sha": "afaa8d58d8d372375e07c688f47ec36c12c4edfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afaa8d58d8d372375e07c688f47ec36c12c4edfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6ca2c17dc359915ed37cbeea6da852873ff3b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ca2c17dc359915ed37cbeea6da852873ff3b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ca2c17dc359915ed37cbeea6da852873ff3b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ca2c17dc359915ed37cbeea6da852873ff3b94/comments", "author": null, "committer": null, "parents": [{"sha": "fc69eca06e0def1eeb551f124fd82ebd16f54b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc69eca06e0def1eeb551f124fd82ebd16f54b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc69eca06e0def1eeb551f124fd82ebd16f54b0b"}], "stats": {"total": 172, "additions": 144, "deletions": 28}, "files": [{"sha": "4969fc8380690d3cb8c85d64227e024e7b973b59", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 144, "deletions": 28, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ca2c17dc359915ed37cbeea6da852873ff3b94/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ca2c17dc359915ed37cbeea6da852873ff3b94/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e6ca2c17dc359915ed37cbeea6da852873ff3b94", "patch": "@@ -888,14 +888,14 @@\n    (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n \"\n {\n-  int low = INTVAL (operands[2]) & 0xffff;\n-  int high = (unsigned) INTVAL (operands[2]) >> 16;\n+  HOST_WIDE_INT low = INTVAL (operands[2]) & 0xffff;\n+  HOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n   if (low & 0x8000)\n-    high++, low |= 0xffff0000;\n+    high += 0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n \n-  operands[3] = gen_rtx (CONST_INT, VOIDmode, high << 16);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, low);\n+  operands[3] = GEN_INT (high);\n+  operands[4] = GEN_INT (low);\n }\")\n \n (define_insn \"one_cmplsi2\"\n@@ -3944,14 +3944,14 @@\n    (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n \"\n {\n-  int low = INTVAL (operands[2]) & 0xffff;\n-  int high = (unsigned) INTVAL (operands[2]) >> 16;\n+  HOST_WIDE_INT low = INTVAL (operands[2]) & 0xffff;\n+  HOST_WIDE_INT high = INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff);\n \n   if (low & 0x8000)\n-    high++, low |= 0xffff0000;\n+    high+=0x10000, low |= ((HOST_WIDE_INT) -1) << 16;\n \n-  operands[3] = gen_rtx (CONST_INT, VOIDmode, high << 16);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, low);\n+  operands[3] = GEN_INT (high);\n+  operands[4] = GEN_INT (low);\n }\")\n \n (define_insn \"one_cmpldi2\"\n@@ -4503,7 +4503,7 @@\n \"\n {\n   operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t INTVAL (operands[2]) & 0xffff0000);\n+\t\t\t INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[4] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) & 0xffff);\n }\")\n \n@@ -5301,11 +5301,14 @@\n ;; multiple insns.\n (define_expand \"movdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+\t(match_operand:DI 1 \"any_operand\" \"\"))]\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[0]) == MEM)\n+  if (! TARGET_64BIT && ! general_operand (operands[1], DImode))\n+    FAIL;\n+\n+  if (GET_CODE (operands[0]) != REG)\n     operands[1] = force_reg (DImode, operands[1]);\n \n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -5319,18 +5322,50 @@\n \t  low = CONST_DOUBLE_LOW (operands[1]);\n \t  high = CONST_DOUBLE_HIGH (operands[1]);\n \t}\n-      else\n+      else if (HOST_BITS_PER_WIDE_INT <= 32)\n \t{\n \t  low = INTVAL (operands[1]);\n \t  high = (low < 0) ? ~0 : 0;\n \t}\n+      else\n+\t{\n+          low = INTVAL (operands[1]) & 0xffffffff;\n+          high = (unsigned long long) INTVAL (operands[1]) >> 32;\n+\t}\n \n-      emit_move_insn (gen_rtx (SUBREG, SImode, operands[0], WORDS_BIG_ENDIAN),\n-\t\t      GEN_INT (low));\n+      if (! TARGET_POWERPC64)\n+\t{\n+\t  emit_move_insn (gen_rtx (SUBREG, SImode, operands[0],\n+\t\t\t  WORDS_BIG_ENDIAN), GEN_INT (low));\n \n-      emit_move_insn (gen_rtx (SUBREG, SImode, operands[0], !WORDS_BIG_ENDIAN),\n-\t\t      GEN_INT (high));\n-      DONE;\n+\t  emit_move_insn (gen_rtx (SUBREG, SImode, operands[0],\n+\t\t\t  ! WORDS_BIG_ENDIAN), GEN_INT (high));\n+\t  DONE;\n+\t}\n+      else\n+\t{\n+\t  if (high + 0x8000 >= 0x10000)\n+\t    {\n+\t      emit_move_insn (gen_rtx (SUBREG, SImode, operands[0], 1),\n+\t\t\t      GEN_INT (high));\n+\t      emit_insn (gen_ashldi3 (operands[0], operands[0], GEN_INT(32)));\n+\t      if (low)\n+\t\t{\n+\t\t  HOST_WIDE_INT low_low = low & 0xffff;\n+\t\t  HOST_WIDE_INT low_high = low & (~ (HOST_WIDE_INT) 0xffff);\n+\t\t  if (low_high)\n+\t\t    emit_insn (gen_iordi3 (operands[0], operands[0],\n+\t\t\t\t\t   GEN_INT (low_high)));\n+\t\t  if (low_low)\n+\t\t    emit_insn (gen_iordi3 (operands[0], operands[0],\n+\t\t\t\t\t   GEN_INT (low_low)));\n+\t        }\n+\t    }\n+\t  else if (low)\n+\t    emit_move_insn (gen_rtx (SUBREG, SImode, operands[0], 1),\n+\t\t\t    GEN_INT (low));\n+\t  DONE;\n+        }\n     }\n \n       /* Stores between FPR and any non-FPR registers must go through a\n@@ -5391,8 +5426,8 @@\n    (set_attr \"length\" \"8,8,8,*,*,*\")])\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,f,f,m,r,*h,*h\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,R,f,m,f,*h,r,0\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,f,f,m,r,*h,*h\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,n,R,f,m,f,*h,r,0\"))]\n   \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], DImode)\n    || gpc_reg_operand (operands[1], DImode))\"\n   \"@\n@@ -5401,14 +5436,69 @@\n    std%U0%X0 %1,%0\n    li %0,%1\n    lis %0,%u1\n+   #\n    {cal|la} %0,%1(%*)\n    fmr %0,%1\n    lfd%U1%X1 %0,%1\n    stfd%U0%X0 %1,%0\n    mf%1 %0\n    mt%0 %1\n    cror 0,0,0\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*,fp,fpload,*,*,mtjmpr,*\")])\n+  [(set_attr \"type\" \"*,load,*,*,*,*,*,fp,fpload,*,*,mtjmpr,*\")\n+   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n+\n+;; Split a load of a large constant into the appropriate five-instruction\n+;; sequence.  The expansion in movdi tries to perform the minimum number of\n+;; steps, but here we have to handle anything in a constant number of insns.\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"const_double_operand\" \"\"))]\n+  \"TARGET_POWERPC64\"\n+  [(set (match_dup 0)\n+\t(match_dup 2))\n+   (set (match_dup 0)\n+\t(ior:DI (match_dup 0)\n+\t\t(match_dup 3)))\n+   (set (match_dup 0)\n+\t(ashift:DI (match_dup 0)\n+\t\t   (const_int 32)))\n+   (set (match_dup 0)\n+\t(ior:DI (match_dup 0)\n+\t\t(match_dup 4)))\n+   (set (match_dup 0)\n+\t(ior:DI (match_dup 0)\n+\t\t(match_dup 5)))]\n+  \"\n+{\n+  HOST_WIDE_INT low;\n+  HOST_WIDE_INT high;\n+\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+    {\n+      low = CONST_DOUBLE_LOW (operands[1]);\n+      high = CONST_DOUBLE_HIGH (operands[1]);\n+    }\n+  else if (HOST_BITS_PER_WIDE_INT <= 32)\n+    {\n+      low = INTVAL (operands[1]);\n+      high = (low < 0) ? ~0 : 0;\n+    }\n+  else\n+    {\n+      low = INTVAL (operands[1]) & 0xffffffff;\n+      high = (unsigned long long) INTVAL (operands[1]) >> 32;\n+    }\n+\n+  if ((high + 0x8000) < 0x10000\n+      && ((low & 0xffff) == 0 || (low & (~ (HOST_WIDE_INT) 0xffff)) == 0))\n+    FAIL;\n+\n+  operands[2] = GEN_INT (high & (~ (HOST_WIDE_INT) 0xffff));\n+  operands[3] = GEN_INT (high & 0xffff);\n+  operands[4] = GEN_INT (low & (~ (HOST_WIDE_INT) 0xffff));\n+  operands[5] = GEN_INT (low & 0xffff);\n+}\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n@@ -6242,18 +6332,18 @@\n       || INTVAL (operands[0]) > 32768)\n     {\n       neg_op0 = gen_reg_rtx (Pmode);\n-      if (TARGET_POWERPC64)\n-\temit_insn (gen_negdi2 (neg_op0, operands[0]));\n-      else\n+      if (TARGET_32BIT)\n \temit_insn (gen_negsi2 (neg_op0, operands[0]));\n+      else\n+\temit_insn (gen_negdi2 (neg_op0, operands[0]));\n     }\n   else\n     neg_op0 = GEN_INT (- INTVAL (operands[0]));\n \n-  if (TARGET_POWERPC64)\n-    emit_insn (gen_movdi_update (stack_pointer_rtx, stack_pointer_rtx, neg_op0, chain));\n-  else\n+  if (TARGET_32BIT)\n     emit_insn (gen_movsi_update (stack_pointer_rtx, stack_pointer_rtx, neg_op0, chain));\n+  else\n+    emit_insn (gen_movdi_update (stack_pointer_rtx, stack_pointer_rtx, neg_op0, chain));\n \n   DONE;\n }\")\n@@ -8432,6 +8522,19 @@\n \n ;; Table jump for switch statements:\n (define_expand \"tablejump\"\n+  [(use (match_operand 0 \"\" \"\"))\n+   (use (label_ref (match_operand 1 \"\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_32BIT)\n+    emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n+  else\n+    emit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"tablejumpsi\"\n   [(set (match_dup 3)\n \t(plus:SI (match_operand:SI 0 \"\" \"\")\n \t\t (match_dup 2)))\n@@ -8444,6 +8547,19 @@\n   operands[3] = gen_reg_rtx (SImode);\n }\")\n \n+(define_expand \"tablejumpdi\"\n+  [(set (match_dup 3)\n+\t(plus:DI (match_operand:DI 0 \"\" \"\")\n+\t\t (match_dup 2)))\n+   (parallel [(set (pc) (match_dup 3))\n+\t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n+  \"\"\n+  \"\n+{ operands[0] = force_reg (DImode, operands[0]);\n+  operands[2] = force_reg (DImode, gen_rtx (LABEL_REF, VOIDmode, operands[1]));\n+  operands[3] = gen_reg_rtx (DImode);\n+}\")\n+\n (define_insn \"\"\n   [(set (pc)\n \t(match_operand:SI 0 \"register_operand\" \"c,l\"))"}]}