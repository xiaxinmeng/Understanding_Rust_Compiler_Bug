{"sha": "5480a90cce261c757f93682f16d312781705263a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4MGE5MGNjZTI2MWM3NTdmOTM2ODJmMTZkMzEyNzgxNzA1MjYzYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-22T23:19:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-22T23:19:34Z"}, "message": "(expand_builtin...\n\n(expand_builtin, case BUILT_IN_MEMCPY): Strip off all NOP_EXPRs from\nthe source and destination nodes, then set MEM_IN_STRUCT_P.\n\nFrom-SVN: r10397", "tree": {"sha": "2653e916db52179c1099b4777447bfa8217bba62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2653e916db52179c1099b4777447bfa8217bba62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5480a90cce261c757f93682f16d312781705263a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5480a90cce261c757f93682f16d312781705263a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5480a90cce261c757f93682f16d312781705263a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5480a90cce261c757f93682f16d312781705263a/comments", "author": null, "committer": null, "parents": [{"sha": "a0d074e1069cc78ca03c5775149060eec4fa36e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d074e1069cc78ca03c5775149060eec4fa36e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d074e1069cc78ca03c5775149060eec4fa36e9"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "998303a94eeecac5e1571fb171e08fe48e5f42c4", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5480a90cce261c757f93682f16d312781705263a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5480a90cce261c757f93682f16d312781705263a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5480a90cce261c757f93682f16d312781705263a", "patch": "@@ -7784,21 +7784,19 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  dest_mem = gen_rtx (MEM, BLKmode,\n \t\t\t      memory_address (BLKmode, dest_rtx));\n \t  /* There could be a void* cast on top of the object.  */\n-\t  if (TREE_CODE (dest) == NOP_EXPR)\n-\t    type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (dest, 0)));\n-\t  else\n-\t    type = TREE_TYPE (TREE_TYPE (dest));\n+\t  while (TREE_CODE (dest) == NOP_EXPR)\n+\t    dest = TREE_OPERAND (dest, 0);\n+\t  type = TREE_TYPE (TREE_TYPE (dest));\n \t  MEM_IN_STRUCT_P (dest_mem) = AGGREGATE_TYPE_P (type);\n \t  src_mem = gen_rtx (MEM, BLKmode,\n \t\t\t     memory_address (BLKmode,\n \t\t\t\t\t     expand_expr (src, NULL_RTX,\n \t\t\t\t\t\t\t  ptr_mode,\n \t\t\t\t\t\t\t  EXPAND_SUM)));\n \t  /* There could be a void* cast on top of the object.  */\n-\t  if (TREE_CODE (src) == NOP_EXPR)\n-\t    type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (src, 0)));\n-\t  else\n-\t    type = TREE_TYPE (TREE_TYPE (src));\n+\t  while (TREE_CODE (src) == NOP_EXPR)\n+\t    src = TREE_OPERAND (src, 0);\n+\t  type = TREE_TYPE (TREE_TYPE (src));\n \t  MEM_IN_STRUCT_P (src_mem) = AGGREGATE_TYPE_P (type);\n \n \t  /* Copy word part most expediently.  */"}]}