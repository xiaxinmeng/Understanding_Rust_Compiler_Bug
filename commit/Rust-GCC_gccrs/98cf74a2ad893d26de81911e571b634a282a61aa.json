{"sha": "98cf74a2ad893d26de81911e571b634a282a61aa", "node_id": "C_kwDOANBUbNoAKDk4Y2Y3NGEyYWQ4OTNkMjZkZTgxOTExZTU3MWI2MzRhMjgyYTYxYWE", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-07-27T10:09:42Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-07-27T10:09:42Z"}, "message": "RISC-V: Add RTX costs for `if_then_else' expressions\n\nFix a performance regression from commit 391500af1932 (\"Do not ignore\ncosts of jump insns in combine.\"), a part of the m68k series for MODE_CC\nconversion (<https://gcc.gnu.org/ml/gcc-patches/2019-11/msg01028.html>),\nobserved in soft-fp code in libgcc used by some of the embench-iot\nbenchmarks.\n\nThe immediate origin of the regression is the middle end, which in the\nabsence of cost information from the backend estimates the cost of an\nRTL expression by assuming a single machine instruction for each of the\nexpression's subexpression.\n\nSo for `if_then_else', which takes 3 operands, the estimated cost is 3\ninstructions (i.e. 12 units) even though a branch instruction evaluates\nit in a single machine cycle (ignoring the cost of actually taking the\nbranch of course, which is handled elsewhere).  Consequently an insn\nsequence like:\n\n(insn 595 594 596 43 (set (reg:DI 305)\n        (lshiftrt:DI (reg/v:DI 160 [ R_f ])\n            (const_int 55 [0x37]))) \".../libgcc/soft-fp/adddf3.c\":46:3 216 {lshrdi3}\n     (nil))\n(insn 596 595 597 43 (set (reg:DI 304)\n        (and:DI (reg:DI 305)\n            (const_int 1 [0x1]))) \".../libgcc/soft-fp/adddf3.c\":46:3 109 {anddi3}\n     (expr_list:REG_DEAD (reg:DI 305)\n        (nil)))\n(jump_insn 597 596 598 43 (set (pc)\n        (if_then_else (eq (reg:DI 304)\n                (const_int 0 [0]))\n            (label_ref:DI 1644)\n            (pc))) \".../libgcc/soft-fp/adddf3.c\":46:3 237 {*branchdi}\n     (expr_list:REG_DEAD (reg:DI 304)\n        (int_list:REG_BR_PROB 536870916 (nil)))\n -> 1644)\n\ndoes not (anymore, as from the commit referred) get combined into:\n\n(note 595 594 596 43 NOTE_INSN_DELETED)\n(note 596 595 597 43 NOTE_INSN_DELETED)\n(jump_insn 597 596 598 43 (parallel [\n            (set (pc)\n                (if_then_else (eq (zero_extract:DI (reg/v:DI 160 [ R_f ])\n                            (const_int 1 [0x1])\n                            (const_int 55 [0x37]))\n                        (const_int 0 [0]))\n                    (label_ref:DI 1644)\n                    (pc)))\n            (clobber (scratch:DI))\n        ]) \".../libgcc/soft-fp/adddf3.c\":46:3 243 {*branch_on_bitdi}\n     (int_list:REG_BR_PROB 536870916 (nil))\n -> 1644)\n\nThis is because the new cost is incorrectly calculated as 28 units while\nthe cost of the original 3 instructions was 24:\n\nrejecting combination of insns 595, 596 and 597\noriginal costs 4 + 4 + 16 = 24\nreplacement cost 28\n\nBefore the commit referred the cost of jump instruction was ignored and\nconsidered 0 (i.e. unknown) and a sequence of instructions of a known\ncost used to win:\n\nallowing combination of insns 595, 596 and 597\noriginal costs 4 + 4 + 0 = 0\nreplacement cost 28\n\nAdd the missing costs for the 3 variants of `if_then_else' expressions\nwe currently define in the backend.\n\nWith the fix in place the cost of this particular `if_then_else' pattern\nis 2 instructions or 8 units (because of the shift operation) and\ntherefore the ultimate cost of the original 3 RTL insns will work out at\n16 units (4 + 4 + 8), however the replacement single RTL insn will cost\n8 units only.\n\n\tgcc/\n\t* config/riscv/riscv.cc (riscv_rtx_costs) <IF_THEN_ELSE>: New\n\tcase.", "tree": {"sha": "86465921781e4b50ce586b8d0aa87eb3f17ce547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86465921781e4b50ce586b8d0aa87eb3f17ce547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cf74a2ad893d26de81911e571b634a282a61aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf74a2ad893d26de81911e571b634a282a61aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cf74a2ad893d26de81911e571b634a282a61aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf74a2ad893d26de81911e571b634a282a61aa/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9671b60f9395cb1dca128b92f5dd215f5aeaae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9671b60f9395cb1dca128b92f5dd215f5aeaae1"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "5a0adffb5ce6773d5253bbb66eea7cb6f49609e8", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf74a2ad893d26de81911e571b634a282a61aa/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf74a2ad893d26de81911e571b634a282a61aa/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=98cf74a2ad893d26de81911e571b634a282a61aa", "patch": "@@ -1853,6 +1853,33 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       /* Otherwise use the default handling.  */\n       return false;\n \n+    case IF_THEN_ELSE:\n+      if (TARGET_SFB_ALU\n+\t  && register_operand (XEXP (x, 1), mode)\n+\t  && sfb_alu_operand (XEXP (x, 2), mode)\n+\t  && comparison_operator (XEXP (x, 0), VOIDmode))\n+\t{\n+\t  /* For predicated conditional-move operations we assume the cost\n+\t     of a single instruction even though there are actually two.  */\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      else if (LABEL_REF_P (XEXP (x, 1)) && XEXP (x, 2) == pc_rtx)\n+\t{\n+\t  if (equality_operator (XEXP (x, 0), mode)\n+\t      && GET_CODE (XEXP (XEXP (x, 0), 0)) == ZERO_EXTRACT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (SINGLE_SHIFT_COST + 1);\n+\t      return true;\n+\t    }\n+\t  if (order_operator (XEXP (x, 0), mode))\n+\t    {\n+\t      *total = COSTS_N_INSNS (1);\n+\t      return true;\n+\t    }\n+\t}\n+      return false;\n+\n     case NOT:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode) > UNITS_PER_WORD ? 2 : 1);\n       return false;"}]}