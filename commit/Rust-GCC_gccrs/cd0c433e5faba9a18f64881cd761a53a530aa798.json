{"sha": "cd0c433e5faba9a18f64881cd761a53a530aa798", "node_id": "C_kwDOANBUbNoAKGNkMGM0MzNlNWZhYmE5YTE4ZjY0ODgxY2Q3NjFhNTNhNTMwYWE3OTg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-22T02:49:56Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-23T03:14:12Z"}, "message": "RISC-V: Fix LRA issue for LMUL < 1 vector spillings [PR109244]\n\nIn order to decrease the memory traffic, we don't use whole register\nload/store for the LMUL less than 1 and mask mode, so those case will\nrequire one extra general purpose register for setting up VL register,\nbut it's not allowed during LRA process, so we defined few special move patterns\nused for LRA, which will defer the expansion after LRA.\n\ngcc/ChangeLog:\n\n\tPR target/109244\n\t* config/riscv/riscv-protos.h (emit_vlmax_vsetvl): Define as global.\n\t(emit_vlmax_op): Ditto.\n\t* config/riscv/riscv-v.cc (get_sew): New function.\n\t(emit_vlmax_vsetvl): Adapt function.\n\t(emit_pred_op): Ditto.\n\t(emit_vlmax_op): Ditto.\n\t(emit_nonvlmax_op): Ditto.\n\t(legitimize_move): Fix LRA ICE.\n\t(gen_no_side_effects_vsetvl_rtx): Adapt function.\n\t* config/riscv/vector.md (@mov<V_FRACT:mode><P:mode>_lra): New pattern.\n\t(@mov<VB:mode><P:mode>_lra): Ditto.\n\t(*mov<V_FRACT:mode><P:mode>_lra): Ditto.\n\t(*mov<VB:mode><P:mode>_lra): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109244\n\t* g++.target/riscv/rvv/base/pr109244.C: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-4.c: Adapt testcase.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-6.c: Ditto.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-127.c: Ditto.\n\t* gcc.target/riscv/rvv/base/spill-1.c: Ditto.\n\t* gcc.target/riscv/rvv/base/spill-2.c: Ditto.\n\t* gcc.target/riscv/rvv/base/spill-3.c: Ditto.\n\t* gcc.target/riscv/rvv/base/spill-5.c: Ditto.\n\t* gcc.target/riscv/rvv/base/spill-7.c: Ditto.\n\t* g++.target/riscv/rvv/base/bug-18.C: New test.\n\t* gcc.target/riscv/rvv/base/merge_constraint-3.c: New test.\n\t* gcc.target/riscv/rvv/base/merge_constraint-4.c: New test.", "tree": {"sha": "b780f5a6bd08e01de13c3d9b96c7e6cad1f9b679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b780f5a6bd08e01de13c3d9b96c7e6cad1f9b679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0c433e5faba9a18f64881cd761a53a530aa798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0c433e5faba9a18f64881cd761a53a530aa798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0c433e5faba9a18f64881cd761a53a530aa798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0c433e5faba9a18f64881cd761a53a530aa798/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116a8678840f9f52ec14639ff07e302a8c429f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116a8678840f9f52ec14639ff07e302a8c429f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116a8678840f9f52ec14639ff07e302a8c429f32"}], "stats": {"total": 1070, "additions": 751, "deletions": 319}, "files": [{"sha": "e41f65a08941d435544227bce7056760044140e1", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -158,7 +158,9 @@ bool check_builtin_call (location_t, vec<location_t>, unsigned int,\n \t\t\t   tree, unsigned int, tree *);\n bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n bool legitimize_move (rtx, rtx, machine_mode);\n+void emit_vlmax_vsetvl (machine_mode, rtx);\n void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n+void emit_vlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n enum vlmul_type get_vlmul (machine_mode);\n unsigned int get_ratio (machine_mode);"}, {"sha": "d7b77fd61238a738a01d8a604315e3a01dd575dc", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -98,6 +98,15 @@ template <int MAX_OPERANDS> class insn_expander\n   expand_operand m_ops[MAX_OPERANDS];\n };\n \n+static unsigned\n+get_sew (machine_mode mode)\n+{\n+  unsigned int sew = GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL\n+\t\t       ? 8\n+\t\t       : GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n+  return sew;\n+}\n+\n /* Return true if X is a const_vector with all duplicate elements, which is in\n    the range between MINVAL and MAXVAL.  */\n bool\n@@ -109,13 +118,10 @@ const_vec_all_same_in_range_p (rtx x, HOST_WIDE_INT minval,\n \t  && IN_RANGE (INTVAL (elt), minval, maxval));\n }\n \n-static rtx\n-emit_vlmax_vsetvl (machine_mode vmode)\n+void\n+emit_vlmax_vsetvl (machine_mode vmode, rtx vl)\n {\n-  rtx vl = gen_reg_rtx (Pmode);\n-  unsigned int sew = GET_MODE_CLASS (vmode) == MODE_VECTOR_BOOL\n-\t\t       ? 8\n-\t\t       : GET_MODE_BITSIZE (GET_MODE_INNER (vmode));\n+  unsigned int sew = get_sew (vmode);\n   enum vlmul_type vlmul = get_vlmul (vmode);\n   unsigned int ratio = calculate_ratio (sew, vlmul);\n \n@@ -125,8 +131,6 @@ emit_vlmax_vsetvl (machine_mode vmode)\n \t\t\t   const0_rtx));\n   else\n     emit_insn (gen_vlmax_avl (Pmode, vl, gen_int_mode (ratio, Pmode)));\n-\n-  return vl;\n }\n \n /* Calculate SEW/LMUL ratio.  */\n@@ -166,7 +170,7 @@ calculate_ratio (unsigned int sew, enum vlmul_type vlmul)\n /* Emit an RVV unmask && vl mov from SRC to DEST.  */\n static void\n emit_pred_op (unsigned icode, rtx mask, rtx dest, rtx src, rtx len,\n-\t      machine_mode mask_mode)\n+\t      machine_mode mask_mode, bool vlmax_p)\n {\n   insn_expander<8> e;\n   machine_mode mode = GET_MODE (dest);\n@@ -186,32 +190,40 @@ emit_pred_op (unsigned icode, rtx mask, rtx dest, rtx src, rtx len,\n     e.add_input_operand (len, Pmode);\n   else\n     {\n-      rtx vlmax = emit_vlmax_vsetvl (mode);\n+      rtx vlmax = gen_reg_rtx (Pmode);\n+      emit_vlmax_vsetvl (mode, vlmax);\n       e.add_input_operand (vlmax, Pmode);\n     }\n \n   if (GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n     e.add_policy_operand (get_prefer_tail_policy (), get_prefer_mask_policy ());\n \n-  if (len)\n-    e.add_avl_type_operand (avl_type::NONVLMAX);\n-  else\n+  if (vlmax_p)\n     e.add_avl_type_operand (avl_type::VLMAX);\n+  else\n+    e.add_avl_type_operand (avl_type::NONVLMAX);\n \n   e.expand ((enum insn_code) icode, MEM_P (dest) || MEM_P (src));\n }\n \n void\n emit_vlmax_op (unsigned icode, rtx dest, rtx src, machine_mode mask_mode)\n {\n-  emit_pred_op (icode, NULL_RTX, dest, src, NULL_RTX, mask_mode);\n+  emit_pred_op (icode, NULL_RTX, dest, src, NULL_RTX, mask_mode, true);\n+}\n+\n+void\n+emit_vlmax_op (unsigned icode, rtx dest, rtx src, rtx len,\n+\t       machine_mode mask_mode)\n+{\n+  emit_pred_op (icode, NULL_RTX, dest, src, len, mask_mode, true);\n }\n \n void\n emit_nonvlmax_op (unsigned icode, rtx dest, rtx src, rtx len,\n \t\t  machine_mode mask_mode)\n {\n-  emit_pred_op (icode, NULL_RTX, dest, src, len, mask_mode);\n+  emit_pred_op (icode, NULL_RTX, dest, src, len, mask_mode, false);\n }\n \n static void\n@@ -265,6 +277,20 @@ legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n       expand_const_vector (dest, src, mask_mode);\n       return true;\n     }\n+\n+  /* In order to decrease the memory traffic, we don't use whole register\n+   * load/store for the LMUL less than 1 and mask mode, so those case will\n+   * require one extra general purpose register, but it's not allowed during LRA\n+   * process, so we have a special move pattern used for LRA, which will defer\n+   * the expansion after LRA.  */\n+  if ((known_lt (GET_MODE_SIZE (mode), BYTES_PER_RISCV_VECTOR)\n+       || GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL)\n+      && lra_in_progress)\n+    {\n+      emit_insn (gen_mov_lra (mode, Pmode, dest, src));\n+      return true;\n+    }\n+\n   if (known_ge (GET_MODE_SIZE (mode), BYTES_PER_RISCV_VECTOR)\n       && GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n     {\n@@ -274,6 +300,13 @@ legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n \n       return false;\n     }\n+\n+  if (register_operand (src, mode) && register_operand (dest, mode))\n+    {\n+      emit_insn (gen_rtx_SET (dest, src));\n+      return true;\n+    }\n+\n   if (!register_operand (src, mode) && !register_operand (dest, mode))\n     {\n       rtx tmp = gen_reg_rtx (mode);\n@@ -540,9 +573,7 @@ force_vector_length_operand (rtx vl)\n static rtx\n gen_no_side_effects_vsetvl_rtx (machine_mode vmode, rtx vl, rtx avl)\n {\n-  unsigned int sew = GET_MODE_CLASS (vmode) == MODE_VECTOR_BOOL\n-\t\t       ? 8\n-\t\t       : GET_MODE_BITSIZE (GET_MODE_INNER (vmode));\n+  unsigned int sew = get_sew (vmode);\n   return gen_vsetvl_no_side_effects (Pmode, vl, avl, gen_int_mode (sew, Pmode),\n \t\t\t\t     gen_int_mode (get_vlmul (vmode), Pmode),\n \t\t\t\t     const0_rtx, const0_rtx);"}, {"sha": "1ddc1d3fd390a967239b26e5c19d78841d0e298f", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -635,6 +635,62 @@\n   [(set_attr \"type\" \"vmov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"@mov<V_FRACT:mode><P:mode>_lra\"\n+  [(parallel\n+    [(set (match_operand:V_FRACT 0 \"reg_or_mem_operand\")\n+\t  (match_operand:V_FRACT 1 \"reg_or_mem_operand\"))\n+   (clobber (match_scratch:P 2))])]\n+  \"TARGET_VECTOR && (lra_in_progress || reload_completed)\"\n+{})\n+\n+(define_expand \"@mov<VB:mode><P:mode>_lra\"\n+  [(parallel\n+    [(set (match_operand:VB 0 \"reg_or_mem_operand\")\n+\t  (match_operand:VB 1 \"reg_or_mem_operand\"))\n+   (clobber (match_scratch:P 2))])]\n+  \"TARGET_VECTOR && (lra_in_progress || reload_completed)\"\n+{})\n+\n+(define_insn_and_split \"*mov<V_FRACT:mode><P:mode>_lra\"\n+  [(set (match_operand:V_FRACT 0 \"reg_or_mem_operand\" \"=vr, m,vr\")\n+\t(match_operand:V_FRACT 1 \"reg_or_mem_operand\" \"  m,vr,vr\"))\n+   (clobber (match_scratch:P 2 \"=&r,&r,X\"))]\n+  \"TARGET_VECTOR && (lra_in_progress || reload_completed)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (REG_P (operands[0]) && REG_P (operands[1]))\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+  else\n+    {\n+      riscv_vector::emit_vlmax_vsetvl (<V_FRACT:MODE>mode, operands[2]);\n+      riscv_vector::emit_vlmax_op (code_for_pred_mov (<V_FRACT:MODE>mode),\n+      \t\toperands[0], operands[1], operands[2], <VM>mode);\n+    }\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*mov<VB:mode><P:mode>_lra\"\n+  [(set (match_operand:VB 0 \"reg_or_mem_operand\" \"=vr, m,vr\")\n+\t(match_operand:VB 1 \"reg_or_mem_operand\" \"  m,vr,vr\"))\n+   (clobber (match_scratch:P 2 \"=&r,&r,X\"))]\n+  \"TARGET_VECTOR && (lra_in_progress || reload_completed)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (REG_P (operands[0]) && REG_P (operands[1]))\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+  else\n+    {\n+      riscv_vector::emit_vlmax_vsetvl (<VB:MODE>mode, operands[2]);\n+      riscv_vector::emit_vlmax_op (code_for_pred_mov (<VB:MODE>mode),\n+      \t\toperands[0], operands[1], operands[2], <VB:MODE>mode);\n+    }\n+  DONE;\n+})\n+\n ;; -----------------------------------------------------------------\n ;; ---- Duplicate Operations\n ;; -----------------------------------------------------------------"}, {"sha": "868ec1ef90fe70b8b57282dc229ea47c55ecd836", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/bug-18.C", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-18.C?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do compile { target { riscv_vector } } } */\n+\n+#include <iostream>\n+#include \"riscv_vector.h\"\n+using std::cerr;\n+using std::endl;\n+template < class , class b > int c(b val) {\n+  return val;\n+}\n+auto &f32(c< float, uint32_t >);\n+template < class d >\n+bool check(d , d , size_t );\n+int main() {\n+  size_t e ;\n+  int16_t f[] {};\n+  size_t g  ;\n+  int32_t i[] {4784};\n+  size_t aa = 4;\n+  int16_t ab[] {2313};\n+  int16_t j[] {7114 };\n+  int16_t k[] {7696 };\n+  uint32_t l[] {9951 };\n+  int32_t m[] {2659 };\n+  uint16_t n[] {7537 };\n+  int32_t o[] {05733}\n+    ;\n+  uint32_t p[] {7010090 };\n+  uint32_t q[] {21060 };\n+  uint32_t r[] {2273 };\n+  uint32_t s[] {4094366 };\n+  int16_t ac[] {11880 };\n+  int16_t t[] {10988};\n+  int16_t ad[] {30376};\n+  int8_t u[] {};\n+  int8_t ae[] {7};\n+  int8_t v[] {40};\n+  int8_t af[] {6};\n+  int16_t w[]  {4077 };\n+  int16_t x[]  {7932 };\n+  int8_t y[] {3};\n+  int8_t z[] {4};\n+  uint16_t ag[] {2831};\n+  int16_t ah[] {10412 };\n+  int16_t ai[] {6823};\n+  int32_t aj[] {8572 };\n+  int32_t ak[] {9999 };\n+  uint32_t al[] {50166962 };\n+  uint32_t am[] {9781 };\n+  int8_t an[] {9, 35};\n+  float ao[] {222.65, 22.79};\n+  float ap[] {126.10, 13.92};\n+  int64_t aq[] {508727, 5556};\n+  int16_t ar[] {2861 };\n+  int16_t as[] {21420};\n+  int16_t at[] {4706 };\n+  uint32_t au ;\n+  uint32_t av = 600295662;\n+  size_t aw ;\n+  int16_t ax = 13015;\n+  uint32_t ay ;\n+  uint16_t az = 10652;\n+  int32_t ba ;\n+  int8_t bb ;\n+  int64_t bc = 40183771683589512;\n+\n+asm volatile (\"ttt\":::\"memory\");\n+  vint16mf4_t bd = __riscv_vle16_v_i16mf4(j, 2);\n+  vuint32mf2_t be = __riscv_vle32_v_u32mf2(l, 2);\n+  vint32mf2_t bf = __riscv_vle32_v_i32mf2(m, 2);\n+  vuint16mf4_t bg = __riscv_vle16_v_u16mf4(n, 2);\n+  vint8mf4_t bh ;\n+  vuint32m2_t bi = __riscv_vle32_v_u32m2(p, 2);\n+  vuint32m2_t bj = __riscv_vle32_v_u32m2(q, 2);\n+  vuint32m2_t bk = __riscv_vle32_v_u32m2(r, 2);\n+  vuint32m2_t bl = __riscv_vle32_v_u32m2(s, 2);\n+  vint16m1_t bm = __riscv_vle16_v_i16m1(ac, 2);\n+  vint16m1_t bn = __riscv_vle16_v_i16m1(t, 2);\n+  vint8mf2_t bo = __riscv_vle8_v_i8mf2(u, 1);\n+  vint8mf2_t bp = __riscv_vle8_v_i8mf2(ae, 1);\n+  vint8mf8_t bq = __riscv_vle8_v_i8mf8(af, 1);\n+  vint16mf4_t br = __riscv_vle16_v_i16mf4(w, 2);\n+  vint16mf4_t bs = __riscv_vle16_v_i16mf4(x, 2);\n+  vint8mf8_t bt = __riscv_vle8_v_i8mf8(y, 1);\n+  vint8mf8_t bu = __riscv_vle8_v_i8mf8(z, 1);\n+  vuint16mf4_t bv = __riscv_vle16_v_u16mf4(ag, 1);\n+  vint16mf4_t bw = __riscv_vle16_v_i16mf4(ah, 2);\n+  vint16mf4_t bx = __riscv_vle16_v_i16mf4(ai, 2);\n+  vint32mf2_t by = __riscv_vle32_v_i32mf2(aj, 2);\n+  vint32mf2_t bz = __riscv_vle32_v_i32mf2(ak, 2);\n+  vuint32mf2_t ca = __riscv_vle32_v_u32mf2(al, 2);\n+  vuint32mf2_t cb = __riscv_vle32_v_u32mf2(am, 2);\n+  vint8mf8_t cc = __riscv_vle8_v_i8mf8(an, 2);\n+  vfloat32mf2_t cd = __riscv_vle32_v_f32mf2(ao, 2);\n+  vfloat32mf2_t ce = __riscv_vle32_v_f32mf2(ap, 2);\n+  vint64m1_t cf = __riscv_vle64_v_i64m1(aq, 2);\n+  vint16mf4_t cg = __riscv_vle16_v_i16mf4(ar, 2);\n+  vint16mf4_t ch = __riscv_vle16_v_i16mf4(as, 2);\n+  vint16mf4_t var_62 = __riscv_vle16_v_i16mf4(at, 2);\n+  vbool64_t var_20 = __riscv_vmadc_vx_u32mf2_b64(be, ay, 2);\n+  int8_t var_17 = __riscv_vmv_x_s_i8mf4_i8(bh);\n+  vbool16_t var_28 = __riscv_vmsltu_vv_u32m2_b16(bk, bl, 2);\n+  vint8mf2_t var_14 = __riscv_vadd_vv_i8mf2(bo, bp, 1);\n+  vbool64_t var_8 = __riscv_vmseq_vv_i16mf4_b64(br, bs, 2);\n+  vbool64_t var_42 = __riscv_vmsbc_vx_u16mf4_b64(bv, az, 1);\n+  vbool64_t var_46 = __riscv_vmsge_vx_i32mf2_b64(by, ba, 2);\n+  vint16mf4_t var_4 = __riscv_vncvt_x_x_w_i16mf4(bz, 2);\n+  vbool64_t var_51 = __riscv_vmsgt_vx_i8mf8_b64(cc, bb, 2);\n+  vbool64_t var_56 = __riscv_vmfne_vv_f32mf2_b64(cd, ce, 2);\n+  vbool64_t var_55 = __riscv_vmseq_vx_i64m1_b64(cf, bc, 2);\n+  vuint32m2_t var_16 = __riscv_vslideup_vx_u32m2_mu(var_28, bi, bj, aw, 2);\n+  vint8mf2_t var_12 = __riscv_vmulh_vv_i8mf2(var_14, var_14, 1);\n+  vint16mf4_t var_0 = __riscv_vdiv_vv_i16mf4_mu(var_8, var_4, ch, var_62, 2);\n+  vuint32m2_t var_13 = __riscv_vsub_vx_u32m2(var_16, av, 2);\n+  int8_t var_9 = __riscv_vmv_x_s_i8mf2_i8(var_12);\n+  vint16mf4_t var_19 = __riscv_vor_vx_i16mf4_mu(var_20, var_0, bd, ax, 2);\n+  uint32_t var_10 = __riscv_vmv_x_s_u32m2_u32(var_13);\n+  vint8mf8_t var_7 = __riscv_vmadd_vx_i8mf8_mu(var_42, bt, var_9, bu, 1);\n+  __riscv_vse16_v_i16mf4(k, var_19, 2);\n+  vuint32mf2_t var_3 =\n+      __riscv_vslide1down_vx_u32mf2_mu(var_51, ca, cb, var_10, 2);\n+  if (check(k, ab, aa))\n+    cerr << \"check 8 fails\" << endl;\n+  vbool64_t var_2 = __riscv_vmsne_vx_u32mf2_b64_mu(var_55, var_56, var_3, au, 2);\n+  vint16mf4_t var_1 = __riscv_vssub_vv_i16mf4_mu(var_2, var_0, var_4, cg, 2);\n+  vint16mf4_t var_5 = __riscv_vxor_vv_i16mf4_mu(var_46, var_1, bw, bx, 2);\n+  vint32mf2_t var_18 = __riscv_vwmaccsu_vv_i32mf2(bf, var_1, bg, 2);\n+  vint8mf8_t var_6 = __riscv_vncvt_x_x_w_i8mf8_mu(var_8, var_7, var_5, 1);\n+  vint16m1_t var_15 = __riscv_vredand_vs_i16mf4_i16m1_tu(bm, var_5, bn, 2);\n+  __riscv_vse32_v_i32mf2(o, var_18, 2);\n+  vbool64_t var_11 = __riscv_vmsge_vx_i8mf8_b64(var_6, var_17, 1);\n+  __riscv_vse16_v_i16m1(ad, var_15, 1);\n+  if (check(o, i, g))\n+    cerr << \"check 1 fails\" << endl;\n+  __riscv_vse8_v_i8mf8_m(var_11, v, bq, 1);\n+  if (check(ad, f, e))\n+    cerr << \"check 4 fails\" << endl;\n+  cerr << \"check 7 fails\" << endl;\n+  return 0;\n+}"}, {"sha": "eebfc239d3a81a70bdb200699c6639da70e66382", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/pr109244.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fpr109244.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fpr109244.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fpr109244.C?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O2\" } */\n+typedef int a;\n+using c = float;\n+template < typename > using e = int;\n+#pragma riscv intrinsic \"vector\"\n+template < typename, int, int f > struct aa {\n+  using g = int;\n+  template < typename > static constexpr int h() { return f; }\n+  template < typename i > using ab = aa< i, 0, h< i >() >;\n+};\n+template < int f > struct p { using j = aa< float, 6, f >; };\n+template < int f > struct k { using j = typename p< f >::j; };\n+template < typename, int f > using ac = typename k< f >::j;\n+template < class ad > using l = typename ad::g;\n+template < class g, class ad > using ab = typename ad::ab< g >;\n+template < class ad > using ae = ab< e< ad >, ad >;\n+template < int m > vuint32mf2_t ai(aa< a, m, -1 >, a aj) {\n+  return __riscv_vmv_v_x_u32mf2(aj, 0);\n+}\n+template < int m > vfloat32mf2_t ai(aa< c, m, -1 >, c);\n+template < class ad > using ak = decltype(ai(ad(), l< ad >()));\n+template < class ad > ak< ad > al(ad d) {\n+  ae< decltype(d) > am;\n+  return an(d, ai(am, 0));\n+}\n+template < typename g, int m > vuint8mf2_t ao(aa< g, m, -1 >, vuint32mf2_t n) {\n+  return __riscv_vreinterpret_v_u32mf2_u8mf2(n);\n+}\n+template < int m > vuint32mf2_t ap(aa< a, m, -1 >, vuint8mf2_t n) {\n+  return __riscv_vreinterpret_v_u8mf2_u32mf2(n);\n+}\n+template < typename g, int m > vuint8mf2_t ao(aa< g, m, -1 >, vfloat32mf2_t n) {\n+  return __riscv_vreinterpret_v_u32mf2_u8mf2(\n+      __riscv_vreinterpret_v_f32mf2_u32mf2(n));\n+}\n+template < int m > vfloat32mf2_t ap(aa< c, m, -1 >, vuint8mf2_t);\n+template < class ad, class aq > ak< ad > an(ad d, aq n) {\n+  return ap(d, ao(d, n));\n+}\n+vbool64_t av(vuint32mf2_t, vuint32mf2_t);\n+template < class ad > bool ba(ad, vbool64_t);\n+template < class ad > using bb = decltype(al(ad()));\n+template < typename g > using be = ac< g, -1 >;\n+struct bf {\n+  template < class ad > bool bh(ad, bb< ad > bi) {\n+    ae< ad > am;\n+    return ba(am, av(an(am, bi), al(am)));\n+  }\n+};\n+int bo;\n+template < class ad, class bl, typename g > void o(ad d, bl bn, g) {\n+  bb< ad > bq = al(d);\n+  for (; bo;) {\n+    int br = bn.bh(d, bq);\n+    if (__builtin_expect(br, 0))\n+      for (;;)\n+        ;\n+  }\n+}\n+template < class ad, class bl, typename g > void bs(ad d, bl bn, g) {\n+  g bu;\n+  o(d, bn, bu);\n+}\n+template < class ad, class bl, typename g >\n+void bv(ad d, bl bn, g *, int, g *bt) {\n+  bs(d, bn, bt);\n+}\n+float by;\n+int bz;\n+float ca;\n+void b() {\n+  be< float > d;\n+  bf bn;\n+  bv(d, bn, &by, bz, &ca);\n+}"}, {"sha": "552c264d8951ccbd08ab49caefea63f843ec2161", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -24,3 +24,4 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "6a65fb576e88d37653c107accd61453397dc21de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -24,4 +24,5 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n+/* { dg-final { scan-assembler-times {vmv} 2 } } */\n "}, {"sha": "3933c35f4ce714cae2919e3450e219fd421b5e77", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-127.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -24,4 +24,4 @@ void f2 (void * in, void *out, int32_t x)\n     __riscv_vsm_v_b32 (out, m4, 4);\n }\n \n-\n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "d9cbc853918331abdd7b3964386b7731107fd410", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/merge_constraint-3.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-3.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f1 (void *base1,void *base2,void *base3,void *base4,void *out,size_t vl, size_t shift)\n+{\n+    vuint16m1_t v1 = __riscv_vle16_v_u16m1 (base1, vl);\n+    vuint16m1_t v2 = __riscv_vle16_v_u16m1 (base2, vl);\n+    vbool16_t m1 = __riscv_vlm_v_b16 (base3, vl);\n+    vbool16_t m2 = __riscv_vlm_v_b16 (base4, vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\");\n+\n+    vbool16_t v = __riscv_vmseq_vv_u16m1_b16_mu(m1,m2,v1,v2,vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v0\", \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\");\n+\n+    __riscv_vsm_v_b16 (out,v,vl);\n+}\n+\n+void f2 (void *base1,void *base2,void *base3,void *base4,void *out,size_t vl, uint16_t shift)\n+{\n+    vuint16m1_t v1 = __riscv_vle16_v_u16m1 (base1, vl);\n+    vbool16_t m1 = __riscv_vlm_v_b16 (base3, vl);\n+    vbool16_t m2 = __riscv_vlm_v_b16 (base4, vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\");\n+\n+    vbool16_t v = __riscv_vmseq_vx_u16m1_b16_mu(m1,m2,v1,shift,vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\");\n+\n+\n+    __riscv_vsm_v_b16 (out,v,vl);\n+}\n+\n+void f3 (void *base1,void *base2,void *base3,void *base4,void *out,size_t vl, size_t shift)\n+{\n+    vuint16m1_t v1 = __riscv_vle16_v_u16m1 (base1, vl);\n+    vuint16m1_t v2 = __riscv_vle16_v_u16m1 (base2, vl);\n+    vbool16_t m1 = __riscv_vlm_v_b16 (base3, vl);\n+    vbool16_t m2 = __riscv_vlm_v_b16 (base4, vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\");\n+\n+    vbool16_t v = __riscv_vmsltu_vv_u16m1_b16_mu(m1,m2,v1,v2,vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v0\", \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\");\n+\n+    __riscv_vsm_v_b16 (out,v,vl);\n+}\n+\n+void f4 (void *base1,void *base2,void *base3,void *base4,void *out,size_t vl, uint16_t shift)\n+{\n+    vuint16m1_t v1 = __riscv_vle16_v_u16m1 (base1, vl);\n+    vbool16_t m1 = __riscv_vlm_v_b16 (base3, vl);\n+    vbool16_t m2 = __riscv_vlm_v_b16 (base4, vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\");\n+\n+    vbool16_t v = __riscv_vmsltu_vx_u16m1_b16_mu(m1,m2,v1,shift,vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\");\n+\n+\n+    __riscv_vsm_v_b16 (out,v,vl);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */\n+/* { dg-final { scan-assembler-not {csrr} } } */"}, {"sha": "db245b025700c93a97e84257283cbbec6eb5cfac", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/merge_constraint-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-4.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void *base1,void *base2,void *base3,void *base4,void *out,size_t vl, uint16_t shift)\n+{\n+    vuint16m1_t v1 = __riscv_vle16_v_u16m1 (base1, vl);\n+    vbool16_t m1 = __riscv_vlm_v_b16 (base3, vl);\n+    vbool16_t m2 = __riscv_vlm_v_b16 (base4, vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\");\n+\n+    vbool16_t v = __riscv_vmsltu_vx_u16m1_b16_mu(m1,m2,v1,shift,vl);\n+    asm volatile(\"#\" ::\n+\t\t : \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",\n+\t\t   \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\", \n+\t\t   \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",  \n+\t\t   \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\");\n+\n+\n+    __riscv_vsm_v_b16 (out,v,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv} 1 } } */"}, {"sha": "2f2d85807ec66aece85611f83c0e8d53e097104f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-1.c", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-1.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -10,20 +10,20 @@\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,3\n-**  slli\\ta3,a2,3\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,3\n-**  slli\\ta3,a2,3\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle8.v\\tv24,0\\(a3\\)\n-**  vse8.v\\tv24,0\\(a1\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -42,21 +42,21 @@ spill_1 (int8_t *in, int8_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e8,mf4,ta,ma\n-**  vle8.v\\tv24,0\\(a0\\)\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle8.v\\tv24,0\\(a3\\)\n-**  vse8.v\\tv24,0\\(a1\\)\n+**  vle8.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -75,17 +75,17 @@ spill_2 (int8_t *in, int8_t *out)\n ** csrr\\tt0,vlenb\n ** sub\\tsp,sp,t0\n ** vsetvli\\ta5,zero,e8,mf2,ta,ma\n-** vle8.v\\tv24,0\\(a0\\)\n-** csrr\\ta3,vlenb\n-** srli\\ta3,a3,1\n-** add\\ta3,a3,sp\n-** vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-** csrr\\ta3,vlenb\n-** srli\\ta3,a3,1\n-** add\\ta3,a3,sp\n-** vle8.v\\tv24,0\\(a3\\)\n-** vse8.v\\tv24,0\\(a1\\)\n+** vle8.v\\tv[0-9]+,0\\(a0\\)\n+** csrr\\t[a-x0-9]+,vlenb\n+** srli\\t[a-x0-9]+,[a-x0-9]+,1\n+** add\\t[a-x0-9]+,[a-x0-9]+,sp\n+** vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+** csrr\\t[a-x0-9]+,vlenb\n+** srli\\t[a-x0-9]+,[a-x0-9]+,1\n+** add\\t[a-x0-9]+,[a-x0-9]+,sp\n+** vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n ** csrr\\tt0,vlenb\n ** add\\tsp,sp,t0\n **  ...\n@@ -104,10 +104,10 @@ spill_3 (int8_t *in, int8_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re8.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -128,10 +128,10 @@ spill_4 (int8_t *in, int8_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re8.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -152,10 +152,10 @@ spill_5 (int8_t *in, int8_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re8.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -176,10 +176,10 @@ spill_6 (int8_t *in, int8_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re8.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -199,21 +199,21 @@ spill_7 (int8_t *in, int8_t *out)\n ** csrr\\tt0,vlenb\n ** sub\\tsp,sp,t0\n ** vsetvli\\ta5,zero,e8,mf8,ta,ma\n-** vle8.v\\tv24,0\\(a0\\)\n-** csrr\\ta2,vlenb\n-** srli\\ta2,a2,3\n-** slli\\ta3,a2,3\n-** sub\\ta3,a3,a2\n-** add\\ta3,a3,sp\n-** vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,3\n-**  slli\\ta3,a2,3\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle8.v\\tv24,0\\(a3\\)\n-**  vse8.v\\tv24,0\\(a1\\)\n+** vle8.v\\tv[0-9]+,0\\(a0\\)\n+** csrr\\t[a-x0-9]+,vlenb\n+** srli\\t[a-x0-9]+,[a-x0-9]+,3\n+** slli\\t[a-x0-9]+,[a-x0-9]+,3\n+** sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+** add\\t[a-x0-9]+,[a-x0-9]+,sp\n+** vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -232,21 +232,21 @@ spill_8 (uint8_t *in, uint8_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e8,mf4,ta,ma\n-**  vle8.v\\tv24,0\\(a0\\)\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle8.v\\tv24,0\\(a3\\)\n-**  vse8.v\\tv24,0\\(a1\\)\n+**  vle8.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -265,17 +265,17 @@ spill_9 (uint8_t *in, uint8_t *out)\n ** csrr\\tt0,vlenb\n ** sub\\tsp,sp,t0\n ** vsetvli\\ta5,zero,e8,mf2,ta,ma\n-** vle8.v\\tv24,0\\(a0\\)\n-** csrr\\ta3,vlenb\n-** srli\\ta3,a3,1\n-** add\\ta3,a3,sp\n-** vse8.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle8.v\\tv24,0\\(a3\\)\n-**  vse8.v\\tv24,0\\(a1\\)\n+** vle8.v\\tv[0-9]+,0\\(a0\\)\n+** csrr\\t[a-x0-9]+,vlenb\n+** srli\\t[a-x0-9]+,[a-x0-9]+,1\n+** add\\t[a-x0-9]+,[a-x0-9]+,sp\n+** vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -294,10 +294,10 @@ spill_10 (uint8_t *in, uint8_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re8.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -318,10 +318,10 @@ spill_11 (uint8_t *in, uint8_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re8.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -342,10 +342,10 @@ spill_12 (uint8_t *in, uint8_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re8.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -366,10 +366,10 @@ spill_13 (uint8_t *in, uint8_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re8.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */"}, {"sha": "4bcaf4dce79c105fa75ba63141fa34c3f5fbfe64", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-2.c", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-2.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -10,21 +10,21 @@\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e16,mf4,ta,ma\n-**  vle16.v\\tv24,0\\(a0\\)\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vse16.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle16.v\\tv24,0\\(a3\\)\n-**  vse16.v\\tv24,0\\(a1\\)\n+**  vle16.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -43,17 +43,17 @@ spill_2 (int16_t *in, int16_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e16,mf2,ta,ma\n-**  vle16.v\\tv24,0\\(a0\\)\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vse16.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle16.v\\tv24,0\\(a3\\)\n-**  vse16.v\\tv24,0\\(a1\\)\n+**  vle16.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -72,10 +72,10 @@ spill_3 (int16_t *in, int16_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re16.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -96,10 +96,10 @@ spill_4 (int16_t *in, int16_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re16.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -120,10 +120,10 @@ spill_5 (int16_t *in, int16_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re16.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -144,10 +144,10 @@ spill_6 (int16_t *in, int16_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re16.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -167,21 +167,21 @@ spill_7 (int16_t *in, int16_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e16,mf4,ta,ma\n-**  vle16.v\\tv24,0\\(a0\\)\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vse16.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,2\n-**  slli\\ta3,a2,2\n-**  sub\\ta3,a3,a2\n-**  add\\ta3,a3,sp\n-**  vle16.v\\tv24,0\\(a3\\)\n-**  vse16.v\\tv24,0\\(a1\\)\n+**  vle16.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  sub\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -200,17 +200,17 @@ spill_9 (uint16_t *in, uint16_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e16,mf2,ta,ma\n-**  vle16.v\\tv24,0\\(a0\\)\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vse16.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle16.v\\tv24,0\\(a3\\)\n-**  vse16.v\\tv24,0\\(a1\\)\n+**  vle16.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse16.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -229,10 +229,10 @@ spill_10 (uint16_t *in, uint16_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re16.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -253,10 +253,10 @@ spill_11 (uint16_t *in, uint16_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re16.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -277,10 +277,10 @@ spill_12 (uint16_t *in, uint16_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re16.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -301,10 +301,10 @@ spill_13 (uint16_t *in, uint16_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re16.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */"}, {"sha": "82d685e029dcae6f33498763ffe11ee47f128a32", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-3.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-3.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -10,17 +10,17 @@\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e32,mf2,ta,ma\n-**  vle32.v\\tv24,0\\(a0\\)\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vse32.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle32.v\\tv24,0\\(a3\\)\n-**  vse32.v\\tv24,0\\(a1\\)\n+**  vle32.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -39,10 +39,10 @@ spill_3 (int32_t *in, int32_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re32.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -63,10 +63,10 @@ spill_4 (int32_t *in, int32_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re32.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -87,10 +87,10 @@ spill_5 (int32_t *in, int32_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re32.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -111,10 +111,10 @@ spill_6 (int32_t *in, int32_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re32.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -134,17 +134,17 @@ spill_7 (int32_t *in, int32_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e32,mf2,ta,ma\n-**  vle32.v\\tv24,0\\(a0\\)\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vse32.v\\tv24,0\\(a3\\)\n-**  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle32.v\\tv24,0\\(a3\\)\n-**  vse32.v\\tv24,0\\(a1\\)\n+**  vle32.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  ...\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -163,10 +163,10 @@ spill_10 (uint32_t *in, uint32_t *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re32.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -187,10 +187,10 @@ spill_11 (uint32_t *in, uint32_t *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re32.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -211,10 +211,10 @@ spill_12 (uint32_t *in, uint32_t *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re32.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -235,10 +235,10 @@ spill_13 (uint32_t *in, uint32_t *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re32.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */"}, {"sha": "5b3f75f3552208a25f981748dfd64c1a54b8c98c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-5.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-5.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -10,17 +10,17 @@\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  vsetvli\\ta5,zero,e32,mf2,ta,ma\n-**  vle32.v\\tv24,0\\(a0\\)\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vse32.v\\tv24,0\\(a3\\)\n+**  vle32.v\\tv[0-9]+,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  ...\n-**  csrr\\ta3,vlenb\n-**  srli\\ta3,a3,1\n-**  add\\ta3,a3,sp\n-**  vle32.v\\tv24,0\\(a3\\)\n-**  vse32.v\\tv24,0\\(a1\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,sp\n+**  vle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  csrr\\tt0,vlenb\n **  add\\tsp,sp,t0\n **  ...\n@@ -39,10 +39,10 @@ spill_3 (float *in, float *out)\n **  csrr\\tt0,vlenb\n **  sub\\tsp,sp,t0\n **  ...\n-**  vs1r.v\\tv24,0\\(sp\\)\n+**  vs1r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl1re32.v\\tv2,0\\(sp\\)\n-**  vs1r.v\\tv2,0\\(a1\\)\n+**  vs1r.v\\tv2,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -63,10 +63,10 @@ spill_4 (float *in, float *out)\n **  slli\\tt1,t0,1\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs2r.v\\tv24,0\\(sp\\)\n+**  vs2r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl2re32.v\\tv4,0\\(sp\\)\n-**  vs2r.v\\tv4,0\\(a1\\)\n+**  vs2r.v\\tv4,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -87,10 +87,10 @@ spill_5 (float *in, float *out)\n **  slli\\tt1,t0,2\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs4r.v\\tv24,0\\(sp\\)\n+**  vs4r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl4re32.v\\tv8,0\\(sp\\)\n-**  vs4r.v\\tv8,0\\(a1\\)\n+**  vs4r.v\\tv8,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */\n@@ -111,10 +111,10 @@ spill_6 (float *in, float *out)\n **  slli\\tt1,t0,3\n **  sub\\tsp,sp,t1\n **  ...\n-**  vs8r.v\\tv24,0\\(sp\\)\n+**  vs8r.v\\tv[0-9]+,0\\(sp\\)\n **  ...\n **  vl8re32.v\\tv16,0\\(sp\\)\n-**  vs8r.v\\tv16,0\\(a1\\)\n+**  vs8r.v\\tv16,0\\([a-x0-9]+\\)\n **  ...\n **  jr\\tra\n */"}, {"sha": "2bc54557deecf3aaa1721b98d02d484ad29400af", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-7.c", "status": "modified", "additions": 82, "deletions": 79, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0c433e5faba9a18f64881cd761a53a530aa798/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-7.c?ref=cd0c433e5faba9a18f64881cd761a53a530aa798", "patch": "@@ -7,89 +7,92 @@\n \n /*\n ** spill:\n-**  csrr\\tt0,vlenb\n-**  slli\\tt1,t0,4\n-**  sub\\tsp,sp,t1\n-**  vsetvli\\ta3,zero,e8,mf8,ta,ma\n-**  vle8.v\\tv24,0\\(a0\\)\n-**  csrr\\ta5,vlenb\n-**  srli\\ta5,a5,3\n-**  add\\ta5,a5,sp\n-**  vse8.v\\tv24,0\\(a5\\)\n-**  addi\\ta5,a0,1\n-**  vsetvli\\ta4,zero,e8,mf4,ta,ma\n-**  vle8.v\\tv24,0\\(a5\\)\n-**  csrr\\ta5,vlenb\n-**  srli\\ta5,a5,2\n-**  add\\ta5,a5,sp\n-**  vse8.v\\tv24,0\\(a5\\)\n-**  addi\\ta2,a0,2\n-**  vsetvli\\ta5,zero,e8,mf2,ta,ma\n-**  vle8.v\\tv24,0\\(a2\\)\n-**  csrr\\ta2,vlenb\n-**  srli\\ta2,a2,1\n-**  add\\ta2,a2,sp\n-**  vse8.v\\tv24,0\\(a2\\)\n-**  addi\\ta2,a0,3\n-**  vl1re8.v\\tv24,0\\(a2\\)\n-**  csrr\\ta2,vlenb\n-**  add\\ta2,a2,sp\n-**  vs1r.v\\tv24,0\\(a2\\)\n-**  addi\\ta2,a0,4\n-**  vl2re8.v\\tv24,0\\(a2\\)\n-**  csrr\\tt3,vlenb\n-**  slli\\ta2,t3,1\n-**  add\\ta2,a2,sp\n-**  vs2r.v\\tv24,0\\(a2\\)\n-**  addi\\ta2,a0,5\n-**  vl4re8.v\\tv24,0\\(a2\\)\n-**  mv\\ta2,t3\n-**  slli\\tt3,t3,2\n-**  add\\tt3,t3,sp\n-**  vs4r.v\\tv24,0\\(t3\\)\n-**  addi\\ta0,a0,6\n-**  vl8re8.v\\tv24,0\\(a0\\)\n-**  slli\\ta0,a2,3\n-**  add\\ta0,a0,sp\n-**  vs8r.v\\tv24,0\\(a0\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,4\n+**  sub\\tsp,[a-x0-9]+,[a-x0-9]+\n+**  vsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,1\n+**  vsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,2\n+**  vsetvli\\t[a-x0-9]+,zero,e8,mf2,ta,ma\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,3\n+**  vl1re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vs1r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,4\n+**  vl2re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,5\n+**  vl4re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  mv\\t[a-x0-9]+,[a-x0-9]+\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vs4r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,6\n+**  vl8re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  ...\n-**  srli\\ta0,a2,3\n-**  add\\ta0,a0,sp\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vs8r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n **  ...\n-**  vle8.v\\tv27,0\\(a0\\)\n-**  vse8.v\\tv27,0\\(a1\\)\n-**  addi\\ta3,a1,1\n-**  srli\\ta0,a2,2\n-**  add\\ta0,a0,sp\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n **  ...\n-**  vle8.v\\tv27,0\\(a0\\)\n-**  vse8.v\\tv27,0\\(a3\\)\n-**  addi\\ta4,a1,2\n-**  srli\\ta3,a2,1\n-**  add\\ta3,a3,sp\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,1\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n **  ...\n-**  vle8.v\\tv27,0\\(a3\\)\n-**  vse8.v\\tv27,0\\(a4\\)\n-**  addi\\ta5,a1,3\n-**  add\\ta4,a2,sp\n-**  vl1re8.v\\tv25,0\\(a4\\)\n-**  vs1r.v\\tv25,0\\(a5\\)\n-**  addi\\ta5,a1,4\n-**  slli\\ta4,a2,1\n-**  add\\ta4,a4,sp\n-**  vl2re8.v\\tv26,0\\(a4\\)\n-**  vs2r.v\\tv26,0\\(a5\\)\n-**  addi\\ta5,a1,5\n-**  vl4re8.v\\tv28,0\\(t3\\)\n-**  vs4r.v\\tv28,0\\(a5\\)\n-**  addi\\ta1,a1,6\n-**  slli\\ta5,a2,3\n-**  add\\ta5,a5,sp\n-**  vl8re8.v\\tv24,0\\(a5\\)\n-**  vs8r.v\\tv24,0\\(a1\\)\n-**  csrr\\tt0,vlenb\n-**  slli\\tt1,t0,4\n-**  add\\tsp,sp,t1\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,2\n+**  srli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  ...\n+**  vle8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,3\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vl1re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vs1r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,4\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,1\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vl2re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,5\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,2\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vl4re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vs4r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  addi\\t[a-x0-9]+,[a-x0-9]+,6\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,3\n+**  add\\t[a-x0-9]+,[a-x0-9]+,[a-x0-9]+\n+**  vl8re8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  vs8r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  csrr\\t[a-x0-9]+,vlenb\n+**  slli\\t[a-x0-9]+,[a-x0-9]+,4\n+**  add\\tsp,[a-x0-9]+,[a-x0-9]+\n **  ...\n **  jr\\tra\n */"}]}