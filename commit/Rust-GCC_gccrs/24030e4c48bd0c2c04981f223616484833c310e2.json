{"sha": "24030e4c48bd0c2c04981f223616484833c310e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwMzBlNGM0OGJkMGMyYzA0OTgxZjIyMzYxNjQ4NDgzM2MzMTBlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-01-23T01:50:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2008-01-23T01:50:45Z"}, "message": "re PR c++/33984 (bit-fields, references and overloads)\n\ngcc/cp/ChangeLog:\nPR c++/33984\n* call.c (reference_binding): For bitfields use the declared bitfield\ntype.\n(add_builtin_candidates): Likewise.\n* class.c (layout_class_type): For bitfields copy over the\noriginal type quals.\ngcc/testsuite/ChangeLog:\nPR c++/33984\n* g++.dg/conversion/bitfield7.C: New test.\n* g++.dg/cpp0x/decltype4.C: Fixed xfail.\n\nFrom-SVN: r131751", "tree": {"sha": "7fee3dd0f2bdbe38c84d900eae7e611ffd75e0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fee3dd0f2bdbe38c84d900eae7e611ffd75e0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24030e4c48bd0c2c04981f223616484833c310e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24030e4c48bd0c2c04981f223616484833c310e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24030e4c48bd0c2c04981f223616484833c310e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24030e4c48bd0c2c04981f223616484833c310e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3573f8da197a1d301ad3fb0d2067d6c04634a5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3573f8da197a1d301ad3fb0d2067d6c04634a5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3573f8da197a1d301ad3fb0d2067d6c04634a5f5"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "f9971d4943d6f896ef0a388d45574f4ee0316bbd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -1,3 +1,12 @@\n+2008-01-22  Jakub Jelinek  <jakub@redhat.com>, Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/33984\n+\t* call.c (reference_binding): For bitfields use the declared bitfield\n+\ttype.\n+\t(add_builtin_candidates): Likewise.\n+\t* class.c (layout_class_type): For bitfields copy over the\n+\toriginal type quals.\n+\n 2008-01-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/34912"}, {"sha": "1e591a61ac10f8974e7767a41ac1155e47e46189", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -1,6 +1,6 @@\n /* Functions related to invoking methods and overloaded functions.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) and\n    modified by Brendan Kehoe (brendan@cygnus.com).\n@@ -1114,6 +1114,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n   conversion *conv = NULL;\n   tree to = TREE_TYPE (rto);\n   tree from = rfrom;\n+  tree tfrom;\n   bool related_p;\n   bool compatible_p;\n   cp_lvalue_kind lvalue_p = clk_none;\n@@ -1135,16 +1136,20 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n   else if (expr)\n     lvalue_p = real_lvalue_p (expr);\n \n+  tfrom = from;\n+  if ((lvalue_p & clk_bitfield) != 0)\n+    tfrom = unlowered_expr_type (expr);\n+\n   /* Figure out whether or not the types are reference-related and\n      reference compatible.  We have do do this after stripping\n      references from FROM.  */\n-  related_p = reference_related_p (to, from);\n+  related_p = reference_related_p (to, tfrom);\n   /* If this is a C cast, first convert to an appropriately qualified\n      type, so that we can later do a const_cast to the desired type.  */\n   if (related_p && c_cast_p\n-      && !at_least_as_qualified_p (to, from))\n-    to = build_qualified_type (to, cp_type_quals (from));\n-  compatible_p = reference_compatible_p (to, from);\n+      && !at_least_as_qualified_p (to, tfrom))\n+    to = build_qualified_type (to, cp_type_quals (tfrom));\n+  compatible_p = reference_compatible_p (to, tfrom);\n \n   /* Directly bind reference when target expression's type is compatible with\n      the reference and expression is an lvalue. In DR391, the wording in\n@@ -1171,7 +1176,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n \t is bound to the object represented by the rvalue or to a sub-object\n \t within that object.  */\n \n-      conv = build_identity_conv (from, expr);\n+      conv = build_identity_conv (tfrom, expr);\n       conv = direct_reference_binding (rto, conv);\n \n       if (flags & LOOKUP_PREFER_RVALUE)\n@@ -2084,7 +2089,7 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n   for (i = 0; i < 3; ++i)\n     {\n       if (args[i])\n-\targtypes[i]  = lvalue_type (args[i]);\n+\targtypes[i] = unlowered_expr_type (args[i]);\n       else\n \targtypes[i] = NULL_TREE;\n     }"}, {"sha": "65e7144bfd7d9d100785b29c32d158408f2acd97", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -4795,14 +4795,18 @@ layout_class_type (tree t, tree *virtuals_p)\n \t must be converted to the type given the bitfield here.  */\n       if (DECL_C_BIT_FIELD (field))\n \t{\n-\t  tree ftype;\n \t  unsigned HOST_WIDE_INT width;\n-\t  ftype = TREE_TYPE (field);\n+\t  tree ftype = TREE_TYPE (field);\n \t  width = tree_low_cst (DECL_SIZE (field), /*unsignedp=*/1);\n \t  if (width != TYPE_PRECISION (ftype))\n-\t    TREE_TYPE (field)\n-\t      = c_build_bitfield_integer_type (width,\n-\t\t\t\t\t       TYPE_UNSIGNED (ftype));\n+\t    {\n+\t      TREE_TYPE (field)\n+\t\t= c_build_bitfield_integer_type (width,\n+\t\t\t\t\t\t TYPE_UNSIGNED (ftype));\n+\t      TREE_TYPE (field)\n+\t\t= cp_build_qualified_type (TREE_TYPE (field),\n+\t\t\t\t\t   TYPE_QUALS (ftype));\n+\t    }\n \t}\n \n       /* If we needed additional padding after this field, add it"}, {"sha": "e0e47abbffc1d4eb279cc6868572281a7d681c20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -1,3 +1,9 @@\n+2008-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33984\n+\t* g++.dg/conversion/bitfield7.C: New test.\n+\t* g++.dg/cpp0x/decltype4.C: Fixed xfail.\n+\n 2008-01-23  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \tFrom Michael Frysinger  <michael.frysinger@analog.com>"}, {"sha": "1080168dce19110451e927f89c0fd62034d39a3c", "filename": "gcc/testsuite/g++.dg/conversion/bitfield7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/33984\n+// { dg-do compile }\n+\n+struct S\n+{\n+  unsigned int bar : 3;\n+} s;\n+\n+int foo (unsigned int &);\n+int foo (double);\n+\n+int\n+main ()\n+{\n+  return foo (s.bar);\t\t// { dg-error \"cannot bind bitfield\" }\n+}"}, {"sha": "23a34344e171a1a6a2eec8535090c488e722ea03", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24030e4c48bd0c2c04981f223616484833c310e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype4.C?ref=24030e4c48bd0c2c04981f223616484833c310e2", "patch": "@@ -70,7 +70,7 @@ struct B {\n     CHECK_DECLTYPE(decltype(bit), int);\n     CHECK_DECLTYPE(decltype((bit)), int&);\n     CHECK_DECLTYPE(decltype(cbit), const int);\n-    CHECK_DECLTYPE(decltype((cbit)), const int&); // { dg-bogus \"static assertion failed\" \"GCC gets the actual type of this expression wrong\" { xfail *-*-* } 73 }\n+    CHECK_DECLTYPE(decltype((cbit)), const int&);\n   }\n };\n "}]}