{"sha": "d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyODliZGQ2ZDcxMDJkNWZjMTBmNzgyNzUyYWM4ZGJmYWU2ODgzYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-07-03T20:27:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-07-03T20:27:05Z"}, "message": "inclhack.def (solaris_int_types): New fix.\n\n\t* inclhack.def (solaris_int_types): New fix.\n\t* fixincl.x: Regenerate.\n\t* tests/base/sys/int_types.h: New file.\n\nFrom-SVN: r149209", "tree": {"sha": "22339adc87a7be1c3ca49ef0f7d0883985eab53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22339adc87a7be1c3ca49ef0f7d0883985eab53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/comments", "author": null, "committer": null, "parents": [{"sha": "d73fb533dc652d2201bded0d386093af57810a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73fb533dc652d2201bded0d386093af57810a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73fb533dc652d2201bded0d386093af57810a6f"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "bcdceab967fde8142fe1aebc4a8bc5d3c893b145", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "patch": "@@ -1,3 +1,9 @@\n+2009-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inclhack.def (solaris_int_types): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/sys/int_types.h: New file.\n+\n 2009-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* inclhack.def (darwin_stdint_1, darwin_stdint_2, darwin_stdint_3,"}, {"sha": "f0459b27eaf9cfd1477a668f9771cfbeaea36c5a", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Monday June  8, 2009 at 08:37:38 PM CEST\n+ * It has been AutoGen-ed  Friday July  3, 2009 at 10:27:01 PM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Jun  8 20:37:38 CEST 2009\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Fri Jul  3 22:27:01 CEST 2009\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 195 fixup descriptions.\n+ * This file contains 196 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -6371,6 +6371,48 @@ static const char* apzSolaris_Int_Limits_2Patch[] = {\n     \"^#define[ \\t]+(INT|UINT)_FAST16_(MAX|MIN)[ \\t](INT|UINT)16.*\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Int_Types fix\n+ */\n+tSCC zSolaris_Int_TypesName[] =\n+     \"solaris_int_types\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Int_TypesList[] =\n+  \"sys/int_types.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Int_TypesMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Int_TypesSelect0[] =\n+       \"__STDC__ - 0 == 0\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Int_TypesBypass0[] =\n+       \"_LONGLONG_TYPE\";\n+\n+#define    SOLARIS_INT_TYPES_TEST_CT  2\n+static tTestDesc aSolaris_Int_TypesTests[] = {\n+  { TT_NEGREP,   zSolaris_Int_TypesBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Int_TypesSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Int_Types\n+ */\n+static const char* apzSolaris_Int_TypesPatch[] = {\n+    \"format\",\n+    \"(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Stdio_Tag fix\n@@ -7911,9 +7953,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          237\n+#define REGEX_COUNT          239\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            195\n+#define FIX_COUNT            196\n \n /*\n  *  Enumerate the fixes\n@@ -8076,6 +8118,7 @@ typedef enum {\n     SOLARIS_INT_CONST_FIXIDX,\n     SOLARIS_INT_LIMITS_1_FIXIDX,\n     SOLARIS_INT_LIMITS_2_FIXIDX,\n+    SOLARIS_INT_TYPES_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n     STATSSWTCH_FIXIDX,\n     STDIO_STDARG_H_FIXIDX,\n@@ -8902,6 +8945,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_INT_LIMITS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Int_Limits_2Tests,   apzSolaris_Int_Limits_2Patch, 0 },\n \n+  {  zSolaris_Int_TypesName,    zSolaris_Int_TypesList,\n+     apzSolaris_Int_TypesMachs,\n+     SOLARIS_INT_TYPES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Int_TypesTests,   apzSolaris_Int_TypesPatch, 0 },\n+\n   {  zSolaris_Stdio_TagName,    zSolaris_Stdio_TagList,\n      apzSolaris_Stdio_TagMachs,\n      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,"}, {"sha": "63485b232ec662f80f336290d7be00f7b08e2ecc", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "patch": "@@ -3331,7 +3331,29 @@ fix = {\n \n \n /*\n- * Solaris 2.8 has what appears to be some gross workaround for \n+ * Sun Solaris up to 9 has a version of sys/int_types.h that forbids use\n+ * of Standard C99 64-bit types in 32-bit mode.\n+ */\n+fix = {\n+    hackname  = solaris_int_types;\n+    select    = \"__STDC__ - 0 == 0\";\n+    bypass    = \"_LONGLONG_TYPE\";\n+    files     = sys/int_types.h;\n+    c_fix     = format;\n+    c_fix_arg =\n+    \"(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))\";\n+    test_text =\n+    \"#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\\n\"\n+    \"typedef\tlong long\t\tint64_t;\\n\"\n+    \"#endif\\n\\n\"\n+    \"#if defined(_LP64) || (__STDC__ - 0 == 0 && !defined(_NO_LONGLONG))\\n\"\n+    \"typedef int64_t\t\t\tintmax_t;\\n\"\n+    \"#endif\";\n+};\n+\n+\n+/*\n+ * Sun Solaris 8 has what appears to be some gross workaround for\n  * some old version of their c++ compiler.  G++ doesn't want it\n  * either, but doesn't want to be tied to SunPRO version numbers.\n  */"}, {"sha": "39bb68acd784ebbb5d834ab473033da0ce2cc41b", "filename": "fixincludes/tests/base/sys/int_types.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4289bdd6d7102d5fc10f782752ac8dbfae6883c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_types.h?ref=d4289bdd6d7102d5fc10f782752ac8dbfae6883c", "patch": "@@ -0,0 +1,20 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/sys/int_types.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_INT_TYPES_CHECK )\n+#if (defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__)) && !defined(_NO_LONGLONG)\n+typedef\tlong long\t\tint64_t;\n+#endif\n+\n+#if defined(_LP64) || ((defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__)) && !defined(_NO_LONGLONG))\n+typedef int64_t\t\t\tintmax_t;\n+#endif\n+#endif  /* SOLARIS_INT_TYPES_CHECK */"}]}