{"sha": "7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzZDhiMTk0ODUwY2UxNGQ5NmQ5ZDFhNjhmZGI0MWUxYTE5ZWY3MA==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2013-10-09T11:51:15Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-10-09T11:51:15Z"}, "message": "[AArch64] Implemented vdiv_f64 ADVSimd intrinsic.\n\nFrom-SVN: r203312", "tree": {"sha": "78179913a9efd3762cc04bedd4eb8ce01f955892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78179913a9efd3762cc04bedd4eb8ce01f955892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/comments", "author": null, "committer": null, "parents": [{"sha": "7df625a6166a16c272e797f96382c490fe292eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df625a6166a16c272e797f96382c490fe292eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df625a6166a16c272e797f96382c490fe292eab"}], "stats": {"total": 375, "additions": 375, "deletions": 0}, "files": [{"sha": "cc3c3c1feafd08a3e7bcf058edf5776c53dceb20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "patch": "@@ -1,3 +1,7 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vdiv_f64): Added.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/arm_neon.h (vneg_f32): Asm replaced with C."}, {"sha": "f296c2f202486b3dbbbbfafeb44f659471ff684d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "patch": "@@ -1204,6 +1204,12 @@ vdiv_f32 (float32x2_t __a, float32x2_t __b)\n   return __a / __b;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vdiv_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return __a / __b;\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vdivq_f32 (float32x4_t __a, float32x4_t __b)\n {"}, {"sha": "0fd94f6226ffa058a6026df806bd3d77c0057645", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "patch": "@@ -1,3 +1,7 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vdiv_f.c: New testcase.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vneg_f.c: New testcase."}, {"sha": "cc3a9570c0fac0dcbf38f38314a416cca5e58c6e", "filename": "gcc/testsuite/gcc.target/aarch64/vdiv_f.c", "status": "added", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdiv_f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdiv_f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdiv_f.c?ref=7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "patch": "@@ -0,0 +1,361 @@\n+/* Test vdiv works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+#define FLT_INFINITY (__builtin_inff ())\n+#define DBL_INFINITY (__builtin_inf ())\n+\n+#define NAN (0.0 / 0.0)\n+\n+#define PI 3.141592653589793\n+#define PI_4 0.7853981633974483\n+#define SQRT2 1.4142135623730951\n+#define SQRT1_2 0.7071067811865475\n+\n+#define TESTA0 PI\n+#define TESTA1 -PI\n+#define TESTA2 PI\n+#define TESTA3 -PI\n+#define TESTA4 1.0\n+#define TESTA5 -1.0\n+#define TESTA6 1.0\n+#define TESTA7 -1.0\n+/* 2^25+1, float has 24 significand bits\n+   according to Single-precision floating-point format.  */\n+#define TESTA8_FLT 33554433\n+/* 2^54+1, double has 53 significand bits\n+   according to Double-precision floating-point format.  */\n+#define TESTA8_DBL 18014398509481985\n+#define TESTA9 -TESTA8\n+#define TESTA10 TESTA8\n+#define TESTA11 -TESTA8\n+#define TESTA12 NAN\n+#define TESTA13 1.0\n+#define TESTA14 INFINITY\n+#define TESTA15 -INFINITY\n+#define TESTA16 INFINITY\n+#define TESTA17 9.0\n+#define TESTA18 11.0\n+#define TESTA19 13.0\n+\n+#define TESTB0 4.0\n+#define TESTB1 4.0\n+#define TESTB2 -4.0\n+#define TESTB3 -4.0\n+#define TESTB4 SQRT2\n+#define TESTB5 SQRT2\n+#define TESTB6 -SQRT2\n+#define TESTB7 -SQRT2\n+#define TESTB8 2.0\n+#define TESTB9 2.0\n+#define TESTB10 -2.0\n+#define TESTB11 -2.0\n+#define TESTB12 3.0\n+#define TESTB13 NAN\n+#define TESTB14 5.0\n+#define TESTB15 7.0\n+#define TESTB16 INFINITY\n+#define TESTB17 INFINITY\n+#define TESTB18 -INFINITY\n+#define TESTB19 0\n+\n+#define ANSW0 PI_4\n+#define ANSW1 -PI_4\n+#define ANSW2 -PI_4\n+#define ANSW3 PI_4\n+#define ANSW4 SQRT1_2\n+#define ANSW5 -SQRT1_2\n+#define ANSW6 -SQRT1_2\n+#define ANSW7 SQRT1_2\n+#define ANSW8_FLT 16777216\n+#define ANSW8_DBL 9007199254740992\n+#define ANSW9 -ANSW8\n+#define ANSW10 -ANSW8\n+#define ANSW11 ANSW8\n+#define ANSW12 NAN\n+#define ANSW13 NAN\n+#define ANSW14 INFINITY\n+#define ANSW15 -INFINITY\n+#define ANSW16 NAN\n+#define ANSW17 0\n+#define ANSW18 0\n+#define ANSW19 INFINITY\n+\n+#define CONCAT(a, b) a##b\n+#define CONCAT1(a, b) CONCAT (a, b)\n+#define REG_INFEX64 _\n+#define REG_INFEX128 q_\n+#define REG_INFEX(reg_len) REG_INFEX##reg_len\n+#define POSTFIX(reg_len, data_len) \\\n+  CONCAT1 (REG_INFEX (reg_len), f##data_len)\n+\n+#define DATA_TYPE_32 float\n+#define DATA_TYPE_64 double\n+#define DATA_TYPE(data_len) DATA_TYPE_##data_len\n+\n+#define EPSILON_32 __FLT_EPSILON__\n+#define EPSILON_64 __DBL_EPSILON__\n+#define EPSILON(data_len) EPSILON_##data_len\n+\n+#define INDEX64_32 [i]\n+#define INDEX64_64\n+#define INDEX128_32 [i]\n+#define INDEX128_64 [i]\n+#define INDEX(reg_len, data_len) \\\n+  CONCAT1 (INDEX, reg_len##_##data_len)\n+\n+#define LOAD_INST(reg_len, data_len) \\\n+  CONCAT1 (vld1, POSTFIX (reg_len, data_len))\n+#define DIV_INST(reg_len, data_len) \\\n+  CONCAT1 (vdiv, POSTFIX (reg_len, data_len))\n+\n+#define ABS(a) __builtin_fabs (a)\n+#define ISNAN(a) __builtin_isnan (a)\n+#define FP_equals(a, b, epsilon)\t\t\t\\\n+  (\t\t\t\t\t\t\t\\\n+   ((a) == (b))\t\t\t\t\t\t\\\n+    || (ISNAN (a) && ISNAN (b))\t\t\t\t\\\n+    || (ABS (a - b) < epsilon)\t\t\t\t\\\n+  )\n+\n+#define INHIB_OPTIMIZATION asm volatile (\"\" : : : \"memory\")\n+\n+#define RUN_TEST(a, b, c, testseta, testsetb, answset, count,\t\t\\\n+\t\t reg_len, data_len, n)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+  INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n+  (a) = LOAD_INST (reg_len, data_len) (testseta[count]);\t\t\\\n+  (b) = LOAD_INST (reg_len, data_len) (testsetb[count]);\t\t\\\n+  (c) = LOAD_INST (reg_len, data_len) (answset[count]);\t\t\t\\\n+  INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n+  (a) = DIV_INST (reg_len, data_len) (a, b);\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    INHIB_OPTIMIZATION;\t\t\t\t\t\t\t\\\n+    if (!FP_equals ((a) INDEX (reg_len, data_len),\t\t\t\\\n+\t\t    (c) INDEX (reg_len, data_len),\t\t\t\\\n+\t\t    EPSILON (data_len)))\t\t\t\t\\\n+      return 1;\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+extern void abort (void);\n+\n+#define TESTA8 TESTA8_FLT\n+#define ANSW8 ANSW8_FLT\n+#define INFINITY FLT_INFINITY\n+\n+int\n+test_vdiv_f32 ()\n+{\n+  int count;\n+  float32x2_t a;\n+  float32x2_t b;\n+  float32x2_t c;\n+\n+  float32_t testseta[10][2] = {\n+    { TESTA0, TESTA1 }, { TESTA2, TESTA3 },\n+    { TESTA4, TESTA5 }, { TESTA6, TESTA7 },\n+    { TESTA8, TESTA9 }, { TESTA10, TESTA11 },\n+    { TESTA12, TESTA13 }, { TESTA14, TESTA15 },\n+    { TESTA16, TESTA17 }, { TESTA18, TESTA19 }\n+  };\n+\n+  float32_t testsetb[10][2] = {\n+    { TESTB0, TESTB1 }, { TESTB2, TESTB3 },\n+    { TESTB4, TESTB5 }, { TESTB6, TESTB7 },\n+    { TESTB8, TESTB9 }, { TESTB10, TESTB11 },\n+    { TESTB12, TESTB13 }, { TESTB14, TESTB15 },\n+    { TESTB16, TESTB17 }, { TESTB18, TESTB19 }\n+  };\n+\n+  float32_t answset[10][2] = {\n+    { ANSW0, ANSW1 }, { ANSW2, ANSW3 },\n+    { ANSW4, ANSW5 }, { ANSW6, ANSW7 },\n+    { ANSW8, ANSW9 }, { ANSW10, ANSW11 },\n+    { ANSW12, ANSW13 }, { ANSW14, ANSW15 },\n+    { ANSW16, ANSW17 }, { ANSW18, ANSW19 }\n+  };\n+\n+  for (count = 0; count < 10; count++)\n+    {\n+      RUN_TEST (a, b, c, testseta, testsetb, answset, count, 64, 32, 2);\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fdiv\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n+\n+#undef TESTA8\n+#undef ANSW8\n+#undef INFINITY\n+\n+#define TESTA8 TESTA8_DBL\n+#define ANSW8 ANSW8_DBL\n+#define INFINITY DBL_INFINITY\n+\n+int\n+test_vdiv_f64 ()\n+{\n+  int count;\n+  float64x1_t a;\n+  float64x1_t b;\n+  float64x1_t c;\n+\n+  float64_t testseta[20][1] = {\n+    { TESTA0 }, { TESTA1 }, { TESTA2 }, { TESTA3 },\n+    { TESTA4 }, { TESTA5 }, { TESTA6 }, { TESTA7 },\n+    { TESTA8 }, { TESTA9 }, { TESTA10 }, { TESTA11 },\n+    { TESTA12 }, { TESTA13 }, { TESTA14 }, { TESTA15 },\n+    { TESTA16 }, { TESTA17 }, { TESTA18 }, { TESTA19 }\n+  };\n+\n+  float64_t testsetb[20][1] = {\n+    { TESTB0 }, { TESTB1 }, { TESTB2 }, { TESTB3 },\n+    { TESTB4 }, { TESTB5 }, { TESTB6 }, { TESTB7 },\n+    { TESTB8 }, { TESTB9 }, { TESTB10 }, { TESTB11 },\n+    { TESTB12 }, { TESTB13 }, { TESTB14 }, { TESTB15 },\n+    { TESTB16 }, { TESTB17 }, { TESTB18 }, { TESTB19 }\n+  };\n+\n+  float64_t answset[20][1] = {\n+    { ANSW0 }, { ANSW1 }, { ANSW2 }, { ANSW3 },\n+    { ANSW4 }, { ANSW5 }, { ANSW6 }, { ANSW7 },\n+    { ANSW8 }, { ANSW9 }, { ANSW10 }, { ANSW11 },\n+    { ANSW12 }, { ANSW13 }, { ANSW14 }, { ANSW15 },\n+    { ANSW16 }, { ANSW17 }, { ANSW18 }, { ANSW19 }\n+  };\n+\n+  for (count = 0; count < 20; count++)\n+    {\n+      RUN_TEST (a, b, c, testseta, testsetb, answset, count, 64, 64, 1);\n+    }\n+  return 0;\n+}\n+\n+/* The following assembly should match 2 more times,\n+   in 64bit NAN generation.  */\n+/* { dg-final { scan-assembler-times \"fdiv\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+\n+#undef TESTA8\n+#undef ANSW8\n+#undef INFINITY\n+\n+#define TESTA8 TESTA8_FLT\n+#define ANSW8 ANSW8_FLT\n+#define INFINITY FLT_INFINITY\n+\n+int\n+test_vdivq_f32 ()\n+{\n+  int count;\n+  float32x4_t a;\n+  float32x4_t b;\n+  float32x4_t c;\n+\n+  float32_t testseta[5][4] = {\n+    { TESTA0, TESTA1, TESTA2, TESTA3 },\n+    { TESTA4, TESTA5, TESTA6, TESTA7 },\n+    { TESTA8, TESTA9, TESTA10, TESTA11 },\n+    { TESTA12, TESTA13, TESTA14, TESTA15 },\n+    { TESTA16, TESTA17, TESTA18, TESTA19 }\n+  };\n+\n+  float32_t testsetb[5][4] = {\n+    { TESTB0, TESTB1, TESTB2, TESTB3 },\n+    { TESTB4, TESTB5, TESTB6, TESTB7 },\n+    { TESTB8, TESTB9, TESTB10, TESTB11 },\n+    { TESTB12, TESTB13, TESTB14, TESTB15 },\n+    { TESTB16, TESTB17, TESTB18, TESTB19 }\n+  };\n+\n+  float32_t answset[5][4] = {\n+    { ANSW0, ANSW1, ANSW2, ANSW3 },\n+    { ANSW4, ANSW5, ANSW6, ANSW7 },\n+    { ANSW8, ANSW9, ANSW10, ANSW11 },\n+    { ANSW12, ANSW13, ANSW14, ANSW15 },\n+    { ANSW16, ANSW17, ANSW18, ANSW19 }\n+  };\n+\n+  for (count = 0; count < 5; count++)\n+    {\n+      RUN_TEST (a, b, c, testseta, testsetb, answset, count, 128, 32, 4);\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fdiv\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+#undef TESTA8\n+#undef ANSW8\n+#undef INFINITY\n+\n+#define TESTA8 TESTA8_DBL\n+#define ANSW8 ANSW8_DBL\n+#define INFINITY DBL_INFINITY\n+\n+int\n+test_vdivq_f64 ()\n+{\n+  int count;\n+  float64x2_t a;\n+  float64x2_t b;\n+  float64x2_t c;\n+\n+  float64_t testseta[10][2] = {\n+    { TESTA0, TESTA1 }, { TESTA2, TESTA3 },\n+    { TESTA4, TESTA5 }, { TESTA6, TESTA7 },\n+    { TESTA8, TESTA9 }, { TESTA10, TESTA11 },\n+    { TESTA12, TESTA13 }, { TESTA14, TESTA15 },\n+    { TESTA16, TESTA17 }, { TESTA18, TESTA19 }\n+  };\n+\n+  float64_t testsetb[10][2] = {\n+    { TESTB0, TESTB1 }, { TESTB2, TESTB3 },\n+    { TESTB4, TESTB5 }, { TESTB6, TESTB7 },\n+    { TESTB8, TESTB9 }, { TESTB10, TESTB11 },\n+    { TESTB12, TESTB13 }, { TESTB14, TESTB15 },\n+    { TESTB16, TESTB17 }, { TESTB18, TESTB19 }\n+  };\n+\n+  float64_t answset[10][2] = {\n+    { ANSW0, ANSW1 }, { ANSW2, ANSW3 },\n+    { ANSW4, ANSW5 }, { ANSW6, ANSW7 },\n+    { ANSW8, ANSW9 }, { ANSW10, ANSW11 },\n+    { ANSW12, ANSW13 }, { ANSW14, ANSW15 },\n+    { ANSW16, ANSW17 }, { ANSW18, ANSW19 }\n+  };\n+\n+  for (count = 0; count < 10; count++)\n+    {\n+      RUN_TEST (a, b, c, testseta, testsetb, answset, count, 128, 64, 2);\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fdiv\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (test_vdiv_f32 ())\n+    abort ();\n+\n+  if (test_vdiv_f64 ())\n+    abort ();\n+\n+  if (test_vdivq_f32 ())\n+    abort ();\n+\n+  if (test_vdivq_f64 ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}