{"sha": "6700a2857f28074b6b388e6394a1c2599bfb7c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwMGEyODU3ZjI4MDc0YjZiMzg4ZTYzOTRhMWMyNTk5YmZiN2MxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-01-14T22:32:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-01-14T22:32:24Z"}, "message": "re PR c++/42701 (ICE on error recovery)\n\n\tPR c++/42701\n\t* call.c (build_new_method_call): Don't free the vec here.\n\nFrom-SVN: r155916", "tree": {"sha": "da9b41ceca118191db9181a606d584a5a1aabff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9b41ceca118191db9181a606d584a5a1aabff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6700a2857f28074b6b388e6394a1c2599bfb7c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6700a2857f28074b6b388e6394a1c2599bfb7c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6700a2857f28074b6b388e6394a1c2599bfb7c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6700a2857f28074b6b388e6394a1c2599bfb7c17/comments", "author": null, "committer": null, "parents": [{"sha": "2d1a618e84eaf3e747a1cf5bd6f936c91edc8374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1a618e84eaf3e747a1cf5bd6f936c91edc8374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1a618e84eaf3e747a1cf5bd6f936c91edc8374"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "c6e309f6820619aac4c7016f000bc7f6de9d4bff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6700a2857f28074b6b388e6394a1c2599bfb7c17", "patch": "@@ -1,5 +1,8 @@\n 2010-01-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/42701\n+\t* call.c (build_new_method_call): Don't free the vec here.\n+\n \tPR c++/42655\n \t* call.c (convert_like_real): Do full decay_conversion for ck_rvalue.\n "}, {"sha": "54254c37f1d82d33d7fb0841ad082b77af54d42f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6700a2857f28074b6b388e6394a1c2599bfb7c17", "patch": "@@ -6256,11 +6256,10 @@ build_new_method_call (tree instance, tree fns, VEC(tree,gc) **args,\n       permerror (input_location,\n \t\t \"cannot call constructor %<%T::%D%> directly\",\n \t\t basetype, name);\n-      inform (input_location, \"for a function-style cast, remove the \"\n-\t      \"redundant %<::%D%>\", name);\n+      permerror (input_location, \"  for a function-style cast, remove the \"\n+\t\t \"redundant %<::%D%>\", name);\n       call = build_functional_cast (basetype, build_tree_list_vec (user_args),\n \t\t\t\t    complain);\n-      release_tree_vector (user_args);\n       return call;\n     }\n "}, {"sha": "7c89ccde3bdeb83610c7a64477933f96e4d1b945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6700a2857f28074b6b388e6394a1c2599bfb7c17", "patch": "@@ -1,12 +1,15 @@\n 2010-01-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/42701\n+\t* g++.dg/overload/error3.C: New.\n+\n \tPR c++/42655\n \t* g++.dg/overload/rvalue1.C: New.\n \n 2010-01-14  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/42706\n-\t* gcc.dg/ipa/pr42706.c: New testcase.\t\n+\t* gcc.dg/ipa/pr42706.c: New testcase.\n \n 2010-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "e0003dd88131be682bbbdb87175af28fe6db5b4d", "filename": "gcc/testsuite/g++.dg/overload/error3.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6700a2857f28074b6b388e6394a1c2599bfb7c17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C?ref=6700a2857f28074b6b388e6394a1c2599bfb7c17", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/42701\n+// Test for error-recovery on code that is ill-formed by DR 147.\n+\n+namespace Glib {\n+    class ustring {\n+    public:\n+        typedef unsigned size_type;\n+        ustring(const char* src, size_type n);\n+        ustring(const char* src);\n+    };\n+}\n+namespace Gdk {\n+    class Color {\n+    public:\n+        explicit Color(const Glib::ustring& value);\n+    };\n+}\n+namespace Gtk {\n+    enum StateType { STATE_NORMAL };\n+    class Widget   {\n+    public:\n+        void modify_bg(StateType state, const Gdk::Color& color);\n+    };\n+    class Label {\n+    public:\n+        void set_text(const Glib::ustring &str);\n+    };\n+}\n+typedef enum Result { eSuccess = 0 } Result;\n+class MainWindow  {\n+    void update_status(Result result);\n+    Gtk::Widget status_frame;\n+    Gtk::Label status_label;\n+};\n+void MainWindow::update_status(Result result) {\n+    switch (result) {\n+        status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"green\")); // { dg-error \"\" }\n+        status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"red\")); // { dg-error \"\" }\n+        status_label.set_text(\"Out of memory\");\n+    }\n+}"}]}