{"sha": "b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA4ZTBlZTMwMThmMmI1Y2JkYTdlNmU1NDMyOGY4ZTBiMjAzZTRiZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-19T11:28:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-19T12:27:55Z"}, "message": "refactor reassocs get_rank\n\nThis refactors things so assigned ranks are dumped and the cache\nis consistently used also for PHIs.\n\n2020-11-19  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-reassoc.c (get_rank): Refactor to consistently\n\tuse the cache and dump ranks assigned.", "tree": {"sha": "8ae0963c1183a0f8be85d79d8bee2a43dd1ab975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae0963c1183a0f8be85d79d8bee2a43dd1ab975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8cf89767492a41b0f76e0aa302dddee4e1b3434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cf89767492a41b0f76e0aa302dddee4e1b3434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cf89767492a41b0f76e0aa302dddee4e1b3434"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "89adafae32c002fa96be814172fb8c109948eb01", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b08e0ee3018f2b5cbda7e6e54328f8e0b203e4be", "patch": "@@ -425,41 +425,43 @@ get_rank (tree e)\n       long rank;\n       tree op;\n \n-      if (SSA_NAME_IS_DEFAULT_DEF (e))\n-\treturn find_operand_rank (e);\n-\n-      stmt = SSA_NAME_DEF_STMT (e);\n-      if (gimple_code (stmt) == GIMPLE_PHI)\n-\treturn phi_rank (stmt);\n-\n-      if (!is_gimple_assign (stmt))\n-\treturn bb_rank[gimple_bb (stmt)->index];\n-\n       /* If we already have a rank for this expression, use that.  */\n       rank = find_operand_rank (e);\n       if (rank != -1)\n \treturn rank;\n \n-      /* Otherwise, find the maximum rank for the operands.  As an\n-\t exception, remove the bias from loop-carried phis when propagating\n-\t the rank so that dependent operations are not also biased.  */\n-      /* Simply walk over all SSA uses - this takes advatage of the\n-         fact that non-SSA operands are is_gimple_min_invariant and\n-\t thus have rank 0.  */\n-      rank = 0;\n-      FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n-\trank = propagate_rank (rank, op);\n+      stmt = SSA_NAME_DEF_STMT (e);\n+      if (gimple_code (stmt) == GIMPLE_PHI)\n+\trank = phi_rank (stmt);\n+\n+      else if (!is_gimple_assign (stmt))\n+\trank = bb_rank[gimple_bb (stmt)->index];\n+\n+      else\n+\t{\n+\t  /* Otherwise, find the maximum rank for the operands.  As an\n+\t     exception, remove the bias from loop-carried phis when propagating\n+\t     the rank so that dependent operations are not also biased.  */\n+\t  /* Simply walk over all SSA uses - this takes advatage of the\n+\t     fact that non-SSA operands are is_gimple_min_invariant and\n+\t     thus have rank 0.  */\n+\t  rank = 0;\n+\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n+\t    rank = propagate_rank (rank, op);\n+\n+\t  rank += 1;\n+\t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Rank for \");\n \t  print_generic_expr (dump_file, e);\n-\t  fprintf (dump_file, \" is %ld\\n\", (rank + 1));\n+\t  fprintf (dump_file, \" is %ld\\n\", rank);\n \t}\n \n       /* Note the rank in the hashtable so we don't recompute it.  */\n-      insert_operand_rank (e, (rank + 1));\n-      return (rank + 1);\n+      insert_operand_rank (e, rank);\n+      return rank;\n     }\n \n   /* Constants, globals, etc., are rank 0 */"}]}