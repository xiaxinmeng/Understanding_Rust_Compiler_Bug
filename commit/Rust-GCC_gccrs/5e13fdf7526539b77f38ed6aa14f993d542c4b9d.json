{"sha": "5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxM2ZkZjc1MjY1MzliNzdmMzhlZDZhYTE0Zjk5M2Q1NDJjNGI5ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-10-30T18:14:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-10-30T18:14:15Z"}, "message": "re PR tree-optimization/24172 (error: incorrect sharing of tree nodes)\n\n\tPR tree-optimization/24172\n\t* tree-inline.c (copy_body_r): Unshare the substituted value first.\n\t* g++.dg/tree-ssa/pr24172.C: New testcase.\n\nFrom-SVN: r106247", "tree": {"sha": "547504d63ebc99e12b881ae303cb2482daa00135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/547504d63ebc99e12b881ae303cb2482daa00135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/comments", "author": null, "committer": null, "parents": [{"sha": "25d8f0a2839a99417ab79879fb55f2ead76fcf2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d8f0a2839a99417ab79879fb55f2ead76fcf2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d8f0a2839a99417ab79879fb55f2ead76fcf2a"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "56ab4272dcbc5e4c6c4e0879e94b3ddcef6cda67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "patch": "@@ -1,3 +1,8 @@\n+2005-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/24172\n+\t* tree-inline.c (copy_body_r): Unshare the substituted value first.\n+\n 2005-10-30  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.c (mmix_intval): Correct handling of DFmode"}, {"sha": "26acd54f9ceb8b366fd935475f93806c0fb19dbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "patch": "@@ -1,3 +1,7 @@\n+2005-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/tree-ssa/pr24172.C: New testcase.\n+\n 2005-10-30  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.dg/enum_10.f90, gfortran.dg/enum_10.c: New test."}, {"sha": "245186a3c50b23bfa1ea87b8711d254c8fb85dea", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr24172.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr24172.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr24172.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr24172.C?ref=5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-O2\" }\n+void IOException( char);\n+inline int* dummy( const char* const mode )\n+{\n+  IOException(*mode+*mode);\n+}\n+\n+void prepare_inpaint( )\n+{\n+  dummy (\"rb\");\n+}"}, {"sha": "228252fd7090ba6a0cc2c59b49c6c045694968fb", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e13fdf7526539b77f38ed6aa14f993d542c4b9d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5e13fdf7526539b77f38ed6aa14f993d542c4b9d", "patch": "@@ -639,20 +639,22 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t  n = splay_tree_lookup (id->decl_map, (splay_tree_key) decl);\n \t  if (n)\n \t    {\n+\t      tree new;\n \t      /* If we happen to get an ADDR_EXPR in n->value, strip\n \t         it manually here as we'll eventually get ADDR_EXPRs\n \t\t which lie about their types pointed to.  In this case\n \t\t build_fold_indirect_ref wouldn't strip the INDIRECT_REF,\n \t\t but we absolutely rely on that.  As fold_indirect_ref\n \t         does other useful transformations, try that first, though.  */\n \t      tree type = TREE_TYPE (TREE_TYPE ((tree)n->value));\n-\t      *tp = fold_indirect_ref_1 (type, (tree)n->value);\n+\t      new = unshare_expr ((tree)n->value);\n+\t      *tp = fold_indirect_ref_1 (type, new);\n \t      if (! *tp)\n \t        {\n-\t\t  if (TREE_CODE ((tree)n->value) == ADDR_EXPR)\n-\t\t    *tp = TREE_OPERAND ((tree)n->value, 0);\n+\t\t  if (TREE_CODE (new) == ADDR_EXPR)\n+\t\t    *tp = TREE_OPERAND (new, 0);\n \t          else\n-\t            *tp = build1 (INDIRECT_REF, type, (tree)n->value);\n+\t            *tp = build1 (INDIRECT_REF, type, new);\n \t\t}\n \t      *walk_subtrees = 0;\n \t      return NULL;"}]}