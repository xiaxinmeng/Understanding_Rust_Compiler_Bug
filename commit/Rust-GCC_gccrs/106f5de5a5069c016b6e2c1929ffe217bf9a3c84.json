{"sha": "106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2ZjVkZTVhNTA2OWMwMTZiNmUyYzE5MjlmZmUyMTdiZjlhM2M4NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-11-04T20:11:13Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-04T20:11:13Z"}, "message": "re PR tree-optimization/18184 (Tree optimizers ignore pointer modes)\n\nChangeLog:\n\n\tPR tree-optimization/18184\n\t* c-typeck.c (comptypes): Do not treat pointers of different\n\tmodes or alias-all flags as equivalent.\n\t* tree-ssa.c (tree_ssa_useless_type_conversion_1): Likewise.\n\ncp/ChangeLog:\n\n\tPR tree-optimization/18184\n\t* cp-objcp-common.c (cxx_types_compatible_p): Do not treat pointers\n\tof different modes or alias-all flags as equivalent.\n\t* typeck.c (comptypes): Likewise.\n\nFrom-SVN: r90078", "tree": {"sha": "0db24bfe2b9a4c70fca52c98ad9f0fd1dd54004d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db24bfe2b9a4c70fca52c98ad9f0fd1dd54004d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/comments", "author": null, "committer": null, "parents": [{"sha": "ac8b3d9d72d430fb12d78f51938eb57cfa860754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8b3d9d72d430fb12d78f51938eb57cfa860754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8b3d9d72d430fb12d78f51938eb57cfa860754"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "23123f29e97c437727be07330aa0a914217e47d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -1,3 +1,10 @@\n+2004-11-04  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR tree-optimization/18184\n+\t* c-typeck.c (comptypes): Do not treat pointers of different\n+\tmodes or alias-all flags as equivalent.\n+\t* tree-ssa.c (tree_ssa_useless_type_conversion_1): Likewise.\n+\n 2004-11-04  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* doc/gty.texi, doc/makefile.texi, doc/sourcebuild.texi: Don't"}, {"sha": "723bd5affc11902592a850511b32859046041a5b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -659,6 +659,10 @@ comptypes (tree type1, tree type2)\n \t   protocol qualifiers may be involved.  */\n       if (c_dialect_objc () && (val = objc_comptypes (t1, t2, 0)) >= 0)\n \tbreak;\n+      /* Do not remove mode or aliasing information.  */\n+      if (TYPE_MODE (t1) != TYPE_MODE (t2)\n+\t  || TYPE_REF_CAN_ALIAS_ALL (t1) != TYPE_REF_CAN_ALIAS_ALL (t2))\n+\tbreak;\n       val = (TREE_TYPE (t1) == TREE_TYPE (t2)\n \t     ? 1 : comptypes (TREE_TYPE (t1), TREE_TYPE (t2)));\n       break;"}, {"sha": "73fba486a0e22c7eae8e33e3773c99b891cba3c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -1,3 +1,10 @@\n+2004-11-04  Ulrich Weigand  <uweigand@de.ibm.com>\n+\t\n+\tPR tree-optimization/18184\n+\t* cp-objcp-common.c (cxx_types_compatible_p): Do not treat pointers\n+\tof different modes or alias-all flags as equivalent.\n+\t* typeck.c (comptypes): Likewise.\n+\n 2004-11-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tDR 49, 100"}, {"sha": "9938b98f535e6723945d2e4a8a6b07280d1311c8", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -162,6 +162,8 @@ cxx_types_compatible_p (tree x, tree y)\n      interchangeable.  FIXME should we try to replace all references with\n      pointers?  */\n   if (POINTER_TYPE_P (x) && POINTER_TYPE_P (y)\n+      && TYPE_MODE (x) == TYPE_MODE (y)\n+      && TYPE_REF_CAN_ALIAS_ALL (x) == TYPE_REF_CAN_ALIAS_ALL (y)\n       && same_type_p (TREE_TYPE (x), TREE_TYPE (y)))\n     return 1;\n "}, {"sha": "384b1d13bd6174b22a72e6dcfad90d1e82754dd0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -1030,11 +1030,13 @@ comptypes (tree t1, tree t2, int strict)\n       if (!comptypes (TYPE_OFFSET_BASETYPE (t1), TYPE_OFFSET_BASETYPE (t2),\n \t\t      strict & ~COMPARE_REDECLARATION))\n \treturn false;\n-      /* Fall through.  */\n+      return same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      return same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n+      return TYPE_MODE (t1) == TYPE_MODE (t2)\n+\t     && TYPE_REF_CAN_ALIAS_ALL (t1) == TYPE_REF_CAN_ALIAS_ALL (t2)\n+\t     && same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n \n     case METHOD_TYPE:\n     case FUNCTION_TYPE:"}, {"sha": "0e15eee2edf06d84c13ee804700b6e377fde49eb", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106f5de5a5069c016b6e2c1929ffe217bf9a3c84/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=106f5de5a5069c016b6e2c1929ffe217bf9a3c84", "patch": "@@ -834,13 +834,19 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n      implement the ABI.  */\n   else if (POINTER_TYPE_P (inner_type)\n            && POINTER_TYPE_P (outer_type)\n+\t   && TYPE_MODE (inner_type) == TYPE_MODE (outer_type)\n+\t   && TYPE_REF_CAN_ALIAS_ALL (inner_type)\n+\t      == TYPE_REF_CAN_ALIAS_ALL (outer_type)\n \t   && TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n     return true;\n \n   /* Pointers and references are equivalent once we get to GENERIC,\n      so strip conversions that just switch between them.  */\n   else if (POINTER_TYPE_P (inner_type)\n            && POINTER_TYPE_P (outer_type)\n+\t   && TYPE_MODE (inner_type) == TYPE_MODE (outer_type)\n+\t   && TYPE_REF_CAN_ALIAS_ALL (inner_type)\n+\t      == TYPE_REF_CAN_ALIAS_ALL (outer_type)\n            && lang_hooks.types_compatible_p (TREE_TYPE (inner_type),\n \t\t\t\t\t     TREE_TYPE (outer_type)))\n     return true;"}]}