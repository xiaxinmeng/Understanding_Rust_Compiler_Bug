{"sha": "790ecf853295e25cdd3f92113bc9dca1cf143040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkwZWNmODUzMjk1ZTI1Y2RkM2Y5MjExM2JjOWRjYTFjZjE0MzA0MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-16T19:49:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-16T19:49:19Z"}, "message": "PR c++/79502 - lost nodiscard attribute\n\n\t* pt.c (apply_late_template_attributes): Do apply non-dependent\n\tattributes to types.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r245516", "tree": {"sha": "46815e5e2d7e39820e47d6fbf4a625d01bb9f081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46815e5e2d7e39820e47d6fbf4a625d01bb9f081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/790ecf853295e25cdd3f92113bc9dca1cf143040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790ecf853295e25cdd3f92113bc9dca1cf143040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790ecf853295e25cdd3f92113bc9dca1cf143040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790ecf853295e25cdd3f92113bc9dca1cf143040/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbd0ef6d89f370c51b29f22b8da07ad446192eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbd0ef6d89f370c51b29f22b8da07ad446192eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbd0ef6d89f370c51b29f22b8da07ad446192eee"}], "stats": {"total": 116, "additions": 107, "deletions": 9}, "files": [{"sha": "11ef3209519a72ffae72d18a5ac7d3e5b47dbc78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -1,3 +1,10 @@\n+2017-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79502 - lost nodiscard attribute\n+\t* pt.c (apply_late_template_attributes): Do apply non-dependent\n+\tattributes to types.\n+\n 2017-02-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/78572 - ICE with self-modifying array initializer"}, {"sha": "73d6be3598ff6f32a462ebdb927863b58bbef583", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -10073,29 +10073,43 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n   tree t;\n   tree *p;\n \n-  for (t = attributes; t; t = TREE_CHAIN (t))\n-    if (ATTR_IS_DEPENDENT (t))\n-      {\n-\tlast_dep = t;\n-\tattributes = copy_list (attributes);\n-\tbreak;\n-      }\n+  if (attributes == NULL_TREE)\n+    return;\n \n   if (DECL_P (*decl_p))\n     {\n       if (TREE_TYPE (*decl_p) == error_mark_node)\n \treturn;\n       p = &DECL_ATTRIBUTES (*decl_p);\n+      /* DECL_ATTRIBUTES comes from copy_node in tsubst_decl, and is identical\n+         to our attributes parameter.  */\n+      gcc_assert (*p == attributes);\n     }\n   else\n-    p = &TYPE_ATTRIBUTES (*decl_p);\n+    {\n+      p = &TYPE_ATTRIBUTES (*decl_p);\n+      /* TYPE_ATTRIBUTES was set up (with abi_tag and may_alias) in\n+\t lookup_template_class_1, and should be preserved.  */\n+      gcc_assert (*p != attributes);\n+      while (*p)\n+\tp = &TREE_CHAIN (*p);\n+    }\n+\n+  for (t = attributes; t; t = TREE_CHAIN (t))\n+    if (ATTR_IS_DEPENDENT (t))\n+      {\n+\tlast_dep = t;\n+\tattributes = copy_list (attributes);\n+\tbreak;\n+      }\n \n+  *p = attributes;\n   if (last_dep)\n     {\n       tree late_attrs = NULL_TREE;\n       tree *q = &late_attrs;\n \n-      for (*p = attributes; *p; )\n+      for (; *p; )\n \t{\n \t  t = *p;\n \t  if (ATTR_IS_DEPENDENT (t))"}, {"sha": "e5817c3d9fa255fa9b5d2af809b2e7f11bbfacd7", "filename": "gcc/testsuite/g++.dg/cpp0x/attrib54.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib54.C?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+\n+inline namespace N __attribute__((__abi_tag__ (\"foo\"))) {}\n+template <typename> struct A {};\n+namespace N {\n+template <typename> class B {};\n+}\n+template <typename T> class __attribute__((__aligned__ (sizeof (T)))) C {};\n+template <typename> struct D {\n+  template <typename _Up> using G = C<_Up>;\n+};\n+template <typename T> struct F {\n+  template <typename U> struct H {\n+    typedef typename D<T>::template G<U> I;\n+  };\n+};\n+template <typename T, typename = C<T>> struct J {\n+  C<A<const B<char>>> L;\n+  typedef F<C<int>>::H<A<const B<char>>>::I M;\n+  J<M> *a;\n+};"}, {"sha": "79d0c8ccc469987fd95ae0f20f5be65a86e9f04f", "filename": "gcc/testsuite/g++.dg/cpp0x/attrib55.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fattrib55.C?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+\n+inline namespace N __attribute__((__abi_tag__ (\"foo\"))) {}\n+template <typename> struct A {};\n+namespace N {\n+template <typename> class B {};\n+}\n+template <typename T> class __attribute__((__unused__)) C {};\n+template <typename> struct D {\n+  template <typename _Up> using G = C<_Up>;\n+};\n+template <typename T> struct F {\n+  template <typename U> struct H {\n+    typedef typename D<T>::template G<U> I;\n+  };\n+};\n+template <typename T, typename = C<T>> struct J {\n+  C<A<const B<char>>> L;\n+  typedef F<C<int>>::H<A<const B<char>>>::I M;\n+  J<M> *a;\n+};"}, {"sha": "8a95c9477980e2a81180bca8879266fb0bd2d4c4", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard4.C?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/79502\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct [[nodiscard]] missiles {};\n+\n+missiles<void> make() { return {}; }\n+missiles<void> (*fnptr)() = make;\n+\n+int main()\n+{\n+  make();\t// { dg-warning \"ignoring returned value of type\" }\n+  fnptr();\t// { dg-warning \"ignoring returned value of type\" }\n+}"}, {"sha": "408433dd2f265c3019b086e1e52171431754c101", "filename": "gcc/testsuite/g++.dg/ext/attrib53.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790ecf853295e25cdd3f92113bc9dca1cf143040/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib53.C?ref=790ecf853295e25cdd3f92113bc9dca1cf143040", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+\n+inline namespace N __attribute__((__abi_tag__ (\"foo\"))) {}\n+template <typename> struct A;\n+namespace N {\n+template <typename> class B;\n+}\n+template <typename> class C {};\n+template <typename> struct D {\n+  template <typename _Up> using G = C<_Up>;\n+};\n+template <typename T> struct F {\n+  template <typename U> struct H {\n+    typedef typename D<T>::template G<U> I;\n+  };\n+};\n+template <typename T, typename = C<T>> struct J {\n+  C<A<const B<char>>> L;\n+  typedef F<C<int>>::H<A<const B<char>>>::I M;\n+  J<M> *a;\n+};"}]}