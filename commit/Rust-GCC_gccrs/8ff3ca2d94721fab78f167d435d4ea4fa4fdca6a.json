{"sha": "8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "node_id": "C_kwDOANBUbNoAKDhmZjNjYTJkOTQ3MjFmYWI3OGYxNjdkNDM1ZDRlYTRmYTRmZGNhNmE", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-23T13:55:08Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-03-21T16:47:25Z"}, "message": "libstdc++: Fix simd compilation with Clang\n\nClang fails to compile some constant expressions involving simd.\nTherefore, just disable this non-conforming extension for clang.\n\nFix AVX512 blend implementation for Clang. It was converting the bitmask\nto bool before, which is obviously wrong. Instead use a Clang builtin to\nconvert the bitmask to vector-mask before using a vector blend ?:. A\nsimilar change is required for the masked unary implementation, because\nthe GCC builtins do not exist on Clang.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_detail.h: Don't declare the\n\tsimd API as constexpr with Clang.\n\t* include/experimental/bits/simd_x86.h (__movm): New.\n\t(_S_blend_avx512): Resolve FIXME. Implement blend using __movm\n\tand ?:.\n\t(_SimdImplX86::_S_masked_unary): Clang does not implement the\n\tsame builtins. Implement the function using __movm, ?:, and -\n\toperators on vector_size types instead.", "tree": {"sha": "d68b0e73a0fc3fe8eb53bab4903cb8f7be5a0f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d68b0e73a0fc3fe8eb53bab4903cb8f7be5a0f82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041a164ec9b467f9ac2f15980f83f17e3f8ea150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041a164ec9b467f9ac2f15980f83f17e3f8ea150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041a164ec9b467f9ac2f15980f83f17e3f8ea150"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "49b94decf0aa9c41b745bb553d9a26c70709a003", "filename": "libstdc++-v3/include/experimental/bits/simd_detail.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h?ref=8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "patch": "@@ -267,7 +267,7 @@\n #define _GLIBCXX_SIMD_IS_UNLIKELY(__x) __builtin_expect(__x, 0)\n #define _GLIBCXX_SIMD_IS_LIKELY(__x) __builtin_expect(__x, 1)\n \n-#if defined __STRICT_ANSI__ && __STRICT_ANSI__\n+#if __STRICT_ANSI__ || defined __clang__\n #define _GLIBCXX_SIMD_CONSTEXPR\n #define _GLIBCXX_SIMD_USE_CONSTEXPR_API const\n #else"}, {"sha": "7b8f1c664b3e78885e0d67a64083bdf9d15d9eef", "filename": "libstdc++-v3/include/experimental/bits/simd_x86.h", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_x86.h?ref=8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a", "patch": "@@ -363,6 +363,53 @@ template <typename _Tp>\n \n // }}}\n \n+#ifdef __clang__\n+template <size_t _Np, typename _Tp, typename _Kp>\n+  _GLIBCXX_SIMD_INTRINSIC constexpr auto\n+  __movm(_Kp __k) noexcept\n+  {\n+    static_assert(is_unsigned_v<_Kp>);\n+    if constexpr (sizeof(_Tp) == 1 && __have_avx512bw)\n+      {\n+\tif constexpr (_Np <= 16 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2b128(__k);\n+\telse if constexpr (_Np <= 32 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2b256(__k);\n+\telse\n+\t  return __builtin_ia32_cvtmask2b512(__k);\n+      }\n+    else if constexpr (sizeof(_Tp) == 2 && __have_avx512bw)\n+      {\n+\tif constexpr (_Np <= 8 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2w128(__k);\n+\telse if constexpr (_Np <= 16 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2w256(__k);\n+\telse\n+\t  return __builtin_ia32_cvtmask2w512(__k);\n+      }\n+    else if constexpr (sizeof(_Tp) == 4 && __have_avx512dq)\n+      {\n+\tif constexpr (_Np <= 4 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2d128(__k);\n+\telse if constexpr (_Np <= 8 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2d256(__k);\n+\telse\n+\t  return __builtin_ia32_cvtmask2d512(__k);\n+      }\n+    else if constexpr (sizeof(_Tp) == 8 && __have_avx512dq)\n+      {\n+\tif constexpr (_Np <= 2 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2q128(__k);\n+\telse if constexpr (_Np <= 4 && __have_avx512vl)\n+\t  return __builtin_ia32_cvtmask2q256(__k);\n+\telse\n+\t  return __builtin_ia32_cvtmask2q512(__k);\n+      }\n+    else\n+      __assert_unreachable<_Tp>();\n+  }\n+#endif // __clang__\n+\n #ifdef _GLIBCXX_SIMD_WORKAROUND_PR85048\n #include \"simd_x86_conversions.h\"\n #endif\n@@ -619,14 +666,13 @@ struct _CommonImplX86 : _CommonImplBuiltin\n     _GLIBCXX_SIMD_INTRINSIC static _TV\n     _S_blend_avx512(const _Kp __k, const _TV __a, const _TV __b) noexcept\n     {\n-#ifdef __clang__\n-      // FIXME: this does a boolean choice, not a blend\n-      return __k ? __a : __b;\n-#else\n       static_assert(__is_vector_type_v<_TV>);\n       using _Tp = typename _VectorTraits<_TV>::value_type;\n       static_assert(sizeof(_TV) >= 16);\n       static_assert(sizeof(_Tp) <= 8);\n+#ifdef __clang__\n+      return __movm<_VectorTraits<_TV>::_S_full_size, _Tp>(__k) ? __b : __a;\n+#else\n       using _IntT\n \t= conditional_t<(sizeof(_Tp) > 2),\n \t\t\tconditional_t<sizeof(_Tp) == 4, int, long long>,\n@@ -3483,6 +3529,9 @@ template <typename _Abi, typename>\n \t    // optimize masked unary increment and decrement as masked sub +/-1\n \t    constexpr int __pm_one\n \t      = is_same_v<_Op<void>, __increment<void>> ? -1 : 1;\n+#ifdef __clang__\n+\t    return __movm<_Np, _Tp>(__k._M_data) ? __v._M_data - __pm_one : __v._M_data;\n+#else // __clang__\n \t    if constexpr (is_integral_v<_Tp>)\n \t      {\n \t\tconstexpr bool __lp64 = sizeof(long) == sizeof(long long);\n@@ -3526,6 +3575,7 @@ template <typename _Abi, typename>\n \t\t_GLIBCXX_SIMD_MASK_SUB(8, 16, subpd128);\n #undef _GLIBCXX_SIMD_MASK_SUB\n \t      }\n+#endif // __clang__\n \t  }\n \telse\n \t  return _Base::template _S_masked_unary<_Op>(__k, __v);"}]}