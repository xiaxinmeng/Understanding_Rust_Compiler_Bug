{"sha": "845e14ed613926c1c2cddca789a0069680ce9426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1ZTE0ZWQ2MTM5MjZjMWMyY2RkY2E3ODlhMDA2OTY4MGNlOTQyNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-12T15:43:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-12T15:43:32Z"}, "message": "cp-tree.h (pedantic, [...]): Delete redundant declarations.\n\n\t* cp-tree.h (pedantic, convert, global_bindings_p, insert_block,\n\tset_block, pushdecl, getdecls, gettags, init_decl_processing,\n\tmaybe_build_cleanup, copy_lang_decl, prep_stmt, lvalue_p,\n\tlvalue_or_else, print_lang_statistics, comp_target_types,\n\tunsigned_type, signed_type, signed_or_unsigned_type,\n\tbuild_function_call, mark_addressable, incomplete_type_error):\n\tDelete redundant declarations.\n\nFrom-SVN: r41306", "tree": {"sha": "a567430f3bf6b50798fbf2a64a85752eaa6c3cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a567430f3bf6b50798fbf2a64a85752eaa6c3cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/845e14ed613926c1c2cddca789a0069680ce9426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845e14ed613926c1c2cddca789a0069680ce9426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845e14ed613926c1c2cddca789a0069680ce9426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845e14ed613926c1c2cddca789a0069680ce9426/comments", "author": null, "committer": null, "parents": [{"sha": "6c889b67cb5dfe2fa23c4d28ced17d735393e379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c889b67cb5dfe2fa23c4d28ced17d735393e379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c889b67cb5dfe2fa23c4d28ced17d735393e379"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "05d1b74d3243178ebef44e162a9f906dba7943ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845e14ed613926c1c2cddca789a0069680ce9426/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845e14ed613926c1c2cddca789a0069680ce9426/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=845e14ed613926c1c2cddca789a0069680ce9426", "patch": "@@ -1,3 +1,13 @@\n+2001-04-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (pedantic, convert, global_bindings_p, insert_block,\n+\tset_block, pushdecl, getdecls, gettags, init_decl_processing,\n+\tmaybe_build_cleanup, copy_lang_decl, prep_stmt, lvalue_p,\n+\tlvalue_or_else, print_lang_statistics, comp_target_types,\n+\tunsigned_type, signed_type, signed_or_unsigned_type,\n+\tbuild_function_call, mark_addressable, incomplete_type_error):\n+\tDelete redundant declarations.\n+\n 2001-04-11  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* cp-tree.h (TYPE_LINKAGE_IDENTIFIER): New macro."}, {"sha": "b14fa92232cddb95fd97a6ee0077dc6a26035a44", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845e14ed613926c1c2cddca789a0069680ce9426/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845e14ed613926c1c2cddca789a0069680ce9426/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=845e14ed613926c1c2cddca789a0069680ce9426", "patch": "@@ -524,9 +524,6 @@ struct tree_srcloc\n #define IDENTIFIER_CTOR_OR_DTOR_P(NODE) \\\n   TREE_LANG_FLAG_3 (NODE)\n \n-/* Nonzero means reject anything that ISO standard C++ forbids.  */\n-extern int pedantic;\n-\n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */\n #define C_TYPE_FIELDS_READONLY(type) TYPE_LANG_FLAG_0 (type)\n \n@@ -3751,7 +3748,6 @@ extern tree convert_pointer_to\t\t\tPARAMS ((tree, tree));\n extern tree ocp_convert\t\t\t\tPARAMS ((tree, tree, int, int));\n extern tree cp_convert\t\t\t\tPARAMS ((tree, tree));\n extern tree convert_to_void\t\t\tPARAMS ((tree, const char */*implicit context*/));\n-extern tree convert\t\t\t\tPARAMS ((tree, tree));\n extern tree convert_force\t\t\tPARAMS ((tree, tree, int));\n extern tree build_type_conversion\t\tPARAMS ((tree, tree, int));\n extern tree build_expr_type_conversion\t\tPARAMS ((int, tree, int));\n@@ -3761,7 +3757,6 @@ extern void clone_function_decl                 PARAMS ((tree, int));\n \n /* decl.c */\n /* resume_binding_level */\n-extern int global_bindings_p\t\t\tPARAMS ((void));\n extern int toplevel_bindings_p\t\t\tPARAMS ((void));\n extern int namespace_bindings_p\t\t\tPARAMS ((void));\n extern void keep_next_level\t\t\tPARAMS ((int));\n@@ -3776,9 +3771,7 @@ extern void note_level_for_try\t\t\tPARAMS ((void));\n extern void note_level_for_catch\t\tPARAMS ((void));\n extern void resume_level\t\t\tPARAMS ((struct binding_level *));\n extern void delete_block\t\t\tPARAMS ((tree));\n-extern void insert_block\t\t\tPARAMS ((tree));\n extern void add_block_current_level\t\tPARAMS ((tree));\n-extern void set_block\t\t\t\tPARAMS ((tree));\n extern void pushlevel_class\t\t\tPARAMS ((void));\n extern void poplevel_class                      PARAMS ((void));\n extern void print_binding_stack\t\t\tPARAMS ((void));\n@@ -3800,7 +3793,6 @@ extern tree make_anon_name\t\t\tPARAMS ((void));\n extern void clear_anon_tags\t\t\tPARAMS ((void));\n extern int decls_match\t\t\t\tPARAMS ((tree, tree));\n extern int duplicate_decls\t\t\tPARAMS ((tree, tree));\n-extern tree pushdecl\t\t\t\tPARAMS ((tree));\n extern tree pushdecl_top_level\t\t\tPARAMS ((tree));\n extern void pushdecl_class_level\t\tPARAMS ((tree));\n extern tree pushdecl_namespace_level            PARAMS ((tree));\n@@ -3813,8 +3805,6 @@ extern tree declare_local_label                 PARAMS ((tree));\n extern tree define_label\t\t\tPARAMS ((const char *, int, tree));\n extern void check_goto\t\t\t\tPARAMS ((tree));\n extern void define_case_label\t\t\tPARAMS ((void));\n-extern tree getdecls\t\t\t\tPARAMS ((void));\n-extern tree gettags\t\t\t\tPARAMS ((void));\n extern tree binding_for_name                    PARAMS ((tree, tree));\n extern tree namespace_binding                   PARAMS ((tree, tree));\n extern void set_namespace_binding               PARAMS ((tree, tree, tree));\n@@ -3839,7 +3829,6 @@ extern tree build_cp_library_fn_ptr\t\tPARAMS ((const char *, tree));\n extern tree push_library_fn\t\t\tPARAMS ((tree, tree));\n extern tree push_void_library_fn\t\tPARAMS ((tree, tree));\n extern tree push_throw_library_fn\t\tPARAMS ((tree, tree));\n-extern void init_decl_processing\t\tPARAMS ((void));\n extern int init_type_desc\t\t\tPARAMS ((void));\n extern tree check_tag_decl\t\t\tPARAMS ((tree));\n extern void shadow_tag\t\t\t\tPARAMS ((tree));\n@@ -3870,7 +3859,6 @@ extern tree finish_function\t\t\tPARAMS ((int));\n extern tree start_method\t\t\tPARAMS ((tree, tree, tree));\n extern tree finish_method\t\t\tPARAMS ((tree));\n extern void hack_incomplete_structures\t\tPARAMS ((tree));\n-extern tree maybe_build_cleanup\t\t\tPARAMS ((tree));\n extern void finish_stmt\t\t\t\tPARAMS ((void));\n extern void print_other_binding_stack\t\tPARAMS ((struct binding_level *));\n extern void revert_static_member_fn             PARAMS ((tree));\n@@ -4073,7 +4061,6 @@ extern tree identifier_typedecl_value\t\tPARAMS ((tree));\n extern tree build_lang_decl\t\t\tPARAMS ((enum tree_code, tree, tree));\n extern void retrofit_lang_decl\t\t\tPARAMS ((tree));\n extern tree copy_decl                           PARAMS ((tree));\n-extern void copy_lang_decl\t\t\tPARAMS ((tree));\n extern tree cp_make_lang_type\t\t\tPARAMS ((enum tree_code));\n extern tree make_aggr_type\t\t\tPARAMS ((enum tree_code));\n extern void compiler_error\t\t\tPARAMS ((const char *, ...))\n@@ -4318,7 +4305,6 @@ extern tree finish_typeof\t\t\tPARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n extern void finish_named_return_value           PARAMS ((tree, tree));\n extern void expand_body                         PARAMS ((tree));\n-extern void prep_stmt                           PARAMS ((tree));\n extern void do_pushlevel                        PARAMS ((void));\n extern tree do_poplevel                         PARAMS ((void));\n extern void finish_mem_initializers             PARAMS ((tree));\n@@ -4350,8 +4336,6 @@ extern int member_p\t\t\t\tPARAMS ((tree));\n extern cp_lvalue_kind real_lvalue_p\t\tPARAMS ((tree));\n extern tree build_min\t\t\t\tPARAMS ((enum tree_code, tree, ...));\n extern tree build_min_nt\t\t\tPARAMS ((enum tree_code, ...));\n-extern int lvalue_p\t\t\t\tPARAMS ((tree));\n-extern int lvalue_or_else\t\t\tPARAMS ((tree, const char *));\n extern tree build_cplus_new\t\t\tPARAMS ((tree, tree));\n extern tree get_target_expr\t\t\tPARAMS ((tree));\n extern tree break_out_calls\t\t\tPARAMS ((tree));\n@@ -4378,7 +4362,6 @@ extern int is_aggr_type_2\t\t\tPARAMS ((tree, tree));\n extern const char *lang_printable_name\t\tPARAMS ((tree, int));\n extern tree build_exception_variant\t\tPARAMS ((tree, tree));\n extern tree copy_template_template_parm\t\tPARAMS ((tree, tree));\n-extern void print_lang_statistics\t\tPARAMS ((void));\n extern tree array_type_nelts_total\t\tPARAMS ((tree));\n extern tree array_type_nelts_top\t\tPARAMS ((tree));\n extern tree break_out_target_exprs\t\tPARAMS ((tree));\n@@ -4435,12 +4418,8 @@ extern int comp_except_specs\t\t\tPARAMS ((tree, tree, int));\n extern int comptypes\t\t\t\tPARAMS ((tree, tree, int));\n extern int comp_target_types\t\t\tPARAMS ((tree, tree, int));\n extern int compparms\t\t\t\tPARAMS ((tree, tree));\n-extern int comp_target_types\t\t\tPARAMS ((tree, tree, int));\n extern int comp_cv_qualification                PARAMS ((tree, tree));\n extern int comp_cv_qual_signature               PARAMS ((tree, tree));\n-extern tree unsigned_type\t\t\tPARAMS ((tree));\n-extern tree signed_type\t\t\t\tPARAMS ((tree));\n-extern tree signed_or_unsigned_type\t\tPARAMS ((int, tree));\n extern tree expr_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n@@ -4457,13 +4436,11 @@ extern tree build_array_ref\t\t\tPARAMS ((tree, tree));\n extern tree build_x_function_call\t\tPARAMS ((tree, tree, tree));\n extern tree get_member_function_from_ptrfunc\tPARAMS ((tree *, tree));\n extern tree build_function_call_real\t\tPARAMS ((tree, tree, int, int));\n-extern tree build_function_call\t\t\tPARAMS ((tree, tree));\n extern tree build_function_call_maybe\t\tPARAMS ((tree, tree));\n extern tree convert_arguments\t\t\tPARAMS ((tree, tree, tree, int));\n extern tree build_x_binary_op\t\t\tPARAMS ((enum tree_code, tree, tree));\n extern tree build_x_unary_op\t\t\tPARAMS ((enum tree_code, tree));\n extern tree unary_complex_lvalue\t\tPARAMS ((enum tree_code, tree));\n-extern int mark_addressable\t\t\tPARAMS ((tree));\n extern tree build_x_conditional_expr\t\tPARAMS ((tree, tree, tree));\n extern tree build_conditional_expr\t\tPARAMS ((tree, tree, tree));\n extern tree build_x_compound_expr\t\tPARAMS ((tree));\n@@ -4499,7 +4476,6 @@ extern tree error_not_base_type\t\t\tPARAMS ((tree, tree));\n extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));\n extern int abstract_virtuals_error\t\tPARAMS ((tree, tree));\n-extern void incomplete_type_error\t\tPARAMS ((tree, tree));\n extern void friendly_abort\t\t\tPARAMS ((int, const char *,\n \t\t\t\t\t\t\t int, const char *))\n   ATTRIBUTE_NORETURN;"}]}