{"sha": "e703a483c42de88fed17d497a23cafab79772721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwM2E0ODNjNDJkZTg4ZmVkMTdkNDk3YTIzY2FmYWI3OTc3MjcyMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:56:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:56:20Z"}, "message": "s-finimp.adb: (Finalize_List): Optimize in the no-abort case.\n\n\t* s-finimp.adb: (Finalize_List): Optimize in the no-abort case.\n\tMinor reformatting.\n\nFrom-SVN: r94822", "tree": {"sha": "ba667dcda2c2beaeba54717b7d6753d1bad841de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba667dcda2c2beaeba54717b7d6753d1bad841de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e703a483c42de88fed17d497a23cafab79772721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e703a483c42de88fed17d497a23cafab79772721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e703a483c42de88fed17d497a23cafab79772721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e703a483c42de88fed17d497a23cafab79772721/comments", "author": null, "committer": null, "parents": [{"sha": "340b490d0b329325c3513165adfea1048b9500a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340b490d0b329325c3513165adfea1048b9500a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340b490d0b329325c3513165adfea1048b9500a9"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "e2a8aaa0b5dd7456323b50b8c46677e9ac8c80ca", "filename": "gcc/ada/s-finimp.adb", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e703a483c42de88fed17d497a23cafab79772721/gcc%2Fada%2Fs-finimp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e703a483c42de88fed17d497a23cafab79772721/gcc%2Fada%2Fs-finimp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.adb?ref=e703a483c42de88fed17d497a23cafab79772721", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,7 @@ with System.Storage_Elements;\n with System.Soft_Links;\n \n with Unchecked_Conversion;\n+with System.Restrictions;\n \n package body System.Finalization_Implementation is\n \n@@ -137,10 +138,10 @@ package body System.Finalization_Implementation is\n    --  Start of processing for Adjust\n \n    begin\n-      --  Adjust the components and their finalization pointers next.\n-      --  We must protect against an exception in some call to Adjust, so\n-      --  we keep pointing to the list of successfully adjusted components,\n-      --  which can be finalized if an exception is raised.\n+      --  Adjust the components and their finalization pointers next. We must\n+      --  protect against an exception in some call to Adjust, so we keep\n+      --  pointing to the list of successfully adjusted components, which can\n+      --  be finalized if an exception is raised.\n \n       First_Comp := Object.F;\n       Object.F := null;               --  nothing adjusted yet.\n@@ -155,8 +156,8 @@ package body System.Finalization_Implementation is\n       when others =>\n          --  Finalize those components that were successfully adjusted, and\n          --  propagate exception. The object itself is not yet attached to\n-         --  global finalization list, so we cannot rely on the outer call\n-         --  to Clean to take care of these components.\n+         --  global finalization list, so we cannot rely on the outer call to\n+         --  Clean to take care of these components.\n \n          Finalize (Object);\n          raise;\n@@ -178,10 +179,10 @@ package body System.Finalization_Implementation is\n          Obj.Next := L;\n          L        := Obj'Unchecked_Access;\n \n-      --  Dynamically allocated objects: they are attached to a doubly\n-      --  linked list, so that an element can be finalized at any moment\n-      --  by means of an unchecked deallocation. Attachement is\n-      --  protected against multi-threaded access.\n+      --  Dynamically allocated objects: they are attached to a doubly linked\n+      --  list, so that an element can be finalized at any moment by means of\n+      --  an unchecked deallocation. Attachement is protected against\n+      --  multi-threaded access.\n \n       elsif Nb_Link = 2 then\n \n@@ -348,10 +349,10 @@ package body System.Finalization_Implementation is\n    procedure Detach_From_Final_List (Obj : in out Finalizable) is\n    begin\n \n-      --  When objects are not properly attached to a doubly linked\n-      --  list do not try to detach them. The only case where it can\n-      --  happen is when dealing with Finalize_Storage_Only objects\n-      --  which are not always attached.\n+      --  When objects are not properly attached to a doubly linked list do\n+      --  not try to detach them. The only case where it can happen is when\n+      --  dealing with Finalize_Storage_Only objects which are not always\n+      --  attached to the finalization list.\n \n       if Obj.Next /= null and then Obj.Prev /= null then\n          SSL.Lock_Task.all;\n@@ -414,17 +415,22 @@ package body System.Finalization_Implementation is\n       end record;\n       type Ptr is access all Fake_Exception_Occurence;\n \n-      --  Let's get the current exception before starting to finalize in\n-      --  order to check if we are in the abort case if an exception is\n-      --  raised.\n-\n       function To_Ptr is new\n-         Unchecked_Conversion (Exception_Occurrence_Access, Ptr);\n+        Unchecked_Conversion (Exception_Occurrence_Access, Ptr);\n \n-      X : constant Exception_Id :=\n-            To_Ptr (System.Soft_Links.Get_Current_Excep.all).Id;\n+      X :  Exception_Id := Null_Id;\n \n    begin\n+      --  If abort is allowed, we get the current exception before starting\n+      --  to finalize in order to check if we are in the abort case if an\n+      --  exception is raised. When abort is not allowed, avoid accessing the\n+      --  current exception since this can be a pretty costly operation in\n+      --  programs using controlled types heavily.\n+\n+      if System.Restrictions.Abort_Allowed then\n+         X := To_Ptr (System.Soft_Links.Get_Current_Excep.all).Id;\n+      end if;\n+\n       while P /= null loop\n          Q := P.Next;\n          Finalize (P.all);\n@@ -447,7 +453,6 @@ package body System.Finalization_Implementation is\n    begin\n       Detach_From_Final_List (Obj);\n       Finalize (Obj);\n-\n    exception\n       when E_Occ : others => Raise_From_Finalize (null, False, E_Occ);\n    end Finalize_One;\n@@ -461,7 +466,6 @@ package body System.Finalization_Implementation is\n       Offset  : SSE.Storage_Offset := RC_Offset (The_Tag);\n \n    begin\n-\n       --  Fetch the controller from the Parent or above if necessary\n       --  when there are no controller at this level\n \n@@ -484,7 +488,8 @@ package body System.Finalization_Implementation is\n       --  ancestor corresponding to the tag \"The_Tag\" and that its parent\n       --  is variable sized. We assume that the _controller is the first\n       --  compoment right after the parent.\n-      --  ??? note that it may not be true if there are new discriminants.\n+\n+      --  ??? note that it may not be true if there are new discriminants\n \n       else --  Offset = -1\n \n@@ -527,7 +532,6 @@ package body System.Finalization_Implementation is\n \n    procedure Initialize (Object : in out Limited_Record_Controller) is\n       pragma Warnings (Off, Object);\n-\n    begin\n       null;\n    end Initialize;"}]}