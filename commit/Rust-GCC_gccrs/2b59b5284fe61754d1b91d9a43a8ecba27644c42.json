{"sha": "2b59b5284fe61754d1b91d9a43a8ecba27644c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1OWI1Mjg0ZmU2MTc1NGQxYjkxZDlhNDNhOGVjYmEyNzY0NGM0Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-01-03T20:25:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-01-03T20:25:16Z"}, "message": "re PR c++/51738 (C++11 initializer list does not work correctly with operator[])\n\n/gcc/cp\n2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51738\n\t* parser.c (cp_parser_postfix_open_square_expression): Handle\n\tpostfix-expression [ braced-init-list ].\n\n/gcc/testsuite\n2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51738\n\t* g++.dg/cpp0x/initlist-postfix-open-square.C: New.\n\n/libstdc++-v3\n2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51738\n\t* testsuite/23_containers/map/element_access/39901.cc: New.\n\nFrom-SVN: r182856", "tree": {"sha": "11d31f2ae11eccff2f30dd820196cc858c6990c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11d31f2ae11eccff2f30dd820196cc858c6990c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b59b5284fe61754d1b91d9a43a8ecba27644c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59b5284fe61754d1b91d9a43a8ecba27644c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b59b5284fe61754d1b91d9a43a8ecba27644c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59b5284fe61754d1b91d9a43a8ecba27644c42/comments", "author": null, "committer": null, "parents": [{"sha": "0239db9272f141e7cdc0844eaf9cb7011e71ce24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0239db9272f141e7cdc0844eaf9cb7011e71ce24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0239db9272f141e7cdc0844eaf9cb7011e71ce24"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "f4f491debdf55dfe9afe19390760fc873307bf7a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -1,3 +1,9 @@\n+2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51738\n+\t* parser.c (cp_parser_postfix_open_square_expression): Handle\n+\tpostfix-expression [ braced-init-list ].\n+\n 2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/29273"}, {"sha": "8f2357e64a0e846d462f23544230121262400fad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -5831,6 +5831,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n    by cp_parser_builtin_offsetof.  We're looking for\n \n      postfix-expression [ expression ]\n+     postfix-expression [ braced-init-list ] (C++11)\n \n    FOR_OFFSETOF is set if we're being called in that context, which\n    changes how we deal with integer constant expressions.  */\n@@ -5856,7 +5857,16 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n   if (for_offsetof)\n     index = cp_parser_constant_expression (parser, false, NULL);\n   else\n-    index = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n+    {\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+\t{\n+\t  bool expr_nonconst_p;\n+\t  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n+\t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n+\t}\n+      else\n+\tindex = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n+    }\n \n   /* Look for the closing `]'.  */\n   cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);"}, {"sha": "8fa86a868ebe10396b11831d088e1dac8883c3b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -1,3 +1,8 @@\n+2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51738\n+\t* g++.dg/cpp0x/initlist-postfix-open-square.C: New.\n+\n 2012-01-03  Andrew Pinski  <apinski@cavium.com>\n \n \t* lib/scanasm.exp (dg-function-on-line): Always use a special format"}, {"sha": "38b17820db353809673f967d6abb82e4e3afaf08", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-postfix-open-square.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-postfix-open-square.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-postfix-open-square.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-postfix-open-square.C?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/51738\n+// { dg-options -std=c++0x }\n+\n+struct Index\n+{\n+  Index(unsigned, unsigned){ }\n+};\n+\n+struct Matrix\n+{\n+  void operator[](Index){ }\n+};\n+\n+int main()\n+{\n+  Matrix m;\n+  m[{0,1}];\n+}"}, {"sha": "451596a2f36f5ffa36114899b2e79cf3dece044d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -1,3 +1,8 @@\n+2012-01-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51738\n+\t* testsuite/23_containers/map/element_access/39901.cc: New.\n+\n 2011-12-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/extensions.xml: Improve markup and note that some"}, {"sha": "2a224945228911177b71c25f7effef346fad27fb", "filename": "libstdc++-v3/testsuite/23_containers/map/element_access/39901.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59b5284fe61754d1b91d9a43a8ecba27644c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F39901.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59b5284fe61754d1b91d9a43a8ecba27644c42/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F39901.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F39901.cc?ref=2b59b5284fe61754d1b91d9a43a8ecba27644c42", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// c++/39901\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::map<std::pair<int, int>, int> the_map;\n+\n+  the_map[{0, 1}] = 5;\n+  VERIFY( (the_map.size() == 1) );\n+  VERIFY( (the_map[{0, 1}] == 5) );\n+\n+  VERIFY( (the_map[{0, 0}] == 0) );\n+  VERIFY( (the_map.size() == 2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}