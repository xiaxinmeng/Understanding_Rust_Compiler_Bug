{"sha": "999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5ZmZiMWE0YjMwNmFjNjVmNDc0NDRiYTVlMmU2M2ZiODk3YzZjMQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-02-09T20:31:18Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-02-09T20:31:18Z"}, "message": "re PR fortran/30720 ([4.1 only] runtime: check for empty array slices before allocating a negative amount of memory)\n\n\tPR fortran/30720\n\n\t* trans-array.c (gfc_trans_create_temp_array): Remove use of the\n\tfunction argument. Always generate code for negative extent.\n\tSimplify said code.\n\t* trans-array.h (gfc_trans_create_temp_array): Change prototype.\n\t* trans-expr.c (gfc_conv_function_call): Remove use of last argument\n\tof gfc_trans_create_temp_array.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): Likewise.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Likewise.\n\n\t* gfortran.dg/array_function_1.f90: New test.\n\nFrom-SVN: r121773", "tree": {"sha": "8d0107920863d9845a91d346a3352bc386b12cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0107920863d9845a91d346a3352bc386b12cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b964502b99b17301bd22fb9932a97c55ebf8b945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b964502b99b17301bd22fb9932a97c55ebf8b945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b964502b99b17301bd22fb9932a97c55ebf8b945"}], "stats": {"total": 118, "additions": 66, "deletions": 52}, "files": [{"sha": "e501db6359befe0767e2200ee9e5da3cf4108d89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -1,3 +1,15 @@\n+2007-02-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/30720\n+\t* trans-array.c (gfc_trans_create_temp_array): Remove use of the\n+\tfunction argument. Always generate code for negative extent.\n+\tSimplify said code.\n+\t* trans-array.h (gfc_trans_create_temp_array): Change prototype.\n+\t* trans-expr.c (gfc_conv_function_call): Remove use of last argument\n+\tof gfc_trans_create_temp_array.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): Likewise.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Likewise.\n+\n 2007-02-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-stmt.c (gfc_trans_forall_1): Optimize the cases where the"}, {"sha": "1c899759fade46a1904661a24a9fee96984ef1f3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 14, "deletions": 45, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -583,7 +583,7 @@ tree\n gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t\t\t     gfc_loopinfo * loop, gfc_ss_info * info,\n \t\t\t     tree eltype, bool dynamic, bool dealloc,\n-\t\t\t     bool callee_alloc, bool function)\n+\t\t\t     bool callee_alloc)\n {\n   tree type;\n   tree desc;\n@@ -592,11 +592,6 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   tree nelem;\n   tree cond;\n   tree or_expr;\n-  tree thencase;\n-  tree elsecase;\n-  tree var;\n-  stmtblock_t thenblock;\n-  stmtblock_t elseblock;\n   int n;\n   int dim;\n \n@@ -678,19 +673,16 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n       tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n \t\t\t loop->to[n], gfc_index_one_node);\n \n-      if (function)\n-\t{\n-\t  /* Check whether the size for this dimension is negative.  */\n-\t  cond = fold_build2 (LE_EXPR, boolean_type_node, tmp,\n+      /* Check whether the size for this dimension is negative.  */\n+      cond = fold_build2 (LE_EXPR, boolean_type_node, tmp,\n \t\t\t  gfc_index_zero_node);\n+      cond = gfc_evaluate_now (cond, pre);\n \n-\t  cond = gfc_evaluate_now (cond, pre);\n+      if (n == 0)\n+\tor_expr = cond;\n+      else\n+\tor_expr = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, or_expr, cond);\n \n-\t  if (n == 0)\n-\t    or_expr = cond;\n-\t  else\n-\t    or_expr = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, or_expr, cond);\n-\t}\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, tmp);\n       size = gfc_evaluate_now (size, pre);\n     }\n@@ -699,33 +691,10 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \n   if (size && !callee_alloc)\n     {\n-      if (function)\n-\t{\n-\t  /* If we know at compile-time whether any dimension size is\n-\t     negative, we can avoid a conditional and pass the true size\n-\t     to gfc_trans_allocate_array_storage, which can then decide\n-\t     whether to allocate this on the heap or on the stack.  */\n-\t  if (integer_zerop (or_expr))\n-\t    ;\n-\t  else if (integer_onep (or_expr))\n-\t    size = gfc_index_zero_node;\n-\t  else\n-\t    {\n-\t      var = gfc_create_var (TREE_TYPE (size), \"size\");\n-\t      gfc_start_block (&thenblock);\n-\t      gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);\n-\t      thencase = gfc_finish_block (&thenblock);\n-\n-\t      gfc_start_block (&elseblock);\n-\t      gfc_add_modify_expr (&elseblock, var, size);\n-\t      elsecase = gfc_finish_block (&elseblock);\n-\t  \n-\t      tmp = gfc_evaluate_now (or_expr, pre);\n-\t      tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n-\t      gfc_add_expr_to_block (pre, tmp);\n-\t      size = var;\n-\t    }\n-\t}\n+      /* If or_expr is true, then the extent in at least one\n+\t dimension is zero and the size is set to zero.  */\n+      size = fold_build3 (COND_EXPR, gfc_array_index_type,\n+\t\t\t  or_expr, gfc_index_zero_node, size);\n \n       nelem = size;\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n@@ -1647,7 +1616,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n     }\n \n   gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, &ss->data.info,\n-\t\t\t       type, dynamic, true, false, false);\n+\t\t\t       type, dynamic, true, false);\n \n   desc = ss->data.info.descriptor;\n   offset = gfc_index_zero_node;\n@@ -3241,7 +3210,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n       loop->temp_ss->data.info.dimen = n;\n       gfc_trans_create_temp_array (&loop->pre, &loop->post, loop,\n \t\t\t\t   &loop->temp_ss->data.info, tmp, false, true,\n-\t\t\t\t   false, false);\n+\t\t\t\t   false);\n     }\n \n   for (n = 0; n < loop->temp_dim; n++)"}, {"sha": "d3f4e5fdd1a8759177f2410a7cbc961b93da0786", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -32,7 +32,7 @@ void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,\n \n /* Generate code to create a temporary array.  */\n tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_loopinfo *,\n-                                  gfc_ss_info *, tree, bool, bool, bool, bool);\n+                                  gfc_ss_info *, tree, bool, bool, bool);\n \n /* Generate function entry code for allocation of compiler allocated array\n    variables.  */"}, {"sha": "1a97e3176225713b06d826d42c591b419eafe197", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -2332,8 +2332,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t     mustn't be deallocated.  */\n \t  callee_alloc = sym->attr.allocatable || sym->attr.pointer;\n \t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, info, tmp,\n-\t\t\t\t       false, !sym->attr.pointer, callee_alloc,\n-\t\t\t\t       true);\n+\t\t\t\t       false, !sym->attr.pointer, callee_alloc);\n \n \t  /* Pass the temporary as the first argument.  */\n \t  tmp = info->descriptor;"}, {"sha": "5ad0f3826cea2a7a0a5cd86ebd3f8ebf70684c81", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -2975,10 +2975,12 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n   se->loop->to[n] = upper;\n \n   /* Build a destination descriptor, using the pointer, source, as the\n-     data field.  This is already allocated so set callee_alloc.  */\n+     data field.  This is already allocated so set callee_alloc.\n+     FIXME callee_alloc is not set!  */\n+ \n   tmp = gfc_typenode_for_spec (&expr->ts);\n   gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       info, tmp, false, true, false, false);\n+\t\t\t       info, tmp, false, true, false);\n \n   /* Use memcpy to do the transfer.  */\n   tmp = gfc_conv_descriptor_data_get (info->descriptor);"}, {"sha": "6b8a9a0b3be88dd8e18b778756f89a7d5b7636bd", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -268,7 +268,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  tmp = gfc_typenode_for_spec (&e->ts);\n \t  tmp = gfc_trans_create_temp_array (&se->pre, &se->post,\n \t\t\t\t\t      &tmp_loop, info, tmp,\n-\t\t\t\t\t      false, true, false, false);\n+\t\t\t\t\t      false, true, false);\n \t  gfc_add_modify_expr (&se->pre, size, tmp);\n \t  tmp = fold_convert (pvoid_type_node, info->data);\n \t  gfc_add_modify_expr (&se->pre, data, tmp);"}, {"sha": "1570d3eec4d124af90086135d2da338ebc16cbec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -1,3 +1,8 @@\n+2007-02-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/30720\n+\t* gfortran.dg/array_function_1.f90: New test.\n+\n 2007-02-09  Richard Sandiford  <richard@codesourcery.com>\n \n \t* lib/target-supports.exp (check_effective_target_lax_strtofp)\n@@ -161,7 +166,7 @@\n 2007-02-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/30611\n-\t* gcc/testsuite/gfortran.dg/repeat_1.f90: New test.\n+\t* gfortran.dg/repeat_1.f90: New test.\n \n 2007-02-04  Steven G. Kargl <kargl@gcc.gnu.org>\n "}, {"sha": "281ae88b852b7dcae8e1241ff4781dec73f76e51", "filename": "gcc/testsuite/gfortran.dg/array_function_1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999ffb1a4b306ac65f47444ba5e2e63fb897c6c1/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90?ref=999ffb1a4b306ac65f47444ba5e2e63fb897c6c1", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! PR fortran/30720\n+program array_function_1\n+  integer :: a(5), b, l, u\n+  l = 4\n+  u = 2\n+\n+  a = (/ 1, 2, 3, 4, 5 /)\n+\n+  b = f(a(l:u) - 2)\n+  if (b /= 0) call abort\n+\n+  b = f(a(4:2) - 2)\n+  if (b /= 0) call abort\n+\n+  b = f(a(u:l) - 2)\n+  if (b /= 3) call abort\n+\n+  b = f(a(2:4) - 2)\n+  if (b /= 3) call abort\n+\n+  contains\n+    integer function f(x)\n+      integer, dimension(:), intent(in) :: x\n+      f = sum(x)\n+    end function\n+end program"}]}