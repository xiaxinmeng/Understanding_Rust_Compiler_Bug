{"sha": "9980154889a2bfd00c0c76176595948768be1487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk4MDE1NDg4OWEyYmZkMDBjMGM3NjE3NjU5NTk0ODc2OGJlMTQ4Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-06-30T22:28:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-06-30T22:28:02Z"}, "message": "c-common.h (check_function_format): Remove first parameter.\n\n\t* c-common.h (check_function_format): Remove first parameter.\n\t* c-format.c (format_check_context): Remove status.\n\t(check_format_info, check_format_info_main,\n\tmaybe_read_dollar_number, avoid_dollar_number,\n\tfinish_dollar_format_checking, check_format_types,\n\tcheck_function_format): Remove first parameter.  Don't use\n\tstatus_warning.\n\t(check_format_arg): Don't use status_warning.\n\t(status_warning): Remove.\n\t* c-common.c (check_function_arguments): Update call to\n\tcheck_function_format.\n\ncp:\n\t* call.c (build_over_call), typeck.c (build_function_call): Update\n\tcalls to check_function_format.\n\nFrom-SVN: r83935", "tree": {"sha": "6edd9cc7bd8414f96db728a2727a2fae85c58700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6edd9cc7bd8414f96db728a2727a2fae85c58700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9980154889a2bfd00c0c76176595948768be1487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9980154889a2bfd00c0c76176595948768be1487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9980154889a2bfd00c0c76176595948768be1487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9980154889a2bfd00c0c76176595948768be1487/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6163c2238f5e27c5063727e75518de1e389bd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6163c2238f5e27c5063727e75518de1e389bd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6163c2238f5e27c5063727e75518de1e389bd04"}], "stats": {"total": 268, "additions": 124, "deletions": 144}, "files": [{"sha": "bb253b74ecb006ab7089783457914a8ea2e992ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -1,3 +1,17 @@\n+2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-common.h (check_function_format): Remove first parameter.\n+\t* c-format.c (format_check_context): Remove status.\n+\t(check_format_info, check_format_info_main,\n+\tmaybe_read_dollar_number, avoid_dollar_number,\n+\tfinish_dollar_format_checking, check_format_types,\n+\tcheck_function_format): Remove first parameter.  Don't use\n+\tstatus_warning.\n+\t(check_format_arg): Don't use status_warning.\n+\t(status_warning): Remove.\n+\t* c-common.c (check_function_arguments): Update call to\n+\tcheck_function_format.\n+\n 2004-06-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc-protos.h (output_cbranch): Constify return"}, {"sha": "fda7126c2746495343e3a2004919855b78301744", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -5023,7 +5023,7 @@ check_function_arguments (tree attrs, tree params)\n   /* Check for errors in format strings.  */\n \n   if (warn_format)\n-    check_function_format (NULL, attrs, params);\n+    check_function_format (attrs, params);\n }\n \n /* Generic argument checking recursion routine.  PARAM is the argument to"}, {"sha": "2ae116efe0715d1612821e34c4bff4b5c3f77204", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -627,7 +627,7 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n \t\t\t\t\t      void *, tree,\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n-extern void check_function_format (int *, tree, tree);\n+extern void check_function_format (tree, tree);\n extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "5551ad135c4ef5e251f656ab37835bcdd80d3eb1", "filename": "gcc/c-format.c", "status": "modified", "additions": 101, "deletions": 140, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -1013,28 +1013,25 @@ typedef struct\n   format_check_results *res;\n   function_format_info *info;\n   tree params;\n-  int *status;\n } format_check_context;\n \n-static void check_format_info (int *, function_format_info *, tree);\n+static void check_format_info (function_format_info *, tree);\n static void check_format_arg (void *, tree, unsigned HOST_WIDE_INT);\n-static void check_format_info_main (int *, format_check_results *,\n+static void check_format_info_main (format_check_results *,\n \t\t\t\t    function_format_info *,\n \t\t\t\t    const char *, int, tree,\n \t\t\t\t    unsigned HOST_WIDE_INT);\n-static void status_warning (int *, const char *, ...)\n-     ATTRIBUTE_GCC_DIAG(2, 3);\n \n static void init_dollar_format_checking (int, tree);\n-static int maybe_read_dollar_number (int *, const char **, int,\n+static int maybe_read_dollar_number (const char **, int,\n \t\t\t\t     tree, tree *, const format_kind_info *);\n-static bool avoid_dollar_number (int *, const char *);\n-static void finish_dollar_format_checking (int *, format_check_results *, int);\n+static bool avoid_dollar_number (const char *);\n+static void finish_dollar_format_checking (format_check_results *, int);\n \n static const format_flag_spec *get_flag_spec (const format_flag_spec *,\n \t\t\t\t\t      int, const char *);\n \n-static void check_format_types (int *, format_wanted_type *);\n+static void check_format_types (format_wanted_type *);\n \n /* Decode a format type from a string, returning the type, or\n    format_type_error if not valid, in which case the caller should print an\n@@ -1067,7 +1064,7 @@ decode_format_type (const char *s)\n    attribute themselves.  */\n \n void\n-check_function_format (int *status, tree attrs, tree params)\n+check_function_format (tree attrs, tree params)\n {\n   tree a;\n \n@@ -1079,7 +1076,7 @@ check_function_format (int *status, tree attrs, tree params)\n \t  /* Yup; check it.  */\n \t  function_format_info info;\n \t  decode_format_attr (TREE_VALUE (a), &info, 1);\n-\t  check_format_info (status, &info, params);\n+\t  check_format_info (&info, params);\n \t  if (warn_missing_format_attribute && info.first_arg_num == 0\n \t      && (format_types[info.format_type].flags\n \t\t  & (int) FMT_FLAG_ARG_CONVERT))\n@@ -1118,31 +1115,6 @@ check_function_format (int *status, tree attrs, tree params)\n     }\n }\n \n-/* This function replaces `warning' inside the printf format checking\n-   functions.  If the `status' parameter is non-NULL, then it is\n-   dereferenced and set to 1 whenever a warning is caught.  Otherwise\n-   it warns as usual by replicating the innards of the warning\n-   function from diagnostic.c.  */\n-static void\n-status_warning (int *status, const char *msgid, ...)\n-{\n-  diagnostic_info diagnostic ;\n-  va_list ap;\n-  \n-  va_start (ap, msgid);\n-\n-  if (status)\n-    *status = 1;\n-  else\n-    {\n-      /* This duplicates the warning function behavior.  */\n-      diagnostic_set_info (&diagnostic, _(msgid), &ap,\n-\t\t\t   input_location, DK_WARNING);\n-      report_diagnostic (&diagnostic);\n-    }\n-\n-  va_end (ap);\n-}\n \n /* Variables used by the checking of $ operand number formats.  */\n static char *dollar_arguments_used = NULL;\n@@ -1215,7 +1187,7 @@ init_dollar_format_checking (int first_arg_num, tree params)\n    a $ format is found, *FORMAT is updated to point just after it.  */\n \n static int\n-maybe_read_dollar_number (int *status, const char **format,\n+maybe_read_dollar_number (const char **format,\n \t\t\t  int dollar_needed, tree params, tree *param_ptr,\n \t\t\t  const format_kind_info *fki)\n {\n@@ -1226,7 +1198,7 @@ maybe_read_dollar_number (int *status, const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  status_warning (status, \"missing $ operand number in format\");\n+\t  warning (\"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1247,7 +1219,7 @@ maybe_read_dollar_number (int *status, const char **format,\n     {\n       if (dollar_needed)\n \t{\n-\t  status_warning (status, \"missing $ operand number in format\");\n+\t  warning (\"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1256,15 +1228,14 @@ maybe_read_dollar_number (int *status, const char **format,\n   *format = fcp + 1;\n   if (pedantic && !dollar_format_warned)\n     {\n-      status_warning (status,\n-\t\t      \"%s does not support %%n$ operand number formats\",\n-\t\t      C_STD_NAME (STD_EXT));\n+      warning (\"%s does not support %%n$ operand number formats\",\n+\t       C_STD_NAME (STD_EXT));\n       dollar_format_warned = 1;\n     }\n   if (overflow_flag || argnum == 0\n       || (dollar_first_arg_num && argnum > dollar_arguments_count))\n     {\n-      status_warning (status, \"operand number out of range in format\");\n+      warning (\"operand number out of range in format\");\n       return -1;\n     }\n   if (argnum > dollar_max_arg_used)\n@@ -1286,9 +1257,8 @@ maybe_read_dollar_number (int *status, const char **format,\n       && dollar_arguments_used[argnum - 1] == 1)\n     {\n       dollar_arguments_used[argnum - 1] = 2;\n-      status_warning (status,\n-\t\t      \"format argument %d used more than once in %s format\",\n-\t\t      argnum, fki->name);\n+      warning (\"format argument %d used more than once in %s format\",\n+\t       argnum, fki->name);\n     }\n   else\n     dollar_arguments_used[argnum - 1] = 1;\n@@ -1314,17 +1284,15 @@ maybe_read_dollar_number (int *status, const char **format,\n    a $; give a diagnostic and return true if it does, false otherwise.  */\n \n static bool\n-avoid_dollar_number (int *status, const char *format)\n+avoid_dollar_number (const char *format)\n {\n   if (!ISDIGIT (*format))\n     return false;\n   while (ISDIGIT (*format))\n     format++;\n   if (*format == '$')\n     {\n-      status_warning (status,\n-\t\t      \"$ operand number used after format\"\n-\t\t      \" without operand number\");\n+      warning (\"$ operand number used after format without operand number\");\n       return true;\n     }\n   return false;\n@@ -1342,7 +1310,7 @@ avoid_dollar_number (int *status, const char *format)\n    pointers.  */\n \n static void\n-finish_dollar_format_checking (int *status, format_check_results *res, int pointer_gap_ok)\n+finish_dollar_format_checking (format_check_results *res, int pointer_gap_ok)\n {\n   int i;\n   bool found_pointer_gap = false;\n@@ -1354,8 +1322,8 @@ finish_dollar_format_checking (int *status, format_check_results *res, int point\n \t\t\t\t || dollar_arguments_pointer_p[i]))\n \t    found_pointer_gap = true;\n \t  else\n-\t    status_warning (status, \"format argument %d unused before used argument %d in $-style format\",\n-\t\t\t    i + 1, dollar_max_arg_used);\n+\t    warning (\"format argument %d unused before used argument %d in $-style format\",\n+\t\t     i + 1, dollar_max_arg_used);\n \t}\n     }\n   if (found_pointer_gap\n@@ -1405,7 +1373,7 @@ get_flag_spec (const format_flag_spec *spec, int flag, const char *predicates)\n    PARAMS is the list of argument values.  */\n \n static void\n-check_format_info (int *status, function_format_info *info, tree params)\n+check_format_info (function_format_info *info, tree params)\n {\n   format_check_context format_ctx;\n   unsigned HOST_WIDE_INT arg_num;\n@@ -1437,7 +1405,6 @@ check_format_info (int *status, function_format_info *info, tree params)\n   format_ctx.res = &res;\n   format_ctx.info = info;\n   format_ctx.params = params;\n-  format_ctx.status = status;\n \n   check_function_arguments_recurse (check_format_arg, &format_ctx,\n \t\t\t\t    format_tree, arg_num);\n@@ -1452,7 +1419,7 @@ check_format_info (int *status, function_format_info *info, tree params)\n \t  /* For strftime-like formats, warn for not checking the format\n \t     string; but there are no arguments to check.  */\n \t  if (warn_format_nonliteral)\n-\t    status_warning (status, \"format not a string literal, format string not checked\");\n+\t    warning (\"format not a string literal, format string not checked\");\n \t}\n       else if (info->first_arg_num != 0)\n \t{\n@@ -1466,9 +1433,9 @@ check_format_info (int *status, function_format_info *info, tree params)\n \t      ++arg_num;\n \t    }\n \t  if (params == 0 && (warn_format_nonliteral || warn_format_security))\n-\t    status_warning (status, \"format not a string literal and no format arguments\");\n+\t    warning (\"format not a string literal and no format arguments\");\n \t  else if (warn_format_nonliteral)\n-\t    status_warning (status, \"format not a string literal, argument types not checked\");\n+\t    warning (\"format not a string literal, argument types not checked\");\n \t}\n     }\n \n@@ -1481,20 +1448,20 @@ check_format_info (int *status, function_format_info *info, tree params)\n      case of extra format arguments.  */\n   if (res.number_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_extra_args)\n-    status_warning (status, \"too many arguments for format\");\n+    warning (\"too many arguments for format\");\n   if (res.number_dollar_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_extra_args)\n-    status_warning (status, \"unused arguments in $-style format\");\n+    warning (\"unused arguments in $-style format\");\n   if (res.number_empty > 0 && res.number_non_literal == 0\n       && res.number_other == 0 && warn_format_zero_length)\n-    status_warning (status, \"zero-length %s format string\",\n-\t\t    format_types[info->format_type].name);\n+    warning (\"zero-length %s format string\",\n+\t     format_types[info->format_type].name);\n \n   if (res.number_wide > 0)\n-    status_warning (status, \"format is a wide character string\");\n+    warning (\"format is a wide character string\");\n \n   if (res.number_unterminated > 0)\n-    status_warning (status, \"unterminated format string\");\n+    warning (\"unterminated format string\");\n }\n \n /* Callback from check_function_arguments_recurse to check a\n@@ -1510,7 +1477,6 @@ check_format_arg (void *ctx, tree format_tree,\n   format_check_results *res = format_ctx->res;\n   function_format_info *info = format_ctx->info;\n   tree params = format_ctx->params;\n-  int *status = format_ctx->status;\n \n   int format_length;\n   HOST_WIDE_INT offset;\n@@ -1647,7 +1613,7 @@ check_format_arg (void *ctx, tree format_tree,\n      will decrement it if it finds there are extra arguments, but this way\n      need not adjust it for every return.  */\n   res->number_other++;\n-  check_format_info_main (status, res, info, format_chars, format_length,\n+  check_format_info_main (res, info, format_chars, format_length,\n \t\t\t  params, arg_num);\n }\n \n@@ -1660,7 +1626,7 @@ check_format_arg (void *ctx, tree format_tree,\n    argument in the list of arguments.  */\n \n static void\n-check_format_info_main (int *status, format_check_results *res,\n+check_format_info_main (format_check_results *res,\n \t\t\tfunction_format_info *info, const char *format_chars,\n \t\t\tint format_length, tree params,\n \t\t\tunsigned HOST_WIDE_INT arg_num)\n@@ -1704,22 +1670,22 @@ check_format_info_main (int *status, format_check_results *res,\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - orig_format_chars != format_length)\n-\t    status_warning (status, \"embedded %<\\\\0%> in format\");\n+\t    warning (\"embedded %<\\\\0%> in format\");\n \t  if (info->first_arg_num != 0 && params != 0\n \t      && has_operand_number <= 0)\n \t    {\n \t      res->number_other--;\n \t      res->number_extra_args++;\n \t    }\n \t  if (has_operand_number > 0)\n-\t    finish_dollar_format_checking (status, res, fki->flags & (int) FMT_FLAG_DOLLAR_GAP_POINTER_OK);\n+\t    finish_dollar_format_checking (res, fki->flags & (int) FMT_FLAG_DOLLAR_GAP_POINTER_OK);\n \t  return;\n \t}\n       if (*format_chars++ != '%')\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-\t  status_warning (status, \"spurious trailing %<%%%> in format\");\n+\t  warning (\"spurious trailing %<%%%> in format\");\n \t  continue;\n \t}\n       if (*format_chars == '%')\n@@ -1736,7 +1702,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t     is not used here, we can't immediately conclude this is a\n \t     format without them, since it could be printf %m or scanf %*.  */\n \t  int opnum;\n-\t  opnum = maybe_read_dollar_number (status, &format_chars, 0,\n+\t  opnum = maybe_read_dollar_number (&format_chars, 0,\n \t\t\t\t\t    first_fillin_param,\n \t\t\t\t\t    &main_arg_params, fki);\n \t  if (opnum == -1)\n@@ -1749,7 +1715,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t}\n       else if (fki->flags & FMT_FLAG_USE_DOLLAR)\n \t{\n-\t  if (avoid_dollar_number (status, format_chars))\n+\t  if (avoid_dollar_number (format_chars))\n \t    return;\n \t}\n \n@@ -1763,7 +1729,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      status_warning (status, \"repeated %s in format\", _(s->name));\n+\t      warning (\"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n \t    {\n@@ -1776,7 +1742,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t      ++format_chars;\n \t      if (*format_chars == 0)\n \t\t{\n-\t\t  status_warning (status, \"missing fill character at end of strfmon format\");\n+\t\t  warning (\"missing fill character at end of strfmon format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -1797,7 +1763,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t      if (has_operand_number != 0)\n \t\t{\n \t\t  int opnum;\n-\t\t  opnum = maybe_read_dollar_number (status, &format_chars,\n+\t\t  opnum = maybe_read_dollar_number (&format_chars,\n \t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n \t\t\t\t\t\t    &params, fki);\n@@ -1813,14 +1779,14 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (avoid_dollar_number (status, format_chars))\n+\t\t  if (avoid_dollar_number (format_chars))\n \t\t    return;\n \t\t}\n \t      if (info->first_arg_num != 0)\n \t\t{\n \t\t  if (params == 0)\n \t\t    {\n-\t\t      status_warning (status, \"too few arguments for format\");\n+\t\t      warning (\"too few arguments for format\");\n \t\t      return;\n \t\t    }\n \t\t  cur_param = TREE_VALUE (params);\n@@ -1861,8 +1827,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t}\n \t      if (found_width && !non_zero_width_char &&\n \t\t  (fki->flags & (int) FMT_FLAG_ZERO_WIDTH_BAD))\n-\t\tstatus_warning (status, \"zero width in %s format\",\n-\t\t\t\tfki->name);\n+\t\twarning (\"zero width in %s format\", fki->name);\n \t      if (found_width)\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -1880,8 +1845,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t  flag_chars[i++] = fki->left_precision_char;\n \t  flag_chars[i] = 0;\n \t  if (!ISDIGIT (*format_chars))\n-\t    status_warning (status, \"empty left precision in %s format\",\n-\t\t\t    fki->name);\n+\t    warning (\"empty left precision in %s format\", fki->name);\n \t  while (ISDIGIT (*format_chars))\n \t    ++format_chars;\n \t}\n@@ -1901,7 +1865,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t      if (has_operand_number != 0)\n \t\t{\n \t\t  int opnum;\n-\t\t  opnum = maybe_read_dollar_number (status, &format_chars,\n+\t\t  opnum = maybe_read_dollar_number (&format_chars,\n \t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n \t\t\t\t\t\t    &params, fki);\n@@ -1917,14 +1881,14 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (avoid_dollar_number (status, format_chars))\n+\t\t  if (avoid_dollar_number (format_chars))\n \t\t    return;\n \t\t}\n \t      if (info->first_arg_num != 0)\n \t\t{\n \t\t  if (params == 0)\n \t\t    {\n-\t\t      status_warning (status, \"too few arguments for format\");\n+\t\t      warning (\"too few arguments for format\");\n \t\t      return;\n \t\t    }\n \t\t  cur_param = TREE_VALUE (params);\n@@ -1954,8 +1918,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t    {\n \t      if (!(fki->flags & (int) FMT_FLAG_EMPTY_PREC_OK)\n \t\t  && !ISDIGIT (*format_chars))\n-\t\tstatus_warning (status, \"empty precision in %s format\",\n-\t\t\t\tfki->name);\n+\t\twarning (\"empty precision in %s format\", fki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n \t    }\n@@ -1994,9 +1957,9 @@ check_format_info_main (int *status, format_check_results *res,\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n \t      if (ADJ_STD (length_chars_std) > C_STD_VER)\n-\t\tstatus_warning (status, \"%s does not support the %qs %s length modifier\",\n-\t\t\t\tC_STD_NAME (length_chars_std), length_chars,\n-\t\t\t\tfki->name);\n+\t\twarning (\"%s does not support the %qs %s length modifier\",\n+\t\t\t C_STD_NAME (length_chars_std), length_chars,\n+\t\t\t fki->name);\n \t    }\n \t}\n \n@@ -2010,7 +1973,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n-\t\t  status_warning (status, \"repeated %s in format\", _(s->name));\n+\t\t  warning (\"repeated %s in format\", _(s->name));\n \t\t}\n \t      else\n \t\t{\n@@ -2044,7 +2007,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n \t      && format_char == '%'))\n \t{\n-\t  status_warning (status, \"conversion lacks type at end of format\");\n+\t  warning (\"conversion lacks type at end of format\");\n \t  continue;\n \t}\n       format_chars++;\n@@ -2055,18 +2018,18 @@ check_format_info_main (int *status, format_check_results *res,\n       if (fci->format_chars == 0)\n \t{\n           if (ISGRAPH(format_char))\n-\t    status_warning (status, \"unknown conversion type character %qc in format\",\n+\t    warning (\"unknown conversion type character %qc in format\",\n \t\t     format_char);\n \t  else\n-\t    status_warning (status, \"unknown conversion type character 0x%x in format\",\n+\t    warning (\"unknown conversion type character 0x%x in format\",\n \t\t     format_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (ADJ_STD (fci->std) > C_STD_VER)\n-\t    status_warning (status, \"%s does not support the %<%%%c%> %s format\",\n-\t\t\t    C_STD_NAME (fci->std), format_char, fki->name);\n+\t    warning (\"%s does not support the %<%%%c%> %s format\",\n+\t\t     C_STD_NAME (fci->std), format_char, fki->name);\n \t}\n \n       /* Validate the individual flags used, removing any that are invalid.  */\n@@ -2081,27 +2044,27 @@ check_format_info_main (int *status, format_check_results *res,\n \t      continue;\n \t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n-\t\tstatus_warning (status, \"%s used with %<%%%c%> %s format\",\n-\t\t\t\t_(s->name), format_char, fki->name);\n+\t\twarning (\"%s used with %<%%%c%> %s format\",\n+\t\t\t _(s->name), format_char, fki->name);\n \t\td++;\n \t\tcontinue;\n \t      }\n \t    if (pedantic)\n \t      {\n \t\tconst format_flag_spec *t;\n \t\tif (ADJ_STD (s->std) > C_STD_VER)\n-\t\t  status_warning (status, \"%s does not support %s\",\n-\t\t\t\t  C_STD_NAME (s->std), _(s->long_name));\n+\t\t  warning (\"%s does not support %s\",\n+\t\t\t   C_STD_NAME (s->std), _(s->long_name));\n \t\tt = get_flag_spec (flag_specs, flag_chars[i], fci->flags2);\n \t\tif (t != NULL && ADJ_STD (t->std) > ADJ_STD (s->std))\n \t\t  {\n \t\t    const char *long_name = (t->long_name != NULL\n \t\t\t\t\t     ? t->long_name\n \t\t\t\t\t     : s->long_name);\n \t\t    if (ADJ_STD (t->std) > C_STD_VER)\n-\t\t      status_warning (status, \"%s does not support %s with the %<%%%c%> %s format\",\n-\t\t\t\t      C_STD_NAME (t->std), _(long_name),\n-\t\t\t\t      format_char, fki->name);\n+\t\t      warning (\"%s does not support %s with the %<%%%c%> %s format\",\n+\t\t\t       C_STD_NAME (t->std), _(long_name),\n+\t\t\t       format_char, fki->name);\n \t\t  }\n \t      }\n \t  }\n@@ -2132,22 +2095,22 @@ check_format_info_main (int *status, format_check_results *res,\n \t  if (bad_flag_pairs[i].ignored)\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\tstatus_warning (status, \"%s ignored with %s and %<%%%c%> %s format\",\n-\t\t\t\t_(s->name), _(t->name), format_char,\n-\t\t\t\tfki->name);\n+\t\twarning (\"%s ignored with %s and %<%%%c%> %s format\",\n+\t\t\t _(s->name), _(t->name), format_char,\n+\t\t\t fki->name);\n \t      else\n-\t\tstatus_warning (status, \"%s ignored with %s in %s format\",\n-\t\t\t\t_(s->name), _(t->name), fki->name);\n+\t\twarning (\"%s ignored with %s in %s format\",\n+\t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t  else\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\tstatus_warning (status, \"use of %s and %s together with %<%%%c%> %s format\",\n-\t\t\t\t_(s->name), _(t->name), format_char,\n-\t\t\t\tfki->name);\n+\t\twarning (\"use of %s and %s together with %<%%%c%> %s format\",\n+\t\t\t _(s->name), _(t->name), format_char,\n+\t\t\t fki->name);\n \t      else\n-\t\tstatus_warning (status, \"use of %s and %s together in %s format\",\n-\t\t\t\t_(s->name), _(t->name), fki->name);\n+\t\twarning (\"use of %s and %s together in %s format\",\n+\t\t\t _(s->name), _(t->name), fki->name);\n \t    }\n \t}\n \n@@ -2165,10 +2128,10 @@ check_format_info_main (int *status, format_check_results *res,\n \t  else if (strchr (fci->flags2, '2') != 0)\n \t    y2k_level = 2;\n \t  if (y2k_level == 3)\n-\t    status_warning (status, \"%<%%%c%> yields only last 2 digits of year in some locales\",\n-\t\t\t    format_char);\n+\t    warning (\"%<%%%c%> yields only last 2 digits of year in some locales\",\n+\t\t     format_char);\n \t  else if (y2k_level == 2)\n-\t    status_warning (status, \"%<%%%c%> yields only last 2 digits of year\", format_char);\n+\t    warning (\"%<%%%c%> yields only last 2 digits of year\", format_char);\n \t}\n \n       if (strchr (fci->flags2, '[') != 0)\n@@ -2184,7 +2147,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    status_warning (status, \"no closing %<]%> for %<%%[%> format\");\n+\t    warning (\"no closing %<]%> for %<%%[%> format\");\n \t}\n \n       wanted_type = 0;\n@@ -2197,14 +2160,14 @@ check_format_info_main (int *status, format_check_results *res,\n \t  wanted_type_std = fci->types[length_chars_val].std;\n \t  if (wanted_type == 0)\n \t    {\n-\t      status_warning (status, \"use of %qs length modifier with %qc type character\",\n-\t\t\t      length_chars, format_char);\n+\t      warning (\"use of %qs length modifier with %qc type character\",\n+\t\t       length_chars, format_char);\n \t      /* Heuristic: skip one argument when an invalid length/type\n \t\t combination is encountered.  */\n \t      arg_num++;\n \t      if (params == 0)\n \t\t{\n-\t\t  status_warning (status, \"too few arguments for format\");\n+\t\t  warning (\"too few arguments for format\");\n \t\t  return;\n \t\t}\n \t      params = TREE_CHAIN (params);\n@@ -2218,9 +2181,9 @@ check_format_info_main (int *status, format_check_results *res,\n \t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n \t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n-\t\tstatus_warning (status, \"%s does not support the %<%%%s%c%> %s format\",\n-\t\t\t\tC_STD_NAME (wanted_type_std), length_chars,\n-\t\t\t\tformat_char, fki->name);\n+\t\twarning (\"%s does not support the %<%%%s%c%> %s format\",\n+\t\t\t C_STD_NAME (wanted_type_std), length_chars,\n+\t\t\t format_char, fki->name);\n \t    }\n \t}\n \n@@ -2233,9 +2196,9 @@ check_format_info_main (int *status, format_check_results *res,\n \t  if (main_arg_num != 0)\n \t    {\n \t      if (suppressed)\n-\t\tstatus_warning (status, \"operand number specified with suppressed assignment\");\n+\t\twarning (\"operand number specified with suppressed assignment\");\n \t      else\n-\t\tstatus_warning (status, \"operand number specified for format taking no argument\");\n+\t\twarning (\"operand number specified for format taking no argument\");\n \t    }\n \t}\n       else\n@@ -2250,14 +2213,14 @@ check_format_info_main (int *status, format_check_results *res,\n \t      ++arg_num;\n \t      if (has_operand_number > 0)\n \t\t{\n-\t\t  status_warning (status, \"missing $ operand number in format\");\n+\t\t  warning (\"missing $ operand number in format\");\n \t\t  return;\n \t\t}\n \t      else\n \t\thas_operand_number = 0;\n \t      if (params == 0)\n \t\t{\n-\t\t  status_warning (status, \"too few arguments for format\");\n+\t\t  warning (\"too few arguments for format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -2292,7 +2255,7 @@ check_format_info_main (int *status, format_check_results *res,\n \t}\n \n       if (first_wanted_type != 0)\n-\tcheck_format_types (status, first_wanted_type);\n+\tcheck_format_types (first_wanted_type);\n \n     }\n }\n@@ -2301,7 +2264,7 @@ check_format_info_main (int *status, format_check_results *res,\n /* Check the argument types from a single format conversion (possibly\n    including width and precision arguments).  */\n static void\n-check_format_types (int *status, format_wanted_type *types)\n+check_format_types (format_wanted_type *types)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -2346,18 +2309,16 @@ check_format_types (int *status, format_wanted_type *types)\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\tstatus_warning (status,\n-\t\t\t\t\"writing through null pointer (arg %d)\",\n-\t\t\t\targ_num);\n+\t\twarning (\"writing through null pointer (arg %d)\",\n+\t\t\t arg_num);\n \n \t      /* Check for reading through a NULL pointer.  */\n \t      if (types->reading_from_flag\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\tstatus_warning (status,\n-\t\t\t\t\"reading through null pointer (arg %d)\",\n-\t\t\t\targ_num);\n+\t\twarning (\"reading through null pointer (arg %d)\",\n+\t\t\t arg_num);\n \n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n \t\tcur_param = TREE_OPERAND (cur_param, 0);\n@@ -2376,7 +2337,7 @@ check_format_types (int *status, format_wanted_type *types)\n \t\t\t  && (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'c'\n \t\t\t      || (DECL_P (cur_param)\n \t\t\t\t  && TREE_READONLY (cur_param))))))\n-\t\tstatus_warning (status, \"writing into constant object (arg %d)\", arg_num);\n+\t\twarning (\"writing into constant object (arg %d)\", arg_num);\n \n \t      /* If there are extra type qualifiers beyond the first\n \t\t indirection, then this makes the types technically\n@@ -2386,16 +2347,16 @@ check_format_types (int *status, format_wanted_type *types)\n \t\t  && (TYPE_READONLY (cur_type)\n \t\t      || TYPE_VOLATILE (cur_type)\n \t\t      || TYPE_RESTRICT (cur_type)))\n-\t\tstatus_warning (status, \"extra type qualifiers in format argument (arg %d)\",\n+\t\twarning (\"extra type qualifiers in format argument (arg %d)\",\n \t\t\t arg_num);\n \n \t    }\n \t  else\n \t    {\n \t      if (types->pointer_count == 1)\n-\t\tstatus_warning (status, \"format argument is not a pointer (arg %d)\", arg_num);\n+\t\twarning (\"format argument is not a pointer (arg %d)\", arg_num);\n \t      else\n-\t\tstatus_warning (status, \"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n+\t\twarning (\"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n \t      break;\n \t    }\n \t}\n@@ -2494,10 +2455,10 @@ check_format_types (int *status, format_wanted_type *types)\n \t\t&& strcmp (types->wanted_type_name, that) != 0)\n \t      this = types->wanted_type_name;\n \t    if (types->name != 0)\n-\t      status_warning (status, \"%s is not type %s (arg %d)\", types->name, this,\n+\t      warning (\"%s is not type %s (arg %d)\", types->name, this,\n \t\t       arg_num);\n \t    else\n-\t      status_warning (status, \"%s format, %s arg (arg %d)\", this, that, arg_num);\n+\t      warning (\"%s format, %s arg (arg %d)\", this, that, arg_num);\n \t  }\n       }\n     }"}, {"sha": "4174c4028bb29e259beed940d6e8b1d59c100a89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -1,3 +1,8 @@\n+2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* call.c (build_over_call), typeck.c (build_function_call): Update\n+\tcalls to check_function_format.\n+\n 2004-06-30  Richard Henderson  <rth@redhat.com>\n \n \t* call.c (build_over_call): Use __builtin_memcpy for copying"}, {"sha": "290fd6b2b43c0dd708a66be203633e17fbec8c73", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -4724,7 +4724,7 @@ build_over_call (struct z_candidate *cand, int flags)\n   converted_args = nreverse (converted_args);\n \n   if (warn_format)\n-    check_function_format (NULL, TYPE_ATTRIBUTES (TREE_TYPE (fn)),\n+    check_function_format (TYPE_ATTRIBUTES (TREE_TYPE (fn)),\n \t\t\t   converted_args);\n \n   /* Avoid actually calling copy constructors and copy assignment operators,"}, {"sha": "1dfb3375067da62e3163b70894fc4951047509a1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9980154889a2bfd00c0c76176595948768be1487/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9980154889a2bfd00c0c76176595948768be1487", "patch": "@@ -2486,7 +2486,7 @@ build_function_call (tree function, tree params)\n   /* Check for errors in format strings.  */\n \n   if (warn_format)\n-    check_function_format (NULL, TYPE_ATTRIBUTES (fntype), coerced_params);\n+    check_function_format (TYPE_ATTRIBUTES (fntype), coerced_params);\n \n   return build_cxx_call (function, coerced_params);\n }"}]}