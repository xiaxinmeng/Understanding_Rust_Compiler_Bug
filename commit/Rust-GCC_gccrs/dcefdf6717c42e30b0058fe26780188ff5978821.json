{"sha": "dcefdf6717c42e30b0058fe26780188ff5978821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlZmRmNjcxN2M0MmUzMGIwMDU4ZmUyNjc4MDE4OGZmNTk3ODgyMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-28T18:08:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-28T18:08:56Z"}, "message": "target.h (targetm.address_cost): New.\n\n\t* target.h (targetm.address_cost): New.\n\t* target-def.h (TARGET_ADDRESS_COST): New.\n\t(TARGET_RTX_COSTS): Uncomment.  Oops.\n\t* cse.c (address_cost): Use new target hook.\n\t(default_address_cost): New.\n\t* output.h (default_address_cost): Declare.\n\t* hooks.c (hook_int_rtx_0): New.\n\t* hooks.h (hook_int_rtx_0): Declare.\n\t* loop.c (combine_givs_p): Remove if 0 code.\n\t* system.h (ADDRESS_COST): Poison.\n\n\t* config/alpha/alpha.c, config/alpha/alpha.h, config/d30v/d30v.c,\n\tconfig/d30v/d30v.h, config/ia64/ia64.c, config/ia64/ia64.h,\n\tconfig/m32r/m32r.c, config/m32r/m32r.h, config/mcore/mcore.c,\n\tconfig/mcore/mcore.h, config/mmix/mmix.c, config/mmix/mmix.h,\n\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h, config/sparc/sparc.c,\n\tconfig/sparc/sparc.h, config/v850/v850.c, config/v850/v850.h,\n\tconfig/xtensa/xtensa.c, config/xtensa/xtensa.h\n\t(TARGET_ADDRESS_COST): Define as hook_int_rtx_0.\n\t(ADDRESS_COST): Remove.\n\n\t* config/arc/arc-protos.h, config/arc/arc.c, config/arc/arc.h,\n\tconfig/avr/avr-protos.h, config/avr/avr.c, config/avr/avr.h,\n\tconfig/c4x/c4x-protos.h, config/c4x/c4x.c, config/c4x/c4x.h,\n\tconfig/dsp16xx/dsp16xx-protos.h, config/dsp16xx/dsp16xx.c,\n\tconfig/dsp16xx/dsp16xx.h, config/i386/i386-protos.h,\n\tconfig/i386/i386.c, config/i386/i386.h, config/i960/i960-protos.h,\n\tconfig/i960/i960.c, config/i960/i960.h, config/ip2k/ip2k-protos.h,\n\tconfig/ip2k/ip2k.c, config/ip2k/ip2k.h, config/mips/mips-protos.h,\n\tconfig/mips/mips.c, config/mips/mips.h,\n\tconfig/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c,\n\tconfig/m68hc11/m68hc11.h, config/ns32k/ns32k-protos.h,\n\tconfig/ns32k/ns32k.c, config/ns32k/ns32k.h, config/pa/pa-protos.h,\n\tconfig/pa/pa.c, config/pa/pa.h, config/s390/s390-protos.h,\n\tconfig/s390/s390.c, config/s390/s390.h, config/vax/vax-protos.h,\n\tconfig/vax/vax.c, config/vax/vax.h\n\t(foo_address_cost): Make static.\n\t(TARGET_ADDRESS_COST): New.\n\t(ADDRESS_COST): Remove.\n\n\t* config/arm/arm.h, config/arm/arm.c, config/m88k/m88k.h,\n\tconfig/m88k/m88k.c, config/romp/romp.h, config/romp/romp.c,\n\tconfig/sh/sh.c, config/sh/sh.h, config/stormy16/stormy16.c,\n\tconfig/stormy16/stormy16.h\n\t(ADDRESS_COST): Move code ...\n\t(foo_address_cost): ... here.\n\t(TARGET_ADDRESS_COST): New.\n\n\t* config/m32r/m32r.c (m32r_address_cost): Remove.\n\t* config/m32r/m32r-protos.h: Update.\n\n\t* config/mmix/mmix.c (mmix_address_cost): Remove.\n\t* config/mmix/mmix-protos.h: Update.\n\n\t* config/mn10300/mn10300.c (mn10300_address_cost_1): Rename from\n\tmn10300_address_cost; move unsig allocation ...\n\t(mn10300_address_cost): ... here.\n\t(TARGET_ADDRESS_COST): New.\n\t* config/mn10300/mn10300-protos.h: Update.\n\t* config/mn10300/mn10300.h (ADDRESS_COST): Remove.\n\nFrom-SVN: r61988", "tree": {"sha": "2f6fbc07999c9923c492e499429bdd22d90f295a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6fbc07999c9923c492e499429bdd22d90f295a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcefdf6717c42e30b0058fe26780188ff5978821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcefdf6717c42e30b0058fe26780188ff5978821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcefdf6717c42e30b0058fe26780188ff5978821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcefdf6717c42e30b0058fe26780188ff5978821/comments", "author": null, "committer": null, "parents": [{"sha": "f2ce60b88d09c376e9862b78e5d37045b2e92351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ce60b88d09c376e9862b78e5d37045b2e92351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ce60b88d09c376e9862b78e5d37045b2e92351"}], "stats": {"total": 996, "additions": 402, "deletions": 594}, "files": [{"sha": "808a3af10972c961d6533d76658b01a7f242c6b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1,3 +1,66 @@\n+2003-01-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (targetm.address_cost): New.\n+\t* target-def.h (TARGET_ADDRESS_COST): New.\n+\t(TARGET_RTX_COSTS): Uncomment.  Oops.\n+\t* cse.c (address_cost): Use new target hook.\n+\t(default_address_cost): New.\n+\t* output.h (default_address_cost): Declare.\n+\t* hooks.c (hook_int_rtx_0): New.\n+\t* hooks.h (hook_int_rtx_0): Declare.\n+\t* loop.c (combine_givs_p): Remove if 0 code.\n+\t* system.h (ADDRESS_COST): Poison.\n+\n+\t* config/alpha/alpha.c, config/alpha/alpha.h, config/d30v/d30v.c,\n+\tconfig/d30v/d30v.h, config/ia64/ia64.c, config/ia64/ia64.h,\n+\tconfig/m32r/m32r.c, config/m32r/m32r.h, config/mcore/mcore.c,\n+\tconfig/mcore/mcore.h, config/mmix/mmix.c, config/mmix/mmix.h,\n+\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h, config/sparc/sparc.c,\n+\tconfig/sparc/sparc.h, config/v850/v850.c, config/v850/v850.h,\n+\tconfig/xtensa/xtensa.c, config/xtensa/xtensa.h\n+\t(TARGET_ADDRESS_COST): Define as hook_int_rtx_0.\n+\t(ADDRESS_COST): Remove.\n+\n+\t* config/arc/arc-protos.h, config/arc/arc.c, config/arc/arc.h,\n+\tconfig/avr/avr-protos.h, config/avr/avr.c, config/avr/avr.h,\n+\tconfig/c4x/c4x-protos.h, config/c4x/c4x.c, config/c4x/c4x.h,\n+\tconfig/dsp16xx/dsp16xx-protos.h, config/dsp16xx/dsp16xx.c,\n+\tconfig/dsp16xx/dsp16xx.h, config/i386/i386-protos.h,\n+\tconfig/i386/i386.c, config/i386/i386.h, config/i960/i960-protos.h,\n+\tconfig/i960/i960.c, config/i960/i960.h, config/ip2k/ip2k-protos.h,\n+\tconfig/ip2k/ip2k.c, config/ip2k/ip2k.h, config/mips/mips-protos.h,\n+\tconfig/mips/mips.c, config/mips/mips.h, \n+\tconfig/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c,\n+\tconfig/m68hc11/m68hc11.h, config/ns32k/ns32k-protos.h, \n+\tconfig/ns32k/ns32k.c, config/ns32k/ns32k.h, config/pa/pa-protos.h,\n+\tconfig/pa/pa.c, config/pa/pa.h, config/s390/s390-protos.h,\n+\tconfig/s390/s390.c, config/s390/s390.h, config/vax/vax-protos.h,\n+\tconfig/vax/vax.c, config/vax/vax.h\n+\t(foo_address_cost): Make static.\n+\t(TARGET_ADDRESS_COST): New.\n+\t(ADDRESS_COST): Remove.\n+\n+\t* config/arm/arm.h, config/arm/arm.c, config/m88k/m88k.h,\n+\tconfig/m88k/m88k.c, config/romp/romp.h, config/romp/romp.c,\n+\tconfig/sh/sh.c, config/sh/sh.h, config/stormy16/stormy16.c,\n+\tconfig/stormy16/stormy16.h\n+\t(ADDRESS_COST): Move code ...\n+\t(foo_address_cost): ... here.\n+\t(TARGET_ADDRESS_COST): New.\n+\n+\t* config/m32r/m32r.c (m32r_address_cost): Remove.\n+\t* config/m32r/m32r-protos.h: Update.\n+\n+\t* config/mmix/mmix.c (mmix_address_cost): Remove.\n+\t* config/mmix/mmix-protos.h: Update.\n+\n+\t* config/mn10300/mn10300.c (mn10300_address_cost_1): Rename from\n+\tmn10300_address_cost; move unsig allocation ...\n+\t(mn10300_address_cost): ... here.\n+\t(TARGET_ADDRESS_COST): New.\n+\t* config/mn10300/mn10300-protos.h: Update.\n+\t* config/mn10300/mn10300.h (ADDRESS_COST): Remove.\n+\n 2003-01-28  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* haifa-sched.c (schedule_insn): Return necessary cycle advance"}, {"sha": "4e4de75b6adeaaf7f12fe59b16d6ade938c43234", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -371,6 +371,8 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS alpha_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "0522ba6c080878e1958821d9668b131cde7ddd55", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1416,11 +1416,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  \\\n { if (GET_CODE (ADDR) == AND) goto LABEL; }\n \n-/* Compute the cost of an address.  For the Alpha, all valid addresses are\n-   the same cost.  */\n-\n-#define ADDRESS_COST(X)  0\n-\n /* Machine-dependent reorg pass.  */\n #define MACHINE_DEPENDENT_REORG(X)\talpha_reorg(X)\n \f"}, {"sha": "717845eca0d7edb42c0b7eb5f8735c14ea43679f", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -34,7 +34,6 @@ extern const char *output_shift PARAMS ((rtx *));\n \n extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int arc_double_limm_p PARAMS ((rtx));\n-extern int arc_address_cost PARAMS ((rtx));\n extern int arc_eligible_for_epilogue_delay PARAMS ((rtx, int));\n extern void arc_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern void arc_print_operand PARAMS ((FILE *, rtx, int));"}, {"sha": "bd2afc015f11c57e275c3cf2f5dec9d19f6a5d89", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 63, "deletions": 61, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -97,6 +97,7 @@ static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void arc_encode_section_info PARAMS ((tree, int));\n static void arc_internal_label PARAMS ((FILE *, const char *, unsigned long));\n static bool arc_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int arc_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -119,6 +120,8 @@ static bool arc_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS arc_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST arc_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -842,18 +845,75 @@ arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \f\n /* Cost functions.  */\n \n+/* Compute a (partial) cost for rtx X.  Return true if the complete\n+   cost has been computed, and false if subexpressions should be\n+   scanned.  In either case, *TOTAL contains the cost result.  */\n+\n+static bool\n+arc_rtx_costs (x, code, outer_code, total)\n+     rtx x;\n+     int code;\n+     int outer_code ATTRIBUTE_UNUSED;\n+     int *total;\n+{\n+  switch (code)\n+    {\n+      /* Small integers are as cheap as registers.  4 byte values can\n+\t be fetched as immediate constants - let's give that the cost\n+\t of an extra insn.  */\n+    case CONST_INT:\n+      if (SMALL_INT (INTVAL (x)))\n+\t{\n+\t  *total = 0;\n+\t  return true;\n+\t}\n+      /* FALLTHRU */\n+\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      *total = COSTS_N_INSNS (1);\n+      return true;\n+\n+    case CONST_DOUBLE:\n+      {\n+        rtx high, low;\n+        split_double (x, &high, &low);\n+\t*total = COSTS_N_INSNS (!SMALL_INT (INTVAL (high))\n+\t\t\t\t+ !SMALL_INT (INTVAL (low)));\n+\treturn true;\n+      }\n+\n+    /* Encourage synth_mult to find a synthetic multiply when reasonable.\n+       If we need more than 12 insns to do a multiply, then go out-of-line,\n+       since the call overhead will be < 10% of the cost of the multiply.  */\n+    case ASHIFT:\n+    case ASHIFTRT:\n+    case LSHIFTRT:\n+      if (TARGET_SHIFTER)\n+        *total = COSTS_N_INSNS (1);\n+      else if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+        *total = COSTS_N_INSNS (16);\n+      else\n+        *total = COSTS_N_INSNS (INTVAL (XEXP ((x), 1)));\n+      return false;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n+\n /* Provide the costs of an addressing mode that contains ADDR.\n    If ADDR is not a valid address, its cost is irrelevant.  */\n \n-int\n+static int\n arc_address_cost (addr)\n      rtx addr;\n {\n   switch (GET_CODE (addr))\n     {\n     case REG :\n-      /* This is handled in the macro that calls us.\n-\t It's here for documentation.  */\n       return 1;\n \n     case LABEL_REF :\n@@ -2380,61 +2440,3 @@ arc_internal_label (stream, prefix, labelno)\n   arc_ccfsm_at_label (prefix, labelno);\n   default_internal_label (stream, prefix, labelno);\n }\n-\f\n-/* Compute a (partial) cost for rtx X.  Return true if the complete\n-   cost has been computed, and false if subexpressions should be\n-   scanned.  In either case, *TOTAL contains the cost result.  */\n-\n-static bool\n-arc_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code;\n-     int outer_code ATTRIBUTE_UNUSED;\n-     int *total;\n-{\n-  switch (code)\n-    {\n-      /* Small integers are as cheap as registers.  4 byte values can\n-\t be fetched as immediate constants - let's give that the cost\n-\t of an extra insn.  */\n-    case CONST_INT:\n-      if (SMALL_INT (INTVAL (x)))\n-\t{\n-\t  *total = 0;\n-\t  return true;\n-\t}\n-      /* FALLTHRU */\n-\n-    case CONST:\n-    case LABEL_REF:\n-    case SYMBOL_REF:\n-      *total = COSTS_N_INSNS (1);\n-      return true;\n-\n-    case CONST_DOUBLE:\n-      {\n-        rtx high, low;\n-        split_double (x, &high, &low);\n-\t*total = COSTS_N_INSNS (!SMALL_INT (INTVAL (high))\n-\t\t\t\t+ !SMALL_INT (INTVAL (low)));\n-\treturn true;\n-      }\n-\n-    /* Encourage synth_mult to find a synthetic multiply when reasonable.\n-       If we need more than 12 insns to do a multiply, then go out-of-line,\n-       since the call overhead will be < 10% of the cost of the multiply.  */\n-    case ASHIFT:\n-    case ASHIFTRT:\n-    case LSHIFTRT:\n-      if (TARGET_SHIFTER)\n-        *total = COSTS_N_INSNS (1);\n-      else if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-        *total = COSTS_N_INSNS (16);\n-      else\n-        *total = COSTS_N_INSNS (INTVAL (XEXP ((x), 1)));\n-      return false;\n-\n-    default:\n-      return false;\n-    }\n-}"}, {"sha": "583398c643bfcbedba07f2f0067f253004727d96", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -995,9 +995,6 @@ arc_select_cc_mode (OP, X, Y)\n \f\n /* Costs.  */\n \n-/* Compute the cost of an address.  */\n-#define ADDRESS_COST(ADDR) (REG_P (ADDR) ? 1 : arc_address_cost (ADDR))\n-\n /* Compute extra cost of moving data between one register class\n    and another.  */\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) 2"}, {"sha": "427f68e7bf613eb49a8523d18dec99acc911bc50", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -143,6 +143,7 @@ static void arm_output_mi_thunk\t\t\tPARAMS ((FILE *, tree,\n static int arm_rtx_costs_1\t\t\tPARAMS ((rtx, enum rtx_code,\n \t\t\t\t\t\t\t enum rtx_code));\n static bool arm_rtx_costs\t\t\tPARAMS ((rtx, int, int, int*));\n+static int arm_address_cost\t\t\tPARAMS ((rtx));\n \n #undef Hint\n #undef Mmode\n@@ -218,6 +219,8 @@ static bool arm_rtx_costs\t\t\tPARAMS ((rtx, int, int, int*));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS arm_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST arm_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3310,6 +3313,40 @@ arm_rtx_costs (x, code, outer_code, total)\n   return true;\n }\n \n+/* All address computations that can be done are free, but rtx cost returns\n+   the same for practically all of them.  So we weight the different types\n+   of address here in the order (most pref first):\n+   PRE/POST_INC/DEC, SHIFT or NON-INT sum, INT sum, REG, MEM or LABEL. */\n+\n+static int\n+arm_address_cost (X)\n+    rtx X;\n+{\n+#define ARM_ADDRESS_COST(X)\t\t\t\t\t\t     \\\n+  (10 - ((GET_CODE (X) == MEM || GET_CODE (X) == LABEL_REF\t\t     \\\n+\t  || GET_CODE (X) == SYMBOL_REF)\t\t\t\t     \\\n+\t ? 0\t\t\t\t\t\t\t\t     \\\n+\t : ((GET_CODE (X) == PRE_INC || GET_CODE (X) == PRE_DEC\t\t     \\\n+\t     || GET_CODE (X) == POST_INC || GET_CODE (X) == POST_DEC)\t     \\\n+\t    ? 10\t\t\t\t\t\t\t     \\\n+\t    : (((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS)\t\t     \\\n+\t\t? 6 + (GET_CODE (XEXP (X, 1)) == CONST_INT ? 2 \t\t     \\\n+\t\t       : ((GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == '2'     \\\n+\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == 'c'  \\\n+\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == '2'  \\\n+\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == 'c') \\\n+\t\t\t  ? 1 : 0))\t\t\t\t\t     \\\n+\t\t: 4)))))\n+\t \n+#define THUMB_ADDRESS_COST(X) \t\t\t\t\t\\\n+  ((GET_CODE (X) == REG \t\t\t\t\t\\\n+    || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n+\t&& GET_CODE (XEXP (X, 1)) == CONST_INT))\t\t\\\n+   ? 1 : 2)\n+     \n+  return (TARGET_ARM ? ARM_ADDRESS_COST (X) : THUMB_ADDRESS_COST (X));\n+}\n+\n static int\n arm_adjust_cost (insn, link, dep, cost)\n      rtx insn;"}, {"sha": "fb82ebcf68ba7cfc4e312b54f651cc9f3fad7f33", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2144,35 +2144,6 @@ typedef struct\n    ((GET_MODE_SIZE (M) < 4 ? 8 : 2 * GET_MODE_SIZE (M))\t\\\n     * (CLASS == LO_REGS ? 1 : 2)))\n  \n-/* All address computations that can be done are free, but rtx cost returns\n-   the same for practically all of them.  So we weight the different types\n-   of address here in the order (most pref first):\n-   PRE/POST_INC/DEC, SHIFT or NON-INT sum, INT sum, REG, MEM or LABEL. */\n-#define ARM_ADDRESS_COST(X)\t\t\t\t\t\t     \\\n-  (10 - ((GET_CODE (X) == MEM || GET_CODE (X) == LABEL_REF\t\t     \\\n-\t  || GET_CODE (X) == SYMBOL_REF)\t\t\t\t     \\\n-\t ? 0\t\t\t\t\t\t\t\t     \\\n-\t : ((GET_CODE (X) == PRE_INC || GET_CODE (X) == PRE_DEC\t\t     \\\n-\t     || GET_CODE (X) == POST_INC || GET_CODE (X) == POST_DEC)\t     \\\n-\t    ? 10\t\t\t\t\t\t\t     \\\n-\t    : (((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS)\t\t     \\\n-\t\t? 6 + (GET_CODE (XEXP (X, 1)) == CONST_INT ? 2 \t\t     \\\n-\t\t       : ((GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == '2'     \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == 'c'  \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == '2'  \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == 'c') \\\n-\t\t\t  ? 1 : 0))\t\t\t\t\t     \\\n-\t\t: 4)))))\n-\t \n-#define THUMB_ADDRESS_COST(X) \t\t\t\t\t\\\n-  ((GET_CODE (X) == REG \t\t\t\t\t\\\n-    || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n-\t&& GET_CODE (XEXP (X, 1)) == CONST_INT))\t\t\\\n-   ? 1 : 2)\n-     \n-#define ADDRESS_COST(X) \\\n-     (TARGET_ARM ? ARM_ADDRESS_COST (X) : THUMB_ADDRESS_COST (X))\n-   \n /* Try to generate sequences that don't involve branches, we can then use\n    conditional instructions */\n #define BRANCH_COST \\"}, {"sha": "35ac23295143af9db16c3c79a6a0a100ee24e410", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -104,7 +104,6 @@ extern const char *avr_out_sbxx_branch PARAMS ((rtx insn, rtx operands[]));\n \n extern enum reg_class preferred_reload_class PARAMS ((rtx x,\n \t\t\t\t\t\t     enum reg_class class));\n-extern int    avr_address_cost       PARAMS ((rtx x));\n extern int    extra_constraint       PARAMS ((rtx x, int c));\n extern rtx    legitimize_address     PARAMS ((rtx x, rtx oldx,\n \t\t\t\t\t     enum machine_mode mode));"}, {"sha": "017308bfb8d54934802ad083229de1ead31261a4", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -73,6 +73,7 @@ static void   avr_asm_out_ctor PARAMS ((rtx, int));\n static void   avr_asm_out_dtor PARAMS ((rtx, int));\n static int default_rtx_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n static bool avr_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int avr_address_cost PARAMS ((rtx));\n \n /* Allocate registers from r25 to r8 for parameters for function calls */\n #define FIRST_CUM_REG 26\n@@ -231,6 +232,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_SECTION_TYPE_FLAGS avr_section_type_flags\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS avr_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST avr_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5093,7 +5096,7 @@ avr_rtx_costs (x, code, outer_code, total)\n \n /* Calculate the cost of a memory address */\n \n-int\n+static int\n avr_address_cost (x)\n      rtx x;\n {"}, {"sha": "6b3d6774ab902bef67719d767ca96753f9664f3e", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1521,49 +1521,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    is a suitable definition for this macro on machines where anything\n    `CONSTANT_P' is valid.  */\n \n-#define ADDRESS_COST(ADDRESS) avr_address_cost (ADDRESS)\n-\n-/* An expression giving the cost of an addressing mode that contains\n-   ADDRESS.  If not defined, the cost is computed from the ADDRESS\n-   expression and the `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation\n-   of the true cost of the addressing mode.  However, on RISC\n-   machines, all instructions normally have the same length and\n-   execution time.  Hence all addresses will have equal costs.\n-\n-   In cases where more than one form of an address is known, the form\n-   with the lowest cost will be used.  If multiple forms have the\n-   same, lowest, cost, the one that is the most complex will be used.\n-\n-   For example, suppose an address that is equal to the sum of a\n-   register and a constant is used twice in the same basic block.\n-   When this macro is not defined, the address will be computed in a\n-   register and memory references will be indirect through that\n-   register.  On machines where the cost of the addressing mode\n-   containing the sum is no higher than that of a simple indirect\n-   reference, this will produce an additional instruction and\n-   possibly require an additional register.  Proper specification of\n-   this macro eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the cost\n-   is not relevant and can be any value; invalid addresses need not be\n-   assigned a different cost.\n-\n-   On machines where an address involving more than one register is as\n-   cheap as an address computation involving only one register,\n-   defining `ADDRESS_COST' to reflect this can cause two registers to\n-   be live over a region of code where only one would have been if\n-   `ADDRESS_COST' were not defined in that manner.  This effect should\n-   be considered in the definition of this macro.  Equivalent costs\n-   should probably only be given to addresses with different numbers\n-   of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as a\n-   constant.  */\n-\n #define REGISTER_MOVE_COST(MODE, FROM, TO) ((FROM) == STACK_REG ? 6 \\\n \t\t\t\t\t    : (TO) == STACK_REG ? 12 \\\n \t\t\t\t\t    : 2)"}, {"sha": "104d0e5c22d67e23d6fc1e39b655bda9a815a72c", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -81,8 +81,6 @@ extern int c4x_hard_regno_rename_ok PARAMS ((unsigned int, unsigned int));\n extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n \t\t\t\t\t\t       enum machine_mode));\n \n-extern int c4x_address_cost PARAMS ((rtx));\n-\n extern void c4x_print_operand PARAMS ((FILE *, rtx, int));\n \n extern void c4x_print_operand_address PARAMS ((FILE *, rtx));"}, {"sha": "77d3e8250ec4293d76c46822485859399a9589ce", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -198,6 +198,7 @@ static int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static void c4x_encode_section_info PARAMS ((tree, int));\n static void c4x_globalize_label PARAMS ((FILE *, const char *));\n static bool c4x_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int c4x_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -230,6 +231,8 @@ static bool c4x_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS c4x_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST c4x_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1699,7 +1702,7 @@ c4x_legitimize_address (orig, mode)\n    if it is worthwhile storing a common address into a register. \n    Unfortunately, the C4x address cost depends on other operands.  */\n \n-int \n+static int \n c4x_address_cost (addr)\n      rtx addr;\n {"}, {"sha": "68c7db54fbcf8a3568d2b5701f1f04571ec168c8", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1461,13 +1461,6 @@ CUMULATIVE_ARGS;\n \n /* Descripting Relative Cost of Operations.  */\n \n-/* Compute the cost of an address.  This is meant to approximate the size\n-   and/or execution delay of an insn using that address.  The value of this\n-   macro only matters for valid addresses.  We handle the most common address\n-   without a call to c4x_address_cost.  */\n-\n-#define ADDRESS_COST(ADDR) (REG_P (ADDR) ? 1 : c4x_address_cost (ADDR))\n-\n #define\tCANONICALIZE_COMPARISON(CODE, OP0, OP1)\t\t\\\n if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n {\t\t\t\t\t\t\t\\"}, {"sha": "1e79baa5309906ea4d10373a98dc73c8eab5315e", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -102,6 +102,8 @@ enum reg_class reg_class_from_letter[256];\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS d30v_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "ba9311302292757f7e4151ad664d56182ff959d7", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2426,45 +2426,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations */\n \n-/* An expression giving the cost of an addressing mode that contains ADDRESS.\n-   If not defined, the cost is computed from the ADDRESS expression and the\n-   `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation of the true\n-   cost of the addressing mode.  However, on RISC machines, all instructions\n-   normally have the same length and execution time.  Hence all addresses will\n-   have equal costs.\n-\n-   In cases where more than one form of an address is known, the form with the\n-   lowest cost will be used.  If multiple forms have the same, lowest, cost,\n-   the one that is the most complex will be used.\n-\n-   For example, suppose an address that is equal to the sum of a register and a\n-   constant is used twice in the same basic block.  When this macro is not\n-   defined, the address will be computed in a register and memory references\n-   will be indirect through that register.  On machines where the cost of the\n-   addressing mode containing the sum is no higher than that of a simple\n-   indirect reference, this will produce an additional instruction and possibly\n-   require an additional register.  Proper specification of this macro\n-   eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the cost is not\n-   relevant and can be any value; invalid addresses need not be assigned a\n-   different cost.\n-\n-   On machines where an address involving more than one register is as cheap as\n-   an address computation involving only one register, defining `ADDRESS_COST'\n-   to reflect this can cause two registers to be live over a region of code\n-   where only one would have been if `ADDRESS_COST' were not defined in that\n-   manner.  This effect should be considered in the definition of this macro.\n-   Equivalent costs should probably only be given to addresses with different\n-   numbers of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as a constant.  */\n-#define ADDRESS_COST(ADDRESS) 0\n-\n /* A C expression for the cost of moving data from a register in class FROM to\n    one in class TO.  The classes are expressed using the enumeration values\n    such as `GENERAL_REGS'.  A value of 4 is the default; other values are"}, {"sha": "633b9b6925a8d7cf6d578184d9ca9a3267ea8c2b", "filename": "gcc/config/dsp16xx/dsp16xx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -47,7 +47,6 @@ extern void print_operand PARAMS ((FILE *, rtx, int));\n extern void print_operand_address PARAMS ((FILE *, rtx));\n extern void output_dsp16xx_float_const PARAMS ((rtx *));\n extern void emit_1600_core_shift PARAMS ((enum rtx_code, rtx *, int));\n-extern int dsp16xx_address_cost PARAMS ((rtx));\n extern int symbolic_address_p PARAMS ((rtx));\n extern int uns_comparison_operator PARAMS ((rtx, enum machine_mode));\n #endif /* RTX_CODE */"}, {"sha": "bf3f5861d22c02ce201bfa7ebe5b0dcb9d6baceb", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -152,6 +152,7 @@ static int reg_save_size PARAMS ((void));\n static void dsp16xx_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void dsp16xx_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static bool dsp16xx_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int dsp16xx_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -169,6 +170,8 @@ static bool dsp16xx_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS dsp16xx_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST dsp16xx_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2230,7 +2233,7 @@ asm_output_local(file, name, size, rounded)\n \tfprintf (file, \"int\\n\");\n }\n \n-int\n+static int\n dsp16xx_address_cost (addr)\n      rtx addr;\n {"}, {"sha": "6657fb82004f661ddbb2ce6ccd6f4432d8ab79fb", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1431,10 +1431,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n \f\n /* DESCRIBING RELATIVE COSTS OF OPERATIONS */\n \n-/* An expression giving the cost of an addressing mode that contains\n-   address.  */\n-#define ADDRESS_COST(ADDR)  dsp16xx_address_cost (ADDR)\n-\n /* A c expression for the cost of moving data from a register in\n    class FROM to one in class TO. The classes are expressed using\n    the enumeration values such as GENERAL_REGS. A value of 2 is"}, {"sha": "c5349a01d28f7007c55572fe9d9fad6ebd4091f2", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -149,7 +149,6 @@ extern void ix86_split_long_move PARAMS ((rtx[]));\n extern void ix86_split_ashldi PARAMS ((rtx *, rtx));\n extern void ix86_split_ashrdi PARAMS ((rtx *, rtx));\n extern void ix86_split_lshrdi PARAMS ((rtx *, rtx));\n-extern int ix86_address_cost PARAMS ((rtx));\n extern rtx ix86_find_base_term PARAMS ((rtx));\n \n extern rtx assign_386_stack_local PARAMS ((enum machine_mode, int));"}, {"sha": "9abff89a052afddbf5eb13218d896cdcd1485b05", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -840,6 +840,7 @@ struct ix86_address\n };\n \n static int ix86_decompose_address PARAMS ((rtx, struct ix86_address *));\n+static int ix86_address_cost PARAMS ((rtx));\n static bool ix86_cannot_force_const_mem PARAMS ((rtx));\n \n static void ix86_encode_section_info PARAMS ((tree, int)) ATTRIBUTE_UNUSED;\n@@ -999,6 +1000,8 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ix86_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST ix86_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5275,7 +5278,7 @@ ix86_decompose_address (addr, out)\n    the address into a reg and make a new pseudo.  But not if the address\n    requires to two regs - that would mean more pseudos with longer\n    lifetimes.  */\n-int\n+static int\n ix86_address_cost (x)\n      rtx x;\n {"}, {"sha": "1e38d10d36e32c83fa1b09bd8bd494ff2721cf5e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2585,55 +2585,6 @@ do {\t\t\t\t\t\t\t\\\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \f\n-/* An expression giving the cost of an addressing mode that contains\n-   ADDRESS.  If not defined, the cost is computed from the ADDRESS\n-   expression and the `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation\n-   of the true cost of the addressing mode.  However, on RISC\n-   machines, all instructions normally have the same length and\n-   execution time.  Hence all addresses will have equal costs.\n-\n-   In cases where more than one form of an address is known, the form\n-   with the lowest cost will be used.  If multiple forms have the\n-   same, lowest, cost, the one that is the most complex will be used.\n-\n-   For example, suppose an address that is equal to the sum of a\n-   register and a constant is used twice in the same basic block.\n-   When this macro is not defined, the address will be computed in a\n-   register and memory references will be indirect through that\n-   register.  On machines where the cost of the addressing mode\n-   containing the sum is no higher than that of a simple indirect\n-   reference, this will produce an additional instruction and\n-   possibly require an additional register.  Proper specification of\n-   this macro eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the cost\n-   is not relevant and can be any value; invalid addresses need not be\n-   assigned a different cost.\n-\n-   On machines where an address involving more than one register is as\n-   cheap as an address computation involving only one register,\n-   defining `ADDRESS_COST' to reflect this can cause two registers to\n-   be live over a region of code where only one would have been if\n-   `ADDRESS_COST' were not defined in that manner.  This effect should\n-   be considered in the definition of this macro.  Equivalent costs\n-   should probably only be given to addresses with different numbers\n-   of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as a\n-   constant.\n-\n-   For i386, it is better to use a complex address than let gcc copy\n-   the address into a reg and make a new pseudo.  But not if the address\n-   requires to two regs - that would mean more pseudos with longer\n-   lifetimes.  */\n-\n-#define ADDRESS_COST(RTX) \\\n-  ix86_address_cost (RTX)\n-\n /* A C expression for the cost of moving data from a register in class FROM to\n    one in class TO.  The classes are expressed using the enumeration values\n    such as `GENERAL_REGS'.  A value of 2 is the default; other values are"}, {"sha": "983afb2c5a322e3d620e288946791c242de68b41", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -60,7 +60,6 @@ extern int arith32_operand PARAMS ((rtx, enum machine_mode));\n extern int power2_operand PARAMS ((rtx, enum machine_mode));\n extern int cmplpower2_operand PARAMS ((rtx, enum machine_mode));\n extern enum machine_mode select_cc_mode PARAMS ((RTX_CODE, rtx));\n-extern int i960_address_cost PARAMS ((rtx));\n extern int emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n extern int i960_bypass PARAMS ((rtx, rtx, rtx, int));\n extern void i960_print_operand_addr PARAMS ((FILE *, rtx));"}, {"sha": "7436104c3ffd26b7290f25e7dc38dd2b82f88f0e", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -51,6 +51,7 @@ static void i960_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree));\n static bool i960_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int i960_address_cost PARAMS ((rtx));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -110,6 +111,8 @@ static int ret_label = 0;\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS i960_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST i960_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -503,15 +506,13 @@ gen_compare_reg (code, x, y)\n \n /* ??? Try using just RTX_COST, i.e. not defining ADDRESS_COST.  */\n \n-int\n+static int\n i960_address_cost (x)\n      rtx x;\n {\n-#if 0\n-  /* Handled before calling here.  */\n   if (GET_CODE (x) == REG)\n     return 1;\n-#endif\n+\n   /* This is a MEMA operand -- it's free.  */\n   if (GET_CODE (x) == CONST_INT\n       && INTVAL (x) >= 0"}, {"sha": "f93f0159f10a2219042eadc50e4e65a34f915e0c", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1153,12 +1153,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n #ifndef WIND_RIVER\n #define\tTARGET_MEM_FUNCTIONS\t1\n #endif\n-\n-/* The i960 offers addressing modes which are \"as cheap as a register\".\n-   See i960.c (or gcc.texinfo) for details.  */\n-\n-#define ADDRESS_COST(RTX) \\\n-  (GET_CODE (RTX) == REG ? 1 : i960_address_cost (RTX))\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "f9fc8cadd5afa6d10c70a1abbf522a2209fe5014", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -317,6 +317,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "3e1f295d73e26c52399e1bd7125e28051fbb8905", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1673,12 +1673,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations */\n \n-/* An expression giving the cost of an addressing mode that contains ADDRESS.\n-   If not defined, the cost is computed from the ADDRESS expression and the\n-   `CONST_COSTS' values.  */\n-\n-#define ADDRESS_COST(ADDRESS) 0\n-\n /* A C expression for the cost of moving data from a register in class FROM to\n    one in class TO, using MODE.  */\n "}, {"sha": "55f8ba66ab902ae9f61291597c70c08a24b64a47", "filename": "gcc/config/ip2k/ip2k-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -39,7 +39,6 @@ extern int ip2k_return_pops_args PARAMS ((tree, tree, int));\n #ifdef RTX_CODE\n extern int legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n extern void machine_dependent_reorg PARAMS ((rtx));\n-extern int ip2k_address_cost PARAMS ((rtx));\n extern int ip2k_extra_constraint PARAMS ((rtx, int));\n extern rtx legitimize_address PARAMS ((rtx, rtx, enum machine_mode, rtx));\n extern int adjust_insn_length PARAMS ((rtx insn, int len));"}, {"sha": "43d08ae9f9a93798404e0896d1a241eba963bbf7", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -79,6 +79,7 @@ static tree ip2k_handle_progmem_attribute PARAMS ((tree *, tree, tree, int,\n static tree ip2k_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t  bool *));\n static bool ip2k_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int ip2k_address_cost PARAMS ((rtx));\n \n const struct attribute_spec ip2k_attribute_table[];\n \n@@ -104,6 +105,8 @@ const struct attribute_spec ip2k_attribute_table[];\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ip2k_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST ip2k_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -3418,7 +3421,7 @@ ip2k_rtx_costs (x, code, outer_code, total)\n \n /* Calculate the cost of a memory address.  */\n \n-int\n+static int\n ip2k_address_cost (x)\n      rtx x;\n {"}, {"sha": "34f901c2769739f6384727109d449a2ebfd8e0e0", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1765,49 +1765,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    is a suitable definition for this macro on machines where anything\n    `CONSTANT_P' is valid.  */\n \n-#define ADDRESS_COST(ADDRESS) ip2k_address_cost (ADDRESS)\n-\n-/* An expression giving the cost of an addressing mode that contains\n-   ADDRESS.  If not defined, the cost is computed from the ADDRESS\n-   expression and the `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation\n-   of the true cost of the addressing mode.  However, on RISC\n-   machines, all instructions normally have the same length and\n-   execution time.  Hence all addresses will have equal costs.\n-\n-   In cases where more than one form of an address is known, the form\n-   with the lowest cost will be used.  If multiple forms have the\n-   same, lowest, cost, the one that is the most complex will be used.\n-\n-   For example, suppose an address that is equal to the sum of a\n-   register and a constant is used twice in the same basic block.\n-   When this macro is not defined, the address will be computed in a\n-   register and memory references will be indirect through that\n-   register.  On machines where the cost of the addressing mode\n-   containing the sum is no higher than that of a simple indirect\n-   reference, this will produce an additional instruction and\n-   possibly require an additional register.  Proper specification of\n-   this macro eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the cost\n-   is not relevant and can be any value; invalid addresses need not be\n-   assigned a different cost.\n-\n-   On machines where an address involving more than one register is as\n-   cheap as an address computation involving only one register,\n-   defining `ADDRESS_COST' to reflect this can cause two registers to\n-   be live over a region of code where only one would have been if\n-   `ADDRESS_COST' were not defined in that manner.  This effect should\n-   be considered in the definition of this macro.  Equivalent costs\n-   should probably only be given to addresses with different numbers\n-   of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as a\n-   constant.  */\n-\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) 7\n /* A C expression for the cost of moving data from a register in class\n    FROM to one in class TO.  The classes are expressed using the"}, {"sha": "3816dd5e8438be2251852786624a03548be3458e", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -54,7 +54,6 @@ extern void   m32r_output_block_move \t\tPARAMS ((rtx, rtx *));\n extern void   m32r_expand_block_move \t\tPARAMS ((rtx *));\n extern void   m32r_print_operand\t\tPARAMS ((FILE *, rtx, int));\n extern void   m32r_print_operand_address\tPARAMS ((FILE *, rtx));\n-extern int    m32r_address_cost \t\tPARAMS ((rtx));\n extern int    m32r_not_same_reg \t\tPARAMS ((rtx, rtx));\n \n #ifdef HAVE_MACHINE_MODES"}, {"sha": "ff027949e5b5194d6953873172b92f00f9a4bd4f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -116,6 +116,8 @@ static bool m32r_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m32r_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1804,19 +1806,6 @@ m32r_rtx_costs (x, code, outer_code, total)\n       return false;\n     }\n }\n-\n-/* Provide the costs of an addressing mode that contains ADDR.\n-   If ADDR is not a valid address, its cost is irrelevant.\n-\n-   This function is trivial at the moment.  This code doesn't live\n-   in m32r.h so it's easy to experiment.  */\n-\n-int\n-m32r_address_cost (addr)\n-     rtx addr ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n \f\n /* Type of function DECL.\n "}, {"sha": "74431b6ca53805f0de04d7e39376e6ab786aad53", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1420,9 +1420,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Costs.  */\n \n-/* Compute the cost of an address.  */\n-#define ADDRESS_COST(ADDR) m32r_address_cost (ADDR)\n-\n /* Compute extra cost of moving data between one register class\n    and another.  */\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) 2"}, {"sha": "ec43ca0ac1563c86155f9cfad2a3db02a1509110", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -89,8 +89,6 @@ extern int m68hc11_memory_move_cost PARAMS((enum machine_mode, enum reg_class,\n                                            int));\n extern int m68hc11_register_move_cost PARAMS((enum machine_mode,\n \t\t\t\t\t      enum reg_class, enum reg_class));\n-extern int m68hc11_address_cost PARAMS((rtx));\n-\n \n extern void m68hc11_emit_libcall PARAMS((const char*, enum rtx_code,\n                                          enum machine_mode, enum machine_mode,"}, {"sha": "6dafb1988185420399ff4d383b9bde7f961432b0", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -67,6 +67,7 @@ static int go_if_legitimate_address_internal PARAMS((rtx, enum machine_mode,\n static int register_indirect_p PARAMS((rtx, enum machine_mode, int));\n static rtx m68hc11_expand_compare PARAMS((enum rtx_code, rtx, rtx));\n static int must_parenthesize PARAMS ((rtx));\n+static int m68hc11_address_cost PARAMS ((rtx));\n static int m68hc11_shift_cost PARAMS ((enum machine_mode, rtx, int));\n static int m68hc11_rtx_costs_1 PARAMS ((rtx, enum rtx_code, enum rtx_code));\n static bool m68hc11_rtx_costs PARAMS ((rtx, int, int, int *));\n@@ -233,6 +234,8 @@ static int nb_soft_regs;\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m68hc11_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST m68hc11_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5226,7 +5229,7 @@ m68hc11_register_move_cost (mode, from, to)\n /* Provide the costs of an addressing mode that contains ADDR.\n    If ADDR is not a valid address, its cost is irrelevant.  */\n \n-int\n+static int\n m68hc11_address_cost (addr)\n      rtx addr;\n {"}, {"sha": "c51f19242549805acec32bc7ca4b977e663faf09", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1391,11 +1391,6 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n #define NOTICE_UPDATE_CC(EXP, INSN) \\\n \tm68hc11_notice_update_cc ((EXP), (INSN))\n \n-/* An expression giving the cost of an addressing mode that contains\n-   ADDRESS.  */\n-\n-#define ADDRESS_COST(RTX) m68hc11_address_cost (RTX)\n-\n /* Move costs between classes of registers */\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n     (m68hc11_register_move_cost (MODE, CLASS1, CLASS2))"}, {"sha": "441b6f44ab63dc0103382943e1c89a0f380d5ec7", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -80,6 +80,7 @@ static void m88k_encode_section_info PARAMS ((tree, int));\n static void m88k_internal_label PARAMS ((FILE *, const char *, unsigned long));\n #endif\n static bool m88k_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int m88k_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -114,6 +115,8 @@ static bool m88k_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m88k_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST m88k_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3429,3 +3432,26 @@ m88k_rtx_costs (x, code, outer_code, total)\n       return false;\n     }\n }\n+\n+/* Provide the costs of an addressing mode that contains ADDR.\n+   If ADDR is not a valid address, its cost is irrelevant.\n+   REG+REG is made slightly more expensive because it might keep\n+   a register live for longer than we might like.  */\n+static int\n+m88k_address_cost (x)\n+     rtx x;\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case REG:\n+    case LO_SUM:\n+    case MULT:\n+      return 1;\n+    case HIGH:\n+      return 2;\n+    case PLUS:\n+      return (REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1))) ? 2 : 1;\n+    default:\n+      return 4;\n+    }\n+}"}, {"sha": "7cf036bbd9a6951316a53f04531c47763b73fd32", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1504,18 +1504,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    state with CC_STATUS_INIT for now.  */\n #define CC_STATUS_INIT m88k_volatile_code = '\\0'\n \n-/* Provide the costs of an addressing mode that contains ADDR.\n-   If ADDR is not a valid address, its cost is irrelevant.\n-   REG+REG is made slightly more expensive because it might keep\n-   a register live for longer than we might like.  */\n-#define ADDRESS_COST(ADDR)\t\t\t\t\\\n-  (GET_CODE (ADDR) == REG ? 1 :\t\t\t\t\\\n-   GET_CODE (ADDR) == LO_SUM ? 1 :\t\t\t\\\n-   GET_CODE (ADDR) == HIGH ? 2 :\t\t\t\\\n-   GET_CODE (ADDR) == MULT ? 1 :\t\t\t\\\n-   GET_CODE (ADDR) != PLUS ? 4 :\t\t\t\\\n-   (REG_P (XEXP (ADDR, 0)) && REG_P (XEXP (ADDR, 1))) ? 2 : 1)\n-\n /* A C expressions returning the cost of moving data of MODE from a register\n    to or from memory.  This is more costly than between registers.  */\n #define MEMORY_MOVE_COST(MODE,CLASS,IN) 4"}, {"sha": "865cc30ebee7aa7b333e4741bf26318c93f01e7a", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -170,6 +170,8 @@ static bool       mcore_rtx_costs\t\tPARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mcore_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "6d2078c966cd5aaca825169e0f9db7ed6f015432", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1004,10 +1004,6 @@ extern const enum reg_class reg_class_from_letter[];\n #define Pmode          SImode\n #define FUNCTION_MODE  Pmode\n \n-/* provide the cost for an address calculation.\n-   All addressing modes cost the same on the MCore.  */\n-#define\tADDRESS_COST(RTX)\t1\n-\n /* Compute extra cost of moving data between one register class\n    and another.  All register moves are cheap.  */\n #define REGISTER_MOVE_COST(MODE, SRCCLASS, DSTCLASS) 2"}, {"sha": "902f1bef48b506e466a4a8416b1545e1e59c08ef", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -90,7 +90,6 @@ extern void\t\tmips_gen_conditional_trap PARAMS ((rtx *));\n extern void\t\tmips_emit_fcc_reload PARAMS ((rtx, rtx, rtx));\n extern void\t\tmips_set_return_address PARAMS ((rtx, rtx));\n extern void\t\tmachine_dependent_reorg PARAMS ((rtx));\n-extern int\t\tmips_address_cost PARAMS ((rtx));\n extern void\t\tmips_count_memory_refs PARAMS ((rtx, int));\n extern HOST_WIDE_INT\tmips_debugger_offset PARAMS ((rtx, HOST_WIDE_INT));\n extern int\t\tmips_check_split PARAMS ((rtx, enum machine_mode));"}, {"sha": "a6ad4c0f7ab78867d3c3a7f002c1ffcaf1299e72", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -156,6 +156,7 @@ static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n static void mips_encode_section_info\t\tPARAMS ((tree, int));\n static bool mips_rtx_costs\t\t\tPARAMS ((rtx, int, int, int *));\n+static int mips_address_cost\t\t\tPARAMS ((rtx));\n \n \n /* Structure to be filled in by compute_frame_size with register\n@@ -674,6 +675,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_VALID_POINTER_MODE mips_valid_pointer_mode\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mips_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST mips_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3324,12 +3327,15 @@ mips_rtx_costs (x, code, outer_code, total)\n /* Provide the costs of an addressing mode that contains ADDR.\n    If ADDR is not a valid address, its cost is irrelevant.  */\n \n-int\n+static int\n mips_address_cost (addr)\n      rtx addr;\n {\n   switch (GET_CODE (addr))\n     {\n+    case REG:\n+      return 1;\n+\n     case LO_SUM:\n       return 1;\n "}, {"sha": "24b668b70fef6865a2d8f44869e7d79ae158ce22", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -3385,50 +3385,6 @@ typedef struct mips_args {\n #define FUNCTION_MODE (Pmode == DImode ? DImode : SImode)\n \n \f\n-/* An expression giving the cost of an addressing mode that\n-   contains ADDRESS.  If not defined, the cost is computed from the\n-   form of the ADDRESS expression and the `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation\n-   of the true cost of the addressing mode.  However, on RISC\n-   machines, all instructions normally have the same length and\n-   execution time.  Hence all addresses will have equal costs.\n-\n-   In cases where more than one form of an address is known, the\n-   form with the lowest cost will be used.  If multiple forms have\n-   the same, lowest, cost, the one that is the most complex will be\n-   used.\n-\n-   For example, suppose an address that is equal to the sum of a\n-   register and a constant is used twice in the same basic block.\n-   When this macro is not defined, the address will be computed in\n-   a register and memory references will be indirect through that\n-   register.  On machines where the cost of the addressing mode\n-   containing the sum is no higher than that of a simple indirect\n-   reference, this will produce an additional instruction and\n-   possibly require an additional register.  Proper specification\n-   of this macro eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the\n-   cost is not relevant and can be any value; invalid addresses\n-   need not be assigned a different cost.\n-\n-   On machines where an address involving more than one register is\n-   as cheap as an address computation involving only one register,\n-   defining `ADDRESS_COST' to reflect this can cause two registers\n-   to be live over a region of code where only one would have been\n-   if `ADDRESS_COST' were not defined in that manner.  This effect\n-   should be considered in the definition of this macro.\n-   Equivalent costs should probably only be given to addresses with\n-   different numbers of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as\n-   a constant.  */\n-\n-#define ADDRESS_COST(ADDR) (REG_P (ADDR) ? 1 : mips_address_cost (ADDR))\n-\n /* A C expression for the cost of moving data from a register in\n    class FROM to one in class TO.  The classes are expressed using\n    the enumeration values such as `GENERAL_REGS'.  A value of 2 is"}, {"sha": "2e0571739acd7b1495e7d8f4bed81fe4b069a0a6", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -95,7 +95,6 @@ extern void mmix_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern int mmix_constant_address_p PARAMS ((rtx));\n extern int mmix_legitimate_address PARAMS ((enum machine_mode, rtx, int));\n extern int mmix_legitimate_constant_p PARAMS ((rtx));\n-extern int mmix_address_cost PARAMS ((rtx));\n extern void mmix_print_operand PARAMS ((FILE *, rtx, int));\n extern void mmix_print_operand_address PARAMS ((FILE *, rtx));\n extern void mmix_machine_dependent_reorg PARAMS ((rtx));"}, {"sha": "0eb36ae07d4d46ca735d9292af4c1ca14c1cf90a", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -175,6 +175,8 @@ static bool mmix_rtx_costs\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mmix_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -1209,18 +1211,6 @@ mmix_rtx_costs (x, code, outer_code, total)\n   return false;\n }\n \n-/* ADDRESS_COST.  */\n-\n-int\n-mmix_address_cost (addr)\n-     rtx addr ATTRIBUTE_UNUSED;\n-{\n-  /* There's no difference in the address costs and we have lots of\n-     registers.  Some targets use constant 0, many others use 1 to say\n-     this.  Let's start with 1.  */\n-  return 1;\n-}\n-\n /* REGISTER_MOVE_COST.  */\n \n int"}, {"sha": "976ceb0b639b1251b220b062390283644bfc18a8", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -881,8 +881,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n /* Node: Costs */\n \n-#define ADDRESS_COST(ADDRESS) mmix_address_cost (ADDRESS)\n-\n /* The special registers can only move to and from general regs, and we\n    need to check that their constraints match, so say 3 for them.  */\n /* WARNING: gcc-2.7.2.2 i686-pc-linux-gnulibc1 (as shipped with RH 4.2)"}, {"sha": "f51f3c955465e18ab11b625a56b6f9a91203a02c", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -40,8 +40,6 @@ extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n extern int impossible_plus_operand PARAMS ((rtx, enum machine_mode));\n extern int const_8bit_operand PARAMS ((rtx, enum machine_mode));\n-\n-extern int mn10300_address_cost PARAMS ((rtx, int *));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "f040a899d9e0f0353045f5ce7b35ace3817f9d5a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -55,6 +55,8 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t\t|| regs_ever_live[16] || regs_ever_live[17]))\n \n \n+static int mn10300_address_cost_1 PARAMS ((rtx, int *));\n+static int mn10300_address_cost PARAMS ((rtx));\n static bool mn10300_rtx_costs PARAMS ((rtx, int, int, int *));\n \n \f\n@@ -64,6 +66,8 @@ static bool mn10300_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mn10300_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST mn10300_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1248,15 +1252,11 @@ legitimize_address (x, oldx, mode)\n   return x;\n }\n \n-int\n-mn10300_address_cost (x, unsig)\n+static int\n+mn10300_address_cost_1 (x, unsig)\n      rtx x;\n      int *unsig;\n {\n-  int _s = 0;\n-  if (unsig == 0)\n-    unsig = &_s;\n-  \n   switch (GET_CODE (x))\n     {\n     case REG:\n@@ -1285,17 +1285,17 @@ mn10300_address_cost (x, unsig)\n     case ASHIFT:\n     case AND:\n     case IOR:\n-      return (mn10300_address_cost (XEXP (x, 0), unsig)\n-\t      + mn10300_address_cost (XEXP (x, 1), unsig));\n+      return (mn10300_address_cost_1 (XEXP (x, 0), unsig)\n+\t      + mn10300_address_cost_1 (XEXP (x, 1), unsig));\n \n     case EXPR_LIST:\n     case SUBREG:\n     case MEM:\n-      return ADDRESS_COST (XEXP (x, 0));\n+      return mn10300_address_cost (XEXP (x, 0));\n \n     case ZERO_EXTEND:\n       *unsig = 1;\n-      return mn10300_address_cost (XEXP (x, 0), unsig);\n+      return mn10300_address_cost_1 (XEXP (x, 0), unsig);\n \n     case CONST_INT:\n       if (INTVAL (x) == 0)\n@@ -1317,7 +1317,7 @@ mn10300_address_cost (x, unsig)\n       switch (GET_CODE (XEXP (x, 0)))\n \t{\n \tcase MEM:\n-\t  return ADDRESS_COST (XEXP (x, 0));\n+\t  return mn10300_address_cost (XEXP (x, 0));\n \n \tcase REG:\n \t  return 1;\n@@ -1332,6 +1332,14 @@ mn10300_address_cost (x, unsig)\n     }\n }\n \n+static int\n+mn10300_address_cost (x)\n+     rtx x;\n+{\n+  int s = 0;\n+  return mn10300_address_cost_1 (x, &s);\n+}\n+\n static bool\n mn10300_rtx_costs (x, code, outer_code, total)\n      rtx x;"}, {"sha": "7ddd9d5291bdce1c90cdbf6129aba28c3d4210ec", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -812,8 +812,6 @@ struct cum_arg {int nbytes; };\n    (CLASS1 == EXTENDED_REGS || CLASS2 == EXTENDED_REGS) ? 4 : \\\n    4)\n \n-#define ADDRESS_COST(X) mn10300_address_cost((X), 0)\n-\n /* Nonzero if access to memory by bytes or half words is no faster\n    than accessing full words.  */\n #define SLOW_BYTE_ACCESS 1"}, {"sha": "6f2c6508c0f804e3a1d17bb413e457331c7074a6", "filename": "gcc/config/ns32k/ns32k-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -22,7 +22,6 @@ Boston, MA 02111-1307, USA.  */\n /* Prototypes for functions in ns32k.c */\n \n #ifdef RTX_CODE\n-extern int calc_address_cost PARAMS ((rtx));\n extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n \t\t\t\t\t\t      enum machine_mode, rtx));\n extern int reg_or_mem_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "73b16df9058e43828ccb23c58773cd8ace3c18c9", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -73,6 +73,7 @@ static void ns32k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_encode_section_info PARAMS ((tree, int));\n static bool ns32k_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int ns32k_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -95,6 +96,8 @@ static bool ns32k_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ns32k_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST ns32k_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -559,28 +562,26 @@ int secondary_memory_needed (CLASS1, CLASS2, M)\n #endif\n     \n \n-/* ADDRESS_COST calls this.  This function is not optimal\n+/* TARGET_ADDRESS_COST calls this.  This function is not optimal\n    for the 32032 & 32332, but it probably is better than\n    the default. */\n \n-int\n-calc_address_cost (operand)\n+static int\n+ns32k_address_cost (operand)\n      rtx operand;\n {\n-  int i;\n   int cost = 0;\n-  if (GET_CODE (operand) == MEM)\n-    cost += 3;\n-  if (GET_CODE (operand) == MULT)\n-    cost += 2;\n+\n   switch (GET_CODE (operand))\n     {\n     case REG:\n       cost += 1;\n       break;\n+\n     case POST_DEC:\n     case PRE_DEC:\n       break;\n+\n     case CONST_INT:\n       if (INTVAL (operand) <= 7 && INTVAL (operand) >= -8)\n \tbreak;\n@@ -597,18 +598,23 @@ calc_address_cost (operand)\n     case CONST_DOUBLE:\n       cost += 5;\n       break;\n+\n     case MEM:\n-      cost += calc_address_cost (XEXP (operand, 0));\n+      cost += ns32k_address_cost (XEXP (operand, 0)) + 3;\n       break;\n+\n     case MULT:\n+      cost += 2;\n+      /* FALLTHRU */\n     case PLUS:\n-      for (i = 0; i < GET_RTX_LENGTH (GET_CODE (operand)); i++)\n-\t{\n-\t  cost += calc_address_cost (XEXP (operand, i));\n-\t}\n+      cost += ns32k_address_cost (XEXP (operand, 0));\n+      cost += ns32k_address_cost (XEXP (operand, 1));\n+      break;\n+\n     default:\n       break;\n     }\n+\n   return cost;\n }\n "}, {"sha": "9f2c0260fe82d796ce280a0df81dddf8bfa4303a", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1161,11 +1161,6 @@ __transfer_from_trampoline ()\t\t\\\n    is a byte address (for indexing purposes)\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n-\n-/* Compute the cost of address ADDRESS. */\n-\n-#define ADDRESS_COST(RTX) calc_address_cost (RTX)\n-\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */\n "}, {"sha": "243cc10dbf5c938b2e559dbd28ee8a70dff3a07b", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -65,7 +65,6 @@ extern void hppa_encode_label PARAMS ((rtx));\n extern int arith11_operand PARAMS ((rtx, enum machine_mode));\n extern int adddi3_operand PARAMS ((rtx, enum machine_mode));\n extern int symbolic_expression_p PARAMS ((rtx));\n-extern int hppa_address_cost PARAMS ((rtx));\n extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int pa_adjust_insn_length PARAMS ((rtx, int));\n extern int int11_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "21afcbb8466da11083a5a0bab5fb1713153be5d0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -97,6 +97,7 @@ hppa_fpstore_bypass_p (out_insn, in_insn)\n #endif\n #endif\n \n+static int hppa_address_cost PARAMS ((rtx));\n static bool hppa_rtx_costs PARAMS ((rtx, int, int, int *));\n static inline rtx force_mode PARAMS ((enum machine_mode, rtx));\n static void pa_combine_instructions PARAMS ((rtx));\n@@ -223,6 +224,8 @@ static size_t n_deferred_plabels = 0;\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS hppa_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hppa_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1306,17 +1309,22 @@ hppa_legitimize_address (x, oldx, mode)\n \n    It is no coincidence that this has the same structure\n    as GO_IF_LEGITIMATE_ADDRESS.  */\n-int\n+\n+static int\n hppa_address_cost (X)\n      rtx X;\n {\n-  if (GET_CODE (X) == PLUS)\n+  switch (GET_CODE (X))\n+    {\n+    case REG:\n+    case PLUS:\n+    case LO_SUM:\n       return 1;\n-  else if (GET_CODE (X) == LO_SUM)\n-    return 1;\n-  else if (GET_CODE (X) == HIGH)\n-    return 2;\n-  return 4;\n+    case HIGH:\n+      return 2;\n+    default:\n+      return 4;\n+    }\n }\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete"}, {"sha": "595253c8926095c5cd06fa5af69fc50b62273c02", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1595,9 +1595,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define ADDRESS_COST(RTX) \\\n-  (GET_CODE (RTX) == REG ? 1 : hppa_address_cost (RTX))\n-\n /* Compute extra cost of moving data between one register class\n    and another.\n "}, {"sha": "0811ee81f46df1d50833c758b7cfc32d10e855f6", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -60,6 +60,7 @@ static void romp_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void romp_encode_section_info PARAMS ((tree, int));\n static bool romp_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int romp_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -72,6 +73,8 @@ static bool romp_rtx_costs PARAMS ((rtx, int, int, int *));\n #define TARGET_ENCODE_SECTION_INFO romp_encode_section_info\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS romp_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST romp_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2165,3 +2168,23 @@ romp_rtx_costs (x, code, outer_code, total)\n       return false;\n     }\n }\n+\n+/* For the ROMP, everything is cost 0 except for addresses involving\n+   symbolic constants, which are cost 1.  */\n+\n+static int\n+romp_address_cost (x)\n+     rtx x;\n+{\n+  return \n+  ((GET_CODE (x) == SYMBOL_REF\n+    && ! CONSTANT_POOL_ADDRESS_P (x))\n+   || GET_CODE (x) == LABEL_REF\n+   || (GET_CODE (x) == CONST\n+       && ! constant_pool_address_operand (x, Pmode))\n+   || (GET_CODE (x) == PLUS\n+       && ((GET_CODE (XEXP (x, 1)) == SYMBOL_REF\n+\t    && ! CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)))\n+\t   || GET_CODE (XEXP (x, 1)) == LABEL_REF\n+\t   || GET_CODE (XEXP (x, 1)) == CONST)));\n+}"}, {"sha": "f81d88ae14e006a7cb7d59647470401685bc5b65", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1162,29 +1162,6 @@ struct rt_cargs {int gregs, fregs; };\n \n /* #define SHIFT_COUNT_TRUNCATED */\n \n-/* Compute the cost of an address.  This is meant to approximate the size\n-   and/or execution delay of an insn using that address.  If the cost is\n-   approximated by the RTL complexity, including CONST_COSTS above, as\n-   is usually the case for CISC machines, this macro should not be defined.\n-   For aggressively RISCy machines, only one insn format is allowed, so\n-   this macro should be a constant.  The value of this macro only matters\n-   for valid addresses.\n-\n-   For the ROMP, everything is cost 0 except for addresses involving\n-   symbolic constants, which are cost 1.  */\n-\n-#define ADDRESS_COST(RTX)\t\t\t\t\\\n-  ((GET_CODE (RTX) == SYMBOL_REF\t\t\t\\\n-    && ! CONSTANT_POOL_ADDRESS_P (RTX))\t\t\t\\\n-   || GET_CODE (RTX) == LABEL_REF\t\t\t\\\n-   || (GET_CODE (RTX) == CONST\t\t\t\t\\\n-       && ! constant_pool_address_operand (RTX, Pmode))\t\\\n-   || (GET_CODE (RTX) == PLUS\t\t\t\t\\\n-       && ((GET_CODE (XEXP (RTX, 1)) == SYMBOL_REF\t\\\n-\t    && ! CONSTANT_POOL_ADDRESS_P (XEXP (RTX, 0))) \\\n-\t   || GET_CODE (XEXP (RTX, 1)) == LABEL_REF\t\\\n-\t   || GET_CODE (XEXP (RTX, 1)) == CONST)))\n-\n /* Adjust the length of an INSN.  LENGTH is the currently-computed length and\n    should be adjusted to reflect any required changes.  This macro is used when\n    there is some systematic length adjustment required that would be difficult"}, {"sha": "31eb55e2ec75822389b29df75add975840a8694d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -407,6 +407,8 @@ static const char alt_reg_names[][8] =\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS rs6000_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "b3fa442c0cf01bf1aeb806d746d42cb3e9f2dd44", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2291,18 +2291,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define SHIFT_COUNT_TRUNCATED (TARGET_POWER ? 1 : 0)\n \n-/* Compute the cost of an address.  This is meant to approximate the size\n-   and/or execution delay of an insn using that address.  If the cost is\n-   approximated by the RTL complexity, including CONST_COSTS above, as\n-   is usually the case for CISC machines, this macro should not be defined.\n-   For aggressively RISCy machines, only one insn format is allowed, so\n-   this macro should be a constant.  The value of this macro only matters\n-   for valid addresses.\n-\n-   For the RS/6000, everything is cost 0.  */\n-\n-#define ADDRESS_COST(RTX) 0\n-\n /* Adjust the length of an INSN.  LENGTH is the currently-computed length and\n    should be adjusted to reflect any required changes.  This macro is used when\n    there is some systematic length adjustment required that would be difficult"}, {"sha": "a1a3ba52d933d5a7786d1293e269686fb83ecd12", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -29,7 +29,6 @@ extern void s390_emit_epilogue PARAMS ((void));\n extern void s390_function_profiler PARAMS ((FILE *, int));\n \n #ifdef RTX_CODE\n-extern int s390_address_cost PARAMS ((rtx));\n extern int q_constraint PARAMS ((rtx));\n extern int const0_operand PARAMS ((rtx, enum machine_mode));\n extern int consttable_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "6dfb3d54118a51ea2ae14274ab4fff92833656df", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -67,6 +67,7 @@ static int s390_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int s390_issue_rate PARAMS ((void));\n static int s390_use_dfa_pipeline_interface PARAMS ((void));\n static bool s390_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int s390_address_cost PARAMS ((rtx));\n \n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -116,6 +117,8 @@ static bool s390_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS s390_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST s390_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -1270,7 +1273,7 @@ s390_rtx_costs (x, code, outer_code, total)\n \n /* Return the cost of an address rtx ADDR.  */\n \n-int\n+static int\n s390_address_cost (addr)\n      rtx addr;\n {"}, {"sha": "1623666cb658562b8f7d86ebf0dc1dc67c244547", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -812,11 +812,6 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n \n /* Relative costs of operations.  */\n \n-/* An expression giving the cost of an addressing mode that contains\n-   ADDRESS.  If not defined, the cost is computed from the ADDRESS\n-   expression and the `CONST_COSTS' values.  */\n-#define ADDRESS_COST(RTX) s390_address_cost ((RTX))\n-\n /* On s390, copy between fprs and gprs is expensive.  */\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)                        \\\n   ((   (   reg_classes_intersect_p ((CLASS1), GENERAL_REGS)\t\t\\"}, {"sha": "dadc1c951b3afbcd3a318b1319c7d460eb1a12d5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -219,6 +219,7 @@ static int andcosts PARAMS ((rtx));\n static int addsubcosts PARAMS ((rtx));\n static int multcosts PARAMS ((rtx));\n static bool sh_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int sh_address_cost PARAMS ((rtx));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -272,6 +273,8 @@ static bool sh_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS sh_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST sh_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1522,6 +1525,18 @@ sh_rtx_costs (x, code, outer_code, total)\n     }\n }\n \n+/* Compute the cost of an address.  For the SH, all valid addresses are\n+   the same cost.  Use a slightly higher cost for reg + reg addressing,\n+   since it increases pressure on r0.  */\n+\n+static int\n+sh_address_cost (X)\n+     rtx X;\n+{\n+  return (GET_CODE (X) == PLUS\n+\t  && ! CONSTANT_P (XEXP (X, 1))\n+\t  && ! TARGET_SHMEDIA ? 1 : 0);\n+}\n \n /* Code to expand a shift.  */\n "}, {"sha": "cf8ac7fd910c7ab1ea0f06d32ccc85d929f8ee40", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2752,14 +2752,6 @@ while (0)\n ((GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == LABEL_REF)\t\\\n   && nonpic_symbol_mentioned_p (X))\n \f\n-/* Compute the cost of an address.  For the SH, all valid addresses are\n-   the same cost.  Use a slightly higher cost for reg + reg addressing,\n-   since it increases pressure on r0.  */\n-\n-#define ADDRESS_COST(X) (GET_CODE (X) == PLUS && ! CONSTANT_P (XEXP (X, 1)) \\\n-\t\t\t && ! TARGET_SHMEDIA \\\n-\t\t\t ? 1 : 0)\n-\n /* Compute extra cost of moving data between one register class\n    and another.  */\n "}, {"sha": "50e81f0b8d8535db7874315888336f2b414e2746", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -255,6 +255,8 @@ enum processor_type sparc_cpu;\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS sparc_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "c6d8aac5982fe3cdd57a1646c632d462aba37410", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2608,8 +2608,6 @@ do {                                                                    \\\n          : (sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n             ? 9 : 3))\n \n-#define ADDRESS_COST(RTX)  1\n-\n #define PREFETCH_BLOCK \\\n \t((sparc_cpu == PROCESSOR_ULTRASPARC \\\n           || sparc_cpu == PROCESSOR_ULTRASPARC3) \\"}, {"sha": "7a20df4993c1605f1dbac0119b2ede15fe1406e5", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -58,6 +58,7 @@ static void xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n static void xstormy16_init_builtins PARAMS ((void));\n static rtx xstormy16_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static bool xstormy16_rtx_costs PARAMS ((rtx, int, int, int *));\n+static int xstormy16_address_cost PARAMS ((rtx));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -138,6 +139,14 @@ xstormy16_rtx_costs (x, code, outer_code, total)\n     }\n }\n \n+static int\n+xstormy16_address_cost (x)\n+     rtx x;\n+{\n+  return (GET_CODE (x) == CONST_INT ? 2\n+\t  : GET_CODE (x) == PLUS ? 7\n+\t  : 5);\n+}\n \n /* Branches are handled as follows:\n \n@@ -2209,5 +2218,7 @@ xstormy16_expand_builtin(exp, target, subtarget, mode, ignore)\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS xstormy16_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST xstormy16_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "505236484d99e4116d83727a45d9ad343baac017", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -2197,49 +2197,6 @@ do {\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations */\n \n-/* An expression giving the cost of an addressing mode that contains ADDRESS.\n-   If not defined, the cost is computed from the ADDRESS expression and the\n-   `CONST_COSTS' values.\n-\n-   For most CISC machines, the default cost is a good approximation of the true\n-   cost of the addressing mode.  However, on RISC machines, all instructions\n-   normally have the same length and execution time.  Hence all addresses will\n-   have equal costs.\n-\n-   In cases where more than one form of an address is known, the form with the\n-   lowest cost will be used.  If multiple forms have the same, lowest, cost,\n-   the one that is the most complex will be used.\n-\n-   For example, suppose an address that is equal to the sum of a register and a\n-   constant is used twice in the same basic block.  When this macro is not\n-   defined, the address will be computed in a register and memory references\n-   will be indirect through that register.  On machines where the cost of the\n-   addressing mode containing the sum is no higher than that of a simple\n-   indirect reference, this will produce an additional instruction and possibly\n-   require an additional register.  Proper specification of this macro\n-   eliminates this overhead for such machines.\n-\n-   Similar use of this macro is made in strength reduction of loops.\n-\n-   ADDRESS need not be valid as an address.  In such a case, the cost is not\n-   relevant and can be any value; invalid addresses need not be assigned a\n-   different cost.\n-\n-   On machines where an address involving more than one register is as cheap as\n-   an address computation involving only one register, defining `ADDRESS_COST'\n-   to reflect this can cause two registers to be live over a region of code\n-   where only one would have been if `ADDRESS_COST' were not defined in that\n-   manner.  This effect should be considered in the definition of this macro.\n-   Equivalent costs should probably only be given to addresses with different\n-   numbers of registers on machines with lots of registers.\n-\n-   This macro will normally either not be defined or be defined as a\n-   constant.  */\n-#define ADDRESS_COST(ADDRESS)\t\t\t\\\n-  (GET_CODE (ADDRESS) == CONST_INT ? 2\t\t\\\n-   : GET_CODE (ADDRESS) == PLUS ? 7\t\t\\\n-   : 5)\n-\n /* A C expression for the cost of moving data of mode MODE from a\n    register in class FROM to one in class TO.  The classes are\n    expressed using the enumeration values such as `GENERAL_REGS'.  A"}, {"sha": "2295a552a00af7be90a99aa4a5a1976c976a1ba7", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -109,6 +109,8 @@ static int v850_interrupt_p = FALSE;\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS v850_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "8e1d28bd4c2b2f6bbc931ec1205f93b0b22cb331", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1025,9 +1025,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define CC_NO_CARRY CC_NO_OVERFLOW\n #define NOTICE_UPDATE_CC(EXP, INSN) notice_update_cc(EXP, INSN)\n \n-/* All addressing modes have the same cost on the V850 series.  */\n-#define ADDRESS_COST(ADDR) 1\n-\n /* Nonzero if access to memory by bytes or half words is no faster\n    than accessing full words.  */\n #define SLOW_BYTE_ACCESS 1"}, {"sha": "d62b2ac8c8d2d5531e53744d8a75d71772bcc9ca", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -25,8 +25,6 @@ extern const char *rev_cond_name PARAMS ((rtx));\n extern void split_quadword_operands PARAMS ((rtx *, rtx *, int));\n extern void print_operand_address PARAMS ((FILE *, rtx));\n extern int vax_float_literal PARAMS ((rtx));\n-extern int vax_address_cost PARAMS ((rtx));\n-extern int vax_rtx_cost PARAMS ((rtx));\n extern int reg_was_0_p PARAMS ((rtx, rtx));\n #endif /* RTX_CODE */\n "}, {"sha": "1413882f4a638a0f676096a4059e685b2c0a17c4", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -45,6 +45,8 @@ static int follows_p PARAMS ((rtx, rtx));\n static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, tree));\n+static int vax_address_cost_1 PARAMS ((rtx));\n+static int vax_address_cost PARAMS ((rtx));\n static int vax_rtx_costs_1 PARAMS ((rtx, enum rtx_code, enum rtx_code));\n static bool vax_rtx_costs PARAMS ((rtx, int, int, int *));\n \f\n@@ -62,6 +64,8 @@ static bool vax_rtx_costs PARAMS ((rtx, int, int, int *));\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS vax_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST vax_address_cost\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -418,8 +422,8 @@ vax_float_literal(c)\n    2 - indirect */\n \n \n-int\n-vax_address_cost (addr)\n+static int\n+vax_address_cost_1 (addr)\n     register rtx addr;\n {\n   int reg = 0, indexed = 0, indir = 0, offset = 0, predec = 0;\n@@ -487,6 +491,13 @@ vax_address_cost (addr)\n   return reg + indexed + indir + offset + predec;\n }\n \n+static int\n+vax_address_cost (x)\n+     rtx x;\n+{\n+  return (1 + (GET_CODE (x) == REG ? 0 : vax_address_cost_1 (x)));\n+}\n+\n /* Cost of an expression on a VAX.  This version has costs tuned for the\n    CVAX chip (found in the VAX 3 series) with comments for variations on\n    other models.  */\n@@ -649,7 +660,7 @@ vax_rtx_costs_1 (x, code, outer_code)\n       x = XEXP (x, 0);\n       if (GET_CODE (x) == REG || GET_CODE (x) == POST_INC)\n \treturn c;\n-      return c + vax_address_cost (x);\n+      return c + vax_address_cost_1 (x);\n     default:\n       c = 3;\n       break;\n@@ -703,7 +714,7 @@ vax_rtx_costs_1 (x, code, outer_code)\n \tcase MEM:\n \t  c += 1;\t\t/* 2 on VAX 2 */\n \t  if (GET_CODE (XEXP (op, 0)) != REG)\n-\t    c += vax_address_cost (XEXP (op, 0));\n+\t    c += vax_address_cost_1 (XEXP (op, 0));\n \t  break;\n \tcase REG:\n \tcase SUBREG:"}, {"sha": "d52f31d854e3a9cbb1f0b950ae210cf295498a4c", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -848,8 +848,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define TARGET_FLOAT_FORMAT VAX_FLOAT_FORMAT\n \n-#define\tADDRESS_COST(RTX) (1 + (GET_CODE (RTX) == REG ? 0 : vax_address_cost(RTX)))\n-\n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch.\n "}, {"sha": "a05386cf4e55f55383408a8010ec142419cde68f", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -243,6 +243,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS xtensa_rtx_costs\n+#undef TARGET_ADDRESS_COST\n+#define TARGET_ADDRESS_COST hook_int_rtx_0\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "b11fa5e81a77d4428247f262ee0f69e077875f7b", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -1281,10 +1281,6 @@ typedef struct xtensa_args {\n    indexing purposes) so give the MEM rtx a words's mode.  */\n #define FUNCTION_MODE SImode\n \n-/* An expression giving the cost of an addressing mode that\n-   contains ADDRESS.  */\n-#define ADDRESS_COST(ADDR) 1\n-\n /* A C expression for the cost of moving data from a register in\n    class FROM to one in class TO.  The classes are expressed using\n    the enumeration values such as 'GENERAL_REGS'.  A value of 2 is"}, {"sha": "59253a9a28b80fbd1dae796f43af3071dc4528b0", "filename": "gcc/cse.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -896,7 +896,7 @@ address_cost (x, mode)\n      rtx x;\n      enum machine_mode mode;\n {\n-  /* The ADDRESS_COST macro does not deal with ADDRESSOF nodes.  But,\n+  /* The address_cost target hook does not deal with ADDRESSOF nodes.  But,\n      during CSE, such nodes are present.  Using an ADDRESSOF node which\n      refers to the address of a REG is a good thing because we can then\n      turn (MEM (ADDRESSSOF (REG))) into just plain REG.  */\n@@ -906,17 +906,22 @@ address_cost (x, mode)\n \n   /* We may be asked for cost of various unusual addresses, such as operands\n      of push instruction.  It is not worthwhile to complicate writing\n-     of ADDRESS_COST macro by such cases.  */\n+     of the target hook by such cases.  */\n \n   if (!memory_address_p (mode, x))\n     return 1000;\n-#ifdef ADDRESS_COST\n-  return ADDRESS_COST (x);\n-#else\n-  return rtx_cost (x, MEM);\n-#endif\n+\n+  return (*targetm.address_cost) (x);\n }\n \n+/* If the target doesn't override, compute the cost as with arithmetic.  */\n+\n+int\n+default_address_cost (x)\n+     rtx x;\n+{\n+  return rtx_cost (x, MEM);\n+}\n \f\n static struct cse_reg_info *\n get_cse_reg_info (regno)"}, {"sha": "0954bde936bad8ef2f8d55d8db4af56abba79cfc", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -97,6 +97,13 @@ hook_int_tree_tree_1 (a, b)\n   return 1;\n }\n \n+int\n+hook_int_rtx_0 (a)\n+     rtx a ATTRIBUTE_UNUSED;\n+{\n+  return 0;\n+}\n+\n void\n hook_void_tree (a)\n      tree a ATTRIBUTE_UNUSED;"}, {"sha": "d36e3fcbc6433cf01830995dda9147048cf29d00", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -38,6 +38,7 @@ void hook_void_tree PARAMS ((tree));\n void hook_void_tree_treeptr PARAMS ((tree, tree *));\n \n int hook_int_tree_tree_1 PARAMS ((tree, tree));\n+int hook_int_rtx_0 PARAMS ((rtx));\n \n bool default_can_output_mi_thunk_no_vcall\n   PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));"}, {"sha": "50c1692c44968d9c39d1346a09afaa0e91c3d2a0", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -7333,21 +7333,8 @@ combine_givs_p (g1, g2)\n      the expression of G2 in terms of G1 can be used.  */\n   if (ret != NULL_RTX\n       && g2->giv_type == DEST_ADDR\n-      && memory_address_p (GET_MODE (g2->mem), ret)\n-      /* ??? Looses, especially with -fforce-addr, where *g2->location\n-\t will always be a register, and so anything more complicated\n-\t gets discarded.  */\n-#if 0\n-#ifdef ADDRESS_COST\n-      && ADDRESS_COST (tem) <= ADDRESS_COST (*g2->location)\n-#else\n-      && rtx_cost (tem, MEM) <= rtx_cost (*g2->location, MEM)\n-#endif\n-#endif\n-      )\n-    {\n-      return ret;\n-    }\n+      && memory_address_p (GET_MODE (g2->mem), ret))\n+    return ret;\n \n   return NULL_RTX;\n }"}, {"sha": "18e0b230712fe7b3e765e29016ec336a8632f2d7", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -530,3 +530,5 @@ extern bool default_valid_pointer_mode PARAMS ((enum machine_mode));\n extern void assemble_vtable_entry PARAMS ((struct rtx_def *, HOST_WIDE_INT));\n extern void assemble_vtable_inherit PARAMS ((struct rtx_def *,\n \t\t\t\t\t     struct rtx_def *));\n+\n+extern int default_address_cost PARAMS ((rtx));"}, {"sha": "81988c517586ea28ec28e5e3cf0e822ddfbb1566", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -613,7 +613,8 @@ typedef char _Bool;\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n \tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\t\\\n-\tASM_OUTPUT_MI_THUNK CONST_COSTS RTX_COSTS DEFAULT_RTX_COSTS\n+\tASM_OUTPUT_MI_THUNK CONST_COSTS RTX_COSTS DEFAULT_RTX_COSTS\t\\\n+\tADDRESS_COST\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "18929d101cb9da49da8b328b1340826fe662546f", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -227,11 +227,14 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    TARGET_SCHED_INIT_DFA_BUBBLES,\t\t\t\t\\\n    TARGET_SCHED_DFA_BUBBLE}\n \n-/* All in tree.c.  */\n+/* In tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n #define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n #define TARGET_ATTRIBUTE_TABLE NULL\n \n+/* In cse.c.  */\n+#define TARGET_ADDRESS_COST default_address_cost\n+\n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS default_init_builtins\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n@@ -262,7 +265,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_INSERT_ATTRIBUTES hook_void_tree_treeptr\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_tree_false\n #define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false\n-/* #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false */\n+#define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n \n #ifndef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P hook_bool_tree_false\n@@ -297,6 +300,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_STRIP_NAME_ENCODING,\t\t\t\\\n   TARGET_VALID_POINTER_MODE,                    \\\n   TARGET_RTX_COSTS,\t\t\t\t\\\n+  TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "b6d7f8dd4ce4c496acbcd1eadfeb6b88ee2b1502", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcefdf6717c42e30b0058fe26780188ff5978821/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=dcefdf6717c42e30b0058fe26780188ff5978821", "patch": "@@ -321,6 +321,10 @@ struct gcc_target\n      not necessarily defined at this point.  */\n   bool (* rtx_costs) PARAMS ((rtx x, int code, int outer_code, int *total));\n \n+  /* Compute the cost of X, used as an address.  Never called with\n+     invalid addresses.  */\n+  int (* address_cost) PARAMS ((rtx x));\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}]}