{"sha": "da346efd27eca48a8fe2e07d7e18b2c77ead0e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEzNDZlZmQyN2VjYTQ4YThmZTJlMDdkN2UxOGIyYzc3ZWFkMGUyZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-01T09:21:33Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-30T08:31:30Z"}, "message": "Re-format zen memcpy/memset costs.\n\nThe patch improves readability of the memcpy and memset\nexpansion strategies.\n\ngcc/ChangeLog:\n\n\t* config/i386/x86-tune-costs.h: Change code formatting.", "tree": {"sha": "e7fb7b5d48a2935a5b1f5ea0e8ebd9c799d7a19f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7fb7b5d48a2935a5b1f5ea0e8ebd9c799d7a19f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl8ihWIACgkQTcGC3A+n\nN4Vipwf+KzCIVVvs1RxSzVgJWwppmopJylHZLw8YTyFEa4Qoc1X8wR4ld9SI1mjJ\nPiuLwUxbo0P8o1Adlopq0tNHDuYNccYsQspc14e1vAVhOWBUBErm7lot7gPRvD87\nlh8aOoQsOC9WEfQ1l7PvvaAc/DPbEQQNk84Kg45lY8K8pNlT+ToRov8JbWJ9CMCj\n5Ti9rEO+xEJ7jpnarHtlJ0Qp+HnrEvULXrhwVow4LqpXljveAH4zwpr1rT9qr+9V\nd0LYOmoaJluUL5cHiZI53TftDBTnhQmNUFOMCiyWZHIyznaV5EJ+euJ+YvESrBMY\niaiR2dKQXCZqmiEdvDhzGrNbdSqg+Q==\n=FsEL\n-----END PGP SIGNATURE-----", "payload": "tree e7fb7b5d48a2935a5b1f5ea0e8ebd9c799d7a19f\nparent 2c58f5cadfac338a67723fd6e41c9097760c4a33\nauthor Martin Liska <mliska@suse.cz> 1591003293 +0200\ncommitter Martin Liska <mliska@suse.cz> 1596097890 +0200\n\nRe-format zen memcpy/memset costs.\n\nThe patch improves readability of the memcpy and memset\nexpansion strategies.\n\ngcc/ChangeLog:\n\n\t* config/i386/x86-tune-costs.h: Change code formatting.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c58f5cadfac338a67723fd6e41c9097760c4a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c58f5cadfac338a67723fd6e41c9097760c4a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c58f5cadfac338a67723fd6e41c9097760c4a33"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "1169178433f977cd7a4d1c814e2fc725a3041384", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da346efd27eca48a8fe2e07d7e18b2c77ead0e2d/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=da346efd27eca48a8fe2e07d7e18b2c77ead0e2d", "patch": "@@ -1311,14 +1311,23 @@ const struct processor_costs bdver_cost = {\n     very small blocks it is better to use loop.  For large blocks, libcall\n     can do nontemporary accesses and beat inline considerably.  */\n static stringop_algs znver1_memcpy[2] = {\n-  {libcall, {{6, loop, false}, {14, unrolled_loop, false},\n+  /* 32-bit tuning.  */\n+  {libcall, {{6, loop, false},\n+\t     {14, unrolled_loop, false},\n \t     {-1, rep_prefix_4_byte, false}}},\n-  {libcall, {{16, loop, false}, {8192, rep_prefix_8_byte, false},\n+  /* 64-bit tuning.  */\n+  {libcall, {{16, loop, false},\n+\t     {8192, rep_prefix_8_byte, false},\n \t     {-1, libcall, false}}}};\n static stringop_algs znver1_memset[2] = {\n-  {libcall, {{8, loop, false}, {24, unrolled_loop, false},\n-\t     {2048, rep_prefix_4_byte, false}, {-1, libcall, false}}},\n-  {libcall, {{48, unrolled_loop, false}, {8192, rep_prefix_8_byte, false},\n+  /* 32-bit tuning.  */\n+  {libcall, {{8, loop, false},\n+\t     {24, unrolled_loop, false},\n+\t     {2048, rep_prefix_4_byte, false},\n+\t     {-1, libcall, false}}},\n+  /* 64-bit tuning.  */\n+  {libcall, {{48, unrolled_loop, false},\n+\t     {8192, rep_prefix_8_byte, false},\n \t     {-1, libcall, false}}}};\n struct processor_costs znver1_cost = {\n   {\n@@ -1448,14 +1457,23 @@ struct processor_costs znver1_cost = {\n     very small blocks it is better to use loop.  For large blocks, libcall\n     can do nontemporary accesses and beat inline considerably.  */\n static stringop_algs znver2_memcpy[2] = {\n-  {libcall, {{6, loop, false}, {14, unrolled_loop, false},\n+  /* 32-bit tuning.  */\n+  {libcall, {{6, loop, false},\n+\t     {14, unrolled_loop, false},\n \t     {-1, rep_prefix_4_byte, false}}},\n-  {libcall, {{16, loop, false}, {64, rep_prefix_4_byte, false},\n+  /* 64-bit tuning.  */\n+  {libcall, {{16, loop, false},\n+\t     {64, rep_prefix_4_byte, false},\n \t     {-1, libcall, false}}}};\n static stringop_algs znver2_memset[2] = {\n-  {libcall, {{8, loop, false}, {24, unrolled_loop, false},\n-\t     {2048, rep_prefix_4_byte, false}, {-1, libcall, false}}},\n-  {libcall, {{24, rep_prefix_4_byte, false}, {128, rep_prefix_8_byte, false},\n+  /* 32-bit tuning.  */\n+  {libcall, {{8, loop, false},\n+\t     {24, unrolled_loop, false},\n+\t     {2048, rep_prefix_4_byte, false}\n+\t     {-1, libcall, false}}},\n+  /* 64-bit tuning.  */\n+  {libcall, {{24, rep_prefix_4_byte, false},\n+\t     {128, rep_prefix_8_byte, false},\n \t     {-1, libcall, false}}}};\n \n struct processor_costs znver2_cost = {"}]}