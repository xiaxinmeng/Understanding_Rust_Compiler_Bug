{"sha": "084f959076c10d54bdb5c80cad10a0aac5756ea4", "node_id": "C_kwDOANBUbNoAKDA4NGY5NTkwNzZjMTBkNTRiZGI1YzgwY2FkMTBhMGFhYzU3NTZlYTQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-08T06:48:26Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-08T07:07:54Z"}, "message": "attr: Handle `rustc_const_{un}stable` properly\n\nSince extern functions cannot be marked as const (they take no\nqualifiers) but some intrinsics are const, while still being `extern\n\"rust-intrinsic\", we need to be able to handle the\n`#[rustc_const_stable]` and `#[rustc_const_unstable]` attribute.\n\nTechnically, this simply indicates that a certain intrinsic is constant\nand can be used in const contexts, such as `size_of` or `offset`.\n\nWe also need to mark all const intrinsics with `rustc_const_stable` in\nthe testsuite.", "tree": {"sha": "fb8a7e1ce1374e130fbe882fdbfcca5d8c575e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb8a7e1ce1374e130fbe882fdbfcca5d8c575e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084f959076c10d54bdb5c80cad10a0aac5756ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084f959076c10d54bdb5c80cad10a0aac5756ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084f959076c10d54bdb5c80cad10a0aac5756ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084f959076c10d54bdb5c80cad10a0aac5756ea4/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7beea479c5a1e7e415223f3fbd4e16c20c3214ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7beea479c5a1e7e415223f3fbd4e16c20c3214ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7beea479c5a1e7e415223f3fbd4e16c20c3214ec"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "bd4c7f19906d0f674c23e3e19b1a173d8208016e", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -235,11 +235,48 @@ ConstChecker::check_function_call (HirId fn_id, Location locus)\n     return;\n \n   auto maybe_fn = mappings.lookup_hir_item (fn_id);\n-  if (!maybe_fn || maybe_fn->get_item_kind () != Item::ItemKind::Function)\n+  if (maybe_fn && maybe_fn->get_item_kind () != Item::ItemKind::Function)\n     return;\n \n-  auto fn = static_cast<Function *> (maybe_fn);\n-  if (!fn->get_qualifiers ().is_const ())\n+  // There are const extern functions (intrinsics)\n+  // TODO: Should we check the ABI is only \"rust intrinsics\"? Is that handled\n+  // elsewhere?\n+  HirId parent_block;\n+  auto maybe_extern_item\n+    = mappings.lookup_hir_extern_item (fn_id, &parent_block);\n+  if (maybe_extern_item\n+      && maybe_extern_item->get_extern_kind ()\n+\t   != ExternalItem::ExternKind::Function)\n+    return;\n+\n+  auto is_error = false;\n+  if (maybe_fn)\n+    {\n+      auto fn = static_cast<Function *> (maybe_fn);\n+      if (!fn->get_qualifiers ().is_const ())\n+\tis_error = true;\n+    }\n+\n+  if (maybe_extern_item)\n+    {\n+      {\n+\tauto fn = static_cast<ExternalFunctionItem *> (maybe_extern_item);\n+\tauto is_const_extern = std::any_of (\n+\t  fn->get_outer_attrs ().begin (), fn->get_outer_attrs ().end (),\n+\t  [] (const AST::Attribute &attr) {\n+\t    // `starts_with` in C++11...\n+\t    // FIXME: Is it really how we want to handle `rustc_const_stable`\n+\t    // and `rustc_const_unstable`?\n+\t    // TODO: Add these attributes to the attribute check and handle\n+\t    // `stable` and `unstable` as well\n+\t    return attr.get_path ().as_string ().rfind (\"rustc_const_\", 0) == 0;\n+\t  });\n+\tif (!is_const_extern)\n+\t  is_error = true;\n+      }\n+    }\n+\n+  if (is_error)\n     rust_error_at (locus, \"only functions marked as %<const%> are allowed to \"\n \t\t\t  \"be called from constant contexts\");\n }\n@@ -522,6 +559,9 @@ ConstChecker::visit (Function &function)\n   if (const_fn)\n     const_context.enter (function.get_mappings ().get_hirid ());\n \n+  for (auto &param : function.get_function_params ())\n+    param.get_type ()->accept_vis (*this);\n+\n   function.get_definition ()->accept_vis (*this);\n \n   if (const_fn)"}, {"sha": "9b974b96bbbdbae77907bd03b8e77b7c550699d5", "filename": "gcc/testsuite/rust/compile/const-issue1440.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -0,0 +1,76 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        pub fn rotate_left<T>(a: T, b: T) -> T;\n+        pub fn rotate_right<T>(a: T, b: T) -> T;\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+        pub fn transmute<T, U>(_: T) -> U;\n+        pub fn size_of<T>() -> usize;\n+    }\n+}\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn wrapping_add(self, rhs: Self) -> Self {\n+                    // intrinsics::wrapping_add(self, rhs)\n+                    self + rhs\n+                }\n+\n+                pub fn rotate_left(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_left(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn rotate_right(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_right(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        self\n+                    }\n+                }\n+\n+                pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    Self::from_le(Self::from_ne_bytes(bytes))\n+                }\n+\n+                pub const fn from_le(x: Self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        x\n+                    }\n+                }\n+\n+                pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    unsafe { mem::transmute(bytes) }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(\n+    u8 = \"u8\",\n+    u16 = \"u16\",\n+    u32 = \"u32\",\n+    u64 = \"u64\",\n+    u128 = \"u128\",\n+    usize = \"usize\"\n+);"}, {"sha": "939f0f981e007dc5e5cecdde62636cdc33daaba6", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,4 +1,5 @@\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "343aaab078b6aaefa291e4dacecca3ebbc3af221", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -4,6 +4,7 @@ extern \"C\" {\n \n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n     }\n }"}, {"sha": "f346d9a572a264de79fae0f33f6a662be167de01", "filename": "gcc/testsuite/rust/compile/torture/issue-1075.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "a3fa2c36be75b59aa320c895d1378f5d48b95adb", "filename": "gcc/testsuite/rust/compile/torture/issue-1432.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,16 +1,22 @@\n // { dg-additional-options \"-w\" }\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n         pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n         pub fn rotate_left<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n         pub fn rotate_right<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n     }\n }\n \n mod mem {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n         fn transmute<T, U>(_: T) -> U;\n+        #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n         fn size_of<T>() -> usize;\n     }\n }"}, {"sha": "740cf7cfa93e55950b9dbaa0666ec19b8b347263", "filename": "gcc/testsuite/rust/execute/torture/issue-1120.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "fd3d7b6d72a43e2395986a625d48e7086c62bc19", "filename": "gcc/testsuite/rust/execute/torture/issue-1133.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "63d7681dc2902c58db2004289175f8139666eb76", "filename": "gcc/testsuite/rust/execute/torture/issue-1232.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,6 +1,7 @@\n // { dg-additional-options \"-w\" }\n // { dg-output \"slice_access=3\\n\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "327de26fb47c25ccef49e69bc77c744edeee3f82", "filename": "gcc/testsuite/rust/execute/torture/issue-1436.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -2,6 +2,7 @@\n // { dg-output \"\" }\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n     }\n }"}, {"sha": "f9762b22fa645aef9d047e92f4dbf308f5ab8a2a", "filename": "gcc/testsuite/rust/execute/torture/slice-magic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "d6cbe21e7ecbda089f4da2b344f10961031068cc", "filename": "gcc/testsuite/rust/execute/torture/slice-magic2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "80bdc2a9c9f44f52232b582032688bf03ca91408", "filename": "gcc/testsuite/rust/execute/torture/str-layout1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f959076c10d54bdb5c80cad10a0aac5756ea4/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs?ref=084f959076c10d54bdb5c80cad10a0aac5756ea4", "patch": "@@ -2,6 +2,7 @@\n // { dg-output \"t1sz=5 t2sz=10\" }\n mod mem {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n         fn transmute<T, U>(_: T) -> U;\n     }\n }"}]}