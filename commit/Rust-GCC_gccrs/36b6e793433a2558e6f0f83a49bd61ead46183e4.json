{"sha": "36b6e793433a2558e6f0f83a49bd61ead46183e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiNmU3OTM0MzNhMjU1OGU2ZjBmODNhNDliZDYxZWFkNDYxODNlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-06T08:29:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-06T08:29:48Z"}, "message": "re PR tree-optimization/33458 (ICE \"PHI def is not a GIMPLE value\")\n\n\tPR tree-optimization/33458\n\t* tree-inline.c (copy_phis_for_bb): If PHI arg substitution creates\n\t!is_gimple_val PHI argument, gimplify it and insert it on edge.\n\n\t* g++.dg/opt/inline12.C: New test.\n\nFrom-SVN: r129921", "tree": {"sha": "bb692f7913feb15169fc1eeed1c0b6a20bdfa55f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb692f7913feb15169fc1eeed1c0b6a20bdfa55f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b6e793433a2558e6f0f83a49bd61ead46183e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b6e793433a2558e6f0f83a49bd61ead46183e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b6e793433a2558e6f0f83a49bd61ead46183e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b6e793433a2558e6f0f83a49bd61ead46183e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c563bcd1da29d2a3a107e39eb894427042df5973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c563bcd1da29d2a3a107e39eb894427042df5973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c563bcd1da29d2a3a107e39eb894427042df5973"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "02195432374db54ae68abf50abfd4ceccdcdc1b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36b6e793433a2558e6f0f83a49bd61ead46183e4", "patch": "@@ -1,5 +1,9 @@\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/33458\n+\t* tree-inline.c (copy_phis_for_bb): If PHI arg substitution creates\n+\t!is_gimple_val PHI argument, gimplify it and insert it on edge.\n+\n \tPR tree-optimization/33993\n \t* tree-vect-transform.c (vect_get_constant_vectors): Use build_vector\n \trather than build_constructor_from_list if all list values are"}, {"sha": "8b04b28901fc7227a04f0e0eebb734da0cfd018f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36b6e793433a2558e6f0f83a49bd61ead46183e4", "patch": "@@ -1,5 +1,8 @@\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/33458\n+\t* g++.dg/opt/inline12.C: New test.\n+\n \tPR tree-optimization/33993\n \t* gcc.c-torture/compile/20071105-1.c: New test.\n "}, {"sha": "d9eae306dc50d65007bf728632125e287b6962cf", "filename": "gcc/testsuite/g++.dg/opt/inline12.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline12.C?ref=36b6e793433a2558e6f0f83a49bd61ead46183e4", "patch": "@@ -0,0 +1,32 @@\n+// PR tree-optimization/33458\n+// { dg-do compile }\n+// { dg-options \"-O\" }\n+\n+inline void\n+foo (int *p, int n)\n+{\n+  for (; n > 0; --n, ++p)\n+    *p = 0;\n+}\n+\n+struct A\n+{\n+  int x[2];\n+  A () { foo (x, 2); }\n+};\n+\n+inline A\n+getA ()\n+{\n+  return A ();\n+}\n+\n+struct B\n+{\n+  A a;\n+  B ();\n+};\n+\n+B::B () : a (getA ())\n+{\n+}"}, {"sha": "e7abeff00932a3663389952a3107f46b891db6d9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b6e793433a2558e6f0f83a49bd61ead46183e4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=36b6e793433a2558e6f0f83a49bd61ead46183e4", "patch": "@@ -1193,6 +1193,17 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n \n \t      walk_tree (&new_arg, copy_body_r, id, NULL);\n \t      gcc_assert (new_arg);\n+\t      /* With return slot optimization we can end up with\n+\t         non-gimple (foo *)&this->m, fix that here.  */\n+\t      if (TREE_CODE (new_arg) != SSA_NAME\n+\t\t  && TREE_CODE (new_arg) != FUNCTION_DECL\n+\t\t  && !is_gimple_val (new_arg))\n+\t\t{\n+\t\t  tree stmts = NULL_TREE;\n+\t\t  new_arg = force_gimple_operand (new_arg, &stmts,\n+\t\t\t\t\t\t  true, NULL);\n+\t\t  bsi_insert_on_edge_immediate (new_edge, stmts);\n+\t\t}\n \t      add_phi_arg (new_phi, new_arg, new_edge);\n \t    }\n \t}"}]}