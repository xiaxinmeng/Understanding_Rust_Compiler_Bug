{"sha": "ce133c0fae02985fc9f50953b88d596cc66723b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxMzNjMGZhZTAyOTg1ZmM5ZjUwOTUzYjg4ZDU5NmNjNjY3MjNiNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-03-16T22:12:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-03-16T22:12:56Z"}, "message": "Call C++ static constructors.\n\nFrom-SVN: r9194", "tree": {"sha": "46696d4c785dd828ddeee390a03936d8cebdbd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46696d4c785dd828ddeee390a03936d8cebdbd56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce133c0fae02985fc9f50953b88d596cc66723b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce133c0fae02985fc9f50953b88d596cc66723b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce133c0fae02985fc9f50953b88d596cc66723b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce133c0fae02985fc9f50953b88d596cc66723b4/comments", "author": null, "committer": null, "parents": [{"sha": "c061c5d7a9170dd9fcd349782e48ac9b93edc583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c061c5d7a9170dd9fcd349782e48ac9b93edc583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c061c5d7a9170dd9fcd349782e48ac9b93edc583"}], "stats": {"total": 218, "additions": 195, "deletions": 23}, "files": [{"sha": "23cfd9b14b9cb96bd74f2640128c0004651ac605", "filename": "gcc/config/rs6000/eabi-ctors.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi-ctors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi-ctors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-ctors.c?ref=ce133c0fae02985fc9f50953b88d596cc66723b4", "patch": "@@ -0,0 +1,57 @@\n+/* Stripped down support to run global constructors and destructors on\n+   embedded PowerPC systems.\n+\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Contributed by Michael Meissner  (meissner@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/*  Declare a pointer to void function type.  */\n+\n+typedef void (*func_ptr) (void);\n+\n+/* Declare the set of symbols use as begin and end markers for the lists\n+   of global object constructors and global object destructors.  */\n+\n+extern func_ptr __CTOR_LIST__[];\n+extern func_ptr __CTOR_END__ [];\n+extern func_ptr __DTOR_LIST__[];\n+extern func_ptr __DTOR_END__ [];\n+\n+/* Call all global constructors */\n+void\n+__do_global_ctors (void)\n+{\n+  func_ptr *ptr = &__CTOR_LIST__[0];\n+  func_ptr *end = &__CTOR_END__[0];\n+\n+  for ( ; ptr != end; ptr++)\n+    (*ptr)();\n+}\n+\n+/* Call all global destructors */\n+void\n+__do_global_dtors (void)\n+{\n+  func_ptr *ptr = &__DTOR_LIST__[0];\n+  func_ptr *end = &__DTOR_END__[0];\n+\n+  for ( ; ptr != end; ptr++)\n+    (*ptr)();\n+}\n+"}, {"sha": "53a21f3b5c7bd5eba68cc6782ba7bc571c812f63", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 124, "deletions": 21, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=ce133c0fae02985fc9f50953b88d596cc66723b4", "patch": "@@ -15,56 +15,159 @@\n .Lgot = .-.LCTOC1\n \t.long\t_GLOBAL_OFFSET_TABLE_\t\t# normal GOT address\n \n+.Lgots = .-.LCTOC1\n+\t.long\t_GOT_START_\t\t\t# start of .got section\n+\n+.Lgote = .-.LCTOC1\n+\t.long\t_GOT_END_\t\t\t# end of .got section\n+\n .Lgot2s = .-.LCTOC1\n \t.long\t_GOT2_START_\t\t\t# -mrelocatable GOT pointers start\n \n .Lgot2e = .-.LCTOC1\n \t.long\t_GOT2_END_\t\t\t# -mrelocatable GOT pointers end\n \n \t.text\n-.Lptr:\t.long\t.LCTOC1-.Laddr\t\t\t# PC relative pointer to .got2\n+.Lptr:\n+\t.long\t.LCTOC1-.Laddr\t\t\t# PC relative pointer to .got2\n \t.long\t0x4000\t\t\t\t# traceback table\n \n __eabi:\tmflr\t0\n \tbl\t.Laddr\t\t\t\t# get current address\n-.Laddr:\tmflr\t12\t\t\t\t# real address of .Laddr\n+.Laddr:\n+\tmflr\t12\t\t\t\t# real address of .Laddr\n \tlwz\t11,(.Lptr-.Laddr)(12)\t\t# linker generated address of .LCTOC1\n \tadd\t11,11,12\t\t\t# correct to real pointer\n \tlwz\t12,.Ltable(11)\t\t\t# get linker's idea of where .Laddr is\n \tsubf.\t12,12,11\t\t\t# calculate difference\n+\tmtlr\t0\t\t\t\t# restore link register\n \tbc\t4,2,.Lreloc\t\t\t# skip if we need to relocate\n \n+# Only load up register 2 if there is a .got section\n+\n+\tlwz\t3,.Lgots(11)\t\t\t# start of .got section\n+\tlwz\t4,.Lgote(11)\t\t\t# end of .got section\n+\tcmpw\t1,3,4\t\t\t\t# .got section non-empty?\n+\tbc\t12,6,.Ldone\n+\n # Normal program, load up register 2\n \n-\tmtlr\t0\t\t\t\t# restore link register\n \tlwz\t2,.Lgot(11)\t\t\t# normal GOT address\n-\tblr\n+\tb\t__do_global_ctors\t\t# do any C++ global contstructors (which returns to caller)\n \n # We need to relocate the .got2 pointers.  Don't load register 2\n \n .Lreloc:\n-\tstwu\t30,-4(1)\n-\tstwu\t31,-4(1)\n-\tlwz\t30,.Lgot2s(11)\t\t\t# GOT pointers start\n-\tlwz\t31,.Lgot2e(11)\t\t\t# GOT pointers end\n-\tadd\t30,12,30\t\t\t# adjust pointers\n-\tadd\t31,12,31\n-\n-\tcmpw\t1,30,31\t\t\t\t# any pointers to adjust\n+\tlwz\t3,.Lgot2s(11)\t\t\t# GOT pointers start\n+\tlwz\t4,.Lgot2e(11)\t\t\t# GOT pointers end\n+\tadd\t3,12,3\t\t\t\t# adjust pointers\n+\tadd\t4,12,4\n+\n+\tcmpw\t1,3,4\t\t\t\t# any pointers to adjust\n \tbc\t12,6,.Ldone\n \n-.Lloop:\tlwz\t11,0(30)\t\t\t# next pointer\n+.Lloop:\n+\tlwz\t11,0(3)\t\t\t\t# next pointer\n \tadd\t11,11,12\t\t\t# adjust\n-\tstw\t11,0(30)\n-\taddi\t30,30,4\t\t\t\t# bump to next word\n-\tcmpw\t1,30,31\t\t\t\t# more pointers to adjust?\n+\tstw\t11,0(3)\n+\taddi\t3,3,4\t\t\t\t# bump to next word\n+\tcmpw\t1,3,4\t\t\t\t# more pointers to adjust?\n \tbc\t4,6,.Lloop\n \n # Done adjusting pointers, return\n \n .Ldone:\n-\tmtlr\t0\t\t\t\t# restore link register\n-\tlwz\t31,0(1)\n-\tlwz\t30,4(1)\t\t\t\t# restore regs\n-\taddic\t1,1,8\t\t\t\t# pop stack\n-\tblr\n+\tb\t__do_global_ctors\t\t# do any C++ global contstructors (which returns to caller)\n+\n+# Routines for saving floating point registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the floating point save area.\n+\n+\t.globl\t_savefpr_14_l\n+\t.globl\t_savefpr_15_l\n+\t.globl\t_savefpr_16_l\n+\t.globl\t_savefpr_17_l\n+\t.globl\t_savefpr_18_l\n+\t.globl\t_savefpr_19_l\n+\t.globl\t_savefpr_20_l\n+\t.globl\t_savefpr_21_l\n+\t.globl\t_savefpr_22_l\n+\t.globl\t_savefpr_23_l\n+\t.globl\t_savefpr_24_l\n+\t.globl\t_savefpr_25_l\n+\t.globl\t_savefpr_26_l\n+\t.globl\t_savefpr_27_l\n+\t.globl\t_savefpr_28_l\n+\t.globl\t_savefpr_29_l\n+\t.globl\t_savefpr_30_l\n+\t.globl\t_savefpr_31_l\n+\n+\t\t.long\t0x00400000\t# traceback tag\n+_savefpr_14_l:\tstfd\t14,-144(11)\t# save fp registers\n+_savefpr_15_l:  stfd\t15,-136(11)\n+_savefpr_16_l:  stfd\t16,-128(11)\n+_savefpr_17_l:  stfd\t17,-120(11)\n+_savefpr_18_l:  stfd\t18,-112(11)\n+_savefpr_19_l:  stfd\t19,-104(11)\n+_savefpr_20_l:  stfd\t20,-96(11)\n+_savefpr_21_l:  stfd\t21,-88(11)\n+_savefpr_22_l:  stfd\t22,-80(11)\n+_savefpr_23_l:  stfd\t23,-72(11)\n+_savefpr_24_l:  stfd\t24,-64(11)\n+_savefpr_25_l:  stfd\t25,-56(11)\n+_savefpr_26_l:  stfd\t26,-48(11)\n+_savefpr_27_l:  stfd\t27,-40(11)\n+_savefpr_28_l:  stfd\t28,-32(11)\n+_savefpr_29_l:  stfd\t29,-24(11)\n+_savefpr_30_l:  stfd\t30,-16(11)\n+_savefpr_31_l:  stfd\t31,-8(11)\n+\t\tstw\t0,4(11)\t\t# save return address also\n+\t\tblr\n+\n+\n+# Routines for restoring floating point registers, called by the compiler.\n+# Called with r11 pointing to the stack header word of the caller of the\n+# function, just beyond the end of the floating point save area.\n+\n+\t.globl\t_restfpr_14_l\n+\t.globl\t_restfpr_15_l\n+\t.globl\t_restfpr_16_l\n+\t.globl\t_restfpr_17_l\n+\t.globl\t_restfpr_18_l\n+\t.globl\t_restfpr_19_l\n+\t.globl\t_restfpr_20_l\n+\t.globl\t_restfpr_21_l\n+\t.globl\t_restfpr_22_l\n+\t.globl\t_restfpr_23_l\n+\t.globl\t_restfpr_24_l\n+\t.globl\t_restfpr_25_l\n+\t.globl\t_restfpr_26_l\n+\t.globl\t_restfpr_27_l\n+\t.globl\t_restfpr_28_l\n+\t.globl\t_restfpr_29_l\n+\t.globl\t_restfpr_30_l\n+\t.globl\t_restfpr_31_l\n+\n+\t\t.long\t0x00600000\t# traceback tag\n+_restfpr_14_l:\tlfd\t14,-144(11)\t# restore fp registers\n+_restfpr_15_l:  lfd\t15,-136(11)\n+_restfpr_16_l:  lfd\t16,-128(11)\n+_restfpr_17_l:  lfd\t17,-120(11)\n+_restfpr_18_l:  lfd\t18,-112(11)\n+_restfpr_19_l:  lfd\t19,-104(11)\n+_restfpr_20_l:  lfd\t20,-96(11)\n+_restfpr_21_l:  lfd\t21,-88(11)\n+_restfpr_22_l:  lfd\t22,-80(11)\n+_restfpr_23_l:  lfd\t23,-72(11)\n+_restfpr_24_l:  lfd\t24,-64(11)\n+_restfpr_25_l:  lfd\t25,-56(11)\n+_restfpr_26_l:  lfd\t26,-48(11)\n+_restfpr_27_l:  lfd\t27,-40(11)\n+_restfpr_28_l:  lfd\t28,-32(11)\n+_restfpr_29_l:  lfd\t29,-24(11)\n+_restfpr_30_l:  lfd\t30,-16(11)\n+_restfpr_31_l:  lwz\t0,4(11)\t\t# caller's caller address\n+\t\tlfd\t31,-8(11)\n+\t\tmtlr\t0\n+\t\tmr\t1,11\n+\t\tblr"}, {"sha": "7e4d4f083f77feea0e24bc0fa2705e7be81fafa4", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce133c0fae02985fc9f50953b88d596cc66723b4/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=ce133c0fae02985fc9f50953b88d596cc66723b4", "patch": "@@ -56,8 +56,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (PowerPC Embedded)\");\n \n-/* FIXME: These should actually indicate PowerPC, when there is some\n-   standard way of expressing that.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n   \"-DPPC -D__embedded__ -Asystem(embedded) -Acpu(powerpc) -Amachine(powerpc)\"\n+\n+/* Don't use startfiles or libraries except for libgcc.a */\n+#undef  STARTFILE_SPEC\n+#define\tSTARTFILE_SPEC \"\"\n+\n+#undef\tLIB_SPEC\n+#define\tLIB_SPEC \"\"\n+\n+#undef\tLIBGCC_SPEC\n+#define\tLIBGCC_SPEC \"libgcc.a%s\"\n+\n+#undef\tENDFILE_SPEC\n+#define\tENDFILE_SPEC \"\"\n+"}]}