{"sha": "9a666dda814d39005cddd4b257fa4f43684a8e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2NjZkZGE4MTRkMzkwMDVjZGRkNGIyNTdmYTRmNDM2ODRhOGU3Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-15T07:14:08Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-15T07:14:08Z"}, "message": "x\n\nFrom-SVN: r13160", "tree": {"sha": "0937a9e21f6ef58453839ff8584153e2ae20dd8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0937a9e21f6ef58453839ff8584153e2ae20dd8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a666dda814d39005cddd4b257fa4f43684a8e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a666dda814d39005cddd4b257fa4f43684a8e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a666dda814d39005cddd4b257fa4f43684a8e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a666dda814d39005cddd4b257fa4f43684a8e77/comments", "author": null, "committer": null, "parents": [{"sha": "f3ff3f4abecdb427f882e39af590788f1d2c12ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ff3f4abecdb427f882e39af590788f1d2c12ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ff3f4abecdb427f882e39af590788f1d2c12ad"}], "stats": {"total": 383, "additions": 277, "deletions": 106}, "files": [{"sha": "b9c219091529c31582e4dd616ba36195a961b7b0", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -434,12 +434,8 @@ check_newline ()\n \t      && getc (finput) == 'e'\n \t      && ((c = getc (finput)) == ' ' || c == '\\t' || c == '\\n'))\n \t    {\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (c != '\\n'\n-\t\t  && (debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t\t  && (write_symbols == DWARF_DEBUG))\n-\t        dwarfout_define (lineno, get_directive_line (finput));\n-#endif /* DWARF_DEBUGGING_INFO */\n+\t      if (c != '\\n')\n+\t\tdebug_define (lineno, get_directive_line (finput));\n \t      goto skipline;\n \t    }\n \t}\n@@ -451,12 +447,8 @@ check_newline ()\n \t      && getc (finput) == 'f'\n \t      && ((c = getc (finput)) == ' ' || c == '\\t' || c == '\\n'))\n \t    {\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (c != '\\n'\n-\t\t  && (debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t\t  && (write_symbols == DWARF_DEBUG))\n-\t        dwarfout_undef (lineno, get_directive_line (finput));\n-#endif /* DWARF_DEBUGGING_INFO */\n+\t      if (c != '\\n')\n+\t\tdebug_undef (lineno, get_directive_line (finput));\n \t      goto skipline;\n \t    }\n \t}\n@@ -608,16 +600,7 @@ check_newline ()\n \t      p->name = input_filename;\n \t      input_file_stack = p;\n \t      input_file_stack_tick++;\n-#ifdef DBX_DEBUGGING_INFO\n-\t      if (write_symbols == DBX_DEBUG)\n-\t\tdbxout_start_new_source_file (input_filename);\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (debug_info_level == DINFO_LEVEL_VERBOSE\n-\t\t  && write_symbols == DWARF_DEBUG)\n-\t\tdwarfout_start_new_source_file (input_filename);\n-#endif /* DWARF_DEBUGGING_INFO */\n-\n+\t      debug_start_source_file (input_filename);\n \t      used_up = 1;\n \t    }\n \t  else if (TREE_INT_CST_LOW (yylval.ttype) == 2)\n@@ -629,15 +612,7 @@ check_newline ()\n \t\t  input_file_stack = p->next;\n \t\t  free (p);\n \t\t  input_file_stack_tick++;\n-#ifdef DBX_DEBUGGING_INFO\n-\t\t  if (write_symbols == DBX_DEBUG)\n-\t\t    dbxout_resume_previous_source_file ();\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-\t\t  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-\t\t      && write_symbols == DWARF_DEBUG)\n-\t\t    dwarfout_resume_previous_source_file (input_file_stack->line);\n-#endif /* DWARF_DEBUGGING_INFO */\n+\t\t  debug_end_source_file (input_file_stack->line);\n \t\t}\n \t      else\n \t\terror (\"#-lines for entering and leaving files don't match\");"}, {"sha": "c994b7f1ff54006cde68d377005818e2a7f1f0ba", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -88,12 +88,11 @@ Boston, MA 02111-1307, USA.  */\n %{mabi=64: -D__mips64} \\\n %{!mabi*: -D__mips64}\"\n \n-/* Irix 6 uses DWARF.  */\n-#define DWARF_DEBUGGING_INFO\n-#define DWARF_VERSION 2\n+/* Irix 6 uses DWARF-2.  */\n+#define DWARF2_DEBUGGING_INFO\n #define MIPS_DEBUGGING_INFO\n #undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n /* The size in bytes of a DWARF field indicating an offset or length\n    relative to a debug info section, specified to be 4 bytes in the DWARF-2\n@@ -479,7 +478,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define LINK_SPEC \"\\\n %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n %{bestGnum} %{shared} %{non_shared} \\\n-%{call_shared} %{no_archive} %{exact_version} \\\n+%{call_shared} %{no_archive} %{exact_version} %{w} \\\n %{!shared: %{!non_shared: %{!call_shared: -call_shared -no_unresolved}}} \\\n %{rpath} -init __do_global_ctors -fini __do_global_dtors \\\n %{shared:-hidden_symbol __do_global_ctors,__do_global_dtors} \\"}, {"sha": "112b658028ecc01a5e3de661b467d83706fdb888", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -880,7 +880,7 @@ while (0)\n #define MIPS_DEBUGGING_INFO\t\t/* MIPS specific debugging info */\n \n #ifndef PREFERRED_DEBUGGING_TYPE\t/* assume SDB_DEBUGGING_INFO */\n-#define PREFERRED_DEBUGGING_TYPE ((len > 1 && !strncmp (str, \"ggdb\", len)) ? DBX_DEBUG : SDB_DEBUG)\n+#define PREFERRED_DEBUGGING_TYPE ((!strncmp (str, \"ggdb\", 4)) ? DBX_DEBUG : SDB_DEBUG)\n #endif\n \n /* By default, turn on GDB extensions.  */"}, {"sha": "506d1d18c10b2c5edfee58eb8a29e6e04aef58bb", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -245,6 +245,10 @@ do {\t\t\t\t \t\t\t\t\\\n \n #define DWARF_DEBUGGING_INFO\n \n+/* All ELF targets can support DWARF-2.  */\n+\n+#define DWARF2_DEBUGGING_INFO\n+\n /* The numbers used to denote specific machine registers in the System V\n    Release 4 DWARF debugging information are quite likely to be totally\n    different from the numbers used in BSD stabs debugging information"}, {"sha": "1a0836cc7b50457e2bd2c3899b9774e4ad14e199", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -21,10 +21,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"config.h\"\n \n-#ifndef DWARF_VERSION\n-#define DWARF_VERSION 1\n-#endif\n-#if defined (DWARF_DEBUGGING_INFO) && (DWARF_VERSION == 2)\n+#ifdef DWARF2_DEBUGGING_INFO\n #include <stdio.h>\n #include \"dwarf2.h\"\n #include \"tree.h\"\n@@ -321,6 +318,8 @@ extern char *language_string;\n #define DWARF_OFFSET_SIZE 4\n #endif\n \n+#define DWARF_VERSION 2\n+\n /* Fixed size portion of the DWARF compilation unit header.  */\n #define DWARF_COMPILE_UNIT_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 3)\n \n@@ -405,7 +404,7 @@ static unsigned file_table_in_use;\n #define FILE_TABLE_INCREMENT 64\n \n /* Local pointer to the name of the main input file.  Initialized in\n-   dwarfout_init.  */\n+   dwarf2out_init.  */\n static char *primary_filename;\n \n /* For Dwarf output, we must assign lexical-blocks id numbers in the order in\n@@ -5617,7 +5616,7 @@ add_location_or_const_value_attribute (die, decl)\n      (at debug-time) will show the function as having been called with the\n      *new* value rather than the value which was originally passed in.  This\n      happens rarely enough that it is not a major problem, but it *is* a\n-     problem, and I'd like to fix it.  A future version of dwarfout.c may\n+     problem, and I'd like to fix it.  A future version of dwarf2out.c may\n      generate two additional attributes for any given DW_TAG_formal_parameter \n      DIE which will describe the \"passed type\" and the \"passed location\" for\n      the given formal parameter in addition to the attributes we now generate \n@@ -6197,7 +6196,7 @@ decl_start_label (decl)\n \n /* These routines generate the internnal representation of the DIE's for\n    the compilation unit.  Debugging information is collected by walking\n-   the declaration trees passed in from dwarfout_file_scope_decl().  */\n+   the declaration trees passed in from dwarf2out_file_scope_decl().  */\n \n static void\n gen_array_type_die (type, context_die)\n@@ -7626,7 +7625,7 @@ gen_decl_die (decl, context_die)\n \f\n /***************** Debug Information Generation Hooks ***********************/\n void\n-dwarfout_file_scope_decl (decl, set_finalizing)\n+dwarf2out_file_scope_decl (decl, set_finalizing)\n      register tree decl;\n      register int set_finalizing;\n {\n@@ -7755,7 +7754,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n /* Output a marker (i.e. a label) for the beginning of the generated code for\n    a lexical block.  */\n void\n-dwarfout_begin_block (blocknum)\n+dwarf2out_begin_block (blocknum)\n      register unsigned blocknum;\n {\n   function_section (current_function_decl);\n@@ -7765,7 +7764,7 @@ dwarfout_begin_block (blocknum)\n /* Output a marker (i.e. a label) for the end of the generated code for a\n    lexical block.  */\n void\n-dwarfout_end_block (blocknum)\n+dwarf2out_end_block (blocknum)\n      register unsigned blocknum;\n {\n   function_section (current_function_decl);\n@@ -7775,7 +7774,7 @@ dwarfout_end_block (blocknum)\n /* Output a marker (i.e. a label) at a point in the assembly code which\n    corresponds to a given source level label.  */\n void\n-dwarfout_label (insn)\n+dwarf2out_label (insn)\n      register rtx insn;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -7791,7 +7790,7 @@ dwarfout_label (insn)\n /* Output a marker (i.e. a label) for the beginning of a function, before\n    the prologue.  */\n void\n-dwarfout_begin_prologue ()\n+dwarf2out_begin_prologue ()\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n   register dw_fde_ref fde;\n@@ -7825,7 +7824,7 @@ dwarfout_begin_prologue ()\n    the real body of the function begins (after parameters have been moved to\n    their home locations).  */\n void\n-dwarfout_begin_function ()\n+dwarf2out_begin_function ()\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n   register long int offset;\n@@ -7919,7 +7918,7 @@ dwarfout_begin_function ()\n /* Output a marker (i.e. a label) for the point in the generated code where\n    the real body of the function ends (just before the epilogue code).  */\n void\n-dwarfout_end_function ()\n+dwarf2out_end_function ()\n {\n   dw_fde_ref fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -7935,7 +7934,7 @@ dwarfout_end_function ()\n    for a function definition.  This gets called *after* the epilogue code has\n    been generated.  */\n void\n-dwarfout_end_epilogue ()\n+dwarf2out_end_epilogue ()\n {\n   dw_fde_ref fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -7948,7 +7947,7 @@ dwarfout_end_epilogue ()\n }\n \n /* Lookup a filename (in the list of filenames that we know about here in\n-   dwarfout.c) and return its \"index\".  The index of each (known) filename is\n+   dwarf2out.c) and return its \"index\".  The index of each (known) filename is\n    just a unique number which is associated with only that one filename.\n    We need such numbers for the sake of generating labels\n    (in the .debug_sfnames section) and references to those\n@@ -8007,7 +8006,7 @@ lookup_filename (file_name)\n    and record information relating to this source line, in\n    'line_info_table' for later output of the .debug_line section.  */\n void\n-dwarfout_line (filename, line)\n+dwarf2out_line (filename, line)\n      register char *filename;\n      register unsigned line;\n {\n@@ -8067,31 +8066,30 @@ dwarfout_line (filename, line)\n /* Record the beginning of a new source file, for later output\n    of the .debug_macinfo section.  At present, unimplemented.  */\n void\n-dwarfout_start_new_source_file (filename)\n+dwarf2out_start_source_file (filename)\n      register char *filename;\n {\n }\n \n-/* Record the resumption of a source file, for later output\n+/* Record the end of a source file, for later output\n    of the .debug_macinfo section.  At present, unimplemented.  */\n void\n-dwarfout_resume_previous_source_file (lineno)\n-     register unsigned lineno;\n+dwarf2out_end_source_file ()\n {\n }\n \n /* Called from check_newline in c-parse.y.  The `buffer' parameter contains\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n void\n-dwarfout_define (lineno, buffer)\n+dwarf2out_define (lineno, buffer)\n      register unsigned lineno;\n      register char *buffer;\n {\n   static int initialized = 0;\n   if (!initialized)\n     {\n-      dwarfout_start_new_source_file (primary_filename);\n+      dwarf2out_start_source_file (primary_filename);\n       initialized = 1;\n     }\n }\n@@ -8100,15 +8098,15 @@ dwarfout_define (lineno, buffer)\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n void\n-dwarfout_undef (lineno, buffer)\n+dwarf2out_undef (lineno, buffer)\n      register unsigned lineno;\n      register char *buffer;\n {\n }\n \n /* Set up for Dwarf output at the start of compilation.  */\n void\n-dwarfout_init (asm_out_file, main_input_filename)\n+dwarf2out_init (asm_out_file, main_input_filename)\n      register FILE *asm_out_file;\n      register char *main_input_filename;\n {\n@@ -8185,7 +8183,7 @@ dwarfout_init (asm_out_file, main_input_filename)\n /* Output stuff that dwarf requires at the end of every file,\n    and generate the DWARF-2 debugging info.  */\n void\n-dwarfout_finish ()\n+dwarf2out_finish ()\n {\n   /* Traverse the DIE tree and add sibling attributes to those DIE's\n      that have children.  */\n@@ -8266,4 +8264,4 @@ dwarfout_finish ()\n       output_aranges ();\n     }\n }\n-#endif /* DWARF_DEBUGGING_INFO  && DWARF_VERSION == 2 */\n+#endif /* DWARF2_DEBUGGING_INFO */"}, {"sha": "5206ebd113399eb4e34b6efcbd0dfc2b85ca6f6c", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -21,10 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n \n-#ifndef DWARF_VERSION\n-#define DWARF_VERSION 1\n-#endif\n-#if defined (DWARF_DEBUGGING_INFO) && (DWARF_VERSION != 2)\n+#ifdef DWARF_DEBUGGING_INFO\n #include <stdio.h>\n #include \"dwarf.h\"\n #include \"tree.h\"\n@@ -5734,4 +5731,4 @@ dwarfout_finish ()\n     }\n }\n \n-#endif /* DWARF_DEBUGGING_INFO && DWARF_VERSION != 2 */\n+#endif /* DWARF_DEBUGGING_INFO */"}, {"sha": "107a893876d2895b9509bd7322913b15cdd73e56", "filename": "gcc/final.c", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -895,10 +895,10 @@ final_start_function (first, file, optimize)\n     last_linenum = high_block_linenum = high_function_linenum\n       = NOTE_LINE_NUMBER (first);\n \n-#if defined (DWARF_DEBUGGING_INFO) && DWARF_VERSION == 2\n+#ifdef DWARF2_DEBUGGING_INFO\n   /* Output DWARF definition of the function.  */\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_begin_prologue ();\n+  if (write_symbols == DWARF2_DEBUG)\n+    dwarf2out_begin_prologue ();\n #endif\n \n   /* For SDB and XCOFF, the function beginning must be marked between\n@@ -1066,6 +1066,11 @@ final_end_function (first, file, optimize)\n     dwarfout_end_function ();\n #endif\n \n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    dwarf2out_end_function ();\n+#endif\n+\n #ifdef XCOFF_DEBUGGING_INFO\n   if (write_symbols == XCOFF_DEBUG)\n     xcoffout_end_function (file, high_function_linenum);\n@@ -1087,6 +1092,11 @@ final_end_function (first, file, optimize)\n     dwarfout_end_epilogue ();\n #endif\n \n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    dwarf2out_end_epilogue ();\n+#endif\n+\n #ifdef XCOFF_DEBUGGING_INFO\n   if (write_symbols == XCOFF_DEBUG)\n     xcoffout_end_epilogue (file);\n@@ -1364,6 +1374,12 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t     must be after the prologue.  */\n \t  if (write_symbols == DWARF_DEBUG)\n \t    dwarfout_begin_function ();\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t  /* This outputs a marker where the function body starts, so it\n+\t     must be after the prologue.  */\n+\t  if (write_symbols == DWARF2_DEBUG)\n+\t    dwarf2out_begin_function ();\n #endif\n \t  break;\n \t}\n@@ -1377,11 +1393,8 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG\n \t  && (debug_info_level == DINFO_LEVEL_NORMAL\n \t      || debug_info_level == DINFO_LEVEL_VERBOSE\n-#ifdef DWARF_DEBUGGING_INFO\n \t      || write_symbols == DWARF_DEBUG\n-#endif\n-\t     )\n-\t )\n+\t      || write_symbols == DWARF2_DEBUG))\n \t{\n \t  /* Beginning of a symbol-block.  Assign it a sequence number\n \t     and push the number onto the stack PENDING_BLOCKS.  */\n@@ -1416,17 +1429,18 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  if (write_symbols == DWARF_DEBUG)\n \t    dwarfout_begin_block (next_block_index);\n #endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t  if (write_symbols == DWARF2_DEBUG)\n+\t    dwarf2out_begin_block (next_block_index);\n+#endif\n \n \t  next_block_index++;\n \t}\n       else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END\n \t       && (debug_info_level == DINFO_LEVEL_NORMAL\n \t\t   || debug_info_level == DINFO_LEVEL_VERBOSE\n-#ifdef DWARF_DEBUGGING_INFO\n \t           || write_symbols == DWARF_DEBUG\n-#endif\n-\t          )\n-\t      )\n+\t           || write_symbols == DWARF2_DEBUG))\n \t{\n \t  /* End of a symbol-block.  Pop its sequence number off\n \t     PENDING_BLOCKS and output debugging info based on that.  */\n@@ -1451,6 +1465,10 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #ifdef DWARF_DEBUGGING_INFO\n \t  if (write_symbols == DWARF_DEBUG && block_depth >= 0)\n \t    dwarfout_end_block (pending_blocks[block_depth]);\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t  if (write_symbols == DWARF2_DEBUG && block_depth >= 0)\n+\t    dwarf2out_end_block (pending_blocks[block_depth]);\n #endif\n \t}\n       else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED_LABEL\n@@ -1460,6 +1478,10 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #ifdef DWARF_DEBUGGING_INFO\n           if (write_symbols == DWARF_DEBUG)\n             dwarfout_label (insn);\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+          if (write_symbols == DWARF2_DEBUG)\n+            dwarf2out_label (insn);\n #endif\n \t}\n       else if (NOTE_LINE_NUMBER (insn) > 0)\n@@ -1536,6 +1558,10 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #ifdef DWARF_DEBUGGING_INFO\n       if (write_symbols == DWARF_DEBUG && LABEL_NAME (insn))\n \tdwarfout_label (insn);\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+      if (write_symbols == DWARF2_DEBUG && LABEL_NAME (insn))\n+\tdwarf2out_label (insn);\n #endif\n       if (app_on)\n \t{\n@@ -2156,6 +2182,11 @@ output_source_line (file, insn)\n       if (write_symbols == DWARF_DEBUG)\n \tdwarfout_line (filename, NOTE_LINE_NUMBER (insn));\n #endif\n+\n+#ifdef DWARF2_DEBUGGING_INFO\n+      if (write_symbols == DWARF2_DEBUG)\n+\tdwarf2out_line (filename, NOTE_LINE_NUMBER (insn));\n+#endif\n     }\n }\n \f"}, {"sha": "df51e525a5549111d5ff0a701e33afe7a35218e8", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -27,6 +27,7 @@ enum debug_info_type\n   DBX_DEBUG,\t    /* Write BSD .stabs for DBX (using dbxout.c).  */\n   SDB_DEBUG,\t    /* Write COFF for (old) SDB (using sdbout.c).  */\n   DWARF_DEBUG,\t    /* Write Dwarf debug info (using dwarfout.c).  */\n+  DWARF2_DEBUG,\t    /* Write Dwarf v2 debug info (using dwarf2out.c).  */\n   XCOFF_DEBUG\t    /* Write IBM/Xcoff debug info (using dbxout.c).  */\n };\n "}, {"sha": "a08b5987f66839f906f379ba8c8771e44cddccd5", "filename": "gcc/toplev.c", "status": "modified", "additions": 182, "deletions": 26, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -97,7 +97,7 @@ vms_fopen (fname, type)\n    PREFERRED_DEBUGGING_TYPE to choose a format in a system-dependent way. \n \n    This is one long line cause VAXC can't handle a \\-newline.  */\n-#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n+#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (DWARF2_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n #ifndef PREFERRED_DEBUGGING_TYPE\n You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #endif /* no PREFERRED_DEBUGGING_TYPE */\n@@ -112,6 +112,9 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #ifdef DWARF_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n #endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#endif\n #ifdef XCOFF_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n #endif\n@@ -2315,6 +2318,10 @@ compile_file (name)\n   if (write_symbols == DWARF_DEBUG)\n     TIMEVAR (symout_time, dwarfout_init (asm_out_file, main_input_filename));\n #endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    TIMEVAR (symout_time, dwarf2out_init (asm_out_file, main_input_filename));\n+#endif\n \n   /* Initialize yet another pass.  */\n \n@@ -2522,6 +2529,16 @@ compile_file (name)\n \tif (write_symbols == DWARF_DEBUG\n \t    && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl)))\n \t  TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 1));\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t/* Output DWARF2 information for file-scope tentative data object\n+\t   declarations, file-scope (extern) function declarations (which\n+\t   had no corresponding body) and file-scope tagged type declarations\n+\t   and definitions which have not yet been forced out.  */\n+\n+\tif (write_symbols == DWARF2_DEBUG\n+\t    && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl)))\n+\t  TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 1));\n #endif\n       }\n   }\n@@ -2547,6 +2564,14 @@ compile_file (name)\n \t     });\n #endif\n \n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    TIMEVAR (symout_time,\n+\t     {\n+\t       dwarf2out_finish ();\n+\t     });\n+#endif\n+\n   /* Output some stuff at end of file if nec.  */\n \n   if (!output_bytecode)\n@@ -2756,6 +2781,11 @@ rest_of_type_compilation (type, toplev)\n   if (write_symbols == DWARF_DEBUG && toplev)\n     TIMEVAR (symout_time, dwarfout_file_scope_decl (TYPE_STUB_DECL (type), 0));\n #endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+  /* Don't write out function-scope types here.  */\n+  if (write_symbols == DWARF2_DEBUG && toplev)\n+    TIMEVAR (symout_time, dwarf2out_file_scope_decl (TYPE_STUB_DECL (type), 0));\n+#endif\n }\n \n /* This is called from finish_function (within yyparse)\n@@ -2862,6 +2892,17 @@ rest_of_compilation (decl)\n \t\t  TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 0));\n \t\t  set_decl_abstract_flags (decl, 0);\n \t\t}\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t      /* Generate the DWARF2 info for the \"abstract\" instance\n+\t\t of a function which we may later generate inlined and/or\n+\t\t out-of-line instances of.  */\n+\t      if (write_symbols == DWARF2_DEBUG)\n+\t\t{\n+\t\t  set_decl_abstract_flags (decl, 1);\n+\t\t  TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+\t\t  set_decl_abstract_flags (decl, 0);\n+\t\t}\n #endif\n \t      TIMEVAR (integration_time, save_for_inline_nocopy (decl));\n \t      RTX_INTEGRATED_P (DECL_SAVED_INSNS (decl)) = inlineable;\n@@ -2884,6 +2925,18 @@ rest_of_compilation (decl)\n \t      TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 0));\n \t      set_decl_abstract_flags (decl, 0);\n \t    }\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t  /* Generate the DWARF2 info for the \"abstract\" instance of\n+\t     a function which we will generate an out-of-line instance\n+\t     of almost immediately (and which we may also later generate\n+\t     various inlined instances of).  */\n+\t  if (write_symbols == DWARF2_DEBUG)\n+\t    {\n+\t      set_decl_abstract_flags (decl, 1);\n+\t      TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+\t      set_decl_abstract_flags (decl, 0);\n+\t    }\n #endif\n \t  saved_block_tree = DECL_INITIAL (decl);\n \t  saved_arguments = DECL_ARGUMENTS (decl);\n@@ -3376,6 +3429,11 @@ rest_of_compilation (decl)\n     TIMEVAR (symout_time, dwarfout_file_scope_decl (decl, 0));\n #endif\n \n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    TIMEVAR (symout_time, dwarf2out_file_scope_decl (decl, 0));\n+#endif\n+\n  exit_rest_of_compilation:\n \n   /* In case the function was not output,\n@@ -3818,8 +3876,6 @@ main (argc, argv, envp)\n \t    }\n \t  else if (str[0] == 'g')\n \t    {\n-\t      char *p = str + 1;\n-\t      char *q;\n \t      unsigned len;\n \t      unsigned level;\n \t      /* A lot of code assumes write_symbols == NO_DEBUG if the\n@@ -3847,8 +3903,19 @@ main (argc, argv, envp)\n \t\t{ \"gstabs+\", DBX_DEBUG, 1 },\n #endif\n #ifdef DWARF_DEBUGGING_INFO\n+\t\t{ \"gdwarf-1\", DWARF_DEBUG, 0 },\n+\t\t{ \"gdwarf-1+\", DWARF_DEBUG, 1 },\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t\t{ \"gdwarf-2\", DWARF2_DEBUG, 0 },\n+#endif\n+#if defined (DWARF_DEBUGGING_INFO) || defined (DWARF2_DEBUGGING_INFO)\n+#if PREFERRED_DEBUGGING_TYPE == DWARF_DEBUG || !defined (DWARF2_DEBUGGING_INFO)\n \t\t{ \"gdwarf\", DWARF_DEBUG, 0 },\n \t\t{ \"gdwarf+\", DWARF_DEBUG, 1 },\n+#else\n+\t\t{ \"gdwarf\", DWARF2_DEBUG, 0 },\n+#endif\n #endif\n #ifdef XCOFF_DEBUGGING_INFO\n \t\t{ \"gxcoff\", XCOFF_DEBUG, 0 },\n@@ -3861,36 +3928,38 @@ main (argc, argv, envp)\n \t      };\n \t      /* Indexed by enum debug_info_type.  */\n \t      static char *debug_type_names[] = {\n-\t\t\"none\", \"stabs\", \"coff\", \"dwarf\", \"xcoff\"\n+\t\t\"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\"\n \t      };\n \n-\t      while (*p && (*p < '0' || *p > '9'))\n-\t\tp++;\n-\t      len = p - str;\n-\t      q = p;\n-\t      while (*q && (*q >= '0' && *q <= '9'))\n-\t\tq++;\n-\t      if (*p)\n-\t\tlevel = atoi (p);\n-\t      else\n-\t\tlevel = 2;\t/* default debugging info level */\n-\t      if (*q || level > 3)\n-\t\t{\n-\t\t  warning (\"invalid debug level specification in option: `-%s'\",\n-\t\t\t   str);\n-\t\t  /* ??? This error message is incorrect in the case of\n-\t\t     -g4 -g.  */\n-\t\t  warning (\"no debugging information will be generated\");\n-\t\t  level = 0;\n-\t\t}\n-\n \t      /* Look up STR in the table.  */\n \t      for (da = debug_args; da->arg; da++)\n \t\t{\n-\t\t  if (! strncmp (str, da->arg, len))\n+\t\t  if (! strncmp (str, da->arg, strlen (da->arg)))\n \t\t    {\n \t\t      enum debug_info_type type = da->debug_type;\n-\t\t      /* ??? A few targets use STR and LEN in the\n+\t\t      char *p, *q;\n+\n+\t\t      p = str + strlen (da->arg);\n+\t\t      if (*p && (*p < '0' || *p > '9'))\n+\t\t\tcontinue;\n+\t\t      q = p;\n+\t\t      while (*q && (*q >= '0' && *q <= '9'))\n+\t\t\tq++;\n+\t\t      if (*p)\n+\t\t\tlevel = atoi (p);\n+\t\t      else\n+\t\t\tlevel = 2;\t/* default debugging info level */\n+\t\t      if (*q || level > 3)\n+\t\t\t{\n+\t\t\t  warning (\"invalid debug level specification in option: `-%s'\",\n+\t\t\t\t   str);\n+\t\t\t  /* ??? This error message is incorrect in the case of\n+\t\t\t     -g4 -g.  */\n+\t\t\t  warning (\"no debugging information will be generated\");\n+\t\t\t  level = 0;\n+\t\t\t}\n+\n+\t\t      /* ??? A few targets use STR in the\n \t\t\t definition of PREFERRED_DEBUGGING_TYPE!  */\n \t\t      if (type == NO_DEBUG)\n \t\t\ttype = PREFERRED_DEBUGGING_TYPE;\n@@ -4233,3 +4302,90 @@ print_switch_values (file, pos, max, indent, sep, term)\n \n   fprintf (file, \"%s\", term);\n }\n+\n+/* Record the beginning of a new source file, named FILENAME.  */\n+\n+void\n+debug_start_source_file (filename)\n+     register char *filename;\n+{\n+#ifdef DBX_DEBUGGING_INFO\n+  if (write_symbols == DBX_DEBUG)\n+    dbxout_start_new_source_file (filename);\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF_DEBUG)\n+    dwarfout_start_new_source_file (filename);\n+#endif /* DWARF_DEBUGGING_INFO */\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF2_DEBUG)\n+    dwarf2out_start_source_file (filename);\n+#endif /* DWARF2_DEBUGGING_INFO */  \n+}\n+\n+/* Record the resumption of a source file.  LINENO is the line number in\n+   the source file we are returning to.  */\n+\n+void\n+debug_end_source_file (lineno)\n+     register unsigned lineno;\n+{\n+#ifdef DBX_DEBUGGING_INFO\n+  if (write_symbols == DBX_DEBUG)\n+    dbxout_resume_previous_source_file ();\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF_DEBUG)\n+    dwarfout_resume_previous_source_file (lineno);\n+#endif /* DWARF_DEBUGGING_INFO */\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF2_DEBUG)\n+    dwarf2out_end_source_file ();\n+#endif /* DWARF2_DEBUGGING_INFO */\n+}\n+\n+/* Called from check_newline in c-parse.y.  The `buffer' parameter contains\n+   the tail part of the directive line, i.e. the part which is past the\n+   initial whitespace, #, whitespace, directive-name, whitespace part.  */\n+\n+void\n+debug_define (lineno, buffer)\n+     register unsigned lineno;\n+     register char *buffer;\n+{\n+#ifdef DWARF_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF_DEBUG)\n+    dwarfout_define (lineno, buffer);\n+#endif /* DWARF_DEBUGGING_INFO */\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF2_DEBUG)\n+    dwarf2out_define (lineno, buffer);\n+#endif /* DWARF2_DEBUGGING_INFO */\n+}\n+\n+/* Called from check_newline in c-parse.y.  The `buffer' parameter contains\n+   the tail part of the directive line, i.e. the part which is past the\n+   initial whitespace, #, whitespace, directive-name, whitespace part.  */\n+\n+void\n+debug_undef (lineno, buffer)\n+     register unsigned lineno;\n+     register char *buffer;\n+{\n+#ifdef DWARF_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF_DEBUG)\n+    dwarfout_undef (lineno, buffer);\n+#endif /* DWARF_DEBUGGING_INFO */\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+      && write_symbols == DWARF2_DEBUG)\n+    dwarf2out_undef (lineno, buffer);\n+#endif /* DWARF2_DEBUGGING_INFO */\n+}"}, {"sha": "d746b710cf3724719a39d64ac17a1caf6466d85d", "filename": "gcc/varasm.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a666dda814d39005cddd4b257fa4f43684a8e77/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9a666dda814d39005cddd4b257fa4f43684a8e77", "patch": "@@ -1179,6 +1179,11 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \t  if (write_symbols == DWARF_DEBUG && top_level\n \t      && DECL_CONTEXT (decl))\n \t    dwarfout_file_scope_decl (decl, 0);\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+\t  if (write_symbols == DWARF2_DEBUG && top_level\n+\t      && DECL_CONTEXT (decl))\n+\t    dwarf2out_file_scope_decl (decl, 0);\n #endif\n \t}\n \n@@ -1308,6 +1313,11 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \t  && DECL_CONTEXT (decl))\n \tdwarfout_file_scope_decl (decl, 0);\n #endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+      if (write_symbols == DWARF2_DEBUG && top_level\n+\t  && DECL_CONTEXT (decl))\n+\tdwarf2out_file_scope_decl (decl, 0);\n+#endif\n \n       /* Only output DWARF debugging information for record-scope variables\n \t here.  In the case of function-scope variables, the information"}]}