{"sha": "19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTliN2JmNjIwY2Q0ZTYxMGJiOTFiNWQyYWU1NDQ2YTJiNzNiNjMwOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-24T16:50:09Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-24T18:46:05Z"}, "message": "rs6000: Add more type nodes to support builtin processing\n\n2021-08-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Initialize\n\tvarious pointer type nodes.\n\t* config/rs6000/rs6000.h (rs6000_builtin_type_index): Add enum\n\tvalues for various pointer types.\n\t(ptr_V16QI_type_node): New macro.\n\t(ptr_V1TI_type_node): New macro.\n\t(ptr_V2DI_type_node): New macro.\n\t(ptr_V2DF_type_node): New macro.\n\t(ptr_V4SI_type_node): New macro.\n\t(ptr_V4SF_type_node): New macro.\n\t(ptr_V8HI_type_node): New macro.\n\t(ptr_unsigned_V16QI_type_node): New macro.\n\t(ptr_unsigned_V1TI_type_node): New macro.\n\t(ptr_unsigned_V8HI_type_node): New macro.\n\t(ptr_unsigned_V4SI_type_node): New macro.\n\t(ptr_unsigned_V2DI_type_node): New macro.\n\t(ptr_bool_V16QI_type_node): New macro.\n\t(ptr_bool_V8HI_type_node): New macro.\n\t(ptr_bool_V4SI_type_node): New macro.\n\t(ptr_bool_V2DI_type_node): New macro.\n\t(ptr_bool_V1TI_type_node): New macro.\n\t(ptr_pixel_type_node): New macro.\n\t(ptr_intQI_type_node): New macro.\n\t(ptr_uintQI_type_node): New macro.\n\t(ptr_intHI_type_node): New macro.\n\t(ptr_uintHI_type_node): New macro.\n\t(ptr_intSI_type_node): New macro.\n\t(ptr_uintSI_type_node): New macro.\n\t(ptr_intDI_type_node): New macro.\n\t(ptr_uintDI_type_node): New macro.\n\t(ptr_intTI_type_node): New macro.\n\t(ptr_uintTI_type_node): New macro.\n\t(ptr_long_integer_type_node): New macro.\n\t(ptr_long_unsigned_type_node): New macro.\n\t(ptr_float_type_node): New macro.\n\t(ptr_double_type_node): New macro.\n\t(ptr_long_double_type_node): New macro.\n\t(ptr_dfloat64_type_node): New macro.\n\t(ptr_dfloat128_type_node): New macro.\n\t(ptr_ieee128_type_node): New macro.\n\t(ptr_ibm128_type_node): New macro.\n\t(ptr_vector_pair_type_node): New macro.\n\t(ptr_vector_quad_type_node): New macro.\n\t(ptr_long_long_integer_type_node): New macro.\n\t(ptr_long_long_unsigned_type_node): New macro.", "tree": {"sha": "8405ece4efd2202f54b0b49a0161e24b6e251dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8405ece4efd2202f54b0b49a0161e24b6e251dba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308/comments", "author": null, "committer": null, "parents": [{"sha": "2ed356a4c9af0629d9d5fd30969e432de6302cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed356a4c9af0629d9d5fd30969e432de6302cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed356a4c9af0629d9d5fd30969e432de6302cb3"}], "stats": {"total": 230, "additions": 228, "deletions": 2}, "files": [{"sha": "fd7f24da8186bfa270fcb1b1c8082386e0bda5e8", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 146, "deletions": 2, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "patch": "@@ -13294,6 +13294,7 @@ rs6000_init_builtins (void)\n {\n   tree tdecl;\n   tree ftype;\n+  tree t;\n   machine_mode mode;\n \n   if (TARGET_DEBUG_BUILTIN)\n@@ -13304,25 +13305,63 @@ rs6000_init_builtins (void)\n   V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64 ? \"__vector long\"\n \t\t\t\t       : \"__vector long long\",\n \t\t\t\t       long_long_integer_type_node, 2);\n+  ptr_V2DI_type_node\n+    = build_pointer_type (build_qualified_type (V2DI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   V2DF_type_node = rs6000_vector_type (\"__vector double\", double_type_node, 2);\n+  ptr_V2DF_type_node\n+    = build_pointer_type (build_qualified_type (V2DF_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   V4SI_type_node = rs6000_vector_type (\"__vector signed int\",\n \t\t\t\t       intSI_type_node, 4);\n+  ptr_V4SI_type_node\n+    = build_pointer_type (build_qualified_type (V4SI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   V4SF_type_node = rs6000_vector_type (\"__vector float\", float_type_node, 4);\n+  ptr_V4SF_type_node\n+    = build_pointer_type (build_qualified_type (V4SF_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   V8HI_type_node = rs6000_vector_type (\"__vector signed short\",\n \t\t\t\t       intHI_type_node, 8);\n+  ptr_V8HI_type_node\n+    = build_pointer_type (build_qualified_type (V8HI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   V16QI_type_node = rs6000_vector_type (\"__vector signed char\",\n \t\t\t\t\tintQI_type_node, 16);\n+  ptr_V16QI_type_node\n+    = build_pointer_type (build_qualified_type (V16QI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n \n   unsigned_V16QI_type_node = rs6000_vector_type (\"__vector unsigned char\",\n \t\t\t\t\tunsigned_intQI_type_node, 16);\n+  ptr_unsigned_V16QI_type_node\n+    = build_pointer_type (build_qualified_type (unsigned_V16QI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   unsigned_V8HI_type_node = rs6000_vector_type (\"__vector unsigned short\",\n \t\t\t\t       unsigned_intHI_type_node, 8);\n+  ptr_unsigned_V8HI_type_node\n+    = build_pointer_type (build_qualified_type (unsigned_V8HI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   unsigned_V4SI_type_node = rs6000_vector_type (\"__vector unsigned int\",\n \t\t\t\t       unsigned_intSI_type_node, 4);\n+  ptr_unsigned_V4SI_type_node\n+    = build_pointer_type (build_qualified_type (unsigned_V4SI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   unsigned_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n \t\t\t\t       ? \"__vector unsigned long\"\n \t\t\t\t       : \"__vector unsigned long long\",\n \t\t\t\t       long_long_unsigned_type_node, 2);\n+  ptr_unsigned_V2DI_type_node\n+    = build_pointer_type (build_qualified_type (unsigned_V2DI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n \n   opaque_V4SI_type_node = build_opaque_vector_type (intSI_type_node, 4);\n \n@@ -13336,9 +13375,15 @@ rs6000_init_builtins (void)\n     {\n       V1TI_type_node = rs6000_vector_type (\"__vector __int128\",\n \t\t\t\t\t   intTI_type_node, 1);\n+      ptr_V1TI_type_node\n+\t= build_pointer_type (build_qualified_type (V1TI_type_node,\n+\t\t\t\t\t\t    TYPE_QUAL_CONST));\n       unsigned_V1TI_type_node\n \t= rs6000_vector_type (\"__vector unsigned __int128\",\n \t\t\t      unsigned_intTI_type_node, 1);\n+      ptr_unsigned_V1TI_type_node\n+\t= build_pointer_type (build_qualified_type (unsigned_V1TI_type_node,\n+\t\t\t\t\t\t    TYPE_QUAL_CONST));\n     }\n \n   /* The 'vector bool ...' types must be kept distinct from 'vector unsigned ...'\n@@ -13372,6 +13417,76 @@ rs6000_init_builtins (void)\n   dfloat128_type_internal_node = dfloat128_type_node;\n   void_type_internal_node = void_type_node;\n \n+  ptr_intQI_type_node\n+    = build_pointer_type (build_qualified_type (intQI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_uintQI_type_node\n+    = build_pointer_type (build_qualified_type (uintQI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_intHI_type_node\n+    = build_pointer_type (build_qualified_type (intHI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_uintHI_type_node\n+    = build_pointer_type (build_qualified_type (uintHI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_intSI_type_node\n+    = build_pointer_type (build_qualified_type (intSI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_uintSI_type_node\n+    = build_pointer_type (build_qualified_type (uintSI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_intDI_type_node\n+    = build_pointer_type (build_qualified_type (intDI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_uintDI_type_node\n+    = build_pointer_type (build_qualified_type (uintDI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_intTI_type_node\n+    = build_pointer_type (build_qualified_type (intTI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_uintTI_type_node\n+    = build_pointer_type (build_qualified_type (uintTI_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n+  t = build_qualified_type (long_integer_type_internal_node, TYPE_QUAL_CONST);\n+  ptr_long_integer_type_node = build_pointer_type (t);\n+\n+  t = build_qualified_type (long_unsigned_type_internal_node, TYPE_QUAL_CONST);\n+  ptr_long_unsigned_type_node = build_pointer_type (t);\n+\n+  ptr_float_type_node\n+    = build_pointer_type (build_qualified_type (float_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_double_type_node\n+    = build_pointer_type (build_qualified_type (double_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  ptr_long_double_type_node\n+    = build_pointer_type (build_qualified_type (long_double_type_internal_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  if (dfloat64_type_node)\n+    {\n+      t = build_qualified_type (dfloat64_type_internal_node, TYPE_QUAL_CONST);\n+      ptr_dfloat64_type_node = build_pointer_type (t);\n+    }\n+  else\n+    ptr_dfloat64_type_node = NULL;\n+\n+  if (dfloat128_type_node)\n+    {\n+      t = build_qualified_type (dfloat128_type_internal_node, TYPE_QUAL_CONST);\n+      ptr_dfloat128_type_node = build_pointer_type (t);\n+    }\n+  else\n+    ptr_dfloat128_type_node = NULL;\n+\n+  t = build_qualified_type (long_long_integer_type_internal_node,\n+\t\t\t    TYPE_QUAL_CONST);\n+  ptr_long_long_integer_type_node  = build_pointer_type (t);\n+\n+  t = build_qualified_type (long_long_unsigned_type_internal_node,\n+\t\t\t    TYPE_QUAL_CONST);\n+  ptr_long_long_unsigned_type_node = build_pointer_type (t);\n+\n   /* 128-bit floating point support.  KFmode is IEEE 128-bit floating point.\n      IFmode is the IBM extended 128-bit format that is a pair of doubles.\n      TFmode will be either IEEE 128-bit floating point or the IBM double-double\n@@ -13399,15 +13514,17 @@ rs6000_init_builtins (void)\n \t  SET_TYPE_MODE (ibm128_float_type_node, IFmode);\n \t  layout_type (ibm128_float_type_node);\n \t}\n-\n+      t = build_qualified_type (ibm128_float_type_node, TYPE_QUAL_CONST);\n+      ptr_ibm128_float_type_node = build_pointer_type (t);\n       lang_hooks.types.register_builtin_type (ibm128_float_type_node,\n \t\t\t\t\t      \"__ibm128\");\n \n       if (TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128)\n \tieee128_float_type_node = long_double_type_node;\n       else\n \tieee128_float_type_node = float128_type_node;\n-\n+      t = build_qualified_type (ieee128_float_type_node, TYPE_QUAL_CONST);\n+      ptr_ieee128_float_type_node = build_pointer_type (t);\n       lang_hooks.types.register_builtin_type (ieee128_float_type_node,\n \t\t\t\t\t      \"__ieee128\");\n     }\n@@ -13427,6 +13544,8 @@ rs6000_init_builtins (void)\n       TYPE_USER_ALIGN (vector_pair_type_node) = 0;\n       lang_hooks.types.register_builtin_type (vector_pair_type_node,\n \t\t\t\t\t      \"__vector_pair\");\n+      t = build_qualified_type (vector_pair_type_node, TYPE_QUAL_CONST);\n+      ptr_vector_pair_type_node = build_pointer_type (t);\n \n       vector_quad_type_node = make_node (OPAQUE_TYPE);\n       SET_TYPE_MODE (vector_quad_type_node, XOmode);\n@@ -13437,6 +13556,8 @@ rs6000_init_builtins (void)\n       TYPE_USER_ALIGN (vector_quad_type_node) = 0;\n       lang_hooks.types.register_builtin_type (vector_quad_type_node,\n \t\t\t\t\t      \"__vector_quad\");\n+      t = build_qualified_type (vector_quad_type_node, TYPE_QUAL_CONST);\n+      ptr_vector_quad_type_node = build_pointer_type (t);\n     }\n \n   /* Initialize the modes for builtin_function_type, mapping a machine mode to\n@@ -13487,18 +13608,41 @@ rs6000_init_builtins (void)\n \n   bool_V16QI_type_node = rs6000_vector_type (\"__vector __bool char\",\n \t\t\t\t\t     bool_char_type_node, 16);\n+  ptr_bool_V16QI_type_node\n+    = build_pointer_type (build_qualified_type (bool_V16QI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   bool_V8HI_type_node = rs6000_vector_type (\"__vector __bool short\",\n \t\t\t\t\t    bool_short_type_node, 8);\n+  ptr_bool_V8HI_type_node\n+    = build_pointer_type (build_qualified_type (bool_V8HI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   bool_V4SI_type_node = rs6000_vector_type (\"__vector __bool int\",\n \t\t\t\t\t    bool_int_type_node, 4);\n+  ptr_bool_V4SI_type_node\n+    = build_pointer_type (build_qualified_type (bool_V4SI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   bool_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n \t\t\t\t\t    ? \"__vector __bool long\"\n \t\t\t\t\t    : \"__vector __bool long long\",\n \t\t\t\t\t    bool_long_long_type_node, 2);\n+  ptr_bool_V2DI_type_node\n+    = build_pointer_type (build_qualified_type (bool_V2DI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   bool_V1TI_type_node = rs6000_vector_type (\"__vector __bool __int128\",\n \t\t\t\t\t    intTI_type_node, 1);\n+  ptr_bool_V1TI_type_node\n+    = build_pointer_type (build_qualified_type (bool_V1TI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   pixel_V8HI_type_node = rs6000_vector_type (\"__vector __pixel\",\n \t\t\t\t\t     pixel_type_node, 8);\n+  ptr_pixel_V8HI_type_node\n+    = build_pointer_type (build_qualified_type (pixel_V8HI_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n   pcvoid_type_node\n     = build_pointer_type (build_qualified_type (void_type_node,\n \t\t\t\t\t\tTYPE_QUAL_CONST));"}, {"sha": "3eba1c072cf9e9721479db6cfa758b5f8951dda6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b7bf620cd4e610bb91b5d2ae5446a2b73b6308/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=19b7bf620cd4e610bb91b5d2ae5446a2b73b6308", "patch": "@@ -2461,6 +2461,47 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_vector_pair,\t /* unsigned 256-bit types (vector pair).  */\n   RS6000_BTI_vector_quad,\t /* unsigned 512-bit types (vector quad).  */\n   RS6000_BTI_const_ptr_void,     /* const pointer to void */\n+  RS6000_BTI_ptr_V16QI,\n+  RS6000_BTI_ptr_V1TI,\n+  RS6000_BTI_ptr_V2DI,\n+  RS6000_BTI_ptr_V2DF,\n+  RS6000_BTI_ptr_V4SI,\n+  RS6000_BTI_ptr_V4SF,\n+  RS6000_BTI_ptr_V8HI,\n+  RS6000_BTI_ptr_unsigned_V16QI,\n+  RS6000_BTI_ptr_unsigned_V1TI,\n+  RS6000_BTI_ptr_unsigned_V8HI,\n+  RS6000_BTI_ptr_unsigned_V4SI,\n+  RS6000_BTI_ptr_unsigned_V2DI,\n+  RS6000_BTI_ptr_bool_V16QI,\n+  RS6000_BTI_ptr_bool_V8HI,\n+  RS6000_BTI_ptr_bool_V4SI,\n+  RS6000_BTI_ptr_bool_V2DI,\n+  RS6000_BTI_ptr_bool_V1TI,\n+  RS6000_BTI_ptr_pixel_V8HI,\n+  RS6000_BTI_ptr_INTQI,\n+  RS6000_BTI_ptr_UINTQI,\n+  RS6000_BTI_ptr_INTHI,\n+  RS6000_BTI_ptr_UINTHI,\n+  RS6000_BTI_ptr_INTSI,\n+  RS6000_BTI_ptr_UINTSI,\n+  RS6000_BTI_ptr_INTDI,\n+  RS6000_BTI_ptr_UINTDI,\n+  RS6000_BTI_ptr_INTTI,\n+  RS6000_BTI_ptr_UINTTI,\n+  RS6000_BTI_ptr_long_integer,\n+  RS6000_BTI_ptr_long_unsigned,\n+  RS6000_BTI_ptr_float,\n+  RS6000_BTI_ptr_double,\n+  RS6000_BTI_ptr_long_double,\n+  RS6000_BTI_ptr_dfloat64,\n+  RS6000_BTI_ptr_dfloat128,\n+  RS6000_BTI_ptr_ieee128_float,\n+  RS6000_BTI_ptr_ibm128_float,\n+  RS6000_BTI_ptr_vector_pair,\n+  RS6000_BTI_ptr_vector_quad,\n+  RS6000_BTI_ptr_long_long,\n+  RS6000_BTI_ptr_long_long_unsigned,\n   RS6000_BTI_MAX\n };\n \n@@ -2517,6 +2558,47 @@ enum rs6000_builtin_type_index\n #define vector_pair_type_node\t\t (rs6000_builtin_types[RS6000_BTI_vector_pair])\n #define vector_quad_type_node\t\t (rs6000_builtin_types[RS6000_BTI_vector_quad])\n #define pcvoid_type_node\t\t (rs6000_builtin_types[RS6000_BTI_const_ptr_void])\n+#define ptr_V16QI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V16QI])\n+#define ptr_V1TI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V1TI])\n+#define ptr_V2DI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V2DI])\n+#define ptr_V2DF_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V2DF])\n+#define ptr_V4SI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V4SI])\n+#define ptr_V4SF_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V4SF])\n+#define ptr_V8HI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_V8HI])\n+#define ptr_unsigned_V16QI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_unsigned_V16QI])\n+#define ptr_unsigned_V1TI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_unsigned_V1TI])\n+#define ptr_unsigned_V8HI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_unsigned_V8HI])\n+#define ptr_unsigned_V4SI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_unsigned_V4SI])\n+#define ptr_unsigned_V2DI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_unsigned_V2DI])\n+#define ptr_bool_V16QI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_bool_V16QI])\n+#define ptr_bool_V8HI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_bool_V8HI])\n+#define ptr_bool_V4SI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_bool_V4SI])\n+#define ptr_bool_V2DI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_bool_V2DI])\n+#define ptr_bool_V1TI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_bool_V1TI])\n+#define ptr_pixel_V8HI_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_pixel_V8HI])\n+#define ptr_intQI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_INTQI])\n+#define ptr_uintQI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_UINTQI])\n+#define ptr_intHI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_INTHI])\n+#define ptr_uintHI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_UINTHI])\n+#define ptr_intSI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_INTSI])\n+#define ptr_uintSI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_UINTSI])\n+#define ptr_intDI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_INTDI])\n+#define ptr_uintDI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_UINTDI])\n+#define ptr_intTI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_INTTI])\n+#define ptr_uintTI_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_UINTTI])\n+#define ptr_long_integer_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_integer])\n+#define ptr_long_unsigned_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_unsigned])\n+#define ptr_float_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_float])\n+#define ptr_double_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_double])\n+#define ptr_long_double_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_double])\n+#define ptr_dfloat64_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_dfloat64])\n+#define ptr_dfloat128_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_dfloat128])\n+#define ptr_ieee128_float_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_ieee128_float])\n+#define ptr_ibm128_float_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_ibm128_float])\n+#define ptr_vector_pair_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_vector_pair])\n+#define ptr_vector_quad_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_vector_quad])\n+#define ptr_long_long_integer_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_long])\n+#define ptr_long_long_unsigned_type_node (rs6000_builtin_types[RS6000_BTI_ptr_long_long_unsigned])\n \n extern GTY(()) tree rs6000_builtin_types[RS6000_BTI_MAX];\n extern GTY(()) tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];"}]}