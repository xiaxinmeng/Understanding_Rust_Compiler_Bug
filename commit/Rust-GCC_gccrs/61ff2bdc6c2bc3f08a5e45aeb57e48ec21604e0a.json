{"sha": "61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmZjJiZGM2YzJiYzNmMDhhNWU0NWFlYjU3ZTQ4ZWMyMTYwNGUwYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-07-27T14:43:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-07-27T14:43:31Z"}, "message": "common.opt (o): Add MissingArgError.\n\n\t* common.opt (o): Add MissingArgError.\n\t* doc/options.texi (MissingArgError): Document.\n\t* hooks.c (hook_bool_constcharptr_size_t_false): Remove.\n\t* hooks.h (hook_bool_constcharptr_size_t_false): Remove.\n\t* langhooks-def.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n\t(LANG_HOOKS_INITIALIZER): Remove missing_argument hook\n\tinitializer.\n\t* langhooks.h (struct lang_hooks): Remove missing_argument.\n\t* optc-gen.awk: Handle MissingArgError and output new structure\n\tfield initializers.\n\t* opts.c (read_cmdline_option): Use missing_argument_error field\n\tinstead of missing_argument langhook.\n\t* opts.h (struct cl_option): Add missing_argument_error field.\n\t* system.h (LANG_HOOKS_MISSING_ARGUMENT): Poison.\n\nc-family:\n\t* c-common.h (c_common_missing_argument): Remove.\n\t* c-opts.c (c_common_missing_argument): Remove.\n\t* c.opt (A, D, F, I, MD, MMD, MQ, MT, U, fconstant-string-class=,\n\tidirafter, imacros, include, isysroot, isystem, iquote): Add\n\tMissingArgError.\n\t* c-objc-common.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n\ncp:\n\t* cp-objcp-common.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n\npo:\n\t* exgettext: Also extract MissingArgError texts from .opt files.\n\nFrom-SVN: r162571", "tree": {"sha": "8827f91fc9b3f24a4fdd5c851a07702213bfc0c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8827f91fc9b3f24a4fdd5c851a07702213bfc0c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e98bcaf2984720ac9be21d344e0240b3db6da07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e98bcaf2984720ac9be21d344e0240b3db6da07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e98bcaf2984720ac9be21d344e0240b3db6da07"}], "stats": {"total": 180, "additions": 84, "deletions": 96}, "files": [{"sha": "ddbe6cccb34248a3113215165a5cdf484d9ee910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,3 +1,20 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (o): Add MissingArgError.\n+\t* doc/options.texi (MissingArgError): Document.\n+\t* hooks.c (hook_bool_constcharptr_size_t_false): Remove.\n+\t* hooks.h (hook_bool_constcharptr_size_t_false): Remove.\n+\t* langhooks-def.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n+\t(LANG_HOOKS_INITIALIZER): Remove missing_argument hook\n+\tinitializer.\n+\t* langhooks.h (struct lang_hooks): Remove missing_argument.\n+\t* optc-gen.awk: Handle MissingArgError and output new structure\n+\tfield initializers.\n+\t* opts.c (read_cmdline_option): Use missing_argument_error field\n+\tinstead of missing_argument langhook.\n+\t* opts.h (struct cl_option): Add missing_argument_error field.\n+\t* system.h (LANG_HOOKS_MISSING_ARGUMENT): Poison.\n+\n 2010-07-27  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR target/29090"}, {"sha": "17bd6ab56f5f83e42b5bb18f03ca34af21c991eb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,3 +1,12 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (c_common_missing_argument): Remove.\n+\t* c-opts.c (c_common_missing_argument): Remove.\n+\t* c.opt (A, D, F, I, MD, MMD, MQ, MT, U, fconstant-string-class=,\n+\tidirafter, imacros, include, isysroot, isystem, iquote): Add\n+\tMissingArgError.\n+\t* c-objc-common.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (c_common_option_lang_mask,"}, {"sha": "b92fef8f04d4e3a1ba2a933bf5a87be6c9678dbc", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -659,7 +659,6 @@ extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);\n extern int c_common_handle_option (size_t code, const char *arg, int value, int kind);\n-extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);\n extern tree c_common_fixed_point_type_for_size (unsigned int, unsigned int,"}, {"sha": "38c996bfea034b59c7c9d9fc0a9509d6e3d3dea3", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -135,59 +135,6 @@ static struct deferred_opt\n static const unsigned int \n c_family_lang_mask = (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX);\n \n-/* Complain that switch CODE expects an argument but none was\n-   provided.  OPT was the command-line option.  Return FALSE to get\n-   the default message in opts.c, TRUE if we provide a specialized\n-   one.  */\n-bool\n-c_common_missing_argument (const char *opt, size_t code)\n-{\n-  switch (code)\n-    {\n-    default:\n-      /* Pick up the default message.  */\n-      return false;\n-\n-    case OPT_fconstant_string_class_:\n-      error (\"no class name specified with %qs\", opt);\n-      break;\n-\n-    case OPT_A:\n-      error (\"assertion missing after %qs\", opt);\n-      break;\n-\n-    case OPT_D:\n-    case OPT_U:\n-      error (\"macro name missing after %qs\", opt);\n-      break;\n-\n-    case OPT_F:\n-    case OPT_I:\n-    case OPT_idirafter:\n-    case OPT_isysroot:\n-    case OPT_isystem:\n-    case OPT_iquote:\n-      error (\"missing path after %qs\", opt);\n-      break;\n-\n-    case OPT_MF:\n-    case OPT_MD:\n-    case OPT_MMD:\n-    case OPT_include:\n-    case OPT_imacros:\n-    case OPT_o:\n-      error (\"missing filename after %qs\", opt);\n-      break;\n-\n-    case OPT_MQ:\n-    case OPT_MT:\n-      error (\"missing makefile target after %qs\", opt);\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n /* Defer option CODE with argument ARG.  */\n static void\n defer_opt (enum opt_code code, const char *arg)"}, {"sha": "9d23b3d6f00dcfb6c898b76dd5303b49f71e7292", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -38,7 +38,7 @@ ObjC++\n C ObjC C++ ObjC++ Joined Separate\n \n A\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(assertion missing after %qs)\n -A<question>=<answer>\tAssert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>\n \n C\n@@ -50,34 +50,34 @@ C ObjC C++ ObjC++\n Do not discard comments in macro expansions\n \n D\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(macro name missing after %qs)\n -D<macro>[=<val>]\tDefine a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1\n \n E\n C ObjC C++ ObjC++ Undocumented Var(flag_preprocess_only)\n \n F\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -F <dir>\tAdd <dir> to the end of the main framework include path\n \n H\n C ObjC C++ ObjC++\n Print the name of header files as they are used\n \n I\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -I <dir>\tAdd <dir> to the end of the main include path\n \n M\n C ObjC C++ ObjC++\n Generate make dependencies\n \n MD\n-C ObjC C++ ObjC++ Separate\n+C ObjC C++ ObjC++ Separate MissingArgError(missing filename after %qs)\n Generate make dependencies and compile\n \n MF\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)\n -MF <file>\tWrite dependency output to the given file\n \n MG\n@@ -89,27 +89,27 @@ C ObjC C++ ObjC++\n Like -M but ignore system header files\n \n MMD\n-C ObjC C++ ObjC++ Separate\n+C ObjC C++ ObjC++ Separate MissingArgError(missing filename after %qs)\n Like -MD but ignore system header files\n \n MP\n C ObjC C++ ObjC++\n Generate phony targets for all headers\n \n MQ\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)\n -MQ <target>\tAdd a MAKE-quoted target\n \n MT\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)\n -MT <target>\tAdd an unquoted target\n \n P\n C ObjC C++ ObjC++\n Do not generate #line directives\n \n U\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(macro name missing after %qs)\n -U<macro>\tUndefine <macro>\n \n Wabi\n@@ -564,7 +564,7 @@ C++ ObjC++ Var(flag_conserve_space)\n Reduce the size of object files\n \n fconstant-string-class=\n-ObjC ObjC++ Joined\n+ObjC ObjC++ Joined MissingArgError(no class name specified with %qs)\n -fconst-string-class=<name>\tUse class <name> for constant strings\n \n fdeduce-init-list\n@@ -886,35 +886,35 @@ C ObjC C++ ObjC++ Joined\n -femit-struct-debug-detailed=<spec-list>\tDetailed reduced debug info for structs\n \n idirafter\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -idirafter <dir>\tAdd <dir> to the end of the system include path\n \n imacros\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)\n -imacros <file>\tAccept definition of macros in <file>\n \n imultilib\n C ObjC C++ ObjC++ Joined Separate\n -imultilib <dir>\tSet <dir> to be the multilib include subdirectory\n \n include\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)\n -include <file>\tInclude the contents of <file> before other files\n \n iprefix\n C ObjC C++ ObjC++ Joined Separate\n -iprefix <path>\tSpecify <path> as a prefix for next two options\n \n isysroot\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -isysroot <dir>\tSet <dir> to be the system root directory\n \n isystem\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -isystem <dir>\tAdd <dir> to the start of the system include path\n \n iquote\n-C ObjC C++ ObjC++ Joined Separate\n+C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -iquote <dir>\tAdd <dir> to the end of the quote include path\n \n iwithprefix"}, {"sha": "4bc5bb38a2acb410840728bba32f1ecc631d4263", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -39,8 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS c_initialize_diagnostics\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n-#undef LANG_HOOKS_MISSING_ARGUMENT\n-#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "59ab3b1b341261c710d21c3f2224da2aa28eebca", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1584,7 +1584,7 @@ Common Joined Var(plugindir_string) Init(0)\n -iplugindir=<dir>\tSet <dir> to be the default plugin directory\n \n o\n-Common Joined Separate\n+Common Joined Separate MissingArgError(missing filename after %qs)\n -o <file>\tPlace output into <file>\n \n p"}, {"sha": "35416869926a656af0b42e02f1e09e164d1cbcc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,3 +1,7 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_MISSING_ARGUMENT): Remove.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cp-objcp-common.c (cxx_initialize_diagnostics): First call"}, {"sha": "2391faf2239e5f3c25656ec66364f92e98336d74", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -53,8 +53,6 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_HANDLE_FILENAME\n #define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n-#undef LANG_HOOKS_MISSING_ARGUMENT\n-#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "b14b2b497fa660c2ccaf9dae59337a3c0c2c07b9", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -135,6 +135,14 @@ it will be part of the same @code{argv} entry as the option itself.\n \n This property cannot be used alongside @code{Joined} or @code{Separate}.\n \n+@item MissingArgError(@var{message})\n+For an option marked @code{Joined} or @code{Separate}, the message\n+@var{message} will be used as an error message if the mandatory\n+argument is missing; for options without @code{MissingArgError}, a\n+generic error message is used.  @var{message} should contain a single\n+@samp{%qs} format, which will be used to format the name of the option\n+passed.\n+\n @item UInteger\n The option's argument is a non-negative integer.  The option parser\n will check and convert the argument before passing it to the relevant"}, {"sha": "94d045f037047bdb303a5b2ec8b64d8d7ac41ec8", "filename": "gcc/hooks.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -118,13 +118,6 @@ hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree a ATTRIBUTE_UNUSED,\n   return true;\n }\n \n-bool\n-hook_bool_constcharptr_size_t_false (const char *a ATTRIBUTE_UNUSED,\n-\t\t\t\t     size_t b ATTRIBUTE_UNUSED)\n-{\n-  return false;\n-}\n-\n bool\n hook_bool_size_t_constcharptr_int_true (size_t a ATTRIBUTE_UNUSED,\n \t\t\t\t\tconst char *b ATTRIBUTE_UNUSED,"}, {"sha": "52e4d84ce78a019b06441155dcc621e189dbaf30", "filename": "gcc/hooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -48,7 +48,6 @@ extern bool hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree,\n extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_bool_false (rtx, int, int, int *, bool);\n-extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n extern bool hook_bool_size_t_constcharptr_int_true (size_t, const char *, int);\n extern bool hook_bool_tree_tree_false (tree, tree);\n extern bool hook_bool_tree_tree_true (tree, tree);"}, {"sha": "1b7cebfb10ea2268f57603188fad7e114aa86997", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -90,7 +90,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n #define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n-#define LANG_HOOKS_MISSING_ARGUMENT\thook_bool_constcharptr_size_t_false\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_MISSING_NORETURN_OK_P hook_bool_tree_true\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n@@ -268,7 +267,6 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_INITIALIZE_DIAGNOSTICS, \\\n   LANG_HOOKS_COMPLAIN_WRONG_LANG_P, \\\n   LANG_HOOKS_HANDLE_OPTION, \\\n-  LANG_HOOKS_MISSING_ARGUMENT, \\\n   LANG_HOOKS_POST_OPTIONS, \\\n   LANG_HOOKS_INIT, \\\n   LANG_HOOKS_FINISH, \\"}, {"sha": "6c9f80dec4b8d387b110a90dc20a5efca922d06d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -298,10 +298,6 @@ struct lang_hooks\n      valid and should not be treated as language-independent too.  */\n   int (*handle_option) (size_t code, const char *arg, int value, int kind);\n \n-  /* Return false to use the default complaint about a missing\n-     argument, otherwise output a complaint and return true.  */\n-  bool (*missing_argument) (const char *opt, size_t code);\n-\n   /* Called when all command line options have been parsed to allow\n      further processing and initialization\n "}, {"sha": "78741fc8743e8a29ed2e8e374a27ee2d355e849c", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -194,6 +194,12 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\thlp = quote help[i] quote;\n \n+\tmissing_arg_error = opt_args(\"MissingArgError\", flags[i])\n+\tif (missing_arg_error == \"\")\n+\t\tmissing_arg_error = \"0\"\n+\telse\n+\t\tmissing_arg_error = quote missing_arg_error quote\n+\n \tneg = opt_args(\"Negative\", flags[i]);\n \tif (neg != \"\")\n \t\tidx = indices[neg]\n@@ -209,8 +215,9 @@ for (i = 0; i < n_opts; i++) {\n \t}\n \t# Split the printf after %u to work around an ia64-hp-hpux11.23\n \t# awk bug.\n-\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s, %u,\",\n-\t       quote, opts[i], quote, hlp, back_chain[i], len)\n+\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s,\\n    %s, %u,\",\n+\t       quote, opts[i], quote, hlp, missing_arg_error,\n+\t       back_chain[i], len)\n \tprintf(\" %d,\\n\", idx)\n \tcondition = opt_args(\"Condition\", flags[i])\n \tcl_flags = switch_flags(flags[i])"}, {"sha": "12eb40a451a4855c2c19d1c2a0a40783f31b1b09", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -547,7 +547,9 @@ read_cmdline_option (struct cl_decoded_option *decoded,\n \n   if (decoded->errors & CL_ERR_MISSING_ARG)\n     {\n-      if (!lang_hooks.missing_argument (opt, decoded->opt_index))\n+      if (option->missing_argument_error)\n+\terror (option->missing_argument_error, opt);\n+      else\n \terror (\"missing argument to %qs\", opt);\n       return;\n     }"}, {"sha": "674843a9497be67a33defb994a272c419bcf777e", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -44,6 +44,7 @@ struct cl_option\n {\n   const char *opt_text;\n   const char *help;\n+  const char *missing_argument_error;\n   unsigned short back_chain;\n   unsigned char opt_len;\n   int neg_index;"}, {"sha": "75200f86d36eabc479820be9f04898976d67bd7f", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,3 +1,7 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* exgettext: Also extract MissingArgError texts from .opt files.\n+\n 2010-06-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR other/44034"}, {"sha": "c3d92448f980f82de35b018824a3f5ff79fbefb1", "filename": "gcc/po/exgettext", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -1,6 +1,6 @@\n #! /bin/sh\n # Wrapper around gettext for programs using the msgid convention.\n-# Copyright 1998, 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+# Copyright 1998, 2001, 2002, 2003, 2009, 2010 Free Software Foundation, Inc.\n \n # Written by Paul Eggert <eggert@twinsun.com>.\n # Revised by Zack Weinberg <zackw@stanford.edu> for no-POTFILES operation.\n@@ -223,6 +223,13 @@ echo \"scanning option files...\" >&2\n \tif (/^[ \\t]*(;|$)/ || !/^[^ \\t]/) {\n \t    field = 0\n \t} else {\n+\t    if ((field == 1) && /MissingArgError/) {\n+\t\tline = $0\n+\t\tsub(\".*MissingArgError\\\\(\", \"\", line)\n+\t\tsub(\"\\\\).*\", \"\", line)\n+\t\tprintf(\"#line %d \\\"%s\\\"\\n\", lineno, file)\n+\t\tprintf(\"_(\\\"%s\\\")\\n\", line)\n+\t    }\n \t    if (field == 2) {\n \t\tline = $0\n \t\tprintf(\"#line %d \\\"%s\\\"\\n\", lineno, file)"}, {"sha": "a5cfababa6dffb2c90adfb2d5ab1c06ad30d8a37", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=61ff2bdc6c2bc3f08a5e45aeb57e48ec21604e0a", "patch": "@@ -779,7 +779,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLANG_HOOKS_PUSHLEVEL LANG_HOOKS_SET_BLOCK \\\n \tLANG_HOOKS_MAYBE_BUILD_CLEANUP LANG_HOOKS_UPDATE_DECL_AFTER_SAVING \\\n \tLANG_HOOKS_POPLEVEL LANG_HOOKS_TRUTHVALUE_CONVERSION \\\n-\tTARGET_PROMOTE_FUNCTION_ARGS TARGET_PROMOTE_FUNCTION_RETURN\n+\tTARGET_PROMOTE_FUNCTION_ARGS TARGET_PROMOTE_FUNCTION_RETURN \\\n+\tLANG_HOOKS_MISSING_ARGUMENT\n \n /* Miscellaneous macros that are no longer used.  */\n  #pragma GCC poison USE_MAPPED_LOCATION"}]}