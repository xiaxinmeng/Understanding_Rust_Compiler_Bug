{"sha": "2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlZTM1NWI1YTc3YzYwZTNjNDMyOTRlZTk0NjlhMzVhNWI5NWE5Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-28T19:38:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-28T19:38:56Z"}, "message": "i386.md (<mode>_ldx): Do not zero-extend non-Pmode operand 2 here.\n\n\t* config/i386/i386.md (<mode>_ldx): Do not zero-extend non-Pmode\n\toperand 2 here.  Use copy_addr_to_reg to copy non-index\n\tregister operand 2 to a temporary.\n\t(<mode>_stx): Ditto for operand 1.\n\t(*<mode>_ldx, *<mode>_stx): Remove enclosing parallel.\n\t* config/i386/i386.c (ix86_load_bounds): Zero-extend non-Pmode ptr here.\n\t(ix86_store_bounds): Ditto.\n\nFrom-SVN: r225105", "tree": {"sha": "6f655a593f083f68013ec74d5ca7b80b22f0801d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f655a593f083f68013ec74d5ca7b80b22f0801d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aee355b5a77c60e3c43294ee9469a35a5b95a9c/comments", "author": null, "committer": null, "parents": [{"sha": "cb78dd578a50dd0815b7cb4f9f483e4dff91aa6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb78dd578a50dd0815b7cb4f9f483e4dff91aa6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb78dd578a50dd0815b7cb4f9f483e4dff91aa6a"}], "stats": {"total": 172, "additions": 82, "deletions": 90}, "files": [{"sha": "95986006ec8a7435f2c05dc412e4272ee2830ab9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aee355b5a77c60e3c43294ee9469a35a5b95a9c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aee355b5a77c60e3c43294ee9469a35a5b95a9c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "patch": "@@ -8886,9 +8886,8 @@ ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n     for (i = cum->regno; i < max; i++)\n       {\n \trtx addr = plus_constant (Pmode, save_area, i * UNITS_PER_WORD);\n-\trtx reg = gen_rtx_REG (DImode,\n+\trtx ptr = gen_rtx_REG (Pmode,\n \t\t\t       x86_64_int_parameter_registers[i]);\n-\trtx ptr = reg;\n \trtx bounds;\n \n \tif (bnd_reg <= LAST_BND_REG)\n@@ -40344,6 +40343,9 @@ ix86_load_bounds (rtx slot, rtx ptr, rtx slot_no)\n       ptr = copy_addr_to_reg (slot);\n     }\n \n+  if (!register_operand (ptr, Pmode))\n+    ptr = ix86_zero_extend_to_Pmode (ptr);\n+\n   emit_insn (BNDmode == BND64mode\n \t     ? gen_bnd64_ldx (reg, addr, ptr)\n \t     : gen_bnd32_ldx (reg, addr, ptr));\n@@ -40378,6 +40380,9 @@ ix86_store_bounds (rtx ptr, rtx slot, rtx bounds, rtx slot_no)\n       ptr = copy_addr_to_reg (slot);\n     }\n \n+  if (!register_operand (ptr, Pmode))\n+    ptr = ix86_zero_extend_to_Pmode (ptr);\n+\n   gcc_assert (POINTER_BOUNDS_MODE_P (GET_MODE (bounds)));\n   if (!register_operand (bounds, BNDmode))\n     bounds = copy_to_mode_reg (BNDmode, bounds);"}, {"sha": "25935818ac9618337aa0e9988a3565fd503b64ec", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 75, "deletions": 88, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aee355b5a77c60e3c43294ee9469a35a5b95a9c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aee355b5a77c60e3c43294ee9469a35a5b95a9c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2aee355b5a77c60e3c43294ee9469a35a5b95a9c", "patch": "@@ -18950,160 +18950,147 @@\n \n (define_expand \"<mode>_mk\"\n   [(set (match_operand:BND 0 \"register_operand\")\n-    (unspec:BND\n-      [(mem:<bnd_ptr>\n-       (match_par_dup 3\n-        [(match_operand:<bnd_ptr> 1 \"register_operand\")\n-\t (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\")]))]\n-      UNSPEC_BNDMK))]\n+\t(unspec:BND\n+\t  [(mem:<bnd_ptr>\n+\t   (match_par_dup 3\n+\t     [(match_operand:<bnd_ptr> 1 \"register_operand\")\n+\t      (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\")]))]\n+\t  UNSPEC_BNDMK))]\n   \"TARGET_MPX\"\n {\n   operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1],\n \t\t\t\t\t\t  operands[2]),\n-                                UNSPEC_BNDMK_ADDR);\n+\t\t\t\tUNSPEC_BNDMK_ADDR);\n })\n \n (define_insn \"*<mode>_mk\"\n   [(set (match_operand:BND 0 \"register_operand\" \"=w\")\n-    (unspec:BND\n-      [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-        [(unspec:<bnd_ptr>\n-\t   [(match_operand:<bnd_ptr> 1 \"register_operand\" \"r\")\n-            (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\" \"Tb\")]\n-\t   UNSPEC_BNDMK_ADDR)])]\n-      UNSPEC_BNDMK))]\n+\t(unspec:BND\n+\t  [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n+\t     [(unspec:<bnd_ptr>\n+\t\t[(match_operand:<bnd_ptr> 1 \"register_operand\" \"r\")\n+\t\t (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\" \"Tb\")]\n+\t        UNSPEC_BNDMK_ADDR)])]\n+\t  UNSPEC_BNDMK))]\n   \"TARGET_MPX\"\n   \"bndmk\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"mpxmk\")])\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:BND 0 \"general_operand\")\n-        (match_operand:BND 1 \"general_operand\"))]\n+\t(match_operand:BND 1 \"general_operand\"))]\n   \"TARGET_MPX\"\n-{\n-  ix86_expand_move (<MODE>mode, operands);DONE;\n-})\n+  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*mov<mode>_internal_mpx\"\n   [(set (match_operand:BND 0 \"nonimmediate_operand\" \"=w,m\")\n-        (match_operand:BND 1 \"general_operand\" \"wm,w\"))]\n+\t(match_operand:BND 1 \"general_operand\" \"wm,w\"))]\n   \"TARGET_MPX\"\n   \"bndmov\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mpxmov\")])\n \n (define_expand \"<mode>_<bndcheck>\"\n-  [(parallel [(unspec [(match_operand:BND 0 \"register_operand\")\n-                       (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\")] BNDCHECK)\n-              (set (match_dup 2)\n-                   (unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))])]\n+  [(parallel\n+     [(unspec\n+\t[(match_operand:BND 0 \"register_operand\")\n+\t (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\")] BNDCHECK)\n+      (set (match_dup 2)\n+\t   (unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))])]\n   \"TARGET_MPX\"\n {\n   operands[2] = gen_rtx_MEM (BLKmode, operands[1]);\n   MEM_VOLATILE_P (operands[2]) = 1;\n })\n \n (define_insn \"*<mode>_<bndcheck>\"\n-  [(parallel [(unspec [(match_operand:BND 0 \"register_operand\" \"w\")\n-                       (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\" \"Ts\")] BNDCHECK)\n-              (set (match_operand:BLK 2 \"bnd_mem_operator\")\n-                   (unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))])]\n+  [(unspec\n+     [(match_operand:BND 0 \"register_operand\" \"w\")\n+      (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\" \"Ts\")] BNDCHECK)\n+   (set (match_operand:BLK 2 \"bnd_mem_operator\")\n+\t(unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))]\n   \"TARGET_MPX\"\n   \"bnd<bndcheck>\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"mpxchk\")])\n \n (define_expand \"<mode>_ldx\"\n-  [(parallel [(set (match_operand:BND 0 \"register_operand\")\n-                   (unspec:BND\n-\t\t     [(mem:<bnd_ptr>\n-\t\t       (match_par_dup 3\n-\t\t\t [(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\")\n-\t\t\t  (match_operand:<bnd_ptr> 2 \"register_operand\")]))]\n-\t\t     UNSPEC_BNDLDX))\n-              (use (mem:BLK (match_dup 1)))])]\n+  [(parallel\n+     [(set (match_operand:BND 0 \"register_operand\")\n+\t   (unspec:BND\n+\t     [(mem:<bnd_ptr>\n+\t\t(match_par_dup 3\n+\t\t  [(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\")\n+\t\t   (match_operand:<bnd_ptr> 2 \"register_operand\")]))]\n+\t     UNSPEC_BNDLDX))\n+      (use (mem:BLK (match_dup 1)))])]\n   \"TARGET_MPX\"\n {\n-  /* Avoid registers which connot be used as index.  */\n+  /* Avoid registers which cannot be used as index.  */\n   if (!index_register_operand (operands[2], Pmode))\n-    {\n-      rtx temp = gen_reg_rtx (Pmode);\n-      emit_move_insn (temp, operands[2]);\n-      operands[2] = temp;\n-    }\n-\n-  /* If it was a register originally then it may have\n-     mode other than Pmode.  We need to extend in such\n-     case because bndldx may work only with Pmode regs.  */\n-  if (GET_MODE (operands[2]) != Pmode)\n-    operands[2] = ix86_zero_extend_to_Pmode (operands[2]);\n+    operands[2] = copy_addr_to_reg (operands[2]);\n \n   operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1],\n-                                                  operands[2]),\n+\t\t\t\t\t\t  operands[2]),\n \t\t\t\tUNSPEC_BNDLDX_ADDR);\n })\n \n (define_insn \"*<mode>_ldx\"\n-  [(parallel [(set (match_operand:BND 0 \"register_operand\" \"=w\")\n-\t\t   (unspec:BND\n-\t\t     [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-\t\t       [(unspec:<bnd_ptr>\n-\t\t\t [(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\" \"Ti\")\n-\t\t\t  (match_operand:<bnd_ptr> 2 \"register_operand\" \"l\")]\n-\t\t\tUNSPEC_BNDLDX_ADDR)])]\n-\t\t     UNSPEC_BNDLDX))\n-              (use (mem:BLK (match_dup 1)))])]\n+  [(set (match_operand:BND 0 \"register_operand\" \"=w\")\n+\t(unspec:BND\n+\t  [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n+\t     [(unspec:<bnd_ptr>\n+\t\t[(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\" \"Ti\")\n+\t\t (match_operand:<bnd_ptr> 2 \"register_operand\" \"l\")]\n+\t\tUNSPEC_BNDLDX_ADDR)])]\n+\t  UNSPEC_BNDLDX))\n+   (use (mem:BLK (match_dup 1)))]\n   \"TARGET_MPX\"\n   \"bndldx\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"mpxld\")])\n \n (define_expand \"<mode>_stx\"\n-  [(parallel [(unspec [(mem:<bnd_ptr>\n-\t\t\t (match_par_dup 3\n-\t\t\t   [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\")\n-\t                    (match_operand:<bnd_ptr> 1 \"register_operand\")]))\n-\t               (match_operand:BND 2 \"register_operand\")] UNSPEC_BNDSTX)\n-              (set (match_dup 4)\n-                   (unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))])]\n+  [(parallel\n+     [(unspec\n+\t[(mem:<bnd_ptr>\n+\t   (match_par_dup 3\n+\t     [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\")\n+\t      (match_operand:<bnd_ptr> 1 \"register_operand\")]))\n+\t (match_operand:BND 2 \"register_operand\")]\n+\tUNSPEC_BNDSTX)\n+      (set (match_dup 4)\n+\t   (unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))])]\n   \"TARGET_MPX\"\n {\n-  /* Avoid registers which connot be used as index.  */\n+  /* Avoid registers which cannot be used as index.  */\n   if (!index_register_operand (operands[1], Pmode))\n-    {\n-      rtx temp = gen_reg_rtx (Pmode);\n-      emit_move_insn (temp, operands[1]);\n-      operands[1] = temp;\n-    }\n-\n-  /* If it was a register originally then it may have\n-     mode other than Pmode.  We need to extend in such\n-     case because bndstx may work only with Pmode regs.  */\n-  if (GET_MODE (operands[1]) != Pmode)\n-    operands[1] = ix86_zero_extend_to_Pmode (operands[1]);\n+    operands[1] = copy_addr_to_reg (operands[1]);\n \n   operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[0],\n-                                                  operands[1]),\n+\t\t\t\t\t\t  operands[1]),\n \t\t\t\tUNSPEC_BNDLDX_ADDR);\n   operands[4] = gen_rtx_MEM (BLKmode, operands[0]);\n   MEM_VOLATILE_P (operands[4]) = 1;\n })\n \n (define_insn \"*<mode>_stx\"\n-  [(parallel [(unspec [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-\t\t\t [(unspec:<bnd_ptr>\n-\t\t\t  [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\" \"Ti\")\n-\t                   (match_operand:<bnd_ptr> 1 \"register_operand\" \"l\")]\n-\t\t\t UNSPEC_BNDLDX_ADDR)])\n-\t               (match_operand:BND 2 \"register_operand\" \"w\")] UNSPEC_BNDSTX)\n-              (set (match_operand:BLK 4 \"bnd_mem_operator\")\n-                   (unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))])]\n+  [(unspec\n+     [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n+\t[(unspec:<bnd_ptr>\n+\t   [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\" \"Ti\")\n+\t    (match_operand:<bnd_ptr> 1 \"register_operand\" \"l\")]\n+\t   UNSPEC_BNDLDX_ADDR)])\n+\t (match_operand:BND 2 \"register_operand\" \"w\")]\n+\tUNSPEC_BNDSTX)\n+   (set (match_operand:BLK 4 \"bnd_mem_operator\")\n+\t(unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))]\n   \"TARGET_MPX\"\n   \"bndstx\\t{%2, %3|%3, %2}\"\n   [(set_attr \"type\" \"mpxst\")])\n \n (define_insn \"move_size_reloc_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-       (unspec:SWI48\n-        [(match_operand:SWI48 1 \"symbol_operand\")]\n-        UNSPEC_SIZEOF))]\n+\t(unspec:SWI48\n+\t  [(match_operand:SWI48 1 \"symbol_operand\")]\n+\tUNSPEC_SIZEOF))]\n   \"TARGET_MPX\"\n {\n   if (x86_64_immediate_size_operand (operands[1], VOIDmode))"}]}