{"sha": "f70b01165e6d392a110cb963060ea2a17feebbb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwYjAxMTY1ZTZkMzkyYTExMGNiOTYzMDYwZWEyYTE3ZmVlYmJiNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2018-05-25T09:05:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-25T09:05:10Z"}, "message": "[Ada] Remove \"constant\" attribute on Osint.Unknown_Attributes\n\n2018-05-25  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Convert_To_Positional): Bump default for\n\tMax_Others_Replicate to 32. Update comments.\n\t* osint.ads (Unknown_Attributes): No longer pretend this is a constant.\n\t(No_File_Info_Cache): Initialize separately.\n\t* osint.adb (No_File_Info_Cache): Update initializer.\n\nFrom-SVN: r260739", "tree": {"sha": "5c2f3d6b54fc265a1b33e5fc8530d0c42dcfdb09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2f3d6b54fc265a1b33e5fc8530d0c42dcfdb09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70b01165e6d392a110cb963060ea2a17feebbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70b01165e6d392a110cb963060ea2a17feebbb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70b01165e6d392a110cb963060ea2a17feebbb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70b01165e6d392a110cb963060ea2a17feebbb7/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25409c3c63b151f27bd77fb92c8b62af8681d777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25409c3c63b151f27bd77fb92c8b62af8681d777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25409c3c63b151f27bd77fb92c8b62af8681d777"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "ec7bee63a65f6efaeac16f154b5b0e62f5e8416d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f70b01165e6d392a110cb963060ea2a17feebbb7", "patch": "@@ -1,3 +1,11 @@\n+2018-05-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Convert_To_Positional): Bump default for\n+\tMax_Others_Replicate to 32. Update comments.\n+\t* osint.ads (Unknown_Attributes): No longer pretend this is a constant.\n+\t(No_File_Info_Cache): Initialize separately.\n+\t* osint.adb (No_File_Info_Cache): Update initializer.\n+\n 2018-05-25  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_res.adb (Resolve_Membership_Op): Allow the use of the membership"}, {"sha": "f045e3fe4252afa271fa45094e395e1d501e9bb4", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f70b01165e6d392a110cb963060ea2a17feebbb7", "patch": "@@ -284,14 +284,14 @@ package body Exp_Aggr is\n \n    procedure Convert_To_Positional\n      (N                    : Node_Id;\n-      Max_Others_Replicate : Nat     := 5;\n+      Max_Others_Replicate : Nat     := 32;\n       Handle_Bit_Packed    : Boolean := False);\n    --  If possible, convert named notation to positional notation. This\n    --  conversion is possible only in some static cases. If the conversion is\n    --  possible, then N is rewritten with the analyzed converted aggregate.\n    --  The parameter Max_Others_Replicate controls the maximum number of\n    --  values corresponding to an others choice that will be converted to\n-   --  positional notation (the default of 5 is the normal limit, and reflects\n+   --  positional notation (the default of 32 is the normal limit, and reflects\n    --  the fact that normally the loop is better than a lot of separate\n    --  assignments). Note that this limit gets overridden in any case if\n    --  either of the restrictions No_Elaboration_Code or No_Implicit_Loops is\n@@ -301,11 +301,6 @@ package body Exp_Aggr is\n    --  Packed_Array_Aggregate_Handled, we set this parameter to True, since\n    --  these are cases we handle in there.\n \n-   --  It would seem useful to have a higher default for Max_Others_Replicate,\n-   --  but aggregates in the compiler make this impossible: the compiler\n-   --  bootstrap fails if Max_Others_Replicate is greater than 25. This\n-   --  is unexpected ???\n-\n    procedure Expand_Array_Aggregate (N : Node_Id);\n    --  This is the top-level routine to perform array aggregate expansion.\n    --  N is the N_Aggregate node to be expanded.\n@@ -4296,7 +4291,7 @@ package body Exp_Aggr is\n \n    procedure Convert_To_Positional\n      (N                    : Node_Id;\n-      Max_Others_Replicate : Nat     := 5;\n+      Max_Others_Replicate : Nat     := 32;\n       Handle_Bit_Packed    : Boolean := False)\n    is\n       Typ : constant Entity_Id := Etype (N);"}, {"sha": "896fbc7ee3752f79add41e1c11ff8fa39729e31e", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=f70b01165e6d392a110cb963060ea2a17feebbb7", "patch": "@@ -250,8 +250,7 @@ package body Osint is\n       Attr : aliased File_Attributes;\n    end record;\n \n-   No_File_Info_Cache : constant File_Info_Cache :=\n-                          (No_File, Unknown_Attributes);\n+   No_File_Info_Cache : constant File_Info_Cache := (No_File, (others => 0));\n \n    package File_Name_Hash_Table is new GNAT.HTable.Simple_HTable (\n      Header_Num => File_Hash_Num,"}, {"sha": "6c75b5214562f21a6ea538181f4106ebd1624678", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70b01165e6d392a110cb963060ea2a17feebbb7/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=f70b01165e6d392a110cb963060ea2a17feebbb7", "patch": "@@ -255,10 +255,26 @@ package Osint is\n    --  from the disk and then cached in the File_Attributes parameter (possibly\n    --  along with other values).\n \n-   type File_Attributes is private;\n-   Unknown_Attributes : constant File_Attributes;\n+   File_Attributes_Size : constant Natural := 32;\n+   --  This should be big enough to fit a \"struct file_attributes\" on any\n+   --  system. It doesn't cause any malfunction if it is too big (which avoids\n+   --  the need for either mapping the struct exactly or importing the sizeof\n+   --  from C, which would result in dynamic code). However, it does waste\n+   --  space (e.g. when a component of this type appears in a record, if it is\n+   --  unnecessarily large). Note: for runtime units, use System.OS_Constants.\n+   --  SIZEOF_struct_file_attributes instead, which has the exact value.\n+\n+   type File_Attributes is\n+     array (1 .. File_Attributes_Size)\n+       of System.Storage_Elements.Storage_Element;\n+   for File_Attributes'Alignment use Standard'Maximum_Alignment;\n+\n+   Unknown_Attributes : File_Attributes;\n    --  A cache for various attributes for a file (length, accessibility,...)\n-   --  This must be initialized to Unknown_Attributes prior to the first call.\n+   --  Will be initialized properly at elaboration (for efficiency later on,\n+   --  avoid function calls every time we want to reset the attributes) prior\n+   --  to the first usage. We cannot make it constant since the compiler may\n+   --  put it in a read-only section.\n \n    function Is_Directory\n      (Name : C_File_Name;\n@@ -754,22 +770,4 @@ private\n    --  detected, the file being written is deleted, and a fatal error is\n    --  signalled.\n \n-   File_Attributes_Size : constant Natural := 32;\n-   --  This should be big enough to fit a \"struct file_attributes\" on any\n-   --  system. It doesn't cause any malfunction if it is too big (which avoids\n-   --  the need for either mapping the struct exactly or importing the sizeof\n-   --  from C, which would result in dynamic code). However, it does waste\n-   --  space (e.g. when a component of this type appears in a record, if it is\n-   --  unnecessarily large). Note: for runtime units, use System.OS_Constants.\n-   --  SIZEOF_struct_file_attributes instead, which has the exact value.\n-\n-   type File_Attributes is\n-     array (1 .. File_Attributes_Size)\n-       of System.Storage_Elements.Storage_Element;\n-   for File_Attributes'Alignment use Standard'Maximum_Alignment;\n-\n-   Unknown_Attributes : constant File_Attributes := (others => 0);\n-   --  Will be initialized properly at elaboration (for efficiency later on,\n-   --  avoid function calls every time we want to reset the attributes).\n-\n end Osint;"}]}