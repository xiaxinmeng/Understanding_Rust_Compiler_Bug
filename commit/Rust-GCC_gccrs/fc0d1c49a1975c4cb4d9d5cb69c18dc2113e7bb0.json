{"sha": "fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwZDFjNDlhMTk3NWM0Y2I0ZDlkNWNiNjljMThkYzIxMTNlN2JiMA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-17T19:57:14Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-17T19:57:14Z"}, "message": "predicates.md (reg_or_mem_operand): Pair up match_code \"mem\" with match_test \"macho_lo_sum_memory_operand\".\n\n\t* config/rs6000/predicates.md (reg_or_mem_operand): Pair up\n\tmatch_code \"mem\" with match_test \"macho_lo_sum_memory_operand\".\n\nFrom-SVN: r109835", "tree": {"sha": "bbe6d15e0457f11b91a1a4b29e565d2ec158b137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe6d15e0457f11b91a1a4b29e565d2ec158b137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0/comments", "author": null, "committer": null, "parents": [{"sha": "badb0b073471d32b94f57fcce96d94827a25f8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badb0b073471d32b94f57fcce96d94827a25f8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/badb0b073471d32b94f57fcce96d94827a25f8a0"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "eb684fbe8ffe3626f20764386507204f221966b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "patch": "@@ -1,3 +1,8 @@\n+2006-01-18  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config/rs6000/predicates.md (reg_or_mem_operand): Pair up\n+\tmatch_code \"mem\" with match_test \"macho_lo_sum_memory_operand\".\n+\n 2006-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/25682\n@@ -161,9 +166,9 @@\n \t* config/m68k/m68k.c (output_move_const_into_data_reg):\n \tOutput correct mnemonic for mvz and mvs.\n \n-2006-01-16  Gabor Loki <loki@gcc.gnu.org>\n+2006-01-16  Gabor Loki  <loki@gcc.gnu.org>\n \n-\t* rtl-factoring.c : Add sequence abstraction algorithm.\n+\t* rtl-factoring.c: Add sequence abstraction algorithm.\n \t* cfgcleanup.c (outgoing_edges_match): Extra checks.\n \t(try_crossjump_to_edge): Avoid deleting preserve label when redirecting\n \tABNORMAL edges."}, {"sha": "8d24d8f74c58f853da6778e7c6846b173da7b8d0", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=fc0d1c49a1975c4cb4d9d5cb69c18dc2113e7bb0", "patch": "@@ -620,11 +620,11 @@\n \n ;; Return 1 if the operand is a general non-special register or memory operand.\n (define_predicate \"reg_or_mem_operand\"\n-  (if_then_else (match_code \"mem\")\n      (ior (match_operand 0 \"memory_operand\")\n-\t  (ior (match_test \"macho_lo_sum_memory_operand (op, mode)\")\n-\t       (match_operand 0 \"volatile_mem_operand\")))\n-     (match_operand 0 \"gpc_reg_operand\")))\n+\t  (ior (and (match_code \"mem\")\n+\t\t    (match_test \"macho_lo_sum_memory_operand (op, mode)\"))\n+\t       (ior (match_operand 0 \"volatile_mem_operand\")\n+\t\t    (match_operand 0 \"gpc_reg_operand\")))))\n \n ;; Return 1 if the operand is either an easy FP constant or memory or reg.\n (define_predicate \"reg_or_none500mem_operand\""}]}