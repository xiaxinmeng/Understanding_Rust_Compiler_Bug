{"sha": "34d3a672a85c8ef6ee773b311381154533d54310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkM2E2NzJhODVjOGVmNmVlNzczYjMxMTM4MTE1NDUzM2Q1NDMxMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-03-06T08:38:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-06T08:38:22Z"}, "message": "make-obstacks-texi.pl: New.\n\ncontrib/\n2013-03-06  Tobias Burnus  <burnus@net-b.de>\n\n        * make-obstacks-texi.pl: New.\n\nlibiberty/\n2013-03-06  Tobias Burnus  <burnus@net-b.de>\n\n        * libiberty.texi: Update comment, remove lowersections.\n        * obstacks.texi: Regenerate.\n\nFrom-SVN: r196486", "tree": {"sha": "b6ba443744359b6a32c78b975c39f63c2efe9942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ba443744359b6a32c78b975c39f63c2efe9942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d3a672a85c8ef6ee773b311381154533d54310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d3a672a85c8ef6ee773b311381154533d54310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d3a672a85c8ef6ee773b311381154533d54310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d3a672a85c8ef6ee773b311381154533d54310/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c27ce4cd4de1b9fd7d4e39d3bd56b6a75115537"}], "stats": {"total": 109, "additions": 81, "deletions": 28}, "files": [{"sha": "4339d3c2dddd4f96046a655a5d1db4a51d12c62e", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d3a672a85c8ef6ee773b311381154533d54310/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d3a672a85c8ef6ee773b311381154533d54310/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=34d3a672a85c8ef6ee773b311381154533d54310", "patch": "@@ -1,3 +1,7 @@\n+2013-03-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* make-obstacks-texi.pl: New.\n+\n 2013-02-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* make_sunver.pl: Enforce C locale."}, {"sha": "63a0bac0b7099362186378fec4eb1c23f856e691", "filename": "contrib/make-obstacks-texi.pl", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d3a672a85c8ef6ee773b311381154533d54310/contrib%2Fmake-obstacks-texi.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d3a672a85c8ef6ee773b311381154533d54310/contrib%2Fmake-obstacks-texi.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmake-obstacks-texi.pl?ref=34d3a672a85c8ef6ee773b311381154533d54310", "patch": "@@ -0,0 +1,46 @@\n+#!/usr/bin/perl -w\n+\n+# (C) 2013 Free Software Foundation\n+# Contributed by Tobias Burnus\n+#\n+# This script is Free Software, and it can be copied, distributed and\n+# modified as defined in the GNU General Public License.  A copy of\n+# its license can be downloaded from http://www.gnu.org/copyleft/gpl.html\n+\n+use strict;\n+use File::Basename;\n+\n+\n+if ($#ARGV != 0 or $ARGV[0] eq \"\")  {\n+   my $name = basename($0);\n+\n+   print \"\\nUSAGE: `$name` memory.texi\\n\\n\";\n+   print \"Reads GLIBC's manual/memory.texi and extracts the obstacks section\\n\"\n+        .\"Redirect the output to update GCC's libiberty/obstacks.texi\\n\\n\";\n+   exit 1;\n+}\n+\n+open (IN, \"<$ARGV[0]\") || die \"Cannot open '$ARGV[0]': $!\";\n+my $data = join (\"\", <IN>);\n+close (IN);\n+\n+$data =~ s/.*\\@node Obstacks\\n/\\@node Obstacks\\n/s;\n+$data =~ s/\\n\\@node [^\\n]+\\n\\@subsection.*/\\n/s;\n+\n+# Add refs to GLIBC\n+$data =~ s/(\\@p?xref{[^}]*)}/$1, , , libc, The GNU C Library Reference Manual}/gs;\n+\n+\n+# And undo the refs which are in this file\n+my @nodes = grep /^\\@node /, (split /\\n/, $data);\n+\n+foreach my $node (@nodes) {\n+  $node =~ s/\\@node //;\n+  $node =~ s/,.*//;\n+  $node =~ s/ / *\\n?/g;\n+  chomp ($node);\n+\n+  $data =~ s/(\\@p?xref{$node), , , libc, The GNU C Library Reference Manual}/$1}/gsi;\n+}\n+\n+print $data;"}, {"sha": "06e7c1cb838ecc5ad0609663f38a048d55c2139e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=34d3a672a85c8ef6ee773b311381154533d54310", "patch": "@@ -1,3 +1,8 @@\n+2013-03-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libiberty.texi: Update comment, remove lowersections.\n+\t* obstacks.texi: Regenerate.\n+\n 2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56526"}, {"sha": "f4af66d40b9185a3cd0bc10ed26c430ccc875c81", "filename": "libiberty/libiberty.texi", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=34d3a672a85c8ef6ee773b311381154533d54310", "patch": "@@ -241,13 +241,8 @@ central location from which to use, maintain, and distribute them.\n * Obstacks::                     Stacks of arbitrary objects.\n @end menu\n \n-@c This is generated from the glibc manual using a make-obstacks-texi.sh\n-@c script of Phil's.  Hope it's accurate.\n-@lowersections\n-@lowersections\n+@c This is generated from the glibc manual using contrib/make-obstacks-texi.pl\n @include obstacks.texi\n-@raisesections\n-@raisesections\n \n @node Functions\n @chapter Function, Variable, and Macro Listing."}, {"sha": "adcd8103da8814ccf4c0d07edd0d34643c1d47b7", "filename": "libiberty/obstacks.texi", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2Fobstacks.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d3a672a85c8ef6ee773b311381154533d54310/libiberty%2Fobstacks.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstacks.texi?ref=34d3a672a85c8ef6ee773b311381154533d54310", "patch": "@@ -1,5 +1,5 @@\n @node Obstacks\n-@chapter Obstacks\n+@subsection Obstacks\n @cindex obstacks\n \n An @dfn{obstack} is a pool of memory containing a stack of objects.  You\n@@ -15,25 +15,25 @@ the objects are usually small.  And the only space overhead per object is\n the padding needed to start each object on a suitable boundary.\n \n @menu\n-* Creating Obstacks::           How to declare an obstack in your program.\n-* Preparing for Obstacks::      Preparations needed before you can\n-                                use obstacks.\n+* Creating Obstacks::\t\tHow to declare an obstack in your program.\n+* Preparing for Obstacks::\tPreparations needed before you can\n+\t\t\t\t use obstacks.\n * Allocation in an Obstack::    Allocating objects in an obstack.\n * Freeing Obstack Objects::     Freeing objects in an obstack.\n-* Obstack Functions::           The obstack functions are both\n-                                functions and macros.\n+* Obstack Functions::\t\tThe obstack functions are both\n+\t\t\t\t functions and macros.\n * Growing Objects::             Making an object bigger by stages.\n-* Extra Fast Growing::          Extra-high-efficiency (though more\n-                                complicated) growing objects.\n+* Extra Fast Growing::\t\tExtra-high-efficiency (though more\n+\t\t\t\t complicated) growing objects.\n * Status of an Obstack::        Inquiries about the status of an obstack.\n * Obstacks Data Alignment::     Controlling alignment of objects in obstacks.\n * Obstack Chunks::              How obstacks obtain and release chunks;\n-                                efficiency considerations.\n+\t\t\t\t efficiency considerations.\n * Summary of Obstacks::\n @end menu\n \n @node Creating Obstacks\n-@section Creating Obstacks\n+@subsubsection Creating Obstacks\n \n The utilities for manipulating obstacks are declared in the header\n file @file{obstack.h}.\n@@ -74,7 +74,7 @@ directly or indirectly.  You must also supply a function to free a chunk.\n These matters are described in the following section.\n \n @node Preparing for Obstacks\n-@section Preparing for Using Obstacks\n+@subsubsection Preparing for Using Obstacks\n \n Each source file in which you plan to use the obstack functions\n must include the header file @file{obstack.h}, like this:\n@@ -160,7 +160,7 @@ obstack_alloc_failed_handler = &my_obstack_alloc_failed;\n @end defvar\n \n @node Allocation in an Obstack\n-@section Allocation in an Obstack\n+@subsubsection Allocation in an Obstack\n @cindex allocation (obstacks)\n \n The most direct way to allocate an object in an obstack is with\n@@ -233,7 +233,7 @@ Contrast this with the previous example of @code{savestring} using\n @code{malloc} (@pxref{Basic Allocation, , , libc, The GNU C Library Reference Manual}).\n \n @node Freeing Obstack Objects\n-@section Freeing Objects in an Obstack\n+@subsubsection Freeing Objects in an Obstack\n @cindex freeing (obstacks)\n \n To free an object allocated in an obstack, use the function\n@@ -265,7 +265,7 @@ frees the chunk (@pxref{Preparing for Obstacks}).  Then other\n obstacks, or non-obstack allocation, can reuse the space of the chunk.\n \n @node Obstack Functions\n-@section Obstack Functions and Macros\n+@subsubsection Obstack Functions and Macros\n @cindex macros\n \n The interfaces for using obstacks may be defined either as functions or\n@@ -321,7 +321,7 @@ various language extensions in GNU C permit defining the macros so as to\n compute each argument only once.\n \n @node Growing Objects\n-@section Growing Objects\n+@subsubsection Growing Objects\n @cindex growing objects (in obstacks)\n @cindex changing the size of a block (obstacks)\n \n@@ -435,7 +435,7 @@ the current object smaller.  Just don't try to shrink it beyond zero\n length---there's no telling what will happen if you do that.\n \n @node Extra Fast Growing\n-@section Extra Fast Growing Objects\n+@subsubsection Extra Fast Growing Objects\n @cindex efficiency and obstacks\n \n The usual functions for growing objects incur overhead for checking\n@@ -538,7 +538,7 @@ add_string (struct obstack *obstack, const char *ptr, int len)\n @end smallexample\n \n @node Status of an Obstack\n-@section Status of an Obstack\n+@subsubsection Status of an Obstack\n @cindex obstack status\n @cindex status of obstack\n \n@@ -580,12 +580,13 @@ obstack_next_free (@var{obstack-ptr}) - obstack_base (@var{obstack-ptr})\n @end deftypefun\n \n @node Obstacks Data Alignment\n-@section Alignment of Data in Obstacks\n+@subsubsection Alignment of Data in Obstacks\n @cindex alignment (in obstacks)\n \n Each obstack has an @dfn{alignment boundary}; each object allocated in\n the obstack automatically starts on an address that is a multiple of the\n-specified boundary.  By default, this boundary is 4 bytes.\n+specified boundary.  By default, this boundary is aligned so that\n+the object can hold any type of data.\n \n To access an obstack's alignment boundary, use the macro\n @code{obstack_alignment_mask}, whose function prototype looks like\n@@ -597,7 +598,9 @@ this:\n The value is a bit mask; a bit that is 1 indicates that the corresponding\n bit in the address of an object should be 0.  The mask value should be one\n less than a power of 2; the effect is that all object addresses are\n-multiples of that power of 2.  The default value of the mask is 3, so that\n+multiples of that power of 2.  The default value of the mask is a value\n+that allows aligned objects to hold any type of data: for example, if\n+its value is 3, any type of data can be stored at locations whose\n addresses are multiples of 4.  A mask value of 0 means an object can start\n on any multiple of 1 (that is, no alignment is required).\n \n@@ -620,7 +623,7 @@ This will finish a zero-length object and then do proper alignment for\n the next object.\n \n @node Obstack Chunks\n-@section Obstack Chunks\n+@subsubsection Obstack Chunks\n @cindex efficiency of chunks\n @cindex chunks\n \n@@ -676,7 +679,7 @@ if (obstack_chunk_size (obstack_ptr) < @var{new-chunk-size})\n @end smallexample\n \n @node Summary of Obstacks\n-@section Summary of Obstack Functions\n+@subsubsection Summary of Obstack Functions\n \n Here is a summary of all the functions associated with obstacks.  Each\n takes the address of an obstack (@code{struct obstack *}) as its first"}]}