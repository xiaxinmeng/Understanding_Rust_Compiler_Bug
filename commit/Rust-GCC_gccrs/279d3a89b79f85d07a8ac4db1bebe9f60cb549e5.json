{"sha": "279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5ZDNhODliNzlmODVkMDdhOGFjNGRiMWJlYmU5ZjYwY2I1NDllNQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-21T09:31:36Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-21T13:54:48Z"}, "message": "d: Enable private member access for __traits\n\nThe following traits can now access non-public members:\n - hasMember\n - getMember\n - getOverloads\n - getVirtualMethods\n - getVirtualFuntions\n\nThis fixes a long-standing issue in D where the allMembers trait would\ncorrectly return non-public members but those non-public members would\nbe inaccessible to other traits.\n\nReviewed-on: https://github.com/dlang/dmd/pull/12135\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 3a7ebef73.", "tree": {"sha": "45e70aa6786f0a138370903a8dbc749aeb3359eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45e70aa6786f0a138370903a8dbc749aeb3359eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e154009f35a74edffda42b77b806a1fb8591d4c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e154009f35a74edffda42b77b806a1fb8591d4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e154009f35a74edffda42b77b806a1fb8591d4c0"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "1f907b8f19fd3a16be5b6cb479f850f24706da37", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "patch": "@@ -1,4 +1,4 @@\n-2d3d137489f030395d06cb664087fd1a35bccabe\n+3a7ebef73cc01d4a877a95cf95cd3776c9e3ee66\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "70f7f2cb582ec51a9e16b260fc3f534c7b66464e", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "patch": "@@ -1103,12 +1103,14 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n             return new ErrorExp();\n         }\n \n+        // ignore symbol visibility and disable access checks for these traits\n+        Scope *scx = sc->push();\n+        scx->flags |= SCOPEignoresymbolvisibility | SCOPEnoaccesscheck;\n+\n         if (e->ident == Id::hasMember)\n         {\n             /* Take any errors as meaning it wasn't found\n              */\n-            Scope *scx = sc->push();\n-            scx->flags |= SCOPEignoresymbolvisibility;\n             ex = trySemantic(ex, scx);\n             scx->pop();\n             return ex ? True(e) : False(e);\n@@ -1118,8 +1120,6 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n             if (ex->op == TOKdotid)\n                 // Prevent semantic() from replacing Symbol with its initializer\n                 ((DotIdExp *)ex)->wantsym = true;\n-            Scope *scx = sc->push();\n-            scx->flags |= SCOPEignoresymbolvisibility;\n             ex = semantic(ex, scx);\n             scx->pop();\n             return ex;\n@@ -1130,8 +1130,6 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n         {\n             unsigned errors = global.errors;\n             Expression *eorig = ex;\n-            Scope *scx = sc->push();\n-            scx->flags |= SCOPEignoresymbolvisibility;\n             ex = semantic(ex, scx);\n             if (errors < global.errors)\n                 e->error(\"%s cannot be resolved\", eorig->toChars());"}, {"sha": "49b446a329bf8f2d0fd18e07a6275908f69df769", "filename": "gcc/testsuite/gdc.test/compilable/imports/test15371.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest15371.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest15371.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Ftest15371.d?ref=279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "patch": "@@ -0,0 +1,9 @@\n+module imports.test15371;\n+\n+struct A\n+{\n+    private int a;\n+    private void fun() {}\n+    private void fun(int, int) {}\n+    public void fun(int) {}\n+}"}, {"sha": "6e762beeb1ecea40d7b54499dfd52ebd07e482a3", "filename": "gcc/testsuite/gdc.test/compilable/test15371.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15371.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279d3a89b79f85d07a8ac4db1bebe9f60cb549e5/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15371.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15371.d?ref=279d3a89b79f85d07a8ac4db1bebe9f60cb549e5", "patch": "@@ -0,0 +1,10 @@\n+// EXTRA_FILES: imports/test15371.d\n+import imports.test15371;\n+\n+void main()\n+{\n+    A a;\n+    static assert(__traits(hasMember, A, \"a\"));\n+    static assert(__traits(getOverloads, A, \"fun\").length == 3);\n+    static assert(__traits(compiles, __traits(getMember, a, \"a\") ));\n+}"}]}