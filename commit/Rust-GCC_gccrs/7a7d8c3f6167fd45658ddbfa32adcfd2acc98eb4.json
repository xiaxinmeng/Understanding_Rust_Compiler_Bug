{"sha": "7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "node_id": "C_kwDOANBUbNoAKDdhN2Q4YzNmNjE2N2ZkNDU2NThkZGJmYTMyYWRjZmQyYWNjOThlYjQ", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-13T19:48:18Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-13T19:49:01Z"}, "message": "i386: Introduce V2QImode vectorized shifts [PR103861]\n\nAdd V2QImode shift operations and split them to synthesized\ndouble HI/LO QImode operations with integer registers.\n\nAlso robustify arithmetic split patterns.\n\n2022-01-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/i386.md (*ashlqi_ext<mode>_2): New insn pattern.\n\t(*<any_shiftrt:insn>qi_ext<mode>_2): Ditto.\n\t* config/i386/mmx.md (<any_shift:insn>v2qi):\n\tNew insn_and_split pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* gcc.target/i386/pr103861.c (shl,ashr,lshr): New tests.", "tree": {"sha": "b03bb71ad0fcec2e37e4a3f7aa8ac094c9e365e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03bb71ad0fcec2e37e4a3f7aa8ac094c9e365e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e5163960eceab701a1a25dfa049e394fe5b3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e5163960eceab701a1a25dfa049e394fe5b3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e5163960eceab701a1a25dfa049e394fe5b3de"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "c2acb1dbd90727f5edefed948b3ff667635ba756", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "patch": "@@ -12413,6 +12413,54 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*ashlqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n+\t  (ashift:QI\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n+\t    (match_operand:QI 2 \"nonmemory_operand\" \"cI\")) 0))\n+  (clobber (reg:CC FLAGS_REG))]\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      gcc_assert (operands[2] == const1_rtx);\n+      return \"add{b}\\t%h0, %h0\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"sal{b}\\t%h0\";\n+      else\n+\treturn \"sal{b}\\t{%2, %h0|%h0, %2}\";\n+    }\n+}\n+  [(set (attr \"type\")\n+     (cond [(and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t (match_operand 2 \"const1_operand\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (ior (eq_attr \"type\" \"alu\")\n+\t    (and (eq_attr \"type\" \"ishift\")\n+\t\t (and (match_operand 2 \"const1_operand\")\n+\t\t      (ior (match_test \"TARGET_SHIFT1\")\n+\t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; See comment above `ashl<mode>3' about how this works.\n \n (define_expand \"<insn><mode>3\"\n@@ -13143,6 +13191,39 @@\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<insn>qi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n+\t  (any_shiftrt:QI\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n+\t    (match_operand:QI 2 \"nonmemory_operand\" \"cI\")) 0))\n+  (clobber (reg:CC FLAGS_REG))]\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n+{\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+    return \"<shift>{b}\\t%h0\";\n+  else\n+    return \"<shift>{b}\\t{%2, %h0|%h0, %2}\";\n+}\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (match_operand 2 \"const1_operand\")\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"QI\")])\n \f\n ;; Rotate instructions\n "}, {"sha": "782da220f98f91e30a95bf1d80429a6fb057ac05", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "patch": "@@ -1657,7 +1657,8 @@\n         (neg:V2QI\n \t  (match_operand:V2QI 1 \"general_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && reload_completed\"\n   [(parallel\n      [(set (strict_low_part (match_dup 0))\n \t   (neg:QI (match_dup 1)))\n@@ -1683,7 +1684,8 @@\n         (neg:V2QI\n \t  (match_operand:V2QI 1 \"sse_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0)\n \t(minus:V16QI (match_dup 0) (match_dup 1)))]\n@@ -1757,7 +1759,8 @@\n \t  (match_operand:V2QI 1 \"general_reg_operand\")\n \t  (match_operand:V2QI 2 \"general_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && reload_completed\"\n   [(parallel\n      [(set (strict_low_part (match_dup 0))\n \t   (plusminus:QI (match_dup 1) (match_dup 2)))\n@@ -1790,7 +1793,8 @@\n \t  (match_operand:V2QI 1 \"sse_reg_operand\")\n \t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE2 && reload_completed\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0)\n         (plusminus:V16QI (match_dup 1) (match_dup 2)))]\n {\n@@ -2387,6 +2391,38 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"<insn>v2qi3\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=Q\")\n+        (any_shift:V2QI\n+\t  (match_operand:V2QI 1 \"register_operand\" \"0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+     [(set (zero_extract:HI (match_dup 3) (const_int 8) (const_int 8))\n+\t   (subreg:HI\n+\t     (any_shift:QI\n+\t       (subreg:QI\n+\t         (zero_extract:HI (match_dup 4)\n+\t\t\t          (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t       (match_dup 2)) 0))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (strict_low_part (match_dup 0))\n+\t   (any_shift:QI (match_dup 1) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[4] = lowpart_subreg (HImode, operands[1], V2QImode);\n+  operands[3] = lowpart_subreg (HImode, operands[0], V2QImode);\n+  operands[1] = lowpart_subreg (QImode, operands[1], V2QImode);\n+  operands[0] = lowpart_subreg (QImode, operands[0], V2QImode);\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral comparisons"}, {"sha": "064b617774b5255db7e6bf234195e2773a677f69", "filename": "gcc/testsuite/gcc.target/i386/pr103861.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c?ref=7a7d8c3f6167fd45658ddbfa32adcfd2acc98eb4", "patch": "@@ -3,6 +3,7 @@\n /* { dg-options \"-O2 -dp\" } */\n \n typedef char __v2qi __attribute__ ((__vector_size__ (2)));\n+typedef unsigned char __v2qu __attribute__ ((__vector_size__ (2)));\n \n __v2qi and (__v2qi a, __v2qi b) { return a & b; };\n \n@@ -20,4 +21,10 @@ __v2qi minus  (__v2qi a, __v2qi b) { return a - b; };\n \n __v2qi neg  (__v2qi a) { return -a; };\n \n+__v2qi shl (__v2qi a, int b) { return a << b; };\n+\n+__v2qi ashr (__v2qi a, int b) { return a >> b; };\n+\n+__v2qu lshr  (__v2qu a, int b) { return a >> b; };\n+\n /* { dg-final { scan-assembler-not \"insvhi\" } } */"}]}