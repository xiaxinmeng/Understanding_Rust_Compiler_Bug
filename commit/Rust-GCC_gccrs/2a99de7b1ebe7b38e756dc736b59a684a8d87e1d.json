{"sha": "2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5OWRlN2IxZWJlN2IzOGU3NTZkYzczNmI1OWE2ODRhOGQ4N2UxZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-01T13:38:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-01T13:38:25Z"}, "message": "re PR middle-end/77436 (Incorrect constant result for summing loop inserted)\n\n2016-09-01  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/77436\n\t* tree-chrec.c (tree_fold_binomial): Use widest_int, properly\n\tcheck whether the result fits the desired result type.\n\n\t* gcc.dg/torture/pr77436.c: New testcase.\n\nFrom-SVN: r239937", "tree": {"sha": "2c5540b959e469b5363ccd20b388751a071d7d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5540b959e469b5363ccd20b388751a071d7d79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc4ec5430bf8225f515242fc7c030eb891c32301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4ec5430bf8225f515242fc7c030eb891c32301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc4ec5430bf8225f515242fc7c030eb891c32301"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "c18752b85bd4d4a379a2242b07ddcd5d7b6fa8e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "patch": "@@ -1,3 +1,9 @@\n+2016-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77436\n+\t* tree-chrec.c (tree_fold_binomial): Use widest_int, properly\n+\tcheck whether the result fits the desired result type.\n+\n 2016-09-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.md (cbranch<mode>4): Op 2 can be const."}, {"sha": "721307738e4ce48318568097dd57d5e9fcd4cbf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "patch": "@@ -1,3 +1,8 @@\n+2016-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/77436\n+\t* gcc.dg/torture/pr77436.c: New testcase.\n+\n 2016-09-01  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/pr64252.c: Require int32plus."}, {"sha": "513867db7cee4584944a9715f6f57fb92f0bb62c", "filename": "gcc/testsuite/gcc.dg/torture/pr77436.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77436.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77436.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77436.c?ref=2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+int main()\n+{\n+  unsigned short sum = 0;\n+  for (short x = -(__SHRT_MAX__ -1); x <= (__SHRT_MAX__ -1); x++)\n+    sum += x;\n+  if (sum != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e7e47b1bc52d4b4dee73982ef85a648e8733d4e5", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99de7b1ebe7b38e756dc736b59a684a8d87e1d/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=2a99de7b1ebe7b38e756dc736b59a684a8d87e1d", "patch": "@@ -490,26 +490,27 @@ tree_fold_binomial (tree type, tree n, unsigned int k)\n {\n   bool overflow;\n   unsigned int i;\n-  tree res;\n \n   /* Handle the most frequent cases.  */\n   if (k == 0)\n     return build_int_cst (type, 1);\n   if (k == 1)\n     return fold_convert (type, n);\n \n+  widest_int num = wi::to_widest (n);\n+\n   /* Check that k <= n.  */\n-  if (wi::ltu_p (n, k))\n+  if (wi::ltu_p (num, k))\n     return NULL_TREE;\n \n   /* Denominator = 2.  */\n-  wide_int denom = wi::two (TYPE_PRECISION (TREE_TYPE (n)));\n+  widest_int denom = 2;\n \n   /* Index = Numerator-1.  */\n-  wide_int idx = wi::sub (n, 1);\n+  widest_int idx = num - 1;\n \n   /* Numerator = Numerator*Index = n*(n-1).  */\n-  wide_int num = wi::smul (n, idx, &overflow);\n+  num = wi::smul (num, idx, &overflow);\n   if (overflow)\n     return NULL_TREE;\n \n@@ -528,9 +529,10 @@ tree_fold_binomial (tree type, tree n, unsigned int k)\n     }\n \n   /* Result = Numerator / Denominator.  */\n-  wide_int di_res = wi::udiv_trunc (num, denom);\n-  res = wide_int_to_tree (type, di_res);\n-  return int_fits_type_p (res, type) ? res : NULL_TREE;\n+  num = wi::udiv_trunc (num, denom);\n+  if (! wi::fits_to_tree_p (num, type))\n+    return NULL_TREE;\n+  return wide_int_to_tree (type, num);\n }\n \n /* Helper function.  Use the Newton's interpolating formula for"}]}