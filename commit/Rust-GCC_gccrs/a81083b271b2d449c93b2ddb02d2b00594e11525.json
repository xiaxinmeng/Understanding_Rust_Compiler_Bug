{"sha": "a81083b271b2d449c93b2ddb02d2b00594e11525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxMDgzYjI3MWIyZDQ0OWM5M2IyZGRiMDJkMmIwMDU5NGUxMTUyNQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2006-02-07T02:28:56Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-02-07T02:28:56Z"}, "message": "i386.c (ix86_scalar_mode_supported_p): New.\n\n\t* config/i386/i386.c (ix86_scalar_mode_supported_p): New.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define hook.\n\t(classify_argument): Handle SDmode, DDmode, TDmode for 64-bit.\n\t(ix86_return_in_memory): Handle TDmode.\n\t(ix86_libcall_value): Handle SDmode, DDmode, TDmode.\n\t(ix86_value_regno): Return non-TDmode decimal float modes in %eax.\n\nFrom-SVN: r110684", "tree": {"sha": "d22ee65d9cb484c31ff7ebb9a9131aff62b0ab6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22ee65d9cb484c31ff7ebb9a9131aff62b0ab6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81083b271b2d449c93b2ddb02d2b00594e11525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81083b271b2d449c93b2ddb02d2b00594e11525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81083b271b2d449c93b2ddb02d2b00594e11525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81083b271b2d449c93b2ddb02d2b00594e11525/comments", "author": null, "committer": null, "parents": [{"sha": "5fd231d2c77a4f400a0caf4cced86b253495bc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd231d2c77a4f400a0caf4cced86b253495bc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd231d2c77a4f400a0caf4cced86b253495bc07"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "6e5ca8200d2a55adc9830009b603df2b90ed86de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81083b271b2d449c93b2ddb02d2b00594e11525/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81083b271b2d449c93b2ddb02d2b00594e11525/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81083b271b2d449c93b2ddb02d2b00594e11525", "patch": "@@ -1,3 +1,12 @@\n+2006-02-07  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config/i386/i386.c (ix86_scalar_mode_supported_p): New.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define hook.\n+\t(classify_argument): Handle SDmode, DDmode, TDmode for 64-bit.\n+\t(ix86_return_in_memory): Handle TDmode.\n+\t(ix86_libcall_value): Handle SDmode, DDmode, TDmode.\n+\t(ix86_value_regno): Return non-TDmode decimal float modes in %eax.\n+\n 2006-02-06  Richard Sandiford  <richard@codesourcery.com>\n \n \t* reorg.c (dbr_schedule): Use dump_file instead of file."}, {"sha": "f4eb04e52171b477869e093876db1f2d12b85c14", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81083b271b2d449c93b2ddb02d2b00594e11525/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81083b271b2d449c93b2ddb02d2b00594e11525/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a81083b271b2d449c93b2ddb02d2b00594e11525", "patch": "@@ -1099,6 +1099,7 @@ static tree ix86_build_builtin_va_list (void);\n static void ix86_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static tree ix86_gimplify_va_arg (tree, tree, tree *, tree *);\n+static bool ix86_scalar_mode_supported_p (enum machine_mode);\n static bool ix86_vector_mode_supported_p (enum machine_mode);\n \n static int ix86_address_cost (rtx);\n@@ -1327,6 +1328,9 @@ static section *x86_64_elf_select_section (tree decl, int reloc,\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ix86_gimplify_va_arg\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P ix86_scalar_mode_supported_p\n+\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ix86_vector_mode_supported_p\n \n@@ -3070,6 +3074,14 @@ classify_argument (enum machine_mode mode, tree type,\n   /* Classification of atomic types.  */\n   switch (mode)\n     {\n+    case SDmode:\n+    case DDmode:\n+      classes[0] = X86_64_SSE_CLASS;\n+      return 1;\n+    case TDmode:\n+      classes[0] = X86_64_SSE_CLASS;\n+      classes[1] = X86_64_SSEUP_CLASS;\n+      return 2;\n     case DImode:\n     case SImode:\n     case HImode:\n@@ -3813,6 +3825,9 @@ ix86_return_in_memory (tree type)\n   if (mode == XFmode)\n     return 0;\n \n+  if (mode == TDmode)\n+    return 1;\n+\n   if (size > 12)\n     return 1;\n   return 0;\n@@ -3878,6 +3893,9 @@ ix86_libcall_value (enum machine_mode mode)\n \tcase DFmode:\n \tcase DCmode:\n \tcase TFmode:\n+\tcase SDmode:\n+\tcase DDmode:\n+\tcase TDmode:\n \t  return gen_rtx_REG (mode, FIRST_SSE_REG);\n \tcase XFmode:\n \tcase XCmode:\n@@ -3909,6 +3927,10 @@ ix86_value_regno (enum machine_mode mode, tree func, tree fntype)\n   if (mode == TImode || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n     return FIRST_SSE_REG;\n \n+  /* Decimal floating point values can go in %eax, unlike other float modes.  */\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    return 0;\n+\n   /* Most things go in %eax, except (unless -mno-fp-ret-in-387) fp values.  */\n   if (!SCALAR_FLOAT_MODE_P (mode) || !TARGET_FLOAT_RETURNS_IN_80387)\n     return 0;\n@@ -18441,6 +18463,16 @@ ix86_expand_reduc_v4sf (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n   emit_insn (fn (dest, tmp2, tmp3));\n }\n \f\n+/* Target hook for scalar_mode_supported_p.  */\n+static bool\n+ix86_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    return true;\n+  else\n+    return default_scalar_mode_supported_p (mode);\n+}\n+\n /* Implements target hook vector_mode_supported_p.  */\n static bool\n ix86_vector_mode_supported_p (enum machine_mode mode)"}]}