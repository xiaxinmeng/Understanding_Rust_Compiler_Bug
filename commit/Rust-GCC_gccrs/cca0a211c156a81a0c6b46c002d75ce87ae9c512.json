{"sha": "cca0a211c156a81a0c6b46c002d75ce87ae9c512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhMGEyMTFjMTU2YTgxYTBjNmI0NmMwMDJkNzVjZTg3YWU5YzUxMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-10-09T13:43:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-10-09T13:43:20Z"}, "message": "arm.md (predicable): New attribute, default to \"no\".\n\n* arm.md (predicable): New attribute, default to \"no\".\n(all patterns): Mark as predicable if appropriate.\n(conditional execution splits): Split using predication format.\n(define_cond_exec): Define.\n* arm.c (arm_print_operand): handle insn predicate.\n\nFrom-SVN: r36808", "tree": {"sha": "3919d413c3b007882599f74f99b1abcabfe8b448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3919d413c3b007882599f74f99b1abcabfe8b448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca0a211c156a81a0c6b46c002d75ce87ae9c512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca0a211c156a81a0c6b46c002d75ce87ae9c512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca0a211c156a81a0c6b46c002d75ce87ae9c512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca0a211c156a81a0c6b46c002d75ce87ae9c512/comments", "author": null, "committer": null, "parents": [{"sha": "1146cfde1cba1d1c2285448bb5528e8cbf6d37d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1146cfde1cba1d1c2285448bb5528e8cbf6d37d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1146cfde1cba1d1c2285448bb5528e8cbf6d37d6"}], "stats": {"total": 902, "additions": 602, "deletions": 300}, "files": [{"sha": "c3bb9dbbf811f69e4fe6b51a0136de3d7f25e72a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cca0a211c156a81a0c6b46c002d75ce87ae9c512", "patch": "@@ -1,3 +1,11 @@\n+2000-10-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (predicable): New attribute, default to \"no\".\n+\t(all patterns): Mark as predicable if appropriate.\n+\t(conditional execution splits): Split using predication format.\n+\t(define_cond_exec): Define.\n+\t* arm.c (arm_print_operand): handle insn predicate.\n+\t\n 2000-10-09  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* README.NS32K: Remove file."}, {"sha": "a5066b80b9dbe5934e383881cf6a63ca195a6bb0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cca0a211c156a81a0c6b46c002d75ce87ae9c512", "patch": "@@ -7488,7 +7488,22 @@ arm_print_operand (stream, x, code)\n \n     case '?':\n       if (arm_ccfsm_state == 3 || arm_ccfsm_state == 4)\n-\tfputs (arm_condition_codes[arm_current_cc], stream);\n+\t{\n+\t  if (TARGET_THUMB || current_insn_predicate != NULL)\n+\t    abort ();\n+\n+\t  fputs (arm_condition_codes[arm_current_cc], stream);\n+\t}\n+      else if (current_insn_predicate)\n+\t{\n+\t  enum arm_cond_code code;\n+\n+\t  if (TARGET_THUMB)\n+\t    abort ();\n+\n+\t  code = get_arm_condition_code (current_insn_predicate);\n+\t  fputs (arm_condition_codes[code], stream);\n+\t}\n       return;\n \n     case 'N':"}, {"sha": "499bcbe1148b252f6042b35289145fd425c56dab", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 578, "deletions": 299, "changes": 877, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca0a211c156a81a0c6b46c002d75ce87ae9c512/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=cca0a211c156a81a0c6b46c002d75ce87ae9c512", "patch": "@@ -136,6 +136,8 @@\n \t  (const_string \"clob\") (const_string \"nocond\"))\n \t (const_string \"nocond\")))\n \n+(define_attr \"predicable\" \"no,yes\" (const_string \"no\"))\n+\n ; Only model the write buffer for ARM6 and ARM7.  Earlier processors don't\n ; have one.  Later ones, such as StrongARM, have write-back caches, so don't\n ; suffer blockages enough to warrent modelling this (and it can adversely\n@@ -484,7 +486,8 @@\n    add%?\\\\t%0, %1, %2\n    sub%?\\\\t%0, %1, #%n2\n    #\"\n-   [(set_attr \"length\" \"4,4,16\")]\n+  [(set_attr \"length\" \"4,4,16\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n ;; Register group 'k' is a single register group containing only the stack\n@@ -497,7 +500,7 @@\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*h,*r,!M,!O\")))]\n   \"TARGET_THUMB\"\n   \"*\n-   static char * asms[] = \n+   static const char * const asms[] = \n    {\n      \\\"add\\\\t%0, %0, %2\\\",\n      \\\"sub\\\\t%0, %0, #%n2\\\",\n@@ -556,7 +559,8 @@\n   \"@\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n ;; These patterns are the same ones as the two regular addsi3_compare0\n ;; patterns, except we write them slightly different - the combiner\n@@ -584,7 +588,8 @@\n   \"@\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n ;; The next four insns work because they compare the result with one of\n ;; the operands, and we know that the use of the condition code is\n@@ -602,7 +607,8 @@\n   \"@\n    add%?s\\\\t%0, %1, %2\n    sub%?s\\\\t%0, %1, #%n2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*addsi3_compare_op2\"\n   [(set (reg:CC_C 24)\n@@ -616,7 +622,8 @@\n   \"@\n    add%?s\\\\t%0, %1, %2\n    sub%?s\\\\t%0, %1, #%n2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*compare_addsi2_op0\"\n   [(set (reg:CC_C 24)\n@@ -628,7 +635,8 @@\n   \"@\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*compare_addsi2_op1\"\n   [(set (reg:CC_C 24)\n@@ -640,7 +648,8 @@\n   \"@\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*addsi3_carryin\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -682,7 +691,8 @@\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"TARGET_ARM\"\n   \"adc%?\\\\t%0, %1, %2\"\n-[(set_attr \"conds\" \"use\")])\n+  [(set_attr \"conds\" \"use\")]\n+)\n \n (define_insn \"*addsi3_carryin_alt3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -771,7 +781,8 @@\n   \"@\n    adf%?s\\\\t%0, %1, %2\n    suf%?s\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"adddf3\"\n@@ -782,7 +793,8 @@\n   \"@\n    adf%?d\\\\t%0, %1, %2\n    suf%?d\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*adddf_esfdf_df\"\n@@ -794,7 +806,8 @@\n   \"@\n    adf%?d\\\\t%0, %1, %2\n    suf%?d\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*adddf_df_esfdf\"\n@@ -804,7 +817,8 @@\n \t\t  (match_operand:SF 2 \"s_register_operand\"  \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"adf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*adddf_esfdf_esfdf\"\n@@ -815,7 +829,8 @@\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"adf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"addxf3\"\n@@ -826,7 +841,8 @@\n   \"@\n    adf%?e\\\\t%0, %1, %2\n    suf%?e\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"subdi3\"\n@@ -977,7 +993,8 @@\n   \"@\n    rsb%?\\\\t%0, %2, %1\n    #\"\n-  [(set_attr \"length\" \"4,16\")]\n+  [(set_attr \"length\" \"4,16\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_split\n@@ -1039,7 +1056,8 @@\n   \"@\n    suf%?d\\\\t%0, %1, %2\n    rsf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*subdf_esfdf_df\"\n@@ -1049,7 +1067,8 @@\n \t\t  (match_operand:DF  2 \"fpu_rhs_operand\"    \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"suf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*subdf_df_esfdf\"\n@@ -1061,7 +1080,8 @@\n   \"@\n    suf%?d\\\\t%0, %1, %2\n    rsf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*subdf_esfdf_esfdf\"\n@@ -1072,7 +1092,8 @@\n \t\t   (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"suf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"subxf3\"\n@@ -1083,7 +1104,8 @@\n   \"@\n    suf%?e\\\\t%0, %1, %2\n    rsf%?e\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")]\n+  [(set_attr \"type\" \"farith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \f\n ;; Multiplication insns\n@@ -1103,7 +1125,8 @@\n \t\t (match_operand:SI 1 \"s_register_operand\" \"%?r,0\")))]\n   \"TARGET_ARM\"\n   \"mul%?\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"mult\")]\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n ;; Unfortunately with the Thumb the '&'/'0' trick can fails when operands 1 and 2\n@@ -1163,7 +1186,9 @@\n \t  (match_operand:SI 3 \"s_register_operand\" \"?r,r,0,0\")))]\n   \"TARGET_ARM\"\n   \"mla%?\\\\t%0, %2, %1, %3\"\n-[(set_attr \"type\" \"mult\")])\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*mulsi3addsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -1178,8 +1203,9 @@\n \t\t (match_dup 3)))]\n   \"TARGET_ARM\"\n   \"mla%?s\\\\t%0, %2, %1, %3\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"mult\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"mult\")]\n+)\n \n (define_insn \"*mulsi3addsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -1208,7 +1234,9 @@\n \t  (match_dup 0)))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"smlal%?\\\\t%Q0, %R0, %1, %2\"\n-[(set_attr \"type\" \"mult\")])\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"mulsidi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n@@ -1218,7 +1246,9 @@\n                (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"smull%?\\\\t%Q0, %R0, %1, %2\"\n-[(set_attr \"type\" \"mult\")])\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n@@ -1228,7 +1258,9 @@\n                 (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"umull%?\\\\t%Q0, %R0, %1, %2\"\n-[(set_attr \"type\" \"mult\")])\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ;; Unnamed template to match long long unsigned multiply-accumlate (umlal)\n \n@@ -1242,7 +1274,9 @@\n \t  (match_dup 0)))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"umlal%?\\\\t%Q0, %R0, %1, %2\"\n-[(set_attr \"type\" \"mult\")])\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1256,7 +1290,8 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"smull%?\\\\t%3, %0, %2, %1\"\n-  [(set_attr \"type\" \"mult\")]\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"umulsi3_highpart\"\n@@ -1271,7 +1306,8 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"TARGET_ARM && arm_fast_multiply\"\n   \"umull%?\\\\t%3, %0, %2, %1\"\n-  [(set_attr \"type\" \"mult\")]\n+  [(set_attr \"type\" \"mult\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"mulsf3\"\n@@ -1280,15 +1316,19 @@\n \t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"fml%?s\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"ffmul\")])\n+  [(set_attr \"type\" \"ffmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fmul\")])\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*muldf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1297,7 +1337,9 @@\n \t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fmul\")])\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*muldf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1306,7 +1348,9 @@\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fmul\")])\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*muldf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1316,15 +1360,19 @@\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"muf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fmul\")])\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"mulxf3\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(mult:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n \t\t (match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"muf%?e\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fmul\")])\n+  [(set_attr \"type\" \"fmul\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \f\n ;; Division insns\n \n@@ -1336,7 +1384,9 @@\n   \"@\n    fdv%?s\\\\t%0, %1, %2\n    frd%?s\\\\t%0, %2, %1\"\n-[(set_attr \"type\" \"fdivs\")])\n+  [(set_attr \"type\" \"fdivs\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n@@ -1346,7 +1396,9 @@\n   \"@\n    dvf%?d\\\\t%0, %1, %2\n    rdf%?d\\\\t%0, %2, %1\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*divdf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1355,7 +1407,9 @@\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"dvf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*divdf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1364,7 +1418,9 @@\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rdf%?d\\\\t%0, %2, %1\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*divdf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1374,7 +1430,9 @@\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"dvf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"divxf3\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f,f\")\n@@ -1384,7 +1442,9 @@\n   \"@\n    dvf%?e\\\\t%0, %1, %2\n    rdf%?e\\\\t%0, %2, %1\"\n-[(set_attr \"type\" \"fdivx\")])\n+  [(set_attr \"type\" \"fdivx\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \f\n ;; Modulo insns\n \n@@ -1394,15 +1454,19 @@\n \t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?s\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivs\")])\n+  [(set_attr \"type\" \"fdivs\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"moddf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*moddf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1411,7 +1475,9 @@\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*moddf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1420,7 +1486,9 @@\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*moddf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1430,15 +1498,19 @@\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"rmf%?d\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivd\")])\n+  [(set_attr \"type\" \"fdivd\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"modxf3\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(mod:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n \t\t(match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"rmf%?e\\\\t%0, %1, %2\"\n-[(set_attr \"type\" \"fdivx\")])\n+  [(set_attr \"type\" \"fdivx\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \f\n ;; Boolean and,ior,xor insns\n \n@@ -1702,7 +1774,8 @@\n    and%?\\\\t%0, %1, %2\n    bic%?\\\\t%0, %1, #%B2\n    #\"\n-  [(set_attr \"length\" \"4,4,16\")]\n+  [(set_attr \"length\" \"4,4,16\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_andsi3_insn\"\n@@ -1754,7 +1827,8 @@\n   \"@\n    tst%?\\\\t%0, %1\n    bic%?s\\\\t%3, %0, #%B1\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*zeroextractsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -1773,8 +1847,9 @@\n \t\t\t << INTVAL (operands[2]));\n   output_asm_insn (\\\"tst%?\\\\t%0, %1\\\", operands);\n   return \\\"\\\";\n-\"\n-[(set_attr \"conds\" \"set\")])\n+  \"\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*ne_zeroextractsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -1793,9 +1868,9 @@\n \t\t\t << INTVAL (operands[3]));\n   output_asm_insn (\\\"ands\\\\t%0, %1, %2\\\", operands);\n   return \\\"movne\\\\t%0, #1\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8\")])\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")])\n \n ;;; ??? This pattern is bogus.  If operand3 has bits outside the range\n ;;; represented by the bitfield, then this will produce incorrect results.\n@@ -1948,7 +2023,9 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,r\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"length\" \"8\")])\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n   \n (define_insn \"*anddi_notzesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1959,7 +2036,9 @@\n   \"@\n    bic%?\\\\t%Q0, %Q1, %2\n    #\"\n-[(set_attr \"length\" \"4,8\")])\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n   \n (define_insn \"*anddi_notsesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1968,14 +2047,18 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-[(set_attr \"length\" \"8\")])\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n   \n (define_insn \"andsi_notsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n-  \"bic%?\\\\t%0, %1, %2\")\n+  \"bic%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"bicsi3\"\n   [(set (match_operand:SI                 0 \"register_operand\" \"=l\")\n@@ -1994,6 +2077,7 @@\n \t\t(match_operand:SI           1 \"s_register_operand\"  \"r\")))]\n   \"TARGET_ARM\"\n   \"bic%?\\\\t%0, %1, %2%S4\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n@@ -2006,7 +2090,8 @@\n \t(and:SI (not:SI (match_dup 2)) (match_dup 1)))]\n   \"TARGET_ARM\"\n   \"bic%?s\\\\t%0, %1, %2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*andsi_notsi_si_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2017,15 +2102,17 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"bic%?s\\\\t%0, %1, %2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n \t(ior:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n \t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*iordi_zesidi_di\"\n@@ -2037,7 +2124,8 @@\n   \"@\n    orr%?\\\\t%Q0, %Q1, %2\n    #\"\n-  [(set_attr \"length\" \"4,8\")]\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*iordi_sesidi_di\"\n@@ -2047,7 +2135,8 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"iorsi3\"\n@@ -2080,7 +2169,8 @@\n   \"@\n    orr%?\\\\t%0, %1, %2\n    #\"\n-  [(set_attr \"length\" \"4,16\")]\n+  [(set_attr \"length\" \"4,16\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_iorsi3\"\n@@ -2124,15 +2214,17 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"orr%?s\\\\t%0, %1, %2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"xordi3\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n \t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*xordi_zesidi_di\"\n@@ -2144,7 +2236,8 @@\n   \"@\n    eor%?\\\\t%Q0, %Q1, %2\n    #\"\n-  [(set_attr \"length\" \"4,8\")]\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*xordi_sesidi_di\"\n@@ -2154,7 +2247,8 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"xorsi3\"\n@@ -2174,6 +2268,7 @@\n \t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"TARGET_ARM\"\n   \"eor%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_xorsi3\"\n@@ -2194,7 +2289,8 @@\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ARM\"\n   \"eor%?s\\\\t%0, %1, %2\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*xorsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2230,7 +2326,8 @@\n \t\t(not:SI (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,rI\"))))]\n   \"TARGET_ARM\"\n   \"orr%?\\\\t%0, %1, %2\\;bic%?\\\\t%0, %0, %3\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n \f\n@@ -2261,8 +2358,9 @@\n    cmp\\\\t%1, %2\\;movge\\\\t%0, %2\n    cmp\\\\t%1, %2\\;movlt\\\\t%0, %1\n    cmp\\\\t%1, %2\\;movlt\\\\t%0, %1\\;movge\\\\t%0, %2\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,8,12\")]\n+)\n \n (define_insn \"umaxsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -2274,8 +2372,9 @@\n    cmp\\\\t%1, %2\\;movcc\\\\t%0, %2\n    cmp\\\\t%1, %2\\;movcs\\\\t%0, %1\n    cmp\\\\t%1, %2\\;movcs\\\\t%0, %1\\;movcc\\\\t%0, %2\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,8,12\")]\n+)\n \n (define_insn \"uminsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n@@ -2287,8 +2386,9 @@\n    cmp\\\\t%1, %2\\;movcs\\\\t%0, %2\n    cmp\\\\t%1, %2\\;movcc\\\\t%0, %1\n    cmp\\\\t%1, %2\\;movcc\\\\t%0, %1\\;movcs\\\\t%0, %2\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12\")])\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8,8,12\")]\n+)\n \n (define_insn \"*store_minmaxsi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n@@ -2304,10 +2404,11 @@\n   output_asm_insn (\\\"str%d3\\\\t%1, %0\\\", operands);\n   output_asm_insn (\\\"str%D3\\\\t%2, %0\\\", operands);\n   return \\\"\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")\n- (set_attr \"type\" \"store1\")])\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"store1\")]\n+)\n \n ; Reject the frame pointer in operand[1], since reloading this after\n ; it has been eliminated can cause carnage.\n@@ -2324,21 +2425,22 @@\n        || (REGNO(operands[1]) != FRAME_POINTER_REGNUM\n            && REGNO(operands[1]) != ARG_POINTER_REGNUM))\"\n   \"*\n-{\n-  enum rtx_code code = GET_CODE (operands[4]);\n-\n-  operands[5] = gen_rtx (minmax_code (operands[5]), SImode, operands[2],\n-\t\t\t operands[3]);\n-  output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  output_asm_insn (\\\"%i4%d5\\\\t%0, %1, %2\\\", operands);\n-  if (which_alternative != 0 || operands[3] != const0_rtx\n-      || (code != PLUS && code != MINUS && code != IOR && code != XOR))\n-    output_asm_insn (\\\"%i4%D5\\\\t%0, %1, %3\\\", operands);\n-  return \\\"\\\";\n-}\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+  {\n+    enum rtx_code code = GET_CODE (operands[4]);\n+\n+    operands[5] = gen_rtx (minmax_code (operands[5]), SImode, operands[2],\n+\t\t\t   operands[3]);\n+    output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n+    output_asm_insn (\\\"%i4%d5\\\\t%0, %1, %2\\\", operands);\n+    if (which_alternative != 0 || operands[3] != const0_rtx\n+        || (code != PLUS && code != MINUS && code != IOR && code != XOR))\n+      output_asm_insn (\\\"%i4%D5\\\\t%0, %1, %3\\\", operands);\n+    return \\\"\\\";\n+  }\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n \f\n ;; Shift and rotation insns\n@@ -2465,6 +2567,7 @@\n \t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n   \"TARGET_ARM\"\n   \"mov%?\\\\t%0, %1%S3\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*shiftsi3_compare0\"\n@@ -2477,8 +2580,8 @@\n \t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"TARGET_ARM\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2489,8 +2592,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*notsi_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -2499,8 +2602,8 @@\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"TARGET_ARM\"\n   \"mvn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*notsi_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n@@ -2512,8 +2615,8 @@\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n   \"TARGET_ARM\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -2524,8 +2627,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n ;; We don't really have extzv, but defining this using shifts helps\n ;; to reduce register pressure later on.\n@@ -2613,6 +2716,7 @@\n \t(neg:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"rsb%?\\\\t%0, %1, #0\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_negsi2\"\n@@ -2628,30 +2732,37 @@\n \t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"mnf%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")]\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"mnf%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*negdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(neg:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"mnf%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"negxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"mnf%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ;; abssi2 doesn't really clobber the condition codes if a different register\n ;; is being set.  To keep things simple, assume during rtl manipulations that\n@@ -2667,6 +2778,7 @@\n    cmp\\\\t%0, #0\\;rsblt\\\\t%0, %0, #0\n    eor%?\\\\t%0, %1, %1, asr #31\\;sub%?\\\\t%0, %0, %1, asr #31\"\n   [(set_attr \"conds\" \"clob,*\")\n+   ;; predicable can't be set based on the variant, so left as no\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -2679,6 +2791,7 @@\n    cmp\\\\t%0, #0\\;rsbgt\\\\t%0, %0, #0\n    eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\"\n   [(set_attr \"conds\" \"clob,*\")\n+   ;; predicable can't be set based on the variant, so left as no\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -2687,58 +2800,74 @@\n \t (abs:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"abs%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"abs%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*absdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(abs:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"abs%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"absxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"abs%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"sqt%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n+  [(set_attr \"type\" \"float_em\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"sqt%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n+  [(set_attr \"type\" \"float_em\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*sqrtdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"sqt%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n+  [(set_attr \"type\" \"float_em\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"sqt%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n+  [(set_attr \"type\" \"float_em\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ;; SIN COS TAN and family are always emulated, so it's probably better\n ;; to always call a library function.\n@@ -2805,7 +2934,8 @@\n \t(not:DI (match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"TARGET_ARM\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"one_cmplsi2\"\n@@ -2820,6 +2950,7 @@\n \t(not:SI (match_operand:SI 1 \"s_register_operand\"  \"r\")))]\n   \"TARGET_ARM\"\n   \"mvn%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_one_cmplsi2\"\n@@ -2858,42 +2989,54 @@\n \t(float:SF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"flt%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"r_2_f\")])\n+  [(set_attr \"type\" \"r_2_f\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"flt%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"r_2_f\")])\n+  [(set_attr \"type\" \"r_2_f\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float:XF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"flt%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"r_2_f\")])\n+  [(set_attr \"type\" \"r_2_f\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"fix%?z\\\\t%0, %1\"\n-[(set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"type\" \"f_2_r\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"fix%?z\\\\t%0, %1\"\n-[(set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"type\" \"f_2_r\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"fix%?z\\\\t%0, %1\"\n-[(set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"type\" \"f_2_r\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ;; Truncation insns\n \n@@ -2903,23 +3046,29 @@\n \t (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"mvf%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"truncxfsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"mvf%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"truncxfdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"mvf%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \f\n ;; Zero and sign extension instructions.\n \n@@ -2928,11 +3077,14 @@\n         (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"*\n-  if (REGNO (operands[1]) != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n-    output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n-  return \\\"mov%?\\\\t%R0, #0\\\";\n-\"\n-[(set_attr \"length\" \"8\")])\n+    if (REGNO (operands[1])\n+        != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n+      output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n+    return \\\"mov%?\\\\t%R0, #0\\\";\n+  \"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n@@ -2942,6 +3094,7 @@\n    and%?\\\\t%Q0, %1, #255\\;mov%?\\\\t%R0, #0\n    ldr%?b\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\"\n   [(set_attr \"length\" \"8\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"*,load\")\n    (set_attr \"pool_range\" \"*,4092\")\n    (set_attr \"neg_pool_range\" \"*,4084\")]\n@@ -2952,16 +3105,19 @@\n         (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"*\n-  if (REGNO (operands[1]) != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n-    output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n-  return \\\"mov%?\\\\t%R0, %Q0, asr #31\\\";\n+    if (REGNO (operands[1])\n+        != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n+      output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n+    return \\\"mov%?\\\\t%R0, %Q0, asr #31\\\";\n   \"\n   [(set_attr \"length\" \"8\")\n-])\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_expand \"zero_extendhisi2\"\n   [(set (match_dup 2)\n-\t(ashift:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\") (const_int 16)))\n+\t(ashift:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+\t\t   (const_int 16)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(lshiftrt:SI (match_dup 2) (const_int 16)))]\n   \"TARGET_EITHER\"\n@@ -3012,13 +3168,16 @@\n \t    ops[1] = operands[1];\n \t    ops[2] = GEN_INT (16);\n \t    \n-\t    emit_insn (gen_rtx_SET (VOIDmode, ops[0], gen_rtx_ASHIFT (SImode, ops[1], ops[2])));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, ops[0],\n+\t\t\t\t    gen_rtx_ASHIFT (SImode, ops[1], ops[2])));\n \n \t    ops[0] = operands[0];\n \t    ops[1] = operands[2];\n \t    ops[2] = GEN_INT (16);\n \n-\t    emit_insn (gen_rtx_SET (VOIDmode, ops[0], gen_rtx_LSHIFTRT (SImode, ops[1], ops[2])));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, ops[0],\n+\t\t\t\t    gen_rtx_LSHIFTRT (SImode, ops[1],\n+\t\t\t\t\t\t      ops[2])));\n \t  }\n \tDONE; \n       }\n@@ -3073,6 +3232,7 @@\n   \"TARGET_ARM && arm_arch4\"\n   \"ldr%?h\\\\t%0, %1\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"256\")\n    (set_attr \"neg_pool_range\" \"244\")]\n )\n@@ -3159,6 +3319,7 @@\n   \"TARGET_ARM\"\n   \"ldr%?b\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"4096\")\n    (set_attr \"neg_pool_range\" \"4084\")]\n )\n@@ -3221,13 +3382,15 @@\n \tops[1] = operands[1];\n \tops[2] = GEN_INT (16);\n \t\n-        emit_insn (gen_rtx_SET (VOIDmode, ops[0], gen_rtx_ASHIFT (SImode, ops[1], ops[2])));\n+        emit_insn (gen_rtx_SET (VOIDmode, ops[0],\n+\t\t\t\tgen_rtx_ASHIFT (SImode, ops[1], ops[2])));\n \t    \n \tops[0] = operands[0];\n \tops[1] = operands[2];\n \tops[2] = GEN_INT (16);\n \t\n-        emit_insn (gen_rtx_SET (VOIDmode, ops[0], gen_rtx_ASHIFTRT (SImode, ops[1], ops[2])));\n+        emit_insn (gen_rtx_SET (VOIDmode, ops[0],\n+\t\t\t\tgen_rtx_ASHIFTRT (SImode, ops[1], ops[2])));\n \t\n \tDONE;\n       }\n@@ -3335,6 +3498,7 @@\n   \"TARGET_ARM && arm_arch4\"\n   \"ldr%?sh\\\\t%0, %1\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"256\")\n    (set_attr \"neg_pool_range\" \"244\")]\n )\n@@ -3405,6 +3569,7 @@\n   return \\\"ldr%?sb\\\\t%0, %1\\\";\n   \"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"pool_range\" \"256\")\n    (set_attr \"neg_pool_range\" \"244\")]\n@@ -3500,6 +3665,7 @@\n   return \\\"ldr%?sb\\\\t%0, %1\\\";\n   \"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"pool_range\" \"256\")\n    (set_attr \"neg_pool_range\" \"244\")]\n@@ -3612,21 +3778,27 @@\n \t(float_extend:DF (match_operand:SF 1 \"s_register_operand\"  \"f\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"mvf%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float_extend:XF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"mvf%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float_extend:XF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n   \"mvf%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"ffarith\")])\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n \f\n ;; Move insns (including loads and stores)\n@@ -3674,7 +3846,7 @@\n ;;  \"*\n ;;  {\n ;;    register mem = (which_alternative < 3);\n-;;    register char *template;\n+;;    register const char *template;\n ;;\n ;;    operands[mem] = XEXP (operands[mem], 0);\n ;;    switch (which_alternative)\n@@ -3814,6 +3986,7 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n   [(set_attr \"type\" \"*,*,load,store1\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,4096,*\")\n    (set_attr \"neg_pool_range\" \"*,*,4084,*\")]\n )\n@@ -3903,6 +4076,7 @@\n \t   && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == LABEL_REF\n \t   && GET_CODE (XEXP (XEXP (operands[1], 0), 1)) == CONST_INT))\"\n   \"adr%?\\\\t%0, %a1\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n ;; When generating pic, we need to load the symbol offset into a register.\n@@ -3981,10 +4155,11 @@\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_ARM && flag_pic\"\n   \"*\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (operands[1]));\n-  return \\\"add%?\\\\t%0, %|pc, %0\\\";\n+    ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n+\t\t\t       CODE_LABEL_NUMBER (operands[1]));\n+    return \\\"add%?\\\\t%0, %|pc, %0\\\";\n   \"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n ;; If copying one reg to another we can set the condition codes according to\n@@ -4364,7 +4539,8 @@\n   output_asm_insn (\\\"ldr%?\\\\t%0, %1\\\\t%@ load-rotate\\\", ops);\n   return \\\"\\\";\n   }\"\n-  [(set_attr \"type\" \"load\")]\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_expand \"movhi_bytes\"\n@@ -4431,6 +4607,7 @@\n    str%?h\\\\t%1, %0\\\\t%@ movhi \n    ldr%?h\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"type\" \"*,*,store1,load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,256\")\n    (set_attr \"neg_pool_range\" \"*,*,*,244\")]\n )\n@@ -4450,6 +4627,7 @@\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n    ldr%?\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"type\" \"*,*,load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"4096\")\n    (set_attr \"neg_pool_range\" \"4084\")]\n )\n@@ -4469,6 +4647,7 @@\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n    ldr%?\\\\t%0, %1\\\\t%@ movhi_bigend\\;mov%?\\\\t%0, %0, asr #16\"\n   [(set_attr \"type\" \"*,*,load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"length\" \"4,4,8\")\n    (set_attr \"pool_range\" \"*,*,4092\")\n    (set_attr \"neg_pool_range\" \"*,*,4084\")]\n@@ -4483,6 +4662,7 @@\n    && ! TARGET_MMU_TRAPS\"\n   \"ldr%?\\\\t%0, %1\\\\t%@ movhi_bigend\"\n   [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"4096\")\n    (set_attr \"neg_pool_range\" \"4084\")]\n )\n@@ -4493,7 +4673,9 @@\n   \"TARGET_ARM && TARGET_MMU_TRAPS\"\n   \"@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n-   mvn%?\\\\t%0, #%B1\\\\t%@ movhi\")\n+   mvn%?\\\\t%0, #%B1\\\\t%@ movhi\"\n+  [(set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"thumb_movhi_clobber\"\n   [(set (match_operand:HI     0 \"memory_operand\"   \"=m\")\n@@ -4613,7 +4795,8 @@\n    mvn%?\\\\t%0, #%B1\n    ldr%?b\\\\t%0, %1\n    str%?b\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,load,store1\")]\n+  [(set_attr \"type\" \"*,*,load,store1\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_movqi_insn\"\n@@ -4687,6 +4870,7 @@\n    ldr%?\\\\t%0, %1\\\\t%@ float\n    str%?\\\\t%1, %0\\\\t%@ float\"\n   [(set_attr \"length\" \"4,4,4,4,8,8,4,4,4\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"type\"\n \t \"ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r,*,load,store1\")\n    (set_attr \"pool_range\" \"*,*,1024,*,*,*,*,4096,*\")\n@@ -4708,6 +4892,7 @@\n    ldr%?\\\\t%0, %1\\\\t%@ float\n    str%?\\\\t%1, %0\\\\t%@ float\"\n   [(set_attr \"length\" \"4,4,4\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"*,load,store1\")\n    (set_attr \"pool_range\" \"*,4096,*\")\n    (set_attr \"neg_pool_range\" \"*,4084,*\")]\n@@ -4821,8 +5006,9 @@\n   }\n   \"\n   [(set_attr \"length\" \"4,4,8,8,8,4,4,4,4,8,8\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"type\"\n-     \"load,store2,*,store2,load,ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r\")\n+    \"load,store2,*,store2,load,ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r\")\n    (set_attr \"pool_range\" \"*,*,*,*,252,*,*,1024,*,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,244,*,*,1012,*,*,*\")]\n )\n@@ -4909,6 +5095,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"4,4,4,4,8,8,12\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r,*\")\n    (set_attr \"pool_range\" \"*,*,1024,*,*,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,1012,*,*,*,*\")]\n@@ -4954,19 +5141,21 @@\n \t  (mem:SI (match_dup 1)))])]\n   \"TARGET_ARM && (INTVAL (operands[2])  == 4 * (XVECLEN (operands[0], 0) - 1))\"\n   \"*\n-{\n-  rtx ops[3];\n-  int count = XVECLEN (operands[0], 0);\n+  {\n+    rtx ops[3];\n+    int count = XVECLEN (operands[0], 0);\n \n-  ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n-  ops[1] = SET_DEST (XVECEXP (operands[0], 0, 1));\n-  ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n+    ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n+    ops[1] = SET_DEST (XVECEXP (operands[0], 0, 1));\n+    ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n \n-  output_asm_insn (\\\"ldm%?ia\\\\t%0!, {%1-%2}\\\\t%@ load multiple\\\", ops);\n-  return \\\"\\\";\n-}\n-\"\n-[(set_attr \"type\" \"load\")])\n+    output_asm_insn (\\\"ldm%?ia\\\\t%0!, {%1-%2}\\\\t%@ load multiple\\\", ops);\n+    return \\\"\\\";\n+  }\n+  \"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ;; Ordinary load multiple\n \n@@ -4976,19 +5165,21 @@\n \t  (mem:SI (match_operand:SI 2 \"s_register_operand\" \"r\")))])]\n   \"TARGET_ARM\"\n   \"*\n-{\n-  rtx ops[3];\n-  int count = XVECLEN (operands[0], 0);\n+  {\n+    rtx ops[3];\n+    int count = XVECLEN (operands[0], 0);\n \n-  ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n-  ops[1] = SET_DEST (XVECEXP (operands[0], 0, 0));\n-  ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n+    ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n+    ops[1] = SET_DEST (XVECEXP (operands[0], 0, 0));\n+    ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n \n-  output_asm_insn (\\\"ldm%?ia\\\\t%0, {%1-%2}\\\\t%@ load multiple\\\", ops);\n-  return \\\"\\\";\n-}\n-\"\n-[(set_attr \"type\" \"load\")])\n+    output_asm_insn (\\\"ldm%?ia\\\\t%0, {%1-%2}\\\\t%@ load multiple\\\", ops);\n+    return \\\"\\\";\n+  }\n+  \"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_expand \"store_multiple\"\n   [(match_par_dup 3 [(set (match_operand:SI 0 \"\" \"\")\n@@ -5037,7 +5228,8 @@\n     return \\\"\\\";\n   }\n   \"\n-  [(set (attr \"type\")\n+  [(set_attr \"predicable\" \"yes\")\n+   (set (attr \"type\")\n         (cond [(eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 3))\n \t  \t   (const_string \"store2\")\n \t       (eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 4))\n@@ -5065,7 +5257,8 @@\n     return \\\"\\\";\n   }\n   \"\n-  [(set (attr \"type\")\n+  [(set_attr \"predicable\" \"yes\")\n+   (set (attr \"type\")\n         (cond [(eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 3))\n \t\t   (const_string \"store2\")\n \t       (eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 4))\n@@ -5283,8 +5476,8 @@\n \t\t      (match_operand:SI 2 \"arm_rhs_operand\"    \"rM\")])))]\n   \"TARGET_ARM\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP 24)\n@@ -5294,8 +5487,8 @@\n \t\t\t(match_operand:SI 0 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*cmpsi_neg_shiftsi\"\n   [(set (reg:CC 24)\n@@ -5305,8 +5498,8 @@\n \t\t\t      (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))))]\n   \"TARGET_ARM\"\n   \"cmn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*cmpsf_insn\"\n   [(set (reg:CCFP 24)\n@@ -5316,8 +5509,9 @@\n   \"@\n    cmf%?\\\\t%0, %1\n    cnf%?\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpdf_insn\"\n   [(set (reg:CCFP 24)\n@@ -5327,8 +5521,9 @@\n   \"@\n    cmf%?\\\\t%0, %1\n    cnf%?\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpesfdf_df\"\n   [(set (reg:CCFP 24)\n@@ -5339,8 +5534,9 @@\n   \"@\n    cmf%?\\\\t%0, %1\n    cnf%?\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpdf_esfdf\"\n   [(set (reg:CCFP 24)\n@@ -5349,8 +5545,9 @@\n \t\t       (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"cmf%?\\\\t%0, %1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpxf_insn\"\n   [(set (reg:CCFP 24)\n@@ -5360,8 +5557,9 @@\n   \"@\n    cmf%?\\\\t%0, %1\n    cnf%?\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpsf_trap\"\n   [(set (reg:CCFPE 24)\n@@ -5371,8 +5569,9 @@\n   \"@\n    cmf%?e\\\\t%0, %1\n    cnf%?e\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpdf_trap\"\n   [(set (reg:CCFPE 24)\n@@ -5382,8 +5581,9 @@\n   \"@\n    cmf%?e\\\\t%0, %1\n    cnf%?e\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmp_esfdf_df_trap\"\n   [(set (reg:CCFPE 24)\n@@ -5394,8 +5594,9 @@\n   \"@\n    cmf%?e\\\\t%0, %1\n    cnf%?e\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmp_df_esfdf_trap\"\n   [(set (reg:CCFPE 24)\n@@ -5404,8 +5605,9 @@\n \t\t\t(match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT\"\n   \"cmf%?e\\\\t%0, %1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n (define_insn \"*cmpxf_trap\"\n   [(set (reg:CCFPE 24)\n@@ -5415,8 +5617,9 @@\n   \"@\n    cmf%?e\\\\t%0, %1\n    cnf%?e\\\\t%0, #%N1\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"f_2_r\")])\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"f_2_r\")]\n+)\n \n ; This insn allows redundant compares to be removed by cse, nothing should\n ; ever appear in the output file since (set (reg x) (reg x)) is a no-op that\n@@ -6020,14 +6223,17 @@\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"TARGET_ARM\"\n   \"*\n-{\n-  if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n-    {\n-      arm_ccfsm_state += 2;\n-      return \\\"\\\";\n-    }\n-  return \\\"b%?\\\\t%l0\\\";\n-}\")\n+  {\n+    if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n+      {\n+        arm_ccfsm_state += 2;\n+        return \\\"\\\";\n+      }\n+    return \\\"b%?\\\\t%l0\\\";\n+  }\n+  \"\n+  [(set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*thumb_jump\"\n   [(set (pc)\n@@ -6314,7 +6520,8 @@\n       }\n     return output_return_instruction (NULL, TRUE, FALSE);\n   }\"\n-  [(set_attr \"type\" \"load\")]\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*cond_return\"\n@@ -6437,12 +6644,13 @@\n \t      (use (label_ref (match_dup 2)))])]\n   \"TARGET_ARM\"\n   \"*\n-  if (flag_pic)\n-    return \\\"cmp\\\\t%0, %1\\;addls\\\\t%|pc, %|pc, %0, asl #2\\;b\\\\t%l3\\\";\n-  return   \\\"cmp\\\\t%0, %1\\;ldrls\\\\t%|pc, [%|pc, %0, asl #2]\\;b\\\\t%l3\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+    if (flag_pic)\n+      return \\\"cmp\\\\t%0, %1\\;addls\\\\t%|pc, %|pc, %0, asl #2\\;b\\\\t%l3\\\";\n+    return   \\\"cmp\\\\t%0, %1\\;ldrls\\\\t%|pc, [%|pc, %0, asl #2]\\;b\\\\t%l3\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n (define_expand \"indirect_jump\"\n   [(set (pc)\n@@ -6456,6 +6664,7 @@\n \t(match_operand:SI 0 \"s_register_operand\" \"r\"))]\n   \"TARGET_ARM\"\n   \"mov%?\\\\t%|pc, %0\\\\t%@ indirect register jump\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n ;; Although not supported by the define_expand above,\n@@ -6465,7 +6674,8 @@\n \t(match_operand:SI 0 \"memory_operand\" \"m\"))]\n   \"TARGET_ARM\"\n   \"ldr%?\\\\t%|pc, %0\\\\t%@ indirect memory jump\"\n-  [(set_attr \"type\" \"load\")]\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*thumb_indirect_jump\"\n@@ -6506,6 +6716,7 @@\n            (match_operand:SI 2 \"s_register_operand\" \"r\")]))]\n   \"TARGET_ARM\"\n   \"%i1%?\\\\t%0, %2, %4%S3\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arith_shiftsi_compare0\"\n@@ -6521,8 +6732,8 @@\n \t\t\t (match_dup 2)]))]\n   \"TARGET_ARM\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -6535,8 +6746,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*sub_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -6546,6 +6757,7 @@\n \t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n   \"TARGET_ARM\"\n   \"sub%?\\\\t%0, %1, %3%S2\"\n+  [(set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*sub_shiftsi_compare0\"\n@@ -6561,8 +6773,8 @@\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"TARGET_ARM\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -6575,8 +6787,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")\n-])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n ;; These variants of the above insns can occur if the first operand is the\n ;; frame pointer and we eliminate that.  This is a kludge, but there doesn't\n@@ -6619,11 +6831,12 @@\n \t\t (match_dup 2)))]\n   \"TARGET_ARM && reload_in_progress\"\n   \"*\n-  output_add_immediate (operands);\n-  return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n-\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"20\")])\n+    output_add_immediate (operands);\n+    return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n+  \"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"20\")]\n+)\n \n (define_insn \"*reload_mulsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -6638,11 +6851,12 @@\n    (clobber (match_scratch:SI 0 \"=&r\"))]\n   \"TARGET_ARM && reload_in_progress\"\n   \"*\n-  output_add_immediate (operands);\n-  return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n-\"\n-[(set_attr \"conds\" \"set\")\n- (set_attr \"length\" \"20\")])\n+    output_add_immediate (operands);\n+    return \\\"add%?s\\\\t%0, %0, %3%S5\\\";\n+  \"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"20\")]\n+)\n \n ;; These are similar, but are needed when the mla pattern contains the\n ;; eliminated register as operand 3.\n@@ -6676,13 +6890,14 @@\n \t\t (match_dup 2)))]\n   \"TARGET_ARM && reload_in_progress\"\n   \"*\n-  output_add_immediate (operands);\n-  output_asm_insn (\\\"mla%?s\\\\t%0, %3, %4, %0\\\", operands);\n-  return \\\"\\\";\n-\"\n-[(set_attr \"length\" \"20\")\n- (set_attr \"conds\" \"set\")\n- (set_attr \"type\" \"mult\")])\n+    output_add_immediate (operands);\n+    output_asm_insn (\\\"mla%?s\\\\t%0, %3, %4, %0\\\", operands);\n+    return \\\"\\\";\n+  \"\n+  [(set_attr \"length\" \"20\")\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"mult\")]\n+)\n \n (define_insn \"*reload_muladdsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n@@ -6881,7 +7096,7 @@\n   \"TARGET_ARM\"\n   \"*\n {\n-  char * opcodes[4][2] =\n+  static const char * const opcodes[4][2] =\n   {\n     {\\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\", \\\"cmp\\\\t%2, %3\\;cmp%D5\\\\t%0, %1\\\"},\n     {\\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\", \\\"cmp\\\\t%2, %3\\;cmn%D5\\\\t%0, #%n1\\\"},\n@@ -7504,8 +7719,9 @@\n    rsb%D4\\\\t%0, %2, #0\n    mov%d4\\\\t%0, %1\\;rsb%D4\\\\t%0, %2, #0\n    mvn%d4\\\\t%0, #%B1\\;rsb%D4\\\\t%0, %2, #0\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8,8\")]\n+)\n \n (define_insn \"*arith_adjacentmem\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -7579,6 +7795,7 @@\n }\n \"\n [(set_attr \"length\" \"12\")\n+ (set_attr \"predicable\" \"yes\")\n  (set_attr \"type\" \"load\")])\n \n ;; the arm can support extended pre-inc instructions\n@@ -7603,7 +7820,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"str%?b\\\\t%3, [%0, %2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strqi_predec\"\n   [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n@@ -7617,7 +7836,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"str%?b\\\\t%3, [%0, -%2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqi_preinc\"\n   [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n@@ -7631,7 +7852,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?b\\\\t%3, [%0, %2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqi_predec\"\n   [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n@@ -7645,7 +7868,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?b\\\\t%3, [%0, -%2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqisi_preinc\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n@@ -7660,7 +7885,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?b\\\\t%3, [%0, %2]!\\\\t%@ z_extendqisi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqisi_predec\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n@@ -7675,7 +7902,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?b\\\\t%3, [%0, -%2]!\\\\t%@ z_extendqisi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strsi_preinc\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n@@ -7689,7 +7918,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"str%?\\\\t%3, [%0, %2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strsi_predec\"\n   [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n@@ -7703,7 +7934,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"str%?\\\\t%3, [%0, -%2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadsi_preinc\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n@@ -7717,7 +7950,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?\\\\t%3, [%0, %2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadsi_predec\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n@@ -7731,7 +7966,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?\\\\t%3, [%0, -%2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadhi_preinc\"\n   [(set (match_operand:HI 3 \"s_register_operand\" \"=r\")\n@@ -7747,7 +7984,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?\\\\t%3, [%0, %2]!\\\\t%@ loadhi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadhi_predec\"\n   [(set (match_operand:HI 3 \"s_register_operand\" \"=r\")\n@@ -7763,7 +8002,9 @@\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n   \"ldr%?\\\\t%3, [%0, -%2]!\\\\t%@ loadhi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strqi_shiftpreinc\"\n   [(set (mem:QI (plus:SI (match_operator:SI 2 \"shift_operator\"\n@@ -7779,7 +8020,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"str%?b\\\\t%5, [%0, %3%S2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strqi_shiftpredec\"\n   [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n@@ -7795,7 +8038,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"str%?b\\\\t%5, [%0, -%3%S2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqi_shiftpreinc\"\n   [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n@@ -7811,7 +8056,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?b\\\\t%5, [%0, %3%S2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadqi_shiftpredec\"\n   [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n@@ -7827,7 +8074,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?b\\\\t%5, [%0, -%3%S2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strsi_shiftpreinc\"\n   [(set (mem:SI (plus:SI (match_operator:SI 2 \"shift_operator\"\n@@ -7843,7 +8092,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"str%?\\\\t%5, [%0, %3%S2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*strsi_shiftpredec\"\n   [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n@@ -7859,7 +8110,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"str%?\\\\t%5, [%0, -%3%S2]!\"\n-[(set_attr \"type\" \"store1\")])\n+  [(set_attr \"type\" \"store1\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadsi_shiftpreinc\"\n   [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n@@ -7875,7 +8128,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?\\\\t%5, [%0, %3%S2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadsi_shiftpredec\"\n   [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n@@ -7891,7 +8146,8 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?\\\\t%5, [%0, -%3%S2]!\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*loadhi_shiftpreinc\"\n   [(set (match_operand:HI 5 \"s_register_operand\" \"=r\")\n@@ -7909,7 +8165,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?\\\\t%5, [%0, %3%S2]!\\\\t%@ loadhi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n (define_insn \"*loadhi_shiftpredec\"\n   [(set (match_operand:HI 5 \"s_register_operand\" \"=r\")\n@@ -7927,7 +8185,9 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n   \"ldr%?\\\\t%5, [%0, -%3%S2]!\\\\t%@ loadhi\"\n-[(set_attr \"type\" \"load\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n \n ; It can also support extended post-inc expressions, but combine doesn't\n ; try these....\n@@ -8024,7 +8284,8 @@\n \t(compare:CC (match_dup 1) (const_int 0)))]\n   \"TARGET_ARM\"\n   \"sub%?s\\\\t%0, %1, #0\"\n-[(set_attr \"conds\" \"set\")])\n+  [(set_attr \"conds\" \"set\")]\n+)\n \n ; Peepholes to spot possible load- and store-multiples, if the ordering is\n ; reversed, check that the memory references aren't volatile.\n@@ -8223,7 +8484,7 @@\n \t\t\t (match_dup 0)\n \t\t\t (match_operand 4 \"\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed && 0\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 5) (match_dup 6))\n    (cond_exec (match_dup 7)\n \t      (set (match_dup 0) (match_dup 4)))]\n@@ -8251,7 +8512,7 @@\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_dup 0)))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed && 0\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 5) (match_dup 6))\n    (cond_exec (match_op_dup 1 [(match_dup 5) (const_int 0)])\n \t      (set (match_dup 0) (match_dup 4)))]\n@@ -8272,7 +8533,7 @@\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_operand 5 \"\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed && 0\"\n+  \"TARGET_ARM && reload_completed\"\n   [(set (match_dup 6) (match_dup 7))\n    (cond_exec (match_op_dup 1 [(match_dup 6) (const_int 0)])\n \t      (set (match_dup 0) (match_dup 4)))\n@@ -8302,7 +8563,7 @@\n \t\t\t (match_operand 4 \"\" \"\")\n \t\t\t (match_operand 5 \"\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_ARM && reload_completed && 0\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0) \n \t(if_then_else:SI (match_op_dup 1 [(match_dup 6) (const_int 0)])\n@@ -8354,8 +8615,9 @@\n   \"@\n    mvn%D4\\\\t%0, %2\n    mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"4,8\")]\n+)\n \n ;; The next two patterns occur when an AND operation is followed by a\n ;; scc insn sequence \n@@ -8367,12 +8629,13 @@\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_ARM\"\n   \"*\n-  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n-  output_asm_insn (\\\"ands\\\\t%0, %1, %2\\\", operands);\n-  return \\\"mvnne\\\\t%0, #0\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8\")])\n+    operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+    output_asm_insn (\\\"ands\\\\t%0, %1, %2\\\", operands);\n+    return \\\"mvnne\\\\t%0, #0\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n \n (define_insn \"*not_signextract_onebit\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -8382,17 +8645,18 @@\n \t\t\t  (match_operand:SI 2 \"const_int_operand\" \"n\"))))]\n   \"TARGET_ARM\"\n   \"*\n-  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n-  output_asm_insn (\\\"tst\\\\t%1, %2\\\", operands);\n-  output_asm_insn (\\\"mvneq\\\\t%0, #0\\\", operands);\n-  return \\\"movne\\\\t%0, #0\\\";\n-\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"12\")])\n+    operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+    output_asm_insn (\\\"tst\\\\t%1, %2\\\", operands);\n+    output_asm_insn (\\\"mvneq\\\\t%0, #0\\\", operands);\n+    return \\\"movne\\\\t%0, #0\\\";\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n \n-;; Push multiple registers to the stack.  The first register is in the\n-;; unspec part of the insn; subsequent registers are in parallel (use ...)\n-;; expressions.\n+;; Push multiple registers to the stack.  Registers are in parallel (use ...)\n+;; expressions.  For simplicity, the first register is also in the unspec\n+;; part.\n (define_insn \"*push_multi\"\n   [(match_parallel 2 \"multi_register_push\"\n     [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n@@ -8404,20 +8668,22 @@\n      \n   /* For the StrongARM at least it is faster to\n      use STR to store only a single register.  */\n-  if (num_saves == 1)\n+  if (num_saves == 2)\n     output_asm_insn (\\\"str\\\\t%1, [%m0, #-4]!\\\", operands);\n   else\n     {\n       int i;\n       char pattern[100];\n \n       strcpy (pattern, \\\"stmfd\\\\t%m0!, {%1\\\");\n-\t\t       \n-      for (i = 1; i < num_saves; i++)\n+\t\t\n+      /* We skip the first register, since we can extract that directly from\n+\t the pattern.  */\n+      for (i = 2; i < num_saves; i++)\n         {\n           strcat (pattern, \\\", %|\\\");\n           strcat (pattern, reg_names[REGNO (XEXP (XVECEXP (operands[2], 0, i),\n-\t\t\t\t\t      0))]);\n+\t\t\t\t\t\t  0))]);\n         }\n \t\n       strcat (pattern, \\\"}\\\");\n@@ -8499,7 +8765,8 @@\n       case MODE_FLOAT:\n       {\n         union real_extract u;\n-        bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+        bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u,\n+\t\t\t\t\t   sizeof u);\n         assemble_real (u.d, GET_MODE (operands[0]));\n         break;\n       }\n@@ -8523,7 +8790,8 @@\n        case MODE_FLOAT:\n         {\n           union real_extract u;\n-          bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+          bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u,\n+\t\t\t\t\t     sizeof u);\n           assemble_real (u.d, GET_MODE (operands[0]));\n           break;\n         }\n@@ -8545,3 +8813,14 @@\n   \"mov\tpc, %0\"\n   [(set_attr \"length\" \"2\")]\n )\n+\n+;; General predication pattern\n+\n+(define_cond_exec\n+  [(match_operator 0 \"arm_comparison_operator\"\n+    [(match_operand 1 \"cc_register\" \"\")\n+     (const_int 0)])]\n+  \"TARGET_ARM\"\n+  \"\"\n+)\n+"}]}