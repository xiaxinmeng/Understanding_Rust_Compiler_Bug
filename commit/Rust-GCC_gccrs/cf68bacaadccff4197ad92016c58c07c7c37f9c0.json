{"sha": "cf68bacaadccff4197ad92016c58c07c7c37f9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2OGJhY2FhZGNjZmY0MTk3YWQ5MjAxNmM1OGMwN2M3YzM3ZjljMA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-02-16T19:53:27Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-02-16T19:53:27Z"}, "message": "CharBufferImpl.java: Inline super constructor.\n\n\n\t* java/nio/CharBufferImpl.java:  Inline super constructor.\n\t* java/nio/DoubleBufferImpl.java:  Likewise.\n\t* java/nio/FloatBufferImpl.java:  Likewise.\n\t* java/nio/IntBufferImpl.java:  Likewise.\n\t* java/nio/LongBufferImpl.java:  Likewise.\n\t* java/nio/ShortBufferImpl.java:  Likewise.\n\t* java/nio/CharBuffer.java:  Remove unused constructor.\n\t* java/nio/DoubleBuffer.java:  Likewise.\n\t* java/nio/FloatBuffer.java:  Likewise.\n\t* java/nio/IntBuffer.java:  Likewise.\n\t* java/nio/LongBuffer.java:  Likewise.\n\t* java/nio/ShortBuffer.java:  Likewise.\n\nFrom-SVN: r77916", "tree": {"sha": "b309290cd0061a0bbe493fb02aa73625d184bf72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b309290cd0061a0bbe493fb02aa73625d184bf72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf68bacaadccff4197ad92016c58c07c7c37f9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf68bacaadccff4197ad92016c58c07c7c37f9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf68bacaadccff4197ad92016c58c07c7c37f9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf68bacaadccff4197ad92016c58c07c7c37f9c0/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e9b6cf4e0ce78a26e08186c060496909a2774e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9b6cf4e0ce78a26e08186c060496909a2774e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9b6cf4e0ce78a26e08186c060496909a2774e3"}], "stats": {"total": 81, "additions": 33, "deletions": 48}, "files": [{"sha": "42af2973e4205c9cd33f1fb71d860e8537f76f5a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -1,3 +1,18 @@\n+2004-02-16  Per Bothner  <per@bothner.com>\n+\n+\t* java/nio/CharBufferImpl.java:  Inline super constructor.\n+\t* java/nio/DoubleBufferImpl.java:  Likewise.\n+\t* java/nio/FloatBufferImpl.java:  Likewise.\n+\t* java/nio/IntBufferImpl.java:  Likewise.\n+\t* java/nio/LongBufferImpl.java:  Likewise.\n+\t* java/nio/ShortBufferImpl.java:  Likewise.\n+\t* java/nio/CharBuffer.java:  Remove unused constructor.\n+\t* java/nio/DoubleBuffer.java:  Likewise.\n+\t* java/nio/FloatBuffer.java:  Likewise.\n+\t* java/nio/IntBuffer.java:  Likewise.\n+\t* java/nio/LongBuffer.java:  Likewise.\n+\t* java/nio/ShortBuffer.java:  Likewise.\n+\n 2004-02-15  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n \n \t* java/io/ObjectInputStream.java (readClassDescriptor): Avoid the"}, {"sha": "3d488bad345c8ff1562866fcfb6ab273d11de867", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class CharBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  CharBuffer (char[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>CharBuffer</code> object with a given capacity.\n    */"}, {"sha": "aacc2cb26582af252d479758411201427601f090", "filename": "libjava/java/nio/CharBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FCharBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class CharBufferImpl extends CharBuffer\n   \n   CharBufferImpl (char[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}, {"sha": "d669c2138c4e48187fe721a88257763703efa2ba", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class DoubleBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  DoubleBuffer (double[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>DoubleBuffer</code> object with a given capacity.\n    */"}, {"sha": "2c425dceb30ab7f82766a0de5f9f35039fb61454", "filename": "libjava/java/nio/DoubleBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class DoubleBufferImpl extends DoubleBuffer\n   \n   DoubleBufferImpl (double[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}, {"sha": "0c7b04dd0f5e7f8c594c6667c3a93a624076022a", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class FloatBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  FloatBuffer (float[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>FloatBuffer</code> object with a given capacity.\n    */"}, {"sha": "06584132499d4e25df84d3fb278b5a14f0a63cbb", "filename": "libjava/java/nio/FloatBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class FloatBufferImpl extends FloatBuffer\n   \n   FloatBufferImpl (float[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}, {"sha": "469a344ea7109015f1226319b9948710326e4700", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class IntBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  IntBuffer (int[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>IntBuffer</code> object with a given capacity.\n    */"}, {"sha": "f142827104a026b632ef9e1fde08d7c0b9f9d612", "filename": "libjava/java/nio/IntBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FIntBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class IntBufferImpl extends IntBuffer\n   \n   IntBufferImpl (int[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}, {"sha": "712e0b3b59a6e5a9da34e1b07c344f9bdc5eea4d", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class LongBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  LongBuffer (long[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>LongBuffer</code> object with a given capacity.\n    */"}, {"sha": "7f99f336686767cf33b7f8569a1175e48dda32d8", "filename": "libjava/java/nio/LongBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FLongBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class LongBufferImpl extends LongBuffer\n   \n   LongBufferImpl (long[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}, {"sha": "61097d04dd957cf9bca9cc5f1e43fbae7df7acc4", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -53,13 +53,6 @@ public abstract class ShortBuffer extends Buffer\n     array_offset = 0;\n   }\n \n-  ShortBuffer (short[] buffer, int offset, int capacity, int limit, int position, int mark)\n-  {\n-    super (capacity, limit, position, mark);\n-    this.backing_buffer = buffer;\n-    this.array_offset = offset;\n-  }\n-\n   /**\n    * Allocates a new <code>ShortBuffer</code> object with a given capacity.\n    */"}, {"sha": "938d5ce89d391ef67e46c1d7b611915cacd418e1", "filename": "libjava/java/nio/ShortBufferImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf68bacaadccff4197ad92016c58c07c7c37f9c0/libjava%2Fjava%2Fnio%2FShortBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBufferImpl.java?ref=cf68bacaadccff4197ad92016c58c07c7c37f9c0", "patch": "@@ -52,7 +52,9 @@ final class ShortBufferImpl extends ShortBuffer\n   \n   ShortBufferImpl (short[] buffer, int offset, int capacity, int limit, int position, int mark, boolean readOnly)\n   {\n-    super (buffer, offset, capacity, limit, position, mark);\n+    super (capacity, limit, position, mark);\n+    this.backing_buffer = buffer;\n+    this.array_offset = offset;\n     this.readOnly = readOnly;\n   }\n   "}]}