{"sha": "01738cee0f4ba9def10c783557f9341e9f9955ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MzhjZWUwZjRiYTlkZWYxMGM3ODM1NTdmOTM0MWU5Zjk5NTViYQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-05T18:06:21Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-05T18:06:21Z"}, "message": "re PR fortran/47180 ([OOP] EXTENDS_TYPE_OF returns the wrong result for disassociated polymorphic pointers)\n\n2011-01-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47180\n\t* trans-expr.c (gfc_trans_class_assign): For a polymorphic NULL pointer\n\tassignment, set the _vptr component to the declared type.\n\n\n2011-01-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47180\n\t* gfortran.dg/extends_type_of_2.f03: New.\n\nFrom-SVN: r168524", "tree": {"sha": "6307fe2558392a7d93f1ba49b724c9aee82395ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6307fe2558392a7d93f1ba49b724c9aee82395ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01738cee0f4ba9def10c783557f9341e9f9955ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01738cee0f4ba9def10c783557f9341e9f9955ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01738cee0f4ba9def10c783557f9341e9f9955ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01738cee0f4ba9def10c783557f9341e9f9955ba/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be2862278a6839e196a06e5e2df8b3c16755bbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2862278a6839e196a06e5e2df8b3c16755bbf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2862278a6839e196a06e5e2df8b3c16755bbf9"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "b7f5afe783566b1c549ed2d2437cdb8559d40773", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=01738cee0f4ba9def10c783557f9341e9f9955ba", "patch": "@@ -1,3 +1,9 @@\n+2011-01-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47180\n+\t* trans-expr.c (gfc_trans_class_assign): For a polymorphic NULL pointer\n+\tassignment, set the _vptr component to the declared type.\n+\n 2011-01-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/46017"}, {"sha": "fa58376980d4bf02a8002d2d5213da6c4f278bb4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=01738cee0f4ba9def10c783557f9341e9f9955ba", "patch": "@@ -6121,24 +6121,23 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n   if (expr2->ts.type != BT_CLASS)\n     {\n       /* Insert an additional assignment which sets the '_vptr' field.  */\n+      gfc_symbol *vtab;\n+      gfc_symtree *st;\n+\n       lhs = gfc_copy_expr (expr1);\n       gfc_add_vptr_component (lhs);\n+\n       if (expr2->ts.type == BT_DERIVED)\n-\t{\n-\t  gfc_symbol *vtab;\n-\t  gfc_symtree *st;\n-\t  vtab = gfc_find_derived_vtab (expr2->ts.u.derived);\n-\t  gcc_assert (vtab);\n-\t  rhs = gfc_get_expr ();\n-\t  rhs->expr_type = EXPR_VARIABLE;\n-\t  gfc_find_sym_tree (vtab->name, vtab->ns, 1, &st);\n-\t  rhs->symtree = st;\n-\t  rhs->ts = vtab->ts;\n-\t}\n+\tvtab = gfc_find_derived_vtab (expr2->ts.u.derived);\n       else if (expr2->expr_type == EXPR_NULL)\n-\trhs = gfc_get_int_expr (gfc_default_integer_kind, NULL, 0);\n-      else\n-\tgcc_unreachable ();\n+\tvtab = gfc_find_derived_vtab (expr1->ts.u.derived);\n+      gcc_assert (vtab);\n+\n+      rhs = gfc_get_expr ();\n+      rhs->expr_type = EXPR_VARIABLE;\n+      gfc_find_sym_tree (vtab->name, vtab->ns, 1, &st);\n+      rhs->symtree = st;\n+      rhs->ts = vtab->ts;\n \n       tmp = gfc_trans_pointer_assignment (lhs, rhs);\n       gfc_add_expr_to_block (&block, tmp);"}, {"sha": "ea5cac790bf09ab208870eec65672a4ab64ce75b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01738cee0f4ba9def10c783557f9341e9f9955ba", "patch": "@@ -1,3 +1,8 @@\n+2011-01-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47180\n+\t* gfortran.dg/extends_type_of_2.f03: New.\n+\n 2011-01-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.dg/stack-usage-1.c (SIZE): Provide proper value for __SPU__."}, {"sha": "f882cb1c6b02e5c5e7168478c47adeefbd2cc62c", "filename": "gcc/testsuite/gfortran.dg/extends_type_of_2.f03", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01738cee0f4ba9def10c783557f9341e9f9955ba/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_2.f03?ref=01738cee0f4ba9def10c783557f9341e9f9955ba", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR 47180: [OOP] EXTENDS_TYPE_OF returns the wrong result for disassociated polymorphic pointers \n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+implicit none\n+\n+type t1\n+  integer :: a\n+end type t1\n+\n+type, extends(t1):: t11\n+  integer :: b\n+end type t11\n+\n+type(t1)  , target  :: a1\n+type(t11) , target  :: a11\n+class(t1) , pointer :: b1\n+class(t11), pointer :: b11\n+\n+b1  => NULL()\n+b11 => NULL()\n+\n+if (.not. extends_type_of(b1 , a1)) call abort()\n+if (.not. extends_type_of(b11, a1)) call abort()\n+if (.not. extends_type_of(b11,a11)) call abort()\n+\n+b1  => a1\n+b11 => a11\n+\n+if (.not. extends_type_of(b1 , a1)) call abort()\n+if (.not. extends_type_of(b11, a1)) call abort()\n+if (.not. extends_type_of(b11,a11)) call abort()\n+\n+end"}]}