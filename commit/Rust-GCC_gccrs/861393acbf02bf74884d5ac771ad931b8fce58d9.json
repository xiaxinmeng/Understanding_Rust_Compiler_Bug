{"sha": "861393acbf02bf74884d5ac771ad931b8fce58d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxMzkzYWNiZjAyYmY3NDg4NGQ1YWM3NzFhZDkzMWI4ZmNlNThkOQ==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2015-01-06T18:57:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-06T18:57:06Z"}, "message": "go-gcc.cc (constructor_expression): Don't initialize zero-sized fields, just evaluate the values for side effects.\n\n\t* go-gcc.cc (constructor_expression): Don't initialize zero-sized\n\tfields, just evaluate the values for side effects.\n\nFrom-SVN: r219262", "tree": {"sha": "c72a82fab30d03f261706158518981f2188d52d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72a82fab30d03f261706158518981f2188d52d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861393acbf02bf74884d5ac771ad931b8fce58d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861393acbf02bf74884d5ac771ad931b8fce58d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861393acbf02bf74884d5ac771ad931b8fce58d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861393acbf02bf74884d5ac771ad931b8fce58d9/comments", "author": null, "committer": null, "parents": [{"sha": "f0cbb0afd9c76f539af8ecedb704036d1a734741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cbb0afd9c76f539af8ecedb704036d1a734741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cbb0afd9c76f539af8ecedb704036d1a734741"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "dba995c1f0ea49627a970deb597c9edc15448a47", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861393acbf02bf74884d5ac771ad931b8fce58d9/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861393acbf02bf74884d5ac771ad931b8fce58d9/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=861393acbf02bf74884d5ac771ad931b8fce58d9", "patch": "@@ -1,3 +1,8 @@\n+2015-01-06  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (constructor_expression): Don't initialize zero-sized\n+\tfields, just evaluate the values for side effects.\n+\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "18c7146baf6581fbaba1343de10c6e3a25e7474b", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861393acbf02bf74884d5ac771ad931b8fce58d9/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861393acbf02bf74884d5ac771ad931b8fce58d9/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=861393acbf02bf74884d5ac771ad931b8fce58d9", "patch": "@@ -1656,6 +1656,7 @@ Gcc_backend::constructor_expression(Btype* btype,\n   vec<constructor_elt, va_gc> *init;\n   vec_alloc(init, vals.size());\n \n+  tree sink = NULL_TREE;\n   bool is_constant = true;\n   tree field = TYPE_FIELDS(type_tree);\n   for (std::vector<Bexpression*>::const_iterator p = vals.begin();\n@@ -1669,6 +1670,17 @@ Gcc_backend::constructor_expression(Btype* btype,\n           || TREE_TYPE(val) == error_mark_node)\n         return this->error_expression();\n \n+      if (int_size_in_bytes(TREE_TYPE(field)) == 0)\n+\t{\n+\t  // GIMPLE cannot represent indices of zero-sized types so\n+\t  // trying to construct a map with zero-sized keys might lead\n+\t  // to errors.  Instead, we evaluate each expression that\n+\t  // would have been added as a map element for its\n+\t  // side-effects and construct an empty map.\n+\t  append_to_statement_list(val, &sink);\n+\t  continue;\n+\t}\n+\n       constructor_elt empty = {NULL, NULL};\n       constructor_elt* elt = init->quick_push(empty);\n       elt->index = field;\n@@ -1681,7 +1693,9 @@ Gcc_backend::constructor_expression(Btype* btype,\n   tree ret = build_constructor(type_tree, init);\n   if (is_constant)\n     TREE_CONSTANT(ret) = 1;\n-\n+  if (sink != NULL_TREE)\n+    ret = fold_build2_loc(location.gcc_location(), COMPOUND_EXPR,\n+\t\t\t  type_tree, sink, ret);\n   return this->make_expression(ret);\n }\n "}]}