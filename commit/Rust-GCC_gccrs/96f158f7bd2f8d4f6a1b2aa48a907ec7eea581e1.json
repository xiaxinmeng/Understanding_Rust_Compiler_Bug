{"sha": "96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmMTU4ZjdiZDJmOGQ0ZjZhMWIyYWE0OGE5MDdlYzdlZWE1ODFlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-16T11:25:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-16T11:25:50Z"}, "message": "(ASM_OUTPUT_SECTION_NAME): Define section attributes only when a\nsection is defined the first time.\n\nFrom-SVN: r11014", "tree": {"sha": "e8947f7bceadcadcfe388d0dcde1b0ede8f2bcb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8947f7bceadcadcfe388d0dcde1b0ede8f2bcb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1/comments", "author": null, "committer": null, "parents": [{"sha": "5aee39a5178a704fce37d837e4d4e8508cd10e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aee39a5178a704fce37d837e4d4e8508cd10e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aee39a5178a704fce37d837e4d4e8508cd10e94"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "94ebbfd00c5fcea1171038a1c7247f3c7b1e1b72", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=96f158f7bd2f8d4f6a1b2aa48a907ec7eea581e1", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for some\n    generic System V Release 4 system.\n-   Copyright (C) 1991, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 1995, 1996 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@segfault.us.com).\n \n This file is part of GNU CC.\n@@ -82,7 +82,7 @@ Boston, MA 02111-1307, USA.\n /* Provide an ASM_SPEC appropriate for svr4.  Here we try to support as\n    many of the specialized svr4 assembler options as seems reasonable,\n    given that there are certain options which we can't (or shouldn't)\n-   support directly due to the fact that they conflict with other options \n+   support directly due to the fact that they conflict with other options\n    for other svr4 tools (e.g. ld) or with other options for GCC itself.\n    For example, we don't support the -o (output file) or -R (remove\n    input file) options because GCC already handles these things.  We\n@@ -592,16 +592,62 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* Switch into a generic section.\n-   This is currently only used to support section attributes.\n-\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n-  fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n-\t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n \n+/*\n+ * Switch into a generic section.\n+ *\n+ * We make the section read-only and executable for a function decl,\n+ * read-only for a const data decl, and writable for a non-const data decl.\n+ *\n+ * If the section has already been defined, we must not\n+ * emit the attributes here. The SVR4 assembler does not\n+ * recognize section redefinitions.\n+ * If DECL is NULL, no attributes are emitted.\n+ */\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  static struct section_info\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      struct section_info *next;\t\t\t\t        \\\n+      char *name;\t\t\t\t\t\t        \\\n+      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n+    } *sections;\t\t\t\t\t\t\t\\\n+  struct section_info *s;\t\t\t\t\t\t\\\n+  char *mode;\t\t\t\t\t\t\t\t\\\n+  enum sect_enum type;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (s = sections; s; s = s->next)\t\t\t\t\t\\\n+    if (!strcmp (NAME, s->name))\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (DECL)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+\ttype = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n+      else if (TREE_READONLY(DECL))\t\t\t\t\t\\\n+\ttype = SECT_RO, mode = \"a\";\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\ttype = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (s == 0 && DECL)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      s = (struct section_info *) xmalloc (sizeof (struct section_info));  \\\n+      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));\t\t\\\n+      strcpy (s->name, NAME);\t\t\t\t\t\t\\\n+      s->type = type;\t\t\t\t\t\t\t\\\n+      s->next = sections;\t\t\t\t\t\t\\\n+      sections = s;\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, mode);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (DECL && s->type != type)\t\t\t\t\t\\\n+\terror_with_decl (DECL, \"%s causes a section type conflict\");\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \".section\\t%s\\n\", NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}]}