{"sha": "a0bb35c7749eee02213658ece0a5ac8347496fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiYjM1Yzc3NDllZWUwMjIxMzY1OGVjZTBhNWFjODM0NzQ5NmZlZg==", "commit": {"author": {"name": "Andreas Simbuerger", "email": "simbuerg@fim.uni-passau.de", "date": "2010-05-06T21:53:29Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-06T21:53:29Z"}, "message": "Resolve CLooG's value_* macros to their respective mpz_* counterparts.\n\n2010-04-11  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n\n\t* graphite-blocking.c (pbb_strip_mine_profitable_p): Resolve\n\tCLooG's value_* macros to their respective mpz_* counterparts.\n\t* graphite-clast-to-gimple.c (clast_to_gcc_expression): Same.\n\t(graphite_create_new_loop_guard): Same.\n\t* graphite-interchange.c (build_linearized_memory_access): Same.\n\t(pdr_stride_in_loop): Same.\n\t(memory_strides_in_loop_1): Same.\n\t(1st_interchange_profitable_p): Same.\n\t* graphite-poly.c (extend_scattering): Same.\n\t(psct_scattering_dim_for_loop_depth): Same.\n\t(pbb_number_of_iterations): Same.\n\t(pbb_number_of_iterations_at_time): Same.\n\t* graphite-poly.h (new_1st_loop): Same.\n\t* graphite-ppl.c (cloog_matrix_to_ppl_constraint): Same.\n\t(oppose_constraint): Same.\n\t(insert_constraint_into_matrix): Same.\n\t(ppl_set_inhomogeneous_gmp): Same.\n\t(ppl_set_coef_gmp): Same.\n\t(ppl_strip_loop): Same.\n\t(ppl_lexico_compare_linear_expressions): Same.\n\t(ppl_max_for_le_pointset): Same.\n\t(ppl_min_for_le_pointset): Same.\n\t(ppl_build_realtion): Same.\n\t* graphite-ppl.h (gmp_cst_to_tree): Same.\n\t(ppl_set_inhomogeneous): Same.\n\t(ppl_set_inhomogeneous_tree): Same.\n\t(ppl_set_coef): Same.\n\t(ppl_set_coef_tree): Same.\n\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Same.\n\t(build_scop_scattering): Same.\n\t(add_value_to_dim): Same.\n\t(scan_tree_for_params_right_scev): Same.\n\t(scan_tree_for_params_int): Same.\n\t(scan_tree_for_params): Same.\n\t(find_params_in_bb): Same.\n\t(find_scop_parameters): Same.\n\t(add_upper_bounds_from_estimated_nit): Same.\n\t(build_loop_iteration_domains): Same.\n\t(create_linear_expr_from_tree): Same.\n\t(add_condition_to_domain): Same.\n\t(pdr_add_memory_accesses): Same.\n\nFrom-SVN: r159132", "tree": {"sha": "139fa3121690e6edcefc6c130c481df1d4f69810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139fa3121690e6edcefc6c130c481df1d4f69810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0bb35c7749eee02213658ece0a5ac8347496fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bb35c7749eee02213658ece0a5ac8347496fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bb35c7749eee02213658ece0a5ac8347496fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bb35c7749eee02213658ece0a5ac8347496fef/comments", "author": {"login": "simbuerg", "id": 598281, "node_id": "MDQ6VXNlcjU5ODI4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/598281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simbuerg", "html_url": "https://github.com/simbuerg", "followers_url": "https://api.github.com/users/simbuerg/followers", "following_url": "https://api.github.com/users/simbuerg/following{/other_user}", "gists_url": "https://api.github.com/users/simbuerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/simbuerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simbuerg/subscriptions", "organizations_url": "https://api.github.com/users/simbuerg/orgs", "repos_url": "https://api.github.com/users/simbuerg/repos", "events_url": "https://api.github.com/users/simbuerg/events{/privacy}", "received_events_url": "https://api.github.com/users/simbuerg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c2101daa9fd45e83de153275c7650950f1b7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2101daa9fd45e83de153275c7650950f1b7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c2101daa9fd45e83de153275c7650950f1b7de"}], "stats": {"total": 385, "additions": 218, "deletions": 167}, "files": [{"sha": "1bea4934fe9f77af7fad4cfa8a02e22c0f527648", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -1,3 +1,47 @@\n+2010-04-11  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n+\n+\t* graphite-blocking.c (pbb_strip_mine_profitable_p): Resolve \n+\tCLooG's value_* macros to their respective mpz_* counterparts.\n+\t* graphite-clast-to-gimple.c (clast_to_gcc_expression): Same.\n+\t(graphite_create_new_loop_guard): Same.\n+\t* graphite-interchange.c (build_linearized_memory_access): Same.\n+\t(pdr_stride_in_loop): Same.\n+\t(memory_strides_in_loop_1): Same.\n+\t(1st_interchange_profitable_p): Same.\n+\t* graphite-poly.c (extend_scattering): Same.\n+\t(psct_scattering_dim_for_loop_depth): Same.\n+\t(pbb_number_of_iterations): Same.\n+\t(pbb_number_of_iterations_at_time): Same.\n+\t* graphite-poly.h (new_1st_loop): Same.\n+\t* graphite-ppl.c (cloog_matrix_to_ppl_constraint): Same.\n+\t(oppose_constraint): Same.\n+\t(insert_constraint_into_matrix): Same.\n+\t(ppl_set_inhomogeneous_gmp): Same.\n+\t(ppl_set_coef_gmp): Same.\n+\t(ppl_strip_loop): Same.\n+\t(ppl_lexico_compare_linear_expressions): Same.\n+\t(ppl_max_for_le_pointset): Same.\n+\t(ppl_min_for_le_pointset): Same.\n+\t(ppl_build_realtion): Same.\n+\t* graphite-ppl.h (gmp_cst_to_tree): Same.\n+\t(ppl_set_inhomogeneous): Same.\n+\t(ppl_set_inhomogeneous_tree): Same.\n+\t(ppl_set_coef): Same.\n+\t(ppl_set_coef_tree): Same.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Same.\n+\t(build_scop_scattering): Same.\n+\t(add_value_to_dim): Same.\n+\t(scan_tree_for_params_right_scev): Same.\n+\t(scan_tree_for_params_int): Same.\n+\t(scan_tree_for_params): Same.\n+\t(find_params_in_bb): Same.\n+\t(find_scop_parameters): Same.\n+\t(add_upper_bounds_from_estimated_nit): Same.\n+\t(build_loop_iteration_domains): Same.\n+\t(create_linear_expr_from_tree): Same.\n+\t(add_condition_to_domain): Same.\n+\t(pdr_add_memory_accesses): Same.\n+\n 2010-04-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/43519"}, {"sha": "402e5f6ba47cd8815cdacd97c60bd815b05f6670", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -184,13 +184,13 @@ pbb_strip_mine_profitable_p (poly_bb_p pbb,\n   Value niter, strip_stride;\n   bool res;\n \n-  value_init (strip_stride);\n-  value_init (niter);\n-  value_set_si (strip_stride, stride);\n+  mpz_init (strip_stride);\n+  mpz_init (niter);\n+  mpz_set_si (strip_stride, stride);\n   pbb_number_of_iterations_at_time (pbb, psct_dynamic_dim (pbb, depth), niter);\n-  res = value_gt (niter, strip_stride);\n-  value_clear (strip_stride);\n-  value_clear (niter);\n+  res = (mpz_cmp (niter, strip_stride) > 0);\n+  mpz_clear (strip_stride);\n+  mpz_clear (niter);\n \n   return res;\n }"}, {"sha": "e433cefeb2d702de79c4abe8c967a0c6cd27d6db", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -311,7 +311,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n \n \tif (t->var)\n \t  {\n-\t    if (value_one_p (t->val))\n+\t    if (mpz_cmp_si (t->val, 1) == 0)\n \t      {\n \t\ttree name = clast_name_to_gcc (t->var, region, newivs,\n \t\t\t\t\t       newivs_index, params_index);\n@@ -323,7 +323,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n \t\treturn name;\n \t      }\n \n-\t    else if (value_mone_p (t->val))\n+\t    else if (mpz_cmp_si (t->val, -1) == 0)\n \t      {\n \t\ttree name = clast_name_to_gcc (t->var, region, newivs,\n \t\t\t\t\t       newivs_index, params_index);\n@@ -1036,11 +1036,11 @@ graphite_create_new_loop_guard (sese region, edge entry_edge,\n      However lb < ub + 1 is false, as expected.  */\n   tree one;\n   Value gmp_one;\n-\n-  value_init (gmp_one);\n-  value_set_si (gmp_one, 1);\n+  \n+  mpz_init (gmp_one);\n+  mpz_set_si (gmp_one, 1);\n   one = gmp_cst_to_tree (type, gmp_one);\n-  value_clear (gmp_one);\n+  mpz_clear (gmp_one);\n \n   ub_one = fold_build2 (POINTER_TYPE_P (type) ? POINTER_PLUS_EXPR : PLUS_EXPR,\n \t\t\ttype, ub, one);"}, {"sha": "9e8181b62a311e52d385c11787752d564f4cc8d0", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -83,10 +83,10 @@ build_linearized_memory_access (ppl_dimension_type offset, poly_dr_p pdr)\n \n   ppl_new_Linear_Expression_with_dimension (&res, dim);\n \n-  value_init (size);\n-  value_set_si (size, 1);\n-  value_init (sub_size);\n-  value_set_si (sub_size, 1);\n+  mpz_init (size);\n+  mpz_set_si (size, 1);\n+  mpz_init (sub_size);\n+  mpz_set_si (sub_size, 1);\n \n   for (i = last - 1; i >= first; i--)\n     {\n@@ -95,12 +95,12 @@ build_linearized_memory_access (ppl_dimension_type offset, poly_dr_p pdr)\n       ppl_new_Linear_Expression_with_dimension (&le, dim - offset);\n       ppl_set_coef (le, i, 1);\n       ppl_max_for_le_pointset (PDR_ACCESSES (pdr), le, sub_size);\n-      value_multiply (size, size, sub_size);\n+      mpz_mul (size, size, sub_size);\n       ppl_delete_Linear_Expression (le);\n     }\n \n-  value_clear (sub_size);\n-  value_clear (size);\n+  mpz_clear (sub_size);\n+  mpz_clear (size);\n   return res;\n }\n \n@@ -319,9 +319,15 @@ pdr_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n+      char *str;\n+      void (*gmp_free) (void *, size_t);\n+      \n       fprintf (dump_file, \"\\nStride in BB_%d, DR_%d, depth %d:\",\n \t       pbb_index (pbb), PDR_ID (pdr), (int) depth);\n-      value_print (dump_file, \"  %s \", stride);\n+      str = mpz_get_str (0, 10, stride);\n+      fprintf (dump_file, \"  %s \", str);\n+      mp_get_memory_functions (NULL, NULL, &gmp_free);\n+      (*gmp_free) (str, strlen (str) + 1);\n     }\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (p1);\n@@ -341,8 +347,8 @@ memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n   poly_dr_p pdr;\n   Value s, n;\n \n-  value_init (s);\n-  value_init (n);\n+  mpz_init (s);\n+  mpz_init (n);\n \n   for (j = 0; VEC_iterate (lst_p, LST_SEQ (loop), j, l); j++)\n     if (LST_LOOP_P (l))\n@@ -351,13 +357,13 @@ memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n       for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (LST_PBB (l)), i, pdr); i++)\n \t{\n \t  pdr_stride_in_loop (s, depth, pdr);\n-\t  value_set_si (n, PDR_NB_REFS (pdr));\n-\t  value_multiply (s, s, n);\n-\t  value_addto (strides, strides, s);\n+\t  mpz_set_si (n, PDR_NB_REFS (pdr));\n+\t  mpz_mul (s, s, n);\n+\t  mpz_add (strides, strides, s);\n \t}\n \n-  value_clear (s);\n-  value_clear (n);\n+  mpz_clear (s);\n+  mpz_clear (n);\n }\n \n /* Sets STRIDES to the sum of all the strides of the data references\n@@ -366,13 +372,13 @@ memory_strides_in_loop_1 (lst_p loop, graphite_dim_t depth, Value strides)\n static void\n memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n {\n-  if (value_mone_p (loop->memory_strides))\n+  if (mpz_cmp_si (loop->memory_strides, -1) == 0)\n     {\n-      value_set_si (strides, 0);\n+      mpz_set_si (strides, 0);\n       memory_strides_in_loop_1 (loop, depth, strides);\n     }\n   else\n-    value_assign (strides, loop->memory_strides);\n+    mpz_set (strides, loop->memory_strides);\n }\n \n /* Return true when the interchange of loops LOOP1 and LOOP2 is\n@@ -466,16 +472,16 @@ lst_interchange_profitable_p (lst_p loop1, lst_p loop2)\n \t      && LST_LOOP_P (loop1) && LST_LOOP_P (loop2)\n \t      && lst_depth (loop1) < lst_depth (loop2));\n \n-  value_init (d1);\n-  value_init (d2);\n+  mpz_init (d1);\n+  mpz_init (d2);\n \n   memory_strides_in_loop (loop1, lst_depth (loop1), d1);\n   memory_strides_in_loop (loop2, lst_depth (loop2), d2);\n \n   res = value_lt (d1, d2);\n \n-  value_clear (d1);\n-  value_clear (d2);\n+  mpz_clear (d1);\n+  mpz_clear (d2);\n \n   return res;\n }"}, {"sha": "586658ff75f29c7ab6f7b54b77d5e9cc677ac3c9", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -83,8 +83,8 @@ extend_scattering (poly_bb_p pbb, int max_scattering)\n   Value one;\n \n   nb_added_dims = max_scattering - pbb_nb_scattering_transform (pbb);\n-  value_init (one);\n-  value_set_si (one, 1);\n+  mpz_init (one);\n+  mpz_set_si (one, 1);\n   ppl_new_Coefficient (&coef);\n   ppl_assign_Coefficient_from_mpz_t (coef, one);\n \n@@ -113,7 +113,7 @@ extend_scattering (poly_bb_p pbb, int max_scattering)\n     }\n \n   ppl_delete_Coefficient (coef);\n-  value_clear (one);\n+  mpz_clear (one);\n }\n \n /* All scattering matrices in SCOP will have the same number of scattering\n@@ -1001,7 +1001,7 @@ psct_scattering_dim_for_loop_depth (poly_bb_p pbb, graphite_dim_t loop_depth)\n   Value val;\n   graphite_dim_t i;\n \n-  value_init (val);\n+  mpz_init (val);\n   ppl_new_Coefficient (&coef);\n   ppl_Polyhedron_get_constraints (ph, &pcs);\n   ppl_new_Constraint_System_const_iterator (&cit);\n@@ -1017,7 +1017,7 @@ psct_scattering_dim_for_loop_depth (poly_bb_p pbb, graphite_dim_t loop_depth)\n       ppl_Linear_Expression_coefficient (expr, iter, coef);\n       ppl_Coefficient_to_mpz_t (coef, val);\n \n-      if (value_zero_p (val))\n+      if (mpz_sgn (val))\n \t{\n \t  ppl_delete_Linear_Expression (expr);\n \t  continue;\n@@ -1032,7 +1032,7 @@ psct_scattering_dim_for_loop_depth (poly_bb_p pbb, graphite_dim_t loop_depth)\n \n \t  if (value_notzero_p (val))\n \t    {\n-\t      value_clear (val);\n+\t      mpz_clear (val);\n \t      ppl_delete_Linear_Expression (expr);\n \t      ppl_delete_Coefficient (coef);\n \t      ppl_delete_Constraint_System_const_iterator (cit);\n@@ -1060,7 +1060,7 @@ pbb_number_of_iterations (poly_bb_p pbb,\n   ppl_Pointset_Powerset_C_Polyhedron_space_dimension (PBB_DOMAIN (pbb), &dim);\n   ppl_new_Linear_Expression_with_dimension (&le, dim);\n   ppl_set_coef (le, pbb_iterator_dim (pbb, loop_depth), 1);\n-  value_set_si (niter, -1);\n+  mpz_set_si (niter, -1);\n   ppl_max_for_le_pointset (PBB_DOMAIN (pbb), le, niter);\n   ppl_delete_Linear_Expression (le);\n }\n@@ -1106,7 +1106,7 @@ pbb_number_of_iterations_at_time (poly_bb_p pbb,\n   ppl_Pointset_Powerset_C_Polyhedron_space_dimension (sctr, &dim);\n   ppl_new_Linear_Expression_with_dimension (&le, dim);\n   ppl_set_coef (le, time_depth, 1);\n-  value_set_si (niter, -1);\n+  mpz_set_si (niter, -1);\n   ppl_max_for_le_pointset (sctr, le, niter);\n \n   ppl_delete_Linear_Expression (le);"}, {"sha": "e5743c28ed562d0949a6e94ff40dfda60abd05a9", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -681,8 +681,8 @@ new_lst_loop (VEC (lst_p, heap) *seq)\n   LST_LOOP_P (lst) = true;\n   LST_SEQ (lst) = seq;\n   LST_LOOP_FATHER (lst) = NULL;\n-  value_init (LST_LOOP_MEMORY_STRIDES (lst));\n-  value_set_si (LST_LOOP_MEMORY_STRIDES (lst), -1);\n+  mpz_init (LST_LOOP_MEMORY_STRIDES (lst));\n+  mpz_set_si (LST_LOOP_MEMORY_STRIDES (lst), -1);\n \n   for (i = 0; VEC_iterate (lst_p, seq, i, l); i++)\n     LST_LOOP_FATHER (l) = lst;\n@@ -719,7 +719,7 @@ free_lst (lst_p lst)\n       for (i = 0; VEC_iterate (lst_p, LST_SEQ (lst), i, l); i++)\n \tfree_lst (l);\n \n-      value_clear (LST_LOOP_MEMORY_STRIDES (lst));\n+      mpz_clear (LST_LOOP_MEMORY_STRIDES (lst));\n       VEC_free (lst_p, heap, LST_SEQ (lst));\n     }\n "}, {"sha": "93b99cbfb1968bf1c08969b33c17b8482b5174b8", "filename": "gcc/graphite-ppl.c", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-ppl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-ppl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n \n #ifdef HAVE_cloog\n+\n #include \"ppl_c.h\"\n #include \"cloog/cloog.h\"\n #include \"graphite-ppl.h\"\n@@ -55,7 +56,7 @@ cloog_matrix_to_ppl_constraint (CloogMatrix *matrix, int row)\n   ppl_Linear_Expression_add_to_inhomogeneous (expr, coef);\n   ppl_delete_Coefficient (coef);\n \n-  if (value_zero_p (matrix->p[row][0]))\n+  if (mpz_sgn (matrix->p[row][0]))\n     ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_EQUAL);\n   else\n     ppl_new_Constraint (&cstr, expr, PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL);\n@@ -122,7 +123,7 @@ oppose_constraint (CloogMatrix *m, int row)\n \n   /* Do not oppose the first column: it is the eq/ineq one.  */\n   for (k = 1; k < m->NbColumns; k++)\n-    value_oppose (m->p[row][k], m->p[row][k]);\n+    mpz_neg (m->p[row][k], m->p[row][k]);\n }\n \n /* Inserts constraint CSTR at row ROW of matrix M.  */\n@@ -144,18 +145,18 @@ insert_constraint_into_matrix (CloogMatrix *m, int row,\n     }\n \n   for (i = dim; i < nb_cols - 1; i++)\n-    value_set_si (m->p[row][i + 1], 0);\n+    mpz_set_si (m->p[row][i + 1], 0);\n \n   ppl_Constraint_inhomogeneous_term  (cstr, c);\n   ppl_Coefficient_to_mpz_t (c, m->p[row][nb_cols - 1]);\n-  value_set_si (m->p[row][0], 1);\n+  mpz_set_si (m->p[row][0], 1);\n \n   switch (ppl_Constraint_type (cstr))\n     {\n     case PPL_CONSTRAINT_TYPE_LESS_THAN:\n       oppose_constraint (m, row);\n     case PPL_CONSTRAINT_TYPE_GREATER_THAN:\n-      value_sub_int (m->p[row][nb_cols - 1],\n+      mpz_sub_ui (m->p[row][nb_cols - 1],\n \t\t     m->p[row][nb_cols - 1], 1);\n       break;\n \n@@ -165,7 +166,7 @@ insert_constraint_into_matrix (CloogMatrix *m, int row,\n       break;\n \n     case PPL_CONSTRAINT_TYPE_EQUAL:\n-      value_set_si (m->p[row][0], 0);\n+      mpz_set_si (m->p[row][0], 0);\n       break;\n \n     default:\n@@ -280,20 +281,20 @@ ppl_set_inhomogeneous_gmp (ppl_Linear_Expression_t e, Value x)\n   Value v0, v1;\n   ppl_Coefficient_t c;\n \n-  value_init (v0);\n-  value_init (v1);\n+  mpz_init (v0);\n+  mpz_init (v1);\n   ppl_new_Coefficient (&c);\n \n   ppl_Linear_Expression_inhomogeneous_term (e, c);\n   ppl_Coefficient_to_mpz_t (c, v1);\n-  value_oppose (v1, v1);\n-  value_assign (v0, x);\n-  value_addto (v0, v0, v1);\n+  mpz_neg (v1, v1);\n+  mpz_set (v0, x);\n+  mpz_add (v0, v0, v1);\n   ppl_assign_Coefficient_from_mpz_t (c, v0);\n   ppl_Linear_Expression_add_to_inhomogeneous (e, c);\n \n-  value_clear (v0);\n-  value_clear (v1);\n+  mpz_clear (v0);\n+  mpz_clear (v1);\n   ppl_delete_Coefficient (c);\n }\n \n@@ -305,20 +306,20 @@ ppl_set_coef_gmp (ppl_Linear_Expression_t e, ppl_dimension_type i, Value x)\n   Value v0, v1;\n   ppl_Coefficient_t c;\n \n-  value_init (v0);\n-  value_init (v1);\n+  mpz_init (v0);\n+  mpz_init (v1);\n   ppl_new_Coefficient (&c);\n \n   ppl_Linear_Expression_coefficient (e, i, c);\n   ppl_Coefficient_to_mpz_t (c, v1);\n-  value_oppose (v1, v1);\n-  value_assign (v0, x);\n-  value_addto (v0, v0, v1);\n+  mpz_neg (v1, v1);\n+  mpz_set (v0, x);\n+  mpz_add (v0, v0, v1);\n   ppl_assign_Coefficient_from_mpz_t (c, v0);\n   ppl_Linear_Expression_add_to_coefficient (e, i, c);\n \n-  value_clear (v0);\n-  value_clear (v1);\n+  mpz_clear (v0);\n+  mpz_clear (v1);\n   ppl_delete_Coefficient (c);\n }\n \n@@ -423,7 +424,7 @@ ppl_strip_loop (ppl_Polyhedron_t ph, ppl_dimension_type loop, int stride)\n   ppl_Coefficient_t c;\n   Value val;\n \n-  value_init (val);\n+  mpz_init (val);\n   ppl_new_Coefficient (&c);\n \n   ppl_Polyhedron_space_dimension (ph, &dim);\n@@ -455,7 +456,7 @@ ppl_strip_loop (ppl_Polyhedron_t ph, ppl_dimension_type loop, int stride)\n \tppl_Linear_Expression_coefficient (expr, loop, c);\n \tppl_delete_Linear_Expression (expr);\n \tppl_Coefficient_to_mpz_t (c, val);\n-\tv = value_get_si (val);\n+\tv = mpz_get_si (val);\n \n \tif (0 < v || v < 0)\n \t  ppl_Polyhedron_add_constraint (tmp, cstr);\n@@ -499,7 +500,7 @@ ppl_strip_loop (ppl_Polyhedron_t ph, ppl_dimension_type loop, int stride)\n     ppl_delete_Constraint (new_cstr);\n   }\n \n-  value_clear (val);\n+  mpz_clear (val);\n   ppl_delete_Coefficient (c);\n   return res;\n }\n@@ -520,8 +521,8 @@ ppl_lexico_compare_linear_expressions (ppl_Linear_Expression_t a,\n   ppl_Linear_Expression_space_dimension (a, &length1);\n   ppl_Linear_Expression_space_dimension (b, &length2);\n   ppl_new_Coefficient (&c);\n-  value_init (va);\n-  value_init (vb);\n+  mpz_init (va);\n+  mpz_init (vb);\n \n   if (length1 < length2)\n     min_length = length1;\n@@ -534,19 +535,19 @@ ppl_lexico_compare_linear_expressions (ppl_Linear_Expression_t a,\n       ppl_Coefficient_to_mpz_t (c, va);\n       ppl_Linear_Expression_coefficient (b, i, c);\n       ppl_Coefficient_to_mpz_t (c, vb);\n-      res = value_compare (va, vb);\n+      res = mpz_cmp (va, vb);\n \n       if (res == 0)\n \tcontinue;\n \n-      value_clear (va);\n-      value_clear (vb);\n+      mpz_clear (va);\n+      mpz_clear (vb);\n       ppl_delete_Coefficient (c);\n       return res;\n     }\n \n-  value_clear (va);\n-  value_clear (vb);\n+  mpz_clear (va);\n+  mpz_clear (vb);\n   ppl_delete_Coefficient (c);\n   return length1 - length2;\n }\n@@ -653,8 +654,8 @@ ppl_max_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n   Value dv, nv;\n   int maximum, err;\n \n-  value_init (nv);\n-  value_init (dv);\n+  mpz_init (nv);\n+  mpz_init (dv);\n   ppl_new_Coefficient (&num);\n   ppl_new_Coefficient (&denom);\n   err = ppl_Pointset_Powerset_C_Polyhedron_maximize (ps, le, num, denom, &maximum);\n@@ -664,11 +665,11 @@ ppl_max_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n       ppl_Coefficient_to_mpz_t (num, nv);\n       ppl_Coefficient_to_mpz_t (denom, dv);\n       gcc_assert (value_notzero_p (dv));\n-      value_division (res, nv, dv);\n+      mpz_tdiv_q (res, nv, dv);\n     }\n \n-  value_clear (nv);\n-  value_clear (dv);\n+  mpz_clear (nv);\n+  mpz_clear (dv);\n   ppl_delete_Coefficient (num);\n   ppl_delete_Coefficient (denom);\n }\n@@ -684,8 +685,8 @@ ppl_min_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n   Value dv, nv;\n   int minimum, err;\n \n-  value_init (nv);\n-  value_init (dv);\n+  mpz_init (nv);\n+  mpz_init (dv);\n   ppl_new_Coefficient (&num);\n   ppl_new_Coefficient (&denom);\n   err = ppl_Pointset_Powerset_C_Polyhedron_minimize (ps, le, num, denom, &minimum);\n@@ -695,11 +696,11 @@ ppl_min_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n       ppl_Coefficient_to_mpz_t (num, nv);\n       ppl_Coefficient_to_mpz_t (denom, dv);\n       gcc_assert (value_notzero_p (dv));\n-      value_division (res, nv, dv);\n+      mpz_tdiv_q (res, nv, dv);\n     }\n \n-  value_clear (nv);\n-  value_clear (dv);\n+  mpz_clear (nv);\n+  mpz_clear (dv);\n   ppl_delete_Coefficient (num);\n   ppl_delete_Coefficient (denom);\n }\n@@ -716,13 +717,13 @@ ppl_build_relation (int dim, int pos1, int pos2, int c,\n   ppl_Coefficient_t coef;\n   Value v, v_op, v_c;\n \n-  value_init (v);\n-  value_init (v_op);\n-  value_init (v_c);\n+  mpz_init (v);\n+  mpz_init (v_op);\n+  mpz_init (v_c);\n \n-  value_set_si (v, 1);\n-  value_set_si (v_op, -1);\n-  value_set_si (v_c, c);\n+  mpz_set_si (v, 1);\n+  mpz_set_si (v_op, -1);\n+  mpz_set_si (v_c, c);\n \n   ppl_new_Coefficient (&coef);\n   ppl_new_Linear_Expression_with_dimension (&expr, dim);\n@@ -738,9 +739,9 @@ ppl_build_relation (int dim, int pos1, int pos2, int c,\n \n   ppl_delete_Linear_Expression (expr);\n   ppl_delete_Coefficient (coef);\n-  value_clear (v);\n-  value_clear (v_op);\n-  value_clear (v_c);\n+  mpz_clear (v);\n+  mpz_clear (v_op);\n+  mpz_clear (v_c);\n \n   return cstr;\n }"}, {"sha": "f5ab2f1acafee922bb93ff530094aabfea52cadf", "filename": "gcc/graphite-ppl.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-ppl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-ppl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.h?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -71,10 +71,10 @@ gmp_cst_to_tree (tree type, Value val)\n   Value tmp;\n   double_int di;\n \n-  value_init (tmp);\n-  value_assign (tmp, val);\n+  mpz_init (tmp);\n+  mpz_set (tmp, val);\n   di = mpz_get_double_int (t, tmp, true);\n-  value_clear (tmp);\n+  mpz_clear (tmp);\n \n   return double_int_to_tree (t, di);\n }\n@@ -85,10 +85,10 @@ static inline void\n ppl_set_inhomogeneous (ppl_Linear_Expression_t e, int x)\n {\n   Value v;\n-  value_init (v);\n-  value_set_si (v, x);\n+  mpz_init (v);\n+  mpz_set_si (v, x);\n   ppl_set_inhomogeneous_gmp (e, v);\n-  value_clear (v);\n+  mpz_clear (v);\n }\n \n /* Set the inhomogeneous term of E to the tree X.  */\n@@ -97,10 +97,10 @@ static inline void\n ppl_set_inhomogeneous_tree (ppl_Linear_Expression_t e, tree x)\n {\n   Value v;\n-  value_init (v);\n+  mpz_init (v);\n   tree_int_to_gmp (x, v);\n   ppl_set_inhomogeneous_gmp (e, v);\n-  value_clear (v);\n+  mpz_clear (v);\n }\n \n /* Set E[I] to integer X.  */\n@@ -109,10 +109,10 @@ static inline void\n ppl_set_coef (ppl_Linear_Expression_t e, ppl_dimension_type i, int x)\n {\n   Value v;\n-  value_init (v);\n-  value_set_si (v, x);\n+  mpz_init (v);\n+  mpz_set_si (v, x);\n   ppl_set_coef_gmp (e, i, v);\n-  value_clear (v);\n+  mpz_clear (v);\n }\n \n /* Set E[I] to tree X.  */\n@@ -121,20 +121,20 @@ static inline void\n ppl_set_coef_tree (ppl_Linear_Expression_t e, ppl_dimension_type i, tree x)\n {\n   Value v;\n-  value_init (v);\n+  mpz_init (v);\n   tree_int_to_gmp (x, v);\n   ppl_set_coef_gmp (e, i, v);\n-  value_clear (v);\n+  mpz_clear (v);\n }\n \n /* Sets RES to the max of V1 and V2.  */\n \n static inline void\n value_max (Value res, Value v1, Value v2)\n {\n-  if (value_compare (v1, v2) < 0)\n-    value_assign (res, v2);\n-  value_assign (res, v1);\n+  if (mpz_cmp (v1, v2) < 0)\n+    mpz_set (res, v2);\n+  mpz_set (res, v1);\n }\n \n /* Builds a new identity map for dimension DIM.  */"}, {"sha": "9f5ee8a8e5a740097daf100705b6d7ea7fbe037d", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0bb35c7749eee02213658ece0a5ac8347496fef/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=a0bb35c7749eee02213658ece0a5ac8347496fef", "patch": "@@ -519,7 +519,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n \n   gcc_assert (scattering_dimensions >= used_scattering_dimensions);\n \n-  value_init (v);\n+  mpz_init (v);\n   ppl_new_Coefficient (&c);\n   PBB_TRANSFORMED (pbb) = poly_scattering_new ();\n   ppl_new_C_Polyhedron_from_space_dimension\n@@ -533,7 +533,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n       ppl_Linear_Expression_t expr;\n \n       ppl_new_Linear_Expression_with_dimension (&expr, dim);\n-      value_set_si (v, 1);\n+      mpz_set_si (v, 1);\n       ppl_assign_Coefficient_from_mpz_t (c, v);\n       ppl_Linear_Expression_add_to_coefficient (expr, i, c);\n \n@@ -542,7 +542,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n \t{\n \t  ppl_Linear_Expression_coefficient (static_schedule, i / 2, c);\n \t  ppl_Coefficient_to_mpz_t (c, v);\n-\t  value_oppose (v, v);\n+\t  mpz_neg (v, v);\n \t  ppl_assign_Coefficient_from_mpz_t (c, v);\n \t  ppl_Linear_Expression_add_to_inhomogeneous (expr, c);\n \t}\n@@ -552,7 +552,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n \t{\n \t  int loop = (i - 1) / 2;\n \n-\t  value_set_si (v, -1);\n+\t  mpz_set_si (v, -1);\n \t  ppl_assign_Coefficient_from_mpz_t (c, v);\n \t  ppl_Linear_Expression_add_to_coefficient\n \t    (expr, scattering_dimensions + loop, c);\n@@ -564,7 +564,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n       ppl_delete_Constraint (cstr);\n     }\n \n-  value_clear (v);\n+  mpz_clear (v);\n   ppl_delete_Coefficient (c);\n \n   PBB_ORIGINAL (pbb) = poly_scattering_copy (PBB_TRANSFORMED (pbb));\n@@ -616,15 +616,15 @@ build_scop_scattering (scop_p scop)\n   ppl_Coefficient_t c;\n   Value v;\n \n-  value_init (v);\n+  mpz_init (v);\n   ppl_new_Coefficient (&c);\n   ppl_new_Linear_Expression (&static_schedule);\n \n   /* We have to start schedules at 0 on the first component and\n      because we cannot compare_prefix_loops against a previous loop,\n      prefix will be equal to zero, and that index will be\n      incremented before copying.  */\n-  value_set_si (v, -1);\n+  mpz_set_si (v, -1);\n   ppl_assign_Coefficient_from_mpz_t (c, v);\n   ppl_Linear_Expression_add_to_coefficient (static_schedule, 0, c);\n \n@@ -645,7 +645,7 @@ build_scop_scattering (scop_p scop)\n       ppl_assign_Linear_Expression_from_Linear_Expression (common,\n \t\t\t\t\t\t\t   static_schedule);\n \n-      value_set_si (v, 1);\n+      mpz_set_si (v, 1);\n       ppl_assign_Coefficient_from_mpz_t (c, v);\n       ppl_Linear_Expression_add_to_coefficient (common, prefix, c);\n       ppl_assign_Linear_Expression_from_Linear_Expression (static_schedule,\n@@ -656,7 +656,7 @@ build_scop_scattering (scop_p scop)\n       ppl_delete_Linear_Expression (common);\n     }\n \n-  value_clear (v);\n+  mpz_clear (v);\n   ppl_delete_Coefficient (c);\n   ppl_delete_Linear_Expression (static_schedule);\n }\n@@ -672,14 +672,14 @@ add_value_to_dim (ppl_dimension_type d, ppl_Linear_Expression_t expr,\n \n   ppl_new_Coefficient (&coef);\n   ppl_Linear_Expression_coefficient (expr, d, coef);\n-  value_init (val);\n+  mpz_init (val);\n   ppl_Coefficient_to_mpz_t (coef, val);\n \n-  value_addto (val, val, k);\n+  mpz_add (val, val, k);\n \n   ppl_assign_Coefficient_from_mpz_t (coef, val);\n   ppl_Linear_Expression_add_to_coefficient (expr, d, coef);\n-  value_clear (val);\n+  mpz_clear (val);\n   ppl_delete_Coefficient (coef);\n }\n \n@@ -708,10 +708,10 @@ scan_tree_for_params_right_scev (sese s, tree e, int var,\n       |   a [i * p] = ...   */\n       gcc_assert (TREE_CODE (e) == INTEGER_CST);\n \n-      value_init (val);\n-      value_set_si (val, int_cst_value (e));\n+      mpz_init (val);\n+      mpz_set_si (val, int_cst_value (e));\n       add_value_to_dim (l, expr, val);\n-      value_clear (val);\n+      mpz_clear (val);\n     }\n }\n \n@@ -725,20 +725,20 @@ scan_tree_for_params_int (tree cst, ppl_Linear_Expression_t expr, Value k)\n   ppl_Coefficient_t coef;\n   int v = int_cst_value (cst);\n \n-  value_init (val);\n-  value_set_si (val, 0);\n+  mpz_init (val);\n+  mpz_set_si (val, 0);\n \n   /* Necessary to not get \"-1 = 2^n - 1\". */\n   if (v < 0)\n-    value_sub_int (val, val, -v);\n+    mpz_sub_ui (val, val, -v);\n   else\n-    value_add_int (val, val, v);\n+    mpz_add_ui (val, val, v);\n \n-  value_multiply (val, val, k);\n+  mpz_mul (val, val, k);\n   ppl_new_Coefficient (&coef);\n   ppl_assign_Coefficient_from_mpz_t (coef, val);\n   ppl_Linear_Expression_add_to_inhomogeneous (expr, coef);\n-  value_clear (val);\n+  mpz_clear (val);\n   ppl_delete_Coefficient (coef);\n }\n \n@@ -809,11 +809,11 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \t    {\n \t      Value val;\n \t      gcc_assert (host_integerp (TREE_OPERAND (e, 1), 0));\n-\t      value_init (val);\n-\t      value_set_si (val, int_cst_value (TREE_OPERAND (e, 1)));\n-\t      value_multiply (val, val, k);\n+\t      mpz_init (val);\n+\t      mpz_set_si (val, int_cst_value (TREE_OPERAND (e, 1)));\n+\t      mpz_mul (val, val, k);\n \t      scan_tree_for_params (s, TREE_OPERAND (e, 0), c, val);\n-\t      value_clear (val);\n+\t      mpz_clear (val);\n \t    }\n \t  else\n \t    scan_tree_for_params (s, TREE_OPERAND (e, 0), c, k);\n@@ -824,11 +824,11 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \t    {\n \t      Value val;\n \t      gcc_assert (host_integerp (TREE_OPERAND (e, 0), 0));\n-\t      value_init (val);\n-\t      value_set_si (val, int_cst_value (TREE_OPERAND (e, 0)));\n-\t      value_multiply (val, val, k);\n+\t      mpz_init (val);\n+\t      mpz_set_si (val, int_cst_value (TREE_OPERAND (e, 0)));\n+\t      mpz_mul (val, val, k);\n \t      scan_tree_for_params (s, TREE_OPERAND (e, 1), c, val);\n-\t      value_clear (val);\n+\t      mpz_clear (val);\n \t    }\n \t  else\n \t    scan_tree_for_params (s, TREE_OPERAND (e, 1), c, k);\n@@ -909,11 +909,11 @@ scan_tree_for_params (sese s, tree e, ppl_Linear_Expression_t c,\n \t    ppl_subtract_Linear_Expression_from_Linear_Expression (c,\n \t\t\t\t\t\t\t\t   tmp_expr);\n \t    ppl_delete_Linear_Expression (tmp_expr);\n-\t    value_init (minus_one);\n-\t    value_set_si (minus_one, -1);\n+\t    mpz_init (minus_one);\n+\t    mpz_set_si (minus_one, -1);\n \t    ppl_new_Coefficient_from_mpz_t (&coef, minus_one);\n \t    ppl_Linear_Expression_add_to_inhomogeneous (c, coef);\n-\t    value_clear (minus_one);\n+\t    mpz_clear (minus_one);\n \t    ppl_delete_Coefficient (coef);\n \t  }\n \n@@ -963,8 +963,8 @@ find_params_in_bb (sese region, gimple_bb_p gbb)\n   loop_p loop = GBB_BB (gbb)->loop_father;\n   Value one;\n \n-  value_init (one);\n-  value_set_si (one, 1);\n+  mpz_init (one);\n+  mpz_set_si (one, 1);\n \n   /* Find parameters in the access functions of data references.  */\n   for (i = 0; VEC_iterate (data_reference_p, GBB_DATA_REFS (gbb), i, dr); i++)\n@@ -983,7 +983,7 @@ find_params_in_bb (sese region, gimple_bb_p gbb)\n       scan_tree_for_params (region, rhs, NULL, one);\n     }\n \n-  value_clear (one);\n+  mpz_clear (one);\n }\n \n /* Record the parameters used in the SCOP.  A variable is a parameter\n@@ -998,8 +998,8 @@ find_scop_parameters (scop_p scop)\n   struct loop *loop;\n   Value one;\n \n-  value_init (one);\n-  value_set_si (one, 1);\n+  mpz_init (one);\n+  mpz_set_si (one, 1);\n \n   /* Find the parameters used in the loop bounds.  */\n   for (i = 0; VEC_iterate (loop_p, SESE_LOOP_NEST (region), i, loop); i++)\n@@ -1013,7 +1013,7 @@ find_scop_parameters (scop_p scop)\n       scan_tree_for_params (region, nb_iters, NULL, one);\n     }\n \n-  value_clear (one);\n+  mpz_clear (one);\n \n   /* Find the parameters used in data accesses.  */\n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n@@ -1056,10 +1056,10 @@ add_upper_bounds_from_estimated_nit (scop_p scop, double_int nit,\n \t\t\t\t\t\t    ub_expr);\n \n   /* Construct the negated number of last iteration in VAL.  */\n-  value_init (val);\n+  mpz_init (val);\n   mpz_set_double_int (val, nit, false);\n-  value_sub_int (val, val, 1);\n-  value_oppose (val, val);\n+  mpz_sub_ui (val, val, 1);\n+  mpz_neg (val, val);\n \n   /* NB_ITERS_LE holds the number of last iteration in\n      parametrical form.  Subtract estimated number of last\n@@ -1099,7 +1099,7 @@ add_upper_bounds_from_estimated_nit (scop_p scop, double_int nit,\n   ppl_delete_Polyhedron (pol);\n   ppl_delete_Linear_Expression (nb_iters_le);\n   ppl_delete_Constraint (ub);\n-  value_clear (val);\n+  mpz_clear (val);\n }\n \n /* Builds the constraint polyhedra for LOOP in SCOP.  OUTER_PH gives\n@@ -1170,12 +1170,12 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n       ppl_Linear_Expression_t ub_expr;\n       double_int nit;\n \n-      value_init (one);\n-      value_set_si (one, 1);\n+      mpz_init (one);\n+      mpz_set_si (one, 1);\n       ppl_new_Linear_Expression_with_dimension (&ub_expr, dim);\n       nb_iters = scalar_evolution_in_region (region, loop, nb_iters);\n       scan_tree_for_params (SCOP_REGION (scop), nb_iters, ub_expr, one);\n-      value_clear (one);\n+      mpz_clear (one);\n \n       if (estimated_loop_iterations (loop, true, &nit))\n \tadd_upper_bounds_from_estimated_nit (scop, nit, dim, ub_expr);\n@@ -1221,10 +1221,10 @@ create_linear_expr_from_tree (poly_bb_p pbb, tree t)\n   t = scalar_evolution_in_region (region, loop, t);\n   gcc_assert (!automatically_generated_chrec_p (t));\n \n-  value_init (one);\n-  value_set_si (one, 1);\n+  mpz_init (one);\n+  mpz_set_si (one, 1);\n   scan_tree_for_params (region, t, res, one);\n-  value_clear (one);\n+  mpz_clear (one);\n \n   return res;\n }\n@@ -1278,25 +1278,25 @@ add_condition_to_domain (ppl_Pointset_Powerset_C_Polyhedron_t ps, gimple stmt,\n      the left or the right side of the expression. */\n   if (code == LT_EXPR)\n     {\n-      value_init (v);\n-      value_set_si (v, 1);\n+      mpz_init (v);\n+      mpz_set_si (v, 1);\n       ppl_new_Coefficient (&c);\n       ppl_assign_Coefficient_from_mpz_t (c, v);\n       ppl_Linear_Expression_add_to_inhomogeneous (left, c);\n       ppl_delete_Coefficient (c);\n-      value_clear (v);\n+      mpz_clear (v);\n \n       code = LE_EXPR;\n     }\n   else if (code == GT_EXPR)\n     {\n-      value_init (v);\n-      value_set_si (v, 1);\n+      mpz_init (v);\n+      mpz_set_si (v, 1);\n       ppl_new_Coefficient (&c);\n       ppl_assign_Coefficient_from_mpz_t (c, v);\n       ppl_Linear_Expression_add_to_inhomogeneous (right, c);\n       ppl_delete_Coefficient (c);\n-      value_clear (v);\n+      mpz_clear (v);\n \n       code = GE_EXPR;\n     }\n@@ -1655,7 +1655,7 @@ pdr_add_memory_accesses (ppl_Polyhedron_t accesses, data_reference_p dr,\n   scop_p scop = PBB_SCOP (pbb);\n   sese region = SCOP_REGION (scop);\n \n-  value_init (v);\n+  mpz_init (v);\n \n   for (i = 0; i < nb_subscripts; i++)\n     {\n@@ -1667,7 +1667,7 @@ pdr_add_memory_accesses (ppl_Polyhedron_t accesses, data_reference_p dr,\n       ppl_new_Linear_Expression_with_dimension (&fn, dom_nb_dims);\n       ppl_new_Linear_Expression_with_dimension (&access, accessp_nb_dims);\n \n-      value_set_si (v, 1);\n+      mpz_set_si (v, 1);\n       scan_tree_for_params (region, afn, fn, v);\n       ppl_assign_Linear_Expression_from_Linear_Expression (access, fn);\n \n@@ -1680,7 +1680,7 @@ pdr_add_memory_accesses (ppl_Polyhedron_t accesses, data_reference_p dr,\n       ppl_delete_Constraint (cstr);\n     }\n \n-  value_clear (v);\n+  mpz_clear (v);\n }\n \n /* Add constrains representing the size of the accessed data to the"}]}