{"sha": "b229ab2a712ccd44126bcbcaed2da8b998e7366c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyOWFiMmE3MTJjY2Q0NDEyNmJjYmNhZWQyZGE4Yjk5OGU3MzY2Yw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2016-11-15T14:02:28Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2016-11-15T14:02:28Z"}, "message": "re PR target/77881 (Non-optimal signed comparison on x86_64 since r146817)\n\n\tPR missed-optimization/77881\n\t* combine.c (simplify_comparison): Remove useless subregs\n\talso inside the loop, not just after it.\n\t(make_compound_operation): Recognize some subregs as being\n\tmasking as well.\n\ntestsuite/\n\t* gcc.target/i386/pr77881.c: New test.\n\nFrom-SVN: r242414", "tree": {"sha": "6332e06f8a024d08d976fc3a4dcd33711ea2e615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6332e06f8a024d08d976fc3a4dcd33711ea2e615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b229ab2a712ccd44126bcbcaed2da8b998e7366c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b229ab2a712ccd44126bcbcaed2da8b998e7366c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b229ab2a712ccd44126bcbcaed2da8b998e7366c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b229ab2a712ccd44126bcbcaed2da8b998e7366c/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa806c3be702a6bcd72cad5c329024ee68e29e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa806c3be702a6bcd72cad5c329024ee68e29e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa806c3be702a6bcd72cad5c329024ee68e29e3a"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "c4a660f0cff6ab62099983fb0730ccaf8526ae29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b229ab2a712ccd44126bcbcaed2da8b998e7366c", "patch": "@@ -1,3 +1,11 @@\n+2016-11-15  Michael Matz  <matz@suse.de>\n+\n+\tPR missed-optimization/77881\n+\t* combine.c (simplify_comparison): Remove useless subregs\n+\talso inside the loop, not just after it.\n+\t(make_compound_operation): Recognize some subregs as being\n+\tmasking as well.\n+\n 2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "2de2a3ef8a273bbb819f2f2f17d6372db27a7fb9", "filename": "gcc/combine.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b229ab2a712ccd44126bcbcaed2da8b998e7366c", "patch": "@@ -8102,6 +8102,18 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \trtx inner = SUBREG_REG (x), simplified;\n \tenum rtx_code subreg_code = in_code;\n \n+\t/* If the SUBREG is masking of a logical right shift,\n+\t   make an extraction.  */\n+\tif (GET_CODE (inner) == LSHIFTRT\n+\t    && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (inner))\n+\t    && subreg_lowpart_p (x))\n+\t  {\n+\t    new_rtx = make_compound_operation (XEXP (inner, 0), next_code);\n+\t    new_rtx = make_extraction (mode, new_rtx, 0, XEXP (inner, 1),\n+\t\t\t\t       mode_width, 1, 0, in_code == COMPARE);\n+\t    break;\n+\t  }\n+\n \t/* If in_code is COMPARE, it isn't always safe to pass it through\n \t   to the recursive make_compound_operation call.  */\n \tif (subreg_code == COMPARE\n@@ -11994,6 +12006,29 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  if (subreg_lowpart_p (op0)\n \t      && GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op0))) < mode_width)\n \t    ;\n+\t  else if (subreg_lowpart_p (op0)\n+\t\t   && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n+\t\t   && GET_MODE_CLASS (GET_MODE (SUBREG_REG (op0))) == MODE_INT\n+\t\t   && (code == NE || code == EQ)\n+\t\t   && (GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op0)))\n+\t\t       <= HOST_BITS_PER_WIDE_INT)\n+\t\t   && !paradoxical_subreg_p (op0)\n+\t\t   && (nonzero_bits (SUBREG_REG (op0),\n+\t\t\t\t     GET_MODE (SUBREG_REG (op0)))\n+\t\t       & ~GET_MODE_MASK (GET_MODE (op0))) == 0)\n+\t    {\n+\t      /* Remove outer subregs that don't do anything.  */\n+\t      tem = gen_lowpart (GET_MODE (SUBREG_REG (op0)), op1);\n+\n+\t      if ((nonzero_bits (tem, GET_MODE (SUBREG_REG (op0)))\n+\t\t   & ~GET_MODE_MASK (GET_MODE (op0))) == 0)\n+\t\t{\n+\t\t  op0 = SUBREG_REG (op0);\n+\t\t  op1 = tem;\n+\t\t  continue;\n+\t\t}\n+\t      break;\n+\t    }\n \t  else\n \t    break;\n "}, {"sha": "dcb220d036ab69c40f0a72a21c710d83b42f859c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b229ab2a712ccd44126bcbcaed2da8b998e7366c", "patch": "@@ -1,3 +1,8 @@\n+2016-11-15  Michael Matz  <matz@suse.de>\n+\n+\tPR missed-optimization/77881\n+\t* gcc.target/i386/pr77881.c: New test.\n+\n 2016-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/78295"}, {"sha": "80d143f2bc50ce10c5f9d3edff54739b4c308d4c", "filename": "gcc/testsuite/gcc.target/i386/pr77881.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b229ab2a712ccd44126bcbcaed2da8b998e7366c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77881.c?ref=b229ab2a712ccd44126bcbcaed2da8b998e7366c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target pie } */\n+/* { dg-options \"-O2\" } */\n+extern void baz(void);\n+int\n+foo (long long int a, long long int a2, int b)\n+{\n+    if (a < 0 || b)\n+          baz ();\n+}\n+/* { dg-final { scan-assembler \"js\\[ \\t\\]\\.L\" } } */\n+/* { dg-final { scan-assembler \"jne\\[ \\t\\]\\.L\" } } */"}]}