{"sha": "f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljODg3YWMwNjg2ODZhNmIzNjhhZDNjMTQzMmFkOGJhMWQwYjIwMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-19T21:39:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-19T21:39:52Z"}, "message": "ia64.c (ia64_function_arg): In big-endian mode...\n\n\t* config/ia64/ia64.c (ia64_function_arg): In big-endian mode,\n\twhen passing single SFmode quantities in general registers,\n\tput them in the high half.\n\nFrom-SVN: r78119", "tree": {"sha": "6257c7da371e70ad796e23e3e77f3987f0b78fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6257c7da371e70ad796e23e3e77f3987f0b78fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c887ac068686a6b368ad3c1432ad8ba1d0b201/comments", "author": null, "committer": null, "parents": [{"sha": "0e1d7f3250b8a658688453eeb5f206d0f9e6d2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1d7f3250b8a658688453eeb5f206d0f9e6d2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1d7f3250b8a658688453eeb5f206d0f9e6d2a2"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "69b4b597f1e8270fa0ef2c866b8c2abd99aa6ad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c887ac068686a6b368ad3c1432ad8ba1d0b201/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c887ac068686a6b368ad3c1432ad8ba1d0b201/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "patch": "@@ -1,19 +1,25 @@\n+2004-02-19  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.c (ia64_function_arg): In big-endian mode,\n+\twhen passing single SFmode quantities in general registers,\n+\tput them in the high half.\n+\n 2004-02-19  Aldy Hernandez  <aldyh@redhat.com>\n- \n-        * doc/md.texi (Standard Names): Document additional dependency on\n-        fix pattern.\n- \n-        * optabs.c (ftruncify): Remove.\n-        (expand_fix): Manually inline ftruncify above.\n-        (can_fix_p): Add FIXME note.\n+\n+\t* doc/md.texi (Standard Names): Document additional dependency on\n+\tfix pattern.\n+\n+\t* optabs.c (ftruncify): Remove.\n+\t(expand_fix): Manually inline ftruncify above.\n+\t(can_fix_p): Add FIXME note.\n \n 2004-02-19  Aldy Hernandez  <aldyh@redhat.com>\n- \n-        * config/rs6000/spe.md (spe_fixunssfsi2): Rename to\n-        spe_fixuns_truncsfsi2.\n- \n-        * config/rs6000/rs6000.md (fixunssfsi2): Rename to\n-        fixuns_truncsfsi2.\n+\n+\t* config/rs6000/spe.md (spe_fixunssfsi2): Rename to\n+\tspe_fixuns_truncsfsi2.\n+\n+\t* config/rs6000/rs6000.md (fixunssfsi2): Rename to\n+\tfixuns_truncsfsi2.\n \n 2004-02-19  Steve Ellcey  <sje@cup.hp.com>\n "}, {"sha": "b790819ca3543c90a4b77a38ae25ac1ee230a01e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c887ac068686a6b368ad3c1432ad8ba1d0b201/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c887ac068686a6b368ad3c1432ad8ba1d0b201/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f9c887ac068686a6b368ad3c1432ad8ba1d0b201", "patch": "@@ -3786,21 +3786,34 @@ ia64_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n      named, and in a GR register when unnamed.  */\n   else if (cum->prototype)\n     {\n-      if (! named)\n-\treturn gen_rtx_REG (mode, basereg + cum->words + offset);\n-      else\n+      if (named)\n \treturn gen_rtx_REG (mode, FR_ARG_FIRST + cum->fp_regs);\n+      /* In big-endian mode, an anonymous SFmode value must be represented\n+         as (parallel:SF [(expr_list (reg:DI n) (const_int 0))]) to force\n+\t the value into the high half of the general register.  */\n+      else if (BYTES_BIG_ENDIAN && mode == SFmode)\n+\treturn gen_rtx_PARALLEL (mode,\n+\t\t gen_rtvec (1,\n+                   gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t     gen_rtx_REG (DImode, basereg + cum->words + offset),\n+\t\t\t\t      const0_rtx)));\n+      else\n+\treturn gen_rtx_REG (mode, basereg + cum->words + offset);\n     }\n   /* If there is no prototype, then FP values go in both FR and GR\n      registers.  */\n   else\n     {\n+      /* See comment above.  */\n+      enum machine_mode inner_mode =\n+\t(BYTES_BIG_ENDIAN && mode == SFmode) ? DImode : mode;\n+\n       rtx fp_reg = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t      gen_rtx_REG (mode, (FR_ARG_FIRST\n \t\t\t\t\t\t\t  + cum->fp_regs)),\n \t\t\t\t      const0_rtx);\n       rtx gr_reg = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (mode,\n+\t\t\t\t      gen_rtx_REG (inner_mode,\n \t\t\t\t\t\t   (basereg + cum->words\n \t\t\t\t\t\t    + offset)),\n \t\t\t\t      const0_rtx);"}]}