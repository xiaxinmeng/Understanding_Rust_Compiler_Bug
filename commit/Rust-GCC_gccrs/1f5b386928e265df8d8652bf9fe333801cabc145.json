{"sha": "1f5b386928e265df8d8652bf9fe333801cabc145", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1YjM4NjkyOGUyNjVkZjhkODY1MmJmOWZlMzMzODAxY2FiYzE0NQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T13:35:00Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T13:35:00Z"}, "message": "diagnostic.c (inform): Add an explicit location_t parameter.\n\n2008-08-18  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* diagnostic.c (inform): Add an explicit location_t parameter.\n\t* toplev.h (inform): Update declaration.\n\t* builtins.c: Update all calls to inform.\n\t* c-common.c: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* c-pch.c: Likewise.\n\t* c-pragma.c: Likewise.\n\t* c-typeck.c: Likewise.\n\t* coverage.c: Likewise.\n\t* opts.c: Likewise.\n\t* toplev.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-ssa.c: Likewise.\ncp/\t\n\t* parser.c: Update all calls to inform.\n\t* typeck.c: Likewise.\n\t* init.c: Likewise.\n\t* class.c: Likewise.\n\t* call.c: Likewise.\n\t* method.c: Likewise.\n\t* friend.c: Likewise.\n\t* typeck2.c: Likewise.\n\t* pt.c: Likewise.\n\t* name-lookup.c: Likewise.\n\t* lex.c: Likewise.\n\nFrom-SVN: r139293", "tree": {"sha": "7eba1faebbcca911b3f8e3ac46a9d340e8b72ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eba1faebbcca911b3f8e3ac46a9d340e8b72ad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f5b386928e265df8d8652bf9fe333801cabc145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5b386928e265df8d8652bf9fe333801cabc145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5b386928e265df8d8652bf9fe333801cabc145", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5b386928e265df8d8652bf9fe333801cabc145/comments", "author": null, "committer": null, "parents": [{"sha": "f4857d6e2ad2a7e1f1f002ee551676d46b2eeac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4857d6e2ad2a7e1f1f002ee551676d46b2eeac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4857d6e2ad2a7e1f1f002ee551676d46b2eeac2"}], "stats": {"total": 173, "additions": 103, "deletions": 70}, "files": [{"sha": "8a62653e7740c3ac8ebd99283b6ed142a4584620", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1,3 +1,20 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* diagnostic.c (inform): Add an explicit location_t parameter.\n+\t* toplev.h (inform): Update declaration.\n+\t* builtins.c: Update all calls to inform.\n+\t* c-common.c: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* c-pch.c: Likewise.\n+\t* c-pragma.c: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* coverage.c: Likewise.\n+\t* opts.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-ssa.c: Likewise.\n+\n 2008-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/37169"}, {"sha": "a9445a68919c1228cab4b9a7f29b54765a2118e7", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -4933,14 +4933,14 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (!gave_help && warned)\n \t{\n \t  gave_help = true;\n-\t  inform (\"(so you should pass %qT not %qT to %<va_arg%>)\",\n+\t  inform (input_location, \"(so you should pass %qT not %qT to %<va_arg%>)\",\n \t\t   promoted_type, type);\n \t}\n \n       /* We can, however, treat \"undefined\" any way we please.\n \t Call abort to encourage the user to fix the program.  */\n       if (warned)\n-\tinform (\"if this code is reached, the program will abort\");\n+\tinform (input_location, \"if this code is reached, the program will abort\");\n       t = build_call_expr (implicit_built_in_decls[BUILT_IN_TRAP], 0);\n       gimplify_and_add (t, pre_p);\n "}, {"sha": "639601d4fcdb25d604a3a2f6c1650a65ea8f3039", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1436,7 +1436,7 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n   if (emit_lax_note && !emitted_lax_note)\n     {\n       emitted_lax_note = true;\n-      inform (\"use -flax-vector-conversions to permit \"\n+      inform (input_location, \"use -flax-vector-conversions to permit \"\n               \"conversions between vectors with differing \"\n               \"element types or numbers of subparts\");\n     }"}, {"sha": "2cf0f44d66a172298fce20c53c602096b9ac10ba", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1029,14 +1029,14 @@ diagnose_arglist_conflict (tree newdecl, tree olddecl,\n       if (TREE_CHAIN (t) == 0\n \t  && TYPE_MAIN_VARIANT (type) != void_type_node)\n \t{\n-\t  inform (\"a parameter list with an ellipsis can%'t match \"\n+\t  inform (input_location, \"a parameter list with an ellipsis can%'t match \"\n \t\t  \"an empty parameter name list declaration\");\n \t  break;\n \t}\n \n       if (c_type_promotes_to (type) != type)\n \t{\n-\t  inform (\"an argument type that has a default promotion can%'t match \"\n+\t  inform (input_location, \"an argument type that has a default promotion can%'t match \"\n \t\t  \"an empty parameter name list declaration\");\n \t  break;\n \t}\n@@ -1120,11 +1120,11 @@ locate_old_decl (tree decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n     ;\n   else if (DECL_INITIAL (decl))\n-    inform (\"previous definition of %q+D was here\", decl);\n+    inform (input_location, \"previous definition of %q+D was here\", decl);\n   else if (C_DECL_IMPLICIT (decl))\n-    inform (\"previous implicit declaration of %q+D was here\", decl);\n+    inform (input_location, \"previous implicit declaration of %q+D was here\", decl);\n   else\n-    inform (\"previous declaration of %q+D was here\", decl);\n+    inform (input_location, \"previous declaration of %q+D was here\", decl);\n }\n \n /* Subroutine of duplicate_decls.  Compare NEWDECL to OLDDECL."}, {"sha": "164ca4a0cdde46c1242826571a3ec65f0fca744a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -321,7 +321,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t    error (\"-I- specified twice\");\n \t  quote_chain_split = true;\n \t  split_quote_chain ();\n-\t  inform (\"obsolete option -I- used, please use -iquote instead\");\n+\t  inform (input_location, \"obsolete option -I- used, please use -iquote instead\");\n \t}\n       break;\n "}, {"sha": "b4f70506e40b40466da26f7f22b23d345da66849", "filename": "gcc/c-pch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -463,7 +463,7 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n   if (!cpp_get_options (pfile)->preprocessed)\n     {\n       error (\"pch_preprocess pragma should only be used with -fpreprocessed\");\n-      inform (\"use #include instead\");\n+      inform (input_location, \"use #include instead\");\n       return;\n     }\n \n@@ -474,7 +474,7 @@ c_common_pch_pragma (cpp_reader *pfile, const char *name)\n   if (c_common_valid_pch (pfile, name, fd) != 1)\n     {\n       if (!cpp_get_options (pfile)->warn_invalid_pch)\n-\tinform (\"use -Winvalid-pch for more information\");\n+\tinform (input_location, \"use -Winvalid-pch for more information\");\n       fatal_error (\"%s: PCH file was invalid\", name);\n     }\n "}, {"sha": "63c0acb56494570760d9f25a932c0b091294d81b", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1203,7 +1203,7 @@ handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma message%>\");\n \n   if (TREE_STRING_LENGTH (message) > 1)\n-    inform (\"#pragma message: %s\", TREE_STRING_POINTER (message));\n+    inform (input_location, \"#pragma message: %s\", TREE_STRING_POINTER (message));\n }\n \n /* A vector of registered pragma callbacks.  */"}, {"sha": "a22d5446f587606b79437ba9019a6befc4c3cd63", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -2411,7 +2411,7 @@ build_function_call (tree function, tree params)\n       if (warning (0, \"function called through a non-compatible type\"))\n \t/* We can, however, treat \"undefined\" any way we please.\n \t   Call abort to encourage the user to fix the program.  */\n-\tinform (\"if this code is reached, the program will abort\");\n+\tinform (input_location, \"if this code is reached, the program will abort\");\n \n       if (VOID_TYPE_P (return_type))\n \treturn trap;"}, {"sha": "2d4f791bc5828deb5eab33a66c9e1da3e809f6d6", "filename": "gcc/coverage.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -334,7 +334,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       static int warned = 0;\n \n       if (!warned++)\n-\tinform ((flag_guess_branch_prob\n+\tinform (input_location, (flag_guess_branch_prob\n \t\t ? \"file %s not found, execution counts estimated\"\n \t\t : \"file %s not found, execution counts assumed to be zero\"),\n \t\tda_file_name);\n@@ -369,22 +369,22 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       if (!inhibit_warnings)\n \t{\n \t  if (entry->checksum != checksum)\n-\t    inform (\"checksum is %x instead of %x\", entry->checksum, checksum);\n+\t    inform (input_location, \"checksum is %x instead of %x\", entry->checksum, checksum);\n \t  else\n-\t    inform (\"number of counters is %d instead of %d\",\n+\t    inform (input_location, \"number of counters is %d instead of %d\",\n \t\t    entry->summary.num, expected);\n \t}\n \n       if (warn_coverage_mismatch\n \t  && !inhibit_warnings\n \t  && !warned++)\n \t{\n-\t  inform (\"coverage mismatch ignored due to -Wcoverage-mismatch\");\n-\t  inform (flag_guess_branch_prob\n+\t  inform (input_location, \"coverage mismatch ignored due to -Wcoverage-mismatch\");\n+\t  inform (input_location, flag_guess_branch_prob\n \t\t  ? \"execution counts estimated\"\n \t\t  : \"execution counts assumed to be zero\");\n \t  if (!flag_guess_branch_prob)\n-\t    inform (\"this can result in poorly optimized code\");\n+\t    inform (input_location, \"this can result in poorly optimized code\");\n \t}\n \n       return NULL;"}, {"sha": "3b6e97e62fadac0f760fb08595571351aa63b620", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1,3 +1,17 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* parser.c: Update all calls to inform.\n+\t* typeck.c: Likewise.\n+\t* init.c: Likewise.\n+\t* class.c: Likewise.\n+\t* call.c: Likewise.\n+\t* method.c: Likewise.\n+\t* friend.c: Likewise.\n+\t* typeck2.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* name-lookup.c: Likewise.\n+\t* lex.c: Likewise.\n+\n 2008-08-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/37156"}, {"sha": "0348eb15c50f3d55c221118ecb5deefdc4bf428d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -2545,24 +2545,24 @@ print_z_candidate (const char *msgstr, struct z_candidate *candidate)\n   if (TREE_CODE (candidate->fn) == IDENTIFIER_NODE)\n     {\n       if (candidate->num_convs == 3)\n-\tinform (\"%s %D(%T, %T, %T) <built-in>\", msgstr, candidate->fn,\n+\tinform (input_location, \"%s %D(%T, %T, %T) <built-in>\", msgstr, candidate->fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type,\n \t\tcandidate->convs[2]->type);\n       else if (candidate->num_convs == 2)\n-\tinform (\"%s %D(%T, %T) <built-in>\", msgstr, candidate->fn,\n+\tinform (input_location, \"%s %D(%T, %T) <built-in>\", msgstr, candidate->fn,\n \t\tcandidate->convs[0]->type,\n \t\tcandidate->convs[1]->type);\n       else\n-\tinform (\"%s %D(%T) <built-in>\", msgstr, candidate->fn,\n+\tinform (input_location, \"%s %D(%T) <built-in>\", msgstr, candidate->fn,\n \t\tcandidate->convs[0]->type);\n     }\n   else if (TYPE_P (candidate->fn))\n-    inform (\"%s %T <conversion>\", msgstr, candidate->fn);\n+    inform (input_location, \"%s %T <conversion>\", msgstr, candidate->fn);\n   else if (candidate->viable == -1)\n-    inform (\"%s %+#D <near match>\", msgstr, candidate->fn);\n+    inform (input_location, \"%s %+#D <near match>\", msgstr, candidate->fn);\n   else\n-    inform (\"%s %+#D\", msgstr, candidate->fn);\n+    inform (input_location, \"%s %+#D\", msgstr, candidate->fn);\n }\n \n static void\n@@ -6651,7 +6651,7 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n \t      && warning (OPT_Wconversion, \"  for conversion from %qT to %qT\",\n \t\t\t  source, w->second_conv->type)) \n \t    {\n-\t      inform (\"  because conversion sequence for the argument is better\");\n+\t      inform (input_location, \"  because conversion sequence for the argument is better\");\n \t    }\n \t}\n       else"}, {"sha": "9e98f1cc93bf707b3adc4ddd961693b14f24ffe8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -6174,7 +6174,7 @@ resolve_address_of_overloaded_function (tree target_type,\n       permerror (input_location, \"assuming pointer to member %qD\", fn);\n       if (!explained)\n \t{\n-\t  inform (\"(a pointer to member can only be formed with %<&%E%>)\", fn);\n+\t  inform (input_location, \"(a pointer to member can only be formed with %<&%E%>)\", fn);\n \t  explained = 1;\n \t}\n     }"}, {"sha": "03748fe64d2cf92c29292387faf170b889f0f813", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -574,7 +574,7 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t\t\t\t\"%q#D declares a non-template function\", decl);\n \t      if (! explained && warned)\n \t\t{\n-\t\t  inform (\"(if this is not what you intended, make sure \"\n+\t\t  inform (input_location, \"(if this is not what you intended, make sure \"\n \t\t\t  \"the function template has already been declared \"\n \t\t\t  \"and add <> after the function name here) \");\n \t\t  explained = 1;"}, {"sha": "34c22fe039cd1db6951f500e8e3363f96f4c89fc", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -3039,7 +3039,7 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t\t\t   \"delete operator:\"))\n \t\t{\n \t\t  cxx_incomplete_type_diagnostic (addr, type, DK_WARNING);\n-\t\t  inform (\"neither the destructor nor the class-specific \"\n+\t\t  inform (input_location, \"neither the destructor nor the class-specific \"\n \t\t\t  \"operator delete will be called, even if they are \"\n \t\t\t  \"declared when the class is defined.\");\n \t\t}"}, {"sha": "d5ddce88aef82a4e422d136430341b75ee55f2d6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -490,7 +490,7 @@ unqualified_fn_lookup_error (tree name)\n \t  static bool hint;\n \t  if (!hint)\n \t    {\n-\t      inform (\"(if you use %<-fpermissive%>, G++ will accept your \"\n+\t      inform (input_location, \"(if you use %<-fpermissive%>, G++ will accept your \"\n \t\t     \"code, but allowing the use of an undeclared name is \"\n \t\t     \"deprecated)\");\n \t      hint = true;"}, {"sha": "5b4c273dda98590e9ec1450339983847a0545a2c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -813,8 +813,8 @@ synthesize_method (tree fndecl)\n   pop_deferring_access_checks ();\n \n   if (error_count != errorcount || warning_count != warningcount)\n-    inform (\"%Hsynthesized method %qD first required here \",\n-\t    &input_location, fndecl);\n+    inform (input_location, \"synthesized method %qD first required here \",\n+\t    fndecl);\n }\n \n /* Use EXTRACTOR to locate the relevant function called for each base &"}, {"sha": "e1c57b4a347d38bf03f8b098a694859b438d3356", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1226,7 +1226,7 @@ check_for_out_of_scope_variable (tree decl)\n \t  static bool hint;\n \t  if (!hint)\n \t    {\n-\t      inform (\"(if you use %<-fpermissive%> G++ will accept your code)\");\n+\t      inform (input_location, \"(if you use %<-fpermissive%> G++ will accept your code)\");\n \t      hint = true;\n \t    }\n \t}"}, {"sha": "9f992b9a48086d9a34f7cb9d5e4aa4cde498f7e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -2229,8 +2229,9 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n       && declarator->kind == cdk_function)\n     {\n       error (\"%Hnew types may not be defined in a return type\", &type_location);\n-      inform (\"%H(perhaps a semicolon is missing after the definition of %qT)\",\n-\t      &type_location, type);\n+      inform (type_location, \n+\t      \"(perhaps a semicolon is missing after the definition of %qT)\",\n+\t      type);\n     }\n }\n \n@@ -2358,8 +2359,9 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser,\n \t\t    if (TREE_CODE (field) == TYPE_DECL\n \t\t\t&& DECL_NAME (field) == id)\n \t\t      {\n-\t\t\tinform (\"%H(perhaps %<typename %T::%E%> was intended)\",\n-\t\t\t\t&location, BINFO_TYPE (b), id);\n+\t\t\tinform (location, \n+\t\t\t\t\"(perhaps %<typename %T::%E%> was intended)\",\n+\t\t\t\tBINFO_TYPE (b), id);\n \t\t\tbreak;\n \t\t      }\n \t\t  if (field)\n@@ -5576,8 +5578,8 @@ cp_parser_new_expression (cp_parser* parser)\n \t{\n \t  error (\"%Harray bound forbidden after parenthesized type-id\",\n \t\t &token->location);\n-\t  inform (\"%Htry removing the parentheses around the type-id\",\n-\t\t &token->location);\n+\t  inform (token->location, \n+\t\t  \"try removing the parentheses around the type-id\");\n \t  cp_parser_direct_new_declarator (parser);\n \t}\n       nelts = NULL_TREE;\n@@ -9984,13 +9986,13 @@ cp_parser_template_id (cp_parser *parser,\n \t\t     \"%<<::%> cannot begin a template-argument list\"))\n \t{\n \t  static bool hint = false;\n-\t  inform (\"%H%<<:%> is an alternate spelling for %<[%>. Insert whitespace \"\n-\t      \"between %<<%> and %<::%>\",\n-\t      &next_token->location);\n+\t  inform (next_token->location,\n+\t\t  \"%<<:%> is an alternate spelling for %<[%>.\"\n+\t\t  \" Insert whitespace between %<<%> and %<::%>\");\n \t  if (!hint && !flag_permissive)\n \t    {\n-\t      inform (\"%H(if you use %<-fpermissive%> G++ will accept your code)\",\n-                      &next_token->location);\n+\t      inform (next_token->location, \"(if you use %<-fpermissive%>\"\n+\t\t      \" G++ will accept your code)\");\n \t      hint = true;\n \t    }\n \t}\n@@ -10180,7 +10182,7 @@ cp_parser_template_name (cp_parser* parser,\n \t  /* Explain what went wrong.  */\n \t  error (\"%Hnon-template %qD used as template\",\n \t\t &token->location, identifier);\n-\t  inform (\"use %<%T::template %D%> to indicate that it is a template\",\n+\t  inform (input_location, \"use %<%T::template %D%> to indicate that it is a template\",\n \t\t  parser->scope, identifier);\n \t  /* If parsing tentatively, find the location of the \"<\" token.  */\n \t  if (cp_parser_simulate_error (parser))\n@@ -13168,7 +13170,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t{\n \t\t\t  error (\"%Hinvalid use of constructor as a template\",\n \t\t\t\t &declarator_id_start_token->location);\n-\t\t\t  inform (\"use %<%T::%D%> instead of %<%T::%D%> to \"\n+\t\t\t  inform (input_location, \"use %<%T::%D%> instead of %<%T::%D%> to \"\n \t\t\t\t  \"name the constructor in a qualified name\",\n \t\t\t\t  class_type,\n \t\t\t\t  DECL_NAME (TYPE_TI_TEMPLATE (class_type)),"}, {"sha": "4df53e83767e20c5c8a2c35bf7251d5e30ccbefa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -2741,9 +2741,9 @@ check_for_bare_parameter_packs (tree t)\n             name = DECL_NAME (pack);\n \n \t  if (name)\n-\t    inform (\"        %qD\", name);\n+\t    inform (input_location, \"        %qD\", name);\n \t  else\n-\t    inform (\"        <anonymous>\");\n+\t    inform (input_location, \"        <anonymous>\");\n \n           parameter_packs = TREE_CHAIN (parameter_packs);\n         }\n@@ -4020,7 +4020,7 @@ push_template_decl_real (tree decl, bool is_friend)\n template arguments to %qD do not match original template %qD\",\n \t\t decl, DECL_TEMPLATE_RESULT (tmpl));\n \t  if (!uses_template_parms (TI_ARGS (tinfo)))\n-\t    inform (\"use template<> for an explicit specialization\");\n+\t    inform (input_location, \"use template<> for an explicit specialization\");\n \t  /* Avoid crash in import_export_decl.  */\n \t  DECL_INTERFACE_KNOWN (decl) = 1;\n \t  return error_mark_node;\n@@ -4141,7 +4141,7 @@ redeclare_class_template (tree type, tree parms)\n     {\n       error (\"redeclared with %d template parameter(s)\", \n              TREE_VEC_LENGTH (parms));\n-      inform (\"previous declaration %q+D used %d template parameter(s)\", \n+      inform (input_location, \"previous declaration %q+D used %d template parameter(s)\", \n              tmpl, TREE_VEC_LENGTH (tmpl_parms));\n       return false;\n     }\n@@ -4187,7 +4187,7 @@ redeclare_class_template (tree type, tree parms)\n \t     A template-parameter may not be given default arguments\n \t     by two different declarations in the same scope.  */\n \t  error (\"redefinition of default argument for %q#D\", parm);\n-\t  inform (\"%Joriginal definition appeared here\", tmpl_parm);\n+\t  inform (input_location, \"%Joriginal definition appeared here\", tmpl_parm);\n \t  return false;\n \t}\n \n@@ -4570,7 +4570,7 @@ convert_nontype_argument (tree type, tree expr)\n \t{\n \t  error (\"%qE is not a valid template argument for type %qT \"\n \t\t \"because it is a pointer\", expr, type);\n-\t  inform (\"try using %qE instead\", TREE_OPERAND (expr, 0));\n+\t  inform (input_location, \"try using %qE instead\", TREE_OPERAND (expr, 0));\n \t  return NULL_TREE;\n \t}\n \n@@ -4608,7 +4608,7 @@ convert_nontype_argument (tree type, tree expr)\n \t  error (\"%qE is not a valid template argument for type %qT \"\n \t\t \"because it is of type %qT\", expr, type,\n \t\t TREE_TYPE (expr));\n-\t  inform (\"standard conversions are not allowed in this context\");\n+\t  inform (input_location, \"standard conversions are not allowed in this context\");\n \t  return NULL_TREE;\n \t}\n     }\n@@ -9722,7 +9722,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \t    {\n \t      error (\"dependent-name %qE is parsed as a non-type, but \"\n \t\t     \"instantiation yields a type\", qualified_id);\n-\t      inform (\"say %<typename %E%> if a type is meant\", qualified_id);\n+\t      inform (input_location, \"say %<typename %E%> if a type is meant\", qualified_id);\n \t    }\n \t  return error_mark_node;\n \t}"}, {"sha": "f955efe29489c1eab0b70b9dcb1b836f6461f9a4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -4009,7 +4009,7 @@ build_x_unary_op (enum tree_code code, tree xarg, tsubst_flags_t complain)\n               error (\"invalid use of %qE to form a pointer-to-member-function\",\n                      xarg);\n               if (TREE_CODE (xarg) != OFFSET_REF)\n-                inform (\"  a qualified-id is required\");\n+                inform (input_location, \"  a qualified-id is required\");\n \t      return error_mark_node;\n \t    }\n \t  else"}, {"sha": "9a39076a0e2395e8eda6e5507685e5a05b365e44", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -313,18 +313,18 @@ abstract_virtuals_error (tree decl, tree type)\n       unsigned ix;\n       tree fn;\n \n-      inform (\"%J  because the following virtual functions are pure \"\n+      inform (input_location, \"%J  because the following virtual functions are pure \"\n \t      \"within %qT:\", TYPE_MAIN_DECL (type), type);\n \n       for (ix = 0; VEC_iterate (tree, pure, ix, fn); ix++)\n-\tinform (\"\\t%+#D\", fn);\n+\tinform (input_location, \"\\t%+#D\", fn);\n       /* Now truncate the vector.  This leaves it non-null, so we know\n \t there are pure virtuals, but empty so we don't list them out\n \t again.  */\n       VEC_truncate (tree, pure, 0);\n     }\n   else\n-    inform (\"%J  since type %qT has pure virtual functions\",\n+    inform (input_location, \"%J  since type %qT has pure virtual functions\",\n \t    TYPE_MAIN_DECL (type), type);\n \n   return 1;"}, {"sha": "dbe94a89958288e583e8251733cf2c886fe6d2c2", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -489,16 +489,16 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n   return report_diagnostic (&diagnostic);\n }\n \n-/* An informative note.  Use this for additional details on an error\n+/* An informative note at LOCATION.  Use this for additional details on an error\n    message.  */\n void\n-inform (const char *gmsgid, ...)\n+inform (location_t location, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_NOTE);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_NOTE);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }"}, {"sha": "1de217eb3af726216fcee6238b06bbe4820b9e0f", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1088,8 +1088,8 @@ decode_options (unsigned int argc, const char **argv)\n \n   if (flag_exceptions && flag_reorder_blocks_and_partition)\n     {\n-      inform\n-\t    (\"-freorder-blocks-and-partition does not work with exceptions\");\n+      inform (input_location, \n+\t      \"-freorder-blocks-and-partition does not work with exceptions\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }\n@@ -1100,7 +1100,7 @@ decode_options (unsigned int argc, const char **argv)\n   if (flag_unwind_tables && ! targetm.unwind_tables_default\n       && flag_reorder_blocks_and_partition)\n     {\n-      inform (\"-freorder-blocks-and-partition does not support unwind info\");\n+      inform (input_location, \"-freorder-blocks-and-partition does not support unwind info\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }\n@@ -1113,8 +1113,8 @@ decode_options (unsigned int argc, const char **argv)\n       && (!targetm.have_named_sections\n \t  || (flag_unwind_tables && targetm.unwind_tables_default)))\n     {\n-      inform\n-       (\"-freorder-blocks-and-partition does not work on this architecture\");\n+      inform (input_location,\n+\t      \"-freorder-blocks-and-partition does not work on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }"}, {"sha": "3226652ed65016ecd8711648b21819174f9219a6", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1350,7 +1350,7 @@ init_asm_output (const char *name)\n \t\t\t\t\t\t   NULL);\n \t    }\n \t  else\n-\t    inform (\"-frecord-gcc-switches is not supported by the current target\");\n+\t    inform (input_location, \"-frecord-gcc-switches is not supported by the current target\");\n \t}\n \n #ifdef ASM_COMMENT_START"}, {"sha": "a73cbf8eceaac919e48935e50c46808e7e4f46b9", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -69,7 +69,7 @@ extern bool pedwarn_at (location_t, int, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(3,4);\n extern bool permerror (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n \n extern void rest_of_decl_compilation (tree, int, int);"}, {"sha": "39a04e94a5f03678807595772a33bcb38286b049", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -3842,7 +3842,7 @@ verify_stmt (gimple_stmt_iterator *gsi)\n   if (addr)\n     {\n       debug_generic_expr (addr);\n-      inform (\"in statement\");\n+      inform (input_location, \"in statement\");\n       debug_gimple_stmt (stmt);\n       return true;\n     }"}, {"sha": "fb692f8daa132b5c0b2bbdca395bdb111de27c96", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5b386928e265df8d8652bf9fe333801cabc145/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=1f5b386928e265df8d8652bf9fe333801cabc145", "patch": "@@ -1423,7 +1423,7 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n       if (xloc.file != floc.file\n \t  || xloc.line < floc.line\n \t  || xloc.line > LOCATION_LINE (cfun->function_end_locus))\n-\tinform (\"%J%qD was declared here\", var, var);\n+\tinform (input_location, \"%J%qD was declared here\", var, var);\n     }\n }\n "}]}