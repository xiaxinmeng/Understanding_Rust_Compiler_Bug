{"sha": "59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliZTBjZGQ4YmJkMDBjYmIwYjA4MWRjMzM2YmRjMGFhMmQ5MmMzMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T20:00:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T20:00:09Z"}, "message": "Update comments.\n\nFrom-SVN: r8817", "tree": {"sha": "500974bb02b80c7051fbf0f55eff6bfe77ebde93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500974bb02b80c7051fbf0f55eff6bfe77ebde93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/comments", "author": null, "committer": null, "parents": [{"sha": "db6f8fbebeb8f0a8e7429c3403b9cbf5270bbefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6f8fbebeb8f0a8e7429c3403b9cbf5270bbefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6f8fbebeb8f0a8e7429c3403b9cbf5270bbefd"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "d05516f9a11ec59b2e49754026e27c2076b7abae", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,5 +1,5 @@\n /* Language-level data type conversion for GNU C++.\n-   Copyright (C) 1987, 1988, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1992, 1993, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -707,7 +707,7 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n \t by San Diego WP section 5.2.9 paragraph 12, though perhaps it\n \t should be done directly (jason).  (int &)ri ---> *(int*)&ri */\n \n-      /* B* bp; A& ar = (A&)bp; is legal, but it's probably not what they\n+      /* B* bp; A& ar = (A&)bp; is valid, but it's probably not what they\n          meant.  */\n       if (form == POINTER_TYPE\n \t  && (comptypes (TREE_TYPE (intype), type, -1)))"}, {"sha": "2bdb5354e020b62e4b9cc02c7fd25aacb4bca2ed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -7953,7 +7953,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n     {\n       if (current_binding_level == global_binding_level)\n \t{\n-\t  /* It's common practice (and completely legal) to have a const\n+\t  /* It's common practice (and completely valid) to have a const\n \t     be initialized and declared extern.  */\n \t  if (! constp)\n \t    warning (\"`%s' initialized and declared `extern'\", name);\n@@ -8063,7 +8063,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n \n \t    /* ARM $8.4.3: Since you can't have a pointer to a reference,\n \t       you can't have arrays of references.  If we allowed them,\n-\t       then we'd be saying x[i] is legal for an array x, but\n+\t       then we'd be saying x[i] is valid for an array x, but\n \t       then you'd have to ask: what does `*(x + i)' mean?  */\n \t    if (TREE_CODE (type) == REFERENCE_TYPE)\n \t      {"}, {"sha": "ce51b9f3c34e8944f5bdb25cefd4251c6d3ae45f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1090,7 +1090,7 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n \t  return error_mark_node;\n \t}\n \n-      /* Deleting a pointer with the value zero is legal and has no effect.  */\n+      /* Deleting a pointer with the value zero is valid and has no effect.  */\n       if (integer_zerop (t))\n \treturn build1 (NOP_EXPR, void_type_node, t);\n     }"}, {"sha": "02469d49d63ccda722045bed729630d7e5465930", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,5 +1,5 @@\n /* Handle initialization things in C++.\n-   Copyright (C) 1987, 1989, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1090,7 +1090,7 @@ expand_member_init (exp, name, init)\n    If FLAGS is LOOKUP_ONLYCONVERTING then it is the = init form of\n    the initializer, if FLAGS is 0, then it is the (init) form.\n    If `init' is a CONSTRUCTOR, then we emit a warning message,\n-   explaining that such initializations are illegal.\n+   explaining that such initializations are invalid.\n \n    ALIAS_THIS is nonzero iff we are initializing something which is\n    essentially an alias for C_C_D.  In this case, the base constructor\n@@ -1363,7 +1363,7 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n \n \t  if (init_type == type && TREE_CODE (init) == CALL_EXPR\n #if 0\n-\t      /* It is legal to directly initialize from a CALL_EXPR\n+\t      /* It is valid to directly initialize from a CALL_EXPR\n \t\t without going through X(X&), apparently.  */\n \t      && ! TYPE_GETS_INIT_REF (type)\n #endif"}, {"sha": "aeb551c229a64001b49fafff56070f1815664f1f", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,6 +1,6 @@\n /* Breadth-first and depth-first routines for\n    searching multiple-inheritance lattice for GNU C++.\n-   Copyright (C) 1987, 1989, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1989, 1992, 1993, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -1218,7 +1218,7 @@ lookup_field (xbasetype, name, protect, want_type)\n \n       /* See if we can find NAME in TYPE.  If RVAL is nonzero,\n \t and we do find NAME in TYPE, verify that such a second\n-\t sighting is in fact legal.  */\n+\t sighting is in fact valid.  */\n \n       nval = lookup_field_1 (type, name);\n \n@@ -1694,7 +1694,7 @@ lookup_fnfields (basetype_path, name, complain)\n \n       /* See if we can find NAME in TYPE.  If RVAL is nonzero,\n \t and we do find NAME in TYPE, verify that such a second\n-\t sighting is in fact legal.  */\n+\t sighting is in fact valid.  */\n \n       index = lookup_fnfields_here (type, name);\n "}, {"sha": "6642316e7b8f6facf42dd15d589edddc711afc6b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=59be0cdd8bbd00cbb0b081dc336bdc0aa2d92c33", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for C++ compiler.\n-   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -548,14 +548,14 @@ comp_array_types (cmp, t1, t2, strict)\n \t2 : strict, except that if one type is a reference and\n \t    the other is not, compare the target type of the\n \t    reference to the type that's not a reference (ARM, p308).\n-\t    This is used for checking for illegal overloading.\n+\t    This is used for checking for invalid overloading.\n \t1 : strict (compared according to ANSI C)\n \t    This is used for checking whether two function decls match.\n \t0 : <= (compared according to C++)\n \t-1: <= or >= (relaxed)\n \n    Otherwise, pointers involving base classes and derived classes\n-   can be mixed as legal: i.e. a pointer to a base class may be assigned\n+   can be mixed as valid: i.e. a pointer to a base class may be assigned\n    to a pointer to one of its derived classes, as per C++. A pointer to\n    a derived class may be passed as a parameter to a function expecting a\n    pointer to a base classes. These allowances do not commute. In this\n@@ -1903,7 +1903,7 @@ build_array_ref (array, idx)\n \t}\n \n       /* Note in C++ we don't bother warning about subscripting a\n-\t `register' array, since it's legal in C++ to take the address\n+\t `register' array, since it's valid in C++ to take the address\n \t of something with that storage specification.  */\n       if (pedantic && !lvalue_p (array))\n \tpedwarn (\"ANSI C++ forbids subscripting non-lvalue array\");\n@@ -5948,7 +5948,7 @@ build_modify_expr (lhs, modifycode, rhs)\n \t  slot = TREE_OPERAND (newrhs, 0);\n       else if (TREE_CODE (newrhs) == ADDR_EXPR)\n \t{\n-\t  /* Bad but legal.  */\n+\t  /* Bad but valid.  */\n \t  slot = newrhs;\n \t  warning (\"address taken of temporary object\");\n \t}"}]}