{"sha": "b7e8993880972b7f641698b1d9f41bb34a80f349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlODk5Mzg4MDk3MmI3ZjY0MTY5OGIxZDlmNDFiYjM0YTgwZjM0OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-01-15T22:43:45Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-01-15T22:43:45Z"}, "message": "lang.c (dump_compound_expr): Removed case.\n\n\t* lang.c (dump_compound_expr) <EXPR_WITH_FILE_LOCATION>: Removed\n\tcase.\n\t* java-gimplify.c (java_gimplify_expr) <EXPR_WITH_FILE_LOCATION>:\n\tRemoved case.\n\t* java-tree.h (EXPR_WFL_EMIT_LINE_NOTE): Removed.\n\t(EXPR_WFL_NODE): Likewise.\n\t(EXPR_WFL_LINECOL): Likewise.\n\t(EXPR_WFL_FILENAME): Likewise.\n\t(EXPR_WFL_LINENO): Likewise.\n\t(build_expr_wfl, expr_add_location): Don't declare.\n\t(build_unknown_wfl): Removed.\n\t(EXPR_WFL_FILENAME_NODE): Removed.\n\t(EXPR_WFL_COLNO): Removed.\n\t(EXPR_WFL_SET_LINECOL): Removed.\n\t(DECL_FUNCTION_WFL): Removed.\n\t(DECL_FIELD_FINAL_WFL): Removed.\n\t(struct lang_decl_func) <wfl>: Removed field.\n\t<called_constructor>: Likewise.\n\t<inner_access>: Likewise.\n\t(struct lang_decl_var) <wfl>: Removed field.\n\t(DECL_CONSTRUCTOR_CALLS): Removed.\n\t(DECL_FUNCTION_ACCESS_DECL): Likewise.\n\t(DECL_FUNCTION_INNER_ACCESS): Likewise.\n\t(DECL_SPECIFIC_COUNT): Likewise.\n\t* java-tree.def (EXPR_WITH_FILE_LOCATION): Removed.\n\t* expr.c (build_expr_wfl): Removed.\n\t(expr_add_location): Likewise.\n\nFrom-SVN: r120804", "tree": {"sha": "e12b1fc3f9ab022e6925ee7653ec2d69293f1b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e12b1fc3f9ab022e6925ee7653ec2d69293f1b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e8993880972b7f641698b1d9f41bb34a80f349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e8993880972b7f641698b1d9f41bb34a80f349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e8993880972b7f641698b1d9f41bb34a80f349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e8993880972b7f641698b1d9f41bb34a80f349/comments", "author": null, "committer": null, "parents": [{"sha": "c98e044dce1ad03b86391a7ebc1285d0c022cbf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98e044dce1ad03b86391a7ebc1285d0c022cbf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98e044dce1ad03b86391a7ebc1285d0c022cbf5"}], "stats": {"total": 198, "additions": 30, "deletions": 168}, "files": [{"sha": "a71bfbbd5081a9aeb549d3dea6cc229771a39bad", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -1,3 +1,33 @@\n+2007-01-15  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lang.c (dump_compound_expr) <EXPR_WITH_FILE_LOCATION>: Removed\n+\tcase.\n+\t* java-gimplify.c (java_gimplify_expr) <EXPR_WITH_FILE_LOCATION>:\n+\tRemoved case.\n+\t* java-tree.h (EXPR_WFL_EMIT_LINE_NOTE): Removed.\n+\t(EXPR_WFL_NODE): Likewise.\n+\t(EXPR_WFL_LINECOL): Likewise.\n+\t(EXPR_WFL_FILENAME): Likewise.\n+\t(EXPR_WFL_LINENO): Likewise.\n+\t(build_expr_wfl, expr_add_location): Don't declare.\n+\t(build_unknown_wfl): Removed.\n+\t(EXPR_WFL_FILENAME_NODE): Removed.\n+\t(EXPR_WFL_COLNO): Removed.\n+\t(EXPR_WFL_SET_LINECOL): Removed.\n+\t(DECL_FUNCTION_WFL): Removed.\n+\t(DECL_FIELD_FINAL_WFL): Removed.\n+\t(struct lang_decl_func) <wfl>: Removed field.\n+\t<called_constructor>: Likewise.\n+\t<inner_access>: Likewise.\n+\t(struct lang_decl_var) <wfl>: Removed field.\n+\t(DECL_CONSTRUCTOR_CALLS): Removed.\n+\t(DECL_FUNCTION_ACCESS_DECL): Likewise.\n+\t(DECL_FUNCTION_INNER_ACCESS): Likewise.\n+\t(DECL_SPECIFIC_COUNT): Likewise.\n+\t* java-tree.def (EXPR_WITH_FILE_LOCATION): Removed.\n+\t* expr.c (build_expr_wfl): Removed.\n+\t(expr_add_location): Likewise.\n+\n 2007-01-12  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-dump.c (main): Updated call to find_class."}, {"sha": "c51b5cd0b04b640edf1dacde95368a2fccc9cfbb", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -3757,87 +3757,6 @@ force_evaluation_order (tree node)\n   return node;\n }\n \n-/* EXPR_WITH_FILE_LOCATION are used to keep track of the exact\n-   location where an expression or an identifier were encountered. It\n-   is necessary for languages where the frontend parser will handle\n-   recursively more than one file (Java is one of them).  */\n-\n-tree\n-build_expr_wfl (tree node,\n-#ifdef USE_MAPPED_LOCATION\n-\t\tsource_location location\n-#else\n-\t\tconst char *file, int line, int col\n-#endif\n-)\n-{\n-  tree wfl;\n-\n-#ifdef USE_MAPPED_LOCATION\n-  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n-  SET_EXPR_LOCATION (wfl, location);\n-#else\n-  static const char *last_file = 0;\n-  static tree last_filenode = NULL_TREE;\n-\n-  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n-\n-  EXPR_WFL_SET_LINECOL (wfl, line, col);\n-  if (file != last_file)\n-    {\n-      last_file = file;\n-      last_filenode = file ? get_identifier (file) : NULL_TREE;\n-    }\n-  EXPR_WFL_FILENAME_NODE (wfl) = last_filenode;\n-#endif\n-  EXPR_WFL_NODE (wfl) = node;\n-  if (node)\n-    {\n-      if (!TYPE_P (node))\n-\tTREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n-      TREE_TYPE (wfl) = TREE_TYPE (node);\n-    }\n-\n-  return wfl;\n-}\n-\n-#ifdef USE_MAPPED_LOCATION\n-tree\n-expr_add_location (tree node, source_location location, bool statement)\n-{\n-  tree wfl;\n-#if 0\n-  /* FIXME. This optimization causes failures in code that expects an\n-     EXPR_WITH_FILE_LOCATION.  E.g. in resolve_qualified_expression_name. */\n-  if (node && ! (statement && flag_emit_class_files))\n-    {\n-      source_location node_loc = EXPR_LOCATION (node);\n-      if (node_loc == location || location == UNKNOWN_LOCATION)\n-\treturn node;\n-      if (node_loc == UNKNOWN_LOCATION\n-\t  && IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n-\t{\n-\t  SET_EXPR_LOCATION (node, location);\n-\t  return node;\n-\t}\n-    }\n-#endif\n-  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n-  SET_EXPR_LOCATION (wfl, location);\n-  EXPR_WFL_NODE (wfl) = node;\n-  if (statement && debug_info_level != DINFO_LEVEL_NONE)\n-    EXPR_WFL_EMIT_LINE_NOTE (wfl) = 1;\n-  if (node)\n-    {\n-      if (!TYPE_P (node))\n-\tTREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n-      TREE_TYPE (wfl) = TREE_TYPE (node);\n-    }\n-\n-  return wfl;\n-}\n-#endif\n-\n /* Build a node to represent empty statements and blocks. */\n \n tree"}, {"sha": "96e900934e337fe4537291395e0b618a4dca28c7", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -69,18 +69,6 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n       *expr_p = java_gimplify_block (*expr_p);\n       break;\n \n-    case EXPR_WITH_FILE_LOCATION:\n-#ifdef USE_MAPPED_LOCATION\n-      input_location = EXPR_LOCATION (*expr_p);\n-#else\n-      input_location.file = EXPR_WFL_FILENAME (*expr_p);\n-      input_location.line = EXPR_WFL_LINENO (*expr_p);\n-#endif\n-      *expr_p = EXPR_WFL_NODE (*expr_p);\n-      if (EXPR_P (*expr_p))\n-\tSET_EXPR_LOCATION (*expr_p, input_location);\n-      break;\n-\n     case LABELED_BLOCK_EXPR:\n       *expr_p = java_gimplify_labeled_block_expr (*expr_p);\n       break;"}, {"sha": "63fc865e8e8db7a1bcc8339acf053b4b234f88b8", "filename": "gcc/java/java-tree.def", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.def?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -24,19 +24,6 @@ DEFTREECODE (EXIT_BLOCK_EXPR, \"exit_block_expr\", tcc_statement, 1)\n    Operand 1 contains chained catch nodes. */\n DEFTREECODE (TRY_EXPR, \"try-catch\", tcc_expression, 2)\n \n-/* Annotates a tree node (usually an expression) with source location\n-   information: a file name (EXPR_WFL_FILENAME);  a line number\n-   (EXPR_WFL_LINENO); and column number (EXPR_WFL_COLNO).  It is\n-   expanded as the contained node (EXPR_WFL_NODE);  a line note should\n-   be emitted first if EXPR_WFL_EMIT_LINE_NOTE.  */\n-#ifdef USE_MAPPED_LOCATION\n-DEFTREECODE (EXPR_WITH_FILE_LOCATION, \"expr_with_file_location\",\n-\t     tcc_expression, 2)\n-#else\n-DEFTREECODE (EXPR_WITH_FILE_LOCATION, \"expr_with_file_location\",\n-\t     tcc_expression, 3)\n-#endif\n-\n /*\n Local variables:\n mode:c"}, {"sha": "1f71764647387943fd978355c8e1238250da196c", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -728,30 +728,13 @@ union lang_tree_node\n   (DECL_LANG_SPECIFIC(DECL)->u.f.arg_slot_count)\n /* Source location of end of function. */\n #define DECL_FUNCTION_LAST_LINE(DECL) (DECL_LANG_SPECIFIC(DECL)->u.f.last_line)\n-/* Information on declaration location */\n-#define DECL_FUNCTION_WFL(DECL)  (DECL_LANG_SPECIFIC(DECL)->u.f.wfl)\n /* List of checked thrown exceptions, as specified with the `throws'\n    keyword */\n #define DECL_FUNCTION_THROWS(DECL) (DECL_LANG_SPECIFIC(DECL)->u.f.throws_list)\n-/* List of other constructors of the same class that this constructor\n-   calls */\n-#define DECL_CONSTRUCTOR_CALLS(DECL) \\\n-  (DECL_LANG_SPECIFIC(DECL)->u.f.called_constructor)\n-/* When the function is an access function, the DECL it was trying to\n-   access */\n-#define DECL_FUNCTION_ACCESS_DECL(DECL) \\\n-  (DECL_LANG_SPECIFIC(DECL)->u.f.called_constructor)\n-/* The identifier of the access method used to invoke this method from\n-   an inner class.  */\n-#define DECL_FUNCTION_INNER_ACCESS(DECL) \\\n-  (DECL_LANG_SPECIFIC(DECL)->u.f.inner_access)\n /* Pointer to the function's current's COMPOUND_EXPR tree (while\n    completing its body) or the function's block */\n #define DECL_FUNCTION_BODY(DECL) \\\n   (DECL_LANG_SPECIFIC(DECL)->u.f.function_decl_body)\n-/* How specific the function is (for method selection - Java source\n-   code front-end */\n-#define DECL_SPECIFIC_COUNT(DECL) DECL_ARG_SLOT_COUNT(DECL)\n /* For each function decl, init_test_table contains a hash table whose\n    entries are keyed on class names, and whose values are local\n    boolean decls.  The variables are intended to be TRUE when the\n@@ -819,8 +802,6 @@ union lang_tree_node\n /* True if a final field was initialized upon its declaration\n    or in an initializer.  Set after definite assignment.  */\n #define DECL_FIELD_FINAL_IUD(NODE)  (DECL_LANG_SPECIFIC (NODE)->u.v.final_iud)\n-/* The original WFL of a final variable. */\n-#define DECL_FIELD_FINAL_WFL(NODE)  (DECL_LANG_SPECIFIC(NODE)->u.v.wfl)\n /* The class that's the owner of a dynamic binding table.  */\n #define DECL_OWNER(NODE)            (DECL_LANG_SPECIFIC(NODE)->u.v.owner)\n /* True if NODE is a local variable final. */\n@@ -888,20 +869,15 @@ struct lang_decl_func GTY(())\n   /* A temporary lie for the sake of ggc.  Actually, last_line is\n      only a source_location if USE_MAPPED_LOCATION.  FIXME.  */\n   source_location last_line;\t/* End line number for a function decl */\n-  tree wfl;\t\t\t/* Information on the original location */\n   tree throws_list;\t\t/* Exception specified by `throws' */\n   tree function_decl_body;\t/* Hold all function's statements */\n-  tree called_constructor;\t/* When decl is a constructor, the\n-\t\t\t\t   list of other constructor it calls */\n \n   /* Class initialization test variables  */\n   htab_t GTY ((param_is (struct treetreehash_entry))) init_test_table;\n \t\t\t\t\n   /* Initialized (static) Class Table */\n   htab_t GTY ((param_is (union tree_node))) ict;\n \n-  tree inner_access;\t\t/* The identifier of the access method\n-\t\t\t\t   used for invocation from inner classes */\n   unsigned int native : 1;\t/* Nonzero if this is a native method  */\n   unsigned int init_final : 1;\t/* Nonzero all finals are initialized */\n   unsigned int init_calls_this : 1;\n@@ -972,7 +948,6 @@ struct lang_decl_var GTY(())\n   int end_pc;\n   tree slot_chain;\n   tree am;\t\t\t/* Access method for this field (1.1) */\n-  tree wfl;\t\t\t/* Original wfl */\n   tree owner;\n   unsigned int final_iud : 1;\t/* Final initialized upon declaration */\n   unsigned int cif : 1;\t\t/* True: decl is a class initialization flag */\n@@ -1702,36 +1677,6 @@ enum\n #define EXIT_BLOCK_LABELED_BLOCK(NODE) \\\n   TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 0)\n \n-/* In an EXPR_WITH_FILE_LOCATION node.  */\n-#define EXPR_WFL_EMIT_LINE_NOTE(NODE) \\\n-  (EXPR_WITH_FILE_LOCATION_CHECK (NODE)->base.public_flag)\n-#undef EXPR_WFL_NODE\n-#define EXPR_WFL_NODE(NODE) \\\n-  TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 0)\n-#ifdef USE_MAPPED_LOCATION\n-#define EXPR_WFL_LINECOL(NODE) EXPR_LOCUS(NODE)\n-#define EXPR_WFL_FILENAME(NODE) EXPR_FILENAME (NODE)\n-#define EXPR_WFL_LINENO(NODE) EXPR_LINENO (NODE)\n-extern tree build_expr_wfl (tree, source_location);\n-extern tree expr_add_location (tree, source_location, bool);\n-#define build_unknown_wfl(NODE) build_expr_wfl(NODE, UNKNOWN_LOCATION)\n-#else\n-#define EXPR_WFL_LINECOL(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n-#define EXPR_WFL_LINENO(NODE) (EXPR_WFL_LINECOL (NODE) >> 12)\n-#define EXPR_WFL_COLNO(NODE) (EXPR_WFL_LINECOL (NODE) & 0xfff)\n-#undef EXPR_WFL_FILENAME_NODE\n-#define EXPR_WFL_FILENAME_NODE(NODE) \\\n-  TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 2)\n-#define EXPR_WFL_FILENAME(NODE) \\\n-  IDENTIFIER_POINTER (EXPR_WFL_FILENAME_NODE (NODE))\n-/* ??? Java uses this in all expressions.  */\n-#define EXPR_WFL_SET_LINECOL(NODE, LINE, COL) \\\n-  (EXPR_WFL_LINECOL(NODE) = ((LINE) << 12) | ((COL) & 0xfff))\n-\n-extern tree build_expr_wfl (tree, const char *, int, int);\n-#define build_unknown_wfl(NODE) build_expr_wfl(NODE, NULL, 0, 0)\n-#endif\n-\n extern void java_genericize (tree);\n extern int java_gimplify_expr (tree *, tree *, tree *);\n "}, {"sha": "51459c53dd7cc7564abcedb417f7534b2949de33", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8993880972b7f641698b1d9f41bb34a80f349/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=b7e8993880972b7f641698b1d9f41bb34a80f349", "patch": "@@ -876,13 +876,6 @@ dump_compound_expr (dump_info_p di, tree t)\n \t  dump_compound_expr (di, TREE_OPERAND (t, i));\n \t  break;\n \n-\tcase EXPR_WITH_FILE_LOCATION:\n-\t    {\n-\t      tree wfl_node = EXPR_WFL_NODE (TREE_OPERAND (t, i));\n-\t      dump_child (\"expr\", wfl_node);\n-\t      break;\n-\t    }\n-\n \tdefault:\n \t  dump_child (\"expr\", TREE_OPERAND (t, i));\n \t}"}]}