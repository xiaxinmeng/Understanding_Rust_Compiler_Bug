{"sha": "7ed1cd9665d8ca0fa07b2483e604c25e704584af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkMWNkOTY2NWQ4Y2EwZmEwN2IyNDgzZTYwNGMyNWU3MDQ1ODRhZg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-06-03T12:55:24Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-06-03T12:55:24Z"}, "message": "vect: Use main loop's thresholds and VF to narrow upper_bound of epilogue\n\nThis patch uses the knowledge of the conditions to enter an epilogue loop to\nhelp come up with a potentially more restricive upper bound.\n\ngcc/ChangeLog:\n\n\t* tree-vect-loop.c (vect_transform_loop): Use main loop's various'\n\tthresholds to narrow the upper bound on epilogue iterations.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/part_vect_single_iter_epilog.c: New test.", "tree": {"sha": "55c9ffd6adcd0b3464eeef16875b0e535b86bd08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c9ffd6adcd0b3464eeef16875b0e535b86bd08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ed1cd9665d8ca0fa07b2483e604c25e704584af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed1cd9665d8ca0fa07b2483e604c25e704584af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed1cd9665d8ca0fa07b2483e604c25e704584af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed1cd9665d8ca0fa07b2483e604c25e704584af/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4242710c7966a965bbd14cd50ecdba28fd5717e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4242710c7966a965bbd14cd50ecdba28fd5717e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4242710c7966a965bbd14cd50ecdba28fd5717e"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "a03229eb55585f637ebd5288fb4c00f8f921d44c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/part_vect_single_iter_epilog.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed1cd9665d8ca0fa07b2483e604c25e704584af/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpart_vect_single_iter_epilog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed1cd9665d8ca0fa07b2483e604c25e704584af/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpart_vect_single_iter_epilog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpart_vect_single_iter_epilog.c?ref=7ed1cd9665d8ca0fa07b2483e604c25e704584af", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 --param vect-partial-vector-usage=1\" } */\n+\n+void\n+foo (short * __restrict__ a, short * __restrict__ b, short * __restrict__ c, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    c[i] = a[i] + b[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-9]+.h, wzr, [xw][0-9]+} 1 } } */"}, {"sha": "ba36348b835c25bc556da71a133f81f8a6fc3745", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed1cd9665d8ca0fa07b2483e604c25e704584af/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed1cd9665d8ca0fa07b2483e604c25e704584af/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=7ed1cd9665d8ca0fa07b2483e604c25e704584af", "patch": "@@ -9740,12 +9740,31 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n   /* In these calculations the \"- 1\" converts loop iteration counts\n      back to latch counts.  */\n   if (loop->any_upper_bound)\n-    loop->nb_iterations_upper_bound\n-      = (final_iter_may_be_partial\n-\t ? wi::udiv_ceil (loop->nb_iterations_upper_bound + bias_for_lowest,\n-\t\t\t  lowest_vf) - 1\n-\t : wi::udiv_floor (loop->nb_iterations_upper_bound + bias_for_lowest,\n-\t\t\t   lowest_vf) - 1);\n+    {\n+      loop_vec_info main_vinfo = LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo);\n+      loop->nb_iterations_upper_bound\n+\t= (final_iter_may_be_partial\n+\t   ? wi::udiv_ceil (loop->nb_iterations_upper_bound + bias_for_lowest,\n+\t\t\t    lowest_vf) - 1\n+\t   : wi::udiv_floor (loop->nb_iterations_upper_bound + bias_for_lowest,\n+\t\t\t     lowest_vf) - 1);\n+      if (main_vinfo)\n+\t{\n+\t  unsigned int bound;\n+\t  poly_uint64 main_iters\n+\t    = upper_bound (LOOP_VINFO_VECT_FACTOR (main_vinfo),\n+\t\t\t   LOOP_VINFO_COST_MODEL_THRESHOLD (main_vinfo));\n+\t  main_iters\n+\t    = upper_bound (main_iters,\n+\t\t\t   LOOP_VINFO_VERSIONING_THRESHOLD (main_vinfo));\n+\t  if (can_div_away_from_zero_p (main_iters,\n+\t\t\t\t\tLOOP_VINFO_VECT_FACTOR (loop_vinfo),\n+\t\t\t\t\t&bound))\n+\t    loop->nb_iterations_upper_bound\n+\t      = wi::umin ((widest_int) (bound - 1),\n+\t\t\t  loop->nb_iterations_upper_bound);\n+      }\n+  }\n   if (loop->any_likely_upper_bound)\n     loop->nb_iterations_likely_upper_bound\n       = (final_iter_may_be_partial"}]}