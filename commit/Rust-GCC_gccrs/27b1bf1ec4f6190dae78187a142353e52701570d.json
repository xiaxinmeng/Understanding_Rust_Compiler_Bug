{"sha": "27b1bf1ec4f6190dae78187a142353e52701570d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiMWJmMWVjNGY2MTkwZGFlNzgxODdhMTQyMzUzZTUyNzAxNTcwZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-06-26T05:44:26Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-06-26T05:44:26Z"}, "message": "[PR86064] split single cross-partition range with nonzero locviews\n\nWe didn't split cross-partition ranges in loclists to output a\nwhole-function location expression, but with nonzero locviews, we\nforce loclists, and then we have to split to avoid cross-partition\nlist entries.\n\nfor  gcc/ChangeLog\n\n\tPR debug/86064\n\t* dwarf2out.c (loc_list_has_views): Adjust comments.\n\t(dw_loc_list): Split single cross-partition range with\n\tnonzero locview.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/86064\n\t* gcc.dg/pr86064.c: New.\n\nFrom-SVN: r262130", "tree": {"sha": "aca0f79cc7589e30339573600e8162724b4cd85f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca0f79cc7589e30339573600e8162724b4cd85f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27b1bf1ec4f6190dae78187a142353e52701570d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b1bf1ec4f6190dae78187a142353e52701570d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b1bf1ec4f6190dae78187a142353e52701570d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b1bf1ec4f6190dae78187a142353e52701570d/comments", "author": null, "committer": null, "parents": [{"sha": "d54ca450d2dd008171d93c8051c1f83de8469900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ca450d2dd008171d93c8051c1f83de8469900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54ca450d2dd008171d93c8051c1f83de8469900"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "d420310e07310076aa063cf5b9b11c08ebbe081d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27b1bf1ec4f6190dae78187a142353e52701570d", "patch": "@@ -1,3 +1,10 @@\n+2018-06-26  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/86064\n+\t* dwarf2out.c (loc_list_has_views): Adjust comments.\n+\t(dw_loc_list): Split single cross-partition range with\n+\tnonzero locview.\n+\n 2018-06-25  Jeff Law  <law@redhat.com>\n \n \t* config/v850/predicates.md (const_float_1_operand): Fix match_code"}, {"sha": "b5e3134930738f9f6bf168f1d8e5c41eb5a5c187", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=27b1bf1ec4f6190dae78187a142353e52701570d", "patch": "@@ -10029,7 +10029,15 @@ new_loc_list (dw_loc_descr_ref expr, const char *begin, var_loc_view vbegin,\n   return retlist;\n }\n \n-/* Return true iff there's any nonzero view number in the loc list.  */\n+/* Return true iff there's any nonzero view number in the loc list.\n+\n+   ??? When views are not enabled, we'll often extend a single range\n+   to the entire function, so that we emit a single location\n+   expression rather than a location list.  With views, even with a\n+   single range, we'll output a list if start or end have a nonzero\n+   view.  If we change this, we may want to stop splitting a single\n+   range in dw_loc_list just because of a nonzero view, even if it\n+   straddles across hot/cold partitions.  */\n \n static bool\n loc_list_has_views (dw_loc_list_ref list)\n@@ -17139,7 +17147,13 @@ dw_loc_list (var_loc_list *loc_list, tree decl, int want_address)\n \t\t of first partition and second one starting at the\n \t\t beginning of second partition.  */\n \t      if (node == loc_list->last_before_switch\n-\t\t  && (node != loc_list->first || loc_list->first->next)\n+\t\t  && (node != loc_list->first || loc_list->first->next\n+\t\t      /* If we are to emit a view number, we will emit\n+\t\t\t a loclist rather than a single location\n+\t\t\t expression for the entire function (see\n+\t\t\t loc_list_has_views), so we have to split the\n+\t\t\t range that straddles across partitions.  */\n+\t\t      || !ZERO_VIEW_P (node->view))\n \t\t  && current_function_decl)\n \t\t{\n \t\t  endname = cfun->fde->dw_fde_end;"}, {"sha": "5d5ed667afc715e4b2135f89c17fb5afeb9e9acf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27b1bf1ec4f6190dae78187a142353e52701570d", "patch": "@@ -1,3 +1,8 @@\n+2018-06-26  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/86064\n+\t* gcc.dg/pr86064.c: New.\n+\n 2018-06-25  Jeff Law  <law@redhat.com>\n \n \t* lib/target-supports.exp"}, {"sha": "5be820c78f8476402d60108fea7ae8a2aeba892f", "filename": "gcc/testsuite/gcc.dg/pr86064.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86064.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b1bf1ec4f6190dae78187a142353e52701570d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86064.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86064.c?ref=27b1bf1ec4f6190dae78187a142353e52701570d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O2 -fno-var-tracking-assignments -gsplit-dwarf\" } */\n+\n+/* This used to fail with location views (implicitly) enabled, because\n+   var-tracking (not at assignments) creates a range for d starting at\n+   the load after the first call, and we did not split the range,\n+   despite its crossing between hot and cold partitions, because it's\n+   a single range, that we normally extend to the entire function.\n+   However, because the range starts at a (presumed) nonzero view, we\n+   end up outputting a loclist instead of a single location entry.\n+   But then, -gsplit-dwarf selects (startx,length) loclist entries,\n+   and the length ends up computing the difference between symbols in\n+   different subsections.  */\n+\n+int a;\n+__attribute__((__cold__)) void b();\n+\n+void e(int *);\n+int f();\n+\n+void c() {\n+  int d;\n+  e(&d);\n+  a = d;\n+  if (f())\n+    b();\n+}"}]}