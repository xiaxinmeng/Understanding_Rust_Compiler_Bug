{"sha": "1fd2f510181091030051e8954a33775d59b8fca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkMmY1MTAxODEwOTEwMzAwNTFlODk1NGEzMzc3NWQ1OWI4ZmNhNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-10-15T08:45:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-15T08:45:33Z"}, "message": "Makefile.am (toolexeclibdir): Add support fo VERSION_SPECIFIC_LIBS and --with-gxx-include-dir.\n\n\n2000-10-13  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n            Mark Harig  <markh@landmark.com>\n\n\t* src/Makefile.am (toolexeclibdir): Add support fo\n\tVERSION_SPECIFIC_LIBS and --with-gxx-include-dir.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Same.\n\t(glibcppinstalldir): Adjust.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* Makefile.am: Remove gxx_include_dir. Remove INCLUDE.\n\t* Makefile.in: Regenerate.\n\t* docs/configopts.html: Add descriptions of flags.\n\nCo-Authored-By: Mark Harig <markh@landmark.com>\n\nFrom-SVN: r36872", "tree": {"sha": "fe7efb1135f7c1d7c4510ab96884579a75f157c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7efb1135f7c1d7c4510ab96884579a75f157c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd2f510181091030051e8954a33775d59b8fca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd2f510181091030051e8954a33775d59b8fca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd2f510181091030051e8954a33775d59b8fca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd2f510181091030051e8954a33775d59b8fca5/comments", "author": null, "committer": null, "parents": [{"sha": "4ccd4a763318d240ffe87c6f030ce2e60903c2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccd4a763318d240ffe87c6f030ce2e60903c2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccd4a763318d240ffe87c6f030ce2e60903c2f7"}], "stats": {"total": 2469, "additions": 1338, "deletions": 1131}, "files": [{"sha": "3d72413a0ff762956270176c2add281d9156889f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -1,3 +1,16 @@\n+2000-10-13  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+            Mark Harig  <markh@landmark.com>\n+\n+\t* src/Makefile.am (toolexeclibdir): Add support fo\n+\tVERSION_SPECIFIC_LIBS and --with-gxx-include-dir.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Same.\n+\t(glibcppinstalldir): Adjust.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* Makefile.am: Remove gxx_include_dir. Remove INCLUDE. \n+\t* Makefile.in: Regenerate.\n+\t* docs/configopts.html: Add descriptions of flags.\n+\t\n 2000-10-11  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* libsupc++/Makefile.am: Use it."}, {"sha": "b32a151cd8b46f84e3989d8ca8f31f9263222c77", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -24,11 +24,6 @@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-# This helps subvert libstdcxx_interface, as calculated by devo/config.if\n-# Needed so that g++ can find the correct include subdir automatically.\n-INTERFACE = v3\n-gxx_include_dir=$(includedir)/g++\n-\n SUBDIRS = libio libmath libsupc++ src\n \n "}, {"sha": "f41854bcffb344b0c6c2f49a583634048fea0ed7", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -106,18 +106,16 @@ VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n+libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n \n-# This helps subvert libstdcxx_interface, as calculated by devo/config.if\n-# Needed so that g++ can find the correct include subdir automatically.\n-INTERFACE = v3\n-gxx_include_dir = $(includedir)/g++\n-\n SUBDIRS = libio libmath libsupc++ src\n \n # Multilib support."}, {"sha": "a3df9b24324079667a73dc8c3af575a70e85bf50", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -1230,8 +1230,8 @@ dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio         enable GNU libio for target io package. (default)\n-  --enable-cstdio=LIB     use LIB target-speific io package.], \n+  [  --enable-cstdio        enable GNU libio for target io package. (default)\n+     --enable-cstdio=LIB    use LIB target-speific io package.], \n   if test x$enable_cstdio = xno; then\n     enable_cstdio=libio\n   fi,\n@@ -1331,7 +1331,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for threads package to use])\n   AC_ARG_ENABLE(threads,\n   [  --enable-threads        enable thread usage for target GCC.\n-  --enable-threads=LIB    use LIB thread package for target GCC.],\n+     --enable-threads=LIB    use LIB thread package for target GCC.],\n   if test x$enable_threads = xno; then\n     enable_threads=''\n   fi,"}, {"sha": "fe2efb711fdb6b91822fdcaf5f6ae464c9c1b72f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -1242,8 +1242,8 @@ dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio         enable GNU libio for target io package. (default)\n-  --enable-cstdio=LIB     use LIB target-speific io package.], \n+  [  --enable-cstdio        enable GNU libio for target io package. (default)\n+     --enable-cstdio=LIB    use LIB target-speific io package.], \n   if test x$enable_cstdio = xno; then\n     enable_cstdio=libio\n   fi,\n@@ -1343,7 +1343,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for threads package to use])\n   AC_ARG_ENABLE(threads,\n   [  --enable-threads        enable thread usage for target GCC.\n-  --enable-threads=LIB    use LIB thread package for target GCC.],\n+     --enable-threads=LIB    use LIB thread package for target GCC.],\n   if test x$enable_threads = xno; then\n     enable_threads=''\n   fi,"}, {"sha": "36edb196d42b752ce48c443e235c525b45639013", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1120, "deletions": 1027, "changes": 2147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1fd2f510181091030051e8954a33775d59b8fca5"}, {"sha": "bd8978bfb051071b155ea29f51659cf08447a88b", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 89, "deletions": 34, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -66,46 +66,46 @@ if test -n \"$with_cross_host\"; then\n \t# currently calling it.\n \tAC_DEFINE(HAVE_FLOAT_H)\n \n-    \tAC_DEFINE(HAVE__FINITE)\n-    \tAC_DEFINE(HAVE__ISNAN)\n-    \tAC_DEFINE(HAVE__COPYSIGN)\n-    \tAC_DEFINE(HAVE__FPCLASS)\n-    \tAC_DEFINE(HAVE_MODF)\n-\n-    \tctype_include_dir=\"config/os/wince\"\n-   \tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n-    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+\tAC_DEFINE(HAVE__FINITE)\n+\tAC_DEFINE(HAVE__ISNAN)\n+\tAC_DEFINE(HAVE__COPYSIGN)\n+\tAC_DEFINE(HAVE__FPCLASS)\n+\tAC_DEFINE(HAVE_MODF)\n+\n+\tctype_include_dir=\"config/os/wince\"\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n \tbits/ctype_inline.h)\n-    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n \tbits/ctype_noninline.h)\n \n \n-    \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+\tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n \n-    \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-    \tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n+\tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n+\tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n \t;;\n     *)\n \t# We assume newlib.  This lets us hard-code the functions we know\n \t# we'll have.\n-    \tAC_DEFINE(HAVE_FINITE)\n-    \tAC_DEFINE(HAVE_ISNAN)\n-    \tAC_DEFINE(HAVE_ISNANF)\n-    \tAC_DEFINE(HAVE_ISINF)\n-    \tAC_DEFINE(HAVE_ISINFF)\n-\n-    \tctype_include_dir=\"config/os/newlib\"\n-   \tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n-    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n+\tAC_DEFINE(HAVE_FINITE)\n+\tAC_DEFINE(HAVE_ISNAN)\n+\tAC_DEFINE(HAVE_ISNANF)\n+\tAC_DEFINE(HAVE_ISINF)\n+\tAC_DEFINE(HAVE_ISINFF)\n+\n+\tctype_include_dir=\"config/os/newlib\"\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n \tbits/ctype_inline.h)\n-    \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n \tbits/ctype_noninline.h)\n \n-    \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+\tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n \n-    \tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n-    \tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n-    \t# need to ceck for faster f versions of math functions, ie sinf?\n+\tAC_DEFINE(_GLIBCPP_BUGGY_FLOAT_COMPLEX)\n+\tAC_DEFINE(_GLIBCPP_BUGGY_COMPLEX)\n+\t# need to ceck for faster f versions of math functions, ie sinf?\n \t;;\n   esac\n else\n@@ -152,6 +152,62 @@ fi\n \n # Generate the various Makefiles, include files, and scripts.\n \n+# This helps subvert libstdcxx_interface, as calculated by devo/config.if\n+# Needed so that g++ can find the correct include subdir automatically.\n+INTERFACE=v3\n+\n+# Check for the interface version number for specifying where header\n+# files are installed, if a version number is provided.\n+AC_MSG_CHECKING([for interface version number])\n+libstdcxx_interface=$INTERFACE\n+AC_MSG_RESULT($libstdcxx_interface)\n+AC_SUBST(libstdcxx_interface)\n+\n+# Process the option --with-gxx-include-dir=<path to include-files directory>\n+AC_MSG_CHECKING([for --with-gxx-include-dir])\n+AC_ARG_WITH(gxx-include-dir,\n+[ --with-gxx-include-dir  the installation directory for include files],\n+[case \"${withval}\" in\n+  yes)\n+    AC_MSG_ERROR(Missing directory for --with-gxx-include-dir)\n+    gxx_include_dir=no\n+    ;;\n+  no)\n+    gxx_include_dir=no\n+    ;;\n+  *)\n+    gxx_include_dir=${withval}\n+    ;;\n+esac], [gxx_include_dir=no])\n+AC_MSG_RESULT($gxx_include_dir)\n+AC_SUBST(gxx_include_dir)\n+AM_CONDITIONAL(GXX_INCLUDE_DIR, test x${gxx_include_dir} != xno)\n+\n+# Process the option \"--enable-version-specific-runtime-libs\"\n+AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n+AC_ARG_ENABLE(version-specific-runtime-libs,\n+[  --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory ],\n+[  version_specific_libs=yes\n+# Need the gcc compiler version to know where to install libraries\n+# and header files if --enable-version-specific-runtime-libs option\n+# is selected.\n+changequote(,)dnl\n+gcc_tmp=`grep version_string ${srcdir}/../gcc/version.c | awk '{print $6}'`\n+gcc_num=`echo ${gcc_tmp} | sed 's/\\\"//g'`\n+#gcc_date=`grep version_string ${srcdir}/../gcc/version.c | awk '{print $7}'`\n+#gcc_version=$gcc_num-$gcc_date\n+gcc_version=$gcc_num\n+changequote([,])dnl\n+AC_SUBST(gcc_version)\n+],version_specific_libs=no)\n+AC_MSG_RESULT($version_specific_libs)\n+if test x${version_specific_libs} = xyes; then\n+  AM_CONDITIONAL(VERSION_SPECIFIC_LIBS, test x${version_specific_libs} = xyes)\n+  AC_MSG_WARN(version specific directory is: $gcc_version)\n+fi\n+\n+\n+\n # Export all the include and flag information to makefiles.\n GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_EXPORT_FLAGS\n@@ -184,18 +240,17 @@ blddir=`pwd`\n AC_OUTPUT_COMMANDS([$srcdir/mkc++config $blddir $srcdir])\n \n # Generate bits/std_limits.h and src/limitsMEMBERS.cc\n-AC_OUTPUT_COMMANDS([$srcdir/mknumeric_limits $blddir $srcdir $xcompiling])\n-\n+if test ! -f stamp-limits; then\n+  AC_OUTPUT_COMMANDS([$srcdir/mknumeric_limits $blddir $srcdir $xcompiling])\n+  touch stamp-limits\n+fi\n \n # Sanity checking & User-visible messages.\n # Checks down here, otherwise they get scrolled off before\n # the user will notice.\n-if test \"$enable_namespaces\" = \"yes\" && test \"$enable_libgcc_rebuild\" = \"no\"\n-then\n+if test \"$enable_libgcc_rebuild\" = \"no\"; then\n   AC_MSG_WARN([libgcc.a will not match mangled symbols unless it is rebuilt])\n-fi\n-if test \"$enable_namespaces\" = \"no\" && test \"$enable_libgcc_rebuild\" != \"no\"\n-then\n+else\n   # Other things besides namespaces can make this true as well, but none\n   # of them are done automatically... yet\n   AC_MSG_WARN([no point in rebuilding libgcc.a if namespaces aren't used])"}, {"sha": "5dffbbfa657ccf6c31241b5d0b20e024ab249d61", "filename": "libstdc++-v3/docs/configopts.html", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.8 2000/08/28 18:41:24 pme Exp $ -->\n+<!-- $Id: configopts.html,v 1.9 2000/10/09 08:55:05 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -128,6 +128,19 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \tand this option has been removed.\n      </P>\n \n+ <DT><TT>--enable-version-specific-runtime-libs</TT>\n+<DD><P>Uses the compiler file \"gcc/version.c\" to determine the\n+       compiler version.\n+     </P>\n+\n+ <DT><TT>--with-gxx-include-dir=<include-files dir></TT>\n+ <DD><P> Adds support for named libstdc++ include directory.\n+ For instance, the following puts all the libstdc++ headers into a directory called \"2.97-20001008\" instead of the usual \"g++-v3\"\n+<TT>\n+--with-gxx-include-dir=/mnt/hd/bliss/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</TT>\n+     </P>\n+\n+\n  <DT><TT>--enable-cxx-flags=FLAGS</TT>\n  <DD><P>With this option, you can pass a string of -f (functionality)\n         flags to the compiler to use when building libstdc++.  FLAGS\n@@ -172,7 +185,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.8 2000/08/28 18:41:24 pme Exp $\n+$Id: configopts.html,v 1.9 2000/10/09 08:55:05 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "0d2e635d09f3238e181ff63320614b91dcf8c397", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -99,9 +99,12 @@ VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n+libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n "}, {"sha": "a3594f83a8a18a9cfe8fc3454ce52910a9a670ef", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -99,9 +99,12 @@ VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+gcc_version = @gcc_version@\n glibcpp_basedir = @glibcpp_basedir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n+libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n "}, {"sha": "c82266c62f47346dcdecd36f29e7553134570aa5", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -29,9 +29,15 @@ MAINT_CHARSET = latin1\n if USE_LIBDIR\n toolexeclibdir = $(libdir)$(MULTISUBDIR)\n else\n+if VERSION_SPECIFIC_LIBS\n+gcc_version = @gcc_version@\n+toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+else\n toolexecdir = $(exec_prefix)/$(target_alias)\n toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n endif\n+endif\n \n \n # Need this library to both be part of libstdc++.a, and installed\n@@ -92,8 +98,17 @@ sources = \\\n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n \n-# This insanely simple bit of install magic courtesy of Mr. Tromey.\n-glibcppinstalldir= $(prefix)/include/g++-v3\n+# Check for various configure bits that change where the headers get installed.\n+if GXX_INCLUDE_DIR\n+glibcppinstalldir = @gxx_include_dir@\n+else\n+if VERSION_SPECIFIC_LIBS\n+glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+else\n+glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n+endif\n+endif\n+\n glibcppinstall_HEADERS = $(headers)\n \n # Flags to force separate libtool library to be static only."}, {"sha": "e4b710ba03c0e7d9a9dd587319fa97b7858af7b0", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -98,14 +98,19 @@ WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n glibcpp_basedir = @glibcpp_basedir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n+libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n @USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -148,9 +153,10 @@ sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception.cc \tnew_\n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n \n-# This insanely simple bit of install magic courtesy of Mr. Tromey.\n-glibcppinstalldir = $(prefix)/include/g++-v3\n glibcppinstall_HEADERS = $(headers)\n \n # Flags to force separate libtool library to be static only."}, {"sha": "9d9286ae0533e17f4f66b7f07c1f1624957c5735", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.39 2000/10/12 11:45:23 bkoz Exp $\n+## $Id: Makefile.am,v 1.40 2000/10/12 12:02:10 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -31,10 +31,15 @@ MAINT_CHARSET = latin1\n if USE_LIBDIR\n toolexeclibdir = $(libdir)$(MULTISUBDIR)\n else\n+if VERSION_SPECIFIC_LIBS\n+gcc_version = @gcc_version@\n+toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+else\n toolexecdir = $(exec_prefix)/$(target_alias)\n toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n endif\n-\n+endif\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -218,24 +223,33 @@ $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n \techo \"done\" > $(top_builddir)/stamp-cshadow \n \n \n-# We cannot use the default rules to install headers since we cannot\n-# statically decide which headers to install.  So we have our own special\n-# installation routine here.\n-myincludep = $(DESTDIR)$(includedir)/g++-v3/\n+# Check for various configure bits that change where the headers get installed.\n+if GXX_INCLUDE_DIR\n+myincludep = @gxx_include_dir@\n+else\n+if VERSION_SPECIFIC_LIBS\n+myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+else\n+myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n+endif\n+endif\n \n-install: myinstallheaders\n+# We have our own special, needlessly complicated installation routine\n+# here, as automake/autoconf is currently brain-damaged when it comes\n+# to installing sub-directories of headers.\n+install-data-local: myinstallheaders\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n-myinstallheaders: $(headers:%=$(myincludep)%)\n+myinstallheaders: $(headers:%=$(myincludep)/%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n \t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n \t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n-\t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n+\t  echo \"$(INSTALL_DATA) $$i $(myincludep)/bits/\"; \\\n+\t        $(INSTALL_DATA) $$i $(myincludep)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n@@ -244,22 +258,13 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n \tdone; \\\n \tfi;\n \n-$(headers:%=$(myincludep)%): $(myincludep)%: %\n+$(headers:%=$(myincludep)/%): $(myincludep)/%: %\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \t$(mkinstalldirs) $(@D); \\\n \techo \" $(INSTALL_DATA) $^ $@\"; \\\n \t$(INSTALL_DATA) $^ $@; \\\n \tfi;\n \n-# All the (now removed) machinations with string instantiations messes up the\n-# automake-generated TAGS rule. Make a simple one here.\n-TAGS: $(build_headers) $(cpu_headers) \n-\tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n-\t$(build_headers) $(libio_headers) \\\n-\t$(top_srcdir)/src/*.cc \\\n-\t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n-\t-o $(top_builddir)/TAGS\n-\n # We have to handle misc-inst.cc and locale-inst.cc in a special way\n # since we cannot instantiate all classes due to missing definitions\n # for things like vptrs, type_info bits, etc. when using"}, {"sha": "80deafb83e3ab0910ac78143597790aeeab29891", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd2f510181091030051e8954a33775d59b8fca5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1fd2f510181091030051e8954a33775d59b8fca5", "patch": "@@ -98,14 +98,19 @@ WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n glibcpp_basedir = @glibcpp_basedir@\n+gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n+libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n @USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -179,11 +184,9 @@ libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n @GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-\n-# We cannot use the default rules to install headers since we cannot\n-# statically decide which headers to install.  So we have our own special\n-# installation routine here.\n-myincludep = $(DESTDIR)$(includedir)/g++-v3/\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.\n@@ -350,6 +353,16 @@ ID: $(HEADERS) $(SOURCES) $(LISP)\n \there=`pwd` && cd $(srcdir) \\\n \t  && mkid -f$$here/ID $$unique $(LISP)\n \n+TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n+\ttags=; \\\n+\there=`pwd`; \\\n+\tlist='$(SOURCES) $(HEADERS)'; \\\n+\tunique=`for i in $$list; do echo $$i; done | \\\n+\t  awk '    { files[$$0] = 1; } \\\n+\t       END { for (i in files) print i; }'`; \\\n+\ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n+\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\n mostlyclean-tags:\n \n clean-tags:\n@@ -387,7 +400,7 @@ install-info: install-info-am\n install-exec-am: install-toolexeclibLTLIBRARIES\n install-exec: install-exec-am\n \n-install-data-am:\n+install-data-am: install-data-local\n install-data: install-data-am\n \n install-am: all-am\n@@ -448,10 +461,11 @@ maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-redirect all-am all \\\n-installdirs mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+install-info install-exec-am install-exec install-data-local \\\n+install-data-am install-data install-am install uninstall-am uninstall \\\n+all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n \n \n # Specify that all *.o's depend on this.\n@@ -464,19 +478,22 @@ $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n \trm -f  $(top_builddir)/stamp-cshadow \n \techo \"done\" > $(top_builddir)/stamp-cshadow \n \n-install: myinstallheaders\n+# We have our own special, needlessly complicated installation routine\n+# here, as automake/autoconf is currently brain-damaged when it comes\n+# to installing sub-directories of headers.\n+install-data-local: myinstallheaders\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n-myinstallheaders: $(headers:%=$(myincludep)%)\n+myinstallheaders: $(headers:%=$(myincludep)/%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n \t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n \t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n-\t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n+\t  echo \"$(INSTALL_DATA) $$i $(myincludep)/bits/\"; \\\n+\t        $(INSTALL_DATA) $$i $(myincludep)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n@@ -485,22 +502,13 @@ myinstallheaders: $(headers:%=$(myincludep)%)\n \tdone; \\\n \tfi;\n \n-$(headers:%=$(myincludep)%): $(myincludep)%: %\n+$(headers:%=$(myincludep)/%): $(myincludep)/%: %\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \t$(mkinstalldirs) $(@D); \\\n \techo \" $(INSTALL_DATA) $^ $@\"; \\\n \t$(INSTALL_DATA) $^ $@; \\\n \tfi;\n \n-# All the (now removed) machinations with string instantiations messes up the\n-# automake-generated TAGS rule. Make a simple one here.\n-TAGS: $(build_headers) $(cpu_headers) \n-\tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n-\t$(build_headers) $(libio_headers) \\\n-\t$(top_srcdir)/src/*.cc \\\n-\t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n-\t-o $(top_builddir)/TAGS\n-\n # We have to handle misc-inst.cc and locale-inst.cc in a special way\n # since we cannot instantiate all classes due to missing definitions\n # for things like vptrs, type_info bits, etc. when using"}]}