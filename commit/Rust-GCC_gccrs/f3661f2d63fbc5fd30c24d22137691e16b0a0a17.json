{"sha": "f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2NjFmMmQ2M2ZiYzVmZDMwYzI0ZDIyMTM3NjkxZTE2YjBhMGExNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-05T13:07:25Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-05T13:09:09Z"}, "message": "i386: Implement integer vector compares for 64bit vectors [PR98218]\n\nImplement integer vector compares for 64bit vectors for TARGET_MMX_WITH_SSE.\n\n2021-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/98218\n\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n\tHandle V8QI, V4HI and V2SI modes.\n\t* config/i386/i386.c (ix86_build_const_vector): Handle V2SImode.\n\t(ix86_build_signbit_mask): Ditto.\n\t* config/i386/mmx.md (MMXMODE14): New mode iterator.\n\t(<smaxmin:code><MMXMODE14:mode>3): New expander.\n\t(*mmx_<smaxmin:code><MMXMODE14:mode>3): New insn pattern.\n\t(<umaxmin:code><MMXMODE24:mode>3): New expander.\n\t(*mmx_<umaxmin:code><MMXMODE24:mode>3): New insn pattern.\n\t(vec_cmp<MMXMODEI:mode><MMXMODEI:mode>): New expander.\n\t(vec_cmpu<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n\t(vcond<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n\t(vcondu<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n\t(vcond_mask_<MMXMODEI:mode><MMXMODEI:mode>): Ditto.\n\ngcc/testsuite/\n\n\tPR target/98218\n\t* gcc.target/i386/pr98218-1.c: New test.\n\t* gcc.target/i386/pr98218-1a.c: Ditto.\n\t* gcc.target/i386/pr98218-2.c: Ditto.\n\t* gcc.target/i386/pr98218-2a.c: Ditto.\n\t* gcc.target/i386/pr98218-3.c: Ditto.\n\t* gcc.target/i386/pr98218-3a.c: Ditto.\n\t* gcc.dg/vect/vect-bool-cmp.c (dg-final):\n\tScan vect tree dump for \"LOOP VECTORIZED\", not VECTORIZED.", "tree": {"sha": "aa5b9c7ad403ea5062d269339bd5459e4f397900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa5b9c7ad403ea5062d269339bd5459e4f397900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29745bf06276b9628d08ef1c9e28890cc56df4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29745bf06276b9628d08ef1c9e28890cc56df4aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29745bf06276b9628d08ef1c9e28890cc56df4aa"}], "stats": {"total": 261, "additions": 260, "deletions": 1}, "files": [{"sha": "4dfe7d6c282e679155f8e34cb5d1081f229d6eec", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -4204,16 +4204,32 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t      else if (code == GT && TARGET_SSE4_1)\n \t\tgen = gen_sminv16qi3;\n \t      break;\n+\t    case E_V8QImode:\n+\t      if (code == GTU && TARGET_SSE2)\n+\t\tgen = gen_uminv8qi3;\n+\t      else if (code == GT && TARGET_SSE4_1)\n+\t\tgen = gen_sminv8qi3;\n+\t      break;\n \t    case E_V8HImode:\n \t      if (code == GTU && TARGET_SSE4_1)\n \t\tgen = gen_uminv8hi3;\n \t      else if (code == GT && TARGET_SSE2)\n \t\tgen = gen_sminv8hi3;\n \t      break;\n+\t    case E_V4HImode:\n+\t      if (code == GTU && TARGET_SSE4_1)\n+\t\tgen = gen_uminv4hi3;\n+\t      else if (code == GT && TARGET_SSE2)\n+\t\tgen = gen_sminv4hi3;\n+\t      break;\n \t    case E_V4SImode:\n \t      if (TARGET_SSE4_1)\n \t\tgen = (code == GTU) ? gen_uminv4si3 : gen_sminv4si3;\n \t      break;\n+\t    case E_V2SImode:\n+\t      if (TARGET_SSE4_1)\n+\t\tgen = (code == GTU) ? gen_uminv2si3 : gen_sminv2si3;\n+\t      break;\n \t    case E_V2DImode:\n \t      if (TARGET_AVX512VL)\n \t\t{\n@@ -4254,6 +4270,7 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t    case E_V8SImode:\n \t    case E_V4DImode:\n \t    case E_V4SImode:\n+\t    case E_V2SImode:\n \t    case E_V2DImode:\n \t\t{\n \t\t  rtx t1, t2, mask;\n@@ -4278,7 +4295,9 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t    case E_V32QImode:\n \t    case E_V16HImode:\n \t    case E_V16QImode:\n+\t    case E_V8QImode:\n \t    case E_V8HImode:\n+\t    case E_V4HImode:\n \t      /* Perform a parallel unsigned saturating subtraction.  */\n \t      x = gen_reg_rtx (mode);\n \t      emit_insn (gen_rtx_SET"}, {"sha": "06b0f5814ea8e7ecabe7df3710ba8b872b9dfe9f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -15284,6 +15284,7 @@ ix86_build_const_vector (machine_mode mode, bool vect, rtx value)\n     case E_V16SImode:\n     case E_V8SImode:\n     case E_V4SImode:\n+    case E_V2SImode:\n     case E_V8DImode:\n     case E_V4DImode:\n     case E_V2DImode:\n@@ -15334,6 +15335,7 @@ ix86_build_signbit_mask (machine_mode mode, bool vect, bool invert)\n     case E_V8SFmode:\n     case E_V4SFmode:\n     case E_V2SFmode:\n+    case E_V2SImode:\n       vec_mode = mode;\n       imode = SImode;\n       break;"}, {"sha": "347295afbb524fc891ce8deb67551047f5fae95c", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -52,6 +52,7 @@\n \n ;; Mix-n-match\n (define_mode_iterator MMXMODE12 [V8QI V4HI])\n+(define_mode_iterator MMXMODE14 [V8QI V2SI])\n (define_mode_iterator MMXMODE24 [V4HI V2SI])\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n@@ -1417,6 +1418,31 @@\n    (set_attr \"type\" \"mmxmul,ssemul,ssemul\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:MMXMODE14 0 \"register_operand\")\n+        (smaxmin:MMXMODE14\n+\t  (match_operand:MMXMODE14 1 \"register_operand\")\n+\t  (match_operand:MMXMODE14 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*mmx_<code><mode>3\"\n+  [(set (match_operand:MMXMODE14 0 \"register_operand\" \"=Yr,*x,Yv\")\n+\t(smaxmin:MMXMODE14\n+\t  (match_operand:MMXMODE14 1 \"register_operand\" \"%0,0,Yv\")\n+\t  (match_operand:MMXMODE14 2 \"register_operand\" \"Yr,*x,Yv\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<maxmin_int><mmxvecsize>\\t{%2, %0|%0, %2}\n+   p<maxmin_int><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_<code>v4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")\n         (smaxmin:V4HI\n@@ -1451,6 +1477,31 @@\n    (set_attr \"type\" \"mmxadd,sseiadd,sseiadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:MMXMODE24 0 \"register_operand\")\n+        (umaxmin:MMXMODE24\n+\t  (match_operand:MMXMODE24 1 \"register_operand\")\n+\t  (match_operand:MMXMODE24 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*mmx_<code><mode>3\"\n+  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=Yr,*x,Yv\")\n+\t(umaxmin:MMXMODE24\n+\t  (match_operand:MMXMODE24 1 \"register_operand\" \"%0,0,Yv\")\n+\t  (match_operand:MMXMODE24 2 \"register_operand\" \"Yr,*x,Yv\")))]\n+  \"TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<maxmin_int><mmxvecsize>\\t{%2, %0|%0, %2}\n+   p<maxmin_int><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"mmx_<code>v8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\")\n         (umaxmin:V8QI\n@@ -1582,6 +1633,73 @@\n    (set_attr \"type\" \"mmxcmp,ssecmp,ssecmp\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"vec_cmp<mode><mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(match_operator:MMXMODEI 1 \"\"\n+\t  [(match_operand:MMXMODEI 2 \"register_operand\")\n+\t   (match_operand:MMXMODEI 3 \"register_operand\")]))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_int_vec_cmp (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vec_cmpu<mode><mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(match_operator:MMXMODEI 1 \"\"\n+\t  [(match_operand:MMXMODEI 2 \"register_operand\")\n+\t   (match_operand:MMXMODEI 3 \"register_operand\")]))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_int_vec_cmp (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond<mode><mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(if_then_else:MMXMODEI\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:MMXMODEI 4 \"register_operand\")\n+\t     (match_operand:MMXMODEI 5 \"register_operand\")])\n+\t  (match_operand:MMXMODEI 1)\n+\t  (match_operand:MMXMODEI 2)))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcondu<mode><mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(if_then_else:MMXMODEI\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:MMXMODEI 4 \"register_operand\")\n+\t     (match_operand:MMXMODEI 5 \"register_operand\")])\n+\t  (match_operand:MMXMODEI 1)\n+\t  (match_operand:MMXMODEI 2)))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond_mask_<mode><mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(vec_merge:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_operand\")\n+\t  (match_operand:MMXMODEI 2 \"register_operand\")\n+\t  (match_operand:MMXMODEI 3 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  ix86_expand_sse_movcc (operands[0], operands[3],\n+\t\t\t operands[1], operands[2]);\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral logical operations"}, {"sha": "c97da5289141d35a9f7ca220ae62aa82338fa7f5", "filename": "gcc/testsuite/gcc.dg/vect/vect-bool-cmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -253,4 +253,4 @@ main (int argc, char **argv)\n   check (res, ne);\n }\n \n-/* { dg-final { scan-tree-dump-times \"VECTORIZED\" 18 \"vect\" { target sse4_runtime } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 18 \"vect\" { target sse4_runtime } } } */"}, {"sha": "48407dabc2ad0a53fa5d7d869c7e4b2d7b234296", "filename": "gcc/testsuite/gcc.target/i386/pr98218-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char vec __attribute__((vector_size(8)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned char uvec __attribute__((vector_size(8)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpb\" } } */"}, {"sha": "3470c87cdc3525cf02c4c0f9b3e6cc8d987d1883", "filename": "gcc/testsuite/gcc.target/i386/pr98218-1a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-1a.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+typedef char T;\n+\n+#define M 8\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtb\" } } */"}, {"sha": "0b716126413081cf48a1c945cf8e697c6431ffa1", "filename": "gcc/testsuite/gcc.target/i386/pr98218-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef short vec __attribute__((vector_size(8)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned short uvec __attribute__((vector_size(8)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpw\" } } */"}, {"sha": "6afd0a412d71de19fa49871a74b50a9d26a0d971", "filename": "gcc/testsuite/gcc.target/i386/pr98218-2a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-2a.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+typedef short T;\n+\n+#define M 4\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtw\" } } */"}, {"sha": "83a8c29864039674bc2df7389b1909c65a3beec3", "filename": "gcc/testsuite/gcc.target/i386/pr98218-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef int vec __attribute__((vector_size(8)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned int uvec __attribute__((vector_size(8)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpl\" } } */"}, {"sha": "272d54e5b3467c2b9a7d2449649ea3331be65632", "filename": "gcc/testsuite/gcc.target/i386/pr98218-3a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3661f2d63fbc5fd30c24d22137691e16b0a0a17/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98218-3a.c?ref=f3661f2d63fbc5fd30c24d22137691e16b0a0a17", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/98522 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+typedef int T;\n+\n+#define M 2\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtd\" { xfail *-*-* } } } */"}]}