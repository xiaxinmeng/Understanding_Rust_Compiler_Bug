{"sha": "7f9bc51b091441d6f9484c62d210d4fc724b376b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5YmM1MWIwOTE0NDFkNmY5NDg0YzYyZDIxMGQ0ZmM3MjRiMzc2Yg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-01-28T17:40:38Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-01-28T17:40:38Z"}, "message": "tree-ssa-loop-unswitch.c: Include tree-inline.h.\n\n\t* tree-ssa-loop-unswitch.c: Include tree-inline.h.\n\t(tree_unswitch_single_loop): Pass eni_size_weights to\n\ttree_num_loop_insns.\n\t* tree-ssa-loop-manip.c: Include tree-inline.h.\n\t(can_unroll_loop_p): Pass eni_size_weights to\n\ttree_num_loop_insns.\n\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p):\n\tPass eni_size_weights to estimate_num_insns.\n\t* tree.h (init_inline_once): Export.\n\t* toplev.c (backend_init): Call init_inline_once.\n\t* cgraphunit.c (cgraph_process_new_functions,\n\tcgraph_analyze_function): Pass eni_inlining_weights to\n\testimate_num_insns.\n\t* ipa-inline.c (compute_inline_parameters): Ditto.\n\t* tree-ssa-loop-ivcanon.c (tree_num_loop_insns): Pass weights\n\tto estimate_num_insns.\n\t(try_unroll_loop_completely): Pass eni_size_weights to\n\ttree_num_loop_insns.\n\t* tree-eh.c (decide_copy_try_finally): Pass eni_size_weights\n\tot estimate_num_insns.\n\t* tree-ssa-loop-prefetch.c: Include tree-inline.h.\n\t(loop_prefetch_arrays): Pass eni_time_weights to tree_num_loop_insns.\n\t* tree-inline.c (eni_inlining_weights, eni_size_weights,\n\teni_time_weights): New variables.\n\t(init_inline_once): Initialize them.\n\t(struct eni_data): Mew.\n\t(estimate_num_insns_1, estimate_num_insns): Use weights.\n\t* tree-inline.h (struct eni_weights_d): New.\n\t(eni_inlining_weights, eni_size_weights, eni_time_weights): Declare.\n\t(estimate_num_insns): Declaration changed.\n\t* cfgloop.h (tree_num_loop_insns): Declaration changed.\n\t* Makefile.in (tree-ssa-loop-unswitch.o, tree-ssa-loop-prefetch.o,\n\ttree-ssa-loop-manip.o): Add TREE_INLINE_H dependency.\n\n\t* gcc.dg/tree-ssa/loop-23.c: New test.\n\nFrom-SVN: r121260", "tree": {"sha": "c62392cb24f6c73aa4b1c6e48f7355a4012a7a9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62392cb24f6c73aa4b1c6e48f7355a4012a7a9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9bc51b091441d6f9484c62d210d4fc724b376b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9bc51b091441d6f9484c62d210d4fc724b376b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9bc51b091441d6f9484c62d210d4fc724b376b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9bc51b091441d6f9484c62d210d4fc724b376b/comments", "author": null, "committer": null, "parents": [{"sha": "b39c6706458c006734d1a02c1a180b00d88182a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39c6706458c006734d1a02c1a180b00d88182a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39c6706458c006734d1a02c1a180b00d88182a5"}], "stats": {"total": 240, "additions": 207, "deletions": 33}, "files": [{"sha": "5a6d033e06ad565c70ce2093a93d12c1fbf24f63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -1,3 +1,39 @@\n+2007-01-28  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-unswitch.c: Include tree-inline.h.\n+\t(tree_unswitch_single_loop): Pass eni_size_weights to\n+\ttree_num_loop_insns.\n+\t* tree-ssa-loop-manip.c: Include tree-inline.h.\n+\t(can_unroll_loop_p): Pass eni_size_weights to\n+\ttree_num_loop_insns.\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p):\n+\tPass eni_size_weights to estimate_num_insns.\n+\t* tree.h (init_inline_once): Export.\n+\t* toplev.c (backend_init): Call init_inline_once.\n+\t* cgraphunit.c (cgraph_process_new_functions,\n+\tcgraph_analyze_function): Pass eni_inlining_weights to\n+\testimate_num_insns.\n+\t* ipa-inline.c (compute_inline_parameters): Ditto.\n+\t* tree-ssa-loop-ivcanon.c (tree_num_loop_insns): Pass weights\n+\tto estimate_num_insns.\n+\t(try_unroll_loop_completely): Pass eni_size_weights to\n+\ttree_num_loop_insns.\n+\t* tree-eh.c (decide_copy_try_finally): Pass eni_size_weights\n+\tot estimate_num_insns.\n+\t* tree-ssa-loop-prefetch.c: Include tree-inline.h.\n+\t(loop_prefetch_arrays): Pass eni_time_weights to tree_num_loop_insns.\n+\t* tree-inline.c (eni_inlining_weights, eni_size_weights,\n+\teni_time_weights): New variables.\n+\t(init_inline_once): Initialize them.\n+\t(struct eni_data): Mew.\n+\t(estimate_num_insns_1, estimate_num_insns): Use weights.\n+\t* tree-inline.h (struct eni_weights_d): New.\n+\t(eni_inlining_weights, eni_size_weights, eni_time_weights): Declare.\n+\t(estimate_num_insns): Declaration changed.\n+\t* cfgloop.h (tree_num_loop_insns): Declaration changed.\n+\t* Makefile.in (tree-ssa-loop-unswitch.o, tree-ssa-loop-prefetch.o,\n+\ttree-ssa-loop-manip.o): Add TREE_INLINE_H dependency.\n+\n 2007-01-28  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-data-ref.c (conflict_fn): Assert that the number of affine"}, {"sha": "01d190da44c56d1c0b1a8ed8abcf3e6f468f422d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -2107,7 +2107,8 @@ tree-ssa-loop.o : tree-ssa-loop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_FLOW_H) \\\n    $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    domwalk.h $(PARAMS_H) output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) \\\n-   coretypes.h $(TREE_DUMP_H) tree-pass.h $(BASIC_BLOCK_H) hard-reg-set.h\n+   coretypes.h $(TREE_DUMP_H) tree-pass.h $(BASIC_BLOCK_H) hard-reg-set.h \\\n+    $(TREE_INLINE_H)\n tree-ssa-address.o : tree-ssa-address.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n@@ -2132,7 +2133,7 @@ tree-ssa-loop-prefetch.o: tree-ssa-loop-prefetch.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h $(GGC_H) $(RECOG_H) insn-config.h $(HASHTAB_H) $(SCEV_H) \\\n    $(CFGLOOP_H) $(PARAMS_H) langhooks.h $(BASIC_BLOCK_H) hard-reg-set.h \\\n-   tree-chrec.h toplev.h langhooks.h\n+   tree-chrec.h toplev.h langhooks.h $(TREE_INLINE_H)\n tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(EXPR_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n@@ -2146,7 +2147,7 @@ tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h $(CFGLAYOUT_H) $(SCEV_H) $(BASIC_BLOCK_H) hard-reg-set.h \\\n-   $(PARAMS_H)\n+   $(PARAMS_H) $(TREE_INLINE_H)\n tree-ssa-loop-im.o : tree-ssa-loop-im.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) domwalk.h \\\n    $(PARAMS_H) output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\"}, {"sha": "0e1b13a94f4b3f9eb9759d0b796316f137633284", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -218,7 +218,8 @@ extern bool flow_loop_nested_p\t(const struct loop *, const struct loop *);\n extern bool flow_bb_inside_loop_p (const struct loop *, const basic_block);\n extern struct loop * find_common_loop (struct loop *, struct loop *);\n struct loop *superloop_at_depth (struct loop *, unsigned);\n-extern unsigned tree_num_loop_insns (struct loop *);\n+struct eni_weights_d;\n+extern unsigned tree_num_loop_insns (struct loop *, struct eni_weights_d *);\n extern int num_loop_insns (struct loop *);\n extern int average_num_loop_insns (struct loop *);\n extern unsigned get_loop_level (const struct loop *);"}, {"sha": "c4cf9e925805ffa516651e2d8467c7aa559ccabe", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -297,7 +297,8 @@ cgraph_process_new_functions (void)\n \t  push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n \t  current_function_decl = fndecl;\n \t  node->local.inlinable = tree_inlinable_function_p (fndecl);\n-\t  node->local.self_insns = estimate_num_insns (fndecl);\n+\t  node->local.self_insns = estimate_num_insns (fndecl,\n+\t\t\t\t\t\t       &eni_inlining_weights);\n \t  node->local.disregard_inline_limits\n \t    = lang_hooks.tree_inlining.disregard_inline_limits (fndecl);\n \t  /* Inlining characteristics are maintained by the\n@@ -677,7 +678,7 @@ cgraph_analyze_function (struct cgraph_node *node)\n   node->global.stack_frame_offset = 0;\n   node->local.inlinable = tree_inlinable_function_p (decl);\n   if (!flag_unit_at_a_time)\n-    node->local.self_insns = estimate_num_insns (decl);\n+    node->local.self_insns = estimate_num_insns (decl, &eni_inlining_weights);\n   if (node->local.inlinable)\n     node->local.disregard_inline_limits\n       = lang_hooks.tree_inlining.disregard_inline_limits (decl);"}, {"sha": "7640fb79501e40a55f95cf2d4f9057a7d49f134e", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -1379,7 +1379,8 @@ compute_inline_parameters (void)\n   node->global.estimated_stack_size = node->local.estimated_self_stack_size;\n   node->global.stack_frame_offset = 0;\n   node->local.inlinable = tree_inlinable_function_p (current_function_decl);\n-  node->local.self_insns = estimate_num_insns (current_function_decl);\n+  node->local.self_insns = estimate_num_insns (current_function_decl,\n+\t\t\t\t\t       &eni_inlining_weights);\n   if (node->local.inlinable)\n     node->local.disregard_inline_limits\n       = lang_hooks.tree_inlining.disregard_inline_limits (current_function_decl);"}, {"sha": "62634656b1777ce02008dc17b0f6bb280b37981a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -1,3 +1,7 @@\n+2007-01-28  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/loop-23.c: New test.\n+\n 2007-01-28  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/30389"}, {"sha": "a16dc5f03573930f2e9d39794d2f2afad3b7b773", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-23.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-23.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funroll-loops -fdump-tree-cunroll-details\" } */\n+\n+void bla(int);\n+\n+void foo(void)\n+{\n+  int i;\n+\n+  /* This loop used to appear to be too large for unrolling.  */\n+  for (i = 0; i < 4; i++)\n+    {\n+      bla (i);\n+      bla (2*i);\n+      bla (3*i);\n+      bla (4*i);\n+      bla (5*i);\n+      bla (6*i);\n+      bla (7*i);\n+      bla (8*i);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Unrolled loop 1 completely\" 1 \"cunroll\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */"}, {"sha": "cf95f02c94eefd693e28178c01177e6ee0f09566", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -1949,6 +1949,7 @@ backend_init (void)\n   init_regs ();\n   init_fake_stack_mems ();\n   init_alias_once ();\n+  init_inline_once ();\n   init_reload ();\n   init_varasm_once ();\n "}, {"sha": "cfd99bcd7ba2199bb156e4a791a10ff96da1fcaf", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -1308,7 +1308,7 @@ decide_copy_try_finally (int ndests, tree finally)\n     return false;\n \n   /* Finally estimate N times, plus N gotos.  */\n-  f_estimate = estimate_num_insns (finally);\n+  f_estimate = estimate_num_insns (finally, &eni_size_weights);\n   f_estimate = (f_estimate + 1) * ndests;\n \n   /* Switch statement (cost 10), N variable assignments, N gotos.  */"}, {"sha": "d68190fa8993598664ada403dbd5b794a50fb444", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 81, "deletions": 16, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -107,6 +107,21 @@ int flag_inline_trees = 0;\n    o Provide heuristics to clamp inlining of recursive template\n      calls?  */\n \n+\n+/* Weights that estimate_num_insns uses for heuristics in inlining.  */\n+\n+eni_weights eni_inlining_weights;\n+\n+/* Weights that estimate_num_insns uses to estimate the size of the\n+   produced code.  */\n+\n+eni_weights eni_size_weights;\n+\n+/* Weights that estimate_num_insns uses to estimate the time necessary\n+   to execute the produced code.  */\n+\n+eni_weights eni_time_weights;\n+\n /* Prototypes.  */\n \n static tree declare_return_variable (copy_body_data *, tree, tree, tree *);\n@@ -1904,14 +1919,26 @@ estimate_move_cost (tree type)\n     return ((size + MOVE_MAX_PIECES - 1) / MOVE_MAX_PIECES);\n }\n \n+/* Arguments for estimate_num_insns_1.  */\n+\n+struct eni_data\n+{\n+  /* Used to return the number of insns.  */\n+  int count;\n+\n+  /* Weights of various constructs.  */\n+  eni_weights *weights;\n+};\n+\n /* Used by estimate_num_insns.  Estimate number of instructions seen\n    by given statement.  */\n \n static tree\n estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n {\n-  int *count = (int *) data;\n+  struct eni_data *d = data;\n   tree x = *tp;\n+  unsigned cost;\n \n   if (IS_TYPE_OR_DECL_P (x))\n     {\n@@ -2026,7 +2053,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n       /* Otherwise it's a store, so fall through to compute the move cost.  */\n \n     case CONSTRUCTOR:\n-      *count += estimate_move_cost (TREE_TYPE (x));\n+      d->count += estimate_move_cost (TREE_TYPE (x));\n       break;\n \n     /* Assign cost of 1 to usual operations.\n@@ -2090,8 +2117,6 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case POSTDECREMENT_EXPR:\n     case POSTINCREMENT_EXPR:\n \n-    case SWITCH_EXPR:\n-\n     case ASM_EXPR:\n \n     case REALIGN_LOAD_EXPR:\n@@ -2116,7 +2141,13 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case VEC_INTERLEAVE_LOW_EXPR:\n \n     case RESX_EXPR:\n-      *count += 1;\n+      d->count += 1;\n+      break;\n+\n+    case SWITCH_EXPR:\n+      /* TODO: Cost of a switch should be derived from the number of\n+\t branches.  */\n+      d->count += d->weights->switch_cost;\n       break;\n \n     /* Few special cases of expensive operations.  This is useful\n@@ -2131,13 +2162,14 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n     case RDIV_EXPR:\n-      *count += 10;\n+      d->count += d->weights->div_mod_cost;\n       break;\n     case CALL_EXPR:\n       {\n \ttree decl = get_callee_fndecl (x);\n \ttree arg;\n \n+\tcost = d->weights->call_cost;\n \tif (decl && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n \t  switch (DECL_FUNCTION_CODE (decl))\n \t    {\n@@ -2146,6 +2178,10 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n \t      return NULL_TREE;\n \t    case BUILT_IN_EXPECT:\n \t      return NULL_TREE;\n+\t    /* Prefetch instruction is not expensive.  */\n+\t    case BUILT_IN_PREFETCH:\n+\t      cost = 1;\n+\t      break;\n \t    default:\n \t      break;\n \t    }\n@@ -2155,15 +2191,15 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n \tif (!decl)\n \t  {\n \t    for (arg = TREE_OPERAND (x, 1); arg; arg = TREE_CHAIN (arg))\n-\t      *count += estimate_move_cost (TREE_TYPE (TREE_VALUE (arg)));\n+\t      d->count += estimate_move_cost (TREE_TYPE (TREE_VALUE (arg)));\n \t  }\n \telse\n \t  {\n \t    for (arg = DECL_ARGUMENTS (decl); arg; arg = TREE_CHAIN (arg))\n-\t      *count += estimate_move_cost (TREE_TYPE (arg));\n+\t      d->count += estimate_move_cost (TREE_TYPE (arg));\n \t  }\n \n-\t*count += PARAM_VALUE (PARAM_INLINE_CALL_COST);\n+\td->count += cost;\n \tbreak;\n       }\n \n@@ -2177,7 +2213,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case OMP_CRITICAL:\n     case OMP_ATOMIC:\n       /* OpenMP directives are generally very expensive.  */\n-      *count += 40;\n+      d->count += d->weights->omp_cost;\n       break;\n \n     default:\n@@ -2186,16 +2222,20 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n   return NULL;\n }\n \n-/* Estimate number of instructions that will be created by expanding EXPR.  */\n+/* Estimate number of instructions that will be created by expanding EXPR.\n+   WEIGHTS contains weigths attributed to various constructs.  */\n \n int\n-estimate_num_insns (tree expr)\n+estimate_num_insns (tree expr, eni_weights *weights)\n {\n-  int num = 0;\n   struct pointer_set_t *visited_nodes;\n   basic_block bb;\n   block_stmt_iterator bsi;\n   struct function *my_function;\n+  struct eni_data data;\n+\n+  data.count = 0;\n+  data.weights = weights;\n \n   /* If we're given an entire function, walk the CFG.  */\n   if (TREE_CODE (expr) == FUNCTION_DECL)\n@@ -2210,15 +2250,40 @@ estimate_num_insns (tree expr)\n \t       bsi_next (&bsi))\n \t    {\n \t      walk_tree (bsi_stmt_ptr (bsi), estimate_num_insns_1,\n-\t\t\t &num, visited_nodes);\n+\t\t\t &data, visited_nodes);\n \t    }\n \t}\n       pointer_set_destroy (visited_nodes);\n     }\n   else\n-    walk_tree_without_duplicates (&expr, estimate_num_insns_1, &num);\n+    walk_tree_without_duplicates (&expr, estimate_num_insns_1, &data);\n \n-  return num;\n+  return data.count;\n+}\n+\n+/* Initializes weights used by estimate_num_insns.  */\n+\n+void\n+init_inline_once (void)\n+{\n+  eni_inlining_weights.call_cost = PARAM_VALUE (PARAM_INLINE_CALL_COST);\n+  eni_inlining_weights.div_mod_cost = 10;\n+  eni_inlining_weights.switch_cost = 1;\n+  eni_inlining_weights.omp_cost = 40;\n+\n+  eni_size_weights.call_cost = 1;\n+  eni_size_weights.div_mod_cost = 1;\n+  eni_size_weights.switch_cost = 10;\n+  eni_size_weights.omp_cost = 40;\n+\n+  /* Estimating time for call is difficult, since we have no idea what the\n+     called function does.  In the current uses of eni_time_weights,\n+     underestimating the cost does less harm than overestimating it, so\n+     we choose a rather small walue here.  */\n+  eni_time_weights.call_cost = 10;\n+  eni_time_weights.div_mod_cost = 10;\n+  eni_time_weights.switch_cost = 4;\n+  eni_time_weights.omp_cost = 40;\n }\n \n typedef struct function *function_p;"}, {"sha": "998494e1aaa98b8e80c3258a1e6bba20b493e566", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -93,6 +93,37 @@ typedef struct copy_body_data\n   struct pointer_set_t *statements_to_fold;\n } copy_body_data;\n \n+/* Weights of constructions for estimate_num_insns.  */\n+\n+typedef struct eni_weights_d\n+{\n+  /* Cost per call.  */\n+  unsigned call_cost;\n+\n+  /* Cost of \"expensive\" div and mod operations.  */\n+  unsigned div_mod_cost;\n+\n+  /* Cost of switch statement.  */\n+  unsigned switch_cost;\n+\n+  /* Cost for omp construct.  */\n+  unsigned omp_cost;\n+} eni_weights;\n+\n+/* Weights that estimate_num_insns uses for heuristics in inlining.  */\n+\n+extern eni_weights eni_inlining_weights;\n+\n+/* Weights that estimate_num_insns uses to estimate the size of the\n+   produced code.  */\n+\n+extern eni_weights eni_size_weights;\n+\n+/* Weights that estimate_num_insns uses to estimate the time necessary\n+   to execute the produced code.  */\n+\n+extern eni_weights eni_time_weights;\n+\n /* Function prototypes.  */\n \n extern tree copy_body_r (tree *, int *, void *);\n@@ -106,7 +137,7 @@ void save_body (tree, tree *, tree *);\n int estimate_move_cost (tree type);\n void push_cfun (struct function *new_cfun);\n void pop_cfun (void);\n-int estimate_num_insns (tree expr);\n+int estimate_num_insns (tree expr, eni_weights *);\n bool tree_versionable_function_p (tree);\n void tree_function_versioning (tree, tree, varray_type, bool);\n "}, {"sha": "3033c9082ef40a5483c0271b787d48f71d6e2612", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -87,7 +87,7 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n       if (get_call_expr_in (last))\n \treturn false;\n \n-      *limit -= estimate_num_insns (last);\n+      *limit -= estimate_num_insns (last, &eni_size_weights);\n       if (*limit < 0)\n \treturn false;\n     }"}, {"sha": "acc8cf30ab51a0822cc579db6e1b88bc2c1baf52", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -111,18 +111,18 @@ create_canonical_iv (struct loop *loop, edge exit, tree niter)\n   update_stmt (cond);\n }\n \n-/* Computes an estimated number of insns in LOOP.  */\n+/* Computes an estimated number of insns in LOOP, weighted by WEIGHTS.  */\n \n unsigned\n-tree_num_loop_insns (struct loop *loop)\n+tree_num_loop_insns (struct loop *loop, eni_weights *weights)\n {\n   basic_block *body = get_loop_body (loop);\n   block_stmt_iterator bsi;\n   unsigned size = 1, i;\n \n   for (i = 0; i < loop->num_nodes; i++)\n     for (bsi = bsi_start (body[i]); !bsi_end_p (bsi); bsi_next (&bsi))\n-      size += estimate_num_insns (bsi_stmt (bsi));\n+      size += estimate_num_insns (bsi_stmt (bsi), weights);\n   free (body);\n \n   return size;\n@@ -182,7 +182,7 @@ try_unroll_loop_completely (struct loop *loop,\n       if (ul == UL_SINGLE_ITER)\n \treturn false;\n \n-      ninsns = tree_num_loop_insns (loop);\n+      ninsns = tree_num_loop_insns (loop, &eni_size_weights);\n \n       if (n_unroll * ninsns\n \t  > (unsigned) PARAM_VALUE (PARAM_MAX_COMPLETELY_PEELED_INSNS))"}, {"sha": "d3d3e7e6ab557a422b0b651a92b12f0609ee0d26", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cfglayout.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"params.h\"\n+#include \"tree-inline.h\"\n \n /* Creates an induction variable with value BASE + STEP * iteration in LOOP.\n    It is expected that neither BASE nor STEP are shared with other expressions\n@@ -640,7 +641,7 @@ can_unroll_loop_p (struct loop *loop, unsigned factor,\n     return false;\n \n   /* The final loop should be small enough.  */\n-  if (tree_num_loop_insns (loop) * factor\n+  if (tree_num_loop_insns (loop, &eni_size_weights) * factor\n       > (unsigned) PARAM_VALUE (PARAM_MAX_UNROLLED_INSNS))\n     return false;\n "}, {"sha": "02093d40d2d7836469457de984e16d7cb6465f9a", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -45,6 +45,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"params.h\"\n #include \"langhooks.h\"\n+#include \"tree-inline.h\"\n \n /* This pass inserts prefetch instructions to optimize cache usage during\n    accesses to arrays in loops.  It processes loops sequentially and:\n@@ -954,7 +955,7 @@ loop_prefetch_arrays (struct loop *loop)\n \n   /* FIXME: We should use not size of the loop, but the average number of\n      instructions executed per iteration of the loop.  */\n-  ninsns = tree_num_loop_insns (loop);\n+  ninsns = tree_num_loop_insns (loop, &eni_time_weights);\n   ahead = (PREFETCH_LATENCY + ninsns - 1) / ninsns;\n   unroll_factor = determine_unroll_factor (loop, refs, ninsns, &desc);\n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "c646ef395c7f824ec3b2ac62491685e5f52aa8c2", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -36,6 +36,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"domwalk.h\"\n #include \"params.h\"\n #include \"tree-pass.h\"\n+#include \"tree-inline.h\"\n \n /* This file implements the loop unswitching, i.e. transformation of loops like\n \n@@ -191,7 +192,7 @@ tree_unswitch_single_loop (struct loop *loop, int num)\n     }\n \n   /* The loop should not be too large, to limit code growth.  */\n-  if (tree_num_loop_insns (loop)\n+  if (tree_num_loop_insns (loop, &eni_size_weights)\n       > (unsigned) PARAM_VALUE (PARAM_MAX_UNSWITCH_INSNS))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "f796a522b32e1c4177cfb1e6c526b8d0875b2945", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9bc51b091441d6f9484c62d210d4fc724b376b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7f9bc51b091441d6f9484c62d210d4fc724b376b", "patch": "@@ -4741,4 +4741,8 @@ extern unsigned HOST_WIDE_INT compute_builtin_object_size (tree, int);\n /* In expr.c.  */\n extern unsigned HOST_WIDE_INT highest_pow2_factor (tree);\n \n+/* In tree-inline.c.  */\n+\n+void init_inline_once (void);\n+\n #endif  /* GCC_TREE_H  */"}]}