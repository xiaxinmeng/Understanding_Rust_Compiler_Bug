{"sha": "9eaf11417b6a017b21a5052a74be3d2a251cfb78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhZjExNDE3YjZhMDE3YjIxYTUwNTJhNzRiZTNkMmEyNTFjZmI3OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-08-10T13:42:38Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-08-19T07:48:45Z"}, "message": "[testsuite, nvptx] Add effective target sync_int_long_stack\n\nThe nvptx target currently doesn't support effective target sync_int_long,\nalthough it has support for 32-bit and 64-bit atomic.\n\nWhen enabling sync_int_long for nvptx, we run into a failure in\ngcc.dg/pr86314.c:\n...\n nvptx-run: error getting kernel result: operation not supported on \\\n   global/shared address space\n...\ndue to a ptx restriction:  accesses to local memory are illegal, and the\ntest-case does an atomic operation on a stack address, which is mapped to\nlocal memory.\n\nFix this by adding a target sync_int_long_stack, wich returns false for nvptx,\nwhich can be used to mark test-cases that require sync_int_long support for\nstack addresses.\n\nBuild on nvptx and tested with make check-gcc.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96494\n\t* lib/target-supports.exp (check_effective_target_sync_int_long):\n\tReturn 1 for nvptx.\n\t(check_effective_target_sync_int_long_stack): New proc.\n\t* gcc.dg/pr86314.c: Require effective target sync_int_long_stack.", "tree": {"sha": "0dc89382ed84e248aae1d53ec87caaac7f93ef65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc89382ed84e248aae1d53ec87caaac7f93ef65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eaf11417b6a017b21a5052a74be3d2a251cfb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf11417b6a017b21a5052a74be3d2a251cfb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eaf11417b6a017b21a5052a74be3d2a251cfb78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf11417b6a017b21a5052a74be3d2a251cfb78/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bbb5b1b1eb09db8175130474e8da952f30404b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7bbb5b1b1eb09db8175130474e8da952f30404b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7bbb5b1b1eb09db8175130474e8da952f30404b"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "565fb02eee2f8b1d19c3256b9d09591530624238", "filename": "gcc/testsuite/gcc.dg/pr86314.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaf11417b6a017b21a5052a74be3d2a251cfb78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaf11417b6a017b21a5052a74be3d2a251cfb78/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86314.c?ref=9eaf11417b6a017b21a5052a74be3d2a251cfb78", "patch": "@@ -1,5 +1,5 @@\n // PR target/86314\n-// { dg-do run { target sync_int_long } }\n+// { dg-do run { target sync_int_long_stack } }\n // { dg-options \"-O2\" }\n \n __attribute__((noinline, noclone)) unsigned long"}, {"sha": "f223fc6917e052e0223e4279e5e20c02fc68c3e0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaf11417b6a017b21a5052a74be3d2a251cfb78/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaf11417b6a017b21a5052a74be3d2a251cfb78/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9eaf11417b6a017b21a5052a74be3d2a251cfb78", "patch": "@@ -7704,7 +7704,19 @@ proc check_effective_target_sync_int_long { } {\n \t     || [istarget cris-*-*]\n \t     || ([istarget sparc*-*-*] && [check_effective_target_sparc_v9])\n \t     || ([istarget arc*-*-*] && [check_effective_target_arc_atomic])\n-\t     || [check_effective_target_mips_llsc] }}]\n+\t     || [check_effective_target_mips_llsc]\n+\t     || [istarget nvptx*-*-*]\n+\t }}]\n+}\n+\n+# Return 1 if the target supports atomic operations on \"int\" and \"long\" on\n+# stack addresses.\n+\n+proc check_effective_target_sync_int_long_stack { } {\n+    return [check_cached_effective_target sync_int_long_stack {\n+      expr { ![istarget nvptx*-*-*]\n+\t     && [check_effective_target_sync_int_long]\t     \n+\t }}]\n }\n \n # Return 1 if the target supports atomic operations on \"char\" and \"short\"."}]}