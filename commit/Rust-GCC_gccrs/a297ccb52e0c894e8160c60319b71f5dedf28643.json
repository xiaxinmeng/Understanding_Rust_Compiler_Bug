{"sha": "a297ccb52e0c894e8160c60319b71f5dedf28643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5N2NjYjUyZTBjODk0ZTgxNjBjNjAzMTliNzFmNWRlZGYyODY0Mw==", "commit": {"author": {"name": "James Bowman", "email": "james.bowman@ftdichip.com", "date": "2017-11-07T01:10:18Z"}, "committer": {"name": "James Bowman", "email": "jamesbowman@gcc.gnu.org", "date": "2017-11-07T01:10:18Z"}, "message": "FT32 makes use of multiple address spaces.\n\n\nFT32 makes use of multiple address spaces. When trying to inspect\nobjects in GDB, GDB was treating them as a straight \"const\". The cause\nseems to be in GCC DWARF2 output.\n\nThis output is handled in gcc/gcc/dwarf2out.c, where modified_type_die()\nchecks that TYPE has qualifiers CV_QUALS. However while TYPE has\nADDR_SPACE qualifiers, the modified_type_die() explicitly discards the\nADDR_SPACE qualifiers.\n\nThis patch retains the ADDR_SPACE qualifiers as modified_type_die()\noutputs the DWARF type tree.  This allows the types to match, and correct\ntype information for the object is emitted.\n\n[gcc]\n\n2017-11-06  James Bowman  <james.bowman@ftdichip.com>\n\n\t* gcc/dwarf2out.c (modified_type_die): Retain ADDR_SPACE\n\tqualifiers.\n        (add_type_attribute) likewise.\n\nFrom-SVN: r254484", "tree": {"sha": "c31b6993e4e0c4ca358998c53b8653a22223ef00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31b6993e4e0c4ca358998c53b8653a22223ef00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a297ccb52e0c894e8160c60319b71f5dedf28643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a297ccb52e0c894e8160c60319b71f5dedf28643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a297ccb52e0c894e8160c60319b71f5dedf28643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a297ccb52e0c894e8160c60319b71f5dedf28643/comments", "author": null, "committer": null, "parents": [{"sha": "853c0dfba2e6afe6dbb17e58c300b38670524890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853c0dfba2e6afe6dbb17e58c300b38670524890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853c0dfba2e6afe6dbb17e58c300b38670524890"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "3690705de0d94bfdeabfdd9993cdf7b69856d8a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a297ccb52e0c894e8160c60319b71f5dedf28643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a297ccb52e0c894e8160c60319b71f5dedf28643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a297ccb52e0c894e8160c60319b71f5dedf28643", "patch": "@@ -1,3 +1,9 @@\n+2017-11-06  James Bowman  <james.bowman@ftdichip.com>\n+\n+\t* gcc/dwarf2out.c (modified_type_die): Retain ADDR_SPACE\n+\tqualifiers.\n+        (add_type_attribute) likewise.\n+\n 2017-11-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_can_use_return_insn_p): Use reference"}, {"sha": "f39699761b017359ec3e190ac057ec325357c91b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a297ccb52e0c894e8160c60319b71f5dedf28643/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a297ccb52e0c894e8160c60319b71f5dedf28643/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a297ccb52e0c894e8160c60319b71f5dedf28643", "patch": "@@ -12481,7 +12481,8 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n   dw_die_ref mod_scope;\n   /* Only these cv-qualifiers are currently handled.  */\n   const int cv_qual_mask = (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE\n-\t\t\t    | TYPE_QUAL_RESTRICT | TYPE_QUAL_ATOMIC);\n+\t\t\t    | TYPE_QUAL_RESTRICT | TYPE_QUAL_ATOMIC | \n+\t\t\t    ENCODE_QUAL_ADDR_SPACE(~0U));\n   const bool reverse_base_type\n     = need_endianity_attribute_p (reverse) && is_base_type (type);\n \n@@ -20708,7 +20709,7 @@ add_type_attribute (dw_die_ref object_die, tree type, int cv_quals,\n     return;\n \n   type_die = modified_type_die (type,\n-\t\t\t\tcv_quals | TYPE_QUALS_NO_ADDR_SPACE (type),\n+\t\t\t\tcv_quals | TYPE_QUALS (type),\n \t\t\t\treverse,\n \t\t\t\tcontext_die);\n "}]}