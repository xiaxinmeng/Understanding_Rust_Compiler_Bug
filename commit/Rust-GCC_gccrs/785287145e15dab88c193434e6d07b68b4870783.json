{"sha": "785287145e15dab88c193434e6d07b68b4870783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1Mjg3MTQ1ZTE1ZGFiODhjMTkzNDM0ZTZkMDdiNjhiNDg3MDc4Mw==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2004-06-02T02:09:45Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-06-02T02:09:45Z"}, "message": "Makefile.in (EXPR_H): Add insn-config.h...\n\n2004-06-01  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* Makefile.in (EXPR_H): Add insn-config.h, function.h,\n\t$(RTL_H), flags.h, $(TREE_H), $(MACHMODE_H), $(EXPR_H).\n\t(ALIAS_H, EMIT_RTL_H): New.\n\t(cselib.o): Replace EXPR_H with EMIT_RTL_H.\n\t(cfgcleanup.o): Add EMIT_RTL_H.\n\t(alias.o): Replace EXPR_H with EMIT_RTL_H and ALIAS_H.\n\t* alias.c: Replace expr.h with emit-rtl.h and alias.h.\n\t* attribs.c, c-lex.c, c-obj-common.c, c-semantics.c: Remove expr.h.\n\t* cfgcleanup.c, cselib.c: Replace expr.h with emit-rtl.h.\n\t* expr.h: Add include guard.  Include function.h, rtl.h, flags.h,\n\ttree.h, machmode.h, insn-config.h, alias.h, emit-rtl.h.\n\t(get_varargs_alias_set, get_frame_alias_set, record_base_value,\n\trecord_alias_subset, new_alias_set, can_address_p): Move to alias.h.\n\t(set_mem_alias_set, set_mem_align, set_mem_expr, set_mem_offset,\n\tset_mem_size): Move to emit-rtl.h.\n\t* emit-rtl.h: New.\n\t* alias.h: New.\n\nFrom-SVN: r82568", "tree": {"sha": "e21dc25a4f3b3bd29a36d4afee3c7f6a64fb2d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21dc25a4f3b3bd29a36d4afee3c7f6a64fb2d72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785287145e15dab88c193434e6d07b68b4870783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785287145e15dab88c193434e6d07b68b4870783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785287145e15dab88c193434e6d07b68b4870783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785287145e15dab88c193434e6d07b68b4870783/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e2a2bdc35afe7bbab8d92226882e2494644bc08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2a2bdc35afe7bbab8d92226882e2494644bc08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2a2bdc35afe7bbab8d92226882e2494644bc08"}], "stats": {"total": 179, "additions": 139, "deletions": 40}, "files": [{"sha": "25e729f12186b3911dac6a20740608dd0c652ad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -1,3 +1,23 @@\n+2004-06-01  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* Makefile.in (EXPR_H): Add insn-config.h, function.h,\n+\t$(RTL_H), flags.h, $(TREE_H), $(MACHMODE_H), $(EXPR_H).\n+\t(ALIAS_H, EMIT_RTL_H): New.\n+\t(cselib.o): Replace EXPR_H with EMIT_RTL_H.\n+\t(cfgcleanup.o): Add EMIT_RTL_H.\n+\t(alias.o): Replace EXPR_H with EMIT_RTL_H and ALIAS_H.\n+\t* alias.c: Replace expr.h with emit-rtl.h and alias.h.\n+\t* attribs.c, c-lex.c, c-obj-common.c, c-semantics.c: Remove expr.h.\n+\t* cfgcleanup.c, cselib.c: Replace expr.h with emit-rtl.h.\n+\t* expr.h: Add include guard.  Include function.h, rtl.h, flags.h,\n+\ttree.h, machmode.h, insn-config.h, alias.h, emit-rtl.h.\n+\t(get_varargs_alias_set, get_frame_alias_set, record_base_value,\n+\trecord_alias_subset, new_alias_set, can_address_p): Move to alias.h.\n+\t(set_mem_alias_set, set_mem_align, set_mem_expr, set_mem_offset,\n+\tset_mem_size): Move to emit-rtl.h.\n+\t* emit-rtl.h: New.\n+\t* alias.h: New.\n+\n 2004-06-01  Eric Botcazou  <ebotcazou@act-europe.fr>\n \n \t* function.c (walk_fixup_memory_subreg): New parameter 'var'."}, {"sha": "743f8e8c7f69983665a83520e5de5ee5d2a5d8f8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -690,7 +690,9 @@ BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h $(PARTITION_H) \\\n COVERAGE_H = coverage.h gcov-io.h gcov-iov.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n-EXPR_H = expr.h\n+ALIAS_H = alias.h\n+EMIT_RTL_H = emit-rtl.h\n+EXPR_H = expr.h insn-config.h function.h $(RTL_H) flags.h $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H)\n INTEGRATE_H = integrate.h varray.h\n@@ -1833,7 +1835,7 @@ coverage.o : coverage.c gcov-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    toplev.h $(GGC_H) $(TARGET_H) langhooks.h $(COVERAGE_H) libfuncs.h \\\n    gt-coverage.h $(HASHTAB_H)\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n+   hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EMIT_RTL_H) toplev.h \\\n    output.h function.h cselib.h $(GGC_H) $(TM_P_H) gt-cselib.h $(PARAMS_H) \\\n    alloc-pool.h\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n@@ -1918,7 +1920,7 @@ cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) fla\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) $(BASIC_BLOCK_H) hard-reg-set.h output.h flags.h \\\n    $(RECOG_H) toplev.h $(GGC_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) \\\n-   $(PARAMS_H) $(REGS_H)\n+   $(PARAMS_H) $(REGS_H) $(EMIT_RTL_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h flags.h\n cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n@@ -1993,7 +1995,7 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) condition\n    hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) except.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n-   hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) \\\n+   hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(ALIAS_H) $(EMIT_RTL_H) \\\n    $(GGC_H) function.h cselib.h $(TREE_H) $(TM_P_H) langhooks.h $(TARGET_H) \\\n    gt-alias.h $(TIMEVAR_H) cgraph.h\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\"}, {"sha": "e41e456892a1b6190cea12b1f57b83af543bba6b", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -28,7 +28,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"function.h\"\n-#include \"expr.h\"\n+#include \"alias.h\"\n+#include \"emit-rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\""}, {"sha": "371cdabf947a30171df17979129c8076ff4bb33c", "filename": "gcc/alias.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -0,0 +1,31 @@\n+/* Exported functions from alias.c\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_ALIAS_H\n+#define GCC_ALIAS_H\n+\n+extern HOST_WIDE_INT new_alias_set (void);\n+extern void record_alias_subset (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern HOST_WIDE_INT get_varargs_alias_set (void);\n+extern HOST_WIDE_INT get_frame_alias_set (void);\n+extern void record_base_value (unsigned int, rtx, int);\n+extern int can_address_p (tree);\n+\n+#endif /* GCC_ALIAS_H */"}, {"sha": "cbfe6644954b2f5fa07c390b6a614c3b50da7618", "filename": "gcc/attribs.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"rtl.h\"\n #include \"ggc.h\"\n-#include \"expr.h\"\n #include \"tm_p.h\"\n #include \"cpplib.h\"\n #include \"target.h\""}, {"sha": "3a63a053b794f189fa0e0e645dc72f9f11f710ac", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -27,7 +27,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"real.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n-#include \"expr.h\"\n #include \"input.h\"\n #include \"output.h\"\n #include \"c-tree.h\""}, {"sha": "6b17ad4e690f19b7fc5fb852efcb8697c06793f6", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -26,7 +26,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"integrate.h\"\n-#include \"expr.h\"\n #include \"c-tree.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "ce36fb543045cb984a2e44a2f6eeed3c93d8c6a1", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -39,7 +39,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"ggc.h\"\n #include \"rtl.h\"\n-#include \"expr.h\"\n #include \"output.h\"\n #include \"timevar.h\"\n #include \"predict.h\""}, {"sha": "5e23ae977bc12fa80a3a3115ac1cf34a81d9ac5a", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -50,7 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"regs.h\"\n #include \"cfglayout.h\"\n-#include \"expr.h\"\n+#include \"emit-rtl.h\"\n \n /* cleanup_cfg maintains following flags for each basic block.  */\n "}, {"sha": "a5f9cfefd72ad4f2fb3468622f781d206531ea28", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -33,7 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"function.h\"\n-#include \"expr.h\"\n+#include \"emit-rtl.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\""}, {"sha": "c1735ab5e8ac65a70cbd839f3b5d5ff86d6a10d9", "filename": "gcc/emit-rtl.h", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -0,0 +1,48 @@\n+/* Exported functions from emit-rtl.c\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_EMIT_RTL_H\n+#define GCC_EMIT_RTL_H\n+\n+/* Set the alias set of MEM to SET.  */\n+extern void set_mem_alias_set (rtx, HOST_WIDE_INT);\n+\n+/* Set the alignment of MEM to ALIGN bits.  */\n+extern void set_mem_align (rtx, unsigned int);\n+\n+/* Set the expr for MEM to EXPR.  */\n+extern void set_mem_expr (rtx, tree);\n+\n+/* Set the offset for MEM to OFFSET.  */\n+extern void set_mem_offset (rtx, rtx);\n+\n+/* Set the size for MEM to SIZE.  */\n+extern void set_mem_size (rtx, rtx);\n+\n+/* Return a memory reference like MEMREF, but with its address changed to\n+   ADDR.  The caller is asserting that the actual piece of memory pointed\n+   to is the same, just the form of the address is being changed, such as\n+   by putting something into a register.  */\n+extern rtx replace_equiv_address (rtx, rtx);\n+\n+/* Likewise, but the reference is not required to be valid.  */\n+extern rtx replace_equiv_address_nv (rtx, rtx);\n+\n+#endif /* GCC_EMIT_RTL_H */"}, {"sha": "763ed12b3f44ecc692a43410a8878edb2b1dcc5f", "filename": "gcc/expr.h", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785287145e15dab88c193434e6d07b68b4870783/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=785287145e15dab88c193434e6d07b68b4870783", "patch": "@@ -19,6 +19,21 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_EXPR_H\n+#define GCC_EXPR_H\n+\n+/* For inhibit_defer_pop */\n+#include \"function.h\"\n+/* For XEXP, GEN_INT, rtx_code */\n+#include \"rtl.h\"\n+/* For optimize_size */\n+#include \"flags.h\"\n+/* For host_integerp, tree_low_cst, convert, size_binop, ssize_int, TREE_CODE,\n+   TYPE_SIZE, int_size_in_bytes,    */\n+#include \"tree.h\"\n+/* For GET_MODE_BITSIZE, word_mode */\n+#include \"machmode.h\"\n+\n /* The default branch cost is 1.  */\n #ifndef BRANCH_COST\n #define BRANCH_COST 1\n@@ -305,6 +320,8 @@ extern void emit_cmp_and_jump_insns (rtx, rtx, enum rtx_code, rtx,\n /* Generate code to indirectly jump to a location given in the rtx LOC.  */\n extern void emit_indirect_jump (rtx);\n \n+#include \"insn-config.h\"\n+\n #ifdef HAVE_conditional_move\n /* Emit a conditional move operation.  */\n rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, enum machine_mode,\n@@ -360,12 +377,6 @@ extern void expand_builtin_setjmp_receiver (rtx);\n extern void expand_builtin_longjmp (rtx, rtx);\n extern rtx expand_builtin_saveregs (void);\n extern void expand_builtin_trap (void);\n-extern HOST_WIDE_INT get_varargs_alias_set (void);\n-extern HOST_WIDE_INT get_frame_alias_set (void);\n-extern void record_base_value (unsigned int, rtx, int);\n-extern void record_alias_subset (HOST_WIDE_INT, HOST_WIDE_INT);\n-extern HOST_WIDE_INT new_alias_set (void);\n-extern int can_address_p (tree);\n extern tree simplify_builtin_fputs (tree, int, int, tree);\n extern tree simplify_builtin_strcpy (tree, tree);\n extern tree simplify_builtin_strncpy (tree, tree);\n@@ -563,6 +574,15 @@ extern int try_tablejump (tree, tree, tree, tree, rtx, rtx);\n    XXX Should be a target hook.  */\n extern unsigned int case_values_threshold (void);\n \n+/* Functions from alias.c */\n+#include \"alias.h\"\n+/* extern HOST_WIDE_INT get_varargs_alias_set (void); */\n+/* extern HOST_WIDE_INT get_frame_alias_set (void); */\n+/* extern void record_base_value (unsigned int, rtx, int); */\n+/* extern void record_alias_subset (HOST_WIDE_INT, HOST_WIDE_INT); */\n+/* extern HOST_WIDE_INT new_alias_set (void); */\n+/* extern int can_address_p (tree); */\n+\n \f\n /* rtl.h and tree.h were included.  */\n /* Return an rtx for the size in bytes of the value of an expr.  */\n@@ -623,21 +643,6 @@ extern rtx memory_address (enum machine_mode, rtx);\n /* Like `memory_address' but pretent `flag_force_addr' is 0.  */\n extern rtx memory_address_noforce (enum machine_mode, rtx);\n \n-/* Set the alias set of MEM to SET.  */\n-extern void set_mem_alias_set (rtx, HOST_WIDE_INT);\n-\n-/* Set the alignment of MEM to ALIGN bits.  */\n-extern void set_mem_align (rtx, unsigned int);\n-\n-/* Set the expr for MEM to EXPR.  */\n-extern void set_mem_expr (rtx, tree);\n-\n-/* Set the offset for MEM to OFFSET.  */\n-extern void set_mem_offset (rtx, rtx);\n-\n-/* Set the size for MEM to SIZE.  */\n-extern void set_mem_size (rtx, rtx);\n-\n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address changed to ADDR.\n    (VOIDmode means don't change the mode.\n@@ -672,14 +677,8 @@ extern rtx adjust_automodify_address_1 (rtx, enum machine_mode, rtx,\n    known to be in OFFSET (possibly 1).  */\n extern rtx offset_address (rtx, rtx, unsigned HOST_WIDE_INT);\n \n-/* Return a memory reference like MEMREF, but with its address changed to\n-   ADDR.  The caller is asserting that the actual piece of memory pointed\n-   to is the same, just the form of the address is being changed, such as\n-   by putting something into a register.  */\n-extern rtx replace_equiv_address (rtx, rtx);\n-\n-/* Likewise, but the reference is not required to be valid.  */\n-extern rtx replace_equiv_address_nv (rtx, rtx);\n+/* Definitions from emit-rtl.c */\n+#include \"emit-rtl.h\"\n \n /* Return a memory reference like MEMREF, but with its mode widened to\n    MODE and adjusted by OFFSET.  */\n@@ -810,3 +809,5 @@ extern void do_jump_by_parts_greater_rtx (enum machine_mode, int, rtx, rtx,\n \t\t\t\t\t  rtx, rtx);\n \n extern int vector_mode_valid_p (enum machine_mode);\n+\n+#endif /* GCC_EXPR_H */"}]}