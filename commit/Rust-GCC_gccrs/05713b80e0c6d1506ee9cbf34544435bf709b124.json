{"sha": "05713b80e0c6d1506ee9cbf34544435bf709b124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3MTNiODBlMGM2ZDE1MDZlZTljYmYzNDU0NDQzNWJmNzA5YjEyNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T18:24:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T18:24:08Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* ChangeLog.0: Likewise.\n\t* ChangeLog.1: Likewise.\n\t* ChangeLog.2: Likewise.\n\t* ChangeLog.3: Likewise.\n\t* ChangeLog.4: Likewise.\n\t* ChangeLog.5: Likewise.\n\t* ChangeLog.6: Likewise.\n\t* FSFChangeLog.10: Likewise.\n\t* FSFChangeLog.11: Likewise.\n\t* c-common.c: Likewise.\n\t* c-common.h: Likewise.\n\t* c-format.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* cpplib.c: Likewise.\n\t* langhooks.h: Likewise.\n\t* real.c: Likewise.\n\t* reg-stack.c: Likewise.\n\t* toplev.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/arm/linux-gas.h: Likewise.\n\t* config/arm/netbsd.h: Likewise.\n\t* config/c4x/c4x.c: Likewise.\n\t* config/c4x/c4x.h: Likewise.\n\t* config/c4x/c4x.md: Likewise.\n\t* config/c4x/libgcc.S: Likewise.\n\t* config/fr30/fr30.md: Likewise.\n\t* config/frv/frv.md: Likewise.\n\t* config/ia64/ia64.md: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mn10300/mn10300.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/v850/v850.md: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\nFrom-SVN: r57166", "tree": {"sha": "3fc1aaee5ec57f24ab893bd8ac6afa6ae3dbb448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc1aaee5ec57f24ab893bd8ac6afa6ae3dbb448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05713b80e0c6d1506ee9cbf34544435bf709b124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05713b80e0c6d1506ee9cbf34544435bf709b124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05713b80e0c6d1506ee9cbf34544435bf709b124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05713b80e0c6d1506ee9cbf34544435bf709b124/comments", "author": null, "committer": null, "parents": [{"sha": "3baab4840ec4c3b7af66cb4e69555e9bfd1cc934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3baab4840ec4c3b7af66cb4e69555e9bfd1cc934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3baab4840ec4c3b7af66cb4e69555e9bfd1cc934"}], "stats": {"total": 164, "additions": 102, "deletions": 62}, "files": [{"sha": "4b8e63f35d9e3ab6664fec610963ad96208ab0d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -1,3 +1,43 @@\n+2002-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* ChangeLog.0: Likewise.\n+\t* ChangeLog.1: Likewise.\n+\t* ChangeLog.2: Likewise.\n+\t* ChangeLog.3: Likewise.\n+\t* ChangeLog.4: Likewise.\n+\t* ChangeLog.5: Likewise.\n+\t* ChangeLog.6: Likewise.\n+\t* FSFChangeLog.10: Likewise.\n+\t* FSFChangeLog.11: Likewise.\n+\t* c-common.c: Likewise.\n+\t* c-common.h: Likewise.\n+\t* c-format.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* cpplib.c: Likewise.\n+\t* langhooks.h: Likewise.\n+\t* real.c: Likewise.\n+\t* reg-stack.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/arm/linux-gas.h: Likewise.\n+\t* config/arm/netbsd.h: Likewise.\n+\t* config/c4x/c4x.c: Likewise.\n+\t* config/c4x/c4x.h: Likewise.\n+\t* config/c4x/c4x.md: Likewise.\n+\t* config/c4x/libgcc.S: Likewise.\n+\t* config/fr30/fr30.md: Likewise.\n+\t* config/frv/frv.md: Likewise.\n+\t* config/ia64/ia64.md: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/v850/v850.md: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\n 2002-09-15  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/netbsd.h (LIB_SPEC): Include the appropriate pthread\n@@ -9823,7 +9863,7 @@ Tue Jun  4 19:29:42 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t(gt_ggc_m_tree_node): Likewise.\n \n \t* varasm.c (copy_constant): Call expand_constant if we hit\n-\tsomething we can't recognise.\n+\tsomething we can't recognize.\n \n \t* ggc-common.c (ggc_mark_rtvec_children): Delete.\n \t(ggc_mark_rtx_children): Use generic name for ggc_mark_rtvec.\n@@ -24905,7 +24945,7 @@ Mon Feb  4 09:05:58 2002  Jeffrey A Law  (law@redhat.com)\n \t* cpphash.c (_cpp_init_hashtable): Similarly.\n \t* cppinit.c (cpp_create_reader): Default the signed_char flag.\n \t(init_builtins): Define __CHAR_UNSIGNED__ appropriately.\n-\t(COMMAND_LINE_OPTIONS): Recognise -f{un,}signed-char.\n+\t(COMMAND_LINE_OPTIONS): Recognize -f{un,}signed-char.\n \t(cpp_handle_option): Handle the new options.\n \t* cpplex.c (cpp_interpret_charconst): Use new flag.\n \t* cpplib.h (struct cpp_options): New member signed_char."}, {"sha": "779b44f53501ec4cfe8033467ad33a736eab4568", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -12000,7 +12000,7 @@ Wed Sep 10 11:49:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \tEXCEPTION_SECTION, mark the start of the frame info with a\n \tcollectible tag.\n \t* collect2.c (frame_tables): New list.\n-\t(is_ctor_dtor): Recognise frame entries.\n+\t(is_ctor_dtor): Recognize frame entries.\n \t(scan_prog_file): Likewise.\n \t(main): Pass -fno-exceptions to sub-compile.  Also do collection\n \tif there are any frame entries."}, {"sha": "93241131602fae35b9af010c622785c251dbc507", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -469,7 +469,7 @@ Sun May  2 15:16:42 1999  Joseph S. Myers  <jsm28@cam.ac.uk>\n \t(ASSEMBLER_DIALECT): Define.\n \t(CONDITIONAL_REGISTER_USAGE): Rename floating point registers if\n \trequired for the UNIX assembler.\n-\t(ASM_OUTPUT_INT): Remove.  The compiler will synthesise it.\n+\t(ASM_OUTPUT_INT): Remove.  The compiler will synthesize it.\n \t(ASM_OUTPUT_ADDR_VEC_PROLOGUE): Remove.\n \t(ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Change to \"[\" and \"]\".\n \t(TRAMPOLINE_TEMPLATE): Use ASM_OUTPUT_SHORT.\n@@ -4454,7 +4454,7 @@ Mon Feb 22 19:36:33 1999  Andrew Cagney  <cagney@b1.cygnus.com>\n \tStrongARM.\n \t(arm_is_6_or_7): New variable: true iff the target processor is an\n \tARM6 or and ARM7.\n-\t(arm_select): Fields reorganised.\n+\t(arm_select): Fields reorganized.\n \t(struct processors): processor_type field removed.\n \t(all_procs): Remove.\n \t(all_cores): New array: Definitions of all known ARM cpu cores."}, {"sha": "6183666f2d34e17ae228a8e58a2fa3d18559c28e", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -2434,10 +2434,10 @@ Thu Nov 18 11:10:03 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n 1999-11-18  Nick Clifton  <nickc@cygnus.com>\n \n-\t* toplev.c (main): Correctly detect an unrecognised option.\n+\t* toplev.c (main): Correctly detect an unrecognized option.\n \n \t* cppinit.c (cpp_handle_option): Do not claim to have consumed\n-\ta -f option if it has not been recognised.\n+\ta -f option if it has not been recognized.\n \n Thu Nov 18 00:59:11 1999  Michael Gschwind  <mikeg@alagoas.watson.ibm.com>\n \n@@ -4782,7 +4782,7 @@ Tue Oct 19 15:26:11 1999  Richard Earnshaw  (rearnsha@arm.com)\n Tue Oct 19 14:01:34 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* toplev.c (main): Do not generate an error message if an\n-\tunrecognised command line switch is recognisable by another\n+\tunrecognized command line switch is recognisable by another\n \tlanguage.  If extra_warnings are enabled, then generate a\n \twarning message instead.\n \n@@ -4960,7 +4960,7 @@ Sat Oct 16 13:42:29 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n Sat Oct 16 13:37:46 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n-\t* config/c4x/c4x.md (movstrqi_small): Utilise parallel move\n+\t* config/c4x/c4x.md (movstrqi_small): Utilize parallel move\n \tinstructions.\n \n Sat Oct 16 13:26:47 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n@@ -8316,7 +8316,7 @@ Thu Sep  9 13:46:06 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \t* cppexp.c (cpp_lex): Handle `defined (xxx)' for poisoned xxx.\n \tInclude cpphash.h.\n \t* cpphash.c (special_symbol): Handle plain `xxx' for poisoned xxx.\n-\t* cpplib.c (do_define): Generalise to handle poisoned definitions,\n+\t* cpplib.c (do_define): Generalize to handle poisoned definitions,\n \tredefining poisoned identifiers, etc.\n \t(do_undef): Don't allow poisoned identifiers to be undefined.\n \t(do_pragma): Add #pragma poison.\n@@ -8325,7 +8325,7 @@ Thu Sep  9 13:46:06 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \t* cccp.c: Add T_POISON node type.\n \t(special_symbol): Handle `defined(xxx)' and plain `xxx' for\n \tpoisoned xxx.\n-\t(do_define): Generalise to handle poisoned definitions,\n+\t(do_define): Generalize to handle poisoned definitions,\n \tredefining poisoned identifiers, etc.\n \t(do_undef): Don't allow poisoned identifiers to be undefined.\n \t(do_pragma): Add #pragma poison.\n@@ -14093,7 +14093,7 @@ Wed Jun  2 12:25:55 1999  Richard Henderson  <rth@cygnus.com>\n \n Wed Jun  2 08:42:55 1999  Nick Clifton  <nickc@cygnus.com>\n \n-\t* config/arm/tcoff.h (USER_LABEL_PREFIX): Synchronise with\n+\t* config/arm/tcoff.h (USER_LABEL_PREFIX): Synchronize with\n \tdefinition in config/arm/coff.h\n \t* config/arm/coff.h: Add comment about USER_LABEL_PREFIX.\n "}, {"sha": "2380e9986824a773efd65e5a1e68a21beedb2423", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -10805,7 +10805,7 @@ Wed Feb 23 13:00:06 CET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c (do_spec_1): Catch the case where %* is used in a\n \tsubstitution pattern, but it has not been initialized.\n-\tIssue a meaningful error message if an unrecognised operator\n+\tIssue a meaningful error message if an unrecognized operator\n \tis encountered in a spec string.\n \n 2000-03-14  Richard Earnshaw <rearnsha@arm.com>"}, {"sha": "29e914ac6ebb47ba8ca1a95e8dac46a8c68097ae", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -142,7 +142,7 @@\n \n \t* c-parse.in (select_or_iter_stmt): Use truthvalue_conversion\n \ton the condition of a FOR statement, so that it gets typechecked\n-\tand optimised.\n+\tand optimized.\n \n 2000-12-29  Alexandre Oliva  <aoliva@redhat.com>\n "}, {"sha": "c6c5c9f50522fdb3f75b66b3f981e6f940d8a4f4", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -11536,7 +11536,7 @@ Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n \n 2001-01-27  Michael Sokolov  <msokolov@ivan.Harhan.ORG>\n \n-\t* fixproto: Correctly install synthesised unistd.h and stdlib.h when\n+\t* fixproto: Correctly install synthesized unistd.h and stdlib.h when\n \tthey didn't need fixing.\n \n 2001-01-27  Janis Johnson <janis@us.ibm.com>\n@@ -11922,7 +11922,7 @@ Sun Jan 21 09:44:17 2001  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.c (ret_cond_branch): New argument (reverse) added.\n \tIf REVERSE nonzero then condition code in X must be reversed.\n-\t(encode_section_info): Optimise if/else.\n+\t(encode_section_info): Optimize if/else.\n \t(avr_function_value): Fix formatting.\n \n \t* config/avr/avr.md (branch): Call to ret_cond_branch changed."}, {"sha": "e23eb8f4eb75b8ea71dd4c6f1bb7a66a38c59828", "filename": "gcc/ChangeLog.6", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FChangeLog.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.6?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -995,7 +995,7 @@ Mon Dec 17 18:27:52 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n Mon Dec 17 17:57:05 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n-\t* Makefile.in (cfgcleanup.o): Add cselib.h dependancy.\n+\t* Makefile.in (cfgcleanup.o): Add cselib.h dependency.\n \t* basic-block.h (CLEANUP_THREADING): New constant.\n \t* cfgcleanup.c: Include cselib.h\n \t(thread_jump, mark_effect): New functions."}, {"sha": "61fa303f7b5b5c24235e98f7d5799277dfe5607a", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -8552,7 +8552,7 @@ Tue Apr 25 18:52:43 1995  Stephen R. van den Berg  (berg@pool.informatik.rwth-aa\n \tDelete the no_live_regs shortcut to save space.\n \tUse stackentry state to determine filled registers.\n \t(replace_reg): Accept COMPLEX_FLOAT as well.\n-\t(move_for_stack_reg): Optimise away some pointer dereferencing.\n+\t(move_for_stack_reg): Optimize away some pointer dereferencing.\n \t(subst_stack_regs): Make sure the stack is in the right order\n \tand of the right size for register passing.\n \t(goto_block_pat): Make sure the stack is in the right order"}, {"sha": "068bb44595e13af052283fbc5d4c2d9577b48cf5", "filename": "gcc/FSFChangeLog.11", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FFSFChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2FFSFChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.11?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -2636,7 +2636,7 @@ Wed Sep 10 11:49:20 1997  Jason Merrill  <jason@yorick.cygnus.com>\n  \tEXCEPTION_SECTION, mark the start of the frame info with a\n  \tcollectable tag.\n \t* collect2.c (frame_tables): New list.\n-\t(is_ctor_dtor): Recognise frame entries.\n+\t(is_ctor_dtor): Recognize frame entries.\n \t(scan_prog_file): Likewise.\n \t(main): Pass -fno-exceptions to sub-compile.  Also do collection\n \tif there are any frame entries.\n@@ -3948,7 +3948,7 @@ Sun Aug  3 21:57:31 1997  Jim Meyering  <meyering@eng.ascend.com>\n \n Sun Aug  3 21:54:51 1997  Nick Burrett  <n.a.burrett@btinternet.com>\n \n-\t* cpplib.c (cpp_start_read): Recognise suffixes 'cp' and 'c++'.\n+\t* cpplib.c (cpp_start_read): Recognize suffixes 'cp' and 'c++'.\n \n Sun Aug  3 19:18:27 1997  Ralf Baechle  <ralf@uni-koblenz.de>\n "}, {"sha": "a9ed096853d2fadb37da94dbc146de5f5a532477", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -303,7 +303,7 @@ int warn_char_subscripts;\n \n int warn_conversion;\n \n-/* Warn about #pragma directives that are not recognised.  */      \n+/* Warn about #pragma directives that are not recognized.  */      \n \n int warn_unknown_pragmas; /* Tri state variable.  */  \n \n@@ -4947,7 +4947,7 @@ builtin_define_float_constants (name_prefix, fp_suffix, type)\n   sprintf (name, \"__%s_DIG__\", name_prefix);\n   builtin_define_with_int_value (name, dig);\n \n-  /* The minimum negative int x such that b**(x-1) is a normalised float.  */\n+  /* The minimum negative int x such that b**(x-1) is a normalized float.  */\n   sprintf (name, \"__%s_MIN_EXP__\", name_prefix);\n   sprintf (buf, \"(%d)\", min_exp);\n   builtin_define_with_value (name, buf, 0);"}, {"sha": "9c69873e22f82c0d696f3284a97687226f261cdb", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -477,7 +477,7 @@ extern int warn_char_subscripts;\n \n extern int warn_conversion;\n \n-/* Warn about #pragma directives that are not recognised.  */      \n+/* Warn about #pragma directives that are not recognized.  */      \n \n extern int warn_unknown_pragmas; /* Tri state variable.  */  \n "}, {"sha": "0c7545a3325a580af8c8d98a93508a9c44706294", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -286,7 +286,7 @@ decode_format_attr (args, info, validated_p)\n \f\n /* Check a call to a format function against a parameter list.  */\n \n-/* The meaningfully distinct length modifiers for format checking recognised\n+/* The meaningfully distinct length modifiers for format checking recognized\n    by GCC.  */\n enum format_lengths\n {"}, {"sha": "ce4b910d03ba5bd5015b96a818762aef482b84fe", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -1199,7 +1199,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_ftabstop:\n-      /* Don't recognise -fno-tabstop=.  */\n+      /* Don't recognize -fno-tabstop=.  */\n       if (!on)\n \treturn 0;\n \n@@ -1640,7 +1640,7 @@ set_Wimplicit (on)\n }\n \n /* Args to -d specify what to dump.  Silently ignore\n-   unrecognised options; they may be aimed at toplev.c.  */\n+   unrecognized options; they may be aimed at toplev.c.  */\n static void\n handle_OPT_d (arg)\n      const char *arg;"}, {"sha": "acdce8ebaf54375a40a90f357d1d24f2dc45ec8f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -831,7 +831,7 @@ arm_isr_value (argument)\n     if (streq (arg, ptr->arg))\n       return ptr->return_value;\n \n-  /* An unrecognised interrupt type.  */\n+  /* An unrecognized interrupt type.  */\n   return ARM_FT_UNKNOWN;\n }\n \n@@ -1034,7 +1034,7 @@ arm_split_constant (code, mode, val, target, source, subtargets)\n \t  && REGNO (target) != REGNO (source)))\n     {\n       /* After arm_reorg has been called, we can't fix up expensive\n-\t constants by pushing them into memory so we must synthesise\n+\t constants by pushing them into memory so we must synthesize\n \t them in-line, regardless of the cost.  This is only likely to\n \t be more costly on chips that have load delay slots and we are\n \t compiling without running the scheduler (so no splitting\n@@ -7859,7 +7859,7 @@ emit_multi_reg_push (mask)\n     num_dwarf_regs--;\n \n   /* For the body of the insn we are going to generate an UNSPEC in\n-     parallel with several USEs.  This allows the insn to be recognised\n+     parallel with several USEs.  This allows the insn to be recognized\n      by the push_multi pattern in the arm.md file.  The insn looks\n      something like this:\n "}, {"sha": "7c739301153beb9412f8e6214f8cff403bac787f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -3913,7 +3913,7 @@\n ;;  DONE;\n ;;}\")\n \n-;; Recognise garbage generated above.\n+;; Recognize garbage generated above.\n \n ;;(define_insn \"\"\n ;;  [(set (match_operand:TI 0 \"general_operand\" \"=r,r,r,<,>,m\")\n@@ -4682,7 +4682,7 @@\n   \"\n )\n \n-;; Pattern to recognise insn generated default case above\n+;; Pattern to recognize insn generated default case above\n (define_insn \"*movhi_insn_arch4\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")    \n \t(match_operand:HI 1 \"general_operand\"      \"rI,K,r,m\"))]"}, {"sha": "5e8ddf91ca285aacc5bb5fb0b0ebfbe57b110d05", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -45,7 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-/* Emit code to set up a trampoline and synchronise the caches.  */\n+/* Emit code to set up a trampoline and synchronize the caches.  */\n #undef  INITIALIZE_TRAMPOLINE\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "ac6da05105bc5091272f5d16f3925e1740d993e3", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -148,7 +148,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  DEFAULT_STRUCTURE_SIZE_BOUNDARY\n #define DEFAULT_STRUCTURE_SIZE_BOUNDARY 8\n \n-/* Emit code to set up a trampoline and synchronise the caches.  */\n+/* Emit code to set up a trampoline and synchronize the caches.  */\n #undef  INITIALIZE_TRAMPOLINE\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)                      \\\n {                                                                      \\"}, {"sha": "0ea79a6cf08da9f3674f935b086f09f68c4d1adc", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -1469,7 +1469,7 @@ c4x_check_legit_addr (mode, addr, strict)\n   switch (code)\n     {\n       /* Register indirect with auto increment/decrement.  We don't\n-\t allow SP here---push_operand should recognise an operand\n+\t allow SP here---push_operand should recognize an operand\n \t being pushed on the stack.  */\n \n     case PRE_DEC:"}, {"sha": "94cca09b597c5709052742f8414163ac31b7b639", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -1470,7 +1470,7 @@ CUMULATIVE_ARGS;\n \n    Note that we return, rather than break so that rtx_cost doesn't\n    include CONST_COSTS otherwise expand_mult will think that it is\n-   cheaper to synthesise a multiply rather than to use a multiply\n+   cheaper to synthesize a multiply rather than to use a multiply\n    instruction.  I think this is because the algorithm synth_mult\n    doesn't take into account the loading of the operands, whereas the\n    calculation of mult_cost does. "}, {"sha": "2d52082da35c971cd94e08aef02bacda8c9b84db", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -29,7 +29,7 @@\n ;        for QImode and Pmode, whether Pmode was QImode or PQImode.\n ;        For addresses we wouldn't have to have a clobber of the CC\n ;        associated with each insn and we could use MPYI in address\n-;        calculations without having to synthesise a proper 32 bit multiply.\n+;        calculations without having to synthesize a proper 32 bit multiply.\n \n ; Additional C30/C40 instructions not coded:\n ; CALLcond, IACK, IDLE, LDE, LDFI, LDII, LDM, NORM, RETIcond\n@@ -1360,7 +1360,7 @@\n ;  If one of the operands is not a register, then we should\n ;  emit two insns, using a scratch register.  This will produce\n ;  better code in loops if the source operand is invariant, since\n-;  the source reload can be optimised out.  During reload we cannot\n+;  the source reload can be optimized out.  During reload we cannot\n ;  use change_address or force_reg which will allocate new pseudo regs.\n \n ;  Unlike most other insns, the move insns can't be split with\n@@ -2076,7 +2076,7 @@\n      {        \n        if (GET_CODE (operands[2]) == CONST_INT)\n          {\n-          /* Let GCC try to synthesise the multiplication using shifts\n+          /* Let GCC try to synthesize the multiplication using shifts\n              and adds.  In most cases this will be more profitable than\n              using the C3x MPYI.  */\n             FAIL;\n@@ -3410,7 +3410,7 @@\n ;  If one of the operands is not a register, then we should\n ;  emit two insns, using a scratch register.  This will produce\n ;  better code in loops if the source operand is invariant, since\n-;  the source reload can be optimised out.  During reload we cannot\n+;  the source reload can be optimized out.  During reload we cannot\n ;  use change_address or force_reg.\n (define_expand \"movqf\"\n   [(set (match_operand:QF 0 \"src_operand\" \"\")\n@@ -5317,7 +5317,7 @@\n ; Note we have to emit a dbu instruction if there are no delay slots\n ; to fill.\n ; Also note that GCC will try to reverse a loop to see if it can\n-; utilise this instruction.  However, if there are more than one\n+; utilize this instruction.  However, if there are more than one\n ; memory reference in the loop, it cannot guarantee that reversing\n ; the loop will work :(  (see check_dbra_loop() in loop.c)\n ; Note that the C3x only decrements the 24 LSBs of the address register\n@@ -5629,7 +5629,7 @@\n \n ; The current low overhead looping code is naff and is not failsafe\n ; If you want RTPB instructions to be generated, apply the patches\n-; from www.elec.canterbury.ac.nz/c4x.  This will utilise the\n+; from www.elec.canterbury.ac.nz/c4x.  This will utilize the\n ; doloop_begin and doloop_end patterns in this MD.\n (define_expand \"decrement_and_branch_on_count\"\n   [(parallel [(set (pc)\n@@ -7315,7 +7315,7 @@\n \n ; The following two peepholes remove an unecessary load\n ; often found at the end of a function.  These peepholes\n-; could be generalised to other binary operators.  They shouldn't\n+; could be generalized to other binary operators.  They shouldn't\n ; be required if we run a post reload mop-up pass.\n (define_peephole\n  [(parallel [(set (match_operand:QF 0 \"ext_reg_operand\" \"\")"}, {"sha": "0335a0e217e5ac142addc7258f12b05e8342c81d", "filename": "gcc/config/c4x/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fc4x%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Flibgcc.S?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.  */\n ;\n ; r[i + 1] = r[i] * (2.0 - v * r[i])\n ;\n-; The normalised error e[i] at the ith iteration is\n+; The normalized error e[i] at the ith iteration is\n ;\n ; e[i] = (r - r[i]) / r = (1 / v - r[i]) * v = (1 - v * r[i])\n ;"}, {"sha": "9c9a8bdeeeaa857a54c5980cf95e10bf76c5c37a", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -521,7 +521,7 @@\n ;;{{{ Floating Point Moves \n \n ;; Note - Patterns for SF mode moves are compulsory, but\n-;; patterns for DF are optional, as GCC can synthesise them.\n+;; patterns for DF are optional, as GCC can synthesize them.\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")"}, {"sha": "ac078ba9b2c6a1fb6bbeba15c77e962379167083", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -1607,7 +1607,7 @@\n ;; Floating Point Moves\n ;;\n ;; Note - Patterns for SF mode moves are compulsory, but\n-;; patterns for DF are optional, as GCC can synthesise them.\n+;; patterns for DF are optional, as GCC can synthesize them.\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n@@ -2258,7 +2258,7 @@\n ;; Signed conversions from a smaller integer to a larger integer\n ;;\n ;; These operations are optional.  If they are not\n-;; present GCC will synthesise them for itself\n+;; present GCC will synthesize them for itself\n ;; Even though frv does not provide these instructions, we define them\n ;; to allow load + sign extend to be collapsed together\n (define_insn \"extendqihi2\""}, {"sha": "1275acdc17ee87e0062b122750c1838020a2c6b6", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -766,7 +766,7 @@\n ;; Floating Point Moves\n ;;\n ;; Note - Patterns for SF mode moves are compulsory, but\n-;; patterns for DF are optional, as GCC can synthesise them.\n+;; patterns for DF are optional, as GCC can synthesize them.\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")"}, {"sha": "73d941adcc02a06b5a08257956b71881893231b9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -123,7 +123,7 @@ enum block_move_type {\n   BLOCK_MOVE_LAST\t\t\t/* generate just the last store */\n };\n \n-/* Information about one recognised processor.  Defined here for the\n+/* Information about one recognized processor.  Defined here for the\n    benefit of TARGET_CPU_CPP_BUILTINS.  */\n struct mips_cpu_info {\n   /* The 'canonical' name of the processor as far as GCC is concerned."}, {"sha": "49b59b112e333224d96360e7c1e1227b674ebcfc", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -647,7 +647,7 @@ notice_update_cc (body, insn)\n     }\n }\n \n-/* Recognise the PARALLEL rtx generated by mn10300_gen_multiple_store().\n+/* Recognize the PARALLEL rtx generated by mn10300_gen_multiple_store().\n    This function is for MATCH_PARALLEL and so assumes OP is known to be\n    parallel.  If OP is a multiple store, return a mask indicating which\n    registers it saves.  Return 0 otherwise.  */"}, {"sha": "1e2813cb2a51c2b2911517dc88a7ad5d5a882e48", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -476,7 +476,7 @@ xstormy16_secondary_reload_class (class, mode, x)\n   return NO_REGS;\n }\n \n-/* Recognise a PLUS that needs the carry register.  */\n+/* Recognize a PLUS that needs the carry register.  */\n int\n xstormy16_carry_plus_operand (x, mode)\n      rtx x;"}, {"sha": "20a22c750a7760399ad3ebd26110c4b632dcc5fe", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -851,7 +851,7 @@\n ;; ??? This is very ugly.  The right way to do this is to modify cmpsi so\n ;; that it doesn't emit RTL, and then modify the bcc/scc patterns so that\n ;; they emit RTL for the compare instruction.  Unfortunately, this requires\n-;; lots of changes that will be hard to sanitise.  So for now, cmpsi still\n+;; lots of changes that will be hard to sanitize.  So for now, cmpsi still\n ;; emits RTL, and I get the compare operands here from the previous insn.\n \n (define_expand \"movsicc\""}, {"sha": "eb11e5b090b42522e4042b86eece2650a146eaff", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -367,7 +367,7 @@ _cpp_handle_directive (pfile, indented)\n       if (dname->val.node->directive_index)\n \tdir = &dtable[dname->val.node->directive_index - 1];\n     }\n-  /* We do not recognise the # followed by a number extension in\n+  /* We do not recognize the # followed by a number extension in\n      assembler code.  */\n   else if (dname->type == CPP_NUMBER && CPP_OPTION (pfile, lang) != CLK_ASM)\n     {\n@@ -1984,7 +1984,7 @@ _cpp_pop_buffer (pfile)\n     }\n }\n \n-/* Enter all recognised directives in the hash table.  */\n+/* Enter all recognized directives in the hash table.  */\n void\n _cpp_init_directives (pfile)\n      cpp_reader *pfile;"}, {"sha": "e7d2ef7aaf28f4dae7e6b07d28117d172cb23057", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -7415,7 +7415,7 @@ Floating and complex non-type template parameters have been deprecated,\n and are now removed from g++.\n \n The implicit typename extension has been deprecated and will be removed\n-from g++ at some point.  In some cases g++ determines that a dependant\n+from g++ at some point.  In some cases g++ determines that a dependent\n type such as @code{TPL<T>::X} is a type without needing a\n @code{typename} keyword, contrary to the standard.\n "}, {"sha": "7751d580a7f6cd610302d1bff83796cd0628602d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -5841,7 +5841,7 @@ memory a feature of the ARM architecture allows a word load to be used,\n even if the address is unaligned, and the processor core will rotate the\n data as it is being loaded.  This option tells the compiler that such\n misaligned accesses will cause a MMU trap and that it should instead\n-synthesise the access as a series of byte accesses.  The compiler can\n+synthesize the access as a series of byte accesses.  The compiler can\n still use word accesses to load half-word data if it knows that the\n address is aligned to a word boundary.\n \n@@ -8589,10 +8589,10 @@ DBcond(D), instructions.  This is enabled by default for the C4x.  To be\n on the safe side, this is disabled for the C3x, since the maximum\n iteration count on the C3x is @math{2^{23} + 1} (but who iterates loops more than\n @math{2^{23}} times on the C3x?).  Note that GCC will try to reverse a loop so\n-that it can utilise the decrement and branch instruction, but will give\n+that it can utilize the decrement and branch instruction, but will give\n up if there is more than one memory reference in the loop.  Thus a loop\n where the loop counter is decremented can generate slightly more\n-efficient code, in cases where the RPTB instruction cannot be utilised.\n+efficient code, in cases where the RPTB instruction cannot be utilized.\n \n @item -mdp-isr-reload\n @itemx -mparanoid"}, {"sha": "367034126681d7f32eb8954788007def8c7fab40", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -3533,7 +3533,7 @@ for comparisons whose argument is a @code{plus}.\n @cindex looping instruction patterns\n @cindex defining looping instruction patterns\n \n-Some machines have special jump instructions that can be utilised to\n+Some machines have special jump instructions that can be utilized to\n make loops more efficient.  A common example is the 68000 @samp{dbra}\n instruction which performs a decrement of a register and a branch if the\n result was greater than zero.  Other machines, in particular digital"}, {"sha": "993d970ad58e18d5d702d8958346cc7fac92e285", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -186,7 +186,7 @@ struct lang_hooks\n   /* Function called with an option vector as argument, to decode a\n      single option (typically starting with -f or -W or +).  It should\n      return the number of command-line arguments it uses if it handles\n-     the option, or 0 and not complain if it does not recognise the\n+     the option, or 0 and not complain if it does not recognize the\n      option.  If this function returns a negative number, then its\n      absolute value is the number of command-line arguments used, but,\n      in addition, no language-independent option processing should be"}, {"sha": "fc0f57a1eedb74aee5bbdeaca7f57d539c051ba9", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -5728,7 +5728,7 @@ ibmtoe (d, e, mode)\n   if (y[M] == 0 && y[M+1] == 0 && y[M+2] == 0 && y[M+3] == 0)\n     y[0] = y[E] = 0;\n   else\n-    y[E] -= 5 + enormlz (y);\t/* now normalise the mantissa */\n+    y[E] -= 5 + enormlz (y);\t/* now normalize the mantissa */\n \t\t\t      /* handle change in RADIX */\n   emovo (y, e);\n }"}, {"sha": "a68021108d46c6709e489b13a2a609b972360045", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -353,7 +353,7 @@ next_flags_user (insn)\n   return NULL_RTX;\n }\n \f\n-/* Reorganise the stack into ascending numbers,\n+/* Reorganize the stack into ascending numbers,\n    after this insn.  */\n \n static void"}, {"sha": "0f7e6a5644b219060396272b12fd54d4a4fb078b", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05713b80e0c6d1506ee9cbf34544435bf709b124/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=05713b80e0c6d1506ee9cbf34544435bf709b124", "patch": "@@ -4008,7 +4008,7 @@ decode_f_option (arg)\n   else if (!strcmp (arg, \"no-stack-limit\"))\n     stack_limit_rtx = NULL_RTX;\n   else if (!strcmp (arg, \"preprocessed\"))\n-    /* Recognise this switch but do nothing.  This prevents warnings\n+    /* Recognize this switch but do nothing.  This prevents warnings\n        about an unrecognized switch if cpplib has not been linked in.  */\n     ;\n   else"}]}