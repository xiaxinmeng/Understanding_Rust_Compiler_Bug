{"sha": "72e324b6d8cb43b07eb3927f7d150b93105d1add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlMzI0YjZkOGNiNDNiMDdlYjM5MjdmN2QxNTBiOTMxMDVkMWFkZA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-08-14T09:52:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:52:10Z"}, "message": "[Ada] Equality for nonabstract type derived from interface treated as abstract\n\nThe compiler was creating an abstract function for the equality\noperation of a (nonlimited) interface type, and that could result in\nerrors on generic instantiations that are passed nonabstract types\nderived from the interface type along with the derived type's inherited\nequality operation (complaining about an abstract subprogram being\npassed to a nonabstract formal). The \"=\" operation of an interface is\nsupposed to be nonabstract (a direct consequence of the rule in RM\n4.5.2(6-7)), so we now create an expression function rather than an\nabstract function. The function returns False, but the result is\nunimportant since a function of an abstract type can never actually be\ninvoked (its arguments must generally be class-wide, since there can be\nno objects of the type, and calling it will dispatch).\n\n2019-08-14  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch3.adb (Predef_Spec_Or_Body): For an equality operation\n\tof an interface type, create an expression function (that\n\treturns False) rather than declaring an abstract function.\n\t* freeze.adb (Check_Inherited_Conditions): Set Needs_Wrapper to\n\tFalse unconditionally at the start of the loop creating wrappers\n\tfor inherited operations.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal11.adb, gnat.dg/equal11_interface.ads,\n\tgnat.dg/equal11_record.adb, gnat.dg/equal11_record.ads: New\n\ttestcase.\n\nFrom-SVN: r274464", "tree": {"sha": "ff7dd89b26672c86524992e4fe81aee5f6de6164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7dd89b26672c86524992e4fe81aee5f6de6164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e324b6d8cb43b07eb3927f7d150b93105d1add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e324b6d8cb43b07eb3927f7d150b93105d1add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e324b6d8cb43b07eb3927f7d150b93105d1add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e324b6d8cb43b07eb3927f7d150b93105d1add/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae3a2b54d1a19f9ca4941645f71dddf675fbd19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3a2b54d1a19f9ca4941645f71dddf675fbd19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3a2b54d1a19f9ca4941645f71dddf675fbd19c"}], "stats": {"total": 116, "additions": 110, "deletions": 6}, "files": [{"sha": "1b9e28529fe4a6b19387dd3cb1270ef462d6b332", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -1,3 +1,12 @@\n+2019-08-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch3.adb (Predef_Spec_Or_Body): For an equality operation\n+\tof an interface type, create an expression function (that\n+\treturns False) rather than declaring an abstract function.\n+\t* freeze.adb (Check_Inherited_Conditions): Set Needs_Wrapper to\n+\tFalse unconditionally at the start of the loop creating wrappers\n+\tfor inherited operations.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* table.adb: Assert that the table is not locked when increasing"}, {"sha": "1901ea573983d4ae4eff8dbd4d3a3db850582adf", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -10313,8 +10313,24 @@ package body Exp_Ch3 is\n              Result_Definition        => New_Occurrence_Of (Ret_Type, Loc));\n       end if;\n \n+      --  Declare an abstract subprogram for primitive subprograms of an\n+      --  interface type (except for \"=\").\n+\n       if Is_Interface (Tag_Typ) then\n-         return Make_Abstract_Subprogram_Declaration (Loc, Spec);\n+         if Name /= Name_Op_Eq then\n+            return Make_Abstract_Subprogram_Declaration (Loc, Spec);\n+\n+         --  The equality function (if any) for an interface type is defined\n+         --  to be nonabstract, so we create an expression function for it that\n+         --  always returns False. Note that the function can never actually be\n+         --  invoked because interface types are abstract, so there aren't any\n+         --  objects of such types (and their equality operation will always\n+         --  dispatch).\n+\n+         else\n+            return Make_Expression_Function\n+                     (Loc, Spec, New_Occurrence_Of (Standard_False, Loc));\n+         end if;\n \n       --  If body case, return empty subprogram body. Note that this is ill-\n       --  formed, because there is not even a null statement, and certainly not"}, {"sha": "78d1ed46fefd27852377bd6a2f027fa15f3383a7", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -1526,11 +1526,11 @@ package body Freeze is\n       --  so that LSP can be verified/enforced.\n \n       Op_Node := First_Elmt (Prim_Ops);\n-      Needs_Wrapper := False;\n \n       while Present (Op_Node) loop\n-         Decls := Empty_List;\n-         Prim  := Node (Op_Node);\n+         Decls         := Empty_List;\n+         Prim          := Node (Op_Node);\n+         Needs_Wrapper := False;\n \n          if not Comes_From_Source (Prim) and then Present (Alias (Prim)) then\n             Par_Prim := Alias (Prim);\n@@ -1601,8 +1601,6 @@ package body Freeze is\n                     (Par_R, New_List (New_Decl, New_Body));\n                end if;\n             end;\n-\n-            Needs_Wrapper := False;\n          end if;\n \n          Next_Elmt (Op_Node);"}, {"sha": "cff4e5ed0a94518e2e20c31ac0be5a9b19825f84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat.dg/equal11.adb, gnat.dg/equal11_interface.ads,\n+\tgnat.dg/equal11_record.adb, gnat.dg/equal11_record.ads: New\n+\ttestcase.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/discr57.adb: New testcase."}, {"sha": "83cff180ffe9be5bc36b8bafbaa5801e279e4c44", "filename": "gcc/testsuite/gnat.dg/equal11.adb", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11.adb?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -0,0 +1,37 @@\n+--  { dg-do run }\n+\n+with Equal11_Record;\n+\n+procedure Equal11 is\n+\n+  use Equal11_Record;\n+\n+  R : My_Record_Type;\n+  L : My_Record_Type_List_Pck.List;\n+begin\n+  -- Single record\n+  R.F := 42;\n+  R.Put;\n+  if Put_Result /= 42 then\n+    raise Program_Error;\n+  end if;\n+\n+  -- List of records\n+  L.Append ((F => 3));\n+  L.Append ((F => 2));\n+  L.Append ((F => 1));\n+\n+  declare\n+    Expected : constant array (Positive range <>) of Integer :=\n+      (3, 2, 1);\n+    I : Positive := 1;\n+  begin\n+    for LR of L loop\n+      LR.Put;\n+      if Put_Result /= Expected (I) then\n+        raise Program_Error;\n+      end if;\n+      I := I + 1;\n+    end loop;\n+  end;\n+end Equal11;"}, {"sha": "abc44159e814d273fef238043e80804e2f397dec", "filename": "gcc/testsuite/gnat.dg/equal11_interface.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_interface.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_interface.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_interface.ads?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -0,0 +1,7 @@\n+package Equal11_Interface is\n+\n+  type My_Interface_Type is interface;\n+\n+  procedure Put (R : in My_Interface_Type) is abstract;\n+\n+end Equal11_Interface;"}, {"sha": "5528162009116412aa28dcb6b7e43e5869eeb84a", "filename": "gcc/testsuite/gnat.dg/equal11_record.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.adb?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -0,0 +1,10 @@\n+with Ada.Text_IO;\n+\n+package body Equal11_Record is\n+\n+  procedure Put (R : in My_Record_Type) is\n+  begin\n+    Put_Result := R.F;\n+  end Put;\n+\n+end Equal11_Record;"}, {"sha": "09a18227f35852c8589a2ea698132d86f1bd7431", "filename": "gcc/testsuite/gnat.dg/equal11_record.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e324b6d8cb43b07eb3927f7d150b93105d1add/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal11_record.ads?ref=72e324b6d8cb43b07eb3927f7d150b93105d1add", "patch": "@@ -0,0 +1,21 @@\n+with Ada.Containers.Doubly_Linked_Lists;\n+with Equal11_Interface;\n+\n+package Equal11_Record is\n+\n+  use Equal11_Interface;\n+\n+  type My_Record_Type is new My_Interface_Type with\n+    record\n+      F : Integer;\n+    end record;\n+\n+  overriding\n+  procedure Put (R : in My_Record_Type);\n+\n+  Put_Result : Integer;\n+\n+   package My_Record_Type_List_Pck is\n+     new Ada.Containers.Doubly_Linked_Lists (Element_Type => My_Record_Type);\n+\n+end Equal11_Record;"}]}