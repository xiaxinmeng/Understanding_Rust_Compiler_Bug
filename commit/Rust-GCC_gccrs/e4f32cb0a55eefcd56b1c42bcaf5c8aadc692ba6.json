{"sha": "e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmMzJjYjBhNTVlZWZjZDU2YjFjNDJiY2FmNWM4YWFkYzY5MmJhNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-10T00:43:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-10T00:43:50Z"}, "message": "type_traits (is_nothrow_constructible): Add.\n\n2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (is_nothrow_constructible): Add.\n\t(declval): Add noexcept specification.\n\t* testsuite/util/testsuite_tr1.h (struct NothrowExplicitClass,\n\tThrowExplicitClass, NoexceptExplicitClass, ExceptExplicitClass):\n\tAdd.\n\t* testsuite/20_util/is_nothrow_constructible/value.cc: New.\n\t* testsuite/20_util/is_nothrow_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\nFrom-SVN: r160523", "tree": {"sha": "82da2d0a7749716300e33183ea21af0081cd90ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82da2d0a7749716300e33183ea21af0081cd90ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/comments", "author": null, "committer": null, "parents": [{"sha": "3cebddd64350cdfa5c9a6ef4ba68b9a506e10ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cebddd64350cdfa5c9a6ef4ba68b9a506e10ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cebddd64350cdfa5c9a6ef4ba68b9a506e10ead"}], "stats": {"total": 233, "additions": 225, "deletions": 8}, "files": [{"sha": "82fc51d3ace2142c87d0353e2bc888dabf14deb3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -1,3 +1,21 @@\n+2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (is_nothrow_constructible): Add.\n+\t(declval): Add noexcept specification.\n+\t* testsuite/util/testsuite_tr1.h (struct NothrowExplicitClass,\n+\tThrowExplicitClass, NoexceptExplicitClass, ExceptExplicitClass):\n+\tAdd.\n+\t* testsuite/20_util/is_nothrow_constructible/value.cc: New.\n+\t* testsuite/20_util/is_nothrow_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\n 2010-06-09  Khem Raj  <raj.khem@gmail.com>\n \n \tPR libstdc++/44461"}, {"sha": "42a462e53a5231106bac31aa71fd8563444d14ac", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -193,7 +193,7 @@ namespace std\n     { };\n \n   template<typename _Tp>\n-    typename add_rvalue_reference<_Tp>::type declval();\n+    typename add_rvalue_reference<_Tp>::type declval() noexcept;\n \n   template<typename _Tp, typename... _Args>\n     class __is_constructible_helper\n@@ -234,6 +234,28 @@ namespace std\n \t\t\t\t\t\t\t _Args...>::__value>\n     { };\n \n+  template<bool, typename _Tp, typename... _Args>\n+    struct __is_nt_constructible_helper\n+    { static const bool __value = false; };\n+\n+  template<typename _Tp, typename... _Args>\n+    struct __is_nt_constructible_helper<true, _Tp, _Args...>\n+    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };\n+\n+  template<typename _Tp, typename _Arg>\n+    struct __is_nt_constructible_helper<true, _Tp, _Arg>\n+    {\n+      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));\n+    };\n+\n+  /// is_nothrow_constructible\n+  template<typename _Tp, typename... _Args>\n+    struct is_nothrow_constructible\n+    : public integral_constant<bool,\n+\t  __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,\n+\t\t\t\t       _Tp, _Args...>::__value>\n+    { };\n+\n   /// has_trivial_default_constructor\n   template<typename _Tp>\n     struct has_trivial_default_constructor\n@@ -649,7 +671,7 @@ namespace std\n \n   template<typename _Tp>\n     inline typename add_rvalue_reference<_Tp>::type\n-    declval()\n+    declval() noexcept\n     {\n       static_assert(__declval_protector<_Tp>::__stop,\n \t\t    \"declval() must not be used!\");"}, {"sha": "727f1c47ac96c546013b05465a3acde5c5934542", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 654 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 676 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-excess-errors \"In function\" }\n "}, {"sha": "37ba9eb8bc14af989ade6012eb193ce9df8f881d", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_nothrow_constructible<test_type, test_type>;\n+}"}, {"sha": "53a64a78f3f918a6abee471a62073ddbcf84d3b8", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Frequirements%2Ftypedefs.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_nothrow_constructible<int, int>   test_type;\n+  typedef test_type::value_type                     value_type;\n+  typedef test_type::type                           type;\n+  typedef test_type::type::value_type               type_value_type;\n+  typedef test_type::type::type                     type_type;\n+}"}, {"sha": "b3246fad11916c8cfa7f734b75b5a48c19fc9eb5", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/value.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_nothrow_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t   double&>(true)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t   int&>(true)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t   double&, int&, double&>(true)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t   double&>(true)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t   int&>(true)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t   double&, int&, double&>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t   void*>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass>\n+\t   (false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n+\t   int, double>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t   void*>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass>\n+\t   (false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n+\t   int, double>(false)) );\n+\n+  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t   double&>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t   int&>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, ExceptExplicitClass,\n+\t   double&, int&, double&>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t   double&>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t   int&>(false)) );\n+  VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n+\t   double&, int&, double&>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8f626628ef7989159154f6d2084edef5813fff39", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 617 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 581 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 639 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 603 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "3648236db6403dbe4c2a10538e6966fc694b440e", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 540 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 504 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 562 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 526 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "5aac18292bb0f296e164a0bc1bc11e8621c60949", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=e4f32cb0a55eefcd56b1c42bcaf5c8aadc692ba6", "patch": "@@ -1,7 +1,8 @@\n // -*- C++ -*-\n // Testing utilities for the tr1 testsuite.\n //\n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -127,8 +128,39 @@ namespace __gnu_test\n   {\n     ExplicitClass(double&);\n     explicit ExplicitClass(int&);\n+    ExplicitClass(double&, int&, double&);\n   };\n \n+  struct NothrowExplicitClass\n+  {\n+    NothrowExplicitClass(double&) throw();\n+    explicit NothrowExplicitClass(int&) throw();\n+    NothrowExplicitClass(double&, int&, double&) throw();\n+  };\n+\n+  struct ThrowExplicitClass\n+  {\n+    ThrowExplicitClass(double&) throw(int);\n+    explicit ThrowExplicitClass(int&) throw(int);\n+    ThrowExplicitClass(double&, int&, double&) throw(int);\n+  };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  struct NoexceptExplicitClass\n+  {\n+    NoexceptExplicitClass(double&) noexcept(true);\n+    explicit NoexceptExplicitClass(int&) noexcept(true);\n+    NoexceptExplicitClass(double&, int&, double&) noexcept(true);\n+  };\n+\n+  struct ExceptExplicitClass\n+  {\n+    ExceptExplicitClass(double&) noexcept(false);\n+    explicit ExceptExplicitClass(int&) noexcept(false);\n+    ExceptExplicitClass(double&, int&, double&) noexcept(false);\n+  };\n+#endif\n+\n   struct NType   // neither trivial nor standard-layout\n   {\n     int i;"}]}