{"sha": "c1163e75d8241f72ed143392f8477f469fb29f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExNjNlNzVkODI0MWY3MmVkMTQzMzkyZjg0NzdmNDY5ZmIyOWY5MA==", "commit": {"author": {"name": "Philip Blundell", "email": "philb@gnu.org", "date": "2001-01-15T19:54:42Z"}, "committer": {"name": "Phil Blundell", "email": "pb@gcc.gnu.org", "date": "2001-01-15T19:54:42Z"}, "message": "arm.c (arm_finalize_pic): New arg \"prologue\".\n\n2001-01-15  Philip Blundell  <philb@gnu.org>\n\n\t* config/arm/arm.c (arm_finalize_pic): New arg \"prologue\".\n\t(is_pic): Delete.\n\t* config/arm/arm-protos.h (arm_finalize_pic): Update prototype.\n\t(is_pic): Delete declaration.\n\t* config/arm/arm.h (FINALIZE_PIC): Update call to above.\n\t(OUTPUT_INT_ADDR_CONST): Remove special handling of PIC address.\n\t* config/arm/arm.md (builtin_setjmp_receiver): Likewise.\n\nFrom-SVN: r39049", "tree": {"sha": "ad4bd8934bdd12f0a0e78835059e29832d3764ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad4bd8934bdd12f0a0e78835059e29832d3764ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1163e75d8241f72ed143392f8477f469fb29f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1163e75d8241f72ed143392f8477f469fb29f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1163e75d8241f72ed143392f8477f469fb29f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1163e75d8241f72ed143392f8477f469fb29f90/comments", "author": {"login": "philb", "id": 227468, "node_id": "MDQ6VXNlcjIyNzQ2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/227468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philb", "html_url": "https://github.com/philb", "followers_url": "https://api.github.com/users/philb/followers", "following_url": "https://api.github.com/users/philb/following{/other_user}", "gists_url": "https://api.github.com/users/philb/gists{/gist_id}", "starred_url": "https://api.github.com/users/philb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philb/subscriptions", "organizations_url": "https://api.github.com/users/philb/orgs", "repos_url": "https://api.github.com/users/philb/repos", "events_url": "https://api.github.com/users/philb/events{/privacy}", "received_events_url": "https://api.github.com/users/philb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10a0ba8488ce1de0e30fbc3b91079ab78ae32e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a0ba8488ce1de0e30fbc3b91079ab78ae32e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a0ba8488ce1de0e30fbc3b91079ab78ae32e10"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "485edc232c1991fc16fb4565a0cb116b05c68c84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1163e75d8241f72ed143392f8477f469fb29f90", "patch": "@@ -1,3 +1,13 @@\n+2001-01-15  Philip Blundell  <philb@gnu.org>\n+\n+\t* config/arm/arm.c (arm_finalize_pic): New arg \"prologue\".\n+\t(is_pic): Delete.\n+\t* config/arm/arm-protos.h (arm_finalize_pic): Update prototype.\n+\t(is_pic): Delete declaration.\n+\t* config/arm/arm.h (FINALIZE_PIC): Update call to above.\n+\t(OUTPUT_INT_ADDR_CONST): Remove special handling of PIC address.\n+\t* config/arm/arm.md (builtin_setjmp_receiver): Likewise.\n+\n 2001-01-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (use_return_insn): Don't try to determine the function type"}, {"sha": "8f9376137fe9721cc83afd70584683e5f5745635", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c1163e75d8241f72ed143392f8477f469fb29f90", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n extern void   arm_override_options\tPARAMS ((void));\n extern int    use_return_insn\t\tPARAMS ((int));\n extern int    arm_regno_class \t\tPARAMS ((int));\n-extern void   arm_finalize_pic\t\tPARAMS ((void));\n+extern void   arm_finalize_pic\t\tPARAMS ((int));\n extern int    arm_volatile_func\t\tPARAMS ((void));\n extern const char * arm_output_epilogue\tPARAMS ((int));\n extern void   output_func_epilogue\tPARAMS ((int));\n@@ -52,7 +52,6 @@ extern int    arm_split_constant\tPARAMS ((RTX_CODE, enum machine_mode,\n extern RTX_CODE arm_canonicalize_comparison PARAMS ((RTX_CODE, rtx *));\n extern int    legitimate_pic_operand_p\tPARAMS ((rtx));\n extern rtx    legitimize_pic_address\tPARAMS ((rtx, enum machine_mode, rtx));\n-extern int    is_pic\t\t\tPARAMS ((rtx));\n extern int    arm_rtx_costs\t\tPARAMS ((rtx, RTX_CODE, RTX_CODE));\n extern int    arm_adjust_cost\t\tPARAMS ((rtx, rtx, rtx, int));\n extern int    const_double_rtx_ok_for_fpu\tPARAMS ((rtx));"}, {"sha": "13abef60c95d91b4308729c945b83eee193a9d99", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c1163e75d8241f72ed143392f8477f469fb29f90", "patch": "@@ -2230,22 +2230,16 @@ legitimize_pic_address (orig, mode, reg)\n   return orig;\n }\n \n-static rtx pic_rtx;\n-\n-int\n-is_pic (x)\n-     rtx x;\n-{\n-  if (x == pic_rtx)\n-    return 1;\n-  return 0;\n-}\n-\n+/* Generate code to load the PIC register.  PROLOGUE is true if\n+   called from arm_expand_prologue (in which case we want the \n+   generated insns at the start of the function);  false if called\n+   by an exception receiver that needs the PIC register reloaded\n+   (in which case the insns are just dumped at the current location).  */\n void\n-arm_finalize_pic ()\n+arm_finalize_pic (int prologue)\n {\n #ifndef AOF_ASSEMBLER\n-  rtx l1, pic_tmp, pic_tmp2, seq;\n+  rtx l1, pic_tmp, pic_tmp2, seq, pic_rtx;\n   rtx global_offset_table;\n \n   if (current_function_uses_pic_offset_table == 0 || TARGET_SINGLE_PIC_BASE)\n@@ -2282,7 +2276,10 @@ arm_finalize_pic ()\n \n   seq = gen_sequence ();\n   end_sequence ();\n-  emit_insn_after (seq, get_insns ());\n+  if (prologue)\n+    emit_insn_after (seq, get_insns ());\n+  else\n+    emit_insn (seq);\n \n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */"}, {"sha": "3332c220a67b551d560aa0aa20b10648c3d12c8d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c1163e75d8241f72ed143392f8477f469fb29f90", "patch": "@@ -2523,7 +2523,7 @@ extern const char * arm_pic_register_string;\n    data addresses in memory.  */\n #define PIC_OFFSET_TABLE_REGNUM arm_pic_register\n \n-#define FINALIZE_PIC arm_finalize_pic ()\n+#define FINALIZE_PIC arm_finalize_pic (1)\n \n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */\n@@ -2851,18 +2851,9 @@ extern int making_const_table;\n   else\t\t\t\t\t\t\\\n     THUMB_PRINT_OPERAND_ADDRESS (STREAM, X)\n      \n-/* Handles PIC addr specially */\n #define OUTPUT_INT_ADDR_CONST(STREAM, X) \t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic && GET_CODE (X) == CONST && is_pic (X))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\toutput_addr_const (STREAM, XEXP (XEXP (XEXP (X, 0), 0), 0));\t\\\n-\tfputs (\" - (\", STREAM);\t\t\t\t\t\t\\\n-\toutput_addr_const (STREAM, XEXP (XEXP (XEXP (X, 0), 1), 0));\t\\\n-\tfputs (\")\", STREAM);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      output_addr_const (STREAM, X);\t\t\t\t\t\\\n+    output_addr_const (STREAM, X);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     /* Mark symbols as position independent.  We only do this in the\t\\\n       .text segment, not in the .data segment. */\t\t\t\\"}, {"sha": "a5d5a499c35a88ab696b407fa4b246f9aff34199", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1163e75d8241f72ed143392f8477f469fb29f90/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c1163e75d8241f72ed143392f8477f469fb29f90", "patch": "@@ -4238,6 +4238,15 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n+(define_expand \"builtin_setjmp_receiver\"\n+  [(label_ref (match_operand 0 \"\" \"\"))]\n+  \"flag_pic\"\n+  \"\n+{\n+  arm_finalize_pic (0);\n+  DONE;\n+}\")\n+\n ;; If copying one reg to another we can set the condition codes according to\n ;; its value.  Such a move is common after a return from subroutine and the\n ;; result is being tested against zero."}]}