{"sha": "060619250dc83e38c9129babac5c243914056da5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwNjE5MjUwZGM4M2UzOGM5MTI5YmFiYWM1YzI0MzkxNDA1NmRhNQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2018-01-17T01:06:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-17T01:06:34Z"}, "message": "config.gcc (powerpc*-linux*-*): Add support for 64-bit little endian Linux systems to optionally enable...\n\n2018-01-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config.gcc (powerpc*-linux*-*): Add support for 64-bit little\n\tendian Linux systems to optionally enable multilibs for selecting\n\tthe long double type if the user configured an explicit type.\n\t* config/rs6000/rs6000.h (TARGET_IEEEQUAD_MULTILIB): Indicate we\n\thave no long double multilibs if not defined.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Do not\n\twarn if the user used -mabi={ieee,ibm}longdouble and we built\n\tmultilibs for long double.\n\t* config/rs6000/linux64.h (MULTILIB_DEFAULTS_IEEE): Define as the\n\tappropriate multilib option.\n\t(MULTILIB_DEFAULTS): Add MULTILIB_DEFAULTS_IEEE to the default\n\tmultilib options.\n\t* config/rs6000/t-ldouble-linux64le-ibm: New configuration files\n\tfor building long double multilibs.\n\t* config/rs6000/t-ldouble-linux64le-ieee: Likewise.\n\nFrom-SVN: r256775", "tree": {"sha": "a7fac0e420bf40327d8b320831bc1bd34e63f6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7fac0e420bf40327d8b320831bc1bd34e63f6a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/060619250dc83e38c9129babac5c243914056da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060619250dc83e38c9129babac5c243914056da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060619250dc83e38c9129babac5c243914056da5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060619250dc83e38c9129babac5c243914056da5/comments", "author": null, "committer": null, "parents": [{"sha": "dbc4d77ca43852c4edf1846e8b6319b6e68e2b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc4d77ca43852c4edf1846e8b6319b6e68e2b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc4d77ca43852c4edf1846e8b6319b6e68e2b42"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "9034ebec2d4b0e503f3a32097d98b7677699e73c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -1,3 +1,21 @@\n+2018-01-16  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config.gcc (powerpc*-linux*-*): Add support for 64-bit little\n+\tendian Linux systems to optionally enable multilibs for selecting\n+\tthe long double type if the user configured an explicit type.\n+\t* config/rs6000/rs6000.h (TARGET_IEEEQUAD_MULTILIB): Indicate we\n+\thave no long double multilibs if not defined.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Do not\n+\twarn if the user used -mabi={ieee,ibm}longdouble and we built\n+\tmultilibs for long double.\n+\t* config/rs6000/linux64.h (MULTILIB_DEFAULTS_IEEE): Define as the\n+\tappropriate multilib option.\n+\t(MULTILIB_DEFAULTS): Add MULTILIB_DEFAULTS_IEEE to the default\n+\tmultilib options.\n+\t* config/rs6000/t-ldouble-linux64le-ibm: New configuration files\n+\tfor building long double multilibs.\n+\t* config/rs6000/t-ldouble-linux64le-ieee: Likewise.\n+\n 2018-01-16  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config.gcc (hppa*-*-linux*): Change callee copies ABI to caller"}, {"sha": "ec6822b9db1142812cd2704586875ddf96ef1a6d", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -4407,6 +4407,16 @@ case \"${target}\" in\n \t\telif test x$with_long_double_format = xibm; then\n \t\t    tm_defines=\"${tm_defines} TARGET_IEEEQUAD_DEFAULT=0\"\n \t\tfi\n+\n+\t\tcase \"${target}:${enable_multilib}:${with_long_double_format}\" in\n+\t\t    powerpc64le*:yes:ieee | powerpc64le*:yes:ibm)\n+\t\t\ttm_defines=\"${tm_defines} TARGET_IEEEQUAD_MULTILIB=1\"\n+\t\t\ttmake_file=\"${tmake_file} rs6000/t-ldouble-linux64le-${with_long_double_format}\"\n+\t\t\t;;\n+\t\t    *)\n+\t\t\t:\n+\t\t\t;;\n+\t\tesac\n \t\t;;\n \n \ts390*-*-*)"}, {"sha": "90fe65662552e31b8b116d60230c160d78cc25d6", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -245,11 +245,18 @@ extern int dot_symbols;\n #define DYNAMIC_LINKER_PREFIX\t\"\"\n #endif\n \n-#undef\tMULTILIB_DEFAULTS\n+#if TARGET_IEEEQUAD_DEFAULT\n+#define MULTILIB_DEFAULTS_IEEE \"mabi=ieeelongdouble\"\n+\n+#else  /* TARGET_IEEEQUAD_DEFAULT.  */\n+#define MULTILIB_DEFAULTS_IEEE \"mabi=ibmlongdouble\"\n+#endif /* TARGET_IEEEQUAD_DEFAULT.  */\n+\n+#undef MULTILIB_DEFAULTS\n #if DEFAULT_ARCH64_P\n-#define MULTILIB_DEFAULTS { \"m64\" }\n+#define MULTILIB_DEFAULTS { \"m64\", MULTILIB_DEFAULTS_IEEE }\n #else\n-#define MULTILIB_DEFAULTS { \"m32\" }\n+#define MULTILIB_DEFAULTS { \"m32\", MULTILIB_DEFAULTS_IEEE }\n #endif\n \n /* Split stack is only supported for 64 bit, and requires glibc >= 2.18.  */"}, {"sha": "dbd3beebb51c1c6437eee7180d0f70ae6cae0cf5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -4587,11 +4587,15 @@ rs6000_option_override_internal (bool global_init_p)\n      systems will also set long double to be IEEE 128-bit.  AIX and Darwin\n      explicitly redefine TARGET_IEEEQUAD and TARGET_IEEEQUAD_DEFAULT to 0, so\n      those systems will not pick up this default.  Warn if the user changes the\n-     default unless -Wno-psabi.  */\n+     default unless either the user used the -Wno-psabi option, or the compiler\n+     was built to enable multilibs to switch between the two long double\n+     types.  */\n   if (!global_options_set.x_rs6000_ieeequad)\n     rs6000_ieeequad = TARGET_IEEEQUAD_DEFAULT;\n \n-  else if (rs6000_ieeequad != TARGET_IEEEQUAD_DEFAULT && TARGET_LONG_DOUBLE_128)\n+  else if (!TARGET_IEEEQUAD_MULTILIB\n+\t   && rs6000_ieeequad != TARGET_IEEEQUAD_DEFAULT\n+\t   && TARGET_LONG_DOUBLE_128)\n     {\n       static bool warned_change_long_double;\n       if (!warned_change_long_double)"}, {"sha": "a218366f658a615469e4a956b2a07187131a319f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -564,6 +564,12 @@ extern int rs6000_vector_align[];\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n #define TARGET_LDBRX (TARGET_POPCNTD || rs6000_cpu == PROCESSOR_CELL)\n \n+/* Define as 1 if we support multilibs for switching long double between IEEE\n+   128-bit floating point and IBM extended double.  */\n+#ifndef TARGET_IEEEQUAD_MULTILIB\n+#define TARGET_IEEEQUAD_MULTILIB 0\n+#endif\n+\n /* ISA 2.01 allowed FCFID to be done in 32-bit, previously it was 64-bit only.\n    Enable 32-bit fcfid's on any of the switches for newer ISA machines or\n    XILINX.  */"}, {"sha": "4b209e8b907240b6eafe7b8cff13af72174962ab", "filename": "gcc/config/rs6000/t-ldouble-linux64le-ibm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ibm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ibm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ibm?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -0,0 +1,26 @@\n+# Long double multilib libraries for PowerPC 64-bit little endian systems using\n+# IBM extended double as the long double type.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+MULTILIB_OPTIONS\t+= mabi=ieeelongdouble/mabi=ibmlongdouble\n+MULTILIB_DIRNAMES\t+= ieee128 ibm128\n+MULTILIB_OSDIRNAMES\t+= mabi.ibmlongdouble=../lib64$(call if_multiarch,:powerpc64-linux-gnu) \\\n+\t\t\t   mabi.ieeelongdouble=../lib64/ieee128$(call if_multiarch,:powerpc64-linux-gnu) \\\n+\t\t\t   ../lib64$(call if_multiarch,:powerpc64-linux-gnu)"}, {"sha": "7d47953c9083bba206fa9e47b18b7c4af7fbf0d7", "filename": "gcc/config/rs6000/t-ldouble-linux64le-ieee", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ieee", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060619250dc83e38c9129babac5c243914056da5/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ieee", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ldouble-linux64le-ieee?ref=060619250dc83e38c9129babac5c243914056da5", "patch": "@@ -0,0 +1,26 @@\n+# Long double multilib libraries for PowerPC 64-bit little endian systems using\n+# IEEE 128-bit floating point as the long double type.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+MULTILIB_OPTIONS\t+= mabi=ieeelongdouble/mabi=ibmlongdouble\n+MULTILIB_DIRNAMES\t+= ieee128 ibm128\n+MULTILIB_OSDIRNAMES\t+= mabi.ibmlongdouble=../lib64/ibm128$(call if_multiarch,:powerpc64-linux-gnu) \\\n+\t\t\t   mabi.ieeelongdouble=../lib64$(call if_multiarch,:powerpc64-linux-gnu) \\\n+\t\t\t   ../lib64$(call if_multiarch,:powerpc64-linux-gnu)"}]}