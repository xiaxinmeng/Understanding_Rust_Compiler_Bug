{"sha": "47867b4f6556aab84701452eb0ff5a9bd2f46522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4NjdiNGY2NTU2YWFiODQ3MDE0NTJlYjBmZjVhOWJkMmY0NjUyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-01-06T20:44:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-01-06T20:44:39Z"}, "message": "re PR c++/64496 (ICE with NSDMI and lambda)\n\n\tPR c++/64496\n\t* semantics.c (process_outer_var_ref): Diagnose lambda in local\n\tclass NSDMI.\n\nFrom-SVN: r219266", "tree": {"sha": "cd08f6d985da9274dba1a30941e244ec5d1683b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd08f6d985da9274dba1a30941e244ec5d1683b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47867b4f6556aab84701452eb0ff5a9bd2f46522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47867b4f6556aab84701452eb0ff5a9bd2f46522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47867b4f6556aab84701452eb0ff5a9bd2f46522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47867b4f6556aab84701452eb0ff5a9bd2f46522/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "864822bd8880db5e75398a2e409dccb7545418ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864822bd8880db5e75398a2e409dccb7545418ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864822bd8880db5e75398a2e409dccb7545418ef"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "67fd50110a2d0d1bd382d9de4aad2c01e55dc663", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47867b4f6556aab84701452eb0ff5a9bd2f46522", "patch": "@@ -1,3 +1,9 @@\n+2015-01-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64496\n+\t* semantics.c (process_outer_var_ref): Diagnose lambda in local\n+\tclass NSDMI.\n+\n 2015-01-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/64489"}, {"sha": "551bad132e91b348f38ed56e6c2879d249f70a8f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=47867b4f6556aab84701452eb0ff5a9bd2f46522", "patch": "@@ -3141,8 +3141,12 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n     while (context != containing_function\n \t   && LAMBDA_FUNCTION_P (containing_function))\n       {\n-\tlambda_expr = CLASSTYPE_LAMBDA_EXPR\n-\t  (DECL_CONTEXT (containing_function));\n+\ttree closure = DECL_CONTEXT (containing_function);\n+\tlambda_expr = CLASSTYPE_LAMBDA_EXPR (closure);\n+\n+\tif (TYPE_CLASS_SCOPE_P (closure))\n+\t  /* A lambda in an NSDMI (c++/64496).  */\n+\t  break;\n \n \tif (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr)\n \t    == CPLD_NONE)\n@@ -3172,7 +3176,19 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n   else if (lambda_expr)\n     {\n       if (complain & tf_error)\n-\terror (\"%qD is not captured\", decl);\n+\t{\n+\t  error (\"%qD is not captured\", decl);\n+\t  tree closure = LAMBDA_EXPR_CLOSURE (lambda_expr);\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr)\n+\t      == CPLD_NONE)\n+\t    inform (location_of (closure),\n+\t\t    \"the lambda has no capture-default\");\n+\t  else if (TYPE_CLASS_SCOPE_P (closure))\n+\t    inform (0, \"lambda in local class %q+T cannot \"\n+\t\t    \"capture variables from the enclosing context\",\n+\t\t    TYPE_CONTEXT (closure));\n+\t  inform (input_location, \"%q+#D declared here\", decl);\n+\t}\n       return error_mark_node;\n     }\n   else"}, {"sha": "30595ef6c10eb0d74a0bae6acb8952db0db0c193", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nsdmi7.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47867b4f6556aab84701452eb0ff5a9bd2f46522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi7.C?ref=47867b4f6556aab84701452eb0ff5a9bd2f46522", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/64496\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> class B;\n+template <typename W, typename... X>\n+struct B<W(X...)> { template <typename F> B(F); };\n+template <typename W, typename... X>\n+template <typename F>\n+B<W(X...)>::B(F) {}\n+\n+int\n+main()\n+{\n+  int a;\n+  struct A\t\t\t// { dg-message \"lambda in local class\" }\n+  {\n+    B<void()> l = [=] {\n+      a;\t\t\t// { dg-error \"not captured\" }\n+    };\n+  };\n+  [] {\t\t\t\t// { dg-message \"capture-default\" }\n+    a;\t\t\t\t// { dg-error \"not captured\" }\n+  };\n+  A t;\n+}"}]}