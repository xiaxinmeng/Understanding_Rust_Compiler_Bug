{"sha": "173f556ccc41ea93cf66896d0c7778241467407f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczZjU1NmNjYzQxZWE5M2NmNjY4OTZkMGM3Nzc4MjQxNDY3NDA3Zg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-03-07T08:58:26Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-03-07T08:58:26Z"}, "message": "decl.c (init_decl_processing): Added new class fields `depth', `ancestors', and `idt' to class_type_node.\n\n2000-03-06  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* decl.c (init_decl_processing): Added new class fields `depth',\n\t`ancestors', and `idt' to class_type_node. Use\n\t_Jv_LookupInterfaceMethodIdx for soft_lookupinterfacemthod_node.\n\t* class.c (make_class_data): Push initial values for new fields.\n\t* java-tree.h: Updated prototype for `build_invokeinterface'.\n\t* expr.c (build_invokeinterface): Changed parameters to accept\n\t`method' tree. Calculate index of `method' in its declaring\n\tinterface. Build call to _Jv_LookupInterfaceMethodIdx.\n\t(expand_invoke): Call `build_invokeinterface' with new parameters.\n\t* parse.y (patch_invoke): Call `build_invokeinterface' with new\n\tparameters.\n\n(This is Bryce McKinlay's implementation of the interfaces\n constant-time dispatch and type checking techniques designed by Per\n Bothner.)\n\nFrom-SVN: r32381", "tree": {"sha": "7f5247f181780723c8e8790acc8c5afc9d20e754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5247f181780723c8e8790acc8c5afc9d20e754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173f556ccc41ea93cf66896d0c7778241467407f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f556ccc41ea93cf66896d0c7778241467407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173f556ccc41ea93cf66896d0c7778241467407f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f556ccc41ea93cf66896d0c7778241467407f/comments", "author": null, "committer": null, "parents": [{"sha": "f2d2acce60eb9ec6ba79c3619a949c84d130b60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d2acce60eb9ec6ba79c3619a949c84d130b60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d2acce60eb9ec6ba79c3619a949c84d130b60e"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "9da0e2c12a9f176b532e5bfe150f12e552cba559", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -1,3 +1,17 @@\n+2000-03-06  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* decl.c (init_decl_processing): Added new class fields `depth',\n+\t`ancestors', and `idt' to class_type_node. Use\n+\t_Jv_LookupInterfaceMethodIdx for soft_lookupinterfacemthod_node.\n+\t* class.c (make_class_data): Push initial values for new fields.\n+\t* java-tree.h: Updated prototype for `build_invokeinterface'.\n+\t* expr.c (build_invokeinterface): Changed parameters to accept\n+\t`method' tree. Calculate index of `method' in its declaring\n+\tinterface. Build call to _Jv_LookupInterfaceMethodIdx.\n+\t(expand_invoke): Call `build_invokeinterface' with new parameters.\n+\t* parse.y (patch_invoke): Call `build_invokeinterface' with new\n+\tparameters.\n+\n 2000-03-06  Bryce McKinlay <bryce@albatross.co.nz>\n \n \t* typeck.c (lookup_do): Search superinterfaces first"}, {"sha": "b9f56f5984b7b51653d42e94b436ad9381274e17", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -1380,6 +1380,9 @@ make_class_data (type)\n   PUSH_FIELD_VALUE (cons, \"state\", integer_zero_node);\n \n   PUSH_FIELD_VALUE (cons, \"thread\", null_pointer_node);\n+  PUSH_FIELD_VALUE (cons, \"depth\", integer_zero_node);\n+  PUSH_FIELD_VALUE (cons, \"ancestors\", null_pointer_node);\n+  PUSH_FIELD_VALUE (cons, \"idt\", null_pointer_node);\n \n   FINISH_RECORD_CONSTRUCTOR (cons);\n "}, {"sha": "17ec1359064c177864577da6280cc72139bc8e81", "filename": "gcc/java/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -661,6 +661,9 @@ init_decl_processing ()\n   PUSH_FIELD (class_type_node, field, \"interface_count\", short_type_node);\n   PUSH_FIELD (class_type_node, field, \"state\", byte_type_node);\n   PUSH_FIELD (class_type_node, field, \"thread\", ptr_type_node);\n+  PUSH_FIELD (class_type_node, field, \"depth\", short_type_node);\n+  PUSH_FIELD (class_type_node, field, \"ancestors\", ptr_type_node);\n+  PUSH_FIELD (class_type_node, field, \"idt\", ptr_type_node);  \n   for (t = TYPE_FIELDS (class_type_node);  t != NULL_TREE;  t = TREE_CHAIN (t))\n     FIELD_PRIVATE (t) = 1;\n   push_super_field (class_type_node, object_type_node);\n@@ -815,9 +818,9 @@ init_decl_processing ()\n \t\t\t0, NOT_BUILT_IN, NULL_PTR);\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)));\n+\t\t\t    tree_cons (NULL_TREE, int_type_node, endlink)));\n   soft_lookupinterfacemethod_node \n-    = builtin_function (\"_Jv_LookupInterfaceMethod\",\n+    = builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n \t\t\t0, NOT_BUILT_IN, NULL_PTR);\n   t = tree_cons (NULL_TREE, double_type_node,"}, {"sha": "832e662b3e9aced94262bca657ebf8cc30b866c4", "filename": "gcc/java/expr.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -1648,11 +1648,15 @@ build_invokevirtual (dtable, method)\n }\n \n tree\n-build_invokeinterface (dtable, method_name, method_signature)\n-     tree dtable, method_name, method_signature;\n+build_invokeinterface (dtable, method)\n+     tree dtable, method;\n {\n   static tree class_ident = NULL_TREE;\n   tree lookup_arg;\n+  tree interface;\n+  tree idx;\n+  tree meth;\n+  int i;\n \n   /* We expand invokeinterface here.  _Jv_LookupInterfaceMethod() will\n      ensure that the selected method exists, is public and not\n@@ -1664,14 +1668,25 @@ build_invokeinterface (dtable, method_name, method_signature)\n   dtable = build1 (INDIRECT_REF, dtable_type, dtable);\n   dtable = build (COMPONENT_REF, class_ptr_type, dtable,\n \t\t  lookup_field (&dtable_type, class_ident));\n-  lookup_arg = build_tree_list (NULL_TREE, \n-\t\t\t\t(build_utf8_ref \n-\t\t\t\t (unmangle_classname\n-\t\t\t\t  (IDENTIFIER_POINTER(method_signature),\n-\t\t\t\t   IDENTIFIER_LENGTH(method_signature)))));\n+\n+  interface = DECL_CONTEXT (method);\n+  \n+  i = 1;\n+  for (meth = TYPE_METHODS (interface); ; meth = TREE_CHAIN (meth), i++)\n+    {\n+      if (meth == method)\n+        {\n+\t  idx = build_int_2 (i, 0);\n+\t  break;\n+\t}\n+      if (meth == NULL_TREE)\n+        fatal (\"internal error in build_invokeinterface\");\n+    }\n+\n   lookup_arg = tree_cons (NULL_TREE, dtable,\n-\t\t\t  tree_cons (NULL_TREE, build_utf8_ref (method_name),\n-\t\t\t\t     lookup_arg));\n+                          tree_cons (NULL_TREE, build_class_ref (interface),\n+\t\t\t             build_tree_list (NULL_TREE, idx)));\n+\t\t\t\t     \t\t\t  \n   return build (CALL_EXPR, ptr_type_node, \n \t\tbuild_address_of (soft_lookupinterfacemethod_node),\n \t\tlookup_arg, NULL_TREE);\n@@ -1770,7 +1785,7 @@ expand_invoke (opcode, method_ref_index, nargs)\n       if (opcode == OPCODE_invokevirtual)\n \tfunc = build_invokevirtual (dtable, method);\n       else\n-\tfunc = build_invokeinterface (dtable, method_name, method_signature);\n+\tfunc = build_invokeinterface (dtable, method);\n     }\n   func = build1 (NOP_EXPR, build_pointer_type (method_type), func);\n   call = build (CALL_EXPR, TREE_TYPE (method_type), func, arg_list, NULL_TREE);"}, {"sha": "e50bab0b3195d290e3897cadb95c6ea2c6194ad7", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -564,7 +564,7 @@ extern tree lookup_name PARAMS ((tree));\n extern tree build_known_method_ref PARAMS ((tree, tree, tree, tree, tree));\n extern tree build_class_init PARAMS ((tree, tree));\n extern tree build_invokevirtual PARAMS ((tree, tree));\n-extern tree build_invokeinterface PARAMS ((tree, tree, tree));\n+extern tree build_invokeinterface PARAMS ((tree, tree));\n extern tree invoke_build_dtable PARAMS ((int, tree));\n extern tree build_field_ref PARAMS ((tree, tree, tree));\n extern void pushdecl_force_head PARAMS ((tree));"}, {"sha": "d1aa0610e2aa06b54d06bcfcfcf562c7483cb37e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f556ccc41ea93cf66896d0c7778241467407f/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=173f556ccc41ea93cf66896d0c7778241467407f", "patch": "@@ -7524,7 +7524,7 @@ patch_invoke (patch, method, args)\n \n \tcase INVOKE_INTERFACE:\n \t  dtable = invoke_build_dtable (1, args);\n-\t  func = build_invokeinterface (dtable, DECL_NAME (method), signature);\n+\t  func = build_invokeinterface (dtable, method);\n \t  break;\n \n \tdefault:"}]}