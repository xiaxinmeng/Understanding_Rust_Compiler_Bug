{"sha": "8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2NDlmM2YxMmNiMTkwM2FjOWE2NjAyOGQ2ZTdjMzY3M2E0MmU2Zg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-09-09T12:43:32Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-09-09T12:43:32Z"}, "message": "re PR target/26778 (GCC4 moves the result of a conditional block through inadequate registers)\n\ngcc:\n2006-09-09  Paolo Bonzini  <bonzini@gnu.org>\n\t    Dale Johannesen  <dalej@apple.com>\n\n\tPR target/26778\n\t* regclass.c (struct reg_pref): Update documentation.\n\t(regclass): Set prefclass to NO_REGS if memory is the best option.\n\t(record_reg_classes): Cope with a prefclass set to NO_REGS.\n\ngcc/testsuite:\n2006-09-09  Eric Christopher  <echristo@apple.com>\n\n\tPR target/26778\n\t* gcc.target/i386/pr26778.c: New testcase.\n\n\nCo-Authored-By: Dale Johannesen <dalej@apple.com>\n\nFrom-SVN: r116798", "tree": {"sha": "ffbee5ef420b0296e0de43fb40ba819309ee225d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffbee5ef420b0296e0de43fb40ba819309ee225d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "827d0991fde61140c0a5e9770cff4524a7cda19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827d0991fde61140c0a5e9770cff4524a7cda19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827d0991fde61140c0a5e9770cff4524a7cda19c"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "91737725c416f5887a9883677f1e41f2a94fc274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "patch": "@@ -1,3 +1,11 @@\n+2006-09-09  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Dale Johannesen  <dalej@apple.com>\n+\n+\tPR target/26778\n+\t* regclass.c (struct reg_pref): Update documentation.\n+\t(regclass): Set prefclass to NO_REGS if memory is the best option.\n+\t(record_reg_classes): Cope with a prefclass set to NO_REGS.\n+\n 2006-09-08  Eric Christopher  <echristo@apple.com>\n \n \t* config.gcc (i?86-*-darwin): Add 64-bit HWI support."}, {"sha": "8a0bab19026da50a25824c5674eef9dce0382b10", "filename": "gcc/regclass.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "patch": "@@ -811,7 +811,8 @@ struct costs\n /* Structure used to record preferences of given pseudo.  */\n struct reg_pref\n {\n-  /* (enum reg_class) prefclass is the preferred class.  */\n+  /* (enum reg_class) prefclass is the preferred class.  May be\n+     NO_REGS if no class is better than memory.  */\n   char prefclass;\n \n   /* altclass is a register class that we should use for allocating\n@@ -1314,6 +1315,10 @@ regclass (rtx f, int nregs)\n \t\tbest = reg_class_subunion[(int) best][class];\n \t    }\n \n+\t  /* If no register class is better than memory, use memory. */\n+\t  if (p->mem_cost < best_cost)\n+\t    best = NO_REGS;\n+\n \t  /* Record the alternate register class; i.e., a class for which\n \t     every register in it is better than using memory.  If adding a\n \t     class would make a smaller class (i.e., no union of just those\n@@ -1524,7 +1529,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t     to what we would add if this register were not in the\n \t\t     appropriate class.  */\n \n-\t\t  if (reg_pref)\n+\t\t  if (reg_pref && reg_pref[REGNO (op)].prefclass != NO_REGS)\n \t\t    alt_cost\n \t\t      += (may_move_in_cost[mode]\n \t\t\t  [(unsigned char) reg_pref[REGNO (op)].prefclass]\n@@ -1750,7 +1755,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t     to what we would add if this register were not in the\n \t\t     appropriate class.  */\n \n-\t\t  if (reg_pref)\n+\t\t  if (reg_pref && reg_pref[REGNO (op)].prefclass != NO_REGS)\n \t\t    alt_cost\n \t\t      += (may_move_in_cost[mode]\n \t\t\t  [(unsigned char) reg_pref[REGNO (op)].prefclass]\n@@ -1836,7 +1841,8 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t  int class;\n \t  unsigned int nr;\n \n-\t  if (regno >= FIRST_PSEUDO_REGISTER && reg_pref != 0)\n+\t  if (regno >= FIRST_PSEUDO_REGISTER && reg_pref != 0\n+\t      && reg_pref[regno].prefclass != NO_REGS)\n \t    {\n \t      enum reg_class pref = reg_pref[regno].prefclass;\n "}, {"sha": "cd0f6f7e59947e18b68c301891ba2023f6118ccd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "patch": "@@ -1,3 +1,8 @@\n+2006-09-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR testsuite/26778\n+\t* gcc.target/i386/pr26778.c: New testcase.\n+\n 2006-09-08  Eric Christopher  <echristo@apple.com>\n \n \t* gcc.target/i386/20060512-3.c: Run test on ilp32 only.\n@@ -526,6 +531,10 @@\n \tPR c++/28711\n \t* g++.dg/template/ctor8.C: New test.\n \n+2006-08-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/pr26570.c: Fix testcase.\n+\n 2006-08-17  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* PR c++/28573"}, {"sha": "8a49db5ccc1f303beff3ac8bf5ab76271f7c8ba8", "filename": "gcc/testsuite/gcc.target/i386/pr26778.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr26778.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b649f3f12cb1903ac9a66028d6e7c3673a42e6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr26778.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr26778.c?ref=8b649f3f12cb1903ac9a66028d6e7c3673a42e6f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target ilp32 } } */\n+/* { dg-options \"-O2 -march=pentium3\" } */\n+\n+typedef union {\n+  long long l;\n+  double d;\n+} db_number;\n+\n+double test(double x[3]) {\n+  double th = x[1] + x[2];\n+  if (x[2] != th - x[1]) {\n+    db_number thdb;\n+    thdb.d = th;\n+    thdb.l++;\n+    th = thdb.d;\n+  }\n+  return x[0] + th;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov.ps\" } } */"}]}