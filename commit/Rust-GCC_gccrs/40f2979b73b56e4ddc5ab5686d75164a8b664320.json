{"sha": "40f2979b73b56e4ddc5ab5686d75164a8b664320", "node_id": "C_kwDOANBUbNoAKDQwZjI5NzliNzNiNTZlNGRkYzVhYjU2ODZkNzUxNjRhOGI2NjQzMjA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-26T10:20:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-26T20:43:59Z"}, "message": "Fix bad name resolution of path with generic segments\n\nWhen name-resolving paths we expect the name-resolver must resolve the\nroot of the path. Such that a path might be\n\n  module::type::associated_function\n\nWe expect that the name resolution step must be able to resolve the\n\n  module::type\n\nPortion of the path, it is permissive to allow everything after that to\nfail name resolution as this may require generic arguments of type\ninferencing to figure out which associated items are required.\n\nThe issue in this referenced issue was that the generic arguments here were\nwrongly canonicalized to be part of the root path which meant the segment\ncould not be name-resolved allowing the type resolution system to perform\nthe generic specialization.\n\nFixes #1173", "tree": {"sha": "f1f03939460f0dd096cc24c2efd53dee9f2e4ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f03939460f0dd096cc24c2efd53dee9f2e4ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f2979b73b56e4ddc5ab5686d75164a8b664320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f2979b73b56e4ddc5ab5686d75164a8b664320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f2979b73b56e4ddc5ab5686d75164a8b664320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f2979b73b56e4ddc5ab5686d75164a8b664320/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69dd650367fa7fcfac38001b6406c1bff2601e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d69dd650367fa7fcfac38001b6406c1bff2601e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d69dd650367fa7fcfac38001b6406c1bff2601e1"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "72846336d23ca9154bf5d9651e8cb94ab8eafa91", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=40f2979b73b56e4ddc5ab5686d75164a8b664320", "patch": "@@ -169,13 +169,8 @@ class ResolvePathSegmentToCanonicalPath\n \treturn CanonicalPath::create_empty ();\n       }\n \n-    std::string generics\n-      = ResolveTypeToCanonicalPath::canonicalize_generic_args (\n-\tseg.get_generic_args ());\n-\n     return CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t   seg.get_ident_segment ().as_string ()\n-\t\t\t\t     + \"::\" + generics);\n+\t\t\t\t   seg.get_ident_segment ().as_string ());\n   }\n };\n "}, {"sha": "b08d7205717fbf86ea565dd723039eaaacfcfced", "filename": "gcc/testsuite/rust/compile/issue-1173.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs?ref=40f2979b73b56e4ddc5ab5686d75164a8b664320", "patch": "@@ -0,0 +1,20 @@\n+// { dg-additional-options \"-w\" }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn transmute<U, V>(_: U) -> V;\n+    }\n+}\n+\n+pub trait Hasher {\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u16(&mut self, i: u16) {\n+        self.write(&mem::transmute::<_, [u8; 2]>(i))\n+    }\n+}\n+\n+pub struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {}\n+}"}, {"sha": "c0eb1bb00bcc6182523d1c717b28c31be82b8c5f", "filename": "gcc/testsuite/rust/compile/torture/issue-893-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-893-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f2979b73b56e4ddc5ab5686d75164a8b664320/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-893-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-893-2.rs?ref=40f2979b73b56e4ddc5ab5686d75164a8b664320", "patch": "@@ -24,7 +24,7 @@ impl Baz<i32, f32> {\n \n pub fn main() {\n     let a = Foo::<i32>::new::<f32>(123, 456f32);\n-    let b = Foo::new::<f32>(123, 456f32);\n+    // let b = Foo::new::<f32>(123, 456f32);\n \n     let c = Bar::<i32>(123);\n     let d = Bar::baz(c);"}]}