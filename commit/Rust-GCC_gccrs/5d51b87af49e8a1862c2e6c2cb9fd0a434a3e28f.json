{"sha": "5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1MWI4N2FmNDllOGExODYyYzJlNmMyY2I5ZmQwYTQzNGEzZTI4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-18T22:02:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-18T22:02:19Z"}, "message": "pool_allocator.cc (_M_get_free_list, [...]): Mark throw ()\n\n\n\t* src/pool_allocator.cc (_M_get_free_list, _M_get_mutex): Mark throw ()\n\t* src/mt_allocator.cc (_M_reclaim_block, _M_reclaim_block,\n\t_M_destroy_thread_key): Mark throw ()\n\t* debug.cc (_M_get_mutex, _M_attach_single, _M_detach_single,\n\t_M_singular, _M_can_compare _M_get_mutex, _M_message,\n\t_M_get_max_length): Mark throw ().\n\t* include/debug/formatter.h (_M_message, _M_format_word,\n\t_M_get_max_length): Mark throw ().\n\t* include/debug/safe_base.h (_M_get_mutex, _M_attach_single,\n\t_M_detach_single): Mark throw ().\n\t(_M_singular, _M_can_compare, _M_get_mutex): Mark pure and throw ().\n\t* include/ext/pool_allocator.h (_M_get_free_list): Mark const and\n\tthrow ()\n\t(_M_get_mutex): Mark throw ().\n\t* include/ext/mt_allocator.h (_M_reclaim_block): Mark throw ();\n\t(_M_destroy_thread_key): Mark CONST and throw.\n\t* include/bits/stl_list.h (swap, transfer, reverse, hook, unhook): Mark\n\tthrow ().\n\nFrom-SVN: r146330", "tree": {"sha": "885f3095053fda74542e8236d86880dcd955c1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/885f3095053fda74542e8236d86880dcd955c1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/comments", "author": null, "committer": null, "parents": [{"sha": "50a681c4ee5933c5a561620c7df36716f39374bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a681c4ee5933c5a561620c7df36716f39374bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a681c4ee5933c5a561620c7df36716f39374bb"}], "stats": {"total": 90, "additions": 57, "deletions": 33}, "files": [{"sha": "8b0d0e03beaf2af3a161b0dee448e726624a7b2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -1,3 +1,24 @@\n+2009-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* src/pool_allocator.cc (_M_get_free_list, _M_get_mutex): Mark throw ()\n+\t* src/mt_allocator.cc (_M_reclaim_block, _M_reclaim_block,\n+\t_M_destroy_thread_key): Mark throw ()\n+\t* debug.cc (_M_get_mutex, _M_attach_single, _M_detach_single,\n+\t_M_singular, _M_can_compare _M_get_mutex, _M_message,\n+\t_M_get_max_length): Mark throw ().\n+\t* include/debug/formatter.h (_M_message, _M_format_word,\n+\t_M_get_max_length): Mark throw ().\n+\t* include/debug/safe_base.h (_M_get_mutex, _M_attach_single,\n+\t_M_detach_single): Mark throw ().\n+\t(_M_singular, _M_can_compare, _M_get_mutex): Mark pure and throw ().\n+\t* include/ext/pool_allocator.h (_M_get_free_list): Mark const and\n+\tthrow ()\n+\t(_M_get_mutex): Mark throw ().\n+\t* include/ext/mt_allocator.h (_M_reclaim_block): Mark throw ();\n+\t(_M_destroy_thread_key): Mark CONST and throw.\n+\t* include/bits/stl_list.h (swap, transfer, reverse, hook, unhook): Mark\n+\tthrow ().\n+\n 2009-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* src/condition_variable.cc (condition_variable,\n@@ -16,15 +37,18 @@\n \t* include/std/mutex (mutex): Mark throw ().\n \t* include/bits/stl_list.h (swap, transfer, reverse, hook, unhook): Mark\n \tthrow.\n-\t* include/bits/functional_hash.h (operator()  on size_t): Mark pure and throw ().\n+\t* include/bits/functional_hash.h (operator()  on size_t): Mark pure\n+\tand throw ().\n \t* include/bits/locale_facets.tcc (__verify_grouping): Mark pure.\n \t* include/bits/locale_classes.h (_S_initialize_once,\n \t_S_clone_c_locale): Mark throw ().\n \t(_S_get_c_name): Mark const and throw ().\n-\t(_M_id, _M_compare, _M_transform, _M_compare, _M_transform): Mark throw ().\n+\t(_M_id, _M_compare, _M_transform, _M_compare, _M_transform): Mark\n+\tthrow ().\n \t* include/bits/locale_facets.h (__convert_to_v explicit instances):\n \tMark throw ().\n-\t(_M_convert_to_wmask, _M_initialize_ctype, _S_format_float): Mark throw ().\n+\t(_M_convert_to_wmask, _M_initialize_ctype, _S_format_float): Mark\n+\tthrow ().\n \t* include/bits/ios_base.h (_M_dispose_callbacks, _M_init, imbue,\n \tios_base): Mark throw ()\n \t* include/bits/locale_facets_nonio.h (_M_put): Mark throw."}, {"sha": "6dffc6b786dac549e84d7b7320938c8ec6cb4616", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -346,7 +346,7 @@ namespace __gnu_debug\n     { _M_text = __text; return *this; }\n \n     const _Error_formatter&\n-    _M_message(_Debug_msg_id __id) const;\n+    _M_message(_Debug_msg_id __id) const throw ();\n \n     _GLIBCXX_NORETURN void\n     _M_error() const;\n@@ -359,7 +359,7 @@ namespace __gnu_debug\n \n     template<typename _Tp>\n       void\n-      _M_format_word(char*, int, const char*, _Tp) const;\n+      _M_format_word(char*, int, const char*, _Tp) const throw ();\n \n     void\n     _M_print_word(const char* __word) const;\n@@ -368,7 +368,7 @@ namespace __gnu_debug\n     _M_print_string(const char* __string) const;\n \n     void\n-    _M_get_max_length() const;\n+    _M_get_max_length() const throw ();\n \n     enum { __max_parameters = 9 };\n "}, {"sha": "9d44539b732fdebf82e3f904f564f76b3cf632ff", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -105,7 +105,7 @@ namespace __gnu_debug\n     ~_Safe_iterator_base() { this->_M_detach(); }\n \n     /** For use in _Safe_iterator. */\n-    __gnu_cxx::__mutex& _M_get_mutex();\n+    __gnu_cxx::__mutex& _M_get_mutex() throw ();\n \n   public:\n     /** Attaches this iterator to the given sequence, detaching it\n@@ -116,27 +116,27 @@ namespace __gnu_debug\n     void _M_attach(_Safe_sequence_base* __seq, bool __constant);\n \n     /** Likewise, but not thread-safe. */\n-    void _M_attach_single(_Safe_sequence_base* __seq, bool __constant);\n+    void _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ();\n \n     /** Detach the iterator for whatever sequence it is attached to,\n      *\tif any.\n     */\n     void _M_detach();\n \n     /** Likewise, but not thread-safe. */\n-    void _M_detach_single();\n+    void _M_detach_single() throw ();\n \n     /** Determines if we are attached to the given sequence. */\n     bool _M_attached_to(const _Safe_sequence_base* __seq) const\n     { return _M_sequence == __seq; }\n \n     /** Is this iterator singular? */\n-    bool _M_singular() const;\n+    _GLIBCXX_PURE bool _M_singular() const throw ();\n \n     /** Can we compare this iterator to the given iterator @p __x?\n \tReturns true if both iterators are nonsingular and reference\n \tthe same sequence. */\n-    bool _M_can_compare(const _Safe_iterator_base& __x) const;\n+    _GLIBCXX_PURE bool _M_can_compare(const _Safe_iterator_base& __x) const throw ();\n   };\n \n   /**\n@@ -207,7 +207,7 @@ namespace __gnu_debug\n     _M_swap(_Safe_sequence_base& __x);\n \n     /** For use in _Safe_sequence. */\n-    __gnu_cxx::__mutex& _M_get_mutex();\n+    __gnu_cxx::__mutex& _M_get_mutex() throw ();\n \n   public:\n     /** Invalidates all iterators. */"}, {"sha": "fc31fe8a737af1a60f783e5863f37ca1771fb144", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -221,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_reserve_block(size_t __bytes, const size_t __thread_id);\n     \n       void\n-      _M_reclaim_block(char* __p, size_t __bytes);\n+      _M_reclaim_block(char* __p, size_t __bytes) throw ();\n     \n       size_t \n       _M_get_thread_id() { return 0; }\n@@ -332,7 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_reserve_block(size_t __bytes, const size_t __thread_id);\n     \n       void\n-      _M_reclaim_block(char* __p, size_t __bytes);\n+      _M_reclaim_block(char* __p, size_t __bytes) throw ();\n     \n       const _Bin_record&\n       _M_get_bin(size_t __which)\n@@ -351,8 +351,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n \n       // XXX GLIBCXX_ABI Deprecated\n-      void \n-      _M_destroy_thread_key(void*);\n+      _GLIBCXX_CONST void \n+      _M_destroy_thread_key(void*) throw ();\n \n       size_t \n       _M_get_thread_id();"}, {"sha": "d7077b1986b69fbdab7c7ad783b91527d8961a8d", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -96,11 +96,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_round_up(size_t __bytes)\n       { return ((__bytes + (size_t)_S_align - 1) & ~((size_t)_S_align - 1)); }\n       \n-      _Obj* volatile*\n-      _M_get_free_list(size_t __bytes);\n+      _GLIBCXX_CONST _Obj* volatile*\n+      _M_get_free_list(size_t __bytes) throw ();\n     \n       __mutex&\n-      _M_get_mutex();\n+      _M_get_mutex() throw ();\n \n       // Returns an object of size __n, and optionally adds to size __n\n       // free list."}, {"sha": "6ce2e101f252f4d7283231b33dd121e1d8fcbd24", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -185,7 +185,7 @@ namespace __gnu_debug\n \n   __gnu_cxx::__mutex&\n   _Safe_sequence_base::\n-  _M_get_mutex()\n+  _M_get_mutex() throw ()\n   { return get_safe_base_mutex(); }\n \n   void\n@@ -198,7 +198,7 @@ namespace __gnu_debug\n   \n   void\n   _Safe_iterator_base::\n-  _M_attach_single(_Safe_sequence_base* __seq, bool __constant)\n+  _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ()\n   {\n     _M_detach_single();\n     \n@@ -235,7 +235,7 @@ namespace __gnu_debug\n \n   void\n   _Safe_iterator_base::\n-  _M_detach_single()\n+  _M_detach_single() throw ()\n   {\n     if (_M_sequence)\n       {\n@@ -259,20 +259,20 @@ namespace __gnu_debug\n \n   bool\n   _Safe_iterator_base::\n-  _M_singular() const\n+  _M_singular() const throw ()\n   { return !_M_sequence || _M_version != _M_sequence->_M_version; }\n     \n   bool\n   _Safe_iterator_base::\n-  _M_can_compare(const _Safe_iterator_base& __x) const\n+  _M_can_compare(const _Safe_iterator_base& __x) const throw ()\n   {\n     return (!_M_singular() \n \t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n   }\n \n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::\n-  _M_get_mutex()\n+  _M_get_mutex() throw ()\n   { return get_safe_base_mutex(); }\n \n   void\n@@ -471,7 +471,7 @@ namespace __gnu_debug\n   }\n \n   const _Error_formatter&\n-  _Error_formatter::_M_message(_Debug_msg_id __id) const\n+  _Error_formatter::_M_message(_Debug_msg_id __id) const throw ()\n   { return this->_M_message(_S_debug_messages[__id]); }\n   \n   void\n@@ -531,7 +531,7 @@ namespace __gnu_debug\n     void\n     _Error_formatter::_M_format_word(char* __buf, \n \t\t\t\t     int __n __attribute__ ((__unused__)), \n-\t\t\t\t     const char* __fmt, _Tp __s) const\n+\t\t\t\t     const char* __fmt, _Tp __s) const throw ()\n     {\n #ifdef _GLIBCXX_USE_C99\n       std::snprintf(__buf, __n, __fmt, __s);\n@@ -674,7 +674,7 @@ namespace __gnu_debug\n   }\n \n   void\n-  _Error_formatter::_M_get_max_length() const\n+  _Error_formatter::_M_get_max_length() const throw ()\n   {\n     const char* __nptr = std::getenv(\"GLIBCXX_DEBUG_MESSAGE_LENGTH\");\n     if (__nptr)"}, {"sha": "9c3af0e60d5c9258858429c304acf952a4027c4f", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   }\n \n   void\n-  __pool<false>::_M_reclaim_block(char* __p, size_t __bytes)\n+  __pool<false>::_M_reclaim_block(char* __p, size_t __bytes) throw ()\n   {\n     // Round up to power of 2 and figure out which bin to use.\n     const size_t __which = _M_binmap[__bytes];\n@@ -256,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   }\n \n   void\n-  __pool<true>::_M_reclaim_block(char* __p, size_t __bytes)\n+  __pool<true>::_M_reclaim_block(char* __p, size_t __bytes) throw ()\n   {\n     // Round up to power of 2 and figure out which bin to use.\n     const size_t __which = _M_binmap[__bytes];\n@@ -649,7 +649,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // XXX GLIBCXX_ABI Deprecated\n   void \n-  __pool<true>::_M_destroy_thread_key(void*) { }\n+  __pool<true>::_M_destroy_thread_key(void*) throw () { }\n \n   // XXX GLIBCXX_ABI Deprecated\n   void"}, {"sha": "e0da5e738842aa1506975d198b3e7a41bdcf26a4", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=5d51b87af49e8a1862c2e6c2cb9fd0a434a3e28f", "patch": "@@ -44,14 +44,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // Definitions for __pool_alloc_base.\n   __pool_alloc_base::_Obj* volatile*\n-  __pool_alloc_base::_M_get_free_list(size_t __bytes)\n+  __pool_alloc_base::_M_get_free_list(size_t __bytes) throw ()\n   { \n     size_t __i = ((__bytes + (size_t)_S_align - 1) / (size_t)_S_align - 1);\n     return _S_free_list + __i;\n   }\n \n   __mutex&\n-  __pool_alloc_base::_M_get_mutex()\n+  __pool_alloc_base::_M_get_mutex() throw ()\n   { return get_palloc_mutex(); }\n \n   // Allocate memory in large chunks in order to avoid fragmenting the"}]}