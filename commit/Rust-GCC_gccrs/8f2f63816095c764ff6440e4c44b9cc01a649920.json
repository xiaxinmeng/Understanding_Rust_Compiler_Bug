{"sha": "8f2f63816095c764ff6440e4c44b9cc01a649920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyZjYzODE2MDk1Yzc2NGZmNjQ0MGU0YzQ0YjljYzAxYTY0OTkyMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2017-03-10T21:17:13Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2017-03-10T21:17:13Z"}, "message": "re PR rtl-optimization/78911 (Infinite loop at -O2/O3 optimization levels while trying to compile server.c from Wine-2.0-rc2)\n\n\tPR rtl-optimization/78911\n\t* lra-assigns.c (must_not_spill_p): New function.\n\t(spill_for): Use it.\n\n\tPR rtl-optimization/78911\n\t* gcc.target/i386/pr78911-1.c: New test.\n\t* gcc.target/i386/pr78911-2.c: New test.\n\nFrom-SVN: r246059", "tree": {"sha": "4b90adb93c4355bfc4ed7065d057804ccc5e3e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b90adb93c4355bfc4ed7065d057804ccc5e3e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2f63816095c764ff6440e4c44b9cc01a649920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2f63816095c764ff6440e4c44b9cc01a649920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2f63816095c764ff6440e4c44b9cc01a649920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2f63816095c764ff6440e4c44b9cc01a649920/comments", "author": null, "committer": null, "parents": [{"sha": "c7aee4a15c4b993b063a8a94d1b6e2825130ea72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7aee4a15c4b993b063a8a94d1b6e2825130ea72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7aee4a15c4b993b063a8a94d1b6e2825130ea72"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "82fdef561662a123d3bb29f61642056d509e5b83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2f63816095c764ff6440e4c44b9cc01a649920", "patch": "@@ -1,3 +1,9 @@\n+2017-03-10  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/78911\n+\t* lra-assigns.c (must_not_spill_p): New function.\n+\t(spill_for): Use it.\n+\n 2017-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79981"}, {"sha": "226601bf2e61cc1700e358adc348bce8ab37d97b", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=8f2f63816095c764ff6440e4c44b9cc01a649920", "patch": "@@ -889,6 +889,30 @@ assign_temporarily (int regno, int hard_regno)\n   live_pseudos_reg_renumber[regno] = hard_regno;\n }\n \n+/* Return true iff there is a reason why pseudo SPILL_REGNO should not\n+   be spilled.  */\n+static bool\n+must_not_spill_p (unsigned spill_regno)\n+{\n+  if ((pic_offset_table_rtx != NULL\n+       && spill_regno == REGNO (pic_offset_table_rtx))\n+      || ((int) spill_regno >= lra_constraint_new_regno_start\n+\t  && ! bitmap_bit_p (&lra_inheritance_pseudos, spill_regno)\n+\t  && ! bitmap_bit_p (&lra_split_regs, spill_regno)\n+\t  && ! bitmap_bit_p (&lra_subreg_reload_pseudos, spill_regno)\n+\t  && ! bitmap_bit_p (&lra_optional_reload_pseudos, spill_regno)))\n+    return true;\n+  /* A reload pseudo that requires a singleton register class should\n+     not be spilled.\n+     FIXME: this mitigates the issue on certain i386 patterns, but\n+     does not solve the general case where existing reloads fully\n+     cover a limited register class.  */\n+  if (!bitmap_bit_p (&non_reload_pseudos, spill_regno)\n+      && reg_class_size [reg_preferred_class (spill_regno)] == 1)\n+    return true;\n+  return false;\n+}\n+\n /* Array used for sorting reload pseudos for subsequent allocation\n    after spilling some pseudo.\t*/\n static int *sorted_reload_pseudos;\n@@ -960,13 +984,7 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n       /* Spill pseudos.\t */\n       static_p = false;\n       EXECUTE_IF_SET_IN_BITMAP (&spill_pseudos_bitmap, 0, spill_regno, bi)\n-\tif ((pic_offset_table_rtx != NULL\n-\t     && spill_regno == REGNO (pic_offset_table_rtx))\n-\t    || ((int) spill_regno >= lra_constraint_new_regno_start\n-\t\t&& ! bitmap_bit_p (&lra_inheritance_pseudos, spill_regno)\n-\t\t&& ! bitmap_bit_p (&lra_split_regs, spill_regno)\n-\t\t&& ! bitmap_bit_p (&lra_subreg_reload_pseudos, spill_regno)\n-\t\t&& ! bitmap_bit_p (&lra_optional_reload_pseudos, spill_regno)))\n+\tif (must_not_spill_p (spill_regno))\n \t  goto fail;\n \telse if (non_spilled_static_chain_regno_p (spill_regno))\n \t  static_p = true;"}, {"sha": "4453fbbae8b0f8387cc412085feac3566f970ede", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f2f63816095c764ff6440e4c44b9cc01a649920", "patch": "@@ -1,5 +1,11 @@\n+2017-03-10  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/78911\n+\t* gcc.target/i386/pr78911-1.c: New test.\n+\t* gcc.target/i386/pr78911-2.c: New test.\n+\n 2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n-    \n+\n \tPR target/79941\n \t* gcc.target/powerpc/fold-vec-mult-even_odd_misc.c: New test.\n \t* gcc.target/powerpc/fold-vec-mult-even_odd_char.c: New test."}, {"sha": "6ed086a69ea305c1b9270f96f1773e62eeb509b7", "filename": "gcc/testsuite/gcc.target/i386/pr78911-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-1.c?ref=8f2f63816095c764ff6440e4c44b9cc01a649920", "patch": "@@ -0,0 +1,22 @@\n+/* PR rtl-optimization/78911 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-strict-aliasing -fno-omit-frame-pointer\" } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+/* { dg-additional-options \"-march=pentium-m\" { target ia32 } } */\n+\n+int a, b, d, e;\n+long long *c;\n+\n+static int\n+foo (long long *x)\n+{\n+  return __sync_val_compare_and_swap (x, b, a);\n+}\n+\n+void\n+bar (void)\n+{\n+  if (!c)\n+    return;\n+  e = foo (&c[d]);\n+}"}, {"sha": "aef9eece85318040c531095411ccdc8fdf798ad1", "filename": "gcc/testsuite/gcc.target/i386/pr78911-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2f63816095c764ff6440e4c44b9cc01a649920/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78911-2.c?ref=8f2f63816095c764ff6440e4c44b9cc01a649920", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+/* { dg-additional-options \"-march=i686\" { target ia32 } } */\n+\n+long long *a, *b, c;\n+int d, e;\n+int baz (void);\n+\n+static inline long long\n+foo (long long *x)\n+{\n+  return __sync_val_compare_and_swap (x, 0, 0);\n+}\n+\n+void\n+bar ()\n+{\n+  int f = baz ();\n+  c = foo (&a[f]);\n+  if (c)\n+    e = d;\n+  a = b;\n+}"}]}