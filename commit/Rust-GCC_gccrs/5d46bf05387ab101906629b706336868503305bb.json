{"sha": "5d46bf05387ab101906629b706336868503305bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0NmJmMDUzODdhYjEwMTkwNjYyOWI3MDYzMzY4Njg1MDMzMDViYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-18T01:22:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-18T01:22:02Z"}, "message": "libgo: Add mount flags, fallocate, statfs.\n\nFrom-SVN: r184365", "tree": {"sha": "53da2a6937ceae4d7350d6a3e8340d6159e28bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53da2a6937ceae4d7350d6a3e8340d6159e28bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d46bf05387ab101906629b706336868503305bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46bf05387ab101906629b706336868503305bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d46bf05387ab101906629b706336868503305bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46bf05387ab101906629b706336868503305bb/comments", "author": null, "committer": null, "parents": [{"sha": "195a2e9d1fe97cced3cc1abf13214c1e4804c7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195a2e9d1fe97cced3cc1abf13214c1e4804c7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195a2e9d1fe97cced3cc1abf13214c1e4804c7a3"}], "stats": {"total": 102, "additions": 89, "deletions": 13}, "files": [{"sha": "d2aa2f67a1cc59f28000b801c3175ad1a177cd2b", "filename": "libgo/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -12,6 +12,9 @@\n /* Define to 1 if you have the `faccessat' function. */\n #undef HAVE_FACCESSAT\n \n+/* Define to 1 if you have the `fallocate' function. */\n+#undef HAVE_FALLOCATE\n+\n /* Define to 1 if you have the `fchmodat' function. */\n #undef HAVE_FCHMODAT\n \n@@ -130,6 +133,9 @@\n /* Define to 1 if you have the <sys/mman.h> header file. */\n #undef HAVE_SYS_MMAN_H\n \n+/* Define to 1 if you have the <sys/mount.h> header file. */\n+#undef HAVE_SYS_MOUNT_H\n+\n /* Define to 1 if you have the <sys/prctl.h> header file. */\n #undef HAVE_SYS_PRCTL_H\n \n@@ -142,6 +148,9 @@\n /* Define to 1 if you have the <sys/socket.h> header file. */\n #undef HAVE_SYS_SOCKET_H\n \n+/* Define to 1 if you have the <sys/statfs.h> header file. */\n+#undef HAVE_SYS_STATFS_H\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n \n@@ -157,6 +166,9 @@\n /* Define to 1 if you have the <sys/utsname.h> header file. */\n #undef HAVE_SYS_UTSNAME_H\n \n+/* Define to 1 if you have the <sys/vfs.h> header file. */\n+#undef HAVE_SYS_VFS_H\n+\n /* Define to 1 if you have the `tee' function. */\n #undef HAVE_TEE\n \n@@ -235,3 +247,6 @@\n #  undef WORDS_BIGENDIAN\n # endif\n #endif\n+\n+/* Define to `long int' if <sys/types.h> does not define. */\n+#undef off_t"}, {"sha": "ecdd647e5b63a3ee676f2c45a589713ed1a41b84", "filename": "libgo/configure", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -14508,7 +14508,7 @@ no)\n   ;;\n esac\n \n-for ac_header in sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h sys/prctl.h\n+for ac_header in sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n@@ -14581,7 +14581,7 @@ else\n fi\n \n \n-for ac_func in epoll_create1 faccessat fchmodat fchownat futimesat inotify_add_watch inotify_init inotify_rm_watch mkdirat mknodat openat renameat splice tee unlinkat unshare\n+for ac_func in epoll_create1 faccessat fallocate fchmodat fchownat futimesat inotify_add_watch inotify_init inotify_rm_watch mkdirat mknodat openat renameat splice tee unlinkat unshare\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -14594,6 +14594,17 @@ _ACEOF\n fi\n done\n \n+ac_fn_c_check_type \"$LINENO\" \"off_t\" \"ac_cv_type_off_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_off_t\" = x\"\"yes; then :\n+\n+else\n+\n+cat >>confdefs.h <<_ACEOF\n+#define off_t long int\n+_ACEOF\n+\n+fi\n+\n ac_fn_c_check_type \"$LINENO\" \"loff_t\" \"ac_cv_type_loff_t\" \"$ac_includes_default\"\n if test \"x$ac_cv_type_loff_t\" = x\"\"yes; then :\n "}, {"sha": "81ed4924fda4c07c66483628c43071adb10d5aa5", "filename": "libgo/configure.ac", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -453,7 +453,7 @@ no)\n   ;;\n esac\n \n-AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h sys/prctl.h)\n+AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h)\n \n AC_CHECK_HEADERS([linux/filter.h linux/netlink.h linux/rtnetlink.h], [], [],\n [#ifdef HAVE_SYS_SOCKET_H\n@@ -467,7 +467,8 @@ AC_CHECK_FUNCS(strerror_r strsignal wait4 mincore setenv)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n \n-AC_CHECK_FUNCS(epoll_create1 faccessat fchmodat fchownat futimesat inotify_add_watch inotify_init inotify_rm_watch mkdirat mknodat openat renameat splice tee unlinkat unshare)\n+AC_CHECK_FUNCS(epoll_create1 faccessat fallocate fchmodat fchownat futimesat inotify_add_watch inotify_init inotify_rm_watch mkdirat mknodat openat renameat splice tee unlinkat unshare)\n+AC_TYPE_OFF_T\n AC_CHECK_TYPES([loff_t])\n \n CFLAGS_hold=\"$CFLAGS\""}, {"sha": "8a3d8c0e65ec77e065a53153642976c95790380e", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -178,9 +178,8 @@ func PtraceDetach(pid int) (err error) { return ptrace(PTRACE_DETACH, pid, 0, 0)\n //sys\tFaccessat(dirfd int, path string, mode uint32, flags int) (err error)\n //faccessat(dirfd int, pathname *byte, mode int, flags int) int\n \n-// FIXME: Only in glibc 2.10 and later.\n-// //sys\tFallocate(fd int, mode uint32, off int64, len int64) (err error)\n-// //fallocate(fd int, mode int, offset Offset_t, len Offset_t) int\n+//sys\tFallocate(fd int, mode uint32, off int64, len int64) (err error)\n+//fallocate(fd int, mode int, offset Offset_t, len Offset_t) int\n \n //sys\tFchmodat(dirfd int, path string, mode uint32, flags int) (err error)\n //fchmodat(dirfd int, pathname *byte, mode Mode_t, flags int) int\n@@ -191,9 +190,8 @@ func PtraceDetach(pid int) (err error) { return ptrace(PTRACE_DETACH, pid, 0, 0)\n //sys\tFlock(fd int, how int) (err error)\n //flock(fd int, how int) int\n \n-// FIXME: mksysinfo statfs\n-// //sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n-// //fstatfs(fd int, buf *Statfs_t) int\n+//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n+//fstatfs(fd int, buf *Statfs_t) int\n \n func Gettid() (tid int) {\n \tr1, _, _ := Syscall(SYS_GETTID, 0, 0, 0)\n@@ -283,9 +281,8 @@ func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n i\n \treturn\n }\n \n-// FIXME: mksysinfo statfs\n-// //sys\tStatfs(path string, buf *Statfs_t) (err error)\n-// //statfs(path *byte, buf *Statfs_t) int\n+//sys\tStatfs(path string, buf *Statfs_t) (err error)\n+//statfs(path *byte, buf *Statfs_t) int\n \n // FIXME: Only in glibc 2.6 and later.\n // //sys\tSyncFileRange(fd int, off int64, n int64, flags int) (err error)"}, {"sha": "2984638131598749a0609c626a84ecd5171a71ac", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -93,6 +93,15 @@ cat > sysinfo.c <<EOF\n #if defined(HAVE_NET_IF_H)\n #include <net/if.h>\n #endif\n+#if defined(HAVE_SYS_MOUNT_H)\n+#include <sys/mount.h>\n+#endif\n+#if defined(HAVE_SYS_VFS_H)\n+#include <sys/vfs.h>\n+#endif\n+#if defined(HAVE_STATFS_H)\n+#include <sys/statfs.h>\n+#endif\n \n /* Constants that may only be defined as expressions on some systems,\n    expressions too complex for -fdump-go-spec to handle.  These are\n@@ -766,4 +775,35 @@ for n in IGNBRK BRKINT IGNPAR PARMRK INPCK ISTRIP INLCR IGNCR ICRNL IUCLC \\\n \tsed -e 's/^\\(const \\)_\\([^=]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}\n done\n \n+# The mount flags\n+grep '^const _MS_' gen-sysinfo.go |\n+    sed -e 's/^\\(const \\)_\\(MS_[^= ]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}\n+\n+# The fallocate flags.\n+grep '^const _FALLOC_' gen-sysinfo.go |\n+    sed -e 's/^\\(const \\)_\\(FALLOC_[^= ]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}\n+\n+# The statfs struct.\n+# Prefer largefile variant if available.\n+statfs=`grep '^type _statfs64 ' gen-sysinfo.go || true`\n+if test \"$statfs\" != \"\"; then\n+  grep '^type _statfs64 ' gen-sysinfo.go\n+else\n+  grep '^type _statfs ' gen-sysinfo.go\n+fi | sed -e 's/type _statfs64/type Statfs_t/' \\\n+\t -e 's/type _statfs/type Statfs_t/' \\\n+\t -e 's/f_type/Type/' \\\n+\t -e 's/f_bsize/Bsize/' \\\n+\t -e 's/f_blocks/Blocks/' \\\n+\t -e 's/f_bfree/Bfree/' \\\n+\t -e 's/f_bavail/Bavail/' \\\n+\t -e 's/f_files/Files/' \\\n+\t -e 's/f_ffree/Ffree/' \\\n+\t -e 's/f_fsid/Fsid/' \\\n+\t -e 's/f_namelen/Namelen/' \\\n+\t -e 's/f_frsize/Frsize/' \\\n+\t -e 's/f_flags/Flags/' \\\n+\t -e 's/f_spare/Spare/' \\\n+    >> ${OUT}\n+\n exit $?"}, {"sha": "b2829589b1490f5e1dd90a1b422aa9e85dbb8b1b", "filename": "libgo/runtime/go-nosys.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d46bf05387ab101906629b706336868503305bb/libgo%2Fruntime%2Fgo-nosys.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d46bf05387ab101906629b706336868503305bb/libgo%2Fruntime%2Fgo-nosys.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-nosys.c?ref=5d46bf05387ab101906629b706336868503305bb", "patch": "@@ -48,6 +48,18 @@ faccessat (int fd __attribute__ ((unused)),\n }\n #endif\n \n+#ifndef HAVE_FALLOCATE\n+int\n+fallocate (int fd __attribute__ ((unused)),\n+\t   int mode __attribute__ ((unused)),\n+\t   off_t offset __attribute __ ((unused)),\n+\t   off_t len __attribute__ ((unused)))\n+{\n+  errno = ENOSYS;\n+  return -1;\n+}\n+#endif\n+\n #ifndef HAVE_FCHMODAT\n int\n fchmodat (int dirfd __attribute__ ((unused)),"}]}