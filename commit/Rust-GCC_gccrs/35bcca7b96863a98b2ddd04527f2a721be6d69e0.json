{"sha": "35bcca7b96863a98b2ddd04527f2a721be6d69e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViY2NhN2I5Njg2M2E5OGIyZGRkMDQ1MjdmMmE3MjFiZTZkNjllMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:24:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:24:51Z"}, "message": "(TARGET_SWITCHES): Add 68020-60.\n\nMask out bits which indicate a particular processor when a different\nprocessor is selected.\n(MASK_68040_ALSO): Remove.\n(MASK_68040): Change to be a single bit.\n\nFrom-SVN: r14083", "tree": {"sha": "bcba0d10c2fb3a93c1619c82c1dedb81168194da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcba0d10c2fb3a93c1619c82c1dedb81168194da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35bcca7b96863a98b2ddd04527f2a721be6d69e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bcca7b96863a98b2ddd04527f2a721be6d69e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bcca7b96863a98b2ddd04527f2a721be6d69e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bcca7b96863a98b2ddd04527f2a721be6d69e0/comments", "author": null, "committer": null, "parents": [{"sha": "dcd13066a0a64aca161216a077d7b9e14b87e0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd13066a0a64aca161216a077d7b9e14b87e0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd13066a0a64aca161216a077d7b9e14b87e0d4"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "91708f4a88ddb639da0eaf8a4766086145a6e255", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bcca7b96863a98b2ddd04527f2a721be6d69e0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bcca7b96863a98b2ddd04527f2a721be6d69e0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=35bcca7b96863a98b2ddd04527f2a721be6d69e0", "patch": "@@ -92,16 +92,15 @@ extern int target_flags;\n    of them must be emulated in software by the OS.  When TARGET_68040 is\n    turned on, these instructions won't be used.  This code will still\n    run on a 68030 and 68881/2. */\n-#define MASK_68040_ALSO (256)\n-#define MASK_68040\t(256|512)\n+#define MASK_68040\t256\n #define TARGET_68040 (target_flags & MASK_68040)\n \n /* Use the 68040-only fp instructions (-m68040 or -m68060).  */\n #define MASK_68040_ONLY\t512\n #define TARGET_68040_ONLY (target_flags & MASK_68040_ONLY)\n \n /* Optimize for 68060, but still allow execution on 68020\n-   (-m68060).\n+   (-m68020-60 or -m68060).\n    The 68060 will execute all 68030 and 68881/2 instructions, but some\n    of them must be emulated in software by the OS.  When TARGET_68060 is\n    turned on, these instructions won't be used.  This code will still\n@@ -131,12 +130,14 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { { \"68020\", - (MASK_68060|MASK_68040)},\t\t\t\t\\\n-    { \"c68020\", - (MASK_68060|MASK_68040)},\t\t\t\t\\\n+  { { \"68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n+    { \"c68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n     { \"68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n     { \"c68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n-    { \"68000\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n-    { \"c68000\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n+    { \"68000\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n+\t\t|MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n+    { \"c68000\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n+\t\t|MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n     { \"bitfield\", MASK_BITFIELD},\t\t\t\t\t\\\n     { \"nobitfield\", - MASK_BITFIELD},\t\t\t\t\t\\\n     { \"rtd\", MASK_RTD},\t\t\t\t\t\t\t\\\n@@ -152,18 +153,24 @@ extern int target_flags;\n     { \"68881\" - (MASK_FPA|MASK_SKY)},\t\t\t\t\t\\\n     { \"68881\", MASK_68881},\t\t\t\t\t\t\\\n     { \"soft-float\", - (MASK_FPA|MASK_SKY|MASK_68040_ONLY|MASK_68881)},\t\\\n-    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040_ALSO)}, \\\n-    { \"68030\", - (MASK_68040|MASK_68060)},\t\t\t\t\\\n+    { \"68020-40\", -(MASK_5200|MASK_68060)},\t\t\t\t\\\n+    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040)},\t\\\n+    { \"68020-60\", -(MASK_5200|MASK_68040)},\t\t\t\t\\\n+    { \"68020-60\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68060)},\t\\\n+    { \"68030\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n     { \"68030\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n-    { \"68040\", (MASK_68020|MASK_68881|MASK_BITFIELD|MASK_68040_ONLY)},\t\\\n+    { \"68040\", - (MASK_5200|MASK_68060)},\t\t\t\t\\\n+    { \"68040\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n+\t\t|MASK_68040_ONLY|MASK_68040)},\t\t\t\t\\\n+    { \"68060\", - (MASK_5200|MASK_68040)},\t\t\t\t\\\n     { \"68060\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n \t\t|MASK_68040_ONLY|MASK_68060)},\t\t\t\t\\\n     { \"5200\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD|MASK_68881)}, \\\n     { \"5200\", (MASK_5200)},\t\t\t\t\t\t\\\n     { \"68851\", 0},\t\t\t\t\t\t\t\\\n     { \"no-68851\", 0},\t\t\t\t\t\t\t\\\n-    { \"68302\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)},\t\\\n-    { \"68332\", - (MASK_68060|MASK_68040|MASK_BITFIELD)},\t\t\\\n+    { \"68302\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD)}, \\\n+    { \"68332\", - (MASK_5200|MASK_68060|MASK_68040|MASK_BITFIELD)},\t\\\n     { \"68332\", MASK_68020},\t\t\t\t\t\t\\\n     { \"align-int\", MASK_ALIGN_INT },\t\t\t\t\t\\\n     { \"no-align-int\", -MASK_ALIGN_INT },\t\t\t\t\\"}]}