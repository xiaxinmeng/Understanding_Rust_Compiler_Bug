{"sha": "78a869ec7471a7c86d992a4cd3a506f5538995fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhODY5ZWM3NDcxYTdjODZkOTkyYTRjZDNhNTA2ZjU1Mzg5OTVmYw==", "commit": {"author": {"name": "Takaya Saito", "email": "gintensubaru@gmail.com", "date": "2011-04-12T10:31:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-12T10:31:33Z"}, "message": "re PR libstdc++/48476 ([C++0x] conversion between std::tuple which have reference member is rejected)\n\n2011-04-12  Takaya Saito  <gintensubaru@gmail.com>\n\n\tPR libstdc++/48476\n\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(_Tuple_impl<>&&),\n\t_Tuple_impl<>::operator=(_Tuple_impl&&), _Tuple_impl<>::operator=\n\t(_Tuple_impl<>&&), tuple_cat): Use std::forward where appropriate.\n\t* testsuite/20_util/tuple/cons/48476.cc: New.\n\t* testsuite/20_util/tuple/48476.cc: Likewise.\n\t* testsuite/20_util/tuple/creation_functions/48476.cc: Likewise.\n\nFrom-SVN: r172309", "tree": {"sha": "a3f9c99384d6e77c98ce53e748f6cc2a84546d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f9c99384d6e77c98ce53e748f6cc2a84546d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a869ec7471a7c86d992a4cd3a506f5538995fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a869ec7471a7c86d992a4cd3a506f5538995fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a869ec7471a7c86d992a4cd3a506f5538995fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a869ec7471a7c86d992a4cd3a506f5538995fc/comments", "author": {"login": "gintenlabo", "id": 234297, "node_id": "MDQ6VXNlcjIzNDI5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/234297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gintenlabo", "html_url": "https://github.com/gintenlabo", "followers_url": "https://api.github.com/users/gintenlabo/followers", "following_url": "https://api.github.com/users/gintenlabo/following{/other_user}", "gists_url": "https://api.github.com/users/gintenlabo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gintenlabo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gintenlabo/subscriptions", "organizations_url": "https://api.github.com/users/gintenlabo/orgs", "repos_url": "https://api.github.com/users/gintenlabo/repos", "events_url": "https://api.github.com/users/gintenlabo/events{/privacy}", "received_events_url": "https://api.github.com/users/gintenlabo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fa1f9b76227e5f3bb22a40a356727f0c4841179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1f9b76227e5f3bb22a40a356727f0c4841179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa1f9b76227e5f3bb22a40a356727f0c4841179"}], "stats": {"total": 196, "additions": 185, "deletions": 11}, "files": [{"sha": "48b27d6465712f50c9640648cd8a1d1d7b8c3c4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78a869ec7471a7c86d992a4cd3a506f5538995fc", "patch": "@@ -1,3 +1,13 @@\n+2011-04-12  Takaya Saito  <gintensubaru@gmail.com>\n+\n+\tPR libstdc++/48476\n+\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(_Tuple_impl<>&&),\n+\t_Tuple_impl<>::operator=(_Tuple_impl&&), _Tuple_impl<>::operator=\n+\t(_Tuple_impl<>&&), tuple_cat): Use std::forward where appropriate.\n+\t* testsuite/20_util/tuple/cons/48476.cc: New.\n+\t* testsuite/20_util/tuple/48476.cc: Likewise.\n+\t* testsuite/20_util/tuple/creation_functions/48476.cc: Likewise.\n+\n 2011-04-12  Allan McRae  <allan@archlinux.org>\n \n \tPR libstdc++/48566"}, {"sha": "fb452aeb43ef92fe6777328a2598a42eb7f7fe23", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=78a869ec7471a7c86d992a4cd3a506f5538995fc", "patch": "@@ -1,6 +1,6 @@\n // <tuple> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -177,10 +177,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n \t: _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n \n-      template<typename... _UElements>\n-        _Tuple_impl(_Tuple_impl<_Idx, _UElements...>&& __in)\n+      template<typename _UHead, typename... _UTails>\n+        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n \t: _Inherited(std::move(__in._M_tail())),\n-\t  _Base(std::move(__in._M_head())) { }\n+\t  _Base(std::forward<_UHead>(__in._M_head())) { }\n \n       _Tuple_impl&\n       operator=(const _Tuple_impl& __in)\n@@ -193,7 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tuple_impl&\n       operator=(_Tuple_impl&& __in)\n       {\n-\t_M_head() = std::move(__in._M_head());\n+\t_M_head() = std::forward<_Head>(__in._M_head());\n \t_M_tail() = std::move(__in._M_tail());\n \treturn *this;\n       }\n@@ -207,11 +207,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n-      template<typename... _UElements>\n+      template<typename _UHead, typename... _UTails>\n         _Tuple_impl&\n-        operator=(_Tuple_impl<_Idx, _UElements...>&& __in)\n+        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n         {\n-\t  _M_head() = std::move(__in._M_head());\n+\t  _M_head() = std::forward<_UHead>(__in._M_head());\n \t  _M_tail() = std::move(__in._M_tail());\n \t  return *this;\n \t}\n@@ -672,7 +672,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       const tuple<_UElements...>& __u,\n \t\t       const __index_holder<_UIdx...>&)\n     { return tuple<_TElements..., _UElements...>\n-\t(std::move(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }\n+\t(std::forward<_TElements>(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }\n \n   template<typename... _TElements, std::size_t... _TIdx,\n \t   typename... _UElements, std::size_t... _UIdx>\n@@ -682,7 +682,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       tuple<_UElements...>&& __u,\n \t\t       const __index_holder<_UIdx...>&)\n     { return tuple<_TElements..., _UElements...>\n-\t(get<_TIdx>(__t)..., std::move(get<_UIdx>(__u))...); }\n+\t(get<_TIdx>(__t)..., std::forward<_UElements>(get<_UIdx>(__u))...); }\n \n   template<typename... _TElements, std::size_t... _TIdx,\n \t   typename... _UElements, std::size_t... _UIdx> \n@@ -692,7 +692,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t       tuple<_UElements...>&& __u,\n \t\t       const __index_holder<_UIdx...>&)\n     { return tuple<_TElements..., _UElements...>\n-\t(std::move(get<_TIdx>(__t))..., std::move(get<_UIdx>(__u))...); }\n+\t(std::forward<_TElements>(get<_TIdx>(__t))...,\n+\t std::forward<_UElements>(get<_UIdx>(__u))...); }\n \n   template<typename... _TElements, typename... _UElements>\n     inline tuple<_TElements..., _UElements...> "}, {"sha": "efe0007a629ae4387d1fb7fcc3ff89fff7f5abd4", "filename": "libstdc++-v3/testsuite/20_util/tuple/48476.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F48476.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F48476.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F48476.cc?ref=78a869ec7471a7c86d992a4cd3a506f5538995fc", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <type_traits>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  typename std::decay<T>::type copy(T&& x)\n+  { return std::forward<T>(x); }\n+\n+// libstdc++/48476\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_ptr<int> p(new int()), q, r;\n+  \n+  std::tuple<std::shared_ptr<int>&, int>  t0(p, 23), t1(q, 0);\n+  t1 = copy(t0);  // shall be equivalent to\n+                  // q = p; std::get<1>(t1) = std::get<1>(t0);\n+  VERIFY( q == p ); \n+\n+  std::tuple<std::shared_ptr<int>&, char> t2(r, 0);\n+  t2 = copy(t1);  // shall be equivalent to\n+                  // r = q; std::get<1>(t2) = std::get<1>(t1);\n+  VERIFY( r == q );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b5e3604d2efa390bc3d68b9c277f63e00cf8608c", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/48476.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F48476.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F48476.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F48476.cc?ref=78a869ec7471a7c86d992a4cd3a506f5538995fc", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+void f()\n+{\n+  int i = 0;\n+  std::tuple<int&, int> t __attribute__((unused)) = std::forward_as_tuple(i, 0);\n+}"}, {"sha": "1607e4552121074517aae6b48c651e32b8cf18b8", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/48476.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F48476.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a869ec7471a7c86d992a4cd3a506f5538995fc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F48476.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2F48476.cc?ref=78a869ec7471a7c86d992a4cd3a506f5538995fc", "patch": "@@ -0,0 +1,85 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  typename std::decay<T>::type copy(T&& x)\n+  { return std::forward<T>(x); }\n+\n+template<typename... Args1, typename... Args2>\n+  void\n+  check_tuple_cat(std::tuple<Args1...> t1, std::tuple<Args2...> t2)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef std::tuple<Args1..., Args2...> concatenated;\n+  \n+    auto cat1 = std::tuple_cat(     t1,       t2 );\n+    auto cat2 = std::tuple_cat(copy(t1),      t2 );\n+    auto cat3 = std::tuple_cat(     t1,  copy(t2));\n+    auto cat4 = std::tuple_cat(copy(t1), copy(t2));\n+  \n+    static_assert( std::is_same<decltype(cat1), concatenated>::value, \"\" );\n+    static_assert( std::is_same<decltype(cat2), concatenated>::value, \"\" );\n+    static_assert( std::is_same<decltype(cat3), concatenated>::value, \"\" );\n+    static_assert( std::is_same<decltype(cat4), concatenated>::value, \"\" );\n+  \n+    VERIFY( cat1 == cat2 );\n+    VERIFY( cat1 == cat3 );\n+    VERIFY( cat1 == cat4 );\n+  }\n+\n+// libstdc++/48476\n+void test01()\n+{\n+  int i = 0;\n+  std::tuple<> t0;\n+  std::tuple<int&> t1(i);\n+  std::tuple<int&, int> t2(i, 0);\n+  std::tuple<int const&, int, double> t3(i, 0, 0);\n+  \n+  check_tuple_cat(t0, t0);\n+  check_tuple_cat(t0, t1);\n+  check_tuple_cat(t0, t2);\n+  check_tuple_cat(t0, t3);\n+  \n+  check_tuple_cat(t1, t0);\n+  check_tuple_cat(t1, t1);\n+  check_tuple_cat(t1, t2);\n+  check_tuple_cat(t1, t3);\n+  \n+  check_tuple_cat(t2, t0);\n+  check_tuple_cat(t2, t1);\n+  check_tuple_cat(t2, t2);\n+  check_tuple_cat(t2, t3);\n+  \n+  check_tuple_cat(t3, t0);\n+  check_tuple_cat(t3, t1);\n+  check_tuple_cat(t3, t2);\n+  check_tuple_cat(t3, t3);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}