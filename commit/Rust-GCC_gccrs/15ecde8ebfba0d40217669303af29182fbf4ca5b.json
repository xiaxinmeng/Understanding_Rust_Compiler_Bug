{"sha": "15ecde8ebfba0d40217669303af29182fbf4ca5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlY2RlOGViZmJhMGQ0MDIxNzY2OTMwM2FmMjkxODJmYmY0Y2E1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-05T10:11:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-05T10:11:13Z"}, "message": "re PR libstdc++/28587 (vector<bool> is extremely slow (900x slower than it should be))\n\n2006-08-05  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28587\n\t* include/bits/stl_bvector.h (vector<bool>::_M_fill): New.\n\t(vector<bool>::_M_fill_insert): Use it.\n\t* testsuite/performance/23_containers/resize/vector_bool.cc: New.\n\t\n\t* testsuite/23_containers/vector/bool/modifiers/insert/1.cc: New.\n\t* testsuite/23_containers/vector/bool/capacity/1.cc: Likewise.\n\nFrom-SVN: r115947", "tree": {"sha": "2e84ddc60c4997c2622894e20f6397a05707e871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e84ddc60c4997c2622894e20f6397a05707e871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ecde8ebfba0d40217669303af29182fbf4ca5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ecde8ebfba0d40217669303af29182fbf4ca5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ecde8ebfba0d40217669303af29182fbf4ca5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ecde8ebfba0d40217669303af29182fbf4ca5b/comments", "author": null, "committer": null, "parents": [{"sha": "76b63f3c5f7757337b94cfca8bf0840ecaaffa38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b63f3c5f7757337b94cfca8bf0840ecaaffa38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b63f3c5f7757337b94cfca8bf0840ecaaffa38"}], "stats": {"total": 386, "additions": 384, "deletions": 2}, "files": [{"sha": "1d87705120bc804129cf2e7b1c741c99f7a30b09", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15ecde8ebfba0d40217669303af29182fbf4ca5b", "patch": "@@ -1,3 +1,13 @@\n+2006-08-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28587\n+\t* include/bits/stl_bvector.h (vector<bool>::_M_fill): New.\n+\t(vector<bool>::_M_fill_insert): Use it.\n+\t* testsuite/performance/23_containers/resize/vector_bool.cc: New.\n+\t\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/1.cc: New.\n+\t* testsuite/23_containers/vector/bool/capacity/1.cc: Likewise.\n+\n 2006-08-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_queue.h (priority_queue<>::push,"}, {"sha": "02aa44cd0f0869bc5ae5cc2c3c9cf1857c083d4b", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=15ecde8ebfba0d40217669303af29182fbf4ca5b", "patch": "@@ -740,6 +740,19 @@ template<typename _Alloc>\n    \n   protected:\n \n+    void\n+    _M_fill(iterator __first, iterator __last, bool __x)\n+    {\n+      if (__first._M_p != __last._M_p)\n+\t{\n+\t  std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);\n+\t  std::fill(__first, iterator(__first._M_p + 1, 0), __x);\n+\t  std::fill(iterator(__last._M_p, 0), __last, __x);\n+\t}\n+      else\n+\tstd::fill(__first, __last, __x);\n+    }\n+\n     void\n     _M_initialize(size_type __n)\n     {\n@@ -873,15 +886,15 @@ template<typename _Alloc>\n \t{\n \t  std::copy_backward(__position, end(),\n \t\t\t     this->_M_impl._M_finish + difference_type(__n));\n-\t  std::fill(__position, __position + difference_type(__n), __x);\n+\t  _M_fill(__position, __position + difference_type(__n), __x);\n \t  this->_M_impl._M_finish += difference_type(__n);\n \t}\n       else\n \t{\n \t  const size_type __len = size() + std::max(size(), __n);\n \t  _Bit_type * __q = this->_M_allocate(__len);\n \t  iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n-\t  std::fill_n(__i, __n, __x);\n+\t  _M_fill(__i, __i + difference_type(__n), __x);\n \t  this->_M_impl._M_finish = std::copy(__position, end(),\n \t\t\t\t\t      __i + difference_type(__n));\n \t  this->_M_deallocate();"}, {"sha": "c4993357ddaba121544f8245d4642530cfdf7535", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/1.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F1.cc?ref=15ecde8ebfba0d40217669303af29182fbf4ca5b", "patch": "@@ -0,0 +1,138 @@\n+// 2006-08-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.5 vector<bool> resize\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+const bool A1[] = {0};\n+const bool A2[] = {0, 0, 0};\n+const bool A3[] = {0, 0};\n+const bool A4[] = {0, 0, 1, 1, 1, 1, 1};\n+const bool A5[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+const bool A6[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1};\n+const bool A7[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0};\n+const bool A8[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n+const bool A9[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+const bool A10[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t    1, 1};\n+const bool A11[] = {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0};\n+\n+const unsigned N1 = sizeof(A1) / sizeof(bool);\n+const unsigned N2 = sizeof(A2) / sizeof(bool);\n+const unsigned N3 = sizeof(A3) / sizeof(bool);\n+const unsigned N4 = sizeof(A4) / sizeof(bool);\n+const unsigned N5 = sizeof(A5) / sizeof(bool);\n+const unsigned N6 = sizeof(A6) / sizeof(bool);\n+const unsigned N7 = sizeof(A7) / sizeof(bool);\n+const unsigned N8 = sizeof(A8) / sizeof(bool);\n+const unsigned N9 = sizeof(A9) / sizeof(bool);\n+const unsigned N10 = sizeof(A10) / sizeof(bool);\n+const unsigned N11 = sizeof(A11) / sizeof(bool);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<bool>  vec_type;\n+\n+  vec_type v;\n+\n+  v.resize(1);\n+  VERIFY( v.size() == 1 );\n+  VERIFY( std::equal(v.begin(), v.end(), A1) );\n+\n+  v.resize(3);\n+  VERIFY( v.size() == 3 );\n+  VERIFY( std::equal(v.begin(), v.end(), A2) );\n+\n+  v.resize(2);\n+  VERIFY( v.size() == 2 );\n+  VERIFY( std::equal(v.begin(), v.end(), A3) );\n+\n+  v.resize(7, true);\n+  VERIFY( v.size() == 7 );\n+  VERIFY( std::equal(v.begin(), v.end(), A4) );\n+\n+  v.resize(18, false);\n+  VERIFY( v.size() == 18 );\n+  VERIFY( std::equal(v.begin(), v.end(), A5) );\n+\n+  v.resize(40, true);\n+  VERIFY( v.size() == 40 );\n+  VERIFY( std::equal(v.begin(), v.end(), A6) );\n+\n+  v.resize(80, false);\n+  VERIFY( v.size() == 80 );\n+  VERIFY( std::equal(v.begin(), v.end(), A7) );\n+\n+  v.resize(90, true);\n+  VERIFY( v.size() == 90 );\n+  VERIFY( std::equal(v.begin(), v.end(), A8) );\n+\n+  v.resize(100, false);\n+  VERIFY( v.size() == 100 );\n+  VERIFY( std::equal(v.begin(), v.end(), A9) );\n+\n+  v.resize(200, true);\n+  VERIFY( v.size() == 200 );\n+  VERIFY( std::equal(v.begin(), v.end(), A10) );\n+\n+  v.resize(13, true);\n+  VERIFY( v.size() == 13 );\n+  VERIFY( std::equal(v.begin(), v.end(), A11) );\n+\n+  v.resize(13, false);\n+  VERIFY( v.size() == 13 );\n+  VERIFY( std::equal(v.begin(), v.end(), A11) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b0193695f58004fbe91aaebe2cea6c09a03d2b0d", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/1.cc", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F1.cc?ref=15ecde8ebfba0d40217669303af29182fbf4ca5b", "patch": "@@ -0,0 +1,172 @@\n+// 2006-08-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.5 vector<bool> insert\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+const bool A1[] = {1, 1, 1, 1, 1, 1, 1};\n+const bool A2[] = {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1};\n+const bool A4[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 1, 1};\n+const bool A5[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1};\n+const bool A6[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1};\n+const bool A7[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 0};\n+const bool A8[] = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+const bool A9[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t   \n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+\t\t   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t   0, 0, 1, 1, 0};\n+\n+const unsigned N1 = sizeof(A1) / sizeof(bool);\n+const unsigned N2 = sizeof(A2) / sizeof(bool);\n+const unsigned N3 = sizeof(A3) / sizeof(bool);\n+const unsigned N4 = sizeof(A4) / sizeof(bool);\n+const unsigned N5 = sizeof(A5) / sizeof(bool);\n+const unsigned N6 = sizeof(A6) / sizeof(bool);\n+const unsigned N7 = sizeof(A7) / sizeof(bool);\n+const unsigned N8 = sizeof(A8) / sizeof(bool);\n+const unsigned N9 = sizeof(A9) / sizeof(bool);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::vector<bool>  vec_type;\n+\n+  vec_type v;\n+\n+  v.insert(v.begin(), 7, true);\n+  VERIFY( v.size() == 7 );\n+  VERIFY( std::equal(v.begin(), v.end(), A1) );\n+\n+  v.insert(v.begin() + 5, 10, false);\n+  VERIFY( v.size() == 17 );\n+  VERIFY( std::equal(v.begin(), v.end(), A2) );\n+\n+  v.insert(v.begin(), 20, false);\n+  VERIFY( v.size() == 37 );\n+  VERIFY( std::equal(v.begin(), v.end(), A3) );\n+\n+  v.insert(v.begin(), 40, true);\n+  VERIFY( v.size() == 77 );\n+  VERIFY( std::equal(v.begin(), v.end(), A4) );\n+\n+  v.insert(v.begin() + 18, 80, false);\n+  VERIFY( v.size() == 157 );\n+  VERIFY( std::equal(v.begin(), v.end(), A5) );\n+  \n+  v.insert(v.begin() + 54, 80, true);\n+  VERIFY( v.size() == 237 );\n+  VERIFY( std::equal(v.begin(), v.end(), A6) );\n+\n+  v.insert(v.end(), 1, false);\n+  VERIFY( v.size() == 238 );\n+  VERIFY( std::equal(v.begin(), v.end(), A7) );\n+\n+  v.insert(v.begin(), 1, false);\n+  VERIFY( v.size() == 239 );\n+  VERIFY( std::equal(v.begin(), v.end(), A8) );\n+\n+  v.insert(v.begin(), 180, true);\n+  VERIFY( v.size() == 419 );\n+  VERIFY( std::equal(v.begin(), v.end(), A9) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7f5ab9ce86180c673077036154f1c2e894c87cf1", "filename": "libstdc++-v3/testsuite/performance/23_containers/resize/vector_bool.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fresize%2Fvector_bool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecde8ebfba0d40217669303af29182fbf4ca5b/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fresize%2Fvector_bool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fresize%2Fvector_bool.cc?ref=15ecde8ebfba0d40217669303af29182fbf4ca5b", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/28587\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  start_counters(time, resource);\n+  for (unsigned i = 0; i < 200000; ++i)\n+    {\n+      std::vector<bool> vec;\n+      vec.resize(i);\n+    }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}