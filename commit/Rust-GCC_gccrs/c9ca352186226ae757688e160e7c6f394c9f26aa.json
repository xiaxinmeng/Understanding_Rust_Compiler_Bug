{"sha": "c9ca352186226ae757688e160e7c6f394c9f26aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzljYTM1MjE4NjIyNmFlNzU3Njg4ZTE2MGU3YzZmMzk0YzlmMjZhYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T13:38:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T13:38:34Z"}, "message": "libstdc++: Use __builtin_operator_new when available [PR94295]\n\nClang provides __builtin_operator_new and __builtin_operator_delete,\nwhich have the same semantics as ::operator new and ::operator delete\nexcept that the compiler is allowed to elide calls to them. This changes\nstd::allocator to use those built-in functions so that memory allocated\nby std::allocator can be optimized away when using Clang. This avoids an\nabstraction penalty for using std::allocator to allocate storage rather\nthan a new-expression.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/94295\n\t* include/ext/new_allocator.h (_GLIBCXX_OPERATOR_NEW)\n\t(_GLIBCXX_OPERATOR_DELETE, _GLIBCXX_SIZED_DEALLOC): Define.\n\t(allocator::allocate, allocator::deallocate): Use new macros.", "tree": {"sha": "5c348a4cd218bf519e980632707a36b962000e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c348a4cd218bf519e980632707a36b962000e00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ca352186226ae757688e160e7c6f394c9f26aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ca352186226ae757688e160e7c6f394c9f26aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ca352186226ae757688e160e7c6f394c9f26aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ca352186226ae757688e160e7c6f394c9f26aa/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca7a0253d6e3116f846ad530b19d89644a64267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca7a0253d6e3116f846ad530b19d89644a64267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca7a0253d6e3116f846ad530b19d89644a64267"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "7c48c820c62146b8851c2c823a0206c4c9d998cc", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ca352186226ae757688e160e7c6f394c9f26aa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ca352186226ae757688e160e7c6f394c9f26aa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=c9ca352186226ae757688e160e7c6f394c9f26aa", "patch": "@@ -97,6 +97,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::__addressof(__x); }\n #endif\n \n+#if __has_builtin(__builtin_operator_new) >= 201802L\n+# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new\n+# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete\n+#else\n+# define _GLIBCXX_OPERATOR_NEW ::operator new\n+# define _GLIBCXX_OPERATOR_DELETE ::operator delete\n+#endif\n+\n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n       _GLIBCXX_NODISCARD _Tp*\n@@ -121,34 +129,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n \t  {\n \t    std::align_val_t __al = std::align_val_t(alignof(_Tp));\n-\t    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));\n+\t    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),\n+\t\t\t\t\t\t\t   __al));\n \t  }\n #endif\n-\treturn static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n+\treturn static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));\n       }\n \n       // __p is not permitted to be a null pointer.\n       void\n-      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))\n+      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))\n       {\n+#if __cpp_sized_deallocation\n+# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)\n+#else\n+# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)\n+#endif\n+\n #if __cpp_aligned_new\n \tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n \t  {\n-\t    ::operator delete(__p,\n-# if __cpp_sized_deallocation\n-\t\t\t      __t * sizeof(_Tp),\n-# endif\n-\t\t\t      std::align_val_t(alignof(_Tp)));\n+\t    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),\n+\t\t\t\t     std::align_val_t(alignof(_Tp)));\n \t    return;\n \t  }\n #endif\n-\t::operator delete(__p\n-#if __cpp_sized_deallocation\n-\t\t\t  , __t * sizeof(_Tp)\n-#endif\n-\t\t\t );\n+\t_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));\n       }\n \n+#undef _GLIBCXX_SIZED_DEALLOC\n+#undef _GLIBCXX_OPERATOR_DELETE\n+#undef _GLIBCXX_OPERATOR_NEW\n+\n #if __cplusplus <= 201703L\n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT"}]}