{"sha": "3f7cc57ab810a6da3505641930f79fe446a98eb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y3Y2M1N2FiODEwYTZkYTM1MDU2NDE5MzBmNzlmZTQ0NmE5OGViOQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-06-29T19:15:14Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-06-29T19:15:14Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1341", "tree": {"sha": "f219be7ba987df5dad69219cf26c247eab07372f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f219be7ba987df5dad69219cf26c247eab07372f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f7cc57ab810a6da3505641930f79fe446a98eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7cc57ab810a6da3505641930f79fe446a98eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7cc57ab810a6da3505641930f79fe446a98eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7cc57ab810a6da3505641930f79fe446a98eb9/comments", "author": null, "committer": null, "parents": [{"sha": "45ad788b40865b180e784d525e8e960c6442921a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ad788b40865b180e784d525e8e960c6442921a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ad788b40865b180e784d525e8e960c6442921a"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "a04022267ed1e7ebafd42ab409ef308929f04ef2", "filename": "gcc/collect2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7cc57ab810a6da3505641930f79fe446a98eb9/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7cc57ab810a6da3505641930f79fe446a98eb9/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=3f7cc57ab810a6da3505641930f79fe446a98eb9", "patch": "@@ -198,6 +198,9 @@ static void  choose_temp_base ();\n \n generic *xcalloc ();\n generic *xmalloc ();\n+\n+extern char *index ();\n+extern char *rindex ();\n \f\n char *\n my_strerror (e)\n@@ -483,7 +486,7 @@ main (argc, argv)\n \n   if (prefix == (char *)0)\n     {\n-      p = strrchr (argv[0], '/');\n+      p = rindex (argv[0], '/');\n       if (p != (char *)0)\n \t{\n \t  prefix = argv[0];\n@@ -676,7 +679,7 @@ main (argc, argv)\n \t    }\n \n       else if (first_file\n-\t       && (p = strrchr (arg, '.')) != (char *)0\n+\t       && (p = rindex (arg, '.')) != (char *)0\n \t       && strcmp (p, \".o\") == 0)\n \t{\n \t  first_file = 0;"}, {"sha": "ab74207eb2e1dc3b64ade3221fe9c33ed8260ebc", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7cc57ab810a6da3505641930f79fe446a98eb9/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7cc57ab810a6da3505641930f79fe446a98eb9/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3f7cc57ab810a6da3505641930f79fe446a98eb9", "patch": "@@ -57,11 +57,13 @@ extern time_t time ();\n #include <string.h>\n #else\n #include <strings.h>\n-#define strrchr rindex\n #endif\n \n extern char *getpwd ();\n \n+extern char *index ();\n+extern char *rindex ();\n+\n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n \n@@ -992,7 +994,7 @@ dwarf_fund_type_name (ft)\n \n    The current Dwarf draft specification calls for Dwarf fundamental types\n    to accurately reflect the fact that a given type was either a \"plain\"\n-   integral type or an explicitly \"signed\" integral type.  Unfortuantely,\n+   integral type or an explicitly \"signed\" integral type.  Unfortunately,\n    we can't always do this, because GCC may already have thrown away the\n    information about the precise way in which the type was originally\n    specified, as in:\n@@ -1569,7 +1571,7 @@ data_member_location_attribute (decl)\n     abort ();\n \n   /* The bit position given by DECL_FIELD_BITPOS could be non-constant\n-     in the case where one or more variable sized members preceeded this\n+     in the case where one or more variable sized members preceded this\n      member in the containing struct type.  We could probably correctly\n      handle this case someday, by it's too complicated to deal with at\n      the moment (and probably too rare to worry about), so just punt on\n@@ -1794,7 +1796,7 @@ location_or_const_value_attribute (decl)\n   /* Existing Dwarf debuggers need and expect the location descriptors for\n      formal parameters to reflect either the place where the parameters get\n      passed (if they are passed on the stack and in memory) or else the\n-     (preserved) registers which the paramaters get copied to during the\n+     (preserved) registers which the parameters get copied to during the\n      function prologue.\n \n      At least this is the way things are for most common CISC machines\n@@ -2132,7 +2134,7 @@ bit_offset_attribute (decl)\n   assert (type);\t\t\t\t/* Must be a bit field.\t */\n \n   /* The bit position given by DECL_FIELD_BITPOS could be non-constant\n-     in the case where one or more variable sized members preceeded this\n+     in the case where one or more variable sized members preceded this\n      member in the containing struct type.  We could probably correctly\n      handle this case someday, by it's too complicated to deal with at\n      the moment, so just punt on the whole AT_bit_offset attribute for\n@@ -4486,7 +4488,7 @@ dwarfout_line (filename, line)\n         }\n \n       {\n-        register char *tail = strrchr (filename, '/');\n+        register char *tail = rindex (filename, '/');\n \n         if (tail != NULL)\n           filename = tail;"}]}