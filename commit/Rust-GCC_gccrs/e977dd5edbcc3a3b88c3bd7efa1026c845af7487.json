{"sha": "e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3N2RkNWVkYmNjM2EzYjg4YzNiZDdlZmExMDI2Yzg0NWFmNzQ4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-23T21:06:05Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-09-23T21:06:05Z"}, "message": "Cleanup modref interfaces.\n\n\t* ipa-fnsummary.c (refs_local_or_readonly_memory_p): New function.\n\t(points_to_local_or_readonly_memory_p): New function.\n\t* ipa-fnsummary.h (refs_local_or_readonly_memory_p): Declare.\n\t(points_to_local_or_readonly_memory_p): Declare.\n\t* ipa-modref.c (record_access_p): Use refs_local_or_readonly_memory_p.\n\t* ipa-pure-const.c (check_op): Likewise.\n\n\t* gcc.dg/tree-ssa/local-pure-const.c: Update template.", "tree": {"sha": "6603e18a37391e417b8b2c1e3821f747bf039c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6603e18a37391e417b8b2c1e3821f747bf039c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/comments", "author": null, "committer": null, "parents": [{"sha": "e92779db3304bc96a6b861f87c5edde8dd4d4030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92779db3304bc96a6b861f87c5edde8dd4d4030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92779db3304bc96a6b861f87c5edde8dd4d4030"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "bb703f62206a92d96e26514771c1f2b12a36f75b", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "patch": "@@ -2430,6 +2430,47 @@ fp_expression_p (gimple *stmt)\n   return false;\n }\n \n+/* Return true if T references memory location that is local\n+   for the function (that means, dead after return) or read-only.  */\n+\n+bool\n+refs_local_or_readonly_memory_p (tree t)\n+{\n+  /* Non-escaping memory is fine.  */\n+  t = get_base_address (t);\n+  if ((TREE_CODE (t) == MEM_REF\n+      || TREE_CODE (t) == TARGET_MEM_REF))\n+    return points_to_local_or_readonly_memory_p (TREE_OPERAND (t, 0));\n+\n+  /* Automatic variables are fine.  */\n+  if (DECL_P (t)\n+      && auto_var_in_fn_p (t, current_function_decl))\n+    return true;\n+\n+  /* Read-only variables are fine.  */\n+  if (DECL_P (t) && TREE_READONLY (t))\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return true if T is a pointer pointing to memory location that is local\n+   for the function (that means, dead after return) or read-only.  */\n+\n+bool\n+points_to_local_or_readonly_memory_p (tree t)\n+{\n+  /* See if memory location is clearly invalid.  */\n+  if (integer_zerop (t))\n+    return flag_delete_null_pointer_checks;\n+  if (TREE_CODE (t) == SSA_NAME)\n+    return !ptr_deref_may_alias_global_p (t);\n+  if (TREE_CODE (t) == ADDR_EXPR)\n+    return refs_local_or_readonly_memory_p (TREE_OPERAND (t, 0));\n+  return false;\n+}\n+\n+\n /* Analyze function body for NODE.\n    EARLY indicates run from early optimization pipeline.  */\n "}, {"sha": "4e1f841afadcef98cb1a38f7fbbc259ce5313fb2", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "patch": "@@ -357,6 +357,8 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n void ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge);\n void ipa_update_overall_fn_summary (struct cgraph_node *node, bool reset = true);\n void compute_fn_summary (struct cgraph_node *, bool);\n+bool refs_local_or_readonly_memory_p (tree);\n+bool points_to_local_or_readonly_memory_p (tree);\n \n \n void evaluate_properties_for_edge (struct cgraph_edge *e,"}, {"sha": "9cc9056589116e3d449af8a04eaf01d60d923cdd", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "patch": "@@ -62,6 +62,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"calls.h\"\n #include \"ipa-modref-tree.h\"\n #include \"ipa-modref.h\"\n+#include \"value-range.h\"\n+#include \"ipa-prop.h\"\n+#include \"ipa-fnsummary.h\"\n \n /* Class (from which there is one global instance) that holds modref summaries\n    for all analyzed functions.  */\n@@ -347,36 +350,12 @@ record_access_lto (modref_records_lto *tt, ao_ref *ref)\n static bool\n record_access_p (tree expr)\n {\n-  /* Non-escaping memory is fine  */\n-  tree t = get_base_address (expr);\n-  if (t && (INDIRECT_REF_P (t)\n-\t    || TREE_CODE (t) == MEM_REF\n-\t    || TREE_CODE (t) == TARGET_MEM_REF)\n-\t&& TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME\n-\t&& !ptr_deref_may_alias_global_p (TREE_OPERAND (t, 0)))\n+  if (refs_local_or_readonly_memory_p (expr))\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"   - Non-escaping memory, ignoring.\\n\");\n+\tfprintf (dump_file, \"   - Read-only or local, ignoring.\\n\");\n       return false;\n     }\n-\n-  /* Automatic variables are fine.  */\n-  if (DECL_P (t)\n-      && auto_var_in_fn_p (t, current_function_decl))\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file, \"   - Automatic variable, ignoring.\\n\");\n-      return false;\n-    }\n-\n-  /* Read-only variables are fine.  */\n-  if (DECL_P (t) && TREE_READONLY (t))\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file, \"   - Read-only variable, ignoring.\\n\");\n-      return false;\n-    }\n-\n   return true;\n }\n "}, {"sha": "bdbccd010dcc48f0d97faa64a8bf3aa3c6f7d4d4", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "patch": "@@ -381,13 +381,11 @@ check_op (funct_state local, tree t, bool checking_write)\n \tfprintf (dump_file, \"    Volatile indirect ref is not const/pure\\n\");\n       return;\n     }\n-  else if (t\n-  \t   && (INDIRECT_REF_P (t) || TREE_CODE (t) == MEM_REF)\n-\t   && TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME\n-\t   && !ptr_deref_may_alias_global_p (TREE_OPERAND (t, 0)))\n+  else if (refs_local_or_readonly_memory_p (t))\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"    Indirect ref to local memory is OK\\n\");\n+\tfprintf (dump_file, \"    Indirect ref to local or readonly \"\n+\t\t \"memory is OK\\n\");\n       return;\n     }\n   else if (checking_write)"}, {"sha": "6746758ca88f75a06c5d171501bdbe4f2b83d9e2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/local-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Flocal-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977dd5edbcc3a3b88c3bd7efa1026c845af7487/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Flocal-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Flocal-pure-const.c?ref=e977dd5edbcc3a3b88c3bd7efa1026c845af7487", "patch": "@@ -12,5 +12,5 @@ t(int a, int b, int c)\n     p = &c;\n   return *p;\n }\n-/* { dg-final { scan-tree-dump-times \"local memory is OK\" 1 \"local-pure-const1\"} } */\n+/* { dg-final { scan-tree-dump-times \"local or readonly memory is OK\" 1 \"local-pure-const1\"} } */\n /* { dg-final { scan-tree-dump-times \"found to be const\" 1 \"local-pure-const1\"} } */"}]}