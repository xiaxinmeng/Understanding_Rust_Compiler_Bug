{"sha": "5dae1114bb636a814b154c3c47ff6ad149bc81de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhZTExMTRiYjYzNmE4MTRiMTU0YzNjNDdmZjZhZDE0OWJjODFkZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-17T20:14:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-17T20:14:44Z"}, "message": "re PR c++/9294 ([new parser] parser enters infinite loop)\n\n\tPR c++/9294\n\t* cp-tree.def (BASELINK): Make it class 'x', not class 'e'.\n\t* cp-tree.h (BASELINK_BINFO): Adjust.\n\t(BASELINK_FUNCTIONS): Likewise.\n\t(BASELINK_ACCESS_BINFO): Likewise.\n\t(tree_baselink): New structure.\n\t(cp_tree_node_structure_enum): Add TS_CP_BASELINK.\n\t(lang_tree_node): Add baselink.\n\t* decl.c (cp_tree_node_structure): Add BASELINK case.\n\t* search.c (build_baselink): Adjust.\n\t* tree.c (cp_walk_subtrees): Add BASELINK case.  Remove BASELINK_P\n\ttest from TREE_LIST case.\n\n\tPR c++/9272\n\t* parser.c (cp_parser_constructor_declarator_p): Do not assume\n\tthat a constructor cannot be declared outside of its own class.\n\n\t* parser.c (cp_parser_resolve_typename_type): If the scope cannot\n\tbe resolved, neither can the qualified name.\n\n\t* rtti.c (get_pseudo_ti_desc): Fix thinko.\n\n\tPR c++/9272\n\t* g++.dg/parse/ctor1.C: New test.\n\n\tPR c++/9294:\n\t* g++.dg/parse/qualified1.C: New test.\n\n\t* g++.dg/parse/typename3.C: New test.\n\nFrom-SVN: r61456", "tree": {"sha": "40087d71f244ec860436c3e670e5323f356750a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40087d71f244ec860436c3e670e5323f356750a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dae1114bb636a814b154c3c47ff6ad149bc81de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dae1114bb636a814b154c3c47ff6ad149bc81de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dae1114bb636a814b154c3c47ff6ad149bc81de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dae1114bb636a814b154c3c47ff6ad149bc81de/comments", "author": null, "committer": null, "parents": [{"sha": "e607534b43ca5f05409cad81ca1ebc00234851b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e607534b43ca5f05409cad81ca1ebc00234851b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e607534b43ca5f05409cad81ca1ebc00234851b8"}], "stats": {"total": 160, "additions": 116, "deletions": 44}, "files": [{"sha": "36890c35ff0379052f82389fa96af54d1d8b7c56", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -1,3 +1,27 @@\n+2003-01-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9294\n+\t* cp-tree.def (BASELINK): Make it class 'x', not class 'e'.\n+\t* cp-tree.h (BASELINK_BINFO): Adjust.\n+\t(BASELINK_FUNCTIONS): Likewise.\n+\t(BASELINK_ACCESS_BINFO): Likewise.\n+\t(tree_baselink): New structure.\n+\t(cp_tree_node_structure_enum): Add TS_CP_BASELINK.\n+\t(lang_tree_node): Add baselink.\n+\t* decl.c (cp_tree_node_structure): Add BASELINK case.\n+\t* search.c (build_baselink): Adjust.\n+\t* tree.c (cp_walk_subtrees): Add BASELINK case.  Remove BASELINK_P\n+\ttest from TREE_LIST case.\n+\n+\tPR c++/9272\n+\t* parser.c (cp_parser_constructor_declarator_p): Do not assume\n+\tthat a constructor cannot be declared outside of its own class.\n+\t\n+\t* parser.c (cp_parser_resolve_typename_type): If the scope cannot\n+\tbe resolved, neither can the qualified name.\n+\n+\t* rtti.c (get_pseudo_ti_desc): Fix thinko.\n+\n 2003-01-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/8564"}, {"sha": "f621844e350572e2ca4ad84572c027dc5bbbbcd7", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -105,7 +105,7 @@ DEFTREECODE (ALIAS_DECL, \"alias_decl\", 'd', 0)\n    the type of the expression.  This type is either a FUNCTION_TYPE,\n    METHOD_TYPE, or `unknown_type_node' indicating that the function is\n    overloaded. */\n-DEFTREECODE (BASELINK, \"baselink\", 'e', 3)\n+DEFTREECODE (BASELINK, \"baselink\", 'x', 3)\n \n /* Template definition.  The following fields have the specified uses,\n    although there are other macros in cp-tree.h that should be used for"}, {"sha": "57f0621544a7919bfa58caf9a763a0b2135e0776", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -373,16 +373,16 @@ struct tree_overload GTY(())\n   (TREE_CODE (NODE) == BASELINK)\n /* The BINFO indicating the base from which the BASELINK_FUNCTIONS came.  */\n #define BASELINK_BINFO(NODE) \\\n-  (TREE_OPERAND (BASELINK_CHECK (NODE), 0))\n+  (((struct tree_baselink*) BASELINK_CHECK (NODE))->binfo)\n /* The functions referred to by the BASELINK; either a FUNCTION_DECL,\n    a TEMPLATE_DECL, an OVERLOAD, or a TEMPLATE_ID_EXPR.  */\n #define BASELINK_FUNCTIONS(NODE) \\\n-  (TREE_OPERAND (BASELINK_CHECK (NODE), 1))\n+  (((struct tree_baselink*) BASELINK_CHECK (NODE))->functions)\n /* The BINFO in which the search for the functions indicated by this baselink \n    began.  This base is used to determine the accessibility of functions \n    selected by overload resolution.  */\n #define BASELINK_ACCESS_BINFO(NODE) \\\n-  (TREE_OPERAND (BASELINK_CHECK (NODE), 2))\n+  (((struct tree_baselink*) BASELINK_CHECK (NODE))->access_binfo)\n /* For a type-conversion operator, the BASELINK_OPTYPE indicates the type\n    to which the conversion should occur.  This value is important if\n    the BASELINK_FUNCTIONS include a template conversion operator --\n@@ -391,6 +391,14 @@ struct tree_overload GTY(())\n #define BASELINK_OPTYPE(NODE) \\\n   (TREE_CHAIN (BASELINK_CHECK (NODE)))\n \n+struct tree_baselink GTY(())\n+{\n+  struct tree_common common;\n+  tree binfo;\n+  tree functions;\n+  tree access_binfo;\n+};\n+\n #define WRAPPER_ZC(NODE) (((struct tree_wrapper*)WRAPPER_CHECK (NODE))->z_c)\n \n struct tree_wrapper GTY(())\n@@ -520,6 +528,7 @@ enum cp_tree_node_structure_enum {\n   TS_CP_PTRMEM,\n   TS_CP_BINDING,\n   TS_CP_OVERLOAD,\n+  TS_CP_BASELINK,\n   TS_CP_WRAPPER,\n   TS_CP_SRCLOC,\n   TS_CP_DEFAULT_ARG,\n@@ -537,6 +546,7 @@ union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\n   struct tree_binding GTY ((tag (\"TS_CP_BINDING\"))) binding;\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n+  struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n   struct tree_wrapper GTY ((tag (\"TS_CP_WRAPPER\"))) wrapper;\n   struct tree_srcloc GTY ((tag (\"TS_CP_SRCLOC\"))) srcloc;\n   struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;"}, {"sha": "f494ab3ee7e21301d58daed00efd00481a1ec975", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -14481,6 +14481,7 @@ cp_tree_node_structure (union lang_tree_node * t)\n     case OVERLOAD:\t\treturn TS_CP_OVERLOAD;\n     case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;\n     case PTRMEM_CST:\t\treturn TS_CP_PTRMEM;\n+    case BASELINK:              return TS_CP_BASELINK;\n     case WRAPPER:\t\treturn TS_CP_WRAPPER;\n     case SRCLOC:\t\treturn TS_CP_SRCLOC;\n     default:\t\t\treturn TS_CP_GENERIC;"}, {"sha": "412678c11a50fdcf89e6983347ac5bd761721d0f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -13619,15 +13619,15 @@ cp_parser_resolve_typename_type (parser, type)\n \t\t      20010702);\n \n   scope = TYPE_CONTEXT (type);\n-  name = DECL_NAME (TYPE_NAME (type));\n+  name = TYPE_IDENTIFIER (type);\n \n   /* If the SCOPE is itself a TYPENAME_TYPE, then we need to resolve\n      it first before we can figure out what NAME refers to.  */\n   if (TREE_CODE (scope) == TYPENAME_TYPE)\n     scope = cp_parser_resolve_typename_type (parser, scope);\n   /* If we don't know what SCOPE refers to, then we cannot resolve the\n      TYPENAME_TYPE.  */\n-  if (scope == error_mark_node)\n+  if (scope == error_mark_node || TREE_CODE (scope) == TYPENAME_TYPE)\n     return error_mark_node;\n   /* If the SCOPE is a template type parameter, we have no way of\n      resolving the name.  */\n@@ -14001,39 +14001,31 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_ELLIPSIS)\n \t  && !cp_parser_storage_class_specifier_opt (parser))\n \t{\n-\t  if (current_class_type \n-\t      && !same_type_p (current_class_type, TREE_TYPE (type_decl)))\n-\t    /* The constructor for one class cannot be declared inside\n-\t       another.  */\n-\t    constructor_p = false;\n+\t  tree type;\n+\n+\t  /* Names appearing in the type-specifier should be looked up\n+\t     in the scope of the class.  */\n+\t  if (current_class_type)\n+\t    type = NULL_TREE;\n \t  else\n \t    {\n-\t      tree type;\n-\n-\t      /* Names appearing in the type-specifier should be looked up\n-\t\t in the scope of the class.  */\n-\t      if (current_class_type)\n-\t\ttype = NULL_TREE;\n-\t      else\n-\t\t{\n-\t\t  type = TREE_TYPE (type_decl);\n-\t\t  if (TREE_CODE (type) == TYPENAME_TYPE)\n-\t\t    type = cp_parser_resolve_typename_type (parser, type);\n-\t\t  push_scope (type);\n-\t\t}\n-\t      /* Look for the type-specifier.  */\n-\t      cp_parser_type_specifier (parser,\n-\t\t\t\t\tCP_PARSER_FLAGS_NONE,\n-\t\t\t\t\t/*is_friend=*/false,\n-\t\t\t\t\t/*is_declarator=*/true,\n-\t\t\t\t\t/*declares_class_or_enum=*/NULL,\n-\t\t\t\t\t/*is_cv_qualifier=*/NULL);\n-\t      /* Leave the scope of the class.  */\n-\t      if (type)\n-\t\tpop_scope (type);\n-\n-\t      constructor_p = !cp_parser_error_occurred (parser);\n+\t      type = TREE_TYPE (type_decl);\n+\t      if (TREE_CODE (type) == TYPENAME_TYPE)\n+\t\ttype = cp_parser_resolve_typename_type (parser, type);\n+\t      push_scope (type);\n \t    }\n+\t  /* Look for the type-specifier.  */\n+\t  cp_parser_type_specifier (parser,\n+\t\t\t\t    CP_PARSER_FLAGS_NONE,\n+\t\t\t\t    /*is_friend=*/false,\n+\t\t\t\t    /*is_declarator=*/true,\n+\t\t\t\t    /*declares_class_or_enum=*/NULL,\n+\t\t\t\t    /*is_cv_qualifier=*/NULL);\n+\t  /* Leave the scope of the class.  */\n+\t  if (type)\n+\t    pop_scope (type);\n+\n+\t  constructor_p = !cp_parser_error_occurred (parser);\n \t}\n     }\n   else"}, {"sha": "e222d25c8764d4d398a4b9862aa995b0edef787f", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -1216,9 +1216,14 @@ get_pseudo_ti_desc (tree type)\n \t      if (var_desc)\n \t\treturn var_desc;\n   \n-\t      /* Add number of bases and trailing array of\n-\t\t base_class_type_info.  */\n-\t      array_domain = build_index_type (size_int (num_bases));\n+\t      /* Create the array of __base_class_type_info entries.\n+\t\t G++ 3.2 allocated an array that had one too many\n+\t\t entries, and then filled that extra entries with\n+\t\t zeros.  */\n+\t      if (abi_version_at_least (2))\n+\t\tarray_domain = build_index_type (size_int (num_bases - 1));\n+\t      else\n+\t\tarray_domain = build_index_type (size_int (num_bases));\n \t      base_array =\n \t\tbuild_array_type (base_desc_type_node, array_domain);\n "}, {"sha": "cab3bbb9cabdb5e78c5e0c4558f9bf057d88e361", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -1385,8 +1385,8 @@ build_baselink (tree binfo, tree access_binfo, tree functions, tree optype)\n   my_friendly_assert (!optype || TYPE_P (optype), 20020730);\n   my_friendly_assert (TREE_TYPE (functions), 20020805);\n \n-  baselink = build (BASELINK, TREE_TYPE (functions), NULL_TREE,\n-\t\t    NULL_TREE, NULL_TREE);\n+  baselink = make_node (BASELINK);\n+  TREE_TYPE (baselink) = TREE_TYPE (functions);\n   BASELINK_BINFO (baselink) = binfo;\n   BASELINK_ACCESS_BINFO (baselink) = access_binfo;\n   BASELINK_FUNCTIONS (baselink) = functions;"}, {"sha": "0f60b91ca5ff241aa6f005cab86657daecff3000", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -2161,6 +2161,7 @@ cp_walk_subtrees (tp, walk_subtrees_p, func, data, htab)\n     case TEMPLATE_TYPE_PARM:\n     case TYPENAME_TYPE:\n     case TYPEOF_TYPE:\n+    case BASELINK:\n       /* None of thse have subtrees other than those already walked\n          above.  */\n       *walk_subtrees_p = 0;\n@@ -2172,9 +2173,7 @@ cp_walk_subtrees (tp, walk_subtrees_p, func, data, htab)\n       break;\n \n     case TREE_LIST:\n-      /* A BASELINK_P's TREE_PURPOSE is a BINFO, and hence circular.  */\n-      if (!BASELINK_P (*tp))\n-        WALK_SUBTREE (TREE_PURPOSE (*tp));\n+      WALK_SUBTREE (TREE_PURPOSE (*tp));\n       break;\n \n     case OVERLOAD:"}, {"sha": "82c0f557a850654080d4c22adf9d2add02608d13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -1,3 +1,13 @@\n+2003-01-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9272\n+\t* g++.dg/parse/ctor1.C: New test.\n+\n+\tPR c++/9294:\n+\t* g++.dg/parse/qualified1.C: New test.\n+\t\n+\t* g++.dg/parse/typename3.C: New test.\n+\n 2003-01-16  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/tls/init-2.C: Fix error matches for real this time."}, {"sha": "38428842c649bbe09f34cbaa7689de6a94af8bb8", "filename": "gcc/testsuite/g++.dg/parse/ctor1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor1.C?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -0,0 +1,9 @@\n+class L {\n+public:\n+  L(int);\n+};\n+\n+class R {\n+  friend L::L(int);\n+};\n+"}, {"sha": "6dfb87e177ca54277123007e9f55aa27ed49b80e", "filename": "gcc/testsuite/g++.dg/parse/qualified1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fqualified1.C?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -0,0 +1,14 @@\n+struct A {};\n+\n+struct B : public A\n+{\n+    static void foo ();\n+};\n+\n+template <typename T> struct C\n+{\n+    C() : f(B::foo) {}\n+    void (*f)();\n+};\n+\n+C<int> c;"}, {"sha": "ce6ecbef87a1a4798d447751f2c0e7de5407c4e5", "filename": "gcc/testsuite/g++.dg/parse/typename3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dae1114bb636a814b154c3c47ff6ad149bc81de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename3.C?ref=5dae1114bb636a814b154c3c47ff6ad149bc81de", "patch": "@@ -0,0 +1,8 @@\n+template <typename T>\n+struct D2 : public T::B {\n+  typedef typename T::X::Y Y;\n+\n+  void f () {\n+    Y::f ();\n+  }\n+};"}]}