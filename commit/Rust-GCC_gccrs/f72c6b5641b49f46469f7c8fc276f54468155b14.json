{"sha": "f72c6b5641b49f46469f7c8fc276f54468155b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyYzZiNTY0MWI0OWY0NjQ2OWY3YzhmYzI3NmY1NDQ2ODE1NWIxNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-03-22T22:05:05Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-03-22T22:05:05Z"}, "message": "params.def (PARAM_MAX_SCHED_REGION_BLOCKS): New.\n\n        * params.def (PARAM_MAX_SCHED_REGION_BLOCKS): New.\n        (PARAM_MAX_SCHED_REGION_INSNS): New.\n        * sched-rgn.c: Include params.h\n        (MAX_RGN_BLOCKS): Delete.\n        (MAX_RGN_INSNS): Delete.\n        (too_large): Return bool.  Convert to PARAM_VALUE.\n        * Makefile.in (sched-rgn): Depend on $(PARAMS_H).\n        * doc/invoke.texi (param): Document max-sched-region-blocks and\n        max-sched-region-insns.\n\nFrom-SVN: r79839", "tree": {"sha": "5ebfa11c879d8a191ae0b230d5ff3a03c9494540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ebfa11c879d8a191ae0b230d5ff3a03c9494540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72c6b5641b49f46469f7c8fc276f54468155b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72c6b5641b49f46469f7c8fc276f54468155b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72c6b5641b49f46469f7c8fc276f54468155b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72c6b5641b49f46469f7c8fc276f54468155b14/comments", "author": null, "committer": null, "parents": [{"sha": "d6672e91f14a7a570de58160bf251ac82e4557a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6672e91f14a7a570de58160bf251ac82e4557a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6672e91f14a7a570de58160bf251ac82e4557a3"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "7944ad02828afdb68e6d3245079eeea354707549", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f72c6b5641b49f46469f7c8fc276f54468155b14", "patch": "@@ -1,3 +1,15 @@\n+2004-03-22  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* params.def (PARAM_MAX_SCHED_REGION_BLOCKS): New.\n+\t(PARAM_MAX_SCHED_REGION_INSNS): New.\n+\t* sched-rgn.c: Include params.h\n+\t(MAX_RGN_BLOCKS): Delete.\n+\t(MAX_RGN_INSNS): Delete.\n+\t(too_large): Return bool.  Convert to PARAM_VALUE.\n+\t* Makefile.in (sched-rgn): Depend on $(PARAMS_H).\n+\t* doc/invoke.texi (param): Document max-sched-region-blocks and\n+\tmax-sched-region-insns.\n+\n 2004-03-22  Joel Brobecker  <brobecker@gnat.com>\n \n \t* dwarf2out.c (is_subrange_type): Do not emit a subrange_type DIE"}, {"sha": "c08d18b6738e6a80af50011758e78c02d72fd1f7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f72c6b5641b49f46469f7c8fc276f54468155b14", "patch": "@@ -1816,7 +1816,7 @@ sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H)\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n-   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H)\n+   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) $(TM_P_H) $(TARGET_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(PARAMS_H)"}, {"sha": "362898f8e9858d7e17aa42c9fcb5d7dec92597c7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f72c6b5641b49f46469f7c8fc276f54468155b14", "patch": "@@ -4887,6 +4887,14 @@ The @option{reorder-block-duplicate-feedback} is used only when profile\n feedback is available and may be set to higher values than\n @option{reorder-block-duplicate} since information about the hot spots is more\n accurate.\n+\n+@item max-sched-region-blocks\n+The maximum number of blocks in a region to be considered for\n+interblock scheduling.  The default value is 10.\n+\n+@item max-sched-region-insns\",\n+The maximum number of insns in a region to be considered for\n+interblock scheduling.  The default value is 100.\n @end table\n @end table\n "}, {"sha": "c406ab87ae9e9247be5397d69fb2e6d849ec64fa", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=f72c6b5641b49f46469f7c8fc276f54468155b14", "patch": "@@ -293,6 +293,16 @@ DEFPARAM(PARAM_MAX_RELOAD_SEARCH_INSNS,\n \t \"The maximum number of instructions to search backward when looking for equivalent reload\",\n \t 100)\n \n+DEFPARAM(PARAM_MAX_SCHED_REGION_BLOCKS,\n+\t \"max-sched-region-blocks\",\n+\t \"The maximum number of blocks in a region to be considered for interblock scheduling\",\n+\t 10)\n+\n+DEFPARAM(PARAM_MAX_SCHED_REGION_INSNS,\n+\t \"max-sched-region-insns\",\n+\t \"The maximum number of insns in a region to be considered for interblock scheduling\",\n+\t 100)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "e02686d0194dcccf9569c607534eded3e80cdd67", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72c6b5641b49f46469f7c8fc276f54468155b14/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=f72c6b5641b49f46469f7c8fc276f54468155b14", "patch": "@@ -63,6 +63,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"recog.h\"\n #include \"cfglayout.h\"\n+#include \"params.h\"\n #include \"sched-int.h\"\n #include \"target.h\"\n \n@@ -83,9 +84,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define FED_BY_SPEC_LOAD(insn)\t(h_i_d[INSN_UID (insn)].fed_by_spec_load)\n #define IS_LOAD_INSN(insn)\t(h_i_d[INSN_UID (insn)].is_load_insn)\n \n-#define MAX_RGN_BLOCKS 10\n-#define MAX_RGN_INSNS 100\n-\n /* nr_inter/spec counts interblock/speculative motion for the function.  */\n static int nr_inter, nr_spec;\n \n@@ -156,7 +154,7 @@ static int *containing_rgn;\n void debug_regions (void);\n static void find_single_block_region (void);\n static void find_rgns (struct edge_list *);\n-static int too_large (int, int *, int *);\n+static bool too_large (int, int *, int *);\n \n extern void debug_live (int, int);\n \n@@ -551,19 +549,18 @@ find_single_block_region (void)\n }\n \n /* Update number of blocks and the estimate for number of insns\n-   in the region.  Return 1 if the region is \"too large\" for interblock\n-   scheduling (compile time considerations), otherwise return 0.  */\n+   in the region.  Return true if the region is \"too large\" for interblock\n+   scheduling (compile time considerations).  */\n \n-static int\n+static bool\n too_large (int block, int *num_bbs, int *num_insns)\n {\n   (*num_bbs)++;\n-  (*num_insns) += (INSN_LUID (BB_END (BASIC_BLOCK (block))) -\n-\t\t   INSN_LUID (BB_HEAD (BASIC_BLOCK (block))));\n-  if ((*num_bbs > MAX_RGN_BLOCKS) || (*num_insns > MAX_RGN_INSNS))\n-    return 1;\n-  else\n-    return 0;\n+  (*num_insns) += (INSN_LUID (BB_END (BASIC_BLOCK (block)))\n+\t\t   - INSN_LUID (BB_HEAD (BASIC_BLOCK (block))));\n+\n+  return ((*num_bbs > PARAM_VALUE (PARAM_MAX_SCHED_REGION_BLOCKS))\n+\t  || (*num_insns > PARAM_VALUE (PARAM_MAX_SCHED_REGION_INSNS)));\n }\n \n /* Update_loop_relations(blk, hdr): Check if the loop headed by max_hdr[blk]"}]}