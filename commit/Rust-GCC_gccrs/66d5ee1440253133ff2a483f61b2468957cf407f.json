{"sha": "66d5ee1440253133ff2a483f61b2468957cf407f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkNWVlMTQ0MDI1MzEzM2ZmMmE0ODNmNjFiMjQ2ODk1N2NmNDA3Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:04:05Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:04:05Z"}, "message": "arc.h (FUNCTION_ARG, [...]): Move code to...\n\n\t* config/arc/arc.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move code\n\tto...\n\t* config/arc/arc.c (arc_function_arg): ...here and...\n\t(arc_function_arg_advance): ...here.  New functions.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166041", "tree": {"sha": "28b710b563510c4e17747afc92185d41278ad5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28b710b563510c4e17747afc92185d41278ad5a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66d5ee1440253133ff2a483f61b2468957cf407f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d5ee1440253133ff2a483f61b2468957cf407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d5ee1440253133ff2a483f61b2468957cf407f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d5ee1440253133ff2a483f61b2468957cf407f/comments", "author": null, "committer": null, "parents": [{"sha": "a6a54b6fd1c70a193f64203cdf00120ae2caa580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a54b6fd1c70a193f64203cdf00120ae2caa580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a54b6fd1c70a193f64203cdf00120ae2caa580"}], "stats": {"total": 132, "additions": 77, "deletions": 55}, "files": [{"sha": "4866fbb45717738ae836cb890c7381fc3a657b5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66d5ee1440253133ff2a483f61b2468957cf407f", "patch": "@@ -1,3 +1,11 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/arc/arc.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move code\n+\tto...\n+\t* config/arc/arc.c (arc_function_arg): ...here and...\n+\t(arc_function_arg_advance): ...here.  New functions.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/crx/crx-protos.h (crx_function_arg): Delete."}, {"sha": "b12c8daf951dafecacf29819648e32c3af251baa", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=66d5ee1440253133ff2a483f61b2468957cf407f", "patch": "@@ -94,6 +94,10 @@ static void arc_external_libcall (rtx);\n static bool arc_return_in_memory (const_tree, const_tree);\n static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   const_tree, bool);\n+static rtx arc_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void arc_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n static void arc_trampoline_init (rtx, tree, rtx);\n static void arc_option_override (void);\n \n@@ -148,6 +152,10 @@ static const struct attribute_spec arc_attribute_table[] =\n #define TARGET_RETURN_IN_MEMORY arc_return_in_memory\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE arc_pass_by_reference\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG arc_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE arc_function_arg_advance\n #undef TARGET_CALLEE_COPIES\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n \n@@ -2354,6 +2362,67 @@ arc_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n   return size > 8;\n }\n \n+/* Round SIZE up to a word boundary.  */\n+#define ROUND_ADVANCE(SIZE) \\\n+(((SIZE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+/* Round arg MODE/TYPE up to the next word boundary.  */\n+#define ROUND_ADVANCE_ARG(MODE, TYPE) \\\n+((MODE) == BLKmode\t\t\t\t\\\n+ ? ROUND_ADVANCE (int_size_in_bytes (TYPE))\t\\\n+ : ROUND_ADVANCE (GET_MODE_SIZE (MODE)))\n+\n+/* Round CUM up to the necessary point for argument MODE/TYPE.  */\n+#define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) \\\n+((((MODE) == BLKmode ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) \\\n+  > BITS_PER_WORD)\t\\\n+ ? (((CUM) + 1) & ~1)\t\\\n+ : (CUM))\n+\n+/* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n+   a reg.  This includes arguments that have to be passed by reference as the\n+   pointer to them is passed in a reg if one is available (and that is what\n+   we're given).  */\n+#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n+((CUM) < MAX_ARC_PARM_REGS\t\t\t\t\t\t\\\n+ && ((ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE))\t\t\t\t\\\n+      + ROUND_ADVANCE_ARG ((MODE), (TYPE))\t\t\t\t\\\n+      <= MAX_ARC_PARM_REGS)))\n+\n+/* Determine where to put an argument to a function.\n+   Value is zero to push the argument on the stack,\n+   or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.\n+   TYPE is the data type of the argument (as a tree).\n+    This is null for libcalls where that information may\n+    not be available.\n+   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n+    the preceding args and about the function being called.\n+   NAMED is nonzero if this argument is a named parameter\n+    (otherwise it is an extra parameter matching an ellipsis).  */\n+/* On the ARC the first MAX_ARC_PARM_REGS args are normally in registers\n+   and the rest are pushed.  */\n+\n+static rtx\n+arc_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  return (PASS_IN_REG_P (*cum, mode, type)\n+\t  ? gen_rtx_REG (mode, ROUND_ADVANCE_CUM (*cum, mode, type))\n+\t  : NULL_RTX);\n+}\n+\n+/* Worker function for TARGET_FUNCTION_ARG_ADVANCE.  */\n+\n+static void\n+arc_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum = (ROUND_ADVANCE_CUM (*cum, mode, type)\n+\t  + ROUND_ADVANCE_ARG (mode, type));\n+}\n+\n /* Trampolines.  */\n /* ??? This doesn't work yet because GCC will use as the address of a nested\n    function the address of the trampoline.  We need to use that address"}, {"sha": "078914adf6fc702ad11813bc73a9ac0b8f5f588d", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d5ee1440253133ff2a483f61b2468957cf407f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=66d5ee1440253133ff2a483f61b2468957cf407f", "patch": "@@ -520,61 +520,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define FUNCTION_ARG_REGNO_P(N) \\\n ((unsigned) (N) < MAX_ARC_PARM_REGS)\n \n-/* The ROUND_ADVANCE* macros are local to this file.  */\n-/* Round SIZE up to a word boundary.  */\n-#define ROUND_ADVANCE(SIZE) \\\n-(((SIZE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n-\n-/* Round arg MODE/TYPE up to the next word boundary.  */\n-#define ROUND_ADVANCE_ARG(MODE, TYPE) \\\n-((MODE) == BLKmode\t\t\t\t\\\n- ? ROUND_ADVANCE (int_size_in_bytes (TYPE))\t\\\n- : ROUND_ADVANCE (GET_MODE_SIZE (MODE)))\n-\n-/* Round CUM up to the necessary point for argument MODE/TYPE.  */\n-#define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) \\\n-((((MODE) == BLKmode ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) \\\n-  > BITS_PER_WORD)\t\\\n- ? (((CUM) + 1) & ~1)\t\\\n- : (CUM))\n-\n-/* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n-   a reg.  This includes arguments that have to be passed by reference as the\n-   pointer to them is passed in a reg if one is available (and that is what\n-   we're given).\n-   This macro is only used in this file.  */\n-#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n-((CUM) < MAX_ARC_PARM_REGS\t\t\t\t\t\t\\\n- && ((ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE))\t\t\t\t\\\n-      + ROUND_ADVANCE_ARG ((MODE), (TYPE))\t\t\t\t\\\n-      <= MAX_ARC_PARM_REGS)))\n-\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-/* On the ARC the first MAX_ARC_PARM_REGS args are normally in registers\n-   and the rest are pushed.  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-(PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\t\t\\\n- ? gen_rtx_REG ((MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n- : 0)\n-\n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-((CUM) = (ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)) \\\n-\t  + ROUND_ADVANCE_ARG ((MODE), (TYPE))))\n-\n /* If defined, a C expression that gives the alignment boundary, in bits,\n    of an argument with the specified mode and type.  If it is not defined, \n    PARM_BOUNDARY is used for all arguments.  */"}]}