{"sha": "5f25f457eca1e04e577aae8e60fe640bb32d36fc", "node_id": "C_kwDOANBUbNoAKDVmMjVmNDU3ZWNhMWUwNGU1NzdhYWU4ZTYwZmU2NDBiYjMyZDM2ZmM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T16:18:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-19T18:32:47Z"}, "message": "Add hir lowering of closure expressions\n\nIn the AST we have ClosureExprInner and ClosureExprInnerTyped the first\nis the closure expression of the form:\n\n    let closure_inferred  = |i| i + 1;\n\nThe second is of the form:\n\n    let closure_annotated = |i: i32| -> i32 { i + 1 };\n\nBoth of these can be seguared into a single HIR::ClosureExpr with an\noptional return type and parameter types.\n\nAddresses #195", "tree": {"sha": "a7d78407c59d8614c4b20687da9421a2d3fce5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d78407c59d8614c4b20687da9421a2d3fce5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f25f457eca1e04e577aae8e60fe640bb32d36fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f25f457eca1e04e577aae8e60fe640bb32d36fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f25f457eca1e04e577aae8e60fe640bb32d36fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f25f457eca1e04e577aae8e60fe640bb32d36fc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851b9e14585160f70eb17a9b312c14e3a0d4c3ed"}], "stats": {"total": 413, "additions": 206, "deletions": 207}, "files": [{"sha": "c58fae5e564501c1e67c2aeaffeaa5f30f8f7bfa", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -2134,8 +2134,6 @@ struct ClosureParam\n private:\n   std::vector<Attribute> outer_attrs;\n   std::unique_ptr<Pattern> pattern;\n-\n-  // bool has_type_given;\n   std::unique_ptr<Type> type;\n   Location locus;\n \n@@ -2202,19 +2200,19 @@ struct ClosureParam\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Pattern> &get_pattern ()\n   {\n     rust_assert (pattern != nullptr);\n     return pattern;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type ()\n   {\n     rust_assert (has_type_given ());\n     return type;\n   }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Base closure definition expression AST node - abstract\n@@ -2248,6 +2246,8 @@ class ClosureExpr : public ExprWithoutBlock\n   {\n     outer_attrs = std::move (new_attrs);\n   }\n+\n+  bool get_has_move () const { return has_move; }\n };\n \n // Represents a non-type-specified closure expression AST node\n@@ -2307,7 +2307,6 @@ class ClosureExprInner : public ClosureExpr\n     return closure_inner == nullptr;\n   }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Expr> &get_definition_expr ()\n   {\n     rust_assert (closure_inner != nullptr);"}, {"sha": "8f62f45a4c39117316388127c61a0f9e06a5772a", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -57,8 +57,7 @@ class CompileConditionalBlocks : public HIRCompileBase,\n   // Empty visit for unused Expression HIR nodes.\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::ClosureExpr &) override {}\n   void visit (HIR::StructExprFieldIdentifier &) override {}\n   void visit (HIR::StructExprFieldIdentifierValue &) override {}\n   void visit (HIR::StructExprFieldIndexValue &) override {}\n@@ -146,8 +145,7 @@ class CompileExprWithBlock : public HIRCompileBase,\n   // Empty visit for unused Expression HIR nodes.\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n+  void visit (HIR::ClosureExpr &) override {}\n   void visit (HIR::StructExprFieldIdentifier &) override {}\n   void visit (HIR::StructExprFieldIdentifierValue &) override {}\n   void visit (HIR::StructExprFieldIndexValue &) override {}"}, {"sha": "d66aa5d89f397ef49988ac2d92055747da769f76", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -2798,5 +2798,11 @@ CompileExpr::visit (HIR::ArrayIndexExpr &expr)\n \t\t\t\t\t\t   expr.get_locus ());\n }\n \n+void\n+CompileExpr::visit (HIR::ClosureExpr &expr)\n+{\n+  gcc_unreachable ();\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "fee2ba73d70e878d5d985f3688edced77b25e4b0", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -67,10 +67,9 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n   void visit (HIR::RangeToExpr &expr) override;\n   void visit (HIR::RangeFullExpr &expr) override;\n   void visit (HIR::RangeFromToInclExpr &expr) override;\n+  void visit (HIR::ClosureExpr &expr) override;\n \n   // TODO\n-  void visit (HIR::ClosureExprInner &) override {}\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n   void visit (HIR::ErrorPropagationExpr &) override {}\n   void visit (HIR::RangeToInclExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}"}, {"sha": "a8280583a64c7c677efab4a46c836888107fbfa9", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -408,7 +408,7 @@ PrivacyReporter::visit (HIR::FieldAccessExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::ClosureExprInner &expr)\n+PrivacyReporter::visit (HIR::ClosureExpr &expr)\n {\n   // Not handled yet\n }\n@@ -424,12 +424,6 @@ PrivacyReporter::visit (HIR::BlockExpr &expr)\n     last_expr->accept_vis (*this);\n }\n \n-void\n-PrivacyReporter::visit (HIR::ClosureExprInnerTyped &expr)\n-{\n-  // Not handled yet\n-}\n-\n void\n PrivacyReporter::visit (HIR::ContinueExpr &expr)\n {}"}, {"sha": "38a5f08fcdd791bf4011362b62f8a52ff46c601c", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -83,8 +83,7 @@ types\n \n   virtual void visit (HIR::QualifiedPathInExpression &expr);\n   virtual void visit (HIR::PathInExpression &expr);\n-  virtual void visit (HIR::ClosureExprInnerTyped &);\n-  virtual void visit (HIR::ClosureExprInner &expr);\n+  virtual void visit (HIR::ClosureExpr &expr);\n   virtual void visit (HIR::StructExprStructFields &);\n   virtual void visit (HIR::StructExprStruct &);\n   virtual void visit (HIR::LiteralExpr &expr);"}, {"sha": "4b4350e881f8f535a112b311f060110a6a67b8eb", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -382,7 +382,7 @@ ConstChecker::visit (FieldAccessExpr &expr)\n }\n \n void\n-ConstChecker::visit (ClosureExprInner &expr)\n+ConstChecker::visit (ClosureExpr &expr)\n {}\n \n void\n@@ -395,10 +395,6 @@ ConstChecker::visit (BlockExpr &expr)\n     expr.get_final_expr ()->accept_vis (*this);\n }\n \n-void\n-ConstChecker::visit (ClosureExprInnerTyped &expr)\n-{}\n-\n void\n ConstChecker::visit (ContinueExpr &expr)\n {}"}, {"sha": "f0175df940d20526d5decc0f22886d9fee45d679", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -111,9 +111,8 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (CallExpr &expr) override;\n   virtual void visit (MethodCallExpr &expr) override;\n   virtual void visit (FieldAccessExpr &expr) override;\n-  virtual void visit (ClosureExprInner &expr) override;\n+  virtual void visit (ClosureExpr &expr) override;\n   virtual void visit (BlockExpr &expr) override;\n-  virtual void visit (ClosureExprInnerTyped &expr) override;\n   virtual void visit (ContinueExpr &expr) override;\n   virtual void visit (BreakExpr &expr) override;\n   virtual void visit (RangeFromToExpr &expr) override;"}, {"sha": "8dff50b38f15f7be38982915b014d647d5c885dc", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -453,7 +453,7 @@ UnsafeChecker::visit (FieldAccessExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (ClosureExprInner &expr)\n+UnsafeChecker::visit (ClosureExpr &expr)\n {}\n \n void\n@@ -466,10 +466,6 @@ UnsafeChecker::visit (BlockExpr &expr)\n     expr.get_final_expr ()->accept_vis (*this);\n }\n \n-void\n-UnsafeChecker::visit (ClosureExprInnerTyped &expr)\n-{}\n-\n void\n UnsafeChecker::visit (ContinueExpr &expr)\n {}"}, {"sha": "fe564a2088ec9d572e2eb19af6346020cbd14dd4", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -88,9 +88,8 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (CallExpr &expr) override;\n   virtual void visit (MethodCallExpr &expr) override;\n   virtual void visit (FieldAccessExpr &expr) override;\n-  virtual void visit (ClosureExprInner &expr) override;\n+  virtual void visit (ClosureExpr &expr) override;\n   virtual void visit (BlockExpr &expr) override;\n-  virtual void visit (ClosureExprInnerTyped &expr) override;\n   virtual void visit (ContinueExpr &expr) override;\n   virtual void visit (BreakExpr &expr) override;\n   virtual void visit (RangeFromToExpr &expr) override;"}, {"sha": "16fe13c8242cd9bf29af8903bf878d665ca2160d", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -313,6 +313,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::Literal lower_literal (const AST::Literal &literal);\n \n   HIR::ExternBlock *lower_extern_block (AST::ExternBlock &extern_block);\n+\n+  HIR::ClosureParam lower_closure_param (AST::ClosureParam &param);\n };\n \n } // namespace HIR"}, {"sha": "df4ba9d29114136a5ef31cded675c3bc518a60c7", "filename": "gcc/rust/hir/rust-ast-lower-expr.cc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -753,5 +753,58 @@ ASTLoweringExpr::visit (AST::RangeFromToInclExpr &expr)\n \t\t\t\t    expr.get_locus ());\n }\n \n+void\n+ASTLoweringExpr::visit (AST::ClosureExprInner &expr)\n+{\n+  HIR::Expr *closure_expr\n+    = ASTLoweringExpr::translate (expr.get_definition_expr ().get ());\n+\n+  std::vector<HIR::ClosureParam> closure_params;\n+  for (auto &param : expr.get_params ())\n+    {\n+      HIR::ClosureParam p = lower_closure_param (param);\n+      closure_params.push_back (std::move (p));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::ClosureExpr (mapping, std::move (closure_params),\n+\t\t\t    nullptr /* closure_return_type */,\n+\t\t\t    std::unique_ptr<HIR::Expr> (closure_expr),\n+\t\t\t    expr.get_has_move (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ClosureExprInnerTyped &expr)\n+{\n+  HIR::Type *closure_return_type = nullptr;\n+  HIR::Expr *closure_expr\n+    = ASTLoweringExpr::translate (expr.get_definition_block ().get ());\n+\n+  std::vector<HIR::ClosureParam> closure_params;\n+  for (auto &param : expr.get_params ())\n+    {\n+      HIR::ClosureParam p = lower_closure_param (param);\n+      closure_params.push_back (std::move (p));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::ClosureExpr (mapping, std::move (closure_params),\n+\t\t\t    std::unique_ptr<HIR::Type> (closure_return_type),\n+\t\t\t    std::unique_ptr<HIR::Expr> (closure_expr),\n+\t\t\t    expr.get_has_move (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "0963e40c5f0d6327be8a24c63b8356d2716490fc", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -116,6 +116,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n   void visit (AST::RangeToExpr &expr) override;\n   void visit (AST::RangeFullExpr &expr) override;\n   void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n \n private:\n   ASTLoweringExpr ();"}, {"sha": "52b7003a04a7182451cc8b498ef45a8b557d2368", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -22,9 +22,12 @@\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-block.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-struct-field-expr.h\"\n \n namespace Rust {\n namespace HIR {\n+using HIR::ClosureParam;\n \n Visibility\n translate_visibility (const AST::Visibility &vis)\n@@ -473,5 +476,25 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n \t\t\t\t\t\t   expr.get_locus (),\n \t\t\t\t\t\t   expr.get_outer_attrs ());\n }\n+\n+ClosureParam\n+ASTLoweringBase::lower_closure_param (AST::ClosureParam &param)\n+{\n+  HIR::Pattern *param_pattern\n+    = ASTLoweringPattern::translate (param.get_pattern ().get ());\n+\n+  HIR::Type *param_type\n+    = param.has_type_given ()\n+\t? ASTLoweringType::translate (param.get_type ().get ())\n+\t: nullptr;\n+\n+  return HIR::ClosureParam (std::unique_ptr<HIR::Pattern> (param_pattern),\n+\t\t\t    param.get_locus (),\n+\t\t\t    param.has_type_given ()\n+\t\t\t      ? std::unique_ptr<HIR::Type> (param_type)\n+\t\t\t      : nullptr,\n+\t\t\t    param.get_outer_attrs ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "11d4cd10527e042acd5a2ea0178883e89b78c006", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -197,7 +197,7 @@ void\n Dump::visit (FieldAccessExpr &)\n {}\n void\n-Dump::visit (ClosureExprInner &)\n+Dump::visit (ClosureExpr &)\n {}\n void\n Dump::visit (BlockExpr &block_expr)\n@@ -212,9 +212,7 @@ Dump::visit (BlockExpr &block_expr)\n   stream << \"]\";\n   indent--;\n }\n-void\n-Dump::visit (ClosureExprInnerTyped &)\n-{}\n+\n void\n Dump::visit (ContinueExpr &)\n {}"}, {"sha": "1953efeffd68e18a4d4363df81d24d8e031b98e7", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -78,9 +78,8 @@ class Dump : public HIRFullVisitor\n   virtual void visit (CallExpr &) override;\n   virtual void visit (MethodCallExpr &) override;\n   virtual void visit (FieldAccessExpr &) override;\n-  virtual void visit (ClosureExprInner &) override;\n+  virtual void visit (ClosureExpr &) override;\n   virtual void visit (BlockExpr &) override;\n-  virtual void visit (ClosureExprInnerTyped &) override;\n   virtual void visit (ContinueExpr &) override;\n   virtual void visit (BreakExpr &) override;\n   virtual void visit (RangeFromToExpr &) override;"}, {"sha": "c3180d888cfa6e64a08f0ab04130950882f31d94", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 89, "deletions": 124, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -1985,28 +1985,31 @@ class FieldAccessExpr : public ExprWithoutBlock\n struct ClosureParam\n {\n private:\n+  std::vector<AST::Attribute> outer_attrs;\n   std::unique_ptr<Pattern> pattern;\n-\n-  // bool has_type_given;\n   std::unique_ptr<Type> type;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Returns whether the type of the parameter has been given.\n   bool has_type_given () const { return type != nullptr; }\n \n   // Constructor for closure parameter\n-  ClosureParam (std::unique_ptr<Pattern> param_pattern,\n-\t\tstd::unique_ptr<Type> param_type = nullptr)\n-    : pattern (std::move (param_pattern)), type (std::move (param_type))\n+  ClosureParam (std::unique_ptr<Pattern> param_pattern, Location locus,\n+\t\tstd::unique_ptr<Type> param_type = nullptr,\n+\t\tstd::vector<AST::Attribute> outer_attrs = {})\n+    : outer_attrs (std::move (outer_attrs)),\n+      pattern (std::move (param_pattern)), type (std::move (param_type)),\n+      locus (locus)\n   {}\n \n   // Copy constructor required due to cloning as a result of unique_ptrs\n   ClosureParam (ClosureParam const &other)\n     : pattern (other.pattern->clone_pattern ())\n   {\n     // guard to protect from null pointer dereference\n+    if (other.pattern != nullptr)\n+      pattern = other.pattern->clone_pattern ();\n     if (other.type != nullptr)\n       type = other.type->clone_type ();\n   }\n@@ -2016,8 +2019,17 @@ struct ClosureParam\n   // Assignment operator must be overloaded to clone as well\n   ClosureParam &operator= (ClosureParam const &other)\n   {\n-    pattern = other.pattern->clone_pattern ();\n-    type = other.type->clone_type ();\n+    outer_attrs = other.outer_attrs;\n+\n+    // guard to protect from null pointer dereference\n+    if (other.pattern != nullptr)\n+      pattern = other.pattern->clone_pattern ();\n+    else\n+      pattern = nullptr;\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+    else\n+      type = nullptr;\n \n     return *this;\n   }\n@@ -2026,31 +2038,79 @@ struct ClosureParam\n   ClosureParam (ClosureParam &&other) = default;\n   ClosureParam &operator= (ClosureParam &&other) = default;\n \n-  // Returns whether closure parameter is in an error state.\n-  bool is_error () const { return pattern == nullptr; }\n+  std::string as_string () const;\n \n-  // Creates an error state closure parameter.\n-  static ClosureParam create_error () { return ClosureParam (nullptr); }\n+  const std::vector<AST::Attribute> &get_outer_attrs () const\n+  {\n+    return outer_attrs;\n+  }\n+  std::vector<AST::Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  std::string as_string () const;\n+  std::unique_ptr<Pattern> &get_pattern ()\n+  {\n+    rust_assert (pattern != nullptr);\n+    return pattern;\n+  }\n+\n+  std::unique_ptr<Type> &get_type ()\n+  {\n+    rust_assert (has_type_given ());\n+    return type;\n+  }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Base closure definition expression HIR node - abstract\n class ClosureExpr : public ExprWithoutBlock\n {\n+private:\n   bool has_move;\n   std::vector<ClosureParam> params;\n   Location locus;\n+  std::unique_ptr<Type> return_type;\n+  std::unique_ptr<Expr> expr;\n \n-protected:\n+public:\n   ClosureExpr (Analysis::NodeMapping mappings,\n-\t       std::vector<ClosureParam> closure_params, bool has_move,\n+\t       std::vector<ClosureParam> closure_params,\n+\t       std::unique_ptr<Type> closure_return_type,\n+\t       std::unique_ptr<Expr> closure_expr, bool has_move,\n \t       AST::AttrVec outer_attribs, Location locus)\n     : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n-      has_move (has_move), params (std::move (closure_params)), locus (locus)\n+      has_move (has_move), params (std::move (closure_params)), locus (locus),\n+      return_type (std::move (closure_return_type)),\n+      expr (std::move (closure_expr))\n   {}\n \n-public:\n+  // Copy constructor requires cloning\n+  ClosureExpr (ClosureExpr const &other)\n+    : ExprWithoutBlock (other.get_mappings (), other.get_outer_attrs ())\n+  {\n+    return_type\n+      = other.has_return_type () ? other.return_type->clone_type () : nullptr;\n+    expr = other.expr->clone_expr ();\n+    params = other.params;\n+    has_move = other.has_move;\n+  }\n+\n+  // Overload assignment operator to clone unique_ptrs\n+  ClosureExpr &operator= (ClosureExpr const &other)\n+  {\n+    mappings = other.mappings;\n+    return_type\n+      = other.has_return_type () ? other.return_type->clone_type () : nullptr;\n+    expr = other.expr->clone_expr ();\n+    params = other.params;\n+    has_move = other.has_move;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  ClosureExpr (ClosureExpr &&other) = default;\n+  ClosureExpr &operator= (ClosureExpr &&other) = default;\n+\n   std::string as_string () const override;\n \n   Location get_locus () const override final { return locus; }\n@@ -2059,64 +2119,34 @@ class ClosureExpr : public ExprWithoutBlock\n   {\n     return ExprType::Closure;\n   }\n-};\n \n-// Represents a non-type-specified closure expression HIR node\n-class ClosureExprInner : public ClosureExpr\n-{\n-  std::unique_ptr<Expr> closure_inner;\n+  bool get_has_move () const { return has_move; }\n \n-public:\n-  std::string as_string () const override;\n+  bool has_return_type () const { return return_type != nullptr; }\n \n-  // Constructor for a ClosureExprInner\n-  ClosureExprInner (Analysis::NodeMapping mappings,\n-\t\t    std::unique_ptr<Expr> closure_inner_expr,\n-\t\t    std::vector<ClosureParam> closure_params, Location locus,\n-\t\t    bool is_move = false,\n-\t\t    AST::AttrVec outer_attribs = AST::AttrVec ())\n-    : ClosureExpr (std::move (mappings), std::move (closure_params), is_move,\n-\t\t   std::move (outer_attribs), locus),\n-      closure_inner (std::move (closure_inner_expr))\n-  {}\n-\n-  // Copy constructor must be defined to allow copying via cloning of unique_ptr\n-  ClosureExprInner (ClosureExprInner const &other)\n-    : ClosureExpr (other), closure_inner (other.closure_inner->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone closure_inner\n-  ClosureExprInner &operator= (ClosureExprInner const &other)\n+  std::unique_ptr<Type> &get_return_type ()\n   {\n-    ClosureExpr::operator= (other);\n-    closure_inner = other.closure_inner->clone_expr ();\n-    // params = other.params;\n-    // has_move = other.has_move;\n-    // outer_attrs = other.outer_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ClosureExprInner (ClosureExprInner &&other) = default;\n-  ClosureExprInner &operator= (ClosureExprInner &&other) = default;\n+    rust_assert (has_return_type ());\n+    return return_type;\n+  };\n+  std::unique_ptr<Expr> &get_expr () { return expr; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ClosureExprInner *clone_expr_impl () const override\n+  ClosureExpr *clone_expr_impl () const override\n   {\n-    return new ClosureExprInner (*this);\n+    return new ClosureExpr (*this);\n   }\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  ClosureExprInner *clone_expr_without_block_impl () const override\n+  ClosureExpr *clone_expr_without_block_impl () const override\n   {\n-    return new ClosureExprInner (*this);\n+    return new ClosureExpr (*this);\n   }\n };\n \n@@ -2239,71 +2269,6 @@ class BlockExpr : public ExprWithBlock\n   }\n };\n \n-// Represents a type-specified closure expression HIR node\n-class ClosureExprInnerTyped : public ClosureExpr\n-{\n-  std::unique_ptr<Type> return_type;\n-  std::unique_ptr<BlockExpr>\n-    expr; // only used because may be polymorphic in future\n-\n-public:\n-  std::string as_string () const override;\n-\n-  // Constructor potentially with a move\n-  ClosureExprInnerTyped (Analysis::NodeMapping mappings,\n-\t\t\t std::unique_ptr<Type> closure_return_type,\n-\t\t\t std::unique_ptr<BlockExpr> closure_expr,\n-\t\t\t std::vector<ClosureParam> closure_params,\n-\t\t\t Location locus, bool is_move = false,\n-\t\t\t AST::AttrVec outer_attribs = AST::AttrVec ())\n-    : ClosureExpr (std::move (mappings), std::move (closure_params), is_move,\n-\t\t   std::move (outer_attribs), locus),\n-      return_type (std::move (closure_return_type)),\n-      expr (std::move (closure_expr))\n-  {}\n-\n-  // Copy constructor requires cloning\n-  ClosureExprInnerTyped (ClosureExprInnerTyped const &other)\n-    : ClosureExpr (other), return_type (other.return_type->clone_type ()),\n-      expr (other.expr->clone_block_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone unique_ptrs\n-  ClosureExprInnerTyped &operator= (ClosureExprInnerTyped const &other)\n-  {\n-    ClosureExpr::operator= (other);\n-    return_type = other.return_type->clone_type ();\n-    expr = other.expr->clone_block_expr ();\n-    // params = other.params;\n-    // has_move = other.has_move;\n-    // outer_attrs = other.outer_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ClosureExprInnerTyped (ClosureExprInnerTyped &&other) = default;\n-  ClosureExprInnerTyped &operator= (ClosureExprInnerTyped &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ClosureExprInnerTyped *clone_expr_impl () const override\n-  {\n-    return new ClosureExprInnerTyped (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ClosureExprInnerTyped *clone_expr_without_block_impl () const override\n-  {\n-    return new ClosureExprInnerTyped (*this);\n-  }\n-};\n-\n // HIR node representing continue expression within loops\n class ContinueExpr : public ExprWithoutBlock\n {"}, {"sha": "717facff687aef96f838403d7c7d479d9980daeb", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -94,9 +94,7 @@ class MethodCallExpr;\n class FieldAccessExpr;\n struct ClosureParam;\n class ClosureExpr;\n-class ClosureExprInner;\n class BlockExpr;\n-class ClosureExprInnerTyped;\n class ContinueExpr;\n class BreakExpr;\n class RangeExpr;"}, {"sha": "7e5b49db1dcbb08345e7c951a2d1f59403f449e9", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -1133,15 +1133,8 @@ ClosureExpr::as_string () const\n \t}\n     }\n \n-  return str;\n-}\n-\n-std::string\n-ClosureExprInnerTyped::as_string () const\n-{\n-  std::string str = ClosureExpr::as_string ();\n-\n-  str += \"\\n Return type: \" + return_type->as_string ();\n+  str += \"\\n Return type: \"\n+\t + (has_return_type () ? return_type->as_string () : \"none\");\n \n   str += \"\\n Body: \" + expr->as_string ();\n \n@@ -1515,16 +1508,6 @@ UnsafeBlockExpr::as_string () const\n   return str + \"\\n\" + indent_spaces (out) + \"}\\n\" + expr->as_string ();\n }\n \n-std::string\n-ClosureExprInner::as_string () const\n-{\n-  std::string str = ClosureExpr::as_string ();\n-\n-  str += \"\\n Expression: \" + closure_inner->as_string ();\n-\n-  return str;\n-}\n-\n std::string\n IfExpr::as_string () const\n {\n@@ -4038,7 +4021,7 @@ FieldAccessExpr::accept_vis (HIRFullVisitor &vis)\n }\n \n void\n-ClosureExprInner::accept_vis (HIRFullVisitor &vis)\n+ClosureExpr::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4049,12 +4032,6 @@ BlockExpr::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-ClosureExprInnerTyped::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n ContinueExpr::accept_vis (HIRFullVisitor &vis)\n {\n@@ -4986,7 +4963,7 @@ IfExpr::accept_vis (HIRExpressionVisitor &vis)\n }\n \n void\n-ClosureExprInner::accept_vis (HIRExpressionVisitor &vis)\n+ClosureExpr::accept_vis (HIRExpressionVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -5075,12 +5052,6 @@ QualifiedPathInExpression::accept_vis (HIRPatternVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-ClosureExprInnerTyped::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n ExprStmtWithBlock::accept_vis (HIRStmtVisitor &vis)\n {"}, {"sha": "a92279210fd184e00f8f0572bea58de6c69511db", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -63,9 +63,8 @@ class HIRFullVisitor\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;\n-  virtual void visit (ClosureExprInner &expr) = 0;\n   virtual void visit (BlockExpr &expr) = 0;\n-  virtual void visit (ClosureExprInnerTyped &expr) = 0;\n+  virtual void visit (ClosureExpr &expr) = 0;\n   virtual void visit (ContinueExpr &expr) = 0;\n   virtual void visit (BreakExpr &expr) = 0;\n   virtual void visit (RangeFromToExpr &expr) = 0;\n@@ -206,9 +205,8 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (CallExpr &) override {}\n   virtual void visit (MethodCallExpr &) override {}\n   virtual void visit (FieldAccessExpr &) override {}\n-  virtual void visit (ClosureExprInner &) override {}\n+  virtual void visit (ClosureExpr &) override {}\n   virtual void visit (BlockExpr &) override {}\n-  virtual void visit (ClosureExprInnerTyped &) override {}\n   virtual void visit (ContinueExpr &) override {}\n   virtual void visit (BreakExpr &) override {}\n   virtual void visit (RangeFromToExpr &) override {}\n@@ -419,8 +417,7 @@ class HIRExpressionVisitor\n \n   virtual void visit (HIR::QualifiedPathInExpression &expr) = 0;\n   virtual void visit (HIR::PathInExpression &expr) = 0;\n-  virtual void visit (ClosureExprInnerTyped &) = 0;\n-  virtual void visit (ClosureExprInner &expr) = 0;\n+  virtual void visit (ClosureExpr &) = 0;\n   virtual void visit (StructExprStructFields &) = 0;\n   virtual void visit (StructExprStruct &) = 0;\n   virtual void visit (LiteralExpr &expr) = 0;"}, {"sha": "97c20c978fcc48940afa9c4799c419ccf7a520d2", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -238,6 +238,7 @@ class ExprWithoutBlock;\n // Base expression HIR node - abstract\n class Expr : public Node\n {\n+protected:\n   AST::AttrVec outer_attrs;\n   Analysis::NodeMapping mappings;\n "}, {"sha": "df4ddfab1dc2d04983d1f3fcbb197f798bad6470", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -1418,6 +1418,12 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n     }\n }\n \n+void\n+TypeCheckExpr::visit (HIR::ClosureExpr &expr)\n+{\n+  gcc_unreachable ();\n+}\n+\n bool\n TypeCheckExpr::resolve_operator_overload (\n   Analysis::RustLangItem::ItemType lang_item_type, HIR::OperatorExprMeta expr,"}, {"sha": "bf36e19023a32660e5bd37dd5335b1f6c4d05701", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f25f457eca1e04e577aae8e60fe640bb32d36fc/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=5f25f457eca1e04e577aae8e60fe640bb32d36fc", "patch": "@@ -69,10 +69,9 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::RangeFullExpr &expr) override;\n   void visit (HIR::RangeFromToInclExpr &expr) override;\n   void visit (HIR::WhileLoopExpr &expr) override;\n+  void visit (HIR::ClosureExpr &expr) override;\n \n   // TODO\n-  void visit (HIR::ClosureExprInnerTyped &) override {}\n-  void visit (HIR::ClosureExprInner &expr) override {}\n   void visit (HIR::ErrorPropagationExpr &expr) override {}\n   void visit (HIR::RangeToInclExpr &expr) override {}\n   void visit (HIR::WhileLetLoopExpr &expr) override {}"}]}