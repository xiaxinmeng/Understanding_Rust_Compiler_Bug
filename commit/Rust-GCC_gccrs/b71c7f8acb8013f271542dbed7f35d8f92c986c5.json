{"sha": "b71c7f8acb8013f271542dbed7f35d8f92c986c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcxYzdmOGFjYjgwMTNmMjcxNTQyZGJlZDdmMzVkOGY5MmM5ODZjNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-15T23:30:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-15T23:30:48Z"}, "message": "(missing_braces_mentioned): Renamed from `partial_bracket_mentioned'.\n\n(start_init): Clear `missing_braces_mentioned'.\n(warning_init): New function.\n(push_init_level): Optionally warn about missing braces.\nWhen warning about braces around scalars, identify which scalars.\n\nFrom-SVN: r6239", "tree": {"sha": "0e075f3d074525df51eec116f2fe45fed31e84b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e075f3d074525df51eec116f2fe45fed31e84b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b71c7f8acb8013f271542dbed7f35d8f92c986c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71c7f8acb8013f271542dbed7f35d8f92c986c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71c7f8acb8013f271542dbed7f35d8f92c986c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71c7f8acb8013f271542dbed7f35d8f92c986c5/comments", "author": null, "committer": null, "parents": [{"sha": "a50c47ec1758689fd6efb05259ab7af5a0ebcc37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50c47ec1758689fd6efb05259ab7af5a0ebcc37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50c47ec1758689fd6efb05259ab7af5a0ebcc37"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "ab1e4fae43a8e11d71826ebf536639254838587d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71c7f8acb8013f271542dbed7f35d8f92c986c5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71c7f8acb8013f271542dbed7f35d8f92c986c5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b71c7f8acb8013f271542dbed7f35d8f92c986c5", "patch": "@@ -33,9 +33,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n \n-/* Nonzero if we've already printed a \"partly bracketed initializer\"\n+/* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */\n-static int partial_bracket_mentioned = 0;\n+static int missing_braces_mentioned;\n \n extern char *index ();\n extern char *rindex ();\n@@ -4439,6 +4439,32 @@ pedwarn_init (format, local, ofwhat)\n \n   pedwarn (format, buffer);\n }\n+\n+/* Issue a warning for a bad initializer component.\n+   FORMAT describes the message.  OFWHAT is the name for the component.\n+   LOCAL is a format string for formatting the insertion of the name\n+   into the message.\n+\n+   If OFWHAT is null, the component name is stored on the spelling stack.\n+   If the component name is a null string, then LOCAL is omitted entirely.  */\n+\n+static void\n+warning_init (format, local, ofwhat)\n+     char *format, *local, *ofwhat;\n+{\n+  char *buffer;\n+\n+  if (ofwhat == 0)\n+    ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n+  buffer = (char *) alloca (strlen (local) + strlen (ofwhat) + 2);\n+\n+  if (*ofwhat)\n+    sprintf (buffer, local, ofwhat);\n+  else\n+    buffer[0] = 0;\n+\n+  warning (format, buffer);\n+}\n \f\n /* Digest the parser output INIT as an initializer for type TYPE.\n    Return a C expression of type TYPE to represent the initial value.\n@@ -4865,6 +4891,8 @@ start_init (decl, asmspec_tree, top_level)\n \n   constructor_stack = 0;\n \n+  missing_braces_mentioned = 0;\n+\n   spelling_base = 0;\n   spelling_size = 0;\n   RESTORE_SPELLING_DEPTH (0);\n@@ -5105,18 +5133,25 @@ push_init_level (implicit)\n       push_array_bounds (TREE_INT_CST_LOW (constructor_index));\n     }\n \n-  /* Turn off constructor_incremental if type is a struct with bitfields.  */\n-  if (constructor_type != 0)\n-    check_init_type_bitfields (constructor_type);\n-\n   if (constructor_type == 0)\n     {\n       error_init (\"extra brace group at end of initializer%s\",\n \t\t  \" for `%s'\", NULL);\n       constructor_fields = 0;\n       constructor_unfilled_fields = 0;\n+      return;\n     }\n-  else if (TREE_CODE (constructor_type) == RECORD_TYPE\n+\n+  /* Turn off constructor_incremental if type is a struct with bitfields.  */\n+  check_init_type_bitfields (constructor_type);\n+\n+  if (implicit && warn_missing_braces && !missing_braces_mentioned)\n+    {\n+      missing_braces_mentioned = 1;\n+      warning_init (\"missing braces around initializer%s\", \" for `%s'\", NULL);\n+    }\n+\n+  if (TREE_CODE (constructor_type) == RECORD_TYPE\n \t   || TREE_CODE (constructor_type) == UNION_TYPE)\n     {\n       constructor_fields = TYPE_FIELDS (constructor_type);\n@@ -5143,7 +5178,7 @@ push_init_level (implicit)\n     }\n   else\n     {\n-      warning (\"braces around scalar initializer\");\n+      warning_init (\"braces around scalar initializer%s\", \" for `%s'\", NULL);\n       constructor_fields = constructor_type;\n       constructor_unfilled_fields = constructor_type;\n     }"}]}