{"sha": "f2ee78b861b8daab2675e1a24798b1069f763dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlZTc4Yjg2MWI4ZGFhYjI2NzVlMWEyNDc5OGIxMDY5Zjc2M2RjMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-12T06:34:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-12T06:34:08Z"}, "message": "Preliminary framework for Solaris support.\n\nPartly from Rainer Orth.\n\nFrom-SVN: r168697", "tree": {"sha": "f6ea31c859488c93306c1cfb3148540b52d840b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ea31c859488c93306c1cfb3148540b52d840b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ee78b861b8daab2675e1a24798b1069f763dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ee78b861b8daab2675e1a24798b1069f763dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ee78b861b8daab2675e1a24798b1069f763dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ee78b861b8daab2675e1a24798b1069f763dc0/comments", "author": null, "committer": null, "parents": [{"sha": "c3b5b97b64685cee2635d0dc61425a5add983a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b5b97b64685cee2635d0dc61425a5add983a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b5b97b64685cee2635d0dc61425a5add983a39"}], "stats": {"total": 499, "additions": 423, "deletions": 76}, "files": [{"sha": "0259a0effdb8aa37d9dffa7f9fe3ab43e3695d0b", "filename": "libgo/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -1188,7 +1188,8 @@ libgo_go_objs = \\\n \n libgo_la_SOURCES = $(runtime_files)\n \n-libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS)\n+libgo_la_LIBADD = \\\n+\t$(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n \n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n@@ -1203,8 +1204,7 @@ LTGOCOMPILE = $(LIBTOOL) --tag GO --mode=compile $(GOC) $(INCLUDES) \\\n \t$(AM_GOCFLAGS) $(GOCFLAGS)\n \n GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n-\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) \\\n-\t$(PTHREAD_LIBS) $(MATH_LIBS) -o $@\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) -o $@\n \n # Build a package.\n BUILDARCHIVE = \\"}, {"sha": "8ef2a43bc155ad0dad61d29543bf47ed7d9830e0", "filename": "libgo/Makefile.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -121,7 +121,8 @@ libgobegin_a_OBJECTS = $(am_libgobegin_a_OBJECTS)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n libgo_la_DEPENDENCIES = $(libgo_go_objs) $(am__DEPENDENCIES_1) \\\n-\t$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)\n+\t$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \\\n+\t$(am__DEPENDENCIES_1)\n am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-assert-interface.c \\\n \truntime/go-byte-array-to-string.c runtime/go-breakpoint.c \\\n@@ -329,6 +330,7 @@ MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n MATH_LIBS = @MATH_LIBS@\n MKDIR_P = @MKDIR_P@\n+NET_LIBS = @NET_LIBS@\n NM = @NM@\n NMEDIT = @NMEDIT@\n OBJCOPY = @OBJCOPY@\n@@ -1541,7 +1543,9 @@ libgo_go_objs = \\\n \ttesting/libscript.la\n \n libgo_la_SOURCES = $(runtime_files)\n-libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS)\n+libgo_la_LIBADD = \\\n+\t$(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n+\n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n \n@@ -1552,8 +1556,7 @@ LTGOCOMPILE = $(LIBTOOL) --tag GO --mode=compile $(GOC) $(INCLUDES) \\\n \t$(AM_GOCFLAGS) $(GOCFLAGS)\n \n GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n-\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) \\\n-\t$(PTHREAD_LIBS) $(MATH_LIBS) -o $@\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) -o $@\n \n \n # Build a package."}, {"sha": "ff404f2a02641d32d2a563018a40d4c32053a302", "filename": "libgo/configure", "status": "modified", "additions": 234, "deletions": 46, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -607,18 +607,25 @@ HAVE_SYS_MMAN_H_FALSE\n HAVE_SYS_MMAN_H_TRUE\n PTHREAD_LIBS\n PTHREAD_CFLAGS\n+NET_LIBS\n MATH_LIBS\n USING_SPLIT_STACK_FALSE\n USING_SPLIT_STACK_TRUE\n SPLIT_STACK\n GOARCH\n-LIBGO_IS_ARM_FALSE\n-LIBGO_IS_ARM_TRUE\n LIBGO_IS_X86_64_FALSE\n LIBGO_IS_X86_64_TRUE\n+LIBGO_IS_SPARCV9_FALSE\n+LIBGO_IS_SPARCV9_TRUE\n+LIBGO_IS_SPARC_FALSE\n+LIBGO_IS_SPARC_TRUE\n+LIBGO_IS_ARM_FALSE\n+LIBGO_IS_ARM_TRUE\n LIBGO_IS_386_FALSE\n LIBGO_IS_386_TRUE\n GOOS\n+LIBGO_IS_SOLARIS_FALSE\n+LIBGO_IS_SOLARIS_TRUE\n LIBGO_IS_RTEMS_FALSE\n LIBGO_IS_RTEMS_TRUE\n LIBGO_IS_LINUX_FALSE\n@@ -10871,7 +10878,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10874 \"configure\"\n+#line 10881 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10977,7 +10984,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10980 \"configure\"\n+#line 10987 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13192,12 +13199,14 @@ is_darwin=no\n is_freebsd=no\n is_linux=no\n is_rtems=no\n+is_solaris=no\n GOOS=unknown\n case ${host} in\n-  *-*-darwin*) is_darwin=yes; GOOS=darwin ;;\n-  *-*-freebsd*) is_freebsd=yes; GOOS=freebsd ;;\n-  *-*-linux*)  is_linux=yes; GOOS=linux  ;;\n-  *-*-rtems*)  is_rtems=yes; GOOS=rtems  ;;\n+  *-*-darwin*)   is_darwin=yes;  GOOS=darwin ;;\n+  *-*-freebsd*)  is_freebsd=yes; GOOS=freebsd ;;\n+  *-*-linux*)    is_linux=yes;   GOOS=linux ;;\n+  *-*-rtems*)    is_rtems=yes;   GOOS=rtems ;;\n+  *-*-solaris2*) is_solaris=yes; GOOS=solaris ;;\n esac\n  if test $is_darwin = yes; then\n   LIBGO_IS_DARWIN_TRUE=\n@@ -13231,11 +13240,21 @@ else\n   LIBGO_IS_RTEMS_FALSE=\n fi\n \n+ if test $is_solaris = yes; then\n+  LIBGO_IS_SOLARIS_TRUE=\n+  LIBGO_IS_SOLARIS_FALSE='#'\n+else\n+  LIBGO_IS_SOLARIS_TRUE='#'\n+  LIBGO_IS_SOLARIS_FALSE=\n+fi\n+\n \n \n is_386=no\n-is_x86_64=no\n is_arm=no\n+is_sparc=no\n+is_sparcv9=no\n+is_x86_64=no\n GOARCH=unknown\n case ${host} in\n   i[34567]86-*-* | x86_64-*-*)\n@@ -13253,15 +13272,39 @@ else\n fi\n rm -f conftest.err conftest.$ac_ext\n     if test \"$is_386\" = \"yes\"; then\n+      is_386=yes\n       GOARCH=386\n     else\n+      is_x86_64=yes\n       GOARCH=amd64\n     fi\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n     ;;\n+  sparc*-*-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#if defined(__sparcv9) || defined(__arch64__)\n+#error 64-bit\n+#endif\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  is_sparc=yes\n+else\n+  is_sparcv9=yes\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+    if test \"$is_sparc\" = \"yes\"; then\n+      is_sparc=yes\n+      GOARCH=sparc\n+    else\n+      is_sparcv9=yes\n+      GOARCH=sparcv9\n+    fi\n+    ;;\n esac\n  if test $is_386 = yes; then\n   LIBGO_IS_386_TRUE=\n@@ -13271,14 +13314,6 @@ else\n   LIBGO_IS_386_FALSE=\n fi\n \n- if test $is_x86_64 = yes; then\n-  LIBGO_IS_X86_64_TRUE=\n-  LIBGO_IS_X86_64_FALSE='#'\n-else\n-  LIBGO_IS_X86_64_TRUE='#'\n-  LIBGO_IS_X86_64_FALSE=\n-fi\n-\n  if test $is_arm = yes; then\n   LIBGO_IS_ARM_TRUE=\n   LIBGO_IS_ARM_FALSE='#'\n@@ -13287,11 +13322,35 @@ else\n   LIBGO_IS_ARM_FALSE=\n fi\n \n+ if test $is_sparc = yes; then\n+  LIBGO_IS_SPARC_TRUE=\n+  LIBGO_IS_SPARC_FALSE='#'\n+else\n+  LIBGO_IS_SPARC_TRUE='#'\n+  LIBGO_IS_SPARC_FALSE=\n+fi\n+\n+ if test $isv_sparcv9 = yes; then\n+  LIBGO_IS_SPARCV9_TRUE=\n+  LIBGO_IS_SPARCV9_FALSE='#'\n+else\n+  LIBGO_IS_SPARCV9_TRUE='#'\n+  LIBGO_IS_SPARCV9_FALSE=\n+fi\n+\n+ if test $is_x86_64 = yes; then\n+  LIBGO_IS_X86_64_TRUE=\n+  LIBGO_IS_X86_64_FALSE='#'\n+else\n+  LIBGO_IS_X86_64_TRUE='#'\n+  LIBGO_IS_X86_64_FALSE=\n+fi\n+\n \n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -fsplit-stack is supported\" >&5\n $as_echo_n \"checking whether -fsplit-stack is supported... \" >&6; }\n-if test \"${ac_cv_libgo_split_stack_supported+set}\" = set; then :\n+if test \"${libgo_cv_c_split_stack_supported+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   CFLAGS_hold=$CFLAGS\n@@ -13301,16 +13360,16 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n int i;\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  ac_cv_libgo_split_stack_supported=yes\n+  libgo_cv_c_split_stack_supported=yes\n else\n-  ac_cv_libgo_split_stack_supported=no\n+  libgo_cv_c_split_stack_supported=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n CFLAGS=$CFLAGS_hold\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libgo_split_stack_supported\" >&5\n-$as_echo \"$ac_cv_libgo_split_stack_supported\" >&6; }\n-if test \"$ac_cv_libgo_split_stack_supported\" = yes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_split_stack_supported\" >&5\n+$as_echo \"$libgo_cv_c_split_stack_supported\" >&6; }\n+if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n   SPLIT_STACK=-fsplit-stack\n \n $as_echo \"#define USING_SPLIT_STACK 1\" >>confdefs.h\n@@ -13319,7 +13378,7 @@ else\n   SPLIT_STACK=\n fi\n \n- if test \"$ac_cv_libgo_split_stack_supported\" = yes; then\n+ if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n   USING_SPLIT_STACK_TRUE=\n   USING_SPLIT_STACK_FALSE='#'\n else\n@@ -13330,17 +13389,17 @@ fi\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether linker supports split stack\" >&5\n $as_echo_n \"checking whether linker supports split stack... \" >&6; }\n-if test \"${ac_cv_libgo_linker_supports_split_stack+set}\" = set; then :\n+if test \"${libgo_cv_c_linker_supports_split_stack+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n-  ac_cv_libgo_linker_supports_split_stack=no\n+  libgo_cv_c_linker_supports_split_stack=no\n if $LD --help 2>/dev/null | grep split-stack-adjust-size >/dev/null 2>&1; then\n-  ac_cv_libgo_linker_supports_split_stack=yes\n+  libgo_cv_c_linker_supports_split_stack=yes\n fi\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libgo_linker_supports_split_stack\" >&5\n-$as_echo \"$ac_cv_libgo_linker_supports_split_stack\" >&6; }\n-if test \"$ac_cv_libgo_linker_supports_split_stack\" = yes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_linker_supports_split_stack\" >&5\n+$as_echo \"$libgo_cv_c_linker_supports_split_stack\" >&6; }\n+if test \"$libgo_cv_c_linker_supports_split_stack\" = yes; then\n \n $as_echo \"#define LINKER_SUPPORTS_SPLIT_STACK 1\" >>confdefs.h\n \n@@ -13389,9 +13448,126 @@ fi\n \n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for socket libraries\" >&5\n+$as_echo_n \"checking for socket libraries... \" >&6; }\n+if test \"${libgo_cv_lib_sockets+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  libgo_cv_lib_sockets=\n+   libgo_check_both=no\n+   ac_fn_c_check_func \"$LINENO\" \"connect\" \"ac_cv_func_connect\"\n+if test \"x$ac_cv_func_connect\" = x\"\"yes; then :\n+  libgo_check_socket=no\n+else\n+  libgo_check_socket=yes\n+fi\n+\n+   if test \"$libgo_check_socket\" = \"yes\"; then\n+     unset ac_cv_func_connect\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for main in -lsocket\" >&5\n+$as_echo_n \"checking for main in -lsocket... \" >&6; }\n+if test \"${ac_cv_lib_socket_main+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lsocket  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+\n+int\n+main ()\n+{\n+return main ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_socket_main=yes\n+else\n+  ac_cv_lib_socket_main=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_main\" >&5\n+$as_echo \"$ac_cv_lib_socket_main\" >&6; }\n+if test \"x$ac_cv_lib_socket_main\" = x\"\"yes; then :\n+  libgo_cv_lib_sockets=\"-lsocket\"\n+else\n+  libgo_check_both=yes\n+fi\n+\n+   fi\n+   if test \"$libgo_check_both\" = \"yes\"; then\n+     libgo_old_libs=$LIBS\n+     LIBS=\"$LIBS -lsocket -lnsl\"\n+     unset ac_cv_func_accept\n+     ac_fn_c_check_func \"$LINENO\" \"accept\" \"ac_cv_func_accept\"\n+if test \"x$ac_cv_func_accept\" = x\"\"yes; then :\n+  libgo_check_nsl=no\n+\t\t    libgo_cv_lib_sockets=\"-lsocket -lnsl\"\n+fi\n+\n+     unset ac_cv_func_accept\n+     LIBS=$libgo_old_libs\n+   fi\n+   unset ac_cv_func_gethostbyname\n+   libgo_old_libs=\"$LIBS\"\n+   ac_fn_c_check_func \"$LINENO\" \"gethostbyname\" \"ac_cv_func_gethostbyname\"\n+if test \"x$ac_cv_func_gethostbyname\" = x\"\"yes; then :\n+\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for main in -lnsl\" >&5\n+$as_echo_n \"checking for main in -lnsl... \" >&6; }\n+if test \"${ac_cv_lib_nsl_main+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lnsl  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+\n+int\n+main ()\n+{\n+return main ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_nsl_main=yes\n+else\n+  ac_cv_lib_nsl_main=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_nsl_main\" >&5\n+$as_echo \"$ac_cv_lib_nsl_main\" >&6; }\n+if test \"x$ac_cv_lib_nsl_main\" = x\"\"yes; then :\n+  libgo_cv_lib_sockets=\"$libgo_cv_lib_sockets -lnsl\"\n+fi\n+\n+fi\n+\n+   unset ac_cv_func_gethostbyname\n+   LIBS=$libgo_old_libs\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_lib_sockets\" >&5\n+$as_echo \"$libgo_cv_lib_sockets\" >&6; }\n+NET_LIBS=\"$libgo_cv_lib_sockets\"\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -pthread is supported\" >&5\n $as_echo_n \"checking whether -pthread is supported... \" >&6; }\n-if test \"${ac_cv_libgo_pthread_supported+set}\" = set; then :\n+if test \"${libgo_cv_lib_pthread+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   CFLAGS_hold=$CFLAGS\n@@ -13401,17 +13577,17 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n int i;\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  ac_cv_libgo_pthread_supported=yes\n+  libgo_cv_lib_pthread=yes\n else\n-  ac_cv_libgo_pthread_supported=no\n+  libgo_cv_lib_pthread=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n CFLAGS=$CFLAGS_hold\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libgo_pthread_supported\" >&5\n-$as_echo \"$ac_cv_libgo_pthread_supported\" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_lib_pthread\" >&5\n+$as_echo \"$libgo_cv_lib_pthread\" >&6; }\n PTHREAD_CFLAGS=\n-if test \"$ac_cv_libgo_pthread_supported\" = yes; then\n+if test \"$libgo_cv_lib_pthread\" = yes; then\n   PTHREAD_CFLAGS=-pthread\n fi\n \n@@ -13759,7 +13935,7 @@ done\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether compiler supports -minline-all-stringops\" >&5\n $as_echo_n \"checking whether compiler supports -minline-all-stringops... \" >&6; }\n-if test \"${ac_cv_libgo_compiler_supports_inline_all_stringops+set}\" = set; then :\n+if test \"${libgo_cv_c_stringops+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n   CFLAGS_hold=$CFLAGS\n@@ -13769,17 +13945,17 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n int i;\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n-  ac_cv_libgo_compiler_supports_inline_all_stringops=yes\n+  libgo_cv_c_stringops=yes\n else\n-  ac_cv_libgo_compiler_supports_inline_all_stringops=no\n+  libgo_cv_c_stringops=no\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n CFLAGS=$CFLAGS_hold\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libgo_compiler_supports_inline_all_stringops\" >&5\n-$as_echo \"$ac_cv_libgo_compiler_supports_inline_all_stringops\" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_stringops\" >&5\n+$as_echo \"$libgo_cv_c_stringops\" >&6; }\n STRINGOPS_FLAG=\n-if test \"$ac_cv_libgo_compiler_supports_inline_all_stringops\" = yes; then\n+if test \"$libgo_cv_c_stringops\" = yes; then\n   STRINGOPS_FLAG=-minline-all-stringops\n fi\n \n@@ -14018,18 +14194,30 @@ if test -z \"${LIBGO_IS_RTEMS_TRUE}\" && test -z \"${LIBGO_IS_RTEMS_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_RTEMS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${LIBGO_IS_386_TRUE}\" && test -z \"${LIBGO_IS_386_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_386\\\" was never defined.\n+if test -z \"${LIBGO_IS_SOLARIS_TRUE}\" && test -z \"${LIBGO_IS_SOLARIS_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_SOLARIS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${LIBGO_IS_X86_64_TRUE}\" && test -z \"${LIBGO_IS_X86_64_FALSE}\"; then\n-  as_fn_error \"conditional \\\"LIBGO_IS_X86_64\\\" was never defined.\n+if test -z \"${LIBGO_IS_386_TRUE}\" && test -z \"${LIBGO_IS_386_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_386\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n if test -z \"${LIBGO_IS_ARM_TRUE}\" && test -z \"${LIBGO_IS_ARM_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_ARM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGO_IS_SPARC_TRUE}\" && test -z \"${LIBGO_IS_SPARC_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_SPARC\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${LIBGO_IS_SPARCV9_TRUE}\" && test -z \"${LIBGO_IS_SPARCV9_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_SPARCV9\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${LIBGO_IS_X86_64_TRUE}\" && test -z \"${LIBGO_IS_X86_64_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_X86_64\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${USING_SPLIT_STACK_TRUE}\" && test -z \"${USING_SPLIT_STACK_FALSE}\"; then\n   as_fn_error \"conditional \\\"USING_SPLIT_STACK\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "41860d14286c73620a90644e3f11e69682d57505", "filename": "libgo/configure.ac", "status": "modified", "additions": 78, "deletions": 23, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -116,22 +116,28 @@ is_darwin=no\n is_freebsd=no\n is_linux=no\n is_rtems=no\n+is_solaris=no\n GOOS=unknown\n case ${host} in\n-  *-*-darwin*) is_darwin=yes; GOOS=darwin ;;\n-  *-*-freebsd*) is_freebsd=yes; GOOS=freebsd ;;\n-  *-*-linux*)  is_linux=yes; GOOS=linux  ;;\n-  *-*-rtems*)  is_rtems=yes; GOOS=rtems  ;;\n+  *-*-darwin*)   is_darwin=yes;  GOOS=darwin ;;\n+  *-*-freebsd*)  is_freebsd=yes; GOOS=freebsd ;;\n+  *-*-linux*)    is_linux=yes;   GOOS=linux ;;\n+  *-*-rtems*)    is_rtems=yes;   GOOS=rtems ;;\n+  *-*-solaris2*) is_solaris=yes; GOOS=solaris ;;\n esac\n AM_CONDITIONAL(LIBGO_IS_DARWIN, test $is_darwin = yes)\n AM_CONDITIONAL(LIBGO_IS_FREEBSD, test $is_freebsd = yes)\n AM_CONDITIONAL(LIBGO_IS_LINUX, test $is_linux = yes)\n AM_CONDITIONAL(LIBGO_IS_RTEMS, test $is_rtems = yes)\n+AM_CONDITIONAL(LIBGO_IS_SOLARIS, test $is_solaris = yes)\n AC_SUBST(GOOS)\n \n+dnl N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n is_386=no\n-is_x86_64=no\n is_arm=no\n+is_sparc=no\n+is_sparcv9=no\n+is_x86_64=no\n GOARCH=unknown\n case ${host} in\n changequote(,)dnl\n@@ -143,31 +149,49 @@ changequote([,])dnl\n #endif],\n [is_386=yes], [is_x86_64=yes])\n     if test \"$is_386\" = \"yes\"; then\n+      is_386=yes\n       GOARCH=386\n     else\n+      is_x86_64=yes\n       GOARCH=amd64\n     fi\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n     ;;\n+  sparc*-*-*)\n+    AC_PREPROC_IFELSE([\n+#if defined(__sparcv9) || defined(__arch64__)\n+#error 64-bit\n+#endif],\n+[is_sparc=yes], [is_sparcv9=yes])\n+    if test \"$is_sparc\" = \"yes\"; then\n+      is_sparc=yes\n+      GOARCH=sparc\n+    else\n+      is_sparcv9=yes\n+      GOARCH=sparcv9\n+    fi\n+    ;;\n esac\n AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n-AM_CONDITIONAL(LIBGO_IS_X86_64, test $is_x86_64 = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n+AM_CONDITIONAL(LIBGO_IS_SPARC, test $is_sparc = yes)\n+AM_CONDITIONAL(LIBGO_IS_SPARCV9, test $isv_sparcv9 = yes)\n+AM_CONDITIONAL(LIBGO_IS_X86_64, test $is_x86_64 = yes)\n AC_SUBST(GOARCH)\n \n dnl Use -fsplit-stack when compiling C code if available.\n AC_CACHE_CHECK([whether -fsplit-stack is supported],\n-[ac_cv_libgo_split_stack_supported],\n+[libgo_cv_c_split_stack_supported],\n [CFLAGS_hold=$CFLAGS\n CFLAGS=\"$CFLAGS -fsplit-stack\"\n AC_COMPILE_IFELSE([[int i;]],\n-[ac_cv_libgo_split_stack_supported=yes],\n-[ac_cv_libgo_split_stack_supported=no])\n+[libgo_cv_c_split_stack_supported=yes],\n+[libgo_cv_c_split_stack_supported=no])\n CFLAGS=$CFLAGS_hold])\n-if test \"$ac_cv_libgo_split_stack_supported\" = yes; then\n+if test \"$libgo_cv_c_split_stack_supported\" = yes; then\n   SPLIT_STACK=-fsplit-stack\n   AC_DEFINE(USING_SPLIT_STACK, 1,\n \t\t[Define if the compiler supports -fsplit-stack])\n@@ -176,20 +200,20 @@ else\n fi\n AC_SUBST(SPLIT_STACK)\n AM_CONDITIONAL(USING_SPLIT_STACK,\n-\ttest \"$ac_cv_libgo_split_stack_supported\" = yes)\n+\ttest \"$libgo_cv_c_split_stack_supported\" = yes)\n \n dnl Check whether the linker does stack munging when calling from\n dnl split-stack into non-split-stack code.  We check this by looking\n dnl at the --help output.  FIXME: This is only half right: it's\n dnl possible for the linker to support this for some targets but not\n dnl others.\n AC_CACHE_CHECK([whether linker supports split stack],\n-[ac_cv_libgo_linker_supports_split_stack],\n-ac_cv_libgo_linker_supports_split_stack=no\n+[libgo_cv_c_linker_supports_split_stack],\n+libgo_cv_c_linker_supports_split_stack=no\n if $LD --help 2>/dev/null | grep split-stack-adjust-size >/dev/null 2>&1; then\n-  ac_cv_libgo_linker_supports_split_stack=yes\n+  libgo_cv_c_linker_supports_split_stack=yes\n fi)\n-if test \"$ac_cv_libgo_linker_supports_split_stack\" = yes; then\n+if test \"$libgo_cv_c_linker_supports_split_stack\" = yes; then\n   AC_DEFINE(LINKER_SUPPORTS_SPLIT_STACK, 1,\n \t    [Define if the linker support split stack adjustments])\n fi\n@@ -199,17 +223,48 @@ MATH_LIBS=\n AC_CHECK_LIB([m], [sqrt], MATH_LIBS=-lm)\n AC_SUBST(MATH_LIBS)\n \n+dnl Test for -lsocket and -lnsl.  Copied from libjava/configure.ac.\n+AC_CACHE_CHECK([for socket libraries], libgo_cv_lib_sockets,\n+  [libgo_cv_lib_sockets=\n+   libgo_check_both=no\n+   AC_CHECK_FUNC(connect, libgo_check_socket=no, libgo_check_socket=yes)\n+   if test \"$libgo_check_socket\" = \"yes\"; then\n+     unset ac_cv_func_connect\n+     AC_CHECK_LIB(socket, main, libgo_cv_lib_sockets=\"-lsocket\",\n+     \t\t  libgo_check_both=yes)\n+   fi\n+   if test \"$libgo_check_both\" = \"yes\"; then\n+     libgo_old_libs=$LIBS\n+     LIBS=\"$LIBS -lsocket -lnsl\"\n+     unset ac_cv_func_accept\n+     AC_CHECK_FUNC(accept,\n+\t\t   [libgo_check_nsl=no\n+\t\t    libgo_cv_lib_sockets=\"-lsocket -lnsl\"])\n+     unset ac_cv_func_accept\n+     LIBS=$libgo_old_libs\n+   fi\n+   unset ac_cv_func_gethostbyname\n+   libgo_old_libs=\"$LIBS\"\n+   AC_CHECK_FUNC(gethostbyname, ,\n+\t\t [AC_CHECK_LIB(nsl, main,\n+\t\t \t[libgo_cv_lib_sockets=\"$libgo_cv_lib_sockets -lnsl\"])])\n+   unset ac_cv_func_gethostbyname\n+   LIBS=$libgo_old_libs\n+])\n+NET_LIBS=\"$libgo_cv_lib_sockets\"\n+AC_SUBST(NET_LIBS)\n+\n dnl Test whether the compiler supports the -pthread option.\n AC_CACHE_CHECK([whether -pthread is supported],\n-[ac_cv_libgo_pthread_supported],\n+[libgo_cv_lib_pthread],\n [CFLAGS_hold=$CFLAGS\n CFLAGS=\"$CFLAGS -pthread\"\n AC_COMPILE_IFELSE([[int i;]],\n-[ac_cv_libgo_pthread_supported=yes],\n-[ac_cv_libgo_pthread_supported=no])\n+[libgo_cv_lib_pthread=yes],\n+[libgo_cv_lib_pthread=no])\n CFLAGS=$CFLAGS_hold])\n PTHREAD_CFLAGS=\n-if test \"$ac_cv_libgo_pthread_supported\" = yes; then\n+if test \"$libgo_cv_lib_pthread\" = yes; then\n   PTHREAD_CFLAGS=-pthread\n fi\n AC_SUBST(PTHREAD_CFLAGS)\n@@ -230,15 +285,15 @@ AC_CHECK_FUNCS(srandom random strsignal)\n dnl For x86 we want to use the -minline-all-stringops option to avoid\n dnl forcing a stack split when calling memcpy and friends.\n AC_CACHE_CHECK([whether compiler supports -minline-all-stringops],\n-[ac_cv_libgo_compiler_supports_inline_all_stringops],\n+[libgo_cv_c_stringops],\n [CFLAGS_hold=$CFLAGS\n CFLAGS=\"$CFLAGS -minline-all-stringops\"\n AC_COMPILE_IFELSE([int i;],\n-[ac_cv_libgo_compiler_supports_inline_all_stringops=yes],\n-[ac_cv_libgo_compiler_supports_inline_all_stringops=no])\n+[libgo_cv_c_stringops=yes],\n+[libgo_cv_c_stringops=no])\n CFLAGS=$CFLAGS_hold])\n STRINGOPS_FLAG=\n-if test \"$ac_cv_libgo_compiler_supports_inline_all_stringops\" = yes; then\n+if test \"$libgo_cv_c_stringops\" = yes; then\n   STRINGOPS_FLAG=-minline-all-stringops\n fi\n AC_SUBST(STRINGOPS_FLAG)"}, {"sha": "a72c592379511c1423d19434eda5669e3a2aea40", "filename": "libgo/go/debug/proc/proc_solaris.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fproc_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fproc_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fproc_solaris.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc\n+\n+import \"os\"\n+\n+// Process tracing is not supported on Solaris yet.\n+\n+func Attach(pid int) (Process, os.Error) {\n+\treturn nil, os.NewError(\"debug/proc not implemented on Solaris\")\n+}\n+\n+func ForkExec(argv0 string, argv []string, envv []string, dir string, fd []*os.File) (Process, os.Error) {\n+\treturn Attach(0)\n+}"}, {"sha": "3fc3e51cd79a89c9fdb4bb5b649357f3a32ad74c", "filename": "libgo/go/debug/proc/regs_solaris_386.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_386.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,5 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc"}, {"sha": "3fc3e51cd79a89c9fdb4bb5b649357f3a32ad74c", "filename": "libgo/go/debug/proc/regs_solaris_amd64.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_amd64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_amd64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_amd64.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,5 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc"}, {"sha": "3fc3e51cd79a89c9fdb4bb5b649357f3a32ad74c", "filename": "libgo/go/debug/proc/regs_solaris_sparc.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparc.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,5 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc"}, {"sha": "3fc3e51cd79a89c9fdb4bb5b649357f3a32ad74c", "filename": "libgo/go/debug/proc/regs_solaris_sparcv9.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparcv9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparcv9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_solaris_sparcv9.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,5 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc"}, {"sha": "ec229339d9413c32658b7fdd341b4180895d316a", "filename": "libgo/syscalls/syscall_solaris.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_solaris.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,7 @@\n+// syscall_solaris.go -- Solaris 2 specific syscall interface.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall"}, {"sha": "20e8b5db0bc2dd3c00ff9e4f950f11d65aa6bba9", "filename": "libgo/syscalls/syscall_solaris_386.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_solaris_386.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,19 @@\n+// syscall_solaris_386.go -- Solaris/x86 specific support\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+const ARCH = \"386\"\n+\n+// FIXME: ptrace(3C) has this, but exec.go expects the next.\n+//func libc_ptrace(request int, pid Pid_t, addr int, data int) int __asm__ (\"ptrace\")\n+\n+func libc_ptrace(request int, pid Pid_t, addr uintptr, data *byte) int __asm__ (\"ptrace\")\n+\n+var dummy *byte\n+const sizeofPtr uintptr = uintptr(unsafe.Sizeof(dummy))"}, {"sha": "628e781ba3c9400c409c3d18f9c29cb07de51227", "filename": "libgo/syscalls/syscall_solaris_amd64.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_amd64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_amd64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_solaris_amd64.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,23 @@\n+// syscall_solaris_amd64.go -- Solaris/x64 specific support\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+const ARCH = \"amd64\"\n+\n+// FIXME: ptrace(3C) has this, but exec.go expects the next.\n+//func libc_ptrace(request int, pid Pid_t, addr int, data int) int __asm__ (\"ptrace\")\n+\n+// 64-bit ptrace(3C) doesn't exist\n+func libc_ptrace(request int, pid Pid_t, addr uintptr, data *byte) int {\n+\terrno := ENOSYS\n+\treturn -1\n+}\n+\n+var dummy *byte\n+const sizeofPtr uintptr = uintptr(unsafe.Sizeof(dummy))"}, {"sha": "91758d509d0b29b82ddcac15f3e91a9384ee8872", "filename": "libgo/syscalls/syscall_solaris_sparc.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_sparc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_sparc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_solaris_sparc.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,7 @@\n+// syscall_solaris_sparc.go -- Solaris SPARC specific support\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall"}, {"sha": "f371dd21a4c3d23570749c005ff03c4a3c201cd9", "filename": "libgo/syscalls/syscall_solaris_sparcv9.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_sparcv9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Fsyscalls%2Fsyscall_solaris_sparcv9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_solaris_sparcv9.go?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -0,0 +1,7 @@\n+// syscall_solaris_v9.go -- Solaris sparc9v specific support\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall"}, {"sha": "9610691578132ecae993cdb0a2d4a07b9083207e", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ee78b861b8daab2675e1a24798b1069f763dc0/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=f2ee78b861b8daab2675e1a24798b1069f763dc0", "patch": "@@ -105,6 +105,7 @@ MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n MATH_LIBS = @MATH_LIBS@\n MKDIR_P = @MKDIR_P@\n+NET_LIBS = @NET_LIBS@\n NM = @NM@\n NMEDIT = @NMEDIT@\n OBJCOPY = @OBJCOPY@"}]}