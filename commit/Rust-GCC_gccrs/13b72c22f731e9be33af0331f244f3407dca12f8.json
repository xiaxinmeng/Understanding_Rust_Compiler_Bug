{"sha": "13b72c22f731e9be33af0331f244f3407dca12f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiNzJjMjJmNzMxZTliZTMzYWYwMzMxZjI0NGYzNDA3ZGNhMTJmOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-10-10T12:02:16Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-10-10T12:02:16Z"}, "message": "md.texi: Document the mnemonic attribute.\n\n2013-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* doc/md.texi: Document the mnemonic attribute.\n\nFrom-SVN: r203354", "tree": {"sha": "79429f73a4181fe8fe287450a46d1b2f9a4b3980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79429f73a4181fe8fe287450a46d1b2f9a4b3980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b72c22f731e9be33af0331f244f3407dca12f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b72c22f731e9be33af0331f244f3407dca12f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b72c22f731e9be33af0331f244f3407dca12f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b72c22f731e9be33af0331f244f3407dca12f8/comments", "author": null, "committer": null, "parents": [{"sha": "5db40447b829acea13897238012ebf4dc8090b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db40447b829acea13897238012ebf4dc8090b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db40447b829acea13897238012ebf4dc8090b04"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "87ba2a2314fbc107e6e4ce1995454746078f169b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b72c22f731e9be33af0331f244f3407dca12f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b72c22f731e9be33af0331f244f3407dca12f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13b72c22f731e9be33af0331f244f3407dca12f8", "patch": "@@ -1,3 +1,7 @@\n+2013-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* doc/md.texi: Document the mnemonic attribute.\n+\n 2013-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/57377"}, {"sha": "2a5a2e12ddabd5164faae0151589320e6b24ea8b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b72c22f731e9be33af0331f244f3407dca12f8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b72c22f731e9be33af0331f244f3407dca12f8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=13b72c22f731e9be33af0331f244f3407dca12f8", "patch": "@@ -7698,6 +7698,7 @@ to track the condition codes.\n * Attr Example::        An example of assigning attributes.\n * Insn Lengths::        Computing the length of insns.\n * Constant Attributes:: Defining attributes that are constant.\n+* Mnemonic Attribute::  Obtain the instruction mnemonic as attribute value.\n * Delay Slots::         Defining delay slots required for a machine.\n * Processor pipeline description:: Specifying information for insn scheduling.\n @end menu\n@@ -7717,15 +7718,17 @@ by the target machine.  It looks like:\n (define_attr @var{name} @var{list-of-values} @var{default})\n @end smallexample\n \n-@var{name} is a string specifying the name of the attribute being defined.\n-Some attributes are used in a special way by the rest of the compiler. The\n-@code{enabled} attribute can be used to conditionally enable or disable\n-insn alternatives (@pxref{Disable Insn Alternatives}). The @code{predicable}\n-attribute, together with a suitable @code{define_cond_exec}\n-(@pxref{Conditional Execution}), can be used to automatically generate\n-conditional variants of instruction patterns. The compiler internally uses\n-the names @code{ce_enabled} and @code{nonce_enabled}, so they should not be\n-used elsewhere as alternative names.\n+@var{name} is a string specifying the name of the attribute being\n+defined.  Some attributes are used in a special way by the rest of the\n+compiler. The @code{enabled} attribute can be used to conditionally\n+enable or disable insn alternatives (@pxref{Disable Insn\n+Alternatives}). The @code{predicable} attribute, together with a\n+suitable @code{define_cond_exec} (@pxref{Conditional Execution}), can\n+be used to automatically generate conditional variants of instruction\n+patterns. The @code{mnemonic} attribute can be used to check for the\n+instruction mnemonic (@pxref{Mnemonic Attribute}).  The compiler\n+internally uses the names @code{ce_enabled} and @code{nonce_enabled},\n+so they should not be used elsewhere as alternative names.\n \n @var{list-of-values} is either a string that specifies a comma-separated\n list of values that can be assigned to the attribute, or a null string to\n@@ -7789,6 +7792,11 @@ distances. @xref{Insn Lengths}.\n The @code{enabled} attribute can be defined to prevent certain\n alternatives of an insn definition from being used during code\n generation. @xref{Disable Insn Alternatives}.\n+\n+@item mnemonic\n+The @code{mnemonic} attribute can be defined to implement instruction\n+specific checks in e.g. the pipeline description.\n+@xref{Mnemonic Attribute}.\n @end table\n \n For each of these special attributes, the corresponding\n@@ -8339,6 +8347,47 @@ the value of a constant attribute may use the @code{symbol_ref} form,\n but may not use either the @code{match_operand} form or @code{eq_attr}\n forms involving insn attributes.\n \n+@end ifset\n+@ifset INTERNALS\n+@node Mnemonic Attribute\n+@subsection Mnemonic Attribute\n+@cindex mnemonic attribute\n+\n+The @code{mnemonic} attribute is a string type attribute holding the\n+instruction mnemonic for an insn alternative.  The attribute values\n+will automatically be generated by the machine description parser if\n+there is an attribute definition in the md file:\n+\n+@smallexample\n+(define_attr \"mnemonic\" \"unknown\" (const_string \"unknown\"))\n+@end smallexample\n+\n+The default value can be freely chosen as long as it does not collide\n+with any of the instruction mnemonics.  This value will be used\n+whenever the machine description parser is not able to determine the\n+mnemonic string.  This might be the case for output templates\n+containing more than a single instruction as in\n+@code{\"mvcle\\t%0,%1,0\\;jo\\t.-4\"}.\n+\n+The @code{mnemonic} attribute set is not generated automatically if the\n+instruction string is generated via C code.\n+\n+An existing @code{mnemonic} attribute set in an insn definition will not\n+be overriden by the md file parser.  That way it is possible to\n+manually set the instruction mnemonics for the cases where the md file\n+parser fails to determine it automatically.\n+\n+The @code{mnemonic} attribute is useful for dealing with instruction\n+specific properties in the pipeline description without defining\n+additional insn attributes.\n+\n+@smallexample\n+(define_attr \"ooo_expanded\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"dlr,dsgr,d,dsgf,stam,dsgfr,dlgr\")\n+         (const_int 1)]\n+        (const_int 0)))\n+@end smallexample\n+\n @end ifset\n @ifset INTERNALS\n @node Delay Slots"}]}