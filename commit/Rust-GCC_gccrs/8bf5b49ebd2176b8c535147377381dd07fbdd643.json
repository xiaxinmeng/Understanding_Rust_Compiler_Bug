{"sha": "8bf5b49ebd2176b8c535147377381dd07fbdd643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmNWI0OWViZDIxNzZiOGM1MzUxNDczNzczODFkZDA3ZmJkZDY0Mw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-20T19:48:20Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-20T19:50:16Z"}, "message": "Correct stpcpy offset computation for -Warray-bounds et al. [PR101397].\n\nResolves:\nPR middle-end/101397 - spurious warning writing to the result of stpcpy minus 1\n\ngcc/ChangeLog:\n\n\tPR middle-end/101397\n\t* builtins.c (gimple_call_return_array): Add argument.  Correct\n\toffsets for memchr, mempcpy, stpcpy, and stpncpy.\n\t(compute_objsize_r): Adjust offset computation for argument returning\n\tbuilt-ins.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/101397\n\t* gcc.dg/Warray-bounds-80.c: New test.\n\t* gcc.dg/Warray-bounds-81.c: New test.\n\t* gcc.dg/Warray-bounds-82.c: New test.\n\t* gcc.dg/Warray-bounds-83.c: New test.\n\t* gcc.dg/Warray-bounds-84.c: New test.\n\t* gcc.dg/Wstringop-overflow-46.c: Adjust expected output.", "tree": {"sha": "49d02a88e682cbc77d10e2ba584658f6a26c4bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49d02a88e682cbc77d10e2ba584658f6a26c4bb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf5b49ebd2176b8c535147377381dd07fbdd643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf5b49ebd2176b8c535147377381dd07fbdd643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf5b49ebd2176b8c535147377381dd07fbdd643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf5b49ebd2176b8c535147377381dd07fbdd643/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124eaa50e0a34f5f89572c1aa812c50979da58fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124eaa50e0a34f5f89572c1aa812c50979da58fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124eaa50e0a34f5f89572c1aa812c50979da58fc"}], "stats": {"total": 1001, "additions": 981, "deletions": 20}, "files": [{"sha": "170d776c41001ab1085891eff1bcb75a1659193a", "filename": "gcc/builtins.c", "status": "modified", "additions": 86, "deletions": 17, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -5200,19 +5200,27 @@ get_offset_range (tree x, gimple *stmt, offset_int r[2], range_query *rvals)\n /* Return the argument that the call STMT to a built-in function returns\n    or null if it doesn't.  On success, set OFFRNG[] to the range of offsets\n    from the argument reflected in the value returned by the built-in if it\n-   can be determined, otherwise to 0 and HWI_M1U respectively.  */\n+   can be determined, otherwise to 0 and HWI_M1U respectively.  Set\n+   *PAST_END for functions like mempcpy that might return a past the end\n+   pointer (most functions return a dereferenceable pointer to an existing\n+   element of an array).  */\n \n static tree\n-gimple_call_return_array (gimple *stmt, offset_int offrng[2],\n+gimple_call_return_array (gimple *stmt, offset_int offrng[2], bool *past_end,\n \t\t\t  range_query *rvals)\n {\n+  /* Clear and set below for the rare function(s) that might return\n+     a past-the-end pointer.  */\n+  *past_end = false;\n+\n   {\n     /* Check for attribute fn spec to see if the function returns one\n        of its arguments.  */\n     attr_fnspec fnspec = gimple_call_fnspec (as_a <gcall *>(stmt));\n     unsigned int argno;\n     if (fnspec.returns_arg (&argno))\n       {\n+\t/* Functions return the first argument (not a range).  */\n \toffrng[0] = offrng[1] = 0;\n \treturn gimple_call_arg (stmt, argno);\n       }\n@@ -5242,6 +5250,7 @@ gimple_call_return_array (gimple *stmt, offset_int offrng[2],\n       if (gimple_call_num_args (stmt) != 2)\n \treturn NULL_TREE;\n \n+      /* Allocation functions return a pointer to the beginning.  */\n       offrng[0] = offrng[1] = 0;\n       return gimple_call_arg (stmt, 1);\n     }\n@@ -5253,10 +5262,6 @@ gimple_call_return_array (gimple *stmt, offset_int offrng[2],\n     case BUILT_IN_MEMMOVE:\n     case BUILT_IN_MEMMOVE_CHK:\n     case BUILT_IN_MEMSET:\n-    case BUILT_IN_STPCPY:\n-    case BUILT_IN_STPCPY_CHK:\n-    case BUILT_IN_STPNCPY:\n-    case BUILT_IN_STPNCPY_CHK:\n     case BUILT_IN_STRCAT:\n     case BUILT_IN_STRCAT_CHK:\n     case BUILT_IN_STRCPY:\n@@ -5265,42 +5270,98 @@ gimple_call_return_array (gimple *stmt, offset_int offrng[2],\n     case BUILT_IN_STRNCAT_CHK:\n     case BUILT_IN_STRNCPY:\n     case BUILT_IN_STRNCPY_CHK:\n+      /* Functions return the first argument (not a range).  */\n       offrng[0] = offrng[1] = 0;\n       return gimple_call_arg (stmt, 0);\n \n     case BUILT_IN_MEMPCPY:\n     case BUILT_IN_MEMPCPY_CHK:\n       {\n+\t/* The returned pointer is in a range constrained by the smaller\n+\t   of the upper bound of the size argument and the source object\n+\t   size.  */\n+\toffrng[0] = 0;\n+\toffrng[1] = HOST_WIDE_INT_M1U;\n \ttree off = gimple_call_arg (stmt, 2);\n-\tif (!get_offset_range (off, stmt, offrng, rvals))\n+\tbool off_valid = get_offset_range (off, stmt, offrng, rvals);\n+\tif (!off_valid || offrng[0] != offrng[1])\n \t  {\n-\t    offrng[0] = 0;\n-\t    offrng[1] = HOST_WIDE_INT_M1U;\n+\t    /* If the offset is either indeterminate or in some range,\n+\t       try to constrain its upper bound to at most the size\n+\t       of the source object.  */\n+\t    access_ref aref;\n+\t    tree src = gimple_call_arg (stmt, 1);\n+\t    if (compute_objsize (src, 1, &aref, rvals)\n+\t\t&& aref.sizrng[1] < offrng[1])\n+\t      offrng[1] = aref.sizrng[1];\n \t  }\n+\n+\t/* Mempcpy may return a past-the-end pointer.  */\n+\t*past_end = true;\n \treturn gimple_call_arg (stmt, 0);\n       }\n \n     case BUILT_IN_MEMCHR:\n       {\n \ttree off = gimple_call_arg (stmt, 2);\n \tif (get_offset_range (off, stmt, offrng, rvals))\n-\t  offrng[0] = 0;\n+\t  offrng[1] -= 1;\n \telse\n-\t  {\n-\t    offrng[0] = 0;\n-\t    offrng[1] = HOST_WIDE_INT_M1U;\n-\t  }\n+\t  offrng[1] = HOST_WIDE_INT_M1U;\n+\n+\toffrng[0] = 0;\n \treturn gimple_call_arg (stmt, 0);\n       }\n \n     case BUILT_IN_STRCHR:\n     case BUILT_IN_STRRCHR:\n     case BUILT_IN_STRSTR:\n+      offrng[0] = 0;\n+      offrng[1] = HOST_WIDE_INT_M1U;\n+      return gimple_call_arg (stmt, 0);\n+\n+    case BUILT_IN_STPCPY:\n+    case BUILT_IN_STPCPY_CHK:\n       {\n+\taccess_ref aref;\n+\ttree src = gimple_call_arg (stmt, 1);\n+\tif (compute_objsize (src, 1, &aref, rvals))\n+\t  offrng[1] = aref.sizrng[1] - 1;\n+\telse\n+\t  offrng[1] = HOST_WIDE_INT_M1U;\n+\t\n \toffrng[0] = 0;\n+\treturn gimple_call_arg (stmt, 0);\n+      }\n+\n+    case BUILT_IN_STPNCPY:\n+    case BUILT_IN_STPNCPY_CHK:\n+      {\n+\t/* The returned pointer is in a range between the first argument\n+\t   and it plus the smaller of the upper bound of the size argument\n+\t   and the source object size.  */\n \toffrng[1] = HOST_WIDE_INT_M1U;\n+\ttree off = gimple_call_arg (stmt, 2);\n+\tif (!get_offset_range (off, stmt, offrng, rvals)\n+\t    || offrng[0] != offrng[1])\n+\t  {\n+\t    /* If the offset is either indeterminate or in some range,\n+\t       try to constrain its upper bound to at most the size\n+\t       of the source object.  */\n+\t    access_ref aref;\n+\t    tree src = gimple_call_arg (stmt, 1);\n+\t    if (compute_objsize (src, 1, &aref, rvals)\n+\t\t&& aref.sizrng[1] < offrng[1])\n+\t      offrng[1] = aref.sizrng[1];\n+\t  }\n+\n+\t/* When the source is the empty string the returned pointer is\n+\t   a copy of the argument.  Otherwise stpcpy can also return\n+\t   a past-the-end pointer.  */\n+\toffrng[0] = 0;\n+\t*past_end = true;\n+\treturn gimple_call_arg (stmt, 0);\n       }\n-      return gimple_call_arg (stmt, 0);\n \n     default:\n       break;\n@@ -5753,9 +5814,12 @@ compute_objsize_r (tree ptr, int ostype, access_ref *pref,\n \t      /* For functions known to return one of their pointer arguments\n \t\t try to determine what the returned pointer points to, and on\n \t\t success add OFFRNG which was set to the offset added by\n-\t\t the function (e.g., memchr) to the overall offset.  */\n+\t\t the function (e.g., memchr or stpcpy) to the overall offset.\n+\t      */\n+\t      bool past_end;\n \t      offset_int offrng[2];\n-\t      if (tree ret = gimple_call_return_array (stmt, offrng, rvals))\n+\t      if (tree ret = gimple_call_return_array (stmt, offrng,\n+\t\t\t\t\t\t       &past_end, rvals))\n \t\t{\n \t\t  if (!compute_objsize_r (ret, ostype, pref, snlim, qry))\n \t\t    return false;\n@@ -5764,6 +5828,11 @@ compute_objsize_r (tree ptr, int ostype, access_ref *pref,\n \t\t     the object.  */\n \t\t  offset_int remrng[2];\n \t\t  remrng[1] = pref->size_remaining (remrng);\n+\t\t  if (remrng[1] != 0 && !past_end)\n+\t\t    /* Decrement the size for functions that never return\n+\t\t       a past-the-end pointer.  */\n+\t\t    remrng[1] -= 1;\n+\n \t\t  if (remrng[1] < offrng[1])\n \t\t    offrng[1] = remrng[1];\n \t\t  pref->add_offset (offrng[0], offrng[1]);"}, {"sha": "4ef32fbbfc3aa4069b90bfce7c89388eaa3f7775", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-80.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-80.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -0,0 +1,96 @@\n+/* PR tree-optimization/101397 - spurious warning writing to the result\n+   of stpcpy minus 1\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+char* stpcpy (char*, const char*);\n+\n+void sink (int, ...);\n+\n+extern char ax[], a3[3], a5[5], *s;\n+\n+volatile int x;\n+\n+void test_stpcpy (int i)\n+{\n+  {\n+    char *p = stpcpy (ax, s);\n+    x = p[-9];                          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    x = p[-1];                          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    x = p[ 0];\n+    x = p[+9];\n+  }\n+\n+  {\n+    char *p = stpcpy (a3, s);\n+    x = p[-2];                          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+    x = p[-1];                          // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpcpy (a3, s);\n+    x = p[-3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-2], p[-1], p[0], p[1], p[2]);\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    /* Stpcpy always returns a pointer to the copied nul (which must\n+       exist) and never a past-the-end pointer.  As a result, P below\n+       is in [a5, a5 + 4].  */\n+    char *p = stpcpy (a5, s);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpcpy (a5 + 1, s);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3]);\n+    x = p[ 4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpcpy (a5 + 2, s);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2]);\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpcpy (a5 + 3, s);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1]);\n+    x = p[ 2];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    /* Because strlen (a3) is at most 2, the stpcpy call must return\n+       a pointer in the range [ax, ax + 2], and so -3 is necessarily\n+       out of bounds.  */\n+    char *p = stpcpy (ax, a3);\n+    p[-3] = 1;                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (i >= 0)\n+      i = -1;\n+\n+    char *p = stpcpy (a3, s);\n+    x = p[i];                           // { dg-bogus \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (i >= -3)\n+      i = -3;\n+\n+    char *p = stpcpy (a3, s);\n+    p[i] = 1;                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+}"}, {"sha": "27e725d298a353b89ab4ca7e92b6861a50735573", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-81.c", "status": "added", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-81.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-81.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-81.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -0,0 +1,302 @@\n+/* PR tree-optimization/101397 - spurious warning writing to the result\n+   of stpcpy minus 1\n+   Verify warnings for indexing into a pointer returned from stpncpy.\n+   The call stpncpy(S1, S2, N) returns the address of the copy of\n+   the first NUL is it exists or &S1[N] otherwise.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wno-stringop-truncation\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* calloc (size_t, size_t);\n+char* stpncpy (char*, const char*, size_t);\n+\n+void sink (int, ...);\n+\n+extern char ax[], a3[3], a5[5], a7[7], a9[9], *s;\n+\n+volatile int x;\n+\n+/* Verify warnings for indexing into the result of stpncpy with a source\n+   pointing to an array of unknown bound.  */\n+\n+void test_stpncpy_from_ptr (int i, int n)\n+{\n+  {\n+    // P is in [ax, ax + 5].\n+    char *p = stpncpy (ax, s, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-1], p[0], p[9]);\n+  }\n+\n+  {\n+    // P is in [a5, a5 + 3].\n+    char *p = stpncpy (a5, s, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2], p[ 3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // P is in [ax, ax + 4].\n+    char *p = stpncpy (a5, s, 4);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2], p[ 3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // P is in [ax, ax + 5].\n+    char *p = stpncpy (a5, s, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2], p[ 3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // P is in [ax, ax + 4].\n+    char *p = stpncpy (a5, s, 4);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];\n+\n+    if (i > -5) i = -5;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+/* Verify warnings for indexing into the result of stpncpy with a source\n+   an array of size 5.  */\n+\n+void test_stpncpy_from_a5 (int i, int n, int n3_9)\n+{\n+  {\n+    // The returned pointer is in [ax, ax + 3].\n+    char *p = stpncpy (ax, a5, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0], p[1], p[99]);\n+  }\n+\n+  {\n+    // The returned pointer is in [ax, ax + 5].\n+    char *p = stpncpy (ax, a5, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    //The returned pointer is in [ax, ax + 5] even though n is not known.\n+    char *p = stpncpy (ax, a5, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-4], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[9], p[99]);\n+  }\n+\n+\n+  {\n+    // The returned pointer is in [a3, a3 + 3].\n+    char *p = stpncpy (a3, a5, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2]);\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is in [a3, a3 + 3].\n+    char *p = stpncpy (a3, a5, n);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2]);\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_9 < 3 || 9 < n3_9)\n+      n3_9 = 3;\n+\n+    // The returned pointer is in [a3, a3 + 3].\n+    char *p = stpncpy (a3, a5, n3_9);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[ 1], p[ 2]);\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpncpy (a3, a5, 3);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+\n+/* Verify warnings for indexing into the result of stpncpy with a source\n+   an array of size 7.  */\n+\n+void test_stpncpy_from_a7 (int i, int n, int n3_9)\n+{\n+  {\n+    // The returned pointer is ax + 5.\n+    char *p = stpncpy (ax, a7, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    //The returned pointer is in [ax, ax + 7] even though n is not known.\n+    char *p = stpncpy (ax, a7, n);\n+    x = p[-8];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-7], p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9]);\n+  }\n+\n+\n+  {\n+    // The returned pointer is in [a5, a5 + 3].\n+    char *p = stpncpy (a5, a7, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is a5 + 4.\n+    char *p = stpncpy (a5, a7, 4);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is in [a5, a5 + 5].\n+    char *p = stpncpy (a5, a7, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_9 < 3 || 9 < n3_9)\n+      n3_9 = 3;\n+\n+    // The returned pointer is in [a5, a5 + 5].\n+    char *p = stpncpy (a5, a7, n3_9);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = stpncpy (a5, a7, 4);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];\n+\n+    if (i > -5) i = -5;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+\n+void test_stpncpy_from_a5_to_allocated (int i, int n, int n5_7, int n3_9)\n+{\n+  if (n5_7 < 5 || 7 < n5_7)\n+    n5_7 = 5;\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, s, n);\n+    x = p[-8];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-7], p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, a3, n);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, a5, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, a9, n);\n+    x = p[-8];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-7], p[-6], p[-5], p[-3], p[-4], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, a3, n3_9);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *d = calloc (n5_7, 1);\n+    char *p = stpncpy (d, a9, n3_9);\n+    x = p[-8];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-7], p[-6], p[-5], p[-4], p[-4], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+}"}, {"sha": "b5dd919dce16a2212fb55a13ed4f29b581cba7a5", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-82.c", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-82.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -0,0 +1,258 @@\n+/* PR tree-optimization/101397 - spurious warning writing to the result\n+   of stpcpy minus 1\n+   Verify warnings for indexing into a pointer returned from mempcpy.\n+   The call mempcpy(S1, S2, N) returns &S1[N].\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* mempcpy (void*, const void*, size_t);\n+\n+extern char ax[], a3[3], a5[5], a7[7], *s;\n+\n+volatile int x;\n+\n+/* Verify warnings for indexing into the result of mempcpy with a source\n+   pointing to an array of unknown bound.  */\n+\n+void test_mempcpy_from_ptr (int i)\n+{\n+  {\n+    char *p = mempcpy (ax, s, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    char *p = mempcpy (a5, s, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 1];\n+    x = p[ 2];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = mempcpy (a5, s, 4);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-4];\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = mempcpy (a5, s, 4);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];\n+\n+    if (i > -5) i = -5;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+/* Verify warnings for indexing into the result of mempcpy with a source\n+   an array of size 5.  */\n+\n+void test_mempcpy_from_a5 (int i, int n, int n3_9)\n+{\n+  {\n+    // The returned pointer is ax + 3 as specified by the bound.\n+    char *p = mempcpy (ax, a5, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[ 0];\n+    x = p[ 1];\n+    x = p[ 2];\n+  }\n+\n+  {\n+    // The returned pointer is ax + 5.\n+    char *p = mempcpy (ax, a5, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    //The returned pointer is in [ax, ax + 5] even though n is not known.\n+    char *p = mempcpy (ax, a5, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+\n+  {\n+    // The returned pointer is a3 + 3.\n+    char *p = mempcpy (a3, a5, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-1];\n+    x = p[ 0];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[ 1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is in [a3, a3 + 3].\n+    char *p = mempcpy (a3, a5, n);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 2];\n+    x = p[ 3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_9 < 3 || 9 < n3_9)\n+      n3_9 = 3;\n+\n+    // The returned pointer is a3.\n+    char *p = mempcpy (a3, a5, n3_9);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = mempcpy (a3, a5, 3);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+\n+/* Verify warnings for indexing into the result of mempcpy with a source\n+   an array of size 7.  */\n+\n+void test_mempcpy_from_a7 (int i, int n, int n3_9)\n+{\n+  {\n+    // The returned pointer is ax + 5.\n+    char *p = mempcpy (ax, a7, 5);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    //The returned pointer is in [ax, ax + 7] even though n is not known.\n+    char *p = mempcpy (ax, a7, n);\n+    x = p[-8];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-7];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+\n+  {\n+    // The returned pointer is a5 + 3 as specified by the bound.\n+    char *p = mempcpy (a5, a7, 3);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[ 0];\n+    x = p[ 1];\n+    x = p[ 2];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is a5 + 4.\n+    char *p = mempcpy (a5, a7, 4);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-4];\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is in [a5, a5 + 5].\n+    char *p = mempcpy (a5, a7, n);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 4];\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_9 < 3 || 9 < n3_9)\n+      n3_9 = 3;\n+\n+    // The returned pointer is in [a5 + 3, a5 + 5].\n+    char *p = mempcpy (a5, a7, n3_9);\n+    x = p[-6];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-5];\n+    x = p[-3];\n+    x = p[-2];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 1];\n+    x = p[ 2];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = mempcpy (a5, a7, 4);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];\n+\n+    if (i > -5) i = -5;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}"}, {"sha": "b1d02eaffcc94c961d5d95cd80e1cd0d8d2c58fc", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-83.c", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-83.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -0,0 +1,172 @@\n+/* PR tree-optimization/101397 - spurious warning writing to the result\n+   of stpcpy minus 1\n+   Verify warnings for indexing into a pointer returned from stpncpy.\n+   The call stpncpy(S1, S2, N) returns the address of the copy of\n+   the first NUL is it exists or &S1[N] otherwise.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wno-stringop-truncation\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+__attribute__ ((alloc_size (1))) const void* alloc (size_t);\n+\n+void* memchr (const void*, int, size_t);\n+\n+void sink (int, ...);\n+\n+extern char ax[], a3[3], a5[5], a7[7], a9[9];\n+\n+volatile int x;\n+\n+/* Verify warnings for indexing into the result of memchr.  */\n+\n+void test_memchr (int i, int n, int n3_5, int n3_9)\n+{\n+  {\n+    /* Because memchr never returns a past-the-end pointer the result\n+       below is in [ax, ax + 4].  */\n+    const char *p = memchr (ax, x, 5);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[-4];\n+    x = p[-1];\n+    x = p[ 0];\n+    x = p[ 9];\n+  }\n+\n+  {\n+    // The returned pointer is in [ax, ax + n].\n+    const char *p = memchr (ax, x, n);\n+    sink (p[-99], p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[99]);\n+  }\n+\n+\n+  {\n+    // The returned pointer is in [a5, a5 + 2].\n+    const char *p = memchr (a5, x, 3);\n+    x = p[-3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is a5 + 4.\n+    const char *p = memchr (a5, x, 4);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    // The returned pointer is in [a5, a5 + 4].\n+    const char *p = memchr (a5, x, n);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_5 < 3 || 5 < n3_5)\n+      n3_5 = 3;\n+\n+    // The returned pointer is in [a7, a7 + 4].\n+    const char *p = memchr (a7, x, n3_5);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    if (n3_9 < 3 || 9 < n3_9)\n+      n3_9 = 3;\n+\n+    // The returned pointer is in [a5, a5 + 4].\n+    const char *p = memchr (a5, x, n3_9);\n+    x = p[-5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *p = memchr (a5, x, 4);\n+\n+    if (i > -1) i = -1;\n+    x = p[i];\n+\n+    if (i > -2) i = -2;\n+    x = p[i];\n+\n+    if (i > -3) i = -3;\n+    x = p[i];\n+\n+    if (i > -4) i = -4;\n+    x = p[i];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+}\n+\n+\n+void test_memchr_in_allocated (int i, int n, int n5_7, int n3_9)\n+{\n+  if (n5_7 < 5 || 7 < n5_7)\n+    n5_7 = 5;\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-5], p[-3], p[-4], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n3_9);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-5], p[-4], p[-3], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    const char *s = alloc (n5_7);\n+    const char *p = memchr (s, x, n3_9);\n+    x = p[-7];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-6], p[-5], p[-4], p[-4], p[-2], p[-1], p[0]);\n+    sink (p[1], p[2], p[3], p[4], p[5], p[6]);\n+    x = p[7];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+}"}, {"sha": "b9350d79ebf073bfb96c5e951534dc5cfde3b2b2", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-84.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-84.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-84.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-84.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -0,0 +1,65 @@\n+/* PR tree-optimization/101397 - spurious warning writing to the result\n+   of stpcpy minus 1\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+char* strcpy (char*, const char*);\n+\n+void sink (int, ...);\n+\n+extern char ax[], a3[3], a5[5], *s;\n+\n+volatile int x;\n+\n+void test_strcpy (int i)\n+{\n+  {\n+    char *p = strcpy (ax, s);\n+    x = p[-1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[ 0];\n+    x = p[+9];\n+  }\n+\n+  {\n+    char *p = strcpy (a3, s);\n+    x = p[-1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    x = p[0];\n+    x = p[1];\n+    x = p[2];\n+    x = p[3];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+ }\n+\n+  {\n+    char *p = strcpy (a5, s);\n+    x = p[-1];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[0], p[1], p[2], p[3], p[4]);\n+    x = p[ 5];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = strcpy (a5 + 1, s);\n+    x = p[-2];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-1], p[0], p[1], p[2], p[3]);\n+    x = p[4];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = strcpy (a5 + 2, s);\n+    x = p[-3];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-2], p[-1], p[0], p[1], p[2]);\n+    x = p[3];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = strcpy (a5 + 3, s);\n+    x = p[-4];                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[-3], p[-2], p[-1], p[0], p[1]);\n+    x = p[2];                           // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+  }\n+\n+  {\n+    char *p = strcpy (ax, a3);\n+    p[-1] = 1;                          // { dg-warning \"\\\\\\[-Warray-bounds\" }\n+    sink (p[0], p[1], p[2], p[9], p[99]);\n+  }\n+}"}, {"sha": "042c9676c91c5d8cc7e79dbbed1b8dc18b086569", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-46.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf5b49ebd2176b8c535147377381dd07fbdd643/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-46.c?ref=8bf5b49ebd2176b8c535147377381dd07fbdd643", "patch": "@@ -79,9 +79,8 @@ void warn_memchr_var_memset_range (const void *s, unsigned n)\n      as in the first two notes.  The exact value probably isn't too\n      important. */\n   char *p0 = malloc (UR (5, 7));\n-  // { dg-message \": destination object of size \\\\\\[5, 7]\" \"note 1\" { target *-*-* } .-1 }\n-  // { dg-message \"at offset \\\\\\[1, 7] into destination object of size \\\\\\[5, 7]\" \"note 2\"  { target *-*-* } .-2 }\n-  // { dg-message \"at offset \\\\\\[2, 7] into destination object of size \\\\\\[5, 7]\" \"note 3\"  { target *-*-* } .-3 }\n+  // { dg-message \"at offset \\\\\\[\\[01\\], 6] into destination object of size \\\\\\[5, 7]\" \"note 2\"  { target *-*-* } .-1 }\n+  // { dg-message \"at offset \\\\\\[2, 7] into destination object of size \\\\\\[5, 7]\" \"note 3\"  { target *-*-* } .-2 }\n \n   sink (p0);\n   char *p1 = memchr (p0, '1', n);"}]}