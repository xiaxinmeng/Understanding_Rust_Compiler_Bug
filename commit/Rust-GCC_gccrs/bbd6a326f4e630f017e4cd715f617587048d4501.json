{"sha": "bbd6a326f4e630f017e4cd715f617587048d4501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkNmEzMjZmNGU2MzBmMDE3ZTRjZDcxNWY2MTc1ODcwNDhkNDUwMQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-19T14:51:13Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-25T15:02:47Z"}, "message": "d: Move d_signed_type and d_unsigned_type to types.cc\n\nThese two functions are not tied to the language-specific part of the\nfront-end in any way.\n\ngcc/d/ChangeLog:\n\n\t* d-lang.cc (d_gimplify_expr_p): Make static.\n\t(d_parse_file): Likewise.\n\t(d_signed_or_unsigned_type): Move to types.cc.\n\t(d_unsigned_type): Likewise.\n\t(d_signed_type): Likewise.\n\t* d-tree.h (d_unsigned_type): Change the location in file.\n\t(d_signed_type): Likewise.\n\t* types.cc (d_signed_or_unsigned_type): Moved from d-lang.cc.\n\t(d_unsigned_type): Likewise.\n\t(d_signed_type): Likewise.", "tree": {"sha": "ebf31e52e752025d4c289e00a5bf1a59f982f797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebf31e52e752025d4c289e00a5bf1a59f982f797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd6a326f4e630f017e4cd715f617587048d4501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd6a326f4e630f017e4cd715f617587048d4501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd6a326f4e630f017e4cd715f617587048d4501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd6a326f4e630f017e4cd715f617587048d4501/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7b352a8379dbdd74c962d11951982e21e20f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7b352a8379dbdd74c962d11951982e21e20f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7b352a8379dbdd74c962d11951982e21e20f13"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "6412c1c204c44fddaa9c31120792b96b3c80a2cd", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=bbd6a326f4e630f017e4cd715f617587048d4501", "patch": "@@ -880,7 +880,7 @@ empty_modify_p (tree type, tree op)\n /* Implements the lang_hooks.gimplify_expr routine for language D.\n    Do gimplification of D specific expression trees in EXPR_P.  */\n \n-int\n+static int\n d_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \t\t gimple_seq *post_p ATTRIBUTE_UNUSED)\n {\n@@ -1024,7 +1024,7 @@ d_add_entrypoint_module (Module *entry, Module *root)\n \n /* Implements the lang_hooks.parse_file routine for language D.  */\n \n-void\n+static void\n d_parse_file (void)\n {\n   if (global.params.verbose)\n@@ -1507,49 +1507,6 @@ d_type_for_size (unsigned bits, int unsignedp)\n   return 0;\n }\n \n-/* Return the signed or unsigned version of TYPE, an integral type, the\n-   signedness being specified by UNSIGNEDP.  */\n-\n-static tree\n-d_signed_or_unsigned_type (int unsignedp, tree type)\n-{\n-  if (TYPE_UNSIGNED (type) == (unsigned) unsignedp)\n-    return type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_cent_type))\n-    return unsignedp ? d_ucent_type : d_cent_type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_long_type))\n-    return unsignedp ? d_ulong_type : d_long_type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_int_type))\n-    return unsignedp ? d_uint_type : d_int_type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_short_type))\n-    return unsignedp ? d_ushort_type : d_short_type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_byte_type))\n-    return unsignedp ? d_ubyte_type : d_byte_type;\n-\n-  return signed_or_unsigned_type_for (unsignedp, type);\n-}\n-\n-/* Return the unsigned version of TYPE, an integral type.  */\n-\n-tree\n-d_unsigned_type (tree type)\n-{\n-  return d_signed_or_unsigned_type (1, type);\n-}\n-\n-/* Return the signed version of TYPE, an integral type.  */\n-\n-tree\n-d_signed_type (tree type)\n-{\n-  return d_signed_or_unsigned_type (0, type);\n-}\n-\n /* Implements the lang_hooks.types.type_promotes_to routine for language D.\n    All promotions for variable arguments are handled by the D frontend.  */\n "}, {"sha": "b4b832f9ad88da0e5be1d5008b331e0e4e3c6963", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=bbd6a326f4e630f017e4cd715f617587048d4501", "patch": "@@ -598,8 +598,6 @@ extern d_tree_node_structure_enum d_tree_node_structure (lang_tree_node *);\n extern struct lang_type *build_lang_type (Type *);\n extern struct lang_decl *build_lang_decl (Declaration *);\n extern tree d_pushdecl (tree);\n-extern tree d_unsigned_type (tree);\n-extern tree d_signed_type (tree);\n extern void d_keep (tree);\n \n /* In decl.cc.  */\n@@ -672,6 +670,8 @@ extern void add_stmt (tree);\n extern void build_function_body (FuncDeclaration *);\n \n /* In types.cc.  */\n+extern tree d_unsigned_type (tree);\n+extern tree d_signed_type (tree);\n extern bool valist_array_p (Type *);\n extern bool empty_aggregate_p (tree);\n extern bool same_type_p (Type *, Type *);"}, {"sha": "0d05e4d82b391f0016b73dadae1863d7fa1d9de0", "filename": "gcc/d/types.cc", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6a326f4e630f017e4cd715f617587048d4501/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=bbd6a326f4e630f017e4cd715f617587048d4501", "patch": "@@ -42,6 +42,49 @@ along with GCC; see the file COPYING3.  If not see\n #include \"d-tree.h\"\n \n \n+/* Return the signed or unsigned version of TYPE, an integral type, the\n+   signedness being specified by UNSIGNEDP.  */\n+\n+static tree\n+d_signed_or_unsigned_type (int unsignedp, tree type)\n+{\n+  if (TYPE_UNSIGNED (type) == (unsigned) unsignedp)\n+    return type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_cent_type))\n+    return unsignedp ? d_ucent_type : d_cent_type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_long_type))\n+    return unsignedp ? d_ulong_type : d_long_type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_int_type))\n+    return unsignedp ? d_uint_type : d_int_type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_short_type))\n+    return unsignedp ? d_ushort_type : d_short_type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (d_byte_type))\n+    return unsignedp ? d_ubyte_type : d_byte_type;\n+\n+  return signed_or_unsigned_type_for (unsignedp, type);\n+}\n+\n+/* Return the unsigned version of TYPE, an integral type.  */\n+\n+tree\n+d_unsigned_type (tree type)\n+{\n+  return d_signed_or_unsigned_type (1, type);\n+}\n+\n+/* Return the signed version of TYPE, an integral type.  */\n+\n+tree\n+d_signed_type (tree type)\n+{\n+  return d_signed_or_unsigned_type (0, type);\n+}\n+\n /* Return TRUE if TYPE is a static array va_list.  This is for compatibility\n    with the C ABI, where va_list static arrays are passed by reference.\n    However for every other case in D, static arrays are passed by value.  */"}]}