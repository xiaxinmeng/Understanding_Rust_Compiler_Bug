{"sha": "eb0e98f885208502b82b75ed7e63a2dce252cb9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwZTk4Zjg4NTIwODUwMmI4MmI3NWVkN2U2M2EyZGNlMjUyY2I5Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-23T09:20:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-23T09:20:14Z"}, "message": "re PR tree-optimization/82129 (ICE in compute_antic, at tree-ssa-pre.c:2447)\n\n2017-10-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82129\n\t* tree-ssa-pre.c (bitmap_set_and): Remove.\n\t(compute_antic_aux): Compute ANTIC_OUT intersection in a way\n\tcanonicalizing expressions in the set to those with lowest\n\tID rather than taking that from the first edge.\n\n\t* gcc.dg/torture/pr82129.c: New testcase.\n\nFrom-SVN: r253998", "tree": {"sha": "3543a5f1ed01b181e0532f445351912b1880802a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3543a5f1ed01b181e0532f445351912b1880802a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0e98f885208502b82b75ed7e63a2dce252cb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0e98f885208502b82b75ed7e63a2dce252cb9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0e98f885208502b82b75ed7e63a2dce252cb9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0e98f885208502b82b75ed7e63a2dce252cb9b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "735d873d7b6d3310a96b548cdc2d61f236937e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735d873d7b6d3310a96b548cdc2d61f236937e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735d873d7b6d3310a96b548cdc2d61f236937e7f"}], "stats": {"total": 137, "additions": 104, "deletions": 33}, "files": [{"sha": "28052db569f5916d1769476e89f6b1097945cd58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb0e98f885208502b82b75ed7e63a2dce252cb9b", "patch": "@@ -1,3 +1,11 @@\n+2017-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82129\n+\t* tree-ssa-pre.c (bitmap_set_and): Remove.\n+\t(compute_antic_aux): Compute ANTIC_OUT intersection in a way\n+\tcanonicalizing expressions in the set to those with lowest\n+\tID rather than taking that from the first edge.\n+\n 2017-10-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* combine.c (rtx_equal_for_field_assignment_p): Use"}, {"sha": "9ca1131a65b7209b71391cdeb2c9f11d69f4c4cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb0e98f885208502b82b75ed7e63a2dce252cb9b", "patch": "@@ -1,3 +1,8 @@\n+2017-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82129\n+\t* gcc.dg/torture/pr82129.c: New testcase.\n+\n 2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/52451"}, {"sha": "b1161491fe6d57e1995894936fa3d30b034361f8", "filename": "gcc/testsuite/gcc.dg/torture/pr82129.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr82129.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr82129.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr82129.c?ref=eb0e98f885208502b82b75ed7e63a2dce252cb9b", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-pre\" } */\n+\n+int pj;\n+\n+void\n+g4 (unsigned long int *bc, unsigned long int *h5)\n+{\n+  if (pj != 0)\n+    {\n+      int ib = 0;\n+\n+      while (bc != 0)\n+\t{\n+m6:\n+\t  for (pj = 0; pj < 2; ++pj)\n+\t    pj = 0;\n+\n+\t  while (pj != 0)\n+\t    {\n+\t      for (;;)\n+\t\t{\n+\t\t}\n+\n+\t      while (ib != 0)\n+\t\t{\n+\t\t  unsigned long int tv = *bc;\n+\t\t  unsigned long int n7;\n+\n+\t\t  *bc = 1;\n+\t\t  while (*bc != 0)\n+\t\t    {\n+\t\t    }\n+\n+ut:\n+\t\t  if (pj == 0)\n+\t\t    n7 = *h5 > 0;\n+\t\t  else\n+\t\t    {\n+\t\t      *h5 = tv;\n+\t\t      n7 = *h5;\n+\t\t    }\n+\t\t  ib += n7;\n+\t\t}\n+\t    }\n+\t}\n+\n+      goto ut;\n+    }\n+\n+  goto m6;\n+}"}, {"sha": "4861a4c231fbe605f7b6a4d5c699ec20a9252220", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0e98f885208502b82b75ed7e63a2dce252cb9b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=eb0e98f885208502b82b75ed7e63a2dce252cb9b", "patch": "@@ -537,7 +537,6 @@ static pre_expr bitmap_find_leader (bitmap_set_t, unsigned int);\n static void bitmap_value_insert_into_set (bitmap_set_t, pre_expr);\n static void bitmap_value_replace_in_set (bitmap_set_t, pre_expr);\n static void bitmap_set_copy (bitmap_set_t, bitmap_set_t);\n-static void bitmap_set_and (bitmap_set_t, bitmap_set_t);\n static bool bitmap_set_contains_value (bitmap_set_t, unsigned int);\n static void bitmap_insert_into_set (bitmap_set_t, pre_expr);\n static bitmap_set_t bitmap_set_new (void);\n@@ -800,36 +799,6 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n   return result;\n }\n \n-/* Perform bitmapped set operation DEST &= ORIG.  */\n-\n-static void\n-bitmap_set_and (bitmap_set_t dest, bitmap_set_t orig)\n-{\n-  bitmap_iterator bi;\n-  unsigned int i;\n-\n-  if (dest != orig)\n-    {\n-      bitmap_and_into (&dest->values, &orig->values);\n-\n-      unsigned int to_clear = -1U;\n-      FOR_EACH_EXPR_ID_IN_SET (dest, i, bi)\n-\t{\n-\t  if (to_clear != -1U)\n-\t    {\n-\t      bitmap_clear_bit (&dest->expressions, to_clear);\n-\t      to_clear = -1U;\n-\t    }\n-\t  pre_expr expr = expression_for_id (i);\n-\t  unsigned int value_id = get_expr_value_id (expr);\n-\t  if (!bitmap_bit_p (&dest->values, value_id))\n-\t    to_clear = i;\n-\t}\n-      if (to_clear != -1U)\n-\tbitmap_clear_bit (&dest->expressions, to_clear);\n-    }\n-}\n-\n /* Subtract all expressions contained in ORIG from DEST.  */\n \n static bitmap_set_t\n@@ -2182,17 +2151,54 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n \n       phi_translate_set (ANTIC_OUT, ANTIC_IN (first), block, first);\n \n+      /* If we have multiple successors we need to intersect the ANTIC_OUT\n+         sets.  For values that's a simple intersection but for\n+\t expressions it is a union.  Given we want to have a single\n+\t expression per value in our sets we have to canonicalize.\n+\t Avoid randomness and running into cycles like for PR82129 and\n+\t canonicalize the expression we choose to the one with the\n+\t lowest id.  This requires we actually compute the union first.  */\n       FOR_EACH_VEC_ELT (worklist, i, bprime)\n \t{\n \t  if (!gimple_seq_empty_p (phi_nodes (bprime)))\n \t    {\n \t      bitmap_set_t tmp = bitmap_set_new ();\n \t      phi_translate_set (tmp, ANTIC_IN (bprime), block, bprime);\n-\t      bitmap_set_and (ANTIC_OUT, tmp);\n+\t      bitmap_and_into (&ANTIC_OUT->values, &tmp->values);\n+\t      bitmap_ior_into (&ANTIC_OUT->expressions, &tmp->expressions);\n \t      bitmap_set_free (tmp);\n \t    }\n \t  else\n-\t    bitmap_set_and (ANTIC_OUT, ANTIC_IN (bprime));\n+\t    {\n+\t      bitmap_and_into (&ANTIC_OUT->values, &ANTIC_IN (bprime)->values);\n+\t      bitmap_ior_into (&ANTIC_OUT->expressions,\n+\t\t\t       &ANTIC_IN (bprime)->expressions);\n+\t    }\n+\t}\n+      if (! worklist.is_empty ())\n+\t{\n+\t  /* Prune expressions not in the value set, canonicalizing to\n+\t     expression with lowest ID.  */\n+\t  bitmap_iterator bi;\n+\t  unsigned int i;\n+\t  unsigned int to_clear = -1U;\n+\t  bitmap seen_value = BITMAP_ALLOC (NULL);\n+\t  FOR_EACH_EXPR_ID_IN_SET (ANTIC_OUT, i, bi)\n+\t    {\n+\t      if (to_clear != -1U)\n+\t\t{\n+\t\t  bitmap_clear_bit (&ANTIC_OUT->expressions, to_clear);\n+\t\t  to_clear = -1U;\n+\t\t}\n+\t      pre_expr expr = expression_for_id (i);\n+\t      unsigned int value_id = get_expr_value_id (expr);\n+\t      if (!bitmap_bit_p (&ANTIC_OUT->values, value_id)\n+\t\t  || !bitmap_set_bit (seen_value, value_id))\n+\t\tto_clear = i;\n+\t    }\n+\t  if (to_clear != -1U)\n+\t    bitmap_clear_bit (&ANTIC_OUT->expressions, to_clear);\n+\t  BITMAP_FREE (seen_value);\n \t}\n     }\n "}]}