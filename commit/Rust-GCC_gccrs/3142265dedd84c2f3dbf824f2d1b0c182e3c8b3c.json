{"sha": "3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "node_id": "C_kwDOANBUbNoAKDMxNDIyNjVkZWRkODRjMmYzZGJmODI0ZjJkMWIwYzE4MmUzYzhiM2M", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-16T08:51:47Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:23:41Z"}, "message": "RISC-V: No extensions for SImode min/max against safe constant\n\nOptimize the common case of a SImode min/max against a constant\nthat is safe both for sign- and zero-extension.\nE.g., consider the case\n  int f(unsigned int* a)\n  {\n    const int C = 1000;\n    return *a * 3 > C ? C : *a * 3;\n  }\nwhere the constant C will yield the same result in DImode whether\nsign- or zero-extended.\n\nThis should eventually go away once the lowering to RTL smartens up\nand considers the precision/signedness and the value-ranges of the\noperands to MIN_EXPR and MAX_EXPR.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*minmax): Additional pattern for\n\t  min/max against constants that are extension-invariant.\n\t* config/riscv/iterators.md (minmax_optab): Add an iterator\n\t  that has only min and max rtl.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbb-min-max-02.c: New test.", "tree": {"sha": "70cb060b825811f3b5422e2ff6906e83371f4396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70cb060b825811f3b5422e2ff6906e83371f4396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d2bcc55bcc0991c0e58e97edf4a69e847e82c6"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d17133d58c1553d450407541d1affced10c0b6e9", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "patch": "@@ -368,6 +368,24 @@\n   \"<bitmanip_insn>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n+;; Optimize the common case of a SImode min/max against a constant\n+;; that is safe both for sign- and zero-extension.\n+(define_insn_and_split \"*minmax\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (subreg:SI\n+\t    (bitmanip_minmax:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t\t\t\t(match_operand:DI 2 \"immediate_operand\" \"i\"))\n+\t   0)))\n+   (clobber (match_scratch:DI 3 \"=&r\"))\n+   (clobber (match_scratch:DI 4 \"=&r\"))]\n+  \"TARGET_64BIT && TARGET_ZBB && sext_hwi (INTVAL (operands[2]), 32) >= 0\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n+   (set (match_dup 4) (match_dup 2))\n+   (set (match_dup 0) (<minmax_optab>:DI (match_dup 3) (match_dup 4)))])\n+\n ;; ZBS extension.\n \n (define_insn \"*bset<mode>\""}, {"sha": "efdd3ccc9a7087b5fdb14544787777ecfcefa4cd", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "patch": "@@ -221,6 +221,10 @@\n   [(plus \"add\") (ior \"or\") (xor \"xor\") (and \"and\")])\n \n ; bitmanip code attributes\n+(define_code_attr minmax_optab [(smin \"smin\")\n+\t\t\t\t(smax \"smax\")\n+\t\t\t\t(umin \"umin\")\n+\t\t\t\t(umax \"umax\")])\n (define_code_attr bitmanip_optab [(smin \"smin\")\n \t\t\t\t  (smax \"smax\")\n \t\t\t\t  (umin \"umin\")"}, {"sha": "b462859f10f2c47ae4bf79800af466981e9ee534", "filename": "gcc/testsuite/gcc.target/riscv/zbb-min-max-02.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max-02.c?ref=3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba_zbb -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-O1\" \"-Os\" \"-Oz\" \"-Og\" } } */\n+\n+int f(unsigned int* a)\n+{\n+  const int C = 1000;\n+  return *a * 3 > C ? C : *a * 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \"minu\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sext.w\" 1 } } */\n+/* { dg-final { scan-assembler-not \"zext.w\" } } */\n+"}]}