{"sha": "25de0a29fb99fb04f25f16016634de912319676f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkZTBhMjlmYjk5ZmIwNGYyNWYxNjAxNjYzNGRlOTEyMzE5Njc2Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2015-03-11T15:01:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2015-03-11T15:01:37Z"}, "message": "cp-gimplify.c (simple_empty_class_p): New.\n\n\t* cp-gimplify.c (simple_empty_class_p): New.\n\t* cp-gimplify.c (cp_gimplify_expr): Handle RETURN_EXPR.  Abstract\n\tthe code for empty class copies into simple_empty_class_p, and\n\tadapt it to handle COMPOUND_EXPRs.\n\nFrom-SVN: r221347", "tree": {"sha": "36bf394f0a087db303d57dc1e747cfedbfecc515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36bf394f0a087db303d57dc1e747cfedbfecc515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25de0a29fb99fb04f25f16016634de912319676f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25de0a29fb99fb04f25f16016634de912319676f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25de0a29fb99fb04f25f16016634de912319676f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25de0a29fb99fb04f25f16016634de912319676f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b98fab5f1ae21b76813630539e500e04c8a6952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b98fab5f1ae21b76813630539e500e04c8a6952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b98fab5f1ae21b76813630539e500e04c8a6952"}], "stats": {"total": 102, "additions": 78, "deletions": 24}, "files": [{"sha": "f350705c3767ea404edbeaadbb3803d11f132857", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25de0a29fb99fb04f25f16016634de912319676f", "patch": "@@ -1,3 +1,10 @@\n+2015-03-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* cp-gimplify.c (simple_empty_class_p): New.\n+\t* cp-gimplify.c (cp_gimplify_expr): Handle RETURN_EXPR.  Abstract\n+\tthe code for empty class copies into simple_empty_class_p, and\n+\tadapt it to handle COMPOUND_EXPRs.\n+\n 2015-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65370"}, {"sha": "70645b59b80449dbea4753a11cb3ec8c83d67573", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=25de0a29fb99fb04f25f16016634de912319676f", "patch": "@@ -53,6 +53,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"c-family/c-ubsan.h\"\n #include \"cilk.h\"\n+#include \"gimplify.h\"\n+#include \"gimple-expr.h\"\n \n /* Forward declarations.  */\n \n@@ -528,6 +530,29 @@ gimplify_must_not_throw_expr (tree *expr_p, gimple_seq *pre_p)\n   return GS_ALL_DONE;\n }\n \n+/* Return TRUE if an operand (OP) of a given TYPE being copied is\n+   really just an empty class copy.\n+\n+   Check that the operand has a simple form so that TARGET_EXPRs and\n+   non-empty CONSTRUCTORs get reduced properly, and we leave the\n+   return slot optimization alone because it isn't a copy.  */\n+\n+static bool\n+simple_empty_class_p (tree type, tree op)\n+{\n+  return\n+    ((TREE_CODE (op) == COMPOUND_EXPR\n+      && simple_empty_class_p (type, TREE_OPERAND (op, 1)))\n+     || is_gimple_lvalue (op)\n+     || INDIRECT_REF_P (op)\n+     || (TREE_CODE (op) == CONSTRUCTOR\n+\t && CONSTRUCTOR_NELTS (op) == 0\n+\t && !TREE_CLOBBER_P (op))\n+     || (TREE_CODE (op) == CALL_EXPR\n+\t && !CALL_EXPR_RETURN_SLOT_OPT (op)))\n+    && is_really_empty_class (type);\n+}\n+\n /* Do C++-specific gimplification.  Args are as for gimplify_expr.  */\n \n int\n@@ -597,6 +622,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \treturn GS_OK;\n       /* Otherwise fall through.  */\n     case MODIFY_EXPR:\n+    modify_expr_case:\n       {\n \tif (fn_contains_cilk_spawn_p (cfun)\n \t    && cilk_detect_spawn_and_unwrap (expr_p)\n@@ -616,31 +642,22 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  TREE_OPERAND (*expr_p, 1) = build1 (VIEW_CONVERT_EXPR,\n \t\t\t\t\t      TREE_TYPE (op0), op1);\n \n-\telse if ((is_gimple_lvalue (op1) || INDIRECT_REF_P (op1)\n-\t\t  || (TREE_CODE (op1) == CONSTRUCTOR\n-\t\t      && CONSTRUCTOR_NELTS (op1) == 0\n-\t\t      && !TREE_CLOBBER_P (op1))\n-\t\t  || (TREE_CODE (op1) == CALL_EXPR\n-\t\t      && !CALL_EXPR_RETURN_SLOT_OPT (op1)))\n-\t\t && is_really_empty_class (TREE_TYPE (op0)))\n+\telse if (simple_empty_class_p (TREE_TYPE (op0), op1))\n \t  {\n-\t    /* Remove any copies of empty classes.  We check that the RHS\n-\t       has a simple form so that TARGET_EXPRs and non-empty\n-\t       CONSTRUCTORs get reduced properly, and we leave the return\n-\t       slot optimization alone because it isn't a copy (FIXME so it\n-\t       shouldn't be represented as one).\n-\n-\t       Also drop volatile variables on the RHS to avoid infinite\n-\t       recursion from gimplify_expr trying to load the value.  */\n-\t    if (!TREE_SIDE_EFFECTS (op1))\n-\t      *expr_p = op0;\n-\t    else if (TREE_THIS_VOLATILE (op1)\n-\t\t     && (REFERENCE_CLASS_P (op1) || DECL_P (op1)))\n-\t      *expr_p = build2 (COMPOUND_EXPR, TREE_TYPE (*expr_p),\n-\t\t\t\tbuild_fold_addr_expr (op1), op0);\n-\t    else\n-\t      *expr_p = build2 (COMPOUND_EXPR, TREE_TYPE (*expr_p),\n-\t\t\t\top0, op1);\n+\t    /* Remove any copies of empty classes.  Also drop volatile\n+\t       variables on the RHS to avoid infinite recursion from\n+\t       gimplify_expr trying to load the value.  */\n+\t    gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t   is_gimple_lvalue, fb_lvalue);\n+\t    if (TREE_SIDE_EFFECTS (op1))\n+\t      {\n+\t\tif (TREE_THIS_VOLATILE (op1)\n+\t\t    && (REFERENCE_CLASS_P (op1) || DECL_P (op1)))\n+\t\t  op1 = build_fold_addr_expr (op1);\n+\n+\t\tgimplify_and_add (op1, pre_p);\n+\t      }\n+\t    *expr_p = TREE_OPERAND (*expr_p, 0);\n \t  }\n       }\n       ret = GS_OK;\n@@ -740,6 +757,19 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t}\n       break;\n \n+    case RETURN_EXPR:\n+      if (TREE_OPERAND (*expr_p, 0)\n+\t  && (TREE_CODE (TREE_OPERAND (*expr_p, 0)) == INIT_EXPR\n+\t      || TREE_CODE (TREE_OPERAND (*expr_p, 0)) == MODIFY_EXPR))\n+\t{\n+\t  expr_p = &TREE_OPERAND (*expr_p, 0);\n+\t  code = TREE_CODE (*expr_p);\n+\t  /* Avoid going through the INIT_EXPR case, which can\n+\t     degrade INIT_EXPRs into AGGR_INIT_EXPRs.  */\n+\t  goto modify_expr_case;\n+\t}\n+      /* Fall through.  */\n+\n     default:\n       ret = (enum gimplify_status) c_gimplify_expr (expr_p, pre_p, post_p);\n       break;"}, {"sha": "a14c4372a80c92ff5097930ff7fa4d41bd1cab90", "filename": "gcc/testsuite/g++.dg/other/empty-class.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fempty-class.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25de0a29fb99fb04f25f16016634de912319676f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fempty-class.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fempty-class.C?ref=25de0a29fb99fb04f25f16016634de912319676f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+/* Test that we return retval directly, instead of going through an\n+   intermediate temporary, when returning an empty class.  */\n+\n+class obj {\n+  public:\n+   obj(int);\n+};\n+\n+obj funky(){\n+    return obj(555);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return <retval>;\" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}