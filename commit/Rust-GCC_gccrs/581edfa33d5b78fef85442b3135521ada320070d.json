{"sha": "581edfa33d5b78fef85442b3135521ada320070d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxZWRmYTMzZDViNzhmZWY4NTQ0MmIzMTM1NTIxYWRhMzIwMDcwZA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-22T01:03:42Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-22T01:03:42Z"}, "message": "remove most ifdef STACK_GROWS_DOWNWARD\n\ngcc/c-family/ChangeLog:\n\n2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Use if instead of #if with\n\tSTACK_GROWS_DOWNWARD.\n\ngcc/ChangeLog:\n\n2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* builtins.c, dwarf2cfi.c, explow.c, expr.c, recog.c,\n\tsched-deps.c: Use if instead of preprocessor checks with\n\tSTACK_GROWS_DOWNWARD.\n\nFrom-SVN: r223514", "tree": {"sha": "630391313f613c55a9c731eebd34c669d6065b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/630391313f613c55a9c731eebd34c669d6065b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/581edfa33d5b78fef85442b3135521ada320070d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581edfa33d5b78fef85442b3135521ada320070d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581edfa33d5b78fef85442b3135521ada320070d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581edfa33d5b78fef85442b3135521ada320070d/comments", "author": null, "committer": null, "parents": [{"sha": "62f9f30bfbd23c0e7ca832e40cbad4092789e8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f9f30bfbd23c0e7ca832e40cbad4092789e8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f9f30bfbd23c0e7ca832e40cbad4092789e8dd"}], "stats": {"total": 166, "additions": 79, "deletions": 87}, "files": [{"sha": "ad68d6c09314b72d33314e657902b695fe8218a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -1,3 +1,9 @@\n+2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* builtins.c, dwarf2cfi.c, explow.c, expr.c, recog.c,\n+\tsched-deps.c: Use if instead of preprocessor checks with\n+\tSTACK_GROWS_DOWNWARD.\n+\n 2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* *.c: Check the value of STACK_GROWS_DOWNWARD rather than if it"}, {"sha": "d92535eeb4d311d1f2c120417126e2a162284562", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -1521,14 +1521,14 @@ expand_builtin_apply_args_1 (void)\n \n   /* Save the arg pointer to the block.  */\n   tem = copy_to_reg (crtl->args.internal_arg_pointer);\n-#if STACK_GROWS_DOWNWARD\n   /* We need the pointer as the caller actually passed them to us, not\n      as we might have pretended they were passed.  Make sure it's a valid\n      operand, as emit_move_insn isn't expected to handle a PLUS.  */\n-  tem\n-    = force_operand (plus_constant (Pmode, tem, crtl->args.pretend_args_size),\n-\t\t     NULL_RTX);\n-#endif\n+  if (STACK_GROWS_DOWNWARD)\n+    tem\n+      = force_operand (plus_constant (Pmode, tem,\n+\t\t\t\t      crtl->args.pretend_args_size),\n+\t\t       NULL_RTX);\n   emit_move_insn (adjust_address (registers, Pmode, 0), tem);\n \n   size = GET_MODE_SIZE (Pmode);\n@@ -1613,10 +1613,9 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   /* Fetch the arg pointer from the ARGUMENTS block.  */\n   incoming_args = gen_reg_rtx (Pmode);\n   emit_move_insn (incoming_args, gen_rtx_MEM (Pmode, arguments));\n-#if !STACK_GROWS_DOWNWARD\n-  incoming_args = expand_simple_binop (Pmode, MINUS, incoming_args, argsize,\n-\t\t\t\t       incoming_args, 0, OPTAB_LIB_WIDEN);\n-#endif\n+  if (!STACK_GROWS_DOWNWARD)\n+    incoming_args = expand_simple_binop (Pmode, MINUS, incoming_args, argsize,\n+\t\t\t\t\t incoming_args, 0, OPTAB_LIB_WIDEN);\n \n   /* Push a new argument block and copy the arguments.  Do not allow\n      the (potential) memcpy call below to interfere with our stack\n@@ -1646,12 +1645,13 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n     crtl->need_drap = true;\n \n   dest = virtual_outgoing_args_rtx;\n-#if !STACK_GROWS_DOWNWARD\n-  if (CONST_INT_P (argsize))\n-    dest = plus_constant (Pmode, dest, -INTVAL (argsize));\n-  else\n-    dest = gen_rtx_PLUS (Pmode, dest, negate_rtx (Pmode, argsize));\n-#endif\n+  if (!STACK_GROWS_DOWNWARD)\n+    {\n+      if (CONST_INT_P (argsize))\n+\tdest = plus_constant (Pmode, dest, -INTVAL (argsize));\n+      else\n+\tdest = gen_rtx_PLUS (Pmode, dest, negate_rtx (Pmode, argsize));\n+    }\n   dest = gen_rtx_MEM (BLKmode, dest);\n   set_mem_align (dest, PARM_BOUNDARY);\n   src = gen_rtx_MEM (BLKmode, incoming_args);"}, {"sha": "126301bf4cdc8ecabe47f5d42b86e501e245afd3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -1,3 +1,8 @@\n+2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use if instead of #if with\n+\tSTACK_GROWS_DOWNWARD.\n+\n 2015-05-20  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Check the value of"}, {"sha": "4170154e590612c8e9c909ca5ff40d5a7d7f588c", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -1138,9 +1138,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \t\t\t\t     TRAMPOLINE_SIZE);\n \n       /* For libgcc generic-morestack.c and unwinder code.  */\n-#if STACK_GROWS_DOWNWARD\n-      cpp_define (pfile, \"__LIBGCC_STACK_GROWS_DOWNWARD__\");\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\tcpp_define (pfile, \"__LIBGCC_STACK_GROWS_DOWNWARD__\");\n \n       /* For libgcc unwinder code.  */\n #ifdef DONT_USE_BUILTIN_SETJMP"}, {"sha": "4b6929e4bc8c31fcf8886c485027bf96ce4c801b", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -944,9 +944,9 @@ notice_args_size (rtx_insn *insn)\n \n       /* Convert a change in args_size (always a positive in the\n \t direction of stack growth) to a change in stack pointer.  */\n-#if !STACK_GROWS_DOWNWARD\n-      delta = -delta;\n-#endif\n+      if (!STACK_GROWS_DOWNWARD)\n+\tdelta = -delta;\n+\n       cur_cfa->offset += delta;\n     }\n }\n@@ -2347,9 +2347,9 @@ maybe_record_trace_start_abnormal (rtx_insn *start, rtx_insn *origin)\n     {\n       /* Convert a change in args_size (always a positive in the\n \t direction of stack growth) to a change in stack pointer.  */\n-#if !STACK_GROWS_DOWNWARD\n-      delta = -delta;\n-#endif\n+      if (!STACK_GROWS_DOWNWARD)\n+\tdelta = -delta;\n+\n       cur_row->cfa.offset += delta;\n     }\n   "}, {"sha": "d1a2bf851fd06158cf78e66a74a92fe61974bd8e", "filename": "gcc/explow.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -866,10 +866,9 @@ adjust_stack_1 (rtx adjust, bool anti_p)\n   rtx temp;\n   rtx_insn *insn;\n \n-#if !STACK_GROWS_DOWNWARD\n   /* Hereafter anti_p means subtract_p.  */\n-  anti_p = !anti_p;\n-#endif\n+  if (!STACK_GROWS_DOWNWARD)\n+    anti_p = !anti_p;\n \n   temp = expand_binop (Pmode,\n \t\t       anti_p ? sub_optab : add_optab,\n@@ -1414,24 +1413,23 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n     {\n       int saved_stack_pointer_delta;\n \n-#if !STACK_GROWS_DOWNWARD\n-      emit_move_insn (target, virtual_stack_dynamic_rtx);\n-#endif\n+      if (!STACK_GROWS_DOWNWARD)\n+\temit_move_insn (target, virtual_stack_dynamic_rtx);\n \n       /* Check stack bounds if necessary.  */\n       if (crtl->limit_stack)\n \t{\n \t  rtx available;\n \t  rtx_code_label *space_available = gen_label_rtx ();\n-#if STACK_GROWS_DOWNWARD\n-\t  available = expand_binop (Pmode, sub_optab,\n-\t\t\t\t    stack_pointer_rtx, stack_limit_rtx,\n-\t\t\t\t    NULL_RTX, 1, OPTAB_WIDEN);\n-#else\n-\t  available = expand_binop (Pmode, sub_optab,\n-\t\t\t\t    stack_limit_rtx, stack_pointer_rtx,\n-\t\t\t\t    NULL_RTX, 1, OPTAB_WIDEN);\n-#endif\n+\t  if (STACK_GROWS_DOWNWARD)\n+\t    available = expand_binop (Pmode, sub_optab,\n+\t\t\t\t      stack_pointer_rtx, stack_limit_rtx,\n+\t\t\t\t      NULL_RTX, 1, OPTAB_WIDEN);\n+\t  else\n+\t    available = expand_binop (Pmode, sub_optab,\n+\t\t\t\t      stack_limit_rtx, stack_pointer_rtx,\n+\t\t\t\t      NULL_RTX, 1, OPTAB_WIDEN);\n+\n \t  emit_cmp_and_jump_insns (available, size, GEU, NULL_RTX, Pmode, 1,\n \t\t\t\t   space_available);\n #ifdef HAVE_trap\n@@ -1456,9 +1454,8 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n \t crtl->preferred_stack_boundary alignment.  */\n       stack_pointer_delta = saved_stack_pointer_delta;\n \n-#if STACK_GROWS_DOWNWARD\n-      emit_move_insn (target, virtual_stack_dynamic_rtx);\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\temit_move_insn (target, virtual_stack_dynamic_rtx);\n     }\n \n   suppress_reg_args_size = false;"}, {"sha": "09fc69473e20555ea34ef078386b06ca71c27489", "filename": "gcc/expr.c", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -869,11 +869,10 @@ move_by_pieces (rtx to, rtx from, unsigned HOST_WIDE_INT len,\n       to_addr = NULL_RTX;\n       data.to = NULL_RTX;\n       data.autinc_to = 1;\n-#if STACK_GROWS_DOWNWARD\n-      data.reverse = 1;\n-#else\n-      data.reverse = 0;\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\tdata.reverse = 1;\n+      else\n+\tdata.reverse = 0;\n     }\n   data.to_addr = to_addr;\n   data.from = from;\n@@ -4000,9 +3999,9 @@ fixup_args_size_notes (rtx_insn *prev, rtx_insn *last, int end_args_size)\n \tsaw_unknown = true;\n \n       add_reg_note (insn, REG_ARGS_SIZE, GEN_INT (args_size));\n-#if STACK_GROWS_DOWNWARD\n-      this_delta = -(unsigned HOST_WIDE_INT) this_delta;\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\tthis_delta = -(unsigned HOST_WIDE_INT) this_delta;\n+\n       args_size -= this_delta;\n     }\n \n@@ -4045,42 +4044,38 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n \n       emit_move_insn (stack_pointer_rtx,\n \t\t      expand_binop (Pmode,\n-#if STACK_GROWS_DOWNWARD\n-\t\t\t\t    sub_optab,\n-#else\n-\t\t\t\t    add_optab,\n-#endif\n+\t\t\t\t    STACK_GROWS_DOWNWARD ? sub_optab\n+\t\t\t\t    : add_optab,\n \t\t\t\t    stack_pointer_rtx,\n \t\t\t\t    gen_int_mode (rounded_size, Pmode),\n \t\t\t\t    NULL_RTX, 0, OPTAB_LIB_WIDEN));\n \n       offset = (HOST_WIDE_INT) padding_size;\n-#if STACK_GROWS_DOWNWARD\n-      if (STACK_PUSH_CODE == POST_DEC)\n+      if (STACK_GROWS_DOWNWARD && STACK_PUSH_CODE == POST_DEC)\n \t/* We have already decremented the stack pointer, so get the\n \t   previous value.  */\n \toffset += (HOST_WIDE_INT) rounded_size;\n-#else\n-      if (STACK_PUSH_CODE == POST_INC)\n+\n+      if (!STACK_GROWS_DOWNWARD && STACK_PUSH_CODE == POST_INC)\n \t/* We have already incremented the stack pointer, so get the\n \t   previous value.  */\n \toffset -= (HOST_WIDE_INT) rounded_size;\n-#endif\n+\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\tgen_int_mode (offset, Pmode));\n     }\n   else\n     {\n-#if STACK_GROWS_DOWNWARD\n-      /* ??? This seems wrong if STACK_PUSH_CODE == POST_DEC.  */\n-      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tgen_int_mode (-(HOST_WIDE_INT) rounded_size,\n-\t\t\t\t\t      Pmode));\n-#else\n-      /* ??? This seems wrong if STACK_PUSH_CODE == POST_INC.  */\n-      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tgen_int_mode (rounded_size, Pmode));\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\t/* ??? This seems wrong if STACK_PUSH_CODE == POST_DEC.  */\n+\tdest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t  gen_int_mode (-(HOST_WIDE_INT) rounded_size,\n+\t\t\t\t\t\tPmode));\n+      else\n+\t/* ??? This seems wrong if STACK_PUSH_CODE == POST_INC.  */\n+\tdest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t  gen_int_mode (rounded_size, Pmode));\n+\n       dest_addr = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx, dest_addr);\n     }\n \n@@ -4163,12 +4158,7 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t\trtx alignment_pad)\n {\n   rtx xinner;\n-  enum direction stack_direction\n-#if STACK_GROWS_DOWNWARD\n-    = downward;\n-#else\n-    = upward;\n-#endif\n+  enum direction stack_direction = STACK_GROWS_DOWNWARD ? downward : upward;\n \n   /* Decide where to pad the argument: `downward' for below,\n      `upward' for above, or `none' for don't pad it."}, {"sha": "524be673f0211e5361ed5888b0fb0b1e984df09a", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -1332,12 +1332,8 @@ push_operand (rtx op, machine_mode mode)\n \t  || GET_CODE (XEXP (op, 1)) != PLUS\n \t  || XEXP (XEXP (op, 1), 0) != XEXP (op, 0)\n \t  || !CONST_INT_P (XEXP (XEXP (op, 1), 1))\n-#if STACK_GROWS_DOWNWARD\n-\t  || INTVAL (XEXP (XEXP (op, 1), 1)) != - (int) rounded_size\n-#else\n-\t  || INTVAL (XEXP (XEXP (op, 1), 1)) != (int) rounded_size\n-#endif\n-\t  )\n+\t  || INTVAL (XEXP (XEXP (op, 1), 1))\n+\t     != ((STACK_GROWS_DOWNWARD ? -1 : 1) * (int) rounded_size))\n \treturn 0;\n     }\n "}, {"sha": "c1cfc1f3b70368240e6da75d47f2d432e0859609", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/581edfa33d5b78fef85442b3135521ada320070d/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=581edfa33d5b78fef85442b3135521ada320070d", "patch": "@@ -4734,11 +4734,10 @@ parse_add_or_inc (struct mem_inc_info *mii, rtx_insn *insn, bool before_mem)\n   if (regs_equal && REGNO (SET_DEST (pat)) == STACK_POINTER_REGNUM)\n     {\n       /* Note that the sign has already been reversed for !before_mem.  */\n-#if STACK_GROWS_DOWNWARD\n-      return mii->inc_constant > 0;\n-#else\n-      return mii->inc_constant < 0;\n-#endif\n+      if (STACK_GROWS_DOWNWARD)\n+\treturn mii->inc_constant > 0;\n+      else\n+\treturn mii->inc_constant < 0;\n     }\n   return true;\n }"}]}