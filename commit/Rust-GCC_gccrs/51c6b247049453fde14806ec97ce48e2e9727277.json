{"sha": "51c6b247049453fde14806ec97ce48e2e9727277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjNmIyNDcwNDk0NTNmZGUxNDgwNmVjOTdjZTQ4ZTJlOTcyNzI3Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2001-07-12T08:53:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2001-07-12T08:53:02Z"}, "message": "mips.c (print_operand): Extend '%D' to memory operands.\n\n\t* config/mips/mips.c (print_operand): Extend '%D' to memory operands.\n\t(mips_move_2words): When splitting a move into two instructions,\n\tprefix the second address operand with '%D'.\n\nFrom-SVN: r43964", "tree": {"sha": "aa815dd59c430ebf82fd831d9895989a9dc0d214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa815dd59c430ebf82fd831d9895989a9dc0d214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c6b247049453fde14806ec97ce48e2e9727277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c6b247049453fde14806ec97ce48e2e9727277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c6b247049453fde14806ec97ce48e2e9727277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c6b247049453fde14806ec97ce48e2e9727277/comments", "author": null, "committer": null, "parents": [{"sha": "7ed47c042e44ac0809d65ddfec988e1305067239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed47c042e44ac0809d65ddfec988e1305067239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed47c042e44ac0809d65ddfec988e1305067239"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "e4b982a846353c085f50c4dc87be253ed61f13d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c6b247049453fde14806ec97ce48e2e9727277/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c6b247049453fde14806ec97ce48e2e9727277/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51c6b247049453fde14806ec97ce48e2e9727277", "patch": "@@ -1,3 +1,9 @@\n+2001-07-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (print_operand): Extend '%D' to memory operands.\n+\t(mips_move_2words): When splitting a move into two instructions,\n+\tprefix the second address operand with '%D'.\n+\n 2001-07-12  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in (final.o): Depend on debug.h."}, {"sha": "792323453ec0e696719d16ef90b1c7d8094e09f7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c6b247049453fde14806ec97ce48e2e9727277/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c6b247049453fde14806ec97ce48e2e9727277/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=51c6b247049453fde14806ec97ce48e2e9727277", "patch": "@@ -2548,12 +2548,9 @@ mips_move_2words (operands, insn)\n \t    }\n \n \t  else if (double_memory_operand (op1, GET_MODE (op1)))\n-\t    {\n-\t      operands[2] = adjust_address (op1, SImode, 4);\n-\t      ret = (reg_mentioned_p (op0, op1)\n-\t\t     ? \"lw\\t%D0,%2\\n\\tlw\\t%0,%1\"\n-\t\t     : \"lw\\t%0,%1\\n\\tlw\\t%D0,%2\");\n-\t    }\n+\t    ret = (reg_mentioned_p (op0, op1)\n+\t\t   ? \"lw\\t%D0,%D1\\n\\tlw\\t%0,%1\"\n+\t\t   : \"lw\\t%0,%1\\n\\tlw\\t%D0,%D1\");\n \n \t  if (ret != 0 && MEM_VOLATILE_P (op1))\n \t    {\n@@ -2642,10 +2639,7 @@ mips_move_2words (operands, insn)\n \t    }\n \n \t  else if (double_memory_operand (op0, GET_MODE (op0)))\n-\t    {\n-\t      operands[2] = adjust_address (op0, SImode, 4);\n-\t      ret = \"sw\\t%1,%0\\n\\tsw\\t%D1,%2\";\n-\t    }\n+\t    ret = \"sw\\t%1,%0\\n\\tsw\\t%D1,%D0\";\n \t}\n \n       else if (((code1 == CONST_INT && INTVAL (op1) == 0)\n@@ -2657,10 +2651,7 @@ mips_move_2words (operands, insn)\n \t  if (TARGET_64BIT)\n \t    ret = \"sd\\t%.,%0\";\n \t  else\n-\t    {\n-\t      operands[2] = adjust_address (op0, SImode, 4);\n-\t      ret = \"sw\\t%.,%0\\n\\tsw\\t%.,%2\";\n-\t    }\n+\t    ret = \"sw\\t%.,%0\\n\\tsw\\t%.,%D0\";\n \t}\n \n       if (TARGET_STATS)\n@@ -5280,7 +5271,7 @@ mips_debugger_offset (addr, offset)\n    'x'  X is CONST_INT, prints 16 bits in hexadecimal format = \"0x%04x\",\n    'd'  output integer constant in decimal,\n    'z'\tif the operand is 0, use $0 instead of normal operand.\n-   'D'  print second register of double-word register operand.\n+   'D'  print second part of double-word register or memory operand.\n    'L'  print low-order register of double-word register operand.\n    'M'  print high-order register of double-word register operand.\n    'C'  print part of opcode for a branch condition.\n@@ -5551,7 +5542,12 @@ print_operand (file, op, letter)\n     }\n \n   else if (code == MEM)\n-    output_address (XEXP (op, 0));\n+    {\n+      if (letter == 'D')\n+\toutput_address (plus_constant (XEXP (op, 0), 4));\n+      else\n+\toutput_address (XEXP (op, 0));\n+    }\n \n   else if (code == CONST_DOUBLE\n \t   && GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT)"}]}