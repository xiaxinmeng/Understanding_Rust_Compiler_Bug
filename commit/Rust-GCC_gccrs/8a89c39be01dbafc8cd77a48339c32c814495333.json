{"sha": "8a89c39be01dbafc8cd77a48339c32c814495333", "node_id": "C_kwDOANBUbNoAKDhhODljMzliZTAxZGJhZmM4Y2Q3N2E0ODMzOWMzMmM4MTQ0OTUzMzM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-16T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-16T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "ea1c5c6ba13178db22e83106bdb188db84587b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea1c5c6ba13178db22e83106bdb188db84587b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a89c39be01dbafc8cd77a48339c32c814495333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a89c39be01dbafc8cd77a48339c32c814495333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a89c39be01dbafc8cd77a48339c32c814495333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a89c39be01dbafc8cd77a48339c32c814495333/comments", "author": null, "committer": null, "parents": [{"sha": "06d5dcef72542baf49ac245cfde2ad7ecef0916b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d5dcef72542baf49ac245cfde2ad7ecef0916b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d5dcef72542baf49ac245cfde2ad7ecef0916b"}], "stats": {"total": 370, "additions": 369, "deletions": 1}, "files": [{"sha": "bd01c44c47ae23c6a3ef21b93747a9ad8fe4f536", "filename": "ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,35 @@\n+2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.tpl (BUILD_CFLAGS): New.\n+\t(CFLAGS): Append $(BUILD_CFLAGS).\n+\t(CXXFLAGS): Likewise.\n+\t(PGO_BUILD_GEN_FLAGS_TO_PASS): New.\n+\t(PGO_BUILD_TRAINING_CFLAGS): Likewise.\n+\t(PGO_BUILD_TRAINING_CXXFLAGS): Likewise.\n+\t(PGO_BUILD_TRAINING_FLAGS_TO_PASS): Likewise.\n+\t(PGO_BUILD_TRAINING_MFLAGS): Likewise.\n+\t(PGO_BUILD_USE_FLAGS_TO_PASS): Likewise.\n+\t(PGO-TRAINING-TARGETS): Likewise.\n+\t(PGO_BUILD_TRAINING): Likewise.\n+\t(all): Add '+' to the command line for recursive make.  Support\n+\tthe PGO build.\n+\t* configure.ac: Add --enable-pgo-build[=lto].\n+\tAC_SUBST PGO_BUILD_GEN_CFLAGS, PGO_BUILD_USE_CFLAGS and\n+\tPGO_BUILD_LTO_CFLAGS.  Enable the PGO build in Makefile.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Likewise.\n+\n+2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.tpl (AR): Add @AR_PLUGIN_OPTION@\n+\t(RANLIB): Add @RANLIB_PLUGIN_OPTION@.\n+\t* configure.ac: Include config/gcc-plugin.m4.\n+\tAC_SUBST AR_PLUGIN_OPTION and RANLIB_PLUGIN_OPTION.\n+\t* libtool.m4 (_LT_CMD_OLD_ARCHIVE): Pass --plugin to AR and\n+\tRANLIB if possible.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2021-12-14  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n \n \t* MAINTAINERS: Add myself to write after approval."}, {"sha": "7c2d7548a15ab33c250aee7220e9d4d7504ab107", "filename": "config/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,11 @@\n+2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc-plugin.m4 (GCC_PLUGIN_OPTION): New.\n+\n+2021-12-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc-plugin.m4: Save and process CXXFLAGS.\n+\n 2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* acx.m4 (ACX_PROG_GDC): New m4 function."}, {"sha": "f2bd21bc4cf81fc089eb594aeeb95f8ae03aab85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,172 @@\n+2021-12-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regenerate.\n+\n+2021-12-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx-opts.h (ptx_isa): PTX_ISA_SM75 and PTX_ISA_SM80\n+\tISA levels.\n+\t* config/nvptx/nvptx.opt: Add sm_75 and sm_80 to -misa.\n+\t* config/nvptx/nvptx.h (TARGET_SM75, TARGET_SM80):\n+\tNew helper macros to conditionalize functionality on target ISA.\n+\t* config/nvptx/nvptx-c.c (nvptx_cpu_cpp_builtins): Add __PTX_SM__\n+\tsupport for the new ISA levels.\n+\t* config/nvptx/nvptx.c (nvptx_file_start): Add support for TARGET_SM75\n+\tand TARGET_SM80.\n+\t* config/nvptx/nvptx.md (define_c_enum \"unspec\"): New UNSPEC_TANH.\n+\t(define_mode_iterator HSFM): New iterator for HFmode and SFmode.\n+\t(exp2hf2): New define_insn controlled by TARGET_SM75.\n+\t(tanh<mode>2): New define_insn controlled by TARGET_SM75.\n+\t(sminhf3, smaxhf3): New define_isnns controlled by TARGET_SM80.\n+\n+2021-12-15  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-opts.h (enum ptx_version): Add PTX_VERSION_7_0.\n+\t* config/nvptx/nvptx.c (nvptx_file_start): Handle TARGET_PTX_7_0.\n+\t* config/nvptx/nvptx.h (TARGET_PTX_7_0): New macro.\n+\t* config/nvptx/nvptx.opt (ptx_version): Add 7.0.\n+\n+2021-12-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/103094\n+\t* config/aarch64/aarch64.c (aarch64_short_vector_p): Return false\n+\tfor structure modes, rather than ignoring the type in that case.\n+\n+2021-12-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR rtl-optimization/103350\n+\t* ree.c (add_removable_extension): Don't stop at first definition but\n+\tinspect all.\n+\n+2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/103619\n+\t* dwarf2cfi.c (dwf_cfa_reg): Remove gcc_assert.\n+\t(operator==, operator!=): New overloaded operators.\n+\t(dwarf2out_frame_debug_adjust_cfa, dwarf2out_frame_debug_cfa_offset,\n+\tdwarf2out_frame_debug_expr): Compare vars with cfa_reg type directly\n+\twith REG rtxes rather than with dwf_cfa_reg results on those REGs.\n+\t(create_cie_data): Use stack_pointer_rtx instead of\n+\tgen_rtx_REG (Pmode, STACK_POINTER_REGNUM).\n+\t(execute_dwarf2_frame): Use hard_frame_pointer_rtx instead of\n+\tgen_rtx_REG (Pmode, HARD_FRAME_POINTER_REGNUM).\n+\n+2021-12-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/103661\n+\t* config/i386/i386-builtins.c (fold_builtin_cpu): Compare to 0\n+\tas API expects that non-zero values are returned (do that\n+\tit mask == 31).\n+\tFor \"avx512vbmi2\" argument, we return now 1 << 31, which is a\n+\tnegative integer value.\n+\n+2021-12-15  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/101796\n+\t* config/i386/predicates.md (const_vector_operand):\n+\tAdd new predicate.\n+\t* config/i386/sse.md(<insn><mode>3<mask_name>):\n+\tAdd new define_split below.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC_XXSPLTIDP_CONST): New unspec.\n+\t(UNSPEC_XXSPLTIW_CONST): New unspec.\n+\t(movsf_hardfloat): Add support for generating XXSPLTIDP.\n+\t(mov<mode>_hardfloat32): Likewise.\n+\t(mov<mode>_hardfloat64): Likewise.\n+\t(xxspltidp_<mode>_internal): New insns.\n+\t(xxspltiw_<mode>_internal): New insns.\n+\t(splitters for SF/DFmode): Add new splitters for XXSPLTIDP.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* config/rs6000/predicates.md (easy_fp_constant): Add support for\n+\tgenerating XXSPLTIDP.\n+\t(vsx_prefixed_constant): Likewise.\n+\t(easy_vector_constant): Likewise.\n+\t* config/rs6000/rs6000-protos.h (constant_generates_xxspltidp):\n+\tNew declaration.\n+\t* config/rs6000/rs6000.c (output_vec_const_move): Add support for\n+\tgenerating XXSPLTIDP.\n+\t(prefixed_xxsplti_p): Likewise.\n+\t(constant_generates_xxspltidp): New function.\n+\t* config/rs6000/rs6000.opt (-msplat-float-constant): New debug option.\n+\n+2021-12-15  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/constraints.md (eP): Update comment.\n+\t* config/rs6000/predicates.md (easy_fp_constant): Add support for\n+\tgenerating XXSPLTIW.\n+\t(vsx_prefixed_constant): New predicate.\n+\t(easy_vector_constant): Add support for\n+\tgenerating XXSPLTIW.\n+\t* config/rs6000/rs6000-protos.h (prefixed_xxsplti_p): New\n+\tdeclaration.\n+\t(constant_generates_xxspltiw): Likewise.\n+\t* config/rs6000/rs6000.c (xxspltib_constant_p): Generate XXSPLTIW\n+\tif possible instead of XXSPLTIB and sign extending the constant.\n+\t(output_vec_const_move): Add support for XXSPLTIW.\n+\t(prefixed_xxsplti_p): New function.\n+\t(constant_generates_xxspltiw): New function.\n+\t* config/rs6000/rs6000.md (prefixed attribute): Add support to\n+\tmark XXSPLTI* instructions as being prefixed.\n+\t* config/rs6000/rs6000.opt (-msplat-word-constant): New debug\n+\tswitch.\n+\t* config/rs6000/vsx.md (vsx_mov<mode>_64bit): Add support for\n+\tgenerating XXSPLTIW or XXSPLTIDP.\n+\t(vsx_mov<mode>_32bit): Likewise.\n+\t* doc/md.texi (PowerPC and IBM RS6000 constraints): Document the\n+\teP constraint.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* config/rs6000/constraints.md (eQ): New constraint.\n+\t* config/rs6000/predicates.md (easy_fp_constant): Add support for\n+\tgenerating the LXVKQ instruction.\n+\t(easy_vector_constant_ieee128): New predicate.\n+\t(easy_vector_constant): Add support for generating the LXVKQ\n+\tinstruction.\n+\t* config/rs6000/rs6000-protos.h (constant_generates_lxvkq): New\n+\tdeclaration.\n+\t* config/rs6000/rs6000.c (output_vec_const_move): Add support for\n+\tgenerating LXVKQ.\n+\t(constant_generates_lxvkq): New function.\n+\t* config/rs6000/rs6000.opt (-mieee128-constant): New debug\n+\toption.\n+\t* config/rs6000/vsx.md (vsx_mov<mode>_64bit): Add support for\n+\tgenerating LXVKQ.\n+\t(vsx_mov<mode>_32bit): Likewise.\n+\t* doc/md.texi (PowerPC and IBM RS6000 constraints): Document the\n+\teQ constraint.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* config/rs6000/rs6000-protos.h (VECTOR_128BIT_BITS): New macro.\n+\t(VECTOR_128BIT_BYTES): Likewise.\n+\t(VECTOR_128BIT_HALF_WORDS): Likewise.\n+\t(VECTOR_128BIT_WORDS): Likewise.\n+\t(VECTOR_128BIT_DOUBLE_WORDS): Likewise.\n+\t(vec_const_128bit_type): New structure type.\n+\t(vec_const_128bit_to_bytes): New declaration.\n+\t* config/rs6000/rs6000.c (constant_int_to_128bit_vector): New\n+\thelper function.\n+\t(constant_fp_to_128bit_vector): New helper function.\n+\t(vec_const_128bit_to_bytes): New function.\n+\n+2021-12-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/100518\n+\t* builtins.c (try_store_by_multiple_pieces): Drop address\n+\tconversion to ptr_mode.\n+\n+2021-12-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR middle-end/100843\n+\t* builtins.c (try_store_by_multiple_pieces): Fail if min_len\n+\tis greater than max_len.\n+\n 2021-12-14  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/103682"}, {"sha": "4f5ebad187c031a25cb8f3d9a29390e9a804ee20", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1 +1 @@\n-20211215\n+20211216"}, {"sha": "e42770179f29eeedd36423e60409d9c3c4fe45f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,21 @@\n+2021-12-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102229\n+\t* decl.c (check_decltype_auto): New.\n+\t(grokdeclarator): Call it.\n+\t* pt.c (do_auto_deduction): Don't check decltype(auto) here.\n+\n+2021-12-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/103713\n+\t* tree.c (maybe_warn_parm_abi): Fix warning word splitting.\n+\n+2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103704\n+\t* semantics.c (finish_omp_target_clauses_r): For OMP_CLAUSEs\n+\tjust walk subtrees.\n+\n 2021-12-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/103408"}, {"sha": "8bc711f47b0d22776107328424c24cc1045a804b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,9 @@\n+2021-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc (d_init_options): Set default -fextern-std= to C++17.\n+\t* dmd/MERGE: Merge upstream dmd 93108bb9e.\n+\t* gdc.texi (Runtime Options): Document the default for -fextern-std=.\n+\n 2021-12-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/103529"}, {"sha": "a38eac672ccdcfff0d92f39fa3c28e88995ea8a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,88 @@\n+2021-12-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102229\n+\t* g++.dg/cpp1y/decltype-auto5.C: New test.\n+\n+2021-12-15  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/fortran-torture.exp (fortran-torture-compile)\n+\t(fortran-torture-execute): Be more informative for ICEs.\n+\t* lib/gcc-defs.exp (${tool}_check_compile): Likewise.\n+\t* lib/gcc-dg.exp (gcc-dg-test-1): Likewise.\n+\t* lib/go-torture.exp (go-torture-compile, go-torture-execute):\n+\tLikewise.\n+\n+2021-12-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78969\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-6.c: New test.\n+\n+2021-12-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/float16-2.c: New test case.\n+\t* gcc.target/nvptx/tanh-1.c: New test case.\n+\n+2021-12-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/103094\n+\t* gcc.target/aarch64/pr103094.c: New test.\n+\n+2021-12-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR rtl-optimization/103350\n+\t* gcc.target/aarch64/pr103350-1.c: New test.\n+\t* gcc.target/aarch64/pr103350-2.c: New test.\n+\n+2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103408\n+\t* g++.dg/cpp23/auto-fncast11.C: Fix expected diagnostic wording.\n+\n+2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103704\n+\t* g++.dg/gomp/pr103704.C: New test.\n+\n+2021-12-15  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/101796\n+\t* gcc.target/i386/pr101796-1.c: New test.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* gcc.target/powerpc/vec-splat-constant-df.c: New test.\n+\t* gcc.target/powerpc/vec-splat-constant-sf.c: New test.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* gcc.target/powerpc/pr86731-fwrapv-longlong.c: Update insn\n+\tregex for power10.\n+\t* gcc.target/powerpc/vec-splat-constant-v2df.c: New test.\n+\t* gcc.target/powerpc/vec-splat-constant-v2di.c: New test.\n+\n+2021-12-15  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-splat-constant-v16qi.c: New test.\n+\t* gcc.target/powerpc/vec-splat-constant-v4sf.c: New test.\n+\t* gcc.target/powerpc/vec-splat-constant-v4si.c: New test.\n+\t* gcc.target/powerpc/vec-splat-constant-v8hi.c: New test.\n+\t* gcc.target/powerpc/vec-splati-runnable.c: Update insn count.\n+\n+2021-12-15  Michael Meissner  <meissner@the-meissners.org>\n+\n+\t* gcc.target/powerpc/float128-constant.c: New test.\n+\n+2021-12-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/100518\n+\t* gcc.target/aarch64/pr100518.c: New.\n+\n+2021-12-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR middle-end/100843\n+\t* gcc.dg/pr100843.c: New.\n+\n 2021-12-14  liuhongt  <hongtao.liu@intel.com>\n \n \t* gcc.c-torture/compile/pr103682.c: New test."}, {"sha": "ddf28268a4cf831ad71a848c7248d13aa92af337", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,7 @@\n+2021-12-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regenerate.\n+\n 2021-08-17  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* Makefile.am: Switch mdynamic-no-pic to fPIC."}, {"sha": "e1102eafd85cce2267fc31ffb8c649a7dd97909c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,13 @@\n+2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.in (AR): Add @AR_PLUGIN_OPTION@\n+\t(RANLIB): Add @RANLIB_PLUGIN_OPTION@.\n+\t(configure_deps): Depend on ../config/gcc-plugin.m4.\n+\t* configure.ac: AC_SUBST AR_PLUGIN_OPTION and\n+\tRANLIB_PLUGIN_OPTION.\n+\t* aclocal.m4: Regenerated.\n+\t* configure: Likewise.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "e07738f5b74bd223979407dae8460f39427cb58a", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,13 @@\n+2021-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/103604\n+\t* configure: Regenerate.\n+\t* configure.ac (libtool_VERSION): Update to 3:0:0.\n+\t* libdruntime/MERGE: Merge upstream druntime 6364e010.\n+\t* src/MERGE: Merge upstream phobos 575b67a9b.\n+\t* testsuite/libphobos.traits/all_satisfy.d: New test.\n+\t* testsuite/libphobos.traits/traits.exp: New test.\n+\n 2021-12-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/103528"}, {"sha": "7e046650714502870584cdec3b6efec93b49a571", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,25 @@\n+2021-12-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_iterator.h\n+\t(std::pointer_traits<__gnu_cxx::__normal_iterator<>>): Remove.\n+\t(std::__to_address(const __gnu_cxx::__normal_iterator<>&)): New for C++11 to C++17.\n+\t* include/debug/safe_iterator.h\n+\t(std::__to_address(const __gnu_debug::_Safe_iterator<__gnu_cxx::__normal_iterator<>,\n+\t_Sequence>&)): New for C++11 to C++17.\n+\t* testsuite/24_iterators/normal_iterator/to_address.cc: Add check on std::vector::iterator\n+\tto validate both __gnu_cxx::__normal_iterator<> __to_address overload in normal mode and\n+\t__gnu_debug::_Safe_iterator in _GLIBCXX_DEBUG mode.\n+\n+2021-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/71557\n+\t* include/bits/locale_facets_nonio.tcc (_M_extract_via_format):\n+\tCompare characters other than format specifiers and whitespace\n+\tcase insensitively.\n+\t(_M_extract_name): Compare characters case insensitively.\n+\t* testsuite/22_locale/time_get/get/char/71557.cc: New test.\n+\t* testsuite/22_locale/time_get/get/wchar_t/71557.cc: New test.\n+\n 2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/103687"}, {"sha": "c5448427a903597b99722333f36c8ebb2029ea21", "filename": "zlib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89c39be01dbafc8cd77a48339c32c814495333/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89c39be01dbafc8cd77a48339c32c814495333/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=8a89c39be01dbafc8cd77a48339c32c814495333", "patch": "@@ -1,3 +1,7 @@\n+2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* configure: Regenerated.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}]}