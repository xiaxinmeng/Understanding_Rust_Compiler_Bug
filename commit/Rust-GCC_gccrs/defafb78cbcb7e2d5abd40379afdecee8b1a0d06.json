{"sha": "defafb78cbcb7e2d5abd40379afdecee8b1a0d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmYWZiNzhjYmNiN2UyZDVhYmQ0MDM3OWFmZGVjZWU4YjFhMGQwNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-09T15:12:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-09T15:22:55Z"}, "message": "Fix internal error on lambda function\n\nThis boils down to the RTL expander trying to take the address of a DECL\nwhose RTX is a register.\n\ngcc/\n\tPR c++/90448\n\t* calls.c (initialize_argument_information): When the argument\n\tis passed by reference, do not make a copy in a thunk only if\n\tthe argument is already in memory.  Remove redundant test for\n\tthe case of callee copy.", "tree": {"sha": "7327a6bb625ade52873bfdf87b09166b1f11608c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7327a6bb625ade52873bfdf87b09166b1f11608c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defafb78cbcb7e2d5abd40379afdecee8b1a0d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defafb78cbcb7e2d5abd40379afdecee8b1a0d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defafb78cbcb7e2d5abd40379afdecee8b1a0d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defafb78cbcb7e2d5abd40379afdecee8b1a0d06/comments", "author": null, "committer": null, "parents": [{"sha": "9725df0233b6fb6e761875968b3b8e9fd9f522ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9725df0233b6fb6e761875968b3b8e9fd9f522ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9725df0233b6fb6e761875968b3b8e9fd9f522ac"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "ff606204772bd3e98064b2ccd5f90cab09ae1062", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defafb78cbcb7e2d5abd40379afdecee8b1a0d06/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defafb78cbcb7e2d5abd40379afdecee8b1a0d06/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=defafb78cbcb7e2d5abd40379afdecee8b1a0d06", "patch": "@@ -2388,19 +2388,17 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       function_arg_info arg (type, argpos < n_named_args);\n       if (pass_by_reference (args_so_far_pnt, arg))\n \t{\n-\t  bool callee_copies;\n-\t  tree base = NULL_TREE;\n-\n-\t  callee_copies = reference_callee_copied (args_so_far_pnt, arg);\n-\n-\t  /* If we're compiling a thunk, pass through invisible references\n-\t     instead of making a copy.  */\n-\t  if (call_from_thunk_p\n-\t      || (callee_copies\n-\t\t  && !TREE_ADDRESSABLE (type)\n-\t\t  && (base = get_base_address (args[i].tree_value))\n-\t\t  && TREE_CODE (base) != SSA_NAME\n-\t\t  && (!DECL_P (base) || MEM_P (DECL_RTL (base)))))\n+\t  const bool callee_copies\n+\t    = reference_callee_copied (args_so_far_pnt, arg);\n+\t  tree base;\n+\n+\t  /* If we're compiling a thunk, pass directly the address of an object\n+\t     already in memory, instead of making a copy.  Likewise if we want\n+\t     to make the copy in the callee instead of the caller.  */\n+\t  if ((call_from_thunk_p || callee_copies)\n+\t      && (base = get_base_address (args[i].tree_value))\n+\t      && TREE_CODE (base) != SSA_NAME\n+\t      && (!DECL_P (base) || MEM_P (DECL_RTL (base))))\n \t    {\n \t      /* We may have turned the parameter value into an SSA name.\n \t\t Go back to the original parameter so we can take the"}]}