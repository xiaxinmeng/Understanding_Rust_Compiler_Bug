{"sha": "24034425f50001b28e63fcd9ca6f1d080d342b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwMzQ0MjVmNTAwMDFiMjhlNjNmY2Q5Y2E2ZjFkMDgwZDM0MmI0Zg==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-10-23T17:35:16Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2012-10-23T17:35:16Z"}, "message": "AArch64 [1/10]\n\n2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n\t    James Greenhalgh  <james.greenhalgh@arm.com>\n\t    Jim MacArthur  <jim.macarthur@arm.com>\n\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Nigel Stephens  <nigel.stephens@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\t    Sofiane Naci  <sofiane.naci@arm.com>\n\t    Stephen Thomas  <stephen.thomas@arm.com>\n\t    Tejas Belagod  <tejas.belagod@arm.com>\n\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* config.gcc: Add AArch64.\n\t* configure.ac: Add AArch64 TLS support detection.\n\t* configure: Regenerate.\n\n\nCo-Authored-By: James Greenhalgh <james.greenhalgh@arm.com>\nCo-Authored-By: Jim MacArthur <jim.macarthur@arm.com>\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\nCo-Authored-By: Nigel Stephens <nigel.stephens@arm.com>\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\nCo-Authored-By: Sofiane Naci <sofiane.naci@arm.com>\nCo-Authored-By: Stephen Thomas <stephen.thomas@arm.com>\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\nCo-Authored-By: Yufeng Zhang <yufeng.zhang@arm.com>\n\nFrom-SVN: r192732", "tree": {"sha": "890a04cfb16ec2b68f4f32713818c790d0e3ee56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890a04cfb16ec2b68f4f32713818c790d0e3ee56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24034425f50001b28e63fcd9ca6f1d080d342b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24034425f50001b28e63fcd9ca6f1d080d342b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24034425f50001b28e63fcd9ca6f1d080d342b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24034425f50001b28e63fcd9ca6f1d080d342b4f/comments", "author": null, "committer": null, "parents": [{"sha": "597ee90168fa3a39d9546ad1a5c50657329d549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597ee90168fa3a39d9546ad1a5c50657329d549a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597ee90168fa3a39d9546ad1a5c50657329d549a"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "8a6ea4e88e93e45c10649f3c920c95c8609ef364", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24034425f50001b28e63fcd9ca6f1d080d342b4f", "patch": "@@ -1,3 +1,19 @@\n+2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n+\t    James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Jim MacArthur  <jim.macarthur@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Nigel Stephens  <nigel.stephens@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\t    Sofiane Naci  <sofiane.naci@arm.com>\n+\t    Stephen Thomas  <stephen.thomas@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config.gcc: Add AArch64.\n+\t* configure.ac: Add AArch64 TLS support detection.\n+\t* configure: Regenerate.\n+\n 2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n \t    James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Jim MacArthur  <jim.macarthur@arm.com>"}, {"sha": "58bbe5451ccfd739b41fff8e1ea958b13c8c1c85", "filename": "gcc/config.gcc", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=24034425f50001b28e63fcd9ca6f1d080d342b4f", "patch": "@@ -309,6 +309,13 @@ m32c*-*-*)\n \ttmake_file=m32c/t-m32c\n \ttarget_has_targetm_common=no\n         ;;\n+aarch64*-*-*)\n+\tcpu_type=aarch64\n+\tneed_64bit_hwint=yes\n+\textra_headers=\"arm_neon.h\"\n+\textra_objs=\"aarch64-builtins.o\"\n+\ttarget_has_targetm_common=yes\n+\t;;\n alpha*-*-*)\n \tcpu_type=alpha\n \tneed_64bit_hwint=yes\n@@ -799,6 +806,27 @@ case ${target} in\n esac\n \n case ${target} in\n+aarch64*-*-elf)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h\"\n+\ttm_file=\"${tm_file} aarch64/aarch64-elf.h aarch64/aarch64-elf-raw.h\"\n+\ttmake_file=\"${tmake_file} aarch64/t-aarch64\"\n+\tuse_gcc_stdint=wrap\n+\tcase $target in\n+\taarch64_be-*)\n+\t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n+\t\t;;\n+\tesac\n+\t;;\n+aarch64*-*-linux*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h\"\n+\ttm_file=\"${tm_file} aarch64/aarch64-elf.h aarch64/aarch64-linux.h\"\n+\ttmake_file=\"${tmake_file} aarch64/t-aarch64 aarch64/t-aarch64-linux\"\n+\tcase $target in\n+\taarch64_be-*)\n+\t\ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n+\t\t;;\n+\tesac\n+\t;;\n alpha*-*-linux*)\n \ttm_file=\"elfos.h ${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n@@ -2998,6 +3026,92 @@ fi\n \n supported_defaults=\n case \"${target}\" in\n+\taarch64*-*-*)\n+\t\tsupported_defaults=\"cpu arch\"\n+\t\tfor which in cpu arch; do\n+\n+\t\t\teval \"val=\\$with_$which\"\n+\t\t\tbase_val=`echo $val | sed -e 's/\\+.*//'`\n+\t\t\text_val=`echo $val | sed -e 's/[a-z0-9\\-]\\+//'`\n+\n+\t\t\tif [ $which = arch ]; then\n+\t\t\t  def=aarch64-arches.def\n+\t\t\t  pattern=AARCH64_ARCH\n+\t\t\telse\n+\t\t\t  def=aarch64-cores.def\n+\t\t\t  pattern=AARCH64_CORE\n+\t\t\tfi\n+\n+\t\t\text_mask=AARCH64_CPU_DEFAULT_FLAGS\n+\n+\t\t\t# Find the base CPU or ARCH id in aarch64-cores.def or\n+\t\t\t# aarch64-arches.def\n+\t\t\tif [ x\"$base_val\" = x ] \\\n+\t\t\t    || grep \"^$pattern(\\\"$base_val\\\",\" \\\n+\t\t\t\t    ${srcdir}/config/aarch64/$def \\\n+\t\t\t\t    > /dev/null; then\n+\n+\t\t\t  if [ $which = arch ]; then\n+\t\t\t\tbase_id=`grep \"^$pattern(\\\"$base_val\\\",\" \\\n+\t\t\t\t  ${srcdir}/config/aarch64/$def | \\\n+\t\t\t\t  sed -e 's/^[^,]*,[ \t]*//' | \\\n+\t\t\t\t  sed -e 's/,.*$//'`\n+\t\t\t  else\n+\t\t\t\tbase_id=`grep \"^$pattern(\\\"$base_val\\\",\" \\\n+\t\t\t\t  ${srcdir}/config/aarch64/$def | \\\n+\t\t\t\t  sed -e 's/^[^,]*,[ \t]*//' | \\\n+\t\t\t\t  sed -e 's/,.*$//'`\n+\t\t\t  fi\n+\n+\t\t\t  while [ x\"$ext_val\" != x ]\n+\t\t\t  do\n+\t\t\t\text_val=`echo $ext_val | sed -e 's/\\+//'`\n+\t\t\t\text=`echo $ext_val | sed -e 's/\\+.*//'`\n+\t\t\t\tbase_ext=`echo $ext | sed -e 's/^no//'`\n+\n+\t\t\t\tif [ x\"$base_ext\" = x ] \\\n+\t\t\t\t    || grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t    ${srcdir}/config/aarch64/aarch64-option-extensions.def \\\n+\t\t\t\t    > /dev/null; then\n+\n+\t\t\t\t  ext_on=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n+\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*//' | \\\n+\t\t\t\t\tsed -e 's/,.*$//'`\n+\t\t\t\t  ext_off=`grep \"^AARCH64_OPT_EXTENSION(\\\"$base_ext\\\",\" \\\n+\t\t\t\t\t${srcdir}/config/aarch64/aarch64-option-extensions.def | \\\n+\t\t\t\t\tsed -e 's/^[^,]*,[ \t]*[^,]*,[ \t]*//' | \\\n+\t\t\t\t\tsed -e 's/,.*$//' | \\\n+\t\t\t\t\tsed -e 's/).*$//'`\n+\n+\t\t\t\t  if [ $ext = $base_ext ]; then\n+\t\t\t\t\t# Adding extension\n+\t\t\t\t\text_mask=\"(\"$ext_mask\") | (\"$ext_on\")\"\n+\t\t\t\t  else\n+\t\t\t\t\t# Removing extension\n+\t\t\t\t\text_mask=\"(\"$ext_mask\") & ~(\"$ext_off\")\"\n+\t\t\t\t  fi\n+\n+\t\t\t\t  true\n+\t\t\t\telse\n+\t\t\t\t  echo \"Unknown extension used in --with-$which=$val\" 1>&2\n+\t\t\t\t  exit 1\n+\t\t\t\tfi\n+\t\t\t\text_val=`echo $ext_val | sed -e 's/[a-z0-9]\\+//'`\n+\t\t\t  done\n+\n+\t\t\t  ext_mask=\"((\"$ext_mask\") << 6)\"\n+\t\t\t  if [ x\"$base_id\" != x ]; then\n+\t\t\t\ttarget_cpu_cname=\"TARGET_CPU_$base_id | $ext_mask\"\n+\t\t\t  fi\n+\t\t\t  true\n+\t\t\telse\n+\t\t\t  echo \"Unknown $which used in --with-$which=$val\" 1>&2\n+\t\t\t  exit 1\n+\t\t\tfi\n+\t\tdone\n+\t\t;;\n+\n \talpha*-*-*)\n \t\tsupported_defaults=\"cpu tune\"\n \t\tfor which in cpu tune; do\n@@ -3480,6 +3594,15 @@ esac\n # Set some miscellaneous flags for particular targets.\n target_cpu_default2=\n case ${target} in\n+\taarch64*-*-*)\n+\t\tif test x$target_cpu_cname = x\n+\t\tthen\n+\t\t\ttarget_cpu_default2=TARGET_CPU_generic\n+\t\telse\n+\t\t\ttarget_cpu_default2=$target_cpu_cname\n+\t\tfi\n+\t\t;;\n+\n \tarm*-*-*)\n \t\tif test x$target_cpu_cname = x\n \t\tthen"}, {"sha": "4c90e9b795418a5fd978efde873b61d322eb93de", "filename": "gcc/configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=24034425f50001b28e63fcd9ca6f1d080d342b4f", "patch": "@@ -23189,6 +23189,19 @@ foo:\n \ttls_first_minor=19\n \ttls_as_opt='--fatal-warnings'\n \t;;\n+  aarch64*-*-*)\n+    conftest_s='\n+\t.section \".tdata\",\"awT\",%progbits\n+foo:\t.long\t25\n+\t.text\n+\tadrp  x0, :tlsgd:x\n+\tadd   x0, x0, #:tlsgd_lo12:x\n+        bl    __tls_get_addr\n+\tnop'\n+\ttls_first_major=2\n+\ttls_first_minor=20\n+\ttls_as_opt='--fatal-warnings'\n+\t;;\n   powerpc-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}, {"sha": "f629d1561222f9e9b9fb64c1bef247c3c9897ca1", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24034425f50001b28e63fcd9ca6f1d080d342b4f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=24034425f50001b28e63fcd9ca6f1d080d342b4f", "patch": "@@ -2965,6 +2965,19 @@ foo:\n \ttls_first_minor=19\n \ttls_as_opt='--fatal-warnings'\n \t;;\n+  aarch64*-*-*)\n+    conftest_s='\n+\t.section \".tdata\",\"awT\",%progbits\n+foo:\t.long\t25\n+\t.text\n+\tadrp  x0, :tlsgd:x\n+\tadd   x0, x0, #:tlsgd_lo12:x\n+        bl    __tls_get_addr\n+\tnop'\n+\ttls_first_major=2\n+\ttls_first_minor=20\n+\ttls_as_opt='--fatal-warnings'\n+\t;;\n   powerpc-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}]}