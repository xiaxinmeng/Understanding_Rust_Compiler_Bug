{"sha": "9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjMjBmYTE1MmQ4NTIzZmNiOWFhZWZjYTFmNzA1NzYzMmE5M2NjNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-11-30T23:58:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-11-30T23:58:16Z"}, "message": "stacktrace.cc (UnwindTraceFn): Use UNWRAP_FUNCTION_DESCRIPTOR to compare _Jv_InterpMethod::run against current...\n\n\t* stacktrace.cc (UnwindTraceFn): Use UNWRAP_FUNCTION_DESCRIPTOR\n\tto compare _Jv_InterpMethod::run against current func.\n\nFrom-SVN: r107746", "tree": {"sha": "eb9d2a9f01aeb3756c4ee2163b8aca1963e5a742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9d2a9f01aeb3756c4ee2163b8aca1963e5a742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc20fa152d8523fcb9aaefca1f7057632a93cc6/comments", "author": null, "committer": null, "parents": [{"sha": "16ab8e74dad98cca30b431ae68b3926fe897aab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ab8e74dad98cca30b431ae68b3926fe897aab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ab8e74dad98cca30b431ae68b3926fe897aab4"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "5bd43c19a4e46337f795305d0cb44e0ec3b75e79", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc20fa152d8523fcb9aaefca1f7057632a93cc6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc20fa152d8523fcb9aaefca1f7057632a93cc6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "patch": "@@ -1,3 +1,8 @@\n+2005-12-01  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* stacktrace.cc (UnwindTraceFn): Use UNWRAP_FUNCTION_DESCRIPTOR\n+\tto compare _Jv_InterpMethod::run against current func.\n+\n 2005-11-30  Andrew Haley  <aph@redhat.com>\n \n \t* classpath/lib/Makefile.am (resources): Use `cp -p'."}, {"sha": "1bdabdfbd59dedc5a004323fb1ffa85a0b7ff2c8", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc20fa152d8523fcb9aaefca1f7057632a93cc6/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc20fa152d8523fcb9aaefca1f7057632a93cc6/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=9cc20fa152d8523fcb9aaefca1f7057632a93cc6", "patch": "@@ -108,16 +108,17 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n       state->frames = (_Jv_StackFrame *) newFrames;\n       state->length = newLength;\n     }\n-  \n-  _Unwind_Ptr func_addr = _Unwind_GetRegionStart (context);\n-  \n+\n+  void *func_addr = (void *) _Unwind_GetRegionStart (context);\n+\n   // If we see the interpreter's main function, \"pop\" an entry off the \n   // interpreter stack and use that instead, so that the trace goes through \n   // the java code and not the interpreter itself. This assumes a 1:1 \n   // correspondance between call frames in the interpreted stack and occurances\n   // of _Jv_InterpMethod::run() on the native stack.\n #ifdef INTERPRETER\n-  if ((void (*)(void)) func_addr == (void (*)(void)) &_Jv_InterpMethod::run)\n+  void *interp_run = (void *) &_Jv_InterpMethod::run;\n+  if (func_addr == UNWRAP_FUNCTION_DESCRIPTOR (interp_run))\n     {\n       state->frames[pos].type = frame_interpreter;\n       state->frames[pos].interp.meth = state->interp_frame->self;\n@@ -129,7 +130,7 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n     {\n       state->frames[pos].type = frame_native;\n       state->frames[pos].ip = (void *) _Unwind_GetIP (context);\n-      state->frames[pos].start_ip = (void *) func_addr;\n+      state->frames[pos].start_ip = func_addr;\n     }\n \n   //printf (\"unwind ip: %p\\n\", _Unwind_GetIP (context));"}]}