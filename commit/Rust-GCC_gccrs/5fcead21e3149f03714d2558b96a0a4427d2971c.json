{"sha": "5fcead21e3149f03714d2558b96a0a4427d2971c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjZWFkMjFlMzE0OWYwMzcxNGQyNTU4Yjk2YTBhNDQyN2QyOTcxYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-06-08T09:25:11Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-06-08T09:25:11Z"}, "message": "bfin.h (enum bfin_builtins): New.\n\n\t* config/bfin/bfin.h (enum bfin_builtins): New.\n\t* config/bfin/bfin.md (UNSPEC_VOLATILE_CSYNC, UNSPEC_VOLATILE_SSYNC):\n\tNew constants.\n\t(csync, ssync): New insn patterns.\n\t* config/bfin/bfin.c (bfin_init_builtins, bfin_expand_builtin):\n\tNew functions.\n\t(def_builtin): New macro.\n\t(TARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN): Define.\n\nFrom-SVN: r100752", "tree": {"sha": "6df5c1ba26314bce93bd1bea9d3de03588e00c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df5c1ba26314bce93bd1bea9d3de03588e00c06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcead21e3149f03714d2558b96a0a4427d2971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcead21e3149f03714d2558b96a0a4427d2971c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcead21e3149f03714d2558b96a0a4427d2971c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcead21e3149f03714d2558b96a0a4427d2971c/comments", "author": null, "committer": null, "parents": [{"sha": "71bc2a839d86fed2c23c105c8661248cf7579b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bc2a839d86fed2c23c105c8661248cf7579b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71bc2a839d86fed2c23c105c8661248cf7579b92"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "e069b0823c04c9a6f89c8ff4870fecb7bad5d659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fcead21e3149f03714d2558b96a0a4427d2971c", "patch": "@@ -3,6 +3,15 @@\n \t* config/bfin/bfin.c (bfin_return_in_memory): Simplify; return\n \teverything larger than 8 bytes in memory.\n \n+\t* config/bfin/bfin.h (enum bfin_builtins): New.\n+\t* config/bfin/bfin.md (UNSPEC_VOLATILE_CSYNC, UNSPEC_VOLATILE_SSYNC):\n+\tNew constants.\n+\t(csync, ssync): New insn patterns.\n+\t* config/bfin/bfin.c (bfin_init_builtins, bfin_expand_builtin):\n+\tNew functions.\n+\t(def_builtin): New macro.\n+\t(TARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN): Define.\n+\n 2005-06-08  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* tree-data-ref.c (compute_estimated_nb_iterations,"}, {"sha": "36a94993ecce9975447600432edae5cb2fe56f9a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=5fcead21e3149f03714d2558b96a0a4427d2971c", "patch": "@@ -2671,6 +2671,59 @@ bfin_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n     output_asm_insn (\"jump.l\\t%P0\", xops);\n }\n \f\n+#define def_builtin(NAME, TYPE, CODE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t    NULL, NULL_TREE);\t\t\t\t\\\n+} while (0)\n+\n+/* Set up all builtin functions for this target.  */\n+static void\n+bfin_init_builtins (void)\n+{\n+  tree void_ftype_void\n+    = build_function_type (void_type_node, void_list_node);\n+\n+  /* Add the remaining MMX insns with somewhat more complicated types.  */\n+  def_builtin (\"__builtin_bfin_csync\", void_ftype_void, BFIN_BUILTIN_CSYNC);\n+  def_builtin (\"__builtin_bfin_ssync\", void_ftype_void, BFIN_BUILTIN_SSYNC);\n+}\n+\n+/* Expand an expression EXP that calls a built-in function,\n+   with result going to TARGET if that's convenient\n+   (and in mode MODE if that's convenient).\n+   SUBTARGET may be used as the target for computing one of EXP's operands.\n+   IGNORE is nonzero if the value is to be ignored.  */\n+\n+static rtx\n+bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n+\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t     int ignore ATTRIBUTE_UNUSED)\n+{\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  switch (fcode)\n+    {\n+    case BFIN_BUILTIN_CSYNC:\n+      emit_insn (gen_csync ());\n+      return 0;\n+    case BFIN_BUILTIN_SSYNC:\n+      emit_insn (gen_ssync ());\n+      return 0;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\f\n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS bfin_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN bfin_expand_builtin\n+\n #undef TARGET_ASM_GLOBALIZE_LABEL\n #define TARGET_ASM_GLOBALIZE_LABEL bfin_globalize_label \n "}, {"sha": "82702f9be2d228bf5ad766a2e9b7476b31066d46", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=5fcead21e3149f03714d2558b96a0a4427d2971c", "patch": "@@ -989,6 +989,14 @@ do {                                              \\\n #define EXTRA_CONSTRAINT(VALUE, D) \\\n     ((D) == 'Q' ? GET_CODE (VALUE) == SYMBOL_REF : 0)\n \n+/* Codes for all the Blackfin builtins.  */\n+enum bfin_builtins\n+{\n+  BFIN_BUILTIN_CSYNC,\n+  BFIN_BUILTIN_SSYNC,\n+  BFIN_BUILTIN_MAX\n+};\n+\n /* `FINALIZE_PIC'\n      By generating position-independent code, when two different\n      programs (A and B) share a common library (libC.a), the text of"}, {"sha": "1fc015e59752e7798f37dab72cf21f619890d22e", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcead21e3149f03714d2558b96a0a4427d2971c/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=5fcead21e3149f03714d2558b96a0a4427d2971c", "patch": "@@ -120,7 +120,9 @@\n    (UNSPEC_PUSH_MULTIPLE 5)])\n \n (define_constants\n-  [(UNSPEC_VOLATILE_EH_RETURN 0)])\n+  [(UNSPEC_VOLATILE_EH_RETURN 0)\n+   (UNSPEC_VOLATILE_CSYNC 1)\n+   (UNSPEC_VOLATILE_SSYNC 2)])\n \n (define_attr \"type\"\n   \"move,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,compare,dummy\"\n@@ -1838,6 +1840,18 @@\n   gcc_unreachable ();\n })\n \n+(define_insn \"csync\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_CSYNC)]\n+  \"\"\n+  \"csync;\"\n+  [(set_attr \"type\" \"misc\")])\n+\n+(define_insn \"ssync\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_SSYNC)]\n+  \"\"\n+  \"ssync;\"\n+  [(set_attr \"type\" \"misc\")])\n+\n ;;; Vector instructions\n \n (define_insn \"addv2hi\""}]}