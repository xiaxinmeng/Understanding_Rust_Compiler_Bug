{"sha": "226a498733e7919de72eb6f1bf3e16883ad159f6", "node_id": "C_kwDOANBUbNoAKDIyNmE0OTg3MzNlNzkxOWRlNzJlYjZmMWJmM2UxNjg4M2FkMTU5ZjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-03T11:13:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-03T11:13:24Z"}, "message": "expr: Fix up store_expr into SUBREG_PROMOTED_* target [PR108264]\n\nThe following testcase ICEs on s390x-linux (e.g. with -march=z13).\nThe problem is that target is (subreg/s/u:SI (reg/v:DI 66 [ x+-4 ]) 4)\nand we call convert_move from temp to the SUBREG_REG of that, expecting\nto extend the value properly.  That works nicely if temp has some\nscalar integer mode (or partial one), but ICEs when temp has V4QImode\non the assertion that from and to modes have the same bitsize.\nstore_expr generally allows say store from V4QI to SI target because\nthey have the same size and if temp is a CONST_INT, we already have code\nto convert the constant properly, so the following patch just adds handling\nof non-scalar integer modes by converting them to the mode of target\nfirst before convert_move extends them.\n\n2023-01-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/108264\n\t* expr.cc (store_expr): For stores into SUBREG_PROMOTED_* targets\n\tfrom source which doesn't have scalar integral mode first convert\n\tit to outer_mode.\n\n\t* gcc.dg/pr108264.c: New test.", "tree": {"sha": "f75fc245fc4ff0eadede1e5dd708e09f64be0f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f75fc245fc4ff0eadede1e5dd708e09f64be0f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/226a498733e7919de72eb6f1bf3e16883ad159f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226a498733e7919de72eb6f1bf3e16883ad159f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226a498733e7919de72eb6f1bf3e16883ad159f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226a498733e7919de72eb6f1bf3e16883ad159f6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb639a7fee5df32a2d1e7afa40fdf31d280464b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb639a7fee5df32a2d1e7afa40fdf31d280464b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb639a7fee5df32a2d1e7afa40fdf31d280464b"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "15be1c8db999103bb9e5fa33daa44ae06de5ace8", "filename": "gcc/expr.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a498733e7919de72eb6f1bf3e16883ad159f6/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a498733e7919de72eb6f1bf3e16883ad159f6/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=226a498733e7919de72eb6f1bf3e16883ad159f6", "patch": "@@ -6226,6 +6226,9 @@ store_expr (tree exp, rtx target, int call_param_p,\n \t  temp = convert_modes (inner_mode, outer_mode, temp,\n \t\t\t\tSUBREG_PROMOTED_SIGN (target));\n \t}\n+      else if (!SCALAR_INT_MODE_P (GET_MODE (temp)))\n+\ttemp = convert_modes (outer_mode, TYPE_MODE (TREE_TYPE (exp)),\n+\t\t\t      temp, SUBREG_PROMOTED_SIGN (target));\n \n       convert_move (SUBREG_REG (target), temp,\n \t\t    SUBREG_PROMOTED_SIGN (target));"}, {"sha": "ff9aa261d67299ce88d5d60a92ed238174f99d40", "filename": "gcc/testsuite/gcc.dg/pr108264.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a498733e7919de72eb6f1bf3e16883ad159f6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a498733e7919de72eb6f1bf3e16883ad159f6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108264.c?ref=226a498733e7919de72eb6f1bf3e16883ad159f6", "patch": "@@ -0,0 +1,27 @@\n+/* PR middle-end/108264 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-fpic\" { target fpic } } */\n+\n+int v;\n+extern int bar (void);\n+\n+static inline void\n+foo (char *d)\n+{\n+  switch (bar ())\n+    {\n+    case 2:\n+      d[0] = d[1] = d[2] = d[3] = v;\n+      break;\n+    case 4:\n+      d[0] = 0;\n+    }\n+}\n+\n+int\n+baz (int x)\n+{\n+  foo ((char *) &x);\n+  return x;\n+}"}]}