{"sha": "f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0Y2U2YzZlOGMyNjhhM2NiYWMzNzk5ZDkyNjRlOTQxOTJhNzhhNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-24T16:02:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-24T16:02:39Z"}, "message": "[multiple changes]\n\n\n2002-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/6701\n\t* testsuite/22_locale/ctype_narrow_char.cc: New.\n\t* testsuite/22_locale/ctype_narrow_wchar_t.cc: New.\n\t* testsuite/22_locale/ctype_widen_char.cc: New.\n\t* testsuite/22_locale/ctype_widen_wchar_t.cc: New.\n\t* testsuite/22_locale/ctype_members_char.cc: Move some bits into...\n\t* testsuite/22_locale/ctype_is_char.cc: ...this.\n\t* testsuite/22_locale/ctype_to_char.cc: ...and this.\n\t* testsuite/22_locale/ctype_members_wchar_t.cc: Move some bits into...\n\t* testsuite/22_locale/ctype_is_wchar_t.cc: ...this.\n\t* testsuite/22_locale/ctype_to_wchar_t.cc: ...and this.\n\n\t* testsuite/22_locale/ctype_scan_wchar_t.cc: Should pass.\n\n2002-05-24  Dale Peakall <dale@peakall.net>\n\n\tPR libstdc++/6701\n\t* config/locale/gnu/ctype_members.cc (ctype<wchar_t>::do_narrow): Fix.\n\t* config/locale/generic/ctype_members.cc: Same.\n\nFrom-SVN: r53841", "tree": {"sha": "ee452dd2f912002a9429b01ba93b284322da212e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee452dd2f912002a9429b01ba93b284322da212e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/comments", "author": null, "committer": null, "parents": [{"sha": "52f02d949e31180b80d2cd2535e9147bccceb901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f02d949e31180b80d2cd2535e9147bccceb901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f02d949e31180b80d2cd2535e9147bccceb901"}], "stats": {"total": 1529, "additions": 1157, "deletions": 372}, "files": [{"sha": "3bfa38e8d39298c4ed824322cb77abad201c5527", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -1,3 +1,36 @@\n+2002-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/6701\n+\t* testsuite/22_locale/ctype_narrow_char.cc: New.\n+\t* testsuite/22_locale/ctype_narrow_wchar_t.cc: New.\t\n+\t* testsuite/22_locale/ctype_widen_char.cc: New.\n+\t* testsuite/22_locale/ctype_widen_wchar_t.cc: New.\n+\t* testsuite/22_locale/ctype_members_char.cc: Move some bits into...\n+\t* testsuite/22_locale/ctype_is_char.cc: ...this.\n+\t* testsuite/22_locale/ctype_to_char.cc: ...and this.\n+\t* testsuite/22_locale/ctype_members_wchar_t.cc: Move some bits into...\n+\t* testsuite/22_locale/ctype_is_wchar_t.cc: ...this.\n+\t* testsuite/22_locale/ctype_to_wchar_t.cc: ...and this.\n+\n+\t* testsuite/22_locale/ctype_scan_wchar_t.cc: Should pass.\n+\t\n+2002-05-24  Dale Peakall <dale@peakall.net>\n+\n+\tPR libstdc++/6701\n+\t* config/locale/gnu/ctype_members.cc (ctype<wchar_t>::do_narrow): Fix.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t\n+2002-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/6750\n+\t* include/bits/ostream.tcc (ostream::operator<<(const char*)): Fix\n+\tfor empty string literal.\n+\t(ostream::operator<<(const _CharT*)): Same.\n+\t(ostream<char>::operator<<(const char*)): Same.\n+\t(ostream<char>::operator<<(streambuf*)): Same.\n+\t* testsuite/27_io/ostream_inserter_char.cc (test08): Add tests.\n+\t* testsuite/27_io/ostream_inserter_other.cc (test02): Modify.\n+\t\n 2002-05-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.in (release_VERSION): Update to 3.1.1."}, {"sha": "f147983c6a2a33d4218dfff02b143efb30f8ac04", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -183,12 +183,23 @@ namespace std\n   do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n \t    char* __dest) const\n   {\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    size_t __len = __hi - __lo;\n-    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n-    if (__conv == __len)\n-      *__dest = __dfault;\n+    size_t __offset = 0;\n+    while (true)\n+      {\n+\tconst wchar_t* __start = __lo + __offset;        \n+\tsize_t __len = __hi - __start;\n+\t\n+\tmbstate_t __state;\n+\tmemset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+\tsize_t __con = wcsrtombs(__dest + __offset, &__start, __len, &__state);\n+\tif (__con != __len && __start != 0)\n+\t  {\n+\t    __offset = __start - __lo;          \n+\t    __dest[__offset++] = __dfault;\n+\t  }\n+\telse\n+\t  break;\n+      }\n     return __hi;\n   }\n #endif //  _GLIBCPP_USE_WCHAR_T"}, {"sha": "de83683934a5dc745f3ba07428beaa7121587101", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -190,12 +190,23 @@ namespace std\n   do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n \t    char* __dest) const\n   {\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    size_t __len = __hi - __lo;\n-    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n-    if (__conv == __len)\n-      *__dest = __dfault;\n+    size_t __offset = 0;\n+    while (true)\n+      {\n+\tconst wchar_t* __start = __lo + __offset;        \n+\tsize_t __len = __hi - __start;\n+\t\n+\tmbstate_t __state;\n+\tmemset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n+\tsize_t __con = wcsrtombs(__dest + __offset, &__start, __len, &__state);\n+\tif (__con != __len && __start != 0)\n+\t  {\n+\t    __offset = __start - __lo;          \n+\t    __dest[__offset++] = __dfault;\n+\t  }\n+\telse\n+\t  break;\n+      }\n     return __hi;\n   }\n #endif //  _GLIBCPP_USE_WCHAR_T"}, {"sha": "5955cf3ed0eecf20135dbd679f6ecc02f296b821", "filename": "libstdc++-v3/testsuite/22_locale/ctype_is_char.cc", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_char.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,275 @@\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test (test02) is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+typedef char char_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n+\n+void test01()\n+{\n+  bool test = true;\n+  const char_type strlit00[] = \"manilla, cebu, tandag PHILIPPINES\";\n+  const char_type strlit01[] = \"MANILLA, CEBU, TANDAG PHILIPPINES\";\n+  const char_type strlit02[] = \"manilla, cebu, tandag philippines\";\n+  const char_type c00 = 'S';\n+  const char_type c10 = 's';\n+  const char_type c20 = '9';\n+  const char_type c30 = ' ';\n+  const char_type c40 = '!';\n+  const char_type c50 = 'F';\n+  const char_type c60 = 'f';\n+  const char_type c70 = 'X';\n+  const char_type c80 = 'x';\n+\n+  gnu_ctype gctype;\n+  char_type c100;\n+  int len = std::char_traits<char_type>::length(strlit00);\n+  char_type c_array[len + 1];\n+\n+  // sanity check ctype_base::mask members\n+  int i01 = std::ctype_base::space;\n+  int i02 = std::ctype_base::upper;\n+  int i03 = std::ctype_base::lower;\n+  int i04 = std::ctype_base::digit;\n+  int i05 = std::ctype_base::punct;\n+  int i06 = std::ctype_base::alpha;\n+  int i07 = std::ctype_base::xdigit;\n+  int i08 = std::ctype_base::alnum;\n+  int i09 = std::ctype_base::graph;\n+  int i10 = std::ctype_base::print;\n+  int i11 = std::ctype_base::cntrl;\n+  int i12 = sizeof(std::ctype_base::mask);\n+  VERIFY ( i01 != i02);\n+  VERIFY ( i02 != i03);\n+  VERIFY ( i03 != i04);\n+  VERIFY ( i04 != i05);\n+  VERIFY ( i05 != i06);\n+  VERIFY ( i06 != i07);\n+  VERIFY ( i07 != i08);\n+  VERIFY ( i08 != i09);\n+  VERIFY ( i09 != i10);\n+  VERIFY ( i10 != i11);\n+  VERIFY ( i11 != i01);\n+\n+  // bool is(mask m, char_type c) const;\n+  VERIFY( gctype.is(std::ctype_base::space, c30) );\n+  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n+  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n+  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n+  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n+  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n+  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n+\n+  // const char* is(const char* low, const char* high, mask* vec) const\n+  std::ctype_base::mask m00 = static_cast<std::ctype_base::mask>(0);\n+  std::ctype_base::mask m01[3];\n+  std::ctype_base::mask m02[13];\n+  const char_type* cc0 = strlit00;\n+  const char_type* cc1 = NULL;\n+  const char_type* cc2 = NULL;\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc1 = gctype.is(cc0, cc0, m01);\n+  VERIFY( cc1 == strlit00 );\n+  VERIFY( m01[0] == m00 );\n+  VERIFY( m01[1] == m00 );\n+  VERIFY( m01[2] == m00 );\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc2 = gctype.is(cc0, cc0 + 3, m01);\n+  VERIFY( cc2 == strlit00 + 3);\n+  VERIFY( m01[0] != m00 );\n+  VERIFY( m01[1] != m00 );\n+  VERIFY( m01[2] != m00 );\n+  VERIFY( gctype.is(m01[0], cc0[0]) );\n+  VERIFY( gctype.is(m01[1], cc0[1]) );\n+  VERIFY( gctype.is(m01[2], cc0[2]) );\n+\n+  cc0 = strlit01;\n+  cc1 = gctype.is(cc0, cc0 + 13, m02);\n+  VERIFY( cc1 == strlit01 + 13);\n+  VERIFY( m02[6] != m00 );\n+  VERIFY( m02[7] != m00 );\n+  VERIFY( m02[8] != m00 );\n+  VERIFY( m02[8] != m02[6] );\n+  VERIFY( m02[6] != m02[7] );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alnum) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::upper) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alpha) );\n+  VERIFY( static_cast<bool>(m02[7] & std::ctype_base::punct) );\n+  VERIFY( static_cast<bool>(m02[8] & std::ctype_base::space) );\n+  VERIFY( gctype.is(m02[6], cc0[6]) );\n+  VERIFY( gctype.is(m02[7], cc0[7]) );\n+  VERIFY( gctype.is(m02[8], cc0[8]) );\n+}\n+\n+// libstdc++/4456, libstdc++/4457, libstdc++/4458\n+void test02()\n+{\n+  using namespace std;\n+  typedef ctype_base::mask \tmask;\n+  typedef vector<mask> \t\tvector_type;\n+\n+  bool test = true;\n+\n+  //  const int max = numeric_limits<char>::max();\n+  const int max = 255;\n+  const int ctype_mask_max = 10;\n+  vector_type v_c(max);\n+  vector_type v_de(max);\n+\n+  // \"C\"\n+  locale loc_c = locale::classic();\n+  const ctype<char>& ctype_c = use_facet<ctype<char> >(loc_c); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_c.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_c[i] = mask_is;\n+    }   \n+\n+  // \"de_DE\"\n+  locale loc_de(\"de_DE\");\n+  const ctype<char>& ctype_de = use_facet<ctype<char> >(loc_de); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_de.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_de[i] = mask_is;\n+    }   \n+\n+#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n+    for (int i = 0; i < max; ++i)\n+    {\n+      char_type mark = v_c[i] == v_de[i] ? ' ' : '-';\n+      cout << i << ' ' << mark << ' ' << static_cast<char>(i) << '\\t' ;\n+      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n+      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n+    }\n+    cout << (v_c == v_de) << endl;\n+#endif\n+\n+  VERIFY( v_c != v_de );\n+}\n+\n+// Per Liboriussen <liborius@stofanet.dk>\n+void test03()\n+{\n+  bool test = true;\n+  std::ctype_base::mask maskdata[256];\n+  for (int i = 0; i < 256; ++i)\n+    maskdata[i] = std::ctype_base::alpha;\n+  std::ctype<char>* f = new std::ctype<char>(maskdata);\n+  std::locale global;\n+  std::locale loc(global, f);\n+  for (int i = 0; i < 256; ++i) \n+    {\n+      char_type ch = i;\n+      VERIFY( std::isalpha(ch, loc) );\n+    }\n+}\n+\n+// libstdc++/5280\n+void test04()\n+{\n+#ifdef _GLIBCPP_HAVE_SETENV \n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      test02();\n+      test03();\n+      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+    }\n+#endif\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n+void test05()\n+{\n+  bool test = true;\n+\n+  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  if (tentLANG != NULL)\n+    {\n+      std::string preLANG = tentLANG;\n+      test01();\n+      test02();\n+      test03();\n+      std::string postLANG = setlocale(LC_ALL, NULL);\n+      VERIFY( preLANG == postLANG );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "9e6271dd4dab8a0f5d95b81f8075a0206be6f097", "filename": "libstdc++-v3/testsuite/22_locale/ctype_is_wchar_t.cc", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_is_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,193 @@\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test (test02) is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+typedef wchar_t char_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n+\n+void test01()\n+{\n+  bool test = true;\n+  const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n+  const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n+  const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n+  const char_type c00 = L'S';\n+  const char_type c10 = L's';\n+  const char_type c20 = L'9';\n+  const char_type c30 = L' ';\n+  const char_type c40 = L'!';\n+  const char_type c50 = L'F';\n+  const char_type c60 = L'f';\n+  const char_type c70 = L'X';\n+  const char_type c80 = L'x';\n+\n+  gnu_ctype gctype;\n+  char_type c100;\n+  int len = std::char_traits<char_type>::length(strlit00);\n+  char_type c_array[len + 1];\n+\n+  // sanity check ctype_base::mask members\n+  int i01 = std::ctype_base::space;\n+  int i02 = std::ctype_base::upper;\n+  int i03 = std::ctype_base::lower;\n+  int i04 = std::ctype_base::digit;\n+  int i05 = std::ctype_base::punct;\n+  int i06 = std::ctype_base::alpha;\n+  int i07 = std::ctype_base::xdigit;\n+  int i08 = std::ctype_base::alnum;\n+  int i09 = std::ctype_base::graph;\n+  int i10 = std::ctype_base::print;\n+  int i11 = std::ctype_base::cntrl;\n+  int i12 = sizeof(std::ctype_base::mask);\n+  VERIFY ( i01 != i02);\n+  VERIFY ( i02 != i03);\n+  VERIFY ( i03 != i04);\n+  VERIFY ( i04 != i05);\n+  VERIFY ( i05 != i06);\n+  VERIFY ( i06 != i07);\n+  VERIFY ( i07 != i08);\n+  VERIFY ( i08 != i09);\n+  VERIFY ( i09 != i10);\n+  VERIFY ( i10 != i11);\n+  VERIFY ( i11 != i01);\n+\n+  // bool is(mask m, char_type c) const;\n+  VERIFY( gctype.is(std::ctype_base::space, c30) );\n+  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n+  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n+  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n+  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n+  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n+  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n+\n+  // const char* is(const char* low, const char* high, mask* vec) const\n+  std::ctype_base::mask m00 = static_cast<std::ctype_base::mask>(0);\n+  std::ctype_base::mask m01[3];\n+  std::ctype_base::mask m02[13];\n+  const char_type* cc0 = strlit00;\n+  const char_type* cc1 = NULL;\n+  const char_type* cc2 = NULL;\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc1 = gctype.is(cc0, cc0, m01);\n+  VERIFY( cc1 == strlit00 );\n+  VERIFY( m01[0] == m00 );\n+  VERIFY( m01[1] == m00 );\n+  VERIFY( m01[2] == m00 );\n+\n+  cc0 = strlit00;\n+  m01[0] = m00;\n+  m01[1] = m00;\n+  m01[2] = m00;\n+  cc2 = gctype.is(cc0, cc0 + 3, m01);\n+  VERIFY( cc2 == strlit00 + 3);\n+#if 0\n+  VERIFY( m01[0] != m00 );\n+  VERIFY( m01[1] != m00 );\n+  VERIFY( m01[2] != m00 );\n+  VERIFY( gctype.is(m01[0], cc0[0]) );\n+  VERIFY( gctype.is(m01[1], cc0[1]) );\n+  VERIFY( gctype.is(m01[2], cc0[2]) );\n+#endif\n+\n+  cc0 = strlit01;\n+  cc1 = gctype.is(cc0, cc0 + 13, m02);\n+  VERIFY( cc1 == strlit01 + 13);\n+#if 0\n+  VERIFY( m02[6] != m00 );\n+  VERIFY( m02[7] != m00 );\n+  VERIFY( m02[8] != m00 );\n+  VERIFY( m02[8] != m02[6] );\n+  VERIFY( m02[6] != m02[7] );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alnum) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::upper) );\n+  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alpha) );\n+  VERIFY( static_cast<bool>(m02[7] & std::ctype_base::punct) );\n+  VERIFY( static_cast<bool>(m02[8] & std::ctype_base::space) );\n+  VERIFY( gctype.is(m02[6], cc0[6]) );\n+  VERIFY( gctype.is(m02[7], cc0[7]) );\n+  VERIFY( gctype.is(m02[8], cc0[8]) );\n+#endif\n+}\n+\n+// libstdc++/5280\n+void test04()\n+{\n+#ifdef _GLIBCPP_HAVE_SETENV \n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+    }\n+#endif\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n+void test05()\n+{\n+  bool test = true;\n+\n+  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  if (tentLANG != NULL)\n+    {\n+      std::string preLANG = tentLANG;\n+      test01();\n+      std::string postLANG = setlocale(LC_ALL, NULL);\n+      VERIFY( preLANG == postLANG );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "54fc5d3e91dfd97f94cb6e0920d0363c0f1fe452", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "modified", "additions": 0, "deletions": 261, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -30,210 +30,8 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n-#include <vector>\n #include <testsuite_hooks.h>\n \n-// XXX This test (test02) is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-class gnu_ctype: public std::ctype<char> { };\n-\n-void test01()\n-{\n-  bool test = true;\n-  const char strlit00[] = \"manilla, cebu, tandag PHILIPPINES\";\n-  const char strlit01[] = \"MANILLA, CEBU, TANDAG PHILIPPINES\";\n-  const char strlit02[] = \"manilla, cebu, tandag philippines\";\n-  const char c00 = 'S';\n-  const char c10 = 's';\n-  const char c20 = '9';\n-  const char c30 = ' ';\n-  const char c40 = '!';\n-  const char c50 = 'F';\n-  const char c60 = 'f';\n-  const char c70 = 'X';\n-  const char c80 = 'x';\n-\n-  gnu_ctype gctype;\n-  char c100;\n-  int len = std::char_traits<char>::length(strlit00);\n-  char c_array[len + 1];\n-\n-  // sanity check ctype_base::mask members\n-  int i01 = std::ctype_base::space;\n-  int i02 = std::ctype_base::upper;\n-  int i03 = std::ctype_base::lower;\n-  int i04 = std::ctype_base::digit;\n-  int i05 = std::ctype_base::punct;\n-  int i06 = std::ctype_base::alpha;\n-  int i07 = std::ctype_base::xdigit;\n-  int i08 = std::ctype_base::alnum;\n-  int i09 = std::ctype_base::graph;\n-  int i10 = std::ctype_base::print;\n-  int i11 = std::ctype_base::cntrl;\n-  int i12 = sizeof(std::ctype_base::mask);\n-  VERIFY ( i01 != i02);\n-  VERIFY ( i02 != i03);\n-  VERIFY ( i03 != i04);\n-  VERIFY ( i04 != i05);\n-  VERIFY ( i05 != i06);\n-  VERIFY ( i06 != i07);\n-  VERIFY ( i07 != i08);\n-  VERIFY ( i08 != i09);\n-  VERIFY ( i09 != i10);\n-  VERIFY ( i10 != i11);\n-  VERIFY ( i11 != i01);\n-\n-  // bool is(mask m, char c) const;\n-  VERIFY( gctype.is(std::ctype_base::space, c30) );\n-  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n-  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n-  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n-  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n-  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n-  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n-  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n-  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n-  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n-  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n-  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n-  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n-\n-  // const char* is(const char* low, const char* high, mask* vec) const\n-  std::ctype_base::mask m00 = static_cast<std::ctype_base::mask>(0);\n-  std::ctype_base::mask m01[3];\n-  std::ctype_base::mask m02[13];\n-  const char* cc0 = strlit00;\n-  const char* cc1 = NULL;\n-  const char* cc2 = NULL;\n-\n-  cc0 = strlit00;\n-  m01[0] = m00;\n-  m01[1] = m00;\n-  m01[2] = m00;\n-  cc1 = gctype.is(cc0, cc0, m01);\n-  VERIFY( cc1 == strlit00 );\n-  VERIFY( m01[0] == m00 );\n-  VERIFY( m01[1] == m00 );\n-  VERIFY( m01[2] == m00 );\n-\n-  cc0 = strlit00;\n-  m01[0] = m00;\n-  m01[1] = m00;\n-  m01[2] = m00;\n-  cc2 = gctype.is(cc0, cc0 + 3, m01);\n-  VERIFY( cc2 == strlit00 + 3);\n-  VERIFY( m01[0] != m00 );\n-  VERIFY( m01[1] != m00 );\n-  VERIFY( m01[2] != m00 );\n-  VERIFY( gctype.is(m01[0], cc0[0]) );\n-  VERIFY( gctype.is(m01[1], cc0[1]) );\n-  VERIFY( gctype.is(m01[2], cc0[2]) );\n-\n-  cc0 = strlit01;\n-  cc1 = gctype.is(cc0, cc0 + 13, m02);\n-  VERIFY( cc1 == strlit01 + 13);\n-  VERIFY( m02[6] != m00 );\n-  VERIFY( m02[7] != m00 );\n-  VERIFY( m02[8] != m00 );\n-  VERIFY( m02[8] != m02[6] );\n-  VERIFY( m02[6] != m02[7] );\n-  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alnum) );\n-  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::upper) );\n-  VERIFY( static_cast<bool>(m02[6] & std::ctype_base::alpha) );\n-  VERIFY( static_cast<bool>(m02[7] & std::ctype_base::punct) );\n-  VERIFY( static_cast<bool>(m02[8] & std::ctype_base::space) );\n-  VERIFY( gctype.is(m02[6], cc0[6]) );\n-  VERIFY( gctype.is(m02[7], cc0[7]) );\n-  VERIFY( gctype.is(m02[8], cc0[8]) );\n-\n-  // char toupper(char c) const\n-  c100 = gctype.toupper(c10);\n-  VERIFY( c100 == c00 );\n-\n-  // char tolower(char c) const\n-  c100 = gctype.tolower(c00);\n-  VERIFY( c100 == c10 );\n-\n-  // char toupper(char* low, const char* hi) const\n-  std::char_traits<char>::copy(c_array, strlit02, len + 1);\n-  gctype.toupper(c_array, c_array + len);\n-  VERIFY( !std::char_traits<char>::compare(c_array, strlit01, len - 1) );\n-\n-  // char tolower(char* low, const char* hi) const\n-  std::char_traits<char>::copy(c_array, strlit01, len + 1);\n-  gctype.tolower(c_array, c_array + len);\n-  VERIFY( !std::char_traits<char>::compare(c_array, strlit02, len - 1) );\n-\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-// libstdc++/4456, libstdc++/4457, libstdc++/4458\n-void test02()\n-{\n-  using namespace std;\n-  typedef ctype_base::mask \tmask;\n-  typedef vector<mask> \t\tvector_type;\n-\n-  bool test = true;\n-\n-  //  const int max = numeric_limits<char>::max();\n-  const int max = 255;\n-  const int ctype_mask_max = 10;\n-  vector_type v_c(max);\n-  vector_type v_de(max);\n-\n-  // \"C\"\n-  locale loc_c = locale::classic();\n-  const ctype<char>& ctype_c = use_facet<ctype<char> >(loc_c); \n-  for (int i = 0; i < max; ++i)\n-    {\n-      char c = static_cast<char>(i);\n-      mask mask_test = static_cast<mask>(0);\n-      mask mask_is = static_cast<mask>(0);\n-      for (int j = 0; j <= ctype_mask_max; ++j)\n-\t{\n-\t  mask_test = static_cast<mask>(1 << j);\n-\t  if (ctype_c.is(mask_test, c))\n-\t    mask_is |= mask_test;\n-\t}\n-      v_c[i] = mask_is;\n-    }   \n-\n-  // \"de_DE\"\n-  locale loc_de(\"de_DE\");\n-  const ctype<char>& ctype_de = use_facet<ctype<char> >(loc_de); \n-  for (int i = 0; i < max; ++i)\n-    {\n-      char c = static_cast<char>(i);\n-      mask mask_test = static_cast<mask>(0);\n-      mask mask_is = static_cast<mask>(0);\n-      for (int j = 0; j <= ctype_mask_max; ++j)\n-\t{\n-\t  mask_test = static_cast<mask>(1 << j);\n-\t  if (ctype_de.is(mask_test, c))\n-\t    mask_is |= mask_test;\n-\t}\n-      v_de[i] = mask_is;\n-    }   \n-\n-#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n-    for (int i = 0; i < max; ++i)\n-    {\n-      char mark = v_c[i] == v_de[i] ? ' ' : '-';\n-      cout << i << ' ' << mark << ' ' << static_cast<char>(i) << '\\t' ;\n-      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n-      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n-    }\n-    cout << (v_c == v_de) << endl;\n-#endif\n-\n-  VERIFY( v_c != v_de );\n-}\n-\n // Dietmar K\ufffdhl via Peter Schmid \n class comma_ctype: public std::ctype<char>\n {\n@@ -243,66 +41,7 @@ class comma_ctype: public std::ctype<char>\n   { classic_table(); }\n };\n \n-// Per Liboriussen <liborius@stofanet.dk>\n-void test03()\n-{\n-  bool test = true;\n-  std::ctype_base::mask maskdata[256];\n-  for (int i = 0; i < 256; ++i)\n-    maskdata[i] = std::ctype_base::alpha;\n-  std::ctype<char>* f = new std::ctype<char>(maskdata);\n-  std::locale global;\n-  std::locale loc(global, f);\n-  for (int i = 0; i < 256; ++i) \n-    {\n-      char ch = i;\n-      VERIFY( std::isalpha(ch, loc) );\n-    }\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test05()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main() \n {\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n   return 0;\n }"}, {"sha": "31b1bcbf1608b8c4a28d68bacf8ab31c323bdc64", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc", "status": "modified", "additions": 1, "deletions": 95, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -30,113 +30,19 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n-// NB: Don't include any other headers in this file.\n #include <testsuite_hooks.h>\n \n #if _GLIBCPP_USE_WCHAR_T\n-class gnu_ctype: public std::ctype<wchar_t> {};\n-\n void test01()\n {\n-  bool test = true;\n-  typedef wchar_t \tchar_type;\n-\n-  const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n-  const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n-  const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n-  const char_type c00 = L'S';\n-  const char_type c10 = L's';\n-  const char_type c20 = L'9';\n-  const char_type c30 = L' ';\n-  const char_type c40 = L'!';\n-  const char_type c50 = L'F';\n-  const char_type c60 = L'f';\n-  const char_type c70 = L'X';\n-  const char_type c80 = L'x';\n-\n-  gnu_ctype gctype;\n-  char_type c100;\n-  int len = std::char_traits<char_type>::length(strlit00);\n-  char_type c_array[len + 1];\n-\n-  // bool is(mask m, char_type c) const;\n-  VERIFY( gctype.is(std::ctype_base::space, c30) );\n-  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n-  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n-  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n-  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n-  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n-  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n-  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n-  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n-  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n-  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n-  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n-  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n-\n-  // char_type toupper(char_type c) const\n-  c100 = gctype.toupper(c10);\n-  VERIFY( c100 == c00 );\n-\n-  // char_type tolower(char_type c) const\n-  c100 = gctype.tolower(c00);\n-  VERIFY( c100 == c10 );\n-\n-  // char_type toupper(char_type* low, const char_type* hi) const\n-  std::char_traits<char_type>::copy(c_array, strlit02, len + 1);\n-  gctype.toupper(c_array, c_array + len);\n-  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit01, len - 1) );\n-\n-  // char_type tolower(char_type* low, const char_type* hi) const\n-  std::char_traits<char_type>::copy(c_array, strlit01, len + 1);\n-  gctype.tolower(c_array, c_array + len);\n-  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-// libstdc++/5280\n-void test03()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n+  // Nothing, right now.  \n }\n #endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main() \n {\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n-  test03();\n-  test04();\n #endif \n \n   return 0;"}, {"sha": "cfbc49db72b3dbfc34d15b5b205118f1fdc46fd0", "filename": "libstdc++-v3/testsuite/22_locale/ctype_narrow_char.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_char.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,103 @@\n+// 2002-05-24 bkoz\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6701\n+void test01()\n+{\n+  using namespace std;\n+  typedef char \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(\"wibble\");\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+  \n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef char \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  // Construct non-asci string.\n+  basic_string<wide_type> \twide(\"wibble\");\n+  wide += wide_type(1240);\n+  wide += \"kibble\";\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  narrow += char(1240);\n+  narrow += \"kibble\";\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+\n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n+}\n+\n+int main() \n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "95946a760342b60bb77b9ae11b899ceb108b22cb", "filename": "libstdc++-v3/testsuite/22_locale/ctype_narrow_wchar_t.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_narrow_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,103 @@\n+// 2002-05-24 bkoz\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6701\n+void test01()\n+{\n+  using namespace std;\n+  typedef wchar_t \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(L\"wibble\");\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+  \n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef wchar_t \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  // Construct non-asci string.\n+  basic_string<wide_type> \twide(L\"wibble\");\n+  wide += wide_type(1240);\n+  wide += L\"kibble\";\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  narrow += dfault;\n+  narrow += \"kibble\";\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+\n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n+}\n+\n+int main() \n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "7af4fae26b2fad997407c1e7969877581f8af9d8", "filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_wchar_t.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_scan_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -32,9 +32,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n typedef wchar_t char_type;\n typedef std::char_traits<char_type> traits_type;\n class gnu_ctype: public std::ctype<char_type> { };"}, {"sha": "b4eb8840db9798daf517b62822e31a4d3b9bc9cd", "filename": "libstdc++-v3/testsuite/22_locale/ctype_to_char.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_char.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,140 @@\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+typedef char char_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n+\n+void test01()\n+{\n+  bool test = true;\n+  const char_type strlit00[] = \"manilla, cebu, tandag PHILIPPINES\";\n+  const char_type strlit01[] = \"MANILLA, CEBU, TANDAG PHILIPPINES\";\n+  const char_type strlit02[] = \"manilla, cebu, tandag philippines\";\n+  const char_type c00 = 'S';\n+  const char_type c10 = 's';\n+  const char_type c20 = '9';\n+  const char_type c30 = ' ';\n+  const char_type c40 = '!';\n+  const char_type c50 = 'F';\n+  const char_type c60 = 'f';\n+  const char_type c70 = 'X';\n+  const char_type c80 = 'x';\n+\n+  gnu_ctype gctype;\n+  char_type c100;\n+  int len = std::char_traits<char_type>::length(strlit00);\n+  char_type c_array[len + 1];\n+\n+  // sanity check ctype_base::mask members\n+  int i01 = std::ctype_base::space;\n+  int i02 = std::ctype_base::upper;\n+  int i03 = std::ctype_base::lower;\n+  int i04 = std::ctype_base::digit;\n+  int i05 = std::ctype_base::punct;\n+  int i06 = std::ctype_base::alpha;\n+  int i07 = std::ctype_base::xdigit;\n+  int i08 = std::ctype_base::alnum;\n+  int i09 = std::ctype_base::graph;\n+  int i10 = std::ctype_base::print;\n+  int i11 = std::ctype_base::cntrl;\n+  int i12 = sizeof(std::ctype_base::mask);\n+  VERIFY ( i01 != i02);\n+  VERIFY ( i02 != i03);\n+  VERIFY ( i03 != i04);\n+  VERIFY ( i04 != i05);\n+  VERIFY ( i05 != i06);\n+  VERIFY ( i06 != i07);\n+  VERIFY ( i07 != i08);\n+  VERIFY ( i08 != i09);\n+  VERIFY ( i09 != i10);\n+  VERIFY ( i10 != i11);\n+  VERIFY ( i11 != i01);\n+\n+  // char_type toupper(char_type c) const\n+  c100 = gctype.toupper(c10);\n+  VERIFY( c100 == c00 );\n+\n+  // char_type tolower(char_type c) const\n+  c100 = gctype.tolower(c00);\n+  VERIFY( c100 == c10 );\n+\n+  // char_type toupper(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit02, len + 1);\n+  gctype.toupper(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit01, len - 1) );\n+\n+  // char_type tolower(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit01, len + 1);\n+  gctype.tolower(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n+}\n+\n+// libstdc++/5280\n+void test04()\n+{\n+#ifdef _GLIBCPP_HAVE_SETENV \n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+    }\n+#endif\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n+void test05()\n+{\n+  bool test = true;\n+\n+  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  if (tentLANG != NULL)\n+    {\n+      std::string preLANG = tentLANG;\n+      test01();\n+      std::string postLANG = setlocale(LC_ALL, NULL);\n+      VERIFY( preLANG == postLANG );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "ccc3d87dea094dcc9ffa6bf7574b678bc64dca94", "filename": "libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_to_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,140 @@\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+typedef wchar_t char_type;\n+class gnu_ctype: public std::ctype<char_type> { };\n+\n+void test01()\n+{\n+  bool test = true;\n+  const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n+  const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n+  const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n+  const char_type c00 = L'S';\n+  const char_type c10 = L's';\n+  const char_type c20 = L'9';\n+  const char_type c30 = L' ';\n+  const char_type c40 = L'!';\n+  const char_type c50 = L'F';\n+  const char_type c60 = L'f';\n+  const char_type c70 = L'X';\n+  const char_type c80 = L'x';\n+\n+  gnu_ctype gctype;\n+  char_type c100;\n+  int len = std::char_traits<char_type>::length(strlit00);\n+  char_type c_array[len + 1];\n+\n+  // sanity check ctype_base::mask members\n+  int i01 = std::ctype_base::space;\n+  int i02 = std::ctype_base::upper;\n+  int i03 = std::ctype_base::lower;\n+  int i04 = std::ctype_base::digit;\n+  int i05 = std::ctype_base::punct;\n+  int i06 = std::ctype_base::alpha;\n+  int i07 = std::ctype_base::xdigit;\n+  int i08 = std::ctype_base::alnum;\n+  int i09 = std::ctype_base::graph;\n+  int i10 = std::ctype_base::print;\n+  int i11 = std::ctype_base::cntrl;\n+  int i12 = sizeof(std::ctype_base::mask);\n+  VERIFY ( i01 != i02);\n+  VERIFY ( i02 != i03);\n+  VERIFY ( i03 != i04);\n+  VERIFY ( i04 != i05);\n+  VERIFY ( i05 != i06);\n+  VERIFY ( i06 != i07);\n+  VERIFY ( i07 != i08);\n+  VERIFY ( i08 != i09);\n+  VERIFY ( i09 != i10);\n+  VERIFY ( i10 != i11);\n+  VERIFY ( i11 != i01);\n+\n+  // char_type toupper(char_type c) const\n+  c100 = gctype.toupper(c10);\n+  VERIFY( c100 == c00 );\n+\n+  // char_type tolower(char_type c) const\n+  c100 = gctype.tolower(c00);\n+  VERIFY( c100 == c10 );\n+\n+  // char_type toupper(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit02, len + 1);\n+  gctype.toupper(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit01, len - 1) );\n+\n+  // char_type tolower(char_type* low, const char_type* hi) const\n+  std::char_traits<char_type>::copy(c_array, strlit01, len + 1);\n+  gctype.tolower(c_array, c_array + len);\n+  VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n+}\n+\n+// libstdc++/5280\n+void test04()\n+{\n+#ifdef _GLIBCPP_HAVE_SETENV \n+  // Set the global locale to non-\"C\".\n+  std::locale loc_de(\"de_DE\");\n+  std::locale::global(loc_de);\n+\n+  // Set LANG environment variable to de_DE.\n+  const char* oldLANG = getenv(\"LANG\");\n+  if (!setenv(\"LANG\", \"de_DE\", 1))\n+    {\n+      test01();\n+      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n+    }\n+#endif\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n+void test05()\n+{\n+  bool test = true;\n+\n+  const char* tentLANG = setlocale(LC_ALL, \"ja_JP.eucjp\");\n+  if (tentLANG != NULL)\n+    {\n+      std::string preLANG = tentLANG;\n+      test01();\n+      std::string postLANG = setlocale(LC_ALL, NULL);\n+      VERIFY( preLANG == postLANG );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  test04();\n+  test05();\n+  return 0;\n+}"}, {"sha": "ea206059bfb25f5fc5f98ccec978583656689de9", "filename": "libstdc++-v3/testsuite/22_locale/ctype_widen_char.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_char.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,67 @@\n+// 2002-05-24 bkoz\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef char wide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(\"drusilla, louvinia, bayard\");\n+  basic_string<char> \t\tnarrow(\"drusilla, louvinia, bayard\");\n+  vector<wide_type> \t\twide_chars(narrow.length() + 1);\n+  \n+  // widen(char c) const\n+  for (int i = 0; i < narrow.length(); ++i)\n+    {\n+      char c = ctype_c.widen(narrow[i]);\n+      VERIFY( c == wide[i] );\n+    }\n+\n+  // widen(const char* low, const char* high, charT* dest) const\n+  ctype_c.widen(&narrow[0], &narrow[narrow.length()], &wide_chars[0]);  \n+  for (int i = 0; i < narrow.length(); ++i)\n+    VERIFY( wide_chars[i] == wide[i] );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f089a06e3eddc1b8c365d55b7d48dadd7d516368", "filename": "libstdc++-v3/testsuite/22_locale/ctype_widen_wchar_t.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64ce6c6e8c268a3cbac3799d9264e94192a78a5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_widen_wchar_t.cc?ref=f64ce6c6e8c268a3cbac3799d9264e94192a78a5", "patch": "@@ -0,0 +1,67 @@\n+// 2002-05-24 bkoz\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef wchar_t wide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(L\"drusilla, louvinia, bayard\");\n+  basic_string<char> \t\tnarrow(\"drusilla, louvinia, bayard\");\n+  vector<wide_type> \t\twide_chars(narrow.length() + 1);\n+  \n+  // widen(char c) const\n+  for (int i = 0; i < narrow.length(); ++i)\n+    {\n+      char c = ctype_c.widen(narrow[i]);\n+      VERIFY( c == wide[i] );\n+    }\n+\n+  // widen(const char* low, const char* high, charT* dest) const\n+  ctype_c.widen(&narrow[0], &narrow[narrow.length()], &wide_chars[0]);  \n+  for (int i = 0; i < narrow.length(); ++i)\n+    VERIFY( wide_chars[i] == wide[i] );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}