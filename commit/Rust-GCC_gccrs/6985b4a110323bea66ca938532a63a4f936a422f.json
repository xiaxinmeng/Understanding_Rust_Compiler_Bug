{"sha": "6985b4a110323bea66ca938532a63a4f936a422f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4NWI0YTExMDMyM2JlYTY2Y2E5Mzg1MzJhNjNhNGY5MzZhNDIyZg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-06T16:08:03Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-06T16:08:03Z"}, "message": "Document libgfortran thread-safety\n\nFrom-SVN: r169864", "tree": {"sha": "bcf6b8b357c7c4f19c680c71c737e761328e04b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcf6b8b357c7c4f19c680c71c737e761328e04b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6985b4a110323bea66ca938532a63a4f936a422f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6985b4a110323bea66ca938532a63a4f936a422f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6985b4a110323bea66ca938532a63a4f936a422f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6985b4a110323bea66ca938532a63a4f936a422f/comments", "author": null, "committer": null, "parents": [{"sha": "b1b0c7e63d236511d08212882d142018253962cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b0c7e63d236511d08212882d142018253962cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b0c7e63d236511d08212882d142018253962cf"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "55b1cf94b8dd9fa5b4cdf612ccd65b7981d22fab", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6985b4a110323bea66ca938532a63a4f936a422f", "patch": "@@ -1,3 +1,11 @@\n+2011-02-06  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* gfortran.texi (Thread-safety): New section.\n+\t* intrinsic.texi (EXECUTE_COMMAND_LINE): Mention thread-safety.\n+\t(GETENV): Likewise.\n+\t(GET_ENVIRONMENT_VARIABLE): Likewise.\n+\t(SYSTEM): Likewise.\n+\n 2011-02-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/47592"}, {"sha": "54f245755a77a54c6fa12e51f0bad00f38e2fd65", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=6985b4a110323bea66ca938532a63a4f936a422f", "patch": "@@ -1157,6 +1157,36 @@ representation of @code{LOGICAL} variables in GNU Fortran is identical\n to C99 _Bool, except for a possible difference in storage size\n depending on the kind.\n \n+\n+@node Thread-safety of the runtime library\n+@section Thread-safety of the runtime library\n+@cindex thread-safety, threads\n+\n+GNU Fortran can be used in programs with multiple threads, e.g. by\n+using OpenMP, by calling OS thread handling functions via the\n+@code{ISO_C_BINDING} facility, or by GNU Fortran compiled library code\n+being called from a multi-threaded program.\n+\n+The GNU Fortran runtime library, (@var{libgfortran}), supports being\n+called concurrently from multiple threads with the following\n+exceptions. \n+\n+During library initialization, the C @code{getenv()} function is used,\n+which need not be thread-safe.  Similarly, the @code{getenv()}\n+function is used to implement the @code{GET_ENVIRONMENT_VARIABLE} and\n+@code{GETENV} intrinsics.  It is the responsibility of the user to\n+ensure that the environment is not being updated concurrently when any\n+of these actions are taking place.\n+\n+The @code{EXECUTE_COMMAND_LINE} and @code{SYSTEM} intrinsics are\n+implemented with the @code{system()} function, which need not be\n+thread-safe.  It is the responsibility of the user to ensure that\n+@code{system()} is not called concurrently.\n+\n+Finally, for platforms not supporting thread-safe @code{POSIX}\n+functions, further functionality might not be thread-safe.  For\n+details, please consult the documentation for your operating system.\n+\n @c ---------------------------------------------------------------------\n @c Extensions\n @c ---------------------------------------------------------------------"}, {"sha": "ea5528fe111f79781b3f9316c2322354bfee97a0", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6985b4a110323bea66ca938532a63a4f936a422f/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=6985b4a110323bea66ca938532a63a4f936a422f", "patch": "@@ -4162,6 +4162,9 @@ the command, as returned by @code{system}.  @code{CMDSTAT} is set to zero\n if the command line was executed (whatever its exit status was).\n @code{CMDMSG} is assigned an error message if an error has occurred.\n \n+Note that the @code{system()} call need not be thread-safe. It is the\n+responsibility of the user to ensure that @code{system()} is not\n+called concurrently.\n \n @item @emph{Standard}:\n Fortran 2008 and later\n@@ -5452,11 +5455,15 @@ END PROGRAM\n @item @emph{Description}:\n Get the @var{VALUE} of the environmental variable @var{NAME}.\n \n-This intrinsic routine is provided for backwards compatibility with \n-GNU Fortran 77.  In new code, programmers should consider the use of \n+This intrinsic routine is provided for backwards compatibility with\n+GNU Fortran 77.  In new code, programmers should consider the use of\n the @ref{GET_ENVIRONMENT_VARIABLE} intrinsic defined by the Fortran\n 2003 standard.\n \n+Note that @code{GETENV} need not be thread-safe. It is the\n+responsibility of the user to ensure that the environment is not being\n+updated concurrently with a call to the @code{GETENV} intrinsic.\n+\n @item @emph{Standard}:\n GNU extension\n \n@@ -5501,6 +5508,11 @@ END PROGRAM\n @item @emph{Description}:\n Get the @var{VALUE} of the environmental variable @var{NAME}.\n \n+Note that @code{GET_ENVIRONMENT_VARIABLE} need not be thread-safe. It\n+is the responsibility of the user to ensure that the environment is\n+not being updated concurrently with a call to the\n+@code{GET_ENVIRONMENT_VARIABLE} intrinsic.\n+\n @item @emph{Standard}:\n Fortran 2003 and later\n \n@@ -11779,6 +11791,10 @@ and environment-dependent.\n This intrinsic is provided in both subroutine and function forms;\n however, only one form can be used in any given program unit.\n \n+Note that the @code{system()} call need not be thread-safe. It is the\n+responsibility of the user to ensure that @code{system()} is not\n+called concurrently.\n+\n @item @emph{Standard}:\n GNU extension\n "}]}