{"sha": "ba89fcb67207e6d364910572ab98ba165f5ad7dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4OWZjYjY3MjA3ZTZkMzY0OTEwNTcyYWI5OGJhMTY1ZjVhZDdkZA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2011-11-07T09:03:20Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2011-11-07T09:03:20Z"}, "message": "vms.h (TARGET_OBJECT_SUFFIX, [...]): Move to config/vms/vms.h\n\n2011-11-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/alpha/vms.h (TARGET_OBJECT_SUFFIX,\n\tTARGET_EXECUTABLE_SUFFIX, TARGET_OS_CPP_BUILTINS,\n\tTARGET_ABI_OPEN_VMS, LONG_TYPE_SIZE, ADA_LONG_TYPE_SIZE,\n\tPOINTER_SIZE, POINTERS_EXTEND_UNSIGNED): Move to config/vms/vms.h\n\t(SUBTARGET_OS_CPP_BUILTINS): Define.\n\t(TARGET_DEFAULT): Tune according to POINTER_SIZE.\n\t(MASK_RETURN_ADDR): Define in 64 bit mode.\n\t* config/ia64/vms.h: Likewise.\n\t* config/vms/vms.h: New file.\n\t* config/vms/vms64.h: New file.\n\t* config/alpha/vms64.h: Removed.\n\t* config/ia64/vms64.h: Removed.\n\t* config.gcc (alpha64-dec-*vms*, alpha*-dec-*vms*, ia64-hp-*vms*):\n\tAdjust for above change.\n\nFrom-SVN: r181078", "tree": {"sha": "e1a1f0240ec4bca20b40b0b1802800697cb75842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a1f0240ec4bca20b40b0b1802800697cb75842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba89fcb67207e6d364910572ab98ba165f5ad7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89fcb67207e6d364910572ab98ba165f5ad7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba89fcb67207e6d364910572ab98ba165f5ad7dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89fcb67207e6d364910572ab98ba165f5ad7dd/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95"}], "stats": {"total": 225, "additions": 106, "deletions": 119}, "files": [{"sha": "632528b4629ab3533deb9b97c25082a57a55f6c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -1,4 +1,21 @@\n-2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+2011-11-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/alpha/vms.h (TARGET_OBJECT_SUFFIX,\n+\tTARGET_EXECUTABLE_SUFFIX, TARGET_OS_CPP_BUILTINS,\n+\tTARGET_ABI_OPEN_VMS, LONG_TYPE_SIZE, ADA_LONG_TYPE_SIZE,\n+\tPOINTER_SIZE, POINTERS_EXTEND_UNSIGNED): Move to config/vms/vms.h\n+\t(SUBTARGET_OS_CPP_BUILTINS): Define.\n+\t(TARGET_DEFAULT): Tune according to POINTER_SIZE.\n+\t(MASK_RETURN_ADDR): Define in 64 bit mode.\n+\t* config/ia64/vms.h: Likewise.\n+\t* config/vms/vms.h: New file.\n+\t* config/vms/vms64.h: New file.\n+\t* config/alpha/vms64.h: Removed.\n+\t* config/ia64/vms64.h: Removed.\n+\t* config.gcc (alpha64-dec-*vms*, alpha*-dec-*vms*, ia64-hp-*vms*):\n+\tAdjust for above change.\n+\n+ 2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n \n \tPR rtl-optimization/47698\n \t* ifconv.c (noce_operand_ok): prevent CMOV generation"}, {"sha": "ce97c89e948a7a0bfd0a05f607e4bef0ccc12956", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -790,12 +790,12 @@ alpha*-dec-osf5.1*)\n \tesac\n \t;;\n alpha64-dec-*vms*)\n-\ttm_file=\"${tm_file} alpha/vms.h alpha/vms64.h\"\n+\ttm_file=\"${tm_file} vms/vms.h vms/vms64.h alpha/vms.h\"\n \txm_file=\"alpha/xm-vms.h vms/xm-vms64.h\"\n \ttmake_file=\"${tmake_file} vms/t-vms64 alpha/t-vms\"\n \t;;\n alpha*-dec-*vms*)\n-\ttm_file=\"${tm_file} alpha/vms.h\"\n+\ttm_file=\"${tm_file} vms/vms.h alpha/vms.h\"\n \txm_file=\"alpha/xm-vms.h\"\n \ttmake_file=\"${tmake_file} alpha/t-vms\"\n \t;;\n@@ -1528,7 +1528,7 @@ ia64*-*-hpux*)\n \tesac\n \t;;\n ia64-hp-*vms*)\n-\ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h ia64/vms.h ia64/vms64.h\"\n+\ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h vms/vms.h vms/vms64.h ia64/vms.h\"\n \txm_file=\"vms/xm-vms.h vms/xm-vms64.h\"\n \ttmake_file=\"${tmake_file} vms/t-vms64 ia64/t-ia64\"\n \ttarget_cpu_default=\"0\""}, {"sha": "32794c80368dd9327fdcca4dc3e43a860dc0fafd", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -19,9 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_OBJECT_SUFFIX \".obj\"\n-#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n-\n /* Alpha/VMS object format is not really Elf, but this makes compiling\n    crtstuff.c and dealing with shared library initialization much easier.  */\n #define OBJECT_FORMAT_ELF\n@@ -33,37 +30,26 @@ along with GCC; see the file COPYING3.  If not see\n \n #define NO_EXTERNAL_INDIRECT_ADDRESS\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+#define SUBTARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\\n-\tbuiltin_define_std (\"vms\");\t\t\\\n-\tbuiltin_define_std (\"VMS\");\t\t\\\n-\tbuiltin_define (\"__ALPHA\");\t\t\\\n-\tbuiltin_assert (\"system=vms\");\t\t\\\n-\tif (TARGET_FLOAT_VAX)\t\t\t\\\n-\t  builtin_define (\"__G_FLOAT\");\t\t\\\n-\telse\t\t\t\t\t\\\n-\t  builtin_define (\"__IEEE_FLOAT\");\t\\\n+      builtin_define (\"__ALPHA\");\t\t\\\n+      if (TARGET_FLOAT_VAX)\t\t\t\\\n+        builtin_define (\"__G_FLOAT\");\t\t\\\n+      else\t\t\t\t\t\\\n+        builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPREGS|MASK_GAS)\n-#undef TARGET_ABI_OPEN_VMS\n-#define TARGET_ABI_OPEN_VMS 1\n+#if POINTER_SIZE == 64\n+#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS | MASK_MALLOC64)\n+#else\n+#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n+#endif\n \n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n \n #undef PCC_STATIC_STRUCT_RETURN\n \n-/* \"long\" is 32 bits, but 64 bits for Ada.  */\n-#undef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE 32\n-#define ADA_LONG_TYPE_SIZE 64\n-\n-/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n-#undef POINTER_SIZE\n-#define POINTER_SIZE 32\n-#define POINTERS_EXTEND_UNSIGNED 0\n-\n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n \n /* The maximum alignment 'malloc' honors.  */\n@@ -170,6 +156,12 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n+#if POINTER_SIZE == 64\n+/* Eventhough pointers are 64bits, only 32bit ever remain significant in code\n+   addresses.  */\n+#define MASK_RETURN_ADDR (GEN_INT (0xffffffff))\n+#endif\n+\n #undef  ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE, NAME)                            \\\n    do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME);  \\"}, {"sha": "495d3c6167dd5f2cfb888f06d1969c1e5b4f2f41", "filename": "gcc/config/alpha/vms64.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Falpha%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Falpha%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms64.h?ref=f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "patch": "@@ -1,51 +0,0 @@\n-/* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 2001, 2007, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()                \\\n-    do {                                        \\\n-        builtin_define_std (\"vms\");             \\\n-        builtin_define_std (\"VMS\");             \\\n-        builtin_define (\"__ALPHA\");             \\\n-        builtin_assert (\"system=vms\");          \\\n-        builtin_define (\"__IEEE_FLOAT\");        \\\n-        builtin_define (\"__LONG_POINTERS=1\");   \\\n-    } while (0)\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-  { \"malloc64\",    MASK_MALLOC64,     \"Malloc data into P2 space\" },\n-\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS | MASK_MALLOC64)\n-\n-#undef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE 64\n-\n-#undef POINTER_SIZE\n-#define POINTER_SIZE 64\n-\n-/* Eventhough pointers are 64bits, only 32bit ever remain significant in code\n-   addresses.  */\n-#define MASK_RETURN_ADDR (GEN_INT (0xffffffff))\n-\n-/* Defaults to \"long int\" */\n-#undef SIZE_TYPE\n-#undef PTRDIFF_TYPE"}, {"sha": "75ea4ad430e55059f9a816dc17aa7755f0ca39a0", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -18,42 +18,24 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_OBJECT_SUFFIX \".obj\"\n-#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n-\n #define OBJECT_FORMAT_ELF\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+#define SUBTARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\\n-\tbuiltin_define_std (\"vms\");\t\t\\\n-\tbuiltin_define_std (\"VMS\");\t\t\\\n \tbuiltin_define (\"__IA64\");\t\t\\\n-\tbuiltin_assert (\"system=vms\");\t\t\\\n \tbuiltin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-/* By default, allow $ to be part of an identifier.  */\n-#define DOLLARS_IN_IDENTIFIERS 2\n-\n-#undef TARGET_ABI_OPEN_VMS\n-#define TARGET_ABI_OPEN_VMS 1\n-\n /* Need .debug_line info generated from gcc and gas.  */\n #undef TARGET_DEFAULT\n+#if POINTER_SIZE == 64\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_MALLOC64)\n+#else\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)\n+#endif\n \n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n \n-/* \"long\" is 32 bits, but 64 bits for Ada.  */\n-#undef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE 32\n-#define ADA_LONG_TYPE_SIZE 64\n-\n-/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n-#undef POINTER_SIZE\n-#define POINTER_SIZE 32\n-#define POINTERS_EXTEND_UNSIGNED 0\n-\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n "}, {"sha": "a69c7c7d8b8dec69cc803d1f2991bdb9ee2f8484", "filename": "gcc/config/vms/vms.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -0,0 +1,57 @@\n+/* Definitions of target machine GNU compiler. VMS common version.\n+   Copyright (C) 2003-2009,2011 Free Software Foundation, Inc.\n+   Contributed by Douglas B Rupp (rupp@gnat.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define TARGET_OBJECT_SUFFIX \".obj\"\n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+\n+#define TARGET_OS_CPP_BUILTINS()                     \\\n+  do {                                               \\\n+    builtin_define_std (\"vms\");                      \\\n+    builtin_define_std (\"VMS\");                      \\\n+    builtin_assert (\"system=vms\");                   \\\n+    SUBTARGET_OS_CPP_BUILTINS();                     \\\n+    if (POINTER_SIZE == 64)                          \\\n+      {                                              \\\n+        builtin_define (\"__LONG_POINTERS=1\");        \\\n+        builtin_define (\"__int64=long long\");        \\\n+      }                                              \\\n+  } while (0)\n+\n+/* By default, allow $ to be part of an identifier.  */\n+#define DOLLARS_IN_IDENTIFIERS 2\n+\n+#undef TARGET_ABI_OPEN_VMS\n+#define TARGET_ABI_OPEN_VMS 1\n+\n+/* \"long\" is 32 bits, but 64 bits for Ada.  */\n+#undef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE 32\n+#define ADA_LONG_TYPE_SIZE 64\n+\n+/* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n+#undef POINTER_SIZE\n+#define POINTER_SIZE 32\n+#define POINTERS_EXTEND_UNSIGNED 0\n+\n+/* Always 32 bits.  */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\""}, {"sha": "24249ce9b3f340aa1cfcfab5636c9875f08c5030", "filename": "gcc/config/vms/vms64.h", "status": "renamed", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fvms%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89fcb67207e6d364910572ab98ba165f5ad7dd/gcc%2Fconfig%2Fvms%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms64.h?ref=ba89fcb67207e6d364910572ab98ba165f5ad7dd", "patch": "@@ -1,6 +1,6 @@\n-/* Definitions of target machine GNU compiler. 64bit IA64-VMS version.\n-   Copyright (C) 2004-2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B Rupp (rupp@gnat.com).\n+/* Output variables, constants and external declarations, for GNU compiler.\n+   Copyright (C) 2001, 2007, 2009 Free Software Foundation, Inc.\n+   Contributed by Douglas Rupp (rupp@gnat.com).\n \n This file is part of GCC.\n \n@@ -18,22 +18,12 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-    do {\t\t\t\t\t\\\n-\tbuiltin_define_std (\"vms\");\t\t\\\n-\tbuiltin_define_std (\"VMS\");\t\t\\\n-\tbuiltin_define (\"__IA64\");\t\t\\\n-\tbuiltin_assert (\"system=vms\");\t\t\\\n-\tbuiltin_define (\"__IEEE_FLOAT\");\t\\\n-\tbuiltin_define (\"__LONG_POINTERS=1\");\t\\\n-    } while (0)\n-\n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 64\n \n #undef POINTER_SIZE\n #define POINTER_SIZE 64\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_MALLOC64)\n+/* Defaults to \"long int\" */\n+#undef SIZE_TYPE\n+#undef PTRDIFF_TYPE", "previous_filename": "gcc/config/ia64/vms64.h"}]}