{"sha": "9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NmU2OTIwZGVjOWFhMjNhZGJkZDdmMGMyNjQ4MDRjN2ZlNmZkZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-01-21T18:10:03Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-01-21T18:10:03Z"}, "message": "Fix PR66178, ICE due to misexpansion of constant expressions involving labels.\n\n\tPR middle-end/66178\n\t* expr.c (expand_expr_real_2) [PLUS_EXPR, MINUS_EXPR]: Don't\n\tdrop EXPAND_INITIALIZER.\n\t* rtl.h (contains_symbolic_reference_p): Declare.\n\t* rtlanal.c (contains_symbolic_reference_p): New function.\n\t* simplify-rtx.c (simplify_binary_operation_1): Don't turn\n\ta subtraction into a NOT if symbolic constants are involved.\n\ntestsuite/\n\tPR middle-end/66178\n\tgcc.dg/torture/pr66178.c: New test.\n\nFrom-SVN: r232689", "tree": {"sha": "66b303926820db0d7a4362846c12773014ef8d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b303926820db0d7a4362846c12773014ef8d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/comments", "author": null, "committer": null, "parents": [{"sha": "a71c0334f783c44a146b5003a09847571e71f366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71c0334f783c44a146b5003a09847571e71f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71c0334f783c44a146b5003a09847571e71f366"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "124708bb3e562915f0c7fa6eb3e9f03d1adda477", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -1,3 +1,13 @@\n+2016-01-21  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR middle-end/66178\n+\t* expr.c (expand_expr_real_2) [PLUS_EXPR, MINUS_EXPR]: Don't\n+\tdrop EXPAND_INITIALIZER.\n+\t* rtl.h (contains_symbolic_reference_p): Declare.\n+\t* rtlanal.c (contains_symbolic_reference_p): New function.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Don't turn\n+\ta subtraction into a NOT if symbolic constants are involved.\n+\n 2016-01-21  Anton Blanchard  <anton@samba.org>\n \t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "0ce5936d3cf1f9f8343fb7fdbfb21e3131dcd080", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -8381,11 +8381,11 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t if it's all in the wrong mode to form part of an address.\n \t And force_operand won't know whether to sign-extend or\n \t zero-extend.  */\n-      if ((modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n-\t  || mode != ptr_mode)\n+      if (modifier != EXPAND_INITIALIZER\n+\t  && (modifier != EXPAND_SUM || mode != ptr_mode))\n \t{\n \t  expand_operands (treeop0, treeop1,\n-\t\t\t   subtarget, &op0, &op1, EXPAND_NORMAL);\n+\t\t\t   subtarget, &op0, &op1, modifier);\n \t  if (op0 == const0_rtx)\n \t    return op1;\n \t  if (op1 == const0_rtx)\n@@ -8424,8 +8424,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t if it's all in the wrong mode to form part of an address.\n \t And force_operand won't know whether to sign-extend or\n \t zero-extend.  */\n-      if ((modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n-\t  || mode != ptr_mode)\n+      if (modifier != EXPAND_INITIALIZER\n+\t  && (modifier != EXPAND_SUM || mode != ptr_mode))\n \tgoto binop;\n \n       expand_operands (treeop0, treeop1,"}, {"sha": "2f5be5f010a6fc2830a0920576a83a8a2719087d", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -2931,6 +2931,7 @@ extern void set_insn_deleted (rtx);\n \n extern rtx single_set_2 (const rtx_insn *, const_rtx);\n extern bool contains_symbol_ref_p (const_rtx);\n+extern bool contains_symbolic_reference_p (const_rtx);\n \n /* Handle the cheap and common cases inline for performance.  */\n "}, {"sha": "71dfd33e9e390fa610fe657b919e7c27e50dcfd0", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -6243,6 +6243,19 @@ contains_symbol_ref_p (const_rtx x)\n   return false;\n }\n \n+/* Return true if RTL X contains a SYMBOL_REF or LABEL_REF.  */\n+\n+bool\n+contains_symbolic_reference_p (const_rtx x)\n+{\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, ALL)\n+    if (SYMBOL_REF_P (*iter) || GET_CODE (*iter) == LABEL_REF)\n+      return true;\n+\n+  return false;\n+}\n+\n /* Return true if X contains a thread-local symbol.  */\n \n bool"}, {"sha": "39049e577a65eea83aaafd36fefc352229841c93", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -2277,8 +2277,11 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n       if (!HONOR_SIGNED_ZEROS (mode) && trueop0 == CONST0_RTX (mode))\n \treturn simplify_gen_unary (NEG, mode, op1, mode);\n \n-      /* (-1 - a) is ~a.  */\n-      if (trueop0 == constm1_rtx)\n+      /* (-1 - a) is ~a, unless the expression avoids symbolic constants,\n+\t in which case not retaining additions and subtractions could\n+\t cause invalid assembly to be produced.  */\n+      if (trueop0 == constm1_rtx\n+\t  && !contains_symbolic_reference_p (op1))\n \treturn simplify_gen_unary (NOT, mode, op1, mode);\n \n       /* Subtracting 0 has no effect unless the mode has signed zeros"}, {"sha": "4ec1b309202f3990880e2f0f79bc4b96dd1d2432", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -1,3 +1,8 @@\n+2016-01-21  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR middle-end/66178\n+\t* gcc.dg/torture/pr66178.c: New test.\n+\n 2016-01-21  Anton Blanchard  <anton@samba.org>\n \t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "ebc626c6f5a8011f2bd62d3dc2c87e6e254c6a5b", "filename": "gcc/testsuite/gcc.dg/torture/pr66178.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66178.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9776e6920dec9aa23adbdd7f0c264804c7fe6fdf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66178.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66178.c?ref=9776e6920dec9aa23adbdd7f0c264804c7fe6fdf", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+int test(void)\n+{\n+    static int a =  ((char *)&&l1-(char *)&&l2)-1;\n+l1:\n+l2:\n+    return a;\n+}\n+\n+int test2(void)\n+{\n+    static int a =  ((char *)&&l2-(char *)&&l3)+((char *)&&l1-(char *)&&l2);\n+l1:\n+l2:\n+l3:\n+    return a;\n+}"}]}