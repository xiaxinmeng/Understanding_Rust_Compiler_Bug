{"sha": "64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlMGY1ZmYxZjNiZTFkZGNjYzJhNTBjYjM3MWI1ZGNlOTQxMjRiMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-20T15:48:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-20T15:48:42Z"}, "message": "re PR tree-optimization/45605 (Missed devirtualization)\n\n\n\tPR tree-optimize/45605\n\t* cgraph.h (const_value_known_p): Declare.\n\t(varpool_decide_const_value_known): Remove.\n\t* tree-ssa-ccp.c (get_base_constructor): Use it.\n\t* lto-cgraph.c (compute_ltrans_boundary): Likewise.\n\t* expr.c (string_constant): Likewise.\n\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Likewise.\n\t* ipa.c (ipa_discover_readonly_nonaddressable_var,\n\tfunction_and_variable_visibility): Likewise.\n\t* gimplify.c (gimplify_call_expr): Likewise.\n\t* gimple-fold.c (get_symbol_constant_value): Likewise.\n\t* varpool.c (varpool_decide_const_value_known): Replace by...\n\t(const_value_known_p): ... this one; handle other kinds of DECLs\n\ttoo and work for automatic vars.\n\t(varpool_finalize_decl): Use const_value_known_p.\n\n\t* lto.c (lto_promote_cross_file_statics): Use const_value_known_p.\n\n\t* g++.dg/tree-ssa/pr45605.C: New testcase.\n\nFrom-SVN: r164438", "tree": {"sha": "5dc2da773507a107b478346e98a80752893d9599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc2da773507a107b478346e98a80752893d9599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/comments", "author": null, "committer": null, "parents": [{"sha": "4ce9b2b20f34a82792df7e5dbb8c230e1cc29e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce9b2b20f34a82792df7e5dbb8c230e1cc29e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce9b2b20f34a82792df7e5dbb8c230e1cc29e45"}], "stats": {"total": 142, "additions": 109, "deletions": 33}, "files": [{"sha": "bb6ade73a1145e7f89f06c3173878f0d43aff3f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -1,3 +1,21 @@\n+2010-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/45605\n+\t* cgraph.h (const_value_known_p): Declare.\n+\t(varpool_decide_const_value_known): Remove.\n+\t* tree-ssa-ccp.c (get_base_constructor): Use it.\n+\t* lto-cgraph.c (compute_ltrans_boundary): Likewise.\n+\t* expr.c (string_constant): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Likewise.\n+\t* ipa.c (ipa_discover_readonly_nonaddressable_var,\n+\tfunction_and_variable_visibility): Likewise.\n+\t* gimplify.c (gimplify_call_expr): Likewise.\n+\t* gimple-fold.c (get_symbol_constant_value): Likewise.\n+\t* varpool.c (varpool_decide_const_value_known): Replace by...\n+\t(const_value_known_p): ... this one; handle other kinds of DECLs\n+\ttoo and work for automatic vars.\n+\t(varpool_finalize_decl): Use const_value_known_p.\n+\n 2010-09-20  Rafael Carre   <rafael.carre@gmail.com>\n \n \tPR target/45726"}, {"sha": "ec90894317ea7dbeb1fa3e1349b4c67a66c46ac2", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -728,7 +728,7 @@ void varpool_empty_needed_queue (void);\n bool varpool_extra_name_alias (tree, tree);\n const char * varpool_node_name (struct varpool_node *node);\n void varpool_reset_queue (void);\n-bool varpool_decide_const_value_known (struct varpool_node *node);\n+bool const_value_known_p (tree);\n \n /* Walk all reachable static variables.  */\n #define FOR_EACH_STATIC_VARIABLE(node) \\"}, {"sha": "e99eabe6306e85908faf45c229986a737925502f", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -9851,16 +9851,10 @@ string_constant (tree arg, tree *ptr_offset)\n       int length;\n \n       /* Variables initialized to string literals can be handled too.  */\n-      if (DECL_INITIAL (array) == NULL_TREE\n+      if (!const_value_known_p (array)\n \t  || TREE_CODE (DECL_INITIAL (array)) != STRING_CST)\n \treturn 0;\n \n-      /* If they are read-only, non-volatile and bind locally.  */\n-      if (! TREE_READONLY (array)\n-\t  || TREE_SIDE_EFFECTS (array)\n-\t  || ! targetm.binds_local_p (array))\n-\treturn 0;\n-\n       /* Avoid const char foo[4] = \"abcde\";  */\n       if (DECL_SIZE_UNIT (array) == NULL_TREE\n \t  || TREE_CODE (DECL_SIZE_UNIT (array)) != INTEGER_CST"}, {"sha": "8faadcc3752390ddbc44aa262739d9864e1a8c51", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -122,9 +122,7 @@ canonicalize_constructor_val (tree cval)\n tree\n get_symbol_constant_value (tree sym)\n {\n-  if ((TREE_STATIC (sym) || DECL_EXTERNAL (sym))\n-      && (TREE_CODE (sym) == CONST_DECL\n-\t  || varpool_get_node (sym)->const_value_known))\n+  if (const_value_known_p (sym))\n     {\n       tree val = DECL_INITIAL (sym);\n       if (val)"}, {"sha": "e5b011a6b79dc705c54a26f7ff06c07319c81985", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -2479,8 +2479,11 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n     {\n       /* The CALL_EXPR in *EXPR_P is already in GIMPLE form, so all we\n \t have to do is replicate it as a GIMPLE_CALL tuple.  */\n+      gimple_stmt_iterator gsi;\n       call = gimple_build_call_from_tree (*expr_p);\n       gimplify_seq_add_stmt (pre_p, call);\n+      gsi = gsi_last (*pre_p);\n+      fold_stmt (&gsi);\n       *expr_p = NULL_TREE;\n     }\n "}, {"sha": "5ff7c149e1581cf1b63b5b5348608038587afb12", "filename": "gcc/ipa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -570,7 +570,7 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \t    if (dump_file)\n \t      fprintf (dump_file, \" %s (read-only)\", varpool_node_name (vnode));\n \t    TREE_READONLY (vnode->decl) = 1;\n-\t    vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n+\t    vnode->const_value_known |= const_value_known_p (vnode->decl);\n \t  }\n       }\n   if (dump_file)\n@@ -779,7 +779,7 @@ function_and_variable_visibility (bool whole_program)\n \tDECL_COMMON (vnode->decl) = 0;\n      /* Even extern variables might have initializers known.\n \tSee, for example testsuite/g++.dg/opt/static3.C  */\n-     vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n+     vnode->const_value_known |= const_value_known_p (vnode->decl);\n     }\n   for (vnode = varpool_nodes_queue; vnode; vnode = vnode->next_needed)\n     {\n@@ -814,7 +814,7 @@ function_and_variable_visibility (bool whole_program)\n \t  gcc_assert (in_lto_p || whole_program || !TREE_PUBLIC (vnode->decl));\n \t  cgraph_make_decl_local (vnode->decl);\n \t}\n-     vnode->const_value_known |= varpool_decide_const_value_known (vnode);\n+     vnode->const_value_known |= const_value_known_p (vnode->decl);\n      gcc_assert (TREE_STATIC (vnode->decl));\n     }\n   pointer_set_destroy (aliased_nodes);"}, {"sha": "f009fccfe8c5f44dffb45a250911def805b888b4", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -813,8 +813,7 @@ compute_ltrans_boundary (struct lto_out_decl_state *state,\n       if (DECL_INITIAL (vnode->decl)\n \t  && !lto_varpool_encoder_encode_initializer_p (varpool_encoder,\n \t\t\t\t\t\t        vnode)\n-\t  && (DECL_IN_CONSTANT_POOL (vnode->decl)\n-\t      || vnode->const_value_known))\n+\t  && const_value_known_p (vnode->decl))\n \t{\n \t  lto_set_varpool_encoder_encode_initializer (varpool_encoder, vnode);\n \t  add_references (encoder, varpool_encoder, &vnode->ref_list);"}, {"sha": "6aab1af6426687d482ee38038a1a3c57c9a97e58", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/45605\n+\t* lto.c (lto_promote_cross_file_statics): Use const_value_known_p.\n+\n 2010-09-18  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* lto-elf.c (lto_obj_file_open): Also provide filename when"}, {"sha": "98a9387ce9d8da0292c6d95f9fc1c54d3ecedeac", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -1008,7 +1008,7 @@ lto_promote_cross_file_statics (void)\n \t from this partition that are not in this partition.\n \t This needs to be done recursively.  */\n       for (vnode = varpool_nodes; vnode; vnode = vnode->next)\n-\tif ((vnode->const_value_known || DECL_IN_CONSTANT_POOL (vnode->decl))\n+\tif (const_value_known_p (vnode->decl)\n \t    && DECL_INITIAL (vnode->decl)\n \t    && !varpool_node_in_set_p (vnode, vset)\n \t    && referenced_from_this_partition_p (&vnode->ref_list, set, vset)"}, {"sha": "3d98cd951a98998f81874edf3fa2df4faf9c60b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/45605\n+\t* g++.dg/tree-ssa/pr45605.C: New testcase.\n+\n 2010-09-20  Michael Matz  <matz@suse.de>\n \n \tPR testsuite/45706"}, {"sha": "b47f91a133aca08fae3fd732532925047d9d19f5", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr45605.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr45605.C?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-ssa\" } */\n+extern \"C\" void abort(); \n+bool destructor_called = false; \n+\n+struct B { \n+    virtual void Run(){}; \n+}; \n+\n+struct D : public B { \n+    virtual void Run() \n+      { \n+        struct O { \n+            ~O() { destructor_called = true; }; \n+        } o; \n+\n+        struct Raiser { \n+            Raiser()  throw( int ) {throw 1;}; \n+        } raiser; \n+      }; \n+}; \n+\n+int main() { \n+    try { \n+      D d; \n+      static_cast<B&>(d).Run(); \n+    } catch (...) {} \n+\n+    if (!destructor_called) \n+      abort (); \n+} \n+\n+\n+\n+/* We should devirtualize call to D::Run */\n+/* { dg-final { scan-tree-dump-times \"D::Run (\" 1 \"ssa\"} } */\n+/* { dg-final { cleanup-tree-dump \"ssa\" } } */"}, {"sha": "cf4321aa0389d211cde5eb7bd09cb00dcdfd4139", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -1342,9 +1342,7 @@ get_base_constructor (tree base, tree *offset)\n   switch (TREE_CODE (base))\n     {\n     case VAR_DECL:\n-      if (!TREE_READONLY (base)\n-\t  || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n-\t      && !varpool_get_node (base)->const_value_known))\n+      if (!const_value_known_p (base))\n \treturn NULL_TREE;\n \n       /* Fallthru.  */"}, {"sha": "187f53c7a66fb3995a4d01e2df42db996e7d91f3", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -162,10 +162,8 @@ constant_after_peeling (tree op, gimple stmt, struct loop *loop)\n       /* First make fast look if we see constant array inside.  */\n       while (handled_component_p (base))\n \tbase = TREE_OPERAND (base, 0);\n-      if ((DECL_P (base)\n-      \t   && TREE_STATIC (base)\n-\t   && TREE_READONLY (base)\n-\t   && varpool_get_node (base)->const_value_known)\n+      if ((DECL_P (base) == VAR_DECL\n+\t   && const_value_known_p (base))\n \t  || CONSTANT_CLASS_P (base))\n \t{\n \t  /* If so, see if we understand all the indices.  */"}, {"sha": "3ce3bac8ded4db98438ca222c1b839aa0617ab86", "filename": "gcc/varpool.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "patch": "@@ -359,21 +359,42 @@ decide_is_variable_needed (struct varpool_node *node, tree decl)\n   return true;\n }\n \n-/* Return if NODE is constant and its initial value is known (so we can do\n-   constant folding).  The decision depends on whole program decisions\n-   and can not be recomputed at ltrans stage for variables from other\n-   partitions.  For this reason the new value should be always combined\n-   with the previous knowledge.  */\n+/* Return if DECL is constant and its initial value is known (so we can do\n+   constant folding using DECL_INITIAL (decl)).  */\n \n bool\n-varpool_decide_const_value_known (struct varpool_node *node)\n+const_value_known_p (tree decl)\n {\n-  tree decl = node->decl;\n+  struct varpool_node *vnode;\n+\n+  if (TREE_CODE (decl) == PARM_DECL\n+      || TREE_CODE (decl) == RESULT_DECL)\n+    return false;\n+\n+  if (TREE_CODE (decl) == CONST_DECL\n+      || DECL_IN_CONSTANT_POOL (decl))\n+    return true;\n \n-  gcc_assert (TREE_STATIC (decl) || DECL_EXTERNAL (decl));\n   gcc_assert (TREE_CODE (decl) == VAR_DECL);\n+\n   if (!TREE_READONLY (decl))\n     return false;\n+\n+  /* Gimplifier takes away constructors of local vars  */\n+  if (!TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n+    return DECL_INITIAL (decl) != NULL;\n+\n+  gcc_assert (TREE_STATIC (decl) || DECL_EXTERNAL (decl));\n+\n+  /* In WHOPR mode we can put variable into one partition\n+     and make it external in the other partition.  In this\n+     case we still know the value, but it can't be determined\n+     from DECL flags.  For this reason we keep const_value_known\n+     flag in varpool nodes.  */\n+  if ((vnode = varpool_get_node (decl))\n+      && vnode->const_value_known)\n+    return true;\n+\n   /* Variables declared 'const' without an initializer\n      have zero as the initializer if they may not be\n      overridden at link or run time.  */\n@@ -423,7 +444,7 @@ varpool_finalize_decl (tree decl)\n      there.  */\n   else if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n     varpool_mark_needed_node (node);\n-  node->const_value_known |= varpool_decide_const_value_known (node);\n+  node->const_value_known |= const_value_known_p (node->decl);\n   if (cgraph_global_info_ready)\n     varpool_assemble_pending_decls ();\n }"}]}