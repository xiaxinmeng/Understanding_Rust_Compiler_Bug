{"sha": "b33b2678342c655ff8ddb9fab379b26f656adc03", "node_id": "C_kwDOANBUbNoAKGIzM2IyNjc4MzQyYzY1NWZmOGRkYjlmYWIzNzliMjZmNjU2YWRjMDM", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2021-11-05T15:05:15Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2021-11-05T15:36:32Z"}, "message": "AArch64: Fix PR103085\n\nThe stack protector implementation hides symbols in a const unspec, which means\nmovdi/movsi patterns must always support const on symbol operands and\nexplicitly strip away the unspec. Do this for the recently added GOT\nalternatives. Add a test to ensure stack-protector tests GOT accesses as well.\n\n2021-11-05  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\tPR target/103085\n\t* config/aarch64/aarch64.c (aarch64_mov_operand_p): Strip the salt\n\tfirst.\n\t* config/aarch64/constraints.md: Support const in Usw.\n\ngcc/testsuite/\n\tPR target/103085\n\t* gcc.target/aarch64/pr103085.c: New test", "tree": {"sha": "d6333e2dec4ddb709119e844aba71fa3502fc255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6333e2dec4ddb709119e844aba71fa3502fc255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b33b2678342c655ff8ddb9fab379b26f656adc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33b2678342c655ff8ddb9fab379b26f656adc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33b2678342c655ff8ddb9fab379b26f656adc03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33b2678342c655ff8ddb9fab379b26f656adc03/comments", "author": null, "committer": null, "parents": [{"sha": "a505e1fae4378254275ec292bd5299a16357de90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a505e1fae4378254275ec292bd5299a16357de90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a505e1fae4378254275ec292bd5299a16357de90"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "fdf05505846721b02059df494d6395ae9423a8ef", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b33b2678342c655ff8ddb9fab379b26f656adc03", "patch": "@@ -20379,12 +20379,14 @@ aarch64_mov_operand_p (rtx x, machine_mode mode)\n       return aarch64_simd_valid_immediate (x, NULL);\n     }\n \n+  /* Remove UNSPEC_SALT_ADDR before checking symbol reference.  */\n+  x = strip_salt (x);\n+\n   /* GOT accesses are valid moves.  */\n   if (SYMBOL_REF_P (x)\n       && aarch64_classify_symbolic_expression (x) == SYMBOL_SMALL_GOT_4G)\n     return true;\n \n-  x = strip_salt (x);\n   if (SYMBOL_REF_P (x) && mode == DImode && CONSTANT_ADDRESS_P (x))\n     return true;\n "}, {"sha": "b197ec26060ac086ed7701448a1f504f9ebb91b7", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=b33b2678342c655ff8ddb9fab379b26f656adc03", "patch": "@@ -152,10 +152,11 @@\n        (match_test \"aarch64_symbolic_address_p (op)\")\n        (match_test \"aarch64_mov_operand_p (op, GET_MODE (op))\")))\n \n+;; const is needed here to support UNSPEC_SALT_ADDR.\n (define_constraint \"Usw\"\n   \"@internal\n    A constraint that matches a small GOT access.\"\n-  (and (match_code \"symbol_ref\")\n+  (and (match_code \"const,symbol_ref\")\n        (match_test \"aarch64_classify_symbolic_expression (op)\n \t\t     == SYMBOL_SMALL_GOT_4G\")))\n "}, {"sha": "dbc9c15b71f224b3c7dec0cca5655a31adc207f6", "filename": "gcc/testsuite/gcc.target/aarch64/pr103085.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103085.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b33b2678342c655ff8ddb9fab379b26f656adc03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103085.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103085.c?ref=b33b2678342c655ff8ddb9fab379b26f656adc03", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-protector-strong -fPIC\" } */\n+\n+void g(int*);\n+void\n+f (int x)\n+{\n+  int arr[10];\n+  g (arr);\n+}\n+"}]}