{"sha": "f4eae6450e46224454ce067ac43bd7e9f66fc18b", "node_id": "C_kwDOANBUbNoAKGY0ZWFlNjQ1MGU0NjIyNDQ1NGNlMDY3YWM0M2JkN2U5ZjY2ZmMxOGI", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-11-17T08:16:02Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-11-23T08:31:59Z"}, "message": "rs6000: Optimize code generation of vec_reve [PR100868]\n\ngcc/\n\tPR target/100868\n\t* config/rs6000/altivec.md (altivec_vreve<mode>2 for VEC_K): Use\n\txxbrq for v16qi, xxbrq + xxbrh for v8hi and xxbrq + xxbrw for v4si\n\tor v4sf when p9_vector is set.\n\t(altivec_vreve<mode>2 for VEC_64): Defined. Implemented by xxswapd.\n\ngcc/testsuite/\n\tPR target/100868\n\t* gcc.target/powerpc/vec_reve_1.c: New test.\n\t* gcc.target/powerpc/vec_reve_2.c: Likewise.", "tree": {"sha": "5c4790b7651c13829bc2a245740e95589162cfad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c4790b7651c13829bc2a245740e95589162cfad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4eae6450e46224454ce067ac43bd7e9f66fc18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4eae6450e46224454ce067ac43bd7e9f66fc18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4eae6450e46224454ce067ac43bd7e9f66fc18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4eae6450e46224454ce067ac43bd7e9f66fc18b/comments", "author": null, "committer": null, "parents": [{"sha": "1ddf11d3647f68e0c31016935f19d843d54030b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddf11d3647f68e0c31016935f19d843d54030b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddf11d3647f68e0c31016935f19d843d54030b4"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "ef4321123339e88646c66b71a12c866885923511", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f4eae6450e46224454ce067ac43bd7e9f66fc18b", "patch": "@@ -3984,12 +3984,43 @@\n   DONE;\n })\n \n+;; Vector reverse elements for V16QI V8HI V4SI V4SF\n (define_expand \"altivec_vreve<mode>2\"\n-  [(set (match_operand:VEC_A 0 \"register_operand\" \"=v\")\n-\t(unspec:VEC_A [(match_operand:VEC_A 1 \"register_operand\" \"v\")]\n+  [(set (match_operand:VEC_K 0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_K [(match_operand:VEC_K 1 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VREVEV))]\n   \"TARGET_ALTIVEC\"\n {\n+  if (TARGET_P9_VECTOR)\n+    {\n+      if (<MODE>mode == V16QImode)\n+\temit_insn (gen_p9_xxbrq_v16qi (operands[0], operands[1]));\n+      else if (<MODE>mode == V8HImode)\n+\t{\n+\t  rtx subreg1 = simplify_gen_subreg (V1TImode, operands[1],\n+\t\t\t\t\t     <MODE>mode, 0);\n+\t  rtx temp = gen_reg_rtx (V1TImode);\n+\t  emit_insn (gen_p9_xxbrq_v1ti (temp, subreg1));\n+\t  rtx subreg2 = simplify_gen_subreg (<MODE>mode, temp,\n+\t\t\t\t\t     V1TImode, 0);\n+\t  emit_insn (gen_p9_xxbrh_v8hi (operands[0], subreg2));\n+\t}\n+      else /* V4SI and V4SF.  */\n+\t{\n+\t  rtx subreg1 = simplify_gen_subreg (V1TImode, operands[1],\n+\t\t\t\t\t     <MODE>mode, 0);\n+\t  rtx temp = gen_reg_rtx (V1TImode);\n+\t  emit_insn (gen_p9_xxbrq_v1ti (temp, subreg1));\n+\t  rtx subreg2 = simplify_gen_subreg (<MODE>mode, temp,\n+\t\t\t\t\t     V1TImode, 0);\n+\t  if (<MODE>mode == V4SImode)\n+\t    emit_insn (gen_p9_xxbrw_v4si (operands[0], subreg2));\n+\t  else\n+\t    emit_insn (gen_p9_xxbrw_v4sf (operands[0], subreg2));\n+\t}\n+      DONE;\n+    }\n+\n   int i, j, size, num_elements;\n   rtvec v = rtvec_alloc (16);\n   rtx mask = gen_reg_rtx (V16QImode);\n@@ -4008,6 +4039,17 @@\n   DONE;\n })\n \n+;; Vector reverse elements for V2DI V2DF\n+(define_expand \"altivec_vreve<mode>2\"\n+  [(set (match_operand:VEC_64 0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_64 [(match_operand:VEC_64 1 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_VREVEV))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  emit_insn (gen_xxswapd_<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n ;; Vector SIMD PEM v2.06c defines LVLX, LVLXL, LVRX, LVRXL,\n ;; STVLX, STVLXL, STVVRX, STVRXL are available only on Cell.\n (define_insn \"altivec_lvlx\""}, {"sha": "120c318ddfa392dda78c85ab9eeba7cc86c9ec10", "filename": "gcc/testsuite/gcc.target/powerpc/vec_reve_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_1.c?ref=f4eae6450e46224454ce067ac43bd7e9f66fc18b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector double foo1 (vector double a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector long long foo2 (vector long long a)\n+{\n+   return vec_reve (a);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 2 } } */"}, {"sha": "966193951c354f5efb3aefb66a673e72ddc4172a", "filename": "gcc/testsuite/gcc.target/powerpc/vec_reve_2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4eae6450e46224454ce067ac43bd7e9f66fc18b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec_reve_2.c?ref=f4eae6450e46224454ce067ac43bd7e9f66fc18b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector int foo1 (vector int a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector float foo2 (vector float a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector short foo3 (vector short a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector char foo4 (vector char a)\n+{\n+   return vec_reve (a);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxbrq\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mxxbrw\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxxbrh\\M} 1 } } */"}]}