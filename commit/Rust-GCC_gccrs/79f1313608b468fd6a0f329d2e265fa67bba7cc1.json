{"sha": "79f1313608b468fd6a0f329d2e265fa67bba7cc1", "node_id": "C_kwDOANBUbNoAKDc5ZjEzMTM2MDhiNDY4ZmQ2YTBmMzI5ZDJlMjY1ZmE2N2JiYTdjYzE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-10-19T13:56:00Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T10:05:56Z"}, "message": "avr: sphinx: port gen-avr-mmcu to RST\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Add vpath default for .rst files.\n\t* config/avr/avr-devices.cc: For port RST.\n\t* config/avr/avr-mcus.def: Update path.\n\t* config/avr/gen-avr-mmcu-texi.cc: Moved to...\n\t* config/avr/gen-avr-mmcu-rst.cc: ...here.\n\t* config/avr/t-avr: Update to rst.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/avr-mmcu.rst: Re-generate.", "tree": {"sha": "8d65e6b877fcd15427066fadbda111d57beaeb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d65e6b877fcd15427066fadbda111d57beaeb8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79f1313608b468fd6a0f329d2e265fa67bba7cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f1313608b468fd6a0f329d2e265fa67bba7cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f1313608b468fd6a0f329d2e265fa67bba7cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f1313608b468fd6a0f329d2e265fa67bba7cc1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c8f5005bf87e4bd95b25fb31430eef7e58097e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c8f5005bf87e4bd95b25fb31430eef7e58097e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c8f5005bf87e4bd95b25fb31430eef7e58097e"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "059606c37d59cce91f2aa406bffc8ec0c77b3828", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -113,6 +113,13 @@ target_objdir := $(toplevel_builddir)/$(target_subdir)\n # Directory where sources are, from where we are.\n VPATH = @srcdir@\n \n+# We define a vpath for the sources of the .rst files here because they\n+# are split between multiple directories and we would rather use one implicit\n+# pattern rule for everything.\n+# This vpath could be extended within the Make-lang fragments.\n+\n+vpath %.rst $(gcc_docdir)\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "611b35f7a27c355dd4510e0b257d5e31ac191fac", "filename": "gcc/config/avr/avr-devices.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Favr-devices.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Favr-devices.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.cc?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -64,54 +64,54 @@ avr_arch_types[] =\n };\n \n const avr_arch_info_t\n-avr_texinfo[] =\n+avr_rst[] =\n {\n   { ARCH_AVR1,\n     \"This ISA is implemented by the minimal AVR core and supported \"\n     \"for assembler only.\" },\n   { ARCH_AVR2,\n-    \"``Classic'' devices with up to 8@tie{}KiB of program memory.\" },\n+    \"\\\"Classic\\\" devices with up to 8 |nbsp| KiB of program memory.\" },\n   { ARCH_AVR25,\n-    \"``Classic'' devices with up to 8@tie{}KiB of program memory and with \"\n-    \"the @code{MOVW} instruction.\" },\n+    \"\\\"Classic\\\" devices with up to 8 |nbsp| KiB of program memory and with \"\n+    \"the ``MOVW`` instruction.\" },\n   { ARCH_AVR3,\n-    \"``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n+    \"\\\"Classic\\\" devices with 16 |nbsp| KiB up to 64 |nbsp| KiB of \"\n     \"program memory.\" },\n   { ARCH_AVR31,\n-    \"``Classic'' devices with 128@tie{}KiB of program memory.\" },\n+    \"\\\"Classic\\\" devices with 128 |nbsp| KiB of program memory.\" },\n   { ARCH_AVR35,\n-    \"``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n-    \"program memory and with the @code{MOVW} instruction.\" },\n+    \"\\\"Classic\\\" devices with 16 |nbsp| KiB up to 64 |nbsp| KiB of \"\n+    \"program memory and with the ``MOVW`` instruction.\" },\n   { ARCH_AVR4,\n-    \"``Enhanced'' devices with up to 8@tie{}KiB of program memory.\" },\n+    \"\\\"Enhanced\\\" devices with up to 8 |nbsp| KiB of program memory.\" },\n   { ARCH_AVR5,\n-    \"``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n+    \"\\\"Enhanced\\\" devices with 16 |nbsp| KiB up to 64 |nbsp| KiB of \"\n     \"program memory.\" },\n   { ARCH_AVR51,\n-    \"``Enhanced'' devices with 128@tie{}KiB of program memory.\" },\n+    \"\\\"Enhanced\\\" devices with 128 |nbsp| KiB of program memory.\" },\n   { ARCH_AVR6,\n-    \"``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB \"\n+    \"\\\"Enhanced\\\" devices with 3-byte PC, i.e.: with more than 128 |nbsp| KiB \"\n     \"of program memory.\" },\n   { ARCH_AVRTINY,\n-    \"``TINY'' Tiny core devices with 512@tie{}B up to 4@tie{}KiB of \"\n+    \"\\\"TINY\\\" Tiny core devices with 512 |nbsp| B up to 4 |nbsp| KiB of \"\n     \"program memory.\" },\n   { ARCH_AVRXMEGA2,\n-    \"``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB \"\n+    \"\\\"XMEGA\\\" devices with more than 8 |nbsp| KiB and up to 64 |nbsp| KiB \"\n     \"of program memory.\" },\n   { ARCH_AVRXMEGA3,\n-    \"``XMEGA'' devices with up to 64@tie{}KiB of combined program memory \"\n+    \"\\\"XMEGA\\\" devices with up to 64 |nbsp| KiB of combined program memory \"\n     \"and RAM, and with program memory visible in the RAM address space.\" },\n   { ARCH_AVRXMEGA4,\n-    \"``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB \"\n+    \"\\\"XMEGA\\\" devices with more than 64 |nbsp| KiB and up to 128 |nbsp| KiB \"\n     \"of program memory.\" },\n   { ARCH_AVRXMEGA5,\n-    \"``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB \"\n-    \"of program memory and more than 64@tie{}KiB of RAM.\" },\n+    \"\\\"XMEGA\\\" devices with more than 64 |nbsp| KiB and up to 128 |nbsp| KiB \"\n+    \"of program memory and more than 64 |nbsp| KiB of RAM.\" },\n   { ARCH_AVRXMEGA6,\n-    \"``XMEGA'' devices with more than 128@tie{}KiB of program memory.\" },\n+    \"\\\"XMEGA\\\" devices with more than 128 |nbsp| KiB of program memory.\" },\n   { ARCH_AVRXMEGA7,\n-    \"``XMEGA'' devices with more than 128@tie{}KiB of program memory \"\n-    \"and more than 64@tie{}KiB of RAM.\" }\n+    \"\\\"XMEGA\\\" devices with more than 128 |nbsp| KiB of program memory \"\n+    \"and more than 64 |nbsp| KiB of RAM.\" }\n };\n \n const avr_mcu_t"}, {"sha": "26c38a5c7aaab4d93dac4aa0adf1efb964960d7f", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -23,7 +23,7 @@\n \n    This will regenerate / update the following source files:\n \n-   -  $(srcdir)/doc/avr-mmcu.texi\n+   -  $(srcdir)/doc/avr-mmcu.rst\n \n    After that, rebuild everything and check-in the new sources to the repo.\n    The device list below should be kept in sync with AVR-LibC."}, {"sha": "19b903c2760fb51924487c0716b24e4e5b40207b", "filename": "gcc/config/avr/gen-avr-mmcu-rst.cc", "status": "renamed", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-rst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-rst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-rst.cc?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -137,11 +137,11 @@ print_mcus (size_t n_mcus)\n     \n   qsort (mcus, n_mcus, sizeof (avr_mcu_t*), comparator);\n \n-  printf (\"@*@var{mcu}@tie{}=\");\n+  printf (\"  :samp:`{mcu}=`\");\n \n   for (i = 0; i < n_mcus; i++)\n     {\n-      printf (\" @code{%s}%s\", mcus[i]->name, i == n_mcus-1 ? \".\\n\\n\" : \",\");\n+      printf (\" ``%s``%s\", mcus[i]->name, i == n_mcus-1 ? \".\\n\\n\" : \",\");\n \n       if (i && !strcmp (mcus[i]->name, mcus[i-1]->name))\n \t{\n@@ -162,20 +162,18 @@ int main (void)\n   size_t i, n_mcus = 0;\n   const avr_mcu_t *mcu;\n \n-  printf (\"@c Copyright (C) 2012-2022 Free Software Foundation, Inc.\\n\");\n-  printf (\"@c This is part of the GCC manual.\\n\");\n-  printf (\"@c For copying conditions, see the file \"\n-\t  \"gcc/doc/include/fdl.texi.\\n\\n\");\n+  printf (\"..\\n\");\n+  printf (\"  Copyright 1988-2022 Free Software Foundation, Inc.\\n\");\n+  printf (\"  This is part of the GCC manual.\\n\");\n+  printf (\"  For copying conditions, see the copyright.rst file.\\n\\n\");\n \n-  printf (\"@c This file is generated automatically using\\n\");\n-  printf (\"@c gcc/config/avr/gen-avr-mmcu-texi.cc from:\\n\");\n-  printf (\"@c\t gcc/config/avr/avr-arch.h\\n\");\n-  printf (\"@c\t gcc/config/avr/avr-devices.cc\\n\");\n-  printf (\"@c\t gcc/config/avr/avr-mcus.def\\n\\n\");\n+  printf (\"  This file is generated automatically using\\n\");\n+  printf (\"  gcc/config/avr/gen-avr-mmcu-texi.cc from:\\n\");\n+  printf (\"    gcc/config/avr/avr-arch.h\\n\");\n+  printf (\"    gcc/config/avr/avr-devices.cc\\n\");\n+  printf (\"    gcc/config/avr/avr-mcus.def\\n\\n\");\n \n-  printf (\"@c Please do not edit manually.\\n\\n\");\n-\n-  printf (\"@table @code\\n\\n\");\n+  printf (\"  Please do not edit manually.\\n\\n\");\n \n   for (mcu = avr_mcu_types; mcu->name; mcu++)\n     {\n@@ -187,9 +185,9 @@ int main (void)\n \t  print_mcus (n_mcus);\n \t  n_mcus = 0;\n \n-\t  for (i = 0; i < ARRAY_SIZE (avr_texinfo); i++)\n-\t    if (arch_id == avr_texinfo[i].arch_id)\n-\t      printf (\"@item %s\\n%s\\n\", mcu->name, avr_texinfo[i].texinfo);\n+\t  for (i = 0; i < ARRAY_SIZE (avr_rst); i++)\n+\t    if (arch_id == avr_rst[i].arch_id)\n+\t      printf (\"``%s``\\n  %s\\n\\n\", mcu->name, avr_rst[i].texinfo);\n \t}\n       else if (arch_id == (enum avr_arch_id) mcu->arch_id)\n \t{\n@@ -198,7 +196,6 @@ int main (void)\n     }\n \n   print_mcus (n_mcus);\n-  printf (\"@end table\\n\");\n \n   return EXIT_SUCCESS;\n }", "previous_filename": "gcc/config/avr/gen-avr-mmcu-texi.cc"}, {"sha": "8ee3186293856f0448ffe85c46af711111dc582a", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -78,10 +78,10 @@ AVR_MCUS = $(srcdir)/config/avr/avr-mcus.def\n \n .PHONY: avr-mcus\n \n-avr-mcus: $(srcdir)/doc/avr-mmcu.texi ; @true\n+avr-mcus: $(srcdir)/doc/gcc/gcc-command-options/machine-dependent-options/avr-mmcu.rst ; @true\n \n # Make sure that native -mmcu= support is in sync with -mmcu= documentation.\n-gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.cc \\\n+gen-avr-mmcu-rst$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-rst.cc \\\n   $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.cc \\\n   $(srcdir)/config/avr/avr-arch.h\n \t$(CXX_FOR_BUILD) $(CXXFLAGS_FOR_BUILD) $< -o $@\n@@ -91,7 +91,7 @@ gen-avr-mmcu-specs$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-specs.cc \\\n   $(srcdir)/config/avr/avr-arch.h $(TM_H)\n \t$(CXX_FOR_BUILD) $(CXXFLAGS_FOR_BUILD) $< -o $@ $(INCLUDES)\n \n-$(srcdir)/doc/avr-mmcu.texi: gen-avr-mmcu-texi$(build_exeext)\n+$(srcdir)/doc/gcc/gcc-command-options/machine-dependent-options/avr-mmcu.rst: gen-avr-mmcu-rst$(build_exeext)\n \t$(RUN_GEN) ./$< > $@\n \n s-device-specs: gen-avr-mmcu-specs$(build_exeext)"}, {"sha": "120f919e3317d59292796aabff79740fd98e8a0a", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/avr-mmcu.rst", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f1313608b468fd6a0f329d2e265fa67bba7cc1/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst?ref=79f1313608b468fd6a0f329d2e265fa67bba7cc1", "patch": "@@ -94,4 +94,5 @@\n ``avr1``\n   This ISA is implemented by the minimal AVR core and supported for assembler only.\n \n-  :samp:`{mcu}=` ``attiny11``, ``attiny12``, ``attiny15``, ``attiny28``, ``at90s1200``.\n\\ No newline at end of file\n+  :samp:`{mcu}=` ``attiny11``, ``attiny12``, ``attiny15``, ``attiny28``, ``at90s1200``.\n+"}]}