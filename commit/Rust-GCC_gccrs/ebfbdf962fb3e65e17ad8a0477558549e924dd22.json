{"sha": "ebfbdf962fb3e65e17ad8a0477558549e924dd22", "node_id": "C_kwDOANBUbNoAKGViZmJkZjk2MmZiM2U2NWUxN2FkOGEwNDc3NTU4NTQ5ZTkyNGRkMjI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-28T10:08:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-28T10:08:44Z"}, "message": "Add -frust-cfg=value option for adding config options\n\nThis adds the initial support for config expansion on custom config values\nit need support for parsing options such as feature=test with apropriate\nerror handling withing Session::handle_cfg_option(const std::string&).\n\nThis also applies the mark_for_strip checks only on AST::Functions and\nwill need applied to the rest of the crate in #872.\n\nAddresses #889", "tree": {"sha": "ab049e20f1637ab091367922befeeafcc6d539d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab049e20f1637ab091367922befeeafcc6d539d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfbdf962fb3e65e17ad8a0477558549e924dd22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfbdf962fb3e65e17ad8a0477558549e924dd22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfbdf962fb3e65e17ad8a0477558549e924dd22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfbdf962fb3e65e17ad8a0477558549e924dd22/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc2b540800d25af1c70e90439e8a9077c7d07f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc2b540800d25af1c70e90439e8a9077c7d07f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc2b540800d25af1c70e90439e8a9077c7d07f8"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "b67016c007068b929704c6371c5a097f626f15ea", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -44,15 +44,6 @@ class ASTLoweringItem : public ASTLoweringBase\n   {\n     ASTLoweringItem resolver;\n     item->accept_vis (resolver);\n-\n-    // this is useful for debugging\n-    // if (resolver.translated == nullptr)\n-    //   {\n-    //     rust_fatal_error (item->get_locus (), \"failed to lower: %s\",\n-    //     \t\t  item->as_string ().c_str ());\n-    //     return nullptr;\n-    //   }\n-\n     return resolver.translated;\n   }\n \n@@ -419,6 +410,9 @@ class ASTLoweringItem : public ASTLoweringBase\n \n   void visit (AST::Function &function) override\n   {\n+    if (function.is_marked_for_strip ())\n+      return;\n+\n     std::vector<std::unique_ptr<HIR::WhereClauseItem>> where_clause_items;\n     for (auto &item : function.get_where_clause ().get_items ())\n       {"}, {"sha": "ddd2868f550fc55951727480f5b6003adbe37c59", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -59,6 +59,10 @@ Enum(frust_mangling) String(legacy) Value(0)\n EnumValue\n Enum(frust_mangling) String(v0) Value(1)\n \n+frust-cfg=\n+Rust Joined RejectNegative\n+-frust-cfg=<name>             Set a config expansion option\n+\n o\n Rust Joined Separate\n ; Documented in common.opt"}, {"sha": "200c5ff2268dd8c5982b95d8b15e38e6b241ab51", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -362,6 +362,9 @@ class ResolveItem : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n+    if (function.is_marked_for_strip ())\n+      return;\n+\n     NodeId scope_node_id = function.get_node_id ();\n     resolver->get_name_scope ().push (scope_node_id);\n     resolver->get_type_scope ().push (scope_node_id);"}, {"sha": "4993649d7bd28f305997172ee924e1fac103f36c", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -220,6 +220,9 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n+    if (function.is_marked_for_strip ())\n+      return;\n+\n     auto path\n       = prefix.append (ResolveFunctionItemToCanonicalPath::resolve (function));\n     resolver->get_name_scope ().insert ("}, {"sha": "c930f55792c09f6f4dc0a5029cc0e075b151c593", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -353,16 +353,19 @@ Session::handle_option (\n     case OPT_I:\n       // TODO: add search path\n       break;\n+\n     case OPT_L:\n       // TODO: add library link path or something\n       break;\n+\n     case OPT_frust_crate_:\n       // set the crate name\n       if (arg != nullptr)\n \tret = options.set_crate_name (arg);\n       else\n \tret = false;\n       break;\n+\n     case OPT_frust_dump_:\n       // enable dump and return whether this was successful\n       if (arg != nullptr)\n@@ -374,17 +377,31 @@ Session::handle_option (\n \t  ret = false;\n \t}\n       break;\n+\n     case OPT_frust_mangling_:\n       Compile::Mangler::set_mangling (flag_rust_mangling);\n-    // no option handling for -o\n+      break;\n+\n+    case OPT_frust_cfg_:\n+      ret = handle_cfg_option (std::string (arg));\n+      break;\n+\n     default:\n-      // return 1 to indicate option is valid\n       break;\n     }\n \n   return ret;\n }\n \n+bool\n+Session::handle_cfg_option (const std::string &value)\n+{\n+  // rustc doesn't seem to error on any duplicate key\n+  // TODO handle feature=bla and relevant error handling in parsing\n+  options.target_data.insert_key (value);\n+  return true;\n+}\n+\n /* Enables a certain dump depending on the name passed in. Returns true if name\n  * is valid, false otherwise. */\n bool"}, {"sha": "ea0523bef1b3f5fec6508743badf1d00b6d0ecfc", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -286,6 +286,9 @@ struct Session\n    * macros, maybe build test harness in future, AST validation, maybe create\n    * macro crate (if not rustdoc).*/\n   void expansion (AST::Crate &crate);\n+\n+  // handle cfg_option\n+  bool handle_cfg_option (const std::string &data);\n };\n } // namespace Rust\n "}, {"sha": "6984f04d1b921f65494c5e538cc1237a7e420b0d", "filename": "gcc/testsuite/rust/compile/cfg1.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -0,0 +1,31 @@\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[cfg(A)]\n+fn test() {\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+#[cfg(B)]\n+fn test() {\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() {\n+    test();\n+    // { dg-error \"Cannot find path .test. in this scope\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "d3c56295503f804f51b5cf231194a5fdf09cc859", "filename": "gcc/testsuite/rust/execute/torture/cfg1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbdf962fb3e65e17ad8a0477558549e924dd22/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg1.rs?ref=ebfbdf962fb3e65e17ad8a0477558549e924dd22", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[cfg(A)]\n+fn test() {\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+#[cfg(B)]\n+fn test() {\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    test();\n+    0\n+}"}]}