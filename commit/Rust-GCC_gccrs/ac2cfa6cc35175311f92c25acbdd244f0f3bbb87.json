{"sha": "ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyY2ZhNmNjMzUxNzUzMTFmOTJjMjVhY2JkZDI0NGYwZjNiYmI4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-29T08:39:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-29T08:39:45Z"}, "message": "Add a simulate_enum_decl langhook\n\nSimilarly to the simulate_builtin_function_decl patch, this one\nadds a hook for simulating an enum declaration in the source\nlanguage.  Again, the main SVE ACLE patch has tests for various\nerror conditions.\n\n2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* coretypes.h (string_int_pair): New typedef.\n\t* langhooks-def.h (LANG_HOOKS_SIMULATE_ENUM_DECL): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Include it.\n\t* langhooks.h (lang_hooks_for_types::simulate_enum_decl): New hook.\n\ngcc/c/\n\t* c-tree.h (c_simulate_enum_decl): Declare.\n\t* c-decl.c (c_simulate_enum_decl): New function.\n\t* c-objc-common.h (LANG_HOOKS_SIMULATE_ENUM_DECL): Define to the above.\n\ngcc/cp/\n\t* cp-objcp-common.h (cxx_simulate_enum_decl): Declare.\n\t(LANG_HOOKS_SIMULATE_ENUM_DECL): Define to the above.\n\t* decl.c (cxx_simulate_enum_decl): New function.\n\nFrom-SVN: r277555", "tree": {"sha": "c61b52f882b58f537f31ac567c953b78eeef6644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61b52f882b58f537f31ac567c953b78eeef6644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "740785381ec9944c861dcc29b420c96aa933f040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740785381ec9944c861dcc29b420c96aa933f040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740785381ec9944c861dcc29b420c96aa933f040"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "4bb1f91cb9aff5bb320d651b5bf569671c750f37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* coretypes.h (string_int_pair): New typedef.\n+\t* langhooks-def.h (LANG_HOOKS_SIMULATE_ENUM_DECL): Define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Include it.\n+\t* langhooks.h (lang_hooks_for_types::simulate_enum_decl): New hook.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* langhooks.h (lang_hooks::simulate_builtin_function_decl): New hook."}, {"sha": "b76dfc27164a16ec5ad4147dee4d7761be43fc55", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -1,3 +1,9 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-tree.h (c_simulate_enum_decl): Declare.\n+\t* c-decl.c (c_simulate_enum_decl): New function.\n+\t* c-objc-common.h (LANG_HOOKS_SIMULATE_ENUM_DECL): Define to the above.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-tree.h (c_simulate_builtin_function_decl): Declare."}, {"sha": "ae0ee3a9c9606a8009c2b60767c5227cd6671043", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -8907,6 +8907,36 @@ build_enumerator (location_t decl_loc, location_t loc,\n   return tree_cons (decl, value, NULL_TREE);\n }\n \n+/* Implement LANG_HOOKS_SIMULATE_ENUM_DECL.  */\n+\n+tree\n+c_simulate_enum_decl (location_t loc, const char *name,\n+\t\t      vec<string_int_pair> values)\n+{\n+  location_t saved_loc = input_location;\n+  input_location = loc;\n+\n+  struct c_enum_contents the_enum;\n+  tree enumtype = start_enum (loc, &the_enum, get_identifier (name));\n+\n+  tree value_chain = NULL_TREE;\n+  string_int_pair *value;\n+  unsigned int i;\n+  FOR_EACH_VEC_ELT (values, i, value)\n+    {\n+      tree decl = build_enumerator (loc, loc, &the_enum,\n+\t\t\t\t    get_identifier (value->first),\n+\t\t\t\t    build_int_cst (integer_type_node,\n+\t\t\t\t\t\t   value->second));\n+      TREE_CHAIN (decl) = value_chain;\n+      value_chain = decl;\n+    }\n+\n+  finish_enum (enumtype, nreverse (value_chain), NULL_TREE);\n+\n+  input_location = saved_loc;\n+  return enumtype;\n+}\n \f\n /* Create the FUNCTION_DECL for a function definition.\n    DECLSPECS, DECLARATOR and ATTRIBUTES are the parts of"}, {"sha": "c8739e0b8355551a4fbc7a50f5d809c050cb37fc", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -75,6 +75,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN c_dump_tree\n \n+#undef LANG_HOOKS_SIMULATE_ENUM_DECL\n+#define LANG_HOOKS_SIMULATE_ENUM_DECL c_simulate_enum_decl\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE"}, {"sha": "71cd77d49b1002876c3b954c28a1e570eaca84c0", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -563,6 +563,8 @@ extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n extern tree finish_struct (location_t, tree, tree, tree,\n \t\t\t   class c_struct_parse_info *);\n+extern tree c_simulate_enum_decl (location_t, const char *,\n+\t\t\t\t  vec<string_int_pair>);\n extern struct c_arg_info *build_arg_info (void);\n extern struct c_arg_info *get_parm_info (bool, tree);\n extern tree grokfield (location_t, struct c_declarator *,"}, {"sha": "a18aaa2963a1023a625b408933cd8fb9d094e218", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -341,6 +341,7 @@ namespace gcc {\n }\n \n typedef std::pair <tree, tree> tree_pair;\n+typedef std::pair <const char *, int> string_int_pair;\n \n /* Define a name->value mapping.  */\n template <typename ValueType>"}, {"sha": "c244438bca14493d9dc96a788cc56643790d48b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -1,3 +1,9 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cp-objcp-common.h (cxx_simulate_enum_decl): Declare.\n+\t(LANG_HOOKS_SIMULATE_ENUM_DECL): Define to the above.\n+\t* decl.c (cxx_simulate_enum_decl): New function.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cp-tree.h (cxx_simulate_builtin_function_decl): Declare."}, {"sha": "e5d34f18028c2bfba45dcb991c2b062360b69711", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -35,6 +35,8 @@ extern tree cp_get_global_decls ();\n extern tree cp_pushdecl (tree);\n extern void cp_register_dumps (gcc::dump_manager *);\n extern tree cxx_make_type_hook\t\t\t(tree_code);\n+extern tree cxx_simulate_enum_decl (location_t, const char *,\n+\t\t\t\t    vec<string_int_pair>);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n@@ -131,6 +133,8 @@ extern tree cxx_make_type_hook\t\t\t(tree_code);\n \n #undef LANG_HOOKS_MAKE_TYPE\n #define LANG_HOOKS_MAKE_TYPE cxx_make_type_hook\n+#undef LANG_HOOKS_SIMULATE_ENUM_DECL\n+#define LANG_HOOKS_SIMULATE_ENUM_DECL cxx_simulate_enum_decl\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE"}, {"sha": "95c84159d7aa1eedf8379d4431005e2243079e18", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -15433,6 +15433,40 @@ lookup_enumerator (tree enumtype, tree name)\n   return e? TREE_VALUE (e) : NULL_TREE;\n }\n \n+/* Implement LANG_HOOKS_SIMULATE_ENUM_DECL.  */\n+\n+tree\n+cxx_simulate_enum_decl (location_t loc, const char *name,\n+\t\t\tvec<string_int_pair> values)\n+{\n+  location_t saved_loc = input_location;\n+  input_location = loc;\n+\n+  tree enumtype = start_enum (get_identifier (name), NULL_TREE, NULL_TREE,\n+\t\t\t      NULL_TREE, false, NULL);\n+  if (!OPAQUE_ENUM_P (enumtype))\n+    {\n+      error_at (loc, \"multiple definition of %q#T\", enumtype);\n+      inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n+\t      \"previous definition here\");\n+      return enumtype;\n+    }\n+  SET_OPAQUE_ENUM_P (enumtype, false);\n+  DECL_SOURCE_LOCATION (TYPE_NAME (enumtype)) = loc;\n+\n+  string_int_pair *value;\n+  unsigned int i;\n+  FOR_EACH_VEC_ELT (values, i, value)\n+    build_enumerator (get_identifier (value->first),\n+\t\t      build_int_cst (integer_type_node, value->second),\n+\t\t      enumtype, NULL_TREE, loc);\n+\n+  finish_enum_value_list (enumtype);\n+  finish_enum (enumtype);\n+\n+  input_location = saved_loc;\n+  return enumtype;\n+}\n \f\n /* We're defining DECL.  Make sure that its type is OK.  */\n "}, {"sha": "54f80e51f8cc7bee61174a7c6d28623dfcfcd111", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -171,6 +171,7 @@ extern tree lhd_make_node (enum tree_code);\n extern tree lhd_unit_size_without_reusable_padding (tree);\n \n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n+#define LANG_HOOKS_SIMULATE_ENUM_DECL\tNULL\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_TYPE_FOR_SIZE\tlhd_type_for_size\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n@@ -204,6 +205,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n+  LANG_HOOKS_SIMULATE_ENUM_DECL, \\\n   LANG_HOOKS_CLASSIFY_RECORD, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\"}, {"sha": "e50162f9482fafd5f6da27c43fd238197fa67759", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2cfa6cc35175311f92c25acbdd244f0f3bbb87/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ac2cfa6cc35175311f92c25acbdd244f0f3bbb87", "patch": "@@ -64,6 +64,10 @@ struct lang_hooks_for_types\n      language-specific processing is required.  */\n   tree (*make_type) (enum tree_code);\n \n+  /* Make an enum type with the given name and values, associating\n+     them all with the given source location.  */\n+  tree (*simulate_enum_decl) (location_t, const char *, vec<string_int_pair>);\n+\n   /* Return what kind of RECORD_TYPE this is, mainly for purposes of\n      debug information.  If not defined, record types are assumed to\n      be structures.  */"}]}