{"sha": "a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "node_id": "C_kwDOANBUbNoAKGExNDczMWRkYjZlYzY3ZjIxYjUyOTNhZmZhM2IxZjgxNjlhNGJjOTI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-23T21:41:21Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-26T15:28:06Z"}, "message": "gccrs: Add mechanism use pattern information to improve type info\n\nWhen we have an untyped closure we assumed all parameters were inference\nvariables but we can use the pattern type to try and improve the type info\nso if we have a reference pattern it must be a reference to an inference\nvariables '&_'. This patch adds a new visitor to figure this out for\nuntyped closure parameters.\n\nNote this test case does fully type resolve into the gimple:\n\n    bool test::main::{{closure}}\n        (struct test::main::{{closure}} $closure, struct (& u8) args)\n    { ... }\n\nThough the Rustc version does fail type-resolution but we make some\nassumptions during comparison expressions here that they resolve to a bool\nthis will change when we implement the comparison lang items.\n\nFixes #2142\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-pattern.h: add missing get_mutability\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit):\n\tuse new ClosureParamInfer on untyped parameters\n\t* typecheck/rust-hir-type-check-pattern.cc (ClosureParamInfer::Resolve): interface\n\t(ClosureParamInfer::ClosureParamInfer): constructor\n\t(ClosureParamInfer::visit): visitors for each pattern\n\t* typecheck/rust-hir-type-check-pattern.h (class ClosureParamInfer): new visitor\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2142.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "ac3749088faf8a0fb6044c1000446b3ee9b06998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac3749088faf8a0fb6044c1000446b3ee9b06998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419e1cff1102eb89c2e4a22b6251cce382bcbe61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419e1cff1102eb89c2e4a22b6251cce382bcbe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419e1cff1102eb89c2e4a22b6251cce382bcbe61"}], "stats": {"total": 172, "additions": 159, "deletions": 13}, "files": [{"sha": "cb95f40d2d85116a0f3714e24d56b96ebf764f6f", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "patch": "@@ -462,6 +462,8 @@ class ReferencePattern : public Pattern\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n+  Mutability get_mutability () const { return mut; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRPatternVisitor &vis) override;\n "}, {"sha": "704ca2b9e5bf7f151f7ecf035811b3be0a31bf51", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "patch": "@@ -1471,25 +1471,20 @@ TypeCheckExpr::visit (HIR::ClosureExpr &expr)\n   std::vector<TyTy::TyVar> parameter_types;\n   for (auto &p : expr.get_params ())\n     {\n+      TyTy::BaseType *param_tyty = nullptr;\n       if (p.has_type_given ())\n \t{\n-\t  TyTy::BaseType *param_tyty\n-\t    = TypeCheckType::Resolve (p.get_type ().get ());\n-\t  TyTy::TyVar param_ty (param_tyty->get_ref ());\n-\t  parameter_types.push_back (param_ty);\n-\n-\t  TypeCheckPattern::Resolve (p.get_pattern ().get (),\n-\t\t\t\t     param_ty.get_tyty ());\n+\t  param_tyty = TypeCheckType::Resolve (p.get_type ().get ());\n \t}\n       else\n \t{\n-\t  TyTy::TyVar param_ty\n-\t    = TyTy::TyVar::get_implicit_infer_var (p.get_locus ());\n-\t  parameter_types.push_back (param_ty);\n-\n-\t  TypeCheckPattern::Resolve (p.get_pattern ().get (),\n-\t\t\t\t     param_ty.get_tyty ());\n+\t  param_tyty = ClosureParamInfer::Resolve (p.get_pattern ().get ());\n \t}\n+\n+      TyTy::TyVar param_ty (param_tyty->get_ref ());\n+      parameter_types.push_back (param_ty);\n+\n+      TypeCheckPattern::Resolve (p.get_pattern ().get (), param_ty.get_tyty ());\n     }\n \n   // we generate an implicit hirid for the closure args"}, {"sha": "466f0ae2223a3ad84af33ccd996366b4fe93e34a", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "patch": "@@ -447,5 +447,116 @@ TypeCheckPattern::visit (HIR::AltPattern &pattern)\n \t\t \"type checking alternate patterns not supported\");\n }\n \n+TyTy::BaseType *\n+ClosureParamInfer::Resolve (HIR::Pattern *pattern)\n+{\n+  ClosureParamInfer resolver;\n+  pattern->accept_vis (resolver);\n+\n+  if (resolver.infered->get_kind () != TyTy::TypeKind::ERROR)\n+    {\n+      resolver.context->insert_implicit_type (resolver.infered);\n+      resolver.mappings->insert_location (resolver.infered->get_ref (),\n+\t\t\t\t\t  pattern->get_locus ());\n+    }\n+  return resolver.infered;\n+}\n+\n+ClosureParamInfer::ClosureParamInfer ()\n+  : TypeCheckBase (), infered (new TyTy::ErrorType (0))\n+{}\n+\n+void\n+ClosureParamInfer::visit (HIR::WildcardPattern &pattern)\n+{\n+  HirId id = pattern.get_pattern_mappings ().get_hirid ();\n+  infered = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL,\n+\t\t\t\t TyTy::InferType::TypeHint::Default (),\n+\t\t\t\t pattern.get_locus ());\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::IdentifierPattern &pattern)\n+{\n+  HirId id = pattern.get_pattern_mappings ().get_hirid ();\n+  infered = new TyTy::InferType (id, TyTy::InferType::InferTypeKind::GENERAL,\n+\t\t\t\t TyTy::InferType::TypeHint::Default (),\n+\t\t\t\t pattern.get_locus ());\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::ReferencePattern &pattern)\n+{\n+  TyTy::BaseType *element\n+    = ClosureParamInfer::Resolve (pattern.get_referenced_pattern ().get ());\n+\n+  HirId id = pattern.get_pattern_mappings ().get_hirid ();\n+  infered = new TyTy::ReferenceType (id, TyTy::TyVar (element->get_ref ()),\n+\t\t\t\t     pattern.get_mutability ());\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::PathInExpression &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::StructPattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::TupleStructPattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::TuplePattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::LiteralPattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::RangePattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::QualifiedPathInExpression &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::SlicePattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n+void\n+ClosureParamInfer::visit (HIR::AltPattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"unable to infer this kind of parameter pattern\");\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "709e8be4c86918b260711fd3f76c07f20b324ca9", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "patch": "@@ -58,6 +58,30 @@ class TypeCheckPattern : public TypeCheckBase, public HIR::HIRPatternVisitor\n   TyTy::BaseType *infered;\n };\n \n+class ClosureParamInfer : private TypeCheckBase, private HIR::HIRPatternVisitor\n+{\n+public:\n+  static TyTy::BaseType *Resolve (HIR::Pattern *pattern);\n+\n+  void visit (HIR::PathInExpression &pattern) override;\n+  void visit (HIR::StructPattern &pattern) override;\n+  void visit (HIR::TupleStructPattern &pattern) override;\n+  void visit (HIR::WildcardPattern &pattern) override;\n+  void visit (HIR::TuplePattern &pattern) override;\n+  void visit (HIR::LiteralPattern &pattern) override;\n+  void visit (HIR::RangePattern &pattern) override;\n+  void visit (HIR::IdentifierPattern &pattern) override;\n+  void visit (HIR::QualifiedPathInExpression &pattern) override;\n+  void visit (HIR::ReferencePattern &pattern) override;\n+  void visit (HIR::SlicePattern &pattern) override;\n+  void visit (HIR::AltPattern &pattern) override;\n+\n+private:\n+  ClosureParamInfer ();\n+\n+  TyTy::BaseType *infered;\n+};\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "7a8bb2aca5029dde5821073b5b89a0f288beba2c", "filename": "gcc/testsuite/rust/compile/issue-2142.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2142.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14731ddb6ec67f21b5293affa3b1f8169a4bc92/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2142.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2142.rs?ref=a14731ddb6ec67f21b5293affa3b1f8169a4bc92", "patch": "@@ -0,0 +1,14 @@\n+#[lang = \"fn_once\"]\n+pub trait FnOnce<Args> {\n+    #[lang = \"fn_once_output\"]\n+    type Output;\n+\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+fn main() {\n+    let lambda = |&c| c != b'9';\n+\n+    let a = b'1';\n+    lambda(&a);\n+}"}]}