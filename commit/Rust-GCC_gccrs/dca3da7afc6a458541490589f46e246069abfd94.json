{"sha": "dca3da7afc6a458541490589f46e246069abfd94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhM2RhN2FmYzZhNDU4NTQxNDkwNTg5ZjQ2ZTI0NjA2OWFiZmQ5NA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-03T23:28:42Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-03T23:28:42Z"}, "message": "gcse.c (struct reg_use): Remove unused struct.\n\n\t* gcse.c (struct reg_use): Remove unused struct.\n\t(gcse_emit_move_after): Do not create REG_EQUAL notes that reference\n\tthe SET_DEST of the instruction the note would be attached to.\n\t* cse.c (cse_main): Add the DF_NOTE problem.\n\nFrom-SVN: r194108", "tree": {"sha": "bfaf593b0f75e7bfa1d728800187ee60eb2311f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfaf593b0f75e7bfa1d728800187ee60eb2311f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca3da7afc6a458541490589f46e246069abfd94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca3da7afc6a458541490589f46e246069abfd94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca3da7afc6a458541490589f46e246069abfd94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca3da7afc6a458541490589f46e246069abfd94/comments", "author": null, "committer": null, "parents": [{"sha": "cef1bc586cda64402724873b0063d8c67e5a97ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef1bc586cda64402724873b0063d8c67e5a97ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef1bc586cda64402724873b0063d8c67e5a97ab"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "65dfd9a9a750544421573c95e8ef9a2d0f1281e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca3da7afc6a458541490589f46e246069abfd94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca3da7afc6a458541490589f46e246069abfd94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dca3da7afc6a458541490589f46e246069abfd94", "patch": "@@ -1,3 +1,10 @@\n+2012-12-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcse.c (struct reg_use): Remove unused struct.\n+\t(gcse_emit_move_after): Do not create REG_EQUAL notes that reference\n+\tthe SET_DEST of the instruction the note would be attached to.\n+\t* cse.c (cse_main): Add the DF_NOTE problem.\n+\n 2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* sanitizer.def: Add Address Sanitizer builtins."}, {"sha": "34b318c6919926f76a617193277d151282ab95fc", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca3da7afc6a458541490589f46e246069abfd94/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca3da7afc6a458541490589f46e246069abfd94/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dca3da7afc6a458541490589f46e246069abfd94", "patch": "@@ -6520,6 +6520,7 @@ cse_main (rtx f ATTRIBUTE_UNUSED, int nregs)\n   int i, n_blocks;\n \n   df_set_flags (DF_LR_RUN_DCE);\n+  df_note_add_problem ();\n   df_analyze ();\n   df_set_flags (DF_DEFER_INSN_RESCAN);\n "}, {"sha": "4a426a3528c80d6ce90309d6d6cbfaae95e4a28b", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca3da7afc6a458541490589f46e246069abfd94/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca3da7afc6a458541490589f46e246069abfd94/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=dca3da7afc6a458541490589f46e246069abfd94", "patch": "@@ -255,8 +255,6 @@ int flag_rerun_cse_after_global_opts;\n /* An obstack for our working variables.  */\n static struct obstack gcse_obstack;\n \n-struct reg_use {rtx reg_rtx; };\n-\n /* Hash table of expressions.  */\n \n struct expr\n@@ -2491,23 +2489,27 @@ gcse_emit_move_after (rtx dest, rtx src, rtx insn)\n   rtx new_rtx;\n   rtx set = single_set (insn), set2;\n   rtx note;\n-  rtx eqv;\n+  rtx eqv = NULL_RTX;\n \n   /* This should never fail since we're creating a reg->reg copy\n      we've verified to be valid.  */\n \n   new_rtx = emit_insn_after (gen_move_insn (dest, src), insn);\n \n-  /* Note the equivalence for local CSE pass.  */\n+  /* Note the equivalence for local CSE pass.  Take the note from the old\n+     set if there was one.  Otherwise record the SET_SRC from the old set\n+     unless DEST is also an operand of the SET_SRC.  */\n   set2 = single_set (new_rtx);\n   if (!set2 || !rtx_equal_p (SET_DEST (set2), dest))\n     return new_rtx;\n   if ((note = find_reg_equal_equiv_note (insn)))\n     eqv = XEXP (note, 0);\n-  else\n+  else if (! REG_P (dest)\n+\t   || ! reg_mentioned_p (dest, SET_SRC (set)))\n     eqv = SET_SRC (set);\n \n-  set_unique_reg_note (new_rtx, REG_EQUAL, copy_insn_1 (eqv));\n+  if (eqv != NULL_RTX)\n+    set_unique_reg_note (new_rtx, REG_EQUAL, copy_insn_1 (eqv));\n \n   return new_rtx;\n }"}]}