{"sha": "7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxOWM3MTViYjc3MzU1ODdiYTAwZWFiNjhjMWI5Yjc1Y2JhM2IyYQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2010-05-21T15:08:44Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2010-05-21T15:08:44Z"}, "message": "arm.c (arm_function_ok_for_sibcall): Only forbid sibling calls for Thumb-1.\n\n\tgcc/\n\t* config/arm/arm.c (arm_function_ok_for_sibcall): Only forbid\n\tsibling calls for Thumb-1.\n\t* config/arm/arm.h (USE_RETURN_INSN): Enable for Thumb-2.\n\t* config/arm/arm.md (*call_symbol, *call_value_symbol): Use for\n\tThumb-2.\n\t(*call_insn, *call_value_insn): Don't use for Thumb-2.\n\t(sibcall, sibcall_value, *sibcall_insn, *sibcall_value_insn): Use\n\tfor Thumb-2.\n\t(return): New expander.\n\t(*arm_return): New name for ARM return insn.\n\t* config/arm/thumb2.md (*thumb2_return): New insn pattern.\n\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r159672", "tree": {"sha": "1aa80e7b1d02366c14586b1e311cf2df73d1d103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa80e7b1d02366c14586b1e311cf2df73d1d103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "204fc5505c08b8ba82aabfe503e2fc20e98054a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204fc5505c08b8ba82aabfe503e2fc20e98054a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204fc5505c08b8ba82aabfe503e2fc20e98054a6"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "e7645576413febc29afd01b15ac99e2c3a0c751e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "patch": "@@ -1,3 +1,18 @@\n+2010-05-21  Julian Brown  <julian@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_function_ok_for_sibcall): Only forbid\n+\tsibling calls for Thumb-1.\n+\t* config/arm/arm.h (USE_RETURN_INSN): Enable for Thumb-2.\n+\t* config/arm/arm.md (*call_symbol, *call_value_symbol): Use for\n+\tThumb-2.\n+\t(*call_insn, *call_value_insn): Don't use for Thumb-2.\n+\t(sibcall, sibcall_value, *sibcall_insn, *sibcall_value_insn): Use\n+\tfor Thumb-2.\n+\t(return): New expander.\n+\t(*arm_return): New name for ARM return insn.\n+\t* config/arm/thumb2.md (*thumb2_return): New insn pattern.\n+\n 2010-05-19  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* config.gcc (sparc64-*-rtems*): New target."}, {"sha": "7a7dea4838bd37f40a4fd84b8ba68ff43efc3c51", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "patch": "@@ -4794,8 +4794,8 @@ arm_function_ok_for_sibcall (tree decl, tree exp)\n     return false;\n \n   /* Never tailcall something for which we have no decl, or if we\n-     are in Thumb mode.  */\n-  if (decl == NULL || TARGET_THUMB)\n+     are generating code for Thumb-1.  */\n+  if (decl == NULL || TARGET_THUMB1)\n     return false;\n \n   /* The PIC register is live on entry to VxWorks PLT entries, so we"}, {"sha": "b45f675b4bc8eb97f530e1099750072d5c773dec", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "patch": "@@ -1814,10 +1814,8 @@ typedef struct\n \n /* Determine if the epilogue should be output as RTL.\n    You should override this if you define FUNCTION_EXTRA_EPILOGUE.  */\n-/* This is disabled for Thumb-2 because it will confuse the\n-   conditional insn counter.  */\n #define USE_RETURN_INSN(ISCOND)\t\t\t\t\\\n-  (TARGET_ARM ? use_return_insn (ISCOND, NULL) : 0)\n+  (TARGET_32BIT ? use_return_insn (ISCOND, NULL) : 0)\n \n /* Definitions for register eliminations.\n "}, {"sha": "ab8bce43bc45076c1803e0b9553f755b89d7206b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "patch": "@@ -8650,7 +8650,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && (GET_CODE (operands[0]) == SYMBOL_REF)\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[0]))\"\n   \"*\n@@ -8666,7 +8666,7 @@\n \t(match_operand:SI 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && (GET_CODE (operands[1]) == SYMBOL_REF)\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[1]))\"\n   \"*\n@@ -8681,7 +8681,7 @@\n \t (match_operand:SI 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB\n+  \"TARGET_THUMB1\n    && GET_CODE (operands[0]) == SYMBOL_REF\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[0]))\"\n   \"bl\\\\t%a0\"\n@@ -8695,7 +8695,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB\n+  \"TARGET_THUMB1\n    && GET_CODE (operands[1]) == SYMBOL_REF\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[1]))\"\n   \"bl\\\\t%a1\"\n@@ -8709,7 +8709,7 @@\n \t\t    (match_operand 1 \"general_operand\" \"\"))\n \t      (return)\n \t      (use (match_operand 2 \"\" \"\"))])]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"\n   {\n     if (operands[2] == NULL_RTX)\n@@ -8723,7 +8723,7 @@\n \t\t\t (match_operand 2 \"general_operand\" \"\")))\n \t      (return)\n \t      (use (match_operand 3 \"\" \"\"))])]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"\n   {\n     if (operands[3] == NULL_RTX)\n@@ -8736,7 +8736,7 @@\n \t(match_operand 1 \"\" \"\"))\n   (return)\n   (use (match_operand 2 \"\" \"\"))]\n-  \"TARGET_ARM && GET_CODE (operands[0]) == SYMBOL_REF\"\n+  \"TARGET_32BIT && GET_CODE (operands[0]) == SYMBOL_REF\"\n   \"*\n   return NEED_PLT_RELOC ? \\\"b%?\\\\t%a0(PLT)\\\" : \\\"b%?\\\\t%a0\\\";\n   \"\n@@ -8749,15 +8749,20 @@\n \t     (match_operand 2 \"\" \"\")))\n   (return)\n   (use (match_operand 3 \"\" \"\"))]\n-  \"TARGET_ARM && GET_CODE (operands[1]) == SYMBOL_REF\"\n+  \"TARGET_32BIT && GET_CODE (operands[1]) == SYMBOL_REF\"\n   \"*\n   return NEED_PLT_RELOC ? \\\"b%?\\\\t%a1(PLT)\\\" : \\\"b%?\\\\t%a1\\\";\n   \"\n   [(set_attr \"type\" \"call\")]\n )\n \n+(define_expand \"return\"\n+  [(return)]\n+  \"TARGET_32BIT && USE_RETURN_INSN (FALSE)\"\n+  \"\")\n+\n ;; Often the return insn will be the same as loading from memory, so set attr\n-(define_insn \"return\"\n+(define_insn \"*arm_return\"\n   [(return)]\n   \"TARGET_ARM && USE_RETURN_INSN (FALSE)\"\n   \"*"}, {"sha": "e97715ff595a8d13814481e107cf6fd81c14d438", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19c715bb7735587ba00eab68c1b9b75cba3b2a/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=7c19c715bb7735587ba00eab68c1b9b75cba3b2a", "patch": "@@ -1054,6 +1054,19 @@\n    (set_attr \"length\" \"20\")]\n )\n \n+;; Note: this is not predicable, to avoid issues with linker-generated\n+;; interworking stubs.\n+(define_insn \"*thumb2_return\"\n+  [(return)]\n+  \"TARGET_THUMB2 && USE_RETURN_INSN (FALSE)\"\n+  \"*\n+  {\n+    return output_return_instruction (const_true_rtx, TRUE, FALSE);\n+  }\"\n+  [(set_attr \"type\" \"load1\")\n+   (set_attr \"length\" \"12\")]\n+)\n+\n (define_insn_and_split \"thumb2_eh_return\"\n   [(unspec_volatile [(match_operand:SI 0 \"s_register_operand\" \"r\")]\n \t\t    VUNSPEC_EH_RETURN)"}]}