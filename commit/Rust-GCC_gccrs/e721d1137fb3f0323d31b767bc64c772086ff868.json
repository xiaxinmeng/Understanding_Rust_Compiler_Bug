{"sha": "e721d1137fb3f0323d31b767bc64c772086ff868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyMWQxMTM3ZmIzZjAzMjNkMzFiNzY3YmM2NGM3NzIwODZmZjg2OA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-09-23T20:52:15Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-09-26T15:26:47Z"}, "message": "aix: collect2 visibility\n\nThe code that collect2 generates, compiles and links into applications\nand shared libraries to initialize constructors and register DWARF tables\nis built with the compiler options used to invoke the linker.  If the\ncompiler options change the visibility from default, the library\ninitialization routines will not be visible and this can prevent\ninitialization.\n\nThis patch checks if the command line sets visibiliity and then adds\nGCC pragmas to the initialization code generated by collect2 if\nnecessary to define the visibility on global, exported functions as default.\n\ngcc/ChangeLog:\n\n2020-09-26  David Edelsohn  <dje.gcc@gmail.com>\n\t    Clement Chigot  <clement.chigot@atos.com>\n\n\t* collect2.c (visibility_flag): New.\n\t(main): Detect -fvisibility.\n\t(write_c_file_stat): Push and pop default visibility.", "tree": {"sha": "d7f9edfa6ffaca1f8beea3dd4b59bdd86df1a136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f9edfa6ffaca1f8beea3dd4b59bdd86df1a136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e721d1137fb3f0323d31b767bc64c772086ff868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e721d1137fb3f0323d31b767bc64c772086ff868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e721d1137fb3f0323d31b767bc64c772086ff868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e721d1137fb3f0323d31b767bc64c772086ff868/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b26b3b3f5c75a86a5a3e851866247ac7fcb6c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b26b3b3f5c75a86a5a3e851866247ac7fcb6c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b26b3b3f5c75a86a5a3e851866247ac7fcb6c8b"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "6d074a79e9184a6781498f1342e1ab3272dfbb73", "filename": "gcc/collect2.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e721d1137fb3f0323d31b767bc64c772086ff868/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e721d1137fb3f0323d31b767bc64c772086ff868/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=e721d1137fb3f0323d31b767bc64c772086ff868", "patch": "@@ -184,7 +184,8 @@ static int strip_flag;\t\t\t/* true if -s */\n static int export_flag;                 /* true if -bE */\n static int aix64_flag;\t\t\t/* true if -b64 */\n static int aixrtl_flag;\t\t\t/* true if -brtl */\n-static int aixlazy_flag;               /* true if -blazy */\n+static int aixlazy_flag;\t\t/* true if -blazy */\n+static int visibility_flag;\t\t/* true if -fvisibility */\n #endif\n \n enum lto_mode_d {\n@@ -1239,6 +1240,11 @@ main (int argc, char **argv)\n \t      *c_ptr++ = xstrdup (q);\n \t    }\n \t}\n+#ifdef COLLECT_EXPORT_LIST\n+      /* Detect any invocation with -fvisibility.  */\n+      if (strncmp (q, \"-fvisibility\", 12) == 0)\n+\tvisibility_flag = 1;\n+#endif\n     }\n   obstack_free (&temporary_obstack, temporary_firstobj);\n   *c_ptr++ = \"-fno-profile-arcs\";\n@@ -2131,6 +2137,11 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n       fprintf (stream, \"\\t}\\n\");\n     }\n \n+#ifdef COLLECT_EXPORT_LIST\n+  /* Set visibility of initializers to default.  */\n+  if (visibility_flag)\n+    fprintf (stream, \"#pragma GCC visibility push(default)\\n\");\n+#endif\n   fprintf (stream, \"void %s() {\\n\", initname);\n   if (constructors.number > 0 || frames)\n     {\n@@ -2163,11 +2174,24 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n \t       destructors.number + frames);\n     }\n   fprintf (stream, \"}\\n\");\n+#ifdef COLLECT_EXPORT_LIST\n+  if (visibility_flag)\n+    fprintf (stream, \"#pragma GCC visibility pop\\n\");\n+#endif\n \n   if (shared_obj)\n     {\n+#ifdef COLLECT_EXPORT_LIST\n+      /* Set visibility of initializers to default.  */\n+      if (visibility_flag)\n+\tfprintf (stream, \"#pragma GCC visibility push(default)\\n\");\n+#endif\n       COLLECT_SHARED_INIT_FUNC (stream, initname);\n       COLLECT_SHARED_FINI_FUNC (stream, fininame);\n+#ifdef COLLECT_EXPORT_LIST\n+      if (visibility_flag)\n+\tfprintf (stream, \"#pragma GCC visibility pop\\n\");\n+#endif\n     }\n }\n "}]}