{"sha": "0344b5b822b310921a432b9ffcb9ea0b3964820d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0NGI1YjgyMmIzMTA5MjFhNDMyYjlmZmNiOWVhMGIzOTY0ODIwZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-08T18:24:07Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-10T13:02:07Z"}, "message": "d: Merge upstream dmd 0450061c8\n\nD front-end changes:\n\n - Fix ICE in forward referenced type members of structs.\n\n - Fix ICE passing a member template mixin identifier as alias argument.\n\n - Fix ICE when `__traits' prints error involving a Parameter.\n\n - Fix bugs found in `__traits(allMembers)' returning wrong result.\n\n - Detect and shortcut Alias and AliasSeq template patterns.\n\nReviewed-on: https://github.com/dlang/dmd/pull/12405\n\t     https://github.com/dlang/dmd/pull/12411\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 0450061c8.", "tree": {"sha": "fff53c66505d273342310df994491d6e1ca6bd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff53c66505d273342310df994491d6e1ca6bd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0344b5b822b310921a432b9ffcb9ea0b3964820d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0344b5b822b310921a432b9ffcb9ea0b3964820d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0344b5b822b310921a432b9ffcb9ea0b3964820d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0344b5b822b310921a432b9ffcb9ea0b3964820d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d118ec221dd5fc829d2170c257e10b8159dce274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118ec221dd5fc829d2170c257e10b8159dce274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d118ec221dd5fc829d2170c257e10b8159dce274"}], "stats": {"total": 336, "additions": 316, "deletions": 20}, "files": [{"sha": "86fb308d7599a963745a1156478eb5a8b1ae6993", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -1,4 +1,4 @@\n-d16195406e1795ee91f2acb8f522fcb4ec698f47\n+0450061c8de71328815da9323bd35c92b37d51d2\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "98621594bd267ab564b93041d8a78c21e94f539a", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -260,6 +260,8 @@ void AggregateDeclaration::setScope(Scope *sc)\n  */\n bool AggregateDeclaration::determineFields()\n {\n+    if (_scope)\n+        dsymbolSemantic(this, NULL);\n     if (sizeok != SIZEOKnone)\n         return true;\n "}, {"sha": "ce0ce4564af17db1d39ae8c7163ae17356d65af9", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -266,6 +266,8 @@ class Dsymbol : public ASTNode\n     virtual UnitTestDeclaration *isUnitTestDeclaration() { return NULL; }\n     virtual NewDeclaration *isNewDeclaration() { return NULL; }\n     virtual VarDeclaration *isVarDeclaration() { return NULL; }\n+    virtual VersionSymbol *isVersionSymbol() { return NULL; }\n+    virtual DebugSymbol *isDebugSymbol() { return NULL; }\n     virtual ClassDeclaration *isClassDeclaration() { return NULL; }\n     virtual StructDeclaration *isStructDeclaration() { return NULL; }\n     virtual UnionDeclaration *isUnionDeclaration() { return NULL; }"}, {"sha": "33f74edf6ba8e6b0e1f22753a6800a1d7b8b8100", "filename": "gcc/d/dmd/dsymbolsem.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdsymbolsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdsymbolsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -570,7 +570,7 @@ class DsymbolSemanticVisitor : public Visitor\n                     ti = dsym->_init ? dsym->_init->syntaxCopy() : NULL;\n \n                 VarDeclaration *v = new VarDeclaration(dsym->loc, arg->type, id, ti);\n-                v->storage_class |= STCtemp | dsym->storage_class;\n+                v->storage_class |= STCtemp | STClocal | dsym->storage_class;\n                 if (arg->storageClass & STCparameter)\n                     v->storage_class |= arg->storageClass;\n                 //printf(\"declaring field %s of type %s\\n\", v->toChars(), v->type->toChars());\n@@ -4843,6 +4843,54 @@ class DsymbolSemanticVisitor : public Visitor\n     }\n };\n \n+/******************************************************\n+ * Do template instance semantic for isAliasSeq templates.\n+ * This is a greatly simplified version of TemplateInstance::semantic().\n+ */\n+static void aliasSeqInstanceSemantic(TemplateInstance *tempinst, Scope *sc, TemplateDeclaration *tempdecl)\n+{\n+    //printf(\"[%s] aliasSeqInstanceSemantic('%s')\\n\", tempinst->loc.toChars(), tempinst->toChars());\n+    Scope *paramscope = sc->push();\n+    paramscope->stc = 0;\n+    paramscope->protection = Prot(Prot::public_);\n+\n+    TemplateTupleParameter *ttp = (*tempdecl->parameters)[0]->isTemplateTupleParameter();\n+    Tuple *va = isTuple(tempinst->tdtypes[0]);\n+    Declaration *d = new TupleDeclaration(tempinst->loc, ttp->ident, &va->objects);\n+    d->storage_class |= STCtemplateparameter;\n+    dsymbolSemantic(d, sc);\n+\n+    paramscope->pop();\n+\n+    tempinst->aliasdecl = d;\n+\n+    tempinst->semanticRun = PASSsemanticdone;\n+}\n+\n+/******************************************************\n+ * Do template instance semantic for isAlias templates.\n+ * This is a greatly simplified version of TemplateInstance::semantic().\n+ */\n+static void aliasInstanceSemantic(TemplateInstance *tempinst, Scope *sc, TemplateDeclaration *tempdecl)\n+{\n+    //printf(\"[%s] aliasInstanceSemantic('%s')\\n\", tempinst->loc.toChars(), tempinst->toChars());\n+    Scope *paramscope = sc->push();\n+    paramscope->stc = 0;\n+    paramscope->protection = Prot(Prot::public_);\n+\n+    TemplateTypeParameter *ttp = (*tempdecl->parameters)[0]->isTemplateTypeParameter();\n+    Type *ta = isType(tempinst->tdtypes[0]);\n+    Declaration *d = new AliasDeclaration(tempinst->loc, ttp->ident, ta->addMod(tempdecl->onemember->isAliasDeclaration()->type->mod));\n+    d->storage_class |= STCtemplateparameter;\n+    dsymbolSemantic(d, sc);\n+\n+    paramscope->pop();\n+\n+    tempinst->aliasdecl = d;\n+\n+    tempinst->semanticRun = PASSsemanticdone;\n+}\n+\n void templateInstanceSemantic(TemplateInstance *tempinst, Scope *sc, Expressions *fargs)\n {\n     //printf(\"[%s] TemplateInstance::semantic('%s', this=%p, gag = %d, sc = %p)\\n\", tempinst->loc.toChars(), tempinst->toChars(), tempinst, global.gag, sc);\n@@ -4913,6 +4961,21 @@ void templateInstanceSemantic(TemplateInstance *tempinst, Scope *sc, Expressions\n     if (tempinst->errors)\n         goto Lerror;\n \n+    /* Greatly simplified semantic processing for AliasSeq templates\n+     */\n+    if (tempdecl->isTrivialAliasSeq)\n+    {\n+        tempinst->inst = tempinst;\n+        return aliasSeqInstanceSemantic(tempinst, sc, tempdecl);\n+    }\n+    /* Greatly simplified semantic processing for Alias templates\n+     */\n+    else if (tempdecl->isTrivialAlias)\n+    {\n+        tempinst->inst = tempinst;\n+        return aliasInstanceSemantic(tempinst, sc, tempdecl);\n+    }\n+\n     /* See if there is an existing TemplateInstantiation that already\n      * implements the typeargs. If so, just refer to that one instead.\n      */"}, {"sha": "20036f2dbff0b068ffa6c77b92b2bb7c9acd798b", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -222,7 +222,8 @@ bool definitelyValueParameter(Expression *e)\n         e->op == TOKtype || e->op == TOKdottype ||\n         e->op == TOKtemplate ||  e->op == TOKdottd ||\n         e->op == TOKfunction || e->op == TOKerror ||\n-        e->op == TOKthis || e->op == TOKsuper)\n+        e->op == TOKthis || e->op == TOKsuper ||\n+        e->op == TOKdot)\n         return false;\n \n     if (e->op != TOKdotvar)\n@@ -531,20 +532,55 @@ TemplateDeclaration::TemplateDeclaration(Loc loc, Identifier *id,\n     this->literal = literal;\n     this->ismixin = ismixin;\n     this->isstatic = true;\n+    this->isTrivialAliasSeq = false;\n+    this->isTrivialAlias = false;\n     this->previous = NULL;\n     this->protection = Prot(Prot::undefined);\n     this->inuse = 0;\n     this->instances = NULL;\n \n     // Compute in advance for Ddoc's use\n     // Bugzilla 11153: ident could be NULL if parsing fails.\n-    if (members && ident)\n+    if (!members || !ident)\n+        return;\n+\n+    Dsymbol *s;\n+    if (!Dsymbol::oneMembers(members, &s, ident) || !s)\n+        return;\n+\n+    onemember = s;\n+    s->parent = this;\n+\n+    /* Set isTrivialAliasSeq if this fits the pattern:\n+     *   template AliasSeq(T...) { alias AliasSeq = T; }\n+     * or set isTrivialAlias if this fits the pattern:\n+     *   template Alias(T) { alias Alias = qualifiers(T); }\n+     */\n+    if (!(parameters && parameters->length == 1))\n+        return;\n+\n+    AliasDeclaration *ad = s->isAliasDeclaration();\n+    if (!ad || !ad->type)\n+        return;\n+\n+    TypeIdentifier *ti = ad->type->isTypeIdentifier();\n+    if (!ti || ti->idents.length != 0)\n+        return;\n+\n+    if (TemplateTupleParameter *ttp = (*parameters)[0]->isTemplateTupleParameter())\n     {\n-        Dsymbol *s;\n-        if (Dsymbol::oneMembers(members, &s, ident) && s)\n+        if (ti->ident == ttp->ident && ti->mod == 0)\n+        {\n+            //printf(\"found isAliasSeq %s %s\\n\", s->toChars(), ad->type->toChars());\n+            isTrivialAliasSeq = true;\n+        }\n+    }\n+    else if (TemplateTypeParameter *ttp = (*parameters)[0]->isTemplateTypeParameter())\n+    {\n+        if (ti->ident == ttp->ident)\n         {\n-            onemember = s;\n-            s->parent = this;\n+            //printf(\"found isAlias %s %s\\n\", s->toChars(), ad->type->toChars());\n+            isTrivialAlias = true;\n         }\n     }\n }\n@@ -6223,6 +6259,14 @@ bool TemplateInstance::semanticTiargs(Loc loc, Scope *sc, Objects *tiargs, int f\n                 sa = ((DotTemplateExp *)ea)->td;\n                 goto Ldsym;\n             }\n+            if (ea->op == TOKdot)\n+            {\n+                if (ScopeExp *se = ((DotExp *)ea)->e2->isScopeExp())\n+                {\n+                    sa = se->sds;\n+                    goto Ldsym;\n+                }\n+            }\n         }\n         else if (sa)\n         {\n@@ -6770,8 +6814,7 @@ Dsymbols *TemplateInstance::appendToModuleMember()\n {\n     Module *mi = minst;     // instantiated -> inserted module\n \n-    if (global.params.useUnitTests ||\n-        global.params.debuglevel)\n+    if (global.params.useUnitTests)\n     {\n         // Turn all non-root instances to speculative\n         if (mi && !mi->isRoot())"}, {"sha": "9397b1e8abd8acf9f208733052f1994cedd1b611", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -1714,6 +1714,10 @@ class PrettyPrintVisitor : public Visitor\n                 objectToBuffer(arg);\n             }\n         }\n+        else if (Parameter *p = isParameter(oarg))\n+        {\n+            p->accept(this);\n+        }\n         else if (!oarg)\n         {\n             buf->writestring(\"NULL\");"}, {"sha": "9ef8ab4e5f48deedeac67b467210d965d5eced4f", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -7039,7 +7039,10 @@ Expression *TypeStruct::dotExp(Scope *sc, Expression *e, Identifier *ident, int\n          */\n         e = expressionSemantic(e, sc);  // do this before turning on noaccesscheck\n \n-        sym->size(e->loc);      // do semantic of type\n+        if (!sym->determineFields())\n+        {\n+            error(e->loc, \"unable to determine fields of `%s` because of forward references\", toChars());\n+        }\n \n         Expression *e0 = NULL;\n         Expression *ev = e->op == TOKtype ? NULL : e;\n@@ -7373,7 +7376,9 @@ bool TypeStruct::hasPointers()\n     // Probably should cache this information in sym rather than recompute\n     StructDeclaration *s = sym;\n \n-    sym->size(Loc());               // give error for forward references\n+    if (sym->members && !sym->determineFields() && sym->type != Type::terror)\n+        error(sym->loc, \"no size because of forward references\");\n+\n     for (size_t i = 0; i < s->fields.length; i++)\n     {\n         Declaration *d = s->fields[i];"}, {"sha": "086ec72ba603c3717f1e51dc6be550791d55c56a", "filename": "gcc/d/dmd/template.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftemplate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftemplate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplate.h?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -77,6 +77,8 @@ class TemplateDeclaration : public ScopeDsymbol\n     bool literal;               // this template declaration is a literal\n     bool ismixin;               // template declaration is only to be used as a mixin\n     bool isstatic;              // this is static template declaration\n+    bool isTrivialAliasSeq;     // matches `template AliasSeq(T...) { alias AliasSeq = T; }\n+    bool isTrivialAlias;        // matches `template Alias(T) { alias Alias = T; }\n     Prot protection;\n     int inuse;                  // for recursive expansion detection\n "}, {"sha": "5a9f58b79f5c39f2d074640964ba7aad57d524c8", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -1560,6 +1560,13 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n             s = imp->mod;\n         }\n \n+        // https://issues.dlang.org/show_bug.cgi?id=16044\n+        if (Package *p = s->isPackage())\n+        {\n+            if (Module *pm = p->isPackageMod())\n+                s = pm;\n+        }\n+\n         ScopeDsymbol *sds = s->isScopeDsymbol();\n         if (!sds || sds->isTemplateDeclaration())\n         {\n@@ -1587,6 +1594,11 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n                     }\n                 }\n \n+                // https://issues.dlang.org/show_bug.cgi?id=20915\n+                // skip version and debug identifiers\n+                if (sm->isVersionSymbol() || sm->isDebugSymbol())\n+                    return 0;\n+\n                 //printf(\"\\t[%i] %s %s\\n\", i, sm->kind(), sm->toChars());\n                 if (sm->ident)\n                 {"}, {"sha": "31e93c28bdb1afde082fde96604d1c5b7add0826", "filename": "gcc/d/dmd/typesem.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftypesem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Ftypesem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypesem.c?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -797,7 +797,7 @@ Type *typeSemantic(Type *type, const Loc &loc, Scope *sc)\n \n                 if (tf->isreturn && !tf->isref && !tf->next->hasPointers())\n                 {\n-                    ::error(loc, \"function type `%s` has `return` but does not return any indirections\", tf->toChars());\n+                    tf->isreturn = false;\n                 }\n             }\n \n@@ -872,7 +872,7 @@ Type *typeSemantic(Type *type, const Loc &loc, Scope *sc)\n                             if (0 && !tf->isref)\n                             {\n                                 StorageClass stc = fparam->storageClass & (STCref | STCout);\n-                                ::error(loc, \"parameter %s is `return %s` but function does not return by ref\",\n+                                ::error(loc, \"parameter `%s` is `return %s` but function does not return by `ref`\",\n                                     fparam->ident ? fparam->ident->toChars() : \"\",\n                                     stcToChars(stc));\n                                 errors = true;\n@@ -886,9 +886,7 @@ Type *typeSemantic(Type *type, const Loc &loc, Scope *sc)\n                             }\n                             else if (!tf->isref && tf->next && !tf->next->hasPointers())\n                             {\n-                                ::error(loc, \"parameter %s is `return` but function does not return any indirections\",\n-                                    fparam->ident ? fparam->ident->toChars() : \"\");\n-                                errors = true;\n+                                fparam->storageClass &= STCreturn;   // https://issues.dlang.org/show_bug.cgi?id=18963\n                             }\n                         }\n                     }"}, {"sha": "33811eef7626bdba964c3cea3b6ecde67607ddda", "filename": "gcc/d/dmd/version.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Fd%2Fdmd%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fversion.h?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -24,6 +24,7 @@ class DebugSymbol : public Dsymbol\n     const char *toChars();\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     const char *kind() const;\n+    DebugSymbol *isDebugSymbol() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };\n \n@@ -39,5 +40,6 @@ class VersionSymbol : public Dsymbol\n     const char *toChars();\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     const char *kind() const;\n+    VersionSymbol *isVersionSymbol() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "a5179577f6e7029b4a2f661559f0c8383e1b0bfe", "filename": "gcc/testsuite/gdc.test/compilable/imports/pkg16044/package.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fpackage.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,4 @@\n+module pkg16044;\n+\n+int test1;\n+int test2;"}, {"sha": "4c96e127093c82e012805d94deeef8f40654d423", "filename": "gcc/testsuite/gdc.test/compilable/imports/pkg16044/sub/package.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fsub%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fsub%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fpkg16044%2Fsub%2Fpackage.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,4 @@\n+module pkg16044.sub;\n+\n+int test3;\n+int test4;"}, {"sha": "e959e2ec99956ef989cc591da4f60cccb92bd6a2", "filename": "gcc/testsuite/gdc.test/compilable/issue16044.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16044.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16044.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue16044.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,9 @@\n+// REQUIRED_ARGS: -Icompilable/imports\n+// EXTRA_FILES: imports/pkg16044/package.d imports/pkg16044/sub/package.d\n+module issue16044; // https://issues.dlang.org/show_bug.cgi?id=16044\n+\n+import pkg16044;\n+import pkg16044.sub;\n+\n+static assert([__traits(allMembers, pkg16044)] == [\"object\", \"test1\", \"test2\"]);\n+static assert([__traits(allMembers, pkg16044.sub)] == [\"object\", \"test3\", \"test4\"]);"}, {"sha": "dd8b7b5c48b04352c24490c195bb7a5e65d98f46", "filename": "gcc/testsuite/gdc.test/compilable/issue20915.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20915.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20915.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue20915.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,10 @@\n+module issue20915;\n+\n+// prior to the PR adding this test case,\n+// locally defined version and debug idents were included.\n+version = illegal;\n+debug   = illegal;\n+\n+alias Seq(T...) = T;\n+\n+static assert (__traits(allMembers, issue20915) == Seq!(\"object\", \"Seq\"));"}, {"sha": "f07b47a7a7576b2c5299dd8259fbb53b92aa4f46", "filename": "gcc/testsuite/gdc.test/compilable/issue21813a.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813a.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,13 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21813\n+Target.OS defaultTargetOS()\n+{\n+    return Target.OS.linux;\n+}\n+\n+struct Target\n+{\n+    enum OS { linux }\n+    OS os = defaultTargetOS();\n+    void deinitialize() { this = this.init; }\n+    @property isPOSIX() scope @nogc { }\n+}"}, {"sha": "ef226971d872c2b1ae83a133be39be79da4a072b", "filename": "gcc/testsuite/gdc.test/compilable/issue21813b.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fissue21813b.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,13 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21813\n+Target.OS defaultTargetOS()\n+{\n+    return Target.OS.linux;\n+}\n+\n+struct Target \n+{\n+    enum OS { linux }\n+    OS os = defaultTargetOS();\n+    @property isPOSIX() scope @nogc { }\n+}\n+"}, {"sha": "ef5faa840f7bebfe13fd5ed8c203785565896ba7", "filename": "gcc/testsuite/gdc.test/compilable/test19145.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19145.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19145.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19145.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,14 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19415\n+\n+struct S\n+{\n+   int x;\n+   S foo() return { return S(x); }\n+   this(this) @disable;\n+}\n+\n+S bar()\n+{\n+   S s;\n+   return s; // Error: struct `S` is not copyable because it is annotated with @disable\n+}"}, {"sha": "e8dad45a4017197e2193d684f17d341a60d6fdfc", "filename": "gcc/testsuite/gdc.test/compilable/test20894.d", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest20894.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest20894.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest20894.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,46 @@\n+// https://issues.dlang.org/show_bug.cgi?id=20894\n+\n+mixin template MT()\n+{\n+    int   a;\n+    alias b = char;\n+    void  c() {}\n+}\n+\n+struct S\n+{\n+    mixin MT mt;\n+}\n+\n+void main()\n+{\n+    auto r = S();\n+    enum c = S();\n+\n+    foo!(S.mt);\n+    foo!(r.mt);\n+    foo!(c.mt);          // OK <- ICE\n+\n+    foo!(mixin(\"S.mt\"));\n+    foo!(mixin(\"r.mt\")); // OK <- ICE\n+    foo!(mixin(\"c.mt\")); // OK <- ICE\n+\n+    // some checks\n+    foo!(r.mt, c.mt);\n+    foo!(mixin(\"r.mt\"), c.mt);\n+    foo!(r.mt, mixin(\"c.mt\"));\n+    foo!(S.mt, mixin(\"c.mt\"));\n+}\n+\n+alias Tup(T...) = T;\n+\n+void foo(A...)()\n+{\n+    static if (A.length == 2)\n+    {\n+        static assert(__traits(isSame, A[0], A[1]));\n+        enum members = __traits(allMembers, A[0]);\n+        static assert(members == __traits(allMembers, A[1]));\n+        static assert(members == Tup!(\"a\", \"b\", \"c\"));\n+    }\n+}"}, {"sha": "9cf33f5fc17c852683e0b6ae88924ac78d56cddc", "filename": "gcc/testsuite/gdc.test/compilable/test21812.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21812.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21812.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21812.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21812\n+\n+struct S(A...)\n+{\n+   A args;\n+}\n+\n+static assert(__traits(allMembers, S!(int, float)) == AliasSeq!(\"args\"));\n+\n+alias AliasSeq(T...) = T;"}, {"sha": "857f9a4b5325b67e6b9348373c4148ac019a689e", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag19196.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag19196.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag19196.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag19196.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,16 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/diag19196.d(11): Error: unable to determine fields of `B` because of forward references\n+fail_compilation/diag19196.d(15): Error: template instance `diag19196.Foo!(B)` error instantiating\n+---\n+*/\n+module diag19196;\n+struct Foo(T)\n+{\n+    alias F = typeof(T.tupleof);\n+}\n+struct B\n+{\n+    Foo!B b;\n+}"}, {"sha": "63951e67727ea78ce218c132d4fa99815e94a35a", "filename": "gcc/testsuite/gdc.test/fail_compilation/test16228.d", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16228.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16228.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest16228.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -1,13 +1,13 @@\n /* REQUIRED_ARGS: -dip25\n    TEST_OUTPUT:\n ---\n-fail_compilation/test16228.d(22): Error: function type 'return int()' has 'return' but does not return any indirections\n-fail_compilation/test16228.d(23): Error: function test16228.S.foo static member has no 'this' to which 'return' can apply\n+fail_compilation/test16228.d(23): Error: function `test16228.S.bar` `static` member has no `this` to which `return` can apply\n ---\n */\n \n \n \n+\n // https://issues.dlang.org/show_bug.cgi?id=16228\n \n int* wrap ( return ref int input )\n@@ -20,5 +20,16 @@ struct S\n     int x;\n \n     int foo() return { return 3; }\n-    static ref int foo() return { return x; }\n+    static ref int bar() return { return x; }\n+}\n+\n+\n+// https://issues.dlang.org/show_bug.cgi?id=18963\n+\n+T Identity(T)(return T t) { return t; }\n+\n+void bar(int i, void* p)\n+{\n+    Identity(p);\n+    Identity(i);\n }"}, {"sha": "2f1bad135506398b96b3e591de612c2c25fc6bfa", "filename": "gcc/testsuite/gdc.test/fail_compilation/test20919.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20919.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0344b5b822b310921a432b9ffcb9ea0b3964820d/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20919.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest20919.d?ref=0344b5b822b310921a432b9ffcb9ea0b3964820d", "patch": "@@ -0,0 +1,13 @@\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/test20919.d(12): Error: `__traits(getAttributes, int a)` does not give a valid type\n+---\n+*/\n+// https://issues.dlang.org/show_bug.cgi?id=20919\n+\n+void foo(int a) {}\n+\n+static if (is(typeof(foo) params == __parameters))\n+{\n+    __traits(getAttributes, params) a;\n+}"}]}