{"sha": "e30297734180690f3db8352edc4a6abca305485b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwMjk3NzM0MTgwNjkwZjNkYjgzNTJlZGM0YTZhYmNhMzA1NDg1Yg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-09-25T06:29:23Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-09-25T06:29:23Z"}, "message": "* config.gcc (widely ported systems section): Reindent and clean up.\n\nFrom-SVN: r71756", "tree": {"sha": "b942fcbbf155d9ba680946b4a8ad2df7aa5cac30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b942fcbbf155d9ba680946b4a8ad2df7aa5cac30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e30297734180690f3db8352edc4a6abca305485b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30297734180690f3db8352edc4a6abca305485b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30297734180690f3db8352edc4a6abca305485b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30297734180690f3db8352edc4a6abca305485b/comments", "author": null, "committer": null, "parents": [{"sha": "b597bfd83791949b2b70b44859207148aad14694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b597bfd83791949b2b70b44859207148aad14694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b597bfd83791949b2b70b44859207148aad14694"}], "stats": {"total": 290, "additions": 148, "deletions": 142}, "files": [{"sha": "3d313a8b1d56b45c84ef4d18b50586a465f8c345", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30297734180690f3db8352edc4a6abca305485b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30297734180690f3db8352edc4a6abca305485b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e30297734180690f3db8352edc4a6abca305485b", "patch": "@@ -1,5 +1,7 @@\n 2003-09-25  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* config.gcc (widely ported systems section): Reindent and clean up.\n+\n \t* config.gcc: Remove some unnecessary uses of 'x' in case statements.\n \tActually allow ep9312 as an arm --with-arch setting.\n "}, {"sha": "f52a4d500212ed71f9deccfb4106b2be967f6cf6", "filename": "gcc/config.gcc", "status": "modified", "additions": 146, "deletions": 142, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30297734180690f3db8352edc4a6abca305485b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30297734180690f3db8352edc4a6abca305485b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e30297734180690f3db8352edc4a6abca305485b", "patch": "@@ -327,159 +327,163 @@ esac\n \n # Common parts for widely ported systems.\n case ${target} in\n+*-*-linux*libc1* | *-*-linux*aout*)\n+  # Avoid the generic linux case.\n+  ;;\n *-*-linux*)\n-\tcase ${target} in\n-\t *-*-linux*libc1* | *-*-linux*aout*)\n-\t\t;;\n-\t*)\n-\t\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n-\t\tgas=yes gnu_ld=yes\n-\t\tcase x${enable_threads} in\n-\t\t\tx | xyes | xposix) thread_file='posix'\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\tesac\n-\t;;\n+  extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n+  gas=yes\n+  gnu_ld=yes\n+  case ${enable_threads} in\n+    \"\" | yes | posix) thread_file='posix' ;;\n+  esac\n+  ;;\n *-*-gnu*)\n-\t# On the Hurd, the setup is just about the same on\n-\t# each different CPU.  The specific machines that we\n-\t# support are matched above and just set $cpu_type.\n-\ttm_file=\"${cpu_type}/gnu.h\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n-\t# GNU tools are the only tools.\n-\tgnu_ld=yes\n-\tgas=yes\n-\t# These details are the same as for Linux.\n-\t# But here we need a little extra magic.\n-\ttmake_file=\"t-slibgcc-elf-ver t-linux t-gnu\"\n-\tcase ${target} in\n-\talpha*)\n-\t\ttm_file=\"${cpu_type}/${cpu_type}.h alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h ${tm_file}\"\n-\t\t;;\n-\ti[34567]86-*-*)\n-\t\ttm_file=\"${cpu_type}/${cpu_type}.h i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h i386/linux.h gnu.h ${tm_file}\"\n-\t\t;;\n-\tesac\n-\t;;\n+  # On the Hurd, the setup is just about the same on\n+  # each different CPU.  The specific machines that we\n+  # support are matched above and just set $cpu_type.\n+  tm_file=\"${cpu_type}/gnu.h\"\n+  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n+  # GNU tools are the only tools.\n+  gas=yes\n+  gnu_ld=yes\n+  # These details are the same as for Linux.\n+  # But here we need a little extra magic.\n+  tmake_file=\"t-slibgcc-elf-ver t-linux t-gnu\"\n+  case ${target} in\n+    alpha*)\n+      tm_file=\"${cpu_type}/${cpu_type}.h alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h ${tm_file}\"\n+      ;;\n+    i[34567]86-*-*)\n+      tm_file=\"${cpu_type}/${cpu_type}.h i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h i386/linux.h gnu.h ${tm_file}\"\n+      ;;\n+  esac\n+  ;;\n *-*-openbsd*)\n-\ttmake_file=\"t-libc-ok t-openbsd t-libgcc-pic\"\n-\tif test x$enable_threads = xyes; then\n-\t\tthread_file='posix'\n-\t\ttmake_file=\"${tmake_file} t-openbsd-thread\"\n-\tfi\n-\t;;\n+  tmake_file=\"t-libc-ok t-openbsd t-libgcc-pic\"\n+  case ${enable_threads} in\n+    yes)\n+      thread_file='posix'\n+      tmake_file=\"${tmake_file} t-openbsd-thread\"\n+      ;;\n+  esac\n+  ;;\n *-*-netbsd*)\n-\ttmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\"\n-\tgas=yes\n-\tgnu_ld=yes\n+  tmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\"\n+  gas=yes\n+  gnu_ld=yes\n \n-\t# NetBSD 2.0 and later get POSIX threads enabled by default.\n-\t# Allow them to be explicitly enabled on any other version.\n-\tcase x${enable_threads} in\n-\tx)\n-\t\tcase ${target} in\n-\t\t*-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n-\t\t\tthread_file='posix'\n-\t\t\ttm_defines=\"${tm_defines} NETBSD_ENABLE_PTHREADS\"\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\txyes | xposix)\n-\t\tthread_file='posix'\n-\t\ttm_defines=\"${tm_defines} NETBSD_ENABLE_PTHREADS\"\n-\t\t;;\n-\tesac\n+  # NetBSD 2.0 and later get POSIX threads enabled by default.\n+  # Allow them to be explicitly enabled on any other version.\n+  case ${enable_threads} in\n+    \"\")\n+      case ${target} in\n+        *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n+          thread_file='posix'\n+          tm_defines=\"${tm_defines} NETBSD_ENABLE_PTHREADS\"\n+          ;;\n+      esac\n+      ;;\n+    yes | posix)\n+      thread_file='posix'\n+      tm_defines=\"${tm_defines} NETBSD_ENABLE_PTHREADS\"\n+      ;;\n+  esac\n \n-\t# NetBSD 1.7 and later are set up to use GCC's crtstuff for\n-\t# ELF configurations.  We will clear extra_parts in the\n-\t# a.out configurations.\n-\tcase ${target} in\n-\t*-*-netbsd*1.[7-9]* | *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n-\t\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n-\t\t;;\n-\tesac\n+  # NetBSD 1.7 and later are set up to use GCC's crtstuff for\n+  # ELF configurations.  We will clear extra_parts in the\n+  # a.out configurations.\n+  case ${target} in\n+    *-*-netbsd*1.[7-9]* | *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n+      extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n+      ;;\n+  esac\n \n-\t# NetBSD 2.0 and later provide __cxa_atexit(), which we use by\n-\t# default (unless overridden by --disable-__cxa_atexit).\n-\tcase ${target} in\n-\t*-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n-\t\tdefault_use_cxa_atexit=yes\n-\t\t;;\n-\tesac\n-\t;;\n+  # NetBSD 2.0 and later provide __cxa_atexit(), which we use by\n+  # default (unless overridden by --disable-__cxa_atexit).\n+  case ${target} in\n+    *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n+      default_use_cxa_atexit=yes\n+      ;;\n+  esac\n+  ;;\n *-*-freebsd[12] | *-*-freebsd[12].* | *-*-freebsd*aout*)\n-\t# This is the place-holder for the generic a.out configuration\n-\t# of FreeBSD.  No actual configuration resides here since\n-\t# there was only ever a bare-bones ix86 configuration for\n-\t# a.out and it exists solely in the machine-specific section.\n-\t# This place-holder must exist to avoid dropping into\n-\t# the generic ELF configuration of FreeBSD (i.e. it must be\n-\t# ordered before that section).\n-\t;;\n+  # This is the place-holder for the generic a.out configuration\n+  # of FreeBSD.  No actual configuration resides here since\n+  # there was only ever a bare-bones ix86 configuration for\n+  # a.out and it exists solely in the machine-specific section.\n+  # This place-holder must exist to avoid dropping into\n+  # the generic ELF configuration of FreeBSD (i.e. it must be\n+  # ordered before that section).\n+  ;;\n *-*-freebsd*)\n-\t# This is the generic ELF configuration of FreeBSD.  Later\n-\t# machine-specific sections may refine and add to this\n-\t# configuration.\n-\t#\n-\t# Due to tm_file entry ordering issues that vary between cpu\n-\t# architectures, we only define fbsd_tm_file to allow the\n-\t# machine-specific section to dictate the final order of all\n-\t# entries of tm_file with the minor exception that components\n-\t# of the tm_file set here will always be of the form:\n-\t#\n-\t# freebsd<version_number>.h [freebsd-<conf_option>.h ...] freebsd-spec.h freebsd.h\n-\t#\n-\t# The machine-specific section should not tamper with this\n-\t# ordering but may order all other entries of tm_file as it\n-\t# pleases around the provided core setting.\n-\tgas=yes\n-\tgnu_ld=yes\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n-\tcase ${target} in\n-\t*-*-freebsd3 | *-*-freebsd[3].*) fbsd_tm_file=\"freebsd3.h\";;\n-\t*-*-freebsd4 | *-*-freebsd[4].*) fbsd_tm_file=\"freebsd4.h\";;\n-\t*-*-freebsd5 | *-*-freebsd[5].*) fbsd_tm_file=\"freebsd5.h\";;\n-\t*-*-freebsd6 | *-*-freebsd[6].*) fbsd_tm_file=\"freebsd6.h\";;\n-\t*) echo 'Please update *-*-freebsd* in gcc/config.gcc'; exit 1;;\n-\tesac\n-\ttmake_file=\"t-slibgcc-elf-ver t-freebsd\"\n-\tcase x${enable_threads} in\n-\txno) fbsd_tm_file=\"${fbsd_tm_file} freebsd-nthr.h\";;\n-\tx | xyes | xpthreads | xposix)\n-\t\tthread_file='posix'\n-\t\ttmake_file=\"${tmake_file} t-freebsd-thread\"\n-\t\t# Before 5.0, FreeBSD can't bind shared libraries to -lc\n-\t\t# when \"optionally\" threaded via weak pthread_* checks.\n-\t\tcase ${target} in\n-\t\t*-*-freebsd[34] | *-*-freebsd[34].*)\n-\t\t\ttmake_file=\"${tmake_file} t-slibgcc-nolc-override\";;\n-\t\tesac\n-\t\t;;\n-\t*) echo 'Unknown thread configuration for FreeBSD'; exit 1;;\n-\tesac\n-\tfbsd_tm_file=\"${fbsd_tm_file} freebsd-spec.h freebsd.h\"\n-\t;;\n+  # This is the generic ELF configuration of FreeBSD.  Later\n+  # machine-specific sections may refine and add to this\n+  # configuration.\n+  #\n+  # Due to tm_file entry ordering issues that vary between cpu\n+  # architectures, we only define fbsd_tm_file to allow the\n+  # machine-specific section to dictate the final order of all\n+  # entries of tm_file with the minor exception that components\n+  # of the tm_file set here will always be of the form:\n+  #\n+  # freebsd<version_number>.h [freebsd-<conf_option>.h ...] freebsd-spec.h freebsd.h\n+  #\n+  # The machine-specific section should not tamper with this\n+  # ordering but may order all other entries of tm_file as it\n+  # pleases around the provided core setting.\n+  gas=yes\n+  gnu_ld=yes\n+  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+  case ${target} in\n+    *-*-freebsd3 | *-*-freebsd[3].*) fbsd_tm_file=\"freebsd3.h\";;\n+    *-*-freebsd4 | *-*-freebsd[4].*) fbsd_tm_file=\"freebsd4.h\";;\n+    *-*-freebsd5 | *-*-freebsd[5].*) fbsd_tm_file=\"freebsd5.h\";;\n+    *-*-freebsd6 | *-*-freebsd[6].*) fbsd_tm_file=\"freebsd6.h\";;\n+    *) echo 'Please update *-*-freebsd* in gcc/config.gcc'; exit 1;;\n+  esac\n+  tmake_file=\"t-slibgcc-elf-ver t-freebsd\"\n+  case ${enable_threads} in\n+    no)\n+      fbsd_tm_file=\"${fbsd_tm_file} freebsd-nthr.h\"\n+      ;;\n+    \"\" | yes | pthreads | posix)\n+      thread_file='posix'\n+      tmake_file=\"${tmake_file} t-freebsd-thread\"\n+      # Before 5.0, FreeBSD can't bind shared libraries to -lc\n+      # when \"optionally\" threaded via weak pthread_* checks.\n+      case ${target} in\n+        *-*-freebsd[34] | *-*-freebsd[34].*)\n+          tmake_file=\"${tmake_file} t-slibgcc-nolc-override\"\n+          ;;\n+      esac\n+      ;;\n+    *) \n+      echo 'Unknown thread configuration for FreeBSD'\n+      exit 1\n+      ;;\n+  esac\n+  fbsd_tm_file=\"${fbsd_tm_file} freebsd-spec.h freebsd.h\"\n+  ;;\n *-*-darwin*)\n-\ttm_file=\"${tm_file} darwin.h\"\n-\ttm_p_file=\"${tm_p_file} darwin-protos.h\"\n-\ttmake_file=\"t-darwin\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n-\tc_target_objs=\"darwin-c.o\"\n-\tcxx_target_objs=\"darwin-c.o\"\n-\textra_parts=\"crt2.o\"\n-\textra_objs=\"darwin.o\"\n-\tcase x${enable_threads} in\n-\t     x | xyes | xposix) thread_file='posix'\n-\t     ;;\n-\tesac\n-\t;;\t\n+  tm_file=\"${tm_file} darwin.h\"\n+  tm_p_file=\"${tm_p_file} darwin-protos.h\"\n+  tmake_file=\"t-darwin\"\n+  target_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n+  c_target_objs=\"darwin-c.o\"\n+  cxx_target_objs=\"darwin-c.o\"\n+  extra_parts=\"crt2.o\"\n+  extra_objs=\"darwin.o\"\n+  case ${enable_threads} in\n+    \"\" | yes | posix) thread_file='posix' ;;\n+  esac\n+  ;;\n *-*-vxworks*)\n-\ttmake_file=t-vxworks\n-\ttm_file=\"${tm_file} elfos.h svr4.h vxworks.h\"\n-\tthread_file='vxworks'\n-\tuse_collect2=yes\n-\t;;\n+  tmake_file=t-vxworks\n+  tm_file=\"${tm_file} elfos.h svr4.h vxworks.h\"\n+  thread_file='vxworks'\n+  use_collect2=yes\n+  ;;\n esac\n \n case ${target} in"}]}