{"sha": "152834feffa233ade3fc9c9aa6237c9a447ef62c", "node_id": "C_kwDOANBUbNoAKDE1MjgzNGZlZmZhMjMzYWRlM2ZjOWM5YWE2MjM3YzlhNDQ3ZWY2MmM", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-04T01:20:54Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-11-04T01:35:52Z"}, "message": "Support Intel CMPccXADD\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect cmpccxadd.\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA2_CMPCCXADD_SET,\n\tOPTION_MASK_ISA2_CMPCCXADD_UNSET): New.\n\t(ix86_handle_option): Handle -mcmpccxadd.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_CMPCCXADD.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tcmpccxadd.\n\t* config.gcc: Add cmpccxaddintrin.h.\n\t* config/i386/cpuid.h (bit_CMPCCXADD): New.\n\t* config/i386/i386-builtin-types.def:\n\tAdd DEF_FUNCTION_TYPE(INT, PINT, INT, INT, INT)\n\tand DEF_FUNCTION_TYPE(LONGLONG, PLONGLONG, LONGLONG, LONGLONG, INT).\n\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__CMPCCXADD__.\n\t* config/i386/i386-expand.cc (ix86_expand_special_args_builtin):\n\tAdd new parameter to indicate constant position.\n\tHandle INT_FTYPE_PINT_INT_INT_INT\n\tand LONGLONG_FTYPE_PLONGLONG_LONGLONG_LONGLONG_INT.\n\t* config/i386/i386-isa.def (CMPCCXADD): Add DEF_PTA(CMPCCXADD).\n\t* config/i386/i386-options.cc (isa2_opts): Add -mcmpccxadd.\n\t(ix86_valid_target_attribute_inner_p): Handle cmpccxadd.\n\t* config/i386/i386.opt: Add option -mcmpccxadd.\n\t* config/i386/sync.md (cmpccxadd_<mode>): New define insn.\n\t* config/i386/x86gprintrin.h: Include cmpccxaddintrin.h.\n\t* doc/extend.texi: Document cmpccxadd.\n\t* doc/invoke.texi: Document -mcmpccxadd.\n\t* doc/sourcebuild.texi: Document target cmpccxadd.\n\t* config/i386/cmpccxaddintrin.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/i386-2.C: Add -mcmpccxadd.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/avx-1.c: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-13.c: Add -mcmpccxadd.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n\t* lib/target-supports.exp (check_effective_target_cmpccxadd):\n\tNew.\n\t* gcc.target/i386/cmpccxadd-1.c: New test.\n\t* gcc.target/i386/cmpccxadd-2.c: Ditto.", "tree": {"sha": "906e7ed2ce446ea3d699dad20ad3e1685d8552bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906e7ed2ce446ea3d699dad20ad3e1685d8552bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152834feffa233ade3fc9c9aa6237c9a447ef62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152834feffa233ade3fc9c9aa6237c9a447ef62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152834feffa233ade3fc9c9aa6237c9a447ef62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152834feffa233ade3fc9c9aa6237c9a447ef62c/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29260ce806a3aa415f3642fe5720901dad78531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29260ce806a3aa415f3642fe5720901dad78531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29260ce806a3aa415f3642fe5720901dad78531"}], "stats": {"total": 451, "additions": 436, "deletions": 15}, "files": [{"sha": "f21be393ccbd37df4688a93db09f13f908ef93a5", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -831,6 +831,8 @@ get_available_features (struct __processor_model *cpu_model,\n       __cpuid_count (7, 1, eax, ebx, ecx, edx);\n       if (eax & bit_HRESET)\n \tset_feature (FEATURE_HRESET);\n+      if (eax & bit_CMPCCXADD)\n+\tset_feature(FEATURE_CMPCCXADD);\n       if (avx_usable)\n \t{\n \t  if (eax & bit_AVXVNNI)"}, {"sha": "770e93423b9da34fcfca14abb85018e0abbe97d5", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -110,6 +110,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_BF16_SET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_AVXVNNIINT8_SET OPTION_MASK_ISA2_AVXVNNIINT8\n #define OPTION_MASK_ISA2_AVXNECONVERT_SET OPTION_MASK_ISA2_AVXNECONVERT\n+#define OPTION_MASK_ISA2_CMPCCXADD_SET OPTION_MASK_ISA2_CMPCCXADD\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -283,6 +284,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_WIDEKL_UNSET OPTION_MASK_ISA2_WIDEKL\n #define OPTION_MASK_ISA2_AVXVNNIINT8_UNSET OPTION_MASK_ISA2_AVXVNNIINT8\n #define OPTION_MASK_ISA2_AVXNECONVERT_UNSET OPTION_MASK_ISA2_AVXNECONVERT\n+#define OPTION_MASK_ISA2_CMPCCXADD_UNSET OPTION_MASK_ISA2_CMPCCXADD\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1181,6 +1183,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mcmpccxadd:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_CMPCCXADD_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_CMPCCXADD_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_CMPCCXADD_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_CMPCCXADD_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "e46aa00ca7edef28435901bf55cb7d5260a728b3", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -246,6 +246,7 @@ enum processor_features\n   FEATURE_AVXIFMA,\n   FEATURE_AVXVNNIINT8,\n   FEATURE_AVXNECONVERT,\n+  FEATURE_CMPCCXADD,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "3035e4a8186fc62dbd4a44d91e3d82fbe0b4e72e", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -180,4 +180,5 @@ ISA_NAMES_TABLE_START\n \t\t\tP_NONE, \"-mavxvnniint8\")\n   ISA_NAMES_TABLE_ENTRY(\"avxneconvert\", FEATURE_AVXNECONVERT,\n \t\t\tP_NONE, \"-mavxneconvert\")\n+  ISA_NAMES_TABLE_ENTRY(\"cmpccxadd\", FEATURE_CMPCCXADD, P_NONE, \"-mcmpccxadd\")\n ISA_NAMES_TABLE_END"}, {"sha": "e142af309474bf3410c82d77df8797cfc8fe912f", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -422,7 +422,8 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n-\t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\"\n+\t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n+\t\t       cmpccxaddintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "1afa03bd08ab9f2867009efa0a7beadcde5a087d", "filename": "gcc/config/i386/cmpccxaddintrin.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcmpccxaddintrin.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -0,0 +1,89 @@\n+/* Copyright (C) 2012-2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+#error \"Never use <cmpccxaddintrin.h> directly; include <x86gprintrin.h> instead.\"\n+#endif\n+\n+#ifndef _CMPCCXADDINTRIN_H_INCLUDED\n+#define _CMPCCXADDINTRIN_H_INCLUDED\n+\n+#ifdef __x86_64__\n+\n+#ifndef __CMPCCXADD__\n+#pragma GCC push_options\n+#pragma GCC target(\"cmpccxadd\")\n+#define __DISABLE_CMPCCXADD__\n+#endif /* __CMPCCXADD__ */\n+\n+typedef enum {\n+    _CMPCCX_O,   /* Overflow.  */\n+    _CMPCCX_NO,  /* No overflow.  */\n+    _CMPCCX_B,   /* Below.  */\n+    _CMPCCX_NB,  /* Not below.  */\n+    _CMPCCX_Z,   /* Zero.  */\n+    _CMPCCX_NZ,  /* Not zero.  */\n+    _CMPCCX_BE,  /* Below or equal.  */\n+    _CMPCCX_NBE, /* Neither below nor equal.  */\n+    _CMPCCX_S,   /* Sign.  */\n+    _CMPCCX_NS,  /* No sign.  */\n+    _CMPCCX_P,   /* Parity.  */\n+    _CMPCCX_NP,  /* No parity.  */\n+    _CMPCCX_L,   /* Less.  */\n+    _CMPCCX_NL,  /* Not less.  */\n+    _CMPCCX_LE,  /* Less or equal.  */\n+    _CMPCCX_NLE, /* Neither less nor equal.  */\n+} _CMPCCX_ENUM;\n+\n+#ifdef __OPTIMIZE__\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__cmpccxadd_epi32 (int *__A, int __B, int __C, const _CMPCCX_ENUM __D)\n+{\n+  return __builtin_ia32_cmpccxadd (__A, __B, __C, __D);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__cmpccxadd_epi64 (long long *__A, long long __B, long long __C,\n+\t\t   const _CMPCCX_ENUM __D)\n+{\n+  return __builtin_ia32_cmpccxadd64 (__A, __B, __C, __D);\n+}\n+#else\n+#define __cmpccxadd_epi32(A,B,C,D) \\\n+  __builtin_ia32_cmpccxadd ((int *) (A), (int) (B), (int) (C), \\\n+\t\t\t    (_CMPCCX_ENUM) (D))\n+#define __cmpccxadd_epi64(A,B,C,D) \\\n+  __builtin_ia32_cmpccxadd64 ((long long *) (A), (long long) (B), \\\n+\t\t\t      (long long) (C), (_CMPCCX_ENUM) (D))\n+#endif\n+\n+#ifdef __DISABLE_CMPCCXADD__\n+#undef __DISABLE_CMPCCXADD__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_CMPCCXADD__ */\n+\n+#endif\n+\n+#endif /* _CMPCCXADDINTRIN_H_INCLUDED */"}, {"sha": "19c0d033921e334c4d54c100b632d1d8cd9e5170", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -27,6 +27,7 @@\n /* %eax */\n #define bit_AVXVNNI\t(1 << 4)\n #define bit_AVX512BF16\t(1 << 5)\n+#define bit_CMPCCXADD\t(1 << 7)\n #define bit_HRESET\t(1 << 22)\n #define bit_AVXIFMA\t(1 << 23)\n "}, {"sha": "2af66145d4b59d663b880ddcdb42aded3f7937b4", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1407,3 +1407,7 @@ DEF_FUNCTION_TYPE (V4SF, PCV8HF)\n DEF_FUNCTION_TYPE (V8SF, PCV16HF)\n DEF_FUNCTION_TYPE (V4SF, PCV8BF)\n DEF_FUNCTION_TYPE (V8SF, PCV16BF)\n+\n+# CMPccXADD builtins\n+DEF_FUNCTION_TYPE (INT, PINT, INT, INT, INT)\n+DEF_FUNCTION_TYPE (LONGLONG, PLONGLONG, LONGLONG, LONGLONG, INT)"}, {"sha": "c272c392d0320e8c751c77cd7d621ad083716e52", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -288,6 +288,10 @@ BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneobf162ps_v16bf, \"__built\n BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneoph2ps_v8hf, \"__builtin_ia32_vcvtneoph2ps128\", IX86_BUILTIN_VCVTNEOPH2PS128, UNKNOWN, (int) V4SF_FTYPE_PCV8HF)\n BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneoph2ps_v16hf, \"__builtin_ia32_vcvtneoph2ps256\", IX86_BUILTIN_VCVTNEOPH2PS256, UNKNOWN, (int) V8SF_FTYPE_PCV16HF)\n \n+/* CMPCCXADD */\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_CMPCCXADD, CODE_FOR_cmpccxadd_si, \"__builtin_ia32_cmpccxadd\", IX86_BUILTIN_CMPCCXADD, UNKNOWN, (int) INT_FTYPE_PINT_INT_INT_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_CMPCCXADD, CODE_FOR_cmpccxadd_di, \"__builtin_ia32_cmpccxadd64\", IX86_BUILTIN_CMPCCXADD64, UNKNOWN, (int) LONGLONG_FTYPE_PLONGLONG_LONGLONG_LONGLONG_INT)\n+\n /* AVX512BW */\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_loadv32hi_mask, \"__builtin_ia32_loaddquhi512_mask\", IX86_BUILTIN_LOADDQUHI512_MASK, UNKNOWN, (int) V32HI_FTYPE_PCSHORT_V32HI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_loadv64qi_mask, \"__builtin_ia32_loaddquqi512_mask\", IX86_BUILTIN_LOADDQUQI512_MASK, UNKNOWN, (int) V64QI_FTYPE_PCCHAR_V64QI_UDI)"}, {"sha": "818cfd774916e762d52d721207b6cc41dab7cc4d", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -646,6 +646,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVXVNNIINT8__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVXNECONVERT)\n     def_or_undef (parse_in, \"__AVXNECONVERT__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_CMPCCXADD)\n+    def_or_undef (parse_in, \"__CMPCCXADD__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "a37fde307d1d7f8a8e4952d6e95305b3d493e3ed", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -11860,8 +11860,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n   tree arg;\n   rtx pat, op;\n   unsigned int i, nargs, arg_adjust, memory;\n+  unsigned int constant = 100;\n   bool aligned_mem = false;\n-  rtx xops[3];\n+  rtx xops[4];\n   enum insn_code icode = d->icode;\n   const struct insn_data_d *insn_p = &insn_data[icode];\n   machine_mode tmode = insn_p->operand[0].mode;\n@@ -12152,6 +12153,13 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = load;\n       memory = 0;\n       break;\n+    case INT_FTYPE_PINT_INT_INT_INT:\n+    case LONGLONG_FTYPE_PLONGLONG_LONGLONG_LONGLONG_INT:\n+      nargs = 4;\n+      klass = load;\n+      memory = 0;\n+      constant = 3;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -12217,6 +12225,15 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  if (MEM_ALIGN (op) < align)\n \t    set_mem_align (op, align);\n \t}\n+      else if (i == constant)\n+\t{\n+\t  /* This must be the constant.  */\n+\t  if (!insn_p->operand[nargs].predicate(op, SImode))\n+\t    {\n+\t      error (\"the fourth argument must be one of enum %qs\", \"_CMPCCX_ENUM\");\n+\t      return const0_rtx;\n+\t    }\n+\t}\n       else\n \t{\n \t  /* This must be register.  */\n@@ -12258,6 +12275,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case 3:\n       pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2]);\n       break;\n+    case 4:\n+      pat = GEN_FCN (icode) (target, xops[0], xops[1], xops[2], xops[3]);\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "7ffc73ba23e5073b280358c8d0fdd6c544c8fcc0", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -112,3 +112,4 @@ DEF_PTA(AVX512FP16)\n DEF_PTA(AVXIFMA)\n DEF_PTA(AVXVNNIINT8)\n DEF_PTA(AVXNECONVERT)\n+DEF_PTA(CMPCCXADD)"}, {"sha": "38e3fd6b8c70d88c9fba6adf7212ff6ecaf4ef15", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -230,7 +230,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 },\n   { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA },\n   { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 },\n-  { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT }\n+  { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT },\n+  { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1080,6 +1081,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avxifma\", OPT_mavxifma),\n     IX86_ATTR_ISA (\"avxvnniint8\", OPT_mavxvnniint8),\n     IX86_ATTR_ISA (\"avxneconvert\", OPT_mavxneconvert),\n+    IX86_ATTR_ISA (\"cmpccxadd\",   OPT_mcmpccxadd),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "c4a3bdcf9606cc7116cfe06c992c2e234d376374", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1229,3 +1229,8 @@ mavxneconvert\n Target Mask(ISA2_AVXNECONVERT) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n AVXNECONVERT build-in functions and code generation.\n+\n+mcmpccxadd\n+Target Mask(ISA2_CMPCCXADD) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n+CMPCCXADD build-in functions and code generation."}, {"sha": "ff168b0c5c27207f2e5df7787ecdd035de1c0145", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -37,6 +37,9 @@\n   UNSPECV_CMPXCHG\n   UNSPECV_XCHG\n   UNSPECV_LOCK\n+ \n+  ;; For CMPccXADD support\n+  UNSPECV_CMPCCXADD\n ])\n \n (define_expand \"sse2_lfence\"\n@@ -1061,3 +1064,28 @@\n \t(any_logic:SWI (match_dup 0) (match_dup 1)))]\n   \"\"\n   \"lock{%;} %K2<logic>{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n+\n+;; CMPCCXADD\n+\n+(define_insn \"cmpccxadd_<mode>\"\n+  [(set (match_operand:SWI48x 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI48x\n+\t  [(match_operand:SWI48x 1 \"memory_operand\" \"+m\")\n+\t   (match_operand:SWI48x 2 \"register_operand\" \"0\")\n+\t   (match_operand:SWI48x 3 \"register_operand\" \"r\")\n+\t   (match_operand:SI 4 \"const_0_to_15_operand\" \"n\")]\n+\t  UNSPECV_CMPCCXADD))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SWI48x [(const_int 0)] UNSPECV_CMPCCXADD))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_CMPCCXADD && TARGET_64BIT\"\n+{\n+  char buf[128];\n+  const char *ops = \"cmp%sxadd\\t{%%3, %%0, %%1|%%1, %%0, %%3}\";\n+  char const *cc[16] = {\"o\" ,\"no\", \"b\", \"nb\", \"z\", \"nz\", \"be\", \"nbe\",\n+\t\t\t\"s\", \"ns\", \"p\", \"np\", \"l\", \"nl\", \"le\", \"nle\"};\n+\n+  snprintf (buf, sizeof (buf), ops, cc[INTVAL (operands[4])]);\n+  output_asm_insn (buf, operands);\n+  return \"\";\n+})"}, {"sha": "a84fbe9137d5b2476ac5b805633d626c7054dc2e", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -52,6 +52,8 @@\n \n #include <clzerointrin.h>\n \n+#include <cmpccxaddintrin.h>\n+\n #include <enqcmdintrin.h>\n \n #include <fxsrintrin.h>"}, {"sha": "89d1d143d9f2a0bfbcfd966b8dfcfe58b88de4fa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -7075,6 +7075,11 @@ Enable/disable the generation of the AVXVNNIINT8 instructions.\n @cindex @code{target(\"avxneconvert\")} function attribute, x86\n Enable/disable the generation of the AVXNECONVERT instructions.\n \n+@item cmpccxadd\n+@itemx no-cmpccxadd\n+@cindex @code{target(\"cmpccxadd\")} function attribute, x86\n+Enable/disable the generation of the CMPccXADD instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "834f010dfee5ef23edfcb72adcae5fdda2edd6b1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1437,7 +1437,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n--mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert @gol\n+-mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -32970,6 +32970,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mavxneconvert\n @opindex mavxneconvert\n+@need 200\n+@itemx -mcmpccxadd\n+@opindex mcmpccxadd\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -32980,8 +32983,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT or CLDEMOTE extended instruction sets. Each\n-has a corresponding @option{-mno-} option to disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD or CLDEMOTE extended instruction\n+sets. Each has a corresponding @option{-mno-} option to disable use of these\n+instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "714595d33bf320d1ff7e99ae3e9457f6bbed6589", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -2511,6 +2511,9 @@ Target supports the execution of @code{amx-bf16} instructions.\n @item cell_hw\n Test system can execute AltiVec and Cell PPU instructions.\n \n+@item cmpccxadd\n+Target supports the execution of @code{cmpccxadd} instructions.\n+\n @item coldfire_fpu\n Target uses a ColdFire FPU.\n "}, {"sha": "f7dbbbbf619570f2480bd9a21b1d8706a59dee72", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "2ac5d9f2df54d14afb5d7cba0b43c59a52f6469d", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "051a1b59b5b0151bbf2a56fda34151b63b6832ad", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -835,6 +835,10 @@\n #define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextri_u32 (X, 1)\n #define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextri_u64 (X, 1)\n \n+/* cmpccxadd.h */\n+#define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n+#define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "c825717e29e835d36c3d666705838908d4d7c775", "filename": "gcc/testsuite/gcc.target/i386/cmpccxadd-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-1.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mcmpccxadd\" } */\n+/* { dg-final { scan-assembler-times \"cmpoxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnoxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpbxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnbxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpzxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnzxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpbexadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnbexadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpsxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnsxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmppxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnpxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmplxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnlxadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmplexadd\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmpnlexadd\\[ \\\\t\\]\" 2 } } */\n+#include <x86gprintrin.h>\n+\n+int *a;\n+int b, c;\n+long long *d;\n+long long e, f;\n+\n+void extern\n+cmpccxadd_test(void)\n+{\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_O);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_O);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NO);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NO);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_B);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_B);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NB);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NB);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_Z);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_Z);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NZ);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NZ);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_BE);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_BE);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NBE);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NBE);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_S);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_S);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NS);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NS);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_P);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_P);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NP);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NP);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_L);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_L);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NL);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NL);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_LE);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_LE);\n+  b = __cmpccxadd_epi32 (a, b, c, _CMPCCX_NLE);\n+  e = __cmpccxadd_epi64 (d, e, f, _CMPCCX_NLE);\n+}"}, {"sha": "e713344a83d62ac15f7625a5af2e092419fc4120", "filename": "gcc/testsuite/gcc.target/i386/cmpccxadd-2.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpccxadd-2.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -0,0 +1,138 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mcmpccxadd\" } */\n+/* { dg-require-effective-target cmpccxadd } */\n+\n+#include <stdlib.h>\n+#include <x86gprintrin.h>\n+\n+int\n+main()\n+{\n+  if (!__builtin_cpu_supports(\"cmpccxadd\"))\n+    return 0;\n+\t\n+  int srcdest1[16] = { -2147483648,1,1,1,1,2,1,2,1,2,4,2,1,1,1,2 };\n+  int srcdest2[16] = { 1,1,2,1,1,1,1,1,2,1,1,1,2,1,1,1 };\n+  int src3[16] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };\n+  int _srcdest1[16], _srcdest2[16], res[16], cond[16];\n+  long long srcdest1_64[16] = { -9223372036854775807LL-1,1,1,1,1,2,1,2,1,2,4,2,1,1,1,2 };\n+  long long srcdest2_64[16] = { 1,1,2,1,1,1,1,1,2,1,1,1,2,1,1,1 };\n+  long long src3_64[16] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };\n+  long long _srcdest1_64[16], _srcdest2_64[16], res_64[16], cond_64[16];\n+\n+  int tmp2[16];\n+  long long tmp2_64[16];\n+\n+  int cf[16] = { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 };\n+  int of[16] = { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };\n+  int sf[16] = { 0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0 };\n+  int zf[16] = { 0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0 };\n+  int af[16] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };\n+  int pf[16] = { 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0 };\n+\n+  for (int i = 0; i < 16; i++)\n+  {\n+    tmp2[i] = srcdest1[i] + src3[i];\n+    tmp2_64[i] = srcdest1_64[i] + src3_64[i];\n+  }\n+\n+  cond[0] = of[0] == 1 ? 1 : 0;\n+  cond[1] = of[1] == 0 ? 1 : 0;\n+  cond[2] = cf[2] == 1 ? 1 : 0;\n+  cond[3] = cf[3] == 0 ? 1 : 0;\n+  cond[4] = zf[4] == 1 ? 1 : 0;\n+  cond[5] = zf[5] == 0 ? 1 : 0;\n+  cond[6] = (cf[6] || zf[6]) == 1 ? 1 : 0;\n+  cond[7] = (cf[7] || zf[7]) == 0 ? 1 : 0;\n+  cond[8] = sf[8] == 1 ? 1 : 0;\n+  cond[9] = sf[9] == 0 ? 1 : 0;\n+  cond[10] = pf[10] == 1 ? 1 : 0;\n+  cond[11] = pf[11] == 0 ? 1 : 0;\n+  cond[12] = ((sf[12] && !of[12]) || (!sf[12] && of[12])) == 1 ? 1 : 0;\n+  cond[13] = ((sf[13] && !of[13]) || (!sf[13] && of[13])) == 0 ? 1 : 0;\n+  cond[14] = (((sf[14] && !of[14]) || (!sf[14] && of[14])) || zf[14]) == 1 ? 1 : 0;\n+  cond[15] = (((sf[15] && !of[15]) || (!sf[15] && of[15])) || zf[15]) == 0 ? 1 : 0;\n+\n+  cond_64[0] = of[0] == 1 ? 1 : 0;\n+  cond_64[1] = of[1] == 0 ? 1 : 0;\n+  cond_64[2] = cf[2] == 1 ? 1 : 0;\n+  cond_64[3] = cf[3] == 0 ? 1 : 0;\n+  cond_64[4] = zf[4] == 1 ? 1 : 0;\n+  cond_64[5] = zf[5] == 0 ? 1 : 0;\n+  cond_64[6] = (cf[6] || zf[6]) == 1 ? 1 : 0;\n+  cond_64[7] = (cf[7] || zf[7]) == 0 ? 1 : 0;\n+  cond_64[8] = sf[8] == 1 ? 1 : 0;\n+  cond_64[9] = sf[9] == 0 ? 1 : 0;\n+  cond_64[10] = pf[10] == 1 ? 1 : 0;\n+  cond_64[11] = pf[11] == 0 ? 1 : 0;\n+  cond_64[12] = ((sf[12] && !of[12]) || (!sf[12] && of[12])) == 1 ? 1 : 0;\n+  cond_64[13] = ((sf[13] && !of[13]) || (!sf[13] && of[13])) == 0 ? 1 : 0;\n+  cond_64[14] = (((sf[14] && !of[14]) || (!sf[14] && of[14])) || zf[14]) == 1 ? 1 : 0;\n+  cond_64[15] = (((sf[15] && !of[15]) || (!sf[15] && of[15])) || zf[15]) == 0 ? 1 : 0;\n+\n+  for (int i = 0; i < 16; i++)\n+  {\n+    if (cond[i] == 1)\n+    {\n+      _srcdest1[i] = tmp2[i];\n+    }\n+    else\n+    {\n+      _srcdest1[i] = srcdest1[i];\n+    }\n+    if (cond_64[i] == 1)\n+    {\n+      _srcdest1_64[i] = tmp2_64[i];\n+    }\n+    else\n+    {\n+      _srcdest1_64[i] = srcdest1_64[i];\n+    }\n+    _srcdest2[i] = srcdest1[i];\n+    _srcdest2_64[i] = srcdest1_64[i];\n+  }\n+\n+  res[0] = __cmpccxadd_epi32 (&srcdest1[0], srcdest2[0], src3[0], _CMPCCX_O);\n+  res[1] = __cmpccxadd_epi32 (&srcdest1[1], srcdest2[1], src3[1], _CMPCCX_NO);\n+  res[2] = __cmpccxadd_epi32 (&srcdest1[2], srcdest2[2], src3[2], _CMPCCX_B);\n+  res[3] = __cmpccxadd_epi32 (&srcdest1[3], srcdest2[3], src3[3], _CMPCCX_NB);\n+  res[4] = __cmpccxadd_epi32 (&srcdest1[4], srcdest2[4], src3[4], _CMPCCX_Z);\n+  res[5] = __cmpccxadd_epi32 (&srcdest1[5], srcdest2[5], src3[5], _CMPCCX_NZ);\n+  res[6] = __cmpccxadd_epi32 (&srcdest1[6], srcdest2[6], src3[6], _CMPCCX_BE);\n+  res[7] = __cmpccxadd_epi32 (&srcdest1[7], srcdest2[7], src3[7], _CMPCCX_NBE);\n+  res[8] = __cmpccxadd_epi32 (&srcdest1[8], srcdest2[8], src3[8], _CMPCCX_S);\n+  res[9] = __cmpccxadd_epi32 (&srcdest1[9], srcdest2[9], src3[9], _CMPCCX_NS);\n+  res[10] = __cmpccxadd_epi32 (&srcdest1[10], srcdest2[10], src3[10], _CMPCCX_P);\n+  res[11] = __cmpccxadd_epi32 (&srcdest1[11], srcdest2[11], src3[11], _CMPCCX_NP);\n+  res[12] = __cmpccxadd_epi32 (&srcdest1[12], srcdest2[12], src3[12], _CMPCCX_L);\n+  res[13] = __cmpccxadd_epi32 (&srcdest1[13], srcdest2[13], src3[13], _CMPCCX_NL);\n+  res[14] = __cmpccxadd_epi32 (&srcdest1[14], srcdest2[14], src3[14], _CMPCCX_LE);\n+  res[15] = __cmpccxadd_epi32 (&srcdest1[15], srcdest2[15], src3[15], _CMPCCX_NLE);\n+\n+  res_64[0] = __cmpccxadd_epi64 (&srcdest1_64[0], srcdest2_64[0], src3_64[0], _CMPCCX_O);\n+  res_64[1] = __cmpccxadd_epi64 (&srcdest1_64[1], srcdest2_64[1], src3_64[1], _CMPCCX_NO);\n+  res_64[2] = __cmpccxadd_epi64 (&srcdest1_64[2], srcdest2_64[2], src3_64[2], _CMPCCX_B);\n+  res_64[3] = __cmpccxadd_epi64 (&srcdest1_64[3], srcdest2_64[3], src3_64[3], _CMPCCX_NB);\n+  res_64[4] = __cmpccxadd_epi64 (&srcdest1_64[4], srcdest2_64[4], src3_64[4], _CMPCCX_Z);\n+  res_64[5] = __cmpccxadd_epi64 (&srcdest1_64[5], srcdest2_64[5], src3_64[5], _CMPCCX_NZ);\n+  res_64[6] = __cmpccxadd_epi64 (&srcdest1_64[6], srcdest2_64[6], src3_64[6], _CMPCCX_BE);\n+  res_64[7] = __cmpccxadd_epi64 (&srcdest1_64[7], srcdest2_64[7], src3_64[7], _CMPCCX_NBE);\n+  res_64[8] = __cmpccxadd_epi64 (&srcdest1_64[8], srcdest2_64[8], src3_64[8], _CMPCCX_S);\n+  res_64[9] = __cmpccxadd_epi64 (&srcdest1_64[9], srcdest2_64[9], src3_64[9], _CMPCCX_NS);\n+  res_64[10] = __cmpccxadd_epi64 (&srcdest1_64[10], srcdest2_64[10], src3_64[10], _CMPCCX_P);\n+  res_64[11] = __cmpccxadd_epi64 (&srcdest1_64[11], srcdest2_64[11], src3_64[11], _CMPCCX_NP);\n+  res_64[12] = __cmpccxadd_epi64 (&srcdest1_64[12], srcdest2_64[12], src3_64[12], _CMPCCX_L);\n+  res_64[13] = __cmpccxadd_epi64 (&srcdest1_64[13], srcdest2_64[13], src3_64[13], _CMPCCX_NL);\n+  res_64[14] = __cmpccxadd_epi64 (&srcdest1_64[14], srcdest2_64[14], src3_64[14], _CMPCCX_LE);\n+  res_64[15] = __cmpccxadd_epi64 (&srcdest1_64[15], srcdest2_64[15], src3_64[15], _CMPCCX_NLE);\n+\n+  for (int i = 0; i < 16; i++)\n+  {\n+    if ((srcdest1[i] != _srcdest1[i]) || (res[i] != _srcdest2[i]))\n+      abort();\n+    if ((srcdest1_64[i] != _srcdest1_64[i]) || (res_64[i] != _srcdest2_64[i]))\n+      abort();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "ab748fad994cac4a970149b51256c733cf33046d", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -83,6 +83,7 @@ extern void test_avx512fp16 (void)\t\t__attribute__((__target__(\"avx512fp16\")));\n extern void test_avxifma (void)\t\t\t__attribute__((__target__(\"avxifma\")));\n extern void test_avxvnniint8 (void)\t\t__attribute__((__target__(\"avxvnniint8\")));\n extern void test_avxneconvert (void)\t\t__attribute__((__target__(\"avxneconvert\")));\n+extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -167,6 +168,7 @@ extern void test_no_avx512fp16 (void)\t\t__attribute__((__target__(\"no-avx512fp16\"\n extern void test_no_avxifma (void)\t\t__attribute__((__target__(\"no-avxifma\")));\n extern void test_no_avxvnniint8 (void)\t\t__attribute__((__target__(\"no-avxvnniint8\")));\n extern void test_no_avxneconvert (void)\t\t__attribute__((__target__(\"no-avxneconvert\")));\n+extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cmpccxadd\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "e947b4347f4b3af7acd824d06ae8d3692a8a5a29", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -842,4 +842,8 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n+/* cmpccxadd.h */\n+#define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n+#define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n+\n #include <x86intrin.h>"}, {"sha": "757ba9c9a7dc8525dfc06c77827bc7f09e208d43", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -843,6 +843,10 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n+/* cmpccxadd.h */\n+#define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n+#define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd\")\n \n #include <x86intrin.h>"}, {"sha": "76de89d0cb701d718b8dd068dfd4834714c4245c", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,7 +1,7 @@\n /* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n /* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n-/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n \n #include <x86gprintrin.h>\n "}, {"sha": "aefad77f864e206fd0edb064bb16899a1dca74a3", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n-/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile with optimization.\n    All of them are defined as inline functions that reference the proper\n@@ -28,4 +28,8 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(N) __builtin_ia32_xabort(1)\n \n+/* cmpccxadd.h */\n+#define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n+#define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n+\n #include <x86gprintrin.h>"}, {"sha": "261c9180aa07fe05475a6f4e9b0f5dc95e23cd5b", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n-/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mcmpccxadd -muintr\" { target { ! ia32 } } }  */\n \n /* Test that the intrinsics in <x86gprintrin.h> compile without optimization.\n    All of them are defined as inline functions that reference the proper"}, {"sha": "7f76b87093480731c6432ea780db27097404a95b", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -15,7 +15,7 @@\n \n #ifndef DIFFERENT_PRAGMAS\n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,cmpccxadd,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n #else\n #pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n #endif"}, {"sha": "54d826c4f46c1dcd025e4dc4903ed51bcc4a96aa", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -27,8 +27,12 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n+/* cmpccxadd.h */\n+#define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n+#define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n+\n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,cmpccxadd,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #else\n #pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #endif"}, {"sha": "0e45a2baed59ab72bad0fb221534bd9884aa95b0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152834feffa233ade3fc9c9aa6237c9a447ef62c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=152834feffa233ade3fc9c9aa6237c9a447ef62c", "patch": "@@ -9561,6 +9561,16 @@ proc check_effective_target_avxneconvert { } {\n     } \"-O0 -mavxneconvert\" ]\n }\n \n+# Return 1 if cmpccxadd instructions can be compiled.\n+proc check_effective_target_cmpccxadd { } {\n+    return [check_no_compiler_messages cmpccxadd object {\n+\tint _cmpccxadd_epi32 (int *__A, int __B, int __C, const int __D)\n+        {\n+\t   return (int)__builtin_ia32_cmpccxadd (__A, __B, __C, 1);\n+\t}\n+    } \"-mcmpccxadd\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}