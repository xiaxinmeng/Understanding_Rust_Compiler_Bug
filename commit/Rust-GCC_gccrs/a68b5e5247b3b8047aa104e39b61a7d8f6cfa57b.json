{"sha": "a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4YjVlNTI0N2IzYjgwNDdhYTEwNGUzOWI2MWE3ZDhmNmNmYTU3Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-09-07T20:50:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-09-07T20:50:17Z"}, "message": "Hookize exception personality output.\n\n\t* target.def (TARGET_ASM_EMIT_EXCEPT_PERSONALITY): New hook.\n\t* doc/tm.texi.in: Add doc marker.\n\t* doc/tm.texi: Rebuild.\n\t* except.c (switch_to_exception_section): Always build.\n\t(output_one_function_exception_table): Move section switch,\n\tpersonality output, and label output ...\n\t(output_function_exception_table): ... here.  Use the new\n\tpersonality hook.\n\n\t* config/ia64/ia64.c (ia64_asm_emit_except_personality,\n\tia64_asm_init_sections, TARGET_ASM_EMIT_EXCEPT_PERSONALITY,\n\tTARGET_ASM_INIT_SECTIONS): New.\n\t(ia64_asm_unwind_emit): Rename from process_for_unwind_directive,\n\tmake static.\n\t(TARGET_ASM_UNWIND_EMIT): Update to match.\n\t* config/ia64/ia64-protos.h (process_for_unwind_directive): Remove.\n\n\t* config/arm/arm.c (arm_asm_emit_except_personality): New.\n\t(arm_asm_init_sections): New.\n\t(TARGET_ASM_EMIT_EXCEPT_PERSONALITY, TARGET_ASM_INIT_SECTIONS): New.\n\nFrom-SVN: r163968", "tree": {"sha": "41a92d71cf2cb5360f756b8179c661cc2aee74ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41a92d71cf2cb5360f756b8179c661cc2aee74ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/comments", "author": null, "committer": null, "parents": [{"sha": "9b3a7a26767441121e77c66cf0d04b0d35c77282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3a7a26767441121e77c66cf0d04b0d35c77282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3a7a26767441121e77c66cf0d04b0d35c77282"}], "stats": {"total": 135, "additions": 109, "deletions": 26}, "files": [{"sha": "bca06ce88354a65f73f8b25a4f29d95c8d4b7ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -1,3 +1,26 @@\n+2010-09-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.def (TARGET_ASM_EMIT_EXCEPT_PERSONALITY): New hook.\n+\t* doc/tm.texi.in: Add doc marker.\n+\t* doc/tm.texi: Rebuild.\n+\t* except.c (switch_to_exception_section): Always build.\n+\t(output_one_function_exception_table): Move section switch,\n+\tpersonality output, and label output ...\n+\t(output_function_exception_table): ... here.  Use the new\n+\tpersonality hook.\n+\n+\t* config/ia64/ia64.c (ia64_asm_emit_except_personality,\n+\tia64_asm_init_sections, TARGET_ASM_EMIT_EXCEPT_PERSONALITY,\n+\tTARGET_ASM_INIT_SECTIONS): New.\n+\t(ia64_asm_unwind_emit): Rename from process_for_unwind_directive,\n+\tmake static.\n+\t(TARGET_ASM_UNWIND_EMIT): Update to match.\n+\t* config/ia64/ia64-protos.h (process_for_unwind_directive): Remove.\n+\n+\t* config/arm/arm.c (arm_asm_emit_except_personality): New.\n+\t(arm_asm_init_sections): New.\n+\t(TARGET_ASM_EMIT_EXCEPT_PERSONALITY, TARGET_ASM_INIT_SECTIONS): New.\n+\n 2010-09-07  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.md: Remove unused variable."}, {"sha": "1d547b0db5fa5bac6a786b33ef52b01152dc2dec", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -196,6 +196,8 @@ static bool arm_return_in_memory (const_tree, const_tree);\n #ifdef TARGET_UNWIND_INFO\n static void arm_unwind_emit (FILE *, rtx);\n static bool arm_output_ttype (rtx);\n+static void arm_asm_emit_except_personality (rtx);\n+static void arm_asm_init_sections (void);\n #endif\n static void arm_dwarf_handle_frame_unspec (const char *, rtx, int);\n static rtx arm_dwarf_register_span (rtx);\n@@ -455,6 +457,12 @@ static const struct attribute_spec arm_attribute_table[] =\n \n #undef TARGET_ARM_EABI_UNWINDER\n #define TARGET_ARM_EABI_UNWINDER true\n+\n+#undef TARGET_ASM_EMIT_EXCEPT_PERSONALITY\n+#define TARGET_ASM_EMIT_EXCEPT_PERSONALITY arm_asm_emit_except_personality\n+\n+#undef TARGET_ASM_INIT_SECTIONS\n+#define TARGET_ASM_INIT_SECTIONS arm_asm_init_sections\n #endif /* TARGET_UNWIND_INFO */\n \n #undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n@@ -22209,6 +22217,25 @@ arm_output_ttype (rtx x)\n \n   return TRUE;\n }\n+\n+/* Implement TARGET_ASM_EMIT_EXCEPT_PERSONALITY.  */\n+\n+static void\n+arm_asm_emit_except_personality (rtx personality)\n+{\n+  fputs (\"\\t.personality\\t\", asm_out_file);\n+  output_addr_const (asm_out_file, personality);\n+  fputc ('\\n', asm_out_file);\n+}\n+\n+/* Implement TARGET_ASM_INITIALIZE_SECTIONS.  */\n+\n+static void\n+arm_asm_init_sections (void)\n+{\n+  exception_section = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t\t   \"\\t.handlerdata\");\n+}\n #endif /* TARGET_UNWIND_INFO */\n \n "}, {"sha": "4fc6a425691d49e5c67aef0aa4ac026353ab4481", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -59,7 +59,6 @@ extern void ia64_print_operand (FILE *, rtx, int);\n extern enum reg_class ia64_preferred_reload_class (rtx, enum reg_class);\n extern enum reg_class ia64_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   enum machine_mode, rtx);\n-extern void process_for_unwind_directive (FILE *, rtx);\n extern const char *get_bundle_name (int);\n #endif /* RTX_CODE */\n "}, {"sha": "17b6a47b0db14382e7ffd53385e91bc5da5647ad", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -247,6 +247,10 @@ static int ia64_sched_reorder (FILE *, int, rtx *, int *, int);\n static int ia64_sched_reorder2 (FILE *, int, rtx *, int *, int);\n static int ia64_variable_issue (FILE *, int, rtx, int);\n \n+static void ia64_asm_unwind_emit (FILE *, rtx);\n+static void ia64_asm_emit_except_personality (rtx);\n+static void ia64_asm_init_sections (void);\n+\n static struct bundle_state *get_free_bundle_state (void);\n static void free_bundle_state (struct bundle_state *);\n static void initiate_bundle_states (void);\n@@ -521,7 +525,11 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ia64_gimplify_va_arg\n \n #undef TARGET_ASM_UNWIND_EMIT\n-#define TARGET_ASM_UNWIND_EMIT process_for_unwind_directive\n+#define TARGET_ASM_UNWIND_EMIT ia64_asm_unwind_emit\n+#undef TARGET_ASM_EMIT_EXCEPT_PERSONALITY\n+#define TARGET_ASM_EMIT_EXCEPT_PERSONALITY  ia64_asm_emit_except_personality\n+#undef TARGET_ASM_INIT_SECTIONS\n+#define TARGET_ASM_INIT_SECTIONS  ia64_asm_init_sections\n \n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P ia64_scalar_mode_supported_p\n@@ -9845,8 +9853,8 @@ process_set (FILE *asm_out_file, rtx pat, rtx insn, bool unwind, bool frame)\n \n /* This function looks at a single insn and emits any directives\n    required to unwind this insn.  */\n-void\n-process_for_unwind_directive (FILE *asm_out_file, rtx insn)\n+static void\n+ia64_asm_unwind_emit (FILE *asm_out_file, rtx insn)\n {\n   bool unwind = (flag_unwind_tables\n \t\t || (flag_exceptions && !USING_SJLJ_EXCEPTIONS));\n@@ -9909,6 +9917,24 @@ process_for_unwind_directive (FILE *asm_out_file, rtx insn)\n     }\n }\n \n+/* Implement TARGET_ASM_EMIT_EXCEPT_PERSONALITY.  */\n+\n+static void\n+ia64_asm_emit_except_personality (rtx personality)\n+{\n+  fputs (\"\\t.personality\\t\", asm_out_file);\n+  output_addr_const (asm_out_file, personality);\n+  fputc ('\\n', asm_out_file);\n+}\n+\n+/* Implement TARGET_ASM_INITIALIZE_SECTIONS.  */\n+\n+static void\n+ia64_asm_init_sections (void)\n+{\n+  exception_section = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t\t   \"\\t.handlerdata\");\n+}\n \f\n enum ia64_builtins\n {"}, {"sha": "e60392f9fa825b9c776962a4486f972d4ea53ab4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -8744,6 +8744,10 @@ to be broken up according to function.\n The default is that no label is emitted.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_EMIT_EXCEPT_PERSONALITY (rtx @var{personality})\n+If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be used to emit a directive to install a personality hook into the unwind info.  This hook should not be used if dwarf2 unwind info is used.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_ASM_UNWIND_EMIT (FILE *@var{stream}, rtx @var{insn})\n This target hook emits assembly directives required to unwind the\n given instruction.  This is only used when TARGET_UNWIND_INFO is set."}, {"sha": "17fcd4bd4dec84121373407ec6be915a096413b3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -8734,6 +8734,8 @@ to be broken up according to function.\n The default is that no label is emitted.\n @end deftypefn\n \n+@hook TARGET_ASM_EMIT_EXCEPT_PERSONALITY\n+\n @hook TARGET_ASM_UNWIND_EMIT\n This target hook emits assembly directives required to unwind the\n given instruction.  This is only used when TARGET_UNWIND_INFO is set."}, {"sha": "bfffa447d9ced5fc7351208a5748a340bd89b6a2", "filename": "gcc/except.c", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -2794,7 +2794,6 @@ sjlj_output_call_site_table (void)\n   call_site_base += n;\n }\n \n-#ifndef TARGET_UNWIND_INFO\n /* Switch to the section that should be used for exception tables.  */\n \n static void\n@@ -2844,7 +2843,6 @@ switch_to_exception_section (const char * ARG_UNUSED (fnname))\n \n   switch_to_section (s);\n }\n-#endif\n \n \n /* Output a reference from an exception table to the type_info object TYPE.\n@@ -2904,8 +2902,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n }\n \n static void\n-output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n-\t\t\t\t     int section, rtx ARG_UNUSED (personality))\n+output_one_function_exception_table (int section)\n {\n   int tt_format, cs_format, lp_format, i;\n #ifdef HAVE_AS_LEB128\n@@ -2918,20 +2915,6 @@ output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n   int have_tt_data;\n   int tt_format_size = 0;\n \n-#ifdef TARGET_UNWIND_INFO\n-  /* TODO: Move this into target file.  */\n-  fputs (\"\\t.personality\\t\", asm_out_file);\n-  output_addr_const (asm_out_file, personality);\n-  fputs (\"\\n\\t.handlerdata\\n\", asm_out_file);\n-  /* Note that varasm still thinks we're in the function's code section.\n-     The \".endp\" directive that will immediately follow will take us back.  */\n-#else\n-  switch_to_exception_section (fnname);\n-#endif\n-\n-  /* If the target wants a label to begin the table, emit it here.  */\n-  targetm.asm_out.emit_except_table_label (asm_out_file);\n-\n   have_tt_data = (VEC_length (tree, cfun->eh->ttype_data)\n \t\t  || (targetm.arm_eabi_unwinder\n \t\t      ? VEC_length (tree, cfun->eh->ehspec_data.arm_eabi)\n@@ -3095,7 +3078,7 @@ output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n }\n \n void\n-output_function_exception_table (const char * ARG_UNUSED (fnname))\n+output_function_exception_table (const char *fnname)\n {\n   rtx personality = get_personality_function (current_function_decl);\n \n@@ -3104,11 +3087,21 @@ output_function_exception_table (const char * ARG_UNUSED (fnname))\n     return;\n \n   if (personality)\n-    assemble_external_libcall (personality);\n+    {\n+      assemble_external_libcall (personality);\n+\n+      if (targetm.asm_out.emit_except_personality)\n+\ttargetm.asm_out.emit_except_personality (personality);\n+    }\n+\n+  switch_to_exception_section (fnname);\n+\n+  /* If the target wants a label to begin the table, emit it here.  */\n+  targetm.asm_out.emit_except_table_label (asm_out_file);\n \n-  output_one_function_exception_table (fnname, 0, personality);\n+  output_one_function_exception_table (0);\n   if (crtl->eh.call_site_record[1] != NULL)\n-    output_one_function_exception_table (fnname, 1, personality);\n+    output_one_function_exception_table (1);\n \n   switch_to_section (current_function_section ());\n }"}, {"sha": "6910ce9e2327f96847f4c6a67579749fbbcd182c", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=a68b5e5247b3b8047aa104e39b61a7d8f6cfa57b", "patch": "@@ -145,6 +145,15 @@ DEFHOOK\n  void, (FILE *stream),\n  default_emit_except_table_label)\n \n+/* Emit a directive for setting the personality for the function.  */\n+DEFHOOK\n+(emit_except_personality,\n+ \"If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be\\\n+ used to emit a directive to install a personality hook into the unwind\\\n+ info.  This hook should not be used if dwarf2 unwind info is used.\",\n+ void, (rtx personality),\n+ NULL)\n+\n /* Emit any directives required to unwind this instruction.  */\n DEFHOOK\n (unwind_emit,"}]}