{"sha": "452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "node_id": "C_kwDOANBUbNoAKDQ1MmRiNzE2ZDhkZWJiNmUwOWI4NWU0YTBjMGU3M2EwNDdlZDVjMWQ", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2023-02-13T14:33:38Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2023-02-13T14:33:38Z"}, "message": "IBM zSystems: Do not propagate scheduler state across basic blocks [PR108102]\n\nSo far we propagate scheduler state across basic blocks within EBBs and\nreset the state otherwise.  In certain circumstances the entry block of\nan EBB might be empty, i.e., no_real_insns_p is true.  In those cases\nscheduler state is not reset and subsequently wrong state is propagated\nto following blocks of the same EBB.\n\nSince the performance benefit of tracking state across basic blocks is\nquestionable on modern hardware, simply reset the state for each basic\nblock.\n\nFix also resetting f{p,x}d_longrunning.\n\ngcc/ChangeLog:\n\n\tPR target/108102\n\t* config/s390/s390.cc (s390_bb_fallthru_entry_likely): Remove.\n\t(struct s390_sched_state): Initialise to zero.\n\t(s390_sched_variable_issue): For better debuggability also emit\n\tthe current side.\n\t(s390_sched_init): Unconditionally reset scheduler state.", "tree": {"sha": "dcde5ac7a5952d368b9d07da39e9ea88730db91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcde5ac7a5952d368b9d07da39e9ea88730db91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452db716d8debb6e09b85e4a0c0e73a047ed5c1d/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6995ac6f98fdfe9802b41e3bd893a4702f11cc96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6995ac6f98fdfe9802b41e3bd893a4702f11cc96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6995ac6f98fdfe9802b41e3bd893a4702f11cc96"}], "stats": {"total": 42, "additions": 7, "deletions": 35}, "files": [{"sha": "b66edf03f4730bec284107180bbe84c6b47054e3", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452db716d8debb6e09b85e4a0c0e73a047ed5c1d/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452db716d8debb6e09b85e4a0c0e73a047ed5c1d/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "patch": "@@ -14977,29 +14977,6 @@ s390_z10_prevent_earlyload_conflicts (rtx_insn **ready, int *nready_p)\n   ready[0] = tmp;\n }\n \n-/* Returns TRUE if BB is entered via a fallthru edge and all other\n-   incoming edges are less than likely.  */\n-static bool\n-s390_bb_fallthru_entry_likely (basic_block bb)\n-{\n-  edge e, fallthru_edge;\n-  edge_iterator ei;\n-\n-  if (!bb)\n-    return false;\n-\n-  fallthru_edge = find_fallthru_edge (bb->preds);\n-  if (!fallthru_edge)\n-    return false;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (e != fallthru_edge\n-\t&& e->probability >= profile_probability::likely ())\n-      return false;\n-\n-  return true;\n-}\n-\n struct s390_sched_state\n {\n   /* Number of insns in the group.  */\n@@ -15010,7 +14987,7 @@ struct s390_sched_state\n   bool group_of_two;\n } s390_sched_state;\n \n-static struct s390_sched_state sched_state = {0, 1, false};\n+static struct s390_sched_state sched_state;\n \n #define S390_SCHED_ATTR_MASK_CRACKED    0x1\n #define S390_SCHED_ATTR_MASK_EXPANDED   0x2\n@@ -15510,7 +15487,7 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \n \t      s390_get_unit_mask (insn, &units);\n \n-\t      fprintf (file, \";;\\t\\tBACKEND: units on this side unused for: \");\n+\t      fprintf (file, \";;\\t\\tBACKEND: units on this side (%d) unused for: \", sched_state.side);\n \t      for (j = 0; j < units; j++)\n \t\tfprintf (file, \"%d:%d \", j,\n \t\t    last_scheduled_unit_distance[j][sched_state.side]);\n@@ -15548,17 +15525,12 @@ s390_sched_init (FILE *file ATTRIBUTE_UNUSED,\n      current_sched_info->prev_head is the insn before the first insn of the\n      block of insns to be scheduled.\n      */\n-  rtx_insn *insn = current_sched_info->prev_head\n-    ? NEXT_INSN (current_sched_info->prev_head) : NULL;\n-  basic_block bb = insn ? BLOCK_FOR_INSN (insn) : NULL;\n-  if (s390_tune < PROCESSOR_2964_Z13 || !s390_bb_fallthru_entry_likely (bb))\n-    {\n-      last_scheduled_insn = NULL;\n-      memset (last_scheduled_unit_distance, 0,\n+  last_scheduled_insn = NULL;\n+  memset (last_scheduled_unit_distance, 0,\n \t  MAX_SCHED_UNITS * NUM_SIDES * sizeof (int));\n-      sched_state.group_state = 0;\n-      sched_state.group_of_two = false;\n-    }\n+  memset (fpd_longrunning, 0, NUM_SIDES * sizeof (int));\n+  memset (fxd_longrunning, 0, NUM_SIDES * sizeof (int));\n+  sched_state = {};\n }\n \n /* This target hook implementation for TARGET_LOOP_UNROLL_ADJUST calculates"}]}