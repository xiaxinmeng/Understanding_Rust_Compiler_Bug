{"sha": "9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0OWU1YjYyZTc3YWRkYTgxOGI4M2E5YjJmZThmZTNmYzQ3MmQwZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-06-17T11:33:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-17T11:33:31Z"}, "message": "forward_list.h (forward_list::_M_get_Node_allocator): Remove unnecessary uses of operator& and static_cast.\n\n\t* include/bits/forward_list.h (forward_list::_M_get_Node_allocator):\n\tRemove unnecessary uses of operator& and static_cast.\n\t* include/bits/forward_list.tcc\n\t(forward_list::operator=(const forward_list&)): Use __addressof\n\tinstead of operator&.\n\t(forward_list::remove(const _Tp&), forward_list::remove(_Pred)):\n\tRemove invalid static_casts.\n\t* include/debug/forward_list: Use __addressof instead of operator&.\n\t* testsuite/23_containers/forward_list/modifiers/addressof.cc: New.\n\nFrom-SVN: r224553", "tree": {"sha": "cfef7c74317c9bc3a433fcfe7b6fded55112f63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfef7c74317c9bc3a433fcfe7b6fded55112f63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92334d4c5e7cbffa91822ff0305e87eff069296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92334d4c5e7cbffa91822ff0305e87eff069296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92334d4c5e7cbffa91822ff0305e87eff069296"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "250728c85eb9c607f9e2d02caf73053f24990bde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "patch": "@@ -1,5 +1,15 @@\n 2015-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/forward_list.h (forward_list::_M_get_Node_allocator):\n+\tRemove unnecessary uses of operator& and static_cast.\n+\t* include/bits/forward_list.tcc\n+\t(forward_list::operator=(const forward_list&)): Use __addressof\n+\tinstead of operator&.\n+\t(forward_list::remove(const _Tp&), forward_list::remove(_Pred)):\n+\tRemove invalid static_casts.\n+\t* include/debug/forward_list: Use __addressof instead of operator&.\n+\t* testsuite/23_containers/forward_list/modifiers/addressof.cc: New.\n+\n \t* include/ext/alloc_traits.h (__alloc_traits::_S_nothrow_swap()): Use\n \t__is_nothrow_swappable.\n "}, {"sha": "d611aded80e9b23804446e44b57500c541bda4e6", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "patch": "@@ -305,11 +305,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Node_alloc_type&\n       _M_get_Node_allocator() noexcept\n-      { return *static_cast<_Node_alloc_type*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       const _Node_alloc_type&\n       _M_get_Node_allocator() const noexcept\n-      { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       _Fwd_list_base()\n       : _M_impl() { }"}, {"sha": "1e1a02e1d02c9d6146211384d6733f1d0a6d39db", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "patch": "@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     forward_list<_Tp, _Alloc>::\n     operator=(const forward_list& __list)\n     {\n-      if (&__list != this)\n+      if (std::__addressof(__list) != this)\n         {\n \t  if (_Node_alloc_traits::_S_propagate_on_copy_assign())\n \t    {\n@@ -299,8 +299,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     forward_list<_Tp, _Alloc>::\n     remove(const _Tp& __val)\n     {\n-      _Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n-      _Node* __extra = 0;\n+      _Node_base* __curr = &this->_M_impl._M_head;\n+      _Node_base* __extra = nullptr;\n \n       while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n         {\n@@ -314,7 +314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      else\n \t\t__extra = __curr;\n \t    }\n-\t  __curr = static_cast<_Node*>(__curr->_M_next);\n+\t  __curr = __curr->_M_next;\n         }\n \n       if (__extra)\n@@ -327,13 +327,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       forward_list<_Tp, _Alloc>::\n       remove_if(_Pred __pred)\n       {\n-\t_Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n+\t_Node_base* __curr = &this->_M_impl._M_head;\n         while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n           {\n             if (__pred(*__tmp->_M_valptr()))\n               this->_M_erase_after(__curr);\n             else\n-              __curr = static_cast<_Node*>(__curr->_M_next);\n+              __curr = __curr->_M_next;\n           }\n       }\n "}, {"sha": "d22c22fae41a2a528a2003a2fd1cbd9457b097aa", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "patch": "@@ -105,7 +105,7 @@ namespace __gnu_debug\n \t      __bbegin_its = __victim_base;\n \t    }\n \t  else\n-\t    __victim_base->_M_sequence = &__lhs;\n+\t    __victim_base->_M_sequence = std::__addressof(__lhs);\n \t}\n \n       if (__bbegin_its)\n@@ -523,7 +523,7 @@ namespace __debug\n       splice_after(const_iterator __pos, forward_list&& __list)\n       {\n \t__glibcxx_check_insert_after(__pos);\n-\t_GLIBCXX_DEBUG_VERIFY(&__list != this,\n+\t_GLIBCXX_DEBUG_VERIFY(std::__addressof(__list) != this,\n \t\t\t      _M_message(__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n \t_GLIBCXX_DEBUG_VERIFY(__list.get_allocator() == this->get_allocator(),\n@@ -550,7 +550,7 @@ namespace __debug\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_before_dereferenceable(),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_bad)\n \t\t\t      ._M_iterator(__i, \"__i\"));\n-\t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(&__list),\n+\t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(std::__addressof(__list)),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t      ._M_iterator(__i, \"__i\")\n \t\t\t      ._M_sequence(__list, \"__list\"));\n@@ -577,9 +577,10 @@ namespace __debug\n       splice_after(const_iterator __pos, forward_list&& __list,\n \t\t   const_iterator __before, const_iterator __last)\n       {\n+\tauto __listptr = std::__addressof(__list);\n \t__glibcxx_check_insert_after(__pos);\n \t__glibcxx_check_valid_range(__before, __last);\n-\t_GLIBCXX_DEBUG_VERIFY(__before._M_attached_to(&__list),\n+\t_GLIBCXX_DEBUG_VERIFY(__before._M_attached_to(__listptr),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n \t\t\t      ._M_sequence(__list, \"list\")\n \t\t\t      ._M_iterator(__before, \"before\"));\n@@ -607,7 +608,7 @@ namespace __debug\n \t\t\t\t  ._M_sequence(__list, \"list\")\n \t\t\t\t  ._M_iterator(__before, \"before\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n-\t    _GLIBCXX_DEBUG_VERIFY(&__list != this || __tmp != __pos.base(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__listptr != this || __tmp != __pos.base(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_splice_overlap)\n \t\t\t\t  ._M_iterator(__tmp, \"position\")\n \t\t\t\t  ._M_iterator(__before, \"before\")\n@@ -694,7 +695,7 @@ namespace __debug\n       void\n       merge(forward_list&& __list)\n       {\n-\tif (this != &__list)\n+\tif (this != std::__addressof(__list))\n \t{\n \t  __glibcxx_check_sorted(_Base::begin(), _Base::end());\n \t  __glibcxx_check_sorted(__list._M_base().begin(),\n@@ -716,7 +717,7 @@ namespace __debug\n \tvoid\n \tmerge(forward_list&& __list, _Comp __comp)\n \t{\n-\t  if (this != &__list)\n+\t  if (this != std::__addressof(__list))\n \t  {\n \t    __glibcxx_check_sorted_pred(_Base::begin(), _Base::end(), __comp);\n \t    __glibcxx_check_sorted_pred(__list._M_base().begin(),"}, {"sha": "3c325f7b9ba8ae6d16f99d69d0234501fd92bee2", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/addressof.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2Faddressof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649e5b62e77adda818b83a9b2fe8fe3fc472d0f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2Faddressof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2Faddressof.cc?ref=9649e5b62e77adda818b83a9b2fe8fe3fc472d0f", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <forward_list>\n+\n+namespace N\n+{\n+  // This operator& must not be found by ADL.\n+  template<typename T> void operator&(const T&) { }\n+  struct X { };\n+  bool operator==(const X&, const X&);\n+  bool operator<(const X&, const X&);\n+}\n+\n+template class std::forward_list<N::X>;"}]}