{"sha": "e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkM2I0NTI4ZmM4N2MxZjhmZGMyZDE5Mjc5MmVhMDQzNTdjMmE4MQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-10-18T23:12:20Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-10-18T23:12:20Z"}, "message": "ffi.c (ffi_prep_closure): Set T bit in trampoline for the function returning a structure pointed with R2.\n\n\t* src/sh/ffi.c (ffi_prep_closure): Set T bit in trampoline for\n\tthe function returning a structure pointed with R2.\n\t* src/sh/sysv.S (ffi_closure_SYSV): Use R2 as the pointer to\n\tthe structure return value if T bit set.  Emit position\n\tindependent code and EH data if PIC.\n\nFrom-SVN: r89254", "tree": {"sha": "6a90fff0d98e1f820d76cddbb673731dabd362ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a90fff0d98e1f820d76cddbb673731dabd362ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/comments", "author": null, "committer": null, "parents": [{"sha": "6e7a355c164ab9adb03365f83f864b8e2c201c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7a355c164ab9adb03365f83f864b8e2c201c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7a355c164ab9adb03365f83f864b8e2c201c23"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "bcf20c235f364ff98e0c29a1e355332b2594188d", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "patch": "@@ -1,3 +1,11 @@\n+2004-10-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* src/sh/ffi.c (ffi_prep_closure): Set T bit in trampoline for\n+\tthe function returning a structure pointed with R2.\n+\t* src/sh/sysv.S (ffi_closure_SYSV): Use R2 as the pointer to\n+\tthe structure return value if T bit set.  Emit position\n+\tindependent code and EH data if PIC.\n+\n 2004-10-13  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \t* Makefile.am: Add m32r support."}, {"sha": "2045419df7cb79dfb3af1c567624f324b65d5bcd", "filename": "libffi/src/sh/ffi.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2Fsrc%2Fsh%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2Fsrc%2Fsh%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fffi.c?ref=e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   ffi.c - Copyright (c) 2002, 2003 Kaz Kojima\n+   ffi.c - Copyright (c) 2002, 2003, 2004 Kaz Kojima\n    \n    SuperH Foreign Function Interface \n \n@@ -471,16 +471,22 @@ ffi_prep_closure (ffi_closure* closure,\n \t\t  void *user_data)\n {\n   unsigned int *tramp;\n+  unsigned short insn;\n \n   FFI_ASSERT (cif->abi == FFI_GCC_SYSV);\n \n   tramp = (unsigned int *) &closure->tramp[0];\n+  /* Set T bit if the function returns a struct pointed with R2.  */\n+  insn = (return_type (cif->rtype) == FFI_TYPE_STRUCT\n+\t  ? 0x0018 /* sett */\n+\t  : 0x0008 /* clrt */);\n+\n #ifdef __LITTLE_ENDIAN__\n-  tramp[0] = 0xd301d202;\n-  tramp[1] = 0x0009422b;\n+  tramp[0] = 0xd301d102;\n+  tramp[1] = 0x0000412b | (insn << 16);\n #else\n-  tramp[0] = 0xd202d301;\n-  tramp[1] = 0x422b0009;\n+  tramp[0] = 0xd102d301;\n+  tramp[1] = 0x412b0000 | insn;\n #endif\n   *(void **) &tramp[2] = (void *)closure;          /* ctx */\n   *(void **) &tramp[3] = (void *)ffi_closure_SYSV; /* funaddr */"}, {"sha": "d0a5ae2158b7afd00aba1f4a1ce4e7d7a96e8253", "filename": "libffi/src/sh/sysv.S", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2Fsrc%2Fsh%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d3b4528fc87c1f8fdc2d192792ea04357c2a81/libffi%2Fsrc%2Fsh%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fsysv.S?ref=e0d3b4528fc87c1f8fdc2d192792ea04357c2a81", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 2002, 2003 Kaz Kojima\n+   sysv.S - Copyright (c) 2002, 2003, 2004 Kaz Kojima\n    \n    SuperH Foreign Function Interface \n \n@@ -553,9 +553,12 @@ ENTRY(ffi_closure_SYSV)\n \tmov\tr1,r7\n #endif\n \n+\tbt/s\t10f\n+\t mov\tr2, r5\n \tmov\tr14,r1\n \tadd\t#8,r1\n \tmov\tr1,r5\n+10:\n \n \tmov\tr14,r1\n #if defined(__SH4__)\n@@ -565,7 +568,15 @@ ENTRY(ffi_closure_SYSV)\n #endif\n \tmov.l\tr1,@r14\n \n+#ifdef PIC\n+\tmov.l\tL_got,r1\n+\tmova\tL_got,r0\n+\tadd\tr0,r1\n \tmov.l\tL_helper,r0\n+\tadd\tr1,r0\n+#else\n+\tmov.l\tL_helper,r0\n+#endif\n \tjsr\t@r0\n \t mov\tr3,r4\n \n@@ -579,8 +590,15 @@ ENTRY(ffi_closure_SYSV)\n \t add\t#8,r2\n 0:\n \t.align 2\n+#ifdef PIC\n+L_got:\n+\t.long\t_GLOBAL_OFFSET_TABLE_\n+L_helper:\n+\t.long\tffi_closure_helper_SYSV@GOTOFF\n+#else\n L_helper:\n \t.long\tffi_closure_helper_SYSV\n+#endif\n L_table:\n \t.short L_case_v - 0b\t/* FFI_TYPE_VOID */\n \t.short L_case_i - 0b\t/* FFI_TYPE_INT */\n@@ -683,10 +701,18 @@ __FRAME_BEGIN__:\n .LSCIE1:\n \t.4byte\t0x0\t/* CIE Identifier Tag */\n \t.byte\t0x1\t/* CIE Version */\n+#ifdef PIC\n+\t.ascii \"zR\\0\"\t/* CIE Augmentation */\n+#else\n \t.byte\t0x0\t/* CIE Augmentation */\n+#endif\n \t.byte\t0x1\t/* uleb128 0x1; CIE Code Alignment Factor */\n \t.byte\t0x7c\t/* sleb128 -4; CIE Data Alignment Factor */\n \t.byte\t0x11\t/* CIE RA Column */\n+#ifdef PIC\n+\t.uleb128 0x1\t/* Augmentation size */\n+\t.byte\t0x10\t/* FDE Encoding (pcrel) */\n+#endif\n \t.byte\t0xc\t/* DW_CFA_def_cfa */\n \t.byte\t0xf\t/* uleb128 0xf */\n \t.byte\t0x0\t/* uleb128 0x0 */\n@@ -696,8 +722,15 @@ __FRAME_BEGIN__:\n \t.4byte\t.LEFDE1-.LASFDE1\t/* FDE Length */\n .LASFDE1:\n \t.4byte\t.LASFDE1-__FRAME_BEGIN__\t/* FDE CIE offset */\n+#ifdef PIC\n+\t.4byte\t.LFB1-.\t/* FDE initial location */\n+#else\n \t.4byte\t.LFB1\t/* FDE initial location */\n+#endif\n \t.4byte\t.LFE1-.LFB1\t /* FDE address range */\n+#ifdef PIC\n+\t.uleb128 0x0\t/* Augmentation size */\n+#endif\n \t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n \t.4byte\t.LCFI0-.LFB1\n \t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n@@ -745,8 +778,15 @@ __FRAME_BEGIN__:\n \t.4byte\t.LEFDE3-.LASFDE3\t/* FDE Length */\n .LASFDE3:\n \t.4byte\t.LASFDE3-__FRAME_BEGIN__\t/* FDE CIE offset */\n+#ifdef PIC\n+\t.4byte\t.LFB2-.\t/* FDE initial location */\n+#else\n \t.4byte\t.LFB2\t/* FDE initial location */\n+#endif\n \t.4byte\t.LFE2-.LFB2\t /* FDE address range */\n+#ifdef PIC\n+\t.uleb128 0x0\t/* Augmentation size */\n+#endif\n \t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n \t.4byte\t.LCFI7-.LFB2\n \t.byte\t0xe\t/* DW_CFA_def_cfa_offset */"}]}