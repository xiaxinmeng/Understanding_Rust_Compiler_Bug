{"sha": "0e0f02ff9237738aabcb7466953d62641b9ab1d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwZjAyZmY5MjM3NzM4YWFiY2I3NDY2OTUzZDYyNjQxYjlhYjFkNQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-10-26T18:29:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-26T18:29:29Z"}, "message": "Patch by Ralf Wildenhues.\n\n\t* aclocal.m4 (AC_LANG_FUNC_LINK_TRY(C)): Delete.\n\t* configure: Regenerate.\n\nFrom-SVN: r165977", "tree": {"sha": "40d8a7e1cc814b3fbdd87995c074dc16b467a7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d8a7e1cc814b3fbdd87995c074dc16b467a7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0f02ff9237738aabcb7466953d62641b9ab1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0f02ff9237738aabcb7466953d62641b9ab1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0f02ff9237738aabcb7466953d62641b9ab1d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0f02ff9237738aabcb7466953d62641b9ab1d5/comments", "author": null, "committer": null, "parents": [{"sha": "534ecb17516c5db7a96245ebb90beb206e22eaff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534ecb17516c5db7a96245ebb90beb206e22eaff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534ecb17516c5db7a96245ebb90beb206e22eaff"}], "stats": {"total": 84, "additions": 20, "deletions": 64}, "files": [{"sha": "8585db51634e888764b812ef7a23a26a78975c73", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0e0f02ff9237738aabcb7466953d62641b9ab1d5", "patch": "@@ -1,3 +1,8 @@\n+2010-10-26  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* aclocal.m4 (AC_LANG_FUNC_LINK_TRY(C)): Delete.\n+\t* configure: Regenerate.\n+\n 2010-10-07  Andi Kleen <ak@linux.intel.com>\n \n \t* configure: Regenerate."}, {"sha": "f2091c9927e79316f78e98984c43717f6058c163", "filename": "libiberty/aclocal.m4", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Faclocal.m4?ref=0e0f02ff9237738aabcb7466953d62641b9ab1d5", "patch": "@@ -172,52 +172,3 @@ AC_DEFINE_UNQUOTED(STACK_DIRECTION, $ac_cv_c_stack_direction,\n         STACK_DIRECTION < 0 => grows toward lower addresses\n         STACK_DIRECTION = 0 => direction of growth unknown])\n ])\n-\n-# AC_LANG_FUNC_LINK_TRY(C)(FUNCTION)\n-# ----------------------------------\n-# Don't include <ctype.h> because on OSF/1 3.0 it includes\n-# <sys/types.h> which includes <sys/select.h> which contains a\n-# prototype for select.  Similarly for bzero.\n-#\n-# This test used to merely assign f=$1 in main(), but that was\n-# optimized away by HP unbundled cc A.05.36 for ia64 under +O3,\n-# presumably on the basis that there's no need to do that store if the\n-# program is about to exit.  Conversely, the AIX linker optimizes an\n-# unused external declaration that initializes f=$1.  So this test\n-# program has both an external initialization of f, and a use of f in\n-# main that affects the exit status.\n-#\n-m4_define([AC_LANG_FUNC_LINK_TRY(C)],\n-[AC_LANG_PROGRAM(\n-[/* System header to define __stub macros and hopefully few prototypes,\n-    which can conflict with char $1 (); below.\n-    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n-    <limits.h> exists even on freestanding compilers.  Under hpux,\n-    including <limits.h> includes <sys/time.h> and causes problems\n-    checking for functions defined therein.  */\n-#if defined (__STDC__) && !defined (_HPUX_SOURCE)\n-# include <limits.h>\n-#else\n-# include <assert.h>\n-#endif\n-/* Override any gcc2 internal prototype to avoid an error.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-{\n-#endif\n-/* We use char because int might match the return type of a gcc2\n-   builtin and then its argument prototype would still apply.  */\n-char $1 ();\n-/* The GNU C library defines this for functions which it implements\n-    to always fail with ENOSYS.  Some functions are actually named\n-    something starting with __ and the normal name is an alias.  */\n-#if defined (__stub_$1) || defined (__stub___$1)\n-choke me\n-#else\n-char (*f) () = $1;\n-#endif\n-#ifdef __cplusplus\n-}\n-#endif\n-], [return f != $1;])])\n-"}, {"sha": "142c81ce9714376385a491e11c12f42b3f814d5e", "filename": "libiberty/configure", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0f02ff9237738aabcb7466953d62641b9ab1d5/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=0e0f02ff9237738aabcb7466953d62641b9ab1d5", "patch": "@@ -1844,41 +1844,41 @@ else\n fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n+/* Define $2 to an innocuous variant, in case <limits.h> declares $2.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $2 innocuous_$2\n+\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $2 (); below.\n     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n-    <limits.h> exists even on freestanding compilers.  Under hpux,\n-    including <limits.h> includes <sys/time.h> and causes problems\n-    checking for functions defined therein.  */\n-#if defined (__STDC__) && !defined (_HPUX_SOURCE)\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n # include <limits.h>\n #else\n # include <assert.h>\n #endif\n-/* Override any gcc2 internal prototype to avoid an error.  */\n+\n+#undef $2\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n #ifdef __cplusplus\n extern \"C\"\n-{\n #endif\n-/* We use char because int might match the return type of a gcc2\n-   builtin and then its argument prototype would still apply.  */\n char $2 ();\n /* The GNU C library defines this for functions which it implements\n     to always fail with ENOSYS.  Some functions are actually named\n     something starting with __ and the normal name is an alias.  */\n-#if defined (__stub_$2) || defined (__stub___$2)\n+#if defined __stub_$2 || defined __stub___$2\n choke me\n-#else\n-char (*f) () = $2;\n-#endif\n-#ifdef __cplusplus\n-}\n #endif\n \n int\n main ()\n {\n-return f != $2;\n+return $2 ();\n   ;\n   return 0;\n }"}]}