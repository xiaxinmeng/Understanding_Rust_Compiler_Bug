{"sha": "e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhZWNkNmU5YTVhN2M3N2JiMzU2YTUxMWRhN2U2NGVmMDgzNzg1NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-06-05T08:26:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-06-05T08:26:36Z"}, "message": "re PR middle-end/90726 (exponential behavior on SCEV results everywhere)\n\n2019-06-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/90726\n\t* tree-ssa-loop-niter.c (expand_simple_operations): Do not\n\tturn an expression graph into a tree.\n\n\t* gcc.dg/pr90726.c: Enable IVOPTs.\n\nFrom-SVN: r271950", "tree": {"sha": "b03922aa2f8337a17fbacd3ec75b969f6853bbdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03922aa2f8337a17fbacd3ec75b969f6853bbdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b887b756ab330b3d37e6831094510c435240b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b887b756ab330b3d37e6831094510c435240b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b887b756ab330b3d37e6831094510c435240b00"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "f5208e1d83330d5c814d460e4976f1b442309086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "patch": "@@ -1,3 +1,9 @@\n+2019-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90726\n+\t* tree-ssa-loop-niter.c (expand_simple_operations): Do not\n+\tturn an expression graph into a tree.\n+\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-expand.c (struct omp_region): Add has_lastprivate_conditional"}, {"sha": "35a2d5434533abc75716476d777b714c9ec5c526", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "patch": "@@ -1,3 +1,8 @@\n+2019-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90726\n+\t* gcc.dg/pr90726.c: Enable IVOPTs.\n+\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/vect/simd-1.cc: New test."}, {"sha": "92987de1c33f6fb6a08ab4e9acf636ff949c1193", "filename": "gcc/testsuite/gcc.dg/pr90726.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr90726.c?ref=e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgimple -O2 -fno-ivopts\" } */\n+/* { dg-options \"-fgimple -O2\" } */\n \n int __GIMPLE (ssa,guessed_local(12348030),startwith(\"fix_loops\"))\n un (int dd)"}, {"sha": "84e6e313c85d3d70e471f53e6dada8d1624b998c", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0aecd6e9a5a7c77bb356a511da7e64ef0837855/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=e0aecd6e9a5a7c77bb356a511da7e64ef0837855", "patch": "@@ -1984,8 +1984,8 @@ simplify_replace_tree (tree expr, tree old, tree new_tree,\n    enough, and return the new expression.  If STOP is specified, stop\n    expanding if EXPR equals to it.  */\n \n-tree\n-expand_simple_operations (tree expr, tree stop)\n+static tree\n+expand_simple_operations (tree expr, tree stop, hash_map<tree, tree> &cache)\n {\n   unsigned i, n;\n   tree ret = NULL_TREE, e, ee, e1;\n@@ -2005,7 +2005,24 @@ expand_simple_operations (tree expr, tree stop)\n       for (i = 0; i < n; i++)\n \t{\n \t  e = TREE_OPERAND (expr, i);\n-\t  ee = expand_simple_operations (e, stop);\n+\t  /* SCEV analysis feeds us with a proper expression\n+\t     graph matching the SSA graph.  Avoid turning it\n+\t     into a tree here, thus handle tree sharing\n+\t     properly.\n+\t     ???  The SSA walk below still turns the SSA graph\n+\t     into a tree but until we find a testcase do not\n+\t     introduce additional tree sharing here.  */\n+\t  bool existed_p;\n+\t  tree &cee = cache.get_or_insert (e, &existed_p);\n+\t  if (existed_p)\n+\t    ee = cee;\n+\t  else\n+\t    {\n+\t      cee = e;\n+\t      ee = expand_simple_operations (e, stop, cache);\n+\t      if (ee != e)\n+\t\t*cache.get (e) = ee;\n+\t    }\n \t  if (e == ee)\n \t    continue;\n \n@@ -2045,7 +2062,7 @@ expand_simple_operations (tree expr, tree stop)\n \t  && src->loop_father != dest->loop_father)\n \treturn expr;\n \n-      return expand_simple_operations (e, stop);\n+      return expand_simple_operations (e, stop, cache);\n     }\n   if (gimple_code (stmt) != GIMPLE_ASSIGN)\n     return expr;\n@@ -2065,7 +2082,7 @@ expand_simple_operations (tree expr, tree stop)\n \treturn e;\n \n       if (code == SSA_NAME)\n-\treturn expand_simple_operations (e, stop);\n+\treturn expand_simple_operations (e, stop, cache);\n       else if (code == ADDR_EXPR)\n \t{\n \t  poly_int64 offset;\n@@ -2074,7 +2091,8 @@ expand_simple_operations (tree expr, tree stop)\n \t  if (base\n \t      && TREE_CODE (base) == MEM_REF)\n \t    {\n-\t      ee = expand_simple_operations (TREE_OPERAND (base, 0), stop);\n+\t      ee = expand_simple_operations (TREE_OPERAND (base, 0), stop,\n+\t\t\t\t\t     cache);\n \t      return fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (expr), ee,\n \t\t\t\t  wide_int_to_tree (sizetype,\n \t\t\t\t\t\t    mem_ref_offset (base)\n@@ -2089,7 +2107,7 @@ expand_simple_operations (tree expr, tree stop)\n     {\n     CASE_CONVERT:\n       /* Casts are simple.  */\n-      ee = expand_simple_operations (e, stop);\n+      ee = expand_simple_operations (e, stop, cache);\n       return fold_build1 (code, TREE_TYPE (expr), ee);\n \n     case PLUS_EXPR:\n@@ -2104,14 +2122,21 @@ expand_simple_operations (tree expr, tree stop)\n       if (!is_gimple_min_invariant (e1))\n \treturn expr;\n \n-      ee = expand_simple_operations (e, stop);\n+      ee = expand_simple_operations (e, stop, cache);\n       return fold_build2 (code, TREE_TYPE (expr), ee, e1);\n \n     default:\n       return expr;\n     }\n }\n \n+tree\n+expand_simple_operations (tree expr, tree stop)\n+{\n+  hash_map<tree, tree> cache;\n+  return expand_simple_operations (expr, stop, cache);\n+}\n+\n /* Tries to simplify EXPR using the condition COND.  Returns the simplified\n    expression (or EXPR unchanged, if no simplification was possible).  */\n "}]}