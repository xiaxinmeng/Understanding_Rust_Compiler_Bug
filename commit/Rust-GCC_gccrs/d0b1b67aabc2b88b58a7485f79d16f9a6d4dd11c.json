{"sha": "d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiMWI2N2FhYmMyYjg4YjU4YTc0ODVmNzlkMTZmOWE2ZDRkZDExYw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-11-25T10:13:08Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-11-25T10:13:08Z"}, "message": "ipa: Prevent materialization of clones with removed bodies (PR 92109)\n\n2019-11-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/92109\n\t* cgraph.h (cgraph_node::remove_from_clone_tree): Declare.\n\t* cgraphclones.c (cgraph_node::remove_from_clone_tree): New method.\n\t(cgraph_materialize_clone): Move removel from clone tree to the\n\tthe new method and use it instead.\n\t* ipa.c (symbol_table::remove_unreachable_nodes): When removing\n\tbodies of clones, also remove it from the clone tree.\n\nFrom-SVN: r278670", "tree": {"sha": "7c3f46c77d2d21811420a8a0cdaf253c8089c76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c3f46c77d2d21811420a8a0cdaf253c8089c76b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed649cda944c2ff0b77f0203bf83f106e930c5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed649cda944c2ff0b77f0203bf83f106e930c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed649cda944c2ff0b77f0203bf83f106e930c5e8"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "5364edc92f666a746f73faeaaf6bce8e9d7b6adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "patch": "@@ -1,3 +1,13 @@\n+2019-11-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/92109\n+\t* cgraph.h (cgraph_node::remove_from_clone_tree): Declare.\n+\t* cgraphclones.c (cgraph_node::remove_from_clone_tree): New method.\n+\t(cgraph_materialize_clone): Move removel from clone tree to the\n+\tthe new method and use it instead.\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): When removing\n+\tbodies of clones, also remove it from the clone tree.\n+\n 2019-11-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/91956"}, {"sha": "0d2442c997ca298dfb6814aee414e2c8dd2dc433", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "patch": "@@ -967,6 +967,10 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n \t\t\t\t     ipa_param_adjustments *param_adjustments,\n \t\t\t\t     const char * suffix, unsigned num_suffix);\n \n+  /* Remove the node from the tree of virtual and inline clones and make it a\n+     standalone node - not a clone any more.  */\n+  void remove_from_clone_tree ();\n+\n   /* cgraph node being removed from symbol table; see if its entry can be\n    replaced by other inline clone.  */\n   cgraph_node *find_replacement (void);"}, {"sha": "ac5c57a47aa64109631320f30ed6f7b0c4a0557e", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "patch": "@@ -1013,6 +1013,22 @@ cgraph_node::create_version_clone_with_body\n   return new_version_node;\n }\n \n+/* Remove the node from the tree of virtual and inline clones and make it a\n+   standalone node - not a clone any more.  */\n+\n+void cgraph_node::remove_from_clone_tree ()\n+{\n+  if (next_sibling_clone)\n+    next_sibling_clone->prev_sibling_clone = prev_sibling_clone;\n+  if (prev_sibling_clone)\n+    prev_sibling_clone->next_sibling_clone = next_sibling_clone;\n+  else\n+    clone_of->clones = next_sibling_clone;\n+  next_sibling_clone = NULL;\n+  prev_sibling_clone = NULL;\n+  clone_of = NULL;\n+}\n+\n /* Given virtual clone, turn it into actual clone.  */\n \n static void\n@@ -1033,22 +1049,15 @@ cgraph_materialize_clone (cgraph_node *node)\n       dump_function_to_file (node->decl, symtab->dump_file, dump_flags);\n     }\n \n+  cgraph_node *clone_of = node->clone_of;\n   /* Function is no longer clone.  */\n-  if (node->next_sibling_clone)\n-    node->next_sibling_clone->prev_sibling_clone = node->prev_sibling_clone;\n-  if (node->prev_sibling_clone)\n-    node->prev_sibling_clone->next_sibling_clone = node->next_sibling_clone;\n-  else\n-    node->clone_of->clones = node->next_sibling_clone;\n-  node->next_sibling_clone = NULL;\n-  node->prev_sibling_clone = NULL;\n-  if (!node->clone_of->analyzed && !node->clone_of->clones)\n+  node->remove_from_clone_tree ();\n+  if (!clone_of->analyzed && !clone_of->clones)\n     {\n-      node->clone_of->release_body ();\n-      node->clone_of->remove_callees ();\n-      node->clone_of->remove_all_references ();\n+      clone_of->release_body ();\n+      clone_of->remove_callees ();\n+      clone_of->remove_all_references ();\n     }\n-  node->clone_of = NULL;\n   bitmap_obstack_release (NULL);\n }\n "}, {"sha": "2404024d722e29d58725f590668694faf7fb3fab", "filename": "gcc/ipa.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=d0b1b67aabc2b88b58a7485f79d16f9a6d4dd11c", "patch": "@@ -520,9 +520,14 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t     reliably.  */\n \t  if (node->alias || node->thunk.thunk_p)\n \t    ;\n-\t  else if (!body_needed_for_clonning.contains (node->decl)\n-\t      && !node->alias && !node->thunk.thunk_p)\n-\t    node->release_body ();\n+\t  else if (!body_needed_for_clonning.contains (node->decl))\n+\t    {\n+\t      /* Make the node a non-clone so that we do not attempt to\n+\t\t materialize it later.  */\n+\t      if (node->clone_of)\n+\t\tnode->remove_from_clone_tree ();\n+\t      node->release_body ();\n+\t    }\n \t  else if (!node->clone_of)\n \t    gcc_assert (in_lto_p || DECL_RESULT (node->decl));\n \t  if (node->definition && !node->alias && !node->thunk.thunk_p)"}]}