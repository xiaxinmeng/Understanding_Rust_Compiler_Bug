{"sha": "b123dccb013fa6a79a621b9895349a3e1290aabd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyM2RjY2IwMTNmYTZhNzlhNjIxYjk4OTUzNDlhM2UxMjkwYWFiZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-11T08:04:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-11T08:04:48Z"}, "message": "New files, to ease sync between AdaCore and FSF.\n\nFrom-SVN: r251957", "tree": {"sha": "ba0a0bc0b884d2f4f16210ea5224072953977053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0a0bc0b884d2f4f16210ea5224072953977053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b123dccb013fa6a79a621b9895349a3e1290aabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b123dccb013fa6a79a621b9895349a3e1290aabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b123dccb013fa6a79a621b9895349a3e1290aabd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b123dccb013fa6a79a621b9895349a3e1290aabd/comments", "author": null, "committer": null, "parents": [{"sha": "f66e1fcf1c3ee144ba030381e77ee0e0fe696899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66e1fcf1c3ee144ba030381e77ee0e0fe696899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66e1fcf1c3ee144ba030381e77ee0e0fe696899"}], "stats": {"total": 485, "additions": 485, "deletions": 0}, "files": [{"sha": "b514094f6526cafbf40bae05b09b726e4d3fd7bb", "filename": "gcc/ada/libgnat/g-soliop-lynxos.ads", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fg-soliop-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fg-soliop-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-soliop-lynxos.ads?ref=b123dccb013fa6a79a621b9895349a3e1290aabd", "patch": "@@ -0,0 +1,42 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--          G N A T . S O C K E T S . L I N K E R _ O P T I O N S           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2001-2017, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package is used to provide target specific linker_options for the\n+--  support of sockets as required by the package GNAT.Sockets.\n+\n+--  This is the LynxOS version of this package\n+\n+--  This package should not be directly with'ed by an application program\n+\n+package GNAT.Sockets.Linker_Options is\n+private\n+   pragma Linker_Options (\"-lbsd\");\n+end GNAT.Sockets.Linker_Options;"}, {"sha": "26087fd783a3d32f3d5177e0366c2695e5eeb7ba", "filename": "gcc/ada/libgnat/s-osprim-lynxos.ads", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fs-osprim-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fs-osprim-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-osprim-lynxos.ads?ref=b123dccb013fa6a79a621b9895349a3e1290aabd", "patch": "@@ -0,0 +1,80 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--                  S Y S T E M . O S _ P R I M I T I V E S                 --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1998-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides low level primitives used to implement clock and\n+--  delays in non tasking applications, for LynxOS.\n+\n+--  The choice of the real clock/delay implementation (depending on whether\n+--  tasking is involved or not) is done via soft links (see s-soflin.ads)\n+\n+--  NEVER add any dependency to tasking packages here\n+\n+package System.OS_Primitives is\n+   pragma Preelaborate;\n+\n+   Max_Sensible_Delay : constant Duration := 16#10_0000.0#;\n+   --  LynxOS does not support delays as long as half a year, so we set this to\n+   --  a shorter, but still fairly long, duration. Experiments show that if\n+   --  pthread_cond_timedwait is passed an abstime much greater than about\n+   --  2**21, it fails, returning EAGAIN. The cutoff is somewhere between\n+   --  16#20_8000.0# and 16#20_F000.0#. This behavior is not documented.\n+\n+   procedure Initialize;\n+   --  Initialize global settings related to this package. This procedure\n+   --  should be called before any other subprograms in this package. Note\n+   --  that this procedure can be called several times.\n+\n+   function Clock return Duration;\n+   pragma Inline (Clock);\n+   --  Returns \"absolute\" time, represented as an offset relative to \"the\n+   --  Epoch\", which is Jan 1, 1970 00:00:00 UTC on UNIX systems. This\n+   --  implementation is affected by system's clock changes.\n+\n+   Relative          : constant := 0;\n+   Absolute_Calendar : constant := 1;\n+   Absolute_RT       : constant := 2;\n+   --  Values for Mode call below. Note that the compiler (exp_ch9.adb) relies\n+   --  on these values. So any change here must be reflected in corresponding\n+   --  changes in the compiler.\n+\n+   procedure Timed_Delay (Time : Duration; Mode : Integer);\n+   --  Implements the semantics of the delay statement when no tasking is used\n+   --  in the application.\n+   --\n+   --    Mode is one of the three values above\n+   --\n+   --    Time is a relative or absolute duration value, depending on Mode.\n+   --\n+   --  Note that currently Ada.Real_Time always uses the tasking run time,\n+   --  so this procedure should never be called with Mode set to Absolute_RT.\n+   --  This may change in future or bare board implementations.\n+\n+end System.OS_Primitives;"}, {"sha": "8a787f007bc6bf869d3d36a9321e02f05bd735b2", "filename": "gcc/ada/libgnat/s-parame-ae653.ads", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fs-parame-ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fs-parame-ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame-ae653.ads?ref=b123dccb013fa6a79a621b9895349a3e1290aabd", "patch": "@@ -0,0 +1,201 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                    S Y S T E M . P A R A M E T E R S                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Version is used by VxWorks 653, VxWorks MILS, and VxWorks6 cert Ravenscar\n+\n+--  This package defines some system dependent parameters for GNAT. These\n+--  are values that are referenced by the runtime library and are therefore\n+--  relevant to the target machine.\n+\n+--  The parameters whose value is defined in the spec are not generally\n+--  expected to be changed. If they are changed, it will be necessary to\n+--  recompile the run-time library.\n+\n+--  The parameters which are defined by functions can be changed by modifying\n+--  the body of System.Parameters in file s-parame.adb. A change to this body\n+--  requires only rebinding and relinking of the application.\n+\n+--  Note: do not introduce any pragma Inline statements into this unit, since\n+--  otherwise the relinking and rebinding capability would be deactivated.\n+\n+package System.Parameters is\n+   pragma Pure;\n+\n+   ---------------------------------------\n+   -- Task And Stack Allocation Control --\n+   ---------------------------------------\n+\n+   type Task_Storage_Size is new Integer;\n+   --  Type used in tasking units for task storage size\n+\n+   type Size_Type is new Task_Storage_Size;\n+   --  Type used to provide task storage size to runtime\n+\n+   Unspecified_Size : constant Size_Type := Size_Type'First;\n+   --  Value used to indicate that no size type is set\n+\n+   subtype Percentage is Size_Type range -1 .. 100;\n+   Dynamic : constant Size_Type := -1;\n+   --  The secondary stack ratio is a constant between 0 and 100 which\n+   --  determines the percentage of the allocated task stack that is\n+   --  used by the secondary stack (the rest being the primary stack).\n+   --  The special value of minus one indicates that the secondary\n+   --  stack is to be allocated from the heap instead.\n+\n+   Sec_Stack_Percentage : constant Percentage := 25;\n+   --  This constant defines the handling of the secondary stack\n+\n+   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n+   --  Convenient Boolean for testing for dynamic secondary stack\n+\n+   function Default_Stack_Size return Size_Type;\n+   --  Default task stack size used if none is specified\n+\n+   function Minimum_Stack_Size return Size_Type;\n+   --  Minimum task stack size permitted\n+\n+   function Adjust_Storage_Size (Size : Size_Type) return Size_Type;\n+   --  Given the storage size stored in the TCB, return the Storage_Size\n+   --  value required by the RM for the Storage_Size attribute. The\n+   --  required adjustment is as follows:\n+   --\n+   --    when Size = Unspecified_Size, return Default_Stack_Size\n+   --    when Size < Minimum_Stack_Size, return Minimum_Stack_Size\n+   --    otherwise return given Size\n+\n+   Default_Env_Stack_Size : constant Size_Type := 14_336;\n+   --  Assumed size of the environment task, if no other information\n+   --  is available. This value is used when stack checking is\n+   --  enabled and no GNAT_STACK_LIMIT environment variable is set.\n+   --  This value is chosen as the VxWorks default stack size is 20kB,\n+   --  and a little more than 4kB is necessary for the run time.\n+\n+   Stack_Grows_Down  : constant Boolean := True;\n+   --  This constant indicates whether the stack grows up (False) or\n+   --  down (True) in memory as functions are called. It is used for\n+   --  proper implementation of the stack overflow check.\n+\n+   ----------------------------------------------\n+   -- Characteristics of types in Interfaces.C --\n+   ----------------------------------------------\n+\n+   long_bits : constant := Long_Integer'Size;\n+   --  Number of bits in type long and unsigned_long. The normal convention\n+   --  is that this is the same as type Long_Integer, but this may not be true\n+   --  of all targets.\n+\n+   ptr_bits  : constant := Standard'Address_Size;\n+   subtype C_Address is System.Address;\n+   --  Number of bits in Interfaces.C pointers, normally a standard address\n+\n+   C_Malloc_Linkname : constant String := \"__gnat_malloc\";\n+   --  Name of runtime function used to allocate such a pointer\n+\n+   ----------------------------------------------\n+   -- Behavior of Pragma Finalize_Storage_Only --\n+   ----------------------------------------------\n+\n+   --  Garbage_Collected is a Boolean constant whose value indicates the\n+   --  effect of the pragma Finalize_Storage_Entry on a controlled type.\n+\n+   --    Garbage_Collected = False\n+\n+   --      The system releases all storage on program termination only,\n+   --      but not other garbage collection occurs, so finalization calls\n+   --      are omitted only for outer level objects can be omitted if\n+   --      pragma Finalize_Storage_Only is used.\n+\n+   --    Garbage_Collected = True\n+\n+   --      The system provides full garbage collection, so it is never\n+   --      necessary to release storage for controlled objects for which\n+   --      a pragma Finalize_Storage_Only is used.\n+\n+   Garbage_Collected : constant Boolean := False;\n+   --  The storage mode for this system (release on program exit)\n+\n+   ---------------------\n+   -- Tasking Profile --\n+   ---------------------\n+\n+   --  In the following sections, constant parameters are defined to\n+   --  allow some optimizations and fine tuning within the tasking run time\n+   --  based on restrictions on the tasking features.\n+\n+   ----------------------\n+   -- Locking Strategy --\n+   ----------------------\n+\n+   Single_Lock : constant Boolean := False;\n+   --  Indicates whether a single lock should be used within the tasking\n+   --  run-time to protect internal structures. If True, a single lock\n+   --  will be used, meaning less locking/unlocking operations, but also\n+   --  more global contention. In general, Single_Lock should be set to\n+   --  True on single processor machines, and to False to multi-processor\n+   --  systems, but this can vary from application to application and also\n+   --  depends on the scheduling policy.\n+\n+   -------------------\n+   -- Task Abortion --\n+   -------------------\n+\n+   No_Abort : constant Boolean := False;\n+   --  This constant indicates whether abort statements and asynchronous\n+   --  transfer of control (ATC) are disallowed. If set to True, it is\n+   --  assumed that neither construct is used, and the run time does not\n+   --  need to defer/undefer abort and check for pending actions at\n+   --  completion points. A value of True for No_Abort corresponds to:\n+   --  pragma Restrictions (No_Abort_Statements);\n+   --  pragma Restrictions (Max_Asynchronous_Select_Nesting => 0);\n+\n+   ---------------------\n+   -- Task Attributes --\n+   ---------------------\n+\n+   Max_Attribute_Count : constant := 8;\n+   --  Number of task attributes stored in the task control block\n+\n+   -----------------------\n+   -- Task Image Length --\n+   -----------------------\n+\n+   Max_Task_Image_Length : constant := 32;\n+   --  This constant specifies the maximum length of a task's image\n+\n+   ------------------------------\n+   -- Exception Message Length --\n+   ------------------------------\n+\n+   Default_Exception_Msg_Max_Length : constant := 200;\n+   --  This constant specifies the default number of characters to allow\n+   --  in an exception message (200 is minimum required by RM 11.4.1(18)).\n+\n+end System.Parameters;"}, {"sha": "5dc1eaa57e38062c2ec25f119cad2243ba1fe018", "filename": "gcc/ada/libgnat/system-lynxos178-ppc.ads", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fsystem-lynxos178-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b123dccb013fa6a79a621b9895349a3e1290aabd/gcc%2Fada%2Flibgnat%2Fsystem-lynxos178-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-lynxos178-ppc.ads?ref=b123dccb013fa6a79a621b9895349a3e1290aabd", "patch": "@@ -0,0 +1,162 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                         (LynxOS-178 PPC Version)                         --\n+--                                                                          --\n+--          Copyright (C) 2009-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.01;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  17 is the system determined default priority for user applications\n+   --  running on LynxOS.\n+\n+   --  The standard (Rm 13.7) requires that Default_Priority has the value:\n+\n+   --  (Priority'First + Priority'Last) / 2\n+\n+   --  However, the default priority given by the OS is not the same thing as\n+   --  the Ada value Default_Prioirity (previous examples include VxWorks).\n+   --  Therefore, we follow a model based on the full range of LynxOS-178\n+   --  priorities.\n+\n+   Max_Priority           : constant Positive := 252;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 252;\n+   subtype Interrupt_Priority is Any_Priority range 253 .. 255;\n+\n+   Default_Priority : constant Priority := 126;\n+\n+   --  Note that the priority of the environment task is set externally by the\n+   --  OS\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := False;\n+\n+end System;"}]}