{"sha": "2fe3721128b991538b5a416ca1d8671901d0a1f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlMzcyMTEyOGI5OTE1MzhiNWE0MTZjYTFkODY3MTkwMWQwYTFmMQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-11-17T13:47:24Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-11-17T13:47:24Z"}, "message": "re PR target/77308 (surprisingly large stack usage for sha512 on arm)\n\n2016-11-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR target/77308\n        * config/arm/arm.md (*thumb2_ldrd, *thumb2_ldrd_base,\n        *thumb2_ldrd_base_neg, *thumb2_strd, *thumb2_strd_base,\n        *thumb2_strd_base_neg): Recognize insn regardless of\n        current_tune->prefer_ldrd_strd.\n        * config/arm/ldrdstrd.md: Enable all ldrd/strd peephole rules\n        whenever possible.\n\ntestsuite:\n2016-11-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR target/77308\n        * gcc.target/arm/pr53447-5.c: New test.\n        * lib/target-supports.exp\n        (check_effective_target_arm_prefer_ldrd_strd): Adjust.\n\nFrom-SVN: r242549", "tree": {"sha": "5ae54b4b32d411e6d1567978cc5fc863056b73c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae54b4b32d411e6d1567978cc5fc863056b73c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe3721128b991538b5a416ca1d8671901d0a1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe3721128b991538b5a416ca1d8671901d0a1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe3721128b991538b5a416ca1d8671901d0a1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe3721128b991538b5a416ca1d8671901d0a1f1/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c28e6ae6e2e1e249f4ad95b6415da025ab1fc6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c28e6ae6e2e1e249f4ad95b6415da025ab1fc6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c28e6ae6e2e1e249f4ad95b6415da025ab1fc6e"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "8797a218b363be8b529f778ed5d65352bf637d69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -1,3 +1,13 @@\n+2016-11-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/77308\n+\t* config/arm/arm.md (*thumb2_ldrd, *thumb2_ldrd_base,\n+\t*thumb2_ldrd_base_neg, *thumb2_strd, *thumb2_strd_base,\n+\t*thumb2_strd_base_neg): Recognize insn regardless of\n+\tcurrent_tune->prefer_ldrd_strd.\n+\t* config/arm/ldrdstrd.md: Enable all ldrd/strd peephole rules\n+\twhenever possible.\n+\n 2016-11-17  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_ccfsm_post_advance): Handle return"}, {"sha": "ccae728bd16e403cbcada323463b473ad0397b67", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -11641,7 +11641,6 @@\n         (mem:SI (plus:SI (match_dup 1)\n                          (match_operand:SI 4 \"const_int_operand\" \"\"))))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && ((INTVAL (operands[2]) + 4) == INTVAL (operands[4]))\n      && (operands_ok_ldrd_strd (operands[0], operands[3],\n                                   operands[1], INTVAL (operands[2]),\n@@ -11658,7 +11657,6 @@\n         (mem:SI (plus:SI (match_dup 1)\n                          (const_int 4))))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && (operands_ok_ldrd_strd (operands[0], operands[2],\n                                   operands[1], 0, false, true))\"\n   \"ldrd%?\\t%0, %2, [%1]\"\n@@ -11673,7 +11671,6 @@\n    (set (match_operand:SI 2 \"s_register_operand\" \"=r\")\n         (mem:SI (match_dup 1)))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && (operands_ok_ldrd_strd (operands[0], operands[2],\n                                   operands[1], -4, false, true))\"\n   \"ldrd%?\\t%0, %2, [%1, #-4]\"\n@@ -11689,7 +11686,6 @@\n                          (match_operand:SI 3 \"const_int_operand\" \"\")))\n         (match_operand:SI 4 \"s_register_operand\" \"r\"))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && ((INTVAL (operands[1]) + 4) == INTVAL (operands[3]))\n      && (operands_ok_ldrd_strd (operands[2], operands[4],\n                                   operands[0], INTVAL (operands[1]),\n@@ -11706,7 +11702,6 @@\n                          (const_int 4)))\n         (match_operand:SI 2 \"s_register_operand\" \"r\"))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && (operands_ok_ldrd_strd (operands[1], operands[2],\n                                   operands[0], 0, false, false))\"\n   \"strd%?\\t%1, %2, [%0]\"\n@@ -11721,7 +11716,6 @@\n    (set (mem:SI (match_dup 0))\n         (match_operand:SI 2 \"s_register_operand\" \"r\"))]\n   \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n-     && current_tune->prefer_ldrd_strd\n      && (operands_ok_ldrd_strd (operands[1], operands[2],\n                                   operands[0], -4, false, false))\"\n   \"strd%?\\t%1, %2, [%0, #-4]\""}, {"sha": "7e6b7dce520f3c7cc9ae95373e82a4856faa14d3", "filename": "gcc/config/arm/ldrdstrd.md", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Fconfig%2Farm%2Fldrdstrd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Fconfig%2Farm%2Fldrdstrd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fldrdstrd.md?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -29,9 +29,7 @@\n         (match_operand:SI 2 \"memory_operand\" \"\"))\n    (set (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n         (match_operand:SI 3 \"memory_operand\" \"\"))]\n-  \"TARGET_LDRD\n-     && current_tune->prefer_ldrd_strd\n-     && !optimize_function_for_size_p (cfun)\"\n+  \"TARGET_LDRD\"\n   [(const_int 0)]\n {\n   if (!gen_operands_ldrd_strd (operands, true, false, false))\n@@ -63,9 +61,7 @@\n \t(match_operand:SI 0 \"arm_general_register_operand\" \"\"))\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(match_operand:SI 1 \"arm_general_register_operand\" \"\"))]\n-  \"TARGET_LDRD\n-     && current_tune->prefer_ldrd_strd\n-     && !optimize_function_for_size_p (cfun)\"\n+  \"TARGET_LDRD\"\n   [(const_int 0)]\n {\n   if (!gen_operands_ldrd_strd (operands, false, false, false))\n@@ -102,9 +98,7 @@\n         (match_operand:SI 5 \"const_int_operand\" \"\"))\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n         (match_dup 1))]\n- \"TARGET_LDRD\n-  && current_tune->prefer_ldrd_strd\n-  && !optimize_function_for_size_p (cfun)\"\n+  \"TARGET_LDRD\"\n   [(const_int 0)]\n {\n   if (!gen_operands_ldrd_strd (operands, false, true, false))\n@@ -147,10 +141,8 @@\n         (match_dup 0))\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n         (match_dup 1))]\n- \"TARGET_LDRD\n-  && current_tune->prefer_ldrd_strd\n-  && !optimize_function_for_size_p (cfun)\"\n-   [(const_int 0)]\n+  \"TARGET_LDRD\"\n+  [(const_int 0)]\n {\n   if (!gen_operands_ldrd_strd (operands, false, true, false))\n      FAIL;\n@@ -197,8 +189,6 @@\n \t\t\t   [(match_operand 6 \"arm_general_register_operand\" \"\")\n \t\t\t    (match_operand 7 \"arm_general_register_operand\" \"\") ]))]\n   \"TARGET_LDRD && TARGET_ARM\n-   && current_tune->prefer_ldrd_strd\n-   && !optimize_function_for_size_p (cfun)\n    && (  ((rtx_equal_p(operands[0], operands[6])) && (rtx_equal_p(operands[1], operands[7])))\n         ||((rtx_equal_p(operands[0], operands[7])) && (rtx_equal_p(operands[1], operands[6]))))\n    && (peep2_reg_dead_p (3, operands[0]) || rtx_equal_p (operands[0], operands[4]))\n@@ -231,8 +221,6 @@\n \t\t\t\t(match_operand 7 \"arm_general_register_operand\" \"\") ]))\n        (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_LDRD && TARGET_ARM\n-   && current_tune->prefer_ldrd_strd\n-   && !optimize_function_for_size_p (cfun)\n    && (  ((rtx_equal_p(operands[0], operands[6])) && (rtx_equal_p(operands[1], operands[7])))\n        ||((rtx_equal_p(operands[0], operands[7])) && (rtx_equal_p(operands[1], operands[6]))))\n    && (peep2_reg_dead_p (3, operands[0]) || rtx_equal_p (operands[0], operands[4]))"}, {"sha": "e16f2d0966ca61245ec98662f993ca6b699ac625", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -1,3 +1,10 @@\n+2016-11-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/77308\n+\t* gcc.target/arm/pr53447-5.c: New test.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_prefer_ldrd_strd): Adjust.\n+\n 2016-11-17  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/abitest.S: New file."}, {"sha": "35988f404f93179e683d18a7db3172624c209e3f", "filename": "gcc/testsuite/gcc.target/arm/pr53447-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-5.c?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mthumb\" } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+void foo(long long* p)\n+{\n+  p[1] |= 0x100000001;\n+  p[2] &= 0x100000001;\n+  p[3] ^= 0x100000001;\n+  p[4] += 0x100000001;\n+  p[5] -= 0x100000001;\n+  p[6] = ~p[6];\n+  p[7] <<= 5;\n+  p[8] >>= 5;\n+  p[9] -= p[10];\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldrd\" 10 } } */\n+/* { dg-final { scan-assembler-times \"strd\" 9 } } */"}, {"sha": "8a2abd2c4cc441b4fc5d469f74b8535aaf864b3a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe3721128b991538b5a416ca1d8671901d0a1f1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2fe3721128b991538b5a416ca1d8671901d0a1f1", "patch": "@@ -4356,7 +4356,7 @@ proc check_effective_target_arm_prefer_ldrd_strd { } {\n     }\n \n     return [check_no_messages_and_pattern arm_prefer_ldrd_strd \"strd\\tr\" assembly {\n-        void foo (int *p) { p[0] = 1; p[1] = 0;}\n+        void foo (void) { __asm__ (\"\" ::: \"r4\", \"r5\"); }\n     }  \"-O2 -mthumb\" ]\n }\n "}]}