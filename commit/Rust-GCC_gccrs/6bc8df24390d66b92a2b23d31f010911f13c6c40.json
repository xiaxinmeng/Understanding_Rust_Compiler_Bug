{"sha": "6bc8df24390d66b92a2b23d31f010911f13c6c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjOGRmMjQzOTBkNjZiOTJhMmIyM2QzMWYwMTA5MTFmMTNjNmM0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-12-04T11:27:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-04T11:27:25Z"}, "message": "decl.c (components_to_record): Add specific handling for fields with zero size and no representation clause.\n\n\t* gcc-interface/decl.c (components_to_record): Add specific handling\n\tfor fields with zero size and no representation clause.\n\nFrom-SVN: r205665", "tree": {"sha": "30f5199f3153bae7b0afb229d388990a213905df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30f5199f3153bae7b0afb229d388990a213905df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc8df24390d66b92a2b23d31f010911f13c6c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc8df24390d66b92a2b23d31f010911f13c6c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc8df24390d66b92a2b23d31f010911f13c6c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc8df24390d66b92a2b23d31f010911f13c6c40/comments", "author": null, "committer": null, "parents": [{"sha": "5bf51f2f731c28ea9b45e170fc36a2b0d51ba9b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf51f2f731c28ea9b45e170fc36a2b0d51ba9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf51f2f731c28ea9b45e170fc36a2b0d51ba9b2"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "f9d6e31037dd0fc256dcbba1b57fd70a283074ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6bc8df24390d66b92a2b23d31f010911f13c6c40", "patch": "@@ -1,3 +1,8 @@\n+2013-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): Add specific handling\n+\tfor fields with zero size and no representation clause.\n+\n 2013-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Case_Statement_to_gnu): Do not push a binding"}, {"sha": "a80d1a9c0afafbc59bd5243184258c3e4b2d15be", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6bc8df24390d66b92a2b23d31f010911f13c6c40", "patch": "@@ -6932,6 +6932,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n   tree gnu_rep_list = NULL_TREE;\n   tree gnu_var_list = NULL_TREE;\n   tree gnu_self_list = NULL_TREE;\n+  tree gnu_zero_list = NULL_TREE;\n \n   /* For each component referenced in a component declaration create a GCC\n      field and add it to the list, skipping pragmas in the GNAT list.  */\n@@ -7262,6 +7263,10 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n      to do this in a separate pass since we want to handle the discriminants\n      but can't play with them until we've used them in debugging data above.\n \n+     Similarly, pull out the fields with zero size and no rep clause, as they\n+     would otherwise modify the layout and thus very likely run afoul of the\n+     Ada semantics, which are different from those of C here.\n+\n      ??? If we reorder them, debugging information will be wrong but there is\n      nothing that can be done about this at the moment.  */\n   gnu_last = NULL_TREE;\n@@ -7300,6 +7305,19 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  continue;\n \t}\n \n+      if (DECL_SIZE (gnu_field) && integer_zerop (DECL_SIZE (gnu_field)))\n+\t{\n+\t  DECL_FIELD_OFFSET (gnu_field) = size_zero_node;\n+\t  SET_DECL_OFFSET_ALIGN (gnu_field, BIGGEST_ALIGNMENT);\n+\t  DECL_FIELD_BIT_OFFSET (gnu_field) = bitsize_zero_node;\n+\t  if (field_is_aliased (gnu_field))\n+\t    TYPE_ALIGN (gnu_record_type)\n+\t      = MAX (TYPE_ALIGN (gnu_record_type),\n+\t\t     TYPE_ALIGN (TREE_TYPE (gnu_field)));\n+\t  MOVE_FROM_FIELD_LIST_TO (gnu_zero_list);\n+\t  continue;\n+\t}\n+\n       gnu_last = gnu_field;\n     }\n \n@@ -7392,6 +7410,11 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n   finish_record_type (gnu_record_type, gnu_field_list, layout_with_rep ? 1 : 0,\n \t\t      debug_info && !maybe_unused);\n \n+  /* Chain the fields with zero size at the beginning of the field list.  */\n+  if (gnu_zero_list)\n+    TYPE_FIELDS (gnu_record_type)\n+      = chainon (gnu_zero_list, TYPE_FIELDS (gnu_record_type));\n+\n   return (gnu_rep_list && !p_gnu_rep_list) || variants_have_rep;\n }\n \f"}, {"sha": "3fe3212dd73d5a6e589016cfafc36afc5d529a4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bc8df24390d66b92a2b23d31f010911f13c6c40", "patch": "@@ -1,3 +1,7 @@\n+2013-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack19.adb: New test.\n+\n 2013-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/58726"}, {"sha": "601039ac0ff7ab8ffc48179f21d9af22caad2641", "filename": "gcc/testsuite/gnat.dg/pack19.adb", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Ftestsuite%2Fgnat.dg%2Fpack19.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc8df24390d66b92a2b23d31f010911f13c6c40/gcc%2Ftestsuite%2Fgnat.dg%2Fpack19.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack19.adb?ref=6bc8df24390d66b92a2b23d31f010911f13c6c40", "patch": "@@ -0,0 +1,56 @@\n+-- { dg-do run }\n+\n+procedure Pack19 is\n+\n+   subtype Always_False is Boolean range False .. False;\n+\n+   type Rec1 is record\n+      B1 : Boolean;\n+      B2 : Boolean;\n+      B3 : Boolean;\n+      B4 : Boolean;\n+      B5 : Boolean;\n+      B6 : Boolean;\n+      B7 : Always_False;\n+      B8 : Boolean;\n+   end record;\n+   pragma Pack (Rec1);\n+\n+   subtype Always_True is Boolean range True .. True;\n+\n+   type Rec2 is record\n+      B1 : Boolean;\n+      B2 : Boolean;\n+      B3 : Boolean;\n+      B4 : Boolean;\n+      B5 : Boolean;\n+      B6 : Boolean;\n+      B7 : Always_True;\n+      B8 : Boolean;\n+   end record;\n+   pragma Pack (Rec2);\n+\n+   R1 : Rec1 := (True, True, True, True, True, True, False, False);\n+   R2 : Rec2 := (False, False, False, False, False, False, True, True);\n+\n+begin\n+   R1.B8 := True;\n+   if R1.B7 /= False then\n+      raise Program_Error;\n+   end if;\n+\n+   R1.B7 := False;\n+   if R1.B7 /= False then\n+      raise Program_Error;\n+   end if;\n+\n+   R2.B8 := False;\n+   if R2.B7 /= True then\n+      raise Program_Error;\n+   end if;\n+\n+   R2.B7 := True;\n+   if R2.B7 /= True then\n+      raise Program_Error;\n+   end if;\n+end;"}]}