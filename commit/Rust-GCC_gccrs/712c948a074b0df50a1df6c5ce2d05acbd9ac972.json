{"sha": "712c948a074b0df50a1df6c5ce2d05acbd9ac972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyYzk0OGEwNzRiMGRmNTBhMWRmNmM1Y2UyZDA1YWNiZDlhYzk3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-08T15:32:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-08T15:32:21Z"}, "message": "re PR c++/50020 ([C++0x] internal compiler error range for in templated class)\n\n\tPR c++/50020\n\t* semantics.c (finish_call_expr): Don't look at 'this' if we\n\thad an explicit object argument.\n\nFrom-SVN: r177567", "tree": {"sha": "07a53c1a51ad5cafbce51e68ad7220bdea5e34e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a53c1a51ad5cafbce51e68ad7220bdea5e34e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712c948a074b0df50a1df6c5ce2d05acbd9ac972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712c948a074b0df50a1df6c5ce2d05acbd9ac972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712c948a074b0df50a1df6c5ce2d05acbd9ac972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712c948a074b0df50a1df6c5ce2d05acbd9ac972/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "473b30ce95c6b3f41ced3bcc18fceb2c5f2ac466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473b30ce95c6b3f41ced3bcc18fceb2c5f2ac466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473b30ce95c6b3f41ced3bcc18fceb2c5f2ac466"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "65a270147a7600699959293d5eb5249752730ed2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=712c948a074b0df50a1df6c5ce2d05acbd9ac972", "patch": "@@ -1,5 +1,9 @@\n 2011-08-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50020\n+\t* semantics.c (finish_call_expr): Don't look at 'this' if we\n+\thad an explicit object argument.\n+\n \tPR c++/50011\n \t* typeck2.c (check_narrowing): Fix integer logic.\n "}, {"sha": "59b25e5066a01750abf1758d329c00ca06b52ac3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=712c948a074b0df50a1df6c5ce2d05acbd9ac972", "patch": "@@ -2042,12 +2042,14 @@ finish_call_expr (tree fn, VEC(tree,gc) **args, bool disallow_virtual,\n \t expressions with no type as being dependent.  */\n       if (type_dependent_expression_p (fn)\n \t  || any_type_dependent_arguments_p (*args)\n-\t  /* For a non-static member function, we need to specifically\n+\t  /* For a non-static member function that doesn't have an\n+\t     explicit object argument, we need to specifically\n \t     test the type dependency of the \"this\" pointer because it\n \t     is not included in *ARGS even though it is considered to\n \t     be part of the list of arguments.  Note that this is\n \t     related to CWG issues 515 and 1005.  */\n-\t  || (non_static_member_function_p (fn)\n+\t  || (TREE_CODE (fn) != COMPONENT_REF\n+\t      && non_static_member_function_p (fn)\n \t      && current_class_ref\n \t      && type_dependent_expression_p (current_class_ref)))\n \t{"}, {"sha": "8b4c15a62a83418c8362662de50e3b4258af8929", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=712c948a074b0df50a1df6c5ce2d05acbd9ac972", "patch": "@@ -1,5 +1,7 @@\n 2011-08-08  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/range-for20.C: Adjust to test 50020 as well.\n+\n \t* g++.dg/cpp0x/initlist5.C: Add 50011 test.\n \n 2011-08-07  Janus Weil  <janus@gcc.gnu.org>"}, {"sha": "890eb0aeaf90dfe49ad220899226d608de4ef318", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for20.C", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712c948a074b0df50a1df6c5ce2d05acbd9ac972/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C?ref=712c948a074b0df50a1df6c5ce2d05acbd9ac972", "patch": "@@ -1,4 +1,5 @@\n // PR c++/49834\n+// PR c++/50020\n // { dg-options -std=c++0x }\n \n struct A\n@@ -17,16 +18,19 @@ struct C\n };\n \n template <typename Ret>\n-Ret f(const C &p)\n+struct D\n {\n-  for (const B &i: p)\t\t// OK\n-    i.second.get_value<int>();\n-  for (const auto &i: p)\t// ERROR\n-    i.second.get_value<int>();\n-  return Ret(0);\n-}\n+  Ret f(const C &p)\n+  {\n+    for (const B &i: p)\t\t// OK\n+      i.second.get_value<int>();\n+    for (const auto &i: p)\t// ERROR\n+      i.second.get_value<int>();\n+    return Ret(0);\n+  }\n+};\n \n void g()\n {\n-  f<int>(C());\n+  D<int>().f(C());\n }"}]}