{"sha": "b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "node_id": "C_kwDOANBUbNoAKGI1ZjA5YmQ3NjYwMDhmZTExYWEzNWNjYWE0MDM4ZjdiMDllMzQ5MmU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-13T00:18:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-13T00:18:20Z"}, "message": "Daily bump.", "tree": {"sha": "f5824bc140aea220a8a83ad4419da9c85fa44f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5824bc140aea220a8a83ad4419da9c85fa44f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/comments", "author": null, "committer": null, "parents": [{"sha": "c17fa0f20eb29bd1cab5e438c72b96281693ac29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17fa0f20eb29bd1cab5e438c72b96281693ac29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17fa0f20eb29bd1cab5e438c72b96281693ac29"}], "stats": {"total": 742, "additions": 741, "deletions": 1}, "files": [{"sha": "95705a4931ac884e5bf5e29a5d848c363a8d9e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,39 @@\n+2022-09-12  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (TARGET_CONSTANT_OK_FOR_CPROP_P):\n+\tNew macro definition.\n+\t(xtensa_constant_ok_for_cprop_p):\n+\tImplement the hook as mentioned above.\n+\n+2022-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stdatomic.h [defined __STDC_VERSION__ &&\n+\t__STDC_VERSION__ > 201710L] (ATOMIC_VAR_INIT): Do not define.\n+\n+2022-09-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/nvptx/mkoffload.cc (process): Replace a fatal_error by\n+\ta warning + not enabling offloading if -misa=sm_30 prevents\n+\treverse offload.\n+\t(main): Use tool_name as progname for diagnostic.\n+\t* config/gcn/mkoffload.cc (main): Likewise.\n+\n+2022-09-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set_signbit): Avoid changing sign when\n+\talready in the correct sign.\n+\n+2022-09-12  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa.cc (xtensa_function_value_regno_p):\n+\tRecognize all 4 return registers.\n+\t* config/xtensa/xtensa.h (GP_RETURN_REG_COUNT): New definition.\n+\t* config/xtensa/xtensa.md (untyped_call): New pattern.\n+\n+2022-09-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/extend.texi (Floating Types): Fix \"_float128\" typo.\n+\n 2022-09-10  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* config/xtensa/xtensa.cc (xtensa_constantsynth):"}, {"sha": "3ab9ae22f92593722c00603c9deffa361ce87e74", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1 +1 @@\n-20220912\n+20220913"}, {"sha": "5a029ed1b842b082fdeafefeb18cd4fd1d226544", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 498, "deletions": 0, "changes": 498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,501 @@\n+2022-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Relax assertion when\n+\tfront-end unnesting is enabled.\n+\n+2022-09-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb\n+\t(Innermost_Master_Scope_Depth): Detect and handle case where scope\n+\tdepth is not set on an enclosing scope.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb: When the binder is invoked for the host, generate a\n+\t\"with CUDA.Internal;\" with clause.\n+\n+2022-09-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst\n+\t(Pragma Unreferenced): Sync description with\n+\tSem_Warn.Has_Junk_Name routine.\n+\t* gnat_rm.texi: Regenerate.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-09-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute [Valid_Scalars]): Move check for\n+\tunchecked union before checks for private and public types.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb: When the binder is invoked for the host, it\n+\tdeclares imported subprograms corresponding to the Adainit and\n+\tAdafinal routines on the device. Declare string constants and\n+\texpression functions for the Ada source names and the link names\n+\tof these routines. Generate these subprogram declarations (and\n+\taccompanying Import pragmas) in Gen_CUDA_Defs. Generate\n+\tCUDA_Execute pragmas to call these subprograms from the host in\n+\tGen_Adafinal and Gen_CUDA_Init. When the binder is invoked for the\n+\tdevice, include a CUDA_Global aspect declaration in the\n+\tdeclarations of Adainit and Adafinal and use the aforementioned\n+\tlink names in the Export pragmas generated for those two routines.\n+\t* debug.adb: Update comments about \"d_c\" and \"d_d\" switches.\n+\t* opt.ads: Declare new Boolean variable,\n+\tEnable_CUDA_Device_Expansion. This complements the existing\n+\tEnable_CUDA_Expansion variable, which is used to enable host-side\n+\tCUDA expansion. The new variable enables device-side CUDA\n+\texpansion. It is currently never set during compilation; it is\n+\tonly set via a binder switch.\n+\t* switch-b.adb\n+\t(scan_debug_switches): Add new use of the \"-d_d\" binder switch.\n+\tThe new switch and the variable Opt.Enabled_CUDA_Device_Expansion\n+\tfollow the existing pattern of the \"-d_c\" switch and the variable\n+\tOpt.Enabled_CUDA_Expansion. Flag error if both \"-d_c\" and \"-d_d\"\n+\tare specified.\n+\n+2022-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (uild_Subprogram_Contract_Wrapper): Remove useless\n+\tlocal variable. In the case of a function, replace the extended\n+\treturn statement by a block statement declaring a renaming of the\n+\tcall to the local subprogram after removing side effects manually.\n+\t(Expand_Subprogram_Contract): Adjust description accordingly.\n+\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Rewrite obsolete\n+\tcomment and do not apply the transformation twice.\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Now expect a block\n+\tstatement instead of an extended return statement.\n+\n+2022-09-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* erroutc.adb (Set_Msg_Insertion_Name): Special-case printing with\n+\tacronyms.\n+\n+2022-09-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imagei.adb (Image_Integer): Add justification.\n+\n+2022-09-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Get_SPARK_Mode_Type): Fix header box; replace\n+\tchained IF with a CASE statement.\n+\n+2022-09-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Accept SPARK_Mode=>Auto as\n+\tconfiguration pragma.\n+\t(Get_SPARK_Mode): Make the value for Auto explicit.\n+\t* snames.ads-tmpl (Name_Auto): Add name.\n+\n+2022-09-12  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Remove paragraphs about SPARK\n+\tcontainers.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2022-09-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-maccod.ads: Mark package as SPARK_Mode Off.\n+\n+2022-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Unnest_Subprogram_Mode): Declare.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* contracts.adb\n+\t(Analyze_Package_Contract): Do not analyze the contract of a\n+\ttemporary package created just to check conformance of an actual\n+\tpackage.\n+\n+2022-09-12  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* Makefile.rtl: Remove SPARK containers filenames.\n+\t* impunit.adb: Remove SPARK containers packages names.\n+\t* libgnat/a-cfdlli.adb, libgnat/a-cfdlli.ads: Remove content and\n+\tadd pragma Compile_Time_Error with suitable message.\n+\t* libgnat/a-cfhama.adb, libgnat/a-cfhama.ads: Likewise.\n+\t* libgnat/a-cfhase.adb, libgnat/a-cfhase.ads: Likewise.\n+\t* libgnat/a-cfidll.adb, libgnat/a-cfidll.ads: Likewise.\n+\t* libgnat/a-cfinse.adb, libgnat/a-cfinse.ads: Likewise.\n+\t* libgnat/a-cfinve.adb, libgnat/a-cfinve.ads: Likewise.\n+\t* libgnat/a-cforma.adb, libgnat/a-cforma.ads: Likewise.\n+\t* libgnat/a-cforse.adb, libgnat/a-cforse.ads: Likewise.\n+\t* libgnat/a-cofove.adb, libgnat/a-cofove.ads: Likewise.\n+\t* libgnat/a-cofuma.adb, libgnat/a-cofuma.ads: Likewise.\n+\t* libgnat/a-cofuse.adb, libgnat/a-cofuse.ads: Likewise.\n+\t* libgnat/a-cofuve.adb, libgnat/a-cofuve.ads: Likewise.\n+\t* libgnat/a-cofuba.adb, libgnat/a-cofuba.ads: Remove package.\n+\n+2022-09-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Old]):\n+\tAdapt to object declaration being rewritten into object renaming.\n+\n+2022-09-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* contracts.adb, contracts.ads\n+\t(Analyze_Pragmas_In_Declarations): Added to aid in the new\n+\texpansion model so that pragmas relating to contracts can get\n+\tprocessed early before the rest of the subprogram containing them.\n+\t(Build_Subprogram_Contract_Wrapper): Created to do the majority of\n+\texpansion for postconditions. It builds a local wrapper with the\n+\tstatements and declarations within a given subprogram.\n+\t(Is_Prologue_Renaming): Moved out from Process_Preconditions to be\n+\tused generally within the contracts package.\n+\t(Build_Entry_Contract_Wrapper): Moved from exp_ch7.\n+\t(Expand_Subprogram_Contract): Add new local variable Decls to\n+\tstore expanded declarations needed for evaluation of contracts.\n+\tCall new wrapper building procedure and modify comments to match\n+\tnew expansion model.\n+\t(Get_Postcond_Enabled): Deleted.\n+\t(Get_Result_Object_For_Postcond): Deleted.\n+\t(Get_Return_Success_For_Postcond): Deleted.\n+\t(Process_Contract_Cases): Add new parameter to store declarations.\n+\t(Process_Postconditions): Add new parameter to store declarations.\n+\t(Process_Preconditions): Add new parameter to store declarations.\n+\tAdd code to move entry-call prologue renamings\n+\t* einfo.ads: Document new field Wrapped_Statements and modify\n+\tcomment for Postconditions_Proc.\n+\t* exp_attr.adb\n+\t(Analyze_Attribute): Modify expansion of the 'Old attribute to\n+\trecognize new expansion model and use Wrapped_Statements instead\n+\tof Postconditions_Proc.\n+\t* exp_ch6.adb\n+\t(Add_Return): Remove special expansion for postconditions.\n+\t(Expand_Call): Modify condition checking for calls to access\n+\tsubprogram wrappers to handle new expansion models.\n+\t(Expand_Call_Helper): Remove special expansion for postconditions.\n+\t(Expand_Non_Function_Return): Remove special expansion for\n+\tpostconditions.\n+\t(Expand_Simple_Function_Return): Remove special expansion for\n+\tpostconditions.\n+\t* exp_ch7.adb\n+\t(Build_Finalizer): Deleted, but replaced by code in\n+\tBuild_Finalizer_Helper\n+\t(Build_Finalizer_Helper): Renamed to Build_Finalizer, and special\n+\thandling of 'Old objects removed.\n+\t* exp_ch9.adb\n+\t(Build_Contract_Wrapper): Renamed and moved to contracts package.\n+\t* exp_prag.adb\n+\t(Expand_Pragma_Contract_Cases): Delay analysis of contracts since\n+\tthey now instead get analyzed as part of the wrapper generation\n+\tinstead of after analysis of their corresponding subprogram's\n+\tbody.\n+\t(Expand_Pragma_Check): Label expanded if-statements which come\n+\tfrom the expansion of assertion statements as\n+\tComes_From_Check_Or_Contract.\n+\t* freeze.adb\n+\t(Freeze_Entity): Add special case to avoid freezing when a freeze\n+\tnode gets generated as part of the expansion of a postcondition\n+\tcheck.\n+\t* gen_il-gen-gen_nodes.adb: Add new flag\n+\tComes_From_Check_Or_Contract.\n+\t* gen_il-fields.ads: Add new field Wrapped_Statements. Add new\n+\tflag Comes_From_Check_Or_Contract.\n+\t* gen_il-gen-gen_entities.adb: Add new field Wrapped_Statements.\n+\t* ghost.adb\n+\t(Is_OK_Declaration): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t(Is_OK_Statement): Simplify condition due to the loss of\n+\tOriginal_Node as a result of the new expansion model of contracts\n+\tand use new flag Comes_From_Check_Or_Contract in its place.\n+\t* inline.adb\n+\t(Declare_Postconditions_Result): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t(Expand_Inlined_Call): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t* lib.adb, lib.ads\n+\t(ipu): Created to aid in debugging.\n+\t* lib-xref.adb\n+\t(Generate_References): Remove special handling for postcondition\n+\tprocedures.\n+\t* sem_attr.adb\n+\t(Analyze_Attribute_Old_Result): Add new context in which 'Old can\n+\tappear due to the changes in expansion. Replace\n+\tName_uPostconditions with Name_uWrapped_Statements.\n+\t(Result): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t* sem_ch11.adb\n+\t(Analyze_Handled_Statements): Remove check to exclude warnings on\n+\tuseless assignments within postcondition procedures since\n+\tpostconditions no longer get isolated into separate subprograms.\n+\t* sem_ch6.adb\n+\t(Analyze_Generic_Subprogram_Body): Modify expansion of generic\n+\tsubprogram bodies so that contracts (and their associated pragmas)\n+\tget analyzed first.\n+\t(Analyze_Subprogram_Body_Helper): Remove global HSS variable due\n+\tto the HSS of the body potentially changing during the expansion\n+\tof contracts. In cases where it was used instead directly call\n+\tHandled_Statement_Sequence. Modify expansion of subprogram bodies\n+\tso that contracts (and their associated pragmas) get analyzed\n+\tfirst.\n+\t(Check_Missing_Return): Create local HSS variable instead of using\n+\ta global one.\n+\t(Move_Pragmas): Use new pragma table instead of an explicit list.\n+\t* sem_elab.adb\n+\t(Is_Postconditions_Proc): Deleted since the new scheme of\n+\texpansion no longer divides postcondition checks to a separate\n+\tsubprogram and so cannot be easily identified (similar to\n+\tpre-condition checks).\n+\t(Info_Call): Remove info printing for _Postconditions subprograms.\n+\t(Is_Assertion_Pragma_Target): Remove check for postconditions\n+\tprocedure\n+\t(Is_Bridge_Target): Remove check for postconditions procedure.\n+\t(Get_Invocation_Attributes): Remove unneeded local variables and\n+\tcheck for postconditions procedure.\n+\t(Output_Call): Remove info printing for _Postconditions\n+\tsubprograms.\n+\t* sem_prag.adb, sem_prag.ads: Add new Pragma table for pragmas\n+\tsignificant to subprograms, along with tech-debt comment.\n+\t(Check_Arg_Is_Local_Name): Modified to recognize the new\n+\t_Wrapped_Statements internal subprogram and the new expansion\n+\tmodel.\n+\t(Relocate_Pragmas_To_Body): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t* sem_res.adb\n+\t(Resolve_Entry_Call): Add conditional to detect both contract\n+\tbased wrappers of entries, but also wrappers generated as part of\n+\tgeneral contract expansion (e.g. local postconditions\n+\tsubprograms).\n+\t* sem_util.adb\n+\t(Accessibility_Level): Verify 'Access is not taken based on a\n+\tcomponent of a function result.\n+\t(Has_Significant_Contracts): Replace Name_uPostconditions with\n+\tName_uWrapped_Statements.\n+\t(Same_Or_Aliased_Subprogram): Add conditional to detect and obtain\n+\tthe original subprogram based on the new concept of\n+\t\"postcondition\" wrappers.\n+\t* sinfo.ads: Add documentation for new flag\n+\tComes_From_Check_Or_Contract.\n+\t* snames.ads-tmpl: Remove Name_uPostconditions and add\n+\tName_uWrapped_Statements\n+\n+2022-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprograms.Search_Subprograms): Skip the\n+\tsubprogram bodies that are not to be unnested.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_aggr.adb\n+\t(Resolve_Array_Aggregate): Generate an appropriate error message\n+\tin the case where an error in the source code leads to an\n+\tN_Iterated_Element_Association node in a bad context.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch4.adb\n+\t(Analyze_Selected_Component): Initialize the local variable Comp\n+\tto avoid having CodePeer generate an uninitialized variable\n+\twarning.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch4.adb\n+\t(Analyze_Selected_Component): Avoid initializing the local\n+\tvariable Comp if the variable is not going to be subsequently\n+\treferenced. This is a correctness issue because the call to\n+\tFirst_Entity can fail.\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch9.adb\n+\t(Satisfies_Lock_Free_Requirements): If Ceiling_Locking locking\n+\tpolicy has been specified, then either return False (if Lock_Free\n+\twas not explicitly specified) or generate a warning that ceiling\n+\tlocking will not be implemented for this protected unit (if\n+\tLock_Free was explicitly specified). Generate an error message (in\n+\taddition to returning False) if an explicit Lock_Free aspect\n+\tspecification is rejected because atomic primitives are not\n+\tsupported on the given target.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Clarify that the\n+\tLock_Free aspect for a protected unit takes precedence over the\n+\tCeiling_Locking locking policy in the case where both apply.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Protected_Spec): Tidy up and propagate the\n+\tComes_From_Source flag onto the new formal parameters.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not check\n+\treferences for subprograms generated for protected subprograms.\n+\n+2022-09-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_res.adb\n+\t(Resolve_Equality_Op): Add handling for equality ops with\n+\tuser-defined literal operands.\n+\t* sem_util.ads\n+\t(Is_User_Defined_Literal): Update spec comment to indicate\n+\tinclusion of named number cases.\n+\t* sem_util.adb\n+\t(Corresponding_Primitive_Op): Rather than following the chain of\n+\tancestor subprograms via Alias and Overridden_Operation links, we\n+\tcheck for matching profiles between primitive subprograms of the\n+\tdescendant type and the ancestor subprogram (by calling a new\n+\tnested function Profile_Matches_Ancestor). This prevents the\n+\tcompiler from hanging due to circular linkages via those fields\n+\tthat can occur between inherited and overriding subprograms\n+\t(which might indicate a latent bug, but one that may be rather\n+\tdelicate to resolve).\n+\t(Profile_Matches_Ancestor): New nested subprogram to compare the\n+\tprofile of a primitive subprogram with the profile of a candidate\n+\tancestor subprogram.\n+\t(Is_User_Defined_Literal): Also return True in cases where the\n+\tnode N denotes a named number (E_Name_Integer and E_Named_Real).\n+\n+2022-09-12  Steve Baird  <baird@adacore.com>\n+\n+\t* debug.adb: remove a comment.\n+\n+2022-09-12  Bob Duff  <duff@adacore.com>\n+\n+\t* checks.adb\n+\t(Selected_Length_Checks): In the message for an aggregate that has\n+\ttoo few or too many elements, add \"!!\" to make sure the warning\n+\tgets printed in with'ed units. Note that we have to put \"!!\"\n+\tbefore the \"??\", because Compile_Time_Constraint_Error detects\n+\twarnings by comparing the last character of the message with '?'\n+\t(which is bit dubious, but we're not changing that here).\n+\t(Length_Mismatch_Info_Message): Use Unat for some things that\n+\tcan't be negative. Specify Decimal instead of Auto in calls to\n+\tUI_Image.\n+\t* sem_util.adb\n+\t(Compile_Time_Constraint_Error): Minor.\n+\t* uintp.adb\n+\t(Image_Uint): It's always better to initialize objects on their\n+\tdeclaration.\n+\n+2022-09-12  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads: Set\n+\tSupport_Atomic_Primitives to false.\n+\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Ditto.\n+\n+2022-09-12  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/system-qnx-arm.ads: Set Support_Atomic_Primitives to\n+\tfalse.\n+\t* libgnat/system-vxworks7-aarch64.ads: Ditto.\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Ditto.\n+\t* libgnat/system-vxworks7-arm.ads: Ditto.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads: Ditto.\n+\t* libgnat/system-vxworks7-x86-kernel.ads: Ditto.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Ditto.\n+\n+2022-09-12  Bob Duff  <duff@adacore.com>\n+\n+\t* par-tchk.adb, par-util.adb, prep.adb, prepcomp.adb, scng.adb:\n+\tUse \"in\" instead of chains of \"=\" connected with \"or else\".\n+\tLikewise for \"not in\", \"/=\", \"and then\". Misc cleanup.\n+\t* par-ch10.adb, par-ch12.adb, par-ch13.adb, par-ch4.adb: Likewise.\n+\t* par-ch8.adb, par-ch9.adb, par-endh.adb, par-sync.adb: Likewise.\n+\t* par.adb\n+\t(Pf_Rec): Remove filler, which was added August 25, 1993 to get\n+\taround a compiler limitation that no longer exists. Minor cleanup.\n+\tRemove useless qualfications.\n+\t* par-ch3.adb: Remove redundant return statements.\n+\t(Component_Scan_Loop): Remove loop name; there are no nested\n+\tloops, so it's unnecessary and possibly misleading, and it causes\n+\ttoo-long lines.\n+\t* par-ch5.adb: DRY: Remove comments that repeat the comments in\n+\tpar.adb.\n+\t(P_Sequence_Of_Statements): It is better to initialize things on\n+\tthe declaration. And constants are better than variables.\n+\t(Test_Statement_Required): Remove unnecessary insertion of a null\n+\tstatement.\n+\t* par-ch6.adb, par-ch7.adb: DRY: Remove comments that repeat the\n+\tcomments in par.adb.\n+\n+2022-09-12  Javier Miranda  <miranda@adacore.com>\n+\n+\tRevert:\n+\t2022-09-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* debug.adb\n+\t(Debug_Flag_Underscore_X): Switch added temporarily to allow\n+\tdisabling extra formal checks.\n+\t* exp_attr.adb\n+\t(Expand_N_Attribute_Reference [access types]): Add extra formals\n+\tto the subprogram referenced in the prefix of 'Unchecked_Access,\n+\t'Unrestricted_Access or 'Access; required to check that its extra\n+\tformals match the extra formals of the corresponding subprogram\n+\ttype.\n+\t* exp_ch3.adb\n+\t(Stream_Operation_OK): Declaration moved to the public part of the\n+\tpackage.\n+\t(Validate_Tagged_Type_Extra_Formals): New subprogram.\n+\t(Expand_Freeze_Record_Type): Improve the code that takes care of\n+\tadding the extra formals of dispatching primitives; extended to\n+\tadd also the extra formals to renamings of dispatching primitives.\n+\t* exp_ch3.ads\n+\t(Stream_Operation_OK): Declaration moved from the package body.\n+\t* exp_ch6.adb\n+\t(Has_BIP_Extra_Formal): Subprogram declaration moved to the public\n+\tpart of the package. In addition, a parameter has been added to\n+\tdisable an assertion that requires its use with frozen entities.\n+\t(Expand_Call_Helper): Enforce assertion checking extra formals on\n+\tthunks.\n+\t(Is_Build_In_Place_Function): Return False for entities with\n+\tforeign convention.\n+\t(Make_Build_In_Place_Call_In_Object_Declaration): Occurrences of\n+\tIs_Return_Object replaced by the local variable\n+\tIs_OK_Return_Object that evaluates to False for scopes with\n+\tforeign convention.\n+\t(Might_Have_Tasks): Fix check of class-wide limited record types.\n+\t(Needs_BIP_Task_Actuals): Remove assertion to allow calling this\n+\tfunction in more contexts; in addition it returns False for\n+\tfunctions returning objects with foreign convention.\n+\t(Needs_BIP_Finalization_Master): Likewise.\n+\t(Needs_BIP_Alloc_Form): Likewise.\n+\t* exp_ch6.ads\n+\t(Stream_Operation_OK): Declaration moved from the package body. In\n+\taddition, a parameter has been added to disable assertion that\n+\trequires its use with frozen entities.\n+\t* freeze.adb\n+\t(Check_Itype): Add extra formals to anonymous access subprogram\n+\titypes.\n+\t(Freeze_Expression): Improve code that disables the addition of\n+\textra formals to functions with foreign convention.\n+\t(Check_Extra_Formals): Moved to package Sem_Ch6 as\n+\tExtra_Formals_OK.\n+\t(Freeze_Subprogram): Add extra formals to non-dispatching\n+\tsubprograms.\n+\t* sem_ch3.adb\n+\t(Access_Subprogram_Declaration): Defer the addition of extra\n+\tformals to the freezing point so that we know the convention.\n+\t(Check_Anonymous_Access_Component): Likewise.\n+\t(Derive_Subprogram): Fix documentation.\n+\t* sem_ch6.adb\n+\t(Check_Anonymous_Return): Fix check of access to class-wide\n+\tlimited record types.\n+\t(Check_Untagged_Equality): Placed in alphabetical order.\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t(Has_BIP_Formals): New subprogram.\n+\t(Has_Extra_Formals): New subprograms.\n+\t(Needs_Accessibility_Check_Extra): New subprogram.\n+\t(Needs_Constrained_Extra): New subprogram.\n+\t(Parent_Subprogram): New subprogram.\n+\t(Add_Extra_Formal): Minor code cleanup.\n+\t(Create_Extra_Formals): Enforce matching extra formals on\n+\toverridden and aliased entities.\n+\t(Has_Reliable_Extra_Formals): New subprogram.\n+\t* sem_ch6.ads\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t* sem_eval.adb\n+\t(Compile_Time_Known_Value): Improve predicate to avoid assertion\n+\tfailure; found working on this ticket; this change does not affect\n+\tthe behavior of the compiler because this subprogram has an\n+\texception handler that returns False when the assertion fails.\n+\t* sem_util.adb\n+\t(Needs_Result_Accessibility_Level): Do not return False for\n+\tdispatching operations compiled with Ada_Version < 2012 since they\n+\tthey may be overridden by primitives compiled with Ada_Version >=\n+\tAda_2012.\n+\n 2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.cc (gnat_to_gnu_param): Set DECL_ARTIFICIAL."}, {"sha": "3af1a38cec379773d61d9423f54d14256fdf665e", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,8 @@\n+2022-09-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* region-model.cc (region_model::maybe_complain_about_infoleak):\n+\t  Remove unused fields.\n+\n 2022-09-11  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/106845"}, {"sha": "61ad2f8bb7e859f1ad282c9ff58b86cac2ea9646", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,97 @@\n+2022-09-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* call.cc (build_conditional_expr): Adjust calls to\n+\t'_sfinae'-suffixed functions.\n+\t(build_temp): Likewise.\n+\t(convert_like_internal): Likewise.\n+\t(convert_arg_to_ellipsis): Likewise.\n+\t(build_over_call): Likewise.\n+\t(build_cxx_call): Likewise.\n+\t(build_new_method_call): Likewise.\n+\t* constexpr.cc (cxx_eval_outermost_constant_expr): Likewise.\n+\t(cxx_constant_value_sfinae): Rename to ...\n+\t(cxx_constant_value): ... this.  Document its default arguments.\n+\t(fold_non_dependent_expr): Adjust function comment.\n+\t* cp-tree.h (instantiate_non_dependent_expr_sfinae): Rename to ...\n+\t(instantiate_non_dependent_expr): ... this.  Give its 'complain'\n+\tparameter a default argument.\n+\t(get_target_expr_sfinae, get_target_expr): Likewise.\n+\t(require_complete_type_sfinae, require_complete_type): Likewise.\n+\t(abstract_virtuals_error_sfinae, abstract_virtuals_error):\n+\tLikewise.\n+\t(cxx_constant_value_sfinae, cxx_constant_value): Likewise.\n+\t* cvt.cc (build_up_reference): Adjust calls to '_sfinae'-suffixed\n+\tfunctions.\n+\t(ocp_convert): Likewise.\n+\t* decl.cc (build_explicit_specifier): Likewise.\n+\t* except.cc (build_noexcept_spec): Likewise.\n+\t* init.cc (build_new_1): Likewise.\n+\t* pt.cc (expand_integer_pack): Likewise.\n+\t(instantiate_non_dependent_expr_internal): Adjust function\n+\tcomment.\n+\t(instantiate_non_dependent_expr): Rename to ...\n+\t(instantiate_non_dependent_expr_sfinae): ... this.  Document its\n+\tdefault argument.\n+\t(tsubst_init): Adjust calls to '_sfinae'-suffixed functions.\n+\t(fold_targs_r): Likewise.\n+\t* semantics.cc (finish_compound_literal): Likewise.\n+\t(finish_decltype_type): Likewise.\n+\t(cp_build_bit_cast): Likewise.\n+\t* tree.cc (build_cplus_new): Likewise.\n+\t(get_target_expr): Rename to ...\n+\t(get_target_expr_sfinae): ... this.  Document its default\n+\targument.\n+\t* typeck.cc (require_complete_type): Rename to ...\n+\t(require_complete_type_sfinae): ... this.  Document its default\n+\targument.\n+\t(cp_build_array_ref): Adjust calls to '_sfinae'-suffixed\n+\tfunctions.\n+\t(convert_arguments): Likewise.\n+\t(cp_build_binary_op): Likewise.\n+\t(build_static_cast_1): Likewise.\n+\t(cp_build_modify_expr): Likewise.\n+\t(convert_for_initialization): Likewise.\n+\t* typeck2.cc (abstract_virtuals_error): Rename to ...\n+\t(abstract_virtuals_error_sfinae): ... this. Document its default\n+\targument.\n+\t(build_functional_cast_1): Adjust calls to '_sfinae'-suffixed\n+\tfunctions.\n+\n+2022-09-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101906\n+\t* pt.cc (tsubst_template_args): Set cp_evaluated here.\n+\t(tsubst_aggr_type): Not here.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106893\n+\tPR c++/90451\n+\t* decl.cc (cp_finish_decl): Call mark_single_function.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93259\n+\t* pt.cc (type_dependent_expression_p): Treat a compound\n+\tliteral of array-of-unknown-bound type like a variable.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106567\n+\t* lambda.cc (type_deducible_expression_p): Check\n+\tarray_of_unknown_bound_p.\n+\n+2022-09-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/86491\n+\t* decl2.cc (constrain_class_visibility): Adjust wording of\n+\t-Wsubobject-linkage for cases where anonymous\n+\tnamespaces aren't used.\n+\t* tree.cc (decl_anon_ns_mem_p): Now only true for actual anonymous\n+\tnamespace members, rename old semantics to...\n+\t(decl_internal_context_p): ...this.\n+\t* cp-tree.h, name-lookup.cc, pt.cc: Adjust.\n+\n 2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/106838"}, {"sha": "2dbed4a35a8ce3849bdd4572612339597a75db02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,56 @@\n+2022-09-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101906\n+\t* g++.dg/template/evaluated1.C: New test.\n+\t* g++.dg/template/evaluated1a.C: New test.\n+\t* g++.dg/template/evaluated1b.C: New test.\n+\t* g++.dg/template/evaluated1c.C: New test.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106893\n+\tPR c++/90451\n+\t* g++.dg/cpp1y/auto-fn65.C: New test.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93259\n+\t* g++.dg/cpp0x/initlist-array17.C: New test.\n+\n+2022-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106567\n+\t* g++.dg/cpp0x/lambda/lambda-array4.C: New test.\n+\n+2022-09-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/86491\n+\t* g++.dg/warn/anonymous-namespace-3.C: Use separate dg-warning\n+\tdirectives for C++98 and everything else.\n+\t* g++.dg/warn/Wsubobject-linkage-5.C: New test.\n+\n+2022-09-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/atomic/c2x-stdatomic-var-init-1.c: New test.\n+\n+2022-09-12  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\n+\t* g++.dg/gcov/gcov.exp: Respect triplet when looking for gcov.\n+\t* gcc.misc-tests/gcov.exp: Likewise.\n+\n+2022-09-12  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* gnat.dg/aspect2.adb: Removed.\n+\t* gnat.dg/aspect2.ads: Removed.\n+\t* gnat.dg/config_pragma1.adb: Removed.\n+\t* gnat.dg/config_pragma1_pkg.ads: Removed.\n+\t* gnat.dg/equal8.adb: Removed.\n+\t* gnat.dg/equal8.ads: Removed.\n+\t* gnat.dg/equal8_pkg.ads: Removed.\n+\t* gnat.dg/formal_containers.adb: Removed.\n+\t* gnat.dg/iter1.adb: Removed.\n+\t* gnat.dg/iter1.ads: Removed.\n+\n 2022-09-11  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/106845"}, {"sha": "3ff9d25d76bd3550247afcb8b7f935870aa63779", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,28 @@\n+2022-09-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (Offload-Target Specifics: nvptx): Document\n+\tthat reverse offload requires >= -march=sm_35.\n+\t* testsuite/libgomp.c-c++-common/requires-4.c: Build for nvptx\n+\twith -misa=sm_35.\n+\t* testsuite/libgomp.c-c++-common/requires-5.c: Likewise.\n+\t* testsuite/libgomp.c-c++-common/requires-6.c: Likewise.\n+\t* testsuite/libgomp.c-c++-common/reverse-offload-1.c: Likewise.\n+\t* testsuite/libgomp.fortran/reverse-offload-1.f90: Likewise.\n+\t* testsuite/libgomp.c/reverse-offload-sm30.c: New test.\n+\n+2022-09-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1 Impl. Status): Add two new minor items.\n+\t(OpenMP 5.2 Impl. Status): Improve omp/omx/ompx wording.\n+\n+2022-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/106894\n+\t* testsuite/libgomp.c-c++-common/icv-6.c: Include string.h.\n+\t(main): Avoid tests for which corresponding non-_ALL suffixed variable\n+\tis in the environment, or for OMP_NUM_TEAMS on the device\n+\tOMP_NUM_TEAMS_DEV_?.\n+\n 2022-09-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* env.c (initialize_env): Include libiberty environ.h."}, {"sha": "5ee68604bbf407cd41e99a92bc3ba4d19ddae9ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f09bd766008fe11aa35ccaa4038f7b09e3492e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5f09bd766008fe11aa35ccaa4038f7b09e3492e", "patch": "@@ -1,3 +1,32 @@\n+2022-09-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/106320\n+\t* testsuite/std/ranges/adaptors/join.cc (test13): New test.\n+\n+2022-09-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/19_diagnostics/error_code/cons/lwg3629.cc: Fix\n+\tcomments.\n+\t* testsuite/19_diagnostics/error_condition/cons/lwg3629.cc:\n+\tLikewise.\n+\n+2022-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105329\n+\t* acinclude.m4 (libtool_VERSION): Change to 6:31:0.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Don't export\n+\tstd::basic_string methods with name length of 15.\n+\t(GLIBCXX_3.4.31): Export std::basic_string::_M_replace_cold.\n+\t* testsuite/util/testsuite_abi.cc (check_version): Handle\n+\tGLIBCXX_3.4.31.\n+\t* include/bits/basic_string.h (std::basic_string::_M_replace_cold):\n+\tDeclare.\n+\t* include/bits/basic_string.tcc (std::basic_string::_M_replace_cold):\n+\tDefine and export even for C++20.\n+\t(std::basic_string::_M_replace): Use __builtin_expect, outline\n+\tthe overlapping case to _M_replace_cold.\n+\t* configure: Regenerated.\n+\n 2022-09-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_base.h (__atomic_impl::__compare_exchange):"}]}