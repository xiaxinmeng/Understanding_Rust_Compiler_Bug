{"sha": "dc06dd83660010f2ed70c6205a0876f91553a30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwNmRkODM2NjAwMTBmMmVkNzBjNjIwNWEwODc2ZjkxNTUzYTMwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-17T08:51:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-17T08:51:08Z"}, "message": "[multiple changes]\n\n2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Add_Invariants): For a class-wide type invariant,\n\tpreserve semantic information on the invariant expression\n\t(typically a function call) because it may be inherited by a\n\ttype extension in a different unit, and it cannot be resolved\n\tby visibility elsewhere because it may refer to local entities.\n\n2014-10-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document that string literal can be used for\n\tpragma Warnings when operating in Ada 83 mode.\n\n2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Find_Aggregate_Component_Desig_Type): New\n\tsubsidiary function to Freeze_ Expression, used to determine\n\twhether an aggregate for an array of access types also freezes the\n\tdesignated type, when some aggregate components are allocators.\n\n2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-strsea.adb (Find_Token): AI05-031 indicates that the\n\tprocedure must raise Index_Error when Source is not empty and\n\tthe From parameter is not within the range of the Source string.\n\n2014-10-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Is_Static_String_Expression): Allow string\n\tliteral in Ada 83 mode.\n\nFrom-SVN: r216377", "tree": {"sha": "a75ab030ca6b5b8bdc2aa7d89f9ea76eb33d3698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75ab030ca6b5b8bdc2aa7d89f9ea76eb33d3698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc06dd83660010f2ed70c6205a0876f91553a30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc06dd83660010f2ed70c6205a0876f91553a30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc06dd83660010f2ed70c6205a0876f91553a30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc06dd83660010f2ed70c6205a0876f91553a30e/comments", "author": null, "committer": null, "parents": [{"sha": "c3ed5e9eaf279c24b3fb69bf261f4abef67aad04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ed5e9eaf279c24b3fb69bf261f4abef67aad04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ed5e9eaf279c24b3fb69bf261f4abef67aad04"}], "stats": {"total": 207, "additions": 155, "deletions": 52}, "files": [{"sha": "0583295e62a00106de20e137d7ffd10d968a9792", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -1,3 +1,34 @@\n+2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Invariants): For a class-wide type invariant,\n+\tpreserve semantic information on the invariant expression\n+\t(typically a function call) because it may be inherited by a\n+\ttype extension in a different unit, and it cannot be resolved\n+\tby visibility elsewhere because it may refer to local entities.\n+\n+2014-10-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document that string literal can be used for\n+\tpragma Warnings when operating in Ada 83 mode.\n+\n+2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Find_Aggregate_Component_Desig_Type): New\n+\tsubsidiary function to Freeze_ Expression, used to determine\n+\twhether an aggregate for an array of access types also freezes the\n+\tdesignated type, when some aggregate components are allocators.\n+\n+2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-strsea.adb (Find_Token): AI05-031 indicates that the\n+\tprocedure must raise Index_Error when Source is not empty and\n+\tthe From parameter is not within the range of the Source string.\n+\n+2014-10-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Is_Static_String_Expression): Allow string\n+\tliteral in Ada 83 mode.\n+\n 2014-10-17  Vincent Celier  <celier@adacore.com>\n \n \t* prj-conf.adb (Get_Config_Switches): In CodePeer mode, do"}, {"sha": "f1fb352fe0bf01e67b9413e08170d190954cf9ee", "filename": "gcc/ada/a-strsea.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fa-strsea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fa-strsea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsea.adb?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -203,6 +203,12 @@ package body Ada.Strings.Search is\n       Last   : out Natural)\n    is\n    begin\n+      --  AI05-031: Raise Index error if Source non-empty and From not in range\n+\n+      if Source'Length /= 0 and then From not in Source'Range then\n+         raise Index_Error;\n+      end if;\n+\n       for J in From .. Source'Last loop\n          if Belongs (Source (J), Set, Test) then\n             First := J;"}, {"sha": "981c7f5e1043019ff3c20e43de92592bab16a085", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -5958,12 +5958,52 @@ package body Freeze is\n       --  may reference entities that have to be frozen before the body and\n       --  obviously cannot be frozen inside the body.\n \n+      function Find_Aggregate_Component_Desig_Type return Entity_Id;\n+      --  If the expression is an array aggregate, the type of the component\n+      --  expressions is also frozen. If the component type is an access type\n+      --  and the expressions include allocators, the designed type is frozen\n+      --  as well.\n+\n       function In_Exp_Body (N : Node_Id) return Boolean;\n       --  Given an N_Handled_Sequence_Of_Statements node N, determines whether\n       --  it is the handled statement sequence of an expander-generated\n       --  subprogram (init proc, stream subprogram, or renaming as body).\n       --  If so, this is not a freezing context.\n \n+      -----------------------------------------\n+      -- Find_Aggregate_Component_Desig_Type --\n+      -----------------------------------------\n+\n+      function Find_Aggregate_Component_Desig_Type return Entity_Id is\n+         Assoc : Node_Id;\n+         Exp   : Node_Id;\n+\n+      begin\n+         if Present (Expressions (N)) then\n+            Exp := First (Expressions (N));\n+            while Present (Exp) loop\n+               if Nkind (Exp) = N_Allocator then\n+                  return Designated_Type (Component_Type (Etype (N)));\n+               end if;\n+\n+               Next (Exp);\n+            end loop;\n+         end if;\n+\n+         if Present (Component_Associations (N)) then\n+            Assoc := First  (Component_Associations (N));\n+            while Present (Assoc) loop\n+               if Nkind (Expression (Assoc)) = N_Allocator then\n+                  return Designated_Type (Component_Type (Etype (N)));\n+               end if;\n+\n+               Next (Assoc);\n+            end loop;\n+         end if;\n+\n+         return Empty;\n+      end Find_Aggregate_Component_Desig_Type;\n+\n       -----------------\n       -- In_Exp_Body --\n       -----------------\n@@ -6104,7 +6144,10 @@ package body Freeze is\n             if Is_Array_Type (Etype (N))\n               and then Is_Access_Type (Component_Type (Etype (N)))\n             then\n-               Desig_Typ := Designated_Type (Component_Type (Etype (N)));\n+\n+               --  Check whether aggregate includes allocators.\n+\n+               Desig_Typ := Find_Aggregate_Component_Desig_Type;\n             end if;\n \n          when N_Selected_Component |"}, {"sha": "a824ca9feba421f9ba489740e68127ae57561f70", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -7829,6 +7829,9 @@ pragma Warnings (static_string_EXPRESSION [,REASON]);\n pragma Warnings (On | Off, static_string_EXPRESSION [,REASON]);\n \n REASON ::= Reason => STRING_LITERAL @{& STRING_LITERAL@}\n+\n+Note: in Ada 83 mode, a string literal may be used in place of\n+a static string expression (which does not exist in Ada 83).\n @end smallexample\n \n @noindent"}, {"sha": "b486a68fab6b716c2b7142e325530f64b8b77352", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -2947,8 +2947,7 @@ package body Sem_Ch13 is\n                         --  evaluation of this aspect should be delayed to the\n                         --  freeze point (why???)\n \n-                        if No (Expr)\n-                          or else Is_True (Static_Boolean (Expr))\n+                        if No (Expr) or else Is_True (Static_Boolean (Expr))\n                         then\n                            Set_Uses_Lock_Free (E);\n                         end if;\n@@ -3621,10 +3620,10 @@ package body Sem_Ch13 is\n                if (Attr = Name_Constant_Indexing\n                     and then Present\n                       (Find_Aspect (Etype (Ent), Aspect_Constant_Indexing)))\n-\n-                 or else (Attr = Name_Variable_Indexing\n-                    and then Present\n-                      (Find_Aspect (Etype (Ent), Aspect_Variable_Indexing)))\n+                 or else\n+                   (Attr = Name_Variable_Indexing\n+                     and then Present\n+                       (Find_Aspect (Etype (Ent), Aspect_Variable_Indexing)))\n                then\n                   if Debug_Flag_Dot_XX then\n                      null;\n@@ -4269,11 +4268,7 @@ package body Sem_Ch13 is\n \n             --  Case of address clause for a (non-controlled) object\n \n-            elsif\n-              Ekind (U_Ent) = E_Variable\n-                or else\n-              Ekind (U_Ent) = E_Constant\n-            then\n+            elsif Ekind_In (U_Ent, E_Variable, E_Constant) then\n                declare\n                   Expr  : constant Node_Id := Expression (N);\n                   O_Ent : Entity_Id;\n@@ -4295,7 +4290,7 @@ package body Sem_Ch13 is\n \n                   if Present (O_Ent)\n                     and then (Has_Controlled_Component (Etype (O_Ent))\n-                                or else Is_Controlled (Etype (O_Ent)))\n+                               or else Is_Controlled (Etype (O_Ent)))\n                   then\n                      Error_Msg_N\n                        (\"??cannot overlay with controlled object\", Expr);\n@@ -4826,13 +4821,10 @@ package body Sem_Ch13 is\n             --  except from aspect specification.\n \n             if From_Aspect_Specification (N) then\n-               if not (Is_Protected_Type (U_Ent)\n-                        or else Is_Task_Type (U_Ent))\n-               then\n+               if not Is_Concurrent_Type (U_Ent) then\n                   Error_Msg_N\n-                    (\"Interrupt_Priority can only be defined for task\" &\n-                     \"and protected object\",\n-                     Nam);\n+                    (\"Interrupt_Priority can only be defined for task \"\n+                     & \"and protected object\", Nam);\n \n                elsif Duplicate_Clause then\n                   null;\n@@ -4985,14 +4977,12 @@ package body Sem_Ch13 is\n             --  aspect specification.\n \n             if From_Aspect_Specification (N) then\n-               if not (Is_Protected_Type (U_Ent)\n-                        or else Is_Task_Type (U_Ent)\n+               if not (Is_Concurrent_Type (U_Ent)\n                         or else Ekind (U_Ent) = E_Procedure)\n                then\n                   Error_Msg_N\n-                    (\"Priority can only be defined for task and protected \" &\n-                     \"object\",\n-                     Nam);\n+                    (\"Priority can only be defined for task and protected \"\n+                     & \"object\", Nam);\n \n                elsif Duplicate_Clause then\n                   null;\n@@ -5828,6 +5818,7 @@ package body Sem_Ch13 is\n \n             if Val = No_Uint then\n                Err := True;\n+\n             elsif Val < Lo or else Hi < Val then\n                Error_Msg_N (\"value outside permitted range\", Expr);\n                Err := True;\n@@ -7625,6 +7616,29 @@ package body Sem_Ch13 is\n                Set_Parent (Exp, N);\n                Preanalyze_Assert_Expression (Exp, Standard_Boolean);\n \n+               --  A class-wide invariant may be inherited in a separate unit,\n+               --  where the corresponding expression cannot be resolved by\n+               --  visibility, because it refers to a local function. Propagate\n+               --  semantic information to the original representation item, to\n+               --  be used when an invariant procedure for a derived type is\n+               --  constructed.\n+\n+               --  Unclear how to handle class-wide invariants that are not\n+               --  function calls ???\n+\n+               if not Inherit\n+                 and then Class_Present (Ritem)\n+                 and then Nkind (Exp) = N_Function_Call\n+                 and then Nkind (Arg2) = N_Indexed_Component\n+               then\n+                  Rewrite (Arg2,\n+                    Make_Function_Call (Loc,\n+                      Name                   =>\n+                        New_Occurrence_Of (Entity (Name (Exp)), Loc),\n+                      Parameter_Associations =>\n+                        New_Copy_List (Expressions (Arg2))));\n+               end if;\n+\n                --  In ASIS mode, even if assertions are not enabled, we must\n                --  analyze the original expression in the aspect specification\n                --  because it is part of the original tree.\n@@ -8501,9 +8515,9 @@ package body Sem_Ch13 is\n       --  at the freeze point.\n \n       elsif A_Id = Aspect_Input  or else\n-         A_Id = Aspect_Output    or else\n-         A_Id = Aspect_Read      or else\n-         A_Id = Aspect_Write\n+            A_Id = Aspect_Output or else\n+            A_Id = Aspect_Read   or else\n+            A_Id = Aspect_Write\n       then\n          Analyze (End_Decl_Expr);\n          Check_Overloaded_Name;\n@@ -8862,8 +8876,8 @@ package body Sem_Ch13 is\n                     and then Has_Discriminants (T))\n                  or else\n                   (Is_Access_Type (T)\n-                     and then Is_Record_Type (Designated_Type (T))\n-                     and then Has_Discriminants (Designated_Type (T)))\n+                    and then Is_Record_Type (Designated_Type (T))\n+                    and then Has_Discriminants (Designated_Type (T)))\n                then\n                   Error_Msg_NE\n                     (\"invalid address clause for initialized object &!\",\n@@ -8954,11 +8968,8 @@ package body Sem_Ch13 is\n                then\n                   return;\n \n-               elsif\n-                  Ekind (Ent) = E_Constant\n-                    or else\n-                  Ekind (Ent) = E_In_Parameter\n-               then\n+               elsif Ekind_In (Ent, E_Constant, E_In_Parameter) then\n+\n                   --  This is the case where we must have Ent defined before\n                   --  U_Ent. Clearly if they are in different units this\n                   --  requirement is met since the unit containing Ent is\n@@ -11132,9 +11143,7 @@ package body Sem_Ch13 is\n       --  need to know such a size, but this routine may be called with a\n       --  generic type as part of normal processing.\n \n-      elsif Is_Generic_Type (R_Typ)\n-        or else R_Typ = Any_Type\n-      then\n+      elsif Is_Generic_Type (R_Typ) or else R_Typ = Any_Type then\n          return 0;\n \n          --  Access types (cannot have size smaller than System.Address)\n@@ -11849,8 +11858,7 @@ package body Sem_Ch13 is\n          (Is_Record_Type (T2) or else Is_Array_Type (T2))\n         and then\n          (Component_Alignment (T1) /= Component_Alignment (T2)\n-            or else\n-              Reverse_Storage_Order (T1) /= Reverse_Storage_Order (T2))\n+           or else Reverse_Storage_Order (T1) /= Reverse_Storage_Order (T2))\n       then\n          return False;\n       end if;\n@@ -12739,9 +12747,7 @@ package body Sem_Ch13 is\n \n          Prim := First (Choices (Assoc));\n \n-         if Nkind (Prim) /= N_Identifier\n-           or else Present (Next (Prim))\n-         then\n+         if Nkind (Prim) /= N_Identifier or else Present (Next (Prim)) then\n             Error_Msg_N (\"illegal name in association\", Prim);\n \n          elsif Chars (Prim) = Name_First then\n@@ -12858,24 +12864,22 @@ package body Sem_Ch13 is\n       if Warn_On_Unchecked_Conversion\n         and then not In_Predefined_Unit (N)\n         and then RTU_Loaded (Ada_Calendar)\n-        and then\n-          (Chars (Source) = Name_Time\n-             or else\n-           Chars (Target) = Name_Time)\n+        and then (Chars (Source) = Name_Time\n+                    or else\n+                  Chars (Target) = Name_Time)\n       then\n          --  If Ada.Calendar is loaded and the name of one of the operands is\n          --  Time, there is a good chance that this is Ada.Calendar.Time.\n \n          declare\n-            Calendar_Time : constant Entity_Id :=\n-                              Full_View (RTE (RO_CA_Time));\n+            Calendar_Time : constant Entity_Id := Full_View (RTE (RO_CA_Time));\n          begin\n             pragma Assert (Present (Calendar_Time));\n \n             if Source = Calendar_Time or else Target = Calendar_Time then\n                Error_Msg_N\n-                 (\"?z?representation of 'Time values may change between \" &\n-                  \"'G'N'A'T versions\", N);\n+                 (\"?z?representation of 'Time values may change between \"\n+                  & \"'G'N'A'T versions\", N);\n             end if;\n          end;\n       end if;"}, {"sha": "c1b9b6e58d07574696e6500a2fad6cca1ef8cb2d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc06dd83660010f2ed70c6205a0876f91553a30e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=dc06dd83660010f2ed70c6205a0876f91553a30e", "patch": "@@ -3201,6 +3201,8 @@ package body Sem_Prag is\n       function Is_Static_String_Expression (Arg : Node_Id) return Boolean;\n       --  Analyzes the argument, and determines if it is a static string\n       --  expression, returns True if so, False if non-static or not String.\n+      --  A special case is that a string literal returns True in Ada 83 mode\n+      --  (which has no such thing as static string expressions).\n \n       procedure Pragma_Misplaced;\n       pragma No_Return (Pragma_Misplaced);\n@@ -6220,11 +6222,25 @@ package body Sem_Prag is\n \n       function Is_Static_String_Expression (Arg : Node_Id) return Boolean is\n          Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n+         Lit  : constant Boolean := Nkind (Argx) = N_String_Literal;\n \n       begin\n          Analyze_And_Resolve (Argx);\n-         return Is_OK_Static_Expression (Argx)\n-           and then Nkind (Argx) = N_String_Literal;\n+\n+         --  Special case Ada 83, where the expression will never be static,\n+         --  but we will return true if we had a string literal to start with.\n+\n+         if Ada_Version = Ada_83 then\n+            return Lit;\n+\n+         --  Normal case, true only if we end up with a string literal that\n+         --  is marked as being the result of evaluating a static expression.\n+\n+         else\n+            return Is_OK_Static_Expression (Argx)\n+              and then Nkind (Argx) = N_String_Literal;\n+         end if;\n+\n       end Is_Static_String_Expression;\n \n       ----------------------"}]}