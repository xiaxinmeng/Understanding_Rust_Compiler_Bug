{"sha": "1f11033528b5b35ecc84eb4afa53c64509eb542c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxMTAzMzUyOGI1YjM1ZWNjODRlYjRhZmE1M2M2NDUwOWViNTQyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T15:15:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T15:15:25Z"}, "message": "[multiple changes]\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Add processing for Standard'Compiler_Version\n\n2009-05-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch5.adb, exp_util.adb, exp_attr.adb, sem_util.adb, sem_res.adb,\n\ttargparm.adb, targparm.ads, exp_ch4.adb, exp_ch6.adb, exp_disp.adb,\n\topt.ads, exp_aggr.adb, exp_intr.adb, sem_disp.adb, exp_ch3.adb\n\t(Tagged_Type_Expansion): New flag.\n\tReplace use of VM_Target related to tagged types expansion by\n\tTagged_Type_Expansion, since tagged type expansion is not necessarily\n\tlinked to VM targets.\n\nFrom-SVN: r147182", "tree": {"sha": "4e4050eefd76a022915565778c7256ae331239ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e4050eefd76a022915565778c7256ae331239ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f11033528b5b35ecc84eb4afa53c64509eb542c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f11033528b5b35ecc84eb4afa53c64509eb542c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f11033528b5b35ecc84eb4afa53c64509eb542c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f11033528b5b35ecc84eb4afa53c64509eb542c/comments", "author": null, "committer": null, "parents": [{"sha": "e0bf7d650ca008463f43269a57cc2cf602bca20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bf7d650ca008463f43269a57cc2cf602bca20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bf7d650ca008463f43269a57cc2cf602bca20b"}], "stats": {"total": 152, "additions": 86, "deletions": 66}, "files": [{"sha": "ae2e50c454caf0d7239d773360c02d367157b305", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -1,5 +1,17 @@\n+2009-05-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb, exp_util.adb, exp_attr.adb, sem_util.adb, sem_res.adb,\n+\ttargparm.adb, targparm.ads, exp_ch4.adb, exp_ch6.adb, exp_disp.adb,\n+\topt.ads, exp_aggr.adb, exp_intr.adb, sem_disp.adb, exp_ch3.adb\n+\t(Tagged_Type_Expansion): New flag.\n+\tReplace use of VM_Target related to tagged types expansion by\n+\tTagged_Type_Expansion, since tagged type expansion is not necessarily\n+\tlinked to VM targets.\n+\n 2009-05-06  Robert Dewar  <dewar@adacore.com>\n \n+\t* sem_attr.adb: Add processing for Standard'Compiler_Version\n+\n \t* sinput.adb (Expr_Last_Char): Fix some copy-paste errors for paren\n \tskipping.\n \t(Expr_First_Char): Add ??? comment that paren skipping needs work"}, {"sha": "db9e1d7784c5e02d7d3f59ba9a84a916229b308a", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -56,7 +56,6 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -623,7 +622,9 @@ package body Exp_Aggr is\n       --    with tagged components, but not clear whether it's worthwhile ???;\n       --    in the case of the JVM, object tags are handled implicitly)\n \n-      if Is_Tagged_Type (Component_Type (Typ)) and then VM_Target = No_VM then\n+      if Is_Tagged_Type (Component_Type (Typ))\n+        and then Tagged_Type_Expansion\n+      then\n          return False;\n       end if;\n \n@@ -1188,12 +1189,12 @@ package body Exp_Aggr is\n             Append_To (L, A);\n \n             --  Adjust the tag if tagged (because of possible view\n-            --  conversions), unless compiling for the Java VM where\n+            --  conversions), unless compiling for a VM where\n             --  tags are implicit.\n \n             if Present (Comp_Type)\n               and then Is_Tagged_Type (Comp_Type)\n-              and then VM_Target = No_VM\n+              and then Tagged_Type_Expansion\n             then\n                A :=\n                  Make_OK_Assignment_Statement (Loc,\n@@ -2619,7 +2620,7 @@ package body Exp_Aggr is\n                --  the subsequent deep_adjust works properly (unless VM_Target,\n                --  where tags are implicit).\n \n-               if VM_Target = No_VM then\n+               if Tagged_Type_Expansion then\n                   Instr :=\n                     Make_OK_Assignment_Statement (Loc,\n                       Name =>\n@@ -3032,7 +3033,9 @@ package body Exp_Aggr is\n \n                --    tmp.comp._tag := comp_typ'tag;\n \n-               if Is_Tagged_Type (Comp_Type) and then VM_Target = No_VM then\n+               if Is_Tagged_Type (Comp_Type)\n+                 and then Tagged_Type_Expansion\n+               then\n                   Instr :=\n                     Make_OK_Assignment_Statement (Loc,\n                       Name =>\n@@ -3155,7 +3158,7 @@ package body Exp_Aggr is\n       elsif Is_CPP_Class (Typ) then\n          null;\n \n-      elsif Is_Tagged_Type (Typ) and then VM_Target = No_VM then\n+      elsif Is_Tagged_Type (Typ) and then Tagged_Type_Expansion then\n          Instr :=\n            Make_OK_Assignment_Statement (Loc,\n              Name =>\n@@ -5298,7 +5301,7 @@ package body Exp_Aggr is\n       else\n          Set_Etype (N, Typ);\n \n-         if VM_Target = No_VM then\n+         if Tagged_Type_Expansion then\n             Expand_Record_Aggregate (N,\n               Orig_Tag    =>\n                 New_Occurrence_Of\n@@ -5389,7 +5392,7 @@ package body Exp_Aggr is\n                          or else (Is_Entity_Name (Expr_Q)\n                                     and then\n                                       Ekind (Entity (Expr_Q)) in Formal_Kind))\n-              and then VM_Target = No_VM\n+              and then Tagged_Type_Expansion\n             then\n                Static_Components := False;\n                return True;\n@@ -5735,7 +5738,7 @@ package body Exp_Aggr is\n \n             if Present (Orig_Tag) then\n                Tag_Value := Orig_Tag;\n-            elsif VM_Target /= No_VM then\n+            elsif not Tagged_Type_Expansion then\n                Tag_Value := Empty;\n             else\n                Tag_Value :=\n@@ -5799,7 +5802,7 @@ package body Exp_Aggr is\n             --  For a root type, the tag component is added (unless compiling\n             --  for the VMs, where tags are implicit).\n \n-            elsif VM_Target = No_VM then\n+            elsif Tagged_Type_Expansion then\n                declare\n                   Tag_Name  : constant Node_Id :=\n                                 New_Occurrence_Of\n@@ -5901,7 +5904,7 @@ package body Exp_Aggr is\n \n    begin\n       return Static_Dispatch_Tables\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n         and then RTU_Loaded (Ada_Tags)\n \n          --  Avoid circularity when rebuilding the compiler"}, {"sha": "bdc3c53502e2c1dd9aea16b24f68e5cc1328e286", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -1031,7 +1031,7 @@ package body Exp_Attr is\n \n          elsif Is_Class_Wide_Type (Ptyp)\n            and then Is_Interface (Ptyp)\n-           and then VM_Target = No_VM\n+           and then Tagged_Type_Expansion\n            and then not (Nkind (Pref) in N_Has_Entity\n                           and then Is_Subprogram (Entity (Pref)))\n          then\n@@ -3118,7 +3118,7 @@ package body Exp_Attr is\n                   --  accessibility check on virtual machines, so we omit it.\n \n                   if Ada_Version >= Ada_05\n-                    and then VM_Target = No_VM\n+                    and then Tagged_Type_Expansion\n                   then\n                      Insert_Action (N,\n                        Make_Implicit_If_Statement (N,\n@@ -4355,7 +4355,7 @@ package body Exp_Attr is\n             --  For VMs we leave the type attribute unexpanded because\n             --  there's not a dispatching table to reference.\n \n-            if VM_Target = No_VM then\n+            if Tagged_Type_Expansion then\n                Rewrite (N,\n                  Unchecked_Convert_To (RTE (RE_Tag),\n                    New_Reference_To\n@@ -4380,7 +4380,7 @@ package body Exp_Attr is\n \n             --  Not needed for VM targets, since all handled by the VM\n \n-            if VM_Target = No_VM then\n+            if Tagged_Type_Expansion then\n                Rewrite (N,\n                  Make_Explicit_Dereference (Loc,\n                    Unchecked_Convert_To (RTE (RE_Tag_Ptr),"}, {"sha": "4138dd018588e0f473dd38c37597c58e21d4c1c0", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -1865,7 +1865,7 @@ package body Exp_Ch3 is\n          --  Suppress the tag adjustment when VM_Target because VM tags are\n          --  represented implicitly in objects.\n \n-         if Is_Tagged_Type (Typ) and then VM_Target = No_VM then\n+         if Is_Tagged_Type (Typ) and then Tagged_Type_Expansion then\n             Append_To (Res,\n               Make_Assignment_Statement (Loc,\n                 Name =>\n@@ -2159,7 +2159,7 @@ package body Exp_Ch3 is\n          if not Is_Tagged_Type (Rec_Type)\n            or else Etype (Rec_Type) = Rec_Type\n            or else not Has_Discriminants (Etype (Rec_Type))\n-           or else VM_Target /= No_VM\n+           or else not Tagged_Type_Expansion\n          then\n             return;\n          end if;\n@@ -2292,7 +2292,7 @@ package body Exp_Ch3 is\n \n          if Is_Tagged_Type (Rec_Type)\n            and then not Is_CPP_Class (Rec_Type)\n-           and then VM_Target = No_VM\n+           and then Tagged_Type_Expansion\n            and then not No_Run_Time_Mode\n          then\n             --  Initialize the primary tag\n@@ -4214,7 +4214,7 @@ package body Exp_Ch3 is\n \n       --  Force construction of dispatch tables of library level tagged types\n \n-      if VM_Target = No_VM\n+      if Tagged_Type_Expansion\n         and then Static_Dispatch_Tables\n         and then Is_Library_Level_Entity (Def_Id)\n         and then Is_Library_Level_Tagged_Type (Base_Typ)\n@@ -4523,7 +4523,7 @@ package body Exp_Ch3 is\n                    or else\n                      not Is_Ancestor (Root_Type (Typ), Etype (Expr)))\n               and then Comes_From_Source (Def_Id)\n-              and then VM_Target = No_VM\n+              and then Tagged_Type_Expansion\n             then\n                declare\n                   Decl_1 : Node_Id;\n@@ -4650,7 +4650,7 @@ package body Exp_Ch3 is\n             if Is_Tagged_Type (Typ)\n               and then not Is_Class_Wide_Type (Typ)\n               and then not Is_CPP_Class (Typ)\n-              and then VM_Target = No_VM\n+              and then Tagged_Type_Expansion\n               and then Nkind (Expr) /= N_Aggregate\n             then\n                --  The re-assignment of the tag has to be done even if the\n@@ -5076,7 +5076,7 @@ package body Exp_Ch3 is\n       if Has_Task (Typ)\n         and then not Restriction_Active (No_Implicit_Heap_Allocations)\n         and then not Global_Discard_Names\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n       then\n          Set_Uses_Sec_Stack (Proc_Id);\n       end if;\n@@ -5701,7 +5701,7 @@ package body Exp_Ch3 is\n \n             --  Create the tag entities with a minimum decoration\n \n-            if VM_Target = No_VM then\n+            if Tagged_Type_Expansion then\n                Append_Freeze_Actions (Def_Id, Make_Tags (Def_Id));\n             end if;\n \n@@ -5822,16 +5822,14 @@ package body Exp_Ch3 is\n             --  VM_Target because the dispatching mechanism is handled\n             --  internally by the VMs.\n \n-            if VM_Target = No_VM then\n+            if Tagged_Type_Expansion then\n                Append_Freeze_Actions (Def_Id, Make_Tags (Def_Id));\n \n                --  Generate dispatch table of locally defined tagged type.\n                --  Dispatch tables of library level tagged types are built\n                --  later (see Analyze_Declarations).\n \n-               if VM_Target = No_VM\n-                 and then not Has_Static_DT\n-               then\n+               if not Has_Static_DT then\n                   Append_Freeze_Actions (Def_Id, Make_DT (Def_Id));\n                end if;\n             end if;\n@@ -5950,7 +5948,7 @@ package body Exp_Ch3 is\n \n       Adjust_Discriminants (Def_Id);\n \n-      if VM_Target = No_VM or else not Is_Interface (Def_Id) then\n+      if Tagged_Type_Expansion or else not Is_Interface (Def_Id) then\n \n          --  Do not need init for interfaces on e.g. CIL since they're\n          --  abstract. Helps operation of peverify (the PE Verify tool).\n@@ -7934,7 +7932,7 @@ package body Exp_Ch3 is\n       --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n \n       if Ada_Version >= Ada_05\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n         and then not Restriction_Active (No_Dispatching_Calls)\n         and then not Restriction_Active (No_Select_Statements)\n         and then RTE_Available (RE_Select_Specific_Data)\n@@ -8429,7 +8427,7 @@ package body Exp_Ch3 is\n       --  these bodies if No_Dispatching_Calls, Ravenscar or ZFP is active.\n \n       if Ada_Version >= Ada_05\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n         and then not Is_Interface (Tag_Typ)\n         and then\n           ((Is_Interface (Etype (Tag_Typ))"}, {"sha": "6da8ff90e444ec1682ea17ab722f04c69c020ed0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -378,7 +378,7 @@ package body Exp_Ch4 is\n       --  Do nothing in case of VM targets: the virtual machine will handle\n       --  interfaces directly.\n \n-      if VM_Target /= No_VM then\n+      if not Tagged_Type_Expansion then\n          return;\n       end if;\n \n@@ -511,7 +511,7 @@ package body Exp_Ch4 is\n          --  there does not seem to be any practical way of implementing it.\n \n          if Ada_Version >= Ada_05\n-           and then VM_Target = No_VM\n+           and then Tagged_Type_Expansion\n            and then Is_Class_Wide_Type (DesigT)\n            and then not Scope_Suppress (Accessibility_Check)\n            and then\n@@ -626,7 +626,7 @@ package body Exp_Ch4 is\n \n             if Is_Class_Wide_Type (Etype (Exp))\n               and then Is_Interface (Etype (Exp))\n-              and then VM_Target = No_VM\n+              and then Tagged_Type_Expansion\n             then\n                Set_Expression\n                  (Expression (N),\n@@ -795,7 +795,7 @@ package body Exp_Ch4 is\n          --  Suppress the tag assignment when VM_Target because VM tags are\n          --  represented implicitly in objects.\n \n-         if VM_Target /= No_VM then\n+         if not Tagged_Type_Expansion then\n             null;\n \n          --  Ada 2005 (AI-251): Suppress the tag assignment with class-wide\n@@ -4302,7 +4302,7 @@ package body Exp_Ch4 is\n                --  are not explicitly represented in Java objects, so the\n                --  normal tagged membership expansion is not what we want).\n \n-               if VM_Target = No_VM then\n+               if Tagged_Type_Expansion then\n                   Rewrite (N, Tagged_Membership (N));\n                   Analyze_And_Resolve (N, Rtyp);\n                end if;\n@@ -7392,7 +7392,7 @@ package body Exp_Ch4 is\n          --  on such run-time unit.\n \n         and then\n-          (VM_Target /= No_VM\n+          (not Tagged_Type_Expansion\n             or else not\n              (RTU_Loaded (Ada_Tags)\n                and then Nkind (Prefix (N)) = N_Selected_Component"}, {"sha": "4cc66304ec9dd6e09e770c496b49344bbc2b0f2c", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4075,7 +4075,7 @@ package body Exp_Ch5 is\n       --  does not seem to be any practical way to implement this check.\n \n       elsif Ada_Version >= Ada_05\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n         and then Is_Class_Wide_Type (R_Type)\n         and then not Scope_Suppress (Accessibility_Check)\n         and then\n@@ -4285,7 +4285,7 @@ package body Exp_Ch5 is\n \n       Save_Tag : constant Boolean := Is_Tagged_Type (T)\n                                        and then not No_Ctrl_Actions (N)\n-                                       and then VM_Target = No_VM;\n+                                       and then Tagged_Type_Expansion;\n       --  Tags are not saved and restored when VM_Target because VM tags are\n       --  represented implicitly in objects.\n "}, {"sha": "1da82bafd032c97087662c9a3f2183f1b7f1d624", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -68,7 +68,6 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Validsw;  use Validsw;\n@@ -2574,7 +2573,7 @@ package body Exp_Ch6 is\n       if Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n         and then Present (Controlling_Argument (N))\n       then\n-         if VM_Target = No_VM then\n+         if Tagged_Type_Expansion then\n             Expand_Dispatching_Call (N);\n \n             --  The following return is worrisome. Is it really OK to\n@@ -4820,7 +4819,7 @@ package body Exp_Ch6 is\n         and then not Is_Abstract_Subprogram (Subp)\n         and then Present (DTC_Entity (Subp))\n         and then Present (Scope (DTC_Entity (Subp)))\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n         and then not Restriction_Active (No_Dispatching_Calls)\n         and then RTE_Available (RE_Tag)\n       then"}, {"sha": "977a90fc4a7401841a879e6357d68266516486dc", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -59,7 +59,6 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -249,7 +248,7 @@ package body Exp_Disp is\n \n    begin\n       if not Expander_Active\n-        or else VM_Target /= No_VM\n+        or else not Tagged_Type_Expansion\n       then\n          return;\n       end if;\n@@ -806,7 +805,7 @@ package body Exp_Disp is\n         or else (not Is_Class_Wide_Type (Iface_Typ)\n                   and then Is_Interface (Iface_Typ)));\n \n-      if VM_Target /= No_VM then\n+      if not Tagged_Type_Expansion then\n \n          --  For VM, just do a conversion ???\n "}, {"sha": "b35c35ea9df39419f725ee2ecfd1715dc7f99a71", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@ with Freeze;   use Freeze;\n with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n+with Opt;      use Opt;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n@@ -52,7 +53,6 @@ with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n@@ -219,7 +219,7 @@ package body Exp_Intr is\n       --  checks are suppressed for the result type or VM_Target /= No_VM\n \n       if Tag_Checks_Suppressed (Etype (Result_Typ))\n-        or else VM_Target /= No_VM\n+        or else not Tagged_Type_Expansion\n       then\n          null;\n \n@@ -1034,7 +1034,7 @@ package body Exp_Intr is\n       --    free (Base_Address (Obj_Ptr))\n \n       if Is_Interface (Directly_Designated_Type (Typ))\n-        and then VM_Target = No_VM\n+        and then Tagged_Type_Expansion\n       then\n          Set_Expression (Free_Node,\n            Unchecked_Convert_To (Typ,"}, {"sha": "1fe6526c77d8d9954bd9f5c47efe90d473b21d48", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3880,7 +3880,7 @@ package body Exp_Util is\n             --  initialization itself (and doesn't need or want the\n             --  additional intermediate type to handle the assignment).\n \n-            if Expander_Active and then VM_Target = No_VM then\n+            if Expander_Active and then Tagged_Type_Expansion then\n                EQ_Typ := Make_CW_Equivalent_Type (Unc_Typ, E);\n             end if;\n "}, {"sha": "e999c646b77944763a914c75f436e6870143c1ff", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -1110,6 +1110,13 @@ package Opt is\n    --  multiplied by the factor given here. The default value is used if no\n    --  -gnatT switch appears.\n \n+   Tagged_Type_Expansion : Boolean := True;\n+   --  GNAT\n+   --  Set True if tagged types and interfaces should be expanded by the\n+   --  front-end. If False, the original tree is left unexpanded for\n+   --  tagged types and dispatching calls, assuming the underlying target\n+   --  supports it (e.g. case of JVM).\n+\n    Task_Dispatching_Policy : Character := ' ';\n    --  GNAT, GNATBIND\n    --  Set to ' ' for the default case (no task dispatching policy specified)."}, {"sha": "028d8b54ac36917e500d9d7ddccfb16008d31a36", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -2552,7 +2552,7 @@ package body Sem_Attr is\n       when Attribute_Compiler_Version =>\n          Check_E0;\n          Check_Standard_Prefix;\n-         Rewrite (N, Make_String_Literal (Loc, Gnat_Static_Version_String));\n+         Rewrite (N, Make_String_Literal (Loc, \"GNAT \" & Gnat_Version_String));\n          Analyze_And_Resolve (N, Standard_String);\n \n       --------------------"}, {"sha": "7c69da1ade19973dd8c043bf72b4e90e3843e993", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -50,7 +50,6 @@ with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -1742,7 +1741,7 @@ package body Sem_Disp is\n       --  the VM back-ends directly handle the generation of dispatching\n       --  calls and would have to undo any expansion to an indirect call.\n \n-      if VM_Target = No_VM then\n+      if Tagged_Type_Expansion then\n          Expand_Dispatching_Call (Call_Node);\n \n       --  Expansion of a dispatching call results in an indirect call, which in"}, {"sha": "d6113d88a7e86abedf618b198ada3be04dbc0ed3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -72,7 +72,6 @@ with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n with Style;    use Style;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n@@ -7844,13 +7843,13 @@ package body Sem_Res is\n             --  undesired dependence on such run-time unit.\n \n            and then\n-             (VM_Target /= No_VM\n-              or else not\n-                (RTU_Loaded (Ada_Tags)\n-                  and then Nkind (Prefix (N)) = N_Selected_Component\n-                  and then Present (Entity (Selector_Name (Prefix (N))))\n-                  and then Entity (Selector_Name (Prefix (N))) =\n-                                        RTE_Record_Component (RE_Prims_Ptr)))\n+             (not Tagged_Type_Expansion\n+               or else not\n+                 (RTU_Loaded (Ada_Tags)\n+                   and then Nkind (Prefix (N)) = N_Selected_Component\n+                   and then Present (Entity (Selector_Name (Prefix (N))))\n+                   and then Entity (Selector_Name (Prefix (N))) =\n+                                         RTE_Record_Component (RE_Prims_Ptr)))\n          then\n             Apply_Range_Check (Drange, Etype (Index));\n          end if;"}, {"sha": "31f3ccd1a4d75fb83b16b2eeecbdfc396b791654", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -5920,7 +5920,7 @@ package body Sem_Util is\n                   --  uninitialized case. Note that this applies both to the\n                   --  uTag entry and the main vtable pointer (CPP_Class case).\n \n-                 and then (VM_Target = No_VM or else not Is_Tag (Ent))\n+                 and then (Tagged_Type_Expansion or else not Is_Tag (Ent))\n                then\n                   return False;\n                end if;"}, {"sha": "d78201d3016a4bdcf3f8f620dfbc83b68cb4e872", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -560,6 +560,7 @@ package body Targparm is\n                      when CLI =>\n                         if Result then\n                            VM_Target := CLI_Target;\n+                           Tagged_Type_Expansion := False;\n                         end if;\n \n                      when CRT => Configurable_Run_Time_On_Target     := Result;\n@@ -571,6 +572,7 @@ package body Targparm is\n                      when JVM =>\n                         if Result then\n                            VM_Target := JVM_Target;\n+                           Tagged_Type_Expansion := False;\n                         end if;\n \n                      when MOV => Machine_Overflows_On_Target         := Result;"}, {"sha": "fd74ea5cbc978f5dfadde0fbd14eec98bdcc4a1b", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f11033528b5b35ecc84eb4afa53c64509eb542c/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=1f11033528b5b35ecc84eb4afa53c64509eb542c", "patch": "@@ -220,7 +220,9 @@ package Targparm is\n    type Virtual_Machine_Kind is (No_VM, JVM_Target, CLI_Target);\n    VM_Target : Virtual_Machine_Kind := No_VM;\n    --  Kind of virtual machine targetted\n-   --  Needs comments, don't depend on names ???\n+   --  No_VM: no virtual machine, default case of a standard processor\n+   --  JVM_Target: Java Virtual Machine\n+   --  CLI_Target: CLI/.NET Virtual Machine\n \n    -------------------------------\n    -- Backend Arithmetic Checks --"}]}