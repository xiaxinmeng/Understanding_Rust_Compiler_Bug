{"sha": "f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAxMTJkYjliM2FhOWY4N2JiNGRhN2Y1MmNhMjJhOTRiNGFlMDRlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-27T12:07:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-27T12:07:04Z"}, "message": "stl_algobase.h (struct __miter_base): Add.\n\n2007-10-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (struct __miter_base): Add.\n\t(__copy_move_a2, __copy_move_backward_a2): Add.\n\t(copy, copy_backward, move, move_backward): Adjust, call *a2 helpers.\n\t* include/bits/cpp_type_traits.h (struct __is_move_iterator): Add.\n\t* include/bits/streambuf_iterator.h (__copy_move_a<>): Rename\n\tto __copy_move_a2.\n\t* include/std/streambuf (friend __copy_move_a<>): Likewise.\n\t* testsuite/25_algorithms/copy/move_iterators/1.cc: New.\n\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n\n\t* include/bits/stl_iterator.h (__normal_iterator<>::_Iterator_type):\n\tRename to iterator_type.\n\nFrom-SVN: r129678", "tree": {"sha": "22379fedfe306c07b89fe272bd7364535a6e0f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22379fedfe306c07b89fe272bd7364535a6e0f33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/comments", "author": null, "committer": null, "parents": [{"sha": "094a5fe2659e4bf82420bfe1cdb57cc799a37644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094a5fe2659e4bf82420bfe1cdb57cc799a37644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094a5fe2659e4bf82420bfe1cdb57cc799a37644"}], "stats": {"total": 334, "additions": 269, "deletions": 65}, "files": [{"sha": "cd2acd92f4850f21fd4789a097d72feaf77984f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -1,3 +1,18 @@\n+2007-10-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (struct __miter_base): Add.\n+\t(__copy_move_a2, __copy_move_backward_a2): Add.\n+\t(copy, copy_backward, move, move_backward): Adjust, call *a2 helpers.\n+\t* include/bits/cpp_type_traits.h (struct __is_move_iterator): Add.\n+\t* include/bits/streambuf_iterator.h (__copy_move_a<>): Rename\n+\tto __copy_move_a2.\n+\t* include/std/streambuf (friend __copy_move_a<>): Likewise.\n+\t* testsuite/25_algorithms/copy/move_iterators/1.cc: New.\n+\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n+\n+\t* include/bits/stl_iterator.h (__normal_iterator<>::_Iterator_type):\n+\tRename to iterator_type.\n+\n 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/throw_allocator.h (throw_allocator<>::"}, {"sha": "45b958f852d5831938ae17b4512a5e72ec40616c", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -381,6 +381,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef __true_type __type;\n     };\n \n+  //\n+  // Move iterator type\n+  //\n+  template<typename _Tp>\n+    struct __is_move_iterator\n+    {\n+      enum { __value = 0 };\n+      typedef __false_type __type;\n+    };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Iterator>\n+    class move_iterator;\n+\n+  template<typename _Iterator>\n+    struct __is_move_iterator< move_iterator<_Iterator> >\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "818c7ee458c9f23079d8d9ee71e7c754b2d10881", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 82, "deletions": 48, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -266,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // If _Iterator is a __normal_iterator return its base (a plain pointer,\n   // normally) otherwise return it untouched.  See copy, fill, ... \n   template<typename _Iterator,\n-\t   bool _BoolType = __is_normal_iterator<_Iterator>::__value>\n+\t   bool _IsNormal = __is_normal_iterator<_Iterator>::__value>\n     struct __niter_base\n     {\n       static _Iterator\n@@ -277,13 +277,31 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Iterator>\n     struct __niter_base<_Iterator, true>\n     {\n-      static typename _Iterator::_Iterator_type\n+      static typename _Iterator::iterator_type\n+      __b(_Iterator __it)\n+      { return __it.base(); }\n+    };\n+\n+  // Likewise, for move_iterator.\n+  template<typename _Iterator,\n+\t   bool _IsMove = __is_move_iterator<_Iterator>::__value>\n+    struct __miter_base\n+    {\n+      static _Iterator\n+      __b(_Iterator __it)\n+      { return __it; }\n+    };\n+\n+  template<typename _Iterator>\n+    struct __miter_base<_Iterator, true>\n+    {\n+      static typename _Iterator::iterator_type\n       __b(_Iterator __it)\n       { return __it.base(); }\n     };\n \n   // Used in __copy_move and __copy_move_backward below.\n-  template<bool _IsCopy>\n+  template<bool _IsMove>\n     struct __cm_assign\n     {\n       template<typename _IteratorL, typename _IteratorR>\n@@ -294,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<>\n-    struct __cm_assign<false>\n+    struct __cm_assign<true>\n     {\n       template<typename _IteratorL, typename _IteratorR>\n         static void\n@@ -309,21 +327,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // (2) If we're using random access iterators, then write the loop as\n   // a for loop with an explicit count.\n \n-  template<bool _IsCopy, bool, typename>\n+  template<bool _IsMove, bool, typename>\n     struct __copy_move\n     {\n       template<typename _II, typename _OI>\n         static _OI\n         __copy_m(_II __first, _II __last, _OI __result)\n         {\n \t  for (; __first != __last; ++__result, ++__first)\n-\t    std::__cm_assign<_IsCopy>::__a(__result, __first);\n+\t    std::__cm_assign<_IsMove>::__a(__result, __first);\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsCopy, bool _IsSimple>\n-    struct __copy_move<_IsCopy, _IsSimple, random_access_iterator_tag>\n+  template<bool _IsMove, bool _IsSimple>\n+    struct __copy_move<_IsMove, _IsSimple, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n         static _OI\n@@ -332,16 +350,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  typedef typename iterator_traits<_II>::difference_type _Distance;\n \t  for(_Distance __n = __last - __first; __n > 0; --__n)\n \t    {\n-\t      std::__cm_assign<_IsCopy>::__a(__result, __first);\n+\t      std::__cm_assign<_IsMove>::__a(__result, __first);\n \t      ++__first;\n \t      ++__result;\n \t    }\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsCopy>\n-    struct __copy_move<_IsCopy, true, random_access_iterator_tag>\n+  template<bool _IsMove>\n+    struct __copy_move<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n         static _Tp*\n@@ -353,7 +371,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     };\n \n-  template<bool _IsCopy, typename _II, typename _OI>\n+  template<bool _IsMove, typename _II, typename _OI>\n     inline _OI\n     __copy_move_a(_II __first, _II __last, _OI __result)\n     {\n@@ -365,7 +383,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t                     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n \n-      return std::__copy_move<_IsCopy, __simple,\n+      return std::__copy_move<_IsMove, __simple,\n \t                      _Category>::__copy_m(__first, __last, __result);\n     }\n \n@@ -380,23 +398,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     class ostreambuf_iterator;\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n-    __copy_move_a(_CharT*, _CharT*,\n-\t\t  ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n+    __copy_move_a2(_CharT*, _CharT*,\n+\t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n-    __copy_move_a(const _CharT*, const _CharT*,\n-\t\t  ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n+    __copy_move_a2(const _CharT*, const _CharT*,\n+\t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t\t\t\t    _CharT*>::__type\n-    __copy_move_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n-\t\t  istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n+    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n+\t\t   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n+\n+  template<bool _IsMove, typename _II, typename _OI>\n+    inline _OI\n+    __copy_move_a2(_II __first, _II __last, _OI __result)\n+    {\n+      return _OI(std::__copy_move_a<_IsMove>\n+\t\t (std::__niter_base<_II>::__b(__first),\n+\t\t  std::__niter_base<_II>::__b(__last),\n+\t\t  std::__niter_base<_OI>::__b(__result)));\n+    }\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -424,10 +452,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_II>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _OI(std::__copy_move_a<true>\n-\t\t (std::__niter_base<_II>::__b(__first),\n-\t\t  std::__niter_base<_II>::__b(__last),\n-\t\t  std::__niter_base<_OI>::__b(__result)));\n+      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>\n+\t      (std::__miter_base<_II>::__b(__first),\n+\t       std::__miter_base<_II>::__b(__last), __result));\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -457,42 +484,41 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_II>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _OI(std::__copy_move_a<false>\n-\t\t (std::__niter_base<_II>::__b(__first),\n-\t\t  std::__niter_base<_II>::__b(__last),\n-\t\t  std::__niter_base<_OI>::__b(__result)));\n+      return (std::__copy_move_a2<true>\n+\t      (std::__miter_base<_II>::__b(__first),\n+\t       std::__miter_base<_II>::__b(__last), __result));\n     }\n #endif\n \n-  template<bool _IsCopy, bool, typename>\n+  template<bool _IsMove, bool, typename>\n     struct __copy_move_backward\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         {\n \t  while (__first != __last)\n-\t    std::__cm_assign<_IsCopy>::__a(--__result, --__last);\n+\t    std::__cm_assign<_IsMove>::__a(--__result, --__last);\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsCopy, bool _IsSimple>\n-    struct __copy_move_backward<_IsCopy, _IsSimple, random_access_iterator_tag>\n+  template<bool _IsMove, bool _IsSimple>\n+    struct __copy_move_backward<_IsMove, _IsSimple, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         {\n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n-\t    std::__cm_assign<_IsCopy>::__a(--__result, --__last);\n+\t    std::__cm_assign<_IsMove>::__a(--__result, --__last);\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsCopy>\n-    struct __copy_move_backward<_IsCopy, true, random_access_iterator_tag>\n+  template<bool _IsMove>\n+    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n         static _Tp*\n@@ -504,7 +530,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     };\n \n-  template<bool _IsCopy, typename _BI1, typename _BI2>\n+  template<bool _IsMove, typename _BI1, typename _BI2>\n     inline _BI2\n     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -516,12 +542,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t                     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n-      return std::__copy_move_backward<_IsCopy, __simple,\n+      return std::__copy_move_backward<_IsMove, __simple,\n \t                               _Category>::__copy_move_b(__first,\n \t\t\t\t\t\t\t\t __last,\n \t\t\t\t\t\t\t\t __result);\n     }\n \n+  template<bool _IsMove, typename _BI1, typename _BI2>\n+    inline _BI2\n+    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)\n+    {\n+      return _BI2(std::__copy_move_backward_a<_IsMove>\n+\t\t  (std::__niter_base<_BI1>::__b(__first),\n+\t\t   std::__niter_base<_BI1>::__b(__last),\n+\t\t   std::__niter_base<_BI2>::__b(__result)));\n+    }\n+\n   /**\n    *  @brief Copies the range [first,last) into result.\n    *  @param  first  A bidirectional iterator.\n@@ -539,7 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Result may not be in the range [first,last).  Use copy instead.  Note\n    *  that the start of the output range may overlap [first,last).\n   */\n-  template <typename _BI1, typename _BI2>\n+  template<typename _BI1, typename _BI2>\n     inline _BI2\n     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n@@ -551,10 +587,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _BI2(std::__copy_move_backward_a<true>\n-\t\t  (std::__niter_base<_BI1>::__b(__first),\n-\t\t   std::__niter_base<_BI1>::__b(__last),\n-\t\t   std::__niter_base<_BI2>::__b(__result)));\n+      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>\n+\t      (std::__miter_base<_BI1>::__b(__first),\n+\t       std::__miter_base<_BI1>::__b(__last), __result));\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -587,10 +622,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _BI2(std::__copy_move_backward_a<false>\n-\t\t  (std::__niter_base<_BI1>::__b(__first),\n-\t\t   std::__niter_base<_BI1>::__b(__last),\n-\t\t   std::__niter_base<_BI2>::__b(__result)));\n+      return (std::__copy_move_backward_a2<true>\n+\t      (std::__miter_base<_BI1>::__b(__first),\n+\t       std::__miter_base<_BI1>::__b(__last), __result));\n     }\n #endif\n "}, {"sha": "f16ac024b9f2c718a94e77b35e740e5621bdbcb6", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -668,6 +668,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _Iterator _M_current;\n \n     public:\n+      typedef _Iterator\t\t\t\t\t     iterator_type;\n       typedef typename iterator_traits<_Iterator>::iterator_category\n                                                              iterator_category;\n       typedef typename iterator_traits<_Iterator>::value_type  value_type;\n@@ -676,8 +677,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename iterator_traits<_Iterator>::reference reference;\n       typedef typename iterator_traits<_Iterator>::pointer   pointer;\n \n-      typedef _Iterator _Iterator_type;\n-\n       __normal_iterator() : _M_current(_Iterator()) { }\n \n       explicit"}, {"sha": "037fa18526273fd0b7fcb3459d78b5908037155d", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -68,11 +68,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n-      template<bool _IsCopy, typename _CharT2>\n+      template<bool _IsMove, typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n \t\t\t\t\t       _CharT2*>::__type\n-\t__copy_move_a(istreambuf_iterator<_CharT2>,\n-\t\t      istreambuf_iterator<_CharT2>, _CharT2*);\n+\t__copy_move_a2(istreambuf_iterator<_CharT2>,\n+\t\t       istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n@@ -292,35 +292,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __result;\n     }\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n     \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n-    __copy_move_a(_CharT* __first, _CharT* __last,\n-\t\t  ostreambuf_iterator<_CharT> __result)\n+    __copy_move_a2(_CharT* __first, _CharT* __last,\n+\t\t   ostreambuf_iterator<_CharT> __result)\n     {\n       const streamsize __num = __last - __first;\n       if (__num > 0)\n \t__result._M_put(__first, __num);\n       return __result;\n     }\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n-    __copy_move_a(const _CharT* __first, const _CharT* __last,\n-\t\t  ostreambuf_iterator<_CharT> __result)\n+    __copy_move_a2(const _CharT* __first, const _CharT* __last,\n+\t\t   ostreambuf_iterator<_CharT> __result)\n     {\n       const streamsize __num = __last - __first;\n       if (__num > 0)\n \t__result._M_put(__first, __num);\n       return __result;\n     }\n \n-  template<bool _IsCopy, typename _CharT>\n+  template<bool _IsMove, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n     \t\t\t\t    _CharT*>::__type\n-    __copy_move_a(istreambuf_iterator<_CharT> __first,\n-\t\t  istreambuf_iterator<_CharT> __last, _CharT* __result)\n+    __copy_move_a2(istreambuf_iterator<_CharT> __first,\n+\t\t   istreambuf_iterator<_CharT> __last, _CharT* __result)\n     {\n       typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n       typedef typename __is_iterator_type::traits_type     traits_type;"}, {"sha": "b6ec8255c6391d379dc004022bdc2c8ea739debf", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -155,11 +155,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       friend streamsize\n       __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);\n \n-      template<bool _IsCopy, typename _CharT2>\n+      template<bool _IsMove, typename _CharT2>\n         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n \t\t\t\t\t       _CharT2*>::__type\n-        __copy_move_a(istreambuf_iterator<_CharT2>,\n-\t\t      istreambuf_iterator<_CharT2>, _CharT2*);\n+        __copy_move_a2(istreambuf_iterator<_CharT2>,\n+\t\t       istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,"}, {"sha": "c8f349435cb7621d3d1392cde64e3963c3e66ad7", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/move_iterators/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::copy;\n+\n+typedef test_container<rvalstruct, input_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  copy(std::move_iterator<input_iterator_wrapper<rvalstruct> >(incon.begin()),\n+       std::move_iterator<input_iterator_wrapper<rvalstruct> >(incon.end()),\n+       outcon.begin());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e99b9e78f0e7b4710ff4317c14cf6a71c8c35d0a", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/move_iterators/1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc?ref=f0112db9b3aa9f87bb4da7f52ca22a94b4ae04ec", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::copy_backward;\n+\n+typedef test_container<rvalstruct,\n+\t\t       bidirectional_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct,\n+\t\t       bidirectional_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+  std::fill(out, out + size, 0);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  copy_backward(std::move_iterator<bidirectional_iterator_wrapper<rvalstruct> >(incon.begin()),\n+\t\tstd::move_iterator<bidirectional_iterator_wrapper<rvalstruct> >(incon.end()),\n+\t\toutcon.end());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}