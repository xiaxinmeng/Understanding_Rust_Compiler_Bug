{"sha": "6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "node_id": "C_kwDOANBUbNoAKDZhMGY2MDE4YmE0MTY1OGI5Yjg1YWQ4MmVkMWJkNzQ4NzU0ZjNlY2E", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-11-28T15:21:25Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-12-09T15:54:50Z"}, "message": "Provide vxworks alternate stdint.h during the build\n\nThis change arranges to provide the vxworks alternate stdint.h\nat build time instead of at install time, so it is used instead\nof the system one while building the libraries.\n\nThis is a lot more consistent and helps the build on configurations\nwhere the system does not come with stdint.h at all.\n\nThe change uses a similar mechanism as the one previsouly introduced\nfor glimits.h and takes the opportunity to simplify the glimits.h\ncommand to use an automatic variable.\n\nThis introduces an indirect dependency on the VxWorks version.h\nfor vxcrtstuff objects, for which we then need to apply the same\ntricks as for libgcc2 regarding include paths (to select the system\nheader instead of the gcc one).\n\n2021-02-12  Olivier Hainque  <hainque@adacore.com>\n\t    Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n\ngcc/\n\t* Makefile.in (T_STDINT_GCC_H): New variable, path to\n\tstdint-gcc.h that a target configuration may override when\n\tuse_gcc_stdint is \"provide\".\n\t(stmp-int-hdrs): Depend on it and copy that for\n\tUSE_GCC_INT=provide.\n\t* config.gcc (vxworks): Revert to use_gcc_stdint=provide.\n\t* config/t-vxworks (T_STDINT_GCC_H): Define, as vxw-stdint-gcc.h.\n\t(vxw-stdint-gcc.h): New target, produced from the original\n\tstdint-gcc.h.\n\t(vxw-glimits.h): Use an automatic variable to designate the\n\tfirst and only prerequisite.\n\t* config/vxworks/stdint.h: Remove.\n\nlibgcc/\n\t* config/t-vxworks: Set CRTSTUFF_T_CFLAGS to\n\t$(LIBGCC2_INCLUDES).\n\t* config/t-vxworks7: Likewise.", "tree": {"sha": "ac4da9a412e75486d639e0155637acbed645fb45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac4da9a412e75486d639e0155637acbed645fb45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5db1dd65b45286082f82f600ca0a3e6e43e06e"}], "stats": {"total": 70, "additions": 18, "deletions": 52}, "files": [{"sha": "41949f0f392ae1530c13f48d59b03434583b4b7f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "patch": "@@ -452,6 +452,7 @@ USER_H_INC_NEXT_POST = @user_headers_inc_next_post@\n \n # Enable target overriding of this fragment, as in config/t-vxworks.\n T_GLIMITS_H = $(srcdir)/glimits.h\n+T_STDINT_GCC_H = $(srcdir)/ginclude/stdint-gcc.h\n \n # The GCC to use for compiling crt*.o.\n # Usually the one we just built.\n@@ -3099,7 +3100,7 @@ gcov-tool$(exeext): $(GCOV_TOOL_OBJS) $(LIBDEPS)\n # be rebuilt.\n \n # Build the include directories.\n-stmp-int-hdrs: $(STMP_FIXINC) $(T_GLIMITS_H) $(USER_H) fixinc_list\n+stmp-int-hdrs: $(STMP_FIXINC) $(T_GLIMITS_H) $(T_STDINT_GCC_H) $(USER_H) fixinc_list\n # Copy in the headers provided with gcc.\n #\n # The sed command gets just the last file name component;\n@@ -3145,7 +3146,7 @@ stmp-int-hdrs: $(STMP_FIXINC) $(T_GLIMITS_H) $(USER_H) fixinc_list\n \t  cp $(srcdir)/ginclude/stdint-wrap.h include/stdint.h; \\\n \t  chmod a+r include/stdint.h; \\\n \telif [ $(USE_GCC_STDINT) = provide ]; then \\\n-\t  cp $(srcdir)/ginclude/stdint-gcc.h include/stdint.h; \\\n+\t  cp $(T_STDINT_GCC_H) include/stdint.h; \\\n \t  chmod a+r include/stdint.h; \\\n \tfi\n \tset -e; for ml in `cat fixinc_list`; do \\"}, {"sha": "c8824367b13e60d4cac571a49ab781168d49da41", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "patch": "@@ -1019,16 +1019,9 @@ case ${target} in\n   extra_headers=\"${extra_headers} ../vxworks/math.h ../vxworks/complex.h\"\n   extra_headers=\"${extra_headers} ../vxworks/inttypes.h ../vxworks/setjmp.h\"\n \n-  # We provide stdint.h ...\n-\n+  # We provide (a tailored version of) stdint.h\n   tm_file=\"${tm_file} vxworks-stdint.h\"\n-\n-  # .. only through the yvals conditional wrapping mentioned above\n-  # to abide by the VxWorks 7 expectations.  The final copy is performed\n-  # explicitly by a t-vxworks Makefile rule.\n-\n-  use_gcc_stdint=none\n-  extra_headers=\"${extra_headers} ../../ginclude/stdint-gcc.h\"\n+  use_gcc_stdint=provide\n \n   case ${enable_threads} in\n     no) ;;"}, {"sha": "8441af2a8cf0ca683c80733188c2a47b072d8c00", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "patch": "@@ -24,18 +24,6 @@ vxworks-c.o: $(srcdir)/config/vxworks-c.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-# Arrange to install our stdint.h wrapper, by copying it in the\n-# build-time include dir before this include dir is installed and after\n-# stmp-int-hdrs removes it (because it was told we don't provide it).\n-\n-INSTALL_HEADERS += install-stdint.h\n-\n-install-stdint.h: stmp-int-hdrs\n-\tcp -p $(srcdir)/config/vxworks/stdint.h include/stdint.h\n-\tchmod a+r include/stdint.h\n-\n-$(INSTALL_HEADERS_DIR): install-stdint.h\n-\n # Both the kernel and RTP headers provide limits.h.  They embed VxWorks\n # specificities and are dated on some configurations so we both need to\n # provide our own version and make sure the system one gets exposed.\n@@ -54,5 +42,13 @@ T_GLIMITS_H = vxw-glimits.h\n \n vxw-glimits.h: $(srcdir)/glimits.h\n \tID=`echo $(BASEVER_c) | sed -e 's/\\./_/g'` && \\\n-\tsed -e \"s/_LIMITS_H__/_LIMITS_H__$${ID}_/\" < $(srcdir)/glimits.h > $@T\n+\tsed -e \"s/_LIMITS_H__/_LIMITS_H__$${ID}_/\" < $< > $@T\n+\tmv $@T $@\n+\n+# Arrange to \"provide\" a tailored version of stdint-gcc.h\n+\n+T_STDINT_GCC_H = vxw-stdint-gcc.h\n+\n+vxw-stdint-gcc.h: $(srcdir)/ginclude/stdint-gcc.h\n+\tsed -e \"/#define _GCC_STDINT_H/ a #include <_yvals.h>\" < $< > $@T\n \tmv $@T $@"}, {"sha": "5e0dbdfaabd0a9f6b2a85aaebba7d1ecd5672ee9", "filename": "gcc/config/vxworks/stdint.h", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5db1dd65b45286082f82f600ca0a3e6e43e06e/gcc%2Fconfig%2Fvxworks%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5db1dd65b45286082f82f600ca0a3e6e43e06e/gcc%2Fconfig%2Fvxworks%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks%2Fstdint.h?ref=0d5db1dd65b45286082f82f600ca0a3e6e43e06e", "patch": "@@ -1,28 +0,0 @@\n-/* This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef __GCC_STDINT_H\n-#define __GCC_STDINT_H\n-\n-#include <_yvals.h>\n-#include <stdint-gcc.h>\n-\n-#endif"}, {"sha": "5f7ced8b5615004be933b3bedfc76e0247971729", "filename": "libgcc/config/t-vxworks", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/libgcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/libgcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks?ref=6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "patch": "@@ -17,3 +17,5 @@ LIBGCC2_INCLUDES = -nostdinc -I. \\\n      */mrtp*) echo -I$(WIND_USR)/h -I$(WIND_USR)/h/wrn/coreip ;; \\\n      *) echo -I$(WIND_BASE)/target/h -I$(WIND_BASE)/target/h/wrn/coreip ;; \\\n    esac`\n+\n+CRTSTUFF_T_CFLAGS = $(LIBGCC2_INCLUDES)"}, {"sha": "180784bf3a17a4e318c2decd1837aab7687917da", "filename": "libgcc/config/t-vxworks7", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/libgcc%2Fconfig%2Ft-vxworks7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f6018ba41658b9b85ad82ed1bd748754f3eca/libgcc%2Fconfig%2Ft-vxworks7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks7?ref=6a0f6018ba41658b9b85ad82ed1bd748754f3eca", "patch": "@@ -18,3 +18,5 @@ LIBGCC2_INCLUDES = -nostdinc -I. \\\n       */mrtp*) echo -I$(VSB_DIR)/usr/h/public -I$(VSB_DIR)/usr/h ;; \\\n       *) echo -I$(VSB_DIR)/krnl/h/system -I$(VSB_DIR)/krnl/h/public ;; \\\n    esac`\n+\n+CRTSTUFF_T_CFLAGS = $(LIBGCC2_INCLUDES)"}]}