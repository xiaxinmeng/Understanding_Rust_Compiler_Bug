{"sha": "c5b49c3e092c0de5cd684b0acd244129dfaae324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViNDljM2UwOTJjMGRlNWNkNjg0YjBhY2QyNDQxMjlkZmFhZTMyNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-03T14:03:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-03T15:23:06Z"}, "message": "tree-optimization/97623 - limit PRE hoist insertion\n\nThis limits insert iteration caused by PRE insertions generating\nhoist insertion opportunities and vice versa.  The patch limits\nthe hoist insertion iterations to three by default.\n\n2020-11-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97623\n\t* params.opt (-param=max-pre-hoist-insert-iterations): New.\n\t* doc/invoke.texi (max-pre-hoist-insert-iterations): Document.\n\t* tree-ssa-pre.c (insert): Do at most max-pre-hoist-insert-iterations\n\thoist insert iterations.", "tree": {"sha": "26c53d09691a9fff15eff1e8e04159df25b925b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26c53d09691a9fff15eff1e8e04159df25b925b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b49c3e092c0de5cd684b0acd244129dfaae324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b49c3e092c0de5cd684b0acd244129dfaae324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b49c3e092c0de5cd684b0acd244129dfaae324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b49c3e092c0de5cd684b0acd244129dfaae324/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d8a1658054258baae87b445678c1c0c08d9455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d8a1658054258baae87b445678c1c0c08d9455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d8a1658054258baae87b445678c1c0c08d9455"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "5320e6c1e1e3c8d1482c20590049f763e11f8ff0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c5b49c3e092c0de5cd684b0acd244129dfaae324", "patch": "@@ -13408,6 +13408,11 @@ is aborted and the load or store is not considered redundant.  The\n number of queries is algorithmically limited to the number of\n stores on all paths from the load to the function entry.\n \n+@item max-pre-hoist-insert-iterations\n+The maximum number of iterations doing insertion during code\n+hoisting which is done as part of the partial redundancy elimination\n+insertion phase.\n+\n @item ira-max-loops-num\n IRA uses regional register allocation by default.  If a function\n contains more loops than the number given by this parameter, only at most"}, {"sha": "a33a371a395df179dc8b1ed2b7ef9e9120d384fa", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=c5b49c3e092c0de5cd684b0acd244129dfaae324", "patch": "@@ -597,6 +597,10 @@ Maximum depth of sqrt chains to use when synthesizing exponentiation by a real c\n Common Joined UInteger Var(param_max_predicted_iterations) Init(100) IntegerRange(0, 65536) Param Optimization\n The maximum number of loop iterations we predict statically.\n \n+-param=max-pre-hoist-insert-iterations=\n+Common Joined UInteger Var(param_max_pre_hoist_insert_iterations) Init(3) Param Optimization\n+The maximum number of insert iterations done for PRE code hoisting.\n+\n -param=max-reload-search-insns=\n Common Joined UInteger Var(param_max_reload_search_insns) Init(100) Param Optimization\n The maximum number of instructions to search backward when looking for equivalent reload."}, {"sha": "39c52c9b0f0b30e7d2d83641e6b333168bb5062f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b49c3e092c0de5cd684b0acd244129dfaae324/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c5b49c3e092c0de5cd684b0acd244129dfaae324", "patch": "@@ -3647,8 +3647,11 @@ insert (void)\n \n       changed = false;\n       /* Insert expressions for hoisting.  Do a backward walk here since\n-\t inserting into BLOCK exposes new opportunities in its predecessors.  */\n-      if (flag_code_hoisting)\n+\t inserting into BLOCK exposes new opportunities in its predecessors.\n+\t Since PRE and hoist insertions can cause back-to-back iteration\n+\t limit that on the hoist side.  */\n+      if (flag_code_hoisting\n+\t  && num_iterations <= param_max_pre_hoist_insert_iterations)\n \tfor (int idx = rpo_num - 1; idx >= 0; --idx)\n \t  {\n \t    basic_block block = BASIC_BLOCK_FOR_FN (cfun, rpo[idx]);"}]}