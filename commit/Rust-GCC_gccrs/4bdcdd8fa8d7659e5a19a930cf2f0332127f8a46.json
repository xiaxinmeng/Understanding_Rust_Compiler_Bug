{"sha": "4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkY2RkOGZhOGQ3NjU5ZTVhMTlhOTMwY2YyZjAzMzIxMjdmOGE0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-11T10:59:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-11T10:59:43Z"}, "message": "simplify-rtx: Fix up simplify_logical_relational_operation for vector IOR [PR101008]\n\nsimplify_relational_operation callees typically return just const0_rtx\nor const_true_rtx and then simplify_relational_operation attempts to fix\nthat up if the comparison result has vector mode, or floating mode,\nor punt if it has scalar mode and vector mode operands (it doesn't know how\nexactly to deal with the scalar masks).\nBut, simplify_logical_relational_operation has a special case, where\nit attempts to fold (x < y) | (x >= y) etc. and if it determines it is\nalways true, it just returns const_true_rtx, without doing the dances that\nsimplify_relational_operation does.\nThat results in an ICE on the following testcase, where such folding happens\nduring expansion (of debug stmts into DEBUG_INSNs) and we ICE because\nall of sudden a VOIDmode rtx appears where it expects a vector (V4SImode)\nrtx.\n\nThe following patch fixes that by moving the adjustement into a separate\nhelper routine and using it from both simplify_relational_operation and\nsimplify_logical_relational_operation.\n\n2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/101008\n\t* simplify-rtx.c (relational_result): New function.\n\t(simplify_logical_relational_operation,\n\tsimplify_relational_operation): Use it.\n\n\t* gcc.dg/pr101008.c: New test.", "tree": {"sha": "e3757138120c36879a711c8982a77668aae9c4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3757138120c36879a711c8982a77668aae9c4ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a984da88a35b42f444d1f9eeba77aa520b950d35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a984da88a35b42f444d1f9eeba77aa520b950d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a984da88a35b42f444d1f9eeba77aa520b950d35"}], "stats": {"total": 113, "additions": 67, "deletions": 46}, "files": [{"sha": "c82101c73a46e300bc65eb2104a2205433ff5d24", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "patch": "@@ -2294,6 +2294,53 @@ comparison_code_valid_for_mode (enum rtx_code code, enum machine_mode mode)\n \tgcc_unreachable ();\n     }\n }\n+\n+/* Canonicalize RES, a scalar const0_rtx/const_true_rtx to the right\n+   false/true value of comparison with MODE where comparison operands\n+   have CMP_MODE.  */\n+\n+static rtx\n+relational_result (machine_mode mode, machine_mode cmp_mode, rtx res)\n+{\n+  if (SCALAR_FLOAT_MODE_P (mode))\n+    {\n+      if (res == const0_rtx)\n+        return CONST0_RTX (mode);\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+      REAL_VALUE_TYPE val = FLOAT_STORE_FLAG_VALUE (mode);\n+      return const_double_from_real_value (val, mode);\n+#else\n+      return NULL_RTX;\n+#endif\n+    }\n+  if (VECTOR_MODE_P (mode))\n+    {\n+      if (res == const0_rtx)\n+\treturn CONST0_RTX (mode);\n+#ifdef VECTOR_STORE_FLAG_VALUE\n+      rtx val = VECTOR_STORE_FLAG_VALUE (mode);\n+      if (val == NULL_RTX)\n+\treturn NULL_RTX;\n+      if (val == const1_rtx)\n+\treturn CONST1_RTX (mode);\n+\n+      return gen_const_vec_duplicate (mode, val);\n+#else\n+      return NULL_RTX;\n+#endif\n+    }\n+  /* For vector comparison with scalar int result, it is unknown\n+     if the target means here a comparison into an integral bitmask,\n+     or comparison where all comparisons true mean const_true_rtx\n+     whole result, or where any comparisons true mean const_true_rtx\n+     whole result.  For const0_rtx all the cases are the same.  */\n+  if (VECTOR_MODE_P (cmp_mode)\n+      && SCALAR_INT_MODE_P (mode)\n+      && res == const_true_rtx)\n+    return NULL_RTX;\n+\n+  return res;\n+}\n \t\t\t\t       \n /* Simplify a logical operation CODE with result mode MODE, operating on OP0\n    and OP1, which should be both relational operations.  Return 0 if no such\n@@ -2329,7 +2376,7 @@ simplify_context::simplify_logical_relational_operation (rtx_code code,\n   int mask = mask0 | mask1;\n \n   if (mask == 15)\n-    return const_true_rtx;\n+    return relational_result (mode, GET_MODE (op0), const_true_rtx);\n \n   code = mask_to_comparison (mask);\n \n@@ -5315,51 +5362,7 @@ simplify_context::simplify_relational_operation (rtx_code code,\n \n   tem = simplify_const_relational_operation (code, cmp_mode, op0, op1);\n   if (tem)\n-    {\n-      if (SCALAR_FLOAT_MODE_P (mode))\n-\t{\n-          if (tem == const0_rtx)\n-            return CONST0_RTX (mode);\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-\t  {\n-\t    REAL_VALUE_TYPE val;\n-\t    val = FLOAT_STORE_FLAG_VALUE (mode);\n-\t    return const_double_from_real_value (val, mode);\n-\t  }\n-#else\n-\t  return NULL_RTX;\n-#endif\n-\t}\n-      if (VECTOR_MODE_P (mode))\n-\t{\n-\t  if (tem == const0_rtx)\n-\t    return CONST0_RTX (mode);\n-#ifdef VECTOR_STORE_FLAG_VALUE\n-\t  {\n-\t    rtx val = VECTOR_STORE_FLAG_VALUE (mode);\n-\t    if (val == NULL_RTX)\n-\t      return NULL_RTX;\n-\t    if (val == const1_rtx)\n-\t      return CONST1_RTX (mode);\n-\n-\t    return gen_const_vec_duplicate (mode, val);\n-\t  }\n-#else\n-\t  return NULL_RTX;\n-#endif\n-\t}\n-      /* For vector comparison with scalar int result, it is unknown\n-\t if the target means here a comparison into an integral bitmask,\n-\t or comparison where all comparisons true mean const_true_rtx\n-\t whole result, or where any comparisons true mean const_true_rtx\n-\t whole result.  For const0_rtx all the cases are the same.  */\n-      if (VECTOR_MODE_P (cmp_mode)\n-\t  && SCALAR_INT_MODE_P (mode)\n-\t  && tem == const_true_rtx)\n-\treturn NULL_RTX;\n-\n-      return tem;\n-    }\n+    return relational_result (mode, cmp_mode, tem);\n \n   /* For the following tests, ensure const0_rtx is op1.  */\n   if (swap_commutative_operands_p (op0, op1)"}, {"sha": "c06208d3425bf2867eb4f0fe82aa00eaf8411a4f", "filename": "gcc/testsuite/gcc.dg/pr101008.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101008.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101008.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101008.c?ref=4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46", "patch": "@@ -0,0 +1,18 @@\n+/* PR rtl-optimization/101008 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+typedef unsigned __attribute__((__vector_size__(32))) U;\n+typedef unsigned __attribute__((__vector_size__(16))) V;\n+\n+int c, r;\n+\n+V v;\n+\n+void\n+foo(void)\n+{\n+  U u = __builtin_shufflevector (v, (V)(v != c) | (V)(c == v),\n+\t\t\t\t 4, 3, 5, 5, 1, 2, 3, 0);\n+  r = ((union { U a; int b; }) u).b;\n+}"}]}