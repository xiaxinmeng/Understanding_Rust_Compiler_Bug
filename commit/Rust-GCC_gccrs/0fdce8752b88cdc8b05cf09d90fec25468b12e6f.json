{"sha": "0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkY2U4NzUyYjg4Y2RjOGIwNWNmMDlkOTBmZWMyNTQ2OGIxMmU2Zg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-11T14:59:18Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-11T14:59:18Z"}, "message": "extend.texi (Vector Extensions): C++ improvements.\n\n2012-10-11  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* doc/extend.texi (Vector Extensions): C++ improvements.\n\t* doc/generic.texi (LSHIFT_EXPR, RSHIFT_EXPR): Mixed vector-scalar.\n\t(LT_EXPR, LE_EXPR, GT_EXPR, GE_EXPR, EQ_EXPR, NE_EXPR): Specify\n\tthe vector case.\n\t(VEC_COND_EXPR): Document it.\n\nFrom-SVN: r192363", "tree": {"sha": "8bc53d876fc7f8a83c3c5ae647a87e8a2f14540d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc53d876fc7f8a83c3c5ae647a87e8a2f14540d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef3fcf7cbb136ce134f218d13611e66e9daa74b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef3fcf7cbb136ce134f218d13611e66e9daa74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef3fcf7cbb136ce134f218d13611e66e9daa74b"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "3ed1e8ae4b91ce61f3705093029a48fed18cbc58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "patch": "@@ -1,3 +1,11 @@\n+2012-10-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* doc/extend.texi (Vector Extensions): C++ improvements.\n+\t* doc/generic.texi (LSHIFT_EXPR, RSHIFT_EXPR): Mixed vector-scalar.\n+\t(LT_EXPR, LE_EXPR, GT_EXPR, GE_EXPR, EQ_EXPR, NE_EXPR): Specify\n+\tthe vector case.\n+\t(VEC_COND_EXPR): Document it.\n+\n 2012-10-11  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/arm.c (arm_arch6m): New variable to denote armv6-m"}, {"sha": "a07539a4adbed77f8fc3850abf9be97f47285384", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "patch": "@@ -6864,7 +6864,7 @@ a1, @dots{}, an@} >> @{b0, b1, @dots{}, bn@} == @{a0 >> b0, a1 >> b1,\n @dots{}, an >> bn@}}@. Vector operands must have the same number of\n elements. \n \n-For the convenience in C it is allowed to use a binary vector operation\n+For convenience, it is allowed to use a binary vector operation\n where one operand is a scalar. In that case the compiler will transform\n the scalar operand into a vector where each element is the scalar from\n the operation. The transformation will happen only if the scalar could be"}, {"sha": "082a5282c8dad2e57c3994a59573aafaa1000bd5", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fdce8752b88cdc8b05cf09d90fec25468b12e6f/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=0fdce8752b88cdc8b05cf09d90fec25468b12e6f", "patch": "@@ -1388,7 +1388,8 @@ shift.  Right shift should be treated as arithmetic, i.e., the\n high-order bits should be zero-filled when the expression has unsigned\n type and filled with the sign bit when the expression has signed type.\n Note that the result is undefined if the second operand is larger\n-than or equal to the first operand's type size.\n+than or equal to the first operand's type size. Unlike most nodes, these\n+can have a vector as first operand and a scalar as second operand.\n \n \n @item BIT_IOR_EXPR\n@@ -1482,11 +1483,12 @@ allows the backend to choose between the faster of @code{TRUNC_DIV_EXPR},\n @itemx NE_EXPR\n These nodes represent the less than, less than or equal to, greater\n than, greater than or equal to, equal, and not equal comparison\n-operators.  The first and second operand with either be both of integral\n-type or both of floating type.  The result type of these expressions\n-will always be of integral or boolean type.  These operations return\n-the result type's zero value for false, and the result type's one value\n-for true.\n+operators.  The first and second operands will either be both of integral\n+type, both of floating type or both of vector type.  The result type of\n+these expressions will always be of integral, boolean or signed integral\n+vector type.  These operations return the result type's zero value for\n+false, the result type's one value for true, and a vector whose elements\n+are zero (false) or minus one (true) for vectors.\n \n For floating point comparisons, if we honor IEEE NaNs and either operand\n is NaN, then @code{NE_EXPR} always returns true and the remaining operators\n@@ -1769,6 +1771,17 @@ of elements of a floating point type.  The result is a vector that contains\n twice as many elements of an integral type whose size is half as wide.  The\n elements of the two vectors are merged (concatenated) to form the output\n vector.\n+\n+@item VEC_COND_EXPR\n+These nodes represent @code{?:} expressions.  The three operands must be\n+vectors of the same size and number of elements.  The second and third\n+operands must have the same type as the entire expression.  The first\n+operand is of signed integral vector type.  If an element of the first\n+operand evaluates to a zero value, the corresponding element of the\n+result is taken from the third operand. If it evaluates to a minus one\n+value, it is taken from the second operand. It should never evaluate to\n+any other value. In contrast with a @code{COND_EXPR}, all operands are\n+always evaluated.\n @end table\n \n "}]}