{"sha": "7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiYTgzOTVlMjdmNTJkMjJhYTExZmYyZmMxNDc4NThlMzRmMmE5ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-05T22:37:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-05T22:37:54Z"}, "message": "defaults.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n\n        * defaults.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n        (CTZ_DEFINED_VALUE_AT_ZERO): New.\n        * doc/rtl.texi, doc/tm.texi: Document them.\n\n        * combine.c (nonzero_bits) [CLZ, CTZ]: Handle the definedness\n        of the value at zero properly.\n        * fold-const.c (tree_expr_nonnegative_p): Likewise.\n        * simplify-rtx.c (simplify_unary_operation): Likewise.\n\n        * config/alpha/alpha.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n        (CTZ_DEFINED_VALUE_AT_ZERO): New.\n\n        * config/arm/arm.c (TARGET_INIT_BUILTINS): Remove.\n        (TARGET_EXPAND_BUILTIN): Remove.\n        (def_builtin, arm_init_builtins, arm_expand_builtin): Remove.\n        * config/arm/arm.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n        (enum arm_builtins): Remove.\n        * config/arm/arm.md (UNSPEC_CLZ): Remove.\n        (clzsi2): Rename from clz; use clz instead of unspec.\n        (ctzsi2): New.\n        * config/arm/arm-protos.h: Update.\n\nFrom-SVN: r62453", "tree": {"sha": "e14ea46575bce454a67edbb9d6bc03000c970bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14ea46575bce454a67edbb9d6bc03000c970bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/comments", "author": null, "committer": null, "parents": [{"sha": "8d705469aaefd27a439760de0c216ff036f92e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d705469aaefd27a439760de0c216ff036f92e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d705469aaefd27a439760de0c216ff036f92e11"}], "stats": {"total": 238, "additions": 126, "deletions": 112}, "files": [{"sha": "3b9e6c0f49f093c95d98309946c136ada02c1a74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -1,3 +1,27 @@\n+2003-02-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* defaults.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): New.\n+\t* doc/rtl.texi, doc/tm.texi: Document them.\n+\n+\t* combine.c (nonzero_bits) [CLZ, CTZ]: Handle the definedness\n+\tof the value at zero properly.\n+\t* fold-const.c (tree_expr_nonnegative_p): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation): Likewise.\n+\n+\t* config/alpha/alpha.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): New.\n+\n+\t* config/arm/arm.c (TARGET_INIT_BUILTINS): Remove.\n+\t(TARGET_EXPAND_BUILTIN): Remove.\n+\t(def_builtin, arm_init_builtins, arm_expand_builtin): Remove.\n+\t* config/arm/arm.h (CLZ_DEFINED_VALUE_AT_ZERO): New.\n+\t(enum arm_builtins): Remove.\n+\t* config/arm/arm.md (UNSPEC_CLZ): Remove.\n+\t(clzsi2): Rename from clz; use clz instead of unspec.\n+\t(ctzsi2): New.\n+\t* config/arm/arm-protos.h: Update.\n+\n Wed Feb  5 23:12:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386-protos.h (x86_emit_floatuns):  Declare."}, {"sha": "6566823366c9a4c04c5bff40c029ba7603e06678", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -8547,11 +8547,28 @@ nonzero_bits (x, mode)\n       break;\n \n     case FFS:\n-    case CLZ:\n-    case CTZ:\n     case POPCOUNT:\n       /* This is at most the number of bits in the mode.  */\n-      nonzero = ((HOST_WIDE_INT) 1 << (floor_log2 (mode_width) + 1)) - 1;\n+      nonzero = ((HOST_WIDE_INT) 2 << (floor_log2 (mode_width))) - 1;\n+      break;\n+\n+    case CLZ:\n+      /* If CLZ has a known value at zero, then the nonzero bits are\n+\t that value, plus the number of bits in the mode minus one.  */\n+      if (CLZ_DEFINED_VALUE_AT_ZERO (mode, nonzero))\n+\tnonzero |= ((HOST_WIDE_INT) 1 << (floor_log2 (mode_width))) - 1;\n+      else\n+\tnonzero = -1;\n+      break;\n+\n+    case CTZ:\n+      /* If CTZ has a known value at zero, then the nonzero bits are\n+\t that value, plus the number of bits in the mode minus one.  */\n+      if (CTZ_DEFINED_VALUE_AT_ZERO (mode, nonzero))\n+\tnonzero |= ((HOST_WIDE_INT) 1 << (floor_log2 (mode_width))) - 1;\n+      else\n+\tnonzero = -1;\n+      break;\n       break;\n \n     case PARITY:"}, {"sha": "2c79fa8e935bcc7b603006ea7c2d2fe042aef3d8", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -1493,6 +1493,10 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define STORE_FLAG_VALUE 1\n \n+/* The CIX ctlz and cttz instructions return 64 for zero.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 64, TARGET_CIX)\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 64, TARGET_CIX)\n+\n /* Define the value returned by a floating-point comparison instruction.  */\n \n #define FLOAT_STORE_FLAG_VALUE(MODE) \\"}, {"sha": "8923dd02452e4c00db6d09fbf3a9d63aaa57a44f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -209,12 +209,6 @@ extern void arm_mark_dllexport \t\tPARAMS ((tree));\n extern void arm_mark_dllimport \t\tPARAMS ((tree));\n #endif\n \n-extern void arm_init_builtins\t\tPARAMS ((void));\n-#if defined (TREE_CODE) && defined (RTX_CODE)\n-extern rtx arm_expand_builtin\t\tPARAMS ((tree, rtx, rtx,\n-\t\t\t\t\t       enum machine_mode, int));\n-#endif\n-\n extern void arm_pr_long_calls\t\tPARAMS ((struct cpp_reader *));\n extern void arm_pr_no_long_calls\tPARAMS ((struct cpp_reader *));\n extern void arm_pr_long_calls_off\tPARAMS ((struct cpp_reader *));"}, {"sha": "e59f461fbeaf07d188edff4bca9fdeb4e52c5c85", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -187,12 +187,6 @@ static int arm_address_cost\t\t\tPARAMS ((rtx));\n #undef  TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES arm_set_default_type_attributes\n \n-#undef  TARGET_INIT_BUILTINS\n-#define TARGET_INIT_BUILTINS arm_init_builtins\n-\n-#undef  TARGET_EXPAND_BUILTIN\n-#define TARGET_EXPAND_BUILTIN arm_expand_builtin\n-\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST arm_adjust_cost\n \n@@ -9981,82 +9975,6 @@ arm_debugger_arg_offset (value, addr)\n \n   return value;\n }\n-\n-#define def_builtin(NAME, TYPE, CODE) \\\n-  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, NULL_TREE)\n-\n-void\n-arm_init_builtins ()\n-{\n-  tree endlink = void_list_node;\n-  tree int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n-  tree pchar_type_node = build_pointer_type (char_type_node);\n-\n-  tree int_ftype_int, void_ftype_pchar;\n-\n-  /* void func (char *) */\n-  void_ftype_pchar\n-    = build_function_type_list (void_type_node, pchar_type_node, NULL_TREE);\n-\n-  /* int func (int) */\n-  int_ftype_int\n-    = build_function_type (integer_type_node, int_endlink);\n-\n-  /* Initialize arm V5 builtins.  */\n-  if (arm_arch5)\n-    def_builtin (\"__builtin_arm_clz\", int_ftype_int, ARM_BUILTIN_CLZ);\n-}\n-\n-/* Expand an expression EXP that calls a built-in function,\n-   with result going to TARGET if that's convenient\n-   (and in mode MODE if that's convenient).\n-   SUBTARGET may be used as the target for computing one of EXP's operands.\n-   IGNORE is nonzero if the value is to be ignored.  */\n-\n-rtx\n-arm_expand_builtin (exp, target, subtarget, mode, ignore)\n-     tree exp;\n-     rtx target;\n-     rtx subtarget ATTRIBUTE_UNUSED;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-     int ignore ATTRIBUTE_UNUSED;\n-{\n-  enum insn_code icode;\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n-  tree arglist = TREE_OPERAND (exp, 1);\n-  tree arg0;\n-  rtx op0, pat;\n-  enum machine_mode tmode, mode0;\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  switch (fcode)\n-    {\n-    default:\n-      break;\n-      \n-    case ARM_BUILTIN_CLZ:\n-      icode = CODE_FOR_clz;\n-      arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode0 = insn_data[icode].operand[1].mode;\n-\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-\top0 = copy_to_mode_reg (mode0, op0);\n-      if (target == 0\n-\t  || GET_MODE (target) != tmode\n-\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-\ttarget = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-    }\n-\n-  /* @@@ Should really do something sensible here.  */\n-  return NULL_RTX;\n-}\n \f\n /* Recursively search through all of the blocks in a function\n    checking to see if any of the variables created in that"}, {"sha": "802e19986c758b7043bc4fe68b1c2c0093a09333", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -2146,6 +2146,8 @@ extern int making_const_table;\n \n #define STORE_FLAG_VALUE 1\n \n+/* The arm5 clz instruction returns 32.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n \f\n \n /* Gcc puts the pool in the wrong place for ARM, since we can only\n@@ -2456,9 +2458,4 @@ extern int making_const_table;\n #define SPECIAL_MODE_PREDICATES\t\t\t\\\n  \"cc_register\", \"dominant_cc_register\",\n \n-enum arm_builtins\n-{\n-  ARM_BUILTIN_CLZ,\n-  ARM_BUILTIN_MAX\n-};\n #endif /* ! GCC_ARM_H */"}, {"sha": "b35041a4b74a924e614c9fb4edf908d1240a4ae0", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -58,9 +58,6 @@\n \t\t\t;   value to it before trying to dereference it.\n    (UNSPEC_PRLG_STK  4) ; A special barrier that prevents frame accesses \n \t\t\t;   being scheduled before the stack adjustment insn.\n-   (UNSPEC_CLZ\t     5) ; `clz' instruction, count leading zeros (SImode):\n-\t\t\t;   operand 0 is the result,\n-\t\t\t;   operand 1 is the parameter.\n    (UNSPEC_PROLOGUE_USE 6) ; As USE insns are not meaningful after reload,\n    \t\t\t; this unspec is used to prevent the deletion of\n    \t\t\t; instructions setting registers for EH handling\n@@ -8851,10 +8848,9 @@\n \n ;; V5 Instructions,\n \n-(define_insn \"clz\"\n-  [(set (match_operand:SI             0 \"s_register_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"r\")]\n-\t\t   UNSPEC_CLZ))]\n+(define_insn \"clzsi2\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(clz:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM && arm_arch5\"\n   \"clz\\\\t%0, %1\")\n \n@@ -8872,12 +8868,32 @@\n \n     emit_insn (gen_negsi2 (t1, operands[1]));\n     emit_insn (gen_andsi3 (t2, operands[1], t1));\n-    emit_insn (gen_clz (t3, t2));\n+    emit_insn (gen_clzsi2 (t3, t2));\n     emit_insn (gen_subsi3 (operands[0], GEN_INT (32), t3));\n     DONE;\n   }\"\n )\n \n+(define_expand \"ctzsi2\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ctz:SI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  \"TARGET_ARM && arm_arch5\"\n+  \"\n+  {\n+    rtx t1, t2, t3;\n+\n+    t1 = gen_reg_rtx (SImode);\n+    t2 = gen_reg_rtx (SImode);\n+    t3 = gen_reg_rtx (SImode);\n+\n+    emit_insn (gen_negsi2 (t1, operands[1]));\n+    emit_insn (gen_andsi3 (t2, operands[1], t1));\n+    emit_insn (gen_clzsi2 (t3, t2));\n+    emit_insn (gen_subsi3 (operands[0], GEN_INT (31), t3));\n+    DONE;\n+  }\"\n+)\n+\n ;; V5E instructions.\n \n (define_insn \"prefetch\""}, {"sha": "ec504a3b5fa68231231882e772f4beee791ca0c7", "filename": "gcc/defaults.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -644,4 +644,12 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define TARGET_C99_FUNCTIONS 0\n #endif\n \n+/* Indicate that CLZ and CTZ are undefined at zero.  */\n+#ifndef CLZ_DEFINED_VALUE_AT_ZERO \n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\n+#endif\n+#ifndef CTZ_DEFINED_VALUE_AT_ZERO \n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "7e696fac38b87718527749d9cc0d565b62046a93", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -1850,15 +1850,17 @@ valid.\n @item (clz:@var{m} @var{x})\n Represents the number of leading 0-bits in @var{x}, represented as an\n integer of mode @var{m}, starting at the most significant bit position.\n-If @var{x} is zero, the value is undefined.  Note that this is one of\n+If @var{x} is zero, the value is determined by\n+@code{CLZ_DEFINED_VALUE_AT_ZERO}.  Note that this is one of\n the few expressions that is not invariant under widening.  The mode of\n @var{x} will usually be an integer mode.\n \n @findex ctz\n @item (ctz:@var{m} @var{x})\n Represents the number of trailing 0-bits in @var{x}, represented as an\n integer of mode @var{m}, starting at the least significant bit position.\n-If @var{x} is zero, the value is undefined.  Except for this case,\n+If @var{x} is zero, the value is determined by\n+@code{CTZ_DEFINED_VALUE_AT_ZERO}.  Except for this case,\n @code{ctz(x)} is equivalent to @code{ffs(@var{x}) - 1}.  The mode of\n @var{x} will usually be an integer mode.\n "}, {"sha": "0abf394f29cd44d45b4f3b152431660355155edd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -8800,6 +8800,25 @@ Define this macro on machine that have comparison operations that return\n floating-point values.  If there are no such operations, do not define\n this macro.\n \n+@findex CLZ_DEFINED_VALUE_AT_ZERO\n+@findex CTZ_DEFINED_VALUE_AT_ZERO\n+@item CLZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n+@itemx CTZ_DEFINED_VALUE_AT_ZERO (@var{mode}, @var{value})\n+A C expression that evaluates to true if the architecture defines a value\n+for @code{clz} or @code{ctz} with a zero operand.  If so, @var{value}\n+should be set to this value.  If this macro is not defined, the value of\n+@code{clz} or @code{ctz} is assumed to be undefined.\n+\n+This macro must be defined if the target's expansion for @code{ffs}\n+relies on a particular value to get correct results.  Otherwise it\n+is not necessary, though it may be used to optimize some corner cases.\n+\n+Note that regardless of this macro the ``definedness'' of @code{clz}\n+and @code{ctz} at zero do @emph{not} extend to the builtin functions\n+visible to the user.  Thus one may be free to adjust the value at will\n+to match the target expansion of these operations without fear of\n+breaking the API.\n+\n @findex Pmode\n @item Pmode\n An alias for the machine mode for pointers.  On most machines, define"}, {"sha": "0e301a7269029cc9467153cf5939b98c4790941c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -7436,11 +7436,17 @@ tree_expr_nonnegative_p (t)\n     {\n     case ABS_EXPR:\n     case FFS_EXPR:\n-    case CLZ_EXPR:\n-    case CTZ_EXPR:\n     case POPCOUNT_EXPR:\n     case PARITY_EXPR:\n       return 1;\n+\n+    case CLZ_EXPR:\n+    case CTZ_EXPR:\n+      /* These are undefined at zero.  This is true even if\n+\t C[LT]Z_DEFINED_VALUE_AT_ZERO is set, since what we're\n+\t computing here is a user-visible property.  */\n+      return 0;\n+      \n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n     case TRUNC_DIV_EXPR:"}, {"sha": "0298b79e8ce005b6918d5e0f6d2807c1de964ed7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dba8395e27f52d22aa11ff2fc147858e34f2a9d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=7dba8395e27f52d22aa11ff2fc147858e34f2a9d", "patch": "@@ -449,14 +449,23 @@ simplify_unary_operation (code, mode, op, op_mode)\n \n \tcase CLZ:\n \t  arg0 &= GET_MODE_MASK (mode);\n-\t  val = GET_MODE_BITSIZE (mode) - floor_log2 (arg0) - 1;\n+\t  if (arg0 == 0 && CLZ_DEFINED_VALUE_AT_ZERO (mode, val))\n+\t    ;\n+\t  else\n+\t    val = GET_MODE_BITSIZE (mode) - floor_log2 (arg0) - 1;\n \t  break;\n \n \tcase CTZ:\n \t  arg0 &= GET_MODE_MASK (mode);\n-\t  val = arg0 == 0\n-\t      ? GET_MODE_BITSIZE (mode)\n-\t      : exact_log2 (arg0 & -arg0);\n+\t  if (arg0 == 0)\n+\t    {\n+\t      /* Even if the value at zero is undefined, we have to come\n+\t\t up with some replacement.  Seems good enough.  */\n+\t      if (! CTZ_DEFINED_VALUE_AT_ZERO (mode, val))\n+\t\tval = GET_MODE_BITSIZE (mode);\n+\t    }\n+\t  else\n+\t    val = exact_log2 (arg0 & -arg0);\n \t  break;\n \n \tcase POPCOUNT:"}]}