{"sha": "0132acc03cada2c3b47c48a205e821563153fc80", "node_id": "C_kwDOANBUbNoAKDAxMzJhY2MwM2NhZGEyYzNiNDdjNDhhMjA1ZTgyMTU2MzE1M2ZjODA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-03T09:41:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-03T11:06:49Z"}, "message": "tree-optimization/109002 - partial PRE miscompilation\n\nPartial PRE ends up miscompiling the testcase in PR109002, likely\ninvolving a corner case when inifinite loops are involved.  The\nfollowing avoids the miscompilation by addressing a long-standing\noddity that manifests in odd partial partial redundancies eliminated\nthat are full redundancies.  The oddity is that while we properly\nPHI translate the PA_IN set from the successors when computing\nPA_OUT but we fail to do the same for ANTIC_IN which is supposed\nto be unioned.  That results in expressions with wrong virtual\noperands being placed in the PA_OUT/IN sets and the pruning\nmachinery to go wrong because it assumes the expressions in the\nsets have virtual operands that are valid in the respective blocks.\n\n\tPR tree-optimization/109002\n\t* tree-ssa-pre.cc (compute_partial_antic_aux): Properly\n\tPHI-translate ANTIC_IN.\n\n\t* gcc.dg/torture/pr109002.c: New testcase.", "tree": {"sha": "1af54b446514c41ab16f50bb93821fe4ccc23e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1af54b446514c41ab16f50bb93821fe4ccc23e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0132acc03cada2c3b47c48a205e821563153fc80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0132acc03cada2c3b47c48a205e821563153fc80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0132acc03cada2c3b47c48a205e821563153fc80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0132acc03cada2c3b47c48a205e821563153fc80/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59bc2b68de8041adf5eeb5bd18e5921f8a1f9567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bc2b68de8041adf5eeb5bd18e5921f8a1f9567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bc2b68de8041adf5eeb5bd18e5921f8a1f9567"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "5575a4b9edc83e57bd1d315232b673d368554385", "filename": "gcc/testsuite/gcc.dg/torture/pr109002.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0132acc03cada2c3b47c48a205e821563153fc80/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109002.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0132acc03cada2c3b47c48a205e821563153fc80/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109002.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109002.c?ref=0132acc03cada2c3b47c48a205e821563153fc80", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftree-pre -ftree-partial-pre\" } */\n+\n+extern void exit (int);\n+\n+int g;\n+int h;\n+\n+void __attribute__((noipa)) bar ()\n+{\n+  if (g)\n+    exit (0);\n+}\n+\n+int main(void)\n+{\n+  for (int i = 0; ; i++) {\n+      for (int j = 0; j < g; j++);\n+      if (i & 1) {\n+\t  if (h)\n+\t    continue;\n+\t  if (g)\n+\t    bar ();\n+\t  g = 1;\n+      }\n+  }\n+}"}, {"sha": "37cad36f2de4f945cc59afbb12222ed9913ee689", "filename": "gcc/tree-ssa-pre.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0132acc03cada2c3b47c48a205e821563153fc80/gcc%2Ftree-ssa-pre.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0132acc03cada2c3b47c48a205e821563153fc80/gcc%2Ftree-ssa-pre.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.cc?ref=0132acc03cada2c3b47c48a205e821563153fc80", "patch": "@@ -2364,11 +2364,14 @@ compute_partial_antic_aux (basic_block block,\n \t      unsigned int i;\n \t      bitmap_iterator bi;\n \n-\t      FOR_EACH_EXPR_ID_IN_SET (ANTIC_IN (e->dest), i, bi)\n-\t\tbitmap_value_insert_into_set (PA_OUT,\n-\t\t\t\t\t      expression_for_id (i));\n \t      if (!gimple_seq_empty_p (phi_nodes (e->dest)))\n \t\t{\n+\t\t  bitmap_set_t antic_in = bitmap_set_new ();\n+\t\t  phi_translate_set (antic_in, ANTIC_IN (e->dest), e);\n+\t\t  FOR_EACH_EXPR_ID_IN_SET (antic_in, i, bi)\n+\t\t    bitmap_value_insert_into_set (PA_OUT,\n+\t\t\t\t\t\t  expression_for_id (i));\n+\t\t  bitmap_set_free (antic_in);\n \t\t  bitmap_set_t pa_in = bitmap_set_new ();\n \t\t  phi_translate_set (pa_in, PA_IN (e->dest), e);\n \t\t  FOR_EACH_EXPR_ID_IN_SET (pa_in, i, bi)\n@@ -2377,9 +2380,14 @@ compute_partial_antic_aux (basic_block block,\n \t\t  bitmap_set_free (pa_in);\n \t\t}\n \t      else\n-\t\tFOR_EACH_EXPR_ID_IN_SET (PA_IN (e->dest), i, bi)\n-\t\t  bitmap_value_insert_into_set (PA_OUT,\n-\t\t\t\t\t\texpression_for_id (i));\n+\t\t{\n+\t\t  FOR_EACH_EXPR_ID_IN_SET (ANTIC_IN (e->dest), i, bi)\n+\t\t    bitmap_value_insert_into_set (PA_OUT,\n+\t\t\t\t\t\t  expression_for_id (i));\n+\t\t  FOR_EACH_EXPR_ID_IN_SET (PA_IN (e->dest), i, bi)\n+\t\t    bitmap_value_insert_into_set (PA_OUT,\n+\t\t\t\t\t\t  expression_for_id (i));\n+\t\t}\n \t    }\n \t}\n     }"}]}