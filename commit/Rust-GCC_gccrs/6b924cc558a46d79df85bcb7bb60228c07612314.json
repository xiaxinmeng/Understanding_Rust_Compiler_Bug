{"sha": "6b924cc558a46d79df85bcb7bb60228c07612314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5MjRjYzU1OGE0NmQ3OWRmODViY2I3YmI2MDIyOGMwNzYxMjMxNA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-01-07T20:28:11Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-01-07T20:28:11Z"}, "message": "re GNATS gcj/122 (SP mismatch error from certain code constructs)\n\nThu Jan  6 00:54:10 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * jcf-write.c (generate_byecode_conditional): Fixed indentation in\n        method invocation and typo in conditional expression.\n        (generate_bytecode_insns): COND_EXPR can be part of a binop. Issue\n        the appropriate NOTE_POP.\n        * parse.y (patch_binop): Shift value mask to feature the right\n        type.\n\n(This is a fix for the PR #122:\n http://sourceware.cygnus.com/ml/java-prs/2000-q1/msg00000.html)\n\nFrom-SVN: r31277", "tree": {"sha": "597c2f89bfcc3461548b776d8a0ec9cdcf15cd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/597c2f89bfcc3461548b776d8a0ec9cdcf15cd4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b924cc558a46d79df85bcb7bb60228c07612314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b924cc558a46d79df85bcb7bb60228c07612314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b924cc558a46d79df85bcb7bb60228c07612314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b924cc558a46d79df85bcb7bb60228c07612314/comments", "author": null, "committer": null, "parents": [{"sha": "bd3a924b10709d4ab1ad61717bcc31ceb4c23fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3a924b10709d4ab1ad61717bcc31ceb4c23fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3a924b10709d4ab1ad61717bcc31ceb4c23fb4"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "3a52bf6487afee9d53830f1ed6350279a359ee3b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6b924cc558a46d79df85bcb7bb60228c07612314", "patch": "@@ -1,3 +1,12 @@\n+Thu Jan  6 00:54:10 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* jcf-write.c (generate_byecode_conditional): Fixed indentation in\n+\tmethod invocation and typo in conditional expression.\n+        (generate_bytecode_insns): COND_EXPR can be part of a binop. Issue\n+ \tthe appropriate NOTE_POP.\n+\t* parse.y (patch_binop): Shift value mask to feature the right\n+ \ttype.\n+\n 1999-12-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (assume_compiled, assume_compiled_node): Add static\n@@ -48,12 +57,6 @@\n \tpatch_throw_statement, check_thrown_exceptions,\n \tpatch_conditional_expr): Likewise.\n \n-1999-12-17  Tom Tromey  <tromey@cygnus.com>\n-\n-\t* gjavah.c (decode_signature_piece): Print \"::\" in JArray<>.  This\n-\tfixes PR gcj/119.\n-\t(process_file): Use `\\n\\' at end of each line in string.\n-\n Fri Dec 24 00:25:29 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* Makefile.in (LIBDEPS): Added gcc's errors.o\n@@ -87,6 +90,12 @@ Fri Dec 24 00:25:29 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n  \tand lookup class candidate. \n \t(java_pre_expand_clinit): Removed unnecessary local variable.\t\n \n+1999-12-17  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gjavah.c (decode_signature_piece): Print \"::\" in JArray<>.  This\n+\tfixes PR gcj/119.\n+\t(process_file): Use `\\n\\' at end of each line in string.\n+\n Thu Dec 16 00:09:45 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* expr.c (expand_invoke): Layout the loaded class before"}, {"sha": "98436f2e63296aab8c058a7bee92dc6c51d0d63f", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=6b924cc558a46d79df85bcb7bb60228c07612314", "patch": "@@ -1160,7 +1160,8 @@ generate_bytecode_conditional (exp, true_label, false_label,\n       }\n       break;\n     case TRUTH_NOT_EXPR:\n-      generate_bytecode_conditional (TREE_OPERAND (exp, 0), false_label, true_label,\n+      generate_bytecode_conditional (TREE_OPERAND (exp, 0), \n+\t\t\t\t     false_label, true_label,\n \t\t\t\t     ! true_branch_first, state);\n       break;\n     case TRUTH_ANDIF_EXPR:\n@@ -1238,7 +1239,7 @@ generate_bytecode_conditional (exp, true_label, false_label,\n \t    }\n \t  if (integer_zerop (exp1) || integer_zerop (exp0))\n \t    {\n-\t      generate_bytecode_insns (integer_zerop (exp1) ? exp0 : exp0,\n+\t      generate_bytecode_insns (integer_zerop (exp1) ? exp0 : exp1,\n \t\t\t\t       STACK_TARGET, state);\n \t      op = op + (OPCODE_ifnull - OPCODE_if_acmpeq);\n \t      negop = (op & 1) ? op - 1 : op + 1;\n@@ -1622,6 +1623,10 @@ generate_bytecode_insns (exp, target, state)\n \tdefine_jcf_label (else_label, state);\n \tgenerate_bytecode_insns (TREE_OPERAND (exp, 2), target, state);\n \tdefine_jcf_label (end_label, state);\n+\n+\t/* COND_EXPR can be used in a binop. The stack must be adjusted. */\n+\tif (TREE_TYPE (exp) != void_type_node)\n+\t  NOTE_POP (TYPE_PRECISION (TREE_TYPE (exp)) > 32 ? 2 : 1);\n       }\n       break;\n     case CASE_EXPR:"}, {"sha": "6784d27304fb3f2993e98e84cf19252d26974715", "filename": "gcc/java/parse.y", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b924cc558a46d79df85bcb7bb60228c07612314/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=6b924cc558a46d79df85bcb7bb60228c07612314", "patch": "@@ -9850,13 +9850,11 @@ patch_binop (node, wfl_op1, wfl_op2)\n          type of the left-hand operand */\n       prom_type = TREE_TYPE (op1);\n \n-      /* Shift int only up to 0x1f and long up to 0x3f */\n-      if (prom_type == int_type_node)\n-\top2 = fold (build (BIT_AND_EXPR, int_type_node, op2, \n-\t\t\t   build_int_2 (0x1f, 0)));\n-      else\n-\top2 = fold (build (BIT_AND_EXPR, int_type_node, op2, \n-\t\t\t   build_int_2 (0x3f, 0)));\n+      /* Shift int only up to 0x1f and long up to 0x3f. The bytecode\n+\t generator should take care of removing this operation. FIXME */\n+      op2 = fold (build (BIT_AND_EXPR, prom_type, convert (prom_type, op2), \n+\t\t\t (prom_type == int_type_node ? build_int_2 (0x1f, 0) :\n+\t\t\t  convert (prom_type, build_int_2 (0x3f, 0)))));\n \n       /* The >>> operator is a >> operating on unsigned quantities */\n       if (code == URSHIFT_EXPR && ! flag_emit_class_files)"}]}