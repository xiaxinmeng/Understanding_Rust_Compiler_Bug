{"sha": "7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmNWY0ZDk4NWM1OWU0YzVhNjRlOGQ3YjI2M2FmOTJjOWVjNjMzOQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-02-28T18:50:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:03Z"}, "message": "[Ada] Write_Invocation_Graph_Vertex: include lib item name\n\n2020-06-09  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* bindo-graphs.adb, bindo-graphs.ads: For each invocation graph,\n\trecord the corresponding library graph.\n\t* bindo-writers.adb (Write_Invocation_Graph_Vertex): Print the\n\tlib item name. Remove library graph parameters.\n\t* bindo-augmentors.adb, bindo-augmentors.ads,\n\tbindo-builders.adb, bindo-diagnostics.adb,\n\tbindo-diagnostics.ads, bindo-elaborators.adb: Remove library\n\tgraph parameters.", "tree": {"sha": "8e0635948d445b39151c068a1d156d6a2ea15ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e0635948d445b39151c068a1d156d6a2ea15ae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97813ab96391d0c7bd518d31855a9db4960c770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97813ab96391d0c7bd518d31855a9db4960c770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97813ab96391d0c7bd518d31855a9db4960c770"}], "stats": {"total": 10751, "additions": 5373, "deletions": 5378}, "files": [{"sha": "a2a1de01d0dd9a1f1c0cae5df15460871548dca9", "filename": "gcc/ada/bindo-augmentors.adb", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-augmentors.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-augmentors.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-augmentors.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -57,7 +57,6 @@ package body Bindo.Augmentors is\n \n       procedure Visit_Elaboration_Root\n         (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph;\n          Root      : Invocation_Graph_Vertex_Id);\n       pragma Inline (Visit_Elaboration_Root);\n       --  Start a DFS traversal from elaboration root Root to:\n@@ -67,9 +66,7 @@ package body Bindo.Augmentors is\n       --    * Create invocation edges for each such transition where the\n       --      successor is Root.\n \n-      procedure Visit_Elaboration_Roots\n-        (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph);\n+      procedure Visit_Elaboration_Roots (Inv_Graph : Invocation_Graph);\n       pragma Inline (Visit_Elaboration_Roots);\n       --  Start a DFS traversal from all elaboration roots to:\n       --\n@@ -80,7 +77,6 @@ package body Bindo.Augmentors is\n \n       procedure Visit_Vertex\n         (Inv_Graph                  : Invocation_Graph;\n-         Lib_Graph                  : Library_Graph;\n          Invoker                    : Invocation_Graph_Vertex_Id;\n          Last_Vertex                : Library_Graph_Vertex_Id;\n          Root_Vertex                : Library_Graph_Vertex_Id;\n@@ -113,10 +109,8 @@ package body Bindo.Augmentors is\n       -- Augment_Library_Graph --\n       ---------------------------\n \n-      procedure Augment_Library_Graph\n-        (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph)\n-      is\n+      procedure Augment_Library_Graph (Inv_Graph : Invocation_Graph) is\n+         Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n       begin\n          pragma Assert (Present (Lib_Graph));\n \n@@ -133,7 +127,7 @@ package body Bindo.Augmentors is\n          Longest_Path  := 0;\n          Total_Visited := 0;\n \n-         Visit_Elaboration_Roots (Inv_Graph, Lib_Graph);\n+         Visit_Elaboration_Roots (Inv_Graph);\n          Write_Statistics;\n \n          End_Phase (Library_Graph_Augmentation);\n@@ -145,9 +139,9 @@ package body Bindo.Augmentors is\n \n       procedure Visit_Elaboration_Root\n         (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph;\n          Root      : Invocation_Graph_Vertex_Id)\n       is\n+         Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n          pragma Assert (Present (Inv_Graph));\n          pragma Assert (Present (Lib_Graph));\n          pragma Assert (Present (Root));\n@@ -173,7 +167,6 @@ package body Bindo.Augmentors is\n \n          Visit_Vertex\n            (Inv_Graph                  => Inv_Graph,\n-            Lib_Graph                  => Lib_Graph,\n             Invoker                    => Root,\n             Last_Vertex                => Root_Vertex,\n             Root_Vertex                => Root_Vertex,\n@@ -189,25 +182,20 @@ package body Bindo.Augmentors is\n       -- Visit_Elaboration_Roots --\n       -----------------------------\n \n-      procedure Visit_Elaboration_Roots\n-        (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph)\n-      is\n+      procedure Visit_Elaboration_Roots (Inv_Graph : Invocation_Graph) is\n+         Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+         pragma Assert (Present (Inv_Graph));\n+         pragma Assert (Present (Lib_Graph));\n+\n          Iter : Elaboration_Root_Iterator;\n          Root : Invocation_Graph_Vertex_Id;\n \n       begin\n-         pragma Assert (Present (Inv_Graph));\n-         pragma Assert (Present (Lib_Graph));\n-\n          Iter := Iterate_Elaboration_Roots (Inv_Graph);\n          while Has_Next (Iter) loop\n             Next (Iter, Root);\n \n-            Visit_Elaboration_Root\n-              (Inv_Graph => Inv_Graph,\n-               Lib_Graph => Lib_Graph,\n-               Root      => Root);\n+            Visit_Elaboration_Root (Inv_Graph => Inv_Graph, Root => Root);\n          end loop;\n       end Visit_Elaboration_Roots;\n \n@@ -217,7 +205,6 @@ package body Bindo.Augmentors is\n \n       procedure Visit_Vertex\n         (Inv_Graph                  : Invocation_Graph;\n-         Lib_Graph                  : Library_Graph;\n          Invoker                    : Invocation_Graph_Vertex_Id;\n          Last_Vertex                : Library_Graph_Vertex_Id;\n          Root_Vertex                : Library_Graph_Vertex_Id;\n@@ -226,6 +213,8 @@ package body Bindo.Augmentors is\n          Internal_Controlled_Action : Boolean;\n          Path                       : Natural)\n       is\n+         Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n          New_Path : constant Natural := Path + 1;\n \n          Edge           : Invocation_Graph_Edge_Id;\n@@ -300,7 +289,6 @@ package body Bindo.Augmentors is\n \n             Visit_Vertex\n               (Inv_Graph                  => Inv_Graph,\n-               Lib_Graph                  => Lib_Graph,\n                Invoker                    => Target (Inv_Graph, Edge),\n                Last_Vertex                => Invoker_Vertex,\n                Root_Vertex                => Root_Vertex,"}, {"sha": "a8fa1586e81a08338bad9bc40a7382a346f6db3e", "filename": "gcc/ada/bindo-augmentors.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-augmentors.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-augmentors.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-augmentors.ads?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -42,11 +42,9 @@ package Bindo.Augmentors is\n    ------------------------------\n \n    package Library_Graph_Augmentors is\n-      procedure Augment_Library_Graph\n-        (Inv_Graph : Invocation_Graph;\n-         Lib_Graph : Library_Graph);\n-      --  Augment library graph Lib_Graph with information from invocation\n-      --  graph Inv_Graph as follows:\n+      procedure Augment_Library_Graph (Inv_Graph : Invocation_Graph);\n+      --  Augment the library graph of Inv_Graph with information from\n+      --  invocation graph Inv_Graph as follows:\n       --\n       --    1) Traverse the invocation graph starting from each elaboration\n       --       procedure of unit Root."}, {"sha": "66801f443ba88634d548afef841f1ee3284dc38e", "filename": "gcc/ada/bindo-builders.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-builders.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-builders.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-builders.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -110,7 +110,8 @@ package body Bindo.Builders is\n          Inv_Graph :=\n            Create\n              (Initial_Vertices => Number_Of_Elaborable_Units,\n-              Initial_Edges    => Number_Of_Elaborable_Units);\n+              Initial_Edges    => Number_Of_Elaborable_Units,\n+              Lib_Graph        => Lib_G);\n          Lib_Graph := Lib_G;\n \n          For_Each_Elaborable_Unit (Create_Vertices'Access);"}, {"sha": "c2ffe447b3f8330de53fead63bd33e831f907545", "filename": "gcc/ada/bindo-diagnostics.adb", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-diagnostics.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-diagnostics.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -44,22 +44,18 @@ package body Bindo.Diagnostics is\n    -- Local subprograms --\n    -----------------------\n \n-   procedure Diagnose_All_Cycles\n-     (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph);\n+   procedure Diagnose_All_Cycles (Inv_Graph : Invocation_Graph);\n    pragma Inline (Diagnose_All_Cycles);\n    --  Emit diagnostics for all cycles of library graph G\n \n    procedure Diagnose_Cycle\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Cycle     : Library_Graph_Cycle_Id);\n    pragma Inline (Diagnose_Cycle);\n    --  Emit diagnostics for cycle Cycle of library graph G\n \n    procedure Find_And_Output_Invocation_Paths\n      (Inv_Graph   : Invocation_Graph;\n-      Lib_Graph   : Library_Graph;\n       Source      : Library_Graph_Vertex_Id;\n       Destination : Library_Graph_Vertex_Id);\n    pragma Inline (Find_And_Output_Invocation_Paths);\n@@ -69,7 +65,6 @@ package body Bindo.Diagnostics is\n \n    function Find_Elaboration_Root\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Vertex : Library_Graph_Vertex_Id) return Invocation_Graph_Vertex_Id;\n    pragma Inline (Find_Elaboration_Root);\n    --  Find the elaboration root in invocation graph Inv_Graph that corresponds\n@@ -171,7 +166,6 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Path\n      (Inv_Graph         : Invocation_Graph;\n-      Lib_Graph         : Library_Graph;\n       Elaborated_Vertex : Library_Graph_Vertex_Id;\n       Path              : IGE_Lists.Doubly_Linked_List;\n       Path_Id           : in out Nat);\n@@ -182,11 +176,10 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Path_Transition\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Edge      : Invocation_Graph_Edge_Id);\n    pragma Inline (Output_Invocation_Path_Transition);\n    --  Output a transition through edge Edge of invocation graph G, which is\n-   --  part of an invocation path. Lib_Graph is the related library graph.\n+   --  part of an invocation path.\n \n    procedure Output_Invocation_Related_Suggestions\n      (G     : Library_Graph;\n@@ -197,7 +190,6 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Transition\n      (Inv_Graph   : Invocation_Graph;\n-      Lib_Graph   : Library_Graph;\n       Source      : Library_Graph_Vertex_Id;\n       Destination : Library_Graph_Vertex_Id);\n    pragma Inline (Output_Invocation_Transition);\n@@ -222,7 +214,6 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Transition\n      (Inv_Graph            : Invocation_Graph;\n-      Lib_Graph            : Library_Graph;\n       Current_Edge         : Library_Graph_Edge_Id;\n       Next_Edge            : Library_Graph_Edge_Id;\n       Elaborate_All_Active : Boolean);\n@@ -247,7 +238,6 @@ package body Bindo.Diagnostics is\n \n    procedure Visit_Vertex\n      (Inv_Graph         : Invocation_Graph;\n-      Lib_Graph         : Library_Graph;\n       Invoker           : Invocation_Graph_Vertex_Id;\n       Invoker_Vertex    : Library_Graph_Vertex_Id;\n       Last_Vertex       : Library_Graph_Vertex_Id;\n@@ -269,10 +259,9 @@ package body Bindo.Diagnostics is\n    -- Diagnose_All_Cycles --\n    -------------------------\n \n-   procedure Diagnose_All_Cycles\n-     (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph)\n-   is\n+   procedure Diagnose_All_Cycles (Inv_Graph : Invocation_Graph) is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       Cycle : Library_Graph_Cycle_Id;\n       Iter  : All_Cycle_Iterator;\n \n@@ -284,21 +273,16 @@ package body Bindo.Diagnostics is\n       while Has_Next (Iter) loop\n          Next (Iter, Cycle);\n \n-         Diagnose_Cycle\n-           (Inv_Graph => Inv_Graph,\n-            Lib_Graph => Lib_Graph,\n-            Cycle     => Cycle);\n+         Diagnose_Cycle (Inv_Graph => Inv_Graph, Cycle => Cycle);\n       end loop;\n    end Diagnose_All_Cycles;\n \n    ----------------------------\n    -- Diagnose_Circularities --\n    ----------------------------\n \n-   procedure Diagnose_Circularities\n-     (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph)\n-   is\n+   procedure Diagnose_Circularities (Inv_Graph : Invocation_Graph) is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n    begin\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n@@ -313,14 +297,13 @@ package body Bindo.Diagnostics is\n       --  switch -d_C (diagnose all cycles) is in effect.\n \n       if Debug_Flag_Underscore_CC then\n-         Diagnose_All_Cycles (Inv_Graph, Lib_Graph);\n+         Diagnose_All_Cycles (Inv_Graph);\n \n       --  Otherwise diagnose the most important cycle in the graph\n \n       else\n          Diagnose_Cycle\n            (Inv_Graph => Inv_Graph,\n-            Lib_Graph => Lib_Graph,\n             Cycle     => Highest_Precedence_Cycle (Lib_Graph));\n       end if;\n    end Diagnose_Circularities;\n@@ -331,9 +314,10 @@ package body Bindo.Diagnostics is\n \n    procedure Diagnose_Cycle\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Cycle     : Library_Graph_Cycle_Id)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n       pragma Assert (Present (Cycle));\n@@ -382,7 +366,6 @@ package body Bindo.Diagnostics is\n \n          Output_Transition\n            (Inv_Graph            => Inv_Graph,\n-            Lib_Graph            => Lib_Graph,\n             Current_Edge         => Current_Edge,\n             Next_Edge            => Next_Edge,\n             Elaborate_All_Active => Elaborate_All_Active);\n@@ -394,7 +377,6 @@ package body Bindo.Diagnostics is\n \n       Output_Transition\n         (Inv_Graph            => Inv_Graph,\n-         Lib_Graph            => Lib_Graph,\n          Current_Edge         => Current_Edge,\n          Next_Edge            => First_Edge,\n          Elaborate_All_Active => Elaborate_All_Active);\n@@ -415,10 +397,11 @@ package body Bindo.Diagnostics is\n \n    procedure Find_And_Output_Invocation_Paths\n      (Inv_Graph   : Invocation_Graph;\n-      Lib_Graph   : Library_Graph;\n       Source      : Library_Graph_Vertex_Id;\n       Destination : Library_Graph_Vertex_Id)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       Path    : IGE_Lists.Doubly_Linked_List;\n       Path_Id : Nat;\n       Visited : IGV_Sets.Membership_Set;\n@@ -449,11 +432,9 @@ package body Bindo.Diagnostics is\n \n       Visit_Vertex\n         (Inv_Graph         => Inv_Graph,\n-         Lib_Graph         => Lib_Graph,\n          Invoker           =>\n            Find_Elaboration_Root\n              (Inv_Graph => Inv_Graph,\n-              Lib_Graph => Lib_Graph,\n               Vertex    => Source),\n          Invoker_Vertex    => Source,\n          Last_Vertex       => Source,\n@@ -473,9 +454,10 @@ package body Bindo.Diagnostics is\n \n    function Find_Elaboration_Root\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Vertex    : Library_Graph_Vertex_Id) return Invocation_Graph_Vertex_Id\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       Current_Vertex : Invocation_Graph_Vertex_Id;\n       Iter           : Elaboration_Root_Iterator;\n       Root_Vertex    : Invocation_Graph_Vertex_Id;\n@@ -982,11 +964,12 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Path\n      (Inv_Graph         : Invocation_Graph;\n-      Lib_Graph         : Library_Graph;\n       Elaborated_Vertex : Library_Graph_Vertex_Id;\n       Path              : IGE_Lists.Doubly_Linked_List;\n       Path_Id           : in out Nat)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       Edge : Invocation_Graph_Edge_Id;\n       Iter : IGE_Lists.Iterator;\n \n@@ -1007,9 +990,7 @@ package body Bindo.Diagnostics is\n          IGE_Lists.Next (Iter, Edge);\n \n          Output_Invocation_Path_Transition\n-           (Inv_Graph => Inv_Graph,\n-            Lib_Graph => Lib_Graph,\n-            Edge      => Edge);\n+           (Inv_Graph => Inv_Graph, Edge => Edge);\n       end loop;\n \n       Path_Id := Path_Id + 1;\n@@ -1021,9 +1002,10 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Path_Transition\n      (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph;\n       Edge      : Invocation_Graph_Edge_Id)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n       pragma Assert (Present (Edge));\n@@ -1186,10 +1168,10 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Invocation_Transition\n      (Inv_Graph   : Invocation_Graph;\n-      Lib_Graph   : Library_Graph;\n       Source      : Library_Graph_Vertex_Id;\n       Destination : Library_Graph_Vertex_Id)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n    begin\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n@@ -1203,7 +1185,6 @@ package body Bindo.Diagnostics is\n \n       Find_And_Output_Invocation_Paths\n         (Inv_Graph   => Inv_Graph,\n-         Lib_Graph   => Lib_Graph,\n          Source      => Source,\n          Destination => Destination);\n    end Output_Invocation_Transition;\n@@ -1302,11 +1283,12 @@ package body Bindo.Diagnostics is\n \n    procedure Output_Transition\n      (Inv_Graph            : Invocation_Graph;\n-      Lib_Graph            : Library_Graph;\n       Current_Edge         : Library_Graph_Edge_Id;\n       Next_Edge            : Library_Graph_Edge_Id;\n       Elaborate_All_Active : Boolean)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n       pragma Assert (Present (Current_Edge));\n@@ -1353,7 +1335,6 @@ package body Bindo.Diagnostics is\n       elsif Is_Invocation_Edge (Lib_Graph, Current_Edge) then\n          Output_Invocation_Transition\n            (Inv_Graph   => Inv_Graph,\n-            Lib_Graph   => Lib_Graph,\n             Source      => Source,\n             Destination => Expected_Destination);\n \n@@ -1466,7 +1447,6 @@ package body Bindo.Diagnostics is\n \n    procedure Visit_Vertex\n      (Inv_Graph         : Invocation_Graph;\n-      Lib_Graph         : Library_Graph;\n       Invoker           : Invocation_Graph_Vertex_Id;\n       Invoker_Vertex    : Library_Graph_Vertex_Id;\n       Last_Vertex       : Library_Graph_Vertex_Id;\n@@ -1476,6 +1456,8 @@ package body Bindo.Diagnostics is\n       Path              : IGE_Lists.Doubly_Linked_List;\n       Path_Id           : in out Nat)\n    is\n+      Lib_Graph : constant Library_Graph := Get_Lib_Graph (Inv_Graph);\n+\n       Edge : Invocation_Graph_Edge_Id;\n       Iter : Edges_To_Targets_Iterator;\n       Targ : Invocation_Graph_Vertex_Id;\n@@ -1500,7 +1482,6 @@ package body Bindo.Diagnostics is\n       then\n          Output_Invocation_Path\n            (Inv_Graph         => Inv_Graph,\n-            Lib_Graph         => Lib_Graph,\n             Elaborated_Vertex => Elaborated_Vertex,\n             Path              => Path,\n             Path_Id           => Path_Id);\n@@ -1531,7 +1512,6 @@ package body Bindo.Diagnostics is\n \n             Visit_Vertex\n               (Inv_Graph         => Inv_Graph,\n-               Lib_Graph         => Lib_Graph,\n                Invoker           => Targ,\n                Invoker_Vertex    => Body_Vertex (Inv_Graph, Targ),\n                Last_Vertex       => Invoker_Vertex,"}, {"sha": "24f4f521d3acb20f37f4bd45e39151a4e1502d32", "filename": "gcc/ada/bindo-diagnostics.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-diagnostics.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-diagnostics.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.ads?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -51,11 +51,9 @@ package Bindo.Diagnostics is\n    -- API --\n    ---------\n \n-   procedure Diagnose_Circularities\n-     (Inv_Graph : Invocation_Graph;\n-      Lib_Graph : Library_Graph);\n+   procedure Diagnose_Circularities (Inv_Graph : Invocation_Graph);\n    pragma Inline (Diagnose_Circularities);\n-   --  Diagnose all cycles of library graph Lib_Graph with matching invocation\n-   --  graph Inv_Graph.\n+   --  Diagnose all cycles of the library graph of Inv_Graph with matching\n+   --  invocation graph Inv_Graph.\n \n end Bindo.Diagnostics;"}, {"sha": "f36b9156fe7db265f8a180600f99f782c1393b84", "filename": "gcc/ada/bindo-elaborators.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-elaborators.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-elaborators.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-elaborators.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -733,7 +733,7 @@ package body Bindo.Elaborators is\n          --  order to discover transitions of the execution flow from a unit\n          --  to a unit that result in extra edges within the library graph.\n \n-         Augment_Library_Graph (Inv_Graph, Lib_Graph);\n+         Augment_Library_Graph (Inv_Graph);\n \n          --  Create the component graph by collapsing all library items into\n          --  library units and traversing the library graph.\n@@ -780,7 +780,7 @@ package body Bindo.Elaborators is\n          --  Otherwise the library graph contains at least one circularity\n \n          else\n-            Diagnose_Circularities (Inv_Graph, Lib_Graph);\n+            Diagnose_Circularities (Inv_Graph);\n          end if;\n \n          Destroy (Inv_Graph);"}, {"sha": "3b2b7532002087efe73e473a1b8fe7da7093573b", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 4125, "deletions": 4111, "changes": 8236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339"}, {"sha": "e2843698b2d72c6ee1f1f35cc9b2825594e802d4", "filename": "gcc/ada/bindo-graphs.ads", "status": "modified", "additions": 1190, "deletions": 1180, "changes": 2370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-graphs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-graphs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.ads?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339"}, {"sha": "298118e834c9c526ec10a275403c8c25a6ec6be6", "filename": "gcc/ada/bindo-writers.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-writers.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339/gcc%2Fada%2Fbindo-writers.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-writers.adb?ref=7bf5f4d985c59e4c5a64e8d7b263af92c9ec6339", "patch": "@@ -927,6 +927,10 @@ package body Bindo.Writers is\n         (G      : Invocation_Graph;\n          Vertex : Invocation_Graph_Vertex_Id)\n       is\n+         Lib_Graph : constant Library_Graph := Get_Lib_Graph (G);\n+\n+         B : constant Library_Graph_Vertex_Id := Body_Vertex (G, Vertex);\n+         S : constant Library_Graph_Vertex_Id := Spec_Vertex (G, Vertex);\n       begin\n          pragma Assert (Present (G));\n          pragma Assert (Present (Vertex));\n@@ -938,8 +942,9 @@ package body Bindo.Writers is\n          Write_Eol;\n \n          Write_Str (\"  Body_Vertex (LGV_Id_\");\n-         Write_Int (Int (Body_Vertex (G, Vertex)));\n-         Write_Str (\")\");\n+         Write_Int (Int (B));\n+         Write_Str (\") name = \");\n+         Write_Name (Name (Lib_Graph, B));\n          Write_Eol;\n \n          Write_Str (\"  Construct (IC_Id_\");\n@@ -948,8 +953,9 @@ package body Bindo.Writers is\n          Write_Eol;\n \n          Write_Str (\"  Spec_Vertex (LGV_Id_\");\n-         Write_Int (Int (Spec_Vertex (G, Vertex)));\n-         Write_Str (\")\");\n+         Write_Int (Int (S));\n+         Write_Str (\") name = \");\n+         Write_Name (Name (Lib_Graph, S));\n          Write_Eol;\n \n          Write_Invocation_Graph_Edges (G, Vertex);"}]}