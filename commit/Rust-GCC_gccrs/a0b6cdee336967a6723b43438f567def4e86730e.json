{"sha": "a0b6cdee336967a6723b43438f567def4e86730e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNmNkZWUzMzY5NjdhNjcyM2I0MzQzOGY1NjdkZWY0ZTg2NzMwZQ==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-09-12T18:40:58Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-09-12T18:40:58Z"}, "message": "* config/mips/mips-protos.h\n\t(trap_cmp_op, mips_gen_conditional_trap): New func decls.\n\t* config/mips/mips.h (ISA_HAS_COND_TRAP): New macro.\n\t(PREDICATE_CODES): Add \"trap_cmp_op\".\n\t* config/mips/mips.c\n\t(trap_cmp_op, mips_gen_conditional_trap): New functions.\n\t* config/mips/mips.md (trap, conditional_trap): New patterns.\n\nFrom-SVN: r36371", "tree": {"sha": "93c6f2d62aaecc62c9172d737563813c5dfe8a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c6f2d62aaecc62c9172d737563813c5dfe8a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b6cdee336967a6723b43438f567def4e86730e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b6cdee336967a6723b43438f567def4e86730e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b6cdee336967a6723b43438f567def4e86730e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b6cdee336967a6723b43438f567def4e86730e/comments", "author": null, "committer": null, "parents": [{"sha": "24948ccceea2fda22961c3a5be3e5d17552e3fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24948ccceea2fda22961c3a5be3e5d17552e3fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24948ccceea2fda22961c3a5be3e5d17552e3fd0"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "1520949961e2353908e182d6c3b1a4256bdc84d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0b6cdee336967a6723b43438f567def4e86730e", "patch": "@@ -1,3 +1,13 @@\n+2000-09-12  Greg McGary  <greg@mcgary.org>\n+\n+\t* config/mips/mips-protos.h\n+\t(trap_cmp_op, mips_gen_conditional_trap): New func decls.\n+\t* config/mips/mips.h (ISA_HAS_COND_TRAP): New macro.\n+\t(PREDICATE_CODES): Add \"trap_cmp_op\".\n+\t* config/mips/mips.c\n+\t(trap_cmp_op, mips_gen_conditional_trap): New functions.\n+\t* config/mips/mips.md (trap, conditional_trap): New patterns.\n+\n 2000-09-12  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* flow.c (try_pre_increment_1): Don't do anything to sets of the stack"}, {"sha": "826cd5e1b6a080f6012c7e7a49f63e5e339e27f6", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a0b6cdee336967a6723b43438f567def4e86730e", "patch": "@@ -67,6 +67,7 @@ extern void\t\tmips_select_section PARAMS ((tree, int));\n extern int\t\tarith32_operand PARAMS ((rtx, enum machine_mode));\n extern int\t\tarith_operand PARAMS ((rtx, enum machine_mode));\n extern int\t\tcmp_op PARAMS ((rtx, enum machine_mode));\n+extern int\t\ttrap_cmp_op PARAMS ((rtx, enum machine_mode));\n extern int\t\tconst_float_1_operand PARAMS ((rtx, enum machine_mode));\n extern void\t\texpand_block_move PARAMS ((rtx []));\n extern int\t\tequality_op PARAMS ((rtx, enum machine_mode));\n@@ -77,6 +78,7 @@ extern void\t\tinit_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n #endif /* TREE_CODE */\n extern void\t\tgen_conditional_branch PARAMS ((rtx[], enum rtx_code));\n extern void\t\tgen_conditional_move PARAMS ((rtx *));\n+extern void\t\tmips_gen_conditional_trap PARAMS ((rtx *));\n extern int\t\tlarge_int PARAMS ((rtx, enum machine_mode));\n extern void\t\tmachine_dependent_reorg PARAMS ((rtx));\n extern int\t\tmips_address_cost PARAMS ((rtx));"}, {"sha": "860ce956d7bba5563dd4b2a3d26a0ee7b6c5fa38", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a0b6cdee336967a6723b43438f567def4e86730e", "patch": "@@ -188,8 +188,8 @@ int num_refs[3];\n /* registers to check for load delay */\n rtx mips_load_reg, mips_load_reg2, mips_load_reg3, mips_load_reg4;\n \n-/* Cached operands, and operator to compare for use in set/branch on\n-   condition codes.  */\n+/* Cached operands, and operator to compare for use in set/branch/trap\n+   on condition codes.  */\n rtx branch_cmp[2];\n \n /* what type of branch to use */\n@@ -964,6 +964,34 @@ cmp_op (op, mode)\n   return GET_RTX_CLASS (GET_CODE (op)) == '<';\n }\n \n+/* Return nonzero if the code is a relational operation suitable for a\n+   conditional trap instructuion (only EQ, NE, LT, LTU, GE, GEU).\n+   We need this in the insn that expands `trap_if' in order to prevent\n+   combine from erroneously altering the condition.  */\n+\n+int\n+trap_cmp_op (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (mode != GET_MODE (op))\n+    return 0;\n+\n+  switch (GET_CODE (op))\n+    {\n+    case EQ:\n+    case NE:\n+    case LT:\n+    case LTU:\n+    case GE:\n+    case GEU:\n+      return 1;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Return nonzero if the operand is either the PC or a label_ref.  */\n \n int\n@@ -3139,6 +3167,46 @@ gen_conditional_move (operands)\n \t\t\t\t\t\t\t CONST0_RTX (SImode)),\n \t\t\t\t\t\toperands[2], operands[3])));\n }\n+\n+/* Emit the common code for conditional moves.  OPERANDS is the array\n+   of operands passed to the conditional move defined_expand.  */\n+\n+void\n+mips_gen_conditional_trap (operands)\n+     rtx operands[];\n+{\n+  rtx op0, op1;\n+  enum rtx_code cmp_code = GET_CODE (operands[0]);\n+  enum machine_mode mode = GET_MODE (branch_cmp[0]);\n+\n+  /* MIPS conditional trap machine instructions don't have GT or LE\n+     flavors, so we must invert the comparison and convert to LT and\n+     GE, respectively.  */\n+  switch (cmp_code)\n+    {\n+    case GT: cmp_code = LT; break;\n+    case LE: cmp_code = GE; break;\n+    case GTU: cmp_code = LTU; break;\n+    case LEU: cmp_code = GEU; break;\n+    default: break;\n+    }\n+  if (cmp_code == GET_CODE (operands[0]))\n+    {\n+      op0 = force_reg (mode, branch_cmp[0]);\n+      op1 = branch_cmp[1];\n+    }\n+  else\n+    {\n+      op0 = force_reg (mode, branch_cmp[1]);\n+      op1 = branch_cmp[0];\n+    }\n+  if (GET_CODE (op1) == CONST_INT && ! SMALL_INT (op1))\n+    op1 = force_reg (mode, op1);\n+\n+  emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n+\t\t\t      gen_rtx (cmp_code, GET_MODE (operands[0]), op0, op1),\n+\t\t\t      operands[1]));\n+}\n \f\n /* Write a loop to move a constant number of bytes.\n    Generate load/stores as follows:"}, {"sha": "98c046b8cea48382551d40a66418e212b9983d44", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a0b6cdee336967a6723b43438f567def4e86730e", "patch": "@@ -607,6 +607,8 @@ extern void\t\tsbss_section PARAMS ((void));\n #define ISA_HAS_FP4             (mips_isa == 4\t\t\t\t\\\n \t\t\t\t)\n \n+/* ISA has conditional trap instructions.  */\n+#define ISA_HAS_COND_TRAP\t(mips_isa >= 2)\n \n \n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n@@ -3713,6 +3715,7 @@ while (0)\n   {\"equality_op\",\t\t{ EQ, NE }},\t\t\t\t\\\n   {\"cmp_op\",\t\t\t{ EQ, NE, GT, GE, GTU, GEU, LT, LE,\t\\\n \t\t\t\t  LTU, LEU }},\t\t\t\t\\\n+  {\"trap_cmp_op\",\t\t{ EQ, NE, GE, GEU, LT, LTU }},\t\t\\\n   {\"pc_or_label_operand\",\t{ PC, LABEL_REF }},\t\t\t\\\n   {\"call_insn_operand\",\t\t{ CONST_INT, CONST, SYMBOL_REF, REG}},\t\\\n   {\"move_operand\", \t\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\"}, {"sha": "cf93964a0396499551df7fb1ff408e5e23170f7d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b6cdee336967a6723b43438f567def4e86730e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a0b6cdee336967a6723b43438f567def4e86730e", "patch": "@@ -495,7 +495,48 @@\n ;; \n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"SF\"))  54 0)\n ;; (define_function_unit \"sqrt\"     1 1 (and (eq_attr \"type\" \"fsqrt\") (eq_attr \"mode\" \"DF\")) 112 0)\n+\f\n+;;\n+;;  ....................\n+;;\n+;;\tCONDITIONAL TRAPS\n+;;\n+;;  ....................\n+;;\n+\n+(define_insn \"trap\"\n+  [(trap_if (const_int 1) (const_int 0))]\n+  \"\"\n+  \"*\n+{\n+  if (ISA_HAS_COND_TRAP)\n+    return \\\"teq\\\\t$0,$0\\\";\n+  else\n+    return \\\"break\\\";\n+}\")\n+\n+(define_expand \"conditional_trap\"\n+  [(trap_if (match_operator 0 \"cmp_op\"\n+\t\t\t    [(match_dup 2) (match_dup 3)])\n+\t    (match_operand 1 \"const_int_operand\" \"\"))]\n+  \"ISA_HAS_COND_TRAP\"\n+  \"\n+{\n+  mips_gen_conditional_trap (operands);\n+  DONE;\n+}\")\n \n+;; Match a TRAP_IF with 2nd arg of 0.  The div_trap_* insns match a\n+;; 2nd arg of any CONST_INT, so this insn must appear first.\n+;; gen_div_trap always generates TRAP_IF with 2nd arg of 6 or 7.\n+\n+(define_insn \"\"\n+  [(trap_if (match_operator 0 \"trap_cmp_op\"\n+                            [(match_operand:SI 1 \"reg_or_0_operand\" \"d\")\n+                             (match_operand:SI 2 \"nonmemory_operand\" \"dI\")])\n+\t    (const_int 0))]\n+  \"ISA_HAS_COND_TRAP\"\n+  \"t%C0\\\\t%z1,%z2\")\n \f\n ;;\n ;;  ...................."}]}