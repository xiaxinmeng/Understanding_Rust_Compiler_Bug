{"sha": "364c52153d057decd7b2762430b3db77f842efc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0YzUyMTUzZDA1N2RlY2Q3YjI3NjI0MzBiM2RiNzdmODQyZWZjMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:54:35Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:54:35Z"}, "message": "vrsra_n.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsra_n.c: New file.\n\nFrom-SVN: r224660", "tree": {"sha": "ae7fe958fb057f687bc0b63e06a03f283da0c7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7fe958fb057f687bc0b63e06a03f283da0c7a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/364c52153d057decd7b2762430b3db77f842efc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364c52153d057decd7b2762430b3db77f842efc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364c52153d057decd7b2762430b3db77f842efc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364c52153d057decd7b2762430b3db77f842efc0/comments", "author": null, "committer": null, "parents": [{"sha": "083de97958c8c05e152485493c226f91443b83cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083de97958c8c05e152485493c226f91443b83cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083de97958c8c05e152485493c226f91443b83cb"}], "stats": {"total": 557, "additions": 557, "deletions": 0}, "files": [{"sha": "2bad83d39d95fae1c54e69c394f6dc02770be81a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c52153d057decd7b2762430b3db77f842efc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c52153d057decd7b2762430b3db77f842efc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=364c52153d057decd7b2762430b3db77f842efc0", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsra_n.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrsqrts.c: New file."}, {"sha": "a9eda2287dcf95805a14a0e466a6c1e664d33146", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsra_n.c", "status": "added", "additions": 553, "deletions": 0, "changes": 553, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c52153d057decd7b2762430b3db77f842efc0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsra_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c52153d057decd7b2762430b3db77f842efc0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsra_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsra_n.c?ref=364c52153d057decd7b2762430b3db77f842efc0", "patch": "@@ -0,0 +1,553 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf9, 0xfa, 0xfb, 0xfc,\n+\t\t\t\t       0xfd, 0xfe, 0xff, 0x0 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffd, 0xfffffffe };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t\t0x9, 0xa, 0xb, 0xc };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfffd, 0xfffe, 0xffff, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff4, 0xfffffff5 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf9, 0xfa, 0xfb, 0xfc,\n+\t\t\t\t\t0xfd, 0xfe, 0xff, 0x0,\n+\t\t\t\t\t0x1, 0x2, 0x3, 0x4,\n+\t\t\t\t\t0x5, 0x6, 0x7, 0x8 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffd, 0xfffffffe,\n+\t\t\t\t\t0xffffffff, 0x0 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0, 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t\t 0x9, 0xa, 0xb, 0xc,\n+\t\t\t\t\t 0xd, 0xe, 0xf, 0x10,\n+\t\t\t\t\t 0x11, 0x12, 0x13, 0x14 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfffd, 0xfffe, 0xffff, 0x0,\n+\t\t\t\t\t 0x1, 0x2, 0x3, 0x4 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t 0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t 0xfffffffffffffff1 };\n+\n+/* Expected results with max input and shift by 1.  */\n+VECT_VAR_DECL(expected_max_sh1,int,8,8) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t       0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh1,int,16,4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh1,int,32,2) [] = { 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh1,int,64,1) [] = { 0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh1,uint,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_max_sh1,int,8,16) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh1,int,16,8) [] = { 0x4000, 0x4000, 0x4000, 0x4000,\n+\t\t\t\t\t\t0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh1,int,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t\t0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh1,int,64,2) [] = { 0x4000000000000000,\n+\t\t\t\t\t\t0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh1,uint,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t 0x8000, 0x8000,\n+\t\t\t\t\t\t 0x8000, 0x8000,\n+\t\t\t\t\t\t 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh1,uint,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t 0x8000000000000000 };\n+\n+/* Expected results with max input and shift by 3.  */\n+VECT_VAR_DECL(expected_max_sh3,int,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t       0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh3,int,16,4) [] = { 0x1000, 0x1000, 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh3,int,32,2) [] = { 0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh3,int,64,1) [] = { 0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,8,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh3,uint,16,4) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,32,2) [] = { 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,64,1) [] = { 0x2000000000000000 };\n+VECT_VAR_DECL(expected_max_sh3,int,8,16) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh3,int,16,8) [] = { 0x1000, 0x1000, 0x1000, 0x1000,\n+\t\t\t\t\t\t0x1000, 0x1000, 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh3,int,32,4) [] = { 0x10000000, 0x10000000,\n+\t\t\t\t\t\t0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh3,int,64,2) [] = { 0x1000000000000000,\n+\t\t\t\t\t\t0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,8,16) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t 0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh3,uint,16,8) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t 0x2000, 0x2000,\n+\t\t\t\t\t\t 0x2000, 0x2000,\n+\t\t\t\t\t\t 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,32,4) [] = { 0x20000000, 0x20000000,\n+\t\t\t\t\t\t 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh3,uint,64,2) [] = { 0x2000000000000000,\n+\t\t\t\t\t\t 0x2000000000000000 };\n+\n+/* Expected results with max input and shift by type width.  */\n+VECT_VAR_DECL(expected_max_shmax,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t  0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_shmax,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_shmax,uint,64,2) [] = { 0x1, 0x1 };\n+\n+/* Expected results with min negative input and shift by 1.  */\n+VECT_VAR_DECL(expected_min_sh1,int,8,8) [] = { 0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t       0xc0, 0xc0, 0xc0, 0xc0 };\n+VECT_VAR_DECL(expected_min_sh1,int,16,4) [] = { 0xc000, 0xc000, 0xc000, 0xc000 };\n+VECT_VAR_DECL(expected_min_sh1,int,32,2) [] = { 0xc0000000, 0xc0000000 };\n+VECT_VAR_DECL(expected_min_sh1,int,64,1) [] = { 0xc000000000000000 };\n+VECT_VAR_DECL(expected_min_sh1,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,int,8,16) [] = { 0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t0xc0, 0xc0, 0xc0, 0xc0 };\n+VECT_VAR_DECL(expected_min_sh1,int,16,8) [] = { 0xc000, 0xc000, 0xc000, 0xc000,\n+\t\t\t\t\t\t0xc000, 0xc000, 0xc000, 0xc000 };\n+VECT_VAR_DECL(expected_min_sh1,int,32,4) [] = { 0xc0000000, 0xc0000000,\n+\t\t\t\t\t\t0xc0000000, 0xc0000000 };\n+VECT_VAR_DECL(expected_min_sh1,int,64,2) [] = { 0xc000000000000000,\n+\t\t\t\t\t\t0xc000000000000000 };\n+VECT_VAR_DECL(expected_min_sh1,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh1,uint,64,2) [] = { 0x1, 0x1 };\n+\n+/* Expected results with min negative input and shift by 3.  */\n+VECT_VAR_DECL(expected_min_sh3,int,8,8) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t       0xf0, 0xf0, 0xf0, 0xf0 };\n+VECT_VAR_DECL(expected_min_sh3,int,16,4) [] = { 0xf000, 0xf000, 0xf000, 0xf000 };\n+VECT_VAR_DECL(expected_min_sh3,int,32,2) [] = { 0xf0000000, 0xf0000000 };\n+VECT_VAR_DECL(expected_min_sh3,int,64,1) [] = { 0xf000000000000000 };\n+VECT_VAR_DECL(expected_min_sh3,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,int,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t0xf0, 0xf0, 0xf0, 0xf0 };\n+VECT_VAR_DECL(expected_min_sh3,int,16,8) [] = { 0xf000, 0xf000, 0xf000, 0xf000,\n+\t\t\t\t\t\t0xf000, 0xf000, 0xf000, 0xf000 };\n+VECT_VAR_DECL(expected_min_sh3,int,32,4) [] = { 0xf0000000, 0xf0000000,\n+\t\t\t\t\t\t0xf0000000, 0xf0000000 };\n+VECT_VAR_DECL(expected_min_sh3,int,64,2) [] = { 0xf000000000000000,\n+\t\t\t\t\t\t0xf000000000000000 };\n+VECT_VAR_DECL(expected_min_sh3,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_sh3,uint,64,2) [] = { 0x1, 0x1 };\n+\n+/* Expected results with min negative input and shift by type width.  */\n+VECT_VAR_DECL(expected_min_shmax,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t  0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_min_shmax,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_min_shmax,uint,64,2) [] = { 0x1, 0x1 };\n+\n+#define TEST_MSG \"VRSRA_N\"\n+void exec_vrsra_n (void)\n+{\n+  /* Basic test: y=vrsra_n(x,v), then store the result.  */\n+#define TEST_VRSRA_N(Q, T1, T2, W, N, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vrsra##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\t VECT_VAR(vector2, T1, W, N),\t\t\t\\\n+\t\t\t V);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose arbitrary initialization values.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x11);\n+  VDUP(vector2, , int, s, 16, 4, 0x22);\n+  VDUP(vector2, , int, s, 32, 2, 0x33);\n+  VDUP(vector2, , int, s, 64, 1, 0x44);\n+  VDUP(vector2, , uint, u, 8, 8, 0x55);\n+  VDUP(vector2, , uint, u, 16, 4, 0x66);\n+  VDUP(vector2, , uint, u, 32, 2, 0x77);\n+  VDUP(vector2, , uint, u, 64, 1, 0x88);\n+\n+  VDUP(vector2, q, int, s, 8, 16, 0x11);\n+  VDUP(vector2, q, int, s, 16, 8, 0x22);\n+  VDUP(vector2, q, int, s, 32, 4, 0x33);\n+  VDUP(vector2, q, int, s, 64, 2, 0x44);\n+  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n+  VDUP(vector2, q, uint, u, 64, 2, 0x88);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 1);\n+  TEST_VRSRA_N(, int, s, 16, 4, 12);\n+  TEST_VRSRA_N(, int, s, 32, 2, 2);\n+  TEST_VRSRA_N(, int, s, 64, 1, 32);\n+  TEST_VRSRA_N(, uint, u, 8, 8, 2);\n+  TEST_VRSRA_N(, uint, u, 16, 4, 3);\n+  TEST_VRSRA_N(, uint, u, 32, 2, 5);\n+  TEST_VRSRA_N(, uint, u, 64, 1, 33);\n+\n+  TEST_VRSRA_N(q, int, s, 8, 16, 1);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 12);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 2);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 32);\n+  TEST_VRSRA_N(q, uint, u, 8, 16, 2);\n+  TEST_VRSRA_N(q, uint, u, 16, 8, 3);\n+  TEST_VRSRA_N(q, uint, u, 32, 4, 5);\n+  TEST_VRSRA_N(q, uint, u, 64, 2, 33);\n+\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Initialize the accumulator with 0.  */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , int, s, 64, 1, 0);\n+  VDUP(vector, , uint, u, 8, 8, 0);\n+  VDUP(vector, , uint, u, 16, 4, 0);\n+  VDUP(vector, , uint, u, 32, 2, 0);\n+  VDUP(vector, , uint, u, 64, 1, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Initialize with max values to check overflow.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x7F);\n+  VDUP(vector2, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector2, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector2, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector2, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector2, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector2, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector2, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector2, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector2, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector2, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector2, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector2, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+  /* Shift by 1 to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 1);\n+  TEST_VRSRA_N(, int, s, 16, 4, 1);\n+  TEST_VRSRA_N(, int, s, 32, 2, 1);\n+  TEST_VRSRA_N(, int, s, 64, 1, 1);\n+  TEST_VRSRA_N(, uint, u, 8, 8, 1);\n+  TEST_VRSRA_N(, uint, u, 16, 4, 1);\n+  TEST_VRSRA_N(, uint, u, 32, 2, 1);\n+  TEST_VRSRA_N(, uint, u, 64, 1, 1);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 1);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 1);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 1);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 1);\n+  TEST_VRSRA_N(q, uint, u, 8, 16, 1);\n+  TEST_VRSRA_N(q, uint, u, 16, 8, 1);\n+  TEST_VRSRA_N(q, uint, u, 32, 4, 1);\n+  TEST_VRSRA_N(q, uint, u, 64, 2, 1);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by 1, max input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh1, CMT);\n+\n+\n+  /* Shift by 3 to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 3);\n+  TEST_VRSRA_N(, int, s, 16, 4, 3);\n+  TEST_VRSRA_N(, int, s, 32, 2, 3);\n+  TEST_VRSRA_N(, int, s, 64, 1, 3);\n+  TEST_VRSRA_N(, uint, u, 8, 8, 3);\n+  TEST_VRSRA_N(, uint, u, 16, 4, 3);\n+  TEST_VRSRA_N(, uint, u, 32, 2, 3);\n+  TEST_VRSRA_N(, uint, u, 64, 1, 3);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 3);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 3);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 3);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 3);\n+  TEST_VRSRA_N(q, uint, u, 8, 16, 3);\n+  TEST_VRSRA_N(q, uint, u, 16, 8, 3);\n+  TEST_VRSRA_N(q, uint, u, 32, 4, 3);\n+  TEST_VRSRA_N(q, uint, u, 64, 2, 3);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by 3, max input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh3, CMT);\n+\n+\n+  /* Shift by max to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 8);\n+  TEST_VRSRA_N(, int, s, 16, 4, 16);\n+  TEST_VRSRA_N(, int, s, 32, 2, 32);\n+  TEST_VRSRA_N(, int, s, 64, 1, 64);\n+  TEST_VRSRA_N(, uint, u, 8, 8, 8);\n+  TEST_VRSRA_N(, uint, u, 16, 4, 16);\n+  TEST_VRSRA_N(, uint, u, 32, 2, 32);\n+  TEST_VRSRA_N(, uint, u, 64, 1, 64);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 8);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 16);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 32);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 64);\n+  TEST_VRSRA_N(q, uint, u, 8, 16, 8);\n+  TEST_VRSRA_N(q, uint, u, 16, 8, 16);\n+  TEST_VRSRA_N(q, uint, u, 32, 4, 32);\n+  TEST_VRSRA_N(q, uint, u, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by max, max input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_shmax, CMT);\n+\n+\n+  /* Initialize with min values to check overflow.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x80);\n+  VDUP(vector2, , int, s, 16, 4, 0x8000);\n+  VDUP(vector2, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector2, , int, s, 64, 1, 0x8000000000000000LL);\n+  VDUP(vector2, q, int, s, 8, 16, 0x80);\n+  VDUP(vector2, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector2, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector2, q, int, s, 64, 2, 0x8000000000000000ULL);\n+\n+  /* Shift by 1 to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 1);\n+  TEST_VRSRA_N(, int, s, 16, 4, 1);\n+  TEST_VRSRA_N(, int, s, 32, 2, 1);\n+  TEST_VRSRA_N(, int, s, 64, 1, 1);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 1);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 1);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 1);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 1);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by 1, min negative input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_min_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_min_sh1, CMT);\n+\n+\n+  /* Shift by 3 to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 3);\n+  TEST_VRSRA_N(, int, s, 16, 4, 3);\n+  TEST_VRSRA_N(, int, s, 32, 2, 3);\n+  TEST_VRSRA_N(, int, s, 64, 1, 3);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 3);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 3);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 3);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 3);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by 3, min negative input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_min_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_min_sh3, CMT);\n+\n+\n+  /* Shift by max to check overflow with rounding constant.  */\n+  TEST_VRSRA_N(, int, s, 8, 8, 8);\n+  TEST_VRSRA_N(, int, s, 16, 4, 16);\n+  TEST_VRSRA_N(, int, s, 32, 2, 32);\n+  TEST_VRSRA_N(, int, s, 64, 1, 64);\n+  TEST_VRSRA_N(q, int, s, 8, 16, 8);\n+  TEST_VRSRA_N(q, int, s, 16, 8, 16);\n+  TEST_VRSRA_N(q, int, s, 32, 4, 32);\n+  TEST_VRSRA_N(q, int, s, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (checking overflow: shift by max, min negative input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_min_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_min_shmax, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrsra_n ();\n+  return 0;\n+}"}]}