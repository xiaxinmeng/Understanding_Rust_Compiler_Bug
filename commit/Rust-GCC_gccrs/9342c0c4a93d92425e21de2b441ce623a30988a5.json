{"sha": "9342c0c4a93d92425e21de2b441ce623a30988a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0MmMwYzRhOTNkOTI0MjVlMjFkZTJiNDQxY2U2MjNhMzA5ODhhNQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-04-05T23:12:53Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-04-05T23:12:53Z"}, "message": "sh.c (sh_insn_length_adjustment): New function.\n\n\t* sh.c (sh_insn_length_adjustment): New function.\n\t* sh-protos.h (sh_insn_length_adjustment): Declare.\n\t* sh.h (ADJUST_INSN_LENGTH): Use it.\n\nFrom-SVN: r32942", "tree": {"sha": "5411fa54935493a93a2f391da0faa451fc332adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5411fa54935493a93a2f391da0faa451fc332adc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9342c0c4a93d92425e21de2b441ce623a30988a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9342c0c4a93d92425e21de2b441ce623a30988a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9342c0c4a93d92425e21de2b441ce623a30988a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9342c0c4a93d92425e21de2b441ce623a30988a5/comments", "author": null, "committer": null, "parents": [{"sha": "65945ec1b3c5199a692e477b873cb975285cc515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65945ec1b3c5199a692e477b873cb975285cc515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65945ec1b3c5199a692e477b873cb975285cc515"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "d37980efa4a0ec3cca196bb8033bbdbda2b80a5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9342c0c4a93d92425e21de2b441ce623a30988a5", "patch": "@@ -1,3 +1,9 @@\n+Wed Apr  5 23:17:10 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.c (sh_insn_length_adjustment): New function.\n+\t* sh-protos.h (sh_insn_length_adjustment): Declare.\n+\t* sh.h (ADJUST_INSN_LENGTH): Use it.\n+\n Wed Apr  5 12:35:18 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* optabs.c (emit_libcall_block): Remove spurious REG_EQUAL notes"}, {"sha": "acc316ea376a8279d7502688156bee0b5272ba64", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=9342c0c4a93d92425e21de2b441ce623a30988a5", "patch": "@@ -90,6 +90,7 @@ extern void expand_sf_binop PARAMS ((rtx (*)(rtx, rtx, rtx, rtx), rtx *));\n extern void expand_df_unop PARAMS ((rtx (*)(rtx, rtx, rtx), rtx *));\n extern void expand_df_binop PARAMS ((rtx (*)(rtx, rtx, rtx, rtx), rtx *));\n extern void expand_fp_branch PARAMS ((rtx (*)(void), rtx (*)(void)));\n+extern int sh_insn_length_adjustment PARAMS ((rtx));\n #ifdef TREE_CODE\n extern void sh_va_start PARAMS ((int, tree, rtx));\n extern rtx sh_va_arg PARAMS ((tree, tree));"}, {"sha": "d4d38d3592268e9ef91fd5148d83cf557118dcb1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9342c0c4a93d92425e21de2b441ce623a30988a5", "patch": "@@ -5127,3 +5127,79 @@ fpscr_set_from_mem (mode, regs_live)\n   REG_NOTES (i) = gen_rtx_EXPR_LIST (REG_DEAD, addr_reg, REG_NOTES (i));\n   REG_NOTES (i) = gen_rtx_EXPR_LIST (REG_INC, addr_reg, REG_NOTES (i));\n }\n+\n+/* Is the given character a logical line separator for the assembler?  */\n+#ifndef IS_ASM_LOGICAL_LINE_SEPARATOR\n+#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == ';')\n+#endif\n+\n+int\n+sh_insn_length_adjustment (insn)\n+     rtx insn;\n+{\n+  /* Instructions with unfilled delay slots take up an extra two bytes for\n+     the nop in the delay slot.  */\n+  if (((GET_CODE (insn) == INSN\n+        && GET_CODE (PATTERN (insn)) != USE\n+        && GET_CODE (PATTERN (insn)) != CLOBBER)\n+       || GET_CODE (insn) == CALL_INSN\n+       || (GET_CODE (insn) == JUMP_INSN\n+\t   && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n+\t   && GET_CODE (PATTERN (insn)) != ADDR_VEC))\n+      && GET_CODE (PATTERN (NEXT_INSN (PREV_INSN (insn)))) != SEQUENCE\n+      && get_attr_needs_delay_slot (insn) == NEEDS_DELAY_SLOT_YES)\n+    return 2;\n+\n+  /* sh-dsp parallel processing insn take four bytes instead of two.  */\n+     \n+  if (GET_CODE (insn) == INSN)\n+    {\n+      int sum = 0;\n+      rtx body = PATTERN (insn);\n+      char *template, c;\n+      int maybe_label = 1;\n+\n+      if (GET_CODE (body) == ASM_INPUT)\n+\ttemplate = XSTR (body, 0);\n+      else if (asm_noperands (body) >= 0)\n+\ttemplate\n+\t  = decode_asm_operands (body, NULL_PTR, NULL_PTR, NULL_PTR, NULL_PTR);\n+      else\n+\treturn 0;\n+      do\n+\t{\n+\t  int ppi_adjust = 0;\n+\n+\t  do\n+\t    c = *template++;\n+\t  while (c == ' ' || c == '\\t');\n+\t  /* all sh-dsp parallel-processing insns start with p.\n+\t     The only non-ppi sh insn starting with p is pref.\n+\t     The only ppi starting with pr is prnd.  */\n+\t  if ((c == 'p' || c == 'P') && strncasecmp (\"re\", template, 2))\n+\t    ppi_adjust = 2;\n+\t  /* The repeat pseudo-insn expands two three insns, a total of\n+\t     six bytes in size.  */\n+\t  else if ((c == 'r' || c == 'R')\n+\t\t   && ! strncasecmp (\"epeat\", template, 5))\n+\t    ppi_adjust = 4;\n+\t  while (c && c != '\\n' && ! IS_ASM_LOGICAL_LINE_SEPARATOR (c))\n+\t    {\n+\t      /* If this is a label, it is obviously not a ppi insn.  */\n+\t      if (c == ':' && maybe_label)\n+\t\t{\n+\t\t  ppi_adjust = 0;\n+\t\t  break;\n+\t\t}\n+\t      else if (c == '\\'' || c == '\"')\n+\t\tmaybe_label = 0;\n+\t      c = *template++;\n+\t    }\n+\t  sum += ppi_adjust;\n+\t  maybe_label = c != ':';\n+\t}\n+      while (c);\n+      return sum;\n+    }\n+  return 0;\n+}"}, {"sha": "4df72bfecf3e1196827f1244724dce7a5d93c9d0", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9342c0c4a93d92425e21de2b441ce623a30988a5/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9342c0c4a93d92425e21de2b441ce623a30988a5", "patch": "@@ -2122,20 +2122,12 @@ extern int rtx_equal_function_value_matters;\n extern struct rtx_def *fpscr_rtx;\n \n \f\n-/* Instructions with unfilled delay slots take up an extra two bytes for\n-   the nop in the delay slot.  */\n+/* Instructions with unfilled delay slots take up an\n+   extra two bytes for the nop in the delay slot.\n+   sh-dsp parallel processing insns are four bytes long.  */\n \n #define ADJUST_INSN_LENGTH(X, LENGTH)\t\t\t\t\\\n-  if (((GET_CODE (X) == INSN\t\t\t\t\t\\\n-\t&& GET_CODE (PATTERN (X)) != USE\t\t\t\\\n-\t&& GET_CODE (PATTERN (X)) != CLOBBER)\t\t\t\\\n-       || GET_CODE (X) == CALL_INSN\t\t\t\t\\\n-       || (GET_CODE (X) == JUMP_INSN\t\t\t\t\\\n-\t   && GET_CODE (PATTERN (X)) != ADDR_DIFF_VEC\t\t\\\n-\t   && GET_CODE (PATTERN (X)) != ADDR_VEC))\t\t\\\n-      && GET_CODE (PATTERN (NEXT_INSN (PREV_INSN (X)))) != SEQUENCE \\\n-      && get_attr_needs_delay_slot (X) == NEEDS_DELAY_SLOT_YES)\t\\\n-    (LENGTH) += 2;\n+  (LENGTH) += sh_insn_length_adjustment (X);\n \f\n /* Define the codes that are matched by predicates in sh.c.  */\n #define PREDICATE_CODES \\"}]}