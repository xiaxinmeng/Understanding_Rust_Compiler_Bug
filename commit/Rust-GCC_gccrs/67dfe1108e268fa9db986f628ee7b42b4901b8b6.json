{"sha": "67dfe1108e268fa9db986f628ee7b42b4901b8b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkZmUxMTA4ZTI2OGZhOWRiOTg2ZjYyOGVlN2I0MmI0OTAxYjhiNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-03T23:55:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-03T23:55:52Z"}, "message": "hooks.c (hook_tree_tree_identity): New.\n\n\t* hooks.c (hook_tree_tree_identity): New.\n\t* hooks.h: Add a prototype for hook_tree_tree_identity.\n\t* stmt.c (expand_asm_operands): Use targetm.md_asm_clobbers\n\tinstead of MD_ASM_CLOBBERS.\n\t* system.h (MD_ASM_CLOBBERS): Poison.\n\t* target-def.h (TARGET_MD_ASM_CLOBBERS): New.\n\t(TARGET_INITIALIZER): Add TARGET_MD_ASM_CLOBBERS.\n\t* target.h (gcc_target): Add md_asm_clobbers.\n\t* config/i386/i386.c (TARGET_MD_ASM_CLOBBERS): New.\n\t(ix86_md_asm_clobbers): New.\n\t* config/i386/i386.h (MD_ASM_CLOBBERS): Remove.\n\t* doc/tm.texi (MD_ASM_CLOBBERS): Change to\n\tTARGET_MD_ASM_CLOBBERS.\n\nFrom-SVN: r78868", "tree": {"sha": "8bbdd20f2db68edcbad7b5407da0d4c5ce549749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bbdd20f2db68edcbad7b5407da0d4c5ce549749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67dfe1108e268fa9db986f628ee7b42b4901b8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dfe1108e268fa9db986f628ee7b42b4901b8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dfe1108e268fa9db986f628ee7b42b4901b8b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dfe1108e268fa9db986f628ee7b42b4901b8b6/comments", "author": null, "committer": null, "parents": [{"sha": "dd0a905f24c159bc583a40aadedaf40a01c747bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0a905f24c159bc583a40aadedaf40a01c747bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0a905f24c159bc583a40aadedaf40a01c747bd"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "3dfb6068ca043d98c45fd66a492c7c448b66f97f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -1,4 +1,21 @@\n+2004-03-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* hooks.c (hook_tree_tree_identity): New.\n+\t* hooks.h: Add a prototype for hook_tree_tree_identity.\n+\t* stmt.c (expand_asm_operands): Use targetm.md_asm_clobbers\n+\tinstead of MD_ASM_CLOBBERS.\n+\t* system.h (MD_ASM_CLOBBERS): Poison.\n+\t* target-def.h (TARGET_MD_ASM_CLOBBERS): New.\n+\t(TARGET_INITIALIZER): Add TARGET_MD_ASM_CLOBBERS.\n+\t* target.h (gcc_target): Add md_asm_clobbers.\n+\t* config/i386/i386.c (TARGET_MD_ASM_CLOBBERS): New.\n+\t(ix86_md_asm_clobbers): New.\n+\t* config/i386/i386.h (MD_ASM_CLOBBERS): Remove.\n+\t* doc/tm.texi (MD_ASM_CLOBBERS): Change to\n+\tTARGET_MD_ASM_CLOBBERS.\n+\n 2004-03-03  Stuart Hastings  <stuart@apple.com>\n+\n \t* gcc/config.gcc: Arrange for Darwin/x86 to build libgcc_eh.a.\n \t\n 2004-03-03  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "2a12bd870f2593896e7b01174dbaba49de5a97c4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -886,6 +886,7 @@ static tree ix86_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static int extended_reg_mentioned_1 (rtx *, void *);\n static bool ix86_rtx_costs (rtx, int, int, int *);\n static int min_insn_size (rtx);\n+static tree ix86_md_asm_clobbers (tree clobbers);\n \n #if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n static void ix86_svr3_asm_out_constructor (rtx, int);\n@@ -1027,6 +1028,9 @@ static void init_ext_80387_constants (void);\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST ix86_build_builtin_va_list\n \n+#undef TARGET_MD_ASM_CLOBBERS\n+#define TARGET_MD_ASM_CLOBBERS ix86_md_asm_clobbers\n+\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n \n@@ -16024,4 +16028,21 @@ ix86_expand_vector_init (rtx target, rtx vals)\n     }\n }\n \n+/* Worker function for TARGET_MD_ASM_CLOBBERS.\n+\n+   We do this in the new i386 backend to maintain source compatibility\n+   with the old cc0-based compiler.  */\n+\n+static tree\n+ix86_md_asm_clobbers (tree clobbers)\n+{\n+  clobbers = tree_cons (NULL_TREE, build_string (5, \"flags\"),\t\n+\t\t\tclobbers);\t\t\t\t\n+  clobbers = tree_cons (NULL_TREE, build_string (4, \"fpsr\"),\t\n+\t\t\tclobbers);\t\t\t\t\n+  clobbers = tree_cons (NULL_TREE, build_string (7, \"dirflag\"),\t\n+\t\t\tclobbers);\t\t\t\t\n+  return clobbers;\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "910ab791bd22fa4e6657f701a7d02737154d9fad", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -1591,22 +1591,6 @@ enum reg_class\n      || MAYBE_MMX_CLASS_P (CLASS) \t\t\t\\\n    : GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n    ? reg_classes_intersect_p (FLOAT_REGS, (CLASS)) : 0)\n-\n-/* A C statement that adds to CLOBBERS any hard regs the port wishes\n-   to automatically clobber for all asms.\n-\n-   We do this in the new i386 backend to maintain source compatibility\n-   with the old cc0-based compiler.  */\n-\n-#define MD_ASM_CLOBBERS(CLOBBERS)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    (CLOBBERS) = tree_cons (NULL_TREE, build_string (5, \"flags\"),\t\\\n-\t\t\t    (CLOBBERS));\t\t\t\t\\\n-    (CLOBBERS) = tree_cons (NULL_TREE, build_string (4, \"fpsr\"),\t\\\n-\t\t\t    (CLOBBERS));\t\t\t\t\\\n-    (CLOBBERS) = tree_cons (NULL_TREE, build_string (7, \"dirflag\"),\t\\\n-\t\t\t    (CLOBBERS));\t\t\t\t\\\n-  } while (0)\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "79a13f79cc8a8d45ef8bc6fa548c4ad7f11c00d1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -8864,10 +8864,12 @@ without user intervention.  For instance, under Microsoft Windows\n symbols must be explicitly imported from shared libraries (DLLs).\n @end defmac\n \n-@defmac MD_ASM_CLOBBERS (@var{clobbers})\n-A C statement that adds to @var{clobbers} @code{STRING_CST} trees for\n+@deftypefn {Target Hook} tree TARGET_MD_ASM_CLOBBERS (tree @var{clobbers})\n+This target hook should add to @var{clobbers} @code{STRING_CST} trees for\n any hard regs the port wishes to automatically clobber for all asms.\n-@end defmac\n+It should return the result of the last @code{tree_cons} used to add a\n+clobber.\n+@end deftypefn\n \n @defmac MATH_LIBRARY\n Define this macro as a C string constant for the linker argument to link"}, {"sha": "ef90ce131c30986807061fa236242c5df80e76b2", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -209,3 +209,10 @@ hook_bool_voidp_size_t_false (void * a ATTRIBUTE_UNUSED,\n {\n   return false;\n }\n+\n+/* Generic hook that takes a tree and returns it as is.  */\n+tree\n+hook_tree_tree_identity (tree a)\n+{\n+  return a;\n+}"}, {"sha": "40b5e255025d12822adea2c69969c1cef710cf6c", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -57,5 +57,6 @@ extern rtx hook_rtx_rtx_null (rtx);\n extern rtx hook_rtx_tree_int_null (tree, int);\n extern void * hook_voidp_size_t_null (size_t);\n extern bool hook_bool_voidp_size_t_false (void *, size_t);\n+extern tree hook_tree_tree_identity (tree a);\n \n #endif"}, {"sha": "b0cd4fa3d2507f75dbba593a02aa990deb088e66", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -1486,13 +1486,11 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n   for (t = inputs; t ; t = TREE_CHAIN (t), i++)\n     constraints[i] = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \n-#ifdef MD_ASM_CLOBBERS\n   /* Sometimes we wish to automatically clobber registers across an asm.\n      Case in point is when the i386 backend moved from cc0 to a hard reg --\n      maintaining source-level compatibility means automatically clobbering\n      the flags register.  */\n-  MD_ASM_CLOBBERS (clobbers);\n-#endif\n+  clobbers = targetm.md_asm_clobbers (clobbers);\n \n   /* Count the number of meaningful clobbered registers, ignoring what\n      we would ignore later.  */"}, {"sha": "424ac5f9275c1f4d574a82038acd9fc3d07b0e07", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -640,7 +640,8 @@ typedef char _Bool;\n \tMAX_WCHAR_TYPE_SIZE GCOV_TYPE_SIZE SHARED_SECTION_ASM_OP\t   \\\n \tFINAL_REG_PARM_STACK_SPACE MAYBE_REG_PARM_STACK_SPACE\t\t   \\\n \tTRADITIONAL_PIPELINE_INTERFACE DFA_PIPELINE_INTERFACE\t\t   \\\n-\tDBX_OUTPUT_STANDARD_TYPES BUILTIN_SETJMP_FRAME_VALUE\n+\tDBX_OUTPUT_STANDARD_TYPES BUILTIN_SETJMP_FRAME_VALUE\t\t   \\\n+\tMD_ASM_CLOBBERS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "89af47e12ee3dfed2b7a304dc1c49309db42a193", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -333,6 +333,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_BUILTIN_SETJMP_FRAME_VALUE default_builtin_setjmp_frame_value\n \n+#define TARGET_MD_ASM_CLOBBERS hook_tree_tree_identity\n+\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n #define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_false\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n@@ -400,6 +402,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_PCH_VALID_P,\t\t\t\t\\\n   TARGET_DEFAULT_SHORT_ENUMS,\t\t\t\\\n   TARGET_BUILTIN_SETJMP_FRAME_VALUE,\t\t\\\n+  TARGET_MD_ASM_CLOBBERS,\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "2387e4dd38a4080b3f74dccee3b4636307dc6752", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dfe1108e268fa9db986f628ee7b42b4901b8b6/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=67dfe1108e268fa9db986f628ee7b42b4901b8b6", "patch": "@@ -425,6 +425,10 @@ struct gcc_target\n      of the current frame into the built-in setjmp buffer.  */\n   rtx (* builtin_setjmp_frame_value) (void);\n \n+  /* This target hook should add STRING_CST trees for any hard regs\n+     the port wishes to automatically clobber for all asms.  */\n+  tree (* md_asm_clobbers) (tree);\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}]}