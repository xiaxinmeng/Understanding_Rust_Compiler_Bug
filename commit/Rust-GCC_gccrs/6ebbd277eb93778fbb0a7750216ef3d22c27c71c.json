{"sha": "6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViYmQyNzdlYjkzNzc4ZmJiMGE3NzUwMjE2ZWYzZDIyYzI3YzcxYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2011-12-01T14:25:24Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2011-12-01T14:25:24Z"}, "message": "re PR tree-optimization/50802 (FAIL: gcc.c-torture/execute/arith-rand-ll.c execution at -O2 and -Os)\n\n        PR tree-optimization/50802\n        * tree-vrp.c (simplify_conversion_using_ranges): Rewrite test\n        considering what happens to ranges during sign changes and/or\n        intermediate narrowing conversions.\n\nFrom-SVN: r181880", "tree": {"sha": "9c045f2198b517ada893ae1f831c1eaf793c2d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c045f2198b517ada893ae1f831c1eaf793c2d2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ebbd277eb93778fbb0a7750216ef3d22c27c71c/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7fb38e9ac62b51cf64ac901c8424c8cffc17907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fb38e9ac62b51cf64ac901c8424c8cffc17907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7fb38e9ac62b51cf64ac901c8424c8cffc17907"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "1020e9018c21597c0044c7f487f044079571305e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ebbd277eb93778fbb0a7750216ef3d22c27c71c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ebbd277eb93778fbb0a7750216ef3d22c27c71c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "patch": "@@ -1,3 +1,10 @@\n+2011-12-01  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR tree-optimization/50802\n+\t* tree-vrp.c (simplify_conversion_using_ranges): Rewrite test\n+\tconsidering what happens to ranges during sign changes and/or\n+\tintermediate narrowing conversions.\n+\n 2011-11-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/50283"}, {"sha": "494cdd3e030e488acb922cfe98691a2ae29f31bb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ebbd277eb93778fbb0a7750216ef3d22c27c71c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ebbd277eb93778fbb0a7750216ef3d22c27c71c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6ebbd277eb93778fbb0a7750216ef3d22c27c71c", "patch": "@@ -7284,7 +7284,9 @@ simplify_conversion_using_ranges (gimple stmt)\n   tree innerop, middleop, finaltype;\n   gimple def_stmt;\n   value_range_t *innervr;\n-  double_int innermin, innermax, middlemin, middlemax;\n+  bool inner_unsigned_p, middle_unsigned_p, final_unsigned_p;\n+  unsigned inner_prec, middle_prec, final_prec;\n+  double_int innermin, innermed, innermax, middlemin, middlemed, middlemax;\n \n   finaltype = TREE_TYPE (gimple_assign_lhs (stmt));\n   if (!INTEGRAL_TYPE_P (finaltype))\n@@ -7309,33 +7311,49 @@ simplify_conversion_using_ranges (gimple stmt)\n      the middle conversion is removed.  */\n   innermin = tree_to_double_int (innervr->min);\n   innermax = tree_to_double_int (innervr->max);\n-  middlemin = double_int_ext (innermin, TYPE_PRECISION (TREE_TYPE (middleop)),\n-\t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n-  middlemax = double_int_ext (innermax, TYPE_PRECISION (TREE_TYPE (middleop)),\n-\t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n-  /* If the middle values are not equal to the original values fail.\n-     But only if the inner cast truncates (thus we ignore differences\n-     in extension to handle the case going from a range to an anti-range\n-     and back).  */\n-  if ((TYPE_PRECISION (TREE_TYPE (innerop))\n-       > TYPE_PRECISION (TREE_TYPE (middleop)))\n-      && (!double_int_equal_p (innermin, middlemin)\n-\t  || !double_int_equal_p (innermax, middlemax)))\n+\n+  inner_prec = TYPE_PRECISION (TREE_TYPE (innerop));\n+  middle_prec = TYPE_PRECISION (TREE_TYPE (middleop));\n+  final_prec = TYPE_PRECISION (finaltype);\n+\n+  /* If the first conversion is not injective, the second must not\n+     be widening.  */\n+  if (double_int_cmp (double_int_sub (innermax, innermin),\n+\t\t      double_int_mask (middle_prec), true) > 0\n+      && middle_prec < final_prec)\n     return false;\n+  /* We also want a medium value so that we can track the effect that\n+     narrowing conversions with sign change have.  */\n+  inner_unsigned_p = TYPE_UNSIGNED (TREE_TYPE (innerop));\n+  if (inner_unsigned_p)\n+    innermed = double_int_rshift (double_int_mask (inner_prec),\n+\t\t\t\t  1, inner_prec, false);\n+  else\n+    innermed = double_int_zero;\n+  if (double_int_cmp (innermin, innermed, inner_unsigned_p) >= 0\n+      || double_int_cmp (innermed, innermax, inner_unsigned_p) >= 0)\n+    innermed = innermin;\n+\n+  middle_unsigned_p = TYPE_UNSIGNED (TREE_TYPE (middleop));\n+  middlemin = double_int_ext (innermin, middle_prec, middle_unsigned_p);\n+  middlemed = double_int_ext (innermed, middle_prec, middle_unsigned_p);\n+  middlemax = double_int_ext (innermax, middle_prec, middle_unsigned_p);\n+\n   /* Require that the final conversion applied to both the original\n      and the intermediate range produces the same result.  */\n+  final_unsigned_p = TYPE_UNSIGNED (finaltype);\n   if (!double_int_equal_p (double_int_ext (middlemin,\n-\t\t\t\t\t   TYPE_PRECISION (finaltype),\n-\t\t\t\t\t   TYPE_UNSIGNED (finaltype)),\n+\t\t\t\t\t   final_prec, final_unsigned_p),\n \t\t\t   double_int_ext (innermin,\n-\t\t\t\t\t   TYPE_PRECISION (finaltype),\n-\t\t\t\t\t   TYPE_UNSIGNED (finaltype)))\n+\t\t\t\t\t   final_prec, final_unsigned_p))\n+      || !double_int_equal_p (double_int_ext (middlemed,\n+\t\t\t\t\t      final_prec, final_unsigned_p),\n+\t\t\t      double_int_ext (innermed,\n+\t\t\t\t\t      final_prec, final_unsigned_p))\n       || !double_int_equal_p (double_int_ext (middlemax,\n-\t\t\t\t\t      TYPE_PRECISION (finaltype),\n-\t\t\t\t\t      TYPE_UNSIGNED (finaltype)),\n+\t\t\t\t\t      final_prec, final_unsigned_p),\n \t\t\t      double_int_ext (innermax,\n-\t\t\t\t\t      TYPE_PRECISION (finaltype),\n-\t\t\t\t\t      TYPE_UNSIGNED (finaltype))))\n+\t\t\t\t\t      final_prec, final_unsigned_p)))\n     return false;\n \n   gimple_assign_set_rhs1 (stmt, innerop);"}]}