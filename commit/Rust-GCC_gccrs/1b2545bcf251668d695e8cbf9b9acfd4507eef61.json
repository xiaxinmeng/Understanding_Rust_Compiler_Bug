{"sha": "1b2545bcf251668d695e8cbf9b9acfd4507eef61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyNTQ1YmNmMjUxNjY4ZDY5NWU4Y2JmOWI5YWNmZDQ1MDdlZWY2MQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-05-30T13:38:20Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-05-30T13:38:20Z"}, "message": "2004-05-30  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/Buffer.java\n\t(limit): Fixed off by one error.\n\t* java/nio/CharBuffer.java\n\t(wrap): Fixed arguments, added javadocs.\n\nFrom-SVN: r82448", "tree": {"sha": "183af12f5dc6b5b3c9bddf400175e36ec1dd1274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183af12f5dc6b5b3c9bddf400175e36ec1dd1274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b2545bcf251668d695e8cbf9b9acfd4507eef61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2545bcf251668d695e8cbf9b9acfd4507eef61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2545bcf251668d695e8cbf9b9acfd4507eef61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2545bcf251668d695e8cbf9b9acfd4507eef61/comments", "author": null, "committer": null, "parents": [{"sha": "74c2dbf7a17c27d606e21dc6be52de40d7e17f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c2dbf7a17c27d606e21dc6be52de40d7e17f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c2dbf7a17c27d606e21dc6be52de40d7e17f4b"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "b567876a63af9d5b3321e65c7732ba44501ac862", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1b2545bcf251668d695e8cbf9b9acfd4507eef61", "patch": "@@ -1,3 +1,10 @@\n+2004-05-30  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/Buffer.java\n+\t(limit): Fixed off by one error.\n+\t* java/nio/CharBuffer.java\n+\t(wrap): Fixed arguments, added javadocs.\n+\n 2004-05-30  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/beans/BeanInfoEmbryo.java,"}, {"sha": "c7f01b671167bbf42be2de28b47930f91296262e", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=1b2545bcf251668d695e8cbf9b9acfd4507eef61", "patch": "@@ -148,11 +148,11 @@ public final Buffer limit (int newLimit)\n     if ((newLimit < 0) || (newLimit > cap))\n       throw new IllegalArgumentException ();\n \n-    if (newLimit <= mark)\n+    if (newLimit < mark)\n         mark = -1;\n \n     if (pos > newLimit)\n-        pos = newLimit - 1;\n+        pos = newLimit;\n \n     limit = newLimit;\n     return this;"}, {"sha": "5116c2548113fc2f4c644f7f9291e266a0920d4c", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b2545bcf251668d695e8cbf9b9acfd4507eef61/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=1b2545bcf251668d695e8cbf9b9acfd4507eef61", "patch": "@@ -65,56 +65,75 @@ public static CharBuffer allocate (int capacity)\n    * Wraps a <code>char</code> array into a <code>CharBuffer</code>\n    * object.\n    *\n+   * @param array the array to wrap\n+   * @param offset the offset of the region in the array to wrap\n+   * @param length the length of the region in the array to wrap\n+   *\n+   * @return a new <code>CharBuffer</code> object\n+   * \n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static CharBuffer wrap (char[] array, int offset, int length)\n+  final public static CharBuffer wrap(char[] array, int offset, int length)\n   {\n-    return new CharBufferImpl (array, 0, array.length, offset + length, offset, -1, false);\n+    return new CharBufferImpl(array, 0, array.length, offset + length, offset, -1, false);\n   }\n   \n   /**\n    * Wraps a character sequence into a <code>CharBuffer</code> object.\n+   *\n+   * @param seq the sequence to wrap\n+   *\n+   * @return a new <code>CharBuffer</code> object\n    */\n-  final public static CharBuffer wrap (CharSequence a)\n+  final public static CharBuffer wrap(CharSequence seq)\n   {\n-    return wrap (a, 0, a.length ());\n+    return wrap(seq, 0, seq.length());\n   }\n   \n   /**\n    * Wraps a character sequence into a <code>CharBuffer</code> object.\n    * \n+   * @param seq the sequence to wrap\n+   * @param start the index of the first character to wrap\n+   * @param end the index of the first character not to wrap\n+   *\n+   * @return a new <code>CharBuffer</code> object\n+   * \n    * @exception IndexOutOfBoundsException If the preconditions on the offset\n    * and length parameters do not hold\n    */\n-  final public static CharBuffer wrap (CharSequence a, int offset, int length)\n+  final public static CharBuffer wrap(CharSequence seq, int start, int end)\n   {\n     // FIXME: implement better handling of java.lang.String.\n     // Probably share data with String via reflection.\n \t  \n-    if ((offset < 0)\n-        || (offset > a.length ())\n-        || (length < 0)\n-        || (length > (a.length () - offset)))\n-      throw new IndexOutOfBoundsException ();\n+    if ((start < 0)\n+        || (start > seq.length())\n+        || (end < start)\n+        || (end > (seq.length() - start)))\n+      throw new IndexOutOfBoundsException();\n     \n-    char [] buffer = new char [a.length ()];\n+    int len = end - start;\n+    char[] buffer = new char[len];\n     \n-    for (int i = offset; i < length; i++)\n-      {\n-        buffer [i] = a.charAt (i);\n-      }\n+    for (int i = 0; i < len; i++)\n+      buffer[i] = seq.charAt(i + start);\n     \n-    return wrap (buffer, offset, length).asReadOnlyBuffer ();\n+    return wrap(buffer, 0, len).asReadOnlyBuffer();\n   }\n \n   /**\n    * Wraps a <code>char</code> array into a <code>CharBuffer</code>\n    * object.\n+   *\n+   * @param array the array to wrap\n+   *\n+   * @return a new <code>CharBuffer</code> object\n    */\n-  final public static CharBuffer wrap (char[] array)\n+  final public static CharBuffer wrap(char[] array)\n   {\n-    return wrap (array, 0, array.length);\n+    return wrap(array, 0, array.length);\n   }\n   \n   /**"}]}