{"sha": "e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczYTMyZDZkNDdlYzdjNWZiNWE1ZmU3ZWI4OTZjMGUxMjU4ZWE2OA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-23T14:33:55Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-04-23T14:33:55Z"}, "message": "[AArch64] (PR94383) Avoid C++17 empty base field checking for HVA/HFA\n\nIn C++17, an empty class deriving from an empty base is not an\naggregate, while in C++14 it is.  In order to implement this, GCC adds\nan artificial field to such classes.\n\nThis artificial field has no mapping to Fundamental Data Types in the\nAArch64 PCS ABI and hence should not count towards determining whether an\nobject can be passed using the vector registers as per section\n\"6.4.2 Parameter Passing Rules\" in the AArch64 PCS.\nhttps://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst#the-base-procedure-call-standard\n\nThis patch avoids counting this artificial field in\naapcs_vfp_sub_candidate, and hence calculates whether such objects\nshould be passed in vector registers in the same manner as C++14 (where\nthe artificial field does not exist).\n\nBefore this change, the test below would pass the arguments to `f` in\ngeneral registers.  After this change, the test passes the arguments to\n`f` using the vector registers.\n\nThe new behaviour matches the behaviour of `armclang`, and also matches\nthe behaviour when run with `-std=gnu++14`.\n\n> gcc -std=gnu++17 test.cpp\n\n``` test.cpp\nstruct base {};\n\nstruct pair : base\n{\n  float first;\n  float second;\n  pair (float f, float s) : first(f), second(s) {}\n};\n\nvoid f (pair);\nint main()\n{\n  f({3.14, 666});\n  return 1;\n}\n```\n\nWe add a `-Wpsabi` warning to catch cases where this fix has changed the ABI for\nsome functions.  Unfortunately this warning is not emitted twice for multiple\ncalls to the same function, but I feel this is not much of a problem and can be\nfixed later if needs be.\n\n(i.e. if `main` called `f` twice in a row we only emit a diagnostic for the\nfirst).\n\nTesting:\n    Bootstrap and regression test on aarch64-linux.\n    All struct-layout-1 tests now pass.\n\ngcc/ChangeLog:\n\n2020-04-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94383\n\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Account for C++17\n\tempty base class artificial fields.\n\t(aarch64_vfp_is_call_or_return_candidate): Warn when ABI PCS decision is\n\tdifferent after this fix.", "tree": {"sha": "7b37e781ab2bb1fce4554e300c51558af1f8af36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b37e781ab2bb1fce4554e300c51558af1f8af36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8eecc2a919033ad4224756a8759d8e94c0e4bc2"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "71c480a24c69aec4f5896358db99333535d632cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "patch": "@@ -1,3 +1,12 @@\n+2020-04-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94383\n+\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Account for C++17\n+\tempty base class artificial fields.\n+\t(aarch64_vfp_is_call_or_return_candidate): Warn when ABI PCS decision is\n+\tdifferent after this fix.\n+\n 2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94707"}, {"sha": "a81b0b2ac048f9f95cfa92c37fc345d04bbddd8d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "patch": "@@ -16442,9 +16442,19 @@ aarch64_member_type_forces_blk (const_tree field_or_array, machine_mode mode)\n    If *MODEP is VOIDmode, then set it to the first valid floating point\n    type.  If a non-floating point type is found, or if a floating point\n    type that doesn't match a non-VOIDmode *MODEP is found, then return -1,\n-   otherwise return the count in the sub-tree.  */\n+   otherwise return the count in the sub-tree.\n+\n+   The AVOID_CXX17_EMPTY_BASE argument is to allow the caller to check whether\n+   this function has changed its behavior after the fix for PR94384 -- this fix\n+   is to avoid artificial fields in empty base classes.\n+   When called with this argument as a NULL pointer this function does not\n+   avoid the artificial fields -- this is useful to check whether the function\n+   returns something different after the fix.\n+   When called pointing at a value, this function avoids such artificial fields\n+   and sets the value to TRUE when one of these fields has been set.  */\n static int\n-aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n+aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep,\n+\t\t\t bool *avoid_cxx17_empty_base)\n {\n   machine_mode mode;\n   HOST_WIDE_INT size;\n@@ -16520,7 +16530,8 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n \t    || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n \t  return -1;\n \n-\tcount = aapcs_vfp_sub_candidate (TREE_TYPE (type), modep);\n+\tcount = aapcs_vfp_sub_candidate (TREE_TYPE (type), modep,\n+\t\t\t\t\t avoid_cxx17_empty_base);\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n@@ -16558,7 +16569,18 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n \n-\t    sub_count = aapcs_vfp_sub_candidate (TREE_TYPE (field), modep);\n+\t    /* Ignore C++17 empty base fields, while their type indicates\n+\t       they do contain padding, they have zero size and thus don't\n+\t       contain any padding.  */\n+\t    if (cxx17_empty_base_field_p (field)\n+\t\t&& avoid_cxx17_empty_base)\n+\t      {\n+\t\t*avoid_cxx17_empty_base = true;\n+\t\tcontinue;\n+\t      }\n+\n+\t    sub_count = aapcs_vfp_sub_candidate (TREE_TYPE (field), modep,\n+\t\t\t\t\t\t avoid_cxx17_empty_base);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count += sub_count;\n@@ -16591,7 +16613,8 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n \n-\t    sub_count = aapcs_vfp_sub_candidate (TREE_TYPE (field), modep);\n+\t    sub_count = aapcs_vfp_sub_candidate (TREE_TYPE (field), modep,\n+\t\t\t\t\t\t avoid_cxx17_empty_base);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count = count > sub_count ? count : sub_count;\n@@ -16718,10 +16741,26 @@ aarch64_vfp_is_call_or_return_candidate (machine_mode mode,\n     }\n   else if (type && composite_p)\n     {\n-      int ag_count = aapcs_vfp_sub_candidate (type, &new_mode);\n-\n+      bool avoided = false;\n+      int ag_count = aapcs_vfp_sub_candidate (type, &new_mode, &avoided);\n       if (ag_count > 0 && ag_count <= HA_MAX_NUM_FLDS)\n \t{\n+\t  static unsigned last_reported_type_uid;\n+\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n+\t  int alt;\n+\t  if (warn_psabi\n+\t      && avoided\n+\t      && uid != last_reported_type_uid\n+\t      && ((alt = aapcs_vfp_sub_candidate (type, &new_mode, NULL))\n+\t\t  != ag_count))\n+\t    {\n+\t      gcc_assert (alt == -1);\n+\t      last_reported_type_uid = uid;\n+\t      inform (input_location, \"parameter passing for argument of type \"\n+\t\t      \"%qT when C++17 is enabled changed to match C++14 \"\n+\t\t      \"in GCC 10.1\", type);\n+\t    }\n+\n \t  if (is_ha != NULL) *is_ha = true;\n \t  *count = ag_count;\n \t}"}]}