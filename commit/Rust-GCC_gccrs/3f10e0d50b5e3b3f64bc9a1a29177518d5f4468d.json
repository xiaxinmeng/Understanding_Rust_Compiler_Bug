{"sha": "3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "node_id": "C_kwDOANBUbNoAKDNmMTBlMGQ1MGI1ZTNiM2Y2NGJjOWExYTI5MTc3NTE4ZDVmNDQ2OGQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-11T10:08:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-14T08:12:36Z"}, "message": "middle-end/104497 - gimplification of vector indexing\n\nThe following attempts to address gimplification of\n\n   ... = VIEW_CONVERT_EXPR<int[4]>((i & 1) != 0 ? inv : src)[i];\n\nwhich is problematic since gimplifying the base object\n? inv : src produces a register temporary but GIMPLE does not\nreally support a register as a base for an ARRAY_REF (even\nthough that's not strictly validated it seems as can be seen\nat -O0).  Interestingly the C++ frontend avoids this issue\nby emitting the following GENERIC instead:\n\n   ... = (i & 1) != 0 ? VIEW_CONVERT_EXPR<int[4]>(inv)[i] : VIEW_CONVERT_EXPR<int[4]>(src)[i];\n\nThe proposed patch below fixes things up when using an rvalue\nas the base is OK by emitting a copy from a register base to a\nnon-register one.  The ?: as lvalue extension seems to be gone\nfor C, C++ again unwraps the COND_EXPR in that case.\n\n2022-02-11  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/104497\n\t* gimplify.cc (gimplify_compound_lval): Make sure the\n\tbase is a non-register if needed and possible.\n\n\t* c-c++-common/torture/pr104497.c: New testcase.", "tree": {"sha": "28d86c6cd026c600944044af4626dce34f18617c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d86c6cd026c600944044af4626dce34f18617c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d31c8ec3fd9d1e8a16cac8605c862fbede07d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d31c8ec3fd9d1e8a16cac8605c862fbede07d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d31c8ec3fd9d1e8a16cac8605c862fbede07d46"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "f570daa015a596846f60bc9eea4e7a2c065c6b30", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "patch": "@@ -250,6 +250,7 @@ static enum gimplify_status gimplify_compound_expr (tree *, gimple_seq *, bool);\n static hash_map<tree, tree> *oacc_declare_returns;\n static enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n \t\t\t\t\t   bool (*) (tree), fallback_t, bool);\n+static void prepare_gimple_addressable (tree *, gimple_seq *);\n \n /* Shorter alias name for the above function for use in gimplify.cc\n    only.  */\n@@ -3122,10 +3123,12 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n      gimplified before gimplifying the size expressions.\n \n      So we do this in three steps.  First we deal with variable\n-     bounds, sizes, and positions, then we gimplify the base,\n-     then we deal with the annotations for any variables in the\n-     components and any indices, from left to right.  */\n+     bounds, sizes, and positions, then we gimplify the base and\n+     ensure it is memory if needed, then we deal with the annotations\n+     for any variables in the components and any indices, from left\n+     to right.  */\n \n+  bool need_non_reg = false;\n   for (i = expr_stack.length () - 1; i >= 0; i--)\n     {\n       tree t = expr_stack[i];\n@@ -3161,6 +3164,7 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  TREE_OPERAND (t, 3) = elmt_size;\n \t\t}\n \t    }\n+\t  need_non_reg = true;\n \t}\n       else if (TREE_CODE (t) == COMPONENT_REF)\n \t{\n@@ -3182,6 +3186,7 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  TREE_OPERAND (t, 2) = offset;\n \t\t}\n \t    }\n+\t  need_non_reg = true;\n \t}\n     }\n \n@@ -3192,6 +3197,12 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\tfallback | fb_lvalue);\n   ret = MIN (ret, tret);\n \n+  /* Step 2a: if we have component references we do not support on\n+     registers then make sure the base isn't a register.  Of course\n+     we can only do so if an rvalue is OK.  */\n+  if (need_non_reg && (fallback & fb_rvalue))\n+    prepare_gimple_addressable (p, pre_p);\n+\n   /* Step 3: gimplify size expressions and the indices and operands of\n      ARRAY_REF.  During this loop we also remove any useless conversions.  */\n "}, {"sha": "c63fc021e03867114f1365988b114e2410e5a1dd", "filename": "gcc/testsuite/c-c++-common/torture/pr104497.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr104497.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr104497.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr104497.c?ref=3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+typedef int __attribute__((vector_size(16))) vec_t;\n+\n+vec_t src, inv, res;\n+\n+void test(int i)\n+{\n+    vec_t y={0};\n+    y[i] = (i & 1 ? inv : src)[i];\n+    res = y;\n+}"}]}