{"sha": "332477628507525e3f252183a864d74bddb5c77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyNDc3NjI4NTA3NTI1ZTNmMjUyMTgzYTg2NGQ3NGJkZGI1Yzc3Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-12-18T09:34:13Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-12-18T09:34:13Z"}, "message": "re PR fortran/68196 (ICE on function result with procedure pointer component)\n\n2015-12-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68196\n\t*expr.c (gfc_has_default_initializer): Prevent infinite recursion\n\tthrough this function for procedure pointer components.\n\t* trans-array.c (structure_alloc_comps): Ditto twice.\n\n\n2015-12-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68196\n\t* gfortran.dg/proc_ptr_48.f90: New test.\n\nFrom-SVN: r231807", "tree": {"sha": "1b2e25c60d3d7bb04a7d724be4b7db3f4f541b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2e25c60d3d7bb04a7d724be4b7db3f4f541b17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/332477628507525e3f252183a864d74bddb5c77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332477628507525e3f252183a864d74bddb5c77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332477628507525e3f252183a864d74bddb5c77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332477628507525e3f252183a864d74bddb5c77f/comments", "author": null, "committer": null, "parents": [{"sha": "6638efce562e68d702d859c124ed36c7a8c55556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6638efce562e68d702d859c124ed36c7a8c55556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6638efce562e68d702d859c124ed36c7a8c55556"}], "stats": {"total": 71, "additions": 67, "deletions": 4}, "files": [{"sha": "eeb79d9c8149a354a950576dc4c34a3f25b864cd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=332477628507525e3f252183a864d74bddb5c77f", "patch": "@@ -1,3 +1,10 @@\n+2015-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68196\n+\t*expr.c (gfc_has_default_initializer): Prevent infinite recursion\n+\tthrough this function for procedure pointer components.\n+\t* trans-array.c (structure_alloc_comps): Ditto twice.\n+\n 2015-12-15  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n \n \t* resolve.c (resolve_critical): Committing symbols of"}, {"sha": "5d7bceee48f159f794b07164de667936bc645a21", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=332477628507525e3f252183a864d74bddb5c77f", "patch": "@@ -3930,7 +3930,7 @@ gfc_has_default_initializer (gfc_symbol *der)\n   for (c = der->components; c; c = c->next)\n     if (c->ts.type == BT_DERIVED)\n       {\n-        if (!c->attr.pointer\n+        if (!c->attr.pointer && !c->attr.proc_pointer\n \t     && gfc_has_default_initializer (c->ts.u.derived))\n \t  return true;\n \tif (c->attr.pointer && c->initializer)"}, {"sha": "71e04822075befecc400aada18fbf1d673b39697", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=332477628507525e3f252183a864d74bddb5c77f", "patch": "@@ -8074,7 +8074,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t    }\n \n \t  if (cmp_has_alloc_comps\n-\t\t&& !c->attr.pointer\n+\t\t&& !c->attr.pointer && !c->attr.proc_pointer\n \t\t&& !called_dealloc_with_status)\n \t    {\n \t      /* Do not deallocate the components of ultimate pointer\n@@ -8264,7 +8264,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t     components that are really allocated, the deep copy code has to\n \t     be generated first and then added to the if-block in\n \t     gfc_duplicate_allocatable ().  */\n-\t  if (cmp_has_alloc_comps)\n+\t  if (cmp_has_alloc_comps\n+\t      && !c->attr.proc_pointer)\n \t    {\n \t      rank = c->as ? c->as->rank : 0;\n \t      tmp = fold_convert (TREE_TYPE (dcmp), comp);"}, {"sha": "324f54997d3ab588cb2644c13c7f1256ef383148", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=332477628507525e3f252183a864d74bddb5c77f", "patch": "@@ -1,3 +1,8 @@\n+2015-12-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68196\n+\t* gfortran.dg/proc_ptr_48.f90: New test.\n+\n 2015-12-18  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/hotpatch-8.c: Add -Wno-deprecated to options.\n@@ -16,7 +21,7 @@\n 2015-12-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/ipa/ipa-icf-merge-1.c: New.\n-\t\n+\n 2015-12-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/diagnostic-range-bad-return.c: New test case."}, {"sha": "deed635355b474f4a572be293c39002571cda3f7", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_48.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332477628507525e3f252183a864d74bddb5c77f/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_48.f90?ref=332477628507525e3f252183a864d74bddb5c77f", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+!\n+! Checks the fix for PR68196, comment #8\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  type  Bug                                  ! Failed at trans--array.c:8269\n+    real, allocatable :: scalar\n+    procedure(boogInterface),pointer :: boog\n+  end type\n+  interface\n+    function boogInterface(A) result(C)\n+      import Bug\n+      class(Bug) A\n+      type(Bug)  C\n+    end function\n+  end interface\n+\n+  real, parameter :: ninetynine = 99.0\n+  real, parameter :: onenineeight = 198.0\n+\n+  type(bug) :: actual, res\n+\n+  actual%scalar = ninetynine\n+  actual%boog => boogImplementation\n+\n+  res = actual%boog ()                       ! Failed on bug in expr.c:3933\n+  if (res%scalar .ne. onenineeight) call abort\n+\n+! Make sure that the procedure pointer is assigned correctly\n+  if (actual%scalar .ne. ninetynine) call abort\n+  actual = res%boog ()\n+  if (actual%scalar .ne. onenineeight) call abort\n+\n+! Deallocate so that we can use valgrind to check for memory leaks\n+  deallocate (res%scalar, actual%scalar)\n+\n+contains\n+    function boogImplementation(A) result(C) ! Failed at trans--array.c:8078\n+      class(Bug) A\n+      type(Bug)  C\n+      select type (A)\n+        type is (bug)\n+          C = A\n+          C%scalar = onenineeight\n+        class default\n+          call abort\n+      end select\n+    end function\n+end"}]}