{"sha": "6caec77e3be8e2989f723ac7f522885dded6bcfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhZWM3N2UzYmU4ZTI5ODlmNzIzYWM3ZjUyMjg4NWRkZWQ2YmNmYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-08T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-08T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "18fe983b1dd0b99e019e0e77552c5ee9d4e44a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18fe983b1dd0b99e019e0e77552c5ee9d4e44a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6caec77e3be8e2989f723ac7f522885dded6bcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6caec77e3be8e2989f723ac7f522885dded6bcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6caec77e3be8e2989f723ac7f522885dded6bcfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6caec77e3be8e2989f723ac7f522885dded6bcfc/comments", "author": null, "committer": null, "parents": [{"sha": "6ae17a3b6835b30102607d45ac89c7a668e2c8d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae17a3b6835b30102607d45ac89c7a668e2c8d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae17a3b6835b30102607d45ac89c7a668e2c8d4"}], "stats": {"total": 241, "additions": 240, "deletions": 1}, "files": [{"sha": "3074f9021f69bbf737338748f432455a36cb7589", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,93 @@\n+2020-10-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* common.opt (-fevrp-mode): Rename and move...\n+\t* params.opt (--param=evrp-mode): ...here.\n+\t* gimple-range.h (DEBUG_RANGE_CACHE): Use param_evrp_mode instead\n+\tof flag_evrp_mode.\n+\t* gimple-ssa-evrp.c (rvrp_folder): Same.\n+\t(hybrid_folder): Same.\n+\t(execute_early_vrp): Same.\n+\n+2020-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97307\n+\t* tree-ssa-sink.c (statement_sink_location): Change heuristic\n+\tfor not skipping stores to look for virtual definitions\n+\trather than uses.\n+\n+2020-10-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-range.h (irange_allocator::allocate): Allocate in two hunks\n+\tinstead of using the variably-sized trailing array approach.\n+\n+2020-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (-fdiagnostics-plain-output): Add\n+\t-fdiagnostics-path-format=separate-events to list of\n+\toptions injected by -fdiagnostics-plain-output.\n+\t* opts-common.c (decode_cmdline_options_to_array): Likewise.\n+\n+2020-10-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/96394\n+\t* ipa-prop.c (update_indirect_edges_after_inlining): Do not add\n+\tresolved speculation edges to vector of new direct edges even in\n+\tpresence of multiple speculative direct edges for a single call.\n+\n+2020-10-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (unspec): Add UNSPEC_ADDPTR.\n+\t(addptrdi3): Add SGPR alternative.\n+\n+2020-10-07  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2out.c (add_filepath_AT_string): New function.\n+\t(asm_outputs_debug_line_str): Likewise.\n+\t(add_filename_attribute): Likewise.\n+\t(add_comp_dir_attribute): Call add_filepath_AT_string.\n+\t(gen_compile_unit_die): Call add_filename_attribute for name.\n+\t(init_sections_and_labels): Init debug_line_str_section when\n+\tasm_outputs_debug_line_str return true.\n+\t(dwarf2out_early_finish): Remove DW_AT_name and DW_AT_comp_dir\n+\thack and call add_filename_attribute for the remap_debug_filename.\n+\n+2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (HAVE_AS_GDWARF_5_DEBUG_FLAG,\n+\tHAVE_AS_WORKING_DWARF_4_FLAG): New tests.\n+\t* gcc.c (ASM_DEBUG_DWARF_OPTION): Define.\n+\t(ASM_DEBUG_SPEC): Use ASM_DEBUG_DWARF_OPTION instead of\n+\t\"--gdwarf2\".  Use %{cond:opt1;:opt2} style.\n+\t(ASM_DEBUG_OPTION_DWARF_OPT): Define.\n+\t(ASM_DEBUG_OPTION_SPEC): Define.\n+\t(asm_debug_option): New variable.\n+\t(asm_options): Add \"%(asm_debug_option)\".\n+\t(static_specs): Add asm_debug_option entry.\n+\t(static_spec_functions): Add dwarf-version-gt.\n+\t(debug_level_greater_than_spec_func): New function.\n+\t* config/darwin.h (ASM_DEBUG_OPTION_SPEC): Define.\n+\t* config/darwin9.h (ASM_DEBUG_OPTION_SPEC): Redefine.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\n+2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/97305\n+\t* optc-save-gen.awk: Don't declare mask variable if explicit_mask\n+\tarray is not present.\n+\n+2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_simd): Don't emit MIN_EXPR and PLUS_EXPR\n+\tat the end of entry_bb and innermost init_bb, instead force arguments\n+\tfor MIN_EXPR into temporaries in both cases and jump to a new bb that\n+\tperforms MIN_EXPR and PLUS_EXPR.\n+\n+2020-10-07  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Add missing NULL test\n+\tfor dump_file.\n+\n 2020-10-06  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* flag-types.h (enum evrp_mode): New enumerated type EVRP_MODE_*."}, {"sha": "df5045528630ff5700a693bfadd3d2146324fb5b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1 +1 @@\n-20201007\n+20201008"}, {"sha": "d8453cb44591a05704e1888724af52b573576e76", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,12 @@\n+2020-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97116\n+\t* sm-malloc.cc (method_p): New.\n+\t(describe_argument_index): New.\n+\t(inform_nonnull_attribute): Use describe_argument_index.\n+\t(possible_null_arg::describe_final_event): Likewise.\n+\t(null_arg::describe_final_event): Likewise.\n+\n 2020-09-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/95188"}, {"sha": "ebf1fb24f4e5f5c2b13eef59aef91cf88752fc61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,49 @@\n+2020-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97010\n+\t* pt.c (tsubst_copy_and_build) <case TEMPLATE_ID_EXPR>: Call\n+\ttsubst_copy_and_build explicitly instead of using the RECUR macro.\n+\tHandle a TEMPLATE_ID_EXPR with an IDENTIFIER_NODE as its operand.\n+\t<case CALL_EXPR>: Perform ADL for a TEMPLATE_ID_EXPR with an\n+\tIDENTIFIER_NODE as its operand.\n+\n+2020-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\tPR libstdc++/97273\n+\t* tree.c (cp_tree_equal) <case ALIGNOF_EXPR>: Return false if\n+\tALIGNOF_EXPR_STD_P differ.\n+\n+2020-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct language_function): Delete extern_decl_map.\n+\t(DECL_LOCAL_DECL_ALIAS): New.\n+\t* name-lookup.h (is_local_extern): Delete.\n+\t* name-lookup.c (set_local_extern_decl_linkage): Replace with ...\n+\t(push_local_extern_decl): ... this new function.\n+\t(do_pushdecl): Call new function after pushing new decl.  Unhide\n+\thidden non-functions.\n+\t(is_local_extern): Delete.\n+\t* decl.c (layout_var_decl): Do not allow VLA local externs.\n+\t* decl2.c (mark_used): Also mark DECL_LOCAL_DECL_ALIAS. Drop old\n+\tlocal-extern treatment.\n+\t* parser.c (cp_parser_oacc_declare): Deal with local extern aliases.\n+\t* pt.c (tsubst_expr): Adjust local extern instantiation.\n+\t* cp-gimplify.c (cp_genericize_r): Remap DECL_LOCAL_DECLs.\n+\n+2020-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_BUILTIN_P): Rename to ...\n+\t(DECL_UNDECLARED_BUILTIN_P): ... here.\n+\t* decl.c (duplicate_decls): Adjust.\n+\t* name-lookup.c (anticipated_builtin_p): Adjust.\n+\t(do_nonmember_using_decl): Likewise.\n+\n+2020-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.c (build_cp_fntype_variant): Clear\n+\tTYPE_DEPENDENT_P_VALID if necessary.\n+\n 2020-10-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97297"}, {"sha": "8de4b38746d6fd8a662ff397c1c6f90e656fb318", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,9 @@\n+2020-10-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/47469\n+\t* trans-expr.c (arrayfunc_assign_needs_temporary): Tidy detection\n+\tof pointer and allocatable functions.\n+\n 2020-10-04  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/97272"}, {"sha": "8ab7fe0196ea181797ed094564aac2b101c4aaef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,69 @@\n+2020-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97010\n+\t* g++.dg/cpp2a/fn-template21.C: New test.\n+\t* g++.dg/cpp2a/fn-template22.C: New test.\n+\n+2020-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97307\n+\t* gcc.dg/tree-ssa/ssa-sink-17.c: New testcase.\n+\t* gcc.dg/vect/pr65947-3.c: XFAIL.\n+\n+2020-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\tPR libstdc++/97273\n+\t* g++.dg/template/alignof3.C: New test.\n+\n+2020-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97116\n+\t* g++.dg/analyzer/pr97116.C: New test.\n+\n+2020-10-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/analyzer/analyzer.exp (DEFAULT_CXXFLAGS): Remove\n+\t-fdiagnostics-path-format=separate-events.\n+\t* gcc.dg/analyzer/analyzer.exp (DEFAULT_CFLAGS): Likewise.\n+\t* gcc.dg/plugin/diagnostic-path-format-default.c: Rename to...\n+\t* gcc.dg/plugin/diagnostic-path-format-plain.c: ...this.  Remove\n+\tdg-options directive.  Copy remainder of test from\n+\tdiagnostic-path-format-separate-events.c.\n+\t* gcc.dg/plugin/diagnostic-test-paths-2.c: Add\n+\t-fdiagnostics-path-format=inline-events to options.\n+\tFix expected output for location of conditional within \"for\" loop.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Update for\n+\trenaming.\n+\t* gfortran.dg/analyzer/analyzer.exp (DEFAULT_FFLAGS): Remove\n+\t-fdiagnostics-path-format=separate-events.\n+\n+2020-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-sfinae1.C: Avoid ill-formed local extern\n+\t* g++.dg/init/pr42844.C: Add expected error.\n+\t* g++.dg/lookup/extern-redecl1.C: Likewise.\n+\t* g++.dg/lookup/koenig15.C: Avoid ill-formed.\n+\t* g++.dg/lto/pr95677.C: New.\n+\t* g++.dg/other/nested-extern-1.C: Correct expected behabviour.\n+\t* g++.dg/other/nested-extern-2.C: Likewise.\n+\t* g++.dg/other/nested-extern.cc: Split ...\n+\t* g++.dg/other/nested-extern-1.cc: ... here ...\n+\t* g++.dg/other/nested-extern-2.cc: ... here.\n+\t* g++.dg/template/scope5.C: Avoid ill-formed\n+\t* g++.old-deja/g++.law/missed-error2.C: Allow extension.\n+\t* g++.old-deja/g++.pt/crash3.C: Add expected error.\n+\n+2020-10-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/96394\n+\t* gcc.dg/tree-prof/pr96394.c: New test.\n+\n+2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gomp/simd-2.c: New test.\n+\t* gcc.dg/gomp/simd-3.c: New test.\n+\n 2020-10-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97297"}, {"sha": "0a98c8666ab87ad95083df3c5699c14ee3ad3748", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,8 @@\n+2020-10-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (supplement_binding): Rename\n+\tDECL_BUILTIN_P.\n+\n 2020-10-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (libcp1plugin.cc): Drop DECL_ANTICIPATED test."}, {"sha": "4946eead65144fb6fea9e5406cfc39598d90326f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6caec77e3be8e2989f723ac7f522885dded6bcfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6caec77e3be8e2989f723ac7f522885dded6bcfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6caec77e3be8e2989f723ac7f522885dded6bcfc", "patch": "@@ -1,3 +1,20 @@\n+2020-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (__detail::_Mod): Avoid divide by zero.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/call.cc:\n+\tNew test.\n+\n+2020-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (seed_seq(initializer_list<T>)): Rename\n+\tparameter to use reserved name.\n+\t* include/bits/ranges_algo.h (shift_left, shift_right): Rename\n+\ttemplate parameters to use reserved name.\n+\t* libsupc++/exception_ptr.h (exception_ptr): Likewise for\n+\tparameters and local variables.\n+\t* testsuite/17_intro/names.cc: Check \"il\". Do not check \"d\" and\n+\t\"y\" in C++20 mode.\n+\n 2020-10-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90295"}]}