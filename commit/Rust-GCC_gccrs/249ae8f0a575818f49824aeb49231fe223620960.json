{"sha": "249ae8f0a575818f49824aeb49231fe223620960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5YWU4ZjBhNTc1ODE4ZjQ5ODI0YWViNDkyMzFmZTIyMzYyMDk2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-11-28T11:30:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-11-28T11:30:45Z"}, "message": "re PR tree-optimization/37955 (internal compiler error: in vectorizable_store, at tree-vect-transform.c:5447)\n\n2008-11-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37955\n\tPR tree-optimization/37742\n\t* tree-vect-transform.c (vectorizable_store): Remove assert for\n\tcompatible aliases.\n\t(vectorizable_load): Likewise.\n\n\t* gcc.c-torture/compile/pr37955.c: New testcase.\n\t* gcc.c-torture/compile/pr37742-3.c: Likewise.\n\nFrom-SVN: r142257", "tree": {"sha": "68dd930f61412514572441d49c8eb1bc411ee25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68dd930f61412514572441d49c8eb1bc411ee25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/249ae8f0a575818f49824aeb49231fe223620960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249ae8f0a575818f49824aeb49231fe223620960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/249ae8f0a575818f49824aeb49231fe223620960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249ae8f0a575818f49824aeb49231fe223620960/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60d6f5d8bd96638ce23c180b7a0d98de0c724c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d6f5d8bd96638ce23c180b7a0d98de0c724c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d6f5d8bd96638ce23c180b7a0d98de0c724c12"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "615aad2f7c1a2f243a0d262891794aa692c13208", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249ae8f0a575818f49824aeb49231fe223620960/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249ae8f0a575818f49824aeb49231fe223620960/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=249ae8f0a575818f49824aeb49231fe223620960", "patch": "@@ -1,3 +1,11 @@\n+2008-11-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37955\n+\tPR tree-optimization/37742\n+\t* tree-vect-transform.c (vectorizable_store): Remove assert for\n+\tcompatible aliases.\n+\t(vectorizable_load): Likewise.\n+\n 2008-11-27  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (intra_create_variable_infos): Make"}, {"sha": "d02f289d9cacd6dac3b147bcf8c6ede2b183501a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=249ae8f0a575818f49824aeb49231fe223620960", "patch": "@@ -1,3 +1,10 @@\n+2008-11-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37955\n+\tPR tree-optimization/37742\n+\t* gcc.c-torture/compile/pr37955.c: New testcase.\n+\t* gcc.c-torture/compile/pr37742-3.c: Likewise.\n+\n 2008-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/38261"}, {"sha": "541bd42ad5d684a4ce40394ef6a6c34f118656ab", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37742-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c?ref=249ae8f0a575818f49824aeb49231fe223620960", "patch": "@@ -0,0 +1,17 @@\n+void matmul_i4 (int * __restrict dest_y,\n+\t\tconst int * __restrict abase,\n+\t\tconst int * __restrict bbase_y,\n+\t\tint count, int xcount, int ycount, int aystride)\n+{               \n+  int x, y, n;\n+  const int * __restrict abase_n;\n+  int bbase_yn;\n+  for (y = 0; y < ycount; y++)\n+    for (n = 0; n < count; n++) {\n+\tabase_n = abase + n*aystride;\n+\tbbase_yn = bbase_y[n];\n+\tfor (x = 0; x < xcount; x++)\n+\t  dest_y[x] += abase_n[x] * bbase_yn; \n+    }\n+}\n+"}, {"sha": "1ac0246f5ab0c31785df81857b5fda006b79aceb", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37955.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37955.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37955.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37955.c?ref=249ae8f0a575818f49824aeb49231fe223620960", "patch": "@@ -0,0 +1,19 @@\n+typedef struct\n+{\n+  enum { NotConnected = 0 } conn_state;\n+  unsigned int conn_hndl;\n+} AEP_CONNECTION_ENTRY;\n+\n+static AEP_CONNECTION_ENTRY aep_app_conn_table[256];\n+\n+void aep_mod_exp (void)\n+{\n+  int count;\n+\n+  for (count = 0; count < 256; count++)\n+    {\n+      aep_app_conn_table[count].conn_state = NotConnected;\n+      aep_app_conn_table[count].conn_hndl = 0;\n+    }\n+}\n+"}, {"sha": "18c22e7eac7a0133a737162719d380248bae2f0c", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249ae8f0a575818f49824aeb49231fe223620960/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=249ae8f0a575818f49824aeb49231fe223620960", "patch": "@@ -5440,11 +5440,6 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    vec_oprnd = VEC_index (tree, result_chain, i);\n \n \t  data_ref = build_fold_indirect_ref (dataref_ptr);\n-\t  /* If accesses through a pointer to vectype do not alias the original\n-\t     memory reference we have a problem.  This should never happen.  */\n-\t  gcc_assert (get_alias_set (data_ref) == get_alias_set (gimple_assign_lhs (stmt))\n-\t\t      || alias_set_subset_of (get_alias_set (data_ref), \n-\t\t\t\t\t      get_alias_set (gimple_assign_lhs (stmt))));\n \n \t  /* Arguments are ready. Create the new vector stmt.  */\n \t  new_stmt = gimple_build_assign (data_ref, vec_oprnd);\n@@ -6668,11 +6663,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  /* If accesses through a pointer to vectype do not alias the original\n-\t     memory reference we have a problem.  This should never happen.  */\n-\t  gcc_assert (get_alias_set (data_ref) == get_alias_set (gimple_assign_rhs1 (stmt))\n-\t\t      || alias_set_subset_of (get_alias_set (data_ref),\n-\t\t\t\t\t      get_alias_set (gimple_assign_rhs1 (stmt))));\n \t  vec_dest = vect_create_destination_var (scalar_dest, vectype);\n \t  new_stmt = gimple_build_assign (vec_dest, data_ref);\n \t  new_temp = make_ssa_name (vec_dest, new_stmt);"}]}