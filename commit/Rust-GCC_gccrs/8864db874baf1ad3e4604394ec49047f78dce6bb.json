{"sha": "8864db874baf1ad3e4604394ec49047f78dce6bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2NGRiODc0YmFmMWFkM2U0NjA0Mzk0ZWM0OTA0N2Y3OGRjZTZiYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-06T17:12:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-06T17:12:19Z"}, "message": "vshuffle: Use correct mode for mask operand.\n\nFrom-SVN: r179622", "tree": {"sha": "ad1dad19bfc638b95c35eeb1027b7f5e7a4a87b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad1dad19bfc638b95c35eeb1027b7f5e7a4a87b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8864db874baf1ad3e4604394ec49047f78dce6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8864db874baf1ad3e4604394ec49047f78dce6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8864db874baf1ad3e4604394ec49047f78dce6bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8864db874baf1ad3e4604394ec49047f78dce6bb/comments", "author": null, "committer": null, "parents": [{"sha": "92aea285e7062d4f2d76811297e5ea29f40c665d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92aea285e7062d4f2d76811297e5ea29f40c665d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92aea285e7062d4f2d76811297e5ea29f40c665d"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "32e80ea90c672e1d3c8f5cae398b76190bef607d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8864db874baf1ad3e4604394ec49047f78dce6bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8864db874baf1ad3e4604394ec49047f78dce6bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8864db874baf1ad3e4604394ec49047f78dce6bb", "patch": "@@ -1,3 +1,8 @@\n+2001-10-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* optabs.c (expand_vec_shuffle_expr): Use the proper mode for the\n+\tmask operand.  Tidy the code.\n+\n 2011-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-patterns.c (vect_pattern_recog_1): Use"}, {"sha": "aa233d5058a1112b067118584df92eda4f243b7e", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8864db874baf1ad3e4604394ec49047f78dce6bb/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8864db874baf1ad3e4604394ec49047f78dce6bb/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=8864db874baf1ad3e4604394ec49047f78dce6bb", "patch": "@@ -6650,9 +6650,8 @@ expand_vec_shuffle_expr (tree type, tree v0, tree v1, tree mask, rtx target)\n   struct expand_operand ops[4];\n   enum insn_code icode;\n   enum machine_mode mode = TYPE_MODE (type);\n-  rtx rtx_v0, rtx_mask;\n \n-  gcc_assert (expand_vec_shuffle_expr_p (mode, v0, v1, mask));\n+  gcc_checking_assert (expand_vec_shuffle_expr_p (mode, v0, v1, mask));\n \n   if (TREE_CODE (mask) == VECTOR_CST)\n     {\n@@ -6675,24 +6674,23 @@ expand_vec_shuffle_expr (tree type, tree v0, tree v1, tree mask, rtx target)\n       return expand_expr_real_1 (call, target, VOIDmode, EXPAND_NORMAL, NULL);\n     }\n \n-vshuffle:\n+ vshuffle:\n   icode = direct_optab_handler (vshuffle_optab, mode);\n \n   if (icode == CODE_FOR_nothing)\n     return 0;\n \n-  rtx_mask = expand_normal (mask);\n-\n   create_output_operand (&ops[0], target, mode);\n-  create_input_operand (&ops[3], rtx_mask, mode);\n+  create_input_operand (&ops[3], expand_normal (mask),\n+\t\t\tTYPE_MODE (TREE_TYPE (mask)));\n \n   if (operand_equal_p (v0, v1, 0))\n     {\n-      rtx_v0 = expand_normal (v0);\n-      if (!insn_operand_matches(icode, 1, rtx_v0))\n+      rtx rtx_v0 = expand_normal (v0);\n+      if (!insn_operand_matches (icode, 1, rtx_v0))\n         rtx_v0 = force_reg (mode, rtx_v0);\n \n-      gcc_checking_assert(insn_operand_matches(icode, 2, rtx_v0));\n+      gcc_checking_assert (insn_operand_matches (icode, 2, rtx_v0));\n \n       create_fixed_operand (&ops[1], rtx_v0);\n       create_fixed_operand (&ops[2], rtx_v0);"}]}