{"sha": "4103055723a43d6c6da84798e7152030a8675713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwMzA1NTcyM2E0M2Q2YzZkYTg0Nzk4ZTcxNTIwMzBhODY3NTcxMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-18T19:12:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-18T19:12:17Z"}, "message": "mips-ftypes.def: New file.\n\ngcc/\n\t* config/mips/mips-ftypes.def: New file.\n\t* config/mips/mips.c (MIPS_FTYPE_NAME1, MIPS_FTYPE_NAME2)\n\t(MIPS_FTYPE_NAME3, MIPS_FTYPE_NAME4): New macros.\n\t(mips_function_type): Redefine using mips-ftypes.def.\n\t(dsp_bdesc): Use POINTER rather than PTR in the MIPS_*_FTYPE_* names.\n\t(mips_builtin_vector_type): New function.\n\t(MIPS_ATYPE_VOID, MIPS_ATYPE_INT, MIPS_ATYPE_POINTER, MIPS_ATYPE_SI)\n\t(MIPS_ATYPE_USI, MIPS_ATYPE_DI, MIPS_ATYPE_SF, MIPS_ATYPE_DF)\n\t(MIPS_ATYPE_V2SF, MIPS_ATYPE_V2HI, MIPS_ATYPE_V4QI, MIPS_FTYPE_ATYPES1)\n\t(MIPS_FTYPE_ATYPES2, MIPS_FTYPE_ATYPES3, MIPS_FTYPE_ATYPES4): New\n\tmacros.\n\t(mips_build_function_type): New function.\n\t(mips_init_builtins): Use it to create types lazily.\n\nFrom-SVN: r129455", "tree": {"sha": "1292997078bd4bce66e28b629eb55bd2501e1371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1292997078bd4bce66e28b629eb55bd2501e1371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4103055723a43d6c6da84798e7152030a8675713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4103055723a43d6c6da84798e7152030a8675713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4103055723a43d6c6da84798e7152030a8675713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4103055723a43d6c6da84798e7152030a8675713/comments", "author": null, "committer": null, "parents": [{"sha": "07045266050a099eba38651b6c56730b9674e3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07045266050a099eba38651b6c56730b9674e3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07045266050a099eba38651b6c56730b9674e3be"}], "stats": {"total": 479, "additions": 185, "deletions": 294}, "files": [{"sha": "b76c4cef46bcb37bb4b9638310a5a5790949d650", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4103055723a43d6c6da84798e7152030a8675713/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4103055723a43d6c6da84798e7152030a8675713/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4103055723a43d6c6da84798e7152030a8675713", "patch": "@@ -1,3 +1,19 @@\n+2007-10-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips-ftypes.def: New file.\n+\t* config/mips/mips.c (MIPS_FTYPE_NAME1, MIPS_FTYPE_NAME2)\n+\t(MIPS_FTYPE_NAME3, MIPS_FTYPE_NAME4): New macros.\n+\t(mips_function_type): Redefine using mips-ftypes.def.\n+\t(dsp_bdesc): Use POINTER rather than PTR in the MIPS_*_FTYPE_* names.\n+\t(mips_builtin_vector_type): New function.\n+\t(MIPS_ATYPE_VOID, MIPS_ATYPE_INT, MIPS_ATYPE_POINTER, MIPS_ATYPE_SI)\n+\t(MIPS_ATYPE_USI, MIPS_ATYPE_DI, MIPS_ATYPE_SF, MIPS_ATYPE_DF)\n+\t(MIPS_ATYPE_V2SF, MIPS_ATYPE_V2HI, MIPS_ATYPE_V4QI, MIPS_FTYPE_ATYPES1)\n+\t(MIPS_FTYPE_ATYPES2, MIPS_FTYPE_ATYPES3, MIPS_FTYPE_ATYPES4): New\n+\tmacros.\n+\t(mips_build_function_type): New function.\n+\t(mips_init_builtins): Use it to create types lazily.\n+\n 2007-10-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.h (set_volatile): Delete."}, {"sha": "9d46f8c242e9bbab57d85153c4681530a35a81c5", "filename": "gcc/config/mips/mips-ftypes.def", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4103055723a43d6c6da84798e7152030a8675713/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4103055723a43d6c6da84798e7152030a8675713/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def?ref=4103055723a43d6c6da84798e7152030a8675713", "patch": "@@ -0,0 +1,92 @@\n+/* Definitions of prototypes for MIPS built-in functions.  -*- C -*-\n+   Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Invoke DEF_MIPS_FTYPE (NARGS, LIST) for each prototype used by\n+   MIPS built-in functions, where:\n+\n+      NARGS is the number of arguments.\n+      LIST contains the return-type code followed by the codes for each\n+        argument type.\n+\n+   Argument- and return-type codes are either modes or one of the following:\n+\n+      VOID for void_type_node\n+      INT for integer_type_node\n+      POINTER for ptr_type_node\n+\n+   (we don't use PTR because that's a ANSI-compatibillity macro).\n+\n+   Please keep this list lexicographically sorted by the LIST argument.  */\n+DEF_MIPS_FTYPE (1, (DF, DF))\n+DEF_MIPS_FTYPE (2, (DF, DF, DF))\n+\n+DEF_MIPS_FTYPE (2, (DI, DI, DI))\n+DEF_MIPS_FTYPE (2, (DI, DI, SI))\n+DEF_MIPS_FTYPE (3, (DI, DI, SI, SI))\n+DEF_MIPS_FTYPE (3, (DI, DI, USI, USI))\n+DEF_MIPS_FTYPE (3, (DI, DI, V2HI, V2HI))\n+DEF_MIPS_FTYPE (3, (DI, DI, V4QI, V4QI))\n+DEF_MIPS_FTYPE (2, (DI, SI, SI))\n+DEF_MIPS_FTYPE (2, (DI, USI, USI))\n+\n+DEF_MIPS_FTYPE (2, (INT, DF, DF))\n+DEF_MIPS_FTYPE (2, (INT, SF, SF))\n+DEF_MIPS_FTYPE (2, (INT, V2SF, V2SF))\n+DEF_MIPS_FTYPE (4, (INT, V2SF, V2SF, V2SF, V2SF))\n+\n+DEF_MIPS_FTYPE (2, (SI, DI, SI))\n+DEF_MIPS_FTYPE (2, (SI, POINTER, SI))\n+DEF_MIPS_FTYPE (1, (SI, SI))\n+DEF_MIPS_FTYPE (2, (SI, SI, SI))\n+DEF_MIPS_FTYPE (3, (SI, SI, SI, SI))\n+DEF_MIPS_FTYPE (1, (SI, V2HI))\n+DEF_MIPS_FTYPE (2, (SI, V2HI, V2HI))\n+DEF_MIPS_FTYPE (1, (SI, V4QI))\n+DEF_MIPS_FTYPE (2, (SI, V4QI, V4QI))\n+DEF_MIPS_FTYPE (1, (SI, VOID))\n+\n+DEF_MIPS_FTYPE (1, (SF, SF))\n+DEF_MIPS_FTYPE (2, (SF, SF, SF))\n+DEF_MIPS_FTYPE (1, (SF, V2SF))\n+\n+DEF_MIPS_FTYPE (1, (V2HI, SI))\n+DEF_MIPS_FTYPE (2, (V2HI, SI, SI))\n+DEF_MIPS_FTYPE (3, (V2HI, SI, SI, SI))\n+DEF_MIPS_FTYPE (1, (V2HI, V2HI))\n+DEF_MIPS_FTYPE (2, (V2HI, V2HI, SI))\n+DEF_MIPS_FTYPE (2, (V2HI, V2HI, V2HI))\n+DEF_MIPS_FTYPE (1, (V2HI, V4QI))\n+DEF_MIPS_FTYPE (2, (V2HI, V4QI, V2HI))\n+\n+DEF_MIPS_FTYPE (2, (V2SF, SF, SF))\n+DEF_MIPS_FTYPE (1, (V2SF, V2SF))\n+DEF_MIPS_FTYPE (2, (V2SF, V2SF, V2SF))\n+DEF_MIPS_FTYPE (3, (V2SF, V2SF, V2SF, INT))\n+DEF_MIPS_FTYPE (4, (V2SF, V2SF, V2SF, V2SF, V2SF))\n+\n+DEF_MIPS_FTYPE (1, (V4QI, SI))\n+DEF_MIPS_FTYPE (2, (V4QI, V2HI, V2HI))\n+DEF_MIPS_FTYPE (1, (V4QI, V4QI))\n+DEF_MIPS_FTYPE (2, (V4QI, V4QI, SI))\n+DEF_MIPS_FTYPE (2, (V4QI, V4QI, V4QI))\n+\n+DEF_MIPS_FTYPE (2, (VOID, SI, SI))\n+DEF_MIPS_FTYPE (2, (VOID, V2HI, V2HI))\n+DEF_MIPS_FTYPE (2, (VOID, V4QI, V4QI))"}, {"sha": "77bd08ebcf44c80c03870e012756d9551aff4768", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 77, "deletions": 294, "changes": 371, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4103055723a43d6c6da84798e7152030a8675713/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4103055723a43d6c6da84798e7152030a8675713/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4103055723a43d6c6da84798e7152030a8675713", "patch": "@@ -147,62 +147,18 @@ enum mips_address_type {\n   ADDRESS_SYMBOLIC\n };\n \n+/* Macros to create an enumeration identifier for a function prototype.  */\n+#define MIPS_FTYPE_NAME1(A, B) MIPS_##A##_FTYPE_##B\n+#define MIPS_FTYPE_NAME2(A, B, C) MIPS_##A##_FTYPE_##B##_##C\n+#define MIPS_FTYPE_NAME3(A, B, C, D) MIPS_##A##_FTYPE_##B##_##C##_##D\n+#define MIPS_FTYPE_NAME4(A, B, C, D, E) MIPS_##A##_FTYPE_##B##_##C##_##D##_##E\n+\n /* Classifies the prototype of a builtin function.  */\n enum mips_function_type\n {\n-  MIPS_V2SF_FTYPE_V2SF,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF_INT,\n-  MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-  MIPS_V2SF_FTYPE_SF_SF,\n-  MIPS_INT_FTYPE_V2SF_V2SF,\n-  MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF,\n-  MIPS_INT_FTYPE_SF_SF,\n-  MIPS_INT_FTYPE_DF_DF,\n-  MIPS_SF_FTYPE_V2SF,\n-  MIPS_SF_FTYPE_SF,\n-  MIPS_SF_FTYPE_SF_SF,\n-  MIPS_DF_FTYPE_DF,\n-  MIPS_DF_FTYPE_DF_DF,\n-\n-  /* For MIPS DSP ASE  */\n-  MIPS_DI_FTYPE_DI_SI,\n-  MIPS_DI_FTYPE_DI_SI_SI,\n-  MIPS_DI_FTYPE_DI_V2HI_V2HI,\n-  MIPS_DI_FTYPE_DI_V4QI_V4QI,\n-  MIPS_SI_FTYPE_DI_SI,\n-  MIPS_SI_FTYPE_PTR_SI,\n-  MIPS_SI_FTYPE_SI,\n-  MIPS_SI_FTYPE_SI_SI,\n-  MIPS_SI_FTYPE_V2HI,\n-  MIPS_SI_FTYPE_V2HI_V2HI,\n-  MIPS_SI_FTYPE_V4QI,\n-  MIPS_SI_FTYPE_V4QI_V4QI,\n-  MIPS_SI_FTYPE_VOID,\n-  MIPS_V2HI_FTYPE_SI,\n-  MIPS_V2HI_FTYPE_SI_SI,\n-  MIPS_V2HI_FTYPE_V2HI,\n-  MIPS_V2HI_FTYPE_V2HI_SI,\n-  MIPS_V2HI_FTYPE_V2HI_V2HI,\n-  MIPS_V2HI_FTYPE_V4QI,\n-  MIPS_V2HI_FTYPE_V4QI_V2HI,\n-  MIPS_V4QI_FTYPE_SI,\n-  MIPS_V4QI_FTYPE_V2HI_V2HI,\n-  MIPS_V4QI_FTYPE_V4QI_SI,\n-  MIPS_V4QI_FTYPE_V4QI_V4QI,\n-  MIPS_VOID_FTYPE_SI_SI,\n-  MIPS_VOID_FTYPE_V2HI_V2HI,\n-  MIPS_VOID_FTYPE_V4QI_V4QI,\n-\n-  /* For MIPS DSP REV 2 ASE.  */\n-  MIPS_V4QI_FTYPE_V4QI,\n-  MIPS_SI_FTYPE_SI_SI_SI,\n-  MIPS_DI_FTYPE_DI_USI_USI,\n-  MIPS_DI_FTYPE_SI_SI,\n-  MIPS_DI_FTYPE_USI_USI,\n-  MIPS_V2HI_FTYPE_SI_SI_SI,\n-\n-  /* The last type.  */\n+#define DEF_MIPS_FTYPE(NARGS, LIST) MIPS_FTYPE_NAME##NARGS LIST,\n+#include \"config/mips/mips-ftypes.def\"\n+#undef DEF_MIPS_FTYPE\n   MIPS_MAX_FTYPE_MAX\n };\n \n@@ -10174,9 +10130,9 @@ static const struct builtin_description dsp_bdesc[] =\n   DIRECT_BUILTIN (packrl_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSP),\n   DIRECT_NO_TARGET_BUILTIN (wrdsp, MIPS_VOID_FTYPE_SI_SI, MASK_DSP),\n   DIRECT_BUILTIN (rddsp, MIPS_SI_FTYPE_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lbux, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lhx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lwx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lbux, MIPS_SI_FTYPE_POINTER_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lhx, MIPS_SI_FTYPE_POINTER_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lwx, MIPS_SI_FTYPE_POINTER_SI, MASK_DSP),\n   BPOSGE_BUILTIN (32, MASK_DSP),\n \n   /* The following are for the MIPS DSP ASE REV 2.  */\n@@ -10287,258 +10243,84 @@ static const struct bdesc_map bdesc_arrays[] =\n     MASK_64BIT }\n };\n \n-/* Init builtin functions.  This is called from TARGET_INIT_BUILTIN.  */\n+/* MODE is a vector mode whose elements have type TYPE.  Return the type\n+   of the vector itself.  */\n \n-static void\n-mips_init_builtins (void)\n+static tree\n+mips_builtin_vector_type (tree type, enum machine_mode mode)\n {\n-  const struct builtin_description *d;\n-  const struct bdesc_map *m;\n-  tree types[(int) MIPS_MAX_FTYPE_MAX];\n-  tree V2SF_type_node;\n-  tree V2HI_type_node;\n-  tree V4QI_type_node;\n-  unsigned int offset;\n+  static tree types[(int) MAX_MACHINE_MODE];\n \n-  /* We have only builtins for -mpaired-single, -mips3d and -mdsp.  */\n-  if (!TARGET_PAIRED_SINGLE_FLOAT && !TARGET_DSP)\n-    return;\n+  if (types[(int) mode] == NULL_TREE)\n+    types[(int) mode] = build_vector_type_for_mode (type, mode);\n+  return types[(int) mode];\n+}\n \n-  if (TARGET_PAIRED_SINGLE_FLOAT)\n-    {\n-      V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n+/* Source-level argument types.  */\n+#define MIPS_ATYPE_VOID void_type_node\n+#define MIPS_ATYPE_INT integer_type_node\n+#define MIPS_ATYPE_POINTER ptr_type_node\n \n-      types[MIPS_V2SF_FTYPE_V2SF]\n-\t= build_function_type_list (V2SF_type_node, V2SF_type_node, NULL_TREE);\n+/* Standard mode-based argument types.  */\n+#define MIPS_ATYPE_SI intSI_type_node\n+#define MIPS_ATYPE_USI unsigned_intSI_type_node\n+#define MIPS_ATYPE_DI intDI_type_node\n+#define MIPS_ATYPE_SF float_type_node\n+#define MIPS_ATYPE_DF double_type_node\n \n-      types[MIPS_V2SF_FTYPE_V2SF_V2SF]\n-\t= build_function_type_list (V2SF_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node, NULL_TREE);\n+/* Vector argument types.  */\n+#define MIPS_ATYPE_V2SF mips_builtin_vector_type (float_type_node, V2SFmode)\n+#define MIPS_ATYPE_V2HI mips_builtin_vector_type (intHI_type_node, V2HImode)\n+#define MIPS_ATYPE_V4QI mips_builtin_vector_type (intQI_type_node, V4QImode)\n \n-      types[MIPS_V2SF_FTYPE_V2SF_V2SF_INT]\n-\t= build_function_type_list (V2SF_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node,\n-\t\t\t\t    integer_type_node, NULL_TREE);\n+/* MIPS_FTYPE_ATYPESN takes N MIPS_FTYPES-like type codes and lists\n+   their associated MIPS_ATYPEs.  */\n+#define MIPS_FTYPE_ATYPES1(A, B) \\\n+  MIPS_ATYPE_##A, MIPS_ATYPE_##B\n \n-      types[MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF]\n-\t= build_function_type_list (V2SF_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node, NULL_TREE);\n+#define MIPS_FTYPE_ATYPES2(A, B, C) \\\n+  MIPS_ATYPE_##A, MIPS_ATYPE_##B, MIPS_ATYPE_##C\n \n-      types[MIPS_V2SF_FTYPE_SF_SF]\n-\t= build_function_type_list (V2SF_type_node,\n-\t\t\t\t    float_type_node, float_type_node, NULL_TREE);\n+#define MIPS_FTYPE_ATYPES3(A, B, C, D) \\\n+  MIPS_ATYPE_##A, MIPS_ATYPE_##B, MIPS_ATYPE_##C, MIPS_ATYPE_##D\n \n-      types[MIPS_INT_FTYPE_V2SF_V2SF]\n-\t= build_function_type_list (integer_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node, NULL_TREE);\n+#define MIPS_FTYPE_ATYPES4(A, B, C, D, E) \\\n+  MIPS_ATYPE_##A, MIPS_ATYPE_##B, MIPS_ATYPE_##C, MIPS_ATYPE_##D, \\\n+  MIPS_ATYPE_##E\n \n-      types[MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF]\n-\t= build_function_type_list (integer_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node,\n-\t\t\t\t    V2SF_type_node, V2SF_type_node, NULL_TREE);\n+/* Return the function type associated with function prototype TYPE.  */\n \n-      types[MIPS_INT_FTYPE_SF_SF]\n-\t= build_function_type_list (integer_type_node,\n-\t\t\t\t    float_type_node, float_type_node, NULL_TREE);\n+static tree\n+mips_build_function_type (enum mips_function_type type)\n+{\n+  static tree types[(int) MIPS_MAX_FTYPE_MAX];\n \n-      types[MIPS_INT_FTYPE_DF_DF]\n-\t= build_function_type_list (integer_type_node,\n-\t\t\t\t    double_type_node, double_type_node, NULL_TREE);\n+  if (types[(int) type] == NULL_TREE)\n+    switch (type)\n+      {\n+#define DEF_MIPS_FTYPE(NUM, ARGS)\t\t\t\t\t\\\n+  case MIPS_FTYPE_NAME##NUM ARGS:\t\t\t\t\t\\\n+    types[(int) type]\t\t\t\t\t\t\t\\\n+      = build_function_type_list (MIPS_FTYPE_ATYPES##NUM ARGS,\t\t\\\n+\t\t\t\t  NULL_TREE);\t\t\t\t\\\n+    break;\n+#include \"config/mips/mips-ftypes.def\"\n+#undef DEF_MIPS_FTYPE\n+      default:\n+\tgcc_unreachable ();\n+      }\n \n-      types[MIPS_SF_FTYPE_V2SF]\n-\t= build_function_type_list (float_type_node, V2SF_type_node, NULL_TREE);\n-\n-      types[MIPS_SF_FTYPE_SF]\n-\t= build_function_type_list (float_type_node,\n-\t\t\t\t    float_type_node, NULL_TREE);\n-\n-      types[MIPS_SF_FTYPE_SF_SF]\n-\t= build_function_type_list (float_type_node,\n-\t\t\t\t    float_type_node, float_type_node, NULL_TREE);\n-\n-      types[MIPS_DF_FTYPE_DF]\n-\t= build_function_type_list (double_type_node,\n-\t\t\t\t    double_type_node, NULL_TREE);\n-\n-      types[MIPS_DF_FTYPE_DF_DF]\n-\t= build_function_type_list (double_type_node,\n-\t\t\t\t    double_type_node, double_type_node, NULL_TREE);\n-    }\n-\n-  if (TARGET_DSP)\n-    {\n-      V2HI_type_node = build_vector_type_for_mode (intHI_type_node, V2HImode);\n-      V4QI_type_node = build_vector_type_for_mode (intQI_type_node, V4QImode);\n-\n-      types[MIPS_V2HI_FTYPE_V2HI_V2HI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    V2HI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_SI_SI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    intSI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V4QI_FTYPE_V4QI_V4QI]\n-\t= build_function_type_list (V4QI_type_node,\n-\t\t\t\t    V4QI_type_node, V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_V4QI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_V2HI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_SI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V4QI_FTYPE_V2HI_V2HI]\n-\t= build_function_type_list (V4QI_type_node,\n-\t\t\t\t    V2HI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_SI_SI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    intSI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_V2HI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_V4QI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V4QI_FTYPE_V4QI_SI]\n-\t= build_function_type_list (V4QI_type_node,\n-\t\t\t\t    V4QI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_V2HI_SI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    V2HI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_V4QI_V2HI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    V4QI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_V2HI_V2HI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    V2HI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_DI_FTYPE_DI_V4QI_V4QI]\n-\t= build_function_type_list (intDI_type_node,\n-\t\t\t\t    intDI_type_node, V4QI_type_node, V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_DI_FTYPE_DI_V2HI_V2HI]\n-\t= build_function_type_list (intDI_type_node,\n-\t\t\t\t    intDI_type_node, V2HI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_DI_FTYPE_DI_SI_SI]\n-\t= build_function_type_list (intDI_type_node,\n-\t\t\t\t    intDI_type_node, intSI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V4QI_FTYPE_SI]\n-\t= build_function_type_list (V4QI_type_node,\n-\t\t\t\t    intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_V2HI_FTYPE_SI]\n-\t= build_function_type_list (V2HI_type_node,\n-\t\t\t\t    intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_VOID_FTYPE_V4QI_V4QI]\n-\t= build_function_type_list (void_type_node,\n-\t\t\t\t    V4QI_type_node, V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_V4QI_V4QI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    V4QI_type_node, V4QI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_VOID_FTYPE_V2HI_V2HI]\n-\t= build_function_type_list (void_type_node,\n-\t\t\t\t    V2HI_type_node, V2HI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_DI_SI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    intDI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_DI_FTYPE_DI_SI]\n-\t= build_function_type_list (intDI_type_node,\n-\t\t\t\t    intDI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_VOID_FTYPE_SI_SI]\n-\t= build_function_type_list (void_type_node,\n-\t\t\t\t    intSI_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_PTR_SI]\n-\t= build_function_type_list (intSI_type_node,\n-\t\t\t\t    ptr_type_node, intSI_type_node,\n-\t\t\t\t    NULL_TREE);\n-\n-      types[MIPS_SI_FTYPE_VOID]\n-\t= build_function_type (intSI_type_node, void_list_node);\n-\n-      if (TARGET_DSPR2)\n-\t{\n-\t  types[MIPS_V4QI_FTYPE_V4QI]\n-\t    = build_function_type_list (V4QI_type_node,\n-\t\t\t\t\tV4QI_type_node,\n-\t\t\t\t\tNULL_TREE);\n-\n-\t  types[MIPS_SI_FTYPE_SI_SI_SI]\n-\t    = build_function_type_list (intSI_type_node,\n-\t\t\t\t\tintSI_type_node, intSI_type_node,\n-\t\t\t\t\tintSI_type_node, NULL_TREE);\n-\n-\t  types[MIPS_DI_FTYPE_DI_USI_USI]\n-\t    = build_function_type_list (intDI_type_node,\n-\t\t\t\t\tintDI_type_node,\n-\t\t\t\t\tunsigned_intSI_type_node,\n-\t\t\t\t\tunsigned_intSI_type_node, NULL_TREE);\n-\n-\t  types[MIPS_DI_FTYPE_SI_SI]\n-\t    = build_function_type_list (intDI_type_node,\n-\t\t\t\t\tintSI_type_node, intSI_type_node,\n-\t\t\t\t\tNULL_TREE);\n-\n-\t  types[MIPS_DI_FTYPE_USI_USI]\n-\t    = build_function_type_list (intDI_type_node,\n-\t\t\t\t\tunsigned_intSI_type_node,\n-\t\t\t\t\tunsigned_intSI_type_node, NULL_TREE);\n-\n-\t  types[MIPS_V2HI_FTYPE_SI_SI_SI]\n-\t    = build_function_type_list (V2HI_type_node,\n-\t\t\t\t\tintSI_type_node, intSI_type_node,\n-\t\t\t\t\tintSI_type_node, NULL_TREE);\n+  return types[(int) type];\n+}\n \n-\t}\n-    }\n+/* Init builtin functions.  This is called from TARGET_INIT_BUILTIN.  */\n+\n+static void\n+mips_init_builtins (void)\n+{\n+  const struct builtin_description *d;\n+  const struct bdesc_map *m;\n+  unsigned int offset;\n \n   /* Iterate through all of the bdesc arrays, initializing all of the\n      builtin functions.  */\n@@ -10550,7 +10332,8 @@ mips_init_builtins (void)\n \t  && (m->unsupported_target_flags & target_flags) == 0)\n \tfor (d = m->bdesc; d < &m->bdesc[m->size]; d++)\n \t  if ((d->target_flags & target_flags) == d->target_flags)\n-\t    add_builtin_function (d->name, types[d->function_type],\n+\t    add_builtin_function (d->name,\n+\t\t\t\t  mips_build_function_type (d->function_type),\n \t\t\t\t  d - m->bdesc + offset,\n \t\t\t\t  BUILT_IN_MD, NULL, NULL);\n       offset += m->size;"}]}