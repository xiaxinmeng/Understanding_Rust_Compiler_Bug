{"sha": "bf7c85c928d23b624c4c55ddc35e18d900e6527c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3Yzg1YzkyOGQyM2I2MjRjNGM1NWRkYzM1ZTE4ZDkwMGU2NTI3Yw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-03-29T16:23:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-29T16:23:06Z"}, "message": "sem_util.ads: Minor reformatting\n\n2005-03-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads: Minor reformatting\n\t* gnat_rm.texi: Minor editing.\n\nFrom-SVN: r97190", "tree": {"sha": "061c108c0f00cf6c07770f80a3662b894d4cd2b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/061c108c0f00cf6c07770f80a3662b894d4cd2b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7c85c928d23b624c4c55ddc35e18d900e6527c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7c85c928d23b624c4c55ddc35e18d900e6527c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7c85c928d23b624c4c55ddc35e18d900e6527c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7c85c928d23b624c4c55ddc35e18d900e6527c/comments", "author": null, "committer": null, "parents": [{"sha": "74a20253e257ffdaf5ef2c8a0dca20059dfc2901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a20253e257ffdaf5ef2c8a0dca20059dfc2901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a20253e257ffdaf5ef2c8a0dca20059dfc2901"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "572be84140f552064f9cdc120e6128d08ea7db1d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c85c928d23b624c4c55ddc35e18d900e6527c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c85c928d23b624c4c55ddc35e18d900e6527c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=bf7c85c928d23b624c4c55ddc35e18d900e6527c", "patch": "@@ -8,7 +8,7 @@\n @c                                                                            o\n @c                              G N A T _ RM                                  o\n @c                                                                            o\n-@c              Copyright (C) 1995-2004 Free Software Foundation              o\n+@c              Copyright (C) 1995-2005 Free Software Foundation              o\n @c                                                                            o\n @c                                                                            o\n @c  GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).    o\n@@ -5156,24 +5156,18 @@ representation item for a given entity if each non-static expression in\n the representation item is a name that statically denotes a constant\n declared before the entity.\n @end cartouche\n-Followed.  GNAT does not support non-static expressions in representation\n-clauses unless they are constants declared before the entity.  For\n-example:\n+Followed.  In fact, GNAT goes beyond the recommended level of support\n+by allowing nonstatic expressions in some representation clauses even\n+without the need to declare constants initialized with the values of\n+such expressions.\n+For example:\n \n @smallexample @c ada\n-X : Some_Type;\n-for X'Address use To_address (16#2000#);\n+  X : Integer;\n+  Y : Float;\n+  for Y'Address use X'Address;>>\n @end smallexample\n \n-@noindent\n-will be rejected, since the To_Address expression is non-static.  Instead\n-write:\n-\n-@smallexample @c ada\n-X_Address : constant Address : = To_Address (16#2000#);\n-X         : Some_Type;\n-for X'Address use X_Address;\n-@end smallexample\n \n @sp 1\n @cartouche"}, {"sha": "05df20c68d352906ac59511d67688c251f6b6dd2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c85c928d23b624c4c55ddc35e18d900e6527c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c85c928d23b624c4c55ddc35e18d900e6527c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=bf7c85c928d23b624c4c55ddc35e18d900e6527c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -391,7 +391,7 @@ package Sem_Util is\n    --  to check if '=' has to be expanded into a bunch component comparaisons.\n \n    function In_Instance return Boolean;\n-   --  Returns True if the current scope is within a generic instance.\n+   --  Returns True if the current scope is within a generic instance\n \n    function In_Instance_Body return Boolean;\n    --  Returns True if current scope is within the body of an instance, where\n@@ -436,7 +436,7 @@ package Sem_Util is\n    --  synthesized attribute.\n \n    function Is_Actual_Parameter (N : Node_Id) return Boolean;\n-   --  Determines if N is an actual parameter in a subprogram call.\n+   --  Determines if N is an actual parameter in a subprogram call\n \n    function Is_Aliased_View (Obj : Node_Id) return Boolean;\n    --  Determine if Obj is an aliased view, i.e. the name of an\n@@ -542,7 +542,7 @@ package Sem_Util is\n    --  Return True if E is a remote access-to-class-wide-limited_private type\n \n    function Is_Remote_Access_To_Subprogram_Type (E : Entity_Id) return Boolean;\n-   --  Return True if E is a remote access to subprogram type.\n+   --  Return True if E is a remote access to subprogram type\n \n    function Is_Remote_Call (N : Node_Id) return Boolean;\n    --  Return True if N denotes a potentially remote call\n@@ -642,7 +642,7 @@ package Sem_Util is\n    --  the call order, so this does not correspond to simply taking the\n    --  next entry of the Parameter_Associations list. The argument is an\n    --  actual previously returned by a call to First_Actual or Next_Actual.\n-   --  Note tha the result produced is always an expression, not a parameter\n+   --  Note that the result produced is always an expression, not a parameter\n    --  assciation node, even if named notation was used.\n \n    procedure Normalize_Actuals\n@@ -783,15 +783,14 @@ package Sem_Util is\n    --  Set the flag Is_Transient of the current scope\n \n    procedure Set_Size_Info (T1, T2 : Entity_Id);\n-   --  Copies the Esize field and Has_Biased_Representation flag from\n-   --  (sub)type entity T2 to (sub)type entity T1. Also copies the\n-   --  Is_Unsigned_Type flag in the fixed-point and discrete cases,\n-   --  and also copies the alignment value from T2 to T1. It does NOT\n-   --  copy the RM_Size field, which must be separately set if this\n-   --  is required to be copied also.\n+   --  Copies the Esize field and Has_Biased_Representation flag from sub(type)\n+   --  entity T2 to (sub)type entity T1. Also copies the Is_Unsigned_Type flag\n+   --  in the fixed-point and discrete cases, and also copies the alignment\n+   --  value from T2 to T1. It does NOT copy the RM_Size field, which must be\n+   --  separately set if this is required to be copied also.\n \n    function Scope_Is_Transient  return Boolean;\n-   --  True if the current scope is transient.\n+   --  True if the current scope is transient\n \n    function Static_Integer (N : Node_Id) return Uint;\n    --  This function analyzes the given expression node and then resolves it\n@@ -804,10 +803,10 @@ package Sem_Util is\n    --  E1 and E2 refer to different objects\n \n    function Subprogram_Access_Level (Subp : Entity_Id) return Uint;\n-   --  Return the accessibility level of the view denoted by Subp.\n+   --  Return the accessibility level of the view denoted by Subp\n \n    procedure Trace_Scope (N : Node_Id; E : Entity_Id; Msg : String);\n-   --  Print debugging information on entry to each unit being analyzed.\n+   --  Print debugging information on entry to each unit being analyzed\n \n    procedure Transfer_Entities (From : Entity_Id; To : Entity_Id);\n    --  Move a list of entities from one scope to another, and recompute\n@@ -817,14 +816,14 @@ package Sem_Util is\n    --  Return the accessibility level of Typ\n \n    function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id;\n-   --  Unit_Id is the simple name of a program unit, this function returns\n-   --  the corresponding xxx_Declaration node for the entity. Also applies\n-   --  to the body entities for subprograms, tasks and protected units, in\n-   --  which case it returns the subprogram, task or protected body node\n-   --  for it. The unit may be a child unit with any number of ancestors.\n+   --  Unit_Id is the simple name of a program unit, this function returns the\n+   --  corresponding xxx_Declaration node for the entity. Also applies to the\n+   --  body entities for subprograms, tasks and protected units, in which case\n+   --  it returns the subprogram, task or protected body node for it. The unit\n+   --  may be a child unit with any number of ancestors.\n \n    function Universal_Interpretation (Opnd : Node_Id) return Entity_Id;\n-   --  Yields universal_Integer or Universal_Real if this is a candidate.\n+   --  Yields universal_Integer or Universal_Real if this is a candidate\n \n    function Within_Init_Proc return Boolean;\n    --  Determines if Current_Scope is within an init proc"}]}