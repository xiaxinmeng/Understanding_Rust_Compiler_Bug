{"sha": "8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzYmY0OGEzMWU0ZWIyMzhhZThiZDYxYjlmZjlkNGM2YWJiOTMyZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-19T17:25:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:10:57Z"}, "message": "[Ada] Add another ad-hoc case to the Has_Private_View mechanism\n\n2020-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Copy_Generic_Node): Add special handling for a\n\tconversion between access types.", "tree": {"sha": "d594a64d26c0705f48665b3682223e539f40de80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d594a64d26c0705f48665b3682223e539f40de80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a91f77d3ac51d7b1aa07c00929c64a91b08175f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a91f77d3ac51d7b1aa07c00929c64a91b08175f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a91f77d3ac51d7b1aa07c00929c64a91b08175f"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "49a8720b4823f9a0549f48348a98e5208a64e694", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8b3bf48a31e4eb238ae8bd61b9ff9d4c6abb932e", "patch": "@@ -7900,6 +7900,37 @@ package body Sem_Ch12 is\n                                  Sloc (N)));\n                            end if;\n                         end;\n+\n+                     --  Here is a similar case, for the Designated_Type of an\n+                     --  access type that is present as target type in a type\n+                     --  conversion from another access type. In this case, if\n+                     --  the base types of the designated types are different\n+                     --  and the conversion was accepted during the semantic\n+                     --  analysis of the generic, this means that the target\n+                     --  type cannot have been private (see Valid_Conversion).\n+\n+                     elsif Nkind (Assoc) = N_Identifier\n+                       and then Nkind (Parent (Assoc)) = N_Type_Conversion\n+                       and then Subtype_Mark (Parent (Assoc)) = Assoc\n+                       and then Is_Access_Type (Etype (Assoc))\n+                       and then Present (Etype (Expression (Parent (Assoc))))\n+                       and then\n+                         Is_Access_Type (Etype (Expression (Parent (Assoc))))\n+                     then\n+                        declare\n+                           Targ_Desig : constant Entity_Id :=\n+                             Designated_Type (Etype (Assoc));\n+                           Expr_Desig : constant Entity_Id :=\n+                             Designated_Type\n+                               (Etype (Expression (Parent (Assoc))));\n+                        begin\n+                           if Base_Type (Targ_Desig) /= Base_Type (Expr_Desig)\n+                             and then Is_Private_Type (Targ_Desig)\n+                           then\n+                              Check_Private_View\n+                                (New_Occurrence_Of (Targ_Desig, Sloc (N)));\n+                           end if;\n+                        end;\n                      end if;\n \n                   --  The node is a reference to a global type and acts as the"}]}