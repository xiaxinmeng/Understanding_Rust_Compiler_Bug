{"sha": "6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwZDE4ZGNiMWIyZTM5ZDdhYWFhN2FjMmM2YTE5ZGQ3N2Q4YTUzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T13:09:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T13:09:13Z"}, "message": "[multiple changes]\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* a-chtgop.adb (Adjust): Zero the tampering counts on assignment,\n\tas is done for the other containers.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* ghost.adb (In_Subprogram_Body_Profile): New routine.\n\t(Is_OK_Declaration): Treat an unanalyzed expression\n\tfunction as an OK context.  Treat a reference to a Ghost entity\n\tas OK when it appears within the profile of a subprogram body.\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* errout.ads: Document the fact that informational messages\n\tdon't have to be warnings.\n\t* errout.adb (Error_Msg_Internal): In statistics counts, deal\n\tcorrectly with informational messages that are not warnings.\n\t(Error_Msg_NEL): Remove useless 'if' aroung Set_Posted, because\n\tSet_Posted already checks for errors and ignores others.\n\t* erroutc.adb (Prescan_Message): Set Is_Serious_Error to False\n\tif Is_Info_Msg; the previous code was assuming that Is_Info_Msg\n\timplies Is_Warning_Msg.\n\t* errutil.adb (Error_Msg): In statistics counts, deal correctly\n\twith informational messages that are not warnings.\n\nFrom-SVN: r235500", "tree": {"sha": "b5206ef9946339c8dbec6c8e9e033f1bbd9cabe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5206ef9946339c8dbec6c8e9e033f1bbd9cabe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/comments", "author": null, "committer": null, "parents": [{"sha": "680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b"}], "stats": {"total": 141, "additions": 107, "deletions": 34}, "files": [{"sha": "1e3b0450d7e96f2761d898acd5b9b4dd64163294", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -1,3 +1,29 @@\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* a-chtgop.adb (Adjust): Zero the tampering counts on assignment,\n+\tas is done for the other containers.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* ghost.adb (In_Subprogram_Body_Profile): New routine.\n+\t(Is_OK_Declaration): Treat an unanalyzed expression\n+\tfunction as an OK context.  Treat a reference to a Ghost entity\n+\tas OK when it appears within the profile of a subprogram body.\n+\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.ads: Document the fact that informational messages\n+\tdon't have to be warnings.\n+\t* errout.adb (Error_Msg_Internal): In statistics counts, deal\n+\tcorrectly with informational messages that are not warnings.\n+\t(Error_Msg_NEL): Remove useless 'if' aroung Set_Posted, because\n+\tSet_Posted already checks for errors and ignores others.\n+\t* erroutc.adb (Prescan_Message): Set Is_Serious_Error to False\n+\tif Is_Info_Msg; the previous code was assuming that Is_Info_Msg\n+\timplies Is_Warning_Msg.\n+\t* errutil.adb (Error_Msg): In statistics counts, deal correctly\n+\twith informational messages that are not warnings.\n+\n 2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.ads, sem_util.adb (Is_Null_Record_Type): New predicate"}, {"sha": "bdf1c5b60ce4263c67482029a63f3dab04352183", "filename": "gcc/ada/a-chtgop.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Fa-chtgop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Fa-chtgop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.adb?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,6 +53,12 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n       Dst_Prev    : Node_Access;\n \n    begin\n+      --  If the counts are nonzero, execution is technically erroneous, but\n+      --  it seems friendly to allow things like concurrent \"=\" on shared\n+      --  constants.\n+\n+      Zero_Counts (HT.TC);\n+\n       HT.Buckets := null;\n       HT.Length := 0;\n "}, {"sha": "a0032810dab7700149b0de8242fe6f43cb98aaee", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1153,15 +1153,22 @@ package body Errout is\n          end if;\n       end if;\n \n-      --  Bump appropriate statistics count\n+      --  Bump appropriate statistics counts\n \n-      if Errors.Table (Cur_Msg).Warn or else Errors.Table (Cur_Msg).Style then\n-         Warnings_Detected := Warnings_Detected + 1;\n+      if Errors.Table (Cur_Msg).Info then\n+         Info_Messages := Info_Messages + 1;\n+\n+         --  Could be (usually is) both \"info\" and \"warning\"\n \n-         if Errors.Table (Cur_Msg).Info then\n-            Info_Messages := Info_Messages + 1;\n+         if Errors.Table (Cur_Msg).Warn then\n+            Warnings_Detected := Warnings_Detected + 1;\n          end if;\n \n+      elsif Errors.Table (Cur_Msg).Warn\n+        or else Errors.Table (Cur_Msg).Style\n+      then\n+         Warnings_Detected := Warnings_Detected + 1;\n+\n       elsif Errors.Table (Cur_Msg).Check then\n          Check_Messages := Check_Messages + 1;\n \n@@ -1298,9 +1305,7 @@ package body Errout is\n          Last_Killed := True;\n       end if;\n \n-      if not (Is_Warning_Msg or Is_Style_Msg) then\n-         Set_Posted (N);\n-      end if;\n+      Set_Posted (N);\n    end Error_Msg_NEL;\n \n    ------------------\n@@ -3077,7 +3082,6 @@ package body Errout is\n \n    begin\n       if Is_Serious_Error then\n-\n          --  We always set Error_Posted on the node itself\n \n          Set_Error_Posted (N);"}, {"sha": "e2e7de4a67ed37368436f83e1a001256036ea8c5", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -324,7 +324,7 @@ package Errout is\n    --      \"[restriction warning]\" at the end of the warning message. For\n    --      continuations, use this on each continuation message.\n \n-   --    Insertion character ?$? (elaboration information messages)\n+   --    Insertion character ?$? (elaboration informational messages)\n    --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n    --      \"[-gnatel]\" at the end of the info message. This is used for the\n    --      messages generated by the switch -gnatel. For continuations, use\n@@ -419,12 +419,13 @@ package Errout is\n    --      message. Style messages are also considered to be warnings, but\n    --      they do not get a tag.\n \n-   --    Insertion sequence \"info: \" (information message)\n+   --    Insertion sequence \"info: \" (informational message)\n    --      This appears only at the start of the message (and not any of its\n    --      continuations, if any), and indicates that the message is an info\n    --      message. The message will be output with this prefix, and if there\n    --      are continuations that are not printed using the -gnatj switch they\n-   --      will also have this prefix.\n+   --      will also have this prefix. Informational messages are usually also\n+   --      warnings, but they don't have to be.\n \n    --    Insertion sequence \"low: \" or \"medium: \" or \"high: \" (check message)\n    --      This appears only at the start of the message (and not any of its"}, {"sha": "ada93157af0060be2966bbcdff1d8899d53718b6", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -633,7 +633,7 @@ package body Erroutc is\n \n          --  Deal with warning case\n \n-         if Errors.Table (E).Warn then\n+         if Errors.Table (E).Warn or else Errors.Table (E).Info then\n \n             --  For info messages, prefix message with \"info: \"\n \n@@ -855,7 +855,7 @@ package body Erroutc is\n          end if;\n       end loop;\n \n-      if Is_Warning_Msg or Is_Style_Msg or Is_Check_Msg then\n+      if Is_Info_Msg or Is_Warning_Msg or Is_Style_Msg or Is_Check_Msg then\n          Is_Serious_Error := False;\n       end if;\n    end Prescan_Message;"}, {"sha": "d4e951079210dd603fa3750c662abe2cb913a0b0", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1991-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -302,18 +302,23 @@ package body Errutil is\n \n       Errors.Table (Cur_Msg).Next := Next_Msg;\n \n-      --  Bump appropriate statistics count\n+      --  Bump appropriate statistics counts\n \n-      if Errors.Table (Cur_Msg).Warn\n+      if Errors.Table (Cur_Msg).Info then\n+         Info_Messages := Info_Messages + 1;\n+\n+         --  Could be (usually is) both \"info\" and \"warning\"\n+\n+         if Errors.Table (Cur_Msg).Warn then\n+            Warnings_Detected := Warnings_Detected + 1;\n+         end if;\n+\n+      elsif Errors.Table (Cur_Msg).Warn\n            or else\n          Errors.Table (Cur_Msg).Style\n       then\n          Warnings_Detected := Warnings_Detected + 1;\n \n-         if Errors.Table (Cur_Msg).Info then\n-            Info_Messages := Info_Messages + 1;\n-         end if;\n-\n       elsif Errors.Table (Cur_Msg).Check then\n          Check_Messages := Check_Messages + 1;\n "}, {"sha": "2eca5eda4748ac80b135de71dfc38b56112443b8", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=6d0d18dcb1b2e39d7aaaa7ac2c6a19dd77d8a53d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2014-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2014-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -188,10 +188,34 @@ package body Ghost is\n          -----------------------\n \n          function Is_OK_Declaration (Decl : Node_Id) return Boolean is\n+            function In_Subprogram_Body_Profile (N : Node_Id) return Boolean;\n+            --  Determine whether node N appears in the profile of a subprogram\n+            --  body.\n+\n             function Is_Ghost_Renaming (Ren_Decl : Node_Id) return Boolean;\n             --  Determine whether node Ren_Decl denotes a renaming declaration\n             --  with a Ghost name.\n \n+            --------------------------------\n+            -- In_Subprogram_Body_Profile --\n+            --------------------------------\n+\n+            function In_Subprogram_Body_Profile (N : Node_Id) return Boolean is\n+               Spec : constant Node_Id := Parent (N);\n+\n+            begin\n+               --  The node appears in a parameter specification in which case\n+               --  it is either the parameter type or the default expression or\n+               --  the node appears as the result definition of a function.\n+\n+               return\n+                 (Nkind (N) = N_Parameter_Specification\n+                   or else\n+                     (Nkind (Spec) = N_Function_Specification\n+                       and then N = Result_Definition (Spec)))\n+                   and then Nkind (Parent (Spec)) = N_Subprogram_Body;\n+            end In_Subprogram_Body_Profile;\n+\n             -----------------------\n             -- Is_Ghost_Renaming --\n             -----------------------\n@@ -234,15 +258,22 @@ package body Ghost is\n \n             --  Special cases\n \n-            --  A reference to a Ghost entity may appear as the default\n-            --  expression of a formal parameter of a subprogram body. This\n-            --  context must be treated as suitable because the relation\n-            --  between the spec and the body has not been established and\n-            --  the body is not marked as Ghost yet. The real check was\n-            --  performed on the spec.\n+            --  A reference to a Ghost entity may appear within the profile of\n+            --  a subprogram body. This context is treated as suitable because\n+            --  it duplicates the context of the corresponding spec. The real\n+            --  check was already performed during the analysis of the spec.\n+\n+            elsif In_Subprogram_Body_Profile (Decl) then\n+               return True;\n+\n+            --  A reference to a Ghost entity may appear within an expression\n+            --  function which is still being analyzed. This context is treated\n+            --  as suitable because it is not yet known whether the expression\n+            --  function is an initial declaration or a completion. The real\n+            --  check is performed when the expression function is expanded.\n \n-            elsif Nkind (Decl) = N_Parameter_Specification\n-              and then Nkind (Parent (Parent (Decl))) = N_Subprogram_Body\n+            elsif Nkind (Decl) = N_Expression_Function\n+              and then not Analyzed (Decl)\n             then\n                return True;\n "}]}