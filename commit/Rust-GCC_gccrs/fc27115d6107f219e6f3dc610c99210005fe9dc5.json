{"sha": "fc27115d6107f219e6f3dc610c99210005fe9dc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyNzExNWQ2MTA3ZjIxOWU2ZjNkYzYxMGM5OTIxMDAwNWZlOWRjNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-04-03T11:49:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-04-03T11:49:50Z"}, "message": "Fortran: Fix ICE on wrong code [PR99818].\n\n2021-04-03  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran/ChangeLog\n\n\tPR fortran/99818\n\t* interface.c (compare_parameter): The codimension attribute is\n\tapplied to the _data field of class formal arguments.\n\ngcc/testsuite/ChangeLog\n\n\tPR fortran/99818\n\t* gfortran.dg/coarray_48.f90: New test.", "tree": {"sha": "1c8d46da9297cf7ede96efb196cf0bc9da38eac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c8d46da9297cf7ede96efb196cf0bc9da38eac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc27115d6107f219e6f3dc610c99210005fe9dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27115d6107f219e6f3dc610c99210005fe9dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc27115d6107f219e6f3dc610c99210005fe9dc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27115d6107f219e6f3dc610c99210005fe9dc5/comments", "author": null, "committer": null, "parents": [{"sha": "a40015780f8cc49476741b6914bd5ee97bd10f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40015780f8cc49476741b6914bd5ee97bd10f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40015780f8cc49476741b6914bd5ee97bd10f1d"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "607361235509351c1e4e29e75e0d729facbfe82c", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27115d6107f219e6f3dc610c99210005fe9dc5/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27115d6107f219e6f3dc610c99210005fe9dc5/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=fc27115d6107f219e6f3dc610c99210005fe9dc5", "patch": "@@ -2327,6 +2327,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   bool rank_check, is_pointer;\n   char err[200];\n   gfc_component *ppc;\n+  bool codimension = false;\n \n   /* If the formal arg has type BT_VOID, it's to one of the iso_c_binding\n      procs c_f_pointer or c_f_procpointer, and we need to accept most\n@@ -2490,15 +2491,20 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       return false;\n     }\n \n-  if (formal->attr.codimension && !gfc_is_coarray (actual))\n+  if (formal->ts.type == BT_CLASS && formal->attr.class_ok)\n+    codimension = CLASS_DATA (formal)->attr.codimension;\n+  else\n+    codimension = formal->attr.codimension;\n+\n+  if (codimension && !gfc_is_coarray (actual))\n     {\n       if (where)\n \tgfc_error (\"Actual argument to %qs at %L must be a coarray\",\n \t\t       formal->name, &actual->where);\n       return false;\n     }\n \n-  if (formal->attr.codimension && formal->attr.allocatable)\n+  if (codimension && formal->attr.allocatable)\n     {\n       gfc_ref *last = NULL;\n \n@@ -2520,7 +2526,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t}\n     }\n \n-  if (formal->attr.codimension)\n+  if (codimension)\n     {\n       /* F2008, 12.5.2.8 + Corrig 2 (IR F08/0048).  */\n       /* F2018, 12.5.2.8.  */\n@@ -2586,7 +2592,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       return false;\n     }\n \n-  if (formal->attr.allocatable && !formal->attr.codimension\n+  if (formal->attr.allocatable && !codimension\n       && actual_attr.codimension)\n     {\n       if (formal->attr.intent == INTENT_OUT)"}, {"sha": "adec014995f0c0b2ec41c0ce23bb7af1cfffbddd", "filename": "gcc/testsuite/gfortran.dg/coarray_48.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27115d6107f219e6f3dc610c99210005fe9dc5/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27115d6107f219e6f3dc610c99210005fe9dc5/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_48.f90?ref=fc27115d6107f219e6f3dc610c99210005fe9dc5", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! Fix for P99818 in which wrong code caused an ICE.\n+!\n+! Contributed by Gerhard Steinmetz <gscfq@t-online.de>\n+!\n+module m\n+   type t\n+      integer :: a\n+   contains\n+      procedure :: s\n+   end type\n+contains\n+   subroutine s(x)\n+      class(t) :: x[*]\n+   end\n+end\n+program p\n+   use m\n+   associate (y => t(1))\n+      call y%s           ! { dg-error \"must be a coarray\" }\n+   end associate\n+end"}]}