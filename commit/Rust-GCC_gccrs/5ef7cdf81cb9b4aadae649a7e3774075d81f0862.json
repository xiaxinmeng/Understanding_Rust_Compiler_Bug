{"sha": "5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmN2NkZjgxY2I5YjRhYWRhZTY0OWE3ZTM3NzQwNzVkODFmMDg2Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-06T21:26:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-06T21:26:12Z"}, "message": "i386.md (insv<mode>): Rename from insv.\n\n\t* config/i386/i386.md (insv<mode>): Rename from insv.  Use SWI48\n\tmodes for operands 0 and 3.  Use SImode for operands 2 and 3.\n\tCopy operand 0 to a temporary if !ext_register_operand.  Remove\n\tancient extract_bit_field workaround.\n\t(insv<mode>_1): Rename from mov<mode>_insv_1.\n\t(*insvqi): Rename from *movqi_insv_2.\n\t* config/i386/i386.c (emit_i386_cw_initialization): Update calls\n\tfor renamed insvsi_1.\n\t(promote_duplicated_reg): Ditto for renamed insv<mode>_1.\n\nFrom-SVN: r225484", "tree": {"sha": "ddcd7067042fc913dc1d1dd3fd497d7747a64ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddcd7067042fc913dc1d1dd3fd497d7747a64ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c03b04168e26e2dc01dae64e84c461a621130130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03b04168e26e2dc01dae64e84c461a621130130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03b04168e26e2dc01dae64e84c461a621130130"}], "stats": {"total": 88, "additions": 51, "deletions": 37}, "files": [{"sha": "f7562a04cc106d8c78b72f861452ce42d509ae25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "patch": "@@ -1,3 +1,15 @@\n+2015-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (insv<mode>): Rename from insv.  Use SWI48\n+\tmodes for operands 0 and 3.  Use SImode for operands 2 and 3.\n+\tCopy operand 0 to a temporary if !ext_register_operand.  Remove\n+\tancient extract_bit_field workaround.\n+\t(insv<mode>_1): Rename from mov<mode>_insv_1.\n+\t(*insvqi): Rename from *movqi_insv_2.\n+\t* config/i386/i386.c (emit_i386_cw_initialization): Update calls\n+\tfor renamed insvsi_1.\n+\t(promote_duplicated_reg): Ditto for renamed insv<mode>_1.\n+\n 2015-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.c (nvptx_reorg): Remove unused vars.  Fix\n@@ -73,13 +85,13 @@\n \tCopy operand 1 to a temporary if !ext_register_operand.  Remove\n \tancient extract_bit_field workaround.\n \t(*extv<mode>): Rename from *mov<mode>_extv_1.\n-\t(*extvqi): Rename from *movqi_extv_q.\n+\t(*extvqi): Rename from *movqi_extv_1.\n \t(extzv<mode>): Rename from extzv.  Use SWI248 modes for\n \toperands 0 and 1.  Use SImode for operands 2 and 3. Copy operand 1\n \tto a temporary if !ext_register_operand.  Remove ancient\n \textract_bit_field workaround.\n \t(*extzv<mode>): Rename from *mov<mode>_extzv_1.\n-\t(*extzvqi): Rename from *movqi_extzv_1.\n+\t(*extzvqi): Rename from *movqi_extzv_2.\n \t(*testqi_ext_3): Remove modes from const_int_operand predicated\n \toperands.  Add \"n\" constraint.\n \t(*btsq, *btrq, *btcq): Remove mode from const_0_to_63 predicated"}, {"sha": "e42d2f8e6d6f3cd6f1dbe0413549f5194b4e6c03", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "patch": "@@ -17063,19 +17063,19 @@ emit_i387_cw_initialization (int mode)\n \t{\n \tcase I387_CW_TRUNC:\n \t  /* round toward zero (truncate) */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n+\t  emit_insn (gen_insvsi_1 (reg, GEN_INT (0xc)));\n \t  slot = SLOT_CW_TRUNC;\n \t  break;\n \n \tcase I387_CW_FLOOR:\n \t  /* round down toward -oo */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x4)));\n+\t  emit_insn (gen_insvsi_1 (reg, GEN_INT (0x4)));\n \t  slot = SLOT_CW_FLOOR;\n \t  break;\n \n \tcase I387_CW_CEIL:\n \t  /* round up toward +oo */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x8)));\n+\t  emit_insn (gen_insvsi_1 (reg, GEN_INT (0x8)));\n \t  slot = SLOT_CW_CEIL;\n \t  break;\n \n@@ -24834,9 +24834,9 @@ promote_duplicated_reg (machine_mode mode, rtx val)\n \n       if (!TARGET_PARTIAL_REG_STALL)\n \tif (mode == SImode)\n-\t  emit_insn (gen_movsi_insv_1 (reg, reg));\n+\t  emit_insn (gen_insvsi_1 (reg, reg));\n \telse\n-\t  emit_insn (gen_movdi_insv_1 (reg, reg));\n+\t  emit_insn (gen_insvdi_1 (reg, reg));\n       else\n \t{\n \t  tmp = expand_simple_binop (mode, ASHIFT, reg, GEN_INT (8),"}, {"sha": "dcf1d580a85cc18866f44ce7c28fd78e55977305", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef7cdf81cb9b4aadae649a7e3774075d81f0862/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5ef7cdf81cb9b4aadae649a7e3774075d81f0862", "patch": "@@ -2780,7 +2780,37 @@\n \t(const_string \"SI\")\n \t(const_string \"QI\")))])\n \n-(define_insn \"mov<mode>_insv_1\"\n+(define_expand \"insv<mode>\"\n+  [(set (zero_extract:SWI48 (match_operand:SWI48 0 \"register_operand\")\n+\t\t\t    (match_operand:SI 1 \"const_int_operand\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\"))\n+        (match_operand:SWI48 3 \"register_operand\"))]\n+  \"\"\n+{\n+  rtx dst;\n+\n+  if (ix86_expand_pinsr (operands))\n+    DONE;\n+\n+  /* Handle insertions to %ah et al.  */\n+  if (INTVAL (operands[1]) != 8 || INTVAL (operands[2]) != 8)\n+    FAIL;\n+\n+  dst = operands[0];\n+  \n+  if (!ext_register_operand (dst, VOIDmode))\n+    dst = copy_to_reg (dst);\n+\n+  emit_insn (gen_insv<mode>_1 (dst, operands[3]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n+\n+(define_insn \"insv<mode>_1\"\n   [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8))\n@@ -2795,7 +2825,7 @@\n    (set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*movqi_insv_2\"\n+(define_insn \"*insvqi\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n@@ -10608,34 +10638,6 @@\n \f\n ;; Bit set / bit test instructions\n \n-(define_expand \"insv\"\n-  [(set (zero_extract (match_operand 0 \"register_operand\")\n-\t\t      (match_operand 1 \"const_int_operand\")\n-\t\t      (match_operand 2 \"const_int_operand\"))\n-        (match_operand 3 \"register_operand\"))]\n-  \"\"\n-{\n-  rtx (*gen_mov_insv_1) (rtx, rtx);\n-\n-  if (ix86_expand_pinsr (operands))\n-    DONE;\n-\n-  /* Handle insertions to %ah et al.  */\n-  if (INTVAL (operands[1]) != 8 || INTVAL (operands[2]) != 8)\n-    FAIL;\n-\n-  /* From mips.md: insert_bit_field doesn't verify that our source\n-     matches the predicate, so check it again here.  */\n-  if (! ext_register_operand (operands[0], VOIDmode))\n-    FAIL;\n-\n-  gen_mov_insv_1 = (TARGET_64BIT\n-\t\t    ? gen_movdi_insv_1 : gen_movsi_insv_1);\n-\n-  emit_insn (gen_mov_insv_1 (operands[0], operands[3]));\n-  DONE;\n-})\n-\n ;; %%% bts, btr, btc, bt.\n ;; In general these instructions are *slow* when applied to memory,\n ;; since they enforce atomic operation.  When applied to registers,"}]}