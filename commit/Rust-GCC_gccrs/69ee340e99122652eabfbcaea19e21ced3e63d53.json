{"sha": "69ee340e99122652eabfbcaea19e21ced3e63d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllZTM0MGU5OTEyMjY1MmVhYmZiY2FlYTE5ZTIxY2VkM2U2M2Q1Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-18T20:07:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-18T20:07:31Z"}, "message": "libiberty.h (concat, [...]): Improve comments.\n\n\t* libiberty.h (concat, concat_length, concat_copy, concat_copy2,\n\tACONCAT): Improve comments.\n\nFrom-SVN: r45683", "tree": {"sha": "830fdb49efb57c949852b9ac17cd0acbeeb05a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830fdb49efb57c949852b9ac17cd0acbeeb05a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ee340e99122652eabfbcaea19e21ced3e63d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ee340e99122652eabfbcaea19e21ced3e63d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ee340e99122652eabfbcaea19e21ced3e63d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ee340e99122652eabfbcaea19e21ced3e63d53/comments", "author": null, "committer": null, "parents": [{"sha": "518b566fe69b32aafa5b0404948d1d0134a2654b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518b566fe69b32aafa5b0404948d1d0134a2654b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518b566fe69b32aafa5b0404948d1d0134a2654b"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "c94394e25105c7ecd61a605d7e64fa73e5d79a88", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ee340e99122652eabfbcaea19e21ced3e63d53/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ee340e99122652eabfbcaea19e21ced3e63d53/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=69ee340e99122652eabfbcaea19e21ced3e63d53", "patch": "@@ -1,3 +1,8 @@\n+2001-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (concat, concat_length, concat_copy, concat_copy2,\n+\tACONCAT): Improve comments.\n+\n 2001-09-18  Alan Modra  <amodra@bigpond.net.au>\n \n \t* objalloc.h (OBJALLOC_ALIGN): Define using offsetof."}, {"sha": "a54e3adf05e096a7f28c5033f9f320cc8354c2e8", "filename": "include/libiberty.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ee340e99122652eabfbcaea19e21ced3e63d53/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ee340e99122652eabfbcaea19e21ced3e63d53/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=69ee340e99122652eabfbcaea19e21ced3e63d53", "patch": "@@ -85,34 +85,40 @@ extern char *basename ();\n \n extern const char *lbasename PARAMS ((const char *));\n \n-/* Concatenate an arbitrary number of strings, up to (char *) NULL.\n-   Allocates memory using xmalloc.  */\n+/* Concatenate an arbitrary number of strings.  You must pass NULL as\n+   the last argument of this function, to terminate the list of\n+   strings.  Allocates memory using xmalloc.  */\n \n extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n \n /* Determine the length of concatenating an arbitrary number of\n-   strings, up to (char *) NULL.  */\n+   strings.  You must pass NULL as the last argument of this function,\n+   to terminate the list of strings.  */\n \n extern unsigned long concat_length PARAMS ((const char *, ...));\n \n /* Concatenate an arbitrary number of strings into a SUPPLIED area of\n-   memory, up to (char *) NULL.  The supplied memory is assumed to be\n-   large enough.  */\n+   memory.  You must pass NULL as the last argument of this function,\n+   to terminate the list of strings.  The supplied memory is assumed\n+   to be large enough.  */\n \n extern char *concat_copy PARAMS ((char *, const char *, ...));\n \n /* Concatenate an arbitrary number of strings into a GLOBAL area of\n-   memory, up to (char *) NULL.  The supplied memory is assumed to be\n-   large enough.  */\n+   memory.  You must pass NULL as the last argument of this function,\n+   to terminate the list of strings.  The supplied memory is assumed\n+   to be large enough.  */\n \n extern char *concat_copy2 PARAMS ((const char *, ...));\n \n /* This is the global area used by concat_copy2.  */\n \n extern char *libiberty_concat_ptr;\n \n-/* Concatenate an arbitrary number of strings, up to (char *) NULL.\n-   Allocates memory using alloca.  Arguments are evaluated twice!.  */\n+/* Concatenate an arbitrary number of strings.  You must pass NULL as\n+   the last argument of this function, to terminate the list of\n+   strings.  Allocates memory using alloca.  The arguments are\n+   evaluated twice!  */\n #define ACONCAT(ACONCAT_PARAMS) \\\n   (libiberty_concat_ptr = alloca (concat_length ACONCAT_PARAMS + 1), \\\n    concat_copy2 ACONCAT_PARAMS)"}]}