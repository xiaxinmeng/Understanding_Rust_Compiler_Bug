{"sha": "6e307219b955b80e6669acadae72c183f0eda248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzMDcyMTliOTU1YjgwZTY2NjlhY2FkYWU3MmMxODNmMGVkYTI0OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-09T19:12:41Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-09T19:12:41Z"}, "message": "re PR fortran/78619 (ICE in copy_reference_ops_from_ref, at tree-ssa-sccvn.c:889)\n\n2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78619\n\t* check.c (same_type_check): Introduce a new argument 'assoc'\n\twith default value false. If this is true, use the symbol type\n\tspec of BT_PROCEDURE expressions.\n\t(gfc_check_associated): Set 'assoc' true in the call to\n\t'same_type_check'.\n\n2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/78619\n\t* gfortran.dg/pr78619.f90: New test.\n\nFrom-SVN: r254605", "tree": {"sha": "4afaf01334bb2ba941218b9e57539348c63c514c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afaf01334bb2ba941218b9e57539348c63c514c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e307219b955b80e6669acadae72c183f0eda248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e307219b955b80e6669acadae72c183f0eda248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e307219b955b80e6669acadae72c183f0eda248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e307219b955b80e6669acadae72c183f0eda248/comments", "author": null, "committer": null, "parents": [{"sha": "1fb84d5b0a2dcdb8fd5aa39680df651811d55fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb84d5b0a2dcdb8fd5aa39680df651811d55fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb84d5b0a2dcdb8fd5aa39680df651811d55fbb"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "7d016278b262150a6f893e54af7b6dc2fdd9eb2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e307219b955b80e6669acadae72c183f0eda248", "patch": "@@ -1,3 +1,12 @@\n+2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78619\n+\t* check.c (same_type_check): Introduce a new argument 'assoc'\n+\twith default value false. If this is true, use the symbol type\n+\tspec of BT_PROCEDURE expressions.\n+\t(gfc_check_associated): Set 'assoc' true in the call to\n+\t'same_type_check'.\n+\n 2017-11-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78814"}, {"sha": "a147449bf707c768369e7dc43bd0aae35f9d2e1d", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=6e307219b955b80e6669acadae72c183f0eda248", "patch": "@@ -427,15 +427,22 @@ less_than_bitsize2 (const char *arg1, gfc_expr *expr1, const char *arg2,\n /* Make sure two expressions have the same type.  */\n \n static bool\n-same_type_check (gfc_expr *e, int n, gfc_expr *f, int m)\n+same_type_check (gfc_expr *e, int n, gfc_expr *f, int m, bool assoc = false)\n {\n   gfc_typespec *ets = &e->ts;\n   gfc_typespec *fts = &f->ts;\n \n-  if (e->ts.type == BT_PROCEDURE && e->symtree->n.sym)\n-    ets = &e->symtree->n.sym->ts;\n-  if (f->ts.type == BT_PROCEDURE && f->symtree->n.sym)\n-    fts = &f->symtree->n.sym->ts;\n+  if (assoc)\n+    {\n+      /* Procedure pointer component expressions have the type of the interface\n+\t procedure. If they are being tested for association with a procedure\n+\t pointer (ie. not a component), the type of the procedure must be\n+\t determined.  */\n+      if (e->ts.type == BT_PROCEDURE && e->symtree->n.sym)\n+\tets = &e->symtree->n.sym->ts;\n+      if (f->ts.type == BT_PROCEDURE && f->symtree->n.sym)\n+\tfts = &f->symtree->n.sym->ts;\n+    }\n \n   if (gfc_compare_types (ets, fts))\n     return true;\n@@ -1002,7 +1009,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n     }\n \n   t = true;\n-  if (!same_type_check (pointer, 0, target, 1))\n+  if (!same_type_check (pointer, 0, target, 1, true))\n     t = false;\n   if (!rank_check (target, 0, pointer->rank))\n     t = false;"}, {"sha": "17fa76628806635491efcec10bbed505547e0a8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e307219b955b80e6669acadae72c183f0eda248", "patch": "@@ -1,3 +1,8 @@\n+2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/78619\n+\t* gfortran.dg/pr78619.f90: New test.\n+\n 2017-11-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78814"}, {"sha": "5fbe185cfab0dba7c5bc62bff90bc34efbdda5ee", "filename": "gcc/testsuite/gfortran.dg/pr78619.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78619.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e307219b955b80e6669acadae72c183f0eda248/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78619.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr78619.f90?ref=6e307219b955b80e6669acadae72c183f0eda248", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-Werror -O3\" }\n+!\n+! Tests the fix for PR78619, in which the recursive use of 'f' at line 13\n+! caused an ICE.\n+!\n+! Contributed by Gerhard Steinmetz  <gerhard.steinmetz.fortran@t-online.de>\n+!\n+  print *, g(1.0) ! 'g' is OK\n+contains\n+  function f(x) result(z)\n+    real :: x, z\n+    z = sign(1.0, f) ! { dg-error \"calling itself recursively|must be the same type\" }\n+  end\n+  real function g(x)\n+    real :: x\n+    g = -1\n+    g = -sign(1.0, g) ! This is OK.\n+  end\n+end\n+! { dg-message \"all warnings being treated as errors\" \"\" { target *-*-* } 0 }"}]}