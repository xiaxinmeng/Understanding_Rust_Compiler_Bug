{"sha": "b472527b0fdc204489ee647a6752b29b1291317a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3MjUyN2IwZmRjMjA0NDg5ZWU2NDdhNjc1MmIyOWIxMjkxMzE3YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-11T16:26:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-11T16:26:05Z"}, "message": "Another handful of gcc-2.8 changes (will it ever go out the door?).\n\nSee ChangeLog.11 for details.\n\nFrom-SVN: r17040", "tree": {"sha": "14ba3dfecebffb68f2afc7348224d403c74620f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ba3dfecebffb68f2afc7348224d403c74620f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b472527b0fdc204489ee647a6752b29b1291317a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b472527b0fdc204489ee647a6752b29b1291317a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b472527b0fdc204489ee647a6752b29b1291317a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b472527b0fdc204489ee647a6752b29b1291317a/comments", "author": null, "committer": null, "parents": [{"sha": "c4ae3f91a2e59633859532b4e2f62b210f23b3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae3f91a2e59633859532b4e2f62b210f23b3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ae3f91a2e59633859532b4e2f62b210f23b3bf"}], "stats": {"total": 94, "additions": 65, "deletions": 29}, "files": [{"sha": "7ea0d5e7e8d41a7b3a06551fe8a1b36b7c6477dc", "filename": "gcc/ChangeLog.11", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2FChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2FChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.11?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -1,7 +1,38 @@\n-Sun Dec  7 18:24:30 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+Wed Dec 10 18:38:56 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Version 2.8.0 released.\n \n+Wed Dec 10 18:38:28 1997  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+ \n+        * libgcc2.c (__bb_exit_func): Fix test of return value of fopen.\n+\n+Wed Dec 10 07:07:37 1997  Bernd Schmidt <crux@starsky.Informatik.RWTH-Aachen.DE>\n+\t* combine.c (simplify_rtx, case ABS): Don't get confused by a\n+\tVOIDmode operand.\n+\n+Tue Dec  9 17:44:14 1997  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.h (FUNCTION_ARG_PADDING): Define.\n+\t* rs6000.c (function_arg_padding): New function.\n+\n+Tue Dec  9 08:53:56 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* integrate.c (save_for_inline_copying): Make a new reg_parm_stack_loc.\n+\n+Mon Dec  8 19:23:58 1997  Pat Rankin  <rankin@eql.caltech.edu>\n+\n+\t* toplev.c (get_run_time): [#if VMS] Cast arg in times call.\n+\n+\t* vax/xm-vms.h (HAVE_UNISTD_H): Define for DEC C.\n+\t* make-cccp.com [CC]: Add /Prefix=All for DEC C.\n+\n+Mon Dec  8 08:09:17 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* stmt.c (expand_decl_cleanup_no_eh): Properly return a value.\n+\n+\t* fold-const.c (fold_convert): Don't flag overflow when converting\n+\tpointer to integer.\n+\n Sun Dec  7 09:42:05 1997  Pat Rankin  <rankin@eql.caltech.edu>\n \n \t* make-gcc.com (@make-l2): Pass along any command line arguments."}, {"sha": "5f671a3ce61d17f225b9f3ef4e0b35f515d63477", "filename": "gcc/NEWS", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FNEWS?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -44,7 +44,8 @@ New features in configuration, installation and specs file handling:\n \n     New option --enable-c-cpplib to configure script.\n \n-    Allow --with-cpu on configure command to specify a default CPU.\n+    You can use --with-cpu on the configure command to specify the default\n+    CPU that GCC should generate code for.\n \n     The -specs=file switch allows you to override default specs used in\n     invoking programs like cc1, as, etc."}, {"sha": "339c94943cda2f6e52e856798a03bb57656f7011", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -4092,13 +4092,15 @@ simplify_rtx (x, op0_mode, last, in_dest)\n     case XOR:\n       return simplify_logical (x, last);\n \n-    case ABS:\n+    case ABS:      \n       /* (abs (neg <foo>)) -> (abs <foo>) */\n       if (GET_CODE (XEXP (x, 0)) == NEG)\n \tSUBST (XEXP (x, 0), XEXP (XEXP (x, 0), 0));\n \n-      if (GET_CODE (XEXP (x, 0)) == ASM_OPERANDS)\n-\treturn x;\n+      /* If the mode of the operand is VOIDmode (i.e. if it is ASM_OPERANDS),\n+         do nothing.  */\n+      if (GET_MODE (XEXP (x, 0)) == VOIDmode)\n+\tbreak;\n \n       /* If operand is something known to be positive, ignore the ABS.  */\n       if (GET_CODE (XEXP (x, 0)) == FFS || GET_CODE (XEXP (x, 0)) == ABS"}, {"sha": "a559a039476baeb8aa00abdaf91dcacb3ab2851b", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -22,6 +22,14 @@ Boston, MA 02111-1307, USA.  */\n #define FALSE 0\n #define TRUE 1\n \n+/* Other configurations get these via autoconfig.  */\n+#define STDC_HEADERS 1\n+#define HAVE_STDLIB_H 1\n+#define HAVE_STRING_H 1\n+#ifdef __DECC\n+#define HAVE_UNISTD_H 1\n+#endif\n+\n #if defined(VAXC) || defined(__DECC)\n /* if compiling with VAXC, need to fix problem with <stdio.h>\n    which defines a macro called FILE_TYPE that breaks \"tree.h\".\n@@ -69,16 +77,6 @@ Boston, MA 02111-1307, USA.  */\n /* and define a local equivalent (sort of) for unlink */\n #define unlink remove\n \n-/* Specify the list of include file directories.  */\n-#define INCLUDE_DEFAULTS \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"GNU_GXX_INCLUDE:\", 1, 1 },\t\t\t\t\t\t\\\n-  { \"GNU_CC_INCLUDE:\", 0, 0 },\t/* GNU includes */\t\t\t\\\n-  { \"SYS$SYSROOT:[SYSLIB.]\", 0, 0 }, /* VAX-11 \"C\" includes */\t\t\\\n-  { \".\", 0, 1 },\t\t/* Make normal VMS filespecs work.  */\t\\\n-  { 0, 0, 0 }\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Used by the preprocessor to limit size of disk I/O chunks.\n    64K - 1 is the maximum supported by VAXCRTL.  Amounts in excess\n    of 35 blocks will bypass the VMS V6.x VIOC [Virtual I/O Cache],\n@@ -144,12 +142,6 @@ Boston, MA 02111-1307, USA.  */\n #define QSORT_WORKAROUND\t/* do not use VAXCRTL's qsort */\n \n /* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n-#define bcopy(s,d,n)\tmemcpy((d),(s),(n))\n-#define bzero(d,n)\tmemset((d),0,(n))\n-#define bcmp(l,r,n)\tmemcmp((l),(r),(n))\n-#define index\tstrchr\n-#define rindex\tstrrchr\n-\n /* rename all too-long external symbol names to avoid warnings */\n #define bc_check_for_full_enumeration_handling\tbc_check_for_full_enum_handling\n #define check_for_full_enumeration_handling\tcheck_for_full_enum_handling\n@@ -165,11 +157,14 @@ Boston, MA 02111-1307, USA.  */\n #define current_function_uses_const_pool\tcurfunc_uses_const_pool\n #define current_function_uses_pic_offset_table\tcurfunc_uses_pic_offset_table\n #define dbxout_resume_previous_source_file\tdbxout_resume_previous_src_file\n+#define expand_builtin_extract_return_addr\texpand_builtin_extract_ret_addr\n+#define expand_builtin_set_return_addr_reg\texpand_builtin_set_ret_addr_reg\n #define expand_start_loop_continue_elsewhere\texpnd_start_loop_cont_elsewhere\n #define flag_schedule_insns_after_reload\tflag_sched_insns_after_reload\n #define get_dynamic_handler_chain_libfunc\tget_dynamic_hndlr_chain_libfunc\n #define lookup_name_current_level_global\tlookup_name_current_level_gbl\n #define maybe_building_objc_message_expr\tmaybe_building_objc_msg_expr\n+#define mesg_implicit_function_declaration\tmesg_implicit_func_declaration\n #define output_deferred_addressed_constants\toutput_deferred_addr_constants\n #define protect_cleanup_actions_with_terminate  protect_cleanup_act_w_terminate\n #define reg_overlap_mentioned_for_reload_p\treg_overlap_mtnd_for_reload_p"}, {"sha": "65a6d85efc05b036a40180a7b41f8a9adc4255f9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -1511,13 +1511,15 @@ fold_convert (t, arg1)\n \t  /* Indicate an overflow if (1) ARG1 already overflowed,\n \t     or (2) force_fit_type indicates an overflow.\n \t     Tell force_fit_type that an overflow has already occurred\n-\t     if ARG1 is a too-large unsigned value and T is signed.  */\n+\t     if ARG1 is a too-large unsigned value and T is signed.\n+\t     But don't indicate an overflow if converting a pointer.  */\n \t  TREE_OVERFLOW (t)\n \t    = (TREE_OVERFLOW (arg1)\n-\t       | force_fit_type (t,\n-\t\t\t\t (TREE_INT_CST_HIGH (arg1) < 0\n-\t\t\t\t  & (TREE_UNSIGNED (type)\n-\t\t\t\t     < TREE_UNSIGNED (TREE_TYPE (arg1))))));\n+\t       || (force_fit_type (t,\n+\t\t\t\t  (TREE_INT_CST_HIGH (arg1) < 0\n+\t\t\t\t   & (TREE_UNSIGNED (type)\n+\t\t\t\t     < TREE_UNSIGNED (TREE_TYPE (arg1)))))\n+\t\t   && TREE_CODE (TREE_TYPE (arg1)) != POINTER_TYPE));\n \t  TREE_CONSTANT_OVERFLOW (t)\n \t    = TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg1);\n \t}"}, {"sha": "ad51863e912002895ba59a58b86226950a8b392c", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -1531,7 +1531,7 @@ __bb_exit_func (void)\n \t\tfprintf (stderr, \"arc profiling: Error closing output file %s.\\n\",\n \t\t\t ptr->filename);\n \t    }\n-\t  if ((da_file = fopen (ptr->filename, \"w\")) < 0)\n+\t  if ((da_file = fopen (ptr->filename, \"w\")) == 0)\n \t    {\n \t      fprintf (stderr, \"arc profiling: Can't open output file %s.\\n\",\n \t\t       ptr->filename);"}, {"sha": "342c71015a4ad3c47df75aff575d42ddb8eeb1dc", "filename": "gcc/make-cccp.com", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fmake-cccp.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fmake-cccp.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cccp.com?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -33,6 +33,7 @@ $   else\n $     if p1.eqs.\"DECC\"\n $     then\n $\tif f$trnlnm(\"DECC$CC_DEFAULT\").nes.\"\" then  CC = \"cc/DECC\"\n+$\tCC = CC + \"/Prefix=All\"\n $\tLIBS = \"alloca.obj\"\t!DECC$SHR will be found implicitly by linker\n $\tdefine/noLog SYS DECC$LIBRARY_INCLUDE:\n $     else"}, {"sha": "18390347831af68d6e743ddec738d0a0faf8048f", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -4027,9 +4027,13 @@ expand_decl_cleanup_no_eh (decl, cleanup)\n      tree decl, cleanup;\n {\n   int save_eh = using_eh_for_cleanups_p;\n+  int result;\n+\n   using_eh_for_cleanups_p = 0;\n-  expand_decl_cleanup (decl, cleanup);\n+  result = expand_decl_cleanup (decl, cleanup);\n   using_eh_for_cleanups_p = save_eh;\n+\n+  return result;\n }\n \n /* Arrange for the top element of the dynamic cleanup chain to be"}, {"sha": "17318e25c44c058d1a05f92db0c28b0d95027548", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b472527b0fdc204489ee647a6752b29b1291317a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b472527b0fdc204489ee647a6752b29b1291317a", "patch": "@@ -1034,7 +1034,7 @@ get_run_time ()\n   return (rusage.ru_utime.tv_sec * 1000000 + rusage.ru_utime.tv_usec\n \t  + rusage.ru_stime.tv_sec * 1000000 + rusage.ru_stime.tv_usec);\n #else /* VMS */\n-  times (&vms_times);\n+  times ((void *) &vms_times);\n   return (vms_times.proc_user_time + vms_times.proc_system_time) * 10000;\n #endif\n #endif"}]}