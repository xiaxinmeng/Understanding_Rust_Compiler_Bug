{"sha": "6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyMTI4OGY4YzM1NzllYzdhZTQ3NjE1ZTc2YmExZTZhZDI1NTUxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-27T19:55:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-27T19:55:12Z"}, "message": "re PR fortran/78026 (ICE in gfc_resolve_omp_declare_simd, at fortran/openmp.c:5190)\n\n\tPR fortran/78026\n\t* parse.c (decode_statement): Don't create namespace for possible\n\tselect type here and destroy it afterwards.\n\t(parse_select_type_block): Set gfc_current_ns to new_st.ext.block.ns.\n\t(parse_executable, gfc_parse_file): Formatting fixes.\n\t* match.c (gfc_match_select_type): Create namespace for select type\n\there, only after matching select type.  Formatting fixes.  Free that\n\tnamespace if not returning MATCH_YES, after gfc_undo_symbols,\n\totherwise remember it in new_st.ext.block.ns and switch to parent\n\tnamespace anyway.\n\n\t* gfortran.dg/gomp/pr78026.f03: New test.\n\t* gfortran.dg/select_type_38.f03: New test.\n\nFrom-SVN: r241630", "tree": {"sha": "8eace66a9ed3bade23fd586a126fba2b7fcd0e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eace66a9ed3bade23fd586a126fba2b7fcd0e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/comments", "author": null, "committer": null, "parents": [{"sha": "47ffb5d95eb5c5514dae306b7c8e4308f1f001a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ffb5d95eb5c5514dae306b7c8e4308f1f001a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ffb5d95eb5c5514dae306b7c8e4308f1f001a2"}], "stats": {"total": 109, "additions": 70, "deletions": 39}, "files": [{"sha": "625189fd8e8d8a716d15dae9a7681084142c1e13", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -1,4 +1,17 @@\n-2016-10-27  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/78026\n+\t* parse.c (decode_statement): Don't create namespace for possible\n+\tselect type here and destroy it afterwards.\n+\t(parse_select_type_block): Set gfc_current_ns to new_st.ext.block.ns.\n+\t(parse_executable, gfc_parse_file): Formatting fixes.\n+\t* match.c (gfc_match_select_type): Create namespace for select type\n+\there, only after matching select type.  Formatting fixes.  Free that\n+\tnamespace if not returning MATCH_YES, after gfc_undo_symbols,\n+\totherwise remember it in new_st.ext.block.ns and switch to parent\n+\tnamespace anyway.\n+\n+2016-10-27  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* expr.c (generate_union_initializer, get_union_initializer): New.\n \t* expr.c (component_initializer): Consider BT_UNION specially.\n@@ -21,7 +34,7 @@\n \tsuppress the error and return if the same procedure symbol\n \tis added more than once to the interface.\n \n-2016-10-26  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-26  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* frontend-passes.c (gfc_code_walker): Add SHARE and CARRIAGECONTROL.\n \t* io.c (gfc_free_open, gfc_resolve_open, gfc_match_open): Ditto.\n@@ -32,7 +45,7 @@\n \t* io.c (match_dec_etag, match_dec_ftag): New functions.\n \t* gfortran.texi: Document.\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.texi: Document.\n \t* resolve.c (logical_to_bitwise): New function.\n@@ -56,30 +69,30 @@\n \n \t* intrinsic.texi (cosd): New mathop.\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* match.c (gfc_match_intrinsic_op): Match \".XOR.\" with -std=legacy.\n \t* gfortran.texi: Document.\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* primary.c (gfc_match_rvalue): Match %LOC as LOC with -std=legacy.\n \t* gfortran.texi: Document.\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* decl.c (gfc_match_type): New function.\n \t* match.h (gfc_match_type): New function.\n \t* match.c (gfc_match_if): Special case for one-line IFs.\n \t* gfortran.texi: Update documentation.\n \t* parse.c (decode_statement): Invoke gfc_match_type.\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.texi: Document.\n \t* gfortran.h (gfc_is_whitespace): Include form feed ('\\f').\n \n-2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* invoke.texi, gfortran.texi: Touch up documentation of -fdec.\n \t* gfortran.h (gfc_option): Move flag_dec_structure out of gfc_option."}, {"sha": "0996a9efae6f1b522011cb6de95aab9515ef82e4", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -5882,6 +5882,7 @@ gfc_match_select_type (void)\n   char name[GFC_MAX_SYMBOL_LEN];\n   bool class_array;\n   gfc_symbol *sym;\n+  gfc_namespace *ns = gfc_current_ns;\n \n   m = gfc_match_label ();\n   if (m == MATCH_ERROR)\n@@ -5891,10 +5892,11 @@ gfc_match_select_type (void)\n   if (m != MATCH_YES)\n     return m;\n \n+  gfc_current_ns = gfc_build_block_ns (ns);\n   m = gfc_match (\" %n => %e\", name, &expr2);\n   if (m == MATCH_YES)\n     {\n-      expr1 = gfc_get_expr();\n+      expr1 = gfc_get_expr ();\n       expr1->expr_type = EXPR_VARIABLE;\n       if (gfc_get_sym_tree (name, NULL, &expr1->symtree, false))\n \t{\n@@ -5916,7 +5918,11 @@ gfc_match_select_type (void)\n     {\n       m = gfc_match (\" %e \", &expr1);\n       if (m != MATCH_YES)\n-\treturn m;\n+\t{\n+\t  std::swap (ns, gfc_current_ns);\n+\t  gfc_free_namespace (ns);\n+\t  return m;\n+\t}\n     }\n \n   m = gfc_match (\" )%t\");\n@@ -5932,19 +5938,19 @@ gfc_match_select_type (void)\n      allowed by the standard.\n      TODO: see if it is sufficient to exclude component and substring\n      references.  */\n-  class_array = expr1->expr_type == EXPR_VARIABLE\n-\t\t  && expr1->ts.type == BT_CLASS\n-\t\t  && CLASS_DATA (expr1)\n-\t\t  && (strcmp (CLASS_DATA (expr1)->name, \"_data\") == 0)\n-\t\t  && (CLASS_DATA (expr1)->attr.dimension\n-\t\t      || CLASS_DATA (expr1)->attr.codimension)\n-\t\t  && expr1->ref\n-\t\t  && expr1->ref->type == REF_ARRAY\n-\t\t  && expr1->ref->next == NULL;\n+  class_array = (expr1->expr_type == EXPR_VARIABLE\n+\t\t && expr1->ts.type == BT_CLASS\n+\t\t && CLASS_DATA (expr1)\n+\t\t && (strcmp (CLASS_DATA (expr1)->name, \"_data\") == 0)\n+\t\t && (CLASS_DATA (expr1)->attr.dimension\n+\t\t     || CLASS_DATA (expr1)->attr.codimension)\n+\t\t && expr1->ref\n+\t\t && expr1->ref->type == REF_ARRAY\n+\t\t && expr1->ref->next == NULL);\n \n   /* Check for F03:C811.  */\n   if (!expr2 && (expr1->expr_type != EXPR_VARIABLE\n-\t\t  || (!class_array && expr1->ref != NULL)))\n+\t\t || (!class_array && expr1->ref != NULL)))\n     {\n       gfc_error (\"Selector in SELECT TYPE at %C is not a named variable; \"\n \t\t \"use associate-name=>\");\n@@ -5958,12 +5964,16 @@ gfc_match_select_type (void)\n   new_st.ext.block.ns = gfc_current_ns;\n \n   select_type_push (expr1->symtree->n.sym);\n+  gfc_current_ns = ns;\n \n   return MATCH_YES;\n \n cleanup:\n   gfc_free_expr (expr1);\n   gfc_free_expr (expr2);\n+  gfc_undo_symbols ();\n+  std::swap (ns, gfc_current_ns);\n+  gfc_free_namespace (ns);\n   return m;\n }\n "}, {"sha": "2aa2afc24e8eb361ffeafb2f6292c5622a2f1a12", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -295,7 +295,6 @@ static bool in_specification_block;\n static gfc_statement\n decode_statement (void)\n {\n-  gfc_namespace *ns;\n   gfc_statement st;\n   locus old_locus;\n   match m = MATCH_NO;\n@@ -424,12 +423,7 @@ decode_statement (void)\n   match (NULL, gfc_match_associate, ST_ASSOCIATE);\n   match (NULL, gfc_match_critical, ST_CRITICAL);\n   match (NULL, gfc_match_select, ST_SELECT_CASE);\n-\n-  gfc_current_ns = gfc_build_block_ns (gfc_current_ns);\n   match (NULL, gfc_match_select_type, ST_SELECT_TYPE);\n-  ns = gfc_current_ns;\n-  gfc_current_ns = gfc_current_ns->parent;\n-  gfc_free_namespace (ns);\n \n   /* General statement matching: Instead of testing every possible\n      statement, we eliminate most possibilities by peeking at the\n@@ -4103,6 +4097,7 @@ parse_select_type_block (void)\n   gfc_code *cp;\n   gfc_state_data s;\n \n+  gfc_current_ns = new_st.ext.block.ns;\n   accept_statement (ST_SELECT_TYPE);\n \n   cp = gfc_state_stack->tail;\n@@ -5188,7 +5183,7 @@ parse_executable (gfc_statement st)\n \t  break;\n \n \tcase ST_SELECT_TYPE:\n-\t  parse_select_type_block();\n+\t  parse_select_type_block ();\n \t  break;\n \n \tcase ST_DO:\n@@ -6027,28 +6022,25 @@ gfc_parse_file (void)\n       prog_locus = gfc_current_locus;\n \n       push_state (&s, COMP_PROGRAM, gfc_new_block);\n-      main_program_symbol(gfc_current_ns, gfc_new_block->name);\n+      main_program_symbol (gfc_current_ns, gfc_new_block->name);\n       accept_statement (st);\n       add_global_program ();\n       parse_progunit (ST_NONE);\n       goto prog_units;\n-      break;\n \n     case ST_SUBROUTINE:\n       add_global_procedure (true);\n       push_state (&s, COMP_SUBROUTINE, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n       goto prog_units;\n-      break;\n \n     case ST_FUNCTION:\n       add_global_procedure (false);\n       push_state (&s, COMP_FUNCTION, gfc_new_block);\n       accept_statement (st);\n       parse_progunit (ST_NONE);\n       goto prog_units;\n-      break;\n \n     case ST_BLOCK_DATA:\n       push_state (&s, COMP_BLOCK_DATA, gfc_new_block);\n@@ -6083,7 +6075,6 @@ gfc_parse_file (void)\n       main_program_symbol (gfc_current_ns, \"MAIN__\");\n       parse_progunit (st);\n       goto prog_units;\n-      break;\n     }\n \n   /* Handle the non-program units.  */\n@@ -6132,14 +6123,12 @@ gfc_parse_file (void)\n   pop_state ();\n   goto loop;\n \n-  done:\n-\n+done:\n   /* Do the resolution.  */\n   resolve_all_program_units (gfc_global_ns_list);\n \n   /* Do the parse tree dump.  */\n-  gfc_current_ns\n-\t= flag_dump_fortran_original ? gfc_global_ns_list : NULL;\n+  gfc_current_ns = flag_dump_fortran_original ? gfc_global_ns_list : NULL;\n \n   for (; gfc_current_ns; gfc_current_ns = gfc_current_ns->sibling)\n     if (!gfc_current_ns->proc_name"}, {"sha": "a8d187cbd9695d74ecb98b0f1ca6006ac8fd85bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -1,9 +1,13 @@\n 2016-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/78026\n+\t* gfortran.dg/gomp/pr78026.f03: New test.\n+\t* gfortran.dg/select_type_38.f03: New test.\n+\n \tPR middle-end/78025\n \t* g++.dg/gomp/declare-simd-7.C: New test.\n \n-2016-10-27  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-27  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_init_1.f90: Remove -fdump-tree-original.\n \t* gfortran.dg/dec_init_2.f90: Likewise.\n@@ -14,7 +18,7 @@\n \n \t* gcc.dg/fold-narrowbopcst-1.c: New test.\n \n-2016-10-27  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-27  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_io_5.f90: Don't use \"test.txt\", and use\n \tdg-shouldfail/dg-output instead of XFAIL.\n@@ -70,7 +74,7 @@\n \t* gfortran.dg/pr78061.f: New test.\n \t* g++.dg/pr78088.C: New test.\n \n-2016-10-26  Fritz Reese <fritzoreese@gmail.com>\n+2016-10-26  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_io_1.f90: New test.\n \t* gfortran.dg/dec_io_2.f90: New test."}, {"sha": "61f945886e62fba96d040b03080805e4a74212cf", "filename": "gcc/testsuite/gfortran.dg/gomp/pr78026.f03", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78026.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78026.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78026.f03?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -0,0 +1,5 @@\n+! PR fortran/78026\n+select type (a)\t\t! { dg-error \"Selector shall be polymorphic in SELECT TYPE statement\" }\n+end select\n+!$omp declare simd(b)\t! { dg-error \"Unexpected !.OMP DECLARE SIMD statement\" }\n+end\t\t\t! { dg-error \"should refer to containing procedure\" \"\" { target *-*-* } .-1 }"}, {"sha": "a643e99f01f5f32f95d0faef209f72b5d1d63b72", "filename": "gcc/testsuite/gfortran.dg/select_type_38.f03", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_38.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f21288f8c3579ec7ae47615e76ba1e6ad25551f/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_38.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_38.f03?ref=6f21288f8c3579ec7ae47615e76ba1e6ad25551f", "patch": "@@ -0,0 +1,10 @@\n+  type :: t1\n+  end type\n+  type, extends(t1) :: t2\n+  end type\n+  class(t1), pointer :: a\n+lab1: select type (a)\n+  end select lab1\n+lab1: select type (a)\t\t! { dg-error \"Duplicate construct label\" }\n+  end select lab1\t\t! { dg-error \"Expecting END PROGRAM statement\" }\n+end"}]}