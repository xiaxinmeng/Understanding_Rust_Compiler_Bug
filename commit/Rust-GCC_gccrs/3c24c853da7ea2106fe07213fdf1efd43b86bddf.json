{"sha": "3c24c853da7ea2106fe07213fdf1efd43b86bddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyNGM4NTNkYTdlYTIxMDZmZTA3MjEzZmRmMWVmZDQzYjg2YmRkZg==", "commit": {"author": {"name": "Matthew Heaney", "email": "heaney@adacore.com", "date": "2012-01-23T09:35:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T09:35:53Z"}, "message": "a-cohase.ads, [...] (Cursor'Read, [...]): Declare in private part.\n\n2012-01-23  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cohase.ads, a-cihase.ads, a-cbhase.ads, a-coorse.ads,\n\ta-ciorse.ads, a-cborse.ads, a-cohama.ads, a-cihama.ads, a-cbhama.ads,\n\ta-coorma.ads, a-ciorma.ads, a-cborma.ads, a-cdlili.ads, a-cidlli.ads,\n\ta-cbdlli.ads, a-convec.ads, a-coinve.ads, a-cobove.ads (Cursor'Read,\n\tCursor'Write): Declare in private part.\n\t(Reference_Type'Read, Reference_Type'Write): Ditto.\n\t(Constant_Reference_Type'Read, Constant_Reference_Type'Write): Ditto.\n\nFrom-SVN: r183418", "tree": {"sha": "b1fee48f14a9a5cc25d00c2a2db9351c395f6a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1fee48f14a9a5cc25d00c2a2db9351c395f6a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c24c853da7ea2106fe07213fdf1efd43b86bddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c24c853da7ea2106fe07213fdf1efd43b86bddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c24c853da7ea2106fe07213fdf1efd43b86bddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c24c853da7ea2106fe07213fdf1efd43b86bddf/comments", "author": null, "committer": null, "parents": [{"sha": "c61b6f0f3c7d3419603e9143a7065fefb3340247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61b6f0f3c7d3419603e9143a7065fefb3340247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61b6f0f3c7d3419603e9143a7065fefb3340247"}], "stats": {"total": 1097, "additions": 573, "deletions": 524}, "files": [{"sha": "b1ef51c04909669fcbe187f3d230c23825d129ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -1,3 +1,13 @@\n+2012-01-23  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cohase.ads, a-cihase.ads, a-cbhase.ads, a-coorse.ads,\n+\ta-ciorse.ads, a-cborse.ads, a-cohama.ads, a-cihama.ads, a-cbhama.ads,\n+\ta-coorma.ads, a-ciorma.ads, a-cborma.ads, a-cdlili.ads, a-cidlli.ads,\n+\ta-cbdlli.ads, a-convec.ads, a-coinve.ads, a-cobove.ads (Cursor'Read,\n+\tCursor'Write): Declare in private part.\n+\t(Reference_Type'Read, Reference_Type'Write): Ditto.\n+\t(Constant_Reference_Type'Read, Constant_Reference_Type'Write): Ditto.\n+\n 2012-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* a-catizo.ads, a-calend.adb, a-calend.ads, par-ch13.adb: Minor"}, {"sha": "a8a6ee228f1d0f785cc8f981ae88363c61d47b57", "filename": "gcc/ada/a-cbdlli.ads", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,9 +31,10 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Streams;\n+\n generic\n    type Element_Type is private;\n \n@@ -93,35 +94,11 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type\n      (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased List;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -270,6 +247,8 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n+   use Ada.Streams;\n+\n    type Node_Type is record\n       Prev    : Count_Type'Base;\n       Next    : Count_Type;\n@@ -324,9 +303,33 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n    Empty_List : constant List := (Capacity => 0, others => <>);\n \n    No_Element : constant Cursor := Cursor'(null, 0);"}, {"sha": "e4bba3332dedfc53a36286a23258511143854764", "filename": "gcc/ada/a-cbhama.ads", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Containers.Hash_Tables;\n-\n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Containers.Hash_Tables;\n+private with Ada.Streams;\n+\n generic\n    type Key_Type is private;\n    type Element_Type is private;\n@@ -140,34 +140,10 @@ package Ada.Containers.Bounded_Hashed_Maps is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -362,6 +338,7 @@ private\n       new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n \n    use HT_Types;\n+   use Ada.Streams;\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n@@ -404,12 +381,36 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n-   No_Element : constant Cursor := (Container => null, Node => 0);\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n \n    Empty_Map : constant Map :=\n      (Hash_Table_Type with Capacity => 0, Modulus => 0);\n \n+   No_Element : constant Cursor := (Container => null, Node => 0);\n+\n end Ada.Containers.Bounded_Hashed_Maps;"}, {"sha": "0befce62d1e0e0ac502044a4fa8e8c296c79673f", "filename": "gcc/ada/a-cbhase.ads", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n \n@@ -478,6 +479,18 @@ private\n    use HT_Types;\n    use Ada.Streams;\n \n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n+\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n@@ -504,20 +517,6 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := (Container => null, Node => 0);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n-\n-   for Set'Write use Write;\n-\n-   procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n-\n-   for Set'Read use Read;\n-\n    type Constant_Reference_Type\n      (Element : not null access constant Element_Type) is null record;\n \n@@ -536,4 +535,6 @@ private\n    Empty_Set : constant Set :=\n                  (Hash_Table_Type with Capacity => 0, Modulus => 0);\n \n+   No_Element : constant Cursor := (Container => null, Node => 0);\n+\n end Ada.Containers.Bounded_Hashed_Sets;"}, {"sha": "6ade3e6c4749ff0d82631265e5b118043a04fa2b", "filename": "gcc/ada/a-cborma.ads", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Containers.Red_Black_Trees;\n-\n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Containers.Red_Black_Trees;\n+private with Ada.Streams;\n+\n generic\n    type Key_Type is private;\n    type Element_Type is private;\n@@ -102,34 +102,10 @@ package Ada.Containers.Bounded_Ordered_Maps is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -269,11 +245,24 @@ private\n    type Map (Capacity : Count_Type) is\n      new Tree_Types.Tree_Type (Capacity) with null record;\n \n-   type Map_Access is access all Map;\n-   for Map_Access'Storage_Size use 0;\n-\n    use Red_Black_Trees;\n    use Tree_Types;\n+   use Ada.Streams;\n+\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Map);\n+\n+   for Map'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Map);\n+\n+   for Map'Read use Read;\n+\n+   type Map_Access is access all Map;\n+   for Map_Access'Storage_Size use 0;\n \n    type Cursor is record\n       Container : Map_Access;\n@@ -292,26 +281,38 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, 0);\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n \n    procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Map);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n \n-   for Map'Write use Write;\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n \n    procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Map);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n \n-   for Map'Read use Read;\n+   for Reference_Type'Read use Read;\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   for Reference_Type'Write use Write;\n \n    Empty_Map : constant Map := Map'(Tree_Type with Capacity => 0);\n \n+   No_Element : constant Cursor := Cursor'(null, 0);\n+\n end Ada.Containers.Bounded_Ordered_Maps;"}, {"sha": "162635773891f8b1baa3eb888da41203d026caf2", "filename": "gcc/ada/a-cborse.ads", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,10 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Containers.Red_Black_Trees;\n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Containers.Red_Black_Trees;\n+private with Ada.Streams;\n+\n generic\n    type Element_Type is private;\n \n@@ -60,6 +61,7 @@ package Ada.Containers.Bounded_Ordered_Sets is\n    Empty_Set : constant Set;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package Set_Iterator_Interfaces is new\n@@ -277,6 +279,8 @@ package Ada.Containers.Bounded_Ordered_Sets is\n       type Reference_Type\n          (Element : not null access Element_Type) is null record;\n \n+      use Ada.Streams;\n+\n       procedure Read\n         (Stream : not null access Root_Stream_Type'Class;\n          Item   : out Reference_Type);\n@@ -310,6 +314,21 @@ private\n    type Set (Capacity : Count_Type) is\n      new Tree_Types.Tree_Type (Capacity) with null record;\n \n+   use Tree_Types;\n+   use Ada.Streams;\n+\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n+\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n@@ -324,8 +343,6 @@ private\n       Node      : Count_Type := 0;\n    end record;\n \n-   use Tree_Types;\n-\n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : Cursor);\n@@ -338,20 +355,6 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, 0);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n-\n-   for Set'Write use Write;\n-\n-   procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n-\n-   for Set'Read use Read;\n-\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n@@ -369,4 +372,6 @@ private\n \n    Empty_Set : constant Set := Set'(Tree_Type with Capacity => 0);\n \n+   No_Element : constant Cursor := Cursor'(null, 0);\n+\n end Ada.Containers.Bounded_Ordered_Sets;"}, {"sha": "ae9ae6b625ae8dd4c390baf10209d1e758e41eae", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Finalization;\n-\n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Finalization;\n+private with Ada.Streams;\n+\n generic\n    type Element_Type is private;\n \n@@ -61,6 +61,7 @@ package Ada.Containers.Doubly_Linked_Lists is\n    Empty_List : constant List;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package List_Iterator_Interfaces is new\n@@ -95,35 +96,11 @@ package Ada.Containers.Doubly_Linked_Lists is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type\n      (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased List;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -280,6 +257,7 @@ private\n       end record;\n \n    use Ada.Finalization;\n+   use Ada.Streams;\n \n    type List is\n      new Controlled with record\n@@ -330,9 +308,33 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n    Empty_List : constant List := (Controlled with null, null, 0, 0, 0);\n \n    No_Element : constant Cursor := Cursor'(null, null);"}, {"sha": "37886e1538fb4491e7f58b7ae578a43004a82314", "filename": "gcc/ada/a-cidlli.ads", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,9 +32,9 @@\n ------------------------------------------------------------------------------\n \n with Ada.Iterator_Interfaces;\n-with Ada.Streams;             use Ada.Streams;\n \n private with Ada.Finalization;\n+private with Ada.Streams;\n \n generic\n    type Element_Type (<>) is private;\n@@ -95,35 +95,11 @@ package Ada.Containers.Indefinite_Doubly_Linked_Lists is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type\n      (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased List;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -275,6 +251,7 @@ private\n       end record;\n \n    use Ada.Finalization;\n+   use Ada.Streams;\n \n    type List is\n      new Controlled with record\n@@ -285,12 +262,6 @@ private\n         Lock   : Natural := 0;\n      end record;\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n-\n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n-\n    overriding procedure Adjust (Container : in out List);\n \n    overriding procedure Finalize (Container : in out List) renames Clear;\n@@ -328,6 +299,36 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n    Empty_List : constant List := List'(Controlled with null, null, 0, 0, 0);\n \n    No_Element : constant Cursor := Cursor'(null, null);"}, {"sha": "f2158fdc79c4e716a5103ce9955ec79e63e9b67c", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,10 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n-with Ada.Streams; use Ada.Streams;\n-with Ada.Iterator_Interfaces;\n+private with Ada.Streams;\n \n generic\n    type Key_Type (<>) is private;\n@@ -139,34 +140,10 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -346,11 +323,25 @@ private\n       HT : HT_Types.Hash_Table_Type;\n    end record;\n \n+   overriding procedure Adjust   (Container : in out Map);\n+\n+   overriding procedure Finalize (Container : in out Map);\n+\n    use HT_Types;\n    use Ada.Finalization;\n+   use Ada.Streams;\n \n-   overriding procedure Adjust   (Container : in out Map);\n-   overriding procedure Finalize (Container : in out Map);\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Map);\n+\n+   for Map'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Map);\n+\n+   for Map'Read use Read;\n \n    type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n@@ -366,34 +357,44 @@ private\n \n    for Cursor'Write use Write;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Cursor);\n+      Item   : out Constant_Reference_Type);\n \n-   for Cursor'Read use Read;\n+   for Constant_Reference_Type'Read use Read;\n \n-   No_Element : constant Cursor :=\n-     (Container => null,\n-      Node      => null);\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n \n    procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Map);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n \n-   for Map'Write use Write;\n+   for Reference_Type'Write use Write;\n \n    procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Map);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n \n-   for Map'Read use Read;\n+   for Reference_Type'Read use Read;\n \n    Empty_Map : constant Map := (Controlled with HT => (null, 0, 0, 0));\n \n+   No_Element : constant Cursor := (Container => null, Node => null);\n+\n end Ada.Containers.Indefinite_Hashed_Maps;"}, {"sha": "f361830b78bcef853324305fe728eb1a890d901b", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n@@ -474,6 +475,18 @@ private\n    use Ada.Finalization;\n    use Ada.Streams;\n \n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n+\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n@@ -494,20 +507,6 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := (Container => null, Node => null);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n-\n-   for Set'Write use Write;\n-\n-   procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n-\n-   for Set'Read use Read;\n-\n    type Constant_Reference_Type\n      (Element : not null access constant Element_Type) is null record;\n \n@@ -525,4 +524,6 @@ private\n \n    Empty_Set : constant Set := (Controlled with HT => (null, 0, 0, 0));\n \n+   No_Element : constant Cursor := (Container => null, Node => null);\n+\n end Ada.Containers.Indefinite_Hashed_Sets;"}, {"sha": "7599b3e6dbbeec866f0fed0d3bdbb708bfb73348", "filename": "gcc/ada/a-ciorma.ads", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n@@ -259,6 +260,18 @@ private\n    use Ada.Finalization;\n    use Ada.Streams;\n \n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Map);\n+\n+   for Map'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Map);\n+\n+   for Map'Read use Read;\n+\n    type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n \n@@ -279,20 +292,6 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, null);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Map);\n-\n-   for Map'Write use Write;\n-\n-   procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Map);\n-\n-   for Map'Read use Read;\n-\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n@@ -331,4 +330,6 @@ private\n                                            Busy   => 0,\n                                            Lock   => 0));\n \n+   No_Element : constant Cursor := Cursor'(null, null);\n+\n end Ada.Containers.Indefinite_Ordered_Maps;"}, {"sha": "aa16272ed11f6b0f9740b1c1ecb2f5f953b93ec3", "filename": "gcc/ada/a-ciorse.ads", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,10 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n-with Ada.Streams; use Ada.Streams;\n-with Ada.Iterator_Interfaces;\n+private with Ada.Streams;\n \n generic\n    type Element_Type (<>) is private;\n@@ -99,18 +100,6 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    procedure Assign (Target : in out Set; Source : Set);\n \n    function Copy (Source : Set) return Set;\n@@ -306,6 +295,8 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n       type Reference_Type\n          (Element : not null access Element_Type) is null record;\n \n+      use Ada.Streams;\n+\n       procedure Write\n         (Stream : not null access Root_Stream_Type'Class;\n          Item   : Reference_Type);\n@@ -351,6 +342,19 @@ private\n    use Red_Black_Trees;\n    use Tree_Types;\n    use Ada.Finalization;\n+   use Ada.Streams;\n+\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n \n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n@@ -372,22 +376,20 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, null);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n-\n-   for Set'Write use Write;\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n \n    procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n \n-   for Set'Read use Read;\n+   for Constant_Reference_Type'Read use Read;\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n \n    Empty_Set : constant Set :=\n                  (Controlled with Tree => (First  => null,\n@@ -397,4 +399,6 @@ private\n                                            Busy   => 0,\n                                            Lock   => 0));\n \n+   No_Element : constant Cursor := Cursor'(null, null);\n+\n end Ada.Containers.Indefinite_Ordered_Sets;"}, {"sha": "932aafb886b9052f69af802584a25a2b56fc7de4", "filename": "gcc/ada/a-cobove.ads", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,9 +31,10 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Streams;\n+\n generic\n    type Index_Type is range <>;\n    type Element_Type is private;\n@@ -64,6 +65,7 @@ package Ada.Containers.Bounded_Vectors is\n    Empty_Vector : constant Vector;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package Vector_Iterator_Interfaces is new\n@@ -148,34 +150,10 @@ package Ada.Containers.Bounded_Vectors is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n    function Constant_Reference\n      (Container : aliased Vector;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -385,6 +363,8 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n+   use Ada.Streams;\n+\n    type Elements_Array is array (Count_Type range <>) of aliased Element_Type;\n    function \"=\" (L, R : Elements_Array) return Boolean is abstract;\n \n@@ -430,9 +410,33 @@ private\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n    Empty_Vector : constant Vector := (Capacity => 0, others => <>);\n \n    No_Element : constant Cursor := Cursor'(null, Index_Type'First);"}, {"sha": "6550b46a1a1f20e34d8fc092daa4601494a6477a", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n-\n-with Ada.Streams; use Ada.Streams;\n-with Ada.Iterator_Interfaces;\n+private with Ada.Streams;\n \n generic\n    type Key_Type is private;\n@@ -61,18 +61,6 @@ package Ada.Containers.Hashed_Maps is\n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Cursor);\n-\n-   for Cursor'Write use Write;\n-\n    Empty_Map : constant Map;\n    --  Map objects declared without an initialization expression are\n    --  initialized to the value Empty_Map.\n@@ -153,34 +141,10 @@ package Ada.Containers.Hashed_Maps is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased Map;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -365,13 +329,14 @@ private\n       HT : HT_Types.Hash_Table_Type;\n    end record;\n \n-   use HT_Types;\n-   use Ada.Finalization;\n-\n    overriding procedure Adjust (Container : in out Map);\n \n    overriding procedure Finalize (Container : in out Map);\n \n+   use HT_Types;\n+   use Ada.Finalization;\n+   use Ada.Streams;\n+\n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n       Container : Map);\n@@ -392,12 +357,48 @@ private\n       Node      : Node_Access;\n    end record;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n    Empty_Map : constant Map := (Controlled with HT => (null, 0, 0, 0));\n \n    No_Element : constant Cursor := (Container => null, Node => null);"}, {"sha": "88b5f4bfb43c6cc9ba8dbe6027d865109ddb5e74", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,6 +32,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n@@ -476,6 +477,18 @@ private\n    use Ada.Finalization;\n    use Ada.Streams;\n \n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n+\n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n \n@@ -496,20 +509,6 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := (Container => null, Node => null);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n-\n-   for Set'Write use Write;\n-\n-   procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n-\n-   for Set'Read use Read;\n-\n    type Constant_Reference_Type\n      (Element : not null access constant Element_Type) is null record;\n \n@@ -527,4 +526,6 @@ private\n \n    Empty_Set : constant Set := (Controlled with HT => (null, 0, 0, 0));\n \n+   No_Element : constant Cursor := (Container => null, Node => null);\n+\n end Ada.Containers.Hashed_Sets;"}, {"sha": "e060c0cb038e78cbf306e3457010ca18b75fcd59", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 51, "deletions": 49, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Finalization;\n-\n-with Ada.Streams; use Ada.Streams;\n with Ada.Iterator_Interfaces;\n \n+private with Ada.Finalization;\n+private with Ada.Streams;\n+\n generic\n    type Index_Type is range <>;\n    type Element_Type (<>) is private;\n@@ -67,19 +67,8 @@ package Ada.Containers.Indefinite_Vectors is\n    Empty_Vector : constant Vector;\n \n    No_Element : constant Cursor;\n-   function Has_Element (Position : Cursor) return Boolean;\n-\n-   procedure Read\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n-   procedure Write\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : Cursor);\n \n-   for Cursor'Write use Write;\n+   function Has_Element (Position : Cursor) return Boolean;\n \n    package Vector_Iterator_Interfaces is new\n      Ada.Iterator_Interfaces (Cursor, Has_Element);\n@@ -121,34 +110,10 @@ package Ada.Containers.Indefinite_Vectors is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased Vector;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -397,25 +362,20 @@ private\n \n    type Elements_Access is access Elements_Type;\n \n-   use Ada.Finalization;\n-\n-   type Vector is new Controlled with record\n+   type Vector is new Ada.Finalization.Controlled with record\n       Elements : Elements_Access;\n       Last     : Extended_Index := No_Index;\n       Busy     : Natural := 0;\n       Lock     : Natural := 0;\n    end record;\n \n-   type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n-\n-   type Reference_Type\n-     (Element : not null access Element_Type) is null record;\n-\n    overriding procedure Adjust (Container : in out Vector);\n \n    overriding procedure Finalize (Container : in out Vector);\n \n+   use Ada.Finalization;\n+   use Ada.Streams;\n+\n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n       Container : Vector);\n@@ -436,6 +396,48 @@ private\n       Index     : Index_Type := Index_Type'First;\n    end record;\n \n+   procedure Read\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type\n+     (Element : not null access Element_Type) is null record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n    Empty_Vector : constant Vector := (Controlled with null, No_Index, 0, 0);\n \n    No_Element : constant Cursor := Cursor'(null, Index_Type'First);"}, {"sha": "6ed39a404502efd52b102bf48e774e13ee237833", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 52, "deletions": 47, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,9 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n-private with Ada.Finalization;\n-with Ada.Streams;\n with Ada.Iterator_Interfaces;\n+\n+private with Ada.Finalization;\n+private with Ada.Streams;\n+\n generic\n    type Index_Type is range <>;\n    type Element_Type is private;\n@@ -43,7 +45,6 @@ generic\n package Ada.Containers.Vectors is\n    pragma Preelaborate;\n    pragma Remote_Types;\n-   use Ada.Streams;\n \n    subtype Extended_Index is Index_Type'Base\n      range Index_Type'First - 1 ..\n@@ -61,21 +62,11 @@ package Ada.Containers.Vectors is\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n+\n    No_Element : constant Cursor;\n \n    function Has_Element (Position : Cursor) return Boolean;\n \n-   procedure Read\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n-   procedure Write\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : Cursor);\n-   for Cursor'Write use Write;\n-\n    package Vector_Iterator_Interfaces is new\n       Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n@@ -160,34 +151,10 @@ package Ada.Containers.Vectors is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    type Reference_Type (Element : not null access Element_Type) is private\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Reference_Type);\n-\n-   for Reference_Type'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Reference_Type);\n-\n-   for Reference_Type'Read use Read;\n-\n    function Constant_Reference\n      (Container : aliased Vector;\n       Position  : Cursor) return Constant_Reference_Type;\n@@ -404,6 +371,7 @@ private\n    type Elements_Access is access Elements_Type;\n \n    use Ada.Finalization;\n+   use Ada.Streams;\n \n    type Vector is new Controlled with record\n       Elements : Elements_Access;\n@@ -412,13 +380,9 @@ private\n       Lock     : Natural := 0;\n    end record;\n \n-   type Vector_Access is access all Vector;\n-   for Vector_Access'Storage_Size use 0;\n+   overriding procedure Adjust (Container : in out Vector);\n \n-   type Cursor is record\n-      Container : Vector_Access;\n-      Index     : Index_Type := Index_Type'First;\n-   end record;\n+   overriding procedure Finalize (Container : in out Vector);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n@@ -432,17 +396,58 @@ private\n \n    for Vector'Read use Read;\n \n+   type Vector_Access is access all Vector;\n+   for Vector_Access'Storage_Size use 0;\n+\n+   type Cursor is record\n+      Container : Vector_Access;\n+      Index     : Index_Type := Index_Type'First;\n+   end record;\n+\n+   procedure Read\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n    type Constant_Reference_Type\n       (Element : not null access constant Element_Type) is null record;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n \n-   overriding procedure Adjust (Container : in out Vector);\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n \n-   overriding procedure Finalize (Container : in out Vector);\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n \n    No_Element   : constant Cursor := Cursor'(null, Index_Type'First);\n+\n    Empty_Vector : constant Vector := (Controlled with null, No_Index, 0, 0);\n \n end Ada.Containers.Vectors;"}, {"sha": "61a762ea1894cbcaf4e49bba5e281385229288e5", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n-\n-with Ada.Streams; use Ada.Streams;\n-with Ada.Iterator_Interfaces;\n+private with Ada.Streams;\n \n generic\n    type Key_Type is private;\n@@ -259,6 +259,19 @@ private\n    use Red_Black_Trees;\n    use Tree_Types;\n    use Ada.Finalization;\n+   use Ada.Streams;\n+\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Map);\n+\n+   for Map'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Map);\n+\n+   for Map'Read use Read;\n \n    type Map_Access is access all Map;\n    for Map_Access'Storage_Size use 0;\n@@ -280,22 +293,20 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, null);\n-\n-   procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Map);\n-\n-   for Map'Write use Write;\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n \n    procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Map);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n \n-   for Map'Read use Read;\n+   for Constant_Reference_Type'Read use Read;\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n \n    type Reference_Type\n       (Element : not null access Element_Type) is null record;\n@@ -312,23 +323,14 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    Empty_Map : constant Map :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,\n                                            Root   => null,\n                                            Length => 0,\n                                            Busy   => 0,\n                                            Lock   => 0));\n+\n+   No_Element : constant Cursor := Cursor'(null, null);\n+\n end Ada.Containers.Ordered_Maps;"}, {"sha": "540da1a697d057aa42f97bbc20753ec29c9e4cda", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c24c853da7ea2106fe07213fdf1efd43b86bddf/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=3c24c853da7ea2106fe07213fdf1efd43b86bddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -31,11 +31,11 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n+\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n-\n-with Ada.Streams; use Ada.Streams;\n-with Ada.Iterator_Interfaces;\n+private with Ada.Streams;\n \n generic\n    type Element_Type is private;\n@@ -97,22 +97,10 @@ package Ada.Containers.Ordered_Sets is\n    with\n       Implicit_Dereference => Element;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Write use Write;\n-\n    function Constant_Reference\n      (Container : aliased Set;\n       Position  : Cursor) return Constant_Reference_Type;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Constant_Reference_Type);\n-\n-   for Constant_Reference_Type'Read use Read;\n-\n    procedure Assign (Target : in out Set; Source : Set);\n \n    function Copy (Source : Set) return Set;\n@@ -292,6 +280,8 @@ package Ada.Containers.Ordered_Sets is\n       type Reference_Type\n          (Element : not null access Element_Type) is null record;\n \n+      use Ada.Streams;\n+\n       procedure Write\n         (Stream : not null access Root_Stream_Type'Class;\n          Item   : Reference_Type);\n@@ -335,6 +325,19 @@ private\n    use Red_Black_Trees;\n    use Tree_Types;\n    use Ada.Finalization;\n+   use Ada.Streams;\n+\n+   procedure Write\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : Set);\n+\n+   for Set'Write use Write;\n+\n+   procedure Read\n+     (Stream    : not null access Root_Stream_Type'Class;\n+      Container : out Set);\n+\n+   for Set'Read use Read;\n \n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n@@ -356,22 +359,20 @@ private\n \n    for Cursor'Read use Read;\n \n-   No_Element : constant Cursor := Cursor'(null, null);\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n \n    procedure Write\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : Set);\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n \n-   for Set'Write use Write;\n+   for Constant_Reference_Type'Write use Write;\n \n    procedure Read\n-     (Stream    : not null access Root_Stream_Type'Class;\n-      Container : out Set);\n-\n-   for Set'Read use Read;\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+   for Constant_Reference_Type'Read use Read;\n \n    Empty_Set : constant Set :=\n                  (Controlled with Tree => (First  => null,\n@@ -381,4 +382,6 @@ private\n                                            Busy   => 0,\n                                            Lock   => 0));\n \n+   No_Element : constant Cursor := Cursor'(null, null);\n+\n end Ada.Containers.Ordered_Sets;"}]}