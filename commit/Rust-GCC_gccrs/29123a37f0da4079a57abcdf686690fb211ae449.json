{"sha": "29123a37f0da4079a57abcdf686690fb211ae449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxMjNhMzdmMGRhNDA3OWE1N2FiY2RmNjg2NjkwZmIyMTFhZTQ0OQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-04-01T19:59:12Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-04-01T19:59:12Z"}, "message": "BitSet.java (BitSet(int)): if nbits < 0 throw NegativeArraySizeException\n\n        * java/util/BitSet.java (BitSet(int)): if nbits < 0 throw\n        NegativeArraySizeException\n        (clear(int)): Use sign extended shift.\n        (flip(int)): Likewise.\n        (get(int)): Likewise.\n        (nextClearBit(int)): Likewise.\n        (nextSetBit(int)): Likewise.\n        (set(int)): Likewise.\n\nFrom-SVN: r51701", "tree": {"sha": "dd78a28210495cf93b4cbf88f1547c8e3b0c1691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd78a28210495cf93b4cbf88f1547c8e3b0c1691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29123a37f0da4079a57abcdf686690fb211ae449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29123a37f0da4079a57abcdf686690fb211ae449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29123a37f0da4079a57abcdf686690fb211ae449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29123a37f0da4079a57abcdf686690fb211ae449/comments", "author": null, "committer": null, "parents": [{"sha": "bcf88f9b91e911d01ba43026f15eaa4858e23e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf88f9b91e911d01ba43026f15eaa4858e23e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf88f9b91e911d01ba43026f15eaa4858e23e4c"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "4fe72e6e7ea934ba8ef31d323b13b2919ccab54b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29123a37f0da4079a57abcdf686690fb211ae449/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29123a37f0da4079a57abcdf686690fb211ae449/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=29123a37f0da4079a57abcdf686690fb211ae449", "patch": "@@ -1,3 +1,14 @@\n+2002-04-01  Mark Wielaard  <mark@klomp.org>\n+\n+        * java/util/BitSet.java (BitSet(int)): if nbits < 0 throw\n+        NegativeArraySizeException\n+        (clear(int)): Use sign extended shift.\n+        (flip(int)): Likewise.\n+        (get(int)): Likewise.\n+        (nextClearBit(int)): Likewise.\n+        (nextSetBit(int)): Likewise.\n+        (set(int)): Likewise.\n+\n 2002-04-01  Mark Wielaard  <mark@klomp.org>\n \n \t* mauve-libgcj: Add JDK1.3, JDK1.4, JLS1.2 tests, remove ignored tests"}, {"sha": "38a9be08994fbb5a5a25373857e57497c1b78eb8", "filename": "libjava/java/util/BitSet.java", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29123a37f0da4079a57abcdf686690fb211ae449/libjava%2Fjava%2Futil%2FBitSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29123a37f0da4079a57abcdf686690fb211ae449/libjava%2Fjava%2Futil%2FBitSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FBitSet.java?ref=29123a37f0da4079a57abcdf686690fb211ae449", "patch": "@@ -102,6 +102,9 @@ public BitSet()\n    */\n   public BitSet(int nbits)\n   {\n+    if (nbits < 0)\n+      throw new NegativeArraySizeException();\n+    \n     int length = nbits >>> 6;\n     if ((nbits & LONG_MASK) != 0)\n       ++length;\n@@ -195,7 +198,7 @@ public void clear()\n    */\n   public void clear(int pos)\n   {\n-    int offset = pos >>> 6;\n+    int offset = pos >> 6;\n     ensure(offset);\n     // ArrayIndexOutOfBoundsException subclasses IndexOutOfBoundsException,\n     // so we'll just let that be our exception.\n@@ -289,7 +292,7 @@ public boolean equals(Object obj)\n    */\n   public void flip(int index)\n   {\n-    int offset = index >>> 6;\n+    int offset = index >> 6;\n     ensure(offset);\n     // ArrayIndexOutOfBoundsException subclasses IndexOutOfBoundsException,\n     // so we'll just let that be our exception.\n@@ -335,7 +338,7 @@ public void flip(int from, int to)\n    */\n   public boolean get(int pos)\n   {\n-    int offset = pos >>> 6;\n+    int offset = pos >> 6;\n     if (offset >= bits.length)\n       return false;\n     // ArrayIndexOutOfBoundsException subclasses IndexOutOfBoundsException,\n@@ -498,7 +501,7 @@ public int length()\n    */\n   public int nextClearBit(int from)\n   {\n-    int offset = from >>> 6;\n+    int offset = from >> 6;\n     long mask = 1L << from;\n     while (offset < bits.length)\n       {\n@@ -535,7 +538,7 @@ public int nextClearBit(int from)\n    */\n   public int nextSetBit(int from)\n   {\n-    int offset = from >>> 6;\n+    int offset = from >> 6;\n     long mask = 1L << from;\n     while (offset < bits.length)\n       {\n@@ -583,7 +586,7 @@ public void or(BitSet bs)\n    */\n   public void set(int pos)\n   {\n-    int offset = pos >>> 6;\n+    int offset = pos >> 6;\n     ensure(offset);\n     // ArrayIndexOutOfBoundsException subclasses IndexOutOfBoundsException,\n     // so we'll just let that be our exception."}]}