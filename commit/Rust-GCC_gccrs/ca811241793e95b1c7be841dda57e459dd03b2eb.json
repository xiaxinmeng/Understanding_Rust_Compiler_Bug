{"sha": "ca811241793e95b1c7be841dda57e459dd03b2eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4MTEyNDE3OTNlOTViMWM3YmU4NDFkZGE1N2U0NTlkZDAzYjJlYg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2015-05-22T10:36:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T10:36:56Z"}, "message": "exp_utils.ads, [...] (Find_Optional_Prim_Op): New interface to return Empty when not found...\n\n2015-05-22  Bob Duff  <duff@adacore.com>\n\n\t* exp_utils.ads, exp_utils.adb (Find_Optional_Prim_Op): New\n\tinterface to return Empty when not found, so we can avoid handling\n\tProgram_Error in that case.\n\t(Find_Prim_Op): Fix latent bug: raise Program_Error when there are no\n\tprimitives.\n\t* exp_ch7.adb, sem_util.adb: Use Find_Optional_Prim_Op when the\n\tcode is expecting Empty.\n\t* sem_ch8.adb: Use Find_Optional_Prim_Op to avoid handling\n\tProgram_Error.\n\nFrom-SVN: r223541", "tree": {"sha": "649f3ba91b6b3b3ce8a2e5c37a6b94d090f1caf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649f3ba91b6b3b3ce8a2e5c37a6b94d090f1caf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca811241793e95b1c7be841dda57e459dd03b2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca811241793e95b1c7be841dda57e459dd03b2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca811241793e95b1c7be841dda57e459dd03b2eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca811241793e95b1c7be841dda57e459dd03b2eb/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a95f708ec32470ae773950928c3fb1962d0ec86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95f708ec32470ae773950928c3fb1962d0ec86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95f708ec32470ae773950928c3fb1962d0ec86e"}], "stats": {"total": 197, "additions": 117, "deletions": 80}, "files": [{"sha": "3174cf1f0411aaab60751cb568a394834a4aafb3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -1,3 +1,15 @@\n+2015-05-22  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_utils.ads, exp_utils.adb (Find_Optional_Prim_Op): New\n+\tinterface to return Empty when not found, so we can avoid handling\n+\tProgram_Error in that case.\n+\t(Find_Prim_Op): Fix latent bug: raise Program_Error when there are no\n+\tprimitives.\n+\t* exp_ch7.adb, sem_util.adb: Use Find_Optional_Prim_Op when the\n+\tcode is expecting Empty.\n+\t* sem_ch8.adb: Use Find_Optional_Prim_Op to avoid handling\n+\tProgram_Error.\n+\n 2015-05-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_intr.adb, exp_ch4.adb, s-rannum.adb,"}, {"sha": "661809c88c81dfd04b993970191763b2042b54da", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -2406,7 +2406,7 @@ package body Exp_Ch7 is\n                   --  Primitive Initialize\n \n                   if Is_Controlled (Typ) then\n-                     Prim_Init := Find_Prim_Op (Typ, Name_Initialize);\n+                     Prim_Init := Find_Optional_Prim_Op (Typ, Name_Initialize);\n \n                      if Present (Prim_Init) then\n                         Prim_Init := Ultimate_Alias (Prim_Init);\n@@ -3671,7 +3671,7 @@ package body Exp_Ch7 is\n          --  is from a private type that is not visibly controlled.\n \n          Parent_Type := Etype (Typ);\n-         Op := Find_Prim_Op (Parent_Type, Name_Of (Prim));\n+         Op := Find_Optional_Prim_Op (Parent_Type, Name_Of (Prim));\n \n          if Present (Op) then\n             E := Op;\n@@ -5104,7 +5104,7 @@ package body Exp_Ch7 is\n       if Skip_Self then\n          if Has_Controlled_Component (Utyp) then\n             if Is_Tagged_Type (Utyp) then\n-               Adj_Id := Find_Prim_Op (Utyp, TSS_Deep_Adjust);\n+               Adj_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Adjust);\n             else\n                Adj_Id := TSS (Utyp, TSS_Deep_Adjust);\n             end if;\n@@ -5117,7 +5117,7 @@ package body Exp_Ch7 is\n         or else Has_Controlled_Component (Utyp)\n       then\n          if Is_Tagged_Type (Utyp) then\n-            Adj_Id := Find_Prim_Op (Utyp, TSS_Deep_Adjust);\n+            Adj_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Adjust);\n          else\n             Adj_Id := TSS (Utyp, TSS_Deep_Adjust);\n          end if;\n@@ -5126,15 +5126,15 @@ package body Exp_Ch7 is\n \n       elsif Is_Controlled (Utyp) then\n          if Has_Controlled_Component (Utyp) then\n-            Adj_Id := Find_Prim_Op (Utyp, TSS_Deep_Adjust);\n+            Adj_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Adjust);\n          else\n-            Adj_Id := Find_Prim_Op (Utyp, Name_Of (Adjust_Case));\n+            Adj_Id := Find_Optional_Prim_Op (Utyp, Name_Of (Adjust_Case));\n          end if;\n \n       --  Tagged types\n \n       elsif Is_Tagged_Type (Utyp) then\n-         Adj_Id := Find_Prim_Op (Utyp, TSS_Deep_Adjust);\n+         Adj_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Adjust);\n \n       else\n          raise Program_Error;\n@@ -6491,7 +6491,7 @@ package body Exp_Ch7 is\n                Proc     : Entity_Id;\n \n             begin\n-               Proc := Find_Prim_Op (Typ, Name_Adjust);\n+               Proc := Find_Optional_Prim_Op (Typ, Name_Adjust);\n \n                --  Generate:\n                --    if F then\n@@ -7065,7 +7065,7 @@ package body Exp_Ch7 is\n                Proc     : Entity_Id;\n \n             begin\n-               Proc := Find_Prim_Op (Typ, Name_Finalize);\n+               Proc := Find_Optional_Prim_Op (Typ, Name_Finalize);\n \n                --  Generate:\n                --    if F then\n@@ -7336,7 +7336,7 @@ package body Exp_Ch7 is\n       if Skip_Self then\n          if Has_Controlled_Component (Utyp) then\n             if Is_Tagged_Type (Utyp) then\n-               Fin_Id := Find_Prim_Op (Utyp, TSS_Deep_Finalize);\n+               Fin_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Finalize);\n             else\n                Fin_Id := TSS (Utyp, TSS_Deep_Finalize);\n             end if;\n@@ -7349,7 +7349,7 @@ package body Exp_Ch7 is\n         or else Has_Controlled_Component (Utyp)\n       then\n          if Is_Tagged_Type (Utyp) then\n-            Fin_Id := Find_Prim_Op (Utyp, TSS_Deep_Finalize);\n+            Fin_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Finalize);\n          else\n             Fin_Id := TSS (Utyp, TSS_Deep_Finalize);\n          end if;\n@@ -7358,15 +7358,15 @@ package body Exp_Ch7 is\n \n       elsif Is_Controlled (Utyp) then\n          if Has_Controlled_Component (Utyp) then\n-            Fin_Id := Find_Prim_Op (Utyp, TSS_Deep_Finalize);\n+            Fin_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Finalize);\n          else\n-            Fin_Id := Find_Prim_Op (Utyp, Name_Of (Finalize_Case));\n+            Fin_Id := Find_Optional_Prim_Op (Utyp, Name_Of (Finalize_Case));\n          end if;\n \n       --  Tagged types\n \n       elsif Is_Tagged_Type (Utyp) then\n-         Fin_Id := Find_Prim_Op (Utyp, TSS_Deep_Finalize);\n+         Fin_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Finalize);\n \n       else\n          raise Program_Error;"}, {"sha": "2aa6e970a4ddca52cff929bc3dadb3b29e532d64", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -2624,11 +2624,13 @@ package body Exp_Util is\n       end if;\n    end Find_Interface_Tag;\n \n-   ------------------\n-   -- Find_Prim_Op --\n-   ------------------\n+   ---------------------------\n+   -- Find_Optional_Prim_Op --\n+   ---------------------------\n \n-   function Find_Prim_Op (T : Entity_Id; Name : Name_Id) return Entity_Id is\n+   function Find_Optional_Prim_Op\n+     (T : Entity_Id; Name : Name_Id) return Entity_Id\n+   is\n       Prim : Elmt_Id;\n       Typ  : Entity_Id := T;\n       Op   : Entity_Id;\n@@ -2657,25 +2659,16 @@ package body Exp_Util is\n                or else Etype (First_Formal (Op)) = Etype (Last_Formal (Op)));\n \n          Next_Elmt (Prim);\n-\n-         --  Raise Program_Error if no primitive found. ???This doesn't work as\n-         --  advertised if there are no primitives. But fixing that breaks\n-         --  Is_Init_Proc_Of in Exp_Ch7, which is expecting Empty in some\n-         --  cases.\n-\n-         if No (Prim) then\n-            raise Program_Error;\n-         end if;\n       end loop;\n \n-      return Node (Prim);\n-   end Find_Prim_Op;\n+      return Node (Prim); -- Empty if not found\n+   end Find_Optional_Prim_Op;\n \n-   ------------------\n-   -- Find_Prim_Op --\n-   ------------------\n+   ---------------------------\n+   -- Find_Optional_Prim_Op --\n+   ---------------------------\n \n-   function Find_Prim_Op\n+   function Find_Optional_Prim_Op\n      (T    : Entity_Id;\n       Name : TSS_Name_Type) return Entity_Id\n    is\n@@ -2715,8 +2708,41 @@ package body Exp_Util is\n       elsif Present (Inher_Op) then\n          return Inher_Op;\n       else\n+         return Empty;\n+      end if;\n+   end Find_Optional_Prim_Op;\n+\n+   ------------------\n+   -- Find_Prim_Op --\n+   ------------------\n+\n+   function Find_Prim_Op\n+     (T : Entity_Id; Name : Name_Id) return Entity_Id\n+   is\n+      Result : constant Entity_Id := Find_Optional_Prim_Op (T, Name);\n+   begin\n+      if No (Result) then\n          raise Program_Error;\n       end if;\n+\n+      return Result;\n+   end Find_Prim_Op;\n+\n+   ------------------\n+   -- Find_Prim_Op --\n+   ------------------\n+\n+   function Find_Prim_Op\n+     (T    : Entity_Id;\n+      Name : TSS_Name_Type) return Entity_Id\n+   is\n+      Result : constant Entity_Id := Find_Optional_Prim_Op (T, Name);\n+   begin\n+      if No (Result) then\n+         raise Program_Error;\n+      end if;\n+\n+      return Result;\n    end Find_Prim_Op;\n \n    ----------------------------"}, {"sha": "01f43777c432855d8599e657ae54402b297e830d", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -471,9 +471,8 @@ package Exp_Util is\n    --  Find the first primitive operation of a tagged type T with name Name.\n    --  This function allows the use of a primitive operation which is not\n    --  directly visible. If T is a class wide type, then the reference is to an\n-   --  operation of the corresponding root type. Raises Program_Error exception\n-   --  if no primitive operation is found. This is normally an internal error,\n-   --  but in some cases is an expected consequence of illegalities elsewhere.\n+   --  operation of the corresponding root type. It is an error if no primitive\n+   --  operation with the given name is found.\n \n    function Find_Prim_Op\n      (T    : Entity_Id;\n@@ -483,16 +482,19 @@ package Exp_Util is\n    --  with the indicated suffix). This function allows use of a primitive\n    --  operation which is not directly visible. If T is a class wide type,\n    --  then the reference is to an operation of the corresponding root type.\n-   --  Raises Program_Error exception if no primitive operation is found.\n-   --  This is normally an internal error, but in some cases is an expected\n-   --  consequence of illegalities elsewhere.\n+\n+   function Find_Optional_Prim_Op\n+     (T : Entity_Id; Name : Name_Id) return Entity_Id;\n+   function Find_Optional_Prim_Op\n+     (T    : Entity_Id;\n+      Name : TSS_Name_Type) return Entity_Id;\n+   --  Same as Find_Prim_Op, except returns Empty if not found\n \n    function Find_Protection_Object (Scop : Entity_Id) return Entity_Id;\n-   --  Traverse the scope stack starting from Scop and look for an entry,\n-   --  entry family, or a subprogram that has a Protection_Object and return\n-   --  it. Raises Program_Error if no such entity is found since the context\n-   --  in which this routine is invoked should always have a protection\n-   --  object.\n+   --  Traverse the scope stack starting from Scop and look for an entry, entry\n+   --  family, or a subprogram that has a Protection_Object and return it. Must\n+   --  always return a value since the context in which this routine is invoked\n+   --  should always have a protection object.\n \n    function Find_Protection_Type (Conc_Typ : Entity_Id) return Entity_Id;\n    --  Given a protected type or its corresponding record, find the type of"}, {"sha": "d3784f8589c6e1bdd28b74482f06b2faa1f95157", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -2639,45 +2639,42 @@ package body Sem_Ch8 is\n                --  an abstract formal subprogram must be dispatching\n                --  operation).\n \n-               begin\n-                  case Attribute_Name (Nam) is\n-                     when Name_Input  =>\n-                        Stream_Prim :=\n-                          Find_Prim_Op (Prefix_Type, TSS_Stream_Input);\n-                     when Name_Output =>\n-                        Stream_Prim :=\n-                          Find_Prim_Op (Prefix_Type, TSS_Stream_Output);\n-                     when Name_Read   =>\n-                        Stream_Prim :=\n-                          Find_Prim_Op (Prefix_Type, TSS_Stream_Read);\n-                     when Name_Write  =>\n-                        Stream_Prim :=\n-                          Find_Prim_Op (Prefix_Type, TSS_Stream_Write);\n-                     when others      =>\n-                        Error_Msg_N\n-                          (\"attribute must be a primitive\"\n-                            & \" dispatching operation\", Nam);\n-                        return;\n-                  end case;\n-\n-               exception\n+               case Attribute_Name (Nam) is\n+                  when Name_Input  =>\n+                     Stream_Prim :=\n+                       Find_Optional_Prim_Op (Prefix_Type, TSS_Stream_Input);\n+                  when Name_Output =>\n+                     Stream_Prim :=\n+                       Find_Optional_Prim_Op (Prefix_Type, TSS_Stream_Output);\n+                  when Name_Read   =>\n+                     Stream_Prim :=\n+                       Find_Optional_Prim_Op (Prefix_Type, TSS_Stream_Read);\n+                  when Name_Write  =>\n+                     Stream_Prim :=\n+                       Find_Optional_Prim_Op (Prefix_Type, TSS_Stream_Write);\n+                  when others      =>\n+                     Error_Msg_N\n+                       (\"attribute must be a primitive\"\n+                         & \" dispatching operation\", Nam);\n+                     return;\n+               end case;\n \n-                  --  If no operation was found, and the type is limited,\n-                  --  the user should have defined one.\n+               --  If no operation was found, and the type is limited,\n+               --  the user should have defined one.\n \n-                  when Program_Error =>\n-                     if Is_Limited_Type (Prefix_Type) then\n-                        Error_Msg_NE\n-                         (\"stream operation not defined for type&\",\n-                           N, Prefix_Type);\n-                        return;\n+               if No (Stream_Prim) then\n+                  if Is_Limited_Type (Prefix_Type) then\n+                     Error_Msg_NE\n+                      (\"stream operation not defined for type&\",\n+                        N, Prefix_Type);\n+                     return;\n \n-                     --  Otherwise, compiler should have generated default\n+                  --  Otherwise, compiler should have generated default\n \n-                     else\n-                        raise;\n-                     end if;\n-               end;\n+                  else\n+                     raise Program_Error;\n+                  end if;\n+               end if;\n \n                --  Rewrite the attribute into the name of its corresponding\n                --  primitive dispatching subprogram. We can then proceed with"}, {"sha": "d1f222eec1c79730c30073b71e8df0470266427f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca811241793e95b1c7be841dda57e459dd03b2eb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ca811241793e95b1c7be841dda57e459dd03b2eb", "patch": "@@ -11388,7 +11388,7 @@ package body Sem_Util is\n                if Present (Utyp) then\n                   declare\n                      Init : constant Entity_Id :=\n-                              (Find_Prim_Op\n+                              (Find_Optional_Prim_Op\n                                  (Underlying_Type (Typ), Name_Initialize));\n \n                   begin"}]}