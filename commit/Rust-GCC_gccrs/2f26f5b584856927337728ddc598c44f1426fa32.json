{"sha": "2f26f5b584856927337728ddc598c44f1426fa32", "node_id": "C_kwDOANBUbNoAKDJmMjZmNWI1ODQ4NTY5MjczMzc3MjhkZGM1OThjNDRmMTQyNmZhMzI", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-01-04T14:56:27Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-02T09:25:39Z"}, "message": "Define GCC_DRIVER_HOST_INITIALIZATION for VxWorks targets\n\nWe need to perform static links by default on VxWorks, where the use\nof shared libraries involves unusual steps compared to standard native\nsystems.\n\nThis has to be conveyed before the lang_specific_driver code gets\ninvoked (in particular for g++), so specs aren't available.\n\nThis change defines the GCC_DRIVER_HOST_INITIALIZATION macro for\nVxWorks, to insert a -static option in case the user hasn't provided any\nexplicit indication on the command line of the kind of link desired.\n\nWhile a HOST macro doesn't seem appropriate to control a target OS\ndriven behavior, this matches other uses and won't conflict as VxWorks\nis not supported on any of the other configurations using this macro.\n\ngcc/\n\t* config/vxworks-driver.cc: New.\n\t* config.gcc (*vxworks*): Add vxworks-driver.o in extra_gcc_objs.\n\t* config/t-vxworks: Add vxworks-driver.o.\n\t* config/vxworks.h (GCC_DRIVER_HOST_INITIALIZATION): New.", "tree": {"sha": "1b706f0eb77919e7b38f409f57b097a0dd00542e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b706f0eb77919e7b38f409f57b097a0dd00542e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f26f5b584856927337728ddc598c44f1426fa32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26f5b584856927337728ddc598c44f1426fa32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f26f5b584856927337728ddc598c44f1426fa32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26f5b584856927337728ddc598c44f1426fa32/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372044a67ec8346f4f308c5fe79d9e1cb6e7e6c6"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "35dfc00fe4d93e4663a7f74e3e844ed44573f03c", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2f26f5b584856927337728ddc598c44f1426fa32", "patch": "@@ -1021,6 +1021,8 @@ case ${target} in\n   extra_headers=\"${extra_headers} ../vxworks/vxworks-predef.h\"\n   target_has_targetcm=\"yes\"\n \n+  extra_gcc_objs=\"vxworks-driver.o\"\n+\n   # This private header exposes a consistent interface for checks on\n   # the VxWorks version our runtime header files need to perform, based on\n   # what the system headers adverstise:"}, {"sha": "dc97a4e0f30297e539040128b82dc4e4c3b6c7b1", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=2f26f5b584856927337728ddc598c44f1426fa32", "patch": "@@ -16,6 +16,10 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+vxworks-driver.o: $(srcdir)/config/vxworks-driver.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n vxworks.o: $(srcdir)/config/vxworks.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "da5f015f1de7109c1c80cb9a68c5213007542cbf", "filename": "gcc/config/vxworks-driver.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Fvxworks-driver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Fvxworks-driver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks-driver.cc?ref=2f26f5b584856927337728ddc598c44f1426fa32", "patch": "@@ -0,0 +1,93 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"opts.h\"\n+\n+/* Perform early driver flags initializations that can't be achieved\n+   with specs.  In particular, we need to explicitly request a static\n+   link for rtps by default before lang_specific_driver gets control.  */\n+\n+void vxworks_driver_init (unsigned int *in_decoded_options_count,\n+\t\t\t  struct cl_decoded_option **in_decoded_options)\n+{\n+  unsigned int i;\n+  struct cl_decoded_option *decoded_options = *in_decoded_options;\n+\n+  /* Arrange to add -static if we are going to link a rtp and there is no\n+     trace of any explicit request for a specific kind of link.  */\n+  bool wont_link = false;\n+  bool mrtp = false;\n+  bool link_kind_indication = false;\n+\n+  /* The new argument list will be contained in this.  */\n+  struct cl_decoded_option *new_decoded_options;\n+  unsigned int num_options = *in_decoded_options_count;\n+\n+  for (i = 1; i < num_options; i++)\n+    {\n+      if (decoded_options[i].errors & CL_ERR_MISSING_ARG)\n+\tcontinue;\n+\n+      switch (decoded_options[i].opt_index)\n+\t{\n+\tcase OPT_static:\n+\tcase OPT_shared:\n+\tcase OPT_Bdynamic:\n+\tcase OPT_Bstatic:\n+\tcase OPT_non_static:\n+\t  link_kind_indication = true;\n+\t  break;\n+\n+\tcase OPT_c:\n+\tcase OPT_r:\n+\tcase OPT_S:\n+\tcase OPT_E:\n+\tcase OPT_M:\n+\tcase OPT_MM:\n+\tcase OPT_fsyntax_only:\n+\t  wont_link = true;\n+\t  break;\n+\n+\tcase OPT_mrtp:\n+\t  mrtp = true;\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+      }\n+    }\n+\n+  if (!wont_link && mrtp && !link_kind_indication)\n+    {\n+      num_options++;\n+      new_decoded_options = XNEWVEC(struct cl_decoded_option, num_options);\n+\n+      for (i = 0; i < num_options - 1; i++)\n+\tnew_decoded_options[i] = decoded_options[i];\n+\n+      generate_option(OPT_static, NULL, 1, CL_DRIVER,\n+\t\t      &new_decoded_options[num_options - 1]);\n+\n+      *in_decoded_options = new_decoded_options;\n+      *in_decoded_options_count = num_options;\n+    }\n+}"}, {"sha": "84a9c93c6d3a7c5de8b39015aad3a4cd112c13b9", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26f5b584856927337728ddc598c44f1426fa32/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=2f26f5b584856927337728ddc598c44f1426fa32", "patch": "@@ -28,6 +28,16 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_VXWORKS\n #define TARGET_VXWORKS 1\n \n+/* ??? Even though assigned to a HOST driver hook, this function\n+   operates for all vxworks targets regardless of the current host.\n+   We will get warnings at build time if the macro happens to be\n+   redefined one way or another for a host.  */\n+struct cl_decoded_option;\n+extern void vxworks_driver_init (unsigned int *, struct cl_decoded_option **);\n+\n+#define GCC_DRIVER_HOST_INITIALIZATION \\\n+        vxworks_driver_init (&decoded_options_count, &decoded_options)\n+\n /* In kernel mode, VxWorks provides all the libraries itself, as well as\n    the functionality of startup files, etc.  In RTP mode, it behaves more\n    like a traditional Unix, with more external files.  Most of our specs"}]}