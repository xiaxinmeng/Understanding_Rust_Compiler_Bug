{"sha": "bd8f86429e63734550981cdc07a2908dc85b891b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4Zjg2NDI5ZTYzNzM0NTUwOTgxY2RjMDdhMjkwOGRjODViODkxYg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-04-10T19:01:37Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-04-10T19:01:37Z"}, "message": "re PR target/80108 (ICE in aggregate_value_p at function.c:2028)\n\ngcc/ChangeLog:\n\n2017-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/80108\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tEnhance special handling given to the TARGET_P9_MINMAX option in\n\trelation to certain other options.\n\ngcc/testsuite/ChangeLog:\n\n2017-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/80108\n\t* gcc.target/powerpc/ppc-fortran/ppc-fortran.exp: New file.\n\t* gcc.target/powerpc/ppc-fortran/pr80108-1.f90: New test.\n\nFrom-SVN: r246818", "tree": {"sha": "58928b2a6d472d1026286709258eb601630a4c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58928b2a6d472d1026286709258eb601630a4c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd8f86429e63734550981cdc07a2908dc85b891b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8f86429e63734550981cdc07a2908dc85b891b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8f86429e63734550981cdc07a2908dc85b891b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8f86429e63734550981cdc07a2908dc85b891b/comments", "author": null, "committer": null, "parents": [{"sha": "f634dd47d6c43f4d0a166c4f4c66069ec621d37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f634dd47d6c43f4d0a166c4f4c66069ec621d37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f634dd47d6c43f4d0a166c4f4c66069ec621d37b"}], "stats": {"total": 165, "additions": 164, "deletions": 1}, "files": [{"sha": "1a22bc037d4f239b1387b8d7cf04278bc5c0c013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd8f86429e63734550981cdc07a2908dc85b891b", "patch": "@@ -1,3 +1,10 @@\n+2017-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/80108\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tEnhance special handling given to the TARGET_P9_MINMAX option in\n+\trelation to certain other options.\n+\n 2017-04-10  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/80153"}, {"sha": "a3e0449b6aaba915deceeb61781eb63262b6bd60", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bd8f86429e63734550981cdc07a2908dc85b891b", "patch": "@@ -4273,8 +4273,40 @@ rs6000_option_override_internal (bool global_init_p)\n   /* For the newer switches (vsx, dfp, etc.) set some of the older options,\n      unless the user explicitly used the -mno-<option> to disable the code.  */\n   if (TARGET_P9_VECTOR || TARGET_MODULO || TARGET_P9_DFORM_SCALAR\n-      || TARGET_P9_DFORM_VECTOR || TARGET_P9_DFORM_BOTH > 0 || TARGET_P9_MINMAX)\n+      || TARGET_P9_DFORM_VECTOR || TARGET_P9_DFORM_BOTH > 0)\n     rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+  else if (TARGET_P9_MINMAX)\n+    {\n+      if (have_cpu)\n+\t{\n+\t  if (cpu_index == PROCESSOR_POWER9)\n+\t    {\n+\t      /* legacy behavior: allow -mcpu-power9 with certain\n+\t\t capabilities explicitly disabled.  */\n+\t      rs6000_isa_flags |=\n+\t\t(ISA_3_0_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+\t      /* However, reject this automatic fix if certain\n+\t\t capabilities required for TARGET_P9_MINMAX support\n+\t\t have been explicitly disabled.  */\n+\t      if (((OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n+\t\t    | OPTION_MASK_UPPER_REGS_DF) & rs6000_isa_flags)\n+\t\t  != (OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n+\t\t       | OPTION_MASK_UPPER_REGS_DF))\n+\t\terror (\"-mpower9-minmax incompatible with explicitly disabled options\");\n+\t\t}\n+\t  else\n+\t    error (\"Power9 target option is incompatible with -mcpu=<xxx> for \"\n+\t\t   \"<xxx> less than power9\");\n+\t}\n+      else if ((ISA_3_0_MASKS_SERVER & rs6000_isa_flags_explicit)\n+\t       != (ISA_3_0_MASKS_SERVER & rs6000_isa_flags\n+\t\t   & rs6000_isa_flags_explicit))\n+\t/* Enforce that none of the ISA_3_0_MASKS_SERVER flags\n+\t   were explicitly cleared.  */\n+\terror (\"-mpower9-minmax incompatible with explicitly disabled options\");\n+      else\n+\trs6000_isa_flags |= ISA_3_0_MASKS_SERVER;\n+    }\n   else if (TARGET_P8_VECTOR || TARGET_DIRECT_MOVE || TARGET_CRYPTO)\n     rs6000_isa_flags |= (ISA_2_7_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n   else if (TARGET_VSX)"}, {"sha": "de2de1c8f2cf1d664b305a9e0710ff08b4163aed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd8f86429e63734550981cdc07a2908dc85b891b", "patch": "@@ -1,3 +1,9 @@\n+2017-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/80108\n+\t* gcc.target/powerpc/ppc-fortran/ppc-fortran.exp: New file.\n+\t* gcc.target/powerpc/ppc-fortran/pr80108-1.f90: New test.\n+\n 2017-04-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/unroll-7.c: Declare \"a\" as a pointer to external array."}, {"sha": "82cbb210b92e654d3b19fc90f7fd7c087df52313", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fortran/ppc-fortran.exp", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp?ref=bd8f86429e63734550981cdc07a2908dc85b891b", "patch": "@@ -0,0 +1,65 @@\n+#   Copyright (C) 2004-2017 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gfortran-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_FFLAGS\n+if ![info exists DEFAULT_FFLAGS] then {\n+    set DEFAULT_FFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+global gfortran_test_path\n+global gfortran_aux_module_flags\n+set gfortran_test_path $srcdir/$subdir\n+set gfortran_aux_module_flags $DEFAULT_FFLAGS\n+proc dg-compile-aux-modules { args } {\n+    global gfortran_test_path\n+    global gfortran_aux_module_flags\n+    if { [llength $args] != 2 } {\n+\terror \"dg-set-target-env-var: needs one argument\"\n+\treturn\n+    }\n+\n+    set level [info level]\n+    if { [info procs dg-save-unknown] != [list] } {\n+\trename dg-save-unknown dg-save-unknown-level-$level\n+    }\n+\n+    dg-test $gfortran_test_path/[lindex $args 1] \"\" $gfortran_aux_module_flags\n+    # cleanup-modules is intentionally not invoked here.\n+\n+    if { [info procs dg-save-unknown-level-$level] != [list] } {\n+\trename dg-save-unknown-level-$level dg-save-unknown\n+    }\n+}\n+\n+# Main loop.\n+gfortran-dg-runtest [lsort \\\n+       [glob -nocomplain $srcdir/$subdir/*.\\[fF\\]{,90,95,03,08} ] ] \"\" $DEFAULT_FFLAGS\n+\n+gfortran-dg-runtest [lsort \\\n+       [glob -nocomplain $srcdir/$subdir/g77/*.\\[fF\\] ] ] \"\" $DEFAULT_FFLAGS\n+\n+\n+# All done.\n+dg-finish"}, {"sha": "a1248bee04451755054a809059a0444080ec7cb4", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fortran/pr80108-1.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8f86429e63734550981cdc07a2908dc85b891b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90?ref=bd8f86429e63734550981cdc07a2908dc85b891b", "patch": "@@ -0,0 +1,53 @@\n+! Originally contributed by Tobias Burnas.\n+! { dg-do compile { target { powerpc*-*-* } } }\n+! { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=405\" } }\n+! { dg-require-effective-target powerpc_p9vector_ok }\n+! { dg-options \"-mcpu=405 -mpower9-minmax -mfloat128-type\" }\n+! { dg-excess-errors \"expect error due to conflicting target options\" }\n+! Since the error message is not associated with a particular line\n+! number, we cannot use the dg-error directive and cannot specify a\n+! regexp to describe the expected error message.  The expected error\n+! message is:\n+!  \"Power9 target option is incompatible with -mcpu=<xxx> for <xxx>\n+!    less than power9\"\n+\n+program stream_test\n+    implicit none\n+    character(len=*), parameter :: rec1 = 'record1'\n+    character(len=*), parameter :: rec2 = 'record2'\n+    character(len=50) :: str1,str2\n+    integer           :: len, i\n+    real              :: r\n+\n+    open(10,form='formatted',access='stream',&\n+         status='scratch',position='rewind')\n+    write(10,'(a)') rec1//new_line('a')//rec2\n+    rewind(10)\n+    read(10,*) str1\n+    read(10,*) str2\n+    if(str1 /= rec1 .or. str2 /= rec2) call abort()\n+    rewind(10)\n+    read(10,'(a)') str1\n+    read(10,'(a)') str2\n+    if(str1 /= rec1 .or. str2 /= rec2) call abort()\n+    close(10)\n+\n+    open(10,form='formatted',access='stream',&\n+         status='scratch',position='rewind')\n+    write(10,*) '123 '//trim(rec1)//'  1e-12'\n+    write(10,*) '12345.6789'\n+    rewind(10)\n+    read(10,*) i,str1\n+    read(10,*) r\n+    if(i /= 123 .or. str1 /= rec1 .or. r /= 12345.6789) &\n+      call abort()\n+    close(10)\n+\n+    open(unit=10,form='unformatted',access='stream', &\n+         status='scratch',position='rewind')\n+    write(10) rec1//new_line('a')//rec2\n+    len = len_trim(rec1//new_line('a')//rec2)\n+    rewind(10)\n+    read(10) str1(1:len)\n+    if(str1 /= rec1//new_line('a')//rec2) call abort()\n+end program stream_test"}]}