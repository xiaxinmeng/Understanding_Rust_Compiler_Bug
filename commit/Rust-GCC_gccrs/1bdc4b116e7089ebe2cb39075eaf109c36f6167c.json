{"sha": "1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkYzRiMTE2ZTcwODllYmUyY2IzOTA3NWVhZjEwOWMzNmY2MTY3Yw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-05T16:38:27Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-05T16:38:27Z"}, "message": "re PR rtl-optimization/55151 (ICE: in assign_by_spills, at lra-assigns.c:1217 with -fPIC)\n\n2012-11-05  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55151\n\t* lra-constraints.c (process_alt_operands): Permit putting reg\n\tvalue into memory.  Increase reject for this case.\n\n2012-11-05  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55151\n\t* gcc.dg/pr55151.c: New test.\n\nFrom-SVN: r193170", "tree": {"sha": "81e55b34555f30dda37645715ae3098efa858274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e55b34555f30dda37645715ae3098efa858274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48866799f1b8bc4244a8842507ad657a34ffca67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48866799f1b8bc4244a8842507ad657a34ffca67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48866799f1b8bc4244a8842507ad657a34ffca67"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "fd357b498de993eefbc84b7d3a9c980192fa9b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "patch": "@@ -1,3 +1,9 @@\n+2012-11-05  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55151\n+\t* lra-constraints.c (process_alt_operands): Permit putting reg\n+\tvalue into memory.  Increase reject for this case.\n+\n 2012-11-05  Dehao Chen  <dehao@google.com>\n \n \t* final.c (reemit_insn_block_notes): Do not change scope if insn"}, {"sha": "ae8b83422030c302b1a6a0788860e9688267d117", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "patch": "@@ -1581,7 +1581,9 @@ process_alt_operands (int only_alternative)\n \t\tcase TARGET_MEM_CONSTRAINT:\n \t\t  if (MEM_P (op) || spilled_pseudo_p (op))\n \t\t    win = true;\n-\t\t  if (CONST_POOL_OK_P (mode, op))\n+\t\t  /* We can put constant or pseudo value into memory\n+\t\t     to satisfy the constraint.  */\n+\t\t  if (CONST_POOL_OK_P (mode, op) || REG_P (op))\n \t\t    badop = false;\n \t\t  constmemok = true;\n \t\t  break;\n@@ -1613,7 +1615,10 @@ process_alt_operands (int only_alternative)\n \t\t       && offsettable_nonstrict_memref_p (op))\n \t\t      || spilled_pseudo_p (op))\n \t\t    win = true;\n-\t\t  if (CONST_POOL_OK_P (mode, op) || MEM_P (op))\n+\t\t  /* We can put constant or pseudo value into memory\n+\t\t     or make memory address offsetable to satisfy the\n+\t\t     constraint.  */\n+\t\t  if (CONST_POOL_OK_P (mode, op) || MEM_P (op) || REG_P (op))\n \t\t    badop = false;\n \t\t  constmemok = true;\n \t\t  offmemok = true;\n@@ -1638,6 +1643,7 @@ process_alt_operands (int only_alternative)\n \t\t  if (CONST_INT_P (op)\n \t\t      || (GET_CODE (op) == CONST_DOUBLE && mode == VOIDmode))\n \t\t    break;\n+\n \t\tcase 'i':\n \t\t  if (general_constant_p (op))\n \t\t    win = true;\n@@ -1702,10 +1708,12 @@ process_alt_operands (int only_alternative)\n \t\t\t    win = true;\n \n \t\t\t  /* If we didn't already win, we can reload\n-\t\t\t     constants via force_const_mem, and other\n-\t\t\t     MEMs by reloading the address like for\n+\t\t\t     constants via force_const_mem or put the\n+\t\t\t     pseudo value into memory, or make other\n+\t\t\t     memory by reloading the address like for\n \t\t\t     'o'.  */\n-\t\t\t  if (CONST_POOL_OK_P (mode, op) || MEM_P (op))\n+\t\t\t  if (CONST_POOL_OK_P (mode, op)\n+\t\t\t      || MEM_P (op) || REG_P (op))\n \t\t\t    badop = false;\n \t\t\t  constmemok = true;\n \t\t\t  offmemok = true;\n@@ -1919,6 +1927,13 @@ process_alt_operands (int only_alternative)\n \t\t      += ira_reg_class_max_nregs[this_alternative][mode];\n \t\t}\n \n+\t      /* We are trying to spill pseudo into memory.  It is\n+\t\t usually more costly than moving to a hard register\n+\t\t although it might takes the same number of\n+\t\t reloads.  */\n+\t      if (no_regs_p && REG_P (op))\n+\t\treject++;\n+\n \t      /* Input reloads can be inherited more often than output\n \t\t reloads can be removed, so penalize output\n \t\t reloads.  */"}, {"sha": "c3103661f69534af07037077b0f64eb60b85b92b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "patch": "@@ -1,3 +1,8 @@\n+2012-11-05  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55151\n+\t* gcc.dg/pr55151.c: New test.\n+\n 2012-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/54970"}, {"sha": "1584bf4a456f55940f2f824d326adf78ac8e1548", "filename": "gcc/testsuite/gcc.dg/pr55151.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55151.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bdc4b116e7089ebe2cb39075eaf109c36f6167c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55151.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr55151.c?ref=1bdc4b116e7089ebe2cb39075eaf109c36f6167c", "patch": "@@ -0,0 +1,13 @@\n+/* PR rtl-optimization/55151 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fPIC\" } */\n+\n+int a, b, c, d, e, f, g, h, i, j, k, l;\n+void f4 (void)\n+{\n+  __asm__ volatile (\"\":[a] \"=r,m\" (a),[b] \"=r,m\" (b),[c] \"=r,m\" (c),\n+\t\t    [d] \"=r,m\" (d),[e] \"=r,m\" (e),[f] \"=r,m\" (f),\n+\t\t    [g] \"=r,m\" (g),[h] \"=r,m\" (h),[i] \"=r,m\" (i),\n+\t\t    [j] \"=r,m\" (j),[k] \"=r,m\" (k),[l] \"=r,m\" (l):\"[a],m\" (a),\n+\t\t    \"[j],m\" (j), \"[k],m\" (k), \"[l],m\" (l));\n+}"}]}