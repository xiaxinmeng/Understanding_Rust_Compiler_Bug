{"sha": "47f62b27c8605658db7658421ef56b8d020ed4fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNjJiMjdjODYwNTY1OGRiNzY1ODQyMWVmNTZiOGQwMjBlZDRmYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-14T19:14:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-14T19:14:39Z"}, "message": "locale_facets.h (struct __numpunct_cache): Add member _M_grouping_size, caching the length of _M_grouping.\n\n2004-01-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (struct __numpunct_cache):\n\tAdd member _M_grouping_size, caching the length of _M_grouping.\n\t(__numpunct_cache<>::_M_cache): Assign the latter.\n\t(__verify_grouping): Move declaration...\n\t* include/bits/locale_facets.tcc (__verify_grouping):\n\t... here, change signature to take a const char* and a size_t\n\tfor the grouping; not a template anymore.\n\t(__add_grouping, num_put::_M_group_int, num_put::_M_group_float):\n\tLikewise change signature and tweak consistently.\n\t(num_get::_M_extract_float, num_get::_M_extract_int,\n\tnum_put::_M_insert_int, num_put::_M_insert_float,\n\tmoney_get::do_get(string_type&), money_get::do_put(string_type)):\n\tUpdate callers.\n\t* config/locale/generic/numeric_members.cc\n\t(numpunct<>::_M_initialize_numpunct): Assign the new member.\n\t* config/locale/gnu/numeric_members.cc\n\t(numpunct<>::_M_initialize_numpunct): Likewise.\n\t* src/locale-inst.cc (__add_grouping): Tweak signature.\n\t(__verify_grouping): Don't instantiate, not a template anymore.\n\n\t* include/bits/locale_facets.h: Rename _M_truename_len ->\n\t_M_truename_size, _M_falsename_len -> _M_falsename_size.\n\t* include/bits/locale_facets.tcc: Likewise.\n\t* config/locale/generic/numeric_members.cc: Likewise.\n\t* config/locale/gnu/numeric_members.cc: Likewise.\n\nFrom-SVN: r75876", "tree": {"sha": "ba1d8461de3c6501263580b5bd02455bbd808a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba1d8461de3c6501263580b5bd02455bbd808a51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f62b27c8605658db7658421ef56b8d020ed4fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f62b27c8605658db7658421ef56b8d020ed4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f62b27c8605658db7658421ef56b8d020ed4fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f62b27c8605658db7658421ef56b8d020ed4fb/comments", "author": null, "committer": null, "parents": [{"sha": "41f24725031f84b841142fb5f9afa58e1e6ae1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f24725031f84b841142fb5f9afa58e1e6ae1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f24725031f84b841142fb5f9afa58e1e6ae1ff"}], "stats": {"total": 209, "additions": 120, "deletions": 89}, "files": [{"sha": "aac5acf3ef190fc55620673f5852b72be9fff909", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -1,3 +1,31 @@\n+2004-01-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (struct __numpunct_cache):\n+\tAdd member _M_grouping_size, caching the length of _M_grouping.\n+\t(__numpunct_cache<>::_M_cache): Assign the latter.\n+\t(__verify_grouping): Move declaration...\n+\t* include/bits/locale_facets.tcc (__verify_grouping):\n+\t... here, change signature to take a const char* and a size_t\n+\tfor the grouping; not a template anymore.\n+\t(__add_grouping, num_put::_M_group_int, num_put::_M_group_float):\n+\tLikewise change signature and tweak consistently. \n+\t(num_get::_M_extract_float, num_get::_M_extract_int,\n+\tnum_put::_M_insert_int, num_put::_M_insert_float,\n+\tmoney_get::do_get(string_type&), money_get::do_put(string_type)):\n+\tUpdate callers. \n+\t* config/locale/generic/numeric_members.cc\n+\t(numpunct<>::_M_initialize_numpunct): Assign the new member.\t\n+\t* config/locale/gnu/numeric_members.cc\n+\t(numpunct<>::_M_initialize_numpunct): Likewise.\t\n+\t* src/locale-inst.cc (__add_grouping): Tweak signature.\n+\t(__verify_grouping): Don't instantiate, not a template anymore.\n+\n+\t* include/bits/locale_facets.h: Rename _M_truename_len ->\n+\t_M_truename_size, _M_falsename_len -> _M_falsename_size.\n+\t* include/bits/locale_facets.tcc: Likewise.\n+\t* config/locale/generic/numeric_members.cc: Likewise.\n+\t* config/locale/gnu/numeric_members.cc: Likewise.\n+\n 2004-01-14  Stefan Olsson  <stefan@snon.net>\n \n \t* include/ext/mt_allocator.h: Fixups."}, {"sha": "0645865971577435a37562423b21908efb168ddd", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -57,10 +57,12 @@ namespace std\n       for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t_M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n \n+      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n       _M_data->_M_truename = \"true\";\n-      _M_data->_M_truename_len = strlen(_M_data->_M_truename);\n+      _M_data->_M_truename_size = strlen(_M_data->_M_truename);\n       _M_data->_M_falsename = \"false\";\n-      _M_data->_M_falsename_len = strlen(_M_data->_M_falsename);\n+      _M_data->_M_falsename_size = strlen(_M_data->_M_falsename);\n     }\n \n   template<> \n@@ -95,11 +97,13 @@ namespace std\n \t  uc = static_cast<unsigned char>(__num_base::_S_atoms_in[__i]);\n \t  _M_data->_M_atoms_in[__i] = btowc(uc);\n \t}\n-      \n+\n+      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n       _M_data->_M_truename = L\"true\";\n-      _M_data->_M_truename_len = wcslen(_M_data->_M_truename);\n+      _M_data->_M_truename_size = wcslen(_M_data->_M_truename);\n       _M_data->_M_falsename = L\"false\";\n-      _M_data->_M_falsename_len = wcslen(_M_data->_M_falsename);\n+      _M_data->_M_falsename_size = wcslen(_M_data->_M_falsename);\n     }\n \n   template<> "}, {"sha": "debee10cca5c213ed4e5b712cb8973b813021abd", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -72,13 +72,15 @@ namespace std\n \t  else\n \t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \t}\n+      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n       _M_data->_M_truename = \"true\";\n-      _M_data->_M_truename_len = strlen(_M_data->_M_truename);\n+      _M_data->_M_truename_size = strlen(_M_data->_M_truename);\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n       _M_data->_M_falsename = \"false\";\n-      _M_data->_M_falsename_len = strlen(_M_data->_M_falsename);\n+      _M_data->_M_falsename_size = strlen(_M_data->_M_falsename);\n     }\n  \n   template<> \n@@ -137,13 +139,15 @@ namespace std\n \t  else\n \t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \t}\n+      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n       _M_data->_M_truename = L\"true\";\n-      _M_data->_M_truename_len = wcslen(_M_data->_M_truename);\n+      _M_data->_M_truename_size = wcslen(_M_data->_M_truename);\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n       _M_data->_M_falsename = L\"false\";\n-      _M_data->_M_falsename_len = wcslen(_M_data->_M_falsename);\n+      _M_data->_M_falsename_size = wcslen(_M_data->_M_falsename);\n     }\n \n   template<> "}, {"sha": "05003ed28d5826d70dddce45a3c5cd7a2cd2a33a", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -92,28 +92,15 @@ namespace std\n \t     const streamsize __oldlen, const bool __num);\n     };\n \n-  // Used by both numeric and monetary facets.\n-  // Check to make sure that the __grouping_tmp string constructed in\n-  // money_get or num_get matches the canonical grouping for a given\n-  // locale.\n-  // __grouping_tmp is parsed L to R\n-  // 1,222,444 == __grouping_tmp of \"\\1\\3\\3\"\n-  // __grouping is parsed R to L\n-  // 1,222,444 == __grouping of \"\\3\" == \"\\3\\3\\3\"\n-  template<typename _CharT>\n-    bool\n-    __verify_grouping(const basic_string<_CharT>& __grouping, \n-\t\t      const basic_string<_CharT>& __grouping_tmp);\n-\n   // Used by both numeric and monetary facets.\n   // Inserts \"group separator\" characters into an array of characters.\n   // It's recursive, one iteration per group.  It moves the characters\n   // in the buffer this way: \"xxxx12345\" -> \"12,345xxx\".  Call this\n-  // only with __gbeg != __gend.\n+  // only with __glen != 0.\n   template<typename _CharT>\n     _CharT*\n     __add_grouping(_CharT* __s, _CharT __sep,  \n-\t\t   const char* __gbeg, const char* __gend, \n+\t\t   const char* __gbeg, size_t __gsize, \n \t\t   const _CharT* __first, const _CharT* __last);\n \n   // This template permits specializing facet output code for\n@@ -1602,11 +1589,12 @@ namespace std\n     struct __numpunct_cache : public locale::facet\n     {\n       const char* \t\t\t_M_grouping;\n+      size_t                            _M_grouping_size;\n       bool\t\t\t\t_M_use_grouping;\n       const _CharT* \t\t\t_M_truename;\n+      size_t                            _M_truename_size;\n       const _CharT*\t\t\t_M_falsename;\n-      size_t                            _M_truename_len;\n-      size_t                            _M_falsename_len;     \n+      size_t                            _M_falsename_size;     \n       _CharT \t\t\t\t_M_decimal_point;\n       _CharT \t\t\t\t_M_thousands_sep;\n       \n@@ -1625,10 +1613,10 @@ namespace std\n       bool\t\t\t\t_M_allocated;\n \n       __numpunct_cache(size_t __refs = 0) : facet(__refs), \n-      _M_grouping(NULL), _M_use_grouping(false), _M_truename(NULL), \n-      _M_falsename(NULL),  _M_truename_len(0), _M_falsename_len(0),\n-      _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),\n-      _M_allocated(false)\n+      _M_grouping(NULL), _M_grouping_size(0), _M_use_grouping(false),\n+      _M_truename(NULL), _M_truename_size(0), _M_falsename(NULL),\n+      _M_falsename_size(0), _M_decimal_point(_CharT()),\n+      _M_thousands_sep(_CharT()), _M_allocated(false)\n       { } \n \n       ~__numpunct_cache();\n@@ -1645,21 +1633,20 @@ namespace std\n \n       const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n \n-      const string::size_type __len = __np.grouping().size();\n-      char* __grouping = new char[__len + 1];\n-      __np.grouping().copy(__grouping, __len);\n-      __grouping[__len] = char();\n+      _M_grouping_size = __np.grouping().size();\n+      char* __grouping = new char[_M_grouping_size];\n+      __np.grouping().copy(__grouping, _M_grouping_size);\n       _M_grouping = __grouping;\n-      _M_use_grouping = __len && __np.grouping()[0] != 0;\n+      _M_use_grouping = _M_grouping_size && __np.grouping()[0] != 0;\n \n-      _M_truename_len = __np.truename().size();\n-      _CharT* __truename = new _CharT[_M_truename_len];\n-      __np.truename().copy(__truename, _M_truename_len);\n+      _M_truename_size = __np.truename().size();\n+      _CharT* __truename = new _CharT[_M_truename_size];\n+      __np.truename().copy(__truename, _M_truename_size);\n       _M_truename = __truename;\n \n-      _M_falsename_len = __np.falsename().size();\n-      _CharT* __falsename = new _CharT[_M_falsename_len];\n-      __np.falsename().copy(__falsename, _M_falsename_len);\n+      _M_falsename_size = __np.falsename().size();\n+      _CharT* __falsename = new _CharT[_M_falsename_size];\n+      __np.falsename().copy(__falsename, _M_falsename_size);\n       _M_falsename = __falsename;\n           \n       _M_decimal_point = __np.decimal_point();\n@@ -2421,19 +2408,19 @@ namespace std\n \t\t\tchar __mod, _ValueT __v) const;\n \n       void\n-      _M_group_float(const string& __grouping, char_type __sep, \n-\t\t     const char_type* __p, char_type* __new, char_type* __cs,\n-\t\t     int& __len) const;\n+      _M_group_float(const char* __grouping, size_t __grouping_size,\n+\t\t     char_type __sep, const char_type* __p, char_type* __new,\n+\t\t     char_type* __cs, int& __len) const;\n \n       template<typename _ValueT>\n         iter_type\n         _M_insert_int(iter_type, ios_base& __io, char_type __fill, \n \t\t      _ValueT __v) const;\n \n       void\n-      _M_group_int(const string& __grouping, char_type __sep, \n-\t\t   ios_base& __io, char_type* __new, char_type* __cs, \n-\t\t   int& __len) const;\n+      _M_group_int(const char* __grouping, size_t __grouping_size,\n+\t\t   char_type __sep, ios_base& __io, char_type* __new,\n+\t\t   char_type* __cs, int& __len) const;\n \n       void\n       _M_pad(char_type __fill, streamsize __w, ios_base& __io, "}, {"sha": "4dc3bb4f6b225e5189e2477c9c91c240b68290d1", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -150,6 +150,18 @@ namespace std\n       }\n     };\n \n+  // Used by both numeric and monetary facets.\n+  // Check to make sure that the __grouping_tmp string constructed in\n+  // money_get or num_get matches the canonical grouping for a given\n+  // locale.\n+  // __grouping_tmp is parsed L to R\n+  // 1,222,444 == __grouping_tmp of \"\\1\\3\\3\"\n+  // __grouping is parsed R to L\n+  // 1,222,444 == __grouping of \"\\3\" == \"\\3\\3\\3\"\n+  static bool\n+  __verify_grouping(const char* __grouping, size_t __grouping_size,\n+\t\t    const string& __grouping_tmp);\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -293,8 +305,8 @@ namespace std\n \t  if (!__found_dec)\n \t    __found_grouping += static_cast<char>(__sep_pos);\n \n-\t  const string __grouping = __lc->_M_grouping;\n-          if (!std::__verify_grouping(__grouping, __found_grouping))\n+          if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size,\n+\t\t\t\t      __found_grouping))\n \t    __err |= ios_base::failbit;\n         }\n \n@@ -485,8 +497,8 @@ namespace std\n \t    // Add the ending grouping.\n \t    __found_grouping += static_cast<char>(__sep_pos);\n \t    \n-\t    const string __grouping = __lc->_M_grouping;\n-\t    if (!std::__verify_grouping(__grouping, __found_grouping))\n+\t    if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size,\n+\t\t\t\t\t__found_grouping))\n \t      __err |= ios_base::failbit;\n \t  }\n \n@@ -536,23 +548,23 @@ namespace std\n           for (__n = 0; __beg != __end; ++__n, ++__beg)\n             {\n \t      if (__testf)\n-\t\tif (__n < __lc->_M_falsename_len)\n+\t\tif (__n < __lc->_M_falsename_size)\n \t\t  __testf = __traits_type::eq(*__beg, __lc->_M_falsename[__n]);\n \t\telse\n \t\t  break;\n \n \t      if (__testt)\n-\t\tif (__n < __lc->_M_truename_len)\n+\t\tif (__n < __lc->_M_truename_size)\n \t\t  __testt = __traits_type::eq(*__beg, __lc->_M_truename[__n]);\n \t\telse\n \t\t  break;\n \n \t      if (!__testf && !__testt)\n \t\tbreak;      \n             }\n-\t  if (__testf && __n == __lc->_M_falsename_len)\n+\t  if (__testf && __n == __lc->_M_falsename_size)\n \t    __v = 0;\n-\t  else if (__testt && __n == __lc->_M_truename_len)\n+\t  else if (__testt && __n == __lc->_M_truename_size)\n \t    __v = 1;\n \t  else\n \t    __err |= ios_base::failbit;\n@@ -793,8 +805,8 @@ namespace std\n   template<typename _CharT, typename _OutIter>\n     void\n     num_put<_CharT, _OutIter>::\n-    _M_group_int(const string& __grouping, _CharT __sep, ios_base& __io, \n-\t\t _CharT* __new, _CharT* __cs, int& __len) const\n+    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,\n+\t\t ios_base& __io, _CharT* __new, _CharT* __cs, int& __len) const\n     {\n       // By itself __add_grouping cannot deal correctly with __cs when\n       // ios::showbase is set and ios_base::oct || ios_base::hex.\n@@ -817,9 +829,9 @@ namespace std\n \t    __new[1] = __cs[1];\n \t  }\n       _CharT* __p;\n-      __p = std::__add_grouping(__new + __off, __sep, __grouping.data(), \n-\t\t\t\t__grouping.data() + __grouping.size(),\n-\t\t\t\t__cs + __off, __cs + __len);\n+      __p = std::__add_grouping(__new + __off, __sep, __grouping,\n+\t\t\t\t__grouping_size, __cs + __off,\n+\t\t\t\t__cs + __len);\n       __len = __p - __new;\n     }\n \n@@ -854,8 +866,8 @@ namespace std\n \t    // number of digits, but no more.\n \t    _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t\t  * __len * 2));\n-\t    _M_group_int(__lc->_M_grouping, __lc->_M_thousands_sep, __io, \n-\t\t\t __cs2, __cs, __len);\n+\t    _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,\n+\t\t\t __lc->_M_thousands_sep, __io, __cs2, __cs, __len);\n \t    __cs = __cs2;\n \t  }\n \t\n@@ -878,16 +890,15 @@ namespace std\n   template<typename _CharT, typename _OutIter>\n     void\n     num_put<_CharT, _OutIter>::\n-    _M_group_float(const string& __grouping, _CharT __sep, const _CharT* __p, \n-\t\t   _CharT* __new, _CharT* __cs, int& __len) const\n+    _M_group_float(const char* __grouping, size_t __grouping_size, _CharT __sep,\n+\t\t   const _CharT* __p, _CharT* __new, _CharT* __cs, int& __len) const\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 282. What types does numpunct grouping refer to?\n       // Add grouping, if necessary. \n       _CharT* __p2;\n       const int __declen = __p ? __p - __cs : __len;\n-      __p2 = std::__add_grouping(__new, __sep, __grouping.data(),\n-\t\t\t\t __grouping.data() + __grouping.size(),\n+      __p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size,\n \t\t\t\t __cs, __cs + __declen);\n       \n       // Tack on decimal part.\n@@ -1003,8 +1014,8 @@ namespace std\n \t  // number of digits, but no more.\n \t  _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t\t* __len * 2));\n-\t  _M_group_float(__lc->_M_grouping, __lc->_M_thousands_sep, __p,\n-\t\t\t __ws2, __ws, __len);\n+\t  _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,\n+\t\t\t __lc->_M_thousands_sep, __p, __ws2, __ws, __len);\n \t  __ws = __ws2;\n \t}\n \n@@ -1044,8 +1055,8 @@ namespace std\n \n \t  const _CharT* __name = __v ? __lc->_M_truename \n \t                             : __lc->_M_falsename;\n-\t  int __len = __v ? __lc->_M_truename_len\n-\t                  : __lc->_M_falsename_len;\n+\t  int __len = __v ? __lc->_M_truename_size\n+\t                  : __lc->_M_falsename_size;\n \n \t  const streamsize __w = __io.width();\n \t  if (__w > static_cast<streamsize>(__len))\n@@ -1308,7 +1319,9 @@ namespace std\n \t  // Test for grouping fidelity.\n \t  if (__grouping.size() && __grouping_tmp.size())\n \t    {\n-\t      if (!std::__verify_grouping(__grouping, __grouping_tmp))\n+\t      if (!std::__verify_grouping(__grouping.data(),\n+\t\t\t\t\t  __grouping.size(),\n+\t\t\t\t\t  __grouping_tmp))\n \t\t__testvalid = false;\n \t    }\n \t  \n@@ -1461,12 +1474,12 @@ namespace std\n \t\t  const char_type __sep = __intl ? __mpt.thousands_sep() \n \t\t    \t\t\t         : __mpf.thousands_sep();\n \t\t  const char* __gbeg = __grouping.data();\n-\t\t  const char* __gend = __gbeg + __grouping.size();\n+\t\t  const size_t __glen = __grouping.size();\n \t\t  const int __n = (__end - __beg) * 2;\n \t\t  _CharT* __ws2 =\n        \t          static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n \t\t  _CharT* __ws_end = std::__add_grouping(__ws2, __sep, __gbeg, \n-\t\t\t\t\t\t\t __gend, __beg, __end);\n+\t\t\t\t\t\t\t __glen, __beg, __end);\n \t\t  __value.insert(0, __ws2, __ws_end - __ws2);\n \t\t}\n \t      else\n@@ -2268,13 +2281,12 @@ namespace std\n \t\t    __oldlen - __mod);\n     }\n \n-  template<typename _CharT>\n-    bool\n-    __verify_grouping(const basic_string<_CharT>& __grouping, \n-\t\t      const basic_string<_CharT>& __grouping_tmp)\n+  bool\n+  __verify_grouping(const char* __grouping, size_t __grouping_size,\n+\t\t    const string& __grouping_tmp)\n     { \n       const size_t __n = __grouping_tmp.size() - 1;\n-      const size_t __min = std::min(__n, __grouping.size() - 1);\n+      const size_t __min = std::min(__n, __grouping_size - 1);\n       size_t __i = __n;\n       bool __test = true;\n \n@@ -2293,15 +2305,16 @@ namespace std\n \n   template<typename _CharT>\n     _CharT*\n-    __add_grouping(_CharT* __s, _CharT __sep,  \n-\t\t   const char* __gbeg, const char* __gend, \n+    __add_grouping(_CharT* __s, _CharT __sep,\n+\t\t   const char* __gbeg, size_t __gsize,\n \t\t   const _CharT* __first, const _CharT* __last)\n     {\n       if (__last - __first > *__gbeg)\n \t{\n-\t  const bool __bump = __gbeg + 1 != __gend;\n+\t  const bool __bump = __gsize != 1;\n \t  __s = std::__add_grouping(__s,  __sep, __gbeg + __bump,\n-\t\t\t\t    __gend, __first, __last - *__gbeg);\n+\t\t\t\t    __gsize - __bump, __first,\n+\t\t\t\t    __last - *__gbeg);\n \t  __first = __last - *__gbeg;\n \t  *__s++ = __sep;\n \t}"}, {"sha": "25c3018a57ae0876bcb1b9aeb0658f696035d107", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f62b27c8605658db7658421ef56b8d020ed4fb/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=47f62b27c8605658db7658421ef56b8d020ed4fb", "patch": "@@ -272,14 +272,9 @@ namespace std\n   // locale functions.\n   template\n     C*\n-    __add_grouping<C>(C*, C, char const*, char const*, \n+    __add_grouping<C>(C*, C, char const*, size_t, \n \t\t\t C const*, C const*);\n \n-  template\n-    bool\n-    __verify_grouping<C>(const basic_string<C>&,\n-\t\t\t const basic_string<C>&);\n-\n   template class __pad<C, char_traits<C> >;\n \n   template"}]}