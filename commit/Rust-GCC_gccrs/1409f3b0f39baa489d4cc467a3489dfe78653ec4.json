{"sha": "1409f3b0f39baa489d4cc467a3489dfe78653ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwOWYzYjBmMzliYWE0ODlkNGNjNDY3YTM0ODlkZmU3ODY1M2VjNA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-06-16T20:34:44Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-06-16T20:34:44Z"}, "message": "sourcebuild.texi: Document new effective target keyword longlong64.\n\ngcc/ChangeLog\n\n2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* doc/sourcebuild.texi: Document new effective target keyword\n\tlonglong64.\n\ngcc/testsuite/ChangeLog\n\n2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* lib/target-supports.exp: Add check_effective_target_longlong64.\n\nFrom-SVN: r272359", "tree": {"sha": "f206573f0a12876dba62ba7be4bf600cd0f59200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f206573f0a12876dba62ba7be4bf600cd0f59200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1409f3b0f39baa489d4cc467a3489dfe78653ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1409f3b0f39baa489d4cc467a3489dfe78653ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1409f3b0f39baa489d4cc467a3489dfe78653ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1409f3b0f39baa489d4cc467a3489dfe78653ec4/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32aac5bd94a9a9787bef9b5d8e072a6c5ded911e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32aac5bd94a9a9787bef9b5d8e072a6c5ded911e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32aac5bd94a9a9787bef9b5d8e072a6c5ded911e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "92ee5ea7a64c6c162e0f41ea71159941e9b7b736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1409f3b0f39baa489d4cc467a3489dfe78653ec4", "patch": "@@ -1,3 +1,8 @@\n+2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* doc/sourcebuild.texi: Document new effective target keyword\n+\tlonglong64.\n+\n 2019-06-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p,"}, {"sha": "85efadb3ca190d8fa216f7bd69ff981ed87dad90", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=1409f3b0f39baa489d4cc467a3489dfe78653ec4", "patch": "@@ -1357,6 +1357,9 @@ Target has @code{int} that is at 32 bits or longer.\n @item int16\n Target has @code{int} that is 16 bits or shorter.\n \n+@item longlong64\n+Target has 64-bit @code{long long}.\n+\n @item long_neq_int\n Target has @code{int} and @code{long} with different sizes.\n "}, {"sha": "2dceffb0399d3d7b68a0d12ad25c6b385e5fcdf8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1409f3b0f39baa489d4cc467a3489dfe78653ec4", "patch": "@@ -1,3 +1,7 @@\n+2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* lib/target-supports.exp: Add check_effective_target_longlong64. \n+\n 2019-06-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/tree-ssa/alias-access-path-4.c: New testcase."}, {"sha": "1d4aaa2a87ecb511f860659f49b989022356011d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1409f3b0f39baa489d4cc467a3489dfe78653ec4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1409f3b0f39baa489d4cc467a3489dfe78653ec4", "patch": "@@ -2617,6 +2617,15 @@ proc check_effective_target_int32plus { } {\n     }]\n }\n \n+# Return 1 if we're generating 64-bit long long using default options,\n+# 0 otherwise.\n+\n+proc check_effective_target_longlong64 { } {\n+    return [check_no_compiler_messages longlong64 object {\n+\tint dummy[sizeof (long long) == 8 ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if we're generating 32-bit or larger pointers using default\n # options, 0 otherwise.\n "}]}