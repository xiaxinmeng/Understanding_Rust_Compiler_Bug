{"sha": "6a989c79d4ac94a8922e97523ff13965ed5b0283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5ODljNzlkNGFjOTRhODkyMmU5NzUyM2ZmMTM5NjVlZDViMDI4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T10:15:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-07T10:15:18Z"}, "message": "[multiple changes]\n\n2015-01-07  Vincent Celier  <celier@adacore.com>\n\n\t* clean.adb: Minor error message change.\n\n2015-01-07  Tristan Gingold  <gingold@adacore.com>\n\n\tPR ada/64349  \n\t* env.c (__gnat_environ): Adjust for darwin9/darwin10.\n\n2015-01-07  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch10.adb (Analyze_With_Clause): Compiling under -gnatq\n\tprotect the frontend against never ending recursion caused by\n\tcircularities in the sources.\n\nFrom-SVN: r219290", "tree": {"sha": "b237f7a384cd6d29be7cca594f2ba682e4c498f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b237f7a384cd6d29be7cca594f2ba682e4c498f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a989c79d4ac94a8922e97523ff13965ed5b0283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a989c79d4ac94a8922e97523ff13965ed5b0283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a989c79d4ac94a8922e97523ff13965ed5b0283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a989c79d4ac94a8922e97523ff13965ed5b0283/comments", "author": null, "committer": null, "parents": [{"sha": "1c85591cabcde20a01a2ecb90d857625a5681ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c85591cabcde20a01a2ecb90d857625a5681ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c85591cabcde20a01a2ecb90d857625a5681ae4"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "47a8051b422016c2dce11a3a37304e97bccd650e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a989c79d4ac94a8922e97523ff13965ed5b0283", "patch": "@@ -1,3 +1,18 @@\n+2015-01-07  Vincent Celier  <celier@adacore.com>\n+\n+\t* clean.adb: Minor error message change.\n+\n+2015-01-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\tPR ada/64349  \n+\t* env.c (__gnat_environ): Adjust for darwin9/darwin10.\n+\n+2015-01-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_With_Clause): Compiling under -gnatq\n+\tprotect the frontend against never ending recursion caused by\n+\tcircularities in the sources.\n+\n 2015-01-07  Robert Dewar  <dewar@adacore.com>\n \n \t* a-reatim.adb, make.adb, exp_pakd.adb, i-cpoint.adb, sem_ch8.adb,"}, {"sha": "a9dede587ba983160501c1b17de6942c979e0275", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=6a989c79d4ac94a8922e97523ff13965ed5b0283", "patch": "@@ -1388,7 +1388,7 @@ package body Clean is\n          if Project_File_Name /= null then\n             Put_Line\n               (\"warning: gnatclean -P is obsolete and will not be available \" &\n-               \"in the next release. Use gprclean instead.\");\n+               \"in the next release; use gprclean instead.\");\n          end if;\n \n          --  A project file was specified by a -P switch"}, {"sha": "f8608bcd38c985394465b9681224fe29712b0e19", "filename": "gcc/ada/env.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=6a989c79d4ac94a8922e97523ff13965ed5b0283", "patch": "@@ -44,6 +44,12 @@\n #include <stdlib.h>\n #endif\n \n+#if defined (__APPLE__) && !defined (__arm__)\n+/* On Darwin, _NSGetEnviron must be used for shared libraries; but it is not\n+   available on iOS.  */\n+#include <crt_externs.h>\n+#endif\n+\n #if defined (__vxworks)\n   #if defined (__RTP__)\n     /* On VxWorks 6 Real-Time process mode, environ is defined in unistd.h.  */\n@@ -212,6 +218,8 @@ __gnat_environ (void)\n #elif ! (defined (__vxworks))\n   extern char **environ;\n   return environ;\n+#elif defined (__APPLE__) && !defined (__arm__)\n+  return *_NSGetEnviron ();\n #else\n   return environ;\n #endif"}, {"sha": "5e66316cdf51ec66503e27d0e8d15b0b60cd196d", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a989c79d4ac94a8922e97523ff13965ed5b0283/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=6a989c79d4ac94a8922e97523ff13965ed5b0283", "patch": "@@ -2521,6 +2521,18 @@ package body Sem_Ch10 is\n          return;\n       end if;\n \n+      --  If we are compiling under \"don't quit\" mode (-gnatq) and we have\n+      --  already detected serious errors then we mark the with-clause nodes as\n+      --  analyzed before the corresponding compilation unit is analyzed. This\n+      --  is done here to protect the frontend against never ending recursion\n+      --  caused by circularities in the sources (because the previous errors\n+      --  may break the regular machine of the compiler implemented in\n+      --  Load_Unit to detect circularities).\n+\n+      if Serious_Errors_Detected > 0 and then Try_Semantics then\n+         Set_Analyzed (N);\n+      end if;\n+\n       --  If the library unit is a predefined unit, and we are in high\n       --  integrity mode, then temporarily reset Configurable_Run_Time_Mode\n       --  for the analysis of the with'ed unit. This mode does not prevent"}]}