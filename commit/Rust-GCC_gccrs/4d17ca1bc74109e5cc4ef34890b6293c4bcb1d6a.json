{"sha": "4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxN2NhMWJjNzQxMDllNWNjNGVmMzQ4OTBiNjI5M2M0YmNiMWQ2YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-03T07:49:16Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-03T07:49:16Z"}, "message": "Daily bump.", "tree": {"sha": "e9d9b84d3857a60a8218e08a26f3e299b61bccda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d9b84d3857a60a8218e08a26f3e299b61bccda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/comments", "author": null, "committer": null, "parents": [{"sha": "e4604715716879c2bc53f7838c25f9730144e63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4604715716879c2bc53f7838c25f9730144e63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4604715716879c2bc53f7838c25f9730144e63f"}], "stats": {"total": 1098, "additions": 1097, "deletions": 1}, "files": [{"sha": "693c6ac915bbec897871578e8c45c76767ff18b1", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,8 @@\n+2021-08-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Ignore problematic\n+\t  commit.\n+\n 2021-07-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* vimrc (textwidth): Change non-gitcommit length to 79."}, {"sha": "0421ff451a60f453605cac929506efab21655fc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,378 @@\n+2021-08-03  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-cfg.c (move_sese_region_to_fn): Fix typos on dloop.\n+\n+2021-08-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<insn><mode>):New expander.\n+\t(cond_mul<mode>): Ditto.\n+\t(cond_div<mode>): Ditto.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_finalize_stack_frame_flags): Also\n+\tcheck stack_realign_needed for stack realignment.\n+\t(ix86_legitimate_constant_p): Always allow CONST_WIDE_INT smaller\n+\tthan the largest integer supported by vector register.\n+\t* config/i386/i386.h (MAX_MOVE_MAX): New.  Set to 64.\n+\t(MOVE_MAX): Set to bytes of the largest integer supported by\n+\tvector register.\n+\t(STORE_MAX_PIECES): New.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_vector_move): Call\n+\tix86_gen_scratch_sse_rtx to get a scratch SSE register to copy\n+\tdata from one memory location to another.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* config/i386/i386.c (TARGET_GEN_MEMSET_SCRATCH_RTX): New.\n+\n+2021-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/101724\n+\t* params.opt: Remove --param=threader-iterative.\n+\t* tree-ssa-threadbackward.c (pass_thread_jumps::execute): Remove\n+\titerative mode.\n+\n+2021-08-02  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR middle-end/101665\n+\t* doc/extend.texi (nonnull attribute): Improve documentation.\n+\n+2021-08-02  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR rtl-optimization/101683\n+\t* rtlanal.c (may_trap_p_1): Handle UNSIGNED_FIX.\n+\n+2021-08-02  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-phiopt.c (cond_removal_in_builtin_zero_pattern):\n+\tRenamed from cond_removal_in_popcount_clz_ctz_pattern.\n+\tAdd support for BSWAP, FFS, PARITY and CLRSB builtins.\n+\t(tree_ssa_phiop_worker): Update call to function above.\n+\n+2021-08-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/78103\n+\t* config/i386/i386.md (bsr_rex64_1_zext): New.\n+\t(combine splitter for constant - clzll): Replace gen_bsr_rex64_1\n+\twith gen_bsr_rex64_1_zext.\n+\n+2021-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/78103\n+\t* config/i386/i386.md (bsr_rex64_1, bsr_1, bsr_zext_1): New\n+\tdefine_insn patterns.\n+\t(*bsr_rex64_2, *bsr_2): New define_insn_and_split patterns.\n+\tAdd combine splitters for constant - clz.\n+\t(clz<mode>2): Use a temporary pseudo for bsr result.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_floor_pd, _mm_floor_ps,\n+\t_mm_floor_sd, _mm_floor_ss): New.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_ceil_pd, _mm_ceil_ps,\n+\t_mm_ceil_sd, _mm_ceil_ss): New.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_blend_pd, _mm_blendv_pd,\n+\t_mm_blend_ps, _mm_blendv_ps): New.\n+\n+2021-07-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*dec_cmov<mode>): New define_insn_and_split\n+\tto generate a conditional move using the carry flag after sub $1.\n+\t(peephole2): Eliminate a register-to-register move by inverting\n+\tthe condition of a conditional move.\n+\n+2021-07-30  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (\"call\", \"call_value\", \"*call_real\")\n+\t(\"*call_value_real\"): Don't generate rtx mentioning the generic\n+\toperands 1 and 2 to \"call\", and similarly for \"call_value\".\n+\t* config/mmix/mmix.c (mmix_print_operand_punct_valid_p)\n+\t(mmix_print_operand): Use '!' instead of 'p'.\n+\n+2021-07-30  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* doc/md.texi (call): Correct information about operand 2.\n+\t* config/mmix/mmix.md (\"call\", \"call_value\"): Remove fixed FIXMEs.\n+\n+2021-07-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_trunc_mod::wi_fold): Fold constants.\n+\n+2021-07-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_div::wi_fold): Return UNDEFINED for [0, 0] divisor.\n+\n+2021-07-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (*::set_bb_range): Change const basic_block to\n+\tconst_basic_block..\n+\t(*::get_bb_range): Ditto.\n+\t(*::bb_range_p): Ditto.\n+\t* gimple-range-cache.h: Change prototypes.\n+\n+2021-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* builtins.c (builtin_memcpy_read_str): Change the mode argument\n+\tfrom scalar_int_mode to fixed_size_mode.\n+\t(builtin_strncpy_read_str): Likewise.\n+\t(gen_memset_value_from_prev): New function.\n+\t(builtin_memset_read_str): Change the mode argument from\n+\tscalar_int_mode to fixed_size_mode.  Use gen_memset_value_from_prev\n+\tand support CONST_VECTOR.\n+\t(builtin_memset_gen_str): Likewise.\n+\t(try_store_by_multiple_pieces): Use by_pieces_constfn to declare\n+\tconstfun.\n+\t* builtins.h (builtin_strncpy_read_str): Replace scalar_int_mode\n+\twith fixed_size_mode.\n+\t(builtin_memset_read_str): Likewise.\n+\t* expr.c (widest_int_mode_for_size): Renamed to ...\n+\t(widest_fixed_size_mode_for_size): Add a bool argument to\n+\tindicate if QI vector mode can be used.\n+\t(by_pieces_ninsns): Call widest_fixed_size_mode_for_size\n+\tinstead of widest_int_mode_for_size.\n+\t(pieces_addr::adjust): Change the mode argument from\n+\tscalar_int_mode to fixed_size_mode.\n+\t(op_by_pieces_d): Make m_len read-only.  Add a bool member,\n+\tm_qi_vector_mode, to indicate that QI vector mode can be used.\n+\t(op_by_pieces_d::op_by_pieces_d): Add a bool argument to\n+\tinitialize m_qi_vector_mode.  Call widest_fixed_size_mode_for_size\n+\tinstead of widest_int_mode_for_size.\n+\t(op_by_pieces_d::get_usable_mode): Change the mode argument from\n+\tscalar_int_mode to fixed_size_mode.  Call\n+\twidest_fixed_size_mode_for_size instead of\n+\twidest_int_mode_for_size.\n+\t(op_by_pieces_d::smallest_fixed_size_mode_for_size): New member\n+\tfunction to return the smallest integer or QI vector mode.\n+\t(op_by_pieces_d::run): Call widest_fixed_size_mode_for_size\n+\tinstead of widest_int_mode_for_size.  Call\n+\tsmallest_fixed_size_mode_for_size instead of\n+\tsmallest_int_mode_for_size.\n+\t(store_by_pieces_d::store_by_pieces_d): Add a bool argument to\n+\tindicate that QI vector mode can be used and pass it to\n+\top_by_pieces_d::op_by_pieces_d.\n+\t(can_store_by_pieces): Call widest_fixed_size_mode_for_size\n+\tinstead of widest_int_mode_for_size.  Pass memsetp to\n+\twidest_fixed_size_mode_for_size to support QI vector mode.\n+\tAllow all CONST_VECTORs for memset if vec_duplicate is supported.\n+\t(store_by_pieces): Pass memsetp to\n+\tstore_by_pieces_d::store_by_pieces_d.\n+\t(clear_by_pieces_1): Removed.\n+\t(clear_by_pieces): Replace clear_by_pieces_1 with\n+\tbuiltin_memset_read_str and pass true to store_by_pieces_d to\n+\tsupport vector mode broadcast.\n+\t(string_cst_read_str): Change the mode argument from\n+\tscalar_int_mode to fixed_size_mode.\n+\t* expr.h (by_pieces_constfn): Change scalar_int_mode to\n+\tfixed_size_mode.\n+\t(by_pieces_prev): Likewise.\n+\t* rtl.h (lowpart_subreg_regno): New.\n+\t* rtlanal.c (lowpart_subreg_regno): New.  A wrapper around\n+\tsimplify_subreg_regno.\n+\t* target.def (gen_memset_scratch_rtx): New hook.\n+\t* doc/tm.texi.in: Add TARGET_GEN_MEMSET_SCRATCH_RTX.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-07-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/94780\n+\t* config/mips/mips.c (mips_atomic_assign_expand_fenv): Use\n+\t  TARGET_EXPR instead of MODIFY_EXPR.\n+\n+2021-07-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/101132\n+\t* config/mips/mips-protos.h (mips_expand_vec_cmp_expr): Declare.\n+\t* config/mips/mips.c (mips_expand_vec_cmp_expr): New function.\n+\t* config/mips/mips-msa.md (vec_cmp<MSA:mode><mode_i>): New\n+\t  expander.\n+\t  (vec_cmpu<IMSA:mode><mode_i>): New expander.\n+\n+2021-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101685\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tDon't enable LZCNT/POPCNT if they have been disabled explicitly.\n+\n+2021-07-30  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h (vld1_p64): Replace call to builtin by\n+\texplicitly dereferencing __a.\n+\t(vld1_s64): Likewise.\n+\t(vld1_u64): Likewise.\n+\t* config/arm/arm_neon_builtins.def (vld1): Remove entry for di\n+\tand change to VAR13.\n+\n+2021-07-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-loop-versioning.cc (lv_dom_walker::lv_dom_walker): Remove\n+\tuse of m_range_analyzer.\n+\t(loop_versioning::lv_dom_walker::before_dom_children): Same.\n+\t(loop_versioning::lv_dom_walker::after_dom_children): Remove.\n+\t(loop_versioning::prune_loop_conditions): Replace vr_values use\n+\twith range_query interface.\n+\t(pass_loop_versioning::execute): Use ranger.\n+\n+2021-07-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR ipa/101396\n+\t* ipa-devirt.c (ipa_odr_read_section): Compare the precision of\n+\t  enum values, and emit a warning if they mismatch.\n+\n+2021-07-30  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* cfgloop.h (as_const): New function.\n+\t(class loop_iterator): Rename to ...\n+\t(class loops_list): ... this.\n+\t(loop_iterator::next): Rename to ...\n+\t(loops_list::Iter::fill_curr_loop): ... this and adjust.\n+\t(loop_iterator::loop_iterator): Rename to ...\n+\t(loops_list::loops_list): ... this and adjust.\n+\t(loops_list::Iter): New class.\n+\t(loops_list::iterator): New type.\n+\t(loops_list::const_iterator): New type.\n+\t(loops_list::begin): New function.\n+\t(loops_list::end): Likewise.\n+\t(loops_list::begin const): Likewise.\n+\t(loops_list::end const): Likewise.\n+\t(FOR_EACH_LOOP): Remove.\n+\t(FOR_EACH_LOOP_FN): Remove.\n+\t* cfgloop.c (flow_loops_dump): Adjust FOR_EACH_LOOP* with range-based\n+\tfor loop with loops_list instance.\n+\t(sort_sibling_loops): Likewise.\n+\t(disambiguate_loops_with_multiple_latches): Likewise.\n+\t(verify_loop_structure): Likewise.\n+\t* cfgloopmanip.c (create_preheaders): Likewise.\n+\t(force_single_succ_latches): Likewise.\n+\t* config/aarch64/falkor-tag-collision-avoidance.c\n+\t(execute_tag_collision_avoidance): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_scan_for_setlb_lcc): Likewise.\n+\t* config/s390/s390.c (s390_adjust_loops): Likewise.\n+\t* doc/loop.texi: Likewise.\n+\t* gimple-loop-interchange.cc (pass_linterchange::execute): Likewise.\n+\t* gimple-loop-jam.c (tree_loop_unroll_and_jam): Likewise.\n+\t* gimple-loop-versioning.cc (loop_versioning::analyze_blocks): Likewise.\n+\t(loop_versioning::make_versioning_decisions): Likewise.\n+\t* gimple-ssa-split-paths.c (split_paths): Likewise.\n+\t* graphite-isl-ast-to-gimple.c (graphite_regenerate_ast_isl): Likewise.\n+\t* graphite.c (canonicalize_loop_form): Likewise.\n+\t(graphite_transform_loops): Likewise.\n+\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n+\t* ipa-pure-const.c (analyze_function): Likewise.\n+\t* loop-doloop.c (doloop_optimize_loops): Likewise.\n+\t* loop-init.c (loop_optimizer_finalize): Likewise.\n+\t(fix_loop_structure): Likewise.\n+\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n+\t(move_loop_invariants): Likewise.\n+\t* loop-unroll.c (decide_unrolling): Likewise.\n+\t(unroll_loops): Likewise.\n+\t* modulo-sched.c (sms_schedule): Likewise.\n+\t* predict.c (predict_loops): Likewise.\n+\t(pass_profile::execute): Likewise.\n+\t* profile.c (branch_prob): Likewise.\n+\t* sel-sched-ir.c (sel_finish_pipelining): Likewise.\n+\t(sel_find_rgns): Likewise.\n+\t* tree-cfg.c (replace_loop_annotate): Likewise.\n+\t(replace_uses_by): Likewise.\n+\t(move_sese_region_to_fn): Likewise.\n+\t* tree-if-conv.c (pass_if_conversion::execute): Likewise.\n+\t* tree-loop-distribution.c (loop_distribution::execute): Likewise.\n+\t* tree-parloops.c (parallelize_loops): Likewise.\n+\t* tree-predcom.c (tree_predictive_commoning): Likewise.\n+\t* tree-scalar-evolution.c (scev_initialize): Likewise.\n+\t(scev_reset): Likewise.\n+\t* tree-ssa-dce.c (find_obviously_necessary_stmts): Likewise.\n+\t* tree-ssa-live.c (remove_unused_locals): Likewise.\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Likewise.\n+\t* tree-ssa-loop-im.c (analyze_memory_references): Likewise.\n+\t(tree_ssa_lim_initialize): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Likewise.\n+\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize): Likewise.\n+\t* tree-ssa-loop-manip.c (get_loops_exits): Likewise.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations): Likewise.\n+\t(free_numbers_of_iterations_estimates): Likewise.\n+\t* tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Likewise.\n+\t* tree-ssa-loop-split.c (tree_ssa_split_loops): Likewise.\n+\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Likewise.\n+\t* tree-ssa-loop.c (gate_oacc_kernels): Likewise.\n+\t(pass_scev_cprop::execute): Likewise.\n+\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): Likewise.\n+\t* tree-ssa-sccvn.c (do_rpo_vn): Likewise.\n+\t* tree-ssa-threadupdate.c\n+\t(jump_thread_path_registry::thread_through_all_blocks): Likewise.\n+\t* tree-vectorizer.c (vectorize_loops): Likewise.\n+\t* tree-vrp.c (vrp_asserts::find_assert_locations): Likewise.\n+\n+2021-07-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_function_arg_1): Avoid\n+\tgenerating a VOIDmode register for e.g the\n+\tfunction_arg_info::end_marker.\n+\n+2021-07-29  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/h8300-modes.def: Add CCZ, CCV and CCC, drop CCZNV.\n+\t* config/h8300/h8300.md (H8cc mode iterator): Add CCZ.\n+\t(cc mode_attr): Similarly.\n+\t(ccz subst_attr): Similarly.\n+\t* config/h8300/jumpcall.md: Add new patterns for branch-on-bit.\n+\t* config/h8300/testcompare.md: Remove various cc0 based patterns\n+\tthat had been commented out.  Add pattern to set CCZ from a bit\n+\ttest.\n+\n+2021-07-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* omp-offload.c (oacc_loop_xform_head_tail, oacc_loop_process):\n+\t'update_stmt' after modification.\n+\t(pass_oacc_loop_designation): New function, extracted out of...\n+\t(pass_oacc_device_lower): ... this.\n+\t(pass_data_oacc_loop_designation, pass_oacc_loop_designation)\n+\t(make_pass_oacc_loop_designation): New\n+\t* passes.def: Add it.\n+\t* tree-parloops.c (create_parallel_loop): Adjust.\n+\t* tree-pass.h (make_pass_oacc_loop_designation): New.\n+\n+2021-07-29  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* target.def: in0 and in1 do not need to be registers.\n+\t* doc/tm.texi: Regenerate.\n+\n+2021-07-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/39821\n+\t* config/i386/i386.c (ix86_widen_mult_cost): New function.\n+\t(ix86_add_stmt_cost): Use ix86_widen_mult_cost for\n+\tWIDEN_MULT_EXPR.\n+\n+2021-07-29  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/61837\n+\t* config/rs6000/rs6000.c (TARGET_PREFERRED_DOLOOP_MODE): New hook.\n+\t(rs6000_preferred_doloop_mode): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Add hook preferred_doloop_mode.\n+\t* target.def (preferred_doloop_mode): New hook.\n+\t* targhooks.c (default_preferred_doloop_mode): New hook.\n+\t* targhooks.h (default_preferred_doloop_mode): New hook.\n+\t* tree-ssa-loop-ivopts.c (compute_doloop_base_on_mode): New function.\n+\t(add_iv_candidate_for_doloop): Call targetm.preferred_doloop_mode\n+\tand compute_doloop_base_on_mode.\n+\n 2021-07-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/101494"}, {"sha": "d34783f87b1df02eb7884eb6c3bf019892310528", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1 +1 @@\n-20210729\n+20210803"}, {"sha": "2da5aae58ff5ff5892178c15846843e579813aa6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,33 @@\n+2021-07-29  Ankur Saini  <arsenic@sourceware.org>\n+\n+\t* call-string.cc (call_string::element_t::operator==): New operator.\n+\t(call_String::element_t::operator!=): New operator.\n+\t(call_string::element_t::get_caller_function): New function.\n+\t(call_string::element_t::get_callee_function): New function.\n+\t(call_string::call_string): Refactor to Initialise m_elements.\n+\t(call_string::operator=): Refactor to work with m_elements.\n+\t(call_string::operator==): Likewise.\n+\t(call_string::to_json): Likewise.\n+\t(call_string::hash): Refactor to hash e.m_caller.\n+\t(call_string::push_call): Refactor to work with m_elements.\n+\t(call_string::push_call): New overload to push call via supernodes.\n+\t(call_string::pop): Refactor to work with m_elements.\n+\t(call_string::calc_recursion_depth): Likewise.\n+\t(call_string::cmp): Likewise.\n+\t(call_string::validate): Likewise.\n+\t(call_string::operator[]): Likewise.\n+\t* call-string.h (class supernode): New forward decl.\n+\t(struct call_string::element_t): New struct.\n+\t(call_string::call_string): Refactor to initialise m_elements.\n+\t(call_string::bool empty_p): Refactor to work with m_elements.\n+\t(call_string::get_callee_node): New decl.\n+\t(call_string::get_caller_node): New decl.\n+\t(m_elements): Replaces m_return_edges.\n+\t* program-point.cc (program_point::get_function_at_depth): Refactor to\n+\twork with new call-string format.\n+\t(program_point::validate): Likewise.\n+\t(program_point::on_edge): Likewise.\n+\n 2021-07-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (region_model::on_call_pre): Treat"}, {"sha": "7306b3637fc16968486ec3a26bf34b5cf50ee0d6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,16 @@\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* c-common.h (enum rid): Add RID_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\t* c-common.c (c_common_reswords): Add\n+\t__is_pointer_interconvertible_base_of.\n+\n+2021-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/101512\n+\t* c-common.c (c_common_mark_addressable_vec): Look through\n+\tC_MAYBE_CONST_EXPR even if not at the toplevel.\n+\n 2021-07-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/101585"}, {"sha": "5468792778ddedab54310d1d80a018ba22fef83a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,93 @@\n+2021-08-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100828\n+\t* logic.cc (formula::formula): Use emplace_back instead of\n+\tpush_back.\n+\t(formula::branch): Insert a copy of m_current directly after\n+\tm_current instead of at the end of the list.\n+\t(formula::erase): Define.\n+\t(decompose_formula): Remove.\n+\t(decompose_antecedents): Remove.\n+\t(decompose_consequents): Remove.\n+\t(derive_proofs): Remove.\n+\t(max_problem_size): Remove.\n+\t(diagnose_constraint_size): Remove.\n+\t(subsumes_constraints_nonnull): Rewrite directly in terms of\n+\tdecompose_clause and derive_proof, interleaving decomposition\n+\twith implication checking.  Remove limit on constraint complexity.\n+\tUse formula::erase to free the current clause before moving on to\n+\tthe next one.\n+\n+2021-07-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96636\n+\t* decl.c (fixup_anonymous_aggr): Clear TYPE_NEEDS_CONSTRUCTING\n+\tafter error.\n+\n+2021-07-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* ptree.c (cxx_print_type) [TYPE_PACK_EXPANSION]: Also print\n+\tPACK_EXPANSION_PATTERN.\n+\n+2021-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_declaration): Handle OpenMP directives\n+\tin attribute-declaration.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* cp-tree.h (enum cp_trait_kind): Add\n+\tCPTK_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\t(enum cp_built_in_function): Add\n+\tCP_BUILT_IN_IS_POINTER_INTERCONVERTIBLE_WITH_CLASS.\n+\t(fold_builtin_is_pointer_inverconvertible_with_class): Declare.\n+\t* parser.c (cp_parser_primary_expression): Handle\n+\tRID_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\t(cp_parser_trait_expr): Likewise.\n+\t* cp-objcp-common.c (names_builtin_p): Likewise.\n+\t* constraint.cc (diagnose_trait_expr): Handle\n+\tCPTK_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\t* decl.c (cxx_init_decl_processing): Register\n+\t__builtin_is_pointer_interconvertible_with_class builtin.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n+\tCP_BUILT_IN_IS_POINTER_INTERCONVERTIBLE_WITH_CLASS builtin.\n+\t* semantics.c (pointer_interconvertible_base_of_p,\n+\tfirst_nonstatic_data_member_p,\n+\tfold_builtin_is_pointer_inverconvertible_with_class): New functions.\n+\t(trait_expr_value): Handle CPTK_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\t(finish_trait_expr): Likewise.  Formatting fix.\n+\t* cp-gimplify.c (cp_gimplify_expr): Fold\n+\tCP_BUILT_IN_IS_POINTER_INTERCONVERTIBLE_WITH_CLASS.  Call\n+\tfndecl_built_in_p just once.\n+\t(cp_fold): Likewise.\n+\t* tree.c (builtin_valid_in_constant_expr_p): Handle\n+\tCP_BUILT_IN_IS_POINTER_INTERCONVERTIBLE_WITH_CLASS.  Call\n+\tfndecl_built_in_p just once.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n+\tCPTK_IS_POINTER_INTERCONVERTIBLE_BASE_OF.\n+\n+2021-07-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (finish_struct_anon): Improve comment.\n+\t* decl.c (fixup_anonymous_aggr): Reject anonymous struct\n+\twith bases.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_statement): Rollback attributes not just\n+\twhen std_attrs is non-NULL, but whenever\n+\tcp_parser_std_attribute_spec_seq parsed any tokens.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101582\n+\t* parser.c (cp_parser_skip_std_attribute_spec_seq): Add a forward\n+\tdeclaration.\n+\t(cp_parser_declaration): Parse empty-declaration and\n+\tattribute-declaration.\n+\t(cp_parser_toplevel_declaration): Don't parse empty-declaration here.\n+\n 2021-07-28  Martin Sebor  <msebor@redhat.com>\n \n \t* init.c: Include new header."}, {"sha": "3bf2eec40a5bd05cf1317ac86c4e75f8bee655b9", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,101 @@\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (binary_op): Remove dead code.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoClassDeclaration *)):\n+\tAlways layout initializer for the m_RTInfo field.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (ExprVisitor::visit (AssertExp *)): Don't generate\n+\tPREDICT_EXPR.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Clarify comment\n+\t  for generating static array assignment with literal.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (enum_initializer_decl): Only handle named enums.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (make_thunk): Set COMDAT and visibility of thunks only if\n+\tthey are public.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Don't use sinit\n+\tfor declaration directly.\n+\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n+\t(aggregate_initializer_decl): Likewise.  Set sinit after creating.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (build_frontend_type): Use Identifier::idPool to\n+\tgenerate anonymous field name.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* types.cc (layout_aggregate_type): Call hasMonitor.\n+\t* typeinfo.cc (TypeInfoVisitor::layout_base): Likewise.\n+\t(layout_cpp_typeinfo): Likewise.  Don't emit vtable unless\n+\thave_typeinfo_p.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc (deps_add_target): Insert null terminator in buffer.\n+\t(deps_write): Likewise.\n+\t(d_parse_file): Likewise.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (build_frontend_type): Restore builtin_converted_decls\n+\tlength on conversion failure.\n+\n+2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (d_nested_class): Rename to ...\n+\t(get_outer_function): ... this.  Handle all aggregate declarations.\n+\t(d_nested_struct): Remove.\n+\t(find_this_tree): Use get_outer_function.\n+\t(get_framedecl): Likewise.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101672\n+\t* typeinfo.cc (make_frontend_typeinfo): Generate Object class if it\n+\tdoesn't exist.\n+\t(check_typeinfo_type): Don't warn if there's no location.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101664\n+\t* expr.cc (ExprVisitor::visit (CallExp *)): Use object expression as\n+\tresult for C++ constructor calls.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96435\n+\t* d-convert.cc (convert_for_rvalue): New function.\n+\t* d-tree.h (convert_for_rvalue): Declare.\n+\t* expr.cc (ExprVisitor::visit (CastExp *)): Use convert_for_rvalue.\n+\t(build_return_dtor): Likewise.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101657\n+\t* d-lang.cc (d_parse_file): Remove generated D header files on error.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101656\n+\t* d-diagnostic.cc (escape_d_format): Don't escape quoted format\n+\tstrings.\n+\n 2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/101640"}, {"sha": "3400b408dfed5c2a38c0888829bad15e882726e0", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,16 @@\n+2021-07-31  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fr.po: Update.\n+\n+2021-07-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* de.po: Update.\n+\n+2021-07-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, zh_CN.po, zh_TW.po: Update.\n+\n 2021-07-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "b4d9816215f7d2fca68042eb3bc732c0d3d3d78b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,378 @@\n+2021-08-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/80566\n+\t* g++.target/i386/pr80566-1.C: New test.\n+\t* g++.target/i386/pr80566-2.C: Likewise.\n+\n+2021-08-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_addsubmuldiv_double-1.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmuldiv_double-2.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmuldiv_float-1.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmuldiv_float-2.c: New test.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/vect8-ret.c: Also pass -mno-sse.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/incoming-11.c: Expect no stack realignment.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/sw-1.c: Also pass -mno-avx for ia32.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/cold-attribute-1.c: Also pass -mno-avx.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr72839.c: Also pass -mno-avx.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pieces-memcpy-10.c: New test.\n+\t* gcc.target/i386/pieces-memcpy-11.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-12.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-13.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-14.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-15.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-16.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-1.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-2.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-3.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-4.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-5.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-6.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-7.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-8.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-9.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-10.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-11.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-12.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-13.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-14.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-15.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-16.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-17.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-18.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-19.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-20.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-21.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-22.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-23.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-24.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-25.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-26.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-27.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-28.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-29.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-30.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-31.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-32.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-33.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-34.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-35.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-36.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-37.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-38.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-39.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-40.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-41.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-42.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-43.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-44.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-7.c: New file.\n+\t* gcc.target/i386/pieces-memcpy-8.c: New file.\n+\t* gcc.target/i386/pieces-memcpy-9.c: New file.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* gcc.target/i386/pr90773-20.c: New test.\n+\t* gcc.target/i386/pr90773-21.c: Likewise.\n+\t* gcc.target/i386/pr90773-22.c: Likewise.\n+\t* gcc.target/i386/pr90773-23.c: Likewise.\n+\t* gcc.target/i386/pr90773-26.c: Likewise.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr90773-1.c: Adjust to expect movq for 32-bit.\n+\t* gcc.target/i386/pr90773-4.c: Also run for 32-bit.\n+\t* gcc.target/i386/pr90773-15.c: Likewise.\n+\t* gcc.target/i386/pr90773-16.c: Likewise.\n+\t* gcc.target/i386/pr90773-17.c: Likewise.\n+\t* gcc.target/i386/pr90773-24.c: Likewise.\n+\t* gcc.target/i386/pr90773-25.c: Likewise.\n+\t* gcc.target/i386/pr100865-1.c: Likewise.\n+\t* gcc.target/i386/pr100865-2.c: Likewise.\n+\t* gcc.target/i386/pr100865-3.c: Likewise.\n+\t* gcc.target/i386/pr90773-14.c: Also run for 32-bit and expect\n+\tXMM movd to store 4 bytes.\n+\t* gcc.target/i386/pr100865-4a.c: Also run for 32-bit and expect\n+\tYMM registers.\n+\t* gcc.target/i386/pr100865-4b.c: Likewise.\n+\t* gcc.target/i386/pr100865-10a.c: Expect YMM registers.\n+\t* gcc.target/i386/pr100865-10b.c: Likewise.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/eh_return-1.c: New test.\n+\n+2021-08-02  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* gcc.target/i386/pr90773-5.c: Updated to expect XMM register.\n+\t* gcc.target/i386/pr90773-14.c: Likewise.\n+\t* gcc.target/i386/pr90773-15.c: New test.\n+\t* gcc.target/i386/pr90773-16.c: Likewise.\n+\t* gcc.target/i386/pr90773-17.c: Likewise.\n+\t* gcc.target/i386/pr90773-18.c: Likewise.\n+\t* gcc.target/i386/pr90773-19.c: Likewise.\n+\n+2021-08-02  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/tree-ssa/phi-opt-25.c: New test case.\n+\n+2021-08-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/78103\n+\t* gcc.target/i386/pr78103-2.c: Also scan incl.\n+\t* gcc.target/i386/pr78103-3.c: Scan leal|addl|incl for x32.  Also\n+\tscan incq.\n+\n+2021-07-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96636\n+\t* g++.dg/ext/anon-struct9.C: New test.\n+\n+2021-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/dec-cmov-2.c: Require -march=core2 with -m32.\n+\n+2021-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-9.C: New test.\n+\n+2021-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/78103\n+\t* gcc.target/i386/pr78103-1.c: New test.\n+\t* gcc.target/i386/pr78103-2.c: New test.\n+\t* gcc.target/i386/pr78103-3.c: New test.\n+\n+2021-07-31  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dse-26.c: Skip on mmix-knuth-mmixware.\n+\n+2021-07-31  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tPR middle-end/101674\n+\t* gcc.dg/uninit-pred-9_b.c: Xfail for mmix-*-* too.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-floorpd.c: New.\n+\t* gcc.target/powerpc/sse4_1-floorps.c: New.\n+\t* gcc.target/powerpc/sse4_1-floorsd.c: New.\n+\t* gcc.target/powerpc/sse4_1-floorss.c: New.\n+\t* gcc.target/powerpc/sse4_1-roundpd-2.c: Copy from\n+\tgcc/testsuite/gcc.target/i386 and adjust dg directives to suit.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-ceilpd.c: New.\n+\t* gcc.target/powerpc/sse4_1-ceilps.c: New.\n+\t* gcc.target/powerpc/sse4_1-ceilsd.c: New.\n+\t* gcc.target/powerpc/sse4_1-ceilss.c: New.\n+\t* gcc.target/powerpc/sse4_1-round-data.h: New.\n+\t* gcc.target/powerpc/sse4_1-round.h: New.\n+\t* gcc.target/powerpc/sse4_1-round2.h: New.\n+\t* gcc.target/powerpc/sse4_1-roundpd-3.c: Copy from gcc.target/i386\n+\tand adjust dg directives to suit.\n+\t* gcc.target/powerpc/sse4_1-check.h (__VSX_SSE2__): Define.\n+\n+2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-blendpd.c: Copy from gcc.target/i386\n+\tand adjust dg directives to suit.\n+\t* gcc.target/powerpc/sse4_1-blendps-2.c: Likewise.\n+\t* gcc.target/powerpc/sse4_1-blendps.c: Likewise.\n+\t* gcc.target/powerpc/sse4_1-blendvpd.c: Likewise.\n+\n+2021-07-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/dec-cmov-1.c: New test.\n+\t* gcc.target/i386/dec-cmov-2.c: New test.\n+\n+2021-07-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr61839_2.c: Adjust.  Add new const fold test.\n+\n+2021-07-30  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr61839_2.c: Adjust.\n+\n+2021-07-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101671\n+\t* gcc.c-torture/compile/pr83510.c: Move test functions...\n+\t* gcc.dg/Warray-bounds-87.c: ...to this file.\n+\n+2021-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr100865-3.c: Expect vmovdqu8 instead of\n+\tvmovdqu.\n+\t* gcc.target/i386/pr100865-4b.c: Likewise.\n+\n+2021-07-30  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR testsuite/101517\n+\t* g++.dg/warn/Wunused-18.C: New test.\n+\t* gcc.c-torture/compile/20030405-2.c: New test.\n+\t* gcc.c-torture/compile/20040304-2.c: New test.\n+\t* gcc.dg/20030612-2.c: New test.\n+\n+2021-07-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/101132\n+\t* gcc.target/mips/pr101132.c: New test.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-base-of1.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class1.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class2.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class3.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class4.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class5.C: New test.\n+\t* g++.dg/cpp2a/is-pointer-interconvertible-with-class6.C: New test.\n+\n+2021-07-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/anon-struct8.C: New test.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp0x/gen-attrs-76.C: New test.\n+\n+2021-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101685\n+\t* gcc.target/i386/pr101685.c: New test.\n+\n+2021-07-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/shrink-wrap-loop.c: Enable early jump threading.  Mark as\n+\tXFAIL.\n+\n+2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101582\n+\t* g++.dg/cpp0x/gen-attrs-45.C: Expect a warning about ignored\n+\tattributes instead of error.\n+\t* g++.dg/cpp0x/gen-attrs-75.C: New test.\n+\t* g++.dg/modules/pr101582-1.C: New test.\n+\n+2021-07-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR ipa/101396\n+\t* g++.dg/lto/pr101396_0.C: New test.\n+\t* g++.dg/lto/pr101396_1.C: New test.\n+\n+2021-07-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101674\n+\t* gcc.dg/uninit-pred-9_b.c: Xfail just the failing assertion and\n+\tcorrect target.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101672\n+\t* gdc.dg/pr100967.d: Update test.\n+\t* gdc.dg/pr101672.d: New test.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101664\n+\t* gdc.dg/extern-c++/extern-c++.exp: New.\n+\t* gdc.dg/extern-c++/pr101664.d: New test.\n+\t* gdc.dg/extern-c++/pr101664_1.cc: New test.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96435\n+\t* gdc.dg/torture/pr96435.d: New test.\n+\n+2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/101657\n+\t* gdc.dg/pr101657.d: New test.\n+\n+2021-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/101647\n+\t* g++.dg/pr71389.C: Include <array> instead of <functional>.\n+\t* g++.dg/cpp0x/initlist48.C: Include also <initializer_list>.\n+\n+2021-07-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c:\n+\t's%oaccdevlow%oaccloops%g'.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine-nohost.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine.c: Likewise.\n+\t* c-c++-common/goacc/classify-serial.c: Likewise.\n+\t* c-c++-common/goacc/routine-nohost-1.c: Likewise.\n+\t* g++.dg/goacc/template.C: Likewise.\n+\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine-nohost.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-serial.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n+\n+2021-07-29  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100952\n+\t* gcc.target/powerpc/pr56605.c: Change matching\n+\tconditions.\n+\t* gcc.target/powerpc/pr81348.c: Likewise.\n+\n+2021-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/101512\n+\t* gcc.dg/torture/pr101512.c: New testcase.\n+\n+2021-07-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/99881\n+\t* gcc.target/i386/pr91446.c:\n+\t* gcc.target/i386/pr92658-avx512bw-2.c:\n+\t* gcc.target/i386/pr92658-sse4-2.c:\n+\t* gcc.target/i386/pr92658-sse4.c:\n+\t* gcc.target/i386/pr99881.c:\n+\n+2021-07-29  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/39821\n+\t* gcc.target/i386/sse2-pr39821.c: New test.\n+\t* gcc.target/i386/sse4-pr39821.c: New test.\n+\n+2021-07-29  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR target/61837\n+\t* gcc.target/powerpc/pr61837.c: New test.\n+\n 2021-07-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/101494"}, {"sha": "cbd127467a86e7fa4f6e6cc555aea1635d1e7cec", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,35 @@\n+2021-07-30  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n+\n+\t* fortran.c (omp_display_env_, omp_display_env_8_): Only\n+\t'#ifndef LIBGOMP_OFFLOADED_ONLY'.\n+\n+2021-07-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-2.c:\n+\t's%oaccdevlow%oaccloops%g'.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-nohost-1.f90: Likewise.\n+\n 2021-07-27  Ulrich Drepper  <drepper@gmail.com>\n \n \t* env.c (wait_policy, stacksize): New static variables,"}, {"sha": "28d9939191b9b9f98440c24b9bf66191b9c5013b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4d17ca1bc74109e5cc4ef34890b6293c4bcb1d6a", "patch": "@@ -1,3 +1,68 @@\n+2021-08-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/101599\n+\t* include/bits/ranges_algo.h (__reverse_copy_fn::operator()):\n+\tAdd missing std::move in return statement.\n+\t(__partition_copy_fn::operator()): Rename templtae parameter\n+\t_O2 to _Out2.  Uglify function parameters out_true and out_false.\n+\t* include/bits/ranges_algobase.h (__copy_or_move): Add missing\n+\tstd::move to recursive call that unwraps a __normal_iterator\n+\toutput iterator.\n+\t* testsuite/25_algorithms/copy/constrained.cc (test06): New test.\n+\t* testsuite/25_algorithms/move/constrained.cc (test05): New test.\n+\n+2021-08-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/101589\n+\t* include/std/ranges (lazy_split_view::_InnerIter::base): Make\n+\tthe const& overload unconstrained and return a const reference\n+\tas per LWG 3533.  Make unconditionally noexcept.\n+\t(elements_view::base): Revert accidental r12-569 change.\n+\t(elements_view::_Iterator::base): Make the const& overload\n+\tunconstrained and return a const reference as per LWG 3533.\n+\tMake unconditionally noexcept.\n+\n+2021-08-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/101483\n+\t* include/std/ranges (join_view::_Iterator::_Iterator): Add\n+\tmissing std::move.\n+\n+2021-08-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101709\n+\t* src/filesystem/ops-common.h (get_temp_directory_from_env):\n+\tAdd error_code parameter.\n+\t* src/c++17/fs_ops.cc (fs::temp_directory_path): Pass error_code\n+\targument to get_temp_directory_from_env and check it.\n+\t* src/filesystem/ops.cc (fs::temp_directory_path): Likewise.\n+\n+2021-08-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/tuple/comparison_operators/overloaded2.cc:\n+\tAdd dg-error for c++11_only target.\n+\n+2021-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65018\n+\t* configure.ac: Check for secure_getenv.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/filesystem/ops-common.h (get_temp_directory_from_env): New\n+\thelper function to obtain path from the environment.\n+\t* src/c++17/fs_ops.cc (fs::temp_directory_path): Use new helper.\n+\t* src/filesystem/ops.cc (fs::temp_directory_path): Likewise.\n+\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n+\tPrint messages if test cannot be run.\n+\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n+\tLikewise. Fix incorrect condition. Use \"TMP\" to work with\n+\tWindows as well as POSIX.\n+\n+2021-07-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* src/c++17/memory_resource.cc: Use __exchange instead\n+\tof std::exchange.\n+\n 2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/optional (__throw_bad_optional_access):"}]}