{"sha": "a2db2771a0cd17872b78a4cebb40dad70b9e4539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkYjI3NzFhMGNkMTc4NzJiNzhhNGNlYmI0MGRhZDcwYjllNDUzOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-02-22T01:55:40Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-02-22T01:55:40Z"}, "message": "re PR target/34526 (no-altivec ABI should be fixed or no longer be the default)\n\n\tPR target/34526\n\t* config/rs6000/rs6000.c (rs6000_altivec_abi): Clarify comment.\n\t(rs6000_explicit_options): Split abi into spe_abi and altivec_abi,\n\tadd vrsave.\n\t(rs6000_override_options): Set altivec_abi as default, not override,\n\tfor 64-bit GNU/Linux; for 32-bit GNU/Linux default to altivec_abi for\n\tTARGET_ALTIVEC; default to TARGET_ALTIVEC_VRSAVE when AltiVec ABI\n\tis used; use new member spe_abi.\n\t(rs6000_handle_option): Set rs6000_explicit_options.vrsave; use\n\tspe_abi and altivec_abi.\n\nFrom-SVN: r132537", "tree": {"sha": "1356ee5a501a419436b74e16bdfa0fbb8402eb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1356ee5a501a419436b74e16bdfa0fbb8402eb55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2db2771a0cd17872b78a4cebb40dad70b9e4539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2db2771a0cd17872b78a4cebb40dad70b9e4539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2db2771a0cd17872b78a4cebb40dad70b9e4539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2db2771a0cd17872b78a4cebb40dad70b9e4539/comments", "author": null, "committer": null, "parents": [{"sha": "b3184fd133ddc63e481037c1412fa0410a66643d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3184fd133ddc63e481037c1412fa0410a66643d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3184fd133ddc63e481037c1412fa0410a66643d"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "93b1e073f3d927a26277283c371ec567af74952d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2db2771a0cd17872b78a4cebb40dad70b9e4539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2db2771a0cd17872b78a4cebb40dad70b9e4539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2db2771a0cd17872b78a4cebb40dad70b9e4539", "patch": "@@ -1,3 +1,16 @@\n+2008-02-21  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR target/34526\n+\t* config/rs6000/rs6000.c (rs6000_altivec_abi): Clarify comment.\n+\t(rs6000_explicit_options): Split abi into spe_abi and altivec_abi,\n+\tadd vrsave.\n+\t(rs6000_override_options): Set altivec_abi as default, not override,\n+\tfor 64-bit GNU/Linux; for 32-bit GNU/Linux default to altivec_abi for\n+\tTARGET_ALTIVEC; default to TARGET_ALTIVEC_VRSAVE when AltiVec ABI\n+\tis used; use new member spe_abi.\n+\t(rs6000_handle_option): Set rs6000_explicit_options.vrsave; use\n+\tspe_abi and altivec_abi.\n+\n 2008-02-22  Tomas Bily  <tbily@suse.cz>\n \n \t* tree-vectorizer.c (vect_is_simple_reduction): Fix comment typo."}, {"sha": "b3eb055060584893e11b0835b58cf429d630765a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2db2771a0cd17872b78a4cebb40dad70b9e4539/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2db2771a0cd17872b78a4cebb40dad70b9e4539/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a2db2771a0cd17872b78a4cebb40dad70b9e4539", "patch": "@@ -171,7 +171,7 @@ int rs6000_long_double_type_size;\n /* IEEE quad extended precision long double. */\n int rs6000_ieeequad;\n \n-/* Whether -mabi=altivec has appeared.  */\n+/* Nonzero to use AltiVec ABI.  */\n int rs6000_altivec_abi;\n \n /* Nonzero if we want SPE ABI extensions.  */\n@@ -262,12 +262,14 @@ int rs6000_alignment_flags;\n struct {\n   bool aix_struct_ret;\t\t/* True if -maix-struct-ret was used.  */\n   bool alignment;\t\t/* True if -malign- was used.  */\n-  bool abi;\t\t\t/* True if -mabi=spe/nospe was used.  */\n+  bool spe_abi;\t\t\t/* True if -mabi=spe/no-spe was used.  */\n+  bool altivec_abi;\t\t/* True if -mabi=altivec/no-altivec used.  */\n   bool spe;\t\t\t/* True if -mspe= was used.  */\n   bool float_gprs;\t\t/* True if -mfloat-gprs= was used.  */\n   bool isel;\t\t\t/* True if -misel was used. */\n   bool long_double;\t        /* True if -mlong-double- was used.  */\n   bool ieee;\t\t\t/* True if -mabi=ieee/ibmlongdouble used.  */\n+  bool vrsave;\t\t\t/* True if -mvrsave was used.  */\n } rs6000_explicit_options;\n \n struct builtin_description\n@@ -1590,11 +1592,18 @@ rs6000_override_options (const char *default_cpu)\n   if (TARGET_XCOFF && TARGET_ALTIVEC)\n     rs6000_altivec_abi = 1;\n \n-  /* Set Altivec ABI as default for PowerPC64 Linux.  */\n-  if (TARGET_ELF && TARGET_64BIT)\n+  /* The AltiVec ABI is the default for PowerPC-64 GNU/Linux.  For\n+     PowerPC-32 GNU/Linux, -maltivec implies the AltiVec ABI.  It can\n+     be explicitly overridden in either case.  */\n+  if (TARGET_ELF)\n     {\n-      rs6000_altivec_abi = 1;\n-      TARGET_ALTIVEC_VRSAVE = 1;\n+      if (!rs6000_explicit_options.altivec_abi\n+\t  && (TARGET_64BIT || TARGET_ALTIVEC))\n+\trs6000_altivec_abi = 1;\n+\n+      /* Enable VRSAVE for AltiVec ABI, unless explicitly overridden.  */\n+      if (!rs6000_explicit_options.vrsave)\n+\tTARGET_ALTIVEC_VRSAVE = rs6000_altivec_abi;\n     }\n \n   /* Set the Darwin64 ABI as default for 64-bit Darwin.  */\n@@ -1638,7 +1647,7 @@ rs6000_override_options (const char *default_cpu)\n       /* For the powerpc-eabispe configuration, we set all these by\n \t default, so let's unset them if we manually set another\n \t CPU that is not the E500.  */\n-      if (!rs6000_explicit_options.abi)\n+      if (!rs6000_explicit_options.spe_abi)\n \trs6000_spe_abi = 0;\n       if (!rs6000_explicit_options.spe)\n \trs6000_spe = 0;\n@@ -2131,6 +2140,7 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n       break;\n \n     case OPT_mvrsave_:\n+      rs6000_explicit_options.vrsave = true;\n       rs6000_parse_yes_no_option (\"vrsave\", arg, &(TARGET_ALTIVEC_VRSAVE));\n       break;\n \n@@ -2188,27 +2198,28 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n     case OPT_mabi_:\n       if (!strcmp (arg, \"altivec\"))\n \t{\n-\t  rs6000_explicit_options.abi = true;\n+\t  rs6000_explicit_options.altivec_abi = true;\n \t  rs6000_altivec_abi = 1;\n+\n+\t  /* Enabling the AltiVec ABI turns off the SPE ABI.  */\n \t  rs6000_spe_abi = 0;\n \t}\n       else if (! strcmp (arg, \"no-altivec\"))\n \t{\n-\t  /* ??? Don't set rs6000_explicit_options.abi here, to allow\n-\t     the default for rs6000_spe_abi to be chosen later.  */\n+\t  rs6000_explicit_options.altivec_abi = true;\n \t  rs6000_altivec_abi = 0;\n \t}\n       else if (! strcmp (arg, \"spe\"))\n \t{\n-\t  rs6000_explicit_options.abi = true;\n+\t  rs6000_explicit_options.spe_abi = true;\n \t  rs6000_spe_abi = 1;\n \t  rs6000_altivec_abi = 0;\n \t  if (!TARGET_SPE_ABI)\n \t    error (\"not configured for ABI: '%s'\", arg);\n \t}\n       else if (! strcmp (arg, \"no-spe\"))\n \t{\n-\t  rs6000_explicit_options.abi = true;\n+\t  rs6000_explicit_options.spe_abi = true;\n \t  rs6000_spe_abi = 0;\n \t}\n "}]}