{"sha": "57841a43114d66a59322ce8b8d98b5e0096e5e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4NDFhNDMxMTRkNjZhNTkzMjJjZThiOGQ5OGI1ZTAwOTZlNWUzNg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-03-16T18:56:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:48Z"}, "message": "[Ada] Warn on 'in out' param containing access in private type\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb (Has_Access_Values): Remove\n\tInclude_Internal parameter that was added in previous change.\n\t* sem_warn.adb (Warnings_Off_E1): Back out E_Out_Parameter ==>\n\tFormal_Kind change made previously. Check Is_Private_Type to\n\tavoid warnings on private types. Misc cleanup.\n\t* sem_attr.adb (Attribute_Has_Access_Values): Remove\n\tInclude_Internal parameter.", "tree": {"sha": "7f192882889e45509228da889fc77148a38e71a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f192882889e45509228da889fc77148a38e71a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57841a43114d66a59322ce8b8d98b5e0096e5e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57841a43114d66a59322ce8b8d98b5e0096e5e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57841a43114d66a59322ce8b8d98b5e0096e5e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57841a43114d66a59322ce8b8d98b5e0096e5e36/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c2886684f8263f5f63b15f358ce33bfc67d27ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2886684f8263f5f63b15f358ce33bfc67d27ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c2886684f8263f5f63b15f358ce33bfc67d27ce"}], "stats": {"total": 63, "additions": 25, "deletions": 38}, "files": [{"sha": "63b0f09ea5d464662ce0e7ece87945532b48bd06", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=57841a43114d66a59322ce8b8d98b5e0096e5e36", "patch": "@@ -8830,9 +8830,7 @@ package body Sem_Attr is\n \n       when Attribute_Has_Access_Values =>\n          Rewrite (N, New_Occurrence_Of\n-           (Boolean_Literals\n-             (Has_Access_Values (P_Root_Type, Include_Internal => True)),\n-              Loc));\n+           (Boolean_Literals (Has_Access_Values (P_Root_Type)), Loc));\n          Analyze_And_Resolve (N, Standard_Boolean);\n \n       -----------------------"}, {"sha": "a66a024105d085cff6c3af135d31492119c39da2", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=57841a43114d66a59322ce8b8d98b5e0096e5e36", "patch": "@@ -11555,32 +11555,25 @@ package body Sem_Util is\n    -- Has_Access_Values --\n    -----------------------\n \n-   function Has_Access_Values\n-     (T : Entity_Id; Include_Internal : Boolean) return Boolean\n+   function Has_Access_Values (T : Entity_Id) return Boolean\n    is\n       Typ : constant Entity_Id := Underlying_Type (T);\n \n    begin\n       --  Case of a private type which is not completed yet. This can only\n-      --  happen in the case of a generic format type appearing directly, or\n+      --  happen in the case of a generic formal type appearing directly, or\n       --  as a component of the type to which this function is being applied\n       --  at the top level. Return False in this case, since we certainly do\n       --  not know that the type contains access types.\n \n       if No (Typ) then\n          return False;\n \n-      elsif not Include_Internal\n-        and then T /= Typ\n-        and then In_Internal_Unit (Typ)\n-      then\n-         return False;\n-\n       elsif Is_Access_Type (Typ) then\n          return True;\n \n       elsif Is_Array_Type (Typ) then\n-         return Has_Access_Values (Component_Type (Typ), Include_Internal);\n+         return Has_Access_Values (Component_Type (Typ));\n \n       elsif Is_Record_Type (Typ) then\n          declare\n@@ -11595,7 +11588,7 @@ package body Sem_Util is\n                --  Check for access component, tag field does not count, even\n                --  though it is implemented internally using an access type.\n \n-               if Has_Access_Values (Etype (Comp), Include_Internal)\n+               if Has_Access_Values (Etype (Comp))\n                  and then Chars (Comp) /= Name_uTag\n                then\n                   return True;"}, {"sha": "0519b3c3fdd146155dd43710e77f4ff2f76643fe", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=57841a43114d66a59322ce8b8d98b5e0096e5e36", "patch": "@@ -1312,18 +1312,14 @@ package Sem_Util is\n    --  limited, packed array and other implementation types.  If Include_PAT\n    --  is False, don't look inside packed array types.\n \n-   function Has_Access_Values\n-     (T : Entity_Id; Include_Internal : Boolean) return Boolean;\n-   --  Returns true if type or subtype T is an access type, or has a component\n-   --  (at any recursive level) that is an access type. This is a conservative\n-   --  predicate, if it is not known whether or not T contains access values\n-   --  (happens for generic formals in some cases), then False is returned.\n-   --  Note that tagged types return False. Even though the tag is implemented\n-   --  as an access type internally, this function tests only for access types\n-   --  known to the programmer. See also Has_Tagged_Component.\n-   --\n-   --  If Include_Internal is False, we return False for internal private types\n-   --  whose full type contains access types.\n+   function Has_Access_Values (T : Entity_Id) return Boolean;\n+   --  Returns true if the underlying type of T is an access type, or has a\n+   --  component (at any recursive level) that is an access type. This is a\n+   --  conservative predicate, if it is not known whether or not T contains\n+   --  access values (happens for generic formals in some cases), then False is\n+   --  returned.  Note that tagged types return False. Even though the tag is\n+   --  implemented as an access type internally, this function tests only for\n+   --  access types known to the programmer. See also Has_Tagged_Component.\n \n    function Has_Anonymous_Access_Discriminant (Typ : Entity_Id) return Boolean;\n    --  Returns True if Typ has one or more anonymous access discriminants"}, {"sha": "b7abd1b7ab12d8537f01642fff9c3469886cc83e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57841a43114d66a59322ce8b8d98b5e0096e5e36/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=57841a43114d66a59322ce8b8d98b5e0096e5e36", "patch": "@@ -1180,9 +1180,10 @@ package body Sem_Warn is\n                --  Case of an unassigned variable\n \n                --  First gather any Unset_Reference indication for E1. In the\n-               --  case of a parameter, it is the Spec_Entity that is relevant.\n+               --  case of an 'out' parameter, it is the Spec_Entity that is\n+               --  relevant.\n \n-               if Ekind (E1) in Formal_Kind\n+               if Ekind (E1) = E_Out_Parameter\n                  and then Present (Spec_Entity (E1))\n                then\n                   UR := Unset_Reference (Spec_Entity (E1));\n@@ -1219,8 +1220,8 @@ package body Sem_Warn is\n                --  the wanted effect is included in Never_Set_In_Source.\n \n                elsif Warn_On_Constant\n-                 and then (Ekind (E1) = E_Variable\n-                            and then Has_Initial_Value (E1))\n+                 and then Ekind (E1) = E_Variable\n+                 and then Has_Initial_Value (E1)\n                  and then Never_Set_In_Source_Check_Spec (E1)\n                  and then not Generic_Package_Spec_Entity (E1)\n                then\n@@ -1298,9 +1299,9 @@ package body Sem_Warn is\n                  --  never referenced, since again it seems odd to rely on\n                  --  default initialization to set an out parameter value.\n \n-                and then (Is_Access_Type (E1T)\n-                           or else Ekind (E1) = E_Out_Parameter\n-                           or else not Is_Fully_Initialized_Type (E1T))\n+                 and then (Is_Access_Type (E1T)\n+                             or else Ekind (E1) = E_Out_Parameter\n+                             or else not Is_Fully_Initialized_Type (E1T))\n                then\n                   --  Do not output complaint about never being assigned a\n                   --  value if a pragma Unmodified applies to the variable\n@@ -1354,13 +1355,12 @@ package body Sem_Warn is\n                      --  Suppress warning if composite type contains any access\n                      --  component, since the logical effect of modifying a\n                      --  parameter may be achieved by modifying a referenced\n-                     --  object. This rationale does not apply to internal\n-                     --  private types, so we warn even if a component is of\n-                     --  something like Unbounded_String.\n+                     --  object. This rationale does not apply to private\n+                     --  types, so we warn in that case.\n \n                      elsif Is_Composite_Type (E1T)\n-                       and then Has_Access_Values\n-                         (E1T, Include_Internal => False)\n+                       and then not Is_Private_Type (E1T)\n+                       and then Has_Access_Values (E1T)\n                      then\n                         null;\n "}]}