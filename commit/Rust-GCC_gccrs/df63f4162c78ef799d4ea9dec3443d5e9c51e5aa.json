{"sha": "df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "node_id": "C_kwDOANBUbNoAKGRmNjNmNDE2MmM3OGVmNzk5ZDRlYTlkZWMzNDQzZDVlOWM1MWU1YWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-02T23:40:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-02T23:40:13Z"}, "message": "libquadmath: Assorted libquadmath strtoflt128 fixes [PR87204, PR94756]\n\nThis patch cherry-pickx 8 commits from glibc which fix various strtod_l\nbugs.  Additionally, it makes mp_limb_t 64-bit on llp64 targets like\n64-bit cygwin.\n\n2023-03-03  niXman  <i.nixman@autistici.org>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libquadmath/87204\n\tPR libquadmath/94756\n\t* printf/gmp-impl.h (mp_limb_t, mp_limb_signed_t, BITS_PER_MP_LIMB):\n\tUse 64-bit limbs on LLP64 targets.\n\t* strtod/strtod_l.c (round_and_return): Cherry-pick glibc\n\t9310c284ae9 BZ #16151, 4406c41c1d6 BZ #16965 and fcd6b5ac36a\n\tBZ #23279 fixes.\n\t(____STRTOF_INTERNAL): Cherry-pick glibc b0debe14fcf BZ #23007,\n\t5556d30caee BZ #18247, 09555b9721d and c6aac3bf366 BZ #26137 and\n\td84f25c7d87 fixes.", "tree": {"sha": "df7e83356e9f63cf0c3bc3b8aa1fbd9b10ebbd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df7e83356e9f63cf0c3bc3b8aa1fbd9b10ebbd96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6978df2c04df165eaa6aac9e17b6c770bed460e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6978df2c04df165eaa6aac9e17b6c770bed460e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6978df2c04df165eaa6aac9e17b6c770bed460e3"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "c5c9c8e01e863d03569598173115ec6b58d9a62a", "filename": "libquadmath/printf/gmp-impl.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa/libquadmath%2Fprintf%2Fgmp-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa/libquadmath%2Fprintf%2Fgmp-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fgmp-impl.h?ref=df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "patch": "@@ -33,10 +33,18 @@ MA 02111-1307, USA. */\n #define MAX(h,i) ((h) > (i) ? (h) : (i))\n #endif\n \n+#if __SIZEOF_LONG__ == 4 && __SIZEOF_LONG_LONG__ == 8 \\\n+    && __SIZEOF_POINTER__ == 8\n+/* Use 64-bit limbs on LLP64 targets.  */\n+#define BITS_PER_MP_LIMB (__SIZEOF_LONG_LONG__ * __CHAR_BIT__)\n+typedef unsigned long long int\tmp_limb_t;\n+typedef long long int\t\tmp_limb_signed_t;\n+#else\n #define BITS_PER_MP_LIMB (__SIZEOF_LONG__ * __CHAR_BIT__)\n-#define BYTES_PER_MP_LIMB (BITS_PER_MP_LIMB / __CHAR_BIT__)\n typedef unsigned long int\tmp_limb_t;\n typedef long int\t\tmp_limb_signed_t;\n+#endif\n+#define BYTES_PER_MP_LIMB (BITS_PER_MP_LIMB / __CHAR_BIT__)\n \n typedef mp_limb_t *             mp_ptr;\n typedef const mp_limb_t *\tmp_srcptr;"}, {"sha": "38602841cd746a32c19c1e581da1620962c7836e", "filename": "libquadmath/strtod/strtod_l.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa/libquadmath%2Fstrtod%2Fstrtod_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df63f4162c78ef799d4ea9dec3443d5e9c51e5aa/libquadmath%2Fstrtod%2Fstrtod_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fstrtod%2Fstrtod_l.c?ref=df63f4162c78ef799d4ea9dec3443d5e9c51e5aa", "patch": "@@ -200,7 +200,7 @@ round_and_return (mp_limb_t *retval, intmax_t exponent, int negative,\n \n \t  round_limb = retval[RETURN_LIMB_SIZE - 1];\n \t  round_bit = (MANT_DIG - 1) % BITS_PER_MP_LIMB;\n-\t  for (i = 0; i < RETURN_LIMB_SIZE; ++i)\n+\t  for (i = 0; i < RETURN_LIMB_SIZE - 1; ++i)\n \t    more_bits |= retval[i] != 0;\n \t  MPN_ZERO (retval, RETURN_LIMB_SIZE);\n \t}\n@@ -215,9 +215,14 @@ round_and_return (mp_limb_t *retval, intmax_t exponent, int negative,\n \t  more_bits |= ((round_limb & ((((mp_limb_t) 1) << round_bit) - 1))\n \t\t\t!= 0);\n \n-\t  (void) mpn_rshift (retval, &retval[shift / BITS_PER_MP_LIMB],\n-\t\t\t     RETURN_LIMB_SIZE - (shift / BITS_PER_MP_LIMB),\n-\t\t\t     shift % BITS_PER_MP_LIMB);\n+\t  /* mpn_rshift requires 0 < shift < BITS_PER_MP_LIMB.  */\n+\t  if ((shift % BITS_PER_MP_LIMB) != 0)\n+\t    (void) mpn_rshift (retval, &retval[shift / BITS_PER_MP_LIMB],\n+\t\t\t       RETURN_LIMB_SIZE - (shift / BITS_PER_MP_LIMB),\n+\t\t\t       shift % BITS_PER_MP_LIMB);\n+\t  else\n+\t    for (i = 0; i < RETURN_LIMB_SIZE - (shift / BITS_PER_MP_LIMB); i++)\n+\t      retval[i] = retval[i + (shift / BITS_PER_MP_LIMB)];\n \t  MPN_ZERO (&retval[RETURN_LIMB_SIZE - (shift / BITS_PER_MP_LIMB)],\n \t\t    shift / BITS_PER_MP_LIMB);\n \t}\n@@ -276,7 +281,7 @@ round_and_return (mp_limb_t *retval, intmax_t exponent, int negative,\n \t}\n     }\n \n-  if (exponent > MAX_EXP)\n+  if (exponent >= MAX_EXP)\n     goto overflow;\n \n #ifdef HAVE_FENV_H\n@@ -308,7 +313,7 @@ round_and_return (mp_limb_t *retval, intmax_t exponent, int negative,\n     }\n #endif\n \n-  if (exponent > MAX_EXP)\n+  if (exponent >= MAX_EXP)\n   overflow:\n     return overflow_value (negative);\n \n@@ -688,7 +693,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t  if (endptr != NULL)\n \t    *endptr = (STRING_TYPE *) cp;\n \n-\t  return retval;\n+\t  return negative ? -retval : retval;\n \t}\n \n       /* It is really a text we do not recognize.  */\n@@ -1193,7 +1198,16 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n   if (__builtin_expect (exponent > MAX_10_EXP + 1 - (intmax_t) int_no, 0))\n     return overflow_value (negative);\n \n-  if (__builtin_expect (exponent < MIN_10_EXP - (DIG + 1), 0))\n+  /* 10^(MIN_10_EXP-1) is not normal.  Thus, 10^(MIN_10_EXP-1) /\n+     2^MANT_DIG is below half the least subnormal, so anything with a\n+     base-10 exponent less than the base-10 exponent (which is\n+     MIN_10_EXP - 1 - ceil(MANT_DIG*log10(2))) of that value\n+     underflows.  DIG is floor((MANT_DIG-1)log10(2)), so an exponent\n+     below MIN_10_EXP - (DIG + 3) underflows.  But EXPONENT is\n+     actually an exponent multiplied only by a fractional part, not an\n+     integer part, so an exponent below MIN_10_EXP - (DIG + 2)\n+     underflows.  */\n+  if (__builtin_expect (exponent < MIN_10_EXP - (DIG + 2), 0))\n     return underflow_value (negative);\n \n   if (int_no > 0)\n@@ -1360,7 +1374,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \n     assert (dig_no > int_no\n \t    && exponent <= 0\n-\t    && exponent >= MIN_10_EXP - (DIG + 1));\n+\t    && exponent >= MIN_10_EXP - (DIG + 2));\n \n     /* We need to compute MANT_DIG - BITS fractional bits that lie\n        within the mantissa of the result, the following bit for\n@@ -1651,8 +1665,8 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t  d1 = den[densize - 2];\n \n \t  /* The division does not work if the upper limb of the two-limb\n-\t     numerator is greater than the denominator.  */\n-\t  if (mpn_cmp (num, &den[densize - numsize], numsize) > 0)\n+\t     numerator is greater than or equal to the denominator.  */\n+\t  if (mpn_cmp (num, &den[densize - numsize], numsize) >= 0)\n \t    num[numsize++] = 0;\n \n \t  if (numsize < densize)\n@@ -1761,7 +1775,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t      got_limb;\n \t    }\n \n-\t  for (i = densize; num[i] == 0 && i >= 0; --i)\n+\t  for (i = densize; i >= 0 && num[i] == 0; --i)\n \t    ;\n \t  return round_and_return (retval, exponent - 1, negative,\n \t\t\t\t   quot, BITS_PER_MP_LIMB - 1 - used,"}]}