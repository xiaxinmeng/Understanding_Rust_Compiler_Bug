{"sha": "7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmM2Y2MDRmYjEwMmJhNjdjZTNhYmU3ZTk3NDQwYjRlZDBkYTkyZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-19T20:20:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-19T20:23:47Z"}, "message": "preprocessor: Random cleanups\n\nThis fixes a bunch of poorly formatted decls, marks some getters as\nPURE, deletes some C-relevant bool hackery, and finally uses a\npassed-in location rather than deducing a closely-related but not\nnecessarily the same location.\n\n\t* include/cpplib.h (cpp_get_otions, cpp_get_callbacks)\n\t(cpp_get_deps): Mark as PURE.\n\t* include/line-map.h (get_combined_adhoc_loc)\n\t(get_location_from_adhoc_loc, get_pure_location): Reformat decls.\n\t* internal.h (struct lexer_state): Clarify comment.\n\t* system.h: Remove now-unneeded bool hackery.\n\t* files.c (_cpp_find_file): Store LOC not highest_location.", "tree": {"sha": "ec6a6db751a99154923cb1cc9f884eaf244d7680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec6a6db751a99154923cb1cc9f884eaf244d7680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98452668d362bb9e6358f7eb5cff69f4f5ab1d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98452668d362bb9e6358f7eb5cff69f4f5ab1d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98452668d362bb9e6358f7eb5cff69f4f5ab1d45"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "040de527b729f86fd1cdb5d9c09dccb446259fe6", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -1,5 +1,13 @@\n 2020-05-18  Nathan Sidwell  <nathan@acm.org>\n \n+\t* include/cpplib.h (cpp_get_otions, cpp_get_callbacks)\n+\t(cpp_get_deps): Mark as PURE.\n+\t* include/line-map.h (get_combined_adhoc_loc)\n+\t(get_location_from_adhoc_loc, get_pure_location): Reformat decls.\n+\t* internal.h (struct lexer_state): Clarify comment.\n+\t* system.h: Remove now-unneeded bool hackery.\n+\t* files.c (_cpp_find_file): Store LOC not highest_location.\n+\n \tPR preprocessor/95149\n \t* lex.c (struct lit_accum): New.\n \t(bufring_append): Replace by lit_accum::append."}, {"sha": "f25b58dc394460f3ffee0bb8e70e6881ac0dcc86", "filename": "libcpp/files.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -635,7 +635,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n   entry = new_file_hash_entry (pfile);\n   entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n   entry->start_dir = start_dir;\n-  entry->location = pfile->line_table->highest_location;\n+  entry->location = loc;\n   entry->u.file = file;\n   *hash_slot = (void *) entry;\n \n@@ -648,7 +648,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n       entry = new_file_hash_entry (pfile);\n       entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n       entry->start_dir = pfile->bracket_include;\n-      entry->location = pfile->line_table->highest_location;\n+      entry->location = loc;\n       entry->u.file = file;\n       *hash_slot = (void *) entry;\n     }\n@@ -659,7 +659,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n       entry = new_file_hash_entry (pfile);\n       entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n       entry->start_dir = pfile->quote_include;\n-      entry->location = pfile->line_table->highest_location;\n+      entry->location = loc;\n       entry->u.file = file;\n       *hash_slot = (void *) entry;\n     }"}, {"sha": "544735a51af75297c3559b6ec54d76acd709960a", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -969,10 +969,10 @@ extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);\n    call cpp_finish on that reader.  You can either edit the callbacks\n    through the pointer returned from cpp_get_callbacks, or set them\n    with cpp_set_callbacks.  */\n-extern cpp_options *cpp_get_options (cpp_reader *);\n-extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);\n+extern cpp_options *cpp_get_options (cpp_reader *) ATTRIBUTE_PURE;\n+extern cpp_callbacks *cpp_get_callbacks (cpp_reader *) ATTRIBUTE_PURE;\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n-extern class mkdeps *cpp_get_deps (cpp_reader *);\n+extern class mkdeps *cpp_get_deps (cpp_reader *) ATTRIBUTE_PURE;\n \n /* This function reads the file, but does not start preprocessing.  It\n    returns the name of the original file; this is the same as the"}, {"sha": "217f916fc35c7c4f5b1fe1795f8d3a8e11c0e1f1", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -1024,13 +1024,11 @@ LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)\n   return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);\n }\n \n-extern location_t get_combined_adhoc_loc (class line_maps *,\n-\t\t\t\t\t       location_t,\n-\t\t\t\t\t       source_range,\n-\t\t\t\t\t       void *);\n+extern location_t get_combined_adhoc_loc (line_maps *, location_t,\n+\t\t\t\t\t  source_range, void *);\n extern void *get_data_from_adhoc_loc (const line_maps *, location_t);\n extern location_t get_location_from_adhoc_loc (const line_maps *,\n-\t\t\t\t\t\t    location_t);\n+\t\t\t\t\t       location_t);\n \n extern source_range get_range_from_loc (line_maps *set, location_t loc);\n \n@@ -1043,8 +1041,7 @@ pure_location_p (line_maps *set, location_t loc);\n /* Given location LOC within SET, strip away any packed range information\n    or ad-hoc information.  */\n \n-extern location_t get_pure_location (line_maps *set,\n-\t\t\t\t\t  location_t loc);\n+extern location_t get_pure_location (line_maps *set, location_t loc);\n \n /* Combine LOC and BLOCK, giving a combined adhoc location.  */\n "}, {"sha": "765ff9d8206e18db4635a7ddfaddc912ba1c3a18", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -275,7 +275,7 @@ struct lexer_state\n   /* Nonzero to skip evaluating part of an expression.  */\n   unsigned int skip_eval;\n \n-  /* Nonzero when handling a deferred pragma.  */\n+  /* Nonzero when tokenizing a deferred pragma.  */\n   unsigned char in_deferred_pragma;\n \n   /* Nonzero if the deferred pragma being handled allows macro expansion.  */"}, {"sha": "0a0629d557fbf232e9d3b7800daaee5bbc8e22b6", "filename": "libcpp/system.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf3f604fb102ba67ce3abe7e97440b4ed0da92e/libcpp%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsystem.h?ref=7cf3f604fb102ba67ce3abe7e97440b4ed0da92e", "patch": "@@ -422,26 +422,6 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n #define gcc_checking_assert(EXPR) ((void)(0 && (EXPR)))\n #endif\n \n-/* Provide a fake boolean type.  We make no attempt to use the\n-   C99 _Bool, as it may not be available in the bootstrap compiler,\n-   and even if it is, it is liable to be buggy.  \n-   This must be after all inclusion of system headers, as some of\n-   them will mess us up.  */\n-#undef bool\n-#undef true\n-#undef false\n-#undef TRUE\n-#undef FALSE\n-\n-#ifndef __cplusplus\n-#define bool unsigned char\n-#endif\n-#define true 1\n-#define false 0\n-\n-/* Some compilers do not allow the use of unsigned char in bitfields.  */\n-#define BOOL_BITFIELD unsigned int\n-\n /* Poison identifiers we do not want to use.  */\n #if (GCC_VERSION >= 3000)\n #undef calloc"}]}