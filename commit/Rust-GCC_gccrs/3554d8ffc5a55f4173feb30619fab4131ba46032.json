{"sha": "3554d8ffc5a55f4173feb30619fab4131ba46032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1NGQ4ZmZjNWE1NWY0MTczZmViMzA2MTlmYWI0MTMxYmE0NjAzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-11-25T13:49:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-11-25T13:49:50Z"}, "message": "typeck.c (cp_build_indirect_ref_1): Add location_t parameter and use it in error messages.\n\n/gcc\n2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_build_indirect_ref_1): Add location_t parameter\n\tand use it in error messages.\n\t(build_x_indirect_ref): Adjust call.\n\t(build_indirect_ref): Likewise.\n\t(cp_build_fold_indirect_ref): Likewise.\n\t(cp_build_array_ref): Likewise.\n\t* call.c (build_new_op_1): Likewise.\n\t* semantics.c (finish_omp_clauses): Likewise.\n\t(finish_omp_depobj): Likewise.\n\t* typeck2.c (build_x_arrow): Likewise.\n\t* cp-tree.h (cp_build_indirect_ref): Update declaration.\n\n\t* call.c (build_new_op_1): Use location argument in warning_at.\n\n\t* typeck.c (cp_build_modify_expr): Consistently use the\n\tlocation_t argument.\n\n/libcc1\n2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libcp1plugin.cc (plugin_pragma_push_user_expression): Update\n\tcp_build_indirect_ref call.\n\n/gcc/testsuite\n2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/base-operand-non-pointer-1.C: New.\n\t* g++.dg/pr53055.C: Check location too.\n\t* g++.old-deja/g++.bugs/900213_02.C: Likewise.\n\t* g++.old-deja/g++.bugs/900215_02.C: Likewise.\n\t* g++.old-deja/g++.other/badarrow.C: Likewise.\n\t* g++.old-deja/g++.other/deref1.C: Likewise.\n\n\t* g++.dg/warn/Wenum-compare.C: Check location too.\n\n\t* g++.dg/cpp0x/initlist26.C: Check location too.\n\t* g++.dg/cpp0x/initlist28.C: Likewise.\n\t* g++.dg/cpp0x/initlist29.C: Likewise.\n\t* g++.dg/cpp0x/initlist33.C: Likewise.\n\t* g++.dg/expr/string-2.C: Likewise.\n\t* g++.dg/other/ptrmem5.C: Likewise.\n\t* g++.old-deja/g++.benjamin/14664-1.C: Likewise.\n\t* g++.old-deja/g++.benjamin/14664-2.C: Likewise.\n\t* g++.old-deja/g++.brendan/init12.C: Likewise.\n\t* g++.old-deja/g++.bugs/900324_04.C: Likewise.\n\t* g++.old-deja/g++.ext/array1.C: Likewise.\n\t* g++.old-deja/g++.jason/rfg17.C: Likewise.\n\nFrom-SVN: r278685", "tree": {"sha": "79354a0db21e81c61cc65750b8bcd25d5a9cc10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79354a0db21e81c61cc65750b8bcd25d5a9cc10b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3554d8ffc5a55f4173feb30619fab4131ba46032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3554d8ffc5a55f4173feb30619fab4131ba46032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3554d8ffc5a55f4173feb30619fab4131ba46032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3554d8ffc5a55f4173feb30619fab4131ba46032/comments", "author": null, "committer": null, "parents": [{"sha": "5b8d9367684f266c30c280b4d3c98830a88c70ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d9367684f266c30c280b4d3c98830a88c70ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8d9367684f266c30c280b4d3c98830a88c70ab"}], "stats": {"total": 176, "additions": 117, "deletions": 59}, "files": [{"sha": "fe912c66af0276526a4da9742b36c3cc249904e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -1,3 +1,22 @@\n+2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_build_indirect_ref_1): Add location_t parameter\n+\tand use it in error messages.\n+\t(build_x_indirect_ref): Adjust call.\n+\t(build_indirect_ref): Likewise.\n+\t(cp_build_fold_indirect_ref): Likewise.\n+\t(cp_build_array_ref): Likewise.\n+\t* call.c (build_new_op_1): Likewise.\n+\t* semantics.c (finish_omp_clauses): Likewise.\n+\t(finish_omp_depobj): Likewise.\n+\t* typeck2.c (build_x_arrow): Likewise.\n+\t* cp-tree.h (cp_build_indirect_ref): Update declaration.\n+\n+\t* call.c (build_new_op_1): Use location argument in warning_at.\n+\n+\t* typeck.c (cp_build_modify_expr): Consistently use the\n+\tlocation_t argument.\n+\n 2019-11-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/92365"}, {"sha": "8bfe33688165de8e04d8895e0eb4aaf3cf7bebd3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -6354,11 +6354,9 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t\t  && (TYPE_MAIN_VARIANT (arg1_type)\n \t\t      != TYPE_MAIN_VARIANT (arg2_type))\n \t\t  && (complain & tf_warning))\n-\t\t{\n-\t\t  warning (OPT_Wenum_compare,\n-\t\t\t   \"comparison between %q#T and %q#T\",\n-\t\t\t   arg1_type, arg2_type);\n-\t\t}\n+\t\twarning_at (loc, OPT_Wenum_compare,\n+\t\t\t    \"comparison between %q#T and %q#T\",\n+\t\t\t    arg1_type, arg2_type);\n \t      break;\n \t    default:\n \t      break;\n@@ -6416,7 +6414,7 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n       return cp_build_modify_expr (loc, arg1, code2, arg2, complain);\n \n     case INDIRECT_REF:\n-      return cp_build_indirect_ref (arg1, RO_UNARY_STAR, complain);\n+      return cp_build_indirect_ref (loc, arg1, RO_UNARY_STAR, complain);\n \n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n@@ -6472,8 +6470,9 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n       return cp_build_array_ref (input_location, arg1, arg2, complain);\n \n     case MEMBER_REF:\n-      return build_m_component_ref (cp_build_indirect_ref (arg1, RO_ARROW_STAR, \n-                                                           complain), \n+      return build_m_component_ref (cp_build_indirect_ref (loc, arg1,\n+\t\t\t\t\t\t\t   RO_ARROW_STAR,\n+                                                           complain),\n                                     arg2, complain);\n \n       /* The caller will deal with these.  */"}, {"sha": "0da1ed4e37225e47c6a908ccfbc98d0d37a48a36", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -7482,9 +7482,11 @@ extern tree build_class_member_access_expr      (cp_expr, tree, tree, bool,\n extern tree finish_class_member_access_expr     (cp_expr, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_indirect_ref\t\t(location_t, tree,\n-\t\t\t\t\t\t ref_operator, tsubst_flags_t);\n-extern tree cp_build_indirect_ref\t\t(tree, ref_operator,\n-                                                 tsubst_flags_t);\n+\t\t\t\t\t\t ref_operator,\n+\t\t\t\t\t\t tsubst_flags_t);\n+extern tree cp_build_indirect_ref\t\t(location_t, tree,\n+\t\t\t\t\t\t ref_operator,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_build_fold_indirect_ref\t\t(tree);\n extern tree build_array_ref\t\t\t(location_t, tree, tree);\n extern tree cp_build_array_ref\t\t\t(location_t, tree, tree,"}, {"sha": "16180f5c1fae751fbf4e59b772ed3954d28afe9b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -7193,7 +7193,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\tremove = true;\n \t      else\n \t\t{\n-\t\t  t = cp_build_indirect_ref (addr, RO_UNARY_STAR,\n+\t\t  t = cp_build_indirect_ref (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t     addr, RO_UNARY_STAR,\n \t\t\t\t\t     tf_warning_or_error);\n \t\t  if (t == error_mark_node)\n \t\t    remove = true;\n@@ -9328,7 +9329,7 @@ finish_omp_depobj (location_t loc, tree depobj,\n       if (addr == error_mark_node)\n \tdepobj = error_mark_node;\n       else\n-\tdepobj = cp_build_indirect_ref (addr, RO_UNARY_STAR,\n+\tdepobj = cp_build_indirect_ref (loc, addr, RO_UNARY_STAR,\n \t\t\t\t\ttf_warning_or_error);\n     }\n "}, {"sha": "bd2292a4dac291ce6cfb4fbf1e4cf2b73b0cf939", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -3278,7 +3278,7 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n   rval = build_new_op (loc, INDIRECT_REF, LOOKUP_NORMAL, expr,\n \t\t       NULL_TREE, NULL_TREE, &overload, complain);\n   if (!rval)\n-    rval = cp_build_indirect_ref (expr, errorstring, complain);\n+    rval = cp_build_indirect_ref (loc, expr, errorstring, complain);\n \n   if (processing_template_decl && rval != error_mark_node)\n     {\n@@ -3296,7 +3296,7 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n    constructs.  If DO_FOLD is true, fold away INDIRECT_REF of ADDR_EXPR.  */\n \n static tree\n-cp_build_indirect_ref_1 (tree ptr, ref_operator errorstring,\n+cp_build_indirect_ref_1 (location_t loc, tree ptr, ref_operator errorstring,\n \t\t\t tsubst_flags_t complain, bool do_fold)\n {\n   tree pointer, type;\n@@ -3345,7 +3345,7 @@ cp_build_indirect_ref_1 (tree ptr, ref_operator errorstring,\n \t  /* A pointer to incomplete type (other than cv void) can be\n \t     dereferenced [expr.unary.op]/1  */\n           if (complain & tf_error)\n-            error (\"%qT is not a pointer-to-object type\", type);\n+            error_at (loc, \"%qT is not a pointer-to-object type\", type);\n \t  return error_mark_node;\n \t}\n       else if (do_fold && TREE_CODE (pointer) == ADDR_EXPR\n@@ -3376,34 +3376,36 @@ cp_build_indirect_ref_1 (tree ptr, ref_operator errorstring,\n     switch (errorstring)\n       {\n          case RO_ARRAY_INDEXING:\n-           error (\"invalid use of array indexing on pointer to member\");\n+           error_at (loc,\n+\t\t     \"invalid use of array indexing on pointer to member\");\n            break;\n          case RO_UNARY_STAR:\n-           error (\"invalid use of unary %<*%> on pointer to member\");\n+           error_at (loc, \"invalid use of unary %<*%> on pointer to member\");\n            break;\n          case RO_IMPLICIT_CONVERSION:\n-           error (\"invalid use of implicit conversion on pointer to member\");\n+           error_at (loc, \"invalid use of implicit conversion on pointer \"\n+\t\t     \"to member\");\n            break;\n          case RO_ARROW_STAR:\n-           error (\"left hand operand of %<->*%> must be a pointer to class, \"\n-\t\t  \"but is a pointer to member of type %qT\", type);\n+           error_at (loc, \"left hand operand of %<->*%> must be a pointer to \"\n+\t\t     \"class, but is a pointer to member of type %qT\", type);\n            break;\n          default:\n            gcc_unreachable ();\n       }\n   else if (pointer != error_mark_node)\n-    invalid_indirection_error (input_location, type, errorstring);\n+    invalid_indirection_error (loc, type, errorstring);\n \n   return error_mark_node;\n }\n \n /* Entry point used by c-common, which expects folding.  */\n \n tree\n-build_indirect_ref (location_t /*loc*/,\n-\t\t    tree ptr, ref_operator errorstring)\n+build_indirect_ref (location_t loc, tree ptr, ref_operator errorstring)\n {\n-  return cp_build_indirect_ref_1 (ptr, errorstring, tf_warning_or_error, true);\n+  return cp_build_indirect_ref_1 (loc, ptr, errorstring,\n+\t\t\t\t  tf_warning_or_error, true);\n }\n \n /* Entry point used by internal indirection needs that don't correspond to any\n@@ -3412,17 +3414,18 @@ build_indirect_ref (location_t /*loc*/,\n tree\n cp_build_fold_indirect_ref (tree pointer)\n {\n-  return cp_build_indirect_ref_1 (pointer, RO_NULL, tf_warning_or_error, true);\n+  return cp_build_indirect_ref_1 (input_location, pointer, RO_NULL,\n+\t\t\t\t  tf_warning_or_error, true);\n }\n \n /* Entry point used by indirection needs that correspond to some syntactic\n    construct.  */\n \n tree\n-cp_build_indirect_ref (tree ptr, ref_operator errorstring,\n+cp_build_indirect_ref (location_t loc, tree ptr, ref_operator errorstring,\n \t\t       tsubst_flags_t complain)\n {\n-  return cp_build_indirect_ref_1 (ptr, errorstring, complain, false);\n+  return cp_build_indirect_ref_1 (loc, ptr, errorstring, complain, false);\n }\n \n /* This handles expressions of the form \"a[i]\", which denotes\n@@ -3599,7 +3602,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n     ret = cp_build_binary_op (input_location, PLUS_EXPR, ar, ind, complain);\n     if (first)\n       ret = build2_loc (loc, COMPOUND_EXPR, TREE_TYPE (ret), first, ret);\n-    ret = cp_build_indirect_ref (ret, RO_ARRAY_INDEXING, complain);\n+    ret = cp_build_indirect_ref (loc, ret, RO_ARRAY_INDEXING, complain);\n     protected_set_expr_location (ret, loc);\n     if (non_lvalue)\n       ret = non_lvalue_loc (loc, ret);\n@@ -8280,7 +8283,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \tif (VOID_TYPE_P (TREE_TYPE (rhs)))\n \t  {\n \t    if (complain & tf_error)\n-\t      error (\"void value not ignored as it ought to be\");\n+\t      error_at (cp_expr_loc_or_loc (rhs, loc),\n+\t\t\t\"void value not ignored as it ought to be\");\n \t    return error_mark_node;\n \t  }\n \n@@ -8493,7 +8497,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t  if (modifycode != INIT_EXPR)\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"assigning to an array from an initializer list\");\n+\t\terror_at (loc,\n+\t\t\t  \"assigning to an array from an initializer list\");\n \t      return error_mark_node;\n \t    }\n \t  if (check_array_initializer (lhs, lhstype, newrhs))\n@@ -8520,8 +8525,8 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t\t\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (newrhs))))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"incompatible types in assignment of %qT to %qT\",\n-\t\t   TREE_TYPE (rhs), lhstype);\n+\t    error_at (loc, \"incompatible types in assignment of %qT to %qT\",\n+\t\t      TREE_TYPE (rhs), lhstype);\n \t  return error_mark_node;\n \t}\n \n@@ -8534,9 +8539,9 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t  if (complain & tf_error)\n \t    {\n \t      if (modifycode == INIT_EXPR)\n-\t\terror (\"array used as initializer\");\n+\t\terror_at (loc, \"array used as initializer\");\n \t      else\n-\t\terror (\"invalid array assignment\");\n+\t\terror_at (loc, \"invalid array assignment\");\n \t    }\n \t  return error_mark_node;\n \t}"}, {"sha": "b8868546444ce8e29855c4035f7b93c08752b234", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -2060,7 +2060,7 @@ build_x_arrow (location_t loc, tree expr, tsubst_flags_t complain)\n \t  return expr;\n \t}\n \n-      return cp_build_indirect_ref (last_rval, RO_ARROW, complain);\n+      return cp_build_indirect_ref (loc, last_rval, RO_ARROW, complain);\n     }\n \n   if (complain & tf_error)"}, {"sha": "0eead3eb76920b98ce8d082e003b3ffe00b8969a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -1,3 +1,27 @@\n+2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/base-operand-non-pointer-1.C: New.\n+\t* g++.dg/pr53055.C: Check location too.\n+\t* g++.old-deja/g++.bugs/900213_02.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900215_02.C: Likewise.\n+\t* g++.old-deja/g++.other/badarrow.C: Likewise.\n+\t* g++.old-deja/g++.other/deref1.C: Likewise.\n+\n+\t* g++.dg/warn/Wenum-compare.C: Check location too.\n+\n+\t* g++.dg/cpp0x/initlist26.C: Check location too.\n+\t* g++.dg/cpp0x/initlist28.C: Likewise.\n+\t* g++.dg/cpp0x/initlist29.C: Likewise.\n+\t* g++.dg/cpp0x/initlist33.C: Likewise.\n+\t* g++.dg/expr/string-2.C: Likewise.\n+\t* g++.dg/other/ptrmem5.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/14664-1.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/14664-2.C: Likewise.\n+\t* g++.old-deja/g++.brendan/init12.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900324_04.C: Likewise.\n+\t* g++.old-deja/g++.ext/array1.C: Likewise.\n+\t* g++.old-deja/g++.jason/rfg17.C: Likewise.\n+\n 2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/91985"}, {"sha": "045147c488239622fe3e1d47b94a296a54a479e4", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -6,5 +6,5 @@ void\n foo (int i)\n {\n   int a[i];\n-  a = { }; // { dg-error \"assign\" }\n+  a = { }; // { dg-error \"5:assigning to an array from an initializer list\" }\n }"}, {"sha": "decd36eea7b3e9663695cd041a87671087b8d1a6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist28.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -4,5 +4,5 @@\n void foo()\n {\n   int a[1];\n-  throw a = {}; // { dg-error \"assign\" }\n+  throw a = {}; // { dg-error \"11:assigning to an array from an initializer list\" }\n }"}, {"sha": "494d6951581255be3388d480b1a6b1132b9c51cb", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist29.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -5,7 +5,7 @@ class Mesh\n {\n public:\n   Mesh(const char*)\n-  { typele={0}; }\t\t// { dg-error \"\" }\n+  { typele={0}; }\t\t// { dg-error \"11:assigning to an array from an initializer list\" }\n \n private:\n   int typele[7][2];"}, {"sha": "ae7f130ebf00c9ea63cc3243899a07619366a1c1", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist33.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -9,5 +9,5 @@ struct base\n int main()\n {\n  base ptr_array[1];\n- ptr_array = { base() };\t// { dg-error \"assign\" }\n+ ptr_array = { base() };\t// { dg-error \"12:assigning to an array from an initializer list\" }\n }"}, {"sha": "26188d1b0efc25e00347c5e2998014e29f3e5c18", "filename": "gcc/testsuite/g++.dg/diagnostic/base-operand-non-pointer-1.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbase-operand-non-pointer-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbase-operand-non-pointer-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbase-operand-non-pointer-1.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -0,0 +1,2 @@\n+class C { public: C f(); int get(); };\n+int f(C* p) { return p->f()->get(); }  // { dg-error \"28:base operand of .->. has non-pointer type .C.\" }"}, {"sha": "07357db7683ae9eea4dda63918d846a50a263895", "filename": "gcc/testsuite/g++.dg/expr/string-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-2.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -3,7 +3,7 @@\n \n char a[1];\n \n-int foo(a = \"\") // { dg-error \"invalid array assignment\" }\n+int foo(a = \"\") // { dg-error \"11:invalid array assignment\" }\n {\n   return 0;\n }"}, {"sha": "2faf6cd2b7e1fcb6347f24b86619aba4f9c45b8f", "filename": "gcc/testsuite/g++.dg/other/ptrmem5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem5.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -8,5 +8,5 @@ struct a\n int main()\n {\n   int a::*n[8];\n-  n = &a::x;                    // { dg-error \"int \\\\(a::\\\\*\\\\)\" }\n+  n = &a::x; // { dg-error \"5:incompatible types in assignment of .int \\\\(a::\\\\*\\\\)\" }\n }   "}, {"sha": "dbe90a3be58b34c95136d6a1c39d6028a62c0e48", "filename": "gcc/testsuite/g++.dg/pr53055.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53055.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53055.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53055.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile }\n \n struct A A :: * p ;\n-int i = p ->* p ; // { dg-error \"\" }\n+int i = p ->* p ; // { dg-error \"11:left hand operand\" }"}, {"sha": "af7c483a2384d02f0263a8846e3a26cb47a3d47e", "filename": "gcc/testsuite/g++.dg/warn/Wenum-compare.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWenum-compare.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWenum-compare.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWenum-compare.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -6,5 +6,5 @@ enum E2 { b };\n \n int foo (E1 e1, E2 e2)\n {\n-  return e1 == e2;  /* { dg-warning \"comparison between\" } */\n+  return e1 == e2;  /* { dg-warning \"13:comparison between\" } */\n }"}, {"sha": "966507c4b868087094e8eefe7d9aa8586f6aa8e1", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/14664-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-1.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -8,7 +8,7 @@ void bar()\n {\n   //-g++: incompatible types in assignment of 'const char[]' to 'char[]'\n   //-edg: expression must be a modifiable lvalue\n-  foo = \"0123456789012345678901234\"; // { dg-error \"\" } // ERROR -\n+  foo = \"0123456789012345678901234\"; // { dg-error \"7:invalid array assignment\" } // ERROR -\n }\n \n "}, {"sha": "3c9591f77337d7dd84f85fa3160a29948aeac06d", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/14664-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F14664-2.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -7,7 +7,7 @@ char foo[26];\n \n void bar()\n {\n-  foo = \"0123456789012345678901234\"; // { dg-error \"array\" }\n+  foo = \"0123456789012345678901234\"; // { dg-error \"7:invalid array assignment\" }\n }\n \n "}, {"sha": "d8889c0abfedb5a2cbe0a2fc21e5dd113576b625", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit12.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -5,5 +5,5 @@ char * bob();\n int main()\n {\n     char a[1][2];\n-    a[0] = bob();// { dg-error \"\" } .*\n+    a[0] = bob();// { dg-error \"10:incompatible types in assignment\" } .*\n }"}, {"sha": "63ba605dbddb585406517ccd6640c22346f81f32", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900213_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -16,7 +16,7 @@ int struct0::*dmp;\n \n void global_function_0 ()\n {\n-  i = *dmp;\t\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } causes abort\n+  i = *dmp;\t\t\t// { dg-error \"7:invalid use of unary '\\\\\\*' on pointer to member\" } causes abort\n }\n \n int main () { return 0; }"}, {"sha": "89bada320da8bc2328249258fa67067e63e1a601", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900215_02.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -41,8 +41,8 @@ void struct0::function_member ()\n   i = (this->*fmp) ();\t\t// perfectly legal - for both cfront and g++\n   i = this->*dmp;\t\t// perfectly legal - for both cfront and g++\n \n-  i = (*fmp) ();\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } \n-  i = *dmp;\t\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } \n+  i = (*fmp) ();\t\t// { dg-error \"8:invalid use of unary '\\\\\\*' on pointer to member\" } \n+  i = *dmp;\t\t\t// { dg-error \"7:invalid use of unary '\\\\\\*' on pointer to member\" } \n }\n \n int main () { return 0; }"}, {"sha": "70c2fbe232afca6410d12aada552acac609a503e", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900324_04.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_04.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -20,7 +20,7 @@ int_array ia2;\n \n void function_0 ()\n {\n-  ia1 = ia2;\t\t// { dg-error \"\" } gnu extension\n+  ia1 = ia2;\t\t// { dg-error \"7:invalid array assignment\" } gnu extension\n }\n \n int main () { return 0; }"}, {"sha": "8dfeed6287573ac2fda7e4ddf2f755849e9d768b", "filename": "gcc/testsuite/g++.old-deja/g++.ext/array1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -19,5 +19,5 @@ void\n ccBgaInspection::reinspect (unsigned long diag_flags) \n {\n   ct2d_rigid physTdev;\t\t \n-  _dev2phys = physTdev; // { dg-error \"\" } \n+  _dev2phys = physTdev; // { dg-error \"13:incompatible types in assignment\" } \n }"}, {"sha": "415141bf8a74f6c13ac514e08abf3155f55767db", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg17.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -12,5 +12,5 @@ void\n test ()\n {\n   b1 = b2;\t      /* OK */\n-  a1 = a2;\t      /* { dg-error \"\" } array assignment */\n+  a1 = a2;\t      /* { dg-error \"6:invalid array assignment\" } array assignment */\n }"}, {"sha": "2bcc3eb139482dadcf4762f2a7ccc041c6eb405c", "filename": "gcc/testsuite/g++.old-deja/g++.other/badarrow.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -6,5 +6,5 @@ struct S {\n \n void f()\n {\n-  s->i = 3; // { dg-error \"\" } base operand\n+  s->i = 3; // { dg-error \"4:base operand of .->. has non-pointer type .S.\" } base operand\n }"}, {"sha": "88c640326c08322f21549d5ef765e11b3453339a", "filename": "gcc/testsuite/g++.old-deja/g++.other/deref1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fderef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fderef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fderef1.C?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -7,8 +7,8 @@\n \n void fn (void *vp, volatile void *vvp)\n {\n-  *vp;      // { dg-error \"\" } not a pointer to object\n-  *vvp;     // { dg-error \"\" } not a pointer to object\n-  &*vp;     // { dg-error \"\" } not a pointer to object\n-  &*vvp;    // { dg-error \"\" } not a pointer to object\n+  *vp;      // { dg-error \"3:.void\\\\*. is not a pointer-to-object type\" } not a pointer to object\n+  *vvp;     // { dg-error \"3:.volatile void\\\\*. is not a pointer-to-object type\" } not a pointer to object\n+  &*vp;     // { dg-error \"4:.void\\\\*. is not a pointer-to-object type\" } not a pointer to object\n+  &*vvp;    // { dg-error \"4:.volatile void\\\\*. is not a pointer-to-object type\" } not a pointer to object\n }"}, {"sha": "92b5cb735e8d48db3680166c1ce71db9e7d0fc31", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -1,3 +1,8 @@\n+2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libcp1plugin.cc (plugin_pragma_push_user_expression): Update\n+\tcp_build_indirect_ref call.\n+\n 2019-09-27  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure: Regenerate."}, {"sha": "232ab976ab585f8a6f02a5a31e61b627b2555eaf", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3554d8ffc5a55f4173feb30619fab4131ba46032/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3554d8ffc5a55f4173feb30619fab4131ba46032/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=3554d8ffc5a55f4173feb30619fab4131ba46032", "patch": "@@ -630,7 +630,8 @@ plugin_pragma_push_user_expression (cpp_reader *)\n \t usable.  */\n       tree this_val = lookup_name (get_identifier (\"this\"));\n       current_class_ref = !this_val ? NULL_TREE\n-\t: cp_build_indirect_ref (this_val, RO_NULL, tf_warning_or_error);\n+\t: cp_build_indirect_ref (input_location, this_val, RO_NULL,\n+\t\t\t\t tf_warning_or_error);\n       current_class_ptr = this_val;\n     }\n }"}]}