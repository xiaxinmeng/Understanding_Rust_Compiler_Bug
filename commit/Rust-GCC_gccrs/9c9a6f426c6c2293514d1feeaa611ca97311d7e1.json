{"sha": "9c9a6f426c6c2293514d1feeaa611ca97311d7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5YTZmNDI2YzZjMjI5MzUxNGQxZmVlYWE2MTFjYTk3MzExZDdlMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-03T22:55:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-03T22:55:17Z"}, "message": "* pa.c (call_operand_address): Do not accept registers anymore.\n\nFrom-SVN: r4836", "tree": {"sha": "40f598fd9b68c5cb1bf471104b18aeefc5eec6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f598fd9b68c5cb1bf471104b18aeefc5eec6a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c9a6f426c6c2293514d1feeaa611ca97311d7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9a6f426c6c2293514d1feeaa611ca97311d7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9a6f426c6c2293514d1feeaa611ca97311d7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9a6f426c6c2293514d1feeaa611ca97311d7e1/comments", "author": null, "committer": null, "parents": [{"sha": "6c61ac77c0688dfd1883b53e60e24c07e4b1f834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c61ac77c0688dfd1883b53e60e24c07e4b1f834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c61ac77c0688dfd1883b53e60e24c07e4b1f834"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "b07e87bc3f96e8b2d1eb0ae8e31279801709b388", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9a6f426c6c2293514d1feeaa611ca97311d7e1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9a6f426c6c2293514d1feeaa611ca97311d7e1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9c9a6f426c6c2293514d1feeaa611ca97311d7e1", "patch": "@@ -58,13 +58,17 @@ reg_or_0_operand (op, mode)\n   return (op == CONST0_RTX (mode) || register_operand (op, mode));\n }\n \n+/* Return non-zero if OP is suitable for use in a call to a named\n+   function.\n+\n+   (???) For 2.5 try to eliminate either call_operand_address or \n+   function_label_operand, they perform very similar functions.  */\n int\n call_operand_address (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (REG_P (op) \n-\t  || (CONSTANT_P (op) && ! TARGET_LONG_CALLS));\n+  return (CONSTANT_P (op) && ! TARGET_LONG_CALLS);\n }\n \n /* Return 1 if X contains a symbolic expression.  We know these "}]}