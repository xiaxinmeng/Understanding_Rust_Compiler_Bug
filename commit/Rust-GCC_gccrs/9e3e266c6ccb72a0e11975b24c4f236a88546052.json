{"sha": "9e3e266c6ccb72a0e11975b24c4f236a88546052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzZTI2NmM2Y2NiNzJhMGUxMTk3NWIyNGM0ZjIzNmE4ODU0NjA1Mg==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-08-28T21:48:05Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-08-28T21:48:05Z"}, "message": "i386-protos.h (ix86_expand_compare): Add extern decl.\n\n\t* config/i386/i386-protos.h (ix86_expand_compare): Add extern decl.\n\t* config/i386/i386.c (ix86_expand_compare): Remove `static'.\n\t* config/i386/i386.md (trap, conditional_trap): New insn & expand.\n\nFrom-SVN: r36019", "tree": {"sha": "4afd2c90f17b6c9584b7293aaa8366d3ee23a0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afd2c90f17b6c9584b7293aaa8366d3ee23a0c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3e266c6ccb72a0e11975b24c4f236a88546052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3e266c6ccb72a0e11975b24c4f236a88546052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3e266c6ccb72a0e11975b24c4f236a88546052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3e266c6ccb72a0e11975b24c4f236a88546052/comments", "author": null, "committer": null, "parents": [{"sha": "58fdec72e23cf78d581d8a629131231ac3b931bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58fdec72e23cf78d581d8a629131231ac3b931bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58fdec72e23cf78d581d8a629131231ac3b931bc"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "c049a2f35b762cb4871b2fdad62c7045f492ddf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e3e266c6ccb72a0e11975b24c4f236a88546052", "patch": "@@ -1,3 +1,9 @@\n+2000-08-28  Greg McGary  <greg@mcgary.org>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_compare): Add extern decl.\n+\t* config/i386/i386.c (ix86_expand_compare): Remove `static'.\n+\t* config/i386/i386.md (trap, conditional_trap): New insn & expand.\n+\n 2000-08-27  Greg McGary  <greg@mcgary.org>\n \n \t* cpplex.c (parse_string): Don't look for backslash"}, {"sha": "fb86b1b6f208ffe0110182b30d0f9f55beefd0b4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=9e3e266c6ccb72a0e11975b24c4f236a88546052", "patch": "@@ -100,6 +100,7 @@ extern int ix86_unary_operator_ok PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t\t rtx[]));\n extern int ix86_match_ccmode PARAMS ((rtx, enum machine_mode));\n extern rtx ix86_expand_fp_compare PARAMS ((enum rtx_code, rtx, rtx, rtx));\n+extern rtx ix86_expand_compare PARAMS ((enum rtx_code));\n extern int ix86_use_fcomi_compare PARAMS ((enum rtx_code));\n extern void ix86_expand_branch PARAMS ((enum rtx_code, rtx));\n extern int ix86_expand_setcc PARAMS ((enum rtx_code, rtx));"}, {"sha": "5ebf1c1c0c7955107c198f8a4bc84cd8260d32b9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e3e266c6ccb72a0e11975b24c4f236a88546052", "patch": "@@ -402,7 +402,6 @@ static rtx ix86_expand_int_compare PARAMS ((enum rtx_code, rtx, rtx));\n static enum machine_mode ix86_fp_compare_mode PARAMS ((enum rtx_code));\n static enum rtx_code ix86_prepare_fp_compare_args PARAMS ((enum rtx_code,\n \t\t\t\t\t\t\t   rtx *, rtx *));\n-static rtx ix86_expand_compare PARAMS ((enum rtx_code));\n static rtx gen_push PARAMS ((rtx));\n static int memory_address_length PARAMS ((rtx addr));\n static int ix86_flags_dependant PARAMS ((rtx, rtx, enum attr_type));\n@@ -4897,7 +4896,7 @@ ix86_expand_fp_compare (code, op0, op1, scratch)\n \t\t\t const0_rtx);\n }\n \n-static rtx\n+rtx\n ix86_expand_compare (code)\n      enum rtx_code code;\n {"}, {"sha": "7d4faf347cb8356a4fb3ea96278ee55cd7272bab", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3e266c6ccb72a0e11975b24c4f236a88546052/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9e3e266c6ccb72a0e11975b24c4f236a88546052", "patch": "@@ -11129,3 +11129,52 @@\n     return \\\"call\\\\t%*%1\\\";\n }\"\n   [(set_attr \"type\" \"callv\")])\n+\f\n+(define_insn \"trap\"\n+  [(trap_if (const_int 1) (const_int 5))]\n+  \"\"\n+  \"int\\\\t$5\")\n+\n+;;; ix86 doesn't have conditional trap instructions, but we fake them\n+;;; for the sake of bounds checking.  By emitting bounds checks as\n+;;; conditional traps rather than as conditional jumps around\n+;;; unconditional traps we avoid introducing spurious basic-block\n+;;; boundaries and facilitate elimination of redundant checks.  In\n+;;; honor of the too-inflexible-for-BPs `bound' instruction, we use\n+;;; interrupt 5.\n+;;; \n+;;; FIXME: Static branch prediction rules for ix86 are such that\n+;;; forward conditional branches predict as untaken.  As implemented\n+;;; below, pseudo conditional traps violate that rule.  We should use\n+;;; .pushsection/.popsection to place all of the `int 5's in a special\n+;;; section loaded at the end of the text segment and branch forward\n+;;; there on bounds-failure, and then jump back immediately (in case\n+;;; the system chooses to ignore bounds violations, or to report\n+;;; violations and continue execution).\n+\n+(define_expand \"conditional_trap\"\n+  [(trap_if (match_operator 0 \"comparison_operator\"\n+\t     [(match_dup 2) (const_int 0)])\n+\t    (match_operand 1 \"const_int_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n+\t\t\t      ix86_expand_compare (GET_CODE (operands[0])),\n+\t\t\t      operands[1]));\n+  DONE;\n+}\")\n+\n+(define_insn \"\"\n+  [(trap_if (match_operator 0 \"comparison_operator\"\n+\t     [(reg 17) (const_int 0)])\n+\t    (match_operand 1 \"const_int_operand\" \"\"))]\n+  \"\"\n+  \"*\n+{\n+  operands[2] = gen_label_rtx ();\n+  output_asm_insn (\\\"j%c0\\\\t%l2\\; int\\\\t%1\\\", operands);\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n+\t\t\t     CODE_LABEL_NUMBER (operands[2]));\n+  RET;\n+}\")"}]}