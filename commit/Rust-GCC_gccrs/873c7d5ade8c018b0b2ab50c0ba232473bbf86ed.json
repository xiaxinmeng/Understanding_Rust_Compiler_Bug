{"sha": "873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczYzdkNWFkZThjMDE4YjBiMmFiNTBjMGJhMjMyNDczYmJmODZlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-07T18:02:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-07T18:02:43Z"}, "message": "Implement std::has_unique_object_representations\n\n\t* doc/xml/manual/status_cxx2017.xml: Update status.\n\t* include/std/type_traits (has_unique_object_representations): Define.\n\t* testsuite/20_util/has_unique_object_representations/value.cc: New.\n\t* testsuite/20_util/has_unique_object_representations/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/has_unique_object_representations/requirements/\n\ttypedefs.cc: New.\n\nFrom-SVN: r240868", "tree": {"sha": "e71c6c46a79ba8f847e8df15286bd5a09d096a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71c6c46a79ba8f847e8df15286bd5a09d096a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09c4992ac138656415fc108edcab8d643fc89bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c09c4992ac138656415fc108edcab8d643fc89bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c09c4992ac138656415fc108edcab8d643fc89bb"}], "stats": {"total": 194, "additions": 192, "deletions": 2}, "files": [{"sha": "68f1b516647eedbbc80ff02579020c70a123a604", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -1,3 +1,13 @@\n+2016-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Update status.\n+\t* include/std/type_traits (has_unique_object_representations): Define.\n+\t* testsuite/20_util/has_unique_object_representations/value.cc: New.\n+\t* testsuite/20_util/has_unique_object_representations/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/has_unique_object_representations/requirements/\n+\ttypedefs.cc: New.\n+\n 2016-10-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Update status."}, {"sha": "f1d709ee07142cb262bc410d9215ca82fbe354c3", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -441,14 +441,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> has_unique_object_representations </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0258r2.html\">\n \tP0258R2\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_has_unique_object_representations >= 201606 </code></entry>\n     </row>\n "}, {"sha": "d402b5b496dbb40a333148fc7e32f37e23e92b75", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -3040,6 +3040,16 @@ template <typename _Base, typename _Derived>\n   constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>\n   constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n+\n+# define __cpp_lib_has_unique_object_representations 201606\n+  /// has_unique_object_representations\n+  template<typename _Tp>\n+    struct has_unique_object_representations\n+    : bool_constant<__has_unique_object_representations(\n+      remove_cv_t<remove_all_extents_t<_Tp>>\n+      )>\n+    { };\n+\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "29be714dabcfad1846fe0e02133fd72a8c07afd0", "filename": "libstdc++-v3/testsuite/20_util/has_unique_object_representations/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Fexplicit_instantiation.cc?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct has_unique_object_representations<test_type>;\n+}"}, {"sha": "e24a97291cad6d703f5187ca4428b3b94bc1d35a", "filename": "libstdc++-v3/testsuite/20_util/has_unique_object_representations/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Frequirements%2Ftypedefs.cc?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::has_unique_object_representations<int>\ttest_type;\n+  static_assert( std::is_same<test_type::value_type, bool>::value );\n+  typedef std::integral_constant<bool, test_type{}()> bool_type;\n+  static_assert( std::is_same<test_type::type, bool_type>::value );\n+}"}, {"sha": "5a77ee5b52a93f7bd068a7c4e4865198c045aa91", "filename": "libstdc++-v3/testsuite/20_util/has_unique_object_representations/value.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c7d5ade8c018b0b2ab50c0ba232473bbf86ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_unique_object_representations%2Fvalue.cc?ref=873c7d5ade8c018b0b2ab50c0ba232473bbf86ed", "patch": "@@ -0,0 +1,110 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::has_unique_object_representations;\n+  using __gnu_test::test_category;\n+\n+  // Positive tests.\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tchar>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned char>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tsigned char>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+                bool>(true), \"\");\n+\n+  enum E : unsigned { };\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tE>(true), \"\");\n+\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned[3]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned[3][2]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned[]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tunsigned[][2]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tE[3]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tE[3][2]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tE[]>(true), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tE[][2]>(true), \"\");\n+\n+  struct Padded {\n+    char c1;\n+    alignas(4) char c2;\n+  };\n+\n+  struct Bitfield {\n+    int i : 3;\n+  };\n+\n+  struct Aligned {\n+    alignas(4) char c;\n+  };\n+\n+  // Negative tests.\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tvoid>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+                float>(false), \"\"); // implementation-defined\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tPadded>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tPadded[2]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tPadded[2][1]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tPadded[]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tPadded[][1]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tBitfield>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tBitfield[2]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tBitfield[2][1]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tBitfield[]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tBitfield[][1]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tAligned>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tAligned[2]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tAligned[2][1]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tAligned[]>(false), \"\");\n+  static_assert(test_category<has_unique_object_representations,\n+\t\tAligned[][1]>(false), \"\");\n+}"}]}