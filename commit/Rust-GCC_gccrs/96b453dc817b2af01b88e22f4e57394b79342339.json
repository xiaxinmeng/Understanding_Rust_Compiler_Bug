{"sha": "96b453dc817b2af01b88e22f4e57394b79342339", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiNDUzZGM4MTdiMmFmMDFiODhlMjJmNGU1NzM5NGI3OTM0MjMzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-18T20:02:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-18T20:02:18Z"}, "message": "ifcvt.c: Include except.h.\n\n        * ifcvt.c: Include except.h.\n        (block_has_only_trap): Break out from find_cond_trap.\n        (find_cond_trap): Use it.  Always delete the trap block.\n        (merge_if_block): Allow then block null.  Be less simplistic about\n        what insns can end a block.\n        * Makefile.in (ifcvt.o): Depend on except.h.\n\n        * gcc.c-torture/compile/iftrap-1.c: New.\n        * gcc.dg/iftrap-1.c: Adjust for ia64.\n        * gcc.dg/iftrap-2.c: New.\n\nFrom-SVN: r52489", "tree": {"sha": "14f600f23fb352e68da7b61ad3f6ac0326cad42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f600f23fb352e68da7b61ad3f6ac0326cad42c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b453dc817b2af01b88e22f4e57394b79342339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b453dc817b2af01b88e22f4e57394b79342339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b453dc817b2af01b88e22f4e57394b79342339", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b453dc817b2af01b88e22f4e57394b79342339/comments", "author": null, "committer": null, "parents": [{"sha": "26406018509b6c8884453317d30e01c987fe9977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26406018509b6c8884453317d30e01c987fe9977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26406018509b6c8884453317d30e01c987fe9977"}], "stats": {"total": 246, "additions": 210, "deletions": 36}, "files": [{"sha": "137640dd43ce8132215489d41f2f4e6191e1b9c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -1,5 +1,12 @@\n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n+        * ifcvt.c: Include except.h.\n+        (block_has_only_trap): Break out from find_cond_trap.\n+        (find_cond_trap): Use it.  Always delete the trap block.\n+        (merge_if_block): Allow then block null.  Be less simplistic about\n+        what insns can end a block.\n+        * Makefile.in (ifcvt.o): Depend on except.h.\n+\n \t* config/ia64/ia64.md (trap, conditional_trap): New.\n \n 2002-04-18  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "5a386eaad699cd4227a81117b9f9a6340cef4c81", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -1589,7 +1589,7 @@ regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h \\\n    resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) toplev.h \\\n    flags.h insn-config.h function.h $(RECOG_H) $(BASIC_BLOCK_H) $(EXPR_H) \\\n-   output.h $(TM_P_H)\n+   output.h except.h $(TM_P_H)\n dependence.o : dependence.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\\n    $(C_COMMON_H) flags.h varray.h $(EXPR_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) $(PARAMS_H) toplev.h"}, {"sha": "880f94a9f3a004b798854db2f31b844a4f5143eb", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 75, "deletions": 33, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -27,6 +27,7 @@\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"recog.h\"\n+#include \"except.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"expr.h\"\n@@ -104,6 +105,7 @@ static int find_if_block\t\tPARAMS ((basic_block, edge, edge));\n static int find_if_case_1\t\tPARAMS ((basic_block, edge, edge));\n static int find_if_case_2\t\tPARAMS ((basic_block, edge, edge));\n static int find_cond_trap\t\tPARAMS ((basic_block, edge, edge));\n+static rtx block_has_only_trap\t\tPARAMS ((basic_block));\n static int find_memory\t\t\tPARAMS ((rtx *, void *));\n static int dead_or_predicable\t\tPARAMS ((basic_block, basic_block,\n \t\t\t\t\t\t basic_block, basic_block, int));\n@@ -1812,11 +1814,14 @@ merge_if_block (test_bb, then_bb, else_bb, join_bb)\n \n   /* First merge TEST block into THEN block.  This is a no-brainer since\n      the THEN block did not have a code label to begin with.  */\n-\n-  if (combo_bb->global_live_at_end)\n-    COPY_REG_SET (combo_bb->global_live_at_end, then_bb->global_live_at_end);\n-  merge_blocks_nomove (combo_bb, then_bb);\n-  num_removed_blocks++;\n+  if (then_bb)\n+    {\n+      if (combo_bb->global_live_at_end)\n+\tCOPY_REG_SET (combo_bb->global_live_at_end,\n+\t\t      then_bb->global_live_at_end);\n+      merge_blocks_nomove (combo_bb, then_bb);\n+      num_removed_blocks++;\n+    }\n \n   /* The ELSE block, if it existed, had a label.  That label count\n      will almost always be zero, but odd things can happen when labels\n@@ -1832,14 +1837,34 @@ merge_if_block (test_bb, then_bb, else_bb, join_bb)\n \n   if (! join_bb)\n     {\n+      rtx last = combo_bb->end;\n+\n       /* The outgoing edge for the current COMBO block should already\n \t be correct.  Verify this.  */\n       if (combo_bb->succ == NULL_EDGE)\n-\tabort ();\n+\t{\n+\t  if (find_reg_note (last, REG_NORETURN, NULL))\n+\t    ;\n+\t  else if (GET_CODE (last) == INSN\n+\t\t   && GET_CODE (PATTERN (last)) == TRAP_IF\n+\t\t   && TRAP_CONDITION (PATTERN (last)) == const_true_rtx)\n+\t    ;\n+\t  else\n+\t    abort ();\n+\t}\n \n-      /* There should still be a branch at the end of the THEN or ELSE\n+      /* There should still be something at the end of the THEN or ELSE\n          blocks taking us to our final destination.  */\n-      if (GET_CODE (combo_bb->end) != JUMP_INSN)\n+      else if (GET_CODE (last) == JUMP_INSN)\n+\t;\n+      else if (combo_bb->succ->dest == EXIT_BLOCK_PTR\n+\t       && GET_CODE (last) == CALL_INSN\n+\t       && SIBLING_CALL_P (last))\n+\t;\n+      else if ((combo_bb->succ->flags & EDGE_EH)\n+\t       && can_throw_internal (last))\n+\t;\n+      else\n \tabort ();\n     }\n \n@@ -2069,15 +2094,15 @@ find_cond_trap (test_bb, then_edge, else_edge)\n   /* ??? We can't currently handle merging the blocks if they are not\n      already adjacent.  Prevent losage in merge_if_block by detecting\n      this now.  */\n-  if (then_bb->succ == NULL)\n+  if ((trap = block_has_only_trap (then_bb)) != NULL)\n     {\n       trap_bb = then_bb;\n       if (else_bb->index != then_bb->index + 1)\n \treturn FALSE;\n       join_bb = else_bb;\n       else_bb = NULL;\n     }\n-  else if (else_bb->succ == NULL)\n+  else if ((trap = block_has_only_trap (else_bb)) != NULL)\n     {\n       trap_bb = else_bb;\n       if (else_bb->index != then_bb->index + 1)\n@@ -2091,18 +2116,6 @@ find_cond_trap (test_bb, then_edge, else_edge)\n   else\n     return FALSE;\n \n-  /* Don't confuse a conditional return with something we want to\n-     optimize here.  */\n-  if (trap_bb == EXIT_BLOCK_PTR)\n-    return FALSE;\n-\n-  /* The only instruction in the THEN block must be the trap.  */\n-  trap = first_active_insn (trap_bb);\n-  if (! (trap == trap_bb->end\n-\t && GET_CODE (PATTERN (trap)) == TRAP_IF\n-         && TRAP_CONDITION (PATTERN (trap)) == const_true_rtx))\n-    return FALSE;\n-\n   if (rtl_dump_file)\n     {\n       if (trap_bb == then_bb)\n@@ -2149,26 +2162,55 @@ find_cond_trap (test_bb, then_edge, else_edge)\n   if (seq == NULL)\n     return FALSE;\n \n-  /* Emit the new insns before cond_earliest; delete the old jump\n-     and trap insns.  */\n-\n+  /* Emit the new insns before cond_earliest; delete the old jump.  */\n   emit_insn_before (seq, cond_earliest);\n-\n   delete_insn (jump);\n \n-  delete_insn (trap);\n+  /* Delete the trap block together with its insn.  */\n+  if (trap_bb == then_bb)\n+    then_bb = NULL;\n+  else if (else_bb == NULL)\n+    ;\n+  else if (trap_bb == else_bb)\n+    else_bb = NULL;\n+  else\n+    abort ();\n+  flow_delete_block (trap_bb);\n+  num_removed_blocks++;\n \n-  /* Merge the blocks!  */\n-  if (trap_bb != then_bb && ! else_bb)\n-    {\n-      flow_delete_block (trap_bb);\n-      num_removed_blocks++;\n-    }\n+  /* Merge what's left.  */\n   merge_if_block (test_bb, then_bb, else_bb, join_bb);\n \n   return TRUE;\n }\n \n+/* Subroutine of find_cond_trap: if BB contains only a trap insn, \n+   return it.  */\n+\n+static rtx\n+block_has_only_trap (bb)\n+     basic_block bb;\n+{\n+  rtx trap;\n+\n+  /* We're not the exit block.  */\n+  if (bb == EXIT_BLOCK_PTR)\n+    return NULL_RTX;\n+\n+  /* The block must have no successors.  */\n+  if (bb->succ)\n+    return NULL_RTX;\n+\n+  /* The only instruction in the THEN block must be the trap.  */\n+  trap = first_active_insn (bb);\n+  if (! (trap == bb->end\n+\t && GET_CODE (PATTERN (trap)) == TRAP_IF\n+         && TRAP_CONDITION (PATTERN (trap)) == const_true_rtx))\n+    return NULL_RTX;\n+\n+  return trap;\n+}\n+\n /* Look for IF-THEN-ELSE cases in which one of THEN or ELSE is\n    transformable, but not necessarily the other.  There need be no\n    JOIN block."}, {"sha": "2a2aedae9bf5a8e3836f8a49050e4d502aaadbc6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -1,3 +1,9 @@\n+2002-04-18  Richard Henderson  <rth@redhat.com>\n+\n+        * gcc.c-torture/compile/iftrap-1.c: New.\n+        * gcc.dg/iftrap-1.c: Adjust for ia64.\n+        * gcc.dg/iftrap-2.c: New.\n+\n 2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20020418-1.c: New test."}, {"sha": "a0adc78cf8286387c2beecd900162ad4d2e94e8a", "filename": "gcc/testsuite/gcc.c-torture/compile/iftrap-1.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fiftrap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fiftrap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fiftrap-1.c?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -0,0 +1,99 @@\n+/* Verify that ifcvt doesn't crash under a number of interesting conditions. */\n+\n+void f1(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+}\n+\n+void f2(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    bar();\n+}\n+\n+void f3(int p)\n+{\n+  if (p)\n+    bar();\n+  else\n+    __builtin_trap();\n+}\n+\n+void f4(int p, int q)\n+{\n+  if (p)\n+    {\n+      bar();\n+      if (q)\n+\tbar();\n+    }\n+  else\n+    __builtin_trap();\n+}\n+\n+void f5(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    abort();\n+}\n+\n+void f6(int p)\n+{\n+  if (p)\n+    abort();\n+  else\n+    __builtin_trap();\n+}\n+\n+void f7(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    __builtin_trap();\n+}\n+\n+void f8(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    {\n+      bar();\n+      __builtin_trap();\n+    }\n+}\n+\n+void f9(int p)\n+{\n+  if (p)\n+    {\n+      bar();\n+      __builtin_trap();\n+    }\n+  else\n+    __builtin_trap();\n+}\n+\n+void f10(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  while (1)\n+    bar();\n+}\n+\n+void f11(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    bar();\n+  while (1)\n+    baz();\n+}"}, {"sha": "69d754df35ca2e43bb2864ba7794762ae2b72f98", "filename": "gcc/testsuite/gcc.dg/iftrap-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-1.c?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -1,7 +1,7 @@\n /* Verify that we optimize to conditional traps.  */\n /* { dg-options \"-O\" } */\n-/* { dg-do compile { target rs6000-*-* powerpc-*-* sparc*-*-* } } */\n-/* { dg-final { scan-assembler-not \"^\\t(trap|ta)\\[ \\t\\]\" } } */\n+/* { dg-do compile { target rs6000-*-* powerpc-*-* sparc*-*-* ia64-*-* } } */\n+/* { dg-final { scan-assembler-not \"^\\t(trap|ta|break)\\[ \\t\\]\" } } */\n \n void f1(int p)\n {"}, {"sha": "909a85fcef81b2005b189f993ccdbf5a35534c00", "filename": "gcc/testsuite/gcc.dg/iftrap-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b453dc817b2af01b88e22f4e57394b79342339/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiftrap-2.c?ref=96b453dc817b2af01b88e22f4e57394b79342339", "patch": "@@ -0,0 +1,20 @@\n+/* Verify that we optimize to conditional traps.  */\n+/* { dg-options \"-O\" } */\n+/* { dg-do compile { target rs6000-*-* powerpc-*-* sparc*-*-* ia64-*-* } } */\n+/* { dg-final { scan-assembler-not \"^\\t(trap|ta|break)\\[ \\t\\]\" } } */\n+\n+void f1(int p)\n+{\n+  if (p)\n+    __builtin_trap();\n+  else\n+    abort();\n+}\n+\n+void f2(int p)\n+{\n+  if (p)\n+    abort();\n+  else\n+    __builtin_trap();\n+}"}]}