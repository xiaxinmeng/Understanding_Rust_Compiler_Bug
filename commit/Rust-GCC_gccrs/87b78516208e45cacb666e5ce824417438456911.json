{"sha": "87b78516208e45cacb666e5ce824417438456911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiNzg1MTYyMDhlNDVjYWNiNjY2ZTVjZTgyNDQxNzQzODQ1NjkxMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-27T03:19:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-27T03:19:59Z"}, "message": "i386: Implement widen_smul_*_v4si for plain sse2\n\nIf we don't implement this pattern, the vectorizer is happy to\nunpack the v4si and use the full mulv2di3.  This results in\nmore element shuffling than is required.\n\n        * config/i386/i386.c (bdesc_args): Update.  Change\n        IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI to OPTION_MASK_ISA_SSE2.\n        (IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI): New.\n        (ix86_builtin_mul_widen_even): Use it.\n        (ix86_builtin_mul_widen_odd): Relax SMUL_ODD from sse4 to sse2.\n        (ix86_expand_mul_widen_evenodd): Handle signed for sse2.\n        * config/i386/sse.md (vec_widen_<s>mult_hi_<V124_AVX2>): Allow\n        for all SSE2.\n        (vec_widen_<s>mult_lo_<V124_AVX2>): Likewise.\n        (vec_widen_<s>mult_odd_<VI4_AVX2>): Likewise.  Relax from V124_AVX2.\n        (vec_widen_smult_even_v4si): New.\n\nFrom-SVN: r189006", "tree": {"sha": "c32f4f08cef41f1957937a62285a27cfb98e62e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c32f4f08cef41f1957937a62285a27cfb98e62e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b78516208e45cacb666e5ce824417438456911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b78516208e45cacb666e5ce824417438456911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b78516208e45cacb666e5ce824417438456911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b78516208e45cacb666e5ce824417438456911/comments", "author": null, "committer": null, "parents": [{"sha": "298301d9e7ef43ab3475495446c9d9378cf6fb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298301d9e7ef43ab3475495446c9d9378cf6fb31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298301d9e7ef43ab3475495446c9d9378cf6fb31"}], "stats": {"total": 120, "additions": 79, "deletions": 41}, "files": [{"sha": "2eb52597665b66e4295ceeb0d0c10ff0fdb23a02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b78516208e45cacb666e5ce824417438456911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b78516208e45cacb666e5ce824417438456911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87b78516208e45cacb666e5ce824417438456911", "patch": "@@ -1,3 +1,17 @@\n+2012-06-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (bdesc_args): Update.  Change\n+\tIX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI to OPTION_MASK_ISA_SSE2.\n+\t(IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI): New.\n+\t(ix86_builtin_mul_widen_even): Use it.\n+\t(ix86_builtin_mul_widen_odd): Relax SMUL_ODD from sse4 to sse2.\n+\t(ix86_expand_mul_widen_evenodd): Handle signed for sse2.\n+\t* config/i386/sse.md (vec_widen_<s>mult_hi_<V124_AVX2>): Allow\n+\tfor all SSE2.\n+\t(vec_widen_<s>mult_lo_<V124_AVX2>): Likewise.\n+\t(vec_widen_<s>mult_odd_<VI4_AVX2>): Likewise.  Relax from V124_AVX2.\n+\t(vec_widen_smult_even_v4si): New.\n+\n 2012-06-26  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sse.md (mul<VI8_AVX2>3): Change from insn_and_split"}, {"sha": "b96fc6e5371e7ef19f2cd682f79842d18841ee80", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b78516208e45cacb666e5ce824417438456911/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b78516208e45cacb666e5ce824417438456911/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=87b78516208e45cacb666e5ce824417438456911", "patch": "@@ -25758,6 +25758,7 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI,\n   IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI,\n   IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI,\n+  IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI,\n   IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI,\n   IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI,\n \n@@ -26620,7 +26621,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv1siv1di3, \"__builtin_ia32_pmuludq\", IX86_BUILTIN_PMULUDQ, UNKNOWN, (int) V1DI_FTYPE_V2SI_V2SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_vw_umul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_even_v4si, \"__builtin_ia32_vw_smul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_odd_v4si, \"__builtin_ia32_vw_umul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_odd_v4si, \"__builtin_ia32_vw_smul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, \"__builtin_ia32_pmaddwd128\", IX86_BUILTIN_PMADDWD128, UNKNOWN, (int) V4SI_FTYPE_V8HI_V8HI },\n \n@@ -26747,7 +26750,6 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv4si3, \"__builtin_ia32_pminud128\", IX86_BUILTIN_PMINUD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv8hi3, \"__builtin_ia32_pminuw128\", IX86_BUILTIN_PMINUW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, \"__builtin_ia32_pmuldq128\", IX86_BUILTIN_PMULDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_vec_widen_smult_odd_v4si, \"__builtin_ia32_vw_smul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n \n   /* SSE4.1 */\n@@ -31067,18 +31069,10 @@ ix86_builtin_mul_widen_even (tree type)\n   switch (TYPE_MODE (type))\n     {\n     case V4SImode:\n-      if (uns_p)\n-\t{\n-\t  if (!TARGET_SSE2)\n-\t    return NULL;\n-\t  code = IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI;\n-\t}\n-      else\n-\t{\n-\t  if (!TARGET_SSE4_1)\n-\t    return NULL;\n-\t  code = IX86_BUILTIN_PMULDQ128;\n-\t}\n+      if (!TARGET_SSE2)\n+\treturn NULL;\n+      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI\n+\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI);\n       break;\n \n     case V8SImode:\n@@ -31103,18 +31097,10 @@ ix86_builtin_mul_widen_odd (tree type)\n   switch (TYPE_MODE (type))\n     {\n     case V4SImode:\n-      if (uns_p)\n-\t{\n-\t  if (!TARGET_SSE2)\n-\t    return NULL;\n-\t  code = IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI;\n-\t}\n-      else\n-\t{\n-\t  if (!TARGET_SSE4_1)\n-\t    return NULL;\n-\t  code = IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI;\n-\t}\n+      if (!TARGET_SSE2)\n+\treturn NULL;\n+      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI\n+\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI);\n       break;\n \n     case V8SImode:\n@@ -38774,12 +38760,12 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n \t  emit_insn (gen_xop_pmacsdqh (dest, op1, op2, x));\n \t  return;\n \t}\n+\n+      x = GEN_INT (GET_MODE_UNIT_BITSIZE (mode));\n       op1 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op1),\n-\t\t\t  GEN_INT (GET_MODE_UNIT_BITSIZE (mode)), NULL,\n-\t\t\t  1, OPTAB_DIRECT);\n+\t\t\t  x, NULL, 1, OPTAB_DIRECT);\n       op2 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op2),\n-\t\t\t  GEN_INT (GET_MODE_UNIT_BITSIZE (mode)), NULL,\n-\t\t\t  1, OPTAB_DIRECT);\n+\t\t\t  x, NULL, 1, OPTAB_DIRECT);\n       op1 = gen_lowpart (mode, op1);\n       op2 = gen_lowpart (mode, op2);\n     }\n@@ -38801,7 +38787,38 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n       x = gen_xop_pmacsdql (dest, op1, op2, x);\n     }\n   else\n-    gcc_unreachable ();\n+    {\n+      rtx s1, s2, t0, t1, t2;\n+\n+      /* The easiest way to implement this without PMULDQ is to go through\n+\t the motions as if we are performing a full 64-bit multiply.  With\n+\t the exception that we need to do less shuffling of the elements.  */\n+\n+      /* Compute the sign-extension, aka highparts, of the two operands.  */\n+      s1 = ix86_expand_sse_cmp (gen_reg_rtx (mode), GT, CONST0_RTX (mode),\n+\t\t\t\top1, pc_rtx, pc_rtx);\n+      s2 = ix86_expand_sse_cmp (gen_reg_rtx (mode), GT, CONST0_RTX (mode),\n+\t\t\t\top2, pc_rtx, pc_rtx);\n+\n+      /* Multiply LO(A) * HI(B), and vice-versa.  */\n+      t1 = gen_reg_rtx (wmode);\n+      t2 = gen_reg_rtx (wmode);\n+      emit_insn (gen_sse2_umulv2siv2di3 (t1, s1, op2));\n+      emit_insn (gen_sse2_umulv2siv2di3 (t2, s2, op1));\n+\n+      /* Multiply LO(A) * LO(B).  */\n+      t0 = gen_reg_rtx (wmode);\n+      emit_insn (gen_sse2_umulv2siv2di3 (t0, op1, op2));\n+\n+      /* Combine and shift the highparts into place.  */\n+      t1 = expand_binop (wmode, add_optab, t1, t2, t1, 1, OPTAB_DIRECT);\n+      t1 = expand_binop (wmode, ashl_optab, t1, GEN_INT (32), t1,\n+\t\t\t 1, OPTAB_DIRECT);\n+\n+      /* Combine high and low parts.  */\n+      force_expand_binop (wmode, add_optab, t0, t1, dest, 1, OPTAB_DIRECT);\n+      return;\n+    }\n   emit_insn (x);\n }\n "}, {"sha": "754b8b4a7bced07b198fb76629977d465f26e08f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b78516208e45cacb666e5ce824417438456911/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b78516208e45cacb666e5ce824417438456911/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=87b78516208e45cacb666e5ce824417438456911", "patch": "@@ -5607,9 +5607,7 @@\n    (any_extend:<sseunpackmode>\n      (match_operand:VI124_AVX2 1 \"register_operand\"))\n    (match_operand:VI124_AVX2 2 \"register_operand\")]\n-  ; Note that SSE2 does not have signed SI multiply\n-  \"TARGET_XOP || TARGET_SSE4_1\n-   || (TARGET_SSE2 && (<u_bool> || <MODE>mode != V4SImode))\"\n+  \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_hilo (operands[0], operands[1], operands[2],\n \t\t\t      <u_bool>, true);\n@@ -5621,23 +5619,32 @@\n    (any_extend:<sseunpackmode>\n      (match_operand:VI124_AVX2 1 \"register_operand\"))\n    (match_operand:VI124_AVX2 2 \"register_operand\")]\n-  ; Note that SSE2 does not have signed SI multiply\n-  \"TARGET_XOP || TARGET_SSE4_1\n-   || (TARGET_SSE2 && (<u_bool> || <MODE>mode != V4SImode))\"\n+  \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_hilo (operands[0], operands[1], operands[2],\n \t\t\t      <u_bool>, false);\n   DONE;\n })\n \n+;; Most widen_<s>mult_even_<mode> can be handled directly from other\n+;; named patterns, but signed V4SI needs special help for plain SSE2.\n+(define_expand \"vec_widen_smult_even_v4si\"\n+  [(match_operand:V2DI 0 \"register_operand\")\n+   (match_operand:V4SI 1 \"register_operand\")\n+   (match_operand:V4SI 2 \"register_operand\")]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],\n+\t\t\t\t false, false);\n+  DONE;\n+})\n+\n (define_expand \"vec_widen_<s>mult_odd_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (any_extend:<sseunpackmode>\n-     (match_operand:VI124_AVX2 1 \"register_operand\"))\n-   (match_operand:VI124_AVX2 2 \"register_operand\")]\n-  ; Note that SSE2 does not have signed SI multiply\n-  \"TARGET_AVX || TARGET_XOP || TARGET_SSE4_1\n-   || (TARGET_SSE2 && (<u_bool> || <MODE>mode != V4SImode))\"\n+     (match_operand:VI4_AVX2 1 \"register_operand\"))\n+   (match_operand:VI4_AVX2 2 \"register_operand\")]\n+  \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],\n \t\t\t\t <u_bool>, true);"}]}