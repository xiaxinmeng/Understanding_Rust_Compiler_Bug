{"sha": "9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjODNhZjkwMmE5OWE1ODlkZmI4YzA1YzBmMTZlMWE1YmRmODEyZA==", "commit": {"author": {"name": "Roman Kennke", "email": "roman@kennke.org", "date": "2005-05-06T06:03:17Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-05-06T06:03:17Z"}, "message": "2005-05-06  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/PlainView.java\n\t(drawUnselectedText): Call Utilities.drawTabbedText() with correct\n\toffset parameter.\n\t* javax/swing/text/Utilities.java\n\t(drawTabbedText): Initilialize local variable pos correctly.\n\n2005-05-06  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/AbstractDocument.java\n\t(LeafElement): Made start and end package private fields for\n\teffective reindexing.\n\t* javax/swing/text/PlainDocument.java\n\t(constructor): The field rootElement is always BranchElement,\n\tso we handle it as such.\n\t(removeUpdate): Rewritten reindexing for removeUpdate so that\n\tthe actual removal is taken into account.\n\n2005-05-06  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/GapContent.java:\n\tRemoved debugging output stuff, which I accidentally left in.\n\n2005-05-06  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/GapContent.java:\n\tImplemented a real GapContent. Only the public methods have\n\tbeen implemented so far and still no UndoableEdit support.\n\nFrom-SVN: r99300", "tree": {"sha": "247bf4981adfa1e88ee56d2f591e9288e3778b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247bf4981adfa1e88ee56d2f591e9288e3778b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/comments", "author": null, "committer": null, "parents": [{"sha": "876f4e199c63fce3ae79bde6a0b76b8057836f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876f4e199c63fce3ae79bde6a0b76b8057836f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876f4e199c63fce3ae79bde6a0b76b8057836f62"}], "stats": {"total": 307, "additions": 270, "deletions": 37}, "files": [{"sha": "e47919920eb6fe7f7c69f78253410981e6d2f7cc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -1,3 +1,33 @@\n+2005-05-06  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/PlainView.java\n+\t(drawUnselectedText): Call Utilities.drawTabbedText() with correct\n+\toffset parameter.\n+\t* javax/swing/text/Utilities.java\n+\t(drawTabbedText): Initilialize local variable pos correctly.\n+\n+2005-05-06  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/AbstractDocument.java\n+\t(LeafElement): Made start and end package private fields for\n+\teffective reindexing.\n+\t* javax/swing/text/PlainDocument.java\n+\t(constructor): The field rootElement is always BranchElement,\n+\tso we handle it as such.\n+\t(removeUpdate): Rewritten reindexing for removeUpdate so that\n+\tthe actual removal is taken into account.\n+\n+2005-05-06  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/GapContent.java:\n+\tRemoved debugging output stuff, which I accidentally left in.\n+\n+2005-05-06  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/GapContent.java:\n+\tImplemented a real GapContent. Only the public methods have\n+\tbeen implemented so far and still no UndoableEdit support.\n+\n 2005-05-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* java/awt/BufferCapabilities.java (BufferCapabilities): Fix"}, {"sha": "efeb85db67f4bcf6bbd280a0bee58b49ea6ed694", "filename": "libjava/javax/swing/text/AbstractDocument.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -847,8 +847,8 @@ public int getIndex()\n   public class LeafElement extends AbstractElement\n   {\n     private static final long serialVersionUID = 5115368706941283802L;\n-    private int start;\n-    private int end;\n+    int start;\n+    int end;\n \n     public LeafElement(Element parent, AttributeSet attributes, int start,\n                        int end)"}, {"sha": "111617e94a9d6e51f012604d919ef23217c83542", "filename": "libjava/javax/swing/text/GapContent.java", "status": "modified", "additions": 198, "deletions": 29, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -40,8 +40,6 @@\n \n import java.io.Serializable;\n \n-// too lazy to make a real gapcontent.\n-// lets just use a stringbuffer instead.\n import javax.swing.undo.UndoableEdit;\n \n /**\n@@ -53,20 +51,41 @@\n  * has to be shifted around when the insertion point moves (then the gap also\n  * moves and one array copy is necessary) or when the gap is filled up and\n  * the buffer has to be enlarged.\n+ *\n+ * TODO: Implement UndoableEdit support stuff\n  */\n public class GapContent\n   implements AbstractDocument.Content, Serializable\n {\n   private static final long serialVersionUID = 8374645204155842629L;\n-    \n-  StringBuffer buf = new StringBuffer();\n+\n+  /**\n+   * This is the default buffer size and the amount of bytes that\n+   * a buffer is extended if it is full.\n+   */\n+  static final int DEFAULT_BUFSIZE = 64;\n+\n+  /**\n+   * The text buffer.\n+   */\n+  char[] buffer;\n+\n+  /**\n+   * The index of the first character of the gap.\n+   */\n+  int gapStart;\n+\n+  /**\n+   * The index of the character after the last character of the gap.\n+   */\n+  int gapEnd;\n \n   /**\n    * Creates a new GapContent object.\n    */\n   public GapContent()\n   {\n-    this(10);\n+    this(DEFAULT_BUFSIZE);\n   }\n \n   /**\n@@ -76,30 +95,33 @@ public GapContent()\n    */\n   public GapContent(int size)\n   {\n-    buf.append(\"\\n\");\n+    buffer = (char[]) allocateArray(size);\n+    gapStart = 0;\n+    gapEnd = size - 1;\n+    buffer[size - 1] = '\\n';\n   }\n \n   /**\n-   * Creates and returns a mark at the specified position.\n-   *\n-   * @param offset the position at which to create the mark\n+   * Allocates an array of the specified length that can then be used as\n+   * buffer.\n    *\n-   * @return the create Position object for the mark\n+   * @param size the size of the array to be allocated\n    *\n-   * @throws BadLocationException if the offset is not a valid position in\n-   *         the buffer\n+   * @return the allocated array\n    */\n-  public Position createPosition(final int offset) throws BadLocationException\n+  protected Object allocateArray(int size)\n   {\n-    return new Position()\n-      {\n-\tint off = offset;\n+    return new char[size];\n+  }\n \n-\tpublic int getOffset()\n-\t{\n-\t  return off;\n-\t}\n-      };\n+  /**\n+   * Returns the length of the allocated buffer array.\n+   *\n+   * @return the length of the allocated buffer array\n+   */\n+  protected int getArrayLength()\n+  {\n+    return buffer.length;\n   }\n \n   /**\n@@ -109,7 +131,7 @@ public int getOffset()\n    */\n   public int length()\n   {\n-    return buf.length();\n+    return buffer.length - (gapEnd - gapStart);\n   }\n \n   /**\n@@ -127,7 +149,27 @@ public int length()\n   public UndoableEdit insertString(int where, String str)\n     throws BadLocationException\n   {\n-    buf.insert(where, str);\n+    // check arguments\n+    int length = length();\n+    int strLen = str.length();\n+\n+    if (where >= length)\n+      throw new BadLocationException(\"the where argument cannot be greater\"\n+                                     + \" than the content length\", where);\n+\n+    // check if the gap is big enough to hold the string\n+    if ((gapEnd - gapStart) < strLen)\n+      // make room for this string and some more\n+      shiftEnd(strLen + DEFAULT_BUFSIZE);\n+\n+    // are we at the gap boundary?\n+    if (where != gapStart)\n+      shiftGap(where);\n+\n+    // now we can simple copy the string into the gap and adjust the\n+    // gap boundaries\n+    System.arraycopy(str.toCharArray(), 0, buffer, gapStart, strLen);\n+    gapStart += strLen;\n     return null;\n   }\n \n@@ -146,7 +188,23 @@ public UndoableEdit insertString(int where, String str)\n   public UndoableEdit remove(int where, int nitems)\n     throws BadLocationException\n   {\n-    buf.delete(where, where + nitems);\n+    // check arguments\n+    int length = length();\n+\n+    if (where >= length)\n+      throw new BadLocationException(\"the where argument cannot be greater\"\n+                                     + \" than the content length\", where);\n+    if ((where + nitems) > length)\n+      throw new BadLocationException(\"where + nitems cannot be greater\"\n+                                     + \" than the content length\",\n+                                     where + nitems);\n+\n+    // check if we are at the gap boundary\n+    if (where != gapStart)\n+      shiftGap(where);\n+\n+    // now we simply have to enlarge the gap\n+    gapEnd += nitems;\n     return null;\n   }\n \n@@ -161,12 +219,18 @@ public UndoableEdit remove(int where, int nitems)\n    */\n   public String getString(int where, int len) throws BadLocationException\n   {\n-    return buf.substring(where, where+len);\n+    Segment seg = new Segment();\n+    getChars(where, len, seg);\n+    return new String(seg.array, seg.offset, seg.count);\n   }\n \n   /**\n    * Fetches a piece of content and stores it in a {@link Segment} object.\n    *\n+   * If the requested piece of text spans the gap, the content is copied\n+   * into a new array. If it doesn't then it is contiguous and the\n+   * actual content store is returned.\n+   *\n    * @param where the start location of the fragment\n    * @param len the length of the fragment\n    * @param txt the Segment object to store the fragment in\n@@ -177,11 +241,116 @@ public String getString(int where, int len) throws BadLocationException\n   public void getChars(int where, int len, Segment txt)\n     throws BadLocationException\n   {\n-    txt.array = new char[len];\n+    // check arguments\n+    int length = length();\n+    if (where >= length)\n+      throw new BadLocationException(\"the where argument cannot be greater\"\n+                                     + \" than the content length\", where);\n+    if ((where + len) > length)\n+      throw new BadLocationException(\"len plus where cannot be greater\"\n+                                     + \" than the content length\",\n+                                     len + where);\n \n-    System.arraycopy(buf.toString().toCharArray(), where, txt.array, 0, len);\n+    // check if requested segment is contiguous\n+    if ((where < gapStart) && ((gapStart - where) < len))\n+      {\n+        // requested segment is not contiguous -> copy the pieces together\n+        char[] copy = new char[len];\n+        int lenFirst = gapStart - where; // the length of the first segment\n+        System.arraycopy(buffer, where, copy, 0, lenFirst);\n+        System.arraycopy(buffer, gapEnd, copy, lenFirst, len - lenFirst);\n+        txt.array = copy;\n+        txt.offset = 0;\n+        txt.count = len;\n+      }\n+    else\n+      {\n+        // requested segment is contiguous -> we can simply return the\n+        // actual content\n+        txt.array = buffer;\n+        if (where < gapStart)\n+          txt.offset = where;\n+        else\n+          txt.offset = where + (gapEnd - gapStart);\n+        txt.count = len;\n+      }\n+  }\n \n-    txt.count = len;\n-    txt.offset = 0;\n+  /**\n+   * Creates and returns a mark at the specified position.\n+   *\n+   * @param offset the position at which to create the mark\n+   *\n+   * @return the create Position object for the mark\n+   *\n+   * @throws BadLocationException if the offset is not a valid position in\n+   *         the buffer\n+   */\n+  public Position createPosition(final int offset) throws BadLocationException\n+  {\n+    return new Position()\n+      {\n+\tint off = offset;\n+\n+\tpublic int getOffset()\n+\t{\n+\t  return off;\n+\t}\n+      };\n+  }\n+\n+  /**\n+   * Enlarges the gap. This allocates a new bigger buffer array, copy the\n+   * segment before the gap as it is and the segment after the gap at\n+   * the end of the new buffer array. This does change the gapEnd mark\n+   * but not the gapStart mark.\n+   *\n+   * @param newSize the new size of the gap\n+   */\n+  protected void shiftEnd(int newSize)\n+  {\n+    char[] newBuf = (char[]) allocateArray(length() + newSize);\n+    System.arraycopy(buffer, 0, newBuf, 0, gapStart);\n+    System.arraycopy(buffer, gapEnd, newBuf, gapStart + newSize,\n+                     buffer.length - gapEnd);\n+    gapEnd = gapStart + newSize;\n+    buffer = newBuf;\n+  }\n+\n+  /**\n+   * Shifts the gap to the specified position.\n+   *\n+   * @param newGapStart the new start position of the gap\n+   */\n+  protected void shiftGap(int newGapStart)\n+  {\n+    int newGapEnd = newGapStart + (gapEnd - gapStart);\n+\n+    if (newGapStart == gapStart)\n+      return;\n+    else if (newGapStart < gapStart)\n+      {\n+        System.arraycopy(buffer, newGapStart, buffer, newGapEnd,\n+                         gapStart - newGapStart);\n+        gapStart = newGapStart;\n+        gapEnd = newGapEnd;\n+      }\n+    else\n+      {\n+        System.arraycopy(buffer, gapEnd, buffer, gapStart,\n+                         newGapStart - gapStart);\n+        gapStart = newGapStart;\n+        gapEnd = newGapEnd;\n+      }\n+  }\n+\n+  /**\n+   * Returns the allocated buffer array.\n+   *\n+   * @return the allocated buffer array\n+   */\n+  protected Object getArray()\n+  {\n+    return buffer;\n   }\n }"}, {"sha": "3a44725fc1df96975a5431db881ec008116296c1", "filename": "libjava/javax/swing/text/PlainDocument.java", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FPlainDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FPlainDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FPlainDocument.java?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -47,7 +47,7 @@ public class PlainDocument extends AbstractDocument\n   public static final String lineLimitAttribute = \"lineLimit\";\n   public static final String tabSizeAttribute = \"tabSize\";\n \n-  private Element rootElement;\n+  private BranchElement rootElement;\n   private int tabSize;\n   \n   public PlainDocument()\n@@ -59,7 +59,7 @@ public PlainDocument(AbstractDocument.Content content)\n   {\n     super(content);\n     tabSize = 8;\n-    rootElement = createDefaultRoot();\n+    rootElement = (BranchElement) createDefaultRoot();\n   }\n \n   private void reindex()\n@@ -114,9 +114,43 @@ protected void insertUpdate(DefaultDocumentEvent event, AttributeSet attributes)\n \n   protected void removeUpdate(DefaultDocumentEvent event)\n   {\n-    reindex();\n-\n     super.removeUpdate(event);\n+\n+    int p0 = event.getOffset();\n+    int p1 = event.getLength() + p0;\n+    int len = event.getLength();\n+\n+    // check if we must collapse some elements\n+    int i1 = rootElement.getElementIndex(p0);\n+    int i2 = rootElement.getElementIndex(p1);\n+    if (i1 != i2)\n+      {\n+        Element el1 = rootElement.getElement(i1);\n+        Element el2 = rootElement.getElement(i2);\n+        int start = el1.getStartOffset();\n+        int end = el2.getEndOffset();\n+        // collapse elements if the removal spans more than 1 line\n+        Element newEl = createLeafElement(rootElement,\n+                                          SimpleAttributeSet.EMPTY,\n+                                          start, end - len);\n+        rootElement.replace(start, end - start, new Element[]{ newEl });\n+      }\n+    else\n+      {\n+        // otherwise only adjust indices of the element\n+        LeafElement el1 = (LeafElement) rootElement.getElement(i1);\n+        el1.end -= len;\n+      }\n+\n+    // reindex remaining elements\n+    for (int i = rootElement.getElementIndex(p0) + 1;\n+         i < rootElement.getElementCount(); i++)\n+      {\n+        LeafElement el = (LeafElement) rootElement.getElement(i);\n+        el.start -= len;\n+        el.end -= len;\n+      }\n+      \n   }\n \n   public Element getDefaultRootElement()"}, {"sha": "fb6af4eecadc9b877580561a9db98e1c975ce32b", "filename": "libjava/javax/swing/text/PlainView.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FPlainView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FPlainView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FPlainView.java?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -148,7 +148,7 @@ protected int drawUnselectedText(Graphics g, int x, int y, int p0, int p1)\n     g.setColor(unselectedColor);\n     Segment segment = new Segment();\n     getDocument().getText(p0, p1 - p0, segment);\n-    return Utilities.drawTabbedText(segment, x, y, g, this, 0);\n+    return Utilities.drawTabbedText(segment, x, y, g, this, segment.offset);\n   }\n \n   public void paint(Graphics g, Shape s)"}, {"sha": "79047014d46382ba3d01c03868b44ed0bd044cad", "filename": "libjava/javax/swing/text/Utilities.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FUtilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc83af902a99a589dfb8c05c0f16e1a5bdf812d/libjava%2Fjavax%2Fswing%2Ftext%2FUtilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FUtilities.java?ref=9dc83af902a99a589dfb8c05c0f16e1a5bdf812d", "patch": "@@ -92,7 +92,7 @@ public static final int drawTabbedText(Segment s, int x, int y, Graphics g,\n     int ascent = metrics.getAscent();\n \n     int pixelWidth = 0;\n-    int pos = 0;\n+    int pos = s.offset;\n     int len = 0;\n \n     for (int offset = s.offset; offset < (s.offset + s.count); ++offset)"}]}