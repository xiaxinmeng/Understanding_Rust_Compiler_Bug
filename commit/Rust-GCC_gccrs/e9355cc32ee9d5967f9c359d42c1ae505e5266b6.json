{"sha": "e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzNTVjYzMyZWU5ZDU5NjdmOWMzNTlkNDJjMWFlNTA1ZTUyNjZiNg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-10-06T12:20:09Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-10-06T12:20:09Z"}, "message": "re PR fortran/45521 ([F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE)\n\n2012-10-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45521\n\t* interface.c (generic_correspondence): Implement additional\n\tdistinguishability criteria of F08.\n\t(compare_actual_formal): Reject data object as actual argument for\n\tprocedure formal argument.\n\n2012-10-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45521\n\t* gfortran.dg/generic_25.f90: New.\n\t* gfortran.dg/generic_26.f90: New.\n\t* gfortran.dg/generic_27.f90: New.\n\nFrom-SVN: r192157", "tree": {"sha": "187f0ab5e166b729754e62a8ee2c9145efe1f7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/187f0ab5e166b729754e62a8ee2c9145efe1f7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa3b677b13884a81e93202183802bbe6c8da9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa3b677b13884a81e93202183802bbe6c8da9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa3b677b13884a81e93202183802bbe6c8da9fe"}], "stats": {"total": 147, "additions": 130, "deletions": 17}, "files": [{"sha": "c8f5c2bb9c46a38c26b5e3a0b72c9d67d4e2cd03", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -1,3 +1,11 @@\n+2012-10-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45521\n+\t* interface.c (generic_correspondence): Implement additional\n+\tdistinguishability criteria of F08.\n+\t(compare_actual_formal): Reject data object as actual argument for\n+\tprocedure formal argument.\n+\n 2012-10-04  Tobias Burnus  <burnus@net-b.de>\n \n \t* expr.c (scalarize_intrinsic_call): Plug memory leak."}, {"sha": "4822149cc0bdf06f24e21b9706fc9c4a575e0f47", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -932,23 +932,23 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n }\n \n \n-/* Perform the correspondence test in rule 3 of section F03:16.2.3.\n-   Returns zero if no argument is found that satisfies rule 3, nonzero\n-   otherwise. 'p1' and 'p2' are the PASS arguments of both procedures\n+/* Perform the correspondence test in rule (3) of F08:C1215.\n+   Returns zero if no argument is found that satisfies this rule,\n+   nonzero otherwise. 'p1' and 'p2' are the PASS arguments of both procedures\n    (if applicable).\n \n    This test is also not symmetric in f1 and f2 and must be called\n    twice.  This test finds problems caused by sorting the actual\n    argument list with keywords.  For example:\n \n    INTERFACE FOO\n-       SUBROUTINE F1(A, B)\n-\t   INTEGER :: A ; REAL :: B\n-       END SUBROUTINE F1\n+     SUBROUTINE F1(A, B)\n+       INTEGER :: A ; REAL :: B\n+     END SUBROUTINE F1\n \n-       SUBROUTINE F2(B, A)\n-\t   INTEGER :: A ; REAL :: B\n-       END SUBROUTINE F1\n+     SUBROUTINE F2(B, A)\n+       INTEGER :: A ; REAL :: B\n+     END SUBROUTINE F1\n    END INTERFACE FOO\n \n    At this point, 'CALL FOO(A=1, B=1.0)' is ambiguous.  */\n@@ -973,7 +973,10 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n \tf2 = f2->next;\n \n       if (f2 != NULL && (compare_type_rank (f1->sym, f2->sym)\n-\t\t\t || compare_type_rank (f2->sym, f1->sym)))\n+\t\t\t || compare_type_rank (f2->sym, f1->sym))\n+\t  && !((gfc_option.allow_std & GFC_STD_F2008)\n+\t       && ((f1->sym->attr.allocatable && f2->sym->attr.pointer)\n+\t\t   || (f2->sym->attr.allocatable && f1->sym->attr.pointer))))\n \tgoto next;\n \n       /* Now search for a disambiguating keyword argument starting at\n@@ -984,7 +987,10 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n \t    continue;\n \n \t  sym = find_keyword_arg (g->sym->name, f2_save);\n-\t  if (sym == NULL || !compare_type_rank (g->sym, sym))\n+\t  if (sym == NULL || !compare_type_rank (g->sym, sym)\n+\t      || ((gfc_option.allow_std & GFC_STD_F2008)\n+\t\t  && ((sym->attr.allocatable && g->sym->attr.pointer)\n+\t\t      || (sym->attr.pointer && g->sym->attr.allocatable))))\n \t    return 1;\n \t}\n \n@@ -2551,8 +2557,8 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \n      skip_size_check:\n \n-      /* Satisfy 12.4.1.3 by ensuring that a procedure pointer actual argument\n-\t is provided for a procedure pointer formal argument.  */\n+      /* Satisfy F03:12.4.1.3 by ensuring that a procedure pointer actual\n+         argument is provided for a procedure pointer formal argument.  */\n       if (f->sym->attr.proc_pointer\n \t  && !((a->expr->expr_type == EXPR_VARIABLE\n \t\t&& a->expr->symtree->n.sym->attr.proc_pointer)\n@@ -2566,11 +2572,10 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n-      /* Satisfy 12.4.1.2 by ensuring that a procedure actual argument is\n+      /* Satisfy F03:12.4.1.3 by ensuring that a procedure actual argument is\n \t provided for a procedure formal argument.  */\n-      if (a->expr->ts.type != BT_PROCEDURE && !gfc_is_proc_ptr_comp (a->expr)\n-\t  && a->expr->expr_type == EXPR_VARIABLE\n-\t  && f->sym->attr.flavor == FL_PROCEDURE)\n+      if (f->sym->attr.flavor == FL_PROCEDURE\n+\t  && gfc_expr_attr (a->expr).flavor != FL_PROCEDURE)\n \t{\n \t  if (where)\n \t    gfc_error (\"Expected a procedure for argument '%s' at %L\","}, {"sha": "57580b571b88a3c3811e42189cfad98e1d9555c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -1,3 +1,10 @@\n+2012-10-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45521\n+\t* gfortran.dg/generic_25.f90: New.\n+\t* gfortran.dg/generic_26.f90: New.\n+\t* gfortran.dg/generic_27.f90: New.\n+\n 2012-10-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54760"}, {"sha": "39b7e23eb0f6009ed4a7def424f060136d9e6b0b", "filename": "gcc/testsuite/gfortran.dg/generic_25.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_25.f90?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+!\n+! PR 45521: [F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE\n+!\n+! Contributed by <wangmianzhi1@linuxmail.org>\n+\n+  interface test\n+    procedure testAlloc\n+    procedure testPtr\n+  end interface\n+\n+  integer, allocatable :: a1\n+  integer, pointer :: a2\n+\n+  if (.not.test(a1)) call abort()\n+  if (test(a2)) call abort()\n+  \n+contains\n+\n+  logical function testAlloc(obj)\n+    integer, allocatable :: obj\n+    testAlloc = .true.\n+  end function\n+  \n+  logical function testPtr(obj)\n+    integer, pointer :: obj\n+    testPtr = .false.\n+  end function\n+  \n+end"}, {"sha": "a1deef19f99af90a03eb0f8a912b17294fe19bea", "filename": "gcc/testsuite/gfortran.dg/generic_26.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR 45521: [F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE\n+!\n+! Contributed by <wangmianzhi1@linuxmail.org>\n+\n+module a\n+\n+  interface test\n+    procedure testAlloc\n+    procedure testPtr   ! { dg-error \"Ambiguous interfaces\" }\n+  end interface\n+\n+contains\n+\n+  logical function testAlloc(obj)\n+    integer, allocatable :: obj\n+    testAlloc = .true.\n+  end function\n+  \n+  logical function testPtr(obj)\n+    integer, pointer :: obj\n+    testPtr = .false.\n+  end function\n+  \n+end\n+\n+! { dg-final { cleanup-modules \"a\" } }"}, {"sha": "f4f4f5ab9c30436c65d3d678a9823da81c2faa60", "filename": "gcc/testsuite/gfortran.dg/generic_27.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9355cc32ee9d5967f9c359d42c1ae505e5266b6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_27.f90?ref=e9355cc32ee9d5967f9c359d42c1ae505e5266b6", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+!\n+! PR 45521: [F08] GENERIC resolution with ALLOCATABLE/POINTER and PROCEDURE\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+module m\n+  implicit none\n+  interface testIF\n+    module procedure test1\n+    module procedure test2\n+  end interface\n+contains\n+  real function test1 (obj)\n+    real :: obj\n+    test1 = obj\n+  end function\n+  real function test2 (pr)\n+    procedure(real) :: pr\n+    test2 = pr(0.)\n+  end function\n+end module\n+\n+program test\n+  use m\n+  implicit none\n+  intrinsic :: cos\n+\n+  if (testIF(2.0)/=2.0) call abort()\n+  if (testIF(cos)/=1.0) call abort()\n+\n+end program\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}