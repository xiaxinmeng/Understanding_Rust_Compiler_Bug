{"sha": "c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3YjE0NDJmZDJkM2Y5ZWU0N2JlZjY5ZGNmMTU0YmQyMTZmMGY4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T14:27:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T22:04:22Z"}, "message": "c++: Check constant array bounds later.\n\nWe give a better diagnostic for non-constant array bounds in\ncompute_array_index_type_loc, we don't need to diagnose it in the parser.\nBut to avoid a regression on parse/varmod1.C we need to actually check\nnon-dependent expressions in a template.\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (compute_array_index_type_loc): Diagnose expressions\n\tin a template that can't be constant.\n\t* parser.c (cp_parser_direct_declarator): Don't check\n\tnon-constant array bounds here.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/depend-iterator-2.c: Adjust.\n\t* g++.dg/ext/vla1.C: Adjust.\n\t* g++.dg/template/array9.C: Adjust.\n\t* g++.dg/template/error41.C: Adjust.", "tree": {"sha": "5a70c79c26f85756d6066699aeef0e61f0bc89a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a70c79c26f85756d6066699aeef0e61f0bc89a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb019d346b903c16b9fd349937de444b6a8b6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb019d346b903c16b9fd349937de444b6a8b6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb019d346b903c16b9fd349937de444b6a8b6c0"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "2e1390837e86c94dafaa066c466d5aa8a23fc2b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -10328,13 +10328,14 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n      dependent type or whose size is specified by a constant expression\n      that is value-dependent.  */\n   /* We can only call value_dependent_expression_p on integral constant\n-     expressions; treat non-constant expressions as dependent, too.  */\n+     expressions.  */\n   if (processing_template_decl\n-      && (!TREE_CONSTANT (size) || value_dependent_expression_p (size)))\n+      && potential_constant_expression (size)\n+      && value_dependent_expression_p (size))\n     {\n-      /* We cannot do any checking for a SIZE that isn't known to be\n-\t constant. Just build the index type and mark that it requires\n+      /* Just build the index type and mark that it requires\n \t structural equality checks.  */\n+    in_template:\n       itype = build_index_type (build_min (MINUS_EXPR, sizetype,\n \t\t\t\t\t   size, size_one_node));\n       TYPE_DEPENDENT_P (itype) = 1;\n@@ -10447,8 +10448,7 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n     }\n \n   if (processing_template_decl && !TREE_CONSTANT (size))\n-    /* A variable sized array.  */\n-    itype = build_min (MINUS_EXPR, sizetype, size, integer_one_node);\n+    goto in_template;\n   else\n     {\n       if (!TREE_CONSTANT (size))"}, {"sha": "54ca875ce54c3673b3b02bfcb65c2afdfd944a54", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -21366,6 +21366,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t/* OK */;\n \t      else if (error_operand_p (bounds))\n \t\t/* Already gave an error.  */;\n+\t      else if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n+\t\t/* Let compute_array_index_type diagnose this.  */;\n \t      else if (!parser->in_function_body\n \t\t       || current_binding_level->kind == sk_function_parms)\n \t\t{"}, {"sha": "fff32a4761fb4ffcda48afbed969948e99d7e098", "filename": "gcc/testsuite/c-c++-common/gomp/depend-iterator-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepend-iterator-2.c?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -41,7 +41,7 @@ f1 (void)\n   ;\n   #pragma omp task depend (iterator (int i = 0:4, \\\n \t\t\t\t     struct U { int (*p)[i + 2]; } *p = 0:2) , in : a)\t/* { dg-error \"type of iterator 'p' refers to outer iterator 'i'\" \"\" { target c } } */\n-  ;\t\t\t\t\t\t\t\t\t/* { dg-error \"types may not be defined in iterator type|not an integer constant\" \"\" { target c++ } .-1 } */\n+  ;\t\t\t\t\t\t\t\t\t/* { dg-error \"types may not be defined in iterator type|not an integral constant\" \"\" { target c++ } .-1 } */\n   #pragma omp task depend (iterator (i = 0:4, j = i:16) , in : a)\t/* { dg-error \"begin expression refers to outer iterator 'i'\" } */\n   ;\n   #pragma omp task depend (iterator (i = 0:4, j = 2:i:1) , in : a)\t/* { dg-error \"end expression refers to outer iterator 'i'\" } */"}, {"sha": "cae3f82135a53556ef331fcb1a5b39927fdb8860", "filename": "gcc/testsuite/g++.dg/ext/vla1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -19,8 +19,7 @@ class B { B (int); };\n B::B (int i)\n {\n   struct S {\n-    int ar[1][i];  // { dg-error \"15:size of array .ar. is not an integral\" \"\" { target c++11 } }\n-// { dg-error \"array bound\" \"\" { target c++98_only } .-1 }\n+    int ar[1][i];  // { dg-error \"15:size of array .ar. is not an integral\" }\n   } s;\n \n   s.ar[0][0] = 0;  // { dg-prune-output \"no member\" }"}, {"sha": "ce9fb649d3a22d35ae6cc823ee3bc2a6f8643f0f", "filename": "gcc/testsuite/g++.dg/template/array9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -7,8 +7,8 @@ struct Tree {\n   Tree* R[subtrees]; // { dg-error \"\" }\n   ~Tree()\n   {\n-    delete [] L[0]; // { dg-error \"\" }\n-    delete [] R[0]; // { dg-error \"\" }\n+    delete [] L[0];\n+    delete [] R[0];\n   }\n };\n "}, {"sha": "21e8ffbc20ecd715d41554b9c7e9d6e4f2d0a0c1", "filename": "gcc/testsuite/g++.dg/template/error41.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b1442fd2d3f9ee47bef69dcf154bd216f0f86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C?ref=c37b1442fd2d3f9ee47bef69dcf154bd216f0f86", "patch": "@@ -8,5 +8,5 @@ struct A\n \n template <int> struct B\n {\n-  int x[A::i];\t// { dg-error \"array bound is not an integer constant\" }\n+  int x[A::i];\t// { dg-error \"not an integral constant-expression\" }\n };"}]}