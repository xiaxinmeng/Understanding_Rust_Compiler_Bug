{"sha": "af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzMGI4M2I1MDk1M2ZiYmU2NzFkOTNkNDRlYTZhYzJmN2E1MGNlOQ==", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-08-06T12:13:59Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-08-06T12:13:59Z"}, "message": "bpf: more flexible support for kernel helpers\n\nThis patch changes the existing support for BPF kernel helpers to be\nmore flexible, in two main ways.\n\nFirst, there is no longer a hardcoded list of kernel helpers defined\nin the compiler internals.  This is replaced by a new target-specific\nattribute `kernel_helper' that the user can use to define her own\nhelpers, annotating function prototypes.\n\nSecond, following feedback from the kernel hackers, the pre-defined\nhelpers in the distributed bpf-helpers.h are no longer available\nconditionally depending on the kernel version used in -mkernel.  The\ncommand-line option stays for now, as it may be useful for other\nthings.\n\nTarget tests and documentation updated.\n\n2020-08-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\ngcc/\n\t* config/bpf/bpf-helpers.h (KERNEL_HELPER): Define.\n\t(KERNEL_VERSION): Remove.\n\t* config/bpf/bpf-helpers.def: Delete.\n\t* config/bpf/bpf.c (bpf_handle_fndecl_attribute): New function.\n\t(bpf_attribute_table): Define.\n\t(bpf_helper_names): Delete.\n\t(bpf_helper_code): Likewise.\n\t(enum bpf_builtins): Adjust to new helpers mechanism.\n\t(bpf_output_call): Likewise.\n\t(bpf_init_builtins): Likewise.\n\t(bpf_init_builtins): Likewise.\n\t* doc/extend.texi (BPF Function Attributes): New section.\n\t(BPF Kernel Helpers): Delete section.\n\ngcc/testsuite/\n\t* gcc.target/bpf/helper-bind.c: Adjust to new kernel helpers\n\tmechanism.\n\t* gcc.target/bpf/helper-bpf-redirect.c: Likewise.\n\t* gcc.target/bpf/helper-clone-redirect.c: Likewise.\n\t* gcc.target/bpf/helper-csum-diff.c: Likewise.\n\t* gcc.target/bpf/helper-csum-update.c: Likewise.\n\t* gcc.target/bpf/helper-current-task-under-cgroup.c: Likewise.\n\t* gcc.target/bpf/helper-fib-lookup.c: Likewise.\n\t* gcc.target/bpf/helper-get-cgroup-classid.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-cgroup-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-comm.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-pid-tgid.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-task.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-uid-gid.c: Likewise.\n\t* gcc.target/bpf/helper-get-hash-recalc.c: Likewise.\n\t* gcc.target/bpf/helper-get-listener-sock.c: Likewise.\n\t* gcc.target/bpf/helper-get-local-storage.c: Likewise.\n\t* gcc.target/bpf/helper-get-numa-node-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-prandom-u32.c: Likewise.\n\t* gcc.target/bpf/helper-get-route-realm.c: Likewise.\n\t* gcc.target/bpf/helper-get-smp-processor-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-socket-cookie.c: Likewise.\n\t* gcc.target/bpf/helper-get-socket-uid.c: Likewise.\n\t* gcc.target/bpf/helper-get-stack.c: Likewise.\n\t* gcc.target/bpf/helper-get-stackid.c: Likewise.\n\t* gcc.target/bpf/helper-getsockopt.c: Likewise.\n\t* gcc.target/bpf/helper-ktime-get-ns.c: Likewise.\n\t* gcc.target/bpf/helper-l3-csum-replace.c: Likewise.\n\t* gcc.target/bpf/helper-l4-csum-replace.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-push-encap.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-action.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-adjust-srh.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-store-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-map-delete-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-lookup-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-peek-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-pop-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-push-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-update-elem.c: Likewise.\n\t* gcc.target/bpf/helper-msg-apply-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-msg-cork-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-msg-pop-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-pull-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-push-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-redirect-hash.c: Likewise.\n\t* gcc.target/bpf/helper-msg-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-override-return.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-output.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-read-value.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-read.c: Likewise.\n\t* gcc.target/bpf/helper-perf-prog-read-value.c: Likewise.\n\t* gcc.target/bpf/helper-probe-read-str.c: Likewise.\n\t* gcc.target/bpf/helper-probe-read.c: Likewise.\n\t* gcc.target/bpf/helper-probe-write-user.c: Likewise.\n\t* gcc.target/bpf/helper-rc-keydown.c: Likewise.\n\t* gcc.target/bpf/helper-rc-pointer-rel.c: Likewise.\n\t* gcc.target/bpf/helper-rc-repeat.c: Likewise.\n\t* gcc.target/bpf/helper-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-set-hash-invalid.c: Likewise.\n\t* gcc.target/bpf/helper-set-hash.c: Likewise.\n\t* gcc.target/bpf/helper-setsockopt.c: Likewise.\n\t* gcc.target/bpf/helper-sk-fullsock.c: Likewise.\n\t* gcc.target/bpf/helper-sk-lookup-tcp.c: Likewise.\n\t* gcc.target/bpf/helper-sk-lookup-upd.c: Likewise.\n\t* gcc.target/bpf/helper-sk-redirect-hash.c: Likewise.\n\t* gcc.target/bpf/helper-sk-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-sk-release.c: Likewise.\n\t* gcc.target/bpf/helper-sk-select-reuseport.c: Likewise.\n\t* gcc.target/bpf/helper-sk-storage-delete.c: Likewise.\n\t* gcc.target/bpf/helper-sk-storage-get.c: Likewise.\n\t* gcc.target/bpf/helper-skb-adjust-room.c: Likewise.\n\t* gcc.target/bpf/helper-skb-cgroup-id.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-head.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-proto.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-tail.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-type.c: Likewise.\n\t* gcc.target/bpf/helper-skb-ecn-set-ce.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-tunnel-key.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-tunnel-opt.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-xfrm-state.c: Likewise.\n\t* gcc.target/bpf/helper-skb-load-bytes-relative.c: Likewise.\n\t* gcc.target/bpf/helper-skb-load-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-skb-pull-data.c: Likewise.\n\t* gcc.target/bpf/helper-skb-set-tunnel-key.c: Likewise.\n\t* gcc.target/bpf/helper-skb-set-tunnel-opt.c: Likewise.\n\t* gcc.target/bpf/helper-skb-store-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-skb-under-cgroup.c: Likewise.\n\t* gcc.target/bpf/helper-skb-vlan-pop.c: Likewise.\n\t* gcc.target/bpf/helper-skb-vlan-push.c: Likewise.\n\t* gcc.target/bpf/helper-skc-lookup-tcp.c: Likewise.\n\t* gcc.target/bpf/helper-sock-hash-update.c: Likewise.\n\t* gcc.target/bpf/helper-sock-map-update.c: Likewise.\n\t* gcc.target/bpf/helper-sock-ops-cb-flags-set.c: Likewise.\n\t* gcc.target/bpf/helper-spin-lock.c: Likewise.\n\t* gcc.target/bpf/helper-spin-unlock.c: Likewise.\n\t* gcc.target/bpf/helper-strtol.c: Likewise.\n\t* gcc.target/bpf/helper-strtoul.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-current-value.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-name.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-new-value.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-set-new-value.c: Likewise.\n\t* gcc.target/bpf/helper-tail-call.c: Likewise.\n\t* gcc.target/bpf/helper-tcp-check-syncookie.c: Likewise.\n\t* gcc.target/bpf/helper-tcp-sock.c: Likewise.\n\t* gcc.target/bpf/helper-trace-printk.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-head.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-meta.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-tail.c: Likewise.\n\t* gcc.target/bpf/skb-ancestor-cgroup-id.c: Likewise.", "tree": {"sha": "49c8cc99ceff9546981f0e421b32d7461255edec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49c8cc99ceff9546981f0e421b32d7461255edec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b84cd794f984038984c10b03c3b0ab582f49cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b84cd794f984038984c10b03c3b0ab582f49cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b84cd794f984038984c10b03c3b0ab582f49cc"}], "stats": {"total": 1537, "additions": 750, "deletions": 787}, "files": [{"sha": "249ad248a48347238d17e26896335684edf7d332", "filename": "gcc/config/bpf/bpf-helpers.def", "status": "removed", "additions": 0, "deletions": 194, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b84cd794f984038984c10b03c3b0ab582f49cc/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b84cd794f984038984c10b03c3b0ab582f49cc/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def?ref=89b84cd794f984038984c10b03c3b0ab582f49cc", "patch": "@@ -1,194 +0,0 @@\n-/* Kernel helpers database.\n-   Copyright (C) 2019-2020 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* This file contains the definition of the kernel helpers that are\n-   available to eBPF programs.\n-\n-   The primary source for information on kernel helpers is the\n-   linux/include/uapi/linux/bpf.h file in the Linux source tree.\n-   Please keep this database in sync.\n-\n-   The first column is the first kernel version featuring the helper\n-   function.  This should be an enumerate from bpf_kernel_version,\n-   defined in bpf-opts.h.  Note that the backend assumes that helpers\n-   never get deprecated in the kernel.  If that eventually happens,\n-   then we will need to use a bitmask here instead of an enumerate.\n-\n-   The second column is the constant-name for the helper.\n-   The third column is the program-name of the helper.\n-\n-   The fourth column is a list of names describing the types of the\n-   values returned and accepted by the helper, in one of these forms:\n-\n-     TYPES (type1, type2, ..., 0)\n-     VTYPES (type1, type2, ..., 0)\n-\n-   VTYPES should be used should the helper accept a variable number of\n-   arguments, TYPES otherwise.  The valid type names are:\n-\n-     `vt' for void.\n-     `it' for signed int.\n-     `ut' for unsigned int.\n-     `pt' for void*.\n-     `cpt' for const void*.\n-     `st' for short int.\n-     `ust' for unsigned short int.\n-     `cst' for const char *.\n-     `ullt' for unsigned long long.\n-     `llt' for long long.\n-     `u32t' for uint32.\n-     `u64t' for uint64.\n-  \n-   In types descriptions, the firt entry corresponds to the value\n-   returned by the helper.  Subsequent names correspond to the helper\n-   arguments.  Finally, a 0 should close the list.\n-\n-   VERY IMPORTANT: the helper entries should be listed in the same\n-   order than in the definition of __BPF_FUNC_MAPPER in\n-   linux/include/uapi/linux/bpf.h!  */\n-\n-DEF_HELPER (LINUX_V4_0, MAP_LOOKUP_ELEM, map_lookup_elem, TYPES (pt, pt, pt, 0))\n-DEF_HELPER (LINUX_V4_0, MAP_UPDATE_ELEM, map_update_elem, TYPES (it, pt, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_0, MAP_DELETE_ELEM, map_delete_elem, TYPES (it, pt, pt, 0))\n-DEF_HELPER (LINUX_V4_1, PROBE_READ, probe_read, TYPES (it, pt, ut, cpt, 0))\n-DEF_HELPER (LINUX_V4_1, KTIME_GET_NS, ktime_get_ns, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_1, TRACE_PRINTK, trace_printk, VTYPES (it, cst, it, 0))\n-DEF_HELPER (LINUX_V4_1, GET_PRANDOM_U32, get_prandom_u32, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_1, GET_SMP_PROCESSOR_ID, get_smp_processor_id, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_1, SKB_STORE_BYTES, skb_store_bytes, TYPES (it, pt, it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_1, L3_CSUM_REPLACE, l3_csum_replace, TYPES (it, pt, it, it ,it ,it, 0))\n-DEF_HELPER (LINUX_V4_1, L4_CSUM_REPLACE, l4_csum_replace, TYPES (it, pt, it, it, it, it, 0))\n-DEF_HELPER (LINUX_V4_2, TAIL_CALL, tail_call, TYPES (vt, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_2, CLONE_REDIRECT, clone_redirect, TYPES (it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_2, GET_CURRENT_PID_TGID, get_current_pid_tgid, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_2, GET_CURRENT_UID_GID, get_current_uid_gid, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_2, GET_CURRENT_COMM, get_current_comm, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_3, GET_CGROUP_CLASSID, get_cgroup_classid, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V4_3, SKB_VLAN_PUSH, skb_vlan_push, TYPES (it, pt, st, ust, 0))\n-DEF_HELPER (LINUX_V4_3, SKB_VLAN_POP, skb_vlan_pop, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V4_3, SKB_GET_TUNNEL_KEY, skb_get_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_3, SKB_SET_TUNNEL_KEY, skb_set_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_3, PERF_EVENT_READ, perf_event_read, TYPES (ullt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_4, REDIRECT, redirect, TYPES (it, it, it, 0))\n-DEF_HELPER (LINUX_V4_4, GET_ROUTE_REALM, get_route_realm, TYPES (ut, pt, 0))\n-DEF_HELPER (LINUX_V4_4, PERF_EVENT_OUTPUT, perf_event_output, \\\n-\t    TYPES (it, pt, pt, ullt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_5, SKB_LOAD_BYTES, skb_load_bytes, TYPES (it, pt, it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_6, GET_STACKID, get_stackid, TYPES (it, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_6, CSUM_DIFF, csum_diff, TYPES (it, pt, it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_6, SKB_GET_TUNNEL_OPT, skb_get_tunnel_opt, TYPES (it, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_6, SKB_SET_TUNNEL_OPT, skb_set_tunnel_opt, TYPES (it, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_8, SKB_CHANGE_PROTO, skb_change_proto, TYPES (it, pt, st, u64t, 0))\n-DEF_HELPER (LINUX_V4_8, SKB_CHANGE_TYPE, skb_change_type, TYPES (it, pt, u32t, 0))\n-DEF_HELPER (LINUX_V4_8, SKB_UNDER_CGROUP, skb_under_cgroup, TYPES (it, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_8, GET_HASH_RECALC, get_hash_recalc, TYPES (ut, pt, 0))\n-DEF_HELPER (LINUX_V4_8, GET_CURRENT_TASK, get_current_task, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_8, PROBE_WRITE_USER, probe_write_user, TYPES (it, pt, cpt, ut, 0))\n-DEF_HELPER (LINUX_V4_9, CURRENT_TASK_UNDER_CGROUP, current_task_under_cgroup, \\\n-\t    TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_9, SKB_CHANGE_TAIL, skb_change_tail, TYPES (it, pt, ut, u64t, 0))\n-DEF_HELPER (LINUX_V4_9, SKB_PULL_DATA, skb_pull_data, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_9, CSUM_UPDATE, csum_update, TYPES (llt, pt, u32t, 0))\n-DEF_HELPER (LINUX_V4_9, SET_HASH_INVALID, set_hash_invalid, TYPES (vt, pt, 0))\n-DEF_HELPER (LINUX_V4_10, GET_NUMA_NODE_ID, get_numa_node_id, TYPES (it, 0))\n-DEF_HELPER (LINUX_V4_10, SKB_CHANGE_HEAD, skb_change_head, TYPES (it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_10, XDP_ADJUST_HEAD, xdp_adjust_head, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_11, PROBE_READ_STR, probe_read_str, TYPES (it, pt, u32t, cpt, 0))\n-DEF_HELPER (LINUX_V4_12, GET_SOCKET_COOKIE, get_socket_cookie, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V4_12, GET_SOCKET_UID, get_socket_uid, TYPES (ut, pt, 0))\n-DEF_HELPER (LINUX_V4_13, SET_HASH, set_hash, TYPES (ut, pt, u32t, 0))\n-DEF_HELPER (LINUX_V4_13, SETSOCKOPT, setsockopt, TYPES (it, pt, it, it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_13, SKB_ADJUST_ROOM, skb_adjust_room, TYPES (it, pt, st, u32t, ullt, 0))\n-DEF_HELPER (LINUX_V4_14, REDIRECT_MAP, redirect_map, TYPES (it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_14, SK_REDIRECT_MAP, sk_redirect_map, TYPES (it, pt, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_14, SOCK_MAP_UPDATE, sock_map_update, TYPES (it, pt, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_15, XDP_ADJUST_META, xdp_adjust_meta, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_15, PERF_EVENT_READ_VALUE, perf_event_read_value,\n-\t    TYPES (it, pt, ullt, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_15, PERF_PROG_READ_VALUE, perf_prog_read_value,\n-\t    TYPES (it, pt, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_15, GETSOCKOPT, getsockopt, TYPES (it, pt, it, it, pt, it, 0))\n-\n-DEF_HELPER (LINUX_V4_16, OVERRIDE_RETURN, override_return, TYPES (it, pt, ult, 0))\n-DEF_HELPER (LINUX_V4_16, SOCK_OPS_CB_FLAGS_SET, sock_ops_cb_flags_set, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_17, MSG_REDIRECT_MAP, msg_redirect_map, TYPES (it, pt, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_17, MSG_APPLY_BYTES, msg_apply_bytes, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_17, MSG_CORK_BYTES, msg_cork_bytes, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_17, MSG_PULL_DATA, msg_pull_data, TYPES (it, pt, it, it, it, 0))\n-DEF_HELPER (LINUX_V4_17, BIND, bind, TYPES (it, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_18, XDP_ADJUST_TAIL, xdp_adjust_tail, TYPES (it, pt, it, 0))\n-DEF_HELPER (LINUX_V4_18, SKB_GET_XFRM_STATE,\n-\t    skb_get_xfrm_state, TYPES (it, pt, it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_18, GET_STACK, get_stack, TYPES (it, pt, pt, it, it, 0))\n-DEF_HELPER (LINUX_V4_18, SKB_LOAD_BYTES_RELATIVE, skb_load_bytes_relative,\n-\t    TYPES (it, pt, it, pt, it, ut, 0))\n-DEF_HELPER (LINUX_V4_18, FIB_LOOKUP, fib_lookup, TYPES (it, pt, pt, it, ut, 0))\n-DEF_HELPER (LINUX_V4_18, SOCK_HASH_UPDATE, sock_hash_update, TYPES (it, pt, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_18, MSG_REDIRECT_HASH, msg_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_18, SK_REDIRECT_HASH, sk_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_18, LWT_PUSH_ENCAP, lwt_push_encap, TYPES (it, pt, ut, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_18, LWT_SEG6_STORE_BYTES, lwt_seg6_store_bytes,\n-\t    TYPES (it, pt, ut, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_18, LWT_SEG6_ADJUST_SRH, lwt_seg6_adjust_srh, TYPES (it, pt, ut, ut, 0))\n-DEF_HELPER (LINUX_V4_18, LWT_SEG6_ACTION, lwt_seg6_action, TYPES (it, pt, ut, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_18, RC_REPEAT, rc_repeat, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V4_18, RC_KEYDOWN, rc_keydown, TYPES (it, pt, ut, ullt, ut, 0))\n-DEF_HELPER (LINUX_V4_18, SKB_CGROUP_ID, skb_cgroup_id, TYPES (ullt, pt, 0))\n-DEF_HELPER (LINUX_V4_18, GET_CURRENT_CGROUP_ID, get_current_cgroup_id, TYPES (ullt, 0))\n-DEF_HELPER (LINUX_V4_19, GET_LOCAL_STORAGE, get_local_storage, TYPES (pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_19, SK_SELECT_REUSEPORT, sk_select_reuseport,\n-\t    TYPES (it, pt, pt, pt, ut, 0))\n-DEF_HELPER (LINUX_V4_19, SKB_ANCESTOR_CGROUP_ID, skb_ancestor_cgroup_id,\n-\t    TYPES (ullt, pt, it, 0))\n-DEF_HELPER (LINUX_V4_20, SK_LOOKUP_TCP, sk_lookup_tcp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n-DEF_HELPER (LINUX_V4_20, SK_LOOKUP_UDP, sk_lookup_udp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n-DEF_HELPER (LINUX_V4_20, SK_RELEASE, sk_release, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V4_20, MAP_PUSH_ELEM, map_push_elem, TYPES (it, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V4_20, MAP_POP_ELEM, map_pop_elem, TYPES (it, pt, pt, 0))\n-DEF_HELPER (LINUX_V4_20, MAP_PEEK_ELEM, map_peek_elem, TYPES (it, pt, pt, 0))\n-DEF_HELPER (LINUX_V4_20, MSG_PUSH_DATA, msg_push_data, TYPES (it, pt, it, it, it, 0))\n-DEF_HELPER (LINUX_V5_0, MSG_POP_DATA, msg_pop_data, TYPES (it, pt, it, it, it, 0))\n-DEF_HELPER (LINUX_V5_0, RC_POINTER_REL, rc_pointer_rel, TYPES (it, pt, it, it, 0))\n-DEF_HELPER (LINUX_V5_1, SPIN_LOCK, spin_lock, TYPES (vt, pt, 0))\n-DEF_HELPER (LINUX_V5_1, SPIN_UNLOCK, spin_unlock, TYPES (vt, pt, 0))\n-DEF_HELPER (LINUX_V5_1, SK_FULLSOCK, sk_fullsock, TYPES (pt, pt, 0))\n-DEF_HELPER (LINUX_V5_1, TCP_SOCK, tcp_sock, TYPES (pt, pt, 0))\n-DEF_HELPER (LINUX_V5_1, SKB_ECN_SET_CE, skb_ecn_set_ce, TYPES (it, pt, 0))\n-DEF_HELPER (LINUX_V5_1, GET_LISTENER_SOCK, get_listener_sock, TYPES (pt, pt, 0))\n-DEF_HELPER (LINUX_V5_2, SKC_LOOKUP_TCP, skc_lookup_tcp,\n-\t    TYPES (pt, pt, pt, u32t, u64t, u64t, 0))\n-DEF_HELPER (LINUX_V5_2, TCP_CHECK_SYNCOOKIE, tcp_check_syncookie,\n-\t    TYPES (it, pt, pt, u32t, pt, u32t, 0))\n-DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NAME, sysctl_get_name, TYPES (it, pt, pt, ullt, u64t, 0))\n-DEF_HELPER (LINUX_V5_2, SYSCTL_GET_CURRENT_VALUE, sysctl_get_current_value,\n-\t    TYPES (it, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NEW_VALUE, sysctl_get_new_value,\n-\t    TYPES (it, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V5_2, SYSCTL_SET_NEW_VALUE, sysctl_set_new_value,\n-\t    TYPES (it, pt, pt, ullt, 0))\n-DEF_HELPER (LINUX_V5_2, STRTOL, strtol, TYPES (it, cst, ullt, u64t, pt, 0))\n-DEF_HELPER (LINUX_V5_2, STRTOUL, strtoul, TYPES (it, pt, ullt, u64t, pt, 0))\n-DEF_HELPER (LINUX_V5_2, SK_STORAGE_GET, sk_storage_get, TYPES (pt, pt, pt, pt, u64t, 0))\n-DEF_HELPER (LINUX_V5_2, SK_STORAGE_DELETE, sk_storage_delete, TYPES (it, pt, pt, 0))\n-\n-/*\n-Local variables:\n-mode:c\n-End:\n-*/"}, {"sha": "a615321c62266260b8d8455c2c2131c0c62c1703", "filename": "gcc/config/bpf/bpf-helpers.h", "status": "modified", "additions": 315, "deletions": 215, "changes": 530, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -30,6 +30,7 @@\n #define __BPF_HELPERS_H\n \n #define SEC(NAME) __attribute__((section(NAME), used))\n+#define KERNEL_HELPER(NUM) __attribute__((kernel_helper(NUM)))\n \n /* Flags used in some kernel helpers.  */\n \n@@ -41,277 +42,376 @@\n #define BPF_F_NO_COMMON_LRU (1U << 1)\n #define BPF_F_NUMA_NODE (1U << 2)\n \n-/* Functions to call kernel helpers.  We provide the \"standard\" bpf_*\n-   names as synonyms of the corresponding GCC builtins.  In some\n-   cases, where non-void pointers are passed to the helper, inline\n-   functions are used to achieve proper type checking.  */\n+/* Prototypes of functions to call kernel helpers.\n+   Please keep these protoypes sorted by helper number.  */\n \n-#ifndef KERNEL_VERSION\n-# define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))\n-#endif\n+void *bpf_map_lookup_elem (void *map, const void *key)\n+  KERNEL_HELPER (1);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,0,0)\n+int bpf_map_update_elem (void *map, const void *key, const void *value,\n+\t\t\t unsigned long long flags)\n+  KERNEL_HELPER (2);\n \n-#define bpf_map_lookup_elem\t__builtin_bpf_helper_map_lookup_elem\n-#define bpf_map_update_elem\t__builtin_bpf_helper_map_update_elem\n-#define bpf_map_delete_elem\t__builtin_bpf_helper_map_delete_elem\n+int bpf_map_delete_elem (void *map, const void *key)\n+  KERNEL_HELPER (3);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,1,0)\n+int bpf_probe_read (void *dst, int size, const void *unsafe_ptr)\n+  KERNEL_HELPER (4);\n \n-#define bpf_probe_read\t\t__builtin_bpf_helper_probe_read\n-#define bpf_ktime_get_ns\t__builtin_bpf_helper_ktime_get_ns\n-#define bpf_trace_printk\t__builtin_bpf_helper_trace_printk\n-#define bpf_get_prandom_u32\t__builtin_bpf_helper_get_prandom_u32\n-#define bpf_get_smp_processor_id __builtin_bpf_helper_get_smp_processor_id\n-#define bpf_skb_store_bytes\t__builtin_bpf_helper_skb_store_bytes\n-#define bpf_l3_csum_replace\t__builtin_bpf_helper_l3_csum_replace\n-#define bpf_l4_csum_replace\t__builtin_bpf_helper_l4_csum_replace\n+unsigned long long bpf_ktime_get_ns (void)\n+  KERNEL_HELPER (5);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,2,0)\n+int bpf_trace_printk (const char *fmt, int fmt_size, ...)\n+  KERNEL_HELPER (6);\n \n-#define bpf_tail_call\t\t__builtin_bpf_helper_tail_call\n-#define bpf_clone_redirect\t__builtin_bpf_helper_clone_redirect\n-#define bpf_get_current_pid_tgid __builtin_bpf_helper_get_current_pid_tgid\n-#define bpf_get_current_uid_gid  __builtin_bpf_helper_get_current_uid_gid\n-#define bpf_get_current_comm\t__builtin_bpf_helper_get_current_comm\n+unsigned long long bpf_get_prandom_u32 (void)\n+  KERNEL_HELPER (7);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,3,0)\n+unsigned long long bpf_get_smp_processor_id (void)\n+  KERNEL_HELPER (8);\n \n-#define bpf_get_cgroup_classid\t__builtin_bpf_helper_get_cgroup_classid\n-#define bpf_skb_vlan_push\t__builtin_bpf_helper_skb_vlan_push\n-#define bpf_skb_vlan_pop\t__builtin_bpf_helper_skb_vlan_pop\n-#define bpf_skb_get_tunnel_key\t__builtin_bpf_helper_skb_get_tunnel_key\n-#define bpf_skb_set_tunnel_key\t__builtin_bpf_helper_skb_set_tunnel_key\n-#define bpf_perf_event_read\t__builtin_bpf_helper_perf_event_read\n+int bpf_skb_store_bytes (void *ctx, int off, void *from, int len,\n+\t\t\t unsigned int start_header)\n+  KERNEL_HELPER (9);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,4,0)\n+int bpf_l3_csum_replace (void *ctx, int off, int from, int to, int flags)\n+  KERNEL_HELPER (10);\n \n-#define bpf_redirect\t\t__builtin_bpf_helper_redirect\n-#define bpf_get_route_realm\t__builtin_bpf_helper_get_route_realm\n-#define bpf_perf_event_output\t__builtin_bpf_helper_perf_event_output\n+int bpf_l4_csum_replace (void *ctx, int off, int from, int to, int flags)\n+  KERNEL_HELPER (11);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,5,0)\n+int bpf_tail_call (void *ctx, void *map, unsigned int index)\n+  KERNEL_HELPER (12);\n \n-#define bpf_skb_load_bytes\t__builtin_bpf_helper_skb_load_bytes\n+int bpf_clone_redirect (void *ctx, int ifindex, int flags)\n+  KERNEL_HELPER (13);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,6,0)\n+unsigned long long bpf_get_current_pid_tgid (void)\n+  KERNEL_HELPER (14);\n \n-#define bpf_get_stackid\t\t__builtin_bpf_helper_get_stackid\n-#define bpf_csum_diff\t\t__builtin_bpf_helper_csum_diff\n-#define bpf_skb_get_tunnel_opt\t__builtin_bpf_helper_skb_get_tunnel_opt\n-#define bpf_skb_set_tunnel_opt\t__builtin_bpf_helper_skb_set_tunnel_opt\n+unsigned long long bpf_get_current_uid_gid (void)\n+  KERNEL_HELPER (15);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,8,0)\n+int bpf_get_current_comm (void *buf, int buf_size)\n+  KERNEL_HELPER (16);\n \n-#define bpf_skb_change_proto\t__builtin_bpf_helper_skb_change_proto\n-#define bpf_skb_change_type\t__builtin_bpf_helper_skb_change_type\n-#define bpf_skb_under_cgroup\t__builtin_bpf_helper_skb_under_cgroup\n-#define bpf_get_hash_recalc\t__builtin_bpf_helper_get_hash_recalc\n-#define bpf_get_current_task\t__builtin_bpf_helper_get_current_task\n-#define bpf_probe_write_user\t__builtin_bpf_helper_probe_write_user\n+unsigned int bpf_get_cgroup_classid (void *ctx)\n+  KERNEL_HELPER (17);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,9,0)\n+int bpf_skb_vlan_push (void *ctx, short vlan_proto,\n+\t\t       unsigned short vlan_tci)\n+  KERNEL_HELPER (18);\n \n-#define bpf_current_task_under_cgroup __builtin_bpf_helper_current_task_under_cgroup\n-#define bpf_skb_change_tail\t__builtin_bpf_helper_skb_change_tail\n-#define bpf_skb_pull_data\t__builtin_bpf_helper_skb_pull_data\n-#define bpf_csum_update\t\t__builtin_bpf_helper_csum_update\n-#define bpf_set_hash_invalid\t__builtin_bpf_helper_set_hash_invalid\n+int bpf_skb_vlan_pop (void *ctx)\n+  KERNEL_HELPER (19);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,10,0)\n+int bpf_skb_get_tunnel_key (void *ctx, void *key, int size, int flags)\n+  KERNEL_HELPER (20);\n \n-#define bpf_get_numa_node_id\t__builtin_bpf_helper_get_numa_node_id\n-#define bpf_skb_change_head\t__builtin_bpf_helper_skb_change_head\n-#define bpf_xdp_adjust_head\t__builtin_bpf_helper_xdp_adjust_head\n+int bpf_skb_set_tunnel_key (void *ctx, void *key, int size, int flags)\n+  KERNEL_HELPER (21);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,11,0)\n+unsigned long long bpf_perf_event_read (void *map, unsigned long long flags)\n+  KERNEL_HELPER (22);\n \n-#define bpf_probe_read_str\t__builtin_bpf_helper_probe_read_str\n+int bpf_redirect (int ifindex, int flags)\n+  KERNEL_HELPER (23);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,12,0)\n+unsigned int bpf_get_route_realm (void *ctx)\n+  KERNEL_HELPER (24);\n \n-#define bpf_get_socket_cookie\t__builtin_bpf_helper_get_socket_cookie\n-#define bpf_get_socket_uid\t__builtin_bpf_helper_get_socket_uid\n+int bpf_perf_event_output (void *ctx, void *map, unsigned long long flags,\n+\t\t\t   void *data, int size)\n+  KERNEL_HELPER (25);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,13,0)\n+int bpf_skb_load_bytes (void *ctx, int off, void *to, int len)\n+  KERNEL_HELPER (26);\n \n-#define bpf_set_hash\t\t__builtin_bpf_helper_set_hash\n-#define bpf_setsockopt\t\t__builtin_bpf_helper_setsockopt\n-#define bpf_skb_adjust_room\t__builtin_bpf_helper_skb_adjust_room\n+int bpf_get_stackid (void *ctx, void *map, int flags)\n+  KERNEL_HELPER (27);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,14,0)\n+int bpf_csum_diff (void *from, int from_size, void *to, int to_size, int seed)\n+  KERNEL_HELPER (28);\n \n-#define bpf_redirect_map\t__builtin_bpf_helper_redirect_map\n-#define bpf_sk_redirect_map\t__builtin_bpf_helper_sk_redirect_map\n-#define bpf_sock_map_update\t__builtin_bpf_helper_sock_map_update\n+int bpf_skb_get_tunnel_opt (void *ctx, void *md, int size)\n+  KERNEL_HELPER (29);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,15,0)\n+int bpf_skb_set_tunnel_opt (void *ctx, void *md, int size)\n+  KERNEL_HELPER (30);\n \n-#define bpf_perf_event_read_value __builtin_bpf_helper_perf_event_read_value\n-#define bpf_perf_prog_read_value  __builtin_bpf_helper_perf_prog_read_value\n-#define bpf_getsockopt\t\t  __builtin_bpf_helper_getsockopt\n-#define bpf_xdp_adjust_meta\t__builtin_bpf_helper_xdp_adjust_meta\n+int bpf_skb_change_proto (void *ctx, short proto, unsigned long flags)\n+  KERNEL_HELPER (31);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,16,0)\n+int bpf_skb_change_type (void *ctx, unsigned int type)\n+  KERNEL_HELPER (32);\n \n-#define bpf_override_return\t__builtin_bpf_helper_override_return\n-#define bpf_sock_ops_cb_flags_set __builtin_bpf_helper_sock_ops_cb_flags_set\n+int bpf_skb_under_cgroup (void *ctx, void *map, int index)\n+  KERNEL_HELPER (33);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,17,0)\n+unsigned int bpf_get_hash_recalc (void *ctx)\n+  KERNEL_HELPER (34);\n \n-#define bpf_msg_redirect_map\t__builtin_bpf_helper_msg_redirect_map\n-#define bpf_msg_apply_bytes\t__builtin_bpf_helper_msg_apply_bytes\n-#define bpf_msg_cork_bytes\t__builtin_bpf_helper_msg_cork_bytes\n-#define bpf_pull_data\t\t__builtin_bpf_helper_pull_data\n-#define bpf_bind\t\t__builtin_bpf_helper_bpf_bind\n+unsigned long long bpf_get_current_task (void)\n+  KERNEL_HELPER (35);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,18,0)\n+int bpf_probe_write_user (void *dst, const void *src, int size)\n+  KERNEL_HELPER (36);\n \n-#define bpf_xdp_adjust_tail\t__builtin_bpf_helper_xdp_adjust_tail\n-#define bpf_skb_get_xfrm_state\t__builtin_bpf_helper_skb_get_xfrm_state\n-#define bpf_get_stack\t\t__builtin_bpf_helper_get_stack\n-#define bpf_skb_load_bytes_relative __builtin_bpf_helper_skb_load_bytes_relative\n-#define bpf_sock_hash_update\t__builtin_bpf_helper_sock_hash_update\n-#define bpf_msg_redirect_hash\t__builtin_bpf_helper_msg_redirect_hash\n-#define bpf_sk_redirect_hash\t__builtin_bpf_helper_sk_redirect_hash\n-#define bpf_lwt_push_encap\t\t__builtin_bpf_helper_lwt_push_encap\n-#define bpf_lwt_seg6_store_bytes\t__builtin_bpf_helper_lwt_seg6_store_bytes\n-#define bpf_lwt_seg6_adjust_srh\t\t__builtin_bpf_helper_lwt_seg6_adjust_srh\n-#define bpf_lwt_seg6_action\t\t__builtin_bpf_helper_lwt_seg6_action\n-#define bpf_rc_repeat\t\t\t__builtin_bpf_helper_rc_repeat\n-#define bpf_rc_keydown\t\t\t__builtin_bpf_helper_rc_keydown\n-#define bpf_skb_cgroup_id\t\t__builtin_bpf_helper_skb_cgroup_id\n-#define bpf_get_current_cgroup_id\t__builtin_bpf_helper_get_current_cgroup_id\n+int bpf_current_task_under_cgroup (void *map, int index)\n+  KERNEL_HELPER (37);\n \n-static inline int\n-bpf_fib_lookup (void *ctx, struct bpf_fib_lookup *param, int plen,\n-\t\tunsigned int flags)\n-{\n-  return __builtin_bpf_helper_fib_lookup (ctx, (void *) param, plen, flags);\n-}\n+int bpf_skb_change_tail (void *ctx, unsigned int len, unsigned long flags)\n+  KERNEL_HELPER (38);\n \n+int bpf_skb_pull_data (void *, int len)\n+  KERNEL_HELPER (39);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,19,0)\n+long long bpf_csum_update (void *ctx, unsigned int csum)\n+  KERNEL_HELPER (40);\n \n-#define bpf_get_local_storage\t__builtin_bpf_helper_get_local_storage\n-#define bpf_sk_select_reuseport\t__builtin_bpf_helper_sk_select_reuseport\n-#define bpf_skb_ancestor_cgroup_id\t__builtin_bpf_helper_skb_ancestor_cgroup_id\n+void bpf_set_hash_invalid (void *ctx)\n+  KERNEL_HELPER (41);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,20,0)\n+int bpf_get_numa_node_id (void)\n+  KERNEL_HELPER (42);\n \n-#define bpf_sk_release\t\t__builtin_bpf_helper_sk_release\n-#define bpf_map_push_elem\t__builtin_bpf_helper_map_push_elem\n-#define bpf_map_pop_elem\t__builtin_bpf_helper_map_pop_elem\n-#define bpf_map_peek_elem\t__builtin_bpf_helper_map_peek_elem\n-#define bpf_msg_push_data\t__builtin_bpf_helper_msg_push_data\n+int bpf_skb_change_head (void *, int len, int flags)\n+  KERNEL_HELPER (43);\n \n-static inline struct bpf_sock *\n-bpf_sk_lookup_tcp (void *ctx, struct bpf_sock_tuple *tuple,\n-\t\t   int size, unsigned long long netns_id,\n-\t\t   unsigned long long flags)\n-{\n-  return\n-    (struct bpf_sock *) __builtin_bpf_helper_sk_lookup_tcp (ctx,\n-\t\t\t\t\t\t\t    (void *) tuple,\n-\t\t\t\t\t\t\t    size,\n-\t\t\t\t\t\t\t    netns_id, flags);\n-}\n-\n-static inline struct bpf_sock *\n-bpf_sk_lookup_udp (void *ctx, struct bpf_sock_tuple *tuple,\n-\t\t   int size, unsigned long long netns_id,\n-\t\t   unsigned long long flags)\n-{\n-  return\n-    (struct bpf_sock *) __builtin_bpf_helper_sk_lookup_udp (ctx,\n-\t\t\t\t\t\t\t    (void *) tuple,\n-\t\t\t\t\t\t\t    size,\n-\t\t\t\t\t\t\t    netns_id, flags);\n-}\n+int bpf_xdp_adjust_head (void *ctx, int offset)\n+  KERNEL_HELPER (44);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,0,0)\n+int bpf_probe_read_str (void *ctx, unsigned int size, const void *unsafe_ptr)\n+  KERNEL_HELPER (45);\n \n-#define bpf_msg_pop_data\t__builtin_bpf_helper_pop_data\n-#define bpf_rc_pointer_rel\t__builtin_bpf_helper_rc_pointer_rel\n+int bpf_get_socket_cookie (void *ctx)\n+  KERNEL_HELPER (46);\n \n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,1,0)\n+unsigned int bpf_get_socket_uid (void *ctx)\n+  KERNEL_HELPER (47);\n \n-#define bpf_spin_lock\t\t__builtin_bpf_helper_spin_lock\n-#define bpf_spin_unlock\t\t__builtin_bpf_helper_spin_unlock\n-#define bpf_skb_ecn_set_ce\t__builtin_bpf_helper_skb_ecn_set_ce\n+unsigned int bpf_set_hash (void *ctx, unsigned int hash)\n+  KERNEL_HELPER (48);\n \n-static inline struct bpf_sock *\n-bpf_sk_fullsock (struct bpf_sock *sk)\n-{\n-  return\n-    (struct bpf_sock *) __builtin_bpf_helper_sk_fullsock ((void *) sk);\n-}\n+int bpf_setsockopt (void *ctx, int level, int optname, void *optval, int optlen)\n+  KERNEL_HELPER (49);\n \n-static inline struct bpf_sock *\n-bpf_tcp_sock (struct bpf_sock *sk)\n-{\n-  return\n-    (struct bpf_sock *) __builtin_bpf_helper_tcp_sock ((void *) sk);\n-}\n+int bpf_skb_adjust_room (void *ctx, int len_diff, unsigned int mode,\n+\t\t\t unsigned long long flags)\n+  KERNEL_HELPER (50);\n \n-static inline struct bpf_sock *\n-bpf_get_listener_sock (struct bpf_sock *sk)\n-{\n-  return\n-    (struct bpf_sock *) __builtin_bpf_helper_get_listener_sock ((void *) sk);\n-}\n-\n-#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,2,0)\n-\n-\n-#endif /* 5.2 */\n-#endif /* 5.1 */\n-#endif /* 5.0 */\n-#endif /* 4.20 */\n-#endif /* 4.19 */\n-#endif /* 4.18 */\n-#endif /* 4.17 */\n-#endif /* 4.16 */\n-#endif /* 4.15 */\n-#endif /* 4.14 */\n-#endif /* 4.13 */\n-#endif /* 4.12 */\n-#endif /* 4.11 */\n-#endif /* 4.10 */\n-#endif /* 4.9 */\n-#endif /* 4.8 */\n-#endif /* 4.6 */\n-#endif /* 4.5 */\n-#endif /* 4.4 */\n-#endif /* 4.3 */\n-#endif /* 4.2 */\n-#endif /* 4.1 */\n-#endif /* 4.0 */\n+int bpf_redirect_map (void *map, int key, int flags)\n+  KERNEL_HELPER (51);\n+\n+int bpf_sk_redirect_map (void *ctx, void *map, int key, int flags)\n+  KERNEL_HELPER (52);\n+\n+int bpf_sock_map_update (void *map, void *key, void *value,\n+\t\t\t unsigned long long flags)\n+  KERNEL_HELPER (53);\n+\n+int bpf_xdp_adjust_meta (void *ctx, int offset)\n+  KERNEL_HELPER (54);\n+\n+int bpf_perf_event_read_value (void *map, unsigned long long flags,\n+\t\t\t       void *buf, unsigned int buf_size)\n+  KERNEL_HELPER (55);\n+\n+int bpf_perf_prog_read_value (void *ctx, void *buf, unsigned int buf_size)\n+  KERNEL_HELPER (56);\n+\n+int bpf_getsockopt (void *ctx, int level, int optname, void *optval,\n+\t\t    int optlen)\n+  KERNEL_HELPER (57);\n+\n+int bpf_override_return (void *ctx, unsigned long rc)\n+  KERNEL_HELPER (58);\n+\n+int bpf_sock_ops_cb_flags_set (void *ctx, int flags)\n+  KERNEL_HELPER (59);\n+\n+int bpf_msg_redirect_map (void *ctx, void *map, int key, int flags)\n+  KERNEL_HELPER (60);\n+\n+int bpf_msg_apply_bytes (void *ctx, int len)\n+  KERNEL_HELPER (61);\n+\n+int bpf_msg_cork_bytes (void *ctx, int len)\n+  KERNEL_HELPER (62);\n+\n+int bpf_msg_pull_data (void *, int len)\n+  KERNEL_HELPER (63);\n+\n+int bpf_bind (void *ctx, void *addr, int addr_len)\n+  KERNEL_HELPER (64);\n+\n+int bpf_xdp_adjust_tail (struct xdp_md *xdp_md, int delta)\n+  KERNEL_HELPER (65);\n+\n+int bpf_skb_get_xfrm_state (void *ctx, int index, void *state,\n+\t\t\t    int size, int flags)\n+  KERNEL_HELPER (66);\n+\n+int bpf_get_stack (void *ctx, void *buf, int size, int flags)\n+  KERNEL_HELPER (67);\n+\n+int bpf_skb_load_bytes_relative (void *ctx, int off, void *to, int len,\n+\t\t\t\t unsigned int start_header)\n+  KERNEL_HELPER (68);\n+\n+int bpf_fib_lookup (void *ctx, struct bpf_fib_lookup *params,\n+\t\t    int plen, unsigned int flags)\n+  KERNEL_HELPER (69);\n+\n+int bpf_sock_hash_update (void *map, void *key, void *value,\n+\t\t\t  unsigned long long flags)\n+  KERNEL_HELPER (70);\n+\n+int bpf_msg_redirect_hash (void *ctx, void *map, void *key, int flags)\n+  KERNEL_HELPER (71);\n+\n+int bpf_sk_redirect_hash (void *ctx, void *map, void *key, int flags)\n+  KERNEL_HELPER (72);\n+\n+int bpf_lwt_push_encap (void *ctx, unsigned int type, void *hdr,\n+\t\t\tunsigned int len)\n+  KERNEL_HELPER (73);\n+\n+int bpf_lwt_seg6_store_bytes (void *ctx, unsigned int offset,\n+\t\t\t      void *from, unsigned int len)\n+  KERNEL_HELPER (74);\n+\n+int bpf_lwt_seg6_adjust_srh (void *ctx, unsigned int offset,\n+\t\t\t     unsigned int len)\n+  KERNEL_HELPER (75);\n+\n+int bpf_lwt_seg6_action (void *ctx, unsigned int action, void *param,\n+\t\t\t unsigned int param_len)\n+  KERNEL_HELPER (76);\n+\n+int bpf_rc_repeat (void *ctx)\n+  KERNEL_HELPER (77);\n+\n+int bpf_rc_keydown (void *ctx, unsigned int protocol,\n+\t\t    unsigned long long scancode, unsigned int toggle)\n+  KERNEL_HELPER (78);\n+\n+unsigned bpf_skb_cgroup_id (void *ctx)\n+  KERNEL_HELPER (79);\n+\n+unsigned long long bpf_get_current_cgroup_id (void)\n+  KERNEL_HELPER (80);\n+\n+void *bpf_get_local_storage (void *map, unsigned long long flags)\n+  KERNEL_HELPER (81);\n+\n+int bpf_sk_select_reuseport (void *ctx, void *map, void *key, unsigned int flags)\n+  KERNEL_HELPER (82);\n+\n+unsigned long long bpf_skb_ancestor_cgroup_id (void *ctx, int level)\n+  KERNEL_HELPER (83);\n+\n+struct bpf_sock *bpf_sk_lookup_tcp (void *ctx, struct bpf_sock_tuple *tuple,\n+\t\t\t\t    int size, unsigned long long netns_id,\n+\t\t\t\t    unsigned long long flags)\n+  KERNEL_HELPER (84);\n+\n+struct bpf_sock *bpf_sk_lookup_udp (void *ctx, struct bpf_sock_tuple *tuple,\n+\t\t\t\t    int size, unsigned long long netns_id,\n+\t\t\t\t    unsigned long long flags)\n+  KERNEL_HELPER (85);\n+\n+int bpf_sk_release (struct bpf_sock *sk)\n+  KERNEL_HELPER (86);\n+\n+int bpf_map_push_elem (void *map, const void *value, unsigned long long flags)\n+  KERNEL_HELPER (87);\n+\n+int bpf_map_pop_elem (void *map, void *value)\n+  KERNEL_HELPER (88);\n+\n+int bpf_map_peek_elem (void *map, void *value)\n+  KERNEL_HELPER (89);\n+\n+int bpf_msg_push_data (void *ctx, int start, int cut, int flags)\n+  KERNEL_HELPER (90);\n+\n+int bpf_msg_pop_data (void *ctx, int start, int cut, int flags)\n+  KERNEL_HELPER (91);\n+\n+int bpf_rc_pointer_rel (void *ctx, int rel_x, int rel_y)\n+  KERNEL_HELPER (92);\n+\n+void bpf_spin_lock (struct bpf_spin_lock *lock)\n+  KERNEL_HELPER (93);\n+\n+void bpf_spin_unlock (struct bpf_spin_lock *lock)\n+  KERNEL_HELPER (94);\n+\n+struct bpf_sock *bpf_sk_fullsock (struct bpf_sock *sk)\n+  KERNEL_HELPER (95);\n+\n+struct bpf_sock *bpf_tcp_sock (struct bpf_sock *sk)\n+  KERNEL_HELPER (96);\n+\n+int bpf_skb_ecn_set_ce (void *ctx)\n+  KERNEL_HELPER (97);\n+\n+struct bpf_sock *bpf_get_listener_sock (struct bpf_sock *sk)\n+  KERNEL_HELPER (98);\n+\n+struct bpf_sock *bpf_skc_lookup_tcp (void *ctx,\n+\t\t\t\t     struct bpf_sock_tuple *tuple,\n+\t\t\t\t     unsigned int tuple_size,\n+\t\t\t\t     unsigned long netns,\n+\t\t\t\t     unsigned long flags)\n+  KERNEL_HELPER (99);\n+\n+int bpf_tcp_check_syncookie (struct bpf_sock *sk, void *iph,\n+\t\t\t     unsigned int iph_len,\n+\t\t\t     struct tcp_hdr *th,\n+\t\t\t     unsigned int th_len)\n+  KERNEL_HELPER (100);\n+\n+int bpf_sysctl_get_name (struct bpf_sysctl *ctx,\n+\t\t\t char *buf, unsigned long buf_len,\n+\t\t\t unsigned long flags)\n+  KERNEL_HELPER (101);\n+\n+int bpf_sysctl_get_current_value (struct bpf_sysctl *ctx,\n+\t\t\t\t  char *buf, unsigned long buf_len)\n+  KERNEL_HELPER (102);\n+\n+int bpf_sysctl_get_new_value (struct bpf_sysctl *ctx, char *buf,\n+\t\t\t      unsigned long buf_len)\n+  KERNEL_HELPER (103);\n+\n+int bpf_sysctl_set_new_value (struct bpf_sysctl *ctx, const char *buf,\n+\t\t\t      unsigned long buf_len)\n+  KERNEL_HELPER (104);\n+\n+int bpf_strtol (const char *buf, unsigned long buf_len,\n+\t\tunsigned long flags, long *res)\n+  KERNEL_HELPER (105);\n+\n+int bpf_strtoul (const char *buf, unsigned long buf_len,\n+\t\t unsigned long flags, unsigned long *res)\n+  KERNEL_HELPER (106);\n+\n+void *bpf_sk_storage_get (void *map, struct bpf_sock *sk,\n+\t\t\t  void *value, long flags)\n+  KERNEL_HELPER (107);\n+\n+int bpf_sk_storage_delete (void *map, struct bpf_sock *sk)\n+  KERNEL_HELPER (108);\n \n /* Functions to emit BPF_LD_ABS and BPF_LD_IND instructions.  We\n    provide the \"standard\" names as synonyms of the corresponding GCC\n    builtins.  Note how the SKB argument is ignored.  */\n \n-static inline long long\n-load_byte (void *skb __attribute__ ((unused)),\n-\t   unsigned long long off)\n-{\n-  return __builtin_bpf_load_byte (off);\n-}\n-\n-static inline long long\n-load_half (void *skb __attribute__ ((unused)),\n-\t   unsigned long long off)\n-{\n-  return __builtin_bpf_load_half (off);\n-}\n-\n-static inline long long\n-load_word (void *skb __attribute__ ((unused)),\n-\t   unsigned long long off)\n-{\n-  return __builtin_bpf_load_word (off);\n-}\n+#define load_byte(SKB,OFF) __builtin_bpf_load_byte ((OFF))\n+#define load_half(SKB,OFF) __builtin_bpf_load_half ((OFF))\n+#define load_word(SKB,OFF) __builtin_bpf_load_word ((OFF))\n \n struct bpf_map_def\n {"}, {"sha": "84d17d4a27f7781c7f60d3568446e1c2ab982256", "filename": "gcc/config/bpf/bpf.c", "status": "modified", "additions": 76, "deletions": 96, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -66,6 +66,63 @@ struct GTY(()) machine_function\n   int callee_saved_reg_size;\n };\n \n+/* Handle an attribute requiring a FUNCTION_DECL;\n+   arguments as in struct attribute_spec.handler.  */\n+\n+static tree\n+bpf_handle_fndecl_attribute (tree *node, tree name,\n+\t\t\t     tree args,\n+\t\t\t     int flags ATTRIBUTE_UNUSED,\n+\t\t\t     bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+\n+  if (is_attribute_p (\"kernel_helper\", name))\n+    {\n+      if (args)\n+\t{\n+\t  tree cst = TREE_VALUE (args);\n+\t  if (TREE_CODE (cst) != INTEGER_CST)\n+\t    {\n+\t      warning (OPT_Wattributes, \"%qE attribute requires an integer argument\",\n+\t\t       name);\n+\t      *no_add_attrs = true;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE requires an argument\", name);\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Target-specific attributes.  */\n+\n+static const struct attribute_spec bpf_attribute_table[] =\n+{\n+  /* Syntax: { name, min_len, max_len, decl_required, type_required,\n+\t       function_type_required, affects_type_identity, handler,\n+\t       exclude } */\n+\n+ /* Attribute to mark function prototypes as kernel helpers.  */\n+ { \"kernel_helper\", 1, 1, true, false, false, false,\n+   bpf_handle_fndecl_attribute, NULL },\n+\n+ /* The last attribute spec is set to be NULL.  */\n+ { NULL,\t0,  0, false, false, false, false, NULL, NULL }\n+};\n+\n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE bpf_attribute_table\n+\n /* Data structures for the eBPF specific built-ins.  */\n \n /* Maximum number of arguments taken by a builtin function, plus\n@@ -75,47 +132,13 @@ struct GTY(()) machine_function\n enum bpf_builtins\n {\n   BPF_BUILTIN_UNUSED = 0,\n-  /* Built-ins for kernel helpers.  */\n-#define DEF_HELPER(V,D,N,T) BPF_BUILTIN_HELPER_##D,\n-#  include \"bpf-helpers.def\"\n-#undef DEF_HELPER\n-  BPF_BUILTIN_HELPER_MAX,\n   /* Built-ins for non-generic loads and stores.  */\n-  BPF_BUILTIN_LOAD_BYTE = BPF_BUILTIN_HELPER_MAX,\n+  BPF_BUILTIN_LOAD_BYTE,\n   BPF_BUILTIN_LOAD_HALF,\n   BPF_BUILTIN_LOAD_WORD,\n   BPF_BUILTIN_MAX,\n };\n \n-/* This table is indexed by an enum bpf_builtin.  */\n-static const char *bpf_helper_names[] =\n-{\n-  NULL,\n-#define DEF_HELPER(V,D,N,T) #N,\n-#  include \"bpf-helpers.def\"\n-#undef DEF_HELPER\n-  NULL,\n-  NULL,\n-  NULL,\n-  NULL\n-};\n-\n-/* Return the builtin code corresponding to the kernel helper builtin\n-   __builtin_NAME, or 0 if the name doesn't correspond to a kernel\n-   helper builtin.  */\n-\n-static inline int\n-bpf_helper_code (const char *name)\n-{\n-  int i;\n-\n-  for (i = 1; i < BPF_BUILTIN_HELPER_MAX; ++i)\n-    if (strcmp (name, bpf_helper_names[i]) == 0)\n-      return i;\n-\n-  return 0;\n-}\n-\n static GTY (()) tree bpf_builtins[(int) BPF_BUILTIN_MAX];\n \n /* Initialize the per-function machine status.  */\n@@ -149,7 +172,7 @@ void\n bpf_target_macros (cpp_reader *pfile)\n {\n   builtin_define (\"__BPF__\");\n-  \n+\n   if (TARGET_BIG_ENDIAN)\n     builtin_define (\"__BPF_BIG_ENDIAN__\");\n   else\n@@ -187,7 +210,7 @@ bpf_target_macros (cpp_reader *pfile)\n       case LINUX_V5_1: version_code = \"0x50100\"; break;\n       case LINUX_V5_2: version_code = \"0x50200\"; break;\n       default:\n-\tgcc_unreachable ();      \n+\tgcc_unreachable ();\n       }\n \n     kernel_version_code = ACONCAT ((\"__BPF_KERNEL_VERSION_CODE__=\",\n@@ -359,7 +382,7 @@ bpf_expand_prologue (void)\n       insn = emit_move_insn (stack_pointer_rtx,\n \t\t\t     hard_frame_pointer_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n-      \n+\n       if (size > 0)\n \t{\n \t  insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n@@ -528,7 +551,7 @@ bpf_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n \n \trtx x0 = XEXP (x, 0);\n \trtx x1 = XEXP (x, 1);\n-\t\n+\n \tif (bpf_address_base_p (x0, strict) && GET_CODE (x1) == CONST_INT)\n \t  return IN_RANGE (INTVAL (x1), -1 - 0x7fff, 0x7fff);\n \n@@ -681,13 +704,16 @@ bpf_output_call (rtx target)\n       break;\n     case SYMBOL_REF:\n       {\n-\tconst char *function_name = XSTR (target, 0);\n-\tint code;\n-      \n-\tif (strncmp (function_name, \"__builtin_bpf_helper_\", 21) == 0\n-\t    && ((code = bpf_helper_code (function_name + 21)) != 0))\n+\ttree decl = SYMBOL_REF_DECL (target);\n+\ttree attr;\n+\n+\tif (decl\n+\t    && (attr = lookup_attribute (\"kernel_helper\",\n+\t\t\t\t\t DECL_ATTRIBUTES (decl))))\n \t  {\n-\t    xops[0] = GEN_INT (code);\n+\t    tree attr_args = TREE_VALUE (attr);\n+\n+\t    xops[0] = GEN_INT (TREE_INT_CST_LOW (TREE_VALUE (attr_args)));\n \t    output_asm_insn (\"call\\t%0\", xops);\n \t  }\n \telse\n@@ -792,40 +818,7 @@ def_builtin (const char *name, enum bpf_builtins code, tree type)\n static void\n bpf_init_builtins (void)\n {\n-  /* Built-ins for calling kernel helpers.  */\n-\n-  tree pt = build_pointer_type (void_type_node);\n-  tree const_void_type\n-    = build_qualified_type (void_type_node, TYPE_QUAL_CONST);\n-  tree cpt = build_pointer_type (const_void_type);\n-  tree st = short_integer_type_node;\n-  tree ust = uint16_type_node;\n-  tree it = integer_type_node;\n-  tree ut = unsigned_type_node;\n-  tree const_char_type\n-    = build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n-  tree cst = build_pointer_type (const_char_type);\n-  tree vt = void_type_node;\n-  tree ult = long_unsigned_type_node;\n-  tree u32t = uint32_type_node;\n-  tree u64t = uint64_type_node;\n-  tree llt = long_long_integer_type_node;\n   tree ullt = long_long_unsigned_type_node;\n-  \n-#define TYPES build_function_type_list\n-#define VTYPES build_varargs_function_type_list\n-#define DEF_HELPER(V,D,N,T)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (bpf_kernel >= (V))\t\t\t\t\\\n-\tdef_builtin (\"__builtin_bpf_helper_\" #N,\t\\\n-\t\t     BPF_BUILTIN_HELPER_##D,\t\t\\\n-\t\t     T);\t\t\t\t\\\n-    } while (0);\n-#  include \"bpf-helpers.def\"\n-#undef TYPES\n-#undef VTYPES\n-#undef DEF_HELPER\n \n   /* Built-ins for BPF_LD_ABS and BPF_LD_IND instructions.  */\n \n@@ -844,30 +837,17 @@ bpf_init_builtins (void)\n    with bpf_init_builtins.  */\n \n static rtx\n-bpf_expand_builtin (tree exp, rtx target,\n+bpf_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t\t    rtx subtarget ATTRIBUTE_UNUSED,\n \t\t    machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t    int ignore)\n+\t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   int code = DECL_MD_FUNCTION_CODE (fndecl);\n \n-  if (code >= 1 && code < BPF_BUILTIN_HELPER_MAX)\n-    {\n-      /* This is a builtin to call a kernel helper function.\n-\n-\t For these builtins, we just expand the function call normally\n-\t with expand_call like we would do for a libcall. The function\n-\t bpf_output_call below will then do The Right Thing (TM),\n-\t recognizing the name of the called __builtin_helper_* symbol\n-\t and emitting the corresponding CALL N instruction whenever\n-\t necessary.  */\n-\n-      return expand_call (exp, target, ignore);\n-    }\n-  else if (code == BPF_BUILTIN_LOAD_BYTE\n-\t   || code == BPF_BUILTIN_LOAD_HALF\n-\t   || code == BPF_BUILTIN_LOAD_WORD)\n+  if (code == BPF_BUILTIN_LOAD_BYTE\n+      || code == BPF_BUILTIN_LOAD_HALF\n+      || code == BPF_BUILTIN_LOAD_WORD)\n     {\n       /* Expand an indirect load from the sk_buff in the context.\n \t There is just one argument to the builtin, which is the"}, {"sha": "79833171c5adf1ed5044ff9f790ae968eff861bc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 153, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -2446,6 +2446,7 @@ GCC plugins may provide their own attributes.\n * ARM Function Attributes::\n * AVR Function Attributes::\n * Blackfin Function Attributes::\n+* BPF Function Attributes::\n * CR16 Function Attributes::\n * C-SKY Function Attributes::\n * Epiphany Function Attributes::\n@@ -4657,6 +4658,24 @@ all registers except the stack pointer should be saved in the prologue\n regardless of whether they are used or not.\n @end table\n \n+@node BPF Function Attributes\n+@subsection BPF Function Attributes\n+\n+These function attributes are supported by the BPF back end:\n+\n+@table @code\n+@item kernel_helper\n+@cindex @code{kernel helper}, function attribute, BPF\n+use this attribute to indicate the specified function declaration is a\n+kernel helper.  The helper function is passed as an argument to the\n+attribute.  Example:\n+\n+@smallexample\n+int bpf_probe_read (void *dst, int size, const void *unsafe_ptr)\n+  __attribute__ ((kernel_helper (4)));\n+@end smallexample\n+@end table\n+\n @node CR16 Function Attributes\n @subsection CR16 Function Attributes\n \n@@ -13858,7 +13877,6 @@ instructions, but allow the compiler to schedule those calls.\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n * BPF Built-in Functions::\n-* BPF Kernel Helpers::\n * FR-V Built-in Functions::\n * MIPS DSP Built-in Functions::\n * MIPS Paired-Single Support::\n@@ -14879,158 +14897,6 @@ Load 16-bits from the @code{struct sk_buff} packet data pointed by the register\n Load 32-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n @end deftypefn\n \n-@node BPF Kernel Helpers\n-@subsection BPF Kernel Helpers\n-\n-These built-in functions are available for calling kernel helpers, and\n-they are available depending on the kernel version selected as the\n-CPU.\n-\n-Rather than using the built-ins directly, it is preferred for programs\n-to include @file{bpf-helpers.h} and use the wrappers defined there.\n-\n-For a full description of what the helpers do, the arguments they\n-take, and the returned value, see the\n-@file{linux/include/uapi/linux/bpf.h} in a Linux source tree.\n-\n-@smallexample\n-void *__builtin_bpf_helper_map_lookup_elem (void *map, void *key)\n-int   __builtin_bpf_helper_map_update_elem (void *map, void *key,\n-                                            void *value,\n-                                            unsigned long long flags)\n-int   __builtin_bpf_helper_map_delete_elem (void *map, const void *key)\n-int   __builtin_bpf_helper_map_push_elem (void *map, const void *value,\n-                                          unsigned long long flags)\n-int   __builtin_bpf_helper_map_pop_elem (void *map, void *value)\n-int   __builtin_bpf_helper_map_peek_elem (void *map, void *value)\n-int __builtin_bpf_helper_clone_redirect (void *skb,\n-                                         unsigned int ifindex,\n-                                         unsigned long long flags)\n-int __builtin_bpf_helper_skb_get_tunnel_key (void *ctx, void *key, int size, int flags)\n-int __builtin_bpf_helper_skb_set_tunnel_key (void *ctx, void *key, int size, int flags)\n-int __builtin_bpf_helper_skb_get_tunnel_opt (void *ctx, void *md, int size)\n-int __builtin_bpf_helper_skb_set_tunnel_opt (void *ctx, void *md, int size)\n-int __builtin_bpf_helper_skb_get_xfrm_state (void *ctx, int index, void *state,\n-\t\t\t\t     int size, int flags)\n-static unsigned long long __builtin_bpf_helper_skb_cgroup_id (void *ctx)\n-static unsigned long long __builtin_bpf_helper_skb_ancestor_cgroup_id\n-                                         (void *ctx, int level)\n-int __builtin_bpf_helper_skb_vlan_push (void *ctx, __be16 vlan_proto, __u16 vlan_tci)\n-int __builtin_bpf_helper_skb_vlan_pop (void *ctx)\n-int __builtin_bpf_helper_skb_ecn_set_ce (void *ctx)\n-\n-int __builtin_bpf_helper_skb_load_bytes (void *ctx, int off, void *to, int len)\n-int __builtin_bpf_helper_skb_load_bytes_relative (void *ctx, int off, void *to, int len, __u32 start_header)\n-int __builtin_bpf_helper_skb_store_bytes (void *ctx, int off, void *from, int len, int flags)\n-int __builtin_bpf_helper_skb_under_cgroup (void *ctx, void *map, int index)\n-int __builtin_bpf_helper_skb_change_head (void *, int len, int flags)\n-int __builtin_bpf_helper_skb_pull_data (void *, int len)\n-int __builtin_bpf_helper_skb_change_proto (void *ctx, __be16 proto, __u64 flags)\n-int __builtin_bpf_helper_skb_change_type (void *ctx, __u32 type)\n-int __builtin_bpf_helper_skb_change_tail (void *ctx, __u32 len, __u64 flags)\n-int __builtin_bpf_helper_skb_adjust_room (void *ctx, __s32 len_diff, __u32 mode,\n-    \t\t\t\t  unsigned long long flags)\n-@end smallexample\n-\n-Other helpers:\n-\n-@smallexample\n-int __builtin_bpf_helper_probe_read (void *dst, unsigned int size, void *src)\n-unsigned long long __builtin_bpf_helper_ktime_get_ns (void)\n-int __builtin_bpf_helper_trace_printk (const char *fmt, unsigned int fmt_size, ...)\n-void __builtin_bpf_helper_tail_call (void *ctx, void *prog_array_map, unsigned int index)\n-unsigned int __builtin_bpf_helper_get_smp_processor_id (void)\n-unsigned long long __builtin_bpf_helper_get_current_pid_tgid (void)\n-unsigned long long __builtin_bpf_helper_get_current_uid_gid (void)\n-int __builtin_bpf_helper_get_current_comm (void *buf, unsigned int size_of_buf)\n-unsigned long long __builtin_bpf_helper_perf_event_read (void *map, unsigned long long flags)\n-\n-int __builtin_bpf_helper_redirect (unsigned int ifindex, unsigned long long flags)\n-int __builtin_bpf_helper_redirect_map (void *map, unsigned int key, unsigned long long flags)\n-int __builtin_bpf_helper_perf_event_output (void *ctx,void *map, unsigned long long flags, void *data, unsigned long long size)\n-int __builtin_bpf_helper_get_stackid (void *ctx, void *map, unsigned long long flags)\n-int __builtin_bpf_helper_probe_write_user (void *dst, const void *src, unsigned int len)\n-int __builtin_bpf_helper_current_task_under_cgroup (void *map, unsigned int index)\n-\n-static unsigned long long __builtin_bpf_helper_get_prandom_u32 (void)\n-int __builtin_bpf_helper_xdp_adjust_head (void *ctx, int offset)\n-int __builtin_bpf_helper_xdp_adjust_meta (void *ctx, int offset)\n-int __builtin_bpf_helper_get_socket_cookie (void *ctx)\n-int __builtin_bpf_helper_setsockopt (void *ctx, int level, int optname, void *optval,\n-\t\t\t     int optlen)\n-int __builtin_bpf_helper_getsockopt (void *ctx, int level, int optname, void *optval,\n-\t\t\t     int optlen)\n-int __builtin_bpf_helper_sock_ops_cb_flags_set (void *ctx, int flags)\n-int __builtin_bpf_helper_sk_redirect_map (void *ctx, void *map, int key, int flags)\n-int __builtin_bpf_helper_sk_redirect_hash (void *ctx, void *map, void *key, int flags)\n-int __builtin_bpf_helper_sock_map_update (void *map, void *key, void *value,\n-\t\t\t\t  unsigned long long flags)\n-int __builtin_bpf_helper_sock_hash_update (void *map, void *key, void *value,\n-\t\t\t\t   unsigned long long flags)\n-int __builtin_bpf_helper_perf_event_read_value (void *map, unsigned long long flags,\n-\t\t\t\t\tvoid *buf, unsigned int buf_size)\n-int __builtin_bpf_helper_perf_prog_read_value (void *ctx, void *buf,\n-\t\t\t\t       unsigned int buf_size)\n-\n-int __builtin_bpf_helper_override_return (void *ctx, unsigned long rc)\n-int __builtin_bpf_helper_msg_redirect_map (void *ctx, void *map, int key, int flags)\n-int __builtin_bpf_helper_msg_redirect_hash (void *ctx,\n-\t\t\t\t    void *map, void *key, int flags)\n-int __builtin_bpf_helper_msg_apply_bytes (void *ctx, int len)\n-int __builtin_bpf_helper_msg_cork_bytes (void *ctx, int len)\n-int __builtin_bpf_helper_msg_pull_data (void *ctx, int start, int end, int flags)\n-int __builtin_bpf_helper_msg_push_data (void *ctx, int start, int end, int flags)\n-int __builtin_bpf_helper_msg_pop_data (void *ctx, int start, int cut, int flags)\n-int __builtin_bpf_helper_bind (void *ctx, void *addr, int addr_len)\n-int __builtin_bpf_helper_xdp_adjust_tail (void *ctx, int offset)\n-int __builtin_bpf_helper_sk_select_reuseport (void *ctx, void *map, void *key, __u32 flags)\n-int __builtin_bpf_helper_get_stack (void *ctx, void *buf, int size, int flags)\n-int __builtin_bpf_helper_fib_lookup (void *ctx, struct bpf_fib_lookup *params,\n-\t\t\t     int plen, __u32 flags)\n-\n-int __builtin_bpf_helper_lwt_push_encap (void *ctx, unsigned int type, void *hdr,\n-\t\t\t\t unsigned int len)\n-int __builtin_bpf_helper_lwt_seg6_store_bytes (void *ctx, unsigned int offset,\n-\t\t\t\t       void *from, unsigned int len)\n-int __builtin_bpf_helper_lwt_seg6_action (void *ctx, unsigned int action, void *param,\n-\t\t\t\t  unsigned int param_len)\n-int __builtin_bpf_helper_lwt_seg6_adjust_srh (void *ctx, unsigned int offset,\n-\t\t\t\t      unsigned int len)\n-int __builtin_bpf_helper_rc_repeat (void *ctx)\n-int __builtin_bpf_helper_rc_keydown (void *ctx, unsigned int protocol,\n-\t\t\t     unsigned long long scancode, unsigned int toggle)\n-static unsigned long long __builtin_bpf_helper_get_current_cgroup_id (void)\n-static void *__builtin_bpf_helper_get_local_storage (void *map, unsigned long long flags)\n-static struct bpf_sock *__builtin_bpf_helper_sk_lookup_tcp (void *ctx, void *tuple, int size, unsigned long long netns_id, unsigned long long flags)\n-static struct bpf_sock *__builtin_bpf_helper_sk_lookup_udp (void *ctx, void *tuple, int size, unsigned long long netns_id, unsigned long long flags)\n-int __builtin_bpf_helper_sk_release (struct bpf_sock *sk)\n-int __builtin_bpf_helper_rc_pointer_rel (void *ctx, int rel_x, int rel_y)\n-static void __builtin_bpf_helper_spin_lock (struct bpf_spin_lock *lock)\n-static void __builtin_bpf_helper_spin_unlock (struct bpf_spin_lock *lock)\n-\n-static struct bpf_sock *__builtin_bpf_helper_sk_fullsock (struct bpf_sock *sk)\n-static struct bpf_tcp_sock *__builtin_bpf_helper_tcp_sock (struct bpf_sock *sk)\n-static struct bpf_sock *__builtin_bpf_helper_get_listener_sock (struct bpf_sock *sk)\n-\n-int __builtin_bpf_helper_l3_csum_replace (void *ctx, int off, int from, int to, int flags)\n-int __builtin_bpf_helper_l4_csum_replace (void *ctx, int off, int from, int to, int flags)\n-int __builtin_bpf_helper_csum_diff (void *from, int from_size, void *to, int to_size, int seed)\n-\n-static unsigned int __builtin_bpf_helper_get_cgroup_classid (void *ctx)\n-static unsigned int __builtin_bpf_helper_get_route_realm (void *ctx)\n-static unsigned int __builtin_bpf_helper_get_hash_recalc (void *ctx)\n-static unsigned long long __builtin_bpf_helper_get_current_task (void *ctx)\n-\n-static long long __builtin_bpf_helper_csum_update (void *ctx, __u32 csum)\n-static void __builtin_bpf_helper_set_hash_invalid (void *ctx)\n-int __builtin_bpf_helper_get_numa_node_id (void)\n-int __builtin_bpf_helper_probe_read_str (void *ctx, __u32 size,\n-\t\t\t\t const void *unsafe_ptr)\n-static unsigned int __builtin_bpf_helper_get_socket_uid (void *ctx)\n-static unsigned int __builtin_bpf_helper_set_hash (void *ctx, __u32 hash)\n-@end smallexample\n-\n-\n @node FR-V Built-in Functions\n @subsection FR-V Built-in Functions\n "}, {"sha": "8dfde242a23d59b499aee5234e8cce5aa1522f09", "filename": "gcc/testsuite/gcc.target/bpf/helper-bind.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *ctx, *addr;\n   int addr_len;\n \n-  ret = __builtin_bpf_helper_bind (ctx, addr, addr_len);\n+  ret = bpf_bind (ctx, addr, addr_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t64\" } } */"}, {"sha": "9937d5ab4cc0f77a233f16c1a204b4be37c475d0", "filename": "gcc/testsuite/gcc.target/bpf/helper-bpf-redirect.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   uint32_t ifindex;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_redirect (ifindex, flags);\n+  ret = bpf_redirect (ifindex, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t23\" } } */"}, {"sha": "e38adbc40e77518c716b9b0f1fa492bb997a16e2", "filename": "gcc/testsuite/gcc.target/bpf/helper-clone-redirect.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t ifindex;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_clone_redirect (skb, ifindex, flags);\n+  ret = bpf_clone_redirect (skb, ifindex, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t13\" } } */"}, {"sha": "a1c8bf5a02655a40d2f7573fc73b49e7617d1f45", "filename": "gcc/testsuite/gcc.target/bpf/helper-csum-diff.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint64_t to_size, from_size;\n   int seed;\n \n-  ret = __builtin_bpf_helper_csum_diff (from, from_size, to, to_size, seed);\n+  ret = bpf_csum_diff (from, from_size, to, to_size, seed);\n }\n \n /* { dg-final { scan-assembler \"call\\t28\" } } */"}, {"sha": "4f65033acb486f16df12898b96fd626976337fc0", "filename": "gcc/testsuite/gcc.target/bpf/helper-csum-update.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   int csum;\n \n-  ret = __builtin_bpf_helper_csum_update (skb, csum);\n+  ret = bpf_csum_update (skb, csum);\n }\n \n /* { dg-final { scan-assembler \"call\\t40\" } } */"}, {"sha": "5b05378a730d47d83d45f3963d8ce5673c368460", "filename": "gcc/testsuite/gcc.target/bpf/helper-current-task-under-cgroup.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *map;\n   uint32_t index;\n \n-  ret = __builtin_bpf_helper_current_task_under_cgroup (map, index);\n+  ret = bpf_current_task_under_cgroup (map, index);\n }\n \n /* { dg-final { scan-assembler \"call\\t37\" } } */"}, {"sha": "8290234108afe34b424aece71f69e2eb8c771e48", "filename": "gcc/testsuite/gcc.target/bpf/helper-fib-lookup.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   int plen;\n   uint32_t flags;\n \n-  ret = __builtin_bpf_helper_fib_lookup (ctx, params, plen, flags);\n+  ret = bpf_fib_lookup (ctx, params, plen, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t69\" } } */"}, {"sha": "5d85a89c632d60acba23ca696aaf18ebbf01b258", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-cgroup-classid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n   void *skb;\n \n-  ret = __builtin_bpf_helper_get_cgroup_classid (skb);\n+  ret = bpf_get_cgroup_classid (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t17\" } } */"}, {"sha": "b0c0b74c11f2fdbb04ffddb5b7fdd85bf890497e", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-cgroup-id.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n   \n-  ret = __builtin_bpf_helper_get_current_cgroup_id ();\n+  ret = bpf_get_current_cgroup_id ();\n }\n \n /* { dg-final { scan-assembler \"call\\t80\" } } */"}, {"sha": "1e25cd1cc7e15ff026ee04e49316621843ae01cf", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-comm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *buf;\n   uint32_t size_of_buf;\n \n-  ret = __builtin_bpf_helper_get_current_comm (buf, size_of_buf);\n+  ret = bpf_get_current_comm (buf, size_of_buf);\n }\n \n /* { dg-final { scan-assembler \"call\\t16\" } } */"}, {"sha": "1dd7a1e507b9a27a716d2e014fff9e3c86231b40", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-pid-tgid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n \n-  ret = __builtin_bpf_helper_get_current_pid_tgid ();\n+  ret = bpf_get_current_pid_tgid ();\n }\n \n /* { dg-final { scan-assembler \"call\\t14\" } } */"}, {"sha": "79344d15abf6c9110419c7c9cbb24f67dc293279", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-task.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n \n-  ret = __builtin_bpf_helper_get_current_task ();\n+  ret = bpf_get_current_task ();\n }\n \n /* { dg-final { scan-assembler \"call\\t35\" } } */"}, {"sha": "b3e7261c35b4ee1b147129c0e56951c698043b2c", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-uid-gid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n \n-  ret = __builtin_bpf_helper_get_current_uid_gid ();\n+  ret = bpf_get_current_uid_gid ();\n }\n \n /* { dg-final { scan-assembler \"call\\t15\" } } */"}, {"sha": "e9d87ae9bcc8d7d35634453d3461b604f41cbba2", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-hash-recalc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n   void *skb;\n \n-  ret = __builtin_bpf_helper_get_hash_recalc (skb);\n+  ret = bpf_get_hash_recalc (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t34\" } } */"}, {"sha": "500ba787a3a3b7ca0baaacff1c34c9cf027dbefe", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-listener-sock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *ret, *sk;\n \n-  ret = __builtin_bpf_helper_get_listener_sock (sk);\n+  ret = bpf_get_listener_sock (sk);\n }\n \n /* { dg-final { scan-assembler \"call\\t98\" } } */"}, {"sha": "1c28ef52c11d1d4c90b8a2c9fdf6beae645f9ac7", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-local-storage.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *ret, *map;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_get_local_storage (map, flags);\n+  ret = bpf_get_local_storage (map, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t81\" } } */"}, {"sha": "e6477a5c1ff7affa5c063e92c35db35309ea60dc", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-numa-node-id.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n \n-  ret = __builtin_bpf_helper_get_numa_node_id ();\n+  ret = bpf_get_numa_node_id ();\n }\n \n /* { dg-final { scan-assembler \"call\\t42\" } } */"}, {"sha": "f30cafd36b0f5d29099d78cfc980f18ecc6959ab", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-prandom-u32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n \n-  ret = __builtin_bpf_helper_get_prandom_u32 ();\n+  ret = bpf_get_prandom_u32 ();\n }\n \n /* { dg-final { scan-assembler \"call\\t7\" } } */"}, {"sha": "b7794307802d7ef327814eab0fa06b9488f60283", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-route-realm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n   void *skb;\n \n-  ret = __builtin_bpf_helper_get_route_realm (skb);\n+  ret = bpf_get_route_realm (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t24\" } } */"}, {"sha": "7d0e9869826ce72e3a39403d98fd47d2dd4511c4", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-smp-processor-id.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n \n-  ret = __builtin_bpf_helper_get_smp_processor_id ();\n+  ret = bpf_get_smp_processor_id ();\n }\n \n /* { dg-final { scan-assembler \"call\\t8\" } } */"}, {"sha": "e2e421f98599946a11f9c1b85d432ad6379c34a0", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-socket-cookie.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n   void *skb;\n   \n-  ret = __builtin_bpf_helper_get_socket_cookie (skb);\n+  ret = bpf_get_socket_cookie (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t46\" } } */"}, {"sha": "343f86656d184d0dd82e7b89d0c5c5ed87920ab0", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-socket-uid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint32_t ret;\n   void *skb;\n   \n-  ret = __builtin_bpf_helper_get_socket_uid (skb);\n+  ret = bpf_get_socket_uid (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t47\" } } */"}, {"sha": "cc3f6a06bb27148ad367c6233829e67cf9a07d56", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-stack.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t size;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_get_stack (regs, buf, size, flags);\n+  ret = bpf_get_stack (regs, buf, size, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t67\" } } */"}, {"sha": "cc3ecb01a05bc25a09c5defe6eca19efc97446b6", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-stackid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *ctx, *map;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_get_stackid (ctx, map, flags);\n+  ret = bpf_get_stackid (ctx, map, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t27\" } } */"}, {"sha": "c4b32982ed7a4cb31b368242bee8b933d732f965", "filename": "gcc/testsuite/gcc.target/bpf/helper-getsockopt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,8 @@ foo ()\n   int level, optname, optlen;\n   char *optval;\n   \n-  ret = __builtin_bpf_helper_getsockopt (bpf_socket, level,\n-\t\t\t\t\t optname, optval, optlen);\n+  ret = bpf_getsockopt (bpf_socket, level,\n+\t\t\toptname, optval, optlen);\n }\n \n /* { dg-final { scan-assembler \"call\\t57\" } } */"}, {"sha": "77f1661f3873709a959f79706223bb6a9f770d28", "filename": "gcc/testsuite/gcc.target/bpf/helper-ktime-get-ns.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,12 +1,14 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n-  ret = __builtin_bpf_helper_ktime_get_ns ();\n+  ret = bpf_ktime_get_ns ();\n }\n \n /* { dg-final { scan-assembler \"call\\t5\" } } */"}, {"sha": "c3f1b78397ac1efbeb03df05083aed736c8ef782", "filename": "gcc/testsuite/gcc.target/bpf/helper-l3-csum-replace.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t offset;\n   uint64_t from, to, size;\n \n-  ret = __builtin_bpf_helper_l3_csum_replace (skb, offset, from, to, size);\n+  ret = bpf_l3_csum_replace (skb, offset, from, to, size);\n }\n \n /* { dg-final { scan-assembler \"call\\t10\" } } */"}, {"sha": "fd54f0b5e880015b366d807757a66e821caaec5c", "filename": "gcc/testsuite/gcc.target/bpf/helper-l4-csum-replace.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t offset;\n   uint64_t from, to, size;\n \n-  ret = __builtin_bpf_helper_l4_csum_replace (skb, offset, from, to, size);\n+  ret = bpf_l4_csum_replace (skb, offset, from, to, size);\n }\n \n /* { dg-final { scan-assembler \"call\\t11\" } } */"}, {"sha": "c6d4769b7422457febe4ce9b3c96adf4280affae", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-push-encap.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb, *hdr;\n   uint32_t type, len;\n   \n-  ret = __builtin_bpf_helper_lwt_push_encap (skb, type, hdr, len);\n+  ret = bpf_lwt_push_encap (skb, type, hdr, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t73\" } } */"}, {"sha": "4cd7052806b88d8b342aa78f713ec13c7519fe30", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-action.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,8 +11,8 @@ foo ()\n   void *skb, *param;\n   uint32_t action, param_len;\n   \n-  ret = __builtin_bpf_helper_lwt_seg6_action (skb, action,\n-\t\t\t\t\t      param, param_len);\n+  ret = bpf_lwt_seg6_action (skb, action,\n+\t\t\t     param, param_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t76\" } } */"}, {"sha": "adc8dc414dfef7d6a0a59b2e5529a1cfbb1cfa12", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-adjust-srh.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   uint32_t offset, delta;\n   \n-  ret = __builtin_bpf_helper_lwt_seg6_adjust_srh (skb, offset,\n+  ret = bpf_lwt_seg6_adjust_srh (skb, offset,\n \t\t\t\t\t\t  delta);\n }\n "}, {"sha": "a35e917d575e0e608f772663a544da4b92d69b06", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-store-bytes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,8 +11,7 @@ foo ()\n   void *skb, *from;\n   uint32_t offset, len;\n   \n-  ret = __builtin_bpf_helper_lwt_seg6_store_bytes (skb, offset,\n-\t\t\t\t\t\t   from, len);\n+  ret = bpf_lwt_seg6_store_bytes (skb, offset, from, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t74\" } } */"}, {"sha": "0200b15eb450b4cdbcdc6dcc93a44ace859dbccd", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-delete-elem.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,4 +1,7 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <bpf-helpers.h>\n \n char *map () { return 0; }\n \n@@ -8,7 +11,7 @@ foo ()\n   int ret;\n   char *key = 0;\n \n-  ret = __builtin_bpf_helper_map_delete_elem (map (), key);\n+  ret = bpf_map_delete_elem (map (), key);\n }\n \n /* { dg-final { scan-assembler \"call\\t3\" } } */"}, {"sha": "1d443a0513861886a3e3bc0e80f46e765d09a7f9", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-lookup-elem.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,12 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <bpf-helpers.h>\n \n char *map () { return 0; }\n \n void\n foo ()\n {\n   char *key = 0, *value = 0;\n-  value = __builtin_bpf_helper_map_lookup_elem (map (), key);\n+  value = bpf_map_lookup_elem (map (), key);\n }\n \n /* { dg-final { scan-assembler \"call\\t1\" } } */"}, {"sha": "de833f202a9ba67e37dec989835bdbe9933e9f10", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-peek-elem.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,4 +1,7 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <bpf-helpers.h>\n \n char *map () { return 0; }\n \n@@ -8,7 +11,7 @@ foo ()\n   int ret;\n   char *value = 0;\n \n-  ret = __builtin_bpf_helper_map_peek_elem (map (), value);\n+  ret = bpf_map_peek_elem (map (), value);\n }\n \n /* { dg-final { scan-assembler \"call\\t89\" } } */"}, {"sha": "7d76f853f389afbe7ceacbbb56c81a02cffa16eb", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-pop-elem.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,4 +1,7 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <bpf-helpers.h>\n \n char *map () { return 0; }\n \n@@ -8,7 +11,7 @@ foo ()\n   int ret;\n   char *value = 0;\n \n-  ret = __builtin_bpf_helper_map_pop_elem (map (), value);\n+  ret = bpf_map_pop_elem (map (), value);\n }\n \n /* { dg-final { scan-assembler \"call\\t88\" } } */"}, {"sha": "b4b2a8ef1ef566137c1857f175cd652e349c6e11", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-push-elem.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n+#include <bpf-helpers.h>\n+\n char *map () { return 0; }\n \n void\n@@ -10,7 +12,7 @@ foo ()\n   char *value = 0;\n   long long flags = 0;\n \n-  ret = __builtin_bpf_helper_map_push_elem (map (), value, flags);\n+  ret = bpf_map_push_elem (map (), value, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t87\" } } */"}, {"sha": "6cceafe62e3a4500ecdcf20b006dc884424e80c2", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-update-elem.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n+#include <bpf-helpers.h>\n+\n char *map () { return 0; }\n \n void\n@@ -10,7 +12,7 @@ foo ()\n   long long flags = 0;\n   char *key = 0, *value = 0;\n \n-  ret = __builtin_bpf_helper_map_update_elem (map (), key, value, flags);\n+  ret = bpf_map_update_elem (map (), key, value, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t2\" } } */"}, {"sha": "9c8ef9d0c88c85f2d8b3eb0e911e24d4e366196a", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-apply-bytes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *msg;\n   uint32_t bytes;\n   \n-  ret = __builtin_bpf_helper_msg_apply_bytes (msg, bytes);\n+  ret = bpf_msg_apply_bytes (msg, bytes);\n }\n \n /* { dg-final { scan-assembler \"call\\t61\" } } */"}, {"sha": "988a04dfb1552a5e90df573836ed981279dc3b8c", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-cork-bytes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *msg;\n   uint32_t bytes;\n   \n-  ret = __builtin_bpf_helper_msg_cork_bytes (msg, bytes);\n+  ret = bpf_msg_cork_bytes (msg, bytes);\n }\n \n /* { dg-final { scan-assembler \"call\\t62\" } } */"}, {"sha": "567904433f99d4defcc39715c285f043165fae87", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-pop-data.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t start, pop;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_msg_pop_data (skb, start, pop, flags);\n+  ret = bpf_msg_pop_data (skb, start, pop, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t91\" } } */"}, {"sha": "77141019a9aecc802517496c4418a12bb721e6d8", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-pull-data.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,16 +1,17 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *msg;\n-  uint32_t start, end;\n-  uint64_t flags;\n+  int len;\n   \n-  ret = __builtin_bpf_helper_msg_pull_data (msg, start, end, flags);\n+  ret = bpf_msg_pull_data (msg, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t63\" } } */"}, {"sha": "40b936162fce481a82d12068866ced70c766b529", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-push-data.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t start, len;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_msg_push_data (skb, start, len, flags);\n+  ret = bpf_msg_push_data (skb, start, len, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t90\" } } */"}, {"sha": "6ac680cc0986ac3e929960de3aee8d21ca99a7ac", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-redirect-hash.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *msg, *map, *key;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_msg_redirect_hash (msg, map, key,\n+  ret = bpf_msg_redirect_hash (msg, map, key,\n \t\t\t\t\t\tflags);\n }\n "}, {"sha": "ef69f11118311475f2545e0172a62cb49d791f1e", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-redirect-map.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint64_t key;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_msg_redirect_map (msg, map, key,\n+  ret = bpf_msg_redirect_map (msg, map, key,\n \t\t\t\t\t       flags);\n }\n "}, {"sha": "380fd59567d250c6184ce503df4790add591e6c6", "filename": "gcc/testsuite/gcc.target/bpf/helper-override-return.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *regs;\n   uint64_t rc;\n   \n-  ret = __builtin_bpf_helper_override_return (regs, rc);\n+  ret = bpf_override_return (regs, rc);\n }\n \n /* { dg-final { scan-assembler \"call\\t58\" } } */"}, {"sha": "24ed565097ebb552789a183fd6c25fc3a1a52ad4", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-output.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -11,7 +12,7 @@ foo ()\n   void *data;\n   uint64_t size;\n \n-  ret = __builtin_bpf_helper_perf_event_output (ctx, map, flags, data, size);\n+  ret = bpf_perf_event_output (ctx, map, flags, data, size);\n }\n \n /* { dg-final { scan-assembler \"call\\t25\" } } */"}, {"sha": "6692f649437bd577102680986ec1738fd74c8bed", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-read-value.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint64_t flags;\n   uint64_t buf_size;\n   \n-  ret = __builtin_bpf_helper_perf_event_read_value (map, flags, buf, buf_size);\n+  ret = bpf_perf_event_read_value (map, flags, buf, buf_size);\n }\n \n /* { dg-final { scan-assembler \"call\\t55\" } } */"}, {"sha": "674058daa8d89a3870cf12749cb24ee9b88673dc", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-read.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *map;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_perf_event_read (map, flags);\n+  ret = bpf_perf_event_read (map, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t22\" } } */"}, {"sha": "7f0a8011ed22711a4016fa9ab31ed5eb1b46757c", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-prog-read-value.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *ctx, *buf;\n   uint64_t buf_size;\n   \n-  ret = __builtin_bpf_helper_perf_prog_read_value (ctx, buf, buf_size);\n+  ret = bpf_perf_prog_read_value (ctx, buf, buf_size);\n }\n \n /* { dg-final { scan-assembler \"call\\t56\" } } */"}, {"sha": "0774da42ad32a7a6493cac202bb0d96a4cc3c95b", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-read-str.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   void *dst;\n   const void *unsafe_ptr;\n   \n-  ret = __builtin_bpf_helper_probe_read_str (dst, size, unsafe_ptr);\n+  ret = bpf_probe_read_str (dst, size, unsafe_ptr);\n }\n \n /* { dg-final { scan-assembler \"call\\t45\" } } */"}, {"sha": "64261c56f92164a593a29b5ebe18794170cdd649", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-read.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *src, *dst;\n   uint32_t size;\n \n-  ret = __builtin_bpf_helper_probe_read (dst, size, src);\n+  ret = bpf_probe_read (dst, size, src);\n }\n \n /* { dg-final { scan-assembler \"call\\t4\" } } */"}, {"sha": "127ae61c8a4e21ee3845eac70a74d541943cf937", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-write-user.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *dst, *src;\n   uint32_t len;\n \n-  ret = __builtin_bpf_helper_probe_write_user (dst, src, len);\n+  ret = bpf_probe_write_user (dst, src, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t36\" } } */"}, {"sha": "c419ee06c5cfacc9122dab3f1bf34b42b99d883c", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-keydown.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t protocol, toggle;\n   uint64_t scancode;\n   \n-  ret = __builtin_bpf_helper_rc_keydown (ctx, protocol,\n+  ret = bpf_rc_keydown (ctx, protocol,\n \t\t\t\t\t scancode, toggle);\n }\n "}, {"sha": "ca0a5c4ac752dedf340315d69277ce11c3e6eda8", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-pointer-rel.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *ctx;\n   int32_t rel_x, rel_y;\n \n-  ret = __builtin_bpf_helper_rc_pointer_rel (ctx, rel_x, rel_y);\n+  ret = bpf_rc_pointer_rel (ctx, rel_x, rel_y);\n }\n \n /* { dg-final { scan-assembler \"call\\t92\" } } */"}, {"sha": "52d83e4a9804711b46cf24c00e9b0dbd759658e0", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-repeat.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *ctx;\n   \n-  ret = __builtin_bpf_helper_rc_repeat (ctx);\n+  ret = bpf_rc_repeat (ctx);\n }\n \n /* { dg-final { scan-assembler \"call\\t77\" } } */"}, {"sha": "0d059778781763f59187656f2a229ed792b9d194", "filename": "gcc/testsuite/gcc.target/bpf/helper-redirect-map.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t key;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_redirect_map (map, key, flags);\n+  ret = bpf_redirect_map (map, key, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t51\" } } */"}, {"sha": "adbc41bce19197f6bfaefcab8cc2b079e586ca63", "filename": "gcc/testsuite/gcc.target/bpf/helper-set-hash-invalid.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *skb;\n \n-  __builtin_bpf_helper_set_hash_invalid (skb);\n+  bpf_set_hash_invalid (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t41\" } } */"}, {"sha": "a36cd6b56ecd2402d32ff00bf78c3fa3ecfeafa5", "filename": "gcc/testsuite/gcc.target/bpf/helper-set-hash.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   uint32_t hash;\n   \n-  ret = __builtin_bpf_helper_set_hash (skb, hash);\n+  ret = bpf_set_hash (skb, hash);\n }\n \n /* { dg-final { scan-assembler \"call\\t48\" } } */"}, {"sha": "f79c2a867837aa125d73497751f28f4d287e8d06", "filename": "gcc/testsuite/gcc.target/bpf/helper-setsockopt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -12,8 +14,7 @@ foo ()\n   void *optval;\n   int optlen;\n   \n-  ret = __builtin_bpf_helper_setsockopt (bpf_socket, level, optname,\n-\t\t\t\t\t optval, optlen);\n+  ret = bpf_setsockopt (bpf_socket, level, optname, optval, optlen);\n }\n \n /* { dg-final { scan-assembler \"call\\t49\" } } */"}, {"sha": "9e66e94f57ff9bd5b74bbb2e840a5e87fe7015bd", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-fullsock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *ret, *sk;\n \n-  ret = __builtin_bpf_helper_sk_fullsock (sk);\n+  ret = bpf_sk_fullsock (sk);\n }\n \n /* { dg-final { scan-assembler \"call\\t95\" } } */"}, {"sha": "1adcc6920689c15aecb1ea9d8c7526ba67388e27", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-lookup-tcp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,10 +12,10 @@ foo ()\n   uint32_t tuple_size;\n   uint64_t netns, flags;\n   \n-  ret = __builtin_bpf_helper_sk_lookup_tcp (ctx,\n-\t\t\t\t\t    tuple,\n-\t\t\t\t\t    tuple_size,\n-\t\t\t\t\t    netns, flags);\n+  ret = bpf_sk_lookup_tcp (ctx,\n+\t\t\t   tuple,\n+\t\t\t   tuple_size,\n+\t\t\t   netns, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t84\" } } */"}, {"sha": "8bbd40bf387acf0fa73e0ad2f5034d10d0650fe3", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-lookup-upd.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t tuple_size;\n   uint64_t netns, flags;\n   \n-  ret = __builtin_bpf_helper_sk_lookup_udp (ctx,\n+  ret = bpf_sk_lookup_udp (ctx,\n \t\t\t\t\t    tuple,\n \t\t\t\t\t    tuple_size,\n \t\t\t\t\t    netns, flags);"}, {"sha": "f449b5b8254a4845fcd97756af80a3245f34221e", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-redirect-hash.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,8 +11,7 @@ foo ()\n   void *skb, *map, *key;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_sk_redirect_hash (skb, map, key,\n-\t\t\t\t\t       flags);\n+  ret = bpf_sk_redirect_hash (skb, map, key, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t72\" } } */"}, {"sha": "0ebb315d087d0c4ab5b41e239c5ba9e9eee6d5d0", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-redirect-map.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t key;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_sk_redirect_map (ctx, map, key, flags);\n+  ret = bpf_sk_redirect_map (ctx, map, key, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t52\" } } */"}, {"sha": "620dbe9a2ba4ba12d6d87c6ae8504980ff6a389d", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-release.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *sock;\n   \n-  ret = __builtin_bpf_helper_sk_release (sock);\n+  ret = bpf_sk_release (sock);\n }\n \n /* { dg-final { scan-assembler \"call\\t86\" } } */"}, {"sha": "0505fc95f66602c2ffd71210b75d2bddd4807a21", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-select-reuseport.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *reuse, *map, *key;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_sk_select_reuseport (reuse, map,\n+  ret = bpf_sk_select_reuseport (reuse, map,\n \t\t\t\t\t\t  key, flags);\n }\n "}, {"sha": "a25421f00179e794dd95c64f760781b0b61423fc", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-storage-delete.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *map, *sk;\n   \n-  ret = __builtin_bpf_helper_sk_storage_delete (map, sk);\n+  ret = bpf_sk_storage_delete (map, sk);\n }\n \n /* { dg-final { scan-assembler \"call\\t108\" } } */"}, {"sha": "6d047dd99f4ec9479c94f418422872fb2a6aab10", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-storage-get.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,8 +11,7 @@ foo ()\n   void *map, *sk, *value;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_sk_storage_get (map, sk, value,\n-\t\t\t\t\t     flags);\n+  ret = bpf_sk_storage_get (map, sk, value, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t107\" } } */"}, {"sha": "6b1eef9c8cf4fc2012a6cd0a5c49132038ab3629", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-adjust-room.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -11,7 +13,7 @@ foo ()\n   uint32_t mode;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_skb_adjust_room (skb, len_diff, mode, flags);\n+  ret = bpf_skb_adjust_room (skb, len_diff, mode, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t50\" } } */"}, {"sha": "7ad08c1758273642c5347e1e4f9a47ccc90b5e31", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-cgroup-id.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   uint64_t ret;\n   void *skb;\n   \n-  ret = __builtin_bpf_helper_skb_cgroup_id (skb);\n+  ret = bpf_skb_cgroup_id (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t79\" } } */"}, {"sha": "f93cefab854ab94868598e11e68dfc38975e0ed0", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-head.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t len;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_skb_change_head (skb, len, flags);\n+  ret = bpf_skb_change_head (skb, len, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t43\" } } */"}, {"sha": "a41d197fd522954ee39610427ddedff187845fc9", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-proto.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   int16_t proto;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_change_proto (skb, proto, flags);\n+  ret = bpf_skb_change_proto (skb, proto, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t31\" } } */"}, {"sha": "2bfc5979a9220c351919875ffc2417fb1ab44ecb", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-tail.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t len;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_change_tail (skb, len, flags);\n+  ret = bpf_skb_change_tail (skb, len, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t38\" } } */"}, {"sha": "46a94213fb34fcc8a735fdf32e4939b9a22a6599", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-type.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   uint32_t type;\n \n-  ret = __builtin_bpf_helper_skb_change_type (skb, type);\n+  ret = bpf_skb_change_type (skb, type);\n }\n \n /* { dg-final { scan-assembler \"call\\t32\" } } */"}, {"sha": "c028ec1d6bbc3f0ca115e80cff1e9000bb96144a", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-ecn-set-ce.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *skb;\n \n-  ret = __builtin_bpf_helper_skb_ecn_set_ce (skb);\n+  ret = bpf_skb_ecn_set_ce (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t97\" } } */"}, {"sha": "aad847256ecd6dd79db77c72f072810b1c81f975", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-tunnel-key.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t size;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_get_tunnel_key (skb, key, size, flags);\n+  ret = bpf_skb_get_tunnel_key (skb, key, size, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t20\" } } */"}, {"sha": "0b39ad728a1c8b61cb6b97c9d9a6288977d9a0e4", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-tunnel-opt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint8_t *opt;\n   uint32_t size;\n \n-  ret = __builtin_bpf_helper_skb_get_tunnel_opt (skb, opt, size);\n+  ret = bpf_skb_get_tunnel_opt (skb, opt, size);\n }\n \n /* { dg-final { scan-assembler \"call\\t29\" } } */"}, {"sha": "de83d91849e5ec897316cee58167aedc381fb886", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-xfrm-state.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,8 @@ foo ()\n   uint32_t index, size;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_get_xfrm_state (skb, index,\n-\t\t\t\t\t\t xfrm_state, size, flags);\n+  ret = bpf_skb_get_xfrm_state (skb, index,\n+\t\t\t\txfrm_state, size, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t66\" } } */"}, {"sha": "cd8c2c2437e30bbd8f1608514b0c780769531278", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-load-bytes-relative.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,9 +11,9 @@ foo ()\n   void *skb, *to;\n   uint32_t offset, len, start_header;\n \n-  ret = __builtin_bpf_helper_skb_load_bytes_relative (skb, offset,\n-\t\t\t\t\t\t      to, len,\n-\t\t\t\t\t\t      start_header);\n+  ret = bpf_skb_load_bytes_relative (skb, offset,\n+\t\t\t\t     to, len,\n+\t\t\t\t     start_header);\n }\n \n /* { dg-final { scan-assembler \"call\\t68\" } } */"}, {"sha": "1e4612a5c9851f3827654cc2fe48595645409b2b", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-load-bytes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb, *to;\n   uint32_t offset, len;\n \n-  ret = __builtin_bpf_helper_skb_load_bytes (skb, offset, to, len);\n+  ret = bpf_skb_load_bytes (skb, offset, to, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t26\" } } */"}, {"sha": "579d8562e3d2b26c08da97f0cc28cea49323cc3b", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-pull-data.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   uint32_t len;\n \n-  ret = __builtin_bpf_helper_skb_pull_data (skb, len);\n+  ret = bpf_skb_pull_data (skb, len);\n }\n \n /* { dg-final { scan-assembler \"call\\t39\" } } */"}, {"sha": "85754fdb88a146bcd0bae6bbf7fce15ed1b3d384", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-set-tunnel-key.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint32_t size;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_set_tunnel_key (skb, key, size, flags);\n+  ret = bpf_skb_set_tunnel_key (skb, key, size, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t21\" } } */"}, {"sha": "591eb48d6adee561dbb8450ea1bfe226b2233147", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-set-tunnel-opt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   uint8_t *opt;\n   uint32_t size;\n \n-  ret = __builtin_bpf_helper_skb_set_tunnel_opt (skb, opt, size);\n+  ret = bpf_skb_set_tunnel_opt (skb, opt, size);\n }\n \n /* { dg-final { scan-assembler \"call\\t30\" } } */"}, {"sha": "17f8e02e55c5d11b2b2a607e6dfd72284659db51", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-store-bytes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -12,7 +14,7 @@ foo ()\n   uint32_t len;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_skb_store_bytes (skb, offset, from, len, flags);\n+  ret = bpf_skb_store_bytes (skb, offset, from, len, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t9\" } } */"}, {"sha": "72adfcd9f3ffe14b70c4b538e7f78de24eb2eeac", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-under-cgroup.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb, *map;\n   uint32_t index;\n \n-  ret = __builtin_bpf_helper_skb_under_cgroup (skb, map, index);\n+  ret = bpf_skb_under_cgroup (skb, map, index);\n }\n \n /* { dg-final { scan-assembler \"call\\t33\" } } */"}, {"sha": "4d5b347d6dad8cf7b1e15949c38943019c7d5be0", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-vlan-pop.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   int ret;\n   void *skb;\n \n-  ret = __builtin_bpf_helper_skb_vlan_pop (skb);\n+  ret = bpf_skb_vlan_pop (skb);\n }\n \n /* { dg-final { scan-assembler \"call\\t19\" } } */"}, {"sha": "1a43bd42e07a31809a04583062043979ef8e7d8b", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-vlan-push.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,7 +12,7 @@ foo ()\n   int16_t vlan_proto;\n   uint16_t vlan_tci;\n \n-  ret = __builtin_bpf_helper_skb_vlan_push (skb, vlan_proto, vlan_tci);\n+  ret = bpf_skb_vlan_push (skb, vlan_proto, vlan_tci);\n }\n \n /* { dg-final { scan-assembler \"call\\t18\" } } */"}, {"sha": "8ed2d46c81390aa1f467b569e37ce2f4e504d120", "filename": "gcc/testsuite/gcc.target/bpf/helper-skc-lookup-tcp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,8 @@ foo ()\n   uint32_t tuple_size;\n   uint64_t netns, flags;\n \n-  ret = __builtin_bpf_helper_skc_lookup_tcp (ctx, tuple,\n-\t\t\t\t\t     tuple_size, netns, flags);\n+  ret = bpf_skc_lookup_tcp (ctx, tuple,\n+\t\t\t    tuple_size, netns, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t99\" } } */"}, {"sha": "81ff4dd7e8b0658fe7e22990a5465309b0de6282", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-hash-update.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skops, *map, *key;\n   uint64_t flags;\n \n-  ret = __builtin_bpf_helper_sock_hash_update (skops, map, key,\n+  ret = bpf_sock_hash_update (skops, map, key,\n \t\t\t\t\t       flags);\n }\n "}, {"sha": "fbb5d7556d464209b0eef9870c9af9185b0bb30c", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-map-update.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skops, *map, *key;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_sock_map_update (skops, map, key,\n+  ret = bpf_sock_map_update (skops, map, key,\n \t\t\t\t\t      flags);\n }\n "}, {"sha": "4efd69a554348d6f62e5a3564507a98012c6b4f5", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-ops-cb-flags-set.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *bpf_sock;\n   int argval;\n   \n-  ret = __builtin_bpf_helper_sock_ops_cb_flags_set (bpf_sock,\n+  ret = bpf_sock_ops_cb_flags_set (bpf_sock,\n \t\t\t\t\t\t    argval);\n }\n "}, {"sha": "8358e88fd9e4fb9ffadd3fa981c4c9cd0ed83c94", "filename": "gcc/testsuite/gcc.target/bpf/helper-spin-lock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *lock;\n \n-  __builtin_bpf_helper_spin_lock (lock);\n+  bpf_spin_lock (lock);\n }\n \n /* { dg-final { scan-assembler \"call\\t93\" } } */"}, {"sha": "400695f7aaefd06b00451c8d1f4e509591c501b5", "filename": "gcc/testsuite/gcc.target/bpf/helper-spin-unlock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *lock;\n \n-  __builtin_bpf_helper_spin_unlock (lock);\n+  bpf_spin_unlock (lock);\n }\n \n /* { dg-final { scan-assembler \"call\\t94\" } } */"}, {"sha": "53830126d45b16396f58228cf736926d36ad3a41", "filename": "gcc/testsuite/gcc.target/bpf/helper-strtol.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -12,7 +14,7 @@ foo ()\n   uint64_t flags;\n   size_t buf_len;\n   \n-  ret = __builtin_bpf_helper_strtol (buf, buf_len, flags, &res);\n+  ret = bpf_strtol (buf, buf_len, flags, &res);\n }\n \n /* { dg-final { scan-assembler \"call\\t105\" } } */"}, {"sha": "f648a2bb54cdde2e2bb0a6c0646097dec4a32bac", "filename": "gcc/testsuite/gcc.target/bpf/helper-strtoul.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -12,7 +14,7 @@ foo ()\n   uint64_t flags;\n   size_t buf_len;\n   \n-  ret = __builtin_bpf_helper_strtoul (buf, buf_len, flags, &res);\n+  ret = bpf_strtoul (buf, buf_len, flags, &res);\n }\n \n /* { dg-final { scan-assembler \"call\\t106\" } } */"}, {"sha": "55a31e4f55c7224b37dba063bff31e9c0a9e4162", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-current-value.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,7 @@ foo ()\n   void *ctx, *buf;\n   size_t buf_len;\n   \n-  ret = __builtin_bpf_helper_sysctl_get_current_value (ctx, buf,\n-\t\t\t\t\t\t       buf_len);\n+  ret = bpf_sysctl_get_current_value (ctx, buf, buf_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t102\" } } */"}, {"sha": "bacb288c4a982fe0e264a4d04a4d919149ff959f", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-name.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -11,8 +13,7 @@ foo ()\n   size_t buf_len;\n   uint64_t flags;\n   \n-  ret = __builtin_bpf_helper_sysctl_get_name (ctx, buf,\n-\t\t\t\t\t      buf_len, flags);\n+  ret = bpf_sysctl_get_name (ctx, buf, buf_len, flags);\n }\n \n /* { dg-final { scan-assembler \"call\\t101\" } } */"}, {"sha": "5ad364422803a0b5ff2d47417cbe7f7c287bd064", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-new-value.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,7 @@ foo ()\n   void *ctx, *buf;\n   size_t buf_len;\n   \n-  ret = __builtin_bpf_helper_sysctl_get_new_value (ctx, buf,\n-\t\t\t\t\t\t   buf_len);\n+  ret = bpf_sysctl_get_new_value (ctx, buf, buf_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t103\" } } */"}, {"sha": "2b3b3af63559945910cc4124de5614671f0c5ed1", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-set-new-value.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,7 +1,9 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n #include <stddef.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -10,8 +12,7 @@ foo ()\n   void *ctx, *buf;\n   size_t buf_len;\n   \n-  ret = __builtin_bpf_helper_sysctl_set_new_value (ctx, buf,\n-\t\t\t\t\t\t   buf_len);\n+  ret = bpf_sysctl_set_new_value (ctx, buf, buf_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t104\" } } */"}, {"sha": "0f35b00a78677ffe792ee74eded1bad4948ebc05", "filename": "gcc/testsuite/gcc.target/bpf/helper-tail-call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,14 +1,17 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n+  int ret;\n   void *ctx, *prog_array_map;\n   uint32_t index;\n \n-  __builtin_bpf_helper_tail_call (ctx, prog_array_map, index);\n+  ret = bpf_tail_call (ctx, prog_array_map, index);\n }\n \n /* { dg-final { scan-assembler \"call\\t12\" } } */"}, {"sha": "bada09f3546432f4c13399de1aa0a68271cb31da", "filename": "gcc/testsuite/gcc.target/bpf/helper-tcp-check-syncookie.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,9 +11,9 @@ foo ()\n   void *sk, *iph, *th;\n   uint32_t iph_len, th_len;\n   \n-  ret = __builtin_bpf_helper_tcp_check_syncookie (sk, iph,\n-\t\t\t\t\t\t  iph_len,\n-\t\t\t\t\t\t  th, th_len);\n+  ret = bpf_tcp_check_syncookie (sk, iph,\n+\t\t\t\t iph_len,\n+\t\t\t\t th, th_len);\n }\n \n /* { dg-final { scan-assembler \"call\\t100\" } } */"}, {"sha": "cd6d995f5bf329ab133179de1efba34c52b64f67", "filename": "gcc/testsuite/gcc.target/bpf/helper-tcp-sock.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n {\n   void *ret, *sk;\n \n-  ret = __builtin_bpf_helper_tcp_sock (sk);\n+  ret = bpf_tcp_sock (sk);\n }\n \n /* { dg-final { scan-assembler \"call\\t96\" } } */"}, {"sha": "135ae295d84c0362adf8d4685b3b32fb20963df3", "filename": "gcc/testsuite/gcc.target/bpf/helper-trace-printk.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,4 +1,7 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <bpf-helpers.h>\n \n char *map () { return 0; }\n \n@@ -7,7 +10,7 @@ foo ()\n {\n   int ret;\n \n-  ret = __builtin_bpf_helper_trace_printk (\"foo %d %d\", sizeof (\"foo %d %d\"), 10, 20);\n+  ret = bpf_trace_printk (\"foo %d %d\", sizeof (\"foo %d %d\"), 10, 20);\n }\n \n /* { dg-final { scan-assembler \"call\\t6\" } } */"}, {"sha": "352d9d68023bbc9d49787bb68b5377d933775f87", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-head.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *xdp_md;\n   int delta;\n   \n-  ret = __builtin_bpf_helper_xdp_adjust_head (xdp_md, delta);\n+  ret = bpf_xdp_adjust_head (xdp_md, delta);\n }\n \n /* { dg-final { scan-assembler \"call\\t44\" } } */"}, {"sha": "ef5da4b10e29c12e8afe4198d356ae7d8a744575", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-meta.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *xdp_md;\n   int delta;\n   \n-  ret = __builtin_bpf_helper_xdp_adjust_meta (xdp_md, delta);\n+  ret = bpf_xdp_adjust_meta (xdp_md, delta);\n }\n \n /* { dg-final { scan-assembler \"call\\t54\" } } */"}, {"sha": "db55168144bc73253a056e6f9de6579aeea6094f", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-tail.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +10,7 @@ foo ()\n   void *xdp_md;\n   int delta;\n \n-  ret = __builtin_bpf_helper_xdp_adjust_tail (xdp_md, delta);\n+  ret = bpf_xdp_adjust_tail (xdp_md, delta);\n }\n \n /* { dg-final { scan-assembler \"call\\t65\" } } */"}, {"sha": "8e88c93cac964fd77f5c5993311388bb2baecfb1", "filename": "gcc/testsuite/gcc.target/bpf/skb-ancestor-cgroup-id.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af30b83b50953fbbe671d93d44ea6ac2f7a50ce9/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c?ref=af30b83b50953fbbe671d93d44ea6ac2f7a50ce9", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n \n #include <stdint.h>\n+#include <bpf-helpers.h>\n \n void\n foo ()\n@@ -9,7 +11,7 @@ foo ()\n   void *skb;\n   int ancestor_level;\n   \n-  ret = __builtin_bpf_helper_skb_ancestor_cgroup_id (skb,\n+  ret = bpf_skb_ancestor_cgroup_id (skb,\n \t\t\t\t\t\t     ancestor_level);\n }\n "}]}