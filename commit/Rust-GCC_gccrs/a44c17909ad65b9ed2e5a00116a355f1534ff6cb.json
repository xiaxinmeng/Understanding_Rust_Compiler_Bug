{"sha": "a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0YzE3OTA5YWQ2NWI5ZWQyZTVhMDAxMTZhMzU1ZjE1MzRmZjZjYg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-28T11:33:54Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-28T11:33:54Z"}, "message": "Cleanup libgomp's coalesce chunk data structures\n\n\tlibgomp/\n\t* target.c (struct gomp_coalesce_chunk): New structure.\n\t(struct gomp_coalesce_buf): Update the chunks member to use that\n\ttype.  Adjust all users.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r267446", "tree": {"sha": "bbca32bf44f8d23b66bf988b0d6d1e7c171bd643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbca32bf44f8d23b66bf988b0d6d1e7c171bd643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44c17909ad65b9ed2e5a00116a355f1534ff6cb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb33bf0a0a4914eb2a88614cf4041069843018d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb33bf0a0a4914eb2a88614cf4041069843018d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb33bf0a0a4914eb2a88614cf4041069843018d6"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "5b014b032beb78b82836ac3cef7507fb295de0f2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44c17909ad65b9ed2e5a00116a355f1534ff6cb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44c17909ad65b9ed2e5a00116a355f1534ff6cb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "patch": "@@ -1,3 +1,10 @@\n+2018-12-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* target.c (struct gomp_coalesce_chunk): New structure.\n+\t(struct gomp_coalesce_buf): Update the chunks member to use that\n+\ttype.  Adjust all users.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-c-c++-common/pr85381-2.c: New test."}, {"sha": "0b4e0107f75d6a1a335fe97668cc8401aab194f5", "filename": "libgomp/target.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44c17909ad65b9ed2e5a00116a355f1534ff6cb/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44c17909ad65b9ed2e5a00116a355f1534ff6cb/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=a44c17909ad65b9ed2e5a00116a355f1534ff6cb", "patch": "@@ -180,16 +180,22 @@ gomp_device_copy (struct gomp_device_descr *devicep,\n /* Infrastructure for coalescing adjacent or nearly adjacent (in device addresses)\n    host to device memory transfers.  */\n \n+struct gomp_coalesce_chunk\n+{\n+  /* The starting and ending point of a coalesced chunk of memory.  */\n+  size_t start, end;\n+};\n+\n struct gomp_coalesce_buf\n {\n   /* Buffer into which gomp_copy_host2dev will memcpy data and from which\n      it will be copied to the device.  */\n   void *buf;\n   struct target_mem_desc *tgt;\n-  /* Array with offsets, chunks[2 * i] is the starting offset and\n-     chunks[2 * i + 1] ending offset relative to tgt->tgt_start device address\n+  /* Array with offsets, chunks[i].start is the starting offset and\n+     chunks[i].end ending offset relative to tgt->tgt_start device address\n      of chunks which are to be copied to buf and later copied to device.  */\n-  size_t *chunks;\n+  struct gomp_coalesce_chunk *chunks;\n   /* Number of chunks in chunks array, or -1 if coalesce buffering should not\n      be performed.  */\n   long chunk_cnt;\n@@ -222,14 +228,14 @@ gomp_coalesce_buf_add (struct gomp_coalesce_buf *cbuf, size_t start, size_t len)\n     {\n       if (cbuf->chunk_cnt < 0)\n \treturn;\n-      if (start < cbuf->chunks[2 * cbuf->chunk_cnt - 1])\n+      if (start < cbuf->chunks[cbuf->chunk_cnt - 1].end)\n \t{\n \t  cbuf->chunk_cnt = -1;\n \t  return;\n \t}\n-      if (start < cbuf->chunks[2 * cbuf->chunk_cnt - 1] + MAX_COALESCE_BUF_GAP)\n+      if (start < cbuf->chunks[cbuf->chunk_cnt - 1].end + MAX_COALESCE_BUF_GAP)\n \t{\n-\t  cbuf->chunks[2 * cbuf->chunk_cnt - 1] = start + len;\n+\t  cbuf->chunks[cbuf->chunk_cnt - 1].end = start + len;\n \t  cbuf->use_cnt++;\n \t  return;\n \t}\n@@ -239,8 +245,8 @@ gomp_coalesce_buf_add (struct gomp_coalesce_buf *cbuf, size_t start, size_t len)\n       if (cbuf->use_cnt == 1)\n \tcbuf->chunk_cnt--;\n     }\n-  cbuf->chunks[2 * cbuf->chunk_cnt] = start;\n-  cbuf->chunks[2 * cbuf->chunk_cnt + 1] = start + len;\n+  cbuf->chunks[cbuf->chunk_cnt].start = start;\n+  cbuf->chunks[cbuf->chunk_cnt].end = start + len;\n   cbuf->chunk_cnt++;\n   cbuf->use_cnt = 1;\n }\n@@ -271,20 +277,20 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n   if (cbuf)\n     {\n       uintptr_t doff = (uintptr_t) d - cbuf->tgt->tgt_start;\n-      if (doff < cbuf->chunks[2 * cbuf->chunk_cnt - 1])\n+      if (doff < cbuf->chunks[cbuf->chunk_cnt - 1].end)\n \t{\n \t  long first = 0;\n \t  long last = cbuf->chunk_cnt - 1;\n \t  while (first <= last)\n \t    {\n \t      long middle = (first + last) >> 1;\n-\t      if (cbuf->chunks[2 * middle + 1] <= doff)\n+\t      if (cbuf->chunks[middle].end <= doff)\n \t\tfirst = middle + 1;\n-\t      else if (cbuf->chunks[2 * middle] <= doff)\n+\t      else if (cbuf->chunks[middle].start <= doff)\n \t\t{\n-\t\t  if (doff + sz > cbuf->chunks[2 * middle + 1])\n+\t\t  if (doff + sz > cbuf->chunks[middle].end)\n \t\t    gomp_fatal (\"internal libgomp cbuf error\");\n-\t\t  memcpy ((char *) cbuf->buf + (doff - cbuf->chunks[0]),\n+\t\t  memcpy ((char *) cbuf->buf + (doff - cbuf->chunks[0].start),\n \t\t\t  h, sz);\n \t\t  return;\n \t\t}\n@@ -510,8 +516,8 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n   cbuf.buf = NULL;\n   if (mapnum > 1 || pragma_kind == GOMP_MAP_VARS_TARGET)\n     {\n-      cbuf.chunks\n-\t= (size_t *) gomp_alloca ((2 * mapnum + 2) * sizeof (size_t));\n+      size_t chunks_size = (mapnum + 1) * sizeof (struct gomp_coalesce_chunk);\n+      cbuf.chunks = (struct gomp_coalesce_chunk *) gomp_alloca (chunks_size);\n       cbuf.chunk_cnt = 0;\n     }\n   if (pragma_kind == GOMP_MAP_VARS_TARGET)\n@@ -521,8 +527,8 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n       tgt_size = mapnum * sizeof (void *);\n       cbuf.chunk_cnt = 1;\n       cbuf.use_cnt = 1 + (mapnum > 1);\n-      cbuf.chunks[0] = 0;\n-      cbuf.chunks[1] = tgt_size;\n+      cbuf.chunks[0].start = 0;\n+      cbuf.chunks[0].end = tgt_size;\n     }\n \n   gomp_mutex_lock (&devicep->lock);\n@@ -707,7 +713,7 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n       if (cbuf.chunk_cnt > 0)\n \t{\n \t  cbuf.buf\n-\t    = malloc (cbuf.chunks[2 * cbuf.chunk_cnt - 1] - cbuf.chunks[0]);\n+\t    = malloc (cbuf.chunks[cbuf.chunk_cnt - 1].end - cbuf.chunks[0].start);\n \t  if (cbuf.buf)\n \t    {\n \t      cbuf.tgt = tgt;\n@@ -983,10 +989,14 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n     {\n       long c = 0;\n       for (c = 0; c < cbuf.chunk_cnt; ++c)\n-\tgomp_copy_host2dev (devicep, (void *) (tgt->tgt_start + cbuf.chunks[2 * c]),\n-\t\t\t    (char *) cbuf.buf + (cbuf.chunks[2 * c] - cbuf.chunks[0]),\n-\t\t\t    cbuf.chunks[2 * c + 1] - cbuf.chunks[2 * c], NULL);\n+\tgomp_copy_host2dev (devicep,\n+\t\t\t    (void *) (tgt->tgt_start + cbuf.chunks[c].start),\n+\t\t\t    (char *) cbuf.buf + (cbuf.chunks[c].start\n+\t\t\t\t\t\t - cbuf.chunks[0].start),\n+\t\t\t    cbuf.chunks[c].end - cbuf.chunks[c].start, NULL);\n       free (cbuf.buf);\n+      cbuf.buf = NULL;\n+      cbufp = NULL;\n     }\n \n   /* If the variable from \"omp target enter data\" map-list was already mapped,"}]}