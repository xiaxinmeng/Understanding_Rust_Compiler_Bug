{"sha": "cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjM2I4ODM0M2UzYTMwNmMzN2RkZWM5ZjZiNTQ2ZDQxMmM2ZjNmOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-05-18T08:42:15Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-05-18T08:42:15Z"}, "message": "Support lower and upper limit for -fdbg-cnt flag.\n\n2018-05-18  Martin Liska  <mliska@suse.cz>\n\n\t* dbgcnt.c (limit_low): Renamed from limit.\n\t(limit_high): New variable.\n\t(dbg_cnt_is_enabled): Check for upper limit.\n\t(dbg_cnt): Adjust dumping.\n\t(dbg_cnt_set_limit_by_index): Add new argument for high\n\tvalue.\n\t(dbg_cnt_set_limit_by_name): Likewise.\n\t(dbg_cnt_process_single_pair): Parse new format.\n\t(dbg_cnt_process_opt): Use strtok.\n\t(dbg_cnt_list_all_counters): Remove 'value' and add\n\t'limit_high'.\n\t* doc/invoke.texi: Document changes.\n2018-05-18  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/ipa/ipa-icf-39.c: New test.\n\t* gcc.dg/pr68766.c: Adjust pruned output.\n\nFrom-SVN: r260349", "tree": {"sha": "71e9d09ab096be24e9f12e5dbbde3ec6630083c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71e9d09ab096be24e9f12e5dbbde3ec6630083c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c566cc9f7847785bc709daaa3301649f2f03aef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c566cc9f7847785bc709daaa3301649f2f03aef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c566cc9f7847785bc709daaa3301649f2f03aef9"}], "stats": {"total": 195, "additions": 147, "deletions": 48}, "files": [{"sha": "dc5483625df5159126f84045bdd3471680bb816d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -1,3 +1,18 @@\n+2018-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* dbgcnt.c (limit_low): Renamed from limit.\n+\t(limit_high): New variable.\n+\t(dbg_cnt_is_enabled): Check for upper limit.\n+\t(dbg_cnt): Adjust dumping.\n+\t(dbg_cnt_set_limit_by_index): Add new argument for high\n+\tvalue.\n+\t(dbg_cnt_set_limit_by_name): Likewise.\n+\t(dbg_cnt_process_single_pair): Parse new format.\n+\t(dbg_cnt_process_opt): Use strtok.\n+\t(dbg_cnt_list_all_counters): Remove 'value' and add\n+\t'limit_high'.\n+\t* doc/invoke.texi: Document changes.\n+\n 2018-05-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/sourcebuild.texi (scalar_all_fma): Document."}, {"sha": "13ab5c65d436955edf4095746bfdce7735890b85", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -1171,7 +1171,7 @@ List all available debugging counters with their limits and counts.\n \n fdbg-cnt=\n Common RejectNegative Joined Var(common_deferred_options) Defer\n--fdbg-cnt=<counter>:<limit>[,<counter>:<limit>,...]\tSet the debug counter limit.\n+-fdbg-cnt=<counter>[:<lower_limit>]:<upper_limit>[,<counter>:...]\tSet the debug counter limit.\n \n fdebug-prefix-map=\n Common Joined RejectNegative Var(common_deferred_options) Defer"}, {"sha": "ddb0e8e76d9b429ab08aa04640133aa09fa081fb", "filename": "gcc/dbgcnt.c", "status": "modified", "additions": 84, "deletions": 41, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fdbgcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fdbgcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.c?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -41,53 +41,84 @@ static struct string2counter_map map[debug_counter_number_of_counters] =\n #undef DEBUG_COUNTER\n \n #define DEBUG_COUNTER(a) UINT_MAX,\n-static unsigned int limit[debug_counter_number_of_counters] =\n+static unsigned int limit_high[debug_counter_number_of_counters] =\n {\n #include \"dbgcnt.def\"\n };\n #undef DEBUG_COUNTER\n \n+static unsigned int limit_low[debug_counter_number_of_counters];\n+\n static unsigned int count[debug_counter_number_of_counters];\n \n bool\n dbg_cnt_is_enabled (enum debug_counter index)\n {\n-  return count[index] <= limit[index];\n+  unsigned v = count[index];\n+  return v > limit_low[index] && v <= limit_high[index];\n }\n \n bool\n dbg_cnt (enum debug_counter index)\n {\n   count[index]++;\n-  if (dump_file && count[index] == limit[index])\n-    fprintf (dump_file, \"***dbgcnt: limit reached for %s.***\\n\",\n-\t     map[index].name);\n+\n+  if (dump_file)\n+    {\n+      /* Do not print the info for default lower limit.  */\n+      if (count[index] == limit_low[index] && limit_low[index] > 0)\n+\tfprintf (dump_file, \"***dbgcnt: lower limit %d reached for %s.***\\n\",\n+\t\t limit_low[index], map[index].name);\n+      else if (count[index] == limit_high[index])\n+\tfprintf (dump_file, \"***dbgcnt: upper limit %d reached for %s.***\\n\",\n+\t\t limit_high[index], map[index].name);\n+    }\n \n   return dbg_cnt_is_enabled (index);\n }\n \n-\n static void\n-dbg_cnt_set_limit_by_index (enum debug_counter index, int value)\n+dbg_cnt_set_limit_by_index (enum debug_counter index, int low, int high)\n {\n-  limit[index] = value;\n+  limit_low[index] = low;\n+  limit_high[index] = high;\n \n-  fprintf (stderr, \"dbg_cnt '%s' set to %d\\n\", map[index].name, value);\n+  fprintf (stderr, \"dbg_cnt '%s' set to %d-%d\\n\", map[index].name, low, high);\n }\n \n static bool\n-dbg_cnt_set_limit_by_name (const char *name, int len, int value)\n+dbg_cnt_set_limit_by_name (const char *name, int low, int high)\n {\n+  if (high < low)\n+    {\n+      error (\"-fdbg-cnt=%s:%d:%d has smaller upper limit than the lower\",\n+\t     name, low, high);\n+      return false;\n+    }\n+\n+  if (low < 0)\n+    {\n+      error (\"Lower limit %d of -fdbg-cnt=%s must be a non-negative number\", low,\n+\t     name);\n+      return false;\n+    }\n+\n+  if (high < 0)\n+    {\n+      error (\"Upper limit %d of -fdbg-cnt=%s must be a non-negative number\", high,\n+\t     name);\n+      return false;\n+    }\n+\n   int i;\n   for (i = debug_counter_number_of_counters - 1; i >= 0; i--)\n-    if (strncmp (map[i].name, name, len) == 0\n-        && map[i].name[len] == '\\0')\n+    if (strcmp (map[i].name, name) == 0)\n       break;\n \n   if (i < 0)\n     return false;\n \n-  dbg_cnt_set_limit_by_index ((enum debug_counter) i, value);\n+  dbg_cnt_set_limit_by_index ((enum debug_counter) i, low, high);\n   return true;\n }\n \n@@ -96,42 +127,53 @@ dbg_cnt_set_limit_by_name (const char *name, int len, int value)\n    Returns NULL if there's no valid pair is found.\n    Otherwise returns a pointer to the end of the pair. */\n \n-static const char *\n+static bool\n dbg_cnt_process_single_pair (const char *arg)\n {\n-   const char *colon = strchr (arg, ':');\n-   char *endptr = NULL;\n-   int value;\n-\n-   if (colon == NULL)\n-     return NULL;\n-\n-   value = strtol (colon + 1, &endptr, 10);\n-\n-   if (endptr != NULL && endptr != colon + 1\n-       && dbg_cnt_set_limit_by_name (arg, colon - arg, value))\n-     return endptr;\n-\n-   return NULL;\n+  char *str = xstrdup (arg);\n+  char *name = strtok (str, \":\");\n+  char *value1 = strtok (NULL, \":\");\n+  char *value2 = strtok (NULL, \":\");\n+\n+  int high, low;\n+\n+  if (value1 == NULL)\n+    return NULL;\n+\n+  if (value2 == NULL)\n+    {\n+      low = 0;\n+      high = strtol (value1, NULL, 10);\n+    }\n+  else\n+    {\n+      low = strtol (value1, NULL, 10);\n+      high = strtol (value2, NULL, 10);\n+    }\n+\n+   return dbg_cnt_set_limit_by_name (name, low, high);\n }\n \n void\n dbg_cnt_process_opt (const char *arg)\n {\n-   const char *start = arg;\n-   const char *next;\n+  char *str = xstrdup (arg);\n+  const char *next = strtok (str, \",\");\n+  unsigned int start = 0;\n+\n    do {\n-     next = dbg_cnt_process_single_pair (arg);\n-     if (next == NULL)\n+     if (!dbg_cnt_process_single_pair (arg))\n        break;\n-   } while (*next == ',' && (arg = next + 1));\n+     start += strlen (arg) + 1;\n+     next = strtok (NULL, \",\");\n+   } while (next != NULL);\n \n-   if (next == NULL || *next != 0)\n+   if (next != NULL)\n      {\n-       char *buffer = XALLOCAVEC (char, arg - start + 2);\n-       sprintf (buffer, \"%*c\", (int)(1 + (arg - start)), '^');\n+       char *buffer = XALLOCAVEC (char, start + 2);\n+       sprintf (buffer, \"%*c\", start + 1, '^');\n        error (\"cannot find a valid counter:value pair:\");\n-       error (\"-fdbg-cnt=%s\", start);\n+       error (\"-fdbg-cnt=%s\", next);\n        error (\"          %s\", buffer);\n      }\n }\n@@ -142,10 +184,11 @@ void\n dbg_cnt_list_all_counters (void)\n {\n   int i;\n-  printf (\"  %-30s %-5s %-5s\\n\", \"counter name\",  \"limit\", \"value\");\n-  printf (\"----------------------------------------------\\n\");\n+  printf (\"  %-32s %-11s %-12s\\n\", \"counter name\",  \"low limit\",\n+\t  \"high limit\");\n+  printf (\"-----------------------------------------------------------------\\n\");\n   for (i = 0; i < debug_counter_number_of_counters; i++)\n-    printf (\"  %-30s %5d %5u\\n\",\n-            map[i].name, limit[map[i].counter], count[map[i].counter]);\n+    printf (\"  %-30s %11u %12u\\n\",\n+\t    map[i].name, limit_low[map[i].counter], limit_high[map[i].counter]);\n   printf (\"\\n\");\n }"}, {"sha": "8a3b9c1faa1401aff3c222731e9dc561e9698aa4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -14331,14 +14331,17 @@ Print the name and the counter upper bound for all debug counters.\n \n @item -fdbg-cnt=@var{counter-value-list}\n @opindex fdbg-cnt\n-Set the internal debug counter upper bound.  @var{counter-value-list}\n-is a comma-separated list of @var{name}:@var{value} pairs\n-which sets the upper bound of each debug counter @var{name} to @var{value}.\n+Set the internal debug counter lower and upper bound.  @var{counter-value-list}\n+is a comma-separated list of @var{name}:@var{lower_bound}:@var{upper_bound}\n+tuples which sets the lower and the upper bound of each debug\n+counter @var{name}.  The @var{lower_bound} is optional and is zero\n+initialized if not set.\n All debug counters have the initial upper bound of @code{UINT_MAX};\n thus @code{dbg_cnt} returns true always unless the upper bound\n is set by this option.\n-For example, with @option{-fdbg-cnt=dce:10,tail_call:0},\n-@code{dbg_cnt(dce)} returns true only for first 10 invocations.\n+For example, with @option{-fdbg-cnt=dce:2:4,tail_call:10},\n+@code{dbg_cnt(dce)} returns true only for third and fourth invocation.\n+For @code{dbg_cnt(tail_call)} true is returned for first 10 invocations.\n \n @item -print-file-name=@var{library}\n @opindex print-file-name"}, {"sha": "01b897a33e4dc8dc0233f8522362cad70a7179c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -1,3 +1,8 @@\n+2018-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-icf-39.c: New test.\n+\t* gcc.dg/pr68766.c: Adjust pruned output.\n+\n 2018-05-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* lib/target-supports.exp (check_effective_target_scalar_all_fma):"}, {"sha": "aa7c28706d3721a6655079efa50640f6f55ed20f", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-39.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-icf -fmerge-all-constants -fdbg-cnt=merged_ipa_icf:1:3\"  } */\n+/* { dg-prune-output \"dbg_cnt 'merged_ipa_icf' set to 1-3\" } */\n+\n+static int a;\n+static int b;\n+static const int c = 2;\n+static const int d = 2;\n+static char * e = \"test\";\n+static char * f = \"test\";\n+static int g[3]={1,2,3};\n+static int h[3]={1,2,3};\n+static const int *i=&c;\n+static const int *j=&c;\n+static const int *k=&d;\n+int t(int tt)\n+{\n+  switch (tt)\n+  {\n+    case 1: return a;\n+    case 2: return b;\n+    case 3: return c;\n+    case 4: return d;\n+    case 5: return e[1];\n+    case 6: return f[1];\n+    case 7: return g[1];\n+    case 8: return h[1];\n+    case 9: return i[0];\n+    case 10: return j[0];\n+    case 11: return k[0];\n+  }\n+}\n+/* { dg-final { scan-ipa-dump-times \"Unified;\" 2 \"icf\"  } } */"}, {"sha": "83f0e14b7d279a38e7c194ae9e9d7db89aa3e241", "filename": "gcc/testsuite/gcc.dg/pr68766.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc3b88343e3a306c37ddec9f6b546d412c6f3f8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c?ref=cdc3b88343e3a306c37ddec9f6b546d412c6f3f8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdbg-cnt=vect_loop:1\" } */\n /* { dg-additional-options \"-mavx2\" { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-prune-output \"dbg_cnt 'vect_loop' set to 1\" } */\n+/* { dg-prune-output \"dbg_cnt 'vect_loop' set to 1-1\" } */\n \n int a, b, g, h;\n int c[58];"}]}