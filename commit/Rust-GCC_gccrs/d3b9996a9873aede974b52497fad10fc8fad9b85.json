{"sha": "d3b9996a9873aede974b52497fad10fc8fad9b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiOTk5NmE5ODczYWVkZTk3NGI1MjQ5N2ZhZDEwZmM4ZmFkOWI4NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-21T17:40:27Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-21T17:40:27Z"}, "message": "(find_dummy_reload): Restore original RTX instead of passed IN rtx.\n\nFrom-SVN: r1928", "tree": {"sha": "7abc61ac0239faa1a871bf6a018df4bb5a519927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abc61ac0239faa1a871bf6a018df4bb5a519927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b9996a9873aede974b52497fad10fc8fad9b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b9996a9873aede974b52497fad10fc8fad9b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b9996a9873aede974b52497fad10fc8fad9b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b9996a9873aede974b52497fad10fc8fad9b85/comments", "author": null, "committer": null, "parents": [{"sha": "144499abeb7161ac622f294de3736ed5a3a1d99c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144499abeb7161ac622f294de3736ed5a3a1d99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144499abeb7161ac622f294de3736ed5a3a1d99c"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "38094237afe9421fd9602fc9b562f19c27a850ee", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b9996a9873aede974b52497fad10fc8fad9b85/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b9996a9873aede974b52497fad10fc8fad9b85/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d3b9996a9873aede974b52497fad10fc8fad9b85", "patch": "@@ -1382,6 +1382,7 @@ find_dummy_reload (real_in, real_out, inloc, outloc, class, for_real)\n     {\n       register int regno = REGNO (out) + out_offset;\n       int nwords = HARD_REGNO_NREGS (regno, GET_MODE (real_out));\n+      rtx saved_rtx;\n \n       /* When we consider whether the insn uses OUT,\n \t ignore references within IN.  They don't prevent us\n@@ -1392,6 +1393,7 @@ find_dummy_reload (real_in, real_out, inloc, outloc, class, for_real)\n \t If the insn uses IN elsewhere and it contains OUT,\n \t that counts.  We can't be sure it's the \"same\" operand\n \t so it might not go through this reload.  */\n+      saved_rtx = *inloc;\n       *inloc = const0_rtx;\n \n       if (regno < FIRST_PSEUDO_REGISTER\n@@ -1418,7 +1420,7 @@ find_dummy_reload (real_in, real_out, inloc, outloc, class, for_real)\n \t    }\n \t}\n \n-      *inloc = real_in;\n+      *inloc = saved_rtx;\n     }\n \n   /* Consider using IN if OUT was not acceptable"}]}