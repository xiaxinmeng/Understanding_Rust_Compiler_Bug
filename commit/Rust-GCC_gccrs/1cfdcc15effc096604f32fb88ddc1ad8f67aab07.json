{"sha": "1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmZGNjMTVlZmZjMDk2NjA0ZjMyZmI4OGRkYzFhZDhmNjdhYWIwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-04-26T00:36:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-04-26T00:36:56Z"}, "message": "dwarf2out.c (add_bound_info): Don't crash on an unexpanded SAVE_EXPR.\n\n        * dwarf2out.c (add_bound_info): Don't crash on an unexpanded SAVE_EXPR.\n\n        * dwarfout.c (output_decl): Ignore NAMESPACE_DECLs.\n\n        * dwarf2out.c (gen_subprogram_die): The class-scope declaration DIE\n        is the primary DIE for a member function.\n        (gen_decl_die): Call set_decl_origin_self here.\n        * dwarfout.c (output_decl): And here.\n        * integrate.c (output_inline_function): Not here.\n        Don't clear DECL_INLINE until after calling rest_of_compilation.\n        (set_decl_origin_self): No longer static.\n        * tree.h: Add prototype.\n        * toplev.c (note_deferral_of_defined_inline_function): Only write\n        out abstract instance for actual inlines.\n\n        * cp/decl.c (finish_function): Don't play games with DECL_INLINE.\n\nFrom-SVN: r33430", "tree": {"sha": "86eb94bf7bf8baa171b95fd2c33f84eafa1c186c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86eb94bf7bf8baa171b95fd2c33f84eafa1c186c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/comments", "author": null, "committer": null, "parents": [{"sha": "d25ed420a21ee1692ab894f53effeb3a0eac0207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25ed420a21ee1692ab894f53effeb3a0eac0207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25ed420a21ee1692ab894f53effeb3a0eac0207"}], "stats": {"total": 100, "additions": 57, "deletions": 43}, "files": [{"sha": "d25411df513565074840d95db3b7716097e1e243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -1,3 +1,20 @@\n+2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* dwarf2out.c (add_bound_info): Don't crash on an unexpanded SAVE_EXPR.\n+\n+\t* dwarfout.c (output_decl): Ignore NAMESPACE_DECLs.\n+\n+\t* dwarf2out.c (gen_subprogram_die): The class-scope declaration DIE\n+\tis the primary DIE for a member function.\n+\t(gen_decl_die): Call set_decl_origin_self here.\n+\t* dwarfout.c (output_decl): And here.\n+\t* integrate.c (output_inline_function): Not here.\n+\tDon't clear DECL_INLINE until after calling rest_of_compilation.\n+\t(set_decl_origin_self): No longer static.\n+\t* tree.h: Add prototype.\n+\t* toplev.c (note_deferral_of_defined_inline_function): Only write\n+\tout abstract instance for actual inlines.\n+\n 2000-04-25  Alexandre Oliva  <aoliva@cygnus.com>\n \n \t* config/mn10300/mn10300.h (REG_CLASS_FROM_LETTER): Return"}, {"sha": "0cfe024dd3197667947a8db805a1544067a68571", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -1,3 +1,7 @@\n+2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* decl.c (finish_function): Don't play games with DECL_INLINE.\n+\n 2000-04-25  Gabriel Dos Reis  <dosreis@cmla.ens-cachan.fr>\n \n \t* ir.texi: Correct typo."}, {"sha": "cd6fd493a951e972f6c451067d1164ae75b14551", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -14173,22 +14173,7 @@ finish_function (flags)\n \n       /* Run the optimizers and output the assembler code for this\n          function.  */\n-      if (DECL_ARTIFICIAL (fndecl))\n-\t{\n-\t  /* Do we really *want* to inline this synthesized method?  */\n-\n-\t  int save_fif = flag_inline_functions;\n-\t  flag_inline_functions = 1;\n-\n-\t  /* Turn off DECL_INLINE for the moment so function_cannot_inline_p\n-\t     will check our size.  */\n-\t  DECL_INLINE (fndecl) = 0;\n-\n-\t  rest_of_compilation (fndecl);\n-\t  flag_inline_functions = save_fif;\n-\t}\n-      else\n-\trest_of_compilation (fndecl);\n+      rest_of_compilation (fndecl);\n \n       /* Undo the call to ggc_push_context above.  */\n       if (function_depth > 1)"}, {"sha": "79bffccce90a3b9d8607d78bc397f8f6a97e5c13", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -7119,7 +7119,8 @@ add_bound_info (subrange_die, bound_attr, bound)\n \t We assume that a MEM rtx is safe because gcc wouldn't put the\n \t value there unless it was going to be used repeatedly in the\n \t function, i.e. for cleanups.  */\n-      if (! optimize || GET_CODE (SAVE_EXPR_RTL (bound)) == MEM)\n+      if (! optimize || (SAVE_EXPR_RTL (bound)\n+\t\t\t && GET_CODE (SAVE_EXPR_RTL (bound)) == MEM))\n \t{\n \t  register dw_die_ref ctx = lookup_decl_die (current_function_decl);\n \t  register dw_die_ref decl_die = new_die (DW_TAG_variable, ctx);\n@@ -8006,12 +8007,7 @@ gen_unspecified_parameters_die (decl_or_type, context_die)\n /* Generate a list of nameless DW_TAG_formal_parameter DIEs (and perhaps a\n    DW_TAG_unspecified_parameters DIE) to represent the types of the formal\n    parameters as specified in some function type specification (except for\n-   those which appear as part of a function *definition*).\n-\n-   Note we must be careful here to output all of the parameter DIEs before*\n-   we output any DIEs needed to represent the types of the formal parameters.\n-   This keeps svr4 SDB happy because it (incorrectly) thinks that the first\n-   non-parameter DIE it sees ends the formal parameter list.  */\n+   those which appear as part of a function *definition*).  */\n \n static void\n gen_formal_types_die (function_or_method_type, context_die)\n@@ -8151,6 +8147,14 @@ gen_subprogram_die (decl, context_die)\n      case, `declaration' takes priority; we'll get back to the abstract\n      instance when we're done with the class.  */\n \n+  /* The class-scope declaration DIE must be the primary DIE.  */\n+  if (origin && declaration && class_scope_p (context_die))\n+    {\n+      origin = NULL;\n+      if (old_die)\n+\tabort ();\n+    }\n+\n   if (origin != NULL)\n     {\n       if (declaration && ! local_scope_p (context_die))\n@@ -9322,10 +9326,14 @@ gen_decl_die (decl, context_die)\n \t  && (current_function_decl == NULL_TREE || DECL_ARTIFICIAL (decl)))\n \tbreak;\n \n-      /* Emit info for the abstract instance first, if we haven't yet.  */\n-      origin = decl_ultimate_origin (decl);\n-      if (origin)\n-\tgen_abstract_function (origin);\n+      /* If we're emitting an out-of-line copy of an inline function,\n+\t emit info for the abstract instance and set up to refer to it.  */\n+      if (DECL_INLINE (decl) && ! DECL_ABSTRACT (decl)\n+\t  && ! class_scope_p (context_die))\n+\t{\n+\t  gen_abstract_function (decl);\n+\t  set_decl_origin_self (decl);\n+\t}\n \n       if (debug_info_level > DINFO_LEVEL_TERSE)\n \t{"}, {"sha": "fafbcaa926fbf2b3e47f4fd7439b00cd0355202a", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -4791,6 +4791,13 @@ output_decl (decl, containing_scope)\n \t  output_type (origin, containing_scope);\n       }\n \n+      /* If we're emitting an out-of-line copy of an inline function,\n+\t set up to refer to the abstract instance emitted from\n+\t note_deferral_of_defined_inline_function.  */\n+      if (DECL_INLINE (decl) && ! DECL_ABSTRACT (decl)\n+\t  && ! (containing_scope && TYPE_P (containing_scope)))\n+\tset_decl_origin_self (decl);\n+\n       /* If the following DIE will represent a function definition for a\n \t function with \"extern\" linkage, output a special \"pubnames\" DIE\n \t label just ahead of the actual DIE.  A reference to this label\n@@ -5084,6 +5091,10 @@ output_decl (decl, containing_scope)\n       output_die (output_formal_parameter_die, decl);\n       break;\n \n+    case NAMESPACE_DECL:\n+      /* Ignore for now.  */\n+      break;\n+\n     default:\n       abort ();\n     }"}, {"sha": "622acf49deb6d60a6bf45f8b04dfb463762f1e49", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -78,7 +78,6 @@ static tree integrate_decl_tree\t\tPARAMS ((tree,\n static void subst_constants\t\tPARAMS ((rtx *, rtx,\n \t\t\t\t\t\t struct inline_remap *, int));\n static void set_block_origin_self\tPARAMS ((tree));\n-static void set_decl_origin_self\tPARAMS ((tree));\n static void set_block_abstract_flags\tPARAMS ((tree, int));\n static void process_reg_param\t\tPARAMS ((struct inline_remap *, rtx,\n \t\t\t\t\t\t rtx));\n@@ -2647,7 +2646,7 @@ set_block_origin_self (stmt)\n    set *their* DECL_ABSTRACT_ORIGIN or BLOCK_ABSTRACT_ORIGIN values to\n    point to themselves.  */\n \n-static void\n+void\n set_decl_origin_self (decl)\n      register tree decl;\n {\n@@ -2738,16 +2737,8 @@ output_inline_function (fndecl)\n \n   set_new_last_label_num (f->inl_max_label_num);\n \n-  /* We must have already output DWARF debugging information for the\n-     original (abstract) inline function declaration/definition, so\n-     we want to make sure that the debugging information we generate\n-     for this special instance of the inline function refers back to\n-     the information we already generated.  To make sure that happens,\n-     we simply have to set the DECL_ABSTRACT_ORIGIN for the function\n-     node (and for all of the local ..._DECL nodes which are its children)\n-     so that they all point to themselves.  */\n-\n-  set_decl_origin_self (fndecl);\n+  /* Compile this function all the way down to assembly code.  */\n+  rest_of_compilation (fndecl);\n \n   /* We're not deferring this any longer.  */\n   DECL_DEFER_OUTPUT (fndecl) = 0;\n@@ -2756,9 +2747,6 @@ output_inline_function (fndecl)\n   f->inlinable = 0;\n   DECL_INLINE (fndecl) = 0;\n \n-  /* Compile this function all the way down to assembly code.  */\n-  rest_of_compilation (fndecl);\n-\n   cfun = old_cfun;\n   current_function_decl = old_cfun ? old_cfun->decl : 0;\n }"}, {"sha": "8e021788903fb14f6fa3b2d324ddc7186e7bc0d5", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -2727,7 +2727,7 @@ note_deferral_of_defined_inline_function (decl)\n   /* Generate the DWARF info for the \"abstract\" instance of a function\n      which we may later generate inlined and/or out-of-line instances\n      of.  */\n-  if (write_symbols == DWARF_DEBUG)\n+  if (write_symbols == DWARF_DEBUG && DECL_INLINE (decl))\n     {\n       /* The front-end may not have set CURRENT_FUNCTION_DECL, but the\n \t DWARF code expects it to be set in this case.  Intuitively,"}, {"sha": "165a87f5edeea4e2cd9d454fa8ce0f9053363cbf", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cfdcc15effc096604f32fb88ddc1ad8f67aab07/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "patch": "@@ -2567,6 +2567,7 @@ extern void save_for_inline_nocopy\tPARAMS ((tree));\n extern void save_for_inline_copying\tPARAMS ((tree));\n extern void set_decl_abstract_flags\tPARAMS ((tree, int));\n extern void output_inline_function\tPARAMS ((tree));\n+extern void set_decl_origin_self\tPARAMS ((tree));\n \n /* In c-lex.c */\n extern void set_yydebug\t\t\tPARAMS ((int));"}]}