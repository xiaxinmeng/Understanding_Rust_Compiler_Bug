{"sha": "6c1a2b3d11403f75927cd065580acf1678c32368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxYTJiM2QxMTQwM2Y3NTkyN2NkMDY1NTgwYWNmMTY3OGMzMjM2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-06-26T07:45:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-26T07:45:07Z"}, "message": "re PR target/66412 (ICE on valid code at -O2 and -O3 with -g enabled in simplify_subreg, at simplify-rtx.c:5748)\n\n\tPR target/66412\n\t* config/i386/i386.md (various splitters): Use shallow_copy_rtx\n\tbefore doing PUT_MODE or PUT_CODE on operands to avoid\n\tin-place RTX modification.\n\ntestsuite/ChangeLog:\n\n\tPR target/66412\n\t* gcc.target/i386/pr66412.c: New test.\n\n\nCo-Authored-By: Segher Boessenkool <segher@kernel.crashing.org>\n\nFrom-SVN: r224994", "tree": {"sha": "bb2f7b3c740c925dd909f9eb86215584258900c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb2f7b3c740c925dd909f9eb86215584258900c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1a2b3d11403f75927cd065580acf1678c32368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a2b3d11403f75927cd065580acf1678c32368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1a2b3d11403f75927cd065580acf1678c32368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a2b3d11403f75927cd065580acf1678c32368/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf3e5186466c0c10bd0f0eb70cfb07cd94879ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3e5186466c0c10bd0f0eb70cfb07cd94879ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3e5186466c0c10bd0f0eb70cfb07cd94879ea3"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "92cacd457e5fb9dfe7aefa079e3c270f136188b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c1a2b3d11403f75927cd065580acf1678c32368", "patch": "@@ -1,3 +1,11 @@\n+2015-06-26  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/66412\n+\t* config/i386/i386.md (various splitters): Use shallow_copy_rtx\n+\tbefore doing PUT_MODE or PUT_CODE on operands to avoid\n+\tin-place RTX modification.\n+\n 2015-06-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gentarget-def.c (def_target_insn): Cast return of strtol to"}, {"sha": "c23177b02bc7209738a8892405413c9d3be073e0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6c1a2b3d11403f75927cd065580acf1678c32368", "patch": "@@ -10796,6 +10796,7 @@\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (zero_extend:DI (match_dup 2)))]\n {\n+  operands[1] = shallow_copy_rtx (operands[1]);\n   PUT_MODE (operands[1], QImode);\n   operands[2] = gen_lowpart (QImode, operands[0]);\n })\n@@ -10813,6 +10814,7 @@\n    (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n+  operands[1] = shallow_copy_rtx (operands[1]);\n   PUT_MODE (operands[1], QImode);\n   operands[2] = gen_lowpart (QImode, operands[0]);\n })\n@@ -10828,6 +10830,7 @@\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (zero_extend:SI (match_dup 2)))]\n {\n+  operands[1] = shallow_copy_rtx (operands[1]);\n   PUT_MODE (operands[1], QImode);\n   operands[2] = gen_lowpart (QImode, operands[0]);\n })\n@@ -10865,7 +10868,10 @@\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"PUT_MODE (operands[1], QImode);\")\n+{\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_MODE (operands[1], QImode);\n+})\n \n (define_split\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\"))\n@@ -10874,7 +10880,10 @@\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"PUT_MODE (operands[1], QImode);\")\n+{\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_MODE (operands[1], QImode);\n+})\n \n (define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\")\n@@ -10884,15 +10893,15 @@\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx new_op1 = copy_rtx (operands[1]);\n-  operands[1] = new_op1;\n-  PUT_MODE (new_op1, QImode);\n-  PUT_CODE (new_op1, ix86_reverse_condition (GET_CODE (new_op1),\n-\t\t\t\t\t     GET_MODE (XEXP (new_op1, 0))));\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_MODE (operands[1], QImode);\n+  PUT_CODE (operands[1],\n+\t    ix86_reverse_condition (GET_CODE (operands[1]),\n+\t\t\t\t    GET_MODE (XEXP (operands[1], 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */\n-  if (! ix86_comparison_operator (new_op1, VOIDmode))\n+  if (! ix86_comparison_operator (operands[1], VOIDmode))\n     FAIL;\n })\n \n@@ -10904,15 +10913,15 @@\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx new_op1 = copy_rtx (operands[1]);\n-  operands[1] = new_op1;\n-  PUT_MODE (new_op1, QImode);\n-  PUT_CODE (new_op1, ix86_reverse_condition (GET_CODE (new_op1),\n-\t\t\t\t\t     GET_MODE (XEXP (new_op1, 0))));\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_MODE (operands[1], QImode);\n+  PUT_CODE (operands[1],\n+  \t    ix86_reverse_condition (GET_CODE (operands[1]),\n+\t\t\t\t    GET_MODE (XEXP (operands[1], 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */\n-  if (! ix86_comparison_operator (new_op1, VOIDmode))\n+  if (! ix86_comparison_operator (operands[1], VOIDmode))\n     FAIL;\n })\n \n@@ -11031,7 +11040,10 @@\n \t(if_then_else (match_dup 0)\n \t\t      (label_ref (match_dup 1))\n \t\t      (pc)))]\n-  \"PUT_MODE (operands[0], VOIDmode);\")\n+{\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_MODE (operands[0], VOIDmode);\n+})\n \n (define_split\n   [(set (pc)\n@@ -11046,15 +11058,15 @@\n \t\t      (label_ref (match_dup 1))\n \t\t      (pc)))]\n {\n-  rtx new_op0 = copy_rtx (operands[0]);\n-  operands[0] = new_op0;\n-  PUT_MODE (new_op0, VOIDmode);\n-  PUT_CODE (new_op0, ix86_reverse_condition (GET_CODE (new_op0),\n-\t\t\t\t\t     GET_MODE (XEXP (new_op0, 0))));\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_MODE (operands[0], VOIDmode);\n+  PUT_CODE (operands[0],\n+  \t    ix86_reverse_condition (GET_CODE (operands[0]),\n+\t\t\t\t    GET_MODE (XEXP (operands[0], 0))));\n \n   /* Make sure that (a) the CCmode we have for the flags is strong\n      enough for the reversed compare or (b) we have a valid FP compare.  */\n-  if (! ix86_comparison_operator (new_op0, VOIDmode))\n+  if (! ix86_comparison_operator (operands[0], VOIDmode))\n     FAIL;\n })\n \n@@ -11091,7 +11103,7 @@\n \t\t      (pc)))]\n {\n   operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], QImode, 0);\n-\n+  operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n@@ -11124,7 +11136,7 @@\n \t\t      (pc)))]\n {\n   operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n-\n+  operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n@@ -11160,7 +11172,7 @@\n \t\t      (pc)))]\n {\n   operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n-\n+  operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n@@ -11192,7 +11204,7 @@\n \t\t      (pc)))]\n {\n   operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n-\n+  operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n@@ -11228,7 +11240,10 @@\n \t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n \t\t      (label_ref (match_dup 4))\n \t\t      (pc)))]\n-  \"PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\")\n+{\n+  operands[0] = shallow_copy_rtx (operands[0]);\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n \n ;; Define combination compare-and-branch fp compare instructions to help\n ;; combine.\n@@ -17298,6 +17313,7 @@\n   operands[1] = gen_lowpart (SImode, operands[1]);\n   if (GET_CODE (operands[3]) != ASHIFT)\n     operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[3] = shallow_copy_rtx (operands[3]);\n   PUT_MODE (operands[3], SImode);\n })\n "}, {"sha": "74462f9539bca6cfa5e789b032433ccf8a0ffae0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c1a2b3d11403f75927cd065580acf1678c32368", "patch": "@@ -1,3 +1,8 @@\n+2015-06-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66412\n+\t* gcc.target/i386/pr66412.c: New test.\n+\n 2015-06-25  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/pr52631.c: Disable forwprop."}, {"sha": "c0690dca53a15ca9dcebc622fc511df989d85360", "filename": "gcc/testsuite/gcc.target/i386/pr66412.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66412.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a2b3d11403f75927cd065580acf1678c32368/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66412.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66412.c?ref=6c1a2b3d11403f75927cd065580acf1678c32368", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+int a, b, c, d;\n+\n+void\n+fn1 ()\n+{\n+  short e;\n+  unsigned short g;\n+  \n+  for (c = 0; c < 1; c++)\n+    d = 0;\n+  g = ((a == 0) ^ d) % 8;\n+  e = g << 1;\n+  b = e && 1;\n+}"}]}