{"sha": "8567d9491d06832ea34b564c6bace9f7d43099ae", "node_id": "C_kwDOANBUbNoAKDg1NjdkOTQ5MWQwNjgzMmVhMzRiNTY0YzZiYWNlOWY3ZDQzMDk5YWU", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-22T23:13:16Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-23T22:40:14Z"}, "message": "c++: Quash bogus -Wredundant-move warning\n\nThis patch fixes a pretty stoopid thinko.  When I added code to warn\nabout pessimizing std::move in initializations like\n\n  T t{std::move(T())};\n\nI also added code to unwrap the expression from { }.  But when we have\n\n  return {std::move(t)};\n\nwe cannot warn about a redundant std::move because the implicit move\nwouldn't happen for \"return {t};\" because the expression isn't just\na name.  However, we still want to warn about\n\n  return {std::move(T())};\n\nso let's not disable the -Wpessimizing-move warning.  Tests added for\nboth cases.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (maybe_warn_pessimizing_move): Don't warn about\n\tredundant std::move when the expression was wrapped in { }.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/Wpessimizing-move10.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move12.C: New test.", "tree": {"sha": "bb93432514f378c36483105f0dbf0284a62bf2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb93432514f378c36483105f0dbf0284a62bf2f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8567d9491d06832ea34b564c6bace9f7d43099ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8567d9491d06832ea34b564c6bace9f7d43099ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8567d9491d06832ea34b564c6bace9f7d43099ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8567d9491d06832ea34b564c6bace9f7d43099ae/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ade41de1a6c80db6bb61399da6bff2126813d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ade41de1a6c80db6bb61399da6bff2126813d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ade41de1a6c80db6bb61399da6bff2126813d75"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "7fde65adaa496d644251a47479787bb2e61947dd", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=8567d9491d06832ea34b564c6bace9f7d43099ae", "patch": "@@ -10397,11 +10397,15 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n   if (!CLASS_TYPE_P (type))\n     return;\n \n+  bool wrapped_p = false;\n   /* A a = std::move (A());  */\n   if (TREE_CODE (expr) == TREE_LIST)\n     {\n       if (list_length (expr) == 1)\n-\texpr = TREE_VALUE (expr);\n+\t{\n+\t  expr = TREE_VALUE (expr);\n+\t  wrapped_p = true;\n+\t}\n       else\n \treturn;\n     }\n@@ -10410,7 +10414,10 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n   else if (TREE_CODE (expr) == CONSTRUCTOR)\n     {\n       if (CONSTRUCTOR_NELTS (expr) == 1)\n-\texpr = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t{\n+\t  expr = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t  wrapped_p = true;\n+\t}\n       else\n \treturn;\n     }\n@@ -10458,6 +10465,8 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n       /* Warn if the move is redundant.  It is redundant when we would\n \t do maybe-rvalue overload resolution even without std::move.  */\n       else if (warn_redundant_move\n+\t       /* This doesn't apply for return {std::move (t)};.  */\n+\t       && !wrapped_p\n \t       && !warning_suppressed_p (expr, OPT_Wredundant_move)\n \t       && (moved = treat_lvalue_as_rvalue_p (arg, /*return*/true)))\n \t{"}, {"sha": "77314141da337914580e6da7e4b4c82c9f8a809e", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move10.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move10.C?ref=8567d9491d06832ea34b564c6bace9f7d43099ae", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct S { };\n+\n+S\n+f ()\n+{\n+   return {std::move(S())}; // { dg-warning \"moving a temporary object prevents copy elision\" }\n+}"}, {"sha": "192d981ba5e32dd97bd50f033af68cfa711d558f", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move12.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8567d9491d06832ea34b564c6bace9f7d43099ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move12.C?ref=8567d9491d06832ea34b564c6bace9f7d43099ae", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct S1 {\n+     S1();\n+     S1(S1 const &) = delete;\n+     S1(S1 &&);\n+     S1 operator =(S1 const &) = delete;\n+     S1 operator =(S1 &&);\n+};\n+\n+struct S2 { S2(S1); };\n+S2 f() {\n+   S1 s;\n+   return { std::move(s) }; // { dg-bogus \"redundant move\" }\n+}"}]}