{"sha": "9e12b8b1819342ef7efac58cf7f4ba4294abe551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxMmI4YjE4MTkzNDJlZjdlZmFjNThjZjdmNGJhNDI5NGFiZTU1MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-06T09:55:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-06T09:55:12Z"}, "message": "match.pd: Improve conditional_replacement for x ? 0 : -1 [PR796232]\n\nAs mentioned in the PR, for boolean x we currently optimize\nin phiopt x ? 0 : -1 into -(int)!x but it can be optimized as\n(int) x - 1 which is one less operation both in GIMPLE and in x86 assembly.\n\nThis patch optimizes it in match.pd, by optimizing -(type)!x when\nx has boolean range into (type)x - 1.\n\n2020-12-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96232\n\t* match.pd (-(type)!A -> (type)A - 1): New optimization.\n\n\t* gcc.dg/tree-ssa/pr96232-1.c: New test.", "tree": {"sha": "e85728c3ca27665a12469a0206a08fd0869b6ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85728c3ca27665a12469a0206a08fd0869b6ff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e12b8b1819342ef7efac58cf7f4ba4294abe551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e12b8b1819342ef7efac58cf7f4ba4294abe551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e12b8b1819342ef7efac58cf7f4ba4294abe551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e12b8b1819342ef7efac58cf7f4ba4294abe551/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0f0243869b3941a256ca0ea9c8aca141412f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0f0243869b3941a256ca0ea9c8aca141412f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0f0243869b3941a256ca0ea9c8aca141412f7e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "43bacb4f68e2cb5b4557a45ab4ca42f0d2b473c3", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e12b8b1819342ef7efac58cf7f4ba4294abe551/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e12b8b1819342ef7efac58cf7f4ba4294abe551/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9e12b8b1819342ef7efac58cf7f4ba4294abe551", "patch": "@@ -3812,6 +3812,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cnd (logical_inverted_value truth_valued_p@0) @1 @2)\n   (cnd @0 @2 @1)))\n \n+/* -(type)!A -> (type)A - 1.  */\n+(simplify\n+ (negate (convert?:s (logical_inverted_value:s @0)))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && TREE_CODE (type) != BOOLEAN_TYPE\n+      && TYPE_PRECISION (type) > 1\n+      && TREE_CODE (@0) == SSA_NAME\n+      && ssa_name_has_boolean_range (@0))\n+  (plus (convert:type @0) { build_all_ones_cst (type); })))\n+\n /* A + (B vcmp C ? 1 : 0) -> A - (B vcmp C ? -1 : 0), since vector comparisons\n    return all -1 or all 0 results.  */\n /* ??? We could instead convert all instances of the vec_cond to negate,"}, {"sha": "3170ffd7e810d7a5ae81a6c50d41868613399f58", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96232-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e12b8b1819342ef7efac58cf7f4ba4294abe551/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e12b8b1819342ef7efac58cf7f4ba4294abe551/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-1.c?ref=9e12b8b1819342ef7efac58cf7f4ba4294abe551", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/96232 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \" \\\\+ -1;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"~x_\\[0-9]*\\\\\\(D\\\\\\)\" \"optimized\" } } */\n+\n+int\n+foo (_Bool x)\n+{\n+  return x ? 0 : -1;\n+}"}]}