{"sha": "db9bd5d5752356a71b1ce6986f30c164c39cf51d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5YmQ1ZDU3NTIzNTZhNzFiMWNlNjk4NmYzMGMxNjRjMzljZjUxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-07T10:08:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-07T10:08:31Z"}, "message": "Move constant bitop and bswap folds to fold-const-call.c\n\nThe only folds left in builtins.c were for constants, so we can remove\nthe builtins.c handling entirely.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_bitop, fold_builtin_bswap): Delete.\n\t(fold_builtin_1): Don't call them.\n\t* fold-const-call.c: Include tm.h.\n\t(fold_const_call_ss): New variant for integer-to-integer folds.\n\t(fold_const_call): Call it.\n\nFrom-SVN: r229921", "tree": {"sha": "ec9ea09087c5f93cc1650b6838db331fe6529046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9ea09087c5f93cc1650b6838db331fe6529046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db9bd5d5752356a71b1ce6986f30c164c39cf51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9bd5d5752356a71b1ce6986f30c164c39cf51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9bd5d5752356a71b1ce6986f30c164c39cf51d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9bd5d5752356a71b1ce6986f30c164c39cf51d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2556a032cc18bb71c85988967fed074528fb5030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2556a032cc18bb71c85988967fed074528fb5030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2556a032cc18bb71c85988967fed074528fb5030"}], "stats": {"total": 191, "additions": 84, "deletions": 107}, "files": [{"sha": "7b9f63ce6fe9e38adcdc95861288cac767bc5e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db9bd5d5752356a71b1ce6986f30c164c39cf51d", "patch": "@@ -1,3 +1,11 @@\n+2015-11-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_bitop, fold_builtin_bswap): Delete.\n+\t(fold_builtin_1): Don't call them.\n+\t* fold-const-call.c: Include tm.h.\n+\t(fold_const_call_ss): New variant for integer-to-integer folds.\n+\t(fold_const_call): Call it.\n+\n 2015-11-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_classify): Move constant cases to..."}, {"sha": "3f7fe3b9bbc9da0da29a93d0a7dc4918d577642a", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=db9bd5d5752356a71b1ce6986f30c164c39cf51d", "patch": "@@ -148,7 +148,6 @@ static tree rewrite_call_expr (location_t, tree, int, tree, int, ...);\n static bool validate_arg (const_tree, enum tree_code code);\n static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_signbit (tree, rtx);\n-static tree fold_builtin_bitop (tree, tree);\n static tree fold_builtin_strchr (location_t, tree, tree, tree);\n static tree fold_builtin_memchr (location_t, tree, tree, tree, tree);\n static tree fold_builtin_memcmp (location_t, tree, tree, tree);\n@@ -7332,99 +7331,6 @@ fold_builtin_sincos (location_t loc,\n \t\t\t fold_build1_loc (loc, REALPART_EXPR, type, call)));\n }\n \n-/* Fold function call to builtin ffs, clz, ctz, popcount and parity\n-   and their long and long long variants (i.e. ffsl and ffsll).  ARG is\n-   the argument to the call.  Return NULL_TREE if no simplification can\n-   be made.  */\n-\n-static tree\n-fold_builtin_bitop (tree fndecl, tree arg)\n-{\n-  if (!validate_arg (arg, INTEGER_TYPE))\n-    return NULL_TREE;\n-\n-  /* Optimize for constant argument.  */\n-  if (TREE_CODE (arg) == INTEGER_CST && !TREE_OVERFLOW (arg))\n-    {\n-      tree type = TREE_TYPE (arg);\n-      int result;\n-\n-      switch (DECL_FUNCTION_CODE (fndecl))\n-\t{\n-\tCASE_INT_FN (BUILT_IN_FFS):\n-\t  result = wi::ffs (arg);\n-\t  break;\n-\n-\tCASE_INT_FN (BUILT_IN_CLZ):\n-\t  if (wi::ne_p (arg, 0))\n-\t    result = wi::clz (arg);\n-\t  else if (! CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (type), result))\n-\t    result = TYPE_PRECISION (type);\n-\t  break;\n-\n-\tCASE_INT_FN (BUILT_IN_CTZ):\n-\t  if (wi::ne_p (arg, 0))\n-\t    result = wi::ctz (arg);\n-\t  else if (! CTZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (type), result))\n-\t    result = TYPE_PRECISION (type);\n-\t  break;\n-\n-\tCASE_INT_FN (BUILT_IN_CLRSB):\n-\t  result = wi::clrsb (arg);\n-\t  break;\n-\n-\tCASE_INT_FN (BUILT_IN_POPCOUNT):\n-\t  result = wi::popcount (arg);\n-\t  break;\n-\n-\tCASE_INT_FN (BUILT_IN_PARITY):\n-\t  result = wi::parity (arg);\n-\t  break;\n-\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-      return build_int_cst (TREE_TYPE (TREE_TYPE (fndecl)), result);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Fold function call to builtin_bswap and the short, long and long long\n-   variants.  Return NULL_TREE if no simplification can be made.  */\n-static tree\n-fold_builtin_bswap (tree fndecl, tree arg)\n-{\n-  if (! validate_arg (arg, INTEGER_TYPE))\n-    return NULL_TREE;\n-\n-  /* Optimize constant value.  */\n-  if (TREE_CODE (arg) == INTEGER_CST && !TREE_OVERFLOW (arg))\n-    {\n-      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-\n-      switch (DECL_FUNCTION_CODE (fndecl))\n-\t{\n-\t  case BUILT_IN_BSWAP16:\n-\t  case BUILT_IN_BSWAP32:\n-\t  case BUILT_IN_BSWAP64:\n-\t    {\n-\t      signop sgn = TYPE_SIGN (type);\n-\t      tree result =\n-\t\twide_int_to_tree (type,\n-\t\t\t\t  wide_int::from (arg, TYPE_PRECISION (type),\n-\t\t\t\t\t\t  sgn).bswap ());\n-\t      return result;\n-\t    }\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin memchr.  ARG1, ARG2 and LEN are the\n    arguments to the call, and TYPE is its return type.\n    Return NULL_TREE if no simplification can be made.  */\n@@ -8364,19 +8270,6 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     CASE_FLT_FN (BUILT_IN_NANS):\n       return fold_builtin_nan (arg0, type, false);\n \n-    case BUILT_IN_BSWAP16:\n-    case BUILT_IN_BSWAP32:\n-    case BUILT_IN_BSWAP64:\n-      return fold_builtin_bswap (fndecl, arg0);\n-\n-    CASE_INT_FN (BUILT_IN_FFS):\n-    CASE_INT_FN (BUILT_IN_CLZ):\n-    CASE_INT_FN (BUILT_IN_CTZ):\n-    CASE_INT_FN (BUILT_IN_CLRSB):\n-    CASE_INT_FN (BUILT_IN_POPCOUNT):\n-    CASE_INT_FN (BUILT_IN_PARITY):\n-      return fold_builtin_bitop (fndecl, arg0);\n-\n     case BUILT_IN_ISASCII:\n       return fold_builtin_isascii (loc, arg0);\n "}, {"sha": "48e05a967b34af809051b866f12cfce6165f9233", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bd5d5752356a71b1ce6986f30c164c39cf51d/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=db9bd5d5752356a71b1ce6986f30c164c39cf51d", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"options.h\"\n #include \"fold-const-call.h\"\n+#include \"tm.h\" /* For C[LT]Z_DEFINED_AT_ZERO.  */\n \n /* Functions that test for certain constant types, abstracting away the\n    decision about whether to check for overflow.  */\n@@ -766,6 +767,69 @@ fold_const_call_ss (wide_int *result, built_in_function fn,\n     }\n }\n \n+/* Try to evaluate:\n+\n+      *RESULT = FN (ARG)\n+\n+   where ARG_TYPE is the type of ARG and PRECISION is the number of bits\n+   in the result.  Return true on success.  */\n+\n+static bool\n+fold_const_call_ss (wide_int *result, built_in_function fn,\n+\t\t    const wide_int_ref &arg, unsigned int precision,\n+\t\t    tree arg_type)\n+{\n+  switch (fn)\n+    {\n+    CASE_INT_FN (BUILT_IN_FFS):\n+      *result = wi::shwi (wi::ffs (arg), precision);\n+      return true;\n+\n+    CASE_INT_FN (BUILT_IN_CLZ):\n+      {\n+\tint tmp;\n+\tif (wi::ne_p (arg, 0))\n+\t  tmp = wi::clz (arg);\n+\telse if (! CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (arg_type), tmp))\n+\t  tmp = TYPE_PRECISION (arg_type);\n+\t*result = wi::shwi (tmp, precision);\n+\treturn true;\n+      }\n+\n+    CASE_INT_FN (BUILT_IN_CTZ):\n+      {\n+\tint tmp;\n+\tif (wi::ne_p (arg, 0))\n+\t  tmp = wi::ctz (arg);\n+\telse if (! CTZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (arg_type), tmp))\n+\t  tmp = TYPE_PRECISION (arg_type);\n+\t*result = wi::shwi (tmp, precision);\n+\treturn true;\n+      }\n+\n+    CASE_INT_FN (BUILT_IN_CLRSB):\n+      *result = wi::shwi (wi::clrsb (arg), precision);\n+      return true;\n+\n+    CASE_INT_FN (BUILT_IN_POPCOUNT):\n+      *result = wi::shwi (wi::popcount (arg), precision);\n+      return true;\n+\n+    CASE_INT_FN (BUILT_IN_PARITY):\n+      *result = wi::shwi (wi::parity (arg), precision);\n+      return true;\n+\n+    case BUILT_IN_BSWAP16:\n+    case BUILT_IN_BSWAP32:\n+    case BUILT_IN_BSWAP64:\n+      *result = wide_int::from (arg, precision, TYPE_SIGN (arg_type)).bswap ();\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Try to evaluate:\n \n       RESULT = FN (*ARG)\n@@ -916,6 +980,18 @@ fold_const_call (built_in_function fn, tree type, tree arg)\n   machine_mode mode = TYPE_MODE (type);\n   machine_mode arg_mode = TYPE_MODE (TREE_TYPE (arg));\n \n+  if (integer_cst_p (arg))\n+    {\n+      if (SCALAR_INT_MODE_P (mode))\n+\t{\n+\t  wide_int result;\n+\t  if (fold_const_call_ss (&result, fn, arg, TYPE_PRECISION (type),\n+\t\t\t\t  TREE_TYPE (arg)))\n+\t    return wide_int_to_tree (type, result);\n+\t}\n+      return NULL_TREE;\n+    }\n+\n   if (real_cst_p (arg))\n     {\n       gcc_checking_assert (SCALAR_FLOAT_MODE_P (arg_mode));"}]}