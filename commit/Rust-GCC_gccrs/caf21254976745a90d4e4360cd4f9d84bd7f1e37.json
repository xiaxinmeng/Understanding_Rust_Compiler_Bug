{"sha": "caf21254976745a90d4e4360cd4f9d84bd7f1e37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmMjEyNTQ5NzY3NDVhOTBkNGU0MzYwY2Q0ZjlkODRiZDdmMWUzNw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-05T01:34:28Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-05T01:34:28Z"}, "message": "Makefile.am (DEJATOOL,EXPECT,RUNTEST,RUNTESTFLAGS): Remove unneeded variable assignments.\n\n2003-08-04  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/Makefile.am (DEJATOOL,EXPECT,RUNTEST,RUNTESTFLAGS):\n\tRemove unneeded variable assignments.  Leave them for automake.\n\t* testsuite/lib/libstdc++-v3.exp:  Rename...\n\t* testsuite/lib/libstdc++.exp:  ...to this.  Adjust function names\n\taccordingly.\n\t* testsuite/libstdc++-v3.dg/dg.exp:  Rename...\n\t* testsuite/libstdc++-dg/normal.exp:  ...to this.  Adjust function\n\tnames accordingly.\n\nFrom-SVN: r70165", "tree": {"sha": "23f95b3c14b5066836538b4a04ad87d6912afa1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f95b3c14b5066836538b4a04ad87d6912afa1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caf21254976745a90d4e4360cd4f9d84bd7f1e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf21254976745a90d4e4360cd4f9d84bd7f1e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf21254976745a90d4e4360cd4f9d84bd7f1e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf21254976745a90d4e4360cd4f9d84bd7f1e37/comments", "author": null, "committer": null, "parents": [{"sha": "f7ab5fa4f32302044b1bdb5b2837e4d94f0fc316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ab5fa4f32302044b1bdb5b2837e4d94f0fc316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ab5fa4f32302044b1bdb5b2837e4d94f0fc316"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "b33b10d7853e1dc69506852a9bf05be595cbfd57", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=caf21254976745a90d4e4360cd4f9d84bd7f1e37", "patch": "@@ -1,3 +1,14 @@\n+2003-08-04  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/Makefile.am (DEJATOOL,EXPECT,RUNTEST,RUNTESTFLAGS):\n+\tRemove unneeded variable assignments.  Leave them for automake.\n+\t* testsuite/lib/libstdc++-v3.exp:  Rename...\n+\t* testsuite/lib/libstdc++.exp:  ...to this.  Adjust function names\n+\taccordingly.\n+\t* testsuite/libstdc++-v3.dg/dg.exp:  Rename...\n+\t* testsuite/libstdc++-dg/normal.exp:  ...to this.  Adjust function\n+\tnames accordingly.\n+\n 2003-08-04  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/guide.html:  run_doxygen uses bash."}, {"sha": "cd181c29243e755f0d9ae1fa38198079e975af88", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=caf21254976745a90d4e4360cd4f9d84bd7f1e37", "patch": "@@ -21,23 +21,12 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-AUTOMAKE_OPTIONS =  cygnus dejagnu\n+AUTOMAKE_OPTIONS = dejagnu\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n-DEJATOOL = libstdc++-v3\n-\n-EXPECT = `if [ -f @glibcxx_builddir@/../../expect/expect ] ; then \\\n-            echo @glibcxx_builddir@/../../expect/expect ; \\\n-          else echo expect ; fi`\n-\n-RUNTEST = `if [ -f @glibcxx_srcdir@/../dejagnu/runtest ] ; then \\\n-\t       echo @glibcxx_srcdir@/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n-\n AM_MAKEFLAGS = -j1\n AM_RUNTESTFLAGS =\n-RUNTESTFLAGS =\n PWD_COMMAND = $${PWDCMD-pwd}\n \n ## CXX is actually a \"C\" compiler. These are real C++ programs."}, {"sha": "133acec63b29b663cef5400e7799d6f4a8bc6b30", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "renamed", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=caf21254976745a90d4e4360cd4f9d84bd7f1e37", "patch": "@@ -14,30 +14,30 @@\n # along with this program; if not, write to the Free Software\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n \n-# Define libstdc++-v3 callbacks for dg.exp.\n+# Define callbacks for dg.exp.  This file is loaded early.\n \n load_lib dg.exp\n load_lib libgloss.exp\n load_lib prune.exp\n \n-# Called once, by libstdc++-v3-init below.  \"Static\" to this file.\n-proc libstdc++-v3-copy-files {srcfiles dstdir} {\n+# Called by v3-init below.  \"Static\" to this file.\n+proc v3-copy-files {srcfiles dstdir} {\n     foreach f $srcfiles {\n-\tif { [catch { set symlink [file readlink $f] } x] } then {\n-\t    file copy -force $f $dstdir\n-\t} else {\n-\t    if { [regexp \"^/\" \"$symlink\"] } then {\n-\t\tfile copy -force $symlink $dstdir\n-\t    } else {\n-\t\tset dirname [file dirname $f]\n-\t\tfile copy -force $dirname/$symlink $dstdir\n-\t    }\n-\t}\n+        if { [catch { set symlink [file readlink $f] } x] } then {\n+            file copy -force $f $dstdir\n+        } else {\n+            if { [regexp \"^/\" \"$symlink\"] } then {\n+                file copy -force $symlink $dstdir\n+            } else {\n+                set dirname [file dirname $f]\n+                file copy -force $dirname/$symlink $dstdir\n+            }\n+        }\n     }\n }\n \n-# Called once, from libstdc++-v3.dg/dg.exp.\n-proc libstdc++-v3-init { args } {\n+# Called once, from libstdc++/dg.exp.\n+proc v3-init { args } {\n     global srcdir\n     global outdir\n     global blddir\n@@ -56,31 +56,31 @@ proc libstdc++-v3-init { args } {\n     set dg-do-what-default run\n \n     # Copy any required data files.\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.tst\"] $outdir\n-    libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.txt\"] $outdir\n+    v3-copy-files [glob -nocomplain \"$srcdir/data/*.tst\"] $outdir\n+    v3-copy-files [glob -nocomplain \"$srcdir/data/*.txt\"] $outdir\n \n     # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n     # locate libgcc.a so we don't need to account for different values of\n     # SHLIB_EXT on different platforms\n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n-\tset gccdir [file dirname $gccdir]\n+        set gccdir [file dirname $gccdir]\n     }\n \n     set ld_library_path \".\"\n     append ld_library_path \":${gccdir}\"\n     set compiler ${gccdir}/g++\n     if { [is_remote host] == 0 && [which $compiler] != 0 } {\n       foreach i \"[exec $compiler --print-multi-lib]\" {\n-\tset mldir \"\"\n-\tregexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n-\tset mldir [string trimright $mldir \"\\;@\"]\n-\tif { \"$mldir\" == \".\" } {\n-\t  continue\n-\t}\n-\tif { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] == 1 } {\n-\t  append ld_library_path \":${gccdir}/${mldir}\"\n-\t}\n+        set mldir \"\"\n+        regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+        set mldir [string trimright $mldir \"\\;@\"]\n+        if { \"$mldir\" == \".\" } {\n+          continue\n+        }\n+        if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] == 1 } {\n+          append ld_library_path \":${gccdir}/${mldir}\"\n+        }\n       }\n     }\n     append ld_library_path \":${blddir}/src/.libs\"\n@@ -137,55 +137,55 @@ proc libstdc++-v3-init { args } {\n }\n \n # Callback from system dg-test.\n-proc libstdc++-v3-dg-test { prog do_what extra_tool_flags } {\n+proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do.\n \n     switch $do_what {\n-\t\"preprocess\" {\n-\t    set compile_type \"preprocess\"\n-\t    set output_file \"[file rootname [file tail $prog]].i\"\n-\t}\n-\t\"compile\" {\n-\t    set compile_type \"assembly\"\n-\t    set output_file \"[file rootname [file tail $prog]].s\"\n-\t}\n-\t\"assemble\" {\n-\t    set compile_type \"object\"\n-\t    set output_file \"[file rootname [file tail $prog]].o\"\n-\t}\n-\t\"link\" {\n-\t    set compile_type \"executable\"\n-\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n-\t}\n-\t\"run\" {\n-\t    set compile_type \"executable\"\n-\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n-\t    # Should this be handled elsewhere?\n-\t    # YES.\n-\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n-\t    # This is the only place where we care if an executable was\n-\t    # created or not.  If it was, dg.exp will try to run it.\n-\t    remote_file build delete $output_file;\n-\t}\n-\tdefault {\n-\t    perror \"$do_what: not a valid dg-do keyword\"\n-\t    return \"\"\n-\t}\n+        \"preprocess\" {\n+            set compile_type \"preprocess\"\n+            set output_file \"[file rootname [file tail $prog]].i\"\n+        }\n+        \"compile\" {\n+            set compile_type \"assembly\"\n+            set output_file \"[file rootname [file tail $prog]].s\"\n+        }\n+        \"assemble\" {\n+            set compile_type \"object\"\n+            set output_file \"[file rootname [file tail $prog]].o\"\n+        }\n+        \"link\" {\n+            set compile_type \"executable\"\n+            set output_file \"./[file rootname [file tail $prog]].exe\"\n+        }\n+        \"run\" {\n+            set compile_type \"executable\"\n+            # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+            # Should this be handled elsewhere?\n+            # YES.\n+            set output_file \"./[file rootname [file tail $prog]].exe\"\n+            # This is the only place where we care if an executable was\n+            # created or not.  If it was, dg.exp will try to run it.\n+            remote_file build delete $output_file;\n+        }\n+        default {\n+            perror \"$do_what: not a valid dg-do keyword\"\n+            return \"\"\n+        }\n     }\n     set options \"\"\n     if { $extra_tool_flags != \"\" } {\n-\tlappend options \"additional_flags=$extra_tool_flags\"\n+        lappend options \"additional_flags=$extra_tool_flags\"\n     }\n \n-    set comp_output [libstdc++-v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+    set comp_output [v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n     set comp_output [ prune_g++_output $comp_output ];\n \n     return [list $comp_output $output_file]\n }\n \n-# Called from libstdc++-v3-dg-test above.  Calls back into system's\n+# Called from libstdc++-dg-test above.  Calls back into system's\n # target_compile to actually do the work.\n-proc libstdc++-v3_target_compile { source dest type options } {\n+proc v3_target_compile { source dest type options } {\n     global gluefile \n     global wrap_flags\n     global cxx\n@@ -194,8 +194,8 @@ proc libstdc++-v3_target_compile { source dest type options } {\n     global blddir\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-\tlappend options \"libs=${gluefile}\"\n-\tlappend options \"ldflags=${wrap_flags}\"\n+        lappend options \"libs=${gluefile}\"\n+        lappend options \"ldflags=${wrap_flags}\"\n     }\n \n     set cxx_final $cxx\n@@ -215,7 +215,7 @@ proc libstdc++-v3_target_compile { source dest type options } {\n }\n \n \n-# Called once, from libstdc++-v3.dg/dg.exp.\n+# Called once, from libstdc++*/dg.exp.\n proc v3-list-tests { filename } {\n     global srcdir\n     global outdir\n@@ -225,16 +225,16 @@ proc v3-list-tests { filename } {\n \n     # If there is a testsuite_file, use it. \n     if { [file exists $tests_file] } {\n-\tset f [open $tests_file]\n-\twhile { ! [eof $f] } {\n-\t    set t [gets $f]\n-\t    if { [string length \"$t\"] != 0 } {\n-\t\tlappend sfiles  ${srcdir}/${t}\n-\t    }\n-\t} \n-\tclose $f\n+        set f [open $tests_file]\n+        while { ! [eof $f] } {\n+            set t [gets $f]\n+            if { [string length \"$t\"] != 0 } {\n+                lappend sfiles  ${srcdir}/${t}\n+            }\n+        } \n+        close $f\n     } else {\n-\tverbose \"cannot open $tests_file\"\n+        verbose \"cannot open $tests_file\"\n     }\n     return $sfiles\n }", "previous_filename": "libstdc++-v3/testsuite/lib/libstdc++-v3.exp"}, {"sha": "0ce6668d4b8d8c468ef3b8db6ea0920140a1e026", "filename": "libstdc++-v3/testsuite/libstdc++-dg/normal.exp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf21254976745a90d4e4360cd4f9d84bd7f1e37/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp?ref=caf21254976745a90d4e4360cd4f9d84bd7f1e37", "patch": "@@ -24,7 +24,7 @@ if ![info exists DEFAULT_CXXFLAGS] then {\n \n # Initialization.\n dg-init\n-libstdc++-v3-init\n+v3-init\n \n # Main loop.\n dg-runtest [v3-list-tests testsuite_files] \"\" $DEFAULT_CXXFLAGS", "previous_filename": "libstdc++-v3/testsuite/libstdc++-v3.dg/dg.exp"}]}