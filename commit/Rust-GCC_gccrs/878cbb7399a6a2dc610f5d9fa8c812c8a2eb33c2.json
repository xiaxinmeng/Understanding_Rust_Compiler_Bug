{"sha": "878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4Y2JiNzM5OWE2YTJkYzYxMGY1ZDlmYThjODEyYzhhMmViMzNjMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-11T17:55:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-11T17:55:01Z"}, "message": "* call.c, cp-tree.h, pt.c: Fix comment typos.\n\nFrom-SVN: r79335", "tree": {"sha": "b384372b94af6838b24c166781e13bb96caf7e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b384372b94af6838b24c166781e13bb96caf7e05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/comments", "author": null, "committer": null, "parents": [{"sha": "239a625ee83ff08df15beab3ca2f1b37881e7f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239a625ee83ff08df15beab3ca2f1b37881e7f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239a625ee83ff08df15beab3ca2f1b37881e7f10"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "e543c5c6d18ebc171c458e5d2a1825e3b444eb47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "patch": "@@ -1,3 +1,7 @@\n+2004-03-11  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* call.c, cp-tree.h, pt.c: Fix comment typos.\n+\n 2004-03-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14510"}, {"sha": "4eeb5e587d83617d57193453472a3a37b12173e6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "patch": "@@ -6470,7 +6470,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \t     itself the result of a function call), turn it into a\n \t     TARGET_EXPR here.  It is important that EXPR be a\n \t     TARGET_EXPR below since otherwise the INIT_EXPR will\n-\t     attempt to make a bitwise copy of EXPR to intialize\n+\t     attempt to make a bitwise copy of EXPR to initialize\n \t     VAR. */\n \t  if (TREE_CODE (expr) != TARGET_EXPR)\n \t    expr = get_target_expr (expr);"}, {"sha": "6ccfcc89866b4421226a7a63b20faef3d8086f68", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "patch": "@@ -100,7 +100,7 @@ struct diagnostic_context;\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n       DECL_VAR_MARKED_P (in a VAR_DECL)\n       DECL_SELF_REFERENCE_P (in a TYPE_DECL)\n-      DECL_INVALID_OVERRIRDER_P (in a FUNCTION_DECL)\n+      DECL_INVALID_OVERRIDER_P (in a FUNCTION_DECL)\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL)."}, {"sha": "c619dc681c4e40f5a163f8c0e13b8b60f1f76c0c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=878cbb7399a6a2dc610f5d9fa8c812c8a2eb33c2", "patch": "@@ -12131,7 +12131,7 @@ build_non_dependent_expr (tree expr)\n      There is at least one place where we want to know that a\n      particular expression is a throw-expression: when checking a ?:\n      expression, there are special rules if the second or third\n-     argument is a throw-expresion.  */\n+     argument is a throw-expression.  */\n   if (TREE_CODE (expr) == THROW_EXPR)\n     return expr;\n "}]}