{"sha": "32566720f3a9135fa355f0304f024a79f107a1b8", "node_id": "C_kwDOANBUbNoAKDMyNTY2NzIwZjNhOTEzNWZhMzU1ZjAzMDRmMDI0YTc5ZjEwN2ExYjg", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-07-08T16:32:02Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-08-01T17:44:12Z"}, "message": "btf: emit linkage information in BTF_KIND_FUNC entries\n\nThe kernel bpftool expects BTF_KIND_FUNC entries in BTF to include an\nannotation reflecting the linkage of functions (static, global).  For\nwhatever reason they abuse the `vlen' field of the BTF_KIND_FUNC entry\ninstead of adding a variable-part to the record like it is done with\nother entry kinds.\n\nThis patch makes GCC to include this linkage info in BTF_KIND_FUNC\nentries.\n\nTested in bpf-unknown-none target.\n\ngcc/ChangeLog:\n\n\tPR debug/106263\n\t* ctfc.h (struct ctf_dtdef): Add field linkage.\n\t* ctfc.cc (ctf_add_function): Set ctti_linkage.\n\t* dwarf2ctf.cc (gen_ctf_function_type): Pass a linkage for\n\tfunction types and subprograms.\n\t* btfout.cc (btf_asm_func_type): Emit linkage information for the\n\tfunction.\n\t(btf_dtd_emit_preprocess_cb): Propagate the linkage information\n\tfor functions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR debug/106263\n\t* gcc.dg/debug/btf/btf-function-4.c: New test.\n\t* gcc.dg/debug/btf/btf-function-5.c: Likewise.", "tree": {"sha": "1f2f05a42c22bedf6b9f0e440dc79edb37b07b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f2f05a42c22bedf6b9f0e440dc79edb37b07b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32566720f3a9135fa355f0304f024a79f107a1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32566720f3a9135fa355f0304f024a79f107a1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32566720f3a9135fa355f0304f024a79f107a1b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32566720f3a9135fa355f0304f024a79f107a1b8/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64e937ccde286278743e8fdffea494faa46c214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64e937ccde286278743e8fdffea494faa46c214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64e937ccde286278743e8fdffea494faa46c214"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "594cba8491059730f9ffaea86caaca0b4f883230", "filename": "gcc/btfout.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fbtfout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fbtfout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.cc?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -463,6 +463,7 @@ btf_dtd_emit_preprocess_cb (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n       ctf_dtdef_ref func_dtd = ggc_cleared_alloc<ctf_dtdef_t> ();\n       func_dtd->dtd_data = dtd->dtd_data;\n       func_dtd->dtd_data.ctti_type = dtd->dtd_type;\n+      func_dtd->linkage = dtd->linkage;\n \n       vec_safe_push (funcs, func_dtd);\n       num_types_created++;\n@@ -740,7 +741,10 @@ static void\n btf_asm_func_type (ctf_dtdef_ref dtd)\n {\n   dw2_asm_output_data (4, dtd->dtd_data.ctti_name, \"btt_name\");\n-  dw2_asm_output_data (4, BTF_TYPE_INFO (BTF_KIND_FUNC, 0, 0), \"btt_info\");\n+  dw2_asm_output_data (4, BTF_TYPE_INFO (BTF_KIND_FUNC, 0,\n+                                         dtd->linkage),\n+                       \"btt_info: kind=%u, kflag=%u, linkage=%u\",\n+                       BTF_KIND_FUNC, 0, dtd->linkage);\n   dw2_asm_output_data (4, get_btf_id (dtd->dtd_data.ctti_type), \"btt_type\");\n }\n "}, {"sha": "9773358a4758b9e0883fd43d37df19cc76ea3981", "filename": "gcc/ctfc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fctfc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fctfc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.cc?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -777,7 +777,7 @@ ctf_add_function_arg (ctf_container_ref ctfc, dw_die_ref func,\n ctf_id_t\n ctf_add_function (ctf_container_ref ctfc, uint32_t flag, const char * name,\n \t\t  const ctf_funcinfo_t * ctc, dw_die_ref die,\n-\t\t  bool from_global_func)\n+\t\t  bool from_global_func, int linkage)\n {\n   ctf_dtdef_ref dtd;\n   ctf_id_t type;\n@@ -791,6 +791,7 @@ ctf_add_function (ctf_container_ref ctfc, uint32_t flag, const char * name,\n   type = ctf_add_generic (ctfc, flag, name, &dtd, die);\n \n   dtd->from_global_func = from_global_func;\n+  dtd->linkage = linkage;\n   dtd->dtd_data.ctti_info = CTF_TYPE_INFO (CTF_K_FUNCTION, flag, vlen);\n   /* Caller must make sure CTF types for ctc->ctc_return are already added.  */\n   dtd->dtd_data.ctti_type = (uint32_t) ctc->ctc_return;"}, {"sha": "bcf3a43ae1b884fdb79ea55426eabdaca49d313c", "filename": "gcc/ctfc.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fctfc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fctfc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.h?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -161,6 +161,7 @@ struct GTY ((for_user)) ctf_dtdef\n   ctf_itype_t dtd_data;\t      /* Type node.  */\n   bool from_global_func; /* Whether this type was added from a global\n \t\t\t    function.  */\n+  uint32_t linkage;           /* Used in function types.  0=local, 1=global.  */\n   union GTY ((desc (\"ctf_dtu_d_union_selector (&%1)\")))\n   {\n     /* struct, union, or enum.  */\n@@ -423,7 +424,7 @@ extern ctf_id_t ctf_add_forward (ctf_container_ref, uint32_t, const char *,\n extern ctf_id_t ctf_add_typedef (ctf_container_ref, uint32_t, const char *,\n \t\t\t\t ctf_id_t, dw_die_ref);\n extern ctf_id_t ctf_add_function (ctf_container_ref, uint32_t, const char *,\n-\t\t\t\t  const ctf_funcinfo_t *, dw_die_ref, bool);\n+\t\t\t\t  const ctf_funcinfo_t *, dw_die_ref, bool, int);\n extern ctf_id_t ctf_add_sou (ctf_container_ref, uint32_t, const char *,\n \t\t\t     uint32_t, size_t, dw_die_ref);\n "}, {"sha": "397100004c21cf9b1bedb92a7ee69414619d2b6b", "filename": "gcc/dwarf2ctf.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fdwarf2ctf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Fdwarf2ctf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2ctf.cc?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -644,6 +644,7 @@ gen_ctf_function_type (ctf_container_ref ctfc, dw_die_ref function,\n \n   ctf_funcinfo_t func_info;\n   uint32_t num_args = 0;\n+  int linkage = get_AT_flag (function, DW_AT_external);\n \n   ctf_id_t return_type_id;\n   ctf_id_t function_type_id;\n@@ -687,7 +688,8 @@ gen_ctf_function_type (ctf_container_ref ctfc, dw_die_ref function,\n \t\t\t\t       function_name,\n \t\t\t\t       (const ctf_funcinfo_t *)&func_info,\n \t\t\t\t       function,\n-\t\t\t\t       from_global_func);\n+\t\t\t\t       from_global_func,\n+                                       linkage);\n \n   /* Second pass on formals: generate the CTF types corresponding to\n      them and add them as CTF function args.  */"}, {"sha": "fd3124488f56953c706a5f8dfa1ce8b77c65c6a7", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-function-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-4.c?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -0,0 +1,14 @@\n+/* Test BTF linkage for functions.\n+\n+   We expect to see one BTF_KIND_FUNC type with static linkage encoded in the\n+   BTF type's vlen field.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"btt_info: kind=12, kflag=0, linkage=0\" 1 } } */\n+\n+static int funfoo (void)\n+{\n+  return 0;\n+}"}, {"sha": "12ee97fb5e35efe204b8665e76a4cc61378b9359", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-function-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32566720f3a9135fa355f0304f024a79f107a1b8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-5.c?ref=32566720f3a9135fa355f0304f024a79f107a1b8", "patch": "@@ -0,0 +1,14 @@\n+/* Test BTF linkage for functions.\n+\n+   We expect to see one BTF_KIND_FUNC type with global linkage encoded in the\n+   BTF type's vlen field.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"btt_info: kind=12, kflag=0, linkage=1\" 1 } } */\n+\n+int funfoo (void)\n+{\n+  return 0;\n+}"}]}