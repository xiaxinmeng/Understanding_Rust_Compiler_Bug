{"sha": "14b1747c9405c21366e75a226a398cc4c16c9cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiMTc0N2M5NDA1YzIxMzY2ZTc1YTIyNmEzOThjYzRjMTZjOWNjMQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2016-01-21T02:12:26Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-21T02:12:26Z"}, "message": "add more coalescing to simplify constraints\n\n\t* graphite-dependences.c (constrain_domain): Add call to isl_*_coalesce.\n\t(add_pdr_constraints): Same.\n\t(scop_get_reads): Same.\n\t(scop_get_must_writes): Same.\n\t(scop_get_may_writes): Same.\n\t(scop_get_original_schedule): Same.\n\t(extend_schedule): Same.\n\t(apply_schedule_on_deps): Same.\n\t(carries_deps): Same.\n\t(compute_deps): Same.\n\t(scop_get_dependences): Same.\n\t* graphite-isl-ast-to-gimple.c\n\t(translate_isl_ast_to_gimple::generate_isl_schedule): Same.\n\t* graphite-optimize-isl.c (get_schedule_for_band): Same.\n\t(get_schedule_for_band_list): Same.\n\t(get_schedule_map): Same.\n\t(apply_schedule_map_to_scop): Same.\n\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Same.\n\t(build_loop_iteration_domains): Same.\n\t(add_condition_to_pbb): Same.\n\t(add_param_constraints): Same.\n\t(pdr_add_memory_accesses): Same.\n\t(pdr_add_data_dimensions): Same.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232650", "tree": {"sha": "b30bf643e8bcb9fa2e2a8c6bad0c016831a57322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b30bf643e8bcb9fa2e2a8c6bad0c016831a57322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b1747c9405c21366e75a226a398cc4c16c9cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b1747c9405c21366e75a226a398cc4c16c9cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b1747c9405c21366e75a226a398cc4c16c9cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b1747c9405c21366e75a226a398cc4c16c9cc1/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d4fbb0f4c012f9cb9d2f95de91d143dac3a3a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d4fbb0f4c012f9cb9d2f95de91d143dac3a3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d4fbb0f4c012f9cb9d2f95de91d143dac3a3a1"}], "stats": {"total": 132, "additions": 83, "deletions": 49}, "files": [{"sha": "a3b62419fed115ae16cf582212660f1733dddfce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14b1747c9405c21366e75a226a398cc4c16c9cc1", "patch": "@@ -1,3 +1,30 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-dependences.c (constrain_domain): Add call to isl_*_coalesce.\n+\t(add_pdr_constraints): Same.\n+\t(scop_get_reads): Same.\n+\t(scop_get_must_writes): Same.\n+\t(scop_get_may_writes): Same.\n+\t(scop_get_original_schedule): Same.\n+\t(extend_schedule): Same.\n+\t(apply_schedule_on_deps): Same.\n+\t(carries_deps): Same.\n+\t(compute_deps): Same.\n+\t(scop_get_dependences): Same.\n+\t* graphite-isl-ast-to-gimple.c\n+\t(translate_isl_ast_to_gimple::generate_isl_schedule): Same.\n+\t* graphite-optimize-isl.c (get_schedule_for_band): Same.\n+\t(get_schedule_for_band_list): Same.\n+\t(get_schedule_map): Same.\n+\t(apply_schedule_map_to_scop): Same.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons): Same.\n+\t(build_loop_iteration_domains): Same.\n+\t(add_condition_to_pbb): Same.\n+\t(add_param_constraints): Same.\n+\t(pdr_add_memory_accesses): Same.\n+\t(pdr_add_data_dimensions): Same.\n+\n 2016-01-20  Sandra Loosemore <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Instrumentation Options): Clarify -mmpx linking"}, {"sha": "0544700930ce162fef79f4d1ce8e973d148436ab", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=14b1747c9405c21366e75a226a398cc4c16c9cc1", "patch": "@@ -49,7 +49,7 @@ constrain_domain (isl_map *map, isl_set *s)\n \n   s = isl_set_set_tuple_id (s, id);\n   isl_space_free (d);\n-  return isl_map_intersect_domain (map, s);\n+  return isl_map_coalesce (isl_map_intersect_domain (map, s));\n }\n \n /* Constrain pdr->accesses with pdr->subscript_sizes and pbb->domain.  */\n@@ -59,8 +59,8 @@ add_pdr_constraints (poly_dr_p pdr, poly_bb_p pbb)\n {\n   isl_map *x = isl_map_intersect_range (isl_map_copy (pdr->accesses),\n \t\t\t\t\tisl_set_copy (pdr->subscript_sizes));\n-  x = constrain_domain (x, isl_set_copy (pbb->domain));\n-  return x;\n+  x = isl_map_coalesce (x);\n+  return constrain_domain (x, isl_set_copy (pbb->domain));\n }\n \n /* Returns all the memory reads in SCOP.  */\n@@ -93,7 +93,7 @@ scop_get_reads (scop_p scop, vec<poly_bb_p> pbbs)\n \t  }\n     }\n \n-  return res;\n+  return isl_union_map_coalesce (res);\n }\n \n /* Returns all the memory must writes in SCOP.  */\n@@ -126,7 +126,7 @@ scop_get_must_writes (scop_p scop, vec<poly_bb_p> pbbs)\n \t  }\n     }\n \n-  return res;\n+  return isl_union_map_coalesce (res);\n }\n \n /* Returns all the memory may writes in SCOP.  */\n@@ -159,7 +159,7 @@ scop_get_may_writes (scop_p scop, vec<poly_bb_p> pbbs)\n \t  }\n     }\n \n-  return res;\n+  return isl_union_map_coalesce (res);\n }\n \n /* Returns all the original schedules in SCOP.  */\n@@ -179,7 +179,7 @@ scop_get_original_schedule (scop_p scop, vec<poly_bb_p> pbbs)\n \t\t\t\tisl_set_copy (pbb->domain)));\n     }\n \n-  return res;\n+  return isl_union_map_coalesce (res);\n }\n \n /* Helper function used on each MAP of a isl_union_map.  Computes the\n@@ -242,7 +242,7 @@ extend_schedule (__isl_take isl_union_map *x)\n   str.umap = isl_union_map_empty (isl_union_map_get_space (x));\n   isl_union_map_foreach_map (x, extend_schedule_1, (void *) &str);\n   isl_union_map_free (x);\n-  return str.umap;\n+  return isl_union_map_coalesce (str.umap);\n }\n \n /* Applies SCHEDULE to the in and out dimensions of the dependences\n@@ -252,22 +252,17 @@ static isl_map *\n apply_schedule_on_deps (__isl_keep isl_union_map *schedule,\n \t\t\t__isl_keep isl_union_map *deps)\n {\n-  isl_map *x;\n-  isl_union_map *ux, *trans;\n-\n-  trans = isl_union_map_copy (schedule);\n-  trans = extend_schedule (trans);\n-  ux = isl_union_map_copy (deps);\n+  isl_union_map *trans = extend_schedule (isl_union_map_copy (schedule));\n+  isl_union_map *ux = isl_union_map_copy (deps);\n   ux = isl_union_map_apply_domain (ux, isl_union_map_copy (trans));\n   ux = isl_union_map_apply_range (ux, trans);\n-  if (isl_union_map_is_empty (ux))\n-    {\n-      isl_union_map_free (ux);\n-      return NULL;\n-    }\n-  x = isl_map_from_union_map (ux);\n+  ux = isl_union_map_coalesce (ux);\n+\n+  if (!isl_union_map_is_empty (ux))\n+    return isl_map_from_union_map (ux);\n \n-  return x;\n+  isl_union_map_free (ux);\n+  return NULL;\n }\n \n /* Return true when DEPS is non empty and the intersection of LEX with\n@@ -280,34 +275,29 @@ carries_deps (__isl_keep isl_union_map *schedule,\n \t      __isl_keep isl_union_map *deps,\n \t      int depth)\n {\n-  bool res;\n-  int i;\n-  isl_space *space;\n-  isl_map *lex, *x;\n-  isl_constraint *ineq;\n-\n   if (isl_union_map_is_empty (deps))\n     return false;\n \n-  x = apply_schedule_on_deps (schedule, deps);\n+  isl_map *x = apply_schedule_on_deps (schedule, deps);\n   if (x == NULL)\n     return false;\n-  space = isl_map_get_space (x);\n-  space = isl_space_range (space);\n-  lex = isl_map_lex_le (space);\n-  space = isl_map_get_space (x);\n-  ineq = isl_inequality_alloc (isl_local_space_from_space (space));\n \n-  for (i = 0; i < depth - 1; i++)\n+  isl_space *space = isl_map_get_space (x);\n+  isl_map *lex = isl_map_lex_le (isl_space_range (space));\n+  isl_constraint *ineq = isl_inequality_alloc\n+    (isl_local_space_from_space (isl_map_get_space (x)));\n+\n+  for (int i = 0; i < depth - 1; i++)\n     lex = isl_map_equate (lex, isl_dim_in, i, isl_dim_out, i);\n \n   /* in + 1 <= out  */\n   ineq = isl_constraint_set_coefficient_si (ineq, isl_dim_out, depth - 1, 1);\n   ineq = isl_constraint_set_coefficient_si (ineq, isl_dim_in, depth - 1, -1);\n   ineq = isl_constraint_set_constant_si (ineq, -1);\n   lex = isl_map_add_constraint (lex, ineq);\n+  lex = isl_map_coalesce (lex);\n   x = isl_map_intersect (x, lex);\n-  res = !isl_map_is_empty (x);\n+  bool res = !isl_map_is_empty (x);\n \n   isl_map_free (x);\n   return res;\n@@ -336,6 +326,8 @@ compute_deps (scop_p scop, vec<poly_bb_p> pbbs,\n   isl_union_map *may_writes = scop_get_may_writes (scop, pbbs);\n   isl_union_map *all_writes = isl_union_map_union\n     (isl_union_map_copy (must_writes), isl_union_map_copy (may_writes));\n+  all_writes = isl_union_map_coalesce (all_writes);\n+\n   isl_space *space = isl_union_map_get_space (all_writes);\n   isl_union_map *empty = isl_union_map_empty (space);\n   isl_union_map *original = scop_get_original_schedule (scop, pbbs);\n@@ -416,6 +408,7 @@ scop_get_dependences (scop_p scop)\n   dependences = isl_union_map_union (dependences, may_raw);\n   dependences = isl_union_map_union (dependences, may_war);\n   dependences = isl_union_map_union (dependences, may_waw);\n+  dependences = isl_union_map_coalesce (dependences);\n \n   if (dump_file)\n     {"}, {"sha": "618ee95bef50d388365992602661373f87a69d66", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=14b1747c9405c21366e75a226a398cc4c16c9cc1", "patch": "@@ -3160,9 +3160,11 @@ translate_isl_ast_to_gimple::generate_isl_schedule (scop_p scop)\n       bb_schedule = isl_map_intersect_domain (bb_schedule,\n \t\t\t\t\t      isl_set_copy (pbb->domain));\n       bb_schedule = extend_schedule (bb_schedule, nb_schedule_dims);\n+      bb_schedule = isl_map_coalesce (bb_schedule);\n       schedule_isl\n \t= isl_union_map_union (schedule_isl,\n \t\t\t       isl_union_map_from_map (bb_schedule));\n+      schedule_isl = isl_union_map_coalesce (schedule_isl);\n     }\n   return schedule_isl;\n }"}, {"sha": "23472c73d3d6190f0e8d5977fea9e62d4efa40ca", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=14b1747c9405c21366e75a226a398cc4c16c9cc1", "patch": "@@ -241,6 +241,7 @@ get_schedule_for_band (isl_band *band, int *dimensions)\n \t\t\t   PARAM_VALUE (PARAM_LOOP_BLOCK_TILE_SIZE));\n   tile_umap = isl_union_map_from_map (isl_map_from_basic_map (tile_map));\n   tile_umap = isl_union_map_align_params (tile_umap, space);\n+  tile_umap = isl_union_map_coalesce (tile_umap);\n   *dimensions = 2 * *dimensions;\n \n   return isl_union_map_apply_range (partial_schedule, tile_umap);\n@@ -292,14 +293,14 @@ get_schedule_for_band_list (isl_band_list *band_list)\n       isl_space_free (space);\n     }\n \n-  return schedule;\n+  return isl_union_map_coalesce (schedule);\n }\n \n static isl_union_map *\n get_schedule_map (isl_schedule *schedule)\n {\n-  isl_band_list *bandList = isl_schedule_get_band_forest (schedule);\n-  isl_union_map *schedule_map = get_schedule_for_band_list (bandList);\n+  isl_band_list *band_list = isl_schedule_get_band_forest (schedule);\n+  isl_union_map *schedule_map = get_schedule_for_band_list (band_list);\n   isl_band_list_free (bandList);\n   return schedule_map;\n }\n@@ -327,15 +328,16 @@ apply_schedule_map_to_scop (scop_p scop, isl_union_map *schedule_map)\n       isl_union_map *stmt_band\n \t= isl_union_map_intersect_domain (isl_union_map_copy (schedule_map),\n \t\t\t\t\t  isl_union_set_from_set (domain));\n+      stmt_band = isl_union_map_coalesce (stmt_band);\n       isl_union_map_foreach_map (stmt_band, get_single_map, &stmt_schedule);\n       isl_map_free (pbb->transformed);\n-      pbb->transformed = stmt_schedule;\n+      pbb->transformed = isl_map_coalesce (stmt_schedule);\n       isl_union_map_free (stmt_band);\n     }\n }\n \n static isl_union_set *\n-scop_get_domains (scop_p scop ATTRIBUTE_UNUSED)\n+scop_get_domains (scop_p scop)\n {\n   int i;\n   poly_bb_p pbb;"}, {"sha": "3803d5842cffc0ce730cd5a7169e53f03995ca5a", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b1747c9405c21366e75a226a398cc4c16c9cc1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=14b1747c9405c21366e75a226a398cc4c16c9cc1", "patch": "@@ -143,6 +143,10 @@ build_pbb_scattering_polyhedrons (isl_aff *static_sched,\n \t}\n     }\n \n+  /* Simplify the original schedule.  */\n+  pbb->schedule = isl_map_coalesce (pbb->schedule);\n+\n+  /* At the beginning, set the transformed schedule to the original.  */\n   pbb->transformed = isl_map_copy (pbb->schedule);\n }\n \n@@ -482,7 +486,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n   isl_constraint *c = isl_inequality_alloc\n       (isl_local_space_from_space (isl_space_copy (space)));\n   c = isl_constraint_set_coefficient_si (c, isl_dim_set, pos, 1);\n-  inner = isl_set_add_constraint (inner, c);\n+  inner = isl_set_coalesce (isl_set_add_constraint (inner, c));\n \n   /* loop_i <= cst_nb_iters */\n   if (TREE_CODE (nb_iters) == INTEGER_CST)\n@@ -513,7 +517,8 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n \t\t\t\t   isl_set_dim (valid, isl_dim_set));\n \n       if (valid)\n-\tscop->param_context = isl_set_intersect (scop->param_context, valid);\n+\tscop->param_context = isl_set_coalesce\n+\t  (isl_set_intersect (scop->param_context, valid));\n \n       isl_local_space *ls = isl_local_space_from_space (isl_space_copy (space));\n       isl_aff *al = isl_aff_set_coefficient_si (isl_aff_zero_on_domain (ls),\n@@ -541,7 +546,8 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n \t  isl_set *x = isl_pw_aff_ge_set (approx, aff);\n \t  x = isl_set_project_out (x, isl_dim_set, 0,\n \t\t\t\t   isl_set_dim (x, isl_dim_set));\n-\t  scop->param_context = isl_set_intersect (scop->param_context, x);\n+\t  scop->param_context = isl_set_coalesce\n+\t    (isl_set_intersect (scop->param_context, x));\n \n \t  isl_constraint *c = isl_inequality_alloc\n \t      (isl_local_space_from_space (isl_space_copy (space)));\n@@ -557,6 +563,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n   else\n     gcc_unreachable ();\n \n+  inner = isl_set_coalesce (inner);\n   if (loop->inner\n       && !build_loop_iteration_domains (scop, loop->inner, nb + 1,\n \t\t\t\t\tisl_set_copy (inner), doms))\n@@ -648,7 +655,7 @@ add_condition_to_pbb (poly_bb_p pbb, gcond *stmt, enum tree_code code)\n \n   cond = isl_set_coalesce (cond);\n   cond = isl_set_set_tuple_id (cond, isl_set_get_tuple_id (pbb->domain));\n-  pbb->domain = isl_set_intersect (pbb->domain, cond);\n+  pbb->domain = isl_set_coalesce (isl_set_intersect (pbb->domain, cond));\n   return true;\n }\n \n@@ -749,7 +756,8 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n       c = isl_constraint_set_constant_val (c, v);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_param, p, 1);\n \n-      scop->param_context = isl_set_add_constraint (scop->param_context, c);\n+      scop->param_context = isl_set_coalesce\n+\t(isl_set_add_constraint (scop->param_context, c));\n     }\n \n   if (ub)\n@@ -768,7 +776,8 @@ add_param_constraints (scop_p scop, graphite_dim_t p)\n       c = isl_constraint_set_constant_val (c, v);\n       c = isl_constraint_set_coefficient_si (c, isl_dim_param, p, -1);\n \n-      scop->param_context = isl_set_add_constraint (scop->param_context, c);\n+      scop->param_context = isl_set_coalesce\n+\t(isl_set_add_constraint (scop->param_context, c));\n     }\n }\n \n@@ -911,7 +920,7 @@ pdr_add_memory_accesses (isl_map *acc, dr_info &dri)\n       acc = set_index (acc, i + 1, aff);\n     }\n \n-  return acc;\n+  return isl_map_coalesce (acc);\n }\n \n /* Return true when the LOW and HIGH bounds of an array reference REF are valid\n@@ -972,7 +981,8 @@ pdr_add_data_dimensions (isl_set *subscript_sizes, scop_p scop,\n       isl_set *valid = isl_pw_aff_nonneg_set (isl_pw_aff_copy (ub));\n       valid = isl_set_project_out (valid, isl_dim_set, 0,\n \t\t\t\t   isl_set_dim (valid, isl_dim_set));\n-      scop->param_context = isl_set_intersect (scop->param_context, valid);\n+      scop->param_context = isl_set_coalesce\n+\t(isl_set_intersect (scop->param_context, valid));\n \n       isl_aff *aff\n \t= isl_aff_zero_on_domain (isl_local_space_from_space (space));\n@@ -992,7 +1002,7 @@ pdr_add_data_dimensions (isl_set *subscript_sizes, scop_p scop,\n       subscript_sizes = isl_set_intersect (subscript_sizes, ubs);\n     }\n \n-  return subscript_sizes;\n+  return isl_set_coalesce (subscript_sizes);\n }\n \n /* Build data accesses for DRI.  */"}]}