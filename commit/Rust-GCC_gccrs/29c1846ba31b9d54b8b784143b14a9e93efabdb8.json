{"sha": "29c1846ba31b9d54b8b784143b14a9e93efabdb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljMTg0NmJhMzFiOWQ1NGI4Yjc4NDE0M2IxNGE5ZTkzZWZhYmRiOA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-07-22T12:06:18Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-07-22T12:06:18Z"}, "message": "re PR rtl-optimization/22445 (Optimizations done by cselib depend on pointer values)\n\n\tPR rtl-optimization/22445\n\t* cselib.c (target.h): Include.\n\t(rtx_equal_for_cselib_p): Allow commutative matches.\n\t(cselib_hash_rtx): Don't use MODE for CONST_INT hashing.\n\tRemove MODE parameter.  Changed all callers.\n\nFrom-SVN: r102280", "tree": {"sha": "dfd29faf4b89e2ad2468a9880902b71afcf79aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd29faf4b89e2ad2468a9880902b71afcf79aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c1846ba31b9d54b8b784143b14a9e93efabdb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c1846ba31b9d54b8b784143b14a9e93efabdb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c1846ba31b9d54b8b784143b14a9e93efabdb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c1846ba31b9d54b8b784143b14a9e93efabdb8/comments", "author": null, "committer": null, "parents": [{"sha": "45002e594c1e4d205fb6021d07ac8e9b25461674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45002e594c1e4d205fb6021d07ac8e9b25461674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45002e594c1e4d205fb6021d07ac8e9b25461674"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "f49ff821d4b6fc83b14e2061387566745e6469a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c1846ba31b9d54b8b784143b14a9e93efabdb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c1846ba31b9d54b8b784143b14a9e93efabdb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c1846ba31b9d54b8b784143b14a9e93efabdb8", "patch": "@@ -1,5 +1,11 @@\n 2005-07-22  J\"orn Rennecke <joern.rennecke@st.com>\n \n+\tPR rtl-optimization/22445\n+\t* cselib.c (target.h): Include.\n+\t(rtx_equal_for_cselib_p): Allow commutative matches.\n+\t(cselib_hash_rtx): Don't use MODE for CONST_INT hashing.\n+\tRemove MODE parameter.  Changed all callers.\n+\n \tPR rtl-optimization/22258\n \t* combine.c (likely_spilled_retval_1, likely_spilled_retval_p):\n \tNew functions."}, {"sha": "5d36be9182937380ac1c31bc4362b82bd365ffb0", "filename": "gcc/cselib.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c1846ba31b9d54b8b784143b14a9e93efabdb8/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c1846ba31b9d54b8b784143b14a9e93efabdb8/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=29c1846ba31b9d54b8b784143b14a9e93efabdb8", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cselib.h\"\n #include \"params.h\"\n #include \"alloc-pool.h\"\n+#include \"target.h\"\n \n static bool cselib_record_memory;\n static int entry_and_rtx_equal_p (const void *, const void *);\n@@ -54,7 +55,7 @@ static int discard_useless_locs (void **, void *);\n static int discard_useless_values (void **, void *);\n static void remove_useless_values (void);\n static rtx wrap_constant (enum machine_mode, rtx);\n-static unsigned int cselib_hash_rtx (rtx, enum machine_mode, int);\n+static unsigned int cselib_hash_rtx (rtx, int);\n static cselib_val *new_cselib_val (unsigned int, enum machine_mode);\n static void add_mem_for_addr (cselib_val *, cselib_val *, rtx);\n static cselib_val *cselib_lookup_mem (rtx, int);\n@@ -499,6 +500,11 @@ rtx_equal_for_cselib_p (rtx x, rtx y)\n \t  break;\n \n \tcase 'e':\n+\t  if (i == 1\n+\t      && targetm.commutative_p (x, UNKNOWN)\n+\t      && rtx_equal_for_cselib_p (XEXP (x, 1), XEXP (y, 0))\n+\t      && rtx_equal_for_cselib_p (XEXP (x, 0), XEXP (y, 1)))\n+\t    return 1;\n \t  if (! rtx_equal_for_cselib_p (XEXP (x, i), XEXP (y, i)))\n \t    return 0;\n \t  break;\n@@ -546,11 +552,22 @@ wrap_constant (enum machine_mode mode, rtx x)\n    Possible reasons for return 0 are: the object is volatile, or we couldn't\n    find a register or memory location in the table and CREATE is zero.  If\n    CREATE is nonzero, table elts are created for regs and mem.\n-   MODE is used in hashing for CONST_INTs only;\n-   otherwise the mode of X is used.  */\n+   N.B. this hash function returns the same hash value for RTXes that\n+   differ only in the order of operands, thus it is suitable for comparisons\n+   that take commutativity into account.\n+   If we wanted to also support associative rules, we'd have to use a different\n+   strategy to avoid returning spurious 0, e.g. return ~(~0U >> 1) .\n+   We used to have a MODE argument for hashing for CONST_INTs, but that\n+   didn't make sense, since it caused spurious hash differences between\n+    (set (reg:SI 1) (const_int))\n+    (plus:SI (reg:SI 2) (reg:SI 1))\n+   and\n+    (plus:SI (reg:SI 2) (const_int))\n+   If the mode is important in any context, it must be checked specifically\n+   in a comparison anyway, since relying on hash differences is unsafe.  */\n \n static unsigned int\n-cselib_hash_rtx (rtx x, enum machine_mode mode, int create)\n+cselib_hash_rtx (rtx x, int create)\n {\n   cselib_val *e;\n   int i, j;\n@@ -572,7 +589,7 @@ cselib_hash_rtx (rtx x, enum machine_mode mode, int create)\n       return e->value;\n \n     case CONST_INT:\n-      hash += ((unsigned) CONST_INT << 7) + (unsigned) mode + INTVAL (x);\n+      hash += ((unsigned) CONST_INT << 7) + INTVAL (x);\n       return hash ? hash : (unsigned int) CONST_INT;\n \n     case CONST_DOUBLE:\n@@ -596,7 +613,7 @@ cselib_hash_rtx (rtx x, enum machine_mode mode, int create)\n \tfor (i = 0; i < units; ++i)\n \t  {\n \t    elt = CONST_VECTOR_ELT (x, i);\n-\t    hash += cselib_hash_rtx (elt, GET_MODE (elt), 0);\n+\t    hash += cselib_hash_rtx (elt, 0);\n \t  }\n \n \treturn hash;\n@@ -644,7 +661,7 @@ cselib_hash_rtx (rtx x, enum machine_mode mode, int create)\n \tcase 'e':\n \t  {\n \t    rtx tem = XEXP (x, i);\n-\t    unsigned int tem_hash = cselib_hash_rtx (tem, 0, create);\n+\t    unsigned int tem_hash = cselib_hash_rtx (tem, create);\n \t    \n \t    if (tem_hash == 0)\n \t      return 0;\n@@ -656,7 +673,7 @@ cselib_hash_rtx (rtx x, enum machine_mode mode, int create)\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n \t    {\n \t      unsigned int tem_hash\n-\t\t= cselib_hash_rtx (XVECEXP (x, i, j), 0, create);\n+\t\t= cselib_hash_rtx (XVECEXP (x, i, j), create);\n \t      \n \t      if (tem_hash == 0)\n \t\treturn 0;\n@@ -936,7 +953,7 @@ cselib_lookup (rtx x, enum machine_mode mode, int create)\n   if (MEM_P (x))\n     return cselib_lookup_mem (x, create);\n \n-  hashval = cselib_hash_rtx (x, mode, create);\n+  hashval = cselib_hash_rtx (x, create);\n   /* Can't even create if hashing is not possible.  */\n   if (! hashval)\n     return 0;"}]}