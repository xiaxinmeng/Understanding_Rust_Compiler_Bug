{"sha": "e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyYmZjMTYyNzhjMGJhMmU3MTgzZGJjNTZlY2JiM2U4ZTY1ZGZlZg==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "venkataramanan.kumar@amd.com", "date": "2012-07-25T08:50:01Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2012-07-25T08:50:01Z"}, "message": "AMD btver2 enablement\n\nFrom-SVN: r189838", "tree": {"sha": "9ecf59589f3fa66c09546229eccbefa3ef897f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ecf59589f3fa66c09546229eccbefa3ef897f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/comments", "author": null, "committer": null, "parents": [{"sha": "9234534930b0d0e7fc5e6b227daf79d8791f0972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9234534930b0d0e7fc5e6b227daf79d8791f0972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9234534930b0d0e7fc5e6b227daf79d8791f0972"}], "stats": {"total": 165, "additions": 151, "deletions": 14}, "files": [{"sha": "b9f4c7819af3ef1a299650031ef027bbcfaf63fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -1,3 +1,27 @@\n+2012-7-25  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n+\tbtver2 Enablement\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add btver2.\n+\t(case ${target}): Add btver2.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n+\t-march=native recognize btver2 processors.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\tbtver2 def_and_undef\n+\t* config/i386/i386.c (struct processor_costs btver2_cost): New\n+\tbtver2 cost table.\n+\t(m_BTVER2): New definition.\n+\t(m_AMD_MULTIPLE): Includes m_BTVER2.\n+\t(initial_ix86_tune_features): Add btver2 tune.\n+\t(processor_target_table): Add btver2 entry.\n+\t(static const char *const cpu_names): Add btver2 entry.\n+\t(software_prefetching_beneficial_p): Add btver2.\n+\t(ix86_option_override_internal): Add btver2 instruction sets.\n+\t(ix86_issue_rate): Add btver2.\n+\t(ix86_adjust_cost): Add btver2.\n+\t* config/i386/i386.h (TARGET_BTVER2): New definition.\n+\t(enum target_cpu_default): Add TARGET_CPU_DEFAULT_btver2.\n+\t(enum processor_type): Add PROCESSOR_BTVER2.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add btver2.\n+\n 2012-07-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* doc/tm.texi: Regenerate."}, {"sha": "103d9ffb92dfae7358c103efc6584c9130093f6b", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -1214,7 +1214,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t\t\tneed_64bit_isa=yes\n \t\t\tcase X\"${with_cpu}\" in\n-\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t;;\n \t\t\tX)\n \t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1223,7 +1223,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\texit 1\n \t\t\t\t;;\n \t\t\tesac\n@@ -1335,7 +1335,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\ttmake_file=\"$tmake_file i386/t-sol2-64\"\n \t\tneed_64bit_isa=yes\n \t\tcase X\"${with_cpu}\" in\n-\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t;;\n \t\tX)\n \t\t\tif test x$with_cpu_64 = x; then\n@@ -1344,7 +1344,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -1401,7 +1401,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\tif test x$enable_targets = xall; then\n \t\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\t\tcase X\"${with_cpu}\" in\n-\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t\t;;\n \t\t\t\tX)\n \t\t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1410,7 +1410,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t\t\t;;\n \t\t\t\t*)\n \t\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver2 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\t\texit 1\n \t\t\t\t\t;;\n \t\t\t\tesac\n@@ -2640,6 +2640,10 @@ case ${target} in\n \tarch=btver1\n \tcpu=btver1\n \t;;\n+      btver2-*)\n+\tarch=btver2\n+\tcpu=btver2\n+\t;;\n       amdfam10-*|barcelona-*)\n \tarch=amdfam10\n \tcpu=amdfam10\n@@ -2737,6 +2741,10 @@ case ${target} in\n \tarch=btver1\n \tcpu=btver1\n \t;;\n+      btver2-*)\n+\tarch=btver2\n+\tcpu=btver2\n+\t;;\n       amdfam10-*|barcelona-*)\n \tarch=amdfam10\n \tcpu=amdfam10\n@@ -3171,7 +3179,7 @@ case \"${target}\" in\n \t\t\t\t;;\n \t\t\t\"\" | x86-64 | generic | native \\\n \t\t\t| k8 | k8-sse3 | athlon64 | athlon64-sse3 | opteron \\\n-\t\t\t| opteron-sse3 | athlon-fx | bdver2 | bdver1 | btver1 \\\n+\t\t\t| opteron-sse3 | athlon-fx | bdver2 | bdver1 | btver2 | btver1 \\\n \t\t\t| amdfam10 | barcelona | nocona | core2 | corei7 \\\n \t\t\t| corei7-avx | core-avx-i | core-avx2 | atom)\n \t\t\t\t# OK"}, {"sha": "61387793d1cf9b98e87c3d870d106ea222980f46", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -514,6 +514,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       if (name == SIG_GEODE)\n \tprocessor = PROCESSOR_GEODE;\n+      else if (has_movbe)\n+\tprocessor = PROCESSOR_BTVER2;\n       else if (has_bmi)\n         processor = PROCESSOR_BDVER2;\n       else if (has_xop)\n@@ -687,6 +689,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BTVER1:\n       cpu = \"btver1\";\n       break;\n+    case PROCESSOR_BTVER2:\n+      cpu = \"btver2\";\n+      break;\n \n     default:\n       /* Use something reasonable.  */"}, {"sha": "4afe587cca578a31fddc46e307fb4ae9f7d60a0a", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -118,6 +118,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__btver1\");\n       def_or_undef (parse_in, \"__btver1__\");\n       break;\n+    case PROCESSOR_BTVER2:\n+      def_or_undef (parse_in, \"__btver2\");\n+      def_or_undef (parse_in, \"__btver2__\");\n+      break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__pentium4\");\n       def_or_undef (parse_in, \"__pentium4__\");\n@@ -208,6 +212,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n    case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__tune_btver1__\");\n       break;\n+    case PROCESSOR_BTVER2:\n+      def_or_undef (parse_in, \"__tune_btver2__\");\n+       break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__tune_pentium4__\");\n       break;"}, {"sha": "9136c63193771b63a043dbd1c686d22be0430ffd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 96, "deletions": 6, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -1509,6 +1509,85 @@ struct processor_costs btver1_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+struct processor_costs btver2_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (5)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  9,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {3, 4, 3},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {3, 4, 3},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {4, 4, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 8},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {3, 3},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {4, 4, 3},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {4, 4, 5},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+\t\t\t\t\t/* On K8:\n+\t\t\t\t\t   MOVD reg64, xmmreg Double FSTORE 4\n+\t\t\t\t\t   MOVD reg32, xmmreg Double FSTORE 4\n+\t\t\t\t\t   On AMDFAM10:\n+\t\t\t\t\t   MOVD reg64, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1\n+\t\t\t\t\t    MOVD reg32, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1 */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  2048,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  100,\t\t\t\t\t/* number of parallel prefetches */\n+  2,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  {{libcall, {{6, loop}, {14, unrolled_loop}, {-1, rep_prefix_4_byte}}},\n+   {libcall, {{16, loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  {{libcall, {{8, loop}, {24, unrolled_loop},\n+\t      {2048, rep_prefix_4_byte}, {-1, libcall}}},\n+   {libcall, {{48, unrolled_loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  4,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  2,\t\t\t\t\t/* scalar load_cost.  */\n+  2,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* vec_stmt_cost.  */\n+  0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n+  2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n+  2,\t\t\t\t\t/* vec_align_load_cost.  */\n+  2,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  2,\t\t\t\t\t/* vec_store_cost.  */\n+  2,\t\t\t\t\t/* cond_taken_branch_cost.  */\n+  1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n+\n static const\n struct processor_costs pentium4_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n@@ -1909,8 +1988,10 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_BDVER1 (1<<PROCESSOR_BDVER1)\n #define m_BDVER2 (1<<PROCESSOR_BDVER2)\n #define m_BDVER\t(m_BDVER1 | m_BDVER2)\n+#define m_BTVER (m_BTVER1 | m_BTVER2)\n #define m_BTVER1 (1<<PROCESSOR_BTVER1)\n-#define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1)\n+#define m_BTVER2 (1<<PROCESSOR_BTVER2)\n+#define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER)\n \n #define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n #define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n@@ -1950,7 +2031,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n \n   /* X86_TUNE_USE_SAHF */\n-  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC,\n+  m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n      partial dependencies.  */\n@@ -2056,7 +2137,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM  | m_AMDFAM10 | m_BDVER | m_GENERIC,\n \n   /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL */\n-  m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER1,\n+  m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER,\n \n   /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL */\n   m_COREI7 | m_BDVER,\n@@ -2131,11 +2212,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n      vector path on AMD machines.  */\n-  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC64,\n+  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC64,\n \n   /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n      machines.  */\n-  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER1 | m_GENERIC64,\n+  m_CORE2I7_64 | m_K8 | m_AMDFAM10 | m_BDVER | m_BTVER | m_GENERIC64,\n \n   /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n      than a MOV.  */\n@@ -2606,6 +2687,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&bdver1_cost, 32, 24, 32, 7, 32},\n   {&bdver2_cost, 32, 24, 32, 7, 32},\n   {&btver1_cost, 32, 24, 32, 7, 32},\n+  {&btver2_cost, 32, 24, 32, 7, 32},\n   {&atom_cost, 16, 15, 16, 7, 16}\n };\n \n@@ -2636,7 +2718,8 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"amdfam10\",\n   \"bdver1\",\n   \"bdver2\",\n-  \"btver1\"\n+  \"btver1\",\n+  \"btver2\"\n };\n \f\n /* Return true if a red-zone is in use.  */\n@@ -3082,6 +3165,11 @@ ix86_option_override_internal (bool main_args_p)\n         | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16},\n       {\"generic32\", PROCESSOR_GENERIC32, CPU_PENTIUMPRO,\n \tPTA_HLE /* flags are only used for -march switch.  */ },\n+      {\"btver2\", PROCESSOR_BTVER2, CPU_GENERIC64,\n+\tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_SSE4_1\n+\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n+\t| PTA_BMI | PTA_F16C | PTA_MOVBE},\n       {\"generic64\", PROCESSOR_GENERIC64, CPU_GENERIC64,\n \tPTA_64BIT\n         | PTA_HLE /* flags are only used for -march switch.  */ },\n@@ -23692,6 +23780,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_PENTIUM:\n     case PROCESSOR_ATOM:\n     case PROCESSOR_K6:\n+    case PROCESSOR_BTVER2:\n       return 2;\n \n     case PROCESSOR_PENTIUMPRO:\n@@ -23898,6 +23987,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_BDVER1:\n     case PROCESSOR_BDVER2:\n     case PROCESSOR_BTVER1:\n+    case PROCESSOR_BTVER2:\n     case PROCESSOR_ATOM:\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:"}, {"sha": "f5981940236657d726b39416fe224ecd624f6a4d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -249,6 +249,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n #define TARGET_BDVER2 (ix86_tune == PROCESSOR_BDVER2)\n #define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n+#define TARGET_BTVER2 (ix86_tune == PROCESSOR_BTVER2)\n #define TARGET_ATOM (ix86_tune == PROCESSOR_ATOM)\n \n /* Feature tests against the various tunings.  */\n@@ -608,6 +609,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_bdver1,\n   TARGET_CPU_DEFAULT_bdver2,\n   TARGET_CPU_DEFAULT_btver1,\n+  TARGET_CPU_DEFAULT_btver2,\n \n   TARGET_CPU_DEFAULT_max\n };\n@@ -2067,6 +2069,7 @@ enum processor_type\n   PROCESSOR_BDVER1,\n   PROCESSOR_BDVER2,\n   PROCESSOR_BTVER1,\n+  PROCESSOR_BTVER2,\n   PROCESSOR_ATOM,\n   PROCESSOR_max\n };"}, {"sha": "6c2ac842bffbcf71ec4892d2b4cf503a5c75e311", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e32bfc16278c0ba2e7183dbc56ecbb3e8e65dfef", "patch": "@@ -310,7 +310,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n-\t\t    atom,generic64,amdfam10,bdver1,bdver2,btver1\"\n+\t\t    atom,generic64,amdfam10,bdver1,bdver2,btver1,btver2\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}]}