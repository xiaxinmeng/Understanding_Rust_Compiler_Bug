{"sha": "f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyOTNiOWRmYWI1ZTZlNzYwZjY1OTM0Zjc2YmJhYTcxODRiMGY0NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-12-27T21:23:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-12-27T21:23:30Z"}, "message": "ipa-devirt.c (polymorphic_call_target_d): Add n_odr_types.\n\n\n\t* ipa-devirt.c (polymorphic_call_target_d): Add n_odr_types.\n\t(polymorphic_call_target_hasher::hash): Hash it.\n\t(polymorphic_call_target_hasher::equal): Compare it.\n\t(possible_polymorphic_call_targets): Set it.\n\t* tree.c (free_lang_data): Rebuild type inheritance graph even on\n\tnon-LTO path.\n\n\t* g++.dg/ipa/devirt-53.C: New testcase.\n\nFrom-SVN: r267438", "tree": {"sha": "6a2c9e2c7738fe46774569842e7ff2063b3b67cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2c9e2c7738fe46774569842e7ff2063b3b67cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/comments", "author": null, "committer": null, "parents": [{"sha": "03b2d3defa7ef8c258d48f4bfbd66a08c27ea19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b2d3defa7ef8c258d48f4bfbd66a08c27ea19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b2d3defa7ef8c258d48f4bfbd66a08c27ea19c"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "310d4f03e0a07837bc1858aae73cfd4c8a0fa630", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "patch": "@@ -1,3 +1,12 @@\n+2018-12-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (polymorphic_call_target_d): Add n_odr_types.\n+\t(polymorphic_call_target_hasher::hash): Hash it.\n+\t(polymorphic_call_target_hasher::equal): Compare it.\n+\t(possible_polymorphic_call_targets): Set it.\n+\t* tree.c (free_lang_data): Rebuild type inheritance graph even on\n+\tnon-LTO path.\n+\n 2018-12-27  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/88225"}, {"sha": "4ba0f0b330f6c99bf0fc64e9084e24d2f7471ebf", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "patch": "@@ -2759,6 +2759,7 @@ struct polymorphic_call_target_d\n   vec <cgraph_node *> targets;\n   tree decl_warning;\n   int type_warning;\n+  unsigned int n_odr_types;\n   bool complete;\n   bool speculative;\n };\n@@ -2784,6 +2785,7 @@ polymorphic_call_target_hasher::hash (const polymorphic_call_target_d *odr_query\n   hstate.add_hwi (odr_query->type->id);\n   hstate.merge_hash (TYPE_UID (odr_query->context.outer_type));\n   hstate.add_hwi (odr_query->context.offset);\n+  hstate.add_hwi (odr_query->n_odr_types);\n \n   if (odr_query->context.speculative_outer_type)\n     {\n@@ -2814,7 +2816,9 @@ polymorphic_call_target_hasher::equal (const polymorphic_call_target_d *t1,\n \t      == t2->context.maybe_in_construction\n \t  && t1->context.maybe_derived_type == t2->context.maybe_derived_type\n \t  && (t1->context.speculative_maybe_derived_type\n-\t      == t2->context.speculative_maybe_derived_type));\n+\t      == t2->context.speculative_maybe_derived_type)\n+\t  /* Adding new type may affect outcome of target search.  */\n+\t  && t1->n_odr_types == t2->n_odr_types);\n }\n \n /* Remove entry in polymorphic call target cache hash.  */\n@@ -3220,6 +3224,7 @@ possible_polymorphic_call_targets (tree otr_type,\n   key.otr_token = otr_token;\n   key.speculative = speculative;\n   key.context = context;\n+  key.n_odr_types = odr_types.length ();\n   slot = polymorphic_call_target_hash->find_slot (&key, INSERT);\n   if (cache_token)\n    *cache_token = (void *)*slot;\n@@ -3436,6 +3441,7 @@ possible_polymorphic_call_targets (tree otr_type,\n \n   (*slot)->targets = nodes;\n   (*slot)->complete = complete;\n+  (*slot)->n_odr_types = odr_types.length ();\n   if (completep)\n     *completep = complete;\n "}, {"sha": "4213903793641ac24de9ba33758374fe9d7bb752", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "patch": "@@ -1,3 +1,7 @@\n+2018-12-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/devirt-53.C: New testcase.\n+\n 2018-12-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/81027"}, {"sha": "aea4f54346f3bc06cc42a7db8d36e49dc039e848", "filename": "gcc/testsuite/g++.dg/ipa/devirt-53.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-53.C?ref=f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do assemble }\n+// { dg-options \"-O2 -fdump-tree-fre1-details -std=c++11 -Wno-return-type\" }\n+typedef unsigned a;\n+enum b : a;\n+class c {\n+public:\n+  virtual a d();\n+};\n+using e = int;\n+class f;\n+class h {\n+public:\n+  f *operator->();\n+};\n+class i {\n+public:\n+  ~i() { j->d(); }\n+  c *j;\n+};\n+template <class g> class k : i {\n+public:\n+  k(g *);\n+};\n+class l;\n+class m {\n+  virtual b n(const e &, l **);\n+};\n+class o {\n+protected:\n+  h p;\n+};\n+class G {\n+  virtual b r(const e &, l **);\n+};\n+class l : G {};\n+class q {\n+public:\n+  q(l *);\n+  template <class t> void s(t);\n+};\n+class f : c {\n+  a d();\n+  virtual b r(e);\n+\n+public:\n+  class L : public l, o, m {\n+    b r(const e &y, l **) { p->r(y); }\n+    b n(const e &, l **) { k<l> a = this; }\n+  };\n+};\n+c u;\n+void fn1() {\n+  c v;\n+  k<c> b(&u);\n+  q(new f::L).s(v);\n+}\n+/* Check that f::d appears as possible target.  */\n+/* { dg-final { scan-tree-dump \"f::d\" \"fre\"  } } */"}, {"sha": "b6cb9f6f7b25683cceed995dd12090b7b561adab", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7293b9dfab5e6e760f65934f76bbaa7184b0f45/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f7293b9dfab5e6e760f65934f76bbaa7184b0f45", "patch": "@@ -6191,7 +6191,12 @@ free_lang_data (void)\n   /* If we are the LTO frontend we have freed lang-specific data already.  */\n   if (in_lto_p\n       || (!flag_generate_lto && !flag_generate_offload))\n-    return 0;\n+    {\n+      /* Rebuild type inheritance graph even when not doing LTO to get\n+\t consistent profile data.  */\n+      rebuild_type_inheritance_graph ();\n+      return 0;\n+    }\n \n   fld_incomplete_types = new hash_map<tree, tree>;\n   fld_simplified_types = new hash_map<tree, tree>;"}]}