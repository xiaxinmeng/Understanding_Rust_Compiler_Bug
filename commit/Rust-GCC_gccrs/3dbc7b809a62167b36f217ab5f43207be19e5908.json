{"sha": "3dbc7b809a62167b36f217ab5f43207be19e5908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiYzdiODA5YTYyMTY3YjM2ZjIxN2FiNWY0MzIwN2JlMTllNTkwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T19:59:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T21:24:34Z"}, "message": "libstdc++: Improve diagnostics for std::get with invalid tuple index\n\nThis adds a deleted overload of std::get<I>(const tuple<Types...>&).\nInvalid calls with an out of range index will match the deleted overload\nand give a single, clear error about calling a deleted function, instead\nof overload resolution errors for every std::get overload in the\nlibrary.\n\nThis changes the current output of 15+ errors (plus notes and associated\nheader context) into just two errors (plus context):\n\nerror: static assertion failed: tuple index must be in range\nerror: use of deleted function 'constexpr std::__enable_if_t<(__i >= sizeof... (_Types))> std::get(const std::tuple<_Types ...>&) [with long unsigned int __i = 1; _Elements = {int}; std::__enable_if_t<(__i >= sizeof... (_Types))> = void]'\n\nThis seems like a nice improvement, although PR c++/66968 means that\n\"_Types\" is printed in the signature rather than \"_Elements\".\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/tuple (get<I>): Add deleted overload for bad\n\tindex.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust\n\texpected errors.", "tree": {"sha": "03e1db21d551a906f19e2f1bafab5af6b965c635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e1db21d551a906f19e2f1bafab5af6b965c635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbc7b809a62167b36f217ab5f43207be19e5908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc7b809a62167b36f217ab5f43207be19e5908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbc7b809a62167b36f217ab5f43207be19e5908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc7b809a62167b36f217ab5f43207be19e5908/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b3861496bffae8b813ea196c1c5b27f79fbe69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b3861496bffae8b813ea196c1c5b27f79fbe69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b3861496bffae8b813ea196c1c5b27f79fbe69"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "8ee0d2f1ef55f68740960e3873777f69a97b3b84", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbc7b809a62167b36f217ab5f43207be19e5908/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbc7b809a62167b36f217ab5f43207be19e5908/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=3dbc7b809a62167b36f217ab5f43207be19e5908", "patch": "@@ -1406,6 +1406,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::forward<const __element_type>(std::__get_helper<__i>(__t));\n     }\n \n+  /// @cond undocumented\n+  // Deleted overload chosen for invalid indices.\n+  template<size_t __i, typename... _Elements>\n+    constexpr __enable_if_t<(__i >= sizeof...(_Elements))>\n+    get(const tuple<_Elements...>&) = delete;\n+  /// @endcond\n+\n #if __cplusplus >= 201402L\n \n #define __cpp_lib_tuples_by_type 201304"}, {"sha": "225bb6245a6d0e35a0b441cb01b55db1dcf5b5e4", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbc7b809a62167b36f217ab5f43207be19e5908/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbc7b809a62167b36f217ab5f43207be19e5908/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=3dbc7b809a62167b36f217ab5f43207be19e5908", "patch": "@@ -25,41 +25,38 @@ test01()\n {\n   using test_type = std::tuple<>;\n   test_type t;\n-  std::get<0>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<0>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<0>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n-  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<0>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<0>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<0>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n+  std::get<5>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n }\n \n void\n test02()\n {\n   using test_type = std::tuple<int>;\n   test_type t;\n-  std::get<1>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<1>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<1>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n-  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<1>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<1>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<1>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n+  std::get<5>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n }\n \n void\n test03()\n {\n   using test_type = std::tuple<int, int, int, int>;\n   test_type t;\n-  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n-  std::get<6>(t);\t\t\t\t// { dg-error \"no match\" }\n-  std::get<6>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n-  std::get<6>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n+  std::get<6>(t);\t\t\t\t// { dg-error \"deleted\" }\n+  std::get<6>(const_cast<const test_type&>(t));\t// { dg-error \"deleted\" }\n+  std::get<6>(static_cast<test_type&&>(t));\t// { dg-error \"deleted\" }\n }\n \n-// { dg-prune-output \"tuple index must be in range\" }\n-// { dg-prune-output \"no type named .type\" }\n-// { dg-prune-output \"type/value mismatch\" }\n-// { dg-prune-output \"use of deleted function\" }\n+// { dg-error \"tuple index must be in range\" \"\" { target *-*-* } 0 }"}]}