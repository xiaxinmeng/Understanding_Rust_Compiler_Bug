{"sha": "63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "node_id": "C_kwDOANBUbNoAKDYzYmI5OGUxYzFlYWJhYTlhNjhlOGE2MjcwNjYzZjJkZmZmMDQ3ZDg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T13:31:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T21:45:45Z"}, "message": "libstdc++: Simplify definition of std::regex_constants variables\n\nThis removes the __syntax_option and __match_flag enumeration types,\nwhich are only used to define enumerators with successive values that\nare then used to initialize the std::regex_constants global variables.\n\nBy defining enumerators in the syntax_option_type and match_flag_type\nenumeration types with the correct values for the globals we get rid of\ntwo useless enumeration types that just count from 0 to N, and we\nimprove the debugging experience. Because the enumeration types now have\nenumerators defined, GDB will print values in terms of those enumerators\ne.g.\n\n$6 = (std::regex_constants::_S_ECMAScript | std::regex_constants::_S_multiline)\n\nPreviously this would have been shown as simply 0x810 because there were\nno enumerators of that type.\n\nThis changes the type and value of enumerators such as _S_grep, but\nusers should never be referring to them directly anyway.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex_constants.h (__syntax_option, __match_flag):\n\tRemove.\n\t(syntax_option_type, match_flag_type): Define enumerators.\n\tUse to initialize globals. Add constexpr to compound assignment\n\toperators.\n\t* include/bits/regex_error.h (error_type): Add comment.\n\t* testsuite/28_regex/constants/constexpr.cc: Remove comment.\n\t* testsuite/28_regex/constants/error_type.cc: Improve comment.\n\t* testsuite/28_regex/constants/match_flag_type.cc: Check bitmask\n\trequirements.\n\t* testsuite/28_regex/constants/syntax_option_type.cc: Likewise.", "tree": {"sha": "008801da58d2fbf27e15866f335f813f5d2363bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008801da58d2fbf27e15866f335f813f5d2363bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926d64906af2efc8714d37e6db2171784cfa60cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926d64906af2efc8714d37e6db2171784cfa60cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926d64906af2efc8714d37e6db2171784cfa60cd"}], "stats": {"total": 205, "additions": 114, "deletions": 91}, "files": [{"sha": "9be14292519a231a1996a83c049b10b3b0fba245", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 63, "deletions": 85, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -51,21 +51,6 @@ namespace regex_constants\n    * @name 5.1 Regular Expression Syntax Options\n    */\n   ///@{\n-  enum __syntax_option\n-  {\n-    _S_icase,\n-    _S_nosubs,\n-    _S_optimize,\n-    _S_collate,\n-    _S_ECMAScript,\n-    _S_basic,\n-    _S_extended,\n-    _S_awk,\n-    _S_grep,\n-    _S_egrep,\n-    _S_polynomial,\n-    _S_multiline\n-  };\n \n   /**\n    * @brief This is a bitmask type indicating how to interpret the regex.\n@@ -78,38 +63,48 @@ namespace regex_constants\n    * elements @c ECMAScript, @c basic, @c extended, @c awk, @c grep, @c egrep\n    * %set.\n    */\n-  enum syntax_option_type : unsigned int { };\n+  enum syntax_option_type : unsigned int\n+  {\n+    _S_icase\t\t= 1 << 0,\n+    _S_nosubs\t\t= 1 << 1,\n+    _S_optimize\t\t= 1 << 2,\n+    _S_collate\t\t= 1 << 3,\n+    _S_ECMAScript\t= 1 << 4,\n+    _S_basic\t\t= 1 << 5,\n+    _S_extended\t\t= 1 << 6,\n+    _S_awk\t\t= 1 << 7,\n+    _S_grep\t\t= 1 << 8,\n+    _S_egrep\t\t= 1 << 9,\n+    _S_polynomial\t= 1 << 10,\n+    _S_multiline\t= 1 << 11\n+  };\n \n   /**\n    * Specifies that the matching of regular expressions against a character\n    * sequence shall be performed without regard to case.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type icase =\n-    static_cast<syntax_option_type>(1 << _S_icase);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type icase = _S_icase;\n \n   /**\n    * Specifies that when a regular expression is matched against a character\n    * container sequence, no sub-expression matches are to be stored in the\n    * supplied match_results structure.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type nosubs =\n-    static_cast<syntax_option_type>(1 << _S_nosubs);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type nosubs = _S_nosubs;\n \n   /**\n    * Specifies that the regular expression engine should pay more attention to\n    * the speed with which regular expressions are matched, and less to the\n    * speed with which regular expression objects are constructed. Otherwise\n    * it has no detectable effect on the program output.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type optimize =\n-    static_cast<syntax_option_type>(1 << _S_optimize);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type optimize = _S_optimize;\n \n   /**\n    * Specifies that character ranges of the form [a-b] should be locale\n    * sensitive.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type collate =\n-    static_cast<syntax_option_type>(1 << _S_collate);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type collate = _S_collate;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -119,8 +114,7 @@ namespace regex_constants\n    * in the PERL scripting language but extended with elements found in the\n    * POSIX regular expression grammar.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type ECMAScript =\n-    static_cast<syntax_option_type>(1 << _S_ECMAScript);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type ECMAScript = _S_ECMAScript;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -129,17 +123,15 @@ namespace regex_constants\n    * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n    * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type basic =\n-    static_cast<syntax_option_type>(1 << _S_basic);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type basic = _S_basic;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n    * Portable Operating System Interface (POSIX), Base Definitions and\n    * Headers, Section 9, Regular Expressions.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type extended =\n-    static_cast<syntax_option_type>(1 << _S_extended);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type extended = _S_extended;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -149,26 +141,23 @@ namespace regex_constants\n    * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos,, &apos,,\n    * and \\\\ddd (where ddd is one, two, or three octal digits).\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type awk =\n-    static_cast<syntax_option_type>(1 << _S_awk);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type awk = _S_awk;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n    * identical to syntax_option_type basic, except that newlines are treated\n    * as whitespace.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type grep =\n-    static_cast<syntax_option_type>(1 << _S_grep);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type grep = _S_grep;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep when given the -E option in\n    * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n    * extended, except that newlines are treated as whitespace.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type egrep =\n-    static_cast<syntax_option_type>(1 << _S_egrep);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type egrep = _S_egrep;\n \n #if __cplusplus >= 201703L || !defined __STRICT_ANSI__\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -180,22 +169,19 @@ namespace regex_constants\n    * Valid for the ECMAScript syntax, ignored otherwise.\n    * @since C++17\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type multiline =\n-    static_cast<syntax_option_type>(1 << _S_multiline);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type multiline = _S_multiline;\n #endif\n \n   /// Extension: Equivalent to regex_constants::multiline for C++11 and C++14.\n-  _GLIBCXX17_INLINE constexpr syntax_option_type __multiline =\n-    static_cast<syntax_option_type>(1 << _S_multiline);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type __multiline = _S_multiline;\n \n   /**\n    * Extension: Ensure both space complexity of compiled regex and\n    * time complexity execution are not exponential.\n    * If specified in a regex with back-references, the exception\n    * regex_constants::error_complexity will be thrown.\n    */\n-  _GLIBCXX17_INLINE constexpr syntax_option_type __polynomial =\n-    static_cast<syntax_option_type>(1 << _S_polynomial);\n+  _GLIBCXX17_INLINE constexpr syntax_option_type __polynomial = _S_polynomial;\n \n   constexpr inline syntax_option_type\n   operator&(syntax_option_type __a, syntax_option_type __b)\n@@ -222,14 +208,17 @@ namespace regex_constants\n   operator~(syntax_option_type __a)\n   { return (syntax_option_type)(~static_cast<unsigned int>(__a)); }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline syntax_option_type&\n   operator&=(syntax_option_type& __a, syntax_option_type __b)\n   { return __a = __a & __b; }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline syntax_option_type&\n   operator|=(syntax_option_type& __a, syntax_option_type __b)\n   { return __a = __a | __b; }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline syntax_option_type&\n   operator^=(syntax_option_type& __a, syntax_option_type __b)\n   { return __a = __a ^ __b; }\n@@ -247,94 +236,84 @@ namespace regex_constants\n    */\n   ///@{\n \n-  enum __match_flag\n-  {\n-    _S_not_bol,\n-    _S_not_eol,\n-    _S_not_bow,\n-    _S_not_eow,\n-    _S_any,\n-    _S_not_null,\n-    _S_continuous,\n-    _S_prev_avail,\n-    _S_sed,\n-    _S_no_copy,\n-    _S_first_only,\n-    _S_match_flag_last\n-  };\n-\n   /**\n    * @brief This is a bitmask type indicating regex matching rules.\n    *\n    * The @c match_flag_type is implementation defined but it is valid to\n    * perform bitwise operations on these values and expect the right thing to\n    * happen.\n    */\n-  enum match_flag_type : unsigned int { };\n+  enum match_flag_type : unsigned int\n+  {\n+    _S_default,\n+    _S_not_bol\t\t= 1 << 0,\n+    _S_not_eol\t\t= 1 << 1,\n+    _S_not_bow\t\t= 1 << 2,\n+    _S_not_eow\t\t= 1 << 3,\n+    _S_any\t\t= 1 << 4,\n+    _S_not_null\t\t= 1 << 5,\n+    _S_continuous\t= 1 << 6,\n+    _S_prev_avail\t= 1 << 7,\n+    _S_sed\t\t= 1 << 8,\n+    _S_no_copy\t\t= 1 << 9,\n+    _S_first_only\t= 1 << 10,\n+    _S_match_flag_last\t= 1 << 11\n+  };\n \n   /**\n    * The default matching rules.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_default =\n-    static_cast<match_flag_type>(0);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_default = _S_default;\n \n   /**\n    * The first character in the sequence [first, last) is treated as though it\n    * is not at the beginning of a line, so the character (^) in the regular\n    * expression shall not match [first, first).\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bol =\n-    static_cast<match_flag_type>(1 << _S_not_bol);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bol = _S_not_bol;\n \n   /**\n    * The last character in the sequence [first, last) is treated as though it\n    * is not at the end of a line, so the character ($) in the regular\n    * expression shall not match [last, last).\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eol =\n-    static_cast<match_flag_type>(1 << _S_not_eol);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eol = _S_not_eol;\n \n   /**\n    * The expression \\\\b is not matched against the sub-sequence\n    * [first,first).\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bow =\n-    static_cast<match_flag_type>(1 << _S_not_bow);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_bow = _S_not_bow;\n \n   /**\n    * The expression \\\\b should not be matched against the sub-sequence\n    * [last,last).\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eow =\n-    static_cast<match_flag_type>(1 << _S_not_eow);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_eow = _S_not_eow;\n \n   /**\n    * If more than one match is possible then any match is an acceptable\n    * result.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_any =\n-    static_cast<match_flag_type>(1 << _S_any);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_any = _S_any;\n \n   /**\n    * The expression does not match an empty sequence.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_not_null =\n-    static_cast<match_flag_type>(1 << _S_not_null);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_not_null = _S_not_null;\n \n   /**\n    * The expression only matches a sub-sequence that begins at first .\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_continuous =\n-    static_cast<match_flag_type>(1 << _S_continuous);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_continuous = _S_continuous;\n \n   /**\n    * `--first` is a valid iterator position.  When this flag is set then the\n    * flags `match_not_bol` and `match_not_bow` are ignored by the algorithms\n    * `regex_match`, `regex_search`, and `regex_replace`, and by the iterators\n    * `regex_iterator` and `regex_token_iterator`.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type match_prev_avail =\n-    static_cast<match_flag_type>(1 << _S_prev_avail);\n+  _GLIBCXX17_INLINE constexpr match_flag_type match_prev_avail = _S_prev_avail;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n@@ -362,32 +341,28 @@ namespace regex_constants\n    *         undefined, use the empty string instead. If\n    *         nn > match_results::size(), the result is implementation-defined.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type format_default =\n-    static_cast<match_flag_type>(0);\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_default = _S_default;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n    * new string is constructed using the rules used by the POSIX sed utility\n    * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n    * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type format_sed =\n-    static_cast<match_flag_type>(1 << _S_sed);\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_sed = _S_sed;\n \n   /**\n    * During a search and replace operation, sections of the character\n    * container sequence being searched that do not match the regular\n    * expression shall not be copied to the output string.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type format_no_copy =\n-    static_cast<match_flag_type>(1 << _S_no_copy);\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_no_copy = _S_no_copy;\n \n   /**\n    * When specified during a search and replace operation, only the first\n    * occurrence of the regular expression shall be replaced.\n    */\n-  _GLIBCXX17_INLINE constexpr match_flag_type format_first_only =\n-    static_cast<match_flag_type>(1 << _S_first_only);\n+  _GLIBCXX17_INLINE constexpr match_flag_type format_first_only = _S_first_only;\n \n   constexpr inline match_flag_type\n   operator&(match_flag_type __a, match_flag_type __b)\n@@ -414,14 +389,17 @@ namespace regex_constants\n   operator~(match_flag_type __a)\n   { return (match_flag_type)(~static_cast<unsigned int>(__a)); }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline match_flag_type&\n   operator&=(match_flag_type& __a, match_flag_type __b)\n   { return __a = __a & __b; }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline match_flag_type&\n   operator|=(match_flag_type& __a, match_flag_type __b)\n   { return __a = __a | __b; }\n \n+  _GLIBCXX14_CONSTEXPR\n   inline match_flag_type&\n   operator^=(match_flag_type& __a, match_flag_type __b)\n   { return __a = __a ^ __b; }"}, {"sha": "b447f2b6b025eaf0f318d115460d2f2d1aaea283", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -48,7 +48,7 @@ namespace regex_constants\n \n   enum error_type\n     {\n-      _S_error_collate,\n+      _S_error_collate, // XXX should have been a non-zero value\n       _S_error_ctype,\n       _S_error_escape,\n       _S_error_backref,"}, {"sha": "818a57c951c69b799c4626a586d4a14bb05ff6e1", "filename": "libstdc++-v3/testsuite/28_regex/constants/constexpr.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -18,8 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 28.5.4\n-\n #include <regex>\n \n // libstdc++/65420"}, {"sha": "48407e77bd8ccf6b7cb7937a60077f4ba8946c6e", "filename": "libstdc++-v3/testsuite/28_regex/constants/error_type.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Ferror_type.cc?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -20,7 +20,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 28.5.3 \n+// C++11 28.5.3 [re.err]\n \n #include <regex>\n "}, {"sha": "a3dc06ba45e019702bb37cda34efd4047ab36d25", "filename": "libstdc++-v3/testsuite/28_regex/constants/match_flag_type.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fmatch_flag_type.cc?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -20,9 +20,10 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 28.5.1 \n+// C++11 28.5.2 [re.matchflag]\n \n #include <regex>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -43,6 +44,28 @@ test01()\n   flag |= std::regex_constants::format_first_only;\n }\n \n+#if __cplusplus >= 201402L\n+static_assert(\n+    __gnu_test::test_bitmask_values( {\n+      std::regex_constants::match_not_bol,\n+      std::regex_constants::match_not_eol,\n+      std::regex_constants::match_not_bow,\n+      std::regex_constants::match_not_eow,\n+      std::regex_constants::match_any,\n+      std::regex_constants::match_not_null,\n+      std::regex_constants::match_continuous,\n+      std::regex_constants::match_prev_avail,\n+      std::regex_constants::format_sed,\n+      std::regex_constants::format_no_copy,\n+      std::regex_constants::format_first_only\n+    },\n+    {\n+      std::regex_constants::match_default,\n+      std::regex_constants::format_default\n+    }),\n+    \"std::regex_constants::match_flag_type bitmask elements are distinct\" );\n+#endif\n+\n int main()\n {\n   test01();"}, {"sha": "0ed17208a053a53752e6bc266938914de42dc8e8", "filename": "libstdc++-v3/testsuite/28_regex/constants/syntax_option_type.cc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fsyntax_option_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fsyntax_option_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fsyntax_option_type.cc?ref=63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "patch": "@@ -20,10 +20,11 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 28.5.1 \n+// C++11 28.5.1 [re.synopt]\n \n #include <regex>\n #include <testsuite_hooks.h>\n+#include <testsuite_common_types.h>\n \n void\n test01()\n@@ -92,6 +93,29 @@ test05()\n   VERIFY(re.mark_count() == 0);\n }\n \n+#if __cplusplus >= 201402L\n+static_assert(\n+    __gnu_test::test_bitmask_values( {\n+      std::regex_constants::icase,\n+      std::regex_constants::nosubs,\n+      std::regex_constants::optimize,\n+      std::regex_constants::collate,\n+      std::regex_constants::ECMAScript,\n+      std::regex_constants::basic,\n+      std::regex_constants::extended,\n+      std::regex_constants::awk,\n+      std::regex_constants::grep,\n+      std::regex_constants::egrep,\n+      std::regex_constants::__multiline,\n+      std::regex_constants::__polynomial\n+    }, {\n+#if __cplusplus >= 201703L\n+      std::regex_constants::multiline // equal to __multiline\n+#endif\n+    }),\n+    \"std::regex_constants::syntax_option_type bitmask elements are distinct\" );\n+#endif\n+\n int main()\n {\n   test01();"}]}