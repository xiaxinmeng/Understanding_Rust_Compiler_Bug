{"sha": "24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjMGVmMzcyY2JiMTFjMjVlYmQxYjQ5YmNhYWEzMWI4NTRiNDIxMQ==", "commit": {"author": {"name": "Graham Stott", "email": "graham.stott@btinternet.com", "date": "2003-01-03T02:11:55Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2003-01-03T02:11:55Z"}, "message": "parser.c (struct cp_parser): Add access_checks_lists field\n\n\n        * parser.c (struct cp_parser): Add access_checks_lists field\n        (cp_parser_simple_declaration): Use.\n        (cp_parser_init_declarator): Likewise.\n\nFrom-SVN: r60813", "tree": {"sha": "9cab6914687e6717427a2d1a3c4553e18b3e3364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cab6914687e6717427a2d1a3c4553e18b3e3364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211/comments", "author": {"login": "Graham-stott", "id": 17800827, "node_id": "MDQ6VXNlcjE3ODAwODI3", "avatar_url": "https://avatars.githubusercontent.com/u/17800827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Graham-stott", "html_url": "https://github.com/Graham-stott", "followers_url": "https://api.github.com/users/Graham-stott/followers", "following_url": "https://api.github.com/users/Graham-stott/following{/other_user}", "gists_url": "https://api.github.com/users/Graham-stott/gists{/gist_id}", "starred_url": "https://api.github.com/users/Graham-stott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Graham-stott/subscriptions", "organizations_url": "https://api.github.com/users/Graham-stott/orgs", "repos_url": "https://api.github.com/users/Graham-stott/repos", "events_url": "https://api.github.com/users/Graham-stott/events{/privacy}", "received_events_url": "https://api.github.com/users/Graham-stott/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7241bd1b015075655d16023439572e71befe5034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7241bd1b015075655d16023439572e71befe5034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7241bd1b015075655d16023439572e71befe5034"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "b6a33ff65562103d085ac213920c8542b38c239a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "patch": "@@ -1,3 +1,9 @@\n+2003-01-03  Graham Stott  <graham.stott@btinternet.com>\n+\n+\t* parser.c (struct cp_parser): Add access_checks_lists field\n+\t(cp_parser_simple_declaration): Use.\n+\t(cp_parser_init_declarator): Likewise. \n+\n 2003-01-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* parser.c (cp_parser_declaration): Accept the __extension__"}, {"sha": "9592f6cb7369e9f55f18f36e7ac3c44d5512bc27", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0ef372cbb11c25ebd1b49bcaaa31b854b4211/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=24c0ef372cbb11c25ebd1b49bcaaa31b854b4211", "patch": "@@ -1343,6 +1343,10 @@ typedef struct cp_parser GTY(())\n   /* The number of template parameter lists that apply directly to the\n      current declaration.  */\n   unsigned num_template_parameter_lists;\n+\n+  /* List of access checks lists, used to prevent GC collection while\n+     they are in use.  */\n+  tree access_checks_lists;\n } cp_parser;\n \n /* The type of a function that parses some kind of expression  */\n@@ -6741,6 +6745,10 @@ cp_parser_simple_declaration (parser, function_definition_allowed_p)\n   /* We no longer need to defer access checks.  */\n   access_checks = cp_parser_stop_deferring_access_checks (parser);\n \n+  /* Prevent access checks from being reclaimed by GC.  */\n+  parser->access_checks_lists = tree_cons (NULL_TREE, access_checks,\n+\t\t\t\t\t   parser->access_checks_lists);\n+\n   /* Keep going until we hit the `;' at the end of the simple\n      declaration.  */\n   saw_declarator = false;\n@@ -6770,7 +6778,12 @@ cp_parser_simple_declaration (parser, function_definition_allowed_p)\n \t    error (\"mixing declarations and function-definitions is forbidden\");\n \t  /* Otherwise, we're done with the list of declarators.  */\n \t  else\n-\t    return;\n+\t    {\n+\t      /* Discard access checks no longer in use. */\n+\t      parser->access_checks_lists\n+\t\t= TREE_CHAIN (parser->access_checks_lists);\n+\t      return;\n+\t    }\n \t}\n       /* The next token should be either a `,' or a `;'.  */\n       token = cp_lexer_peek_token (parser->lexer);\n@@ -6786,6 +6799,9 @@ cp_parser_simple_declaration (parser, function_definition_allowed_p)\n \t  cp_parser_error (parser, \"expected `,' or `;'\");\n \t  /* Skip tokens until we reach the end of the statement.  */\n \t  cp_parser_skip_to_end_of_statement (parser);\n+\t  /* Discard access checks no longer in use.  */\n+          parser->access_checks_lists\n+\t    = TREE_CHAIN (parser->access_checks_lists);\n \t  return;\n \t}\n       /* After the first time around, a function-definition is not\n@@ -6814,6 +6830,9 @@ cp_parser_simple_declaration (parser, function_definition_allowed_p)\n   /* Mark all the classes that appeared in the decl-specifier-seq as\n      having received a `;'.  */\n   note_list_got_semicolon (decl_specifiers);\n+\n+  /* Discard access checks no longer in use.  */\n+  parser->access_checks_lists = TREE_CHAIN (parser->access_checks_lists);\n }\n \n /* Parse a decl-specifier-seq.\n@@ -9709,10 +9728,20 @@ cp_parser_init_declarator (parser,\n   declarator_access_checks \n     = cp_parser_stop_deferring_access_checks (parser);\n \n+  /* Prevent the access checks from being reclaimed by GC.  */\n+  parser->access_checks_lists\n+    = tree_cons (NULL_TREE, declarator_access_checks,\n+\t\t parser->access_checks_lists);\n+\n   /* If the DECLARATOR was erroneous, there's no need to go\n      further.  */\n   if (declarator == error_mark_node)\n-    return error_mark_node;\n+    {\n+      /* Discard access checks no longer in use.  */\n+      parser->access_checks_lists\n+\t= TREE_CHAIN (parser->access_checks_lists);\n+      return error_mark_node;\n+    }\n \n   /* Figure out what scope the entity declared by the DECLARATOR is\n      located in.  `grokdeclarator' sometimes changes the scope, so\n@@ -9746,6 +9775,9 @@ cp_parser_init_declarator (parser,\n \t     error message.  */\n \t  cp_parser_error (parser,\n \t\t\t   \"a function-definition is not allowed here\");\n+\t  /* Discard access checks no longer in use.  */\n+\t  parser->access_checks_lists\n+\t    = TREE_CHAIN (parser->access_checks_lists);\n \t  return error_mark_node;\n \t}\n       else\n@@ -9775,6 +9807,10 @@ cp_parser_init_declarator (parser,\n \t  /* Pull the access-checks apart again.  */\n \t  *ac = NULL_TREE;\n \n+\t  /* Discard access checks no longer in use.  */\n+          parser->access_checks_lists\n+\t     = TREE_CHAIN (parser->access_checks_lists);\n+\n \t  return decl;\n \t}\n     }\n@@ -9791,6 +9827,9 @@ cp_parser_init_declarator (parser,\n     {\n       cp_parser_error (parser, \n \t\t       \"expected constructor, destructor, or type conversion\");\n+      /* Discard access checks no longer in use.  */\n+      parser->access_checks_lists\n+\t= TREE_CHAIN (parser->access_checks_lists);\n       return error_mark_node;\n     }\n \n@@ -9804,6 +9843,9 @@ cp_parser_init_declarator (parser,\n       && token->type != CPP_SEMICOLON)\n     {\n       cp_parser_error (parser, \"expected init-declarator\");\n+      /* Discard access checks no longer in use.  */\n+      parser->access_checks_lists\n+\t = TREE_CHAIN (parser->access_checks_lists);\n       return error_mark_node;\n     }\n \n@@ -9818,7 +9860,12 @@ cp_parser_init_declarator (parser,\n   /* Check that the number of template-parameter-lists is OK.  */\n   if (!cp_parser_check_declarator_template_parameters (parser, \n \t\t\t\t\t\t       declarator))\n-    return error_mark_node;\n+    {\n+      /* Discard access checks no longer in use.  */\n+      parser->access_checks_lists\n+\t = TREE_CHAIN (parser->access_checks_lists);\n+      return error_mark_node;\n+    }\n \n   /* Enter the newly declared entry in the symbol table.  If we're\n      processing a declaration in a class-specifier, we wait until\n@@ -9914,6 +9961,10 @@ cp_parser_init_declarator (parser,\n \t\t    ((is_parenthesized_init || !is_initialized)\n \t\t     ? 0 : LOOKUP_ONLYCONVERTING));\n \n+  /* Discard access checks no longer in use.  */\n+  parser->access_checks_lists\n+    = TREE_CHAIN (parser->access_checks_lists);\n+\n   return decl;\n }\n "}]}