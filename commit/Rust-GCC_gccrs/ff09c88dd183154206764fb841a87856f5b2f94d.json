{"sha": "ff09c88dd183154206764fb841a87856f5b2f94d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwOWM4OGRkMTgzMTU0MjA2NzY0ZmI4NDFhODc4NTZmNWIyZjk0ZA==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-06-16T13:38:37Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-06-16T13:38:37Z"}, "message": "aarch64-arches.def: Add \"armv8.1-a\".\n\n2015-06-16  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/aarch64/aarch64-arches.def: Add \"armv8.1-a\".\n\t* config/aarch64/aarch64-options-extensions.def: Update \"fP\",\n\t\"simd\" and \"crypto\".  Add \"lse\", \"pan\", \"lor\" and \"rdma\".\n\t* gcc/config/aarch64/aarch64.h (AARCH64_FL_LSE): New.\n\t(AARCH64_FL_PAN): New.\n\t(AARCH64_FL_LOR): New.\n\t(AARCH64_FL_RDMA): New.\n\t(AARCH64_FL_FOR_ARCH8_1): New.\n\t* doc/invoke.texi (AArch64 Options): Add \"armv8.1-a\" to\n\t-march. Add \"lse\", \"pan\", \"lor\", \"rdma\" to feature modifiers.\n\nFrom-SVN: r224519", "tree": {"sha": "e886b9f4e548cb4ac91655da5141b8514306d2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e886b9f4e548cb4ac91655da5141b8514306d2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff09c88dd183154206764fb841a87856f5b2f94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff09c88dd183154206764fb841a87856f5b2f94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff09c88dd183154206764fb841a87856f5b2f94d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff09c88dd183154206764fb841a87856f5b2f94d/comments", "author": null, "committer": null, "parents": [{"sha": "ca30789c8a33028a0fd0aaf6715d3de460556526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca30789c8a33028a0fd0aaf6715d3de460556526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca30789c8a33028a0fd0aaf6715d3de460556526"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "a277a7ab2a227f66f6363b32591f21f0230328d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff09c88dd183154206764fb841a87856f5b2f94d", "patch": "@@ -1,3 +1,16 @@\n+2015-06-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def: Add \"armv8.1-a\".\n+\t* config/aarch64/aarch64-options-extensions.def: Update \"fP\",\n+\t\"simd\" and \"crypto\".  Add \"lse\", \"pan\", \"lor\" and \"rdma\".\n+\t* gcc/config/aarch64/aarch64.h (AARCH64_FL_LSE): New.\n+\t(AARCH64_FL_PAN): New.\n+\t(AARCH64_FL_LOR): New.\n+\t(AARCH64_FL_RDMA): New.\n+\t(AARCH64_FL_FOR_ARCH8_1): New.\n+\t* doc/invoke.texi (AArch64 Options): Add \"armv8.1-a\" to\n+\t-march. Add \"lse\", \"pan\", \"lor\", \"rdma\" to feature modifiers.\n+\n 2015-06-16  Martin Liska  <mliska@suse.cz>\n \n \t* bitmap.c (dump_bitmap_statistics): Fix GNU coding style."}, {"sha": "abbfce66bfe99f29ee1897030360131757aefccf", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=ff09c88dd183154206764fb841a87856f5b2f94d", "patch": "@@ -27,3 +27,4 @@\n    the flags implied by the architecture.  */\n \n AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8,  AARCH64_FL_FOR_ARCH8)\n+AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8,  AARCH64_FL_FOR_ARCH8_1)"}, {"sha": "1762cc8d58fe0a9e7f40b95a753fd80150be65ed", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=ff09c88dd183154206764fb841a87856f5b2f94d", "patch": "@@ -39,7 +39,11 @@\n    AArch64, and therefore serves as a template for adding more CPUs in the\n    future.  */\n \n-AARCH64_OPT_EXTENSION(\"fp\",\tAARCH64_FL_FP,                          AARCH64_FL_FPSIMD | AARCH64_FL_CRYPTO, \"fp\")\n-AARCH64_OPT_EXTENSION(\"simd\",\tAARCH64_FL_FPSIMD,                      AARCH64_FL_SIMD | AARCH64_FL_CRYPTO,   \"asimd\")\n-AARCH64_OPT_EXTENSION(\"crypto\",\tAARCH64_FL_CRYPTO | AARCH64_FL_FPSIMD,  AARCH64_FL_CRYPTO,                     \"aes pmull sha1 sha2\")\n+AARCH64_OPT_EXTENSION(\"fp\",\tAARCH64_FL_FP,                          AARCH64_FL_FPSIMD | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, \"fp\")\n+AARCH64_OPT_EXTENSION(\"simd\",\tAARCH64_FL_FPSIMD,                      AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA,   \"asimd\")\n+AARCH64_OPT_EXTENSION(\"crypto\",\tAARCH64_FL_CRYPTO | AARCH64_FL_FPSIMD,  AARCH64_FL_CRYPTO,   \"aes pmull sha1 sha2\")\n AARCH64_OPT_EXTENSION(\"crc\",\tAARCH64_FL_CRC,                         AARCH64_FL_CRC,                        \"crc32\")\n+AARCH64_OPT_EXTENSION(\"lse\",\tAARCH64_FL_LSE,                         AARCH64_FL_LSE,                        \"lse\")\n+AARCH64_OPT_EXTENSION(\"pan\",\tAARCH64_FL_PAN,\t\tAARCH64_FL_PAN,\t\t\"pan\")\n+AARCH64_OPT_EXTENSION(\"lor\",\tAARCH64_FL_LOR,\t\tAARCH64_FL_LOR,\t\t\"lor\")\n+AARCH64_OPT_EXTENSION(\"rdma\",\tAARCH64_FL_RDMA | AARCH64_FL_FPSIMD,\tAARCH64_FL_RDMA,\t\"rdma\")"}, {"sha": "a22c6e40b5e8d59e753852570df4670ded51e24e", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=ff09c88dd183154206764fb841a87856f5b2f94d", "patch": "@@ -201,6 +201,11 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_CRC        (1 << 3)\t/* Has CRC.  */\n /* Has static dispatch of FMA.  */\n #define AARCH64_FL_USE_FMA_STEERING_PASS (1 << 4)\n+/* ARMv8.1 architecture extensions.  */\n+#define AARCH64_FL_LSE\t      (1 << 5)  /* Has Large System Extensions.  */\n+#define AARCH64_FL_PAN\t      (1 << 6)  /* Has Privileged Access Never.  */\n+#define AARCH64_FL_LOR\t      (1 << 7)  /* Has Limited Ordering regions.  */\n+#define AARCH64_FL_RDMA\t      (1 << 8)  /* Has ARMv8.1 Adv.SIMD.  */\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -210,6 +215,9 @@ extern unsigned aarch64_architecture_version;\n \n /* Architecture flags that effect instruction selection.  */\n #define AARCH64_FL_FOR_ARCH8       (AARCH64_FL_FPSIMD)\n+#define AARCH64_FL_FOR_ARCH8_1\t\t\t       \\\n+  (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_PAN \\\n+   | AARCH64_FL_LOR | AARCH64_FL_RDMA)\n \n /* Macros to test ISA flags.  */\n extern unsigned long aarch64_isa_flags;"}, {"sha": "d8e982c3aa338819df3785696c493a66c1f5b674", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff09c88dd183154206764fb841a87856f5b2f94d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ff09c88dd183154206764fb841a87856f5b2f94d", "patch": "@@ -12427,7 +12427,7 @@ corresponding flag to the linker.\n Specify the name of the target architecture, optionally suffixed by one or\n more feature modifiers.  This option has the form\n @option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n-only permissible value for @var{arch} is @samp{armv8-a}.\n+permissible values for @var{arch} are @samp{armv8-a} or @samp{armv8.1-a}.\n The permissible values for @var{feature} are documented in the sub-section\n below.  Additionally on native AArch64 GNU/Linux systems the value\n @samp{native} is available.  This option causes the compiler to pick the\n@@ -12512,6 +12512,14 @@ Enable floating-point instructions.\n Enable Advanced SIMD instructions.  This implies floating-point instructions\n are enabled.  This is the default for all current possible values for options\n @option{-march} and @option{-mcpu=}.\n+@item lse\n+Enable Large System Extension instructions.\n+@item pan\n+Enable Privileged Access Never support.\n+@item lor\n+Enable Limited Ordering Regions support.\n+@item rdma\n+Enable ARMv8.1 Advanced SIMD instructions.\n @end table\n \n @node Adapteva Epiphany Options"}]}