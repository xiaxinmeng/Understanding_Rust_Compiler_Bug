{"sha": "4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2ZDBjMGViNDkxOTNlZjVlNmU0N2IwZDI0ZjgwNWJlYmZmYmRmYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-12-27T14:20:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-27T14:20:19Z"}, "message": "re PR target/78904 (zero-extracts are not effective)\n\n\tPR target/78904\n\t* config/i386/constraints.md (Bc): New special memory constraint.\n\t* config/i386/i386.md (*cmpqi_ext_1, *extvqi, *extzvqi): Use Bc\n\tconstraint with nonimmediate_operand to allow constant memory operands.\n\t(*cmpqi_ext_3, insv<mode>_1, addqi_ext_1, *testqi_ext_1, andqi_ext_1)\n\t(*<any_or:code>qi_ext_1, *xorqi_ext_1_cc): Use Bc constraint\n\twith general_operand to allow constant memory operands.\n\ntestsuite/ChangeLog:\n\n\tPR target/78904\n\t* gcc.target/i386/pr78904-3.c: New test.\n\nFrom-SVN: r243937", "tree": {"sha": "36b380dde73f268d9a55535e6a07c485373c238b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b380dde73f268d9a55535e6a07c485373c238b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ba4f506395ff50be7ecf788734676c9f4cfd200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba4f506395ff50be7ecf788734676c9f4cfd200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba4f506395ff50be7ecf788734676c9f4cfd200"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "9900452f037b338eec965d705c904946c1bafaff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "patch": "@@ -1,3 +1,13 @@\n+2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* config/i386/constraints.md (Bc): New special memory constraint.\n+\t* config/i386/i386.md (*cmpqi_ext_1, *extvqi, *extzvqi): Use Bc\n+\tconstraint with nonimmediate_operand to allow constant memory operands.\n+\t(*cmpqi_ext_3, insv<mode>_1, addqi_ext_1, *testqi_ext_1, andqi_ext_1)\n+\t(*<any_or:code>qi_ext_1, *xorqi_ext_1_cc): Use Bc constraint\n+\twith general_operand to allow constant memory operands.\n+\n 2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* c-family/c.opt (flag_chkp_flexible_struct_trailing_arrays):"}, {"sha": "6aa2e4f95b78b68dd4bd0aa3227c3f2ba6733927", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "patch": "@@ -168,6 +168,7 @@\n ;;  f  FLAGS_REG\n ;;  g  GOT memory operand.\n ;;  m  Vector memory operand\n+;;  c  Constant memory operand\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32\n ;;  z  Constant call address operand.\n@@ -185,6 +186,11 @@\n   \"@internal Vector memory operand.\"\n   (match_operand 0 \"vector_memory_operand\"))\n \n+(define_special_memory_constraint \"Bc\"\n+  \"@internal Constant memory operand.\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"constant_address_p (XEXP (op, 0))\")))\n+\n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (ior (and (not (match_test \"TARGET_X32\"))"}, {"sha": "13769f987ff743cd54f604a0ad601dff29db24b8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "patch": "@@ -1295,7 +1295,7 @@\n (define_insn \"*cmpqi_ext_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (match_operand:QI 0 \"nonimmediate_operand\" \"Q,m\")\n+\t  (match_operand:QI 0 \"nonimmediate_operand\" \"QBc,m\")\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n@@ -1340,7 +1340,7 @@\n \t      (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"general_operand\" \"Qn,m\")))]\n+\t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\")))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"isa\" \"*,nox64\")\n@@ -2781,7 +2781,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*extvqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Q,?R,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n         (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n                          (const_int 8)\n                          (const_int 8)))]\n@@ -2836,7 +2836,7 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*extzvqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Q,?R,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n         (subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n \t\t\t   (const_int 8)\n@@ -2897,7 +2897,7 @@\n   [(set (zero_extract:SWI248 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n-\t(match_operand:SWI248 1 \"general_operand\" \"Qn,m\"))]\n+\t(match_operand:SWI248 1 \"general_operand\" \"QnBc,m\"))]\n   \"\"\n {\n   if (CONST_INT_P (operands[1]))\n@@ -6087,7 +6087,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n@@ -7889,7 +7889,7 @@\n \t      (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 1 \"general_operand\" \"Qn,m\"))\n+\t    (match_operand:QI 1 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n@@ -8417,7 +8417,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n@@ -8435,7 +8435,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\"))\n+\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)\n@@ -8804,7 +8804,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\")) 0))\n+\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n@@ -8914,7 +8914,7 @@\n \t      (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"Qn,m\"))\n+\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)"}, {"sha": "6fb5b258287c22d30060e60de41464421c961db5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "patch": "@@ -1,3 +1,8 @@\n+2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* gcc.target/i386/pr78904-3.c: New test.\n+\n 2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* gcc.target/i386/mpx/vla-trailing-1-lbv.c: New test."}, {"sha": "2827b380b6c8ef116616d433ecca03e33bdefb5f", "filename": "gcc/testsuite/gcc.target/i386/pr78904-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-3.c?ref=4b6d0c0eb49193ef5e6e47b0d24f805bebffbdfb", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/78904 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern struct S1 t[256];\n+\n+struct S1 test_and (struct S1 a, size_t i)\n+{\n+  a.val &= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_or (struct S1 a, size_t i)\n+{\n+  a.val |= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_xor (struct S1 a, size_t i)\n+{\n+  a.val ^= t[i].val;\n+\n+  return a;\n+}\n+\n+struct S1 test_add (struct S1 a, size_t i)\n+{\n+  a.val += t[i].val;\n+\n+  return a;\n+}"}]}