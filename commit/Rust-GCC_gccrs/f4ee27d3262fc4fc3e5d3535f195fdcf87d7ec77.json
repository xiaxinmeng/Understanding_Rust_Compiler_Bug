{"sha": "f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "node_id": "C_kwDOANBUbNoAKGY0ZWUyN2QzMjYyZmM0ZmMzZTVkMzUzNWYxOTVmZGNmODdkN2VjNzc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-25T04:49:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-25T04:49:05Z"}, "message": "rs6000: Remove GCC 8.1 U10__float128 mangling compatibility [PR104172]\n\nIn GCC 7.x and earlier, while it had -mabi=ieeelongdouble option, that option\nwas undocumented and unsupported.\nIn GCC 8.1 that option got documented and -mabi=ieeelongdouble long double started\nto be mangled as U10__float128.\nIn GCC 9 and backported to before 8.2 release, that mangling changed to\nu9__ieee128 and a support for emitting compatibility mangling aliases have\nbeen added.\nUnfortunately, as mentioned in the PR, those don't really work well in many\ncases, the free_lang_data pass throws away important trees, so e.g. with\n-flto -ffat-lto-objects the compiler often ICEs on templates that involve\nIEEE quad long double arguments etc. because the mangling was done too late\n(at final time).\nFurthermore, lto1's mangler is not the C++ mangler, so with -flto it would\noften emit as \"mangled identifiers\" something that wasn't a valid assembler\nidentifier, e.g. operator+ etc.\nWhile it is possible to do such mangling earlier, e.g. at the same time when\nthe C++ FE emits its mangling aliases and untested proof of concept is in\nthe PR, there seems to be agreement that we shouldn't bother with this\nABI compatibility with something that probably nobody really used.\nGCC 8.2 already uses the new mangling, it was just a few months, but more\nimportantly, libstdc++ support for IEEE quad long double on\npowerpc64le-linux was only added in GCC 11, and glibc support for that some\nweeks after 8.2 got released.\n\nSo, the following patch just drops those aliases.\n\n2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104172\ngcc/\n\t* config/rs6000/rs6000-internal.h (rs6000_passes_ieee128): Don't\n\tdeclare.\n\t* config/rs6000/rs6000.cc (rs6000_passes_ieee128,\n\tieee128_mangling_gcc_8_1): Remove.\n\t(TARGET_ASM_GLOBALIZE_DECL_NAME): Don't redefine.\n\t(rs6000_mangle_type): Return \"u9__ieee128\" instead of\n\tieee128_mangling_gcc_8_1 ? \"U10__float128\" : \"u9__ieee128\".\n\t(rs6000_globalize_decl_name): Remove.\n\t* config/rs6000/rs6000-call.cc (init_cumulative_args,\n\trs6000_function_arg_advance_1): Don't set rs6000_passes_ieee128.", "tree": {"sha": "0859d07ff7c7414ad762bf5e746285bf6b9ef8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0859d07ff7c7414ad762bf5e746285bf6b9ef8b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa"}], "stats": {"total": 68, "additions": 1, "deletions": 67}, "files": [{"sha": "5c870d4b9580b913d339f026688ff55f2ecffef7", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "patch": "@@ -755,12 +755,6 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\t\t  && (TYPE_MAIN_VARIANT (return_type)\n \t\t\t      == long_double_type_node))))\n \t\trs6000_passes_long_double = true;\n-\n-\t      /* Note if we passed or return a IEEE 128-bit type.  We changed\n-\t\t the mangling for these types, and we may need to make an alias\n-\t\t with the old mangling.  */\n-\t      if (FLOAT128_IEEE_P (return_mode))\n-\t\trs6000_passes_ieee128 = true;\n \t    }\n \t  if (ALTIVEC_OR_VSX_VECTOR_MODE (return_mode))\n \t    rs6000_passes_vector = true;\n@@ -1179,12 +1173,6 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \t\t  || (type != NULL\n \t\t      && TYPE_MAIN_VARIANT (type) == long_double_type_node)))\n \t    rs6000_passes_long_double = true;\n-\n-\t  /* Note if we passed or return a IEEE 128-bit type.  We changed the\n-\t     mangling for these types, and we may need to make an alias with\n-\t     the old mangling.  */\n-\t  if (FLOAT128_IEEE_P (mode))\n-\t    rs6000_passes_ieee128 = true;\n \t}\n       if (named && ALTIVEC_OR_VSX_VECTOR_MODE (mode))\n \trs6000_passes_vector = true;"}, {"sha": "8ee8c987b81f3deeadb6aa119c47c84d4c3b685e", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "patch": "@@ -183,9 +183,6 @@ extern tree rs6000_fold_builtin (tree fndecl ATTRIBUTE_UNUSED,\n \t\t\t         tree *args ATTRIBUTE_UNUSED,\n \t\t\t         bool ignore ATTRIBUTE_UNUSED);\n \n-#if TARGET_ELF\n-extern bool rs6000_passes_ieee128;\n-#endif\n extern bool rs6000_passes_float;\n extern bool rs6000_passes_long_double;\n extern bool rs6000_passes_vector;"}, {"sha": "e5471da4504e3b093681315487d32a3c0b64e8bd", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=f4ee27d3262fc4fc3e5d3535f195fdcf87d7ec77", "patch": "@@ -121,22 +121,9 @@ int dot_symbols;\n    of this machine mode.  */\n scalar_int_mode rs6000_pmode;\n \n-#if TARGET_ELF\n-/* Note whether IEEE 128-bit floating point was passed or returned, either as\n-   the __float128/_Float128 explicit type, or when long double is IEEE 128-bit\n-   floating point.  We changed the default C++ mangling for these types and we\n-   may want to generate a weak alias of the old mangling (U10__float128) to the\n-   new mangling (u9__ieee128).  */\n-bool rs6000_passes_ieee128 = false;\n-#endif\n-\n /* Track use of r13 in 64bit AIX TLS.  */\n static bool xcoff_tls_exec_model_detected = false;\n \n-/* Generate the manged name (i.e. U10__float128) used in GCC 8.1, and not the\n-   name used in current releases (i.e. u9__ieee128).  */\n-static bool ieee128_mangling_gcc_8_1;\n-\n /* Width in bits of a pointer.  */\n unsigned rs6000_pointer_size;\n \n@@ -1765,11 +1752,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_STARTING_FRAME_OFFSET\n #define TARGET_STARTING_FRAME_OFFSET rs6000_starting_frame_offset\n \n-#if TARGET_ELF && RS6000_WEAK\n-#undef TARGET_ASM_GLOBALIZE_DECL_NAME\n-#define TARGET_ASM_GLOBALIZE_DECL_NAME rs6000_globalize_decl_name\n-#endif\n-\n #undef TARGET_SETJMP_PRESERVES_NONVOLATILE_REGS_P\n #define TARGET_SETJMP_PRESERVES_NONVOLATILE_REGS_P hook_bool_void_true\n \n@@ -20262,7 +20244,7 @@ rs6000_mangle_type (const_tree type)\n   if (SCALAR_FLOAT_TYPE_P (type) && FLOAT128_IBM_P (TYPE_MODE (type)))\n     return \"g\";\n   if (SCALAR_FLOAT_TYPE_P (type) && FLOAT128_IEEE_P (TYPE_MODE (type)))\n-    return ieee128_mangling_gcc_8_1 ? \"U10__float128\" : \"u9__ieee128\";\n+    return \"u9__ieee128\";\n \n   if (type == vector_pair_type_node)\n     return \"u13__vector_pair\";\n@@ -28159,39 +28141,6 @@ rs6000_starting_frame_offset (void)\n }\n \f\n \n-/* Create an alias for a mangled name where we have changed the mangling (in\n-   GCC 8.1, we used U10__float128, and now we use u9__ieee128).  This is called\n-   via the target hook TARGET_ASM_GLOBALIZE_DECL_NAME.  */\n-\n-#if TARGET_ELF && RS6000_WEAK\n-static void\n-rs6000_globalize_decl_name (FILE * stream, tree decl)\n-{\n-  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-\n-  targetm.asm_out.globalize_label (stream, name);\n-\n-  if (rs6000_passes_ieee128 && name[0] == '_' && name[1] == 'Z')\n-    {\n-      tree save_asm_name = DECL_ASSEMBLER_NAME (decl);\n-      const char *old_name;\n-\n-      ieee128_mangling_gcc_8_1 = true;\n-      lang_hooks.set_decl_assembler_name (decl);\n-      old_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      SET_DECL_ASSEMBLER_NAME (decl, save_asm_name);\n-      ieee128_mangling_gcc_8_1 = false;\n-\n-      if (strcmp (name, old_name) != 0)\n-\t{\n-\t  fprintf (stream, \"\\t.weak %s\\n\", old_name);\n-\t  fprintf (stream, \"\\t.set %s,%s\\n\", old_name, name);\n-\t}\n-    }\n-}\n-#endif\n-\n-\f\n /* On 64-bit Linux and Freebsd systems, possibly switch the long double library\n    function names from <foo>l to <foo>f128 if the default long double type is\n    IEEE 128-bit.  Typically, with the C and C++ languages, the standard math.h"}]}