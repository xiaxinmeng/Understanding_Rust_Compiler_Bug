{"sha": "e3503aa8cfe91752b629f6e2a1d52736a21208dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MDNhYThjZmU5MTc1MmI2MjlmNmUyYTFkNTI3MzZhMjEyMDhkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-04T23:13:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-04T23:13:23Z"}, "message": "re PR c++/36912 (ICE with \"-frounding-math -g\")\n\n\tPR c++/36912\n\t* varasm.c (initializer_constant_valid_p): A PLUS_EXPR\n\tor MINUS_EXPR of REAL_TYPE is not a valid constant initializer.\n\t(output_constant): Avoid crash after error.\n\nFrom-SVN: r153921", "tree": {"sha": "4c2a6d72e4c8f0bf639cd10cf3a74ce69904c0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2a6d72e4c8f0bf639cd10cf3a74ce69904c0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3503aa8cfe91752b629f6e2a1d52736a21208dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3503aa8cfe91752b629f6e2a1d52736a21208dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3503aa8cfe91752b629f6e2a1d52736a21208dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3503aa8cfe91752b629f6e2a1d52736a21208dc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4ecc8fd6b67ce601991e0f59a226bb5a18bed16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ecc8fd6b67ce601991e0f59a226bb5a18bed16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ecc8fd6b67ce601991e0f59a226bb5a18bed16"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "4d7fe5ff3a07e0db508976dd532d6b086b76fb3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3503aa8cfe91752b629f6e2a1d52736a21208dc", "patch": "@@ -1,3 +1,10 @@\n+2009-11-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/36912\n+\t* varasm.c (initializer_constant_valid_p): A PLUS_EXPR\n+\tor MINUS_EXPR of REAL_TYPE is not a valid constant initializer.\n+\t(output_constant): Avoid crash after error.\n+\n 2009-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/10127"}, {"sha": "b65593ed0f954d48dc0fce95dc5b3dbb4d3e8684", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3503aa8cfe91752b629f6e2a1d52736a21208dc", "patch": "@@ -1,3 +1,8 @@\n+2009-11-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/36912\n+\t* g++.dg/init/static-init2.C: New.\n+\n 2009-11-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/39413"}, {"sha": "34bf2b2388bcf1a84361fe37293fd1ee19d34ee9", "filename": "gcc/testsuite/g++.dg/init/static-init2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic-init2.C?ref=e3503aa8cfe91752b629f6e2a1d52736a21208dc", "patch": "@@ -0,0 +1,3 @@\n+// PR c++/36912\n+// { dg-options -frounding-math }\n+const double c = .1, d = c+1;"}, {"sha": "c9953d128da8d358644bb4c0d2afe15bcdb320b7", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3503aa8cfe91752b629f6e2a1d52736a21208dc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e3503aa8cfe91752b629f6e2a1d52736a21208dc", "patch": "@@ -4322,6 +4322,10 @@ initializer_constant_valid_p (tree value, tree endtype)\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n+      /* Any valid floating-point constants will have been folded by now;\n+\t with -frounding-math we hit this with addition of two constants.  */\n+      if (TREE_CODE (endtype) == REAL_TYPE)\n+\treturn NULL_TREE;\n       if (! INTEGRAL_TYPE_P (endtype)\n \t  || TYPE_PRECISION (endtype)\n \t     >= int_or_pointer_precision (TREE_TYPE (value)))\n@@ -4345,6 +4349,8 @@ initializer_constant_valid_p (tree value, tree endtype)\n       break;\n \n     case MINUS_EXPR:\n+      if (TREE_CODE (endtype) == REAL_TYPE)\n+\treturn NULL_TREE;\n       if (! INTEGRAL_TYPE_P (endtype)\n \t  || TYPE_PRECISION (endtype)\n \t     >= int_or_pointer_precision (TREE_TYPE (value)))\n@@ -4560,8 +4566,8 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n     case REAL_TYPE:\n       if (TREE_CODE (exp) != REAL_CST)\n \terror (\"initializer for floating value is not a floating constant\");\n-\n-      assemble_real (TREE_REAL_CST (exp), TYPE_MODE (TREE_TYPE (exp)), align);\n+      else\n+\tassemble_real (TREE_REAL_CST (exp), TYPE_MODE (TREE_TYPE (exp)), align);\n       break;\n \n     case COMPLEX_TYPE:"}]}