{"sha": "fe464cafd9157578e3f8bb6dee341d470d0e96e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU0NjRjYWZkOTE1NzU3OGUzZjhiYjZkZWUzNDFkNDcwZDBlOTZlNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T11:28:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T11:28:24Z"}, "message": "(duplicate_loop_exit_test): Return 0 if found a NOTE_INSN_LOOP_CONT.\n\nFrom-SVN: r10510", "tree": {"sha": "439a183c6cb81060ed25bbf1ad49ffe1fa1f1d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439a183c6cb81060ed25bbf1ad49ffe1fa1f1d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe464cafd9157578e3f8bb6dee341d470d0e96e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe464cafd9157578e3f8bb6dee341d470d0e96e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe464cafd9157578e3f8bb6dee341d470d0e96e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe464cafd9157578e3f8bb6dee341d470d0e96e7/comments", "author": null, "committer": null, "parents": [{"sha": "e934eef9760b4326c907b295216360eb06da0de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e934eef9760b4326c907b295216360eb06da0de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e934eef9760b4326c907b295216360eb06da0de5"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "88a6c3aad1cc6a7dd1662d3c8b0af328491ca94e", "filename": "gcc/jump.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe464cafd9157578e3f8bb6dee341d470d0e96e7/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe464cafd9157578e3f8bb6dee341d470d0e96e7/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=fe464cafd9157578e3f8bb6dee341d470d0e96e7", "patch": "@@ -2122,12 +2122,6 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n    followed by a jump to the exit of the loop.  Then delete the unconditional\n    jump after INSN.\n \n-   Note that it is possible we can get confused here if the jump immediately\n-   after the loop start branches outside the loop but within an outer loop.\n-   If we are near the exit of that loop, we will copy its exit test.  This\n-   will not generate incorrect code, but could suppress some optimizations.\n-   However, such cases are degenerate loops anyway.\n-\n    Return 1 if we made the change, else 0.\n \n    This is only safe immediately after a regscan pass because it uses the\n@@ -2168,9 +2162,19 @@ duplicate_loop_exit_test (loop_start)\n \tcase CALL_INSN:\n \t  return 0;\n \tcase NOTE:\n+\t  /* We could be in front of the wrong NOTE_INSN_LOOP_END if there is\n+\t     a jump immediately after the loop start that branches outside\n+\t     the loop but within an outer loop, near the exit test.\n+\t     If we copied this exit test and created a phony\n+\t     NOTE_INSN_LOOP_VTOP, this could make instructions immediately\n+\t     before the exit test look like these could be safely moved\n+\t     out of the loop even if they actually may be never executed.\n+\t     This can be avoided by checking here for NOTE_INSN_LOOP_CONT.  */\n+\n \t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG\n \t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG\n-\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)\n+\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END\n+\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_CONT)\n \t    return 0;\n \t  break;\n \tcase JUMP_INSN:"}]}