{"sha": "5cc2edcde433b1edff1699b372d5e70cc0690c88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjMmVkY2RlNDMzYjFlZGZmMTY5OWIzNzJkNWU3MGNjMDY5MGM4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-12-05T22:46:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-12-05T22:46:36Z"}, "message": "re PR c++/59044 (Internal compiler error triggers when accessing a typedef in a specialized member class)\n\n\tPR c++/59044\n\tPR c++/59052\n\t* pt.c (most_specialized_class): Use the partially instantiated\n\ttemplate for deduction.  Drop the TMPL parameter.\n\nFrom-SVN: r205720", "tree": {"sha": "2e6f1048e5e07bc60c989822895505594ae5bf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6f1048e5e07bc60c989822895505594ae5bf16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc2edcde433b1edff1699b372d5e70cc0690c88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc2edcde433b1edff1699b372d5e70cc0690c88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc2edcde433b1edff1699b372d5e70cc0690c88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc2edcde433b1edff1699b372d5e70cc0690c88/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8f014d7301865c651a6f2b4f08aef2a2f4d5e70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f014d7301865c651a6f2b4f08aef2a2f4d5e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f014d7301865c651a6f2b4f08aef2a2f4d5e70"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "16b6aa0024099f99afe770a95ff8cd1f149c629a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cc2edcde433b1edff1699b372d5e70cc0690c88", "patch": "@@ -1,3 +1,10 @@\n+2013-12-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59044\n+\tPR c++/59052\n+\t* pt.c (most_specialized_class): Use the partially instantiated\n+\ttemplate for deduction.  Drop the TMPL parameter.\n+\n 2013-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (duplicate_decls): Replace pairs of errors and permerrors"}, {"sha": "01b2d44ee8e9587890e2a68923b695d3cd45c3d6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5cc2edcde433b1edff1699b372d5e70cc0690c88", "patch": "@@ -176,7 +176,7 @@ static tree tsubst_template_arg (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_args (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_parms (tree, tree, tsubst_flags_t);\n static void regenerate_decl_from_template (tree, tree);\n-static tree most_specialized_class (tree, tree, tsubst_flags_t);\n+static tree most_specialized_class (tree, tsubst_flags_t);\n static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);\n static tree tsubst_arg_types (tree, tree, tree, tsubst_flags_t, tree);\n static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n@@ -4305,7 +4305,7 @@ process_partial_specialization (tree decl)\n       if (COMPLETE_TYPE_P (inst_type)\n \t  && CLASSTYPE_IMPLICIT_INSTANTIATION (inst_type))\n \t{\n-\t  tree spec = most_specialized_class (inst_type, maintmpl, tf_none);\n+\t  tree spec = most_specialized_class (inst_type, tf_none);\n \t  if (spec && TREE_TYPE (spec) == type)\n \t    permerror (input_location,\n \t\t       \"partial specialization of %qT after instantiation \"\n@@ -8716,7 +8716,7 @@ instantiate_class_template_1 (tree type)\n \n   /* Determine what specialization of the original template to\n      instantiate.  */\n-  t = most_specialized_class (type, templ, tf_warning_or_error);\n+  t = most_specialized_class (type, tf_warning_or_error);\n   if (t == error_mark_node)\n     {\n       TYPE_BEING_DEFINED (type) = 1;\n@@ -18242,7 +18242,7 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n     return -1;\n }\n \n-/* Determine which of two partial specializations of MAIN_TMPL is more\n+/* Determine which of two partial specializations of TMPL is more\n    specialized.\n \n    PAT1 is a TREE_LIST whose TREE_TYPE is the _TYPE node corresponding\n@@ -18258,7 +18258,7 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n    two templates is more specialized.  */\n \n static int\n-more_specialized_class (tree main_tmpl, tree pat1, tree pat2)\n+more_specialized_class (tree tmpl, tree pat1, tree pat2)\n {\n   tree targs;\n   tree tmpl1, tmpl2;\n@@ -18273,7 +18273,7 @@ more_specialized_class (tree main_tmpl, tree pat1, tree pat2)\n      types in the arguments, and we need our dependency check functions\n      to behave correctly.  */\n   ++processing_template_decl;\n-  targs = get_class_bindings (main_tmpl, TREE_VALUE (pat1),\n+  targs = get_class_bindings (tmpl, TREE_VALUE (pat1),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl1),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl2));\n   if (targs)\n@@ -18282,7 +18282,7 @@ more_specialized_class (tree main_tmpl, tree pat1, tree pat2)\n       any_deductions = true;\n     }\n \n-  targs = get_class_bindings (main_tmpl, TREE_VALUE (pat2),\n+  targs = get_class_bindings (tmpl, TREE_VALUE (pat2),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl2),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl1));\n   if (targs)\n@@ -18363,7 +18363,7 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n }\n \n /* Return the innermost template arguments that, when applied to a partial\n-   specialization of MAIN_TMPL whose innermost template parameters are\n+   specialization of TMPL whose innermost template parameters are\n    TPARMS, and whose specialization arguments are SPEC_ARGS, yield the\n    ARGS.\n \n@@ -18378,7 +18378,7 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n    is bound to `double'.  */\n \n static tree\n-get_class_bindings (tree main_tmpl, tree tparms, tree spec_args, tree args)\n+get_class_bindings (tree tmpl, tree tparms, tree spec_args, tree args)\n {\n   int i, ntparms = TREE_VEC_LENGTH (tparms);\n   tree deduced_args;\n@@ -18418,8 +18418,8 @@ get_class_bindings (tree main_tmpl, tree tparms, tree spec_args, tree args)\n      `T' is `A' but unify () does not check whether `typename T::X'\n      is `int'.  */\n   spec_args = tsubst (spec_args, deduced_args, tf_none, NULL_TREE);\n-  spec_args = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (main_tmpl),\n-\t\t\t\t     spec_args, main_tmpl,\n+  spec_args = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n+\t\t\t\t     spec_args, tmpl,\n \t\t\t\t     tf_none, false, false);\n   if (spec_args == error_mark_node\n       /* We only need to check the innermost arguments; the other\n@@ -18567,30 +18567,30 @@ most_general_template (tree decl)\n }\n \n /* Return the most specialized of the class template partial\n-   specializations of TMPL which can produce TYPE, a specialization of\n-   TMPL.  The value returned is actually a TREE_LIST; the TREE_TYPE is\n+   specializations which can produce TYPE, a specialization of some class\n+   template.  The value returned is actually a TREE_LIST; the TREE_TYPE is\n    a _TYPE node corresponding to the partial specialization, while the\n    TREE_PURPOSE is the set of template arguments that must be\n    substituted into the TREE_TYPE in order to generate TYPE.\n \n    If the choice of partial specialization is ambiguous, a diagnostic\n    is issued, and the error_mark_node is returned.  If there are no\n-   partial specializations of TMPL matching TYPE, then NULL_TREE is\n-   returned.  */\n+   partial specializations matching TYPE, then NULL_TREE is\n+   returned, indicating that the primary template should be used.  */\n \n static tree\n-most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n+most_specialized_class (tree type, tsubst_flags_t complain)\n {\n   tree list = NULL_TREE;\n   tree t;\n   tree champ;\n   int fate;\n   bool ambiguous_p;\n-  tree args;\n   tree outer_args = NULL_TREE;\n \n-  tmpl = most_general_template (tmpl);\n-  args = CLASSTYPE_TI_ARGS (type);\n+  tree tmpl = CLASSTYPE_TI_TEMPLATE (type);\n+  tree main_tmpl = most_general_template (tmpl);\n+  tree args = CLASSTYPE_TI_ARGS (type);\n \n   /* For determining which partial specialization to use, only the\n      innermost args are interesting.  */\n@@ -18600,7 +18600,7 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n       args = INNERMOST_TEMPLATE_ARGS (args);\n     }\n \n-  for (t = DECL_TEMPLATE_SPECIALIZATIONS (tmpl); t; t = TREE_CHAIN (t))\n+  for (t = DECL_TEMPLATE_SPECIALIZATIONS (main_tmpl); t; t = TREE_CHAIN (t))\n     {\n       tree partial_spec_args;\n       tree spec_args;\n@@ -18625,8 +18625,7 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n \n       partial_spec_args =\n \t  coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n-\t\t\t\t add_to_template_args (outer_args,\n-\t\t\t\t\t\t       partial_spec_args),\n+\t\t\t\t partial_spec_args,\n \t\t\t\t tmpl, tf_none,\n \t\t\t\t /*require_all_args=*/true,\n \t\t\t\t /*use_default_args=*/true);"}, {"sha": "3870164f0ec67342cb57e8c5ec64d7f9decef5a3", "filename": "gcc/testsuite/g++.dg/template/partial14.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc2edcde433b1edff1699b372d5e70cc0690c88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial14.C?ref=5cc2edcde433b1edff1699b372d5e70cc0690c88", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/59044\n+\n+template <class T>\n+class C {\n+private:\n+  template <T a, T b>\n+  struct Implementation {};\n+public:\n+  typedef typename Implementation<0, 0>::Typedef Type;\n+};\n+\n+template <class T>\n+template <T b>\n+struct C<T>::Implementation<0, b> { typedef void Typedef; };\n+\n+template class C<unsigned>;"}]}