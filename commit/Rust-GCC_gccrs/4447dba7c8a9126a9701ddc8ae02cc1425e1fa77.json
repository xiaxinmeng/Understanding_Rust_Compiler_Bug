{"sha": "4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0N2RiYTdjOGE5MTI2YTk3MDFkZGM4YWUwMmNjMTQyNWUxZmE3Nw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-25T21:13:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-25T21:13:35Z"}, "message": "Merge #594\n\n594: Support byte and byte string literals r=philberty a=dkm\n\nA byte literal is an u8 created as a ascii char or hex escape\r\ne.g. b'X'.  A byte string literal is a string created from ascii or\r\nhex chars. bytes are represented as u8 and byte strings as str (with\r\njust ascii < 256 chars), but it should really be &'static [u8; n].\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "cefadc8af71ae3c09ff21b59e873ffffe1430adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cefadc8af71ae3c09ff21b59e873ffffe1430adc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/dP/CRBK7hj4Ov3rIwAA+UMIAKWVMoKOOTsABOcHVhbBLN4k\noNXD6g2Sn/41sgEmhaJQwxsI/AW7eh/RP6TAU6TzHMWk0nVyKzbGADSBV3WnWhuv\nNWb+shiiHatYhdJcQmNHoLHf49cJYnCHqbMDBd7EMC0Xdrmu6x7hwU/5G2RT8v3B\n7/7qOpCAVKgvUb0MZycUkg1snOQQGvJnrWThmPY1dPzkjjnE2SHSln1eCTWSKdTE\nAdnXs47vD0SXSE+W7X+hRH19OKLGRe3YTrH17jrhTFn8hs8OBxR1Ts+v2Ll0YSfJ\nYcKa14lM/dnDV+fGYEdME8COCdmYXIoRKXhTSOznvTQ1OT5Upaq80biubs9kMwg=\n=QA88\n-----END PGP SIGNATURE-----\n", "payload": "tree cefadc8af71ae3c09ff21b59e873ffffe1430adc\nparent 314b62ec787abdf320fcca8ceb09b8c9bcf72512\nparent df2b3b15dc95d5d74f6a630ee84296fb5b76c03f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627247615 +0000\ncommitter GitHub <noreply@github.com> 1627247615 +0000\n\nMerge #594\n\n594: Support byte and byte string literals r=philberty a=dkm\n\nA byte literal is an u8 created as a ascii char or hex escape\r\ne.g. b'X'.  A byte string literal is a string created from ascii or\r\nhex chars. bytes are represented as u8 and byte strings as str (with\r\njust ascii < 256 chars), but it should really be &'static [u8; n].\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314b62ec787abdf320fcca8ceb09b8c9bcf72512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b62ec787abdf320fcca8ceb09b8c9bcf72512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314b62ec787abdf320fcca8ceb09b8c9bcf72512"}, {"sha": "df2b3b15dc95d5d74f6a630ee84296fb5b76c03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2b3b15dc95d5d74f6a630ee84296fb5b76c03f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2b3b15dc95d5d74f6a630ee84296fb5b76c03f"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "fa6a53991ac202f906dbda86ad47364db6052980", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -278,7 +278,14 @@ class CompileExpr : public HIRCompileBase\n \t}\n \treturn;\n \n-\tcase HIR::Literal::STRING: {\n+\tcase HIR::Literal::BYTE: {\n+\t  char c = literal_value->as_string ().c_str ()[0];\n+\t  translated = ctx->get_backend ()->char_constant_expression (c);\n+\t}\n+\treturn;\n+\n+      case HIR::Literal::STRING:\n+\tcase HIR::Literal::BYTE_STRING: {\n \t  auto base = ctx->get_backend ()->string_constant_expression (\n \t    literal_value->as_string ());\n \t  translated"}, {"sha": "73600d22d606d3d98a269c8f456070cf108a64cf", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -12545,10 +12545,18 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (tok->get_str (), AST::Literal::STRING,\n \t\t\t      tok->get_type_hint (), {}, tok->get_locus ()));\n+    case BYTE_STRING_LITERAL:\n+      return std::unique_ptr<AST::LiteralExpr> (\n+\tnew AST::LiteralExpr (tok->get_str (), AST::Literal::BYTE_STRING,\n+\t\t\t      tok->get_type_hint (), {}, tok->get_locus ()));\n     case CHAR_LITERAL:\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (tok->get_str (), AST::Literal::CHAR,\n \t\t\t      tok->get_type_hint (), {}, tok->get_locus ()));\n+    case BYTE_CHAR_LITERAL:\n+      return std::unique_ptr<AST::LiteralExpr> (\n+\tnew AST::LiteralExpr (tok->get_str (), AST::Literal::BYTE,\n+\t\t\t      tok->get_type_hint (), {}, tok->get_locus ()));\n     case TRUE_LITERAL:\n       return std::unique_ptr<AST::LiteralExpr> (\n \tnew AST::LiteralExpr (\"true\", AST::Literal::BOOL, tok->get_type_hint (),"}, {"sha": "1dd4aba12ca474835b070e21e7f8dcbcd5194e83", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -331,6 +331,9 @@ class Backend\n   // Return an expression for the string value VAL.\n   virtual Bexpression *string_constant_expression (const std::string &val) = 0;\n \n+  // Get a char literal\n+  virtual Bexpression *char_constant_expression (char c) = 0;\n+\n   // Get a char literal\n   virtual Bexpression *wchar_constant_expression (wchar_t c) = 0;\n "}, {"sha": "23a91ad9bcbc1fd77ab4cce539a7bf352ea967dd", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -333,6 +333,8 @@ class Gcc_backend : public Backend\n \n   Bexpression *wchar_constant_expression (wchar_t c);\n \n+  Bexpression *char_constant_expression (char c);\n+\n   Bexpression *boolean_constant_expression (bool val);\n \n   Bexpression *real_part_expression (Bexpression *bcomplex, Location);\n@@ -1557,6 +1559,13 @@ Gcc_backend::wchar_constant_expression (wchar_t c)\n   return this->make_expression (ret);\n }\n \n+Bexpression *\n+Gcc_backend::char_constant_expression (char c)\n+{\n+  tree ret = build_int_cst (this->char_type ()->get_tree (), c);\n+  return this->make_expression (ret);\n+}\n+\n // Make a constant boolean expression.\n \n Bexpression *"}, {"sha": "6e5b2312f500c99412b4d00aacc1ad3f88c55af3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -542,6 +542,12 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n+\tcase HIR::Literal::LitType::BYTE: {\n+\t  auto ok = context->lookup_builtin (\"u8\", &infered);\n+\t  rust_assert (ok);\n+\t}\n+\tbreak;\n+\n \tcase HIR::Literal::LitType::STRING: {\n \t  TyTy::BaseType *base = nullptr;\n \t  auto ok = context->lookup_builtin (\"str\", &base);\n@@ -553,6 +559,19 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n+\tcase HIR::Literal::LitType::BYTE_STRING: {\n+\t  /* We just treat this as a string, but it really is an arraytype of\n+\t     u8. It isn't in UTF-8, but really just a byte array.  */\n+\t  TyTy::BaseType *base = nullptr;\n+\t  auto ok = context->lookup_builtin (\"str\", &base);\n+\t  rust_assert (ok);\n+\n+\t  infered\n+\t    = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n+\t\t\t\t       TyTy::TyVar (base->get_ref ()), false);\n+\t}\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n \tbreak;"}, {"sha": "bc3ec5014e89a5b6e6982b88a12c19ae8a2358ef", "filename": "gcc/testsuite/rust/compile/torture/byte_char_str.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4447dba7c8a9126a9701ddc8ae02cc1425e1fa77/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs?ref=4447dba7c8a9126a9701ddc8ae02cc1425e1fa77", "patch": "@@ -0,0 +1,8 @@\n+pub fn main ()\n+{\n+  let _c = 'x';\n+  let _bc = b'x';\n+\n+  let _s = \"abc\";\n+  let _bs = b\"abc\";\n+}"}]}