{"sha": "40140b734487cbe03cd897dca47120317f898004", "node_id": "C_kwDOANBUbNoAKDQwMTQwYjczNDQ4N2NiZTAzY2Q4OTdkY2E0NzEyMDMxN2Y4OTgwMDQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-04T20:25:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:23:17Z"}, "message": "c++: don't cleanup the last aggregate elt\n\nNow that we're building cleanups for aggregate elements more often, it seems\nworth optimizing by avoiding building one for the last element; once it is\ninitialized, the complete object is fully initialized, the element cleanups\nend in favor of the complete object cleanup, and so a cleanup for the last\nelement would guard nothing at all.\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.c (split_nonconstant_init_1): Don't cleanup the last elt.\n\t(split_nonconstant_init): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/aggregate1.C: New test.", "tree": {"sha": "4741f377c87c1dc20ef077a7cc3c27da9610af21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4741f377c87c1dc20ef077a7cc3c27da9610af21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40140b734487cbe03cd897dca47120317f898004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40140b734487cbe03cd897dca47120317f898004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40140b734487cbe03cd897dca47120317f898004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40140b734487cbe03cd897dca47120317f898004/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6bc28fc7dd86bd9e7408cbf28de1e973dd1eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6bc28fc7dd86bd9e7408cbf28de1e973dd1eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6bc28fc7dd86bd9e7408cbf28de1e973dd1eda"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "f439dd54866a77c0480dbb759b461f8b72a93f1e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40140b734487cbe03cd897dca47120317f898004/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40140b734487cbe03cd897dca47120317f898004/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=40140b734487cbe03cd897dca47120317f898004", "patch": "@@ -486,7 +486,8 @@ maybe_push_temp_cleanup (tree sub, vec<tree,va_gc> **flags)\n    generated statements.  */\n \n static bool\n-split_nonconstant_init_1 (tree dest, tree init, vec<tree,va_gc> **flags)\n+split_nonconstant_init_1 (tree dest, tree init, bool last,\n+\t\t\t  vec<tree,va_gc> **flags)\n {\n   unsigned HOST_WIDE_INT idx, tidx = HOST_WIDE_INT_M1U;\n   tree field_index, value;\n@@ -545,9 +546,11 @@ split_nonconstant_init_1 (tree dest, tree init, vec<tree,va_gc> **flags)\n \t    sub = build3 (COMPONENT_REF, inner_type, dest, field_index,\n \t\t\t  NULL_TREE);\n \n+\t  bool elt_last = last && idx == CONSTRUCTOR_NELTS (init) - 1;\n+\n \t  if (TREE_CODE (value) == CONSTRUCTOR)\n \t    {\n-\t      if (!split_nonconstant_init_1 (sub, value, flags)\n+\t      if (!split_nonconstant_init_1 (sub, value, elt_last, flags)\n \t\t      /* For flexible array member with initializer we\n \t\t\t can't remove the initializer, because only the\n \t\t\t initializer determines how many elements the\n@@ -558,7 +561,7 @@ split_nonconstant_init_1 (tree dest, tree init, vec<tree,va_gc> **flags)\n \t\t      && TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE\n \t\t      && COMPLETE_TYPE_P (TREE_TYPE (value))\n \t\t      && !integer_zerop (TYPE_SIZE (TREE_TYPE (value)))\n-\t\t      && idx == CONSTRUCTOR_NELTS (init) - 1\n+\t\t      && elt_last\n \t\t      && TYPE_HAS_TRIVIAL_DESTRUCTOR\n \t\t\t\t(strip_array_types (inner_type))))\n \t\tcomplete_p = false;\n@@ -634,7 +637,8 @@ split_nonconstant_init_1 (tree dest, tree init, vec<tree,va_gc> **flags)\n \t\t    }\n \t\t  code = build_stmt (input_location, EXPR_STMT, code);\n \t\t  add_stmt (code);\n-\t\t  maybe_push_temp_cleanup (sub, flags);\n+\t\t  if (!elt_last)\n+\t\t    maybe_push_temp_cleanup (sub, flags);\n \t\t}\n \n \t      num_split_elts++;\n@@ -715,7 +719,7 @@ split_nonconstant_init (tree dest, tree init)\n       if (TREE_CODE (TREE_TYPE (dest)) != ARRAY_TYPE)\n \tflags = make_tree_vector ();\n \n-      if (split_nonconstant_init_1 (dest, init, &flags))\n+      if (split_nonconstant_init_1 (dest, init, true, &flags))\n \tinit = NULL_TREE;\n \n       for (tree f : flags)"}, {"sha": "3f30a73b4e0a0580ef9fab74601b29212415fd98", "filename": "gcc/testsuite/g++.dg/tree-ssa/aggregate1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40140b734487cbe03cd897dca47120317f898004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Faggregate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40140b734487cbe03cd897dca47120317f898004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Faggregate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Faggregate1.C?ref=40140b734487cbe03cd897dca47120317f898004", "patch": "@@ -0,0 +1,19 @@\n+// Test that we don't bother building a cleanup for the last aggregate element.\n+// { dg-additional-options -fdump-tree-gimple }\n+// { dg-final { scan-tree-dump-not {A::~A \\(&b\\.a} \"gimple\" } }\n+\n+struct A\n+{\n+  A(int);\n+  ~A();\n+};\n+\n+struct B\n+{\n+  A a;\n+};\n+\n+int main()\n+{\n+  B b = { 1 };\n+}"}]}