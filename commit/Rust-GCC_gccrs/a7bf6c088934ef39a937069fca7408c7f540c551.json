{"sha": "a7bf6c088934ef39a937069fca7408c7f540c551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdiZjZjMDg4OTM0ZWYzOWE5MzcwNjlmY2E3NDA4YzdmNTQwYzU1MQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-13T20:29:04Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-13T20:29:04Z"}, "message": "PR tree-optimization/86114 - ICE in gimple_fold_builtin_strlen with an invalid call to strnlen\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86114\n\t* gcc.dg/pr86114.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86114\n\t* gimple-fold.c (gimple_fold_builtin_strlen): Only handle LHS\n\tof integer types.\n\t* tree-ssa-strlen.c (maybe_set_strlen_range): Same.\n\nFrom-SVN: r261567", "tree": {"sha": "07550cd4b992b1eb84936c13801494f6fe66c2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07550cd4b992b1eb84936c13801494f6fe66c2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7bf6c088934ef39a937069fca7408c7f540c551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7bf6c088934ef39a937069fca7408c7f540c551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7bf6c088934ef39a937069fca7408c7f540c551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7bf6c088934ef39a937069fca7408c7f540c551/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04ee1d0f23b14c251a850f2a26429d324b1f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb04ee1d0f23b14c251a850f2a26429d324b1f6f"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "78261196324156ea7541a3039cd7a5eeb27d395d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7bf6c088934ef39a937069fca7408c7f540c551", "patch": "@@ -1,3 +1,10 @@\n+2018-06-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86114\n+\t* gimple-fold.c (gimple_fold_builtin_strlen): Only handle LHS\n+\tof integer types.\n+\t* tree-ssa-strlen.c (maybe_set_strlen_range): Same.\n+\n 2018-06-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern):\n@@ -10,7 +17,7 @@\n \t* config/rl78/rl78.c (move_elim_pass): Use TDF_NONE rather than\n \tinteger 0 for argument to print_rtl_with_bb.\n \t(rl78_reorg): Likewise.\n- \n+\n 2018-06-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/arc/arc.c (hwloop_optimize): Strengthen local \"end_label\""}, {"sha": "a01bce7ab0805d68c5ed70ff230509aaeacf336e", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a7bf6c088934ef39a937069fca7408c7f540c551", "patch": "@@ -3538,9 +3538,10 @@ gimple_fold_builtin_strlen (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n-  tree lhs = gimple_call_lhs (stmt);\n-  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-    set_range_info (lhs, VR_RANGE, minlen, maxlen);\n+  if (tree lhs = gimple_call_lhs (stmt))\n+    if (TREE_CODE (lhs) == SSA_NAME\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n+      set_range_info (lhs, VR_RANGE, minlen, maxlen);\n \n   return false;\n }"}, {"sha": "32d158fbf436202cff9db3c8b290e8b0d87cac70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7bf6c088934ef39a937069fca7408c7f540c551", "patch": "@@ -1,3 +1,8 @@\n+2018-06-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86114\n+\t* gcc.dg/pr86114.c: New test.\n+\n 2018-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/86110"}, {"sha": "f829f0039db87d5e942a02134cd2a51fb56e2a39", "filename": "gcc/testsuite/gcc.dg/pr86114.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86114.c?ref=a7bf6c088934ef39a937069fca7408c7f540c551", "patch": "@@ -0,0 +1,42 @@\n+/* PR tree-optimization/86114 - ICE in gimple_fold_builtin_strlen with\n+   an invalid call to strnlen\n+   { dg-do compile }\n+   { dg-options \"-O2\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern char* strcmp (const char*, const char*);\n+extern char* strncmp (const char*, const char*, size_t);\n+extern char* strlen (const char*);\n+extern char* strnlen (const char*, size_t);\n+extern char* strcspn (const char*, const char*);\n+extern char* strspn (const char*, const char*);\n+extern char* strxfrm (const char*, const char*, size_t);\n+\n+char** q;\n+\n+void test_array (const char *s)\n+{\n+  extern char a[8];\n+\n+  q[0] = strcmp (a, s);\n+  q[1] = strncmp (a, s, 7);\n+  q[2] = strlen (a);\n+  q[3] = strnlen (a, 7);\n+  q[4] = strcspn (a, s);\n+  q[5] = strspn (a, s);\n+  q[6] = strxfrm (a, s, 7);\n+}\n+\n+void test_pointer (const char *s, const char *t)\n+{\n+  q[0] = strcmp (s, t);\n+  q[1] = strncmp (s, t, 7);\n+  q[2] = strlen (s);\n+  q[3] = strnlen (s, 7);\n+  q[4] = strcspn (s, t);\n+  q[5] = strspn (s, t);\n+  q[6] = strxfrm (s, s, 7);\n+}\n+\n+/* { dg-prune-output \"-Wbuiltin-declaration-mismatch\" } */"}, {"sha": "a4064a54b2e4aabcbeb377964a9a473e0ac8e02e", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7bf6c088934ef39a937069fca7408c7f540c551/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=a7bf6c088934ef39a937069fca7408c7f540c551", "patch": "@@ -1124,14 +1124,15 @@ adjust_last_stmt (strinfo *si, gimple *stmt, bool is_strcat)\n   update_stmt (last.stmt);\n }\n \n-/* For an LHS that is an SSA_NAME and for strlen() argument SRC, set\n-   LHS range info to [0, N] if SRC refers to a character array A[N]\n-   with unknown length bounded by N.  */\n+/* For an LHS that is an SSA_NAME with integer type and for strlen()\n+   argument SRC, set LHS range info to [0, N] if SRC refers to\n+   a character array A[N] with unknown length bounded by N.  */\n \n static void\n maybe_set_strlen_range (tree lhs, tree src)\n {\n-  if (TREE_CODE (lhs) != SSA_NAME)\n+  if (TREE_CODE (lhs) != SSA_NAME\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n     return;\n \n   if (TREE_CODE (src) == SSA_NAME)"}]}