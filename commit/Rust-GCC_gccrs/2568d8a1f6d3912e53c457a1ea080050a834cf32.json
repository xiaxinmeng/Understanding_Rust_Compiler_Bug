{"sha": "2568d8a1f6d3912e53c457a1ea080050a834cf32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2OGQ4YTFmNmQzOTEyZTUzYzQ1N2ExZWEwODAwNTBhODM0Y2YzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-06T19:15:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-06T19:15:36Z"}, "message": "re PR tree-optimization/79284 (ICE on valid code at -O3 on x86_64-linux-gnu: verify_gimple failed)\n\n\tPR tree-optimization/79284\n\t* tree-vectorizer.h (VECT_SCALAR_BOOLEAN_TYPE_P): Define.\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand,\n\tvectorizable_mask_load_store, vectorizable_operation,\n\tvect_is_simple_cond, get_same_sized_vectype): Use it instead\n\tof comparing TREE_CODE of a type against BOOLEAN_TYPE.\n\t* tree-vect-patterns.c (check_bool_pattern, search_type_for_mask_1,\n\tvect_recog_bool_pattern, vect_recog_mask_conversion_pattern): Likewise.\n\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n\t* tree-vect-loop.c (vect_determine_vectorization_factor): Likewise.\n\tRemove redundant gimple_code (stmt) == GIMPLE_ASSIGN test after\n\tis_gimple_assign (stmt).  Replace another such test with\n\tis_gimple_assign (stmt).\ntestsuite/\n\t* gcc.c-torture/compile/pr79284.c: New test.\n\nFrom-SVN: r245214", "tree": {"sha": "5df5458d496ad1f8120100b5ff671033e10219d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5df5458d496ad1f8120100b5ff671033e10219d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2568d8a1f6d3912e53c457a1ea080050a834cf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2568d8a1f6d3912e53c457a1ea080050a834cf32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2568d8a1f6d3912e53c457a1ea080050a834cf32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2568d8a1f6d3912e53c457a1ea080050a834cf32/comments", "author": null, "committer": null, "parents": [{"sha": "aae936b9a3914cf4b5d532644fbdcb1bf70f8099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae936b9a3914cf4b5d532644fbdcb1bf70f8099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae936b9a3914cf4b5d532644fbdcb1bf70f8099"}], "stats": {"total": 117, "additions": 81, "deletions": 36}, "files": [{"sha": "f0c773bda7581e2065acef4c36d3528ee2feb41a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -1,5 +1,26 @@\n+2017-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79284\n+\t* tree-vectorizer.h (VECT_SCALAR_BOOLEAN_TYPE_P): Define.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand,\n+\tvectorizable_mask_load_store, vectorizable_operation,\n+\tvect_is_simple_cond, get_same_sized_vectype): Use it instead\n+\tof comparing TREE_CODE of a type against BOOLEAN_TYPE.\n+\t* tree-vect-patterns.c (check_bool_pattern, search_type_for_mask_1,\n+\tvect_recog_bool_pattern, vect_recog_mask_conversion_pattern): Likewise.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): Likewise.\n+\tRemove redundant gimple_code (stmt) == GIMPLE_ASSIGN test after\n+\tis_gimple_assign (stmt).  Replace another such test with\n+\tis_gimple_assign (stmt).\n+\n 2017-02-06  Georg-Johann Lay  <avr@gjlay.de>\n \n+\tPR target/78883\n+\t* config/avr/avr.c (rtl-iter.h): Include it.\n+\t(TARGET_LEGITIMATE_COMBINED_INSN): New hook define...\n+\t(avr_legitimate_combined_insn): ...and implementation.\n+\n 2017-02-06  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/predicates.md (\"larl_operand\"): Use macros from hwint.h."}, {"sha": "8e9b5fae17c7584662b9090bc29f81358b01ac8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -1,3 +1,8 @@\n+2017-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79284\n+\t* gcc.c-torture/compile/pr79284.c: New test.\n+\n 2017-02-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70448\n@@ -67,8 +72,8 @@\n \n \tPR tree-optimization/79327\n \t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n-\t* gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: New test.\n-\t* gcc/testsuite/gcc.dg/tree-ssa/pr79327-2.c: Ditto.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: New test.\n+\t* gcc.dg/tree-ssa/pr79327-2.c: Ditto.\n \n 2017-02-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Sebor  <msebor@redhat.com>\n@@ -353,7 +358,7 @@\n 2017-01-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR tree-optimization/71374\n-\t* testsuite/gcc.target/i386/pr71374.c: New.\n+\t* gcc.target/i386/pr71374.c: New.\n \n 2017-01-27  Martin Sebor  <msebor@redhat.com>\n \n@@ -531,9 +536,9 @@\n \t* g++.dg/ext/flexary18.C: Same.\n \t* g++.dg/ext/flexary19.C: Same.\n \t* g++.dg/ext/flexary7.C: Same.\n-\t* gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations1.C: Same.\n-\t* gcc/testsuite/g++.dg/ubsan/object-size-1.C: Same.\n-\t* gcc/testsuite/obj-c++.dg/property/at-property-23.mm: Same.\n+\t* g++.dg/cpp1z/has-unique-obj-representations1.C: Same.\n+\t* g++.dg/ubsan/object-size-1.C: Same.\n+\t* obj-c++.dg/property/at-property-23.mm: Same.\n \n 2017-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -921,10 +926,10 @@\n \n 2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n \n-\t* testsuite/gcc.target/aarch64/return_address_sign_1.c: Enable on LP64\n+\t* gcc.target/aarch64/return_address_sign_1.c: Enable on LP64\n \tonly.\n-\t* testsuite/gcc.target/aarch64/return_address_sign_2.c: Likewise.\n-\t* testsuite/gcc.target/aarch64/return_address_sign_3.c: Likewise.\n+\t* gcc.target/aarch64/return_address_sign_2.c: Likewise.\n+\t* gcc.target/aarch64/return_address_sign_3.c: Likewise.\n \n 2017-01-20  Nathan Sidwell  <nathan@acm.org>\n \n@@ -1039,7 +1044,7 @@\n \n 2017-01-19  Tamar Christina  <tamar.christina@arm.com>\n \n-\t* gcc/testsuite/lib/target-supports.exp\n+\t* lib/target-supports.exp\n \t(check_effective_target_vect_call_copysignf): Enable for AArch64.\n \n 2017-01-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>"}, {"sha": "fe62a939b4ec3caf36695ef48dfad46e2604daec", "filename": "gcc/testsuite/gcc.c-torture/compile/pr79284.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr79284.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr79284.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr79284.c?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/79284 */\n+\n+struct S { unsigned a : 1; } b;\n+int c[64];\n+\n+int\n+foo (int x)\n+{ \n+  char e, f;\n+  for (e = 63; e; e--)\n+    f = (c[e] && ~0) != b.a;\n+  return f;\n+}"}, {"sha": "c5a1627df61178138085fb5f5f6b2c4d60fce6a4", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -433,7 +433,7 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t      /* Bool ops don't participate in vectorization factor\n \t\t computation.  For comparison use compared types to\n \t\t compute a factor.  */\n-\t      if (TREE_CODE (scalar_type) == BOOLEAN_TYPE\n+\t      if (VECT_SCALAR_BOOLEAN_TYPE_P (scalar_type)\n \t\t  && is_gimple_assign (stmt)\n \t\t  && gimple_assign_rhs_code (stmt) != COND_EXPR)\n \t\t{\n@@ -442,11 +442,10 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t\t    mask_producers.safe_push (stmt_info);\n \t\t  bool_result = true;\n \n-\t\t  if (gimple_code (stmt) == GIMPLE_ASSIGN\n-\t\t      && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n-\t\t\t == tcc_comparison\n-\t\t      && TREE_CODE (TREE_TYPE (gimple_assign_rhs1 (stmt)))\n-\t\t\t != BOOLEAN_TYPE)\n+\t\t  if (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n+\t\t      == tcc_comparison\n+\t\t      && !VECT_SCALAR_BOOLEAN_TYPE_P\n+\t\t\t    (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n \t\t    scalar_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n \t\t  else\n \t\t    {\n@@ -585,9 +584,10 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \n       stmt = STMT_VINFO_STMT (mask_producers[i]);\n \n-      if (gimple_code (stmt) == GIMPLE_ASSIGN\n+      if (is_gimple_assign (stmt)\n \t  && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_comparison\n-\t  && TREE_CODE (TREE_TYPE (gimple_assign_rhs1 (stmt))) != BOOLEAN_TYPE)\n+\t  && !VECT_SCALAR_BOOLEAN_TYPE_P\n+\t\t\t\t      (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n \t{\n \t  scalar_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n \t  mask_type = get_mask_type_for_scalar_type (scalar_type);"}, {"sha": "39f013376080cb6fe536f14456094157223f3d88", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -3158,9 +3158,7 @@ check_bool_pattern (tree var, vec_info *vinfo, hash_set<gimple *> &stmts)\n       break;\n \n     CASE_CONVERT:\n-      if ((TYPE_PRECISION (TREE_TYPE (rhs1)) != 1\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (rhs1)))\n-\t  && TREE_CODE (TREE_TYPE (rhs1)) != BOOLEAN_TYPE)\n+      if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (rhs1)))\n \treturn false;\n       if (! check_bool_pattern (rhs1, vinfo, stmts))\n \treturn false;\n@@ -3474,9 +3472,7 @@ search_type_for_mask_1 (tree var, vec_info *vinfo,\n   if (TREE_CODE (var) != SSA_NAME)\n     return NULL_TREE;\n \n-  if ((TYPE_PRECISION (TREE_TYPE (var)) != 1\n-       || !TYPE_UNSIGNED (TREE_TYPE (var)))\n-      && TREE_CODE (TREE_TYPE (var)) != BOOLEAN_TYPE)\n+  if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (var)))\n     return NULL_TREE;\n \n   if (!vect_is_simple_use (var, vinfo, &def_stmt, &dt))\n@@ -3518,7 +3514,7 @@ search_type_for_mask_1 (tree var, vec_info *vinfo,\n \t{\n \t  tree comp_vectype, mask_type;\n \n-\t  if (TREE_CODE (TREE_TYPE (rhs1)) == BOOLEAN_TYPE)\n+\t  if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (rhs1)))\n \t    {\n \t      res = search_type_for_mask_1 (rhs1, vinfo, cache);\n \t      res2 = search_type_for_mask_1 (gimple_assign_rhs2 (def_stmt),\n@@ -3637,9 +3633,7 @@ vect_recog_bool_pattern (vec<gimple *> *stmts, tree *type_in,\n   var = gimple_assign_rhs1 (last_stmt);\n   lhs = gimple_assign_lhs (last_stmt);\n \n-  if ((TYPE_PRECISION (TREE_TYPE (var)) != 1\n-       || !TYPE_UNSIGNED (TREE_TYPE (var)))\n-      && TREE_CODE (TREE_TYPE (var)) != BOOLEAN_TYPE)\n+  if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (var)))\n     return NULL;\n \n   hash_set<gimple *> bool_stmts;\n@@ -4023,7 +4017,7 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n \n   /* Now check for binary boolean operations requiring conversion for\n      one of operands.  */\n-  if (TREE_CODE (TREE_TYPE (lhs)) != BOOLEAN_TYPE)\n+  if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (lhs)))\n     return NULL;\n \n   if (rhs_code != BIT_IOR_EXPR"}, {"sha": "46d1ad6eff2a6796af2c0b90179ea0e1d2e46675", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -2949,7 +2949,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n   gimple_seq ctor_seq = NULL;\n \n   /* Check if vector type is a boolean vector.  */\n-  if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE\n+  if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n       && vect_mask_constant_operand_p (stmt, op_num))\n     vector_type\n       = build_same_sized_truth_vector_type (STMT_VINFO_VECTYPE (stmt_vinfo));"}, {"sha": "bf07efda935346ac3f5174eef56d09417fa1f532", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -1420,7 +1420,7 @@ vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n \n       if (vectype)\n \tvector_type = vectype;\n-      else if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE\n+      else if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n \t       && VECTOR_BOOLEAN_TYPE_P (stmt_vectype))\n \tvector_type = build_same_sized_truth_vector_type (stmt_vectype);\n       else\n@@ -2029,7 +2029,7 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   mask = gimple_call_arg (stmt, 2);\n \n-  if (TREE_CODE (TREE_TYPE (mask)) != BOOLEAN_TYPE)\n+  if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (mask)))\n     return false;\n \n   /* FORNOW. This restriction should be relaxed.  */\n@@ -5275,9 +5275,9 @@ vectorizable_operation (gimple *stmt, gimple_stmt_iterator *gsi,\n \t of booleans or vector of integers).  We use output\n \t vectype because operations on boolean don't change\n \t type.  */\n-      if (TREE_CODE (TREE_TYPE (op0)) == BOOLEAN_TYPE)\n+      if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op0)))\n \t{\n-\t  if (TREE_CODE (TREE_TYPE (scalar_dest)) != BOOLEAN_TYPE)\n+\t  if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (scalar_dest)))\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -7666,7 +7666,7 @@ vect_is_simple_cond (tree cond, vec_info *vinfo, tree *comp_vectype)\n \n   /* Mask case.  */\n   if (TREE_CODE (cond) == SSA_NAME\n-      && TREE_CODE (TREE_TYPE (cond)) == BOOLEAN_TYPE)\n+      && VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (cond)))\n     {\n       gimple *lhs_def_stmt = SSA_NAME_DEF_STMT (cond);\n       if (!vect_is_simple_use (cond, vinfo, &lhs_def_stmt,\n@@ -9059,7 +9059,7 @@ get_mask_type_for_scalar_type (tree scalar_type)\n tree\n get_same_sized_vectype (tree scalar_type, tree vector_type)\n {\n-  if (TREE_CODE (scalar_type) == BOOLEAN_TYPE)\n+  if (VECT_SCALAR_BOOLEAN_TYPE_P (scalar_type))\n     return build_same_sized_truth_vector_type (vector_type);\n \n   return get_vectype_for_scalar_type_and_size"}, {"sha": "ba6d940f2b4976b4bf14d3b078a2da60f6897871", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2568d8a1f6d3912e53c457a1ea080050a834cf32/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=2568d8a1f6d3912e53c457a1ea080050a834cf32", "patch": "@@ -784,6 +784,18 @@ struct dataref_aux {\n /* The maximum vectorization factor supported by any target (V64QI).  */\n #define MAX_VECTORIZATION_FACTOR 64\n \n+/* Nonzero if TYPE represents a (scalar) boolean type or type\n+   in the middle-end compatible with it (unsigned precision 1 integral\n+   types).  Used to determine which types should be vectorized as\n+   VECTOR_BOOLEAN_TYPE_P.  */\n+\n+#define VECT_SCALAR_BOOLEAN_TYPE_P(TYPE) \\\n+  (TREE_CODE (TYPE) == BOOLEAN_TYPE\t\t\\\n+   || ((TREE_CODE (TYPE) == INTEGER_TYPE\t\\\n+\t|| TREE_CODE (TYPE) == ENUMERAL_TYPE)\t\\\n+       && TYPE_PRECISION (TYPE) == 1\t\t\\\n+       && TYPE_UNSIGNED (TYPE)))\n+\n extern vec<stmt_vec_info> stmt_vec_info_vec;\n \n void init_stmt_vec_info_vec (void);"}]}