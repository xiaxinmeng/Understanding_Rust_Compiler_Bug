{"sha": "30ff6342d44939fd18830d230adecb1388a73b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmZjYzNDJkNDQ5MzlmZDE4ODMwZDIzMGFkZWNiMTM4OGE3M2IzNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-01T00:52:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-01T00:52:26Z"}, "message": "[multiple changes]\n\n\n2000-05-31  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Add strtoull checks...\n\n2000-05-31 Steven King <sxking@uswest.net>\n\n        * shadow/time.h: fix typo\n        * shadow/wchar.h: ifdef __USE_GNU for wcsdup\n        * shadow/bits/std_cwchar.h: ditto\n        * shadow/bits/std_cstdlib.h: add overloads of abs and div for long\n        and long long.\n\nFrom-SVN: r34321", "tree": {"sha": "e7ee0a6b808d5ca7fa926c97968c326f2c589bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7ee0a6b808d5ca7fa926c97968c326f2c589bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30ff6342d44939fd18830d230adecb1388a73b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ff6342d44939fd18830d230adecb1388a73b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ff6342d44939fd18830d230adecb1388a73b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ff6342d44939fd18830d230adecb1388a73b35/comments", "author": null, "committer": null, "parents": [{"sha": "0f145be85bf20c14a90abac5b773577c7c570139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f145be85bf20c14a90abac5b773577c7c570139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f145be85bf20c14a90abac5b773577c7c570139"}], "stats": {"total": 119, "additions": 79, "deletions": 40}, "files": [{"sha": "6a775a22ff972ddb52fa24106b87c2c39258392d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -1,3 +1,15 @@\n+2000-05-31  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Add strtoull checks...\n+\n+2000-05-31 Steven King <sxking@uswest.net>\n+\n+        * shadow/time.h: fix typo\n+        * shadow/wchar.h: ifdef __USE_GNU for wcsdup\n+        * shadow/bits/std_cwchar.h: ditto\n+        * shadow/bits/std_cstdlib.h: add overloads of abs and div for long\n+        and long long.\n+\n 2000-05-26  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG):  If strtoll isn't"}, {"sha": "9030b7f0cb8a89698d9e03a422f2c186e545c398", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -948,8 +948,7 @@ dnl\n dnl GLIBCPP_ENABLE_LONG_LONG\n AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n   define([GLIBCPP_ENABLE_LONG_LONG_DEFAULT], ifelse($1, yes, yes, no))dnl\n-  # must do check_func outside the local msg_checking/msg_result\n-  AC_CHECK_FUNC(strtoll,,ac_ll=no)\n+\n   AC_MSG_CHECKING([for enabled long long])\n   AC_ARG_ENABLE(long-long,\n   changequote(<<, >>)dnl\n@@ -961,7 +960,15 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n-  if test x\"$ac_ll\" = xno; then enable_long_long=no; fi; unset ac_ll\n+\n+  # Check for the existance of functions used if long long is enabled.\n+  AC_CHECK_FUNC(strtoll,,ac_strtoll=no)\n+  AC_CHECK_FUNC(strtoull,,ac_strtoull=no)\n+\n+  if test x\"$ac_strtoll\" = xno || test x\"$ac_strtoull\" = xno; then \n+\tenable_long_long=no; \n+  fi; unset ac_ll\n+\n   AC_MSG_RESULT($enable_long_long)\n   dnl Option parsed, now set things appropriately\n   case \"$enable_long_long\" in"}, {"sha": "c82b27cbc76a347a86b1aa006fc19bfc2c3a26b0", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -116,19 +116,17 @@ includes =\n libio_headers = \\\n         libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n @GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c\n-@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \\\n+@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n \n EXTRA_DIST = iostreamP.h\n \n libio_la_LIBADD = $(LIBIO_SRCS) \n libio_la_DEPENDENCIES = $(libio_la_LIBADD)\n libio_la_SOURCES = $(LIBIO_SRCS)\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@LIBIO_CONFIG_H = \\\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@_G_config.h\n-@GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE@LIBIO_CONFIG_H = \\\n+@GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@LIBIO_CONFIG_H = @GLIBCPP_NEED_LIBIO_CONFIG_H_TRUE@_G_config.h\n+@GLIBCPP_NEED_LIBIO_CONFIG_H_FALSE@LIBIO_CONFIG_H = \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "438d44561256a9fc3b71a936337c0505ce2c2459", "filename": "libstdc++-v3/shadow/bits/std_cstdlib.h", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header wrapper\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,25 +40,25 @@\n \n # include <bits/std_cstddef.h>  /* pick up NULL, size_t */\n \n-  namespace _C_legacy {\n-    extern \"C\" {\n+namespace _C_legacy {\n+  extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma system_header\n #     include_next <stdlib.h>\n       typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n     }\n-    const int _CPP_EXIT_SUCCESS_capture = int(EXIT_SUCCESS);\n-    const int _CPP_EXIT_FAILURE_capture = int(EXIT_FAILURE);\n-    const int _CPP_RAND_MAX_capture     = int(RAND_MAX);\n-    inline int _CPP_MB_CUR_MAX_capture() { return int(MB_CUR_MAX); }\n-    // typedef size_t  _CPP_size_t_capture;\n-    // typedef wchar_t _CPP_wchar_t_capture;\n-    typedef div_t   _CPP_div_t_capture;\n-    typedef ldiv_t  _CPP_ldiv_t_capture;\n-\n-    namespace _C_shadow { \n-    }\n-  } // close namespace ::_C_legacy::\n+  const int _CPP_EXIT_SUCCESS_capture = int(EXIT_SUCCESS);\n+  const int _CPP_EXIT_FAILURE_capture = int(EXIT_FAILURE);\n+  const int _CPP_RAND_MAX_capture     = int(RAND_MAX);\n+  inline int _CPP_MB_CUR_MAX_capture() { return int(MB_CUR_MAX); }\n+  // typedef size_t  _CPP_size_t_capture;\n+  // typedef wchar_t _CPP_wchar_t_capture;\n+  typedef div_t   _CPP_div_t_capture;\n+  typedef ldiv_t  _CPP_ldiv_t_capture;\n+\n+  namespace _C_shadow { \n+  }\n+} // namespace _C_legacy::\n \n #  undef size_t\n #  undef wchar_t\n@@ -100,6 +100,10 @@\n #  undef div\n #  undef labs\n #  undef ldiv\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+#  undef llabs\n+#  undef lldiv\n+#endif\n #  undef mblen\n #  undef mbtowc\n #  undef wctomb\n@@ -185,11 +189,25 @@\n     inline int abs(int __x) \n       { return __x >= 0 ? __x : -__x; }\n     inline div_t div(int __n, int __d)\n-      { _div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+      { div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n     inline long labs(long __x)\n       { return __x >= 0 ? __x : -__x; }\n-    inline ldiv_t ldiv(long __num, long __den)\n-      { _ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+    inline long abs(long __x)\n+      { return __x >= 0 ? __x : -__x; }\n+    inline ldiv_t ldiv(long __n, long __d)\n+      { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+    inline ldiv_t div(long __n, long __d)\n+      { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+    inline long long llabs(long long __x)\n+      { return __x >= 0 ? __x : -__x; }\n+    inline long long abs(long long __x)\n+      { return __x >= 0 ? __x : -__x; }\n+    inline lldiv_t lldiv(long long __n, long long __d)\n+      { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+    inline lldiv_t div(long long __n, long long __d)\n+      { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+#endif\n \n     using ::_C_legacy::mblen;\n     using ::_C_legacy::mbtowc;;\n@@ -213,10 +231,15 @@\n       using ::std::div;\n       using ::std::labs;\n       using ::std::ldiv;\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+      using ::std::llabs;\n+      using ::std::lldiv;\n+#endif\n     }\n   }\n \n # undef _IN_C_LEGACY_\n \n #endif\n \n+"}, {"sha": "d4700ecf003925c0b5d47c6cc12087a519a5f672", "filename": "libstdc++-v3/shadow/bits/std_cwchar.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -213,7 +213,9 @@\n     using ::_C_legacy::wcstok;\n     using ::_C_legacy::wcslen;\n #ifndef __sun\n+#ifdef __USE_GNU\n     using ::_C_legacy::wcsdup;\n+#endif\n     using ::_C_legacy::wcsstr;\n     using ::_C_legacy::wmemchr;\n     using ::_C_legacy::wmemcmp;"}, {"sha": "db241651d9c533a0f63faecf8c35a7b578e2aefd", "filename": "libstdc++-v3/shadow/time.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ftime.h?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -33,7 +33,7 @@\n // turn off glibc-2.0 weirdness. Other systems define similar foolishness\n #undef __need_time_t\n #undef __need_clock_t\n-#undef __need_timespec))\n+#undef __need_timespec\n \n # undef _SHADOW_NAME\n # define _SHADOW_NAME <ctime>"}, {"sha": "7dff1c52f2c0200768f3844aa77bff34211171a2", "filename": "libstdc++-v3/shadow/wchar.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -66,7 +66,9 @@\n   using ::std::wcscmp;\n   using ::std::wcscoll;\n   using ::std::wcsxfrm;\n+# ifdef __USE_GNU\n   using ::std::wcsdup;\n+# endif\n   using ::std::wcschr;\n   using ::std::wcscspn;\n   using ::std::wcspbrk;"}, {"sha": "c4fa9ede4a49e5468a6c8bf643c9fba9562f8094", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ff6342d44939fd18830d230adecb1388a73b35/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=30ff6342d44939fd18830d230adecb1388a73b35", "patch": "@@ -105,12 +105,9 @@ libinst_wstring_la = @libinst_wstring_la@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -256,10 +253,9 @@ std_headers = \\\n \tmap memory new numeric ostream queue set sstream stack stdexcept \\\n \tstreambuf string strstream typeinfo utility valarray vector \n \n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n @GLIBCPP_NEED_LIBIO_TRUE@\t$(top_builddir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n-@GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \\\n+@GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n generated_headers = \\\n \t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n@@ -338,9 +334,8 @@ libstdc___la_LIBADD = \\\n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = \\\n-@GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n-@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \\\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # We cannot use the default rules to install headers since we cannot\n # statically decide which headers to install.  So we have our own special"}]}