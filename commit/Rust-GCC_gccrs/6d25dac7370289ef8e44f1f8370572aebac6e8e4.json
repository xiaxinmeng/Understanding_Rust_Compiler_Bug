{"sha": "6d25dac7370289ef8e44f1f8370572aebac6e8e4", "node_id": "C_kwDOANBUbNoAKDZkMjVkYWM3MzcwMjg5ZWY4ZTQ0ZjFmODM3MDU3MmFlYmFjNmU4ZTQ", "commit": {"author": {"name": "Nikos Alexandris", "email": "nikos-alexandris@protonmail.com", "date": "2023-03-02T01:14:46Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-02T09:19:00Z"}, "message": "Add location info when opening a file fails in include_str and include_bytes. Resolves issue #1872\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-builtins.cc (load_file_bytes): Add location parameter.\n\t(MacroBuiltin::include_bytes_handler): Pass location to load_file_bytes.\n\t(MacroBuiltin::include_str_handler): Pass location to load_file_bytes.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/builtin_macro_include_bytes_location_info.rs: New test.\n\t* rust/compile/builtin_macro_include_str_location_info.rs: New test.\n\nSigned-off-by: Nikos Alexandris <nikos-alexandris@protonmail.com>", "tree": {"sha": "0d18cb3e16c6814673fd3016afb2de229eb2deba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d18cb3e16c6814673fd3016afb2de229eb2deba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d25dac7370289ef8e44f1f8370572aebac6e8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d25dac7370289ef8e44f1f8370572aebac6e8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d25dac7370289ef8e44f1f8370572aebac6e8e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d25dac7370289ef8e44f1f8370572aebac6e8e4/comments", "author": {"login": "nikos-alexandris", "id": 69969563, "node_id": "MDQ6VXNlcjY5OTY5NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/69969563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikos-alexandris", "html_url": "https://github.com/nikos-alexandris", "followers_url": "https://api.github.com/users/nikos-alexandris/followers", "following_url": "https://api.github.com/users/nikos-alexandris/following{/other_user}", "gists_url": "https://api.github.com/users/nikos-alexandris/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikos-alexandris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikos-alexandris/subscriptions", "organizations_url": "https://api.github.com/users/nikos-alexandris/orgs", "repos_url": "https://api.github.com/users/nikos-alexandris/repos", "events_url": "https://api.github.com/users/nikos-alexandris/events{/privacy}", "received_events_url": "https://api.github.com/users/nikos-alexandris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec974b93e7442b5babbea91683de64bf1b02dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec974b93e7442b5babbea91683de64bf1b02dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec974b93e7442b5babbea91683de64bf1b02dbd"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "5f317a0a1dfc1ba794f7db04e8e10a5d9344b946", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=6d25dac7370289ef8e44f1f8370572aebac6e8e4", "patch": "@@ -308,12 +308,12 @@ source_relative_path (std::string path, Location locus)\n    FIXME: platform specific.  */\n \n std::vector<uint8_t>\n-load_file_bytes (const char *filename)\n+load_file_bytes (Location invoc_locus, const char *filename)\n {\n   RAIIFile file_wrap (filename);\n   if (file_wrap.get_raw () == nullptr)\n     {\n-      rust_error_at (Location (), \"cannot open filename %s: %m\", filename);\n+      rust_error_at (invoc_locus, \"cannot open filename %s: %m\", filename);\n       return std::vector<uint8_t> ();\n     }\n \n@@ -326,7 +326,7 @@ load_file_bytes (const char *filename)\n \n   if (fread (&buf[0], fsize, 1, f) != 1)\n     {\n-      rust_error_at (Location (), \"error reading file %s: %m\", filename);\n+      rust_error_at (invoc_locus, \"error reading file %s: %m\", filename);\n       return std::vector<uint8_t> ();\n     }\n \n@@ -391,7 +391,8 @@ MacroBuiltin::include_bytes_handler (Location invoc_locus,\n   std::string target_filename\n     = source_relative_path (lit_expr->as_string (), invoc_locus);\n \n-  std::vector<uint8_t> bytes = load_file_bytes (target_filename.c_str ());\n+  std::vector<uint8_t> bytes\n+    = load_file_bytes (invoc_locus, target_filename.c_str ());\n \n   /* Is there a more efficient way to do this?  */\n   std::vector<std::unique_ptr<AST::Expr>> elts;\n@@ -455,7 +456,8 @@ MacroBuiltin::include_str_handler (Location invoc_locus,\n   std::string target_filename\n     = source_relative_path (lit_expr->as_string (), invoc_locus);\n \n-  std::vector<uint8_t> bytes = load_file_bytes (target_filename.c_str ());\n+  std::vector<uint8_t> bytes\n+    = load_file_bytes (invoc_locus, target_filename.c_str ());\n \n   /* FIXME: reuse lexer */\n   int expect_single = 0;"}, {"sha": "98bf53b777fffa6ab8ec9e22c388094b85e3b937", "filename": "gcc/testsuite/rust/compile/builtin_macro_include_bytes_location_info.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes_location_info.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes_location_info.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes_location_info.rs?ref=6d25dac7370289ef8e44f1f8370572aebac6e8e4", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! include_bytes {\n+    () => {{}};\n+}\n+\n+fn main() {\n+    include_bytes!(\"nonexistent.txt\"); // { dg-error \"cannot open filename (.*?)nonexistent.txt: No such file or directory\" }\n+}"}, {"sha": "a94603353f732c01e7946d573c0c923cfaa45b36", "filename": "gcc/testsuite/rust/compile/builtin_macro_include_str_location_info.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str_location_info.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d25dac7370289ef8e44f1f8370572aebac6e8e4/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str_location_info.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str_location_info.rs?ref=6d25dac7370289ef8e44f1f8370572aebac6e8e4", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! include_str {\n+    () => {{}};\n+}\n+\n+fn main() {\n+    include_str!(\"nonexistent.txt\"); // { dg-error \"cannot open filename (.*?)nonexistent.txt: No such file or directory\" }\n+}"}]}