{"sha": "1189c03859cefef4fc4fd44d57eb3d4d3348b562", "node_id": "C_kwDOANBUbNoAKDExODljMDM4NTljZWZlZjRmYzRmZDQ0ZDU3ZWIzZDRkMzM0OGI1NjI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-20T17:32:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-24T19:52:03Z"}, "message": "c++: *this folding in constexpr call\n\nThe code in cxx_eval_call_expression to fold *this was doing the wrong thing\nfor array decay; we can use cxx_fold_indirect_ref instead.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_fold_indirect_ref): Add default arg.\n\t(cxx_eval_call_expression): Call it.\n\t(cxx_fold_indirect_ref_1): Handle null empty_base.", "tree": {"sha": "9edd7b5a787308e833080d55506efb3d18a86dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9edd7b5a787308e833080d55506efb3d18a86dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1189c03859cefef4fc4fd44d57eb3d4d3348b562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1189c03859cefef4fc4fd44d57eb3d4d3348b562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1189c03859cefef4fc4fd44d57eb3d4d3348b562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1189c03859cefef4fc4fd44d57eb3d4d3348b562/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aee03cb638c262846f55477b40828f694c846a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aee03cb638c262846f55477b40828f694c846a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aee03cb638c262846f55477b40828f694c846a0"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "388239ea8a8cf4fde5c225f51baaccc83fe6e0d4", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1189c03859cefef4fc4fd44d57eb3d4d3348b562/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1189c03859cefef4fc4fd44d57eb3d4d3348b562/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=1189c03859cefef4fc4fd44d57eb3d4d3348b562", "patch": "@@ -1354,6 +1354,8 @@ enum value_cat {\n \n static tree cxx_eval_constant_expression (const constexpr_ctx *, tree,\n \t\t\t\t\t  value_cat, bool *, bool *, tree * = NULL);\n+static tree cxx_fold_indirect_ref (const constexpr_ctx *, location_t, tree, tree,\n+\t\t\t\t   bool * = NULL);\n \n /* Attempt to evaluate T which represents a call to a builtin function.\n    We assume here that all builtin functions evaluate to scalar types\n@@ -2720,9 +2722,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t At this point it has already been evaluated in the call\n \t to cxx_bind_parameters_in_call.  */\n       new_obj = TREE_VEC_ELT (new_call.bindings, 0);\n-      STRIP_NOPS (new_obj);\n-      if (TREE_CODE (new_obj) == ADDR_EXPR)\n-\tnew_obj = TREE_OPERAND (new_obj, 0);\n+      new_obj = cxx_fold_indirect_ref (ctx, loc, DECL_CONTEXT (fun), new_obj);\n \n       if (ctx->call && ctx->call->fundef\n \t  && DECL_CONSTRUCTOR_P (ctx->call->fundef->decl))\n@@ -5197,7 +5197,8 @@ cxx_fold_indirect_ref_1 (const constexpr_ctx *ctx, location_t loc, tree type,\n \t  && CLASS_TYPE_P (optype)\n \t  && DERIVED_FROM_P (type, optype))\n \t{\n-\t  *empty_base = true;\n+\t  if (empty_base)\n+\t    *empty_base = true;\n \t  return op;\n \t}\n     }\n@@ -5216,7 +5217,7 @@ cxx_fold_indirect_ref_1 (const constexpr_ctx *ctx, location_t loc, tree type,\n \n static tree\n cxx_fold_indirect_ref (const constexpr_ctx *ctx, location_t loc, tree type,\n-\t\t       tree op0, bool *empty_base)\n+\t\t       tree op0, bool *empty_base /* = NULL*/)\n {\n   tree sub = op0;\n   tree subtype;"}]}