{"sha": "dbf85761b58b9dcc84cc4c5bebe4f77d8140c097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmODU3NjFiNThiOWRjYzg0Y2M0YzViZWJlNGY3N2Q4MTQwYzA5Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-14T08:47:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-14T08:47:36Z"}, "message": "(make_memloc): Don't reuse a memloc.\n\nFrom-SVN: r4675", "tree": {"sha": "2634d939c42b0806ed65312fa7b248f8d79cc567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2634d939c42b0806ed65312fa7b248f8d79cc567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097/comments", "author": null, "committer": null, "parents": [{"sha": "2937cf8796f6713dd2ec10531838a3891f9c811a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2937cf8796f6713dd2ec10531838a3891f9c811a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2937cf8796f6713dd2ec10531838a3891f9c811a"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "868c96780fc3a3b495e1d5e8358249263f8bd9c2", "filename": "gcc/reload.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf85761b58b9dcc84cc4c5bebe4f77d8140c097/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=dbf85761b58b9dcc84cc4c5bebe4f77d8140c097", "patch": "@@ -3794,16 +3794,26 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest)\n   return x;\n }\n \n+/* Return a mem ref for the memory equivalent of reg REGNO.\n+   This mem ref is not shared with anything.  */\n+\n static rtx\n make_memloc (ad, regno)\n      rtx ad;\n      int regno;\n {\n   register int i;\n   rtx tem = reg_equiv_address[regno];\n+\n+#if 0 /* We cannot safely reuse a memloc made here;\n+\t if the pseudo appears twice, and its mem needs a reload,\n+\t it gets two separate reloads assigned, but it only\n+\t gets substituted with the second of them;\n+\t then it can get used before that reload reg gets loaded up.  */\n   for (i = 0; i < n_memlocs; i++)\n     if (rtx_equal_p (tem, XEXP (memlocs[i], 0)))\n       return memlocs[i];\n+#endif\n \n   /* If TEM might contain a pseudo, we must copy it to avoid\n      modifying it when we do the substitution for the reload.  */"}]}