{"sha": "f4ee3a9e2ab62e99346ee286be1d10701122c03b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlZTNhOWUyYWI2MmU5OTM0NmVlMjg2YmUxZDEwNzAxMTIyYzAzYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-10T18:04:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-10T18:04:44Z"}, "message": "* config/i386/avx512fintrin.h (_mm_mask_max_round_sd)\n\t(_mm_maskz_max_round_sd, _mm_mask_max_round_ss)\n\t(_mm_maskz_max_round_ss, _mm_mask_min_round_sd)\n\t(_mm_maskz_min_round_sd, _mm_mask_min_round_ss)\n\t(_mm_maskz_min_round_ss): New intrinsics.\n\t* config/i386/i386-builtin-types.def (V2DF, V2DF, V2DF, V2DF, UQI, INT)\n\t(V4SF, V4SF, V4SF, V4SF, UQI, INT): New function type aliases.\n\t* config/i386/i386-builtin.def (__builtin_ia32_maxsd_mask_round)\n\t(__builtin_ia32_maxss_mask_round, __builtin_ia32_minsd_mask_round)\n\t(__builtin_ia32_minss_mask_round): New builtins.\n\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n\t* config/i386/sse.md (<sse>_vm<code><mode>3<round_saeonly_name>):\n\tRename to ...\n\t(<sse>_vm<code><mode>3<mask_name><round_saeonly_name>): ... this.\n\t(v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %<iptr>2<round_saeonly_op3>}):\n\tChange to ...\n\t(v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}):\n\t... this.\n\n\t* config/i386/avx512fintrin.h (_mm_mask_mul_round_sd)\n\t(_mm_maskz_mul_round_sd, _mm_mask_mul_round_ss)\n\t(_mm_maskz_mul_round_ss, _mm_mask_div_round_sd)\n\t(_mm_maskz_div_round_sd, _mm_mask_div_round_ss)\n\t(_mm_maskz_div_round_ss, _mm_mask_mul_sd, _mm_maskz_mul_sd)\n\t(_mm_mask_mul_ss, _mm_maskz_mul_ss, _mm_mask_div_sd)\n\t(_mm_maskz_div_sd, _mm_mask_div_ss, _mm_maskz_div_ss): New intrinsics.\n\t* config/i386/i386-builtin-types.def (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): New function type aliases.\n\t* config/i386/i386-builtin.def (__builtin_ia32_divsd_mask_round)\n\t(__builtin_ia32_divss_mask_round, __builtin_ia32_mulsd_mask_round)\n\t(__builtin_ia32_mulss_mask_round): New builtins.\n\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n\t* config/i386/sse.md (<sse>_vm<multdiv_mnemonic><mode>3<round_name>):\n\tRename to ...\n\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>): ... this.\n\t(v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}):\n\tChange to ...\n\t(v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}):\n\t... this.\n\n\t* config/i386/avxintrin.h (_mm256_set_m128, _mm256_set_m128d)\n\t(_mm256_set_m128i, _mm256_setr_m128, _mm256_setr_m128d)\n\t(_mm256_setr_m128i): New intrinsics.\n\n\t* config/i386/avx512fintrin.h (_mm_mask_rcp14_sd)\n\t(_mm_maskz_rcp14_sd, _mm_mask_rcp14_ss)\n\t(_mm_maskz_rcp14_ss): New intrinsics.\n\t* config/i386/i386-builtin.def (__builtin_ia32_rcp14sd_mask)\n\t(__builtin_ia32_rcp14ss_mask): New builtins.\n\t* config/i386/sse.md (srcp14<mode>_mask): New pattern.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vmaxsd-1.c (_mm_mask_max_round_sd)\n\t(_mm_maskz_max_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmaxsd-2.c: New.\n\t* gcc.target/i386/avx512f-vmaxss-1.c (_mm_mask_max_round_ss)\n\t(_mm_maskz_max_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmaxss-2.c: New.\n\t* gcc.target/i386/avx512f-vminsd-1.c (_mm_mask_min_round_sd)\n\t(_mm_maskz_min_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminsd-2.c: New.\n\t* gcc.target/i386/avx512f-vminss-1.c (_mm_mask_min_round_ss)\n\t(_mm_maskz_min_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminss-2.c: New.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_maxsd_mask_round)\n\t(__builtin_ia32_maxss_mask_round, __builtin_ia32_minsd_mask_round)\n\t(__builtin_ia32_minss_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c (_mm_maskz_max_round_sd)\n\t(_mm_maskz_max_round_ss, _mm_maskz_min_round_sd)\n\t(_mm_maskz_min_round_ss, _mm_mask_max_round_sd)\n\t(_mm_mask_max_round_ss, _mm_mask_min_round_sd)\n\t(_mm_mask_min_round_ss): Test new intrinsics.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\n\t* gcc.target/i386/avx512f-vdivsd-1.c (_mm_mask_div_sd)\n\t(_mm_maskz_div_sd, _mm_mask_div_round_sd)\n\t(_mm_maskz_div_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vdivsd-2.c: New.\n\t* gcc.target/i386/avx512f-vdivss-1.c (_mm_mask_div_ss)\n\t(_mm_maskz_div_ss, _mm_mask_div_round_ss)\n\t(_mm_maskz_div_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vdivss-2.c: New.\n\t* gcc.target/i386/avx512f-vmulsd-1.c (_mm_mask_mul_sd)\n\t(_mm_maskz_mul_sd, _mm_mask_mul_round_sd)\n\t(_mm_maskz_mul_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmulsd-2.c: New.\n\t* gcc.target/i386/avx512f-vmulss-1.c (_mm_mask_mul_ss)\n\t(_mm_maskz_mul_ss, _mm_mask_mul_round_ss)\n\t(_mm_maskz_mul_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmulss-2.c: New.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_divsd_mask_round)\n\t(__builtin_ia32_divss_mask_round, __builtin_ia32_mulsd_mask_round)\n\t(__builtin_ia32_mulss_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c (_mm_maskz_div_round_sd)\n\t(_mm_maskz_div_round_ss, _mm_maskz_mul_round_sd)\n\t(_mm_maskz_mul_round_ss): Test new intrinsics.\n\t* gcc.target/i386/testround-1.c: Ditto.\n\n\t* gcc.target/i386/avx-vinsertf128-256-1: Test new intrinsics.\n\t* gcc.target/i386/avx-vinsertf128-256-2: Ditto.\n\t* gcc.target/i386/avx-vinsertf128-256-3: Ditto.\n\n\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Test new intrinsics.\n\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n\nFrom-SVN: r247851", "tree": {"sha": "17a43dc5d1de90235a33690fe3f44c7000235471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17a43dc5d1de90235a33690fe3f44c7000235471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ee3a9e2ab62e99346ee286be1d10701122c03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ee3a9e2ab62e99346ee286be1d10701122c03b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ee3a9e2ab62e99346ee286be1d10701122c03b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ee3a9e2ab62e99346ee286be1d10701122c03b/comments", "author": null, "committer": null, "parents": [{"sha": "6071bbaa09dec3ecc7a71a19a83c3d649eb9cec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071bbaa09dec3ecc7a71a19a83c3d649eb9cec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6071bbaa09dec3ecc7a71a19a83c3d649eb9cec3"}], "stats": {"total": 1345, "additions": 1317, "deletions": 28}, "files": [{"sha": "ce8351445bf76e2e4cf6fb310422347a48f17b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,3 +1,64 @@\n+2017-05-10  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_max_round_sd)\n+\t(_mm_maskz_max_round_sd, _mm_mask_max_round_ss)\n+\t(_mm_maskz_max_round_ss, _mm_mask_min_round_sd)\n+\t(_mm_maskz_min_round_sd, _mm_mask_min_round_ss)\n+\t(_mm_maskz_min_round_ss): New intrinsics.\n+\t* config/i386/i386-builtin-types.def (V2DF, V2DF, V2DF, V2DF, UQI, INT)\n+\t(V4SF, V4SF, V4SF, V4SF, UQI, INT): New function type aliases.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_maxsd_mask_round)\n+\t(__builtin_ia32_maxss_mask_round, __builtin_ia32_minsd_mask_round)\n+\t(__builtin_ia32_minss_mask_round): New builtins.\n+\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n+\t* config/i386/sse.md (<sse>_vm<code><mode>3<round_saeonly_name>):\n+\tRename to ...\n+\t(<sse>_vm<code><mode>3<mask_name><round_saeonly_name>): ... this.\n+\t(v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %<iptr>2<round_saeonly_op3>}):\n+\tChange to ...\n+\t(v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}):\n+\t... this.\n+\n+2017-05-10  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_mul_round_sd)\n+\t(_mm_maskz_mul_round_sd, _mm_mask_mul_round_ss)\n+\t(_mm_maskz_mul_round_ss, _mm_mask_div_round_sd)\n+\t(_mm_maskz_div_round_sd, _mm_mask_div_round_ss)\n+\t(_mm_maskz_div_round_ss, _mm_mask_mul_sd, _mm_maskz_mul_sd)\n+\t(_mm_mask_mul_ss, _mm_maskz_mul_ss, _mm_mask_div_sd)\n+\t(_mm_maskz_div_sd, _mm_mask_div_ss, _mm_maskz_div_ss): New intrinsics.\n+\t* config/i386/i386-builtin-types.def (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): New function type aliases.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_divsd_mask_round)\n+\t(__builtin_ia32_divss_mask_round, __builtin_ia32_mulsd_mask_round)\n+\t(__builtin_ia32_mulss_mask_round): New builtins.\n+\t* config/i386/i386.c (V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+\t(V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT): Handle new types.\n+\t* config/i386/sse.md (<sse>_vm<multdiv_mnemonic><mode>3<round_name>):\n+\tRename to ...\n+\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>): ... this.\n+\t(v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}):\n+\tChange to ...\n+\t(v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}):\n+\t... this.\n+\n+2017-05-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avxintrin.h (_mm256_set_m128, _mm256_set_m128d)\n+\t(_mm256_set_m128i, _mm256_setr_m128, _mm256_setr_m128d)\n+\t(_mm256_setr_m128i): New intrinsics.\n+\n+2017-05-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_rcp14_sd)\n+\t(_mm_maskz_rcp14_sd, _mm_mask_rcp14_ss)\n+\t(_mm_maskz_rcp14_ss): New intrinsics.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_rcp14sd_mask)\n+\t(__builtin_ia32_rcp14ss_mask): New builtins.\n+\t* config/i386/sse.md (srcp14<mode>_mask): New pattern.\n+\n 2017-05-10  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR tree-optimization/51513"}, {"sha": "7ac7cb6e8366b0b5832948d275d8c8319cba36ea", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 374, "deletions": 4, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1729,6 +1729,26 @@ _mm_rcp14_sd (__m128d __A, __m128d __B)\n \t\t\t\t\t   (__v2df) __A);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp14_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_rcp14sd_mask ((__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __A,\n+\t\t\t\t\t\t(__v2df) __W,\n+\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp14_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_rcp14sd_mask ((__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __A,\n+\t\t\t\t\t\t(__v2df) _mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp14_ss (__m128 __A, __m128 __B)\n@@ -1737,6 +1757,26 @@ _mm_rcp14_ss (__m128 __A, __m128 __B)\n \t\t\t\t\t  (__v4sf) __A);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp14_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp14_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_rcp14ss_mask ((__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) _mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt14_pd (__m512d __A)\n@@ -2520,6 +2560,29 @@ _mm_mul_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_mulsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_mulsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mul_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -2529,6 +2592,29 @@ _mm_mul_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_mulss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_mulss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_div_round_sd (__m128d __A, __m128d __B, const int __R)\n@@ -2538,6 +2624,29 @@ _mm_div_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_divsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_divsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_div_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -2547,6 +2656,29 @@ _mm_div_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_divss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_divss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n #else\n #define _mm512_mul_round_pd(A, B, C)            \\\n     (__m512d)__builtin_ia32_mulpd512_mask(A, B, (__v8df)_mm512_undefined_pd(), -1, C)\n@@ -2587,14 +2719,39 @@ _mm_div_round_ss (__m128 __A, __m128 __B, const int __R)\n #define _mm_mul_round_sd(A, B, C)            \\\n     (__m128d)__builtin_ia32_mulsd_round(A, B, C)\n \n+#define _mm_mask_mul_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_mulsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_mul_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_mulsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n+\n #define _mm_mul_round_ss(A, B, C)            \\\n     (__m128)__builtin_ia32_mulss_round(A, B, C)\n \n+#define _mm_mask_mul_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_mulss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_mul_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_mulss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #define _mm_div_round_sd(A, B, C)            \\\n     (__m128d)__builtin_ia32_divsd_round(A, B, C)\n \n+#define _mm_mask_div_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_divsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_div_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_divsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n+\n #define _mm_div_round_ss(A, B, C)            \\\n     (__m128)__builtin_ia32_divss_round(A, B, C)\n+\n+#define _mm_mask_div_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_divss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_div_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_divss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #endif\n \n #ifdef __OPTIMIZE__\n@@ -10657,6 +10814,29 @@ _mm_max_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_maxsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_maxsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_max_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -10666,6 +10846,29 @@ _mm_max_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_maxss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_maxss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_min_round_sd (__m128d __A, __m128d __B, const int __R)\n@@ -10675,6 +10878,29 @@ _mm_min_round_sd (__m128d __A, __m128d __B, const int __R)\n \t\t\t\t\t       __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_minsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128d) __builtin_ia32_minsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_min_round_ss (__m128 __A, __m128 __B, const int __R)\n@@ -10684,18 +10910,66 @@ _mm_min_round_ss (__m128 __A, __m128 __B, const int __R)\n \t\t\t\t\t      __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_minss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128) __builtin_ia32_minss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n #else\n #define _mm_max_round_sd(A, B, C)            \\\n-    (__m128d)__builtin_ia32_addsd_round(A, B, C)\n+    (__m128d)__builtin_ia32_maxsd_round(A, B, C)\n+\n+#define _mm_mask_max_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_maxsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_max_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_maxsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n \n #define _mm_max_round_ss(A, B, C)            \\\n-    (__m128)__builtin_ia32_addss_round(A, B, C)\n+    (__m128)__builtin_ia32_maxss_round(A, B, C)\n+\n+#define _mm_mask_max_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_maxss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_max_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_maxss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n \n #define _mm_min_round_sd(A, B, C)            \\\n-    (__m128d)__builtin_ia32_subsd_round(A, B, C)\n+    (__m128d)__builtin_ia32_minsd_round(A, B, C)\n+\n+#define _mm_mask_min_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_minsd_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_min_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_minsd_mask_round(A, B, (__v2df)_mm_setzero_pd(), U, C)\n \n #define _mm_min_round_ss(A, B, C)            \\\n-    (__m128)__builtin_ia32_subss_round(A, B, C)\n+    (__m128)__builtin_ia32_minss_round(A, B, C)\n+\n+#define _mm_mask_min_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_minss_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_min_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_minss_mask_round(A, B, (__v4sf)_mm_setzero_ps(), U, C)\n+\n #endif\n \n extern __inline __m512d\n@@ -11197,6 +11471,54 @@ _mm512_maskz_mul_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_mulsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_mulsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_mulss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_mulss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_div_pd (__m512d __M, __m512d __V)\n@@ -11257,6 +11579,54 @@ _mm512_maskz_div_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_divsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_divsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_divss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_divss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__v4sf)\n+\t\t\t\t\t\t _mm_setzero_ps (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_max_pd (__m512d __A, __m512d __B)"}, {"sha": "678368c7d784a479c38f76def18920dbd0107dd6", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1484,6 +1484,42 @@ _mm256_castsi128_si256 (__m128i __A)\n   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);\n }\n \n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set_m128 ( __m128 __H, __m128 __L)\n+{\n+  return _mm256_insertf128_ps (_mm256_castps128_ps256 (__L), __H, 1);\n+}\n+\n+extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set_m128d (__m128d __H, __m128d __L)\n+{\n+  return _mm256_insertf128_pd (_mm256_castpd128_pd256 (__L), __H, 1);\n+}\n+\n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_set_m128i (__m128i __H, __m128i __L)\n+{\n+  return _mm256_insertf128_si256 (_mm256_castsi128_si256 (__L), __H, 1);\n+}\n+\n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_setr_m128 (__m128 __L, __m128 __H)\n+{\n+  return _mm256_set_m128 (__H, __L);\n+}\n+\n+extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_setr_m128d (__m128d __L, __m128d __H)\n+{\n+  return _mm256_set_m128d (__H, __L);\n+}\n+\n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_setr_m128i (__m128i __L, __m128i __H)\n+{\n+  return _mm256_set_m128i (__H, __L);\n+}\n+\n #ifdef __DISABLE_AVX__\n #undef __DISABLE_AVX__\n #pragma GCC pop_options"}, {"sha": "80ee7e10d9db4e2b7507dddac6962b4337a81e04", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1371,7 +1371,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_xorv8di3_mask, \"__builtin_ia32_pxorq512\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_rcp14v8df_mask, \"__builtin_ia32_rcp14pd512_mask\", IX86_BUILTIN_RCP14PD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_rcp14v16sf_mask, \"__builtin_ia32_rcp14ps512_mask\", IX86_BUILTIN_RCP14PS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v2df, \"__builtin_ia32_rcp14sd\", IX86_BUILTIN_RCP14SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v2df_mask, \"__builtin_ia32_rcp14sd_mask\", IX86_BUILTIN_RCP14SDMASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v4sf, \"__builtin_ia32_rcp14ss\", IX86_BUILTIN_RCP14SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v4sf_mask, \"__builtin_ia32_rcp14ss_mask\", IX86_BUILTIN_RCP14SSMASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v8df_mask, \"__builtin_ia32_rsqrt14pd512_mask\", IX86_BUILTIN_RSQRT14PD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v16sf_mask, \"__builtin_ia32_rsqrt14ps512_mask\", IX86_BUILTIN_RSQRT14PS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v2df, \"__builtin_ia32_rsqrt14sd\", IX86_BUILTIN_RSQRT14SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n@@ -2420,7 +2422,9 @@ BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_cvtusi2ss64_rou\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_divv8df3_mask_round, \"__builtin_ia32_divpd512_mask\", IX86_BUILTIN_DIVPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_divv16sf3_mask_round, \"__builtin_ia32_divps512_mask\", IX86_BUILTIN_DIVPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmdivv2df3_round, \"__builtin_ia32_divsd_round\", IX86_BUILTIN_DIVSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmdivv2df3_mask_round, \"__builtin_ia32_divsd_mask_round\", IX86_BUILTIN_DIVSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmdivv4sf3_round, \"__builtin_ia32_divss_round\", IX86_BUILTIN_DIVSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmdivv4sf3_mask_round, \"__builtin_ia32_divss_mask_round\", IX86_BUILTIN_DIVSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_mask_round, \"__builtin_ia32_fixupimmpd512_mask\", IX86_BUILTIN_FIXUPIMMPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_maskz_round, \"__builtin_ia32_fixupimmpd512_maskz\", IX86_BUILTIN_FIXUPIMMPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_mask_round, \"__builtin_ia32_fixupimmps512_mask\", IX86_BUILTIN_FIXUPIMMPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT)\n@@ -2440,15 +2444,21 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vgetmantv4sf_round, \"__builtin_\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv8df3_mask_round, \"__builtin_ia32_maxpd512_mask\", IX86_BUILTIN_MAXPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv16sf3_mask_round, \"__builtin_ia32_maxps512_mask\", IX86_BUILTIN_MAXPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsmaxv2df3_round, \"__builtin_ia32_maxsd_round\", IX86_BUILTIN_MAXSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsmaxv2df3_mask_round, \"__builtin_ia32_maxsd_mask_round\", IX86_BUILTIN_MAXSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsmaxv4sf3_round, \"__builtin_ia32_maxss_round\", IX86_BUILTIN_MAXSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsmaxv4sf3_mask_round, \"__builtin_ia32_maxss_mask_round\", IX86_BUILTIN_MAXSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sminv8df3_mask_round, \"__builtin_ia32_minpd512_mask\", IX86_BUILTIN_MINPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sminv16sf3_mask_round, \"__builtin_ia32_minps512_mask\", IX86_BUILTIN_MINPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsminv2df3_round, \"__builtin_ia32_minsd_round\", IX86_BUILTIN_MINSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsminv2df3_mask_round, \"__builtin_ia32_minsd_mask_round\", IX86_BUILTIN_MINSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsminv4sf3_round, \"__builtin_ia32_minss_round\", IX86_BUILTIN_MINSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsminv4sf3_mask_round, \"__builtin_ia32_minss_mask_round\", IX86_BUILTIN_MINSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_mulv8df3_mask_round, \"__builtin_ia32_mulpd512_mask\", IX86_BUILTIN_MULPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_mulv16sf3_mask_round, \"__builtin_ia32_mulps512_mask\", IX86_BUILTIN_MULPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmmulv2df3_round, \"__builtin_ia32_mulsd_round\", IX86_BUILTIN_MULSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmmulv2df3_mask_round, \"__builtin_ia32_mulsd_mask_round\", IX86_BUILTIN_MULSD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmmulv4sf3_round, \"__builtin_ia32_mulss_round\", IX86_BUILTIN_MULSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmmulv4sf3_mask_round, \"__builtin_ia32_mulss_mask_round\", IX86_BUILTIN_MULSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev8df_mask_round, \"__builtin_ia32_rndscalepd_mask\", IX86_BUILTIN_RNDSCALEPD, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev16sf_mask_round, \"__builtin_ia32_rndscaleps_mask\", IX86_BUILTIN_RNDSCALEPS, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev2df_round, \"__builtin_ia32_rndscalesd_round\", IX86_BUILTIN_RNDSCALESD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT)"}, {"sha": "a118fcea520aafe9e7f6b5c129513a0718b7c460", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1608,7 +1608,7 @@\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<round_name>\"\n+(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (multdiv:VF_128\n@@ -1619,7 +1619,7 @@\n   \"TARGET_SSE\"\n   \"@\n    <multdiv_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}\"\n+   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse<multdiv_mnemonic>\")\n    (set_attr \"prefix\" \"<round_prefix>\")\n@@ -1721,6 +1721,23 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"srcp14<mode>_mask\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (unspec:VF_128\n+\t      [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_RCP14)\n+\t      (match_operand:VF_128 3 \"vector_move_operand\" \"0C\")\n+\t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+\t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vrcp14<ssescalarmodesuffix>\\t{%1, %2, %0%{%4%}%N3|%0%{%4%}%N3, %2, %<iptr>1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF2 0 \"register_operand\")\n \t(sqrt:VF2 (match_operand:VF2 1 \"vector_operand\")))]\n@@ -1910,7 +1927,7 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<code><mode>3<round_saeonly_name>\"\n+(define_insn \"<sse>_vm<code><mode>3<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (smaxmin:VF_128\n@@ -1921,7 +1938,7 @@\n   \"TARGET_SSE\"\n   \"@\n    <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %<iptr>2<round_saeonly_op3>}\"\n+   v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %<iptr>2<round_saeonly_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")"}, {"sha": "57545d795f02525223660bd9e52358f966c21895", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,3 +1,70 @@\n+2017-05-10  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vmaxsd-1.c (_mm_mask_max_round_sd)\n+\t(_mm_maskz_max_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmaxsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vmaxss-1.c (_mm_mask_max_round_ss)\n+\t(_mm_maskz_max_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmaxss-2.c: New.\n+\t* gcc.target/i386/avx512f-vminsd-1.c (_mm_mask_min_round_sd)\n+\t(_mm_maskz_min_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vminss-1.c (_mm_mask_min_round_ss)\n+\t(_mm_maskz_min_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminss-2.c: New.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_maxsd_mask_round)\n+\t(__builtin_ia32_maxss_mask_round, __builtin_ia32_minsd_mask_round)\n+\t(__builtin_ia32_minss_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c (_mm_maskz_max_round_sd)\n+\t(_mm_maskz_max_round_ss, _mm_maskz_min_round_sd)\n+\t(_mm_maskz_min_round_ss, _mm_mask_max_round_sd)\n+\t(_mm_mask_max_round_ss, _mm_mask_min_round_sd)\n+\t(_mm_mask_min_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\n+2017-05-10  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vdivsd-1.c (_mm_mask_div_sd)\n+\t(_mm_maskz_div_sd, _mm_mask_div_round_sd)\n+\t(_mm_maskz_div_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vdivsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vdivss-1.c (_mm_mask_div_ss)\n+\t(_mm_maskz_div_ss, _mm_mask_div_round_ss)\n+\t(_mm_maskz_div_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vdivss-2.c: New.\n+\t* gcc.target/i386/avx512f-vmulsd-1.c (_mm_mask_mul_sd)\n+\t(_mm_maskz_mul_sd, _mm_mask_mul_round_sd)\n+\t(_mm_maskz_mul_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmulsd-2.c: New.\n+\t* gcc.target/i386/avx512f-vmulss-1.c (_mm_mask_mul_ss)\n+\t(_mm_maskz_mul_ss, _mm_mask_mul_round_ss)\n+\t(_mm_maskz_mul_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmulss-2.c: New.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_divsd_mask_round)\n+\t(__builtin_ia32_divss_mask_round, __builtin_ia32_mulsd_mask_round)\n+\t(__builtin_ia32_mulss_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c (_mm_maskz_div_round_sd)\n+\t(_mm_maskz_div_round_ss, _mm_maskz_mul_round_sd)\n+\t(_mm_maskz_mul_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/testround-1.c: Ditto.\n+\n+2017-05-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx-vinsertf128-256-1: Test new intrinsics.\n+\t* gcc.target/i386/avx-vinsertf128-256-2: Ditto.\n+\t* gcc.target/i386/avx-vinsertf128-256-3: Ditto.\n+\n+2017-05-10  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n+\n 2017-05-10  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR tree-optimization/51513"}, {"sha": "8377555f81532d7e0ce90e6fe304b461ca73d1a1", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -207,7 +207,9 @@\n #define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 8)\n+#define __builtin_ia32_divsd_mask_round(A, B, C, D, E) __builtin_ia32_divsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 8)\n+#define __builtin_ia32_divss_mask_round(A, B, C, D, E) __builtin_ia32_divss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n@@ -243,15 +245,21 @@\n #define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n+#define __builtin_ia32_maxsd_mask_round(A, B, C, D, E) __builtin_ia32_maxsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n+#define __builtin_ia32_maxss_mask_round(A, B, C, D, E) __builtin_ia32_maxss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n+#define __builtin_ia32_minsd_mask_round(A, B, C, D, E) __builtin_ia32_minsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n+#define __builtin_ia32_minss_mask_round(A, B, C, D, E) __builtin_ia32_minss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 8)\n+#define __builtin_ia32_mulsd_mask_round(A, B, C, D, E) __builtin_ia32_mulsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 8)\n+#define __builtin_ia32_mulss_mask_round(A, B, C, D, E) __builtin_ia32_mulss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)"}, {"sha": "a255c47826d756dd13ffce01b83458474d127ff1", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-1.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -16,8 +16,8 @@ void static\n avx_test (void)\n {\n   int i;\n-  union256d u, s1;\n-  union128d s2;\n+  union256d u, u2, u3, s1;\n+  union128d s2, s3;\n   double e [4];\n \n   s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);\n@@ -29,7 +29,23 @@ avx_test (void)\n \n   for (i=0; i < 2; i++)\n     e[i + (OFFSET * 2)] = s2.a[i];\n-\n+ \n   if (check_union256d (u, e))\n     abort ();\n+\n+  s3.x = _mm_set_pd (435345.43535, 23235.316545);\n+  u2.x = _mm256_set_m128d(s3.x, s2.x);\n+  u3.x = _mm256_setr_m128d(s2.x, s3.x);\n+\n+  for (i = 0; i < 2; i++)\n+    e[i] = s2.a[i];\n+\n+  for (i = 0; i < 2; i++)\n+    e[i + 2] = s3.a[i];\n+\n+  if (check_union256d (u2, e))\n+    abort ();\n+\n+  if (check_union256d (u3, e))\n+    abort ();\n }"}, {"sha": "edae309dd00a5bf018fc3744c63a2d5d56686ba7", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-2.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -16,8 +16,8 @@ void static\n avx_test (void)\n {\n   int i;\n-  union256 u, s1;\n-  union128 s2;\n+  union256 u, u2, u3, s1;\n+  union128 s2, s3;\n   float e [8];\n \n   s1.x = _mm256_set_ps (39.467, 45.789, 78.342, 67.892, 76.678, 12.963, 29.746, 24.753);\n@@ -32,4 +32,20 @@ avx_test (void)\n \n   if (check_union256 (u, e))\n     abort ();\n+\n+  s3.x = _mm_set_ps (435.435, 25.35, 324.76, 32.11);\n+  u2.x = _mm256_set_m128(s3.x, s2.x);\n+  u3.x = _mm256_setr_m128(s2.x, s3.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s2.a[i];\n+\n+  for (i = 0; i < 4; i++)\n+    e[i + 4] = s3.a[i];\n+\n+  if (check_union256 (u2, e))\n+    abort ();\n+\n+  if (check_union256 (u3, e))\n+    abort ();\n }"}, {"sha": "33986929e8d6f4f7f7a6b80752c7a48ab9b16be5", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertf128-256-3.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertf128-256-3.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -16,8 +16,8 @@ void static\n avx_test (void)\n {\n   int i;\n-  union256i_d u, s1;\n-  union128i_d s2;\n+  union256i_d u, u2, u3, s1;\n+  union128i_d s2, s3;\n   int e [8];\n \n   s1.x = _mm256_set_epi32 (39467, 45789, 78342, 67892, 76678, 12963, 29746, 24753);\n@@ -32,4 +32,20 @@ avx_test (void)\n \n   if (check_union256i_d (u, e))\n     abort ();\n+\n+  s3.x = _mm_set_epi32 (43534, 23235, 6545, 11);\n+  u2.x = _mm256_set_m128i(s3.x, s2.x);\n+  u3.x = _mm256_setr_m128i(s2.x, s3.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s2.a[i];\n+\n+  for (i = 0; i < 4; i++)\n+    e[i + 4] = s3.a[i];\n+\n+  if (check_union256i_d (u2, e))\n+    abort ();\n+\n+  if (check_union256i_d (u3, e))\n+    abort ();\n }"}, {"sha": "59262550a546a1de2d4d40c7b8cdbd99b21e7e56", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivsd-1.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,14 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_div_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_div_sd (m, x1, x2);\n   x1 = _mm_div_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_div_round_sd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_div_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "5aa1617b213c257f29763136e62f44d8f5e2e03d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivsd-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_div (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] / s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_div_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_div_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_div_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_div_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_div_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "7468ac1d01e82c7f3a11eba859d616c01bbe79f3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_div_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_div_ss (m, x1, x2);\n   x1 = _mm_div_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_div_round_ss (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_div_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "577208430d557afe53d057a0483154c16800aefe", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivss-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_div (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] / s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_div_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_div_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_div_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_div_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_div_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_div (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "c1c8f8d9fc69be935824560f095ec8cd97f78998", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_max_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_max_round_sd (x1, m, x2, x3,  _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_max_round_sd (m, x1, x2, _MM_FROUND_NO_EXC);\n }"}, {"sha": "29db77723b13925a1ec18c0e527cfc2217d56583", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_max (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] > s2[0] ? s1[0] : s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+      res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_max_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_max_round_sd (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_max_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "ecd87578252f172bee30ea8ddeb8d2ea655e2213", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_max_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_max_round_ss (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_max_round_ss (m, x1, x2, _MM_FROUND_NO_EXC);\n }"}, {"sha": "1932a6e5c80159666a7de8342c10a90ea75b366f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_max (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] > s2[0] ? s1[0] : s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+      res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_max_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_max_round_ss (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_max_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "22ada8776ad7562b828aacf7df5de734b2582501", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_min_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_min_round_sd (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_min_round_sd (m, x1, x2, _MM_FROUND_NO_EXC);\n }"}, {"sha": "79a051fb9c12e6a34cb7c49803c0959f9af3a8d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_min (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] < s2[0] ? s1[0] : s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+      res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_min_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_min_round_sd (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_min_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "5703a88d7da11cc01ae440da8ba028338002a9b2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_min_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_min_round_ss (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_min_round_ss (m, x1, x2, _MM_FROUND_NO_EXC);\n }"}, {"sha": "ad1fcb937fef4a8cd7ce81c9fb65ca825194a449", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_min (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] < s2[0] ? s1[0] : s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+      res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_min_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_min_round_ss (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_min_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "33bdce1f148ccae364f2b1806386638a9cf903ab", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulsd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_mul_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_mul_sd (m, x1, x2);\n   x1 = _mm_mul_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_mul_round_sd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_mul_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "9a139e642de22c0058a0920c79860dae9b54827c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulsd-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_mul (double *r, double *s1, double *s2)\n+{\n+  r[0] = s1[0] * s2[0];\n+  r[1] = s1[1];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_mul_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_mul_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_mul_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_mul_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_mul_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "a869d967b0935d6691e79e5b1ed5abc4e752cc7c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_mul_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_mul_ss (m, x1, x2);\n   x1 = _mm_mul_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_mul_round_ss (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_mul_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "29dc3bf367d98a6baf6eba1521de5d9dd35492d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulss-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_mul (float *r, float *s1, float *s2)\n+{\n+  r[0] = s1[0] * s2[0];\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + 34.67 * i * sign;\n+      src2.a[i] = -22.17 * i * sign + 1.0;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_mask_mul_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_mul_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_mul_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_mul_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_mul_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_mul (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res3, res_ref))\n+    abort();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "7b322f2d75ce602d96978dbc7872ce2e23941d40", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vrcp14sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp14sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp14sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_rcp14_sd (x1, x2);\n+  x1 = _mm_mask_rcp14_sd (x3, m, x1, x2);\n+  x1 = _mm_maskz_rcp14_sd (m, x1, x2);\n }"}, {"sha": "1059c87105ba6c354c6c0e19569e0c4cd45c49e2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-2.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -3,6 +3,7 @@\n /* { dg-require-effective-target avx512f } */\n \n #include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n \n static void\n compute_vrcp14sd (double *s1, double *s2, double *r)\n@@ -14,7 +15,8 @@ compute_vrcp14sd (double *s1, double *s2, double *r)\n static void\n avx512f_test (void)\n {\n-  union128d s1, s2, res1;\n+  union128d s1, s2, res1, res2, res3;\n+  __mmask8 m = 1;\n   double res_ref[2];\n \n   s1.x = _mm_set_pd (-3.0, 111.111);\n@@ -26,4 +28,17 @@ avx512f_test (void)\n \n   if (checkVd (res1.a, res_ref, 2))\n     abort ();\n+\n+  res2.x = _mm_set_pd (-4.0, DEFAULT_VALUE);\n+  res2.x = _mm_mask_rcp14_sd(res2.x, m, s1.x, s2.x);\n+ \n+  MASK_MERGE (d) (res_ref, m, 1);\n+  if (checkVd (res2.a, res_ref, 2))\n+    abort();\n+\n+  res3.x = _mm_maskz_rcp14_sd(m, s1.x, s2.x);\n+  \n+  MASK_ZERO (d) (res_ref, m, 1);\n+  if (checkVd (res3.a, res_ref, 2))\n+    abort();\n }"}, {"sha": "2edb4617e88714e89140f87b3994266baddc4bb8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vrcp14ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp14ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp14ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_rcp14_ss (x1, x2);\n+  x1 = _mm_mask_rcp14_ss (x3, m, x1, x2);\n+  x1 = _mm_maskz_rcp14_ss (m, x1, x2);\n }"}, {"sha": "6cf22967182e75609bbf0b2eeb0ee92900dea742", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-2.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -3,6 +3,7 @@\n /* { dg-require-effective-target avx512f } */\n \n #include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n \n static void\n compute_vrcp14ss (float *s1, float *s2, float *r)\n@@ -16,16 +17,31 @@ compute_vrcp14ss (float *s1, float *s2, float *r)\n static void\n avx512f_test (void)\n {\n-  union128 s1, s2, res1;\n+  union128 s1, s2, res1, res2, res3;\n   float res_ref[4];\n+  __mmask8 m = 0;\n \n   s1.x = _mm_set_ps (-24.043, 68.346, -43.35, 546.46);\n   s2.x = _mm_set_ps (222.222, 333.333, 444.444, -2.0);\n \n-  res1.x = _mm_rcp14_ss (s1.x, s2.x);\n+  res1.x = _mm_rcp14_ss (s1.x, s2.x); \n \n   compute_vrcp14ss (s1.a, s2.a, res_ref);\n \n   if (checkVf (res1.a, res_ref, 4))\n     abort ();\n+\n+  res2.x = _mm_set_ps (5.0, 6.0, 7.0, DEFAULT_VALUE);\n+  res2.x = _mm_mask_rcp14_ss(res2.x, m, s1.x, s2.x);\n+\n+  MASK_MERGE () (res_ref, m, 1);\n+  if (checkVf (res2.a, res_ref, 4))\n+    abort();\n+\n+  res3.x = _mm_maskz_rcp14_ss(m, s1.x, s2.x);\n+  \n+  MASK_ZERO () (res_ref, m, 1);\n+  if (checkVf (res3.a, res_ref, 4))\n+    abort();\n+\n }"}, {"sha": "79879d7cc162edeee4c312eea6b7f1a9162c7cec", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -224,7 +224,9 @@\n #define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 8)\n+#define __builtin_ia32_divsd_mask_round(A, B, C, D, E) __builtin_ia32_divsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 8)\n+#define __builtin_ia32_divss_mask_round(A, B, C, D, E) __builtin_ia32_divss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n@@ -260,15 +262,21 @@\n #define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n+#define __builtin_ia32_maxsd_mask_round(A, B, C, D, E) __builtin_ia32_maxsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n+#define __builtin_ia32_maxss_mask_round(A, B, C, D, E) __builtin_ia32_maxss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n+#define __builtin_ia32_minsd_mask_round(A, B, C, D, E) __builtin_ia32_minsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n+#define __builtin_ia32_minss_mask_round(A, B, C, D, E) __builtin_ia32_minss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 8)\n+#define __builtin_ia32_mulsd_mask_round(A, B, C, D, E) __builtin_ia32_mulsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 8)\n+#define __builtin_ia32_mulss_mask_round(A, B, C, D, E) __builtin_ia32_mulss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)"}, {"sha": "547314aef077f89255263a7effdc89b1406a3c69", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -383,17 +383,25 @@ test_3 (_mm_maskz_add_round_ss, __m128, __mmask8, __m128, __m128, 9)\n test_3 (_mm512_maskz_alignr_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_alignr_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm_maskz_div_round_sd, __m128d, __mmask8, __m128d, __m128d, 9)\n test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm_maskz_div_round_ss, __m128, __mmask8, __m128, __m128, 9)\n test_3 (_mm512_maskz_insertf32x4, __m512, __mmask16, __m512, __m128, 1)\n test_3 (_mm512_maskz_insertf64x4, __m512d, __mmask8, __m512d, __m256d, 1)\n test_3 (_mm512_maskz_inserti32x4, __m512i, __mmask16, __m512i, __m128i, 1)\n test_3 (_mm512_maskz_inserti64x4, __m512i, __mmask8, __m512i, __m256i, 1)\n test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm_maskz_max_round_sd, __m128d, __mmask8, __m128d, __m128d, 8)\n test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm_maskz_max_round_ss, __m128, __mmask8, __m128, __m128, 8)\n test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm_maskz_min_round_sd, __m128d, __mmask8, __m128d, __m128d, 8)\n test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm_maskz_min_round_ss, __m128, __mmask8, __m128, __m128, 8)\n test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm_maskz_mul_round_sd, __m128d, __mmask8, __m128d, __m128d, 9)\n test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm_maskz_mul_round_ss, __m128, __mmask8, __m128, __m128, 9)\n test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_shuffle_f32x4, __m512, __mmask16, __m512, __m512, 1)\n@@ -451,7 +459,9 @@ test_4 (_mm_mask_add_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n test_4 (_mm512_mask_alignr_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_alignr_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm_mask_div_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm_mask_div_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n@@ -477,11 +487,17 @@ test_4 (_mm512_mask_insertf64x4, __m512d, __m512d, __mmask8, __m512d, __m256d, 1\n test_4 (_mm512_mask_inserti32x4, __m512i, __m512i, __mmask16, __m512i, __m128i, 1)\n test_4 (_mm512_mask_inserti64x4, __m512i, __m512i, __mmask8, __m512i, __m256i, 1)\n test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm_mask_max_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 8)\n test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm_mask_max_round_ss, __m128, __m128, __mmask8, __m128, __m128, 8)\n test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm_mask_min_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 8)\n test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm_mask_min_round_ss, __m128, __m128, __mmask8, __m128, __m128, 8)\n test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm_mask_mul_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm_mask_mul_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_shuffle_f32x4, __m512, __m512, __mmask16, __m512, __m512, 1)"}, {"sha": "96c663b64d33949b72ee3923f4b90018f279a21b", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -225,7 +225,9 @@\n #define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 8)\n+#define __builtin_ia32_divsd_mask_round(A, B, C, D, E) __builtin_ia32_divsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 8)\n+#define __builtin_ia32_divss_mask_round(A, B, C, D, E) __builtin_ia32_divss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n@@ -261,15 +263,21 @@\n #define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n+#define __builtin_ia32_maxsd_mask_round(A, B, C, D, E) __builtin_ia32_maxsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n+#define __builtin_ia32_maxss_mask_round(A, B, C, D, E) __builtin_ia32_maxss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n+#define __builtin_ia32_minsd_mask_round(A, B, C, D, E) __builtin_ia32_minsd_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n+#define __builtin_ia32_minss_mask_round(A, B, C, D, E) __builtin_ia32_minss_mask_round(A, B, C, D, 4)\n #define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 8)\n+#define __builtin_ia32_mulsd_mask_round(A, B, C, D, E) __builtin_ia32_mulsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 8)\n+#define __builtin_ia32_mulss_mask_round(A, B, C, D, E) __builtin_ia32_mulss_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)"}, {"sha": "2c1338164f5c2c235ecb8882c44e526baf57d152", "filename": "gcc/testsuite/gcc.target/i386/testround-1.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ee3a9e2ab62e99346ee286be1d10701122c03b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c?ref=f4ee3a9e2ab62e99346ee286be1d10701122c03b", "patch": "@@ -67,9 +67,17 @@ test_round (void)\n   m512 = _mm512_mask_div_round_ps (m512, mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_div_round_ps (mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_mul_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_mul_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_mul_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_mul_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_mul_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_mul_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_div_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_div_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_div_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_div_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_div_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_div_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_scalef_round_pd(m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_scalef_round_pd(m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -179,12 +187,24 @@ test_round (void)\n   m512 = _mm512_max_round_ps (m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_max_round_ps (m512, mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_max_round_ps (mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_max_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_max_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_max_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_max_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_max_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_max_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_min_round_pd (m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_min_round_pd (m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_min_round_pd (mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_min_round_ps (m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_min_round_ps (m512, mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_min_round_ps (mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_min_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_min_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_min_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_min_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_min_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_min_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m256i = _mm512_cvtt_roundpd_epi32 (m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m256i = _mm512_mask_cvtt_roundpd_epi32 (m256i, mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -318,9 +338,17 @@ test_round_sae (void)\n   m512 = _mm512_mask_div_round_ps (m512, mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_div_round_ps (mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_mul_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_mul_round_sd (m128d, mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_mul_round_sd (mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_mul_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_mul_round_ss (m128, mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_mul_round_ss (mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128d = _mm_div_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_div_round_sd (m128d, mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_div_round_sd (mmask8, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m128 = _mm_div_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_div_round_ss (m128, mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_div_round_ss (mmask8, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_scalef_round_pd(m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_scalef_round_pd(m512d, mmask8, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n@@ -434,12 +462,24 @@ test_sae_only (void)\n   m512 = _mm512_max_round_ps (m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_max_round_ps (m512, mmask16, m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_max_round_ps (mmask16, m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_max_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_max_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_max_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_max_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_max_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_max_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_min_round_pd (m512d, m512d, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_min_round_pd (m512d, mmask8, m512d, m512d, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_min_round_pd (mmask8, m512d, m512d, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_min_round_ps (m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_min_round_ps (m512, mmask16, m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_min_round_ps (mmask16, m512, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_min_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mask_min_round_sd (m128d, mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_maskz_min_round_sd (mmask8, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_min_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mask_min_round_ss (m128, mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_maskz_min_round_ss (mmask8, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m256i = _mm512_cvtt_roundpd_epi32 (m512d, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m256i = _mm512_mask_cvtt_roundpd_epi32 (m256i, mmask8, m512d, 3); /* { dg-error \"incorrect rounding operand\" } */"}]}