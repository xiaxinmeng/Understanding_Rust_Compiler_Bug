{"sha": "12bcfaa1cb344664bb0123afb3d044b7752dbab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiY2ZhYTFjYjM0NDY2NGJiMDEyM2FmYjNkMDQ0Yjc3NTJkYmFiNQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-03-05T19:56:31Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-03-05T19:56:31Z"}, "message": "c-tree.texi: Wrap comments in @r{}.\n\n2005-03-05  James A. Morrison  <phython@gcc.gnu.org>\n\n        * doc/c-tree.texi: Wrap comments in @r{}.\n        * doc/cpp.texi: Likewise.\n        * doc/cppinternals.texi: Likewise.\n        * doc/extend.texi: Likewise.\n        * doc/md.texi: Likewise.\n        * doc/objc.texi: Likewise.\n        * doc/sourcebuild.texi: Likewise.\n        * doc/tm.texi: Likewise.\n        * doc/tree-ssa.texi\n\nFrom-SVN: r95939", "tree": {"sha": "b9beec9e3689347979214c95549da0dcc4dd9152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9beec9e3689347979214c95549da0dcc4dd9152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12bcfaa1cb344664bb0123afb3d044b7752dbab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bcfaa1cb344664bb0123afb3d044b7752dbab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bcfaa1cb344664bb0123afb3d044b7752dbab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bcfaa1cb344664bb0123afb3d044b7752dbab5/comments", "author": null, "committer": null, "parents": [{"sha": "0aee4751507604a7a7f9367cd0a515c543ae4d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aee4751507604a7a7f9367cd0a515c543ae4d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aee4751507604a7a7f9367cd0a515c543ae4d2f"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "6e8b77fc0243d425c47dc08d1ed9a37bb9b02a2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -1,3 +1,15 @@\n+2005-03-05  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* doc/c-tree.texi: Wrap comments in @r{}.\n+\t* doc/cpp.texi: Likewise.\n+\t* doc/cppinternals.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/objc.texi: Likewise.\n+\t* doc/sourcebuild.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tree-ssa.texi\n+\n 2005-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* predict.c (apply_return_prediction): Standardize PHI chain"}, {"sha": "a6033f16256856f12e2c4bc7cbb815366b6d272d", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -1363,7 +1363,7 @@ void process_stmt (stmt)\n         @{\n         case IF_STMT:\n           process_stmt (THEN_CLAUSE (stmt));\n-          /* More processing here.  */\n+          /* @r{More processing here.}  */\n           break;\n \n         @dots{}"}, {"sha": "e6a7dcd06eb6b71905f5494d99db36b0b22d08cc", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -1318,7 +1318,7 @@ name, and you wish to use the function sometimes.\n \n @smallexample\n extern void foo(void);\n-#define foo() /* optimized inline version */\n+#define foo() /* @r{optimized inline version} */\n @dots{}\n   foo();\n   funcptr = foo;\n@@ -2211,7 +2211,7 @@ These definitions are effectively the same:\n @smallexample\n #define FOUR (2 + 2)\n #define FOUR         (2    +    2)\n-#define FOUR (2 /* two */ + 2)\n+#define FOUR (2 /* @r{two} */ + 2)\n @end smallexample\n @noindent\n but these are not:\n@@ -3538,8 +3538,8 @@ require matching quotes.  For example:\n @smallexample\n #define m This macro's fine and has an unmatched quote\n \"/* This is not a comment.  */\n-/* This is a comment.  The following #include directive\n-   is ill-formed.  */\n+/* @r{This is a comment.  The following #include directive\n+   is ill-formed.}  */\n #include <stdio.h\n @end smallexample\n \n@@ -3626,7 +3626,7 @@ example\n \n @smallexample\n #define str(x) \"x\"\n-str(/* A comment */some text )\n+str(/* @r{A comment} */some text )\n      @expansion{} \"some text \"\n @end smallexample\n "}, {"sha": "13db034b0ca42f09a5b40c1f903a325e24175c19", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -789,8 +789,8 @@ lexed on if, for example, there are intervening escaped newlines or\n C-style comments.  For example:\n \n @smallexample\n-foo /* A long\n-comment */ bar \\\n+foo /* @r{A long\n+comment} */ bar \\\n baz\n @result{}\n foo bar baz"}, {"sha": "3b336d44dda1c071a6fd609f3eb50765726fcabd", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -2575,7 +2575,7 @@ int isroot P((uid_t));\n \n /* @r{Old-style function definition.}  */\n int\n-isroot (x)   /* ??? lossage here ??? */\n+isroot (x)   /* @r{??? lossage here ???} */\n      uid_t x;\n @{\n   return x == 0;\n@@ -2854,13 +2854,13 @@ int init_data __attribute__ ((section (\"INITDATA\"))) = 0;\n \n main()\n @{\n-  /* Initialize stack pointer */\n+  /* @r{Initialize stack pointer} */\n   init_sp (stack + sizeof (stack));\n \n-  /* Initialize initialized data */\n+  /* @r{Initialize initialized data} */\n   memcpy (&init_data, &data, &edata - &data);\n \n-  /* Turn on the serial ports */\n+  /* @r{Turn on the serial ports} */\n   init_duart (&a);\n   init_duart (&b);\n @}\n@@ -2899,8 +2899,8 @@ int foo __attribute__((section (\"shared\"), shared)) = 0;\n int\n main()\n @{\n-  /* Read and write foo.  All running\n-     copies see the same value.  */\n+  /* @r{Read and write foo.  All running\n+     copies see the same value.}  */\n   return 0;\n @}\n @end smallexample\n@@ -3464,7 +3464,7 @@ GCC does not inline any functions when not optimizing unless you specify\n the @samp{always_inline} attribute for the function, like this:\n \n @smallexample\n-/* Prototype.  */\n+/* @r{Prototype.}  */\n inline void foo (const char) __attribute__((always_inline));\n @end smallexample\n \n@@ -3634,7 +3634,7 @@ example for the VAX:\n \n @smallexample\n asm volatile (\"movc3 %0,%1,%2\"\n-              : /* no outputs */\n+              : /* @r{no outputs} */\n               : \"g\" (from), \"g\" (to), \"g\" (count)\n               : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\");\n @end smallexample"}, {"sha": "d3312f75bc50901c7310105bbe105a8fae9984d0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -4678,9 +4678,9 @@ an equality comparison of a register and a large constant:\n    (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]\n   \"\n @{\n-  /* Get the constant we are comparing against, C, and see what it\n+  /* @r{Get the constant we are comparing against, C, and see what it\n      looks like sign-extended to 16 bits.  Then see what constant\n-     could be XOR'ed with C to get the sign-extended value.  */\n+     could be XOR'ed with C to get the sign-extended value.}  */\n \n   int c = INTVAL (operands[2]);\n   int sextc = (c << 16) >> 16;"}, {"sha": "795e281f726514b79bc2ee93955b953a13dd17e9", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -56,7 +56,7 @@ FileStream *Stderr = nil;\n     Stderr = [[FileStream new] initWithFd:2];\n @}\n \n-/* Other methods here */\n+/* @r{Other methods here} */\n @@end\n \n @end smallexample\n@@ -84,7 +84,7 @@ method instead of @code{+initialize}:\n     Stderr = [[FileStream new] initWithFd:2];\n @}\n \n-/* Other methods here */\n+/* @r{Other methods here} */\n @@end\n \n @end smallexample"}, {"sha": "edb61b13f26a45d119078b2eb66f967018f835eb", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -1321,8 +1321,8 @@ kind.  A command @code{branch(end)} or @code{returns(end)} marks\n the end of a range without starting a new one.  For example:\n \n @smallexample\n-if (i > 10 && j > i && j < 20)  /* branch(27 50 75) */\n-                                /* branch(end) */\n+if (i > 10 && j > i && j < 20)  /* @r{branch(27 50 75)} */\n+                                /* @r{branch(end)} */\n   foo (i, j);\n @end smallexample\n "}, {"sha": "81b664e1c9a4c51333c077998b460dc05132ab81", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -849,7 +849,7 @@ checking the state of the option (documentation is elided for brevity).\n \n @smallexample\n [chip.c]\n-char *chip_alu = \"\"; /* Specify default here.  */\n+char *chip_alu = \"\"; /* @r{Specify default here.}  */\n \n [chip.h]\n extern char *chip_alu;"}, {"sha": "6996e834fea807defd56cf3843abf202e22fc710", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bcfaa1cb344664bb0123afb3d044b7752dbab5/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=12bcfaa1cb344664bb0123afb3d044b7752dbab5", "patch": "@@ -938,14 +938,14 @@ tree            FOR_EACH_SSA_TREE_OPERAND\n     @file{tree-ssa-operands.h}:\n \n @smallexample\n-#define SSA_OP_USE              0x01    /* Real USE operands.  */\n-#define SSA_OP_DEF              0x02    /* Real DEF operands.  */\n-#define SSA_OP_VUSE             0x04    /* VUSE operands.  */\n-#define SSA_OP_VMAYUSE          0x08    /* USE portion of V_MAY_DEFS.  */\n-#define SSA_OP_VMAYDEF          0x10    /* DEF portion of V_MAY_DEFS.  */\n-#define SSA_OP_VMUSTDEF         0x20    /* V_MUST_DEF definitions.  */\n-\n-/* These are commonly grouped operand flags.  */\n+#define SSA_OP_USE              0x01    /* @r{Real USE operands.}  */\n+#define SSA_OP_DEF              0x02    /* @r{Real DEF operands.}  */\n+#define SSA_OP_VUSE             0x04    /* @r{VUSE operands.}  */\n+#define SSA_OP_VMAYUSE          0x08    /* @r{USE portion of V_MAY_DEFS.}  */\n+#define SSA_OP_VMAYDEF          0x10    /* @r{DEF portion of V_MAY_DEFS.}  */\n+#define SSA_OP_VMUSTDEF         0x20    /* @r{V_MUST_DEF definitions.}  */\n+\n+/* @r{These are commonly grouped operand flags.}  */\n #define SSA_OP_VIRTUAL_USES     (SSA_OP_VUSE | SSA_OP_VMAYUSE)\n #define SSA_OP_VIRTUAL_DEFS     (SSA_OP_VMAYDEF | SSA_OP_VMUSTDEF)\n #define SSA_OP_ALL_USES         (SSA_OP_VIRTUAL_USES | SSA_OP_USE)"}]}