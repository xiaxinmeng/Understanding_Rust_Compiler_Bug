{"sha": "387769edff1fcbf01f055f45ae55ea5362dbabca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3NzY5ZWRmZjFmY2JmMDFmMDU1ZjQ1YWU1NWVhNTM2MmRiYWJjYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-26T08:50:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-26T08:50:47Z"}, "message": "cp-tree.h (CPTI_PTMD_DESC_TYPE): Rename to ...\n\n\t* cp-tree.h (CPTI_PTMD_DESC_TYPE): Rename to ...\n\t(CPTI_PTMD_DESC_TYPE): ... here.\n\t(ptmd_desc_type_node): Rename to ...\n\t(ptm_desc_type_node): ... here.\n\t* decl.c: Likewise.\n\t* rtti.c (ptmd_initializer): Rename to ...\n\t(ptm_initializer): ... here.\n\t(sythesize_tinfo_var): Adjust. Deal with pointer to member\n\tfunction.\n\t(create_tinfo_types): Adjust.\n\nFrom-SVN: r34190", "tree": {"sha": "9d08f44db8af3837c38c8cf450cfa93527a04c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d08f44db8af3837c38c8cf450cfa93527a04c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387769edff1fcbf01f055f45ae55ea5362dbabca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387769edff1fcbf01f055f45ae55ea5362dbabca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387769edff1fcbf01f055f45ae55ea5362dbabca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387769edff1fcbf01f055f45ae55ea5362dbabca/comments", "author": null, "committer": null, "parents": [{"sha": "4d3ff8d823a193070de54b10eabfb8986cff6059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3ff8d823a193070de54b10eabfb8986cff6059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3ff8d823a193070de54b10eabfb8986cff6059"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "83224d8daf69c300535857a18b575a6af115a5b9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=387769edff1fcbf01f055f45ae55ea5362dbabca", "patch": "@@ -1,3 +1,16 @@\n+2000-05-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (CPTI_PTMD_DESC_TYPE): Rename to ...\n+\t(CPTI_PTMD_DESC_TYPE): ... here.\n+\t(ptmd_desc_type_node): Rename to ...\n+\t(ptm_desc_type_node): ... here.\n+\t* decl.c: Likewise.\n+\t* rtti.c (ptmd_initializer): Rename to ...\n+\t(ptm_initializer): ... here.\n+\t(sythesize_tinfo_var): Adjust. Deal with pointer to member\n+\tfunction.\n+\t(create_tinfo_types): Adjust.\t\n+\n 2000-05-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tFinish implementation of VTTs."}, {"sha": "4f255a4788125f45a12deb87bd6a22703d41a6d6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=387769edff1fcbf01f055f45ae55ea5362dbabca", "patch": "@@ -541,7 +541,7 @@ enum cp_tree_index\n     CPTI_CLASS_DESC_TYPE,\n     CPTI_SI_CLASS_DESC_TYPE,\n     CPTI_VMI_CLASS_DESC_TYPE,\n-    CPTI_PTMD_DESC_TYPE,\n+    CPTI_PTM_DESC_TYPE,\n     CPTI_BASE_DESC_TYPE,\n     \n     CPTI_CLASS_TYPE,\n@@ -634,7 +634,7 @@ extern tree cp_global_trees[CPTI_MAX];\n #define class_desc_type_node\t\tcp_global_trees[CPTI_CLASS_DESC_TYPE]\n #define si_class_desc_type_node\t\tcp_global_trees[CPTI_SI_CLASS_DESC_TYPE]\n #define vmi_class_desc_type_node\tcp_global_trees[CPTI_VMI_CLASS_DESC_TYPE]\n-#define ptmd_desc_type_node\t\tcp_global_trees[CPTI_PTMD_DESC_TYPE]\n+#define ptm_desc_type_node\t\tcp_global_trees[CPTI_PTM_DESC_TYPE]\n #define base_desc_type_node\t\tcp_global_trees[CPTI_BASE_DESC_TYPE]\n \n #define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]"}, {"sha": "dc95473ec0ca6f8556c0d78f3bc45c409094f10d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=387769edff1fcbf01f055f45ae55ea5362dbabca", "patch": "@@ -210,7 +210,7 @@ tree error_mark_list;\n \ttree bltn_desc_type_node, ptr_desc_type_node;\n \ttree ary_desc_type_node, func_desc_type_node, enum_desc_type_node;\n \ttree class_desc_type_node, si_class_desc_type_node, vmi_class_desc_type_node;\n-\ttree ptmd_desc_type_node;\n+\ttree ptm_desc_type_node;\n \ttree base_desc_type_node;\n #if 0\n    Not needed yet?  May be needed one day?"}, {"sha": "3b5f9c05c61ce73ee2d3ebacb540a30867b6151b", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387769edff1fcbf01f055f45ae55ea5362dbabca/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=387769edff1fcbf01f055f45ae55ea5362dbabca", "patch": "@@ -66,7 +66,7 @@ static int target_incomplete_p PARAMS((tree));\n static tree tinfo_base_init PARAMS((tree, tree));\n static tree generic_initializer PARAMS((tree, tree));\n static tree ptr_initializer PARAMS((tree, tree, int *));\n-static tree ptmd_initializer PARAMS((tree, tree, int *));\n+static tree ptm_initializer PARAMS((tree, tree, int *));\n static tree dfs_class_hint_mark PARAMS ((tree, void *));\n static tree dfs_class_hint_unmark PARAMS ((tree, void *));\n static int class_hint_flags PARAMS((tree));\n@@ -1385,7 +1385,7 @@ ptr_initializer (desc, target, non_public_ptr)\n    base.  */\n \n static tree\n-ptmd_initializer (desc, target, non_public_ptr)\n+ptm_initializer (desc, target, non_public_ptr)\n      tree desc;\n      tree target;\n      int *non_public_ptr;\n@@ -1528,8 +1528,8 @@ synthesize_tinfo_var (target_type, real_name)\n     case POINTER_TYPE:\n       if (TYPE_PTRMEM_P (target_type))\n         {\n-          var_type = ptmd_desc_type_node;\n-          var_init = ptmd_initializer (var_type, target_type, &non_public);\n+          var_type = ptm_desc_type_node;\n+          var_init = ptm_initializer (var_type, target_type, &non_public);\n         }\n       else\n         {\n@@ -1561,7 +1561,12 @@ synthesize_tinfo_var (target_type, real_name)\n       break;\n     case UNION_TYPE:\n     case RECORD_TYPE:\n-      if (!COMPLETE_TYPE_P (target_type))\n+      if (TYPE_PTRMEMFUNC_P (target_type))\n+        {\n+          var_type = ptm_desc_type_node;\n+          var_init = ptm_initializer (var_type, target_type, &non_public);\n+        }\n+      else if (!COMPLETE_TYPE_P (target_type))\n         {\n           /* Emit a non-public class_type_info.  */\n           non_public = 1;\n@@ -1853,14 +1858,6 @@ create_tinfo_types ()\n       (\"__fundamental_type_info\", 0,\n        NULL);\n \n-  /* Pointer type_info. Adds two fields, qualification mask\n-     and pointer to the pointed to type.  */\n-  ptr_desc_type_node = create_pseudo_type_info\n-      (\"__pointer_type_info\", 0,\n-       build_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n-       build_decl (FIELD_DECL, NULL_TREE, ptr_type_info),\n-       NULL);\n-\n   /* Array, function and enum type_info. No additional fields. */\n   ary_desc_type_node = create_pseudo_type_info\n       (\"__array_type_info\", 0,\n@@ -1900,10 +1897,19 @@ create_tinfo_types ()\n   /* General heirarchy is created as necessary in this vector. */\n   vmi_class_desc_type_node = make_tree_vec (10);\n   \n+  /* Pointer type_info. Adds two fields, qualification mask\n+     and pointer to the pointed to type.  This is really a descendant of\n+     __pbase_type_info. */\n+  ptr_desc_type_node = create_pseudo_type_info\n+      (\"__pointer_type_info\", 0,\n+       build_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n+       build_decl (FIELD_DECL, NULL_TREE, ptr_type_info),\n+       NULL);\n+\n   /* Pointer to member data type_info.  Add qualifications flags,\n      pointer to the member's type info and pointer to the class.\n-     This is really a descendant of __pointer_type_info.  */\n-  ptmd_desc_type_node = create_pseudo_type_info\n+     This is really a descendant of __pbase_type_info.  */\n+  ptm_desc_type_node = create_pseudo_type_info\n        (\"__pointer_to_member_type_info\", 0,\n         build_decl (FIELD_DECL, NULL_TREE, integer_type_node),\n         build_decl (FIELD_DECL, NULL_TREE, ptr_type_info),"}]}