{"sha": "1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzOGJlYTY3ZWNmZjFiYmI4OTJlOWYyNGQyZTljYzVjMjExNjFkYg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-22T23:11:53Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-10-22T23:11:53Z"}, "message": "jvspecs.c: Add (but don't enable) support for combining multiple .class and .java input...\n\n\ufffd\n\t* jvspecs.c:  Add (but don't enable) support for combining multiple\n\t.class and .java input filenames to a single jc1 invocation.\n\tAdd support for -C flag (copile to .class files).\n\tTranslate -classpath and -CLASSPATH arguments.\n\t* lang-specs.h:  Don't set %2 spec.\n\nFrom-SVN: r23238", "tree": {"sha": "85373e77f6e19e55a39db7b40a2be5d9f9ae2810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85373e77f6e19e55a39db7b40a2be5d9f9ae2810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1938bea67ecff1bbb892e9f24d2e9cc5c21161db/comments", "author": null, "committer": null, "parents": [{"sha": "172b2240e287ed6ce7afe2643456c192e9f21759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172b2240e287ed6ce7afe2643456c192e9f21759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172b2240e287ed6ce7afe2643456c192e9f21759"}], "stats": {"total": 187, "additions": 172, "deletions": 15}, "files": [{"sha": "21277d15cbb035639725eee8ab15143bb72444a8", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 171, "deletions": 14, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1938bea67ecff1bbb892e9f24d2e9cc5c21161db/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1938bea67ecff1bbb892e9f24d2e9cc5c21161db/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "patch": "@@ -1,4 +1,4 @@\n-/* Specific flags and argument handling of the front-end of the \n+ /* Specific flags and argument handling of the front-end of the \n    GNU compiler for the Java(TM) language.\n    Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n \n@@ -46,6 +46,12 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* This bit is set if they did `-lpthread' (or added some other thread\n    library).  */\n #define THREADLIB\t(1<<5)\n+/* True if this arg is a parameter to the previous option-taking arg. */\n+#define PARAM_ARG\t(1<<6)\n+/* True if this arg is a .java input file name. */\n+#define JAVA_FILE_ARG\t(1<<7)\n+/* True if this arg is a .class input file name. */\n+#define CLASS_FILE_ARG\t(1<<8)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"-lm\"\n@@ -59,6 +65,11 @@ extern size_t input_filename_length;\n char *main_class_name = NULL;\n int lang_specific_extra_outfiles = 0;\n \n+/* Once we have the proper support in jc1 (and gcc.c) working,\n+   set COMBINE_INPUTS to one.  This enables combining multiple *.java\n+   and *.class input files to be passed to a single jc1 invocation. */\n+#define COMBINE_INPUTS 0\n+\n char jvgenmain_spec[] =\n   \"jvgenmain %i %{!pipe:%u.i} |\\n\\\n    cc1 %{!pipe:%U.i} %1 \\\n@@ -86,6 +97,30 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n      link in libjava.  */\n   int library = 1;\n \n+#if COMBINE_INPUTS\n+  /* This will be 1 if multiple input files (.class and/or .java)\n+     should be passed to a single jc1 invocation. */\n+  int combine_inputs = 0;\n+\n+  /* Index of last .java or .class argument. */\n+  int last_input_index;\n+\n+  /* A buffer containing the concatenation of the inputs files\n+     (e.g. \"foo.java&bar.class&baz.class\"). if combine_inputs. */\n+  char* combined_inputs_buffer;\n+\n+  /* Next available location in combined_inputs_buffer. */\n+  int combined_inputs_pos;\n+\n+  /* Number of .java and .class source file arguments seen. */\n+  int java_files_count = 0;\n+  int class_files_count = 0;\n+\n+  /* Cumulative length of the  .java and .class source file names. */\n+  int java_files_length = 0;\n+  int class_files_length = 0;\n+#endif\n+\n   /* The number of arguments being added to what's in argv, other than\n      libraries.  We use this to track the number of times we've inserted\n      -xc++/-xnone.  */\n@@ -118,6 +153,10 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   /* Saw `-ljava' on command line.  */\n   int saw_libjava = 0;\n \n+  /* Saw -C or -o option, respectively. */\n+  int saw_C = 0;\n+  int saw_o = 0;\n+\n   /* An array used to flag each argument that needs a bit set for\n      LANGSPEC, MATHLIB, WITHLIBC, or GCLIB.  */\n   int *args;\n@@ -157,6 +196,7 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n       if (quote)\n \t{\n \t  quote = NULL;\n+\t  args[i] |= PARAM_ARG;\n \t  continue;\n \t}\n \n@@ -183,7 +223,10 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t      need_math = 0;\n \t    }\n \t  else if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n-\t    main_class_name = argv[i] + 7;\n+\t    {\n+\t      main_class_name = argv[i] + 7;\n+\t      added--;\n+\t    }\n \t  else if (strcmp (argv[i], \"-ljava\") == 0)\n \t    saw_libjava = 1;\n \t  else if (strcmp (argv[i], \"-lc\") == 0)\n@@ -209,10 +252,31 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t    }\n \t  else if (strncmp (argv[i], \"-x\", 2) == 0)\n \t    saw_speclang = 1;\n+\t  else if (strcmp (argv[i], \"-C\") == 0)\n+\t    {\n+\t      saw_C = 1;\n+#if COMBINE_INPUTS\n+\t      combine_inputs = 1;\n+#endif\n+\t      if (library != 0)\n+\t\tadded -= 2;\n+\t      library = 0;\n+\t      will_link = 0;\n+\t    }\n \t  else if (((argv[i][2] == '\\0'\n \t\t     && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n \t\t    || strcmp (argv[i], \"-Tdata\") == 0))\n-\t    quote = argv[i];\n+\t    {\n+\t      if (strcmp (argv[i], \"-o\") == 0)\n+\t\tsaw_o = 1;\n+\t      quote = argv[i];\n+\t    }\n+\t  else if (strcmp(argv[i], \"-classpath\") == 0\n+\t\t   || strcmp(argv[i], \"-CLASSPATH\") == 0)\n+\t    {\n+\t      quote = argv[i];\n+\t      added -= 1;\n+\t    }\n \t  else if (library != 0 \n \t\t   && ((argv[i][2] == '\\0'\n \t\t\t&& (char *) strchr (\"cSEM\", argv[i][1]) != NULL)\n@@ -240,41 +304,94 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t      continue;\n \t    }\n \n-\t  /* If the filename ends in .c or .i, put options around it.\n-\t     But not if a specified -x option is currently active.  */\n+#if COMBINE_INPUTS\n \t  len = strlen (argv[i]);\n-\t  if (len > 2\n-\t      && (argv[i][len - 1] == 'c' || argv[i][len - 1] == 'i')\n-\t      && argv[i][len - 2] == '.')\n+\t  if (len > 5 && strcmp (argv[i] + len - 5, \".java\") == 0)\n+\t    {\n+\t      args[i] |= JAVA_FILE_ARG;\n+\t      java_files_count++;\n+\t      java_files_length += len;\n+\t      last_input_index = i;\n+\t    }\n+\t  if (len > 6 && strcmp (argv[i] + len - 6, \".class\") == 0)\n \t    {\n-\t      args[i] |= LANGSPEC;\n-\t      added += 2;\n+\t      args[i] |= CLASS_FILE_ARG;\n+\t      class_files_count++;\n+\t      class_files_length += len;\n+\t      last_input_index = i;\n \t    }\n+#endif\n \t}\n     }\n \n   if (quote)\n     (*fn) (\"argument to `%s' missing\\n\", quote);\n \n+  num_args = argc + added;\n+  if (will_link)\n+    num_args += need_math + need_thread;\n+  if (saw_C)\n+    {\n+      num_args += 3;\n+#if COMBINE_INPUTS\n+      class_files_length = 0;\n+      num_args -= class_files_count;\n+      num_args += 2;  /* For -o NONE. */\n+#endif\n+      if (saw_o)\n+\t(*fn) (\"cannot specify both -C and -o\");\n+    }\n+#if COMBINE_INPUTS\n+  if (saw_o && java_files_count + (saw_C ? 0 : class_files_count) > 1)\n+    combine_inputs = 1;\n+\n+  if (combine_inputs)\n+    {\n+      int len = java_files_length + java_files_count - 1;\n+      num_args -= java_files_count;\n+      num_args++;  /* Add one for the combined arg. */\n+      if (class_files_length > 0)\n+\t{\n+\t  len += class_files_length + class_files_count - 1;\n+\t  num_args -= class_files_count;\n+\t}\n+      combined_inputs_buffer = (char*) xmalloc (len);\n+      combined_inputs_pos = 0;\n+    }\n   /* If we know we don't have to do anything, bail now.  */\n-  if (! added && ! library && main_class_name == NULL)\n+#endif\n+#if 0\n+  if (! added && ! library && main_class_name == NULL && ! saw_C)\n     {\n       free (args);\n       return;\n     }\n+#endif\n \n-  num_args = argc + added + need_math + need_thread;\n   if (main_class_name)\n     {\n       lang_specific_extra_outfiles++;\n     }\n-  arglist = (char **) xmalloc (num_args * sizeof (char *));\n+  arglist = (char **) xmalloc ((num_args + 1) * sizeof (char *));\n \n-  /* NOTE: We start at 1 now, not 0.  */\n   for (i = 0, j = 0; i < argc; i++, j++)\n     {\n       arglist[j] = argv[i];\n \n+      if ((args[i] & PARAM_ARG) || i == 0)\n+\tcontinue;\n+\n+      if (strcmp (argv[i], \"-classpath\") == 0\n+\t  || strcmp (argv[i], \"-CLASSPATH\") == 0)\n+\t{\n+\t  char* patharg\n+\t    = (char*) xmalloc (strlen (argv[i]) + strlen (argv[i+1]) + 3);\n+\t  sprintf (patharg, \"-f%s=%s\", argv[i]+1, argv[i+1]);\n+\t  arglist[j] = patharg;\n+\t  i++;\n+\t  continue;\n+\t}\n+\n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n \t{\n \t  if (! will_link)\n@@ -311,8 +428,37 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t  --j;\n \t  saw_threadlib = argv[i];\n \t}\n+\n+      if ((args[i] & CLASS_FILE_ARG) && saw_C)\n+\t{\n+\t  --j;\n+\t  continue;\n+\t}\n+\n+#if COMBINE_INPUTS\n+      if (combine_inputs && (args[i] & (CLASS_FILE_ARG|JAVA_FILE_ARG)) != 0)\n+\t{\n+\t  if (combined_inputs_pos > 0)\n+\t    combined_inputs_buffer[combined_inputs_pos++] = '&';\n+\t  strcpy (&combined_inputs_buffer[combined_inputs_pos], argv[i]);\n+\t  combined_inputs_pos += strlen (argv[i]);\n+\t  --j;\n+\t  continue;\n+\t}\n+#endif\n   }\n \n+#if COMBINE_INPUTS\n+  if (combine_inputs)\n+    {\n+      combined_inputs_buffer[combined_inputs_pos] = '\\0';\n+#if 0\n+      if (! saw_C)\n+#endif\n+      arglist[j++] = combined_inputs_buffer;\n+    }\n+#endif\n+\n   /* Add `-ljava' if we haven't already done so.  */\n   if (library && ! saw_libjava)\n     {\n@@ -348,6 +494,17 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n   if (saw_libc)\n     arglist[j++] = saw_libc;\n \n+  if (saw_C)\n+    {\n+      arglist[j++] = \"-fsyntax-only\";\n+      arglist[j++] = \"-femit-class-files\";\n+      arglist[j++] = \"-S\";\n+#if COMBINE_INPUTS\n+      arglist[j++] = \"-o\";\n+      arglist[j++] = \"NONE\";\n+#endif\n+    }\n+\n   arglist[j] = NULL;\n \n   *in_argc = j;"}, {"sha": "726f313e8b4e0556d30a9abd5bc0efb5beaba95a", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1938bea67ecff1bbb892e9f24d2e9cc5c21161db/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1938bea67ecff1bbb892e9f24d2e9cc5c21161db/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=1938bea67ecff1bbb892e9f24d2e9cc5c21161db", "patch": "@@ -27,7 +27,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n   {\".java\",   {\"@java\"} },\n   {\".class\",  {\"@java\"} },\n   {\"@java\",\n-   {\"%{!E:jc1 %i %1 %2 %{!Q:-quiet} %{d*} %{m*} %{a}\\\n+   {\"%{!E:jc1 %i %1 %{!Q:-quiet} %{d*} %{m*} %{a}\\\n \t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n \t\t    %{traditional} %{v:-version} %{pg:-p} %{p}\\\n \t\t    %{f*} %{+e*} %{aux-info*}\\"}]}