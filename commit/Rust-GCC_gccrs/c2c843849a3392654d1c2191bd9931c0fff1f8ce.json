{"sha": "c2c843849a3392654d1c2191bd9931c0fff1f8ce", "node_id": "C_kwDOANBUbNoAKGMyYzg0Mzg0OWEzMzkyNjU0ZDFjMjE5MWJkOTkzMWMwZmZmMWY4Y2U", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-06T10:15:15Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-06T10:16:22Z"}, "message": "cse: Make sure duplicate elements are not entered into the equivalence set [PR103404]\n\nCSE uses equivalence classes to keep track of expressions that all have the same\nvalues at the current point in the program.\n\nNormal equivalences through SETs only insert and perform lookups in this set but\nequivalence determined from comparisons, e.g.\n\n(insn 46 44 47 7 (set (reg:CCZ 17 flags)\n        (compare:CCZ (reg:SI 105 [ iD.2893 ])\n            (const_int 0 [0]))) \"cse.c\":18:22 7 {*cmpsi_ccno_1}\n     (expr_list:REG_DEAD (reg:SI 105 [ iD.2893 ])\n        (nil)))\n\ncreates the equivalence EQ on (reg:SI 105 [ iD.2893 ]) and (const_int 0 [0]).\n\nThis causes a merge to happen between the two equivalence sets denoted by\n(const_int 0 [0]) and (reg:SI 105 [ iD.2893 ]) respectively.\n\nThe operation happens through merge_equiv_classes however this function has an\ninvariant that the classes to be merge not contain any duplicates.  This is\nbecause it frees entries before merging.\n\nThe given testcase when using the supplied flags trigger an ICE due to the\nequivalence set being\n\n(rr) p dump_class (class1)\nEquivalence chain for (reg:SI 105 [ iD.2893 ]):\n(reg:SI 105 [ iD.2893 ])\n$3 = void\n\n(rr) p dump_class (class2)\nEquivalence chain for (const_int 0 [0]):\n(const_int 0 [0])\n(reg:SI 97 [ _10 ])\n(reg:SI 97 [ _10 ])\n$4 = void\n\nThis happens because the original INSN being recorded is\n\n(insn 18 17 24 2 (set (subreg:V1SI (reg:SI 97 [ _10 ]) 0)\n        (const_vector:V1SI [\n                (const_int 0 [0])\n            ])) \"cse.c\":11:9 1363 {*movv1si_internal}\n     (expr_list:REG_UNUSED (reg:SI 97 [ _10 ])\n        (nil)))\n\nand we end up generating two equivalences. the first one is simply that\nreg:SI 97 is 0.  The second one is that 0 can be extracted from the V1SI, so\nsubreg (subreg:V1SI (reg:SI 97) 0) 0 == 0.  This nested subreg gets folded away\nto just reg:SI 97 and we re-insert the same equivalence.\n\nThis patch changes it so that if the nunits of a subreg is 1 then don't generate\na vec_select from the subreg as the subreg will be folded away and we get a dup.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/103404\n\t* cse.c (find_sets_in_insn): Don't select elements out of a V1 mode\n\tsubreg.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/103404\n\t* gcc.target/i386/pr103404.c: New test.", "tree": {"sha": "67c253b07e1d9bfc94b824407577ed5af1a38e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c253b07e1d9bfc94b824407577ed5af1a38e1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2c843849a3392654d1c2191bd9931c0fff1f8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c843849a3392654d1c2191bd9931c0fff1f8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c843849a3392654d1c2191bd9931c0fff1f8ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c843849a3392654d1c2191bd9931c0fff1f8ce/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1011a41efd121ede2f427c1dffd6ac62f92962e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1011a41efd121ede2f427c1dffd6ac62f92962e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1011a41efd121ede2f427c1dffd6ac62f92962e"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "dc5d5aed047c7776f44b159a4286390d6499c18d", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c843849a3392654d1c2191bd9931c0fff1f8ce/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c843849a3392654d1c2191bd9931c0fff1f8ce/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c2c843849a3392654d1c2191bd9931c0fff1f8ce", "patch": "@@ -4275,7 +4275,12 @@ find_sets_in_insn (rtx_insn *insn, vec<struct set> *psets)\n       else if (GET_CODE (SET_SRC (x)) == CALL)\n \t;\n       else if (GET_CODE (SET_SRC (x)) == CONST_VECTOR\n-\t       && GET_MODE_CLASS (GET_MODE (SET_SRC (x))) != MODE_VECTOR_BOOL)\n+\t       && GET_MODE_CLASS (GET_MODE (SET_SRC (x))) != MODE_VECTOR_BOOL\n+\t       /* Prevent duplicates from being generated if the type is a V1\n+\t\t  type and a subreg.  Folding this will result in the same\n+\t\t  element as folding x itself.  */\n+\t       && !(SUBREG_P (SET_DEST (x))\n+\t\t    && known_eq (GET_MODE_NUNITS (GET_MODE (SET_SRC (x))), 1)))\n \t{\n \t  /* First register the vector itself.  */\n \t  add_to_set (psets, x);"}, {"sha": "66f33645301db09503fc0977fd0f061a19e56ea5", "filename": "gcc/testsuite/gcc.target/i386/pr103404.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c843849a3392654d1c2191bd9931c0fff1f8ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103404.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c843849a3392654d1c2191bd9931c0fff1f8ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103404.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103404.c?ref=c2c843849a3392654d1c2191bd9931c0fff1f8ce", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Og -fcse-follow-jumps -fno-dce -fno-early-inlining -fgcse -fharden-conditional-branches -frerun-cse-after-loop -fno-tree-ccp -mavx5124fmaps -std=c99 -w\" } */\n+\n+typedef unsigned __attribute__((__vector_size__ (4))) U;\n+typedef unsigned __attribute__((__vector_size__ (16))) V;\n+typedef unsigned __attribute__((__vector_size__ (64))) W;\n+\n+int x, y;\n+\n+V v;\n+W w;\n+\n+inline\n+int bar (U a)\n+{\n+  a |= x;\n+  W k =\n+    __builtin_shufflevector (v, 5 / a,\n+\t\t\t     2, 4, 0, 2, 4, 1, 0, 1,\n+\t\t\t     1, 2, 1, 3, 0, 4, 4, 0);\n+  w = k;\n+  y = 0;\n+}\n+\n+int\n+foo ()\n+{\n+  bar ((U){0xffffffff});\n+  for (unsigned i; i < sizeof (foo);)\n+    ;\n+}\n+"}]}