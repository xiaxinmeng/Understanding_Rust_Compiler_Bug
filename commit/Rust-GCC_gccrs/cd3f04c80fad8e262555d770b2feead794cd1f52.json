{"sha": "cd3f04c80fad8e262555d770b2feead794cd1f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzZjA0YzgwZmFkOGUyNjI1NTVkNzcwYjJmZWVhZDc5NGNkMWY1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-23T17:04:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-23T17:04:35Z"}, "message": "tree.h (struct tree_base): Add nameless_flag bitfield.\n\n\t* tree.h (struct tree_base): Add nameless_flag bitfield.\n\t(TYPE_NAMELESS, DECL_NAMELESS): Define.\n\t* omp-low.c (create_omp_child_function, scan_omp_parallel,\n\tscan_omp_task, lower_omp_taskreg): Set DECL_NAMELESS and/or\n\tDECL_ARTIFICIAL where needed.\n\t* dwarf2out.c (dwarf2_name): Return NULL if DECL_NAMELESS.\n\t(type_tag): Return NULL if TYPE_NAMELESS or if TYPE_DECL\n\thas DECL_NAMELESS set.\n\n\t* trans-types.c (gfc_get_array_descriptor_base,\n\tgfc_get_array_type_bounds): Set TYPE_NAMELESS.\n\t* trans-decl.c (gfc_build_qualified_array): Set DECL_NAMELESS\n\tinstead of clearing DECL_NAME.\n\t(gfc_build_dummy_array_decl): Set DECL_NAMELESS.\n\nFrom-SVN: r162476", "tree": {"sha": "c71eded4af7626ba7706b47e3178b1847fd6c27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c71eded4af7626ba7706b47e3178b1847fd6c27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3f04c80fad8e262555d770b2feead794cd1f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3f04c80fad8e262555d770b2feead794cd1f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3f04c80fad8e262555d770b2feead794cd1f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3f04c80fad8e262555d770b2feead794cd1f52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52e092abdd026f8270d08367a00d3ad2060c5be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e092abdd026f8270d08367a00d3ad2060c5be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e092abdd026f8270d08367a00d3ad2060c5be3"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "1d9c977cd5f5082d67752698ac8c076e5f6738c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -1,3 +1,14 @@\n+2010-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (struct tree_base): Add nameless_flag bitfield.\n+\t(TYPE_NAMELESS, DECL_NAMELESS): Define.\n+\t* omp-low.c (create_omp_child_function, scan_omp_parallel,\n+\tscan_omp_task, lower_omp_taskreg): Set DECL_NAMELESS and/or\n+\tDECL_ARTIFICIAL where needed.\n+\t* dwarf2out.c (dwarf2_name): Return NULL if DECL_NAMELESS.\n+\t(type_tag): Return NULL if TYPE_NAMELESS or if TYPE_DECL\n+\thas DECL_NAMELESS set.\n+\n 2010-07-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/44915"}, {"sha": "68b6483282908bce12d84822bea0696a57678c94", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -11249,6 +11249,8 @@ output_comdat_type_unit (comdat_type_node *node)\n static const char *\n dwarf2_name (tree decl, int scope)\n {\n+  if (DECL_NAMELESS (decl))\n+    return NULL;\n   return lang_hooks.dwarf_name (decl, scope ? 1 : 0);\n }\n \n@@ -17717,7 +17719,8 @@ type_tag (const_tree type)\n       tree t = 0;\n \n       /* Find the IDENTIFIER_NODE for the type name.  */\n-      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n+      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE\n+\t  && !TYPE_NAMELESS (type))\n \tt = TYPE_NAME (type);\n \n       /* The g++ front end makes the TYPE_NAME of *each* tagged type point to\n@@ -17730,7 +17733,8 @@ type_tag (const_tree type)\n \t     DECL_NAME isn't set.  The default hook for decl_printable_name\n \t     doesn't like that, and in this context it's correct to return\n \t     0, instead of \"<anonymous>\" or the like.  */\n-\t  if (DECL_NAME (TYPE_NAME (type)))\n+\t  if (DECL_NAME (TYPE_NAME (type))\n+\t      && !DECL_NAMELESS (TYPE_NAME (type)))\n \t    name = lang_hooks.dwarf_name (TYPE_NAME (type), 2);\n \t}\n "}, {"sha": "baba9e569e98bb528a6b1ba191dad112c19fe066", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -1,3 +1,11 @@\n+2010-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-types.c (gfc_get_array_descriptor_base,\n+\tgfc_get_array_type_bounds): Set TYPE_NAMELESS.\n+\t* trans-decl.c (gfc_build_qualified_array): Set DECL_NAMELESS\n+\tinstead of clearing DECL_NAME.\n+\t(gfc_build_dummy_array_decl): Set DECL_NAMELESS.\n+\n 2009-07-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24524"}, {"sha": "2b030110231277ad2981f2512805444c579b08ba", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -759,16 +759,16 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n \t  gtype = build_array_type (gtype, rtype);\n \t  /* Ensure the bound variables aren't optimized out at -O0.\n \t     For -O1 and above they often will be optimized out, but\n-\t     can be tracked by VTA.  Also clear the artificial\n-\t     lbound.N or ubound.N DECL_NAME, so that it doesn't end up\n-\t     in debug info.  */\n+\t     can be tracked by VTA.  Also set DECL_NAMELESS, so that\n+\t     the artificial lbound.N or ubound.N DECL_NAME doesn't\n+\t     end up in debug info.  */\n \t  if (lbound && TREE_CODE (lbound) == VAR_DECL\n \t      && DECL_ARTIFICIAL (lbound) && DECL_IGNORED_P (lbound))\n \t    {\n \t      if (DECL_NAME (lbound)\n \t\t  && strstr (IDENTIFIER_POINTER (DECL_NAME (lbound)),\n \t\t\t     \"lbound\") != 0)\n-\t\tDECL_NAME (lbound) = NULL_TREE;\n+\t\tDECL_NAMELESS (lbound) = 1;\n \t      DECL_IGNORED_P (lbound) = 0;\n \t    }\n \t  if (ubound && TREE_CODE (ubound) == VAR_DECL\n@@ -777,7 +777,7 @@ gfc_build_qualified_array (tree decl, gfc_symbol * sym)\n \t      if (DECL_NAME (ubound)\n \t\t  && strstr (IDENTIFIER_POINTER (DECL_NAME (ubound)),\n \t\t\t     \"ubound\") != 0)\n-\t\tDECL_NAME (ubound) = NULL_TREE;\n+\t\tDECL_NAMELESS (ubound) = 1;\n \t      DECL_IGNORED_P (ubound) = 0;\n \t    }\n \t}\n@@ -879,6 +879,7 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n \t\t     VAR_DECL, get_identifier (name), type);\n \n   DECL_ARTIFICIAL (decl) = 1;\n+  DECL_NAMELESS (decl) = 1;\n   TREE_PUBLIC (decl) = 0;\n   TREE_STATIC (decl) = 0;\n   DECL_EXTERNAL (decl) = 0;"}, {"sha": "34efa9ad82c935a9818b3e2923705e6ae63e18f0", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -1546,6 +1546,7 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n \n   sprintf (name, \"array_descriptor\" GFC_RANK_PRINTF_FORMAT, dimen + codimen);\n   TYPE_NAME (fat_type) = get_identifier (name);\n+  TYPE_NAMELESS (fat_type) = 1;\n \n   /* Add the data member as the first element of the descriptor.  */\n   decl = gfc_add_field_to_struct_1 (fat_type,\n@@ -1616,6 +1617,7 @@ gfc_get_array_type_bounds (tree etype, int dimen, int codimen, tree * lbound,\n   sprintf (name, \"array\" GFC_RANK_PRINTF_FORMAT \"_%.*s\", dimen + codimen,\n \t   GFC_MAX_SYMBOL_LEN, type_name);\n   TYPE_NAME (fat_type) = get_identifier (name);\n+  TYPE_NAMELESS (fat_type) = 1;\n \n   GFC_DESCRIPTOR_TYPE_P (fat_type) = 1;\n   TYPE_LANG_SPECIFIC (fat_type)"}, {"sha": "3fe94c94999b39c51634c0070a887c132276f3c9", "filename": "gcc/omp-low.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -1563,6 +1563,7 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n   TREE_STATIC (decl) = 1;\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n+  DECL_NAMELESS (decl) = 1;\n   DECL_IGNORED_P (decl) = 0;\n   TREE_PUBLIC (decl) = 0;\n   DECL_UNINLINABLE (decl) = 1;\n@@ -1580,6 +1581,7 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n   t = build_decl (DECL_SOURCE_LOCATION (decl),\n \t\t  PARM_DECL, get_identifier (\".omp_data_i\"), ptr_type_node);\n   DECL_ARTIFICIAL (t) = 1;\n+  DECL_NAMELESS (t) = 1;\n   DECL_ARG_TYPE (t) = ptr_type_node;\n   DECL_CONTEXT (t) = current_function_decl;\n   TREE_USED (t) = 1;\n@@ -1592,6 +1594,7 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n \t\t      PARM_DECL, get_identifier (\".omp_data_o\"),\n \t\t      ptr_type_node);\n       DECL_ARTIFICIAL (t) = 1;\n+      DECL_NAMELESS (t) = 1;\n       DECL_ARG_TYPE (t) = ptr_type_node;\n       DECL_CONTEXT (t) = current_function_decl;\n       TREE_USED (t) = 1;\n@@ -1638,6 +1641,8 @@ scan_omp_parallel (gimple_stmt_iterator *gsi, omp_context *outer_ctx)\n   name = create_tmp_var_name (\".omp_data_s\");\n   name = build_decl (gimple_location (stmt),\n \t\t     TYPE_DECL, name, ctx->record_type);\n+  DECL_ARTIFICIAL (name) = 1;\n+  DECL_NAMELESS (name) = 1;\n   TYPE_NAME (ctx->record_type) = name;\n   create_omp_child_function (ctx, false);\n   gimple_omp_parallel_set_child_fn (stmt, ctx->cb.dst_fn);\n@@ -1681,6 +1686,8 @@ scan_omp_task (gimple_stmt_iterator *gsi, omp_context *outer_ctx)\n   name = create_tmp_var_name (\".omp_data_s\");\n   name = build_decl (gimple_location (stmt),\n \t\t     TYPE_DECL, name, ctx->record_type);\n+  DECL_ARTIFICIAL (name) = 1;\n+  DECL_NAMELESS (name) = 1;\n   TYPE_NAME (ctx->record_type) = name;\n   create_omp_child_function (ctx, false);\n   gimple_omp_task_set_child_fn (stmt, ctx->cb.dst_fn);\n@@ -1692,6 +1699,8 @@ scan_omp_task (gimple_stmt_iterator *gsi, omp_context *outer_ctx)\n       name = create_tmp_var_name (\".omp_data_a\");\n       name = build_decl (gimple_location (stmt),\n \t\t\t TYPE_DECL, name, ctx->srecord_type);\n+      DECL_ARTIFICIAL (name) = 1;\n+      DECL_NAMELESS (name) = 1;\n       TYPE_NAME (ctx->srecord_type) = name;\n       create_omp_child_function (ctx, true);\n     }\n@@ -6487,6 +6496,7 @@ lower_omp_taskreg (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       ctx->sender_decl\n \t= create_tmp_var (ctx->srecord_type ? ctx->srecord_type\n \t\t\t  : ctx->record_type, \".omp_data_o\");\n+      DECL_NAMELESS (ctx->sender_decl) = 1;\n       TREE_ADDRESSABLE (ctx->sender_decl) = 1;\n       gimple_omp_taskreg_set_data_arg (stmt, ctx->sender_decl);\n     }"}, {"sha": "32b15384f68e074de71d1bbb3b304431ab2494fd", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3f04c80fad8e262555d770b2feead794cd1f52/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cd3f04c80fad8e262555d770b2feead794cd1f52", "patch": "@@ -387,8 +387,9 @@ struct GTY(()) tree_base {\n   unsigned visited : 1;\n   unsigned packed_flag : 1;\n   unsigned user_align : 1;\n+  unsigned nameless_flag : 1;\n \n-  unsigned spare : 13;\n+  unsigned spare : 12;\n \n   /* This field is only used with type nodes; the only reason it is present\n      in tree_base instead of tree_type is to save space.  The size of the\n@@ -2180,6 +2181,9 @@ extern enum machine_mode vector_type_mode (const_tree);\n    the term.  */\n #define TYPE_RESTRICT(NODE) (TYPE_CHECK (NODE)->type.restrict_flag)\n \n+/* If nonzero, type's name shouldn't be emitted into debug info.  */\n+#define TYPE_NAMELESS(NODE) (TYPE_CHECK (NODE)->base.nameless_flag)\n+\n /* The address space the type is in.  */\n #define TYPE_ADDR_SPACE(NODE) (TYPE_CHECK (NODE)->base.address_space)\n \n@@ -2529,6 +2533,10 @@ struct function;\n #define DECL_CONTEXT(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.context)\n #define DECL_FIELD_CONTEXT(NODE) \\\n   (FIELD_DECL_CHECK (NODE)->decl_minimal.context)\n+\n+/* If nonzero, decl's name shouldn't be emitted into debug info.  */\n+#define DECL_NAMELESS(NODE) (DECL_MINIMAL_CHECK (NODE)->base.nameless_flag)\n+\n struct GTY(()) tree_decl_minimal {\n   struct tree_common common;\n   location_t locus;"}]}