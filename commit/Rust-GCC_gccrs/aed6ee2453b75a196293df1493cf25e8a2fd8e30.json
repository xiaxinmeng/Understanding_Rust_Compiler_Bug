{"sha": "aed6ee2453b75a196293df1493cf25e8a2fd8e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkNmVlMjQ1M2I3NWExOTYyOTNkZjE0OTNjZjI1ZThhMmZkOGUzMA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@verizon.net", "date": "2005-10-07T17:01:48Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-10-07T17:01:48Z"}, "message": "transfer.c (write_block): Add test for end-of-file condition, removed from mem_alloc_w_at.\n\n2005-10-07  Jerry DeLisle  <jvdelisle@verizon.net>\n\n        * io/transfer.c (write_block): Add test for end-of-file condition,\n        removed from mem_alloc_w_at. (next_record_w): Clean up checks for\n        NULL pointer returns from s_alloc_w.\n        * io/unix.c (mem_alloc_w_at): Remove call to generate_error end-of-file.\n        * io/write.c (write_float): Add checks for NULL pointer returns from\n        write_block calls. (write_integer): Same.\n\nFrom-SVN: r105092", "tree": {"sha": "681e44e7391bef780270f10d0a2b52d25cf777ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681e44e7391bef780270f10d0a2b52d25cf777ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed6ee2453b75a196293df1493cf25e8a2fd8e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed6ee2453b75a196293df1493cf25e8a2fd8e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed6ee2453b75a196293df1493cf25e8a2fd8e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed6ee2453b75a196293df1493cf25e8a2fd8e30/comments", "author": null, "committer": null, "parents": [{"sha": "3e352c00e15e9742aa076287839f40813957ce21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e352c00e15e9742aa076287839f40813957ce21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e352c00e15e9742aa076287839f40813957ce21"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "d0b2204f2b9f045dcd41836b902d2d2132d8240f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=aed6ee2453b75a196293df1493cf25e8a2fd8e30", "patch": "@@ -1,3 +1,12 @@\n+2005-10-07  Jerry DeLisle  <jvdelisle@verizon.net>\n+\n+        * io/transfer.c (write_block): Add test for end-of-file condition,\n+        removed from mem_alloc_w_at. (next_record_w): Clean up checks for\n+        NULL pointer returns from s_alloc_w.\n+        * io/unix.c (mem_alloc_w_at): Remove call to generate_error end-of-file.\n+        * io/write.c (write_float): Add checks for NULL pointer returns from\n+        write_block calls. (write_integer): Same.\n+        \n 2005-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* runtime/memory.c (allocate_size): Malloc 1 byte if size == 0."}, {"sha": "3538766c5767ca3d8dd77ba01ac0fb184eb342b4", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=aed6ee2453b75a196293df1493cf25e8a2fd8e30", "patch": "@@ -304,6 +304,12 @@ write_block (int length)\n \n   current_unit->bytes_left -= (gfc_offset)length;\n   dest = salloc_w (current_unit->s, &length);\n+  \n+  if (dest == NULL)\n+    {\n+      generate_error (ERROR_END, NULL);\n+      return NULL;\n+    }\n \n   if (ioparm.size != NULL)\n     *ioparm.size += length;\n@@ -1559,16 +1565,20 @@ next_record_w (void)\n \t    {\n \t      bytes_left = (int) current_unit->bytes_left;\n \t      p = salloc_w (current_unit->s, &bytes_left);\n-\t      if (p != NULL)\n+\t      if (p == NULL)\n \t\t{\n-\t\t  memset(p, ' ', bytes_left);\n-\t          current_unit->bytes_left = current_unit->recl;\n+\t\t  generate_error (ERROR_END, NULL);\n+\t\t  return;\n \t\t}\n+              memset(p, ' ', bytes_left);\n+              current_unit->bytes_left = current_unit->recl;\n \t    }\n \t  else\n \t    {\n \t      length = 1;\n \t      p = salloc_w (current_unit->s, &length);\n+\t      if (p==NULL)\n+\t        goto io_error;\n \t    }\n  \t}\n       else"}, {"sha": "28ac6ca66ae201b7443cc4432b9bca0a363714fa", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=aed6ee2453b75a196293df1493cf25e8a2fd8e30", "patch": "@@ -630,10 +630,7 @@ mem_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n     return NULL;\n \n   if (m > s->file_length)\n-    {\n-      generate_error (ERROR_END, NULL);\n-      return NULL;\n-    }\n+    return NULL;\n \n   s->logical_offset = m;\n "}, {"sha": "169810921c5f1b7f95962551f4a1b693833b98ce", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed6ee2453b75a196293df1493cf25e8a2fd8e30/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=aed6ee2453b75a196293df1493cf25e8a2fd8e30", "patch": "@@ -832,6 +832,8 @@ write_float (fnode *f, const char *source, int len)\n \t     \n \t  if (nb == 0) nb = 4;\n \t  p = write_block (nb);\n+          if (p == NULL)\n+            return;\n \t  if (nb < 3)\n \t    {\n \t      memset (p, '*',nb);\n@@ -903,6 +905,8 @@ write_float (fnode *f, const char *source, int len)\n       if (nb > 0)\n         {\n           p = write_block (nb);\n+          if (p == NULL)\n+            return;\n           memset (p, ' ', nb);\n         }\n     }\n@@ -1277,15 +1281,17 @@ write_integer (const char *source, int length)\n   if(width < digits )\n     width = digits ;\n   p = write_block (width) ;\n+  if (p == NULL)\n+    return;\n   if (no_leading_blank)\n     {\n       memcpy (p, q, digits);\n       memset(p + digits ,' ', width - digits) ;\n     }\n   else\n     {\n-  memset(p ,' ', width - digits) ;\n-  memcpy (p + width - digits, q, digits);\n+      memset(p ,' ', width - digits) ;\n+      memcpy (p + width - digits, q, digits);\n     }\n }\n "}]}