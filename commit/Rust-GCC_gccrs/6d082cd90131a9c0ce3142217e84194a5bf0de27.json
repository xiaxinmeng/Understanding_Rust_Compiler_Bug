{"sha": "6d082cd90131a9c0ce3142217e84194a5bf0de27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwODJjZDkwMTMxYTljMGNlMzE0MjIxN2U4NDE5NGE1YmYwZGUyNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-05T15:04:06Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-06T14:22:54Z"}, "message": "libstdc++: Give ranges::empty() a concrete return type (PR 93978)\n\nThis works around PR 93978 by avoiding having to instantiate the body of\nranges::empty() when checking the constraints of view_interface::operator\nbool().  When ranges::empty() has an auto return type, then we must instantiate\nits body in order to determine whether the requires expression {\nranges::empty(_M_derived()); } is well-formed.  But this means instantiating\nview_interface::empty() and hence view_interface::_M_derived(), all before we've\nyet deduced the return type of join_view::end().  (The reason\nview_interface::operator bool() is needed in join_view::end() in the first place\nis because in this function we perform direct initialization of\njoin_view::_Sentinel from a join_view, and so we try to find a conversion\nsequence from the latter to the former that goes through this conversion\noperator.)\n\nGiving ranges::empty() a concrete return type of bool should be safe according\nto [range.prim.empty]/4 which says \"whenever ranges::empty(E) is a valid\nexpression, it has type bool.\"\n\nThis fixes the test case in PR 93978 when compiling without -Wall, but with -Wall\nthe test case still fails due to the issue described in PR c++/94038, I think.\nI still don't quite understand why the test case doesn't fail without -O.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/93978\n\t* include/bits/range_access.h (__cust_access::_Empty::operator()):\n\tDeclare return type to be bool instead of auto.\n\t* testsuite/std/ranges/adaptors/93978.cc: New test.", "tree": {"sha": "412df4c8feba360c4670204a334a4eb31bde7dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/412df4c8feba360c4670204a334a4eb31bde7dc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d082cd90131a9c0ce3142217e84194a5bf0de27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d082cd90131a9c0ce3142217e84194a5bf0de27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d082cd90131a9c0ce3142217e84194a5bf0de27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d082cd90131a9c0ce3142217e84194a5bf0de27/comments", "author": null, "committer": null, "parents": [{"sha": "4cdcb2c92a128d2a30a6110084b7ab2f9995c683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdcb2c92a128d2a30a6110084b7ab2f9995c683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdcb2c92a128d2a30a6110084b7ab2f9995c683"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "b2e995b4daf8bae1d1a6ab8e379f3e47dd244a2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d082cd90131a9c0ce3142217e84194a5bf0de27", "patch": "@@ -1,3 +1,10 @@\n+2020-03-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/93978\n+\t* include/bits/range_access.h (__cust_access::_Empty::operator()):\n+\tDeclare return type to be bool instead of auto.\n+\t* testsuite/std/ranges/adaptors/93978.cc: New test.\n+\n 2020-03-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94069"}, {"sha": "4dd48bbc6dfb5595f2284419dd9827224c8f5e4e", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=6d082cd90131a9c0ce3142217e84194a5bf0de27", "patch": "@@ -793,7 +793,7 @@ namespace ranges\n       template<typename _Tp>\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n \t|| __eq_iter_empty<_Tp>\n-\tconstexpr auto\n+\tconstexpr bool\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n \t  if constexpr (__member_empty<_Tp>)"}, {"sha": "a0152ec0532f17c6803c5709fbeb2407c83e20ab", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/93978.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F93978.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d082cd90131a9c0ce3142217e84194a5bf0de27/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F93978.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F93978.cc?ref=6d082cd90131a9c0ce3142217e84194a5bf0de27", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-additional-options \"-O\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+#include <vector>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test()\n+{\n+  std::vector<std::string> x = {\"\"};\n+  auto i = std::counted_iterator(x.begin(), 1);\n+  auto r = ranges::subrange{i, std::default_sentinel};\n+  auto v = r | views::join;\n+}"}]}