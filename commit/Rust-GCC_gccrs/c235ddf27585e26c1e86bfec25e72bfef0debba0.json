{"sha": "c235ddf27585e26c1e86bfec25e72bfef0debba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzNWRkZjI3NTg1ZTI2YzFlODZiZmVjMjVlNzJiZmVmMGRlYmJhMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2004-03-24T13:05:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-24T13:05:40Z"}, "message": "mips.h (MASK_FIX_VR4122, [...]): New macros.\n\n\t* config/mips/mips.h (MASK_FIX_VR4122, TARGET_FIX_VR4122): New macros.\n\t(TARGET_SWITCHES): Add -mfix-vr4122-bugs and -mno-fix-vr4122-bugs.\n\t(ASM_SPEC): Pass down -mfix-vr4122-bugs.\n\t* config/mips/mips.c (mips_avoid_hazards): Don't emit whole functions\n\tin .set noreorder and .set nomacro if TARGET_FIX_VR4122.\n\t(mips_init_libfuncs): Use special functions for divsi3 and modsi3\n\tif TARGET_FIX_VR4122.\n\t* config/mips/mips.md (define_attr length): Account for nops inserted\n\tafter macc and dmult when using -mfix-vr4122-bugs.\n\t(umuldi3_highpart, divmodsi4, divmoddi4): Disable if TARGET_FIX_VR4122.\n\t* config/mips/t-vr (LIB2FUNCS_STATIC_EXTRA): Define instead of\n\tLIB2FUNCS_EXTRA.  Add config/mips/vr4122-div.S.\n\t* config/mips/vr4122-div.S: New file.\n\t* doc/invoke.texi: Document -mfix-vr4122-bugs.\n\nCo-Authored-By: Richard Sandiford <rsandifo@redhat.com>\n\nFrom-SVN: r79912", "tree": {"sha": "d684b4f746c0f54995bb8c16528a406782106323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d684b4f746c0f54995bb8c16528a406782106323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c235ddf27585e26c1e86bfec25e72bfef0debba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c235ddf27585e26c1e86bfec25e72bfef0debba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c235ddf27585e26c1e86bfec25e72bfef0debba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c235ddf27585e26c1e86bfec25e72bfef0debba0/comments", "author": null, "committer": null, "parents": [{"sha": "cf768d70b2beb8d16e558094ed518405b3046661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf768d70b2beb8d16e558094ed518405b3046661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf768d70b2beb8d16e558094ed518405b3046661"}], "stats": {"total": 167, "additions": 158, "deletions": 9}, "files": [{"sha": "80a7cd1a0d253cc86c8043a0be85145cbe6fef8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -1,3 +1,21 @@\n+2004-03-24  DJ Delorie  <dj@redhat.com>\n+\t    Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (MASK_FIX_VR4122, TARGET_FIX_VR4122): New macros.\n+\t(TARGET_SWITCHES): Add -mfix-vr4122-bugs and -mno-fix-vr4122-bugs.\n+\t(ASM_SPEC): Pass down -mfix-vr4122-bugs.\n+\t* config/mips/mips.c (mips_avoid_hazards): Don't emit whole functions\n+\tin .set noreorder and .set nomacro if TARGET_FIX_VR4122.\n+\t(mips_init_libfuncs): Use special functions for divsi3 and modsi3\n+\tif TARGET_FIX_VR4122.\n+\t* config/mips/mips.md (define_attr length): Account for nops inserted\n+\tafter macc and dmult when using -mfix-vr4122-bugs.\n+\t(umuldi3_highpart, divmodsi4, divmoddi4): Disable if TARGET_FIX_VR4122.\n+\t* config/mips/t-vr (LIB2FUNCS_STATIC_EXTRA): Define instead of\n+\tLIB2FUNCS_EXTRA.  Add config/mips/vr4122-div.S.\n+\t* config/mips/vr4122-div.S: New file.\n+\t* doc/invoke.texi: Document -mfix-vr4122-bugs.\n+\n 2004-03-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (PROCESSOR_R4130): New processor_type."}, {"sha": "cbd248e022b1464c141091b2c6eaa046900ffe38", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -8721,8 +8721,10 @@ mips_avoid_hazards (void)\n   cfun->machine->ignore_hazard_length_p = true;\n   shorten_branches (get_insns ());\n \n-  /* The profiler code uses assembler macros.  */\n-  cfun->machine->all_noreorder_p = !current_function_profile;\n+  /* The profiler code uses assembler macros.  -mfix-vr4122-bugs\n+     relies on assembler nop insertion.  */\n+  cfun->machine->all_noreorder_p = (!current_function_profile\n+\t\t\t\t    && !TARGET_FIX_VR4122);\n \n   last_insn = 0;\n   hilo_delay = 2;\n@@ -8760,14 +8762,23 @@ mips_reorg (void)\n     }\n }\n \n-/* We need to use a special set of functions to handle hard floating\n-   point code in mips16 mode.  Also, allow for --enable-gofast.  */\n+/* This function does three things:\n+\n+   - Register the special divsi3 and modsi3 functions if -mfix-vr4122-bugs.\n+   - Register the mips16 hardware floating point stubs.\n+   - Register the gofast functions if selected using --enable-gofast.  */\n \n #include \"config/gofast.h\"\n \n static void\n mips_init_libfuncs (void)\n {\n+  if (TARGET_FIX_VR4122)\n+    {\n+      set_optab_libfunc (sdiv_optab, SImode, \"__vr4122_divsi3\");\n+      set_optab_libfunc (smod_optab, SImode, \"__vr4122_modsi3\");\n+    }\n+\n   if (TARGET_MIPS16 && mips16_hard_float)\n     {\n       set_optab_libfunc (add_optab, SFmode, \"__mips16_addsf3\");"}, {"sha": "c47637cc5ebb128ea6a9040391fd95cebeb6d3b1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -173,6 +173,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_FIX_R4000\t   0x01000000\t/* Work around R4000 errata.  */\n #define MASK_FIX_R4400\t   0x02000000\t/* Work around R4400 errata.  */\n #define MASK_FIX_SB1\t   0x04000000\t/* Work around SB-1 errata.  */\n+#define MASK_FIX_VR4122\t   0x08000000   /* Work-around VR4122 errata.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -256,6 +257,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n \t\t\t\t\t/* Work around R4400 errata.  */\n #define TARGET_FIX_R4400\t\t(target_flags & MASK_FIX_R4400)\n+#define TARGET_FIX_VR4122\t(target_flags & MASK_FIX_VR4122)\n \n /* True if we should use NewABI-style relocation operators for\n    symbolic addresses.  This is never true for mips16 code,\n@@ -606,6 +608,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Work around R4400 errata\")},\t\t\t\t\t\\\n   {\"no-fix-r4400\",\t -MASK_FIX_R4400,\t\t\t\t\\\n      N_(\"Don't work around R4400 errata\")},\t\t\t\t\\\n+  {\"fix-vr4122-bugs\",     MASK_FIX_VR4122,\t\t\t\t\\\n+     N_(\"Work around certain VR4122 errata\")},\t\t\t\t\\\n+  {\"no-fix-vr4122-bugs\", -MASK_FIX_VR4122,\t\t\t\t\\\n+     N_(\"Don't work around certain VR4122 errata\")},\t\t\t\\\n   {\"check-zero-division\",-MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n      N_(\"Trap on integer divide by zero\")},\t\t\t\t\\\n   {\"no-check-zero-division\", MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n@@ -1109,6 +1115,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n %{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n %{mips32} %{mips32r2} %{mips64} \\\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n+%{mfix-vr4122-bugs} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n %{membedded-pic} \\"}, {"sha": "21b8277af3f192341d3d471c2175b837bd79e140", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -212,6 +212,21 @@\n \t       (ne (symbol_ref \"TARGET_MIPS16\") (const_int 0)))\n \t  (const_int 8)\n \n+\t  ;; Various VR4122 errata require a nop to be inserted after a macc\n+\t  ;; instruction.  The assembler does this for us, so account for\n+\t  ;; the worst-case length here.\n+\t  (and (eq_attr \"type\" \"imadd\")\n+\t       (ne (symbol_ref \"TARGET_FIX_VR4122\") (const_int 0)))\n+\t  (const_int 8)\n+\n+\t  ;; VR4122 errata MD(4): if there are consecutive dmult instructions,\n+\t  ;; the result of the second one is missed.  The assembler should work\n+\t  ;; around this by inserting a nop after the first dmult.\n+\t  (and (eq_attr \"type\" \"imul\")\n+\t       (and (eq_attr \"mode\" \"DI\")\n+\t\t    (ne (symbol_ref \"TARGET_FIX_VR4122\") (const_int 0))))\n+\t  (const_int 8)\n+\n \t  (eq_attr \"type\" \"idiv\")\n \t  (symbol_ref \"mips_idiv_insns () * 4\")\n \t  ] (const_int 4)))\n@@ -2300,6 +2315,8 @@\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])\n \n+;; Disable this pattern for -mfix-vr4122-bugs.  This is for VR4122 errata\n+;; MD(0), which says that dmultu does not always produce the correct result.\n (define_insn \"umuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n \t(truncate:DI\n@@ -2309,7 +2326,7 @@\n \t   (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n \t  (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000 && !TARGET_FIX_VR4122\"\n   \"dmultu\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"DI\")])\n@@ -2583,14 +2600,16 @@\n                       (const_int 8)\n                       (const_int 4)))])\n \n+;; VR4122 errata MD(A1): signed division instructions do not work correctly\n+;; with negative operands.  We use special libgcc functions instead.\n (define_insn \"divmodsi4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"register_operand\" \"d\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=h\")\n \t(mod:SI (match_dup 1)\n \t\t(match_dup 2)))]\n-  \"\"\n+  \"!TARGET_FIX_VR4122\"\n   { return mips_output_division (\"div\\t$0,%1,%2\", operands); }\n   [(set_attr \"type\"\t\"idiv\")\n    (set_attr \"mode\"\t\"SI\")])\n@@ -2602,7 +2621,7 @@\n    (set (match_operand:DI 3 \"register_operand\" \"=h\")\n \t(mod:DI (match_dup 1)\n \t\t(match_dup 2)))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && !TARGET_FIX_VR4122\"\n   { return mips_output_division (\"ddiv\\t$0,%1,%2\", operands); }\n   [(set_attr \"type\"\t\"idiv\")\n    (set_attr \"mode\"\t\"DI\")])"}, {"sha": "2f0aef406e2f318a8bc1041441784bd8452deb0d", "filename": "gcc/config/mips/t-vr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Ft-vr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Ft-vr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-vr?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -7,7 +7,8 @@ CRTSTUFF_T_CFLAGS = -G 0\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-LIB2FUNCS_EXTRA = $(srcdir)/config/mips/mips16.S\n+LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/mips/mips16.S \\\n+\t\t\t $(srcdir)/config/mips/vr4122-div.S\n EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n # Assemble startup files."}, {"sha": "8936af17d1dc23b32f506ecf88a47aad5e203bde", "filename": "gcc/config/mips/vr4122-div.S", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fvr4122-div.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fconfig%2Fmips%2Fvr4122-div.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvr4122-div.S?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -0,0 +1,75 @@\n+/* Support file for -mfix-vr4122-bugs.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This file contains functions which implement divsi3 and modsi3 for\n+   -mfix-vr4122-bugs.  div and ddiv do not give the correct result\n+   when one of the operands is negative.  */\n+\n+\t.set\tnomips16\n+\n+#define DIV\t\t\t\t\t\t\t\t\\\n+\txor\t$3,$4,$5\t/* t = x ^ y */ ;\t\t\t\\\n+\tli\t$2,0x80000000;\t\t\t\t\t\t\\\n+\t.set\tnoreorder;\t\t\t\t\t\t\\\n+\tbgez\t$4,1f\t\t/* x >= 0 */; \t\t\t\t\\\n+\tand\t$3,$3,$2\t/* t = (x ^ y) & 0x80000000 in delay slot */ ;\\\n+\t.set\treorder;\t\t\t\t\t\t\\\n+\tsubu\t$4,$0,$4\t/* x = -x */ ;\t\t\t\t\\\n+1:; \t\t\t\t\t\t\t\t\t\\\n+\t.set\tnoreorder;\t\t\t\t\t\t\\\n+\tbgez\t$5,2f\t\t/* y >= 0 */ ;\t\t\t\t\\\n+\tnop;\t\t\t\t\t\t\t\t\\\n+\tsubu\t$5,$0,$5\t/* y = -y */ ;\t\t\t\t\\\n+\t.set\treorder;\t\t\t\t\t\t\\\n+2:;\t\t\t\t\t\t\t\t\t\\\n+\tdivu\t$0,$4,$5;\t/* we use divu because of INT_MIN */\t\\\n+\t.set\tnoreorder;\t\t\t\t\t\t\\\n+\tbne\t$5,$0,3f;\t\t\t\t\t\t\\\n+\tnop;\t\t\t\t\t\t\t\t\\\n+\tbreak\t7\t\t/* division on zero y */ ;\t\t\\\n+3:;\t\t\t\t\t\t\t\t\t\\\n+\t.set\treorder;\t\t\t\t\t\t\\\n+\tmflo\t$2\t\t/* r = x / y */ ;\t\t\t\\\n+\t.set\tnoreorder;\t\t\t\t\t\t\\\n+\tbeq\t$3,$0,4f\t/* t == 0 */ ;\t\t\t\t\\\n+\tnop;\t\t\t\t\t\t\t\t\\\n+\tsubu\t$2,$0,$2\t/* r = -r */ ;\t\t\t\t\\\n+\t.set\treorder;\t\t\t\t\t\t\\\n+4:\n+\n+\t.globl\t__vr4122_divsi3\n+\t.ent\t__vr4122_divsi3\n+__vr4122_divsi3:\n+\tDIV\n+\tj\t$31\n+\t.end\t__vr4122_divsi3\n+\n+\t.globl\t__vr4122_modsi3\n+\t.ent\t__vr4122_modsi3\n+__vr4122_modsi3:\n+\tmove\t$6,$4\t\t# x1 = x\n+\tmove\t$7,$5\t\t# y1 = y\n+\tDIV\n+\tmult\t$2,$7\t\t# r = r * y1\n+\tmflo\t$2\n+\t.set\tnoreorder\n+\tj\t$31\n+\tsubu\t$2,$6,$2\t# r = x1 - r  in delay slot\n+\t.end\t__vr4122_modsi3"}, {"sha": "8c6e4400376dccf08206c5f1f040084d42175db5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c235ddf27585e26c1e86bfec25e72bfef0debba0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c235ddf27585e26c1e86bfec25e72bfef0debba0", "patch": "@@ -479,7 +479,7 @@ in the following sections.\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n -mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 @gol\n--mfix-sb1  -mno-fix-sb1 @gol\n+-mfix-vr4122-bugs  -mno-fix-vr4122-bugs  -mfix-sb1  -mno-fix-sb1 @gol\n -mflush-func=@var{func}  -mno-flush-func @gol\n -mbranch-likely  -mno-branch-likely}\n \n@@ -8092,6 +8092,24 @@ A double-word or a variable shift may give an incorrect result if executed\n immediately after starting an integer division.\n @end itemize\n \n+@item -mfix-vr4122-bugs\n+@itemx -mno-fix-vr4122-bugs\n+@opindex mfix-vr4122-bugs\n+Work around certain VR4122 errata:\n+@itemize @minus\n+@item\n+@code{dmultu} does not always produce the correct result.\n+@item\n+@code{div} and @code{ddiv} do not always produce the correct result if one\n+of the operands is negative.\n+@end itemize\n+The workarounds for the division errata rely on special functions in\n+@file{libgcc.a}.  At present, these functions are only provided by\n+the @code{mips64vr*-elf} configurations.\n+\n+Other VR4122 errata require a nop to be inserted between certain pairs of\n+instructions.  These errata are handled by the assembler, not by GCC itself.\n+\n @item -mfix-sb1\n @itemx -mno-fix-sb1\n @opindex mfix-sb1"}]}