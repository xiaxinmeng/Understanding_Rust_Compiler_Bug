{"sha": "8f888468542a71fd6324f2e6668e7f968000f641", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4ODg0Njg1NDJhNzFmZDYzMjRmMmU2NjY4ZTdmOTY4MDAwZjY0MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-19T23:26:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-19T23:26:19Z"}, "message": "statement.cc no longer includes gcc headers.\n\n\t* go-system.h: Include \"intl.h\".\n\t* Make-lang.in (GO_SYSTEM_H): Add intl.h.\n\t(go/statements.o): Remove dependencies on intl.h $(TREE_H)\n\t$(GIMPLE_H) convert.h tree-iterator.h $(TREE_FLOW_H) $(REAL_H).\n\nFrom-SVN: r172743", "tree": {"sha": "06f3a171c081989af4bcc813c20e060dca96fa6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f3a171c081989af4bcc813c20e060dca96fa6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f888468542a71fd6324f2e6668e7f968000f641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f888468542a71fd6324f2e6668e7f968000f641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f888468542a71fd6324f2e6668e7f968000f641", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f888468542a71fd6324f2e6668e7f968000f641/comments", "author": null, "committer": null, "parents": [{"sha": "0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f"}], "stats": {"total": 161, "additions": 64, "deletions": 97}, "files": [{"sha": "5e8ad86821be5ea34868f0234d9950fea6b3ad19", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=8f888468542a71fd6324f2e6668e7f968000f641", "patch": "@@ -1,3 +1,10 @@\n+2011-04-19  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-system.h: Include \"intl.h\".\n+\t* Make-lang.in (GO_SYSTEM_H): Add intl.h.\n+\t(go/statements.o): Remove dependencies on intl.h $(TREE_H)\n+\t$(GIMPLE_H) convert.h tree-iterator.h $(TREE_FLOW_H) $(REAL_H).\n+\n 2011-04-19  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::temporary_variable): New function."}, {"sha": "6dc0895865ec6128d69f516a607ecc11e46dd690", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=8f888468542a71fd6324f2e6668e7f968000f641", "patch": "@@ -211,7 +211,7 @@ go.stagefeedback: stagefeedback-start\n \t-mv go/*$(objext) stagefeedback/go\n \n GO_SYSTEM_H = go/go-system.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(DIAGNOSTIC_CORE_H) $(INPUT_H)\n+\t$(DIAGNOSTIC_CORE_H) $(INPUT_H) intl.h\n \n GO_C_H = go/go-c.h $(MACHMODE_H)\n GO_LEX_H = go/gofrontend/lex.h go/gofrontend/operator.h\n@@ -281,8 +281,7 @@ go/parse.o: go/gofrontend/parse.cc $(GO_SYSTEM_H) $(GO_LEX_H) $(GO_GOGO_H) \\\n go/runtime.o: go/gofrontend/runtime.cc $(GO_SYSTEM_H) $(GO_GOGO_H) \\\n \t$(GO_TYPES_H) $(GO_EXPRESSIONS_H) $(GO_RUNTIME_H) \\\n \tgo/gofrontend/runtime.def\n-go/statements.o: go/gofrontend/statements.cc $(GO_SYSTEM_H) intl.h $(TREE_H) \\\n-\t$(GIMPLE_H) convert.h tree-iterator.h $(TREE_FLOW_H) $(REAL_H) \\\n+go/statements.o: go/gofrontend/statements.cc $(GO_SYSTEM_H) \\\n \t$(GO_C_H) $(GO_TYPES_H) $(GO_EXPRESSIONS_H) $(GO_GOGO_H) \\\n \t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_STATEMENTS_H)\n go/types.o: go/gofrontend/types.cc $(GO_SYSTEM_H) $(TOPLEV_H) intl.h $(TREE_H) \\"}, {"sha": "75f392543777661316a9b4bac0d30f3cc0762a3c", "filename": "gcc/go/go-system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgo-system.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgo-system.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-system.h?ref=8f888468542a71fd6324f2e6668e7f968000f641", "patch": "@@ -1,5 +1,5 @@\n // go-system.h -- Go frontend inclusion of gcc header files   -*- C++ -*-\n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n \n // This file is part of GCC.\n \n@@ -145,6 +145,7 @@ extern \"C\"\n \n #include \"diagnostic-core.h\"\t/* For error_at and friends.  */\n #include \"input.h\"\t\t/* For source_location.  */\n+#include \"intl.h\"\t\t/* For _().  */\n \n #ifndef ENABLE_BUILD_WITH_CXX\n } // End extern \"C\""}, {"sha": "872dcb7b196ee06265f3a73be0e09c12b7d8ee2e", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 49, "deletions": 79, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=8f888468542a71fd6324f2e6668e7f968000f641", "patch": "@@ -8,23 +8,6 @@\n \n #include <gmp.h>\n \n-#ifndef ENABLE_BUILD_WITH_CXX\n-extern \"C\"\n-{\n-#endif\n-\n-#include \"intl.h\"\n-#include \"tree.h\"\n-#include \"gimple.h\"\n-#include \"convert.h\"\n-#include \"tree-iterator.h\"\n-#include \"tree-flow.h\"\n-#include \"real.h\"\n-\n-#ifndef ENABLE_BUILD_WITH_CXX\n-}\n-#endif\n-\n #include \"go-c.h\"\n #include \"types.h\"\n #include \"expressions.h\"\n@@ -148,8 +131,8 @@ Statement::thunk_statement()\n   return ret;\n }\n \n-// Get a tree for a Statement.  This is really done by the child\n-// class.\n+// Convert a Statement to the backend representation.  This is really\n+// done by the child class.\n \n Bstatement*\n Statement::get_backend(Translate_context* context)\n@@ -159,17 +142,6 @@ Statement::get_backend(Translate_context* context)\n   return this->do_get_backend(context);\n }\n \n-// Build tree nodes and set locations.\n-\n-tree\n-Statement::build_stmt_1(int tree_code_value, tree node)\n-{\n-  tree ret = build1(static_cast<tree_code>(tree_code_value),\n-\t\t    void_type_node, node);\n-  SET_EXPR_LOCATION(ret, this->location_);\n-  return ret;\n-}\n-\n // Note that this statement is erroneous.  This is called by children\n // when they discover an error.\n \n@@ -245,7 +217,7 @@ Variable_declaration_statement::do_traverse_assignments(\n   return true;\n }\n \n-// Return the tree for a variable declaration.\n+// Convert a variable declaration to the backend representation.\n \n Bstatement*\n Variable_declaration_statement::do_get_backend(Translate_context* context)\n@@ -254,40 +226,48 @@ Variable_declaration_statement::do_get_backend(Translate_context* context)\n   Bvariable* bvar = this->var_->get_backend_variable(context->gogo(),\n \t\t\t\t\t\t     context->function());\n   tree init = var->get_init_tree(context->gogo(), context->function());\n-  Bexpression* binit = init == NULL_TREE ? NULL : tree_to_expr(init);\n+  Bexpression* binit = init == NULL ? NULL : tree_to_expr(init);\n+\n   if (!var->is_in_heap())\n     {\n       gcc_assert(binit != NULL);\n       return context->backend()->init_statement(bvar, binit);\n     }\n-  else\n+\n+  // Something takes the address of this variable, so the value is\n+  // stored in the heap.  Initialize it to newly allocated memory\n+  // space, and assign the initial value to the new space.\n+  source_location loc = this->location();\n+  Named_object* newfn = context->gogo()->lookup_global(\"new\");\n+  gcc_assert(newfn != NULL && newfn->is_function_declaration());\n+  Expression* func = Expression::make_func_reference(newfn, NULL, loc);\n+  Expression_list* params = new Expression_list();\n+  params->push_back(Expression::make_type(var->type(), loc));\n+  Expression* call = Expression::make_call(func, params, false, loc);\n+  context->gogo()->lower_expression(context->function(), &call);\n+  Temporary_statement* temp = Statement::make_temporary(NULL, call, loc);\n+  Bstatement* btemp = temp->get_backend(context);\n+\n+  Bstatement* set = NULL;\n+  if (binit != NULL)\n     {\n-      // Something takes the address of this variable, so the value is\n-      // stored in the heap.  Initialize it to newly allocated memory\n-      // space, and assign the initial value to the new space.\n-      source_location loc = this->location();\n-      tree decl = var_to_tree(bvar);\n-      tree decl_type = TREE_TYPE(decl);\n-      gcc_assert(POINTER_TYPE_P(decl_type));\n-      tree size = TYPE_SIZE_UNIT(TREE_TYPE(decl_type));\n-      tree space = context->gogo()->allocate_memory(var->type(), size, loc);\n-      if (binit != NULL)\n-\tspace = save_expr(space);\n-      space = fold_convert_loc(loc, decl_type, space);\n-      Bstatement* s1 = context->backend()->init_statement(bvar,\n-\t\t\t\t\t\t\t  tree_to_expr(space));\n-      if (binit == NULL)\n-\treturn s1;\n-      else\n-\t{\n-\t  tree indir = build_fold_indirect_ref_loc(loc, space);\n-\t  Bexpression* bindir = tree_to_expr(indir);\n-\t  Bstatement* s2 = context->backend()->assignment_statement(bindir,\n-\t\t\t\t\t\t\t\t    binit,\n-\t\t\t\t\t\t\t\t    loc);\n-\t  return context->backend()->compound_statement(s1, s2);\n-\t}\n+      Expression* e = Expression::make_temporary_reference(temp, loc);\n+      e = Expression::make_unary(OPERATOR_MULT, e, loc);\n+      Bexpression* be = tree_to_expr(e->get_tree(context));\n+      set = context->backend()->assignment_statement(be, binit, loc);\n     }\n+\n+  Expression* ref = Expression::make_temporary_reference(temp, loc);\n+  Bexpression* bref = tree_to_expr(ref->get_tree(context));\n+  Bstatement* sinit = context->backend()->init_statement(bvar, bref);\n+\n+  std::vector<Bstatement*> stats;\n+  stats.reserve(3);\n+  stats.push_back(btemp);\n+  if (set != NULL)\n+    stats.push_back(set);\n+  stats.push_back(sinit);\n+  return context->backend()->statement_list(stats);\n }\n \n // Make a variable declaration.\n@@ -379,7 +359,7 @@ Temporary_statement::do_check_types(Gogo*)\n     }\n }\n \n-// Return a tree.\n+// Convert to backend representation.\n \n Bstatement*\n Temporary_statement::do_get_backend(Translate_context* context)\n@@ -535,29 +515,18 @@ Assignment_statement::do_check_types(Gogo*)\n     this->set_is_error();\n }\n \n-// Build a tree for an assignment statement.\n+// Convert an assignment statement to the backend representation.\n \n Bstatement*\n Assignment_statement::do_get_backend(Translate_context* context)\n {\n   tree rhs_tree = this->rhs_->get_tree(context);\n-  if (rhs_tree == error_mark_node)\n-    return context->backend()->error_statement();\n-\n   if (this->lhs_->is_sink_expression())\n     return context->backend()->expression_statement(tree_to_expr(rhs_tree));\n-\n   tree lhs_tree = this->lhs_->get_tree(context);\n-\n-  if (lhs_tree == error_mark_node)\n-    return context->backend()->error_statement();\n-\n   rhs_tree = Expression::convert_for_assignment(context, this->lhs_->type(),\n \t\t\t\t\t\tthis->rhs_->type(), rhs_tree,\n \t\t\t\t\t\tthis->location());\n-  if (rhs_tree == error_mark_node)\n-    return context->backend()->error_statement();\n-\n   return context->backend()->assignment_statement(tree_to_expr(lhs_tree),\n \t\t\t\t\t\t  tree_to_expr(rhs_tree),\n \t\t\t\t\t\t  this->location());\n@@ -2190,7 +2159,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n   gogo->finish_function(location);\n }\n \n-// Get the function and argument trees.\n+// Get the function and argument expressions.\n \n bool\n Thunk_statement::get_fn_and_arg(Expression** pfn, Expression** parg)\n@@ -2545,7 +2514,7 @@ Goto_statement::do_check_types(Gogo*)\n     }\n }\n \n-// Return the tree for the goto statement.\n+// Convert the goto statement to the backend representation.\n \n Bstatement*\n Goto_statement::do_get_backend(Translate_context* context)\n@@ -2608,7 +2577,8 @@ Label_statement::do_traverse(Traverse*)\n   return TRAVERSE_CONTINUE;\n }\n \n-// Return a tree defining this label.\n+// Return the backend representation of the statement defining this\n+// label.\n \n Bstatement*\n Label_statement::do_get_backend(Translate_context* context)\n@@ -2738,7 +2708,7 @@ If_statement::do_may_fall_through() const\n \t  || this->else_block_->may_fall_through());\n }\n \n-// Get tree.\n+// Get the backend representation.\n \n Bstatement*\n If_statement::do_get_backend(Translate_context* context)\n@@ -3750,7 +3720,7 @@ Send_statement::do_check_types(Gogo*)\n     }\n }\n \n-// Get a tree for a send statement.\n+// Convert a send statement to the backend representation.\n \n Bstatement*\n Send_statement::do_get_backend(Translate_context* context)\n@@ -4034,7 +4004,7 @@ Select_clauses::Select_clause::may_fall_through() const\n   return this->statements_->may_fall_through();\n }\n \n-// Return a tree for the statements to execute.\n+// Return the backend representation for the statements to execute.\n \n Bstatement*\n Select_clauses::Select_clause::get_statements_backend(\n@@ -4287,7 +4257,7 @@ Select_clauses::get_backend(Translate_context* context,\n   return context->backend()->statement_list(statements);\n }\n \n-// Add the tree for CLAUSE to STMT_LIST.\n+// Add CLAUSE to CASES/CLAUSES at INDEX.\n \n void\n Select_clauses::add_clause_backend(\n@@ -4350,7 +4320,7 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n   return Statement::make_block_statement(b, this->location());\n }\n \n-// Return the tree for a select statement.\n+// Return the backend representation for a select statement.\n \n Bstatement*\n Select_statement::do_get_backend(Translate_context* context)"}, {"sha": "ebdeb2d41701c9f2f0b8511c4d7f41f92a1ed5da", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f888468542a71fd6324f2e6668e7f968000f641/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=8f888468542a71fd6324f2e6668e7f968000f641", "patch": "@@ -424,12 +424,6 @@ class Statement\n   int\n   traverse_type(Traverse*, Type*);\n \n-  // Build a tree node with one operand, setting the location.  The\n-  // first operand really has type \"enum tree_code\", but that enum is\n-  // not defined here.\n-  tree\n-  build_stmt_1(int tree_code_value, tree);\n-\n   // For children to call when they detect that they are in error.\n   void\n   set_is_error();\n@@ -744,7 +738,7 @@ class Select_clauses\n     bool\n     may_fall_through() const;\n \n-    // Return a tree for the statements to execute.\n+    // Convert the statements to the backend representation.\n     Bstatement*\n     get_statements_backend(Translate_context*);\n \n@@ -865,7 +859,7 @@ class Thunk_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n-  // Return the function and argument trees for the call.\n+  // Return the function and argument for the call.\n   bool\n   get_fn_and_arg(Expression** pfn, Expression** parg);\n \n@@ -1168,8 +1162,8 @@ class Case_clauses\n \t      std::vector<Bstatement*>* all_statements) const;\n \n  private:\n-  // For a constant tree we need to keep a record of constants we have\n-  // already seen.  Note that INTEGER_CST trees are interned.\n+  // For a constant switch we need to keep a record of constants we\n+  // have already seen.\n   class Hash_integer_value;\n   class Eq_integer_value;\n   typedef Unordered_set_hash(Expression*, Hash_integer_value,\n@@ -1439,10 +1433,6 @@ class Type_switch_statement : public Statement\n   { gcc_unreachable(); }\n \n  private:\n-  // Get the type descriptor.\n-  tree\n-  get_type_descriptor(Translate_context*, Type*, tree);\n-\n   // The variable holding the value we are switching on.\n   Named_object* var_;\n   // The expression we are switching on if there is no variable."}]}