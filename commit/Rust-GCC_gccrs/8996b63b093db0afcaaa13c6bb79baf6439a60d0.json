{"sha": "8996b63b093db0afcaaa13c6bb79baf6439a60d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5NmI2M2IwOTNkYjBhZmNhYWExM2M2YmI3OWJhZjY0MzlhNjBkMA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@google.com", "date": "2015-04-29T22:50:31Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "2015-04-29T22:50:31Z"}, "message": "re PR libstdc++/65839 (xmethods need updating once gdb decides how to fix 18285)\n\n\tPR libstdc++/65839\n\t* python/libstdcxx/v6/xmethods.py (get_bool_type): New function.\n\tReplace all lookups of \"bool\" with this.\n\t(get_std_size_type): New function.  Replace all lookups of std::size_t\n\twith this.\n\t(*Worker): New method get_result_type.\n\t(DequeWorkerBase.__init__): New arg val_type.  All callers updated.\n\t(ListWorkerBase.__init__): New arg val_type.  All callers updated.\n\t(UniquePtrGetWorker.__init__): New arg elem_type.  All callers updated.\n\tDelete setting of name, enabled.\n\t(UniquePtrDerefWorker.__init__): New arg elem_type.  All callers\n\tupdated.  Delete setting of name.\n\t(UniquePtrMethodsMatcher): Rewrite for consistency with all other\n\tlibstdc++ xmethod matchers.\n\t* testsuite/libstdc++-xmethods/array.cc: Add whatis tests.\n\t* testsuite/libstdc++-xmethods/associative-containers.cc: Ditto.\n\t* testsuite/libstdc++-xmethods/deque.cc: Ditto.\n\t* testsuite/libstdc++-xmethods/forwardlist.cc: Ditto.\n\t* testsuite/libstdc++-xmethods/list.cc: Ditto.\n\t* testsuite/libstdc++-xmethods/unique_ptr.cc: Ditto.\n\t* testsuite/libstdc++-xmethods/vector.cc: Ditto.\n\nFrom-SVN: r222599", "tree": {"sha": "048767fd59972361cef4a8feef8ae8c8577a891a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/048767fd59972361cef4a8feef8ae8c8577a891a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8996b63b093db0afcaaa13c6bb79baf6439a60d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8996b63b093db0afcaaa13c6bb79baf6439a60d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8996b63b093db0afcaaa13c6bb79baf6439a60d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8996b63b093db0afcaaa13c6bb79baf6439a60d0/comments", "author": null, "committer": null, "parents": [{"sha": "1dea42c94bf801399e23d7e952fa058f3541de4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dea42c94bf801399e23d7e952fa058f3541de4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dea42c94bf801399e23d7e952fa058f3541de4c"}], "stats": {"total": 198, "additions": 177, "deletions": 21}, "files": [{"sha": "5b509f79cf24a0b0d30c7ca33b8922fd580feac7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -1,3 +1,27 @@\n+2015-04-29  Doug Evans  <dje@google.com>\n+\n+\tPR libstdc++/65839\n+\t* python/libstdcxx/v6/xmethods.py (get_bool_type): New function.\n+\tReplace all lookups of \"bool\" with this.\n+\t(get_std_size_type): New function.  Replace all lookups of std::size_t\n+\twith this.\n+\t(*Worker): New method get_result_type.\n+\t(DequeWorkerBase.__init__): New arg val_type.  All callers updated.\n+\t(ListWorkerBase.__init__): New arg val_type.  All callers updated.\n+\t(UniquePtrGetWorker.__init__): New arg elem_type.  All callers updated.\n+\tDelete setting of name, enabled.\n+\t(UniquePtrDerefWorker.__init__): New arg elem_type.  All callers\n+\tupdated.  Delete setting of name.\n+\t(UniquePtrMethodsMatcher): Rewrite for consistency with all other\n+\tlibstdc++ xmethod matchers.\n+\t* testsuite/libstdc++-xmethods/array.cc: Add whatis tests.\n+\t* testsuite/libstdc++-xmethods/associative-containers.cc: Ditto.\n+\t* testsuite/libstdc++-xmethods/deque.cc: Ditto.\n+\t* testsuite/libstdc++-xmethods/forwardlist.cc: Ditto.\n+\t* testsuite/libstdc++-xmethods/list.cc: Ditto.\n+\t* testsuite/libstdc++-xmethods/unique_ptr.cc: Ditto.\n+\t* testsuite/libstdc++-xmethods/vector.cc: Ditto.\n+\n 2015-04-29  Doug Evans  <dje@google.com>\n \n \tUse consistent naming for value type attributes."}, {"sha": "6db0e163e9835d3f7bd239147b4791c67353bd6c", "filename": "libstdc++-v3/python/libstdcxx/v6/xmethods.py", "status": "modified", "additions": 114, "deletions": 21, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -21,6 +21,12 @@\n \n matcher_name_prefix = 'libstdc++::'\n \n+def get_bool_type():\n+    return gdb.lookup_type('bool')\n+\n+def get_std_size_type():\n+    return gdb.lookup_type('std::size_t')\n+\n class LibStdCxxXMethod(gdb.xmethod.XMethod):\n     def __init__(self, name, worker_class):\n         gdb.xmethod.XMethod.__init__(self, name)\n@@ -44,6 +50,9 @@ def __init__(self, val_type, size):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_std_size_type()\n+\n     def __call__(self, obj):\n         return self._size\n \n@@ -54,6 +63,9 @@ def __init__(self, val_type, size):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         return (int(self._size) == 0)\n \n@@ -64,6 +76,9 @@ def __init__(self, val_type, size):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         if int(self._size) > 0:\n             return obj['_M_elems'][0]\n@@ -77,6 +92,9 @@ def __init__(self, val_type, size):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         if int(self._size) > 0:\n             return obj['_M_elems'][self._size - 1]\n@@ -88,7 +106,10 @@ def __init__(self, val_type, size):\n         ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, index):\n+        return self._val_type\n \n     def __call__(self, obj, index):\n         if int(index) >= int(self._size):\n@@ -101,7 +122,10 @@ def __init__(self, val_type, size):\n         ArrayWorkerBase.__init__(self, val_type, size)\n \n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, index):\n+        return self._val_type\n \n     def __call__(self, obj, index):\n         if int(self._size) > 0:\n@@ -140,6 +164,7 @@ def match(self, class_type, method_name):\n \n class DequeWorkerBase(gdb.xmethod.XMethodWorker):\n     def __init__(self, val_type):\n+        self._val_type = val_type\n         self._bufsize = (512 / val_type.sizeof) or 1\n \n     def size(self, obj):\n@@ -158,6 +183,9 @@ class DequeEmptyWorker(DequeWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         return (obj['_M_impl']['_M_start']['_M_cur'] ==\n                 obj['_M_impl']['_M_finish']['_M_cur'])\n@@ -166,20 +194,29 @@ class DequeSizeWorker(DequeWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_std_size_type()\n+\n     def __call__(self, obj):\n         return self.size(obj)\n \n class DequeFrontWorker(DequeWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         return obj['_M_impl']['_M_start']['_M_cur'][0]\n \n class DequeBackWorker(DequeWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         if (obj['_M_impl']['_M_finish']['_M_cur'] ==\n             obj['_M_impl']['_M_finish']['_M_first']):\n@@ -190,14 +227,20 @@ def __call__(self, obj):\n \n class DequeSubscriptWorker(DequeWorkerBase):\n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, subscript):\n+        return self._val_type\n \n     def __call__(self, obj, subscript):\n         return self.index(obj, subscript)\n \n class DequeAtWorker(DequeWorkerBase):\n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, index):\n+        return self._val_type\n \n     def __call__(self, obj, index):\n         deque_size = int(self.size(obj))\n@@ -240,10 +283,16 @@ def get_arg_types(self):\n         return None\n \n class ForwardListEmptyWorker(ForwardListWorkerBase):\n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         return obj['_M_impl']['_M_head']['_M_next'] == 0\n \n class ForwardListFrontWorker(ForwardListWorkerBase):\n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         node = obj['_M_impl']['_M_head']['_M_next'].cast(self._node_type)\n         val_address = node['_M_storage']['_M_storage'].address\n@@ -272,13 +321,17 @@ def match(self, class_type, method_name):\n # Xmethods for std::list\n \n class ListWorkerBase(gdb.xmethod.XMethodWorker):\n-    def __init__(self, node_type):\n+    def __init__(self, val_type, node_type):\n+        self._val_type = val_type\n         self._node_type = node_type\n \n     def get_arg_types(self):\n         return None\n \n class ListEmptyWorker(ListWorkerBase):\n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         base_node = obj['_M_impl']['_M_node']\n         if base_node['_M_next'] == base_node.address:\n@@ -287,6 +340,9 @@ def __call__(self, obj):\n             return False\n \n class ListSizeWorker(ListWorkerBase):\n+    def get_result_type(self, obj):\n+        return get_std_size_type()\n+\n     def __call__(self, obj):\n         begin_node = obj['_M_impl']['_M_node']['_M_next']\n         end_node = obj['_M_impl']['_M_node'].address\n@@ -297,11 +353,17 @@ def __call__(self, obj):\n         return size\n \n class ListFrontWorker(ListWorkerBase):\n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         node = obj['_M_impl']['_M_node']['_M_next'].cast(self._node_type)\n         return node['_M_data']\n \n class ListBackWorker(ListWorkerBase):\n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         prev_node = obj['_M_impl']['_M_node']['_M_prev'].cast(self._node_type)\n         return prev_node['_M_data']\n@@ -324,8 +386,9 @@ def match(self, class_type, method_name):\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n             return None\n+        val_type = class_type.template_argument(0)\n         node_type = gdb.lookup_type(str(class_type) + '::_Node').pointer()\n-        return method.worker_class(node_type)\n+        return method.worker_class(val_type, node_type)\n \n # Xmethods for std::vector\n \n@@ -357,33 +420,48 @@ class VectorEmptyWorker(VectorWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         return int(self.size(obj)) == 0\n \n class VectorSizeWorker(VectorWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return get_std_size_type()\n+\n     def __call__(self, obj):\n         return self.size(obj)\n \n class VectorFrontWorker(VectorWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         return self.get(obj, 0)\n \n class VectorBackWorker(VectorWorkerBase):\n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._val_type\n+\n     def __call__(self, obj):\n         return self.get(obj, int(self.size(obj)) - 1)\n \n class VectorAtWorker(VectorWorkerBase):\n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, index):\n+        return self._val_type\n \n     def __call__(self, obj, index):\n         size = int(self.size(obj))\n@@ -394,7 +472,10 @@ def __call__(self, obj, index):\n \n class VectorSubscriptWorker(VectorWorkerBase):\n     def get_arg_types(self):\n-        return gdb.lookup_type('std::size_t')\n+        return get_std_size_type()\n+\n+    def get_result_type(self, obj, subscript):\n+        return self._val_type\n \n     def __call__(self, obj, subscript):\n         return self.get(obj, int(subscript))\n@@ -438,10 +519,16 @@ def get_arg_types(self):\n         return None\n \n class AssociativeContainerEmptyWorker(AssociativeContainerWorkerBase):\n+    def get_result_type(self, obj):\n+        return get_bool_type()\n+\n     def __call__(self, obj):\n         return int(self.node_count(obj)) == 0\n \n class AssociativeContainerSizeWorker(AssociativeContainerWorkerBase):\n+    def get_result_type(self, obj):\n+        return get_std_size_type()\n+\n     def __call__(self, obj):\n         return self.node_count(obj)\n \n@@ -469,20 +556,24 @@ def match(self, class_type, method_name):\n # Xmethods for std::unique_ptr\n \n class UniquePtrGetWorker(gdb.xmethod.XMethodWorker):\n-    def __init__(self):\n-        self.name = 'get'\n-        self.enabled = True\n+    def __init__(self, elem_type):\n+        self._elem_type = elem_type\n \n     def get_arg_types(self):\n         return None\n \n+    def get_result_type(self, obj):\n+        return self._elem_type.pointer()\n+\n     def __call__(self, obj):\n         return obj['_M_t']['_M_head_impl']\n \n class UniquePtrDerefWorker(UniquePtrGetWorker):\n-    def __init__(self):\n-        UniquePtrGetWorker.__init__(self)\n-        self.name = 'operator*'\n+    def __init__(self, elem_type):\n+        UniquePtrGetWorker.__init__(self, elem_type)\n+\n+    def get_result_type(self, obj):\n+        return self._elem_type\n \n     def __call__(self, obj):\n         return UniquePtrGetWorker.__call__(self, obj).dereference()\n@@ -491,17 +582,19 @@ class UniquePtrMethodsMatcher(gdb.xmethod.XMethodMatcher):\n     def __init__(self):\n         gdb.xmethod.XMethodMatcher.__init__(self,\n                                             matcher_name_prefix + 'unique_ptr')\n-        self._get_worker = UniquePtrGetWorker()\n-        self._deref_worker = UniquePtrDerefWorker()\n-        self.methods = [self._get_worker, self._deref_worker]\n+        self._method_dict = {\n+            'get': LibStdCxxXMethod('get', UniquePtrGetWorker),\n+            'operator*': LibStdCxxXMethod('operator*', UniquePtrDerefWorker),\n+        }\n+        self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n         if not re.match('^std::unique_ptr<.*>$', class_type.tag):\n             return None\n-        if method_name == 'operator*' and self._deref_worker.enabled:\n-            return self._deref_worker\n-        elif method_name == 'get' and self._get_worker.enabled:\n-            return self._get_worker\n+        method = self._method_dict.get(method_name)\n+        if method is None or not method.enabled:\n+            return None\n+        return method.worker_class(class_type.template_argument(0))\n \f\n def register_libstdcxx_xmethods(locus):\n     gdb.xmethod.register_xmethod_matcher(locus, ArrayMethodsMatcher())"}, {"sha": "dfe61467485af51036b8a949cbcf788d338159d7", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/array.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Farray.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -40,6 +40,13 @@ main ()\n // { dg-final { note-test a\\[4\\] 104 } }\n // { dg-final { note-test a\\[9\\] 109 } }\n \n+// { dg-final { whatis-test a.size() std::size_t } }\n+// { dg-final { whatis-test a.empty() bool } }\n+// { dg-final { whatis-test a.front() int } }\n+// { dg-final { whatis-test a.back() int } }\n+// { dg-final { whatis-test a.at(5) int } }\n+// { dg-final { whatis-test a\\[0\\] int } }\n+\n   return 0;  // Mark SPOT\n }\n "}, {"sha": "2f04b240f4e6517cb5f94f5634eb4c36f3101fd4", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/associative-containers.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fassociative-containers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fassociative-containers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fassociative-containers.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -73,6 +73,9 @@ main ()\n // { dg-final { note-test umm.empty() false } }\n // { dg-final { note-test umm1.empty() true } }\n \n+// { dg-final { whatis-test s.size() std::size_t } }\n+// { dg-final { whatis-test s.empty() bool } }\n+\n   return 0;  // Mark SPOT\n }\n "}, {"sha": "5890dd858c1b83cde882238fef03213ec6fef8c0", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/deque.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fdeque.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fdeque.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fdeque.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -61,6 +61,12 @@ main ()\n // { dg-final { note-test q3\\[q3_size/2\\]==(300+q3_size/2) true } }\n // { dg-final { note-test q3\\[q3_size-1]==(300+q3_size-1) true } }\n \n+// { dg-final { whatis-test q0.empty() bool } }\n+// { dg-final { whatis-test q0.size() std::size_t } }\n+// { dg-final { whatis-test q1.front() int } }\n+// { dg-final { whatis-test q1.back() int } }\n+// { dg-final { whatis-test q3\\[0\\] int } }\n+\n   return 0;  // Mark SPOT\n }\n "}, {"sha": "2e8b7ac0eb4fc6be923c26142dd3221a0c63c43b", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/forwardlist.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fforwardlist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fforwardlist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fforwardlist.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -34,6 +34,9 @@ main ()\n // { dg-final { note-test l1.empty() false } }\n // { dg-final { note-test l1.front() 11011 } }\n \n+// { dg-final { whatis-test l1.empty() bool } }\n+// { dg-final { whatis-test l1.front() int } }\n+\n   return 0;  // Mark SPOT\n }\n "}, {"sha": "050f75b807eb288eca761c00387ed391c9b24a38", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/list.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Flist.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -38,6 +38,10 @@ main ()\n // { dg-final { note-test l1.front() 123 } }\n // { dg-final { note-test l1.back() 789 } }\n \n+// { dg-final { whatis-test l1.empty() bool } }\n+// { dg-final { whatis-test l1.size() std::size_t } }\n+// { dg-final { whatis-test l1.front() int } }\n+// { dg-final { whatis-test l1.back() int } }\n \n   return 0;  // Mark SPOT\n }"}, {"sha": "5d59b551f52bce619c69fc2f1265dce25cd4e646", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/unique_ptr.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -30,6 +30,9 @@ main ()\n // { dg-final { note-test *p 10 } }\n // { dg-final { regexp-test p.get() 0x.* } }\n \n+// { dg-final { whatis-test *p int } }\n+// { dg-final { whatis-test p.get() \"int \\*\" } }\n+\n   return 0;  // Mark SPOT\n }\n "}, {"sha": "896728696e0c0b711012cd7a4f46fd905117d048", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/vector.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8996b63b093db0afcaaa13c6bb79baf6439a60d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc?ref=8996b63b093db0afcaaa13c6bb79baf6439a60d0", "patch": "@@ -83,6 +83,19 @@ main ()\n // { dg-final { note-test bv3.at(63) true } }\n // { dg-final { note-test bv3.at(64) false } }\n \n+// { dg-final { whatis-test v0.empty() bool } }\n+// { dg-final { whatis-test v0.size() std::size_t } }\n+// { dg-final { whatis-test v1.front() int } }\n+// { dg-final { whatis-test v1.back() int } }\n+// { dg-final { whatis-test v1\\[0\\] int } }\n+// { dg-final { whatis-test v1.at(1) int } }\n+// { dg-final { whatis-test bv0.empty() bool } }\n+// { dg-final { whatis-test bv0.size() std::size_t } }\n+// { dg-final { whatis-test bv1.front() bool } }\n+// { dg-final { whatis-test bv1.back() bool } }\n+// { dg-final { whatis-test bv1\\[0\\] bool } }\n+// { dg-final { whatis-test bv1.at(1) bool } }\n+\n   return 0;  // Mark SPOT\n }\n "}]}