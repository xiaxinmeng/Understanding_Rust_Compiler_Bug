{"sha": "f0c7367b8802c47efaad87b1f2126fe6350d8b47", "node_id": "C_kwDOANBUbNoAKGYwYzczNjdiODgwMmM0N2VmYWFkODdiMWYyMTI2ZmU2MzUwZDhiNDc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-12T18:17:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-12T18:17:44Z"}, "message": "asan: Fix up address sanitizer instrumentation of __builtin_alloca* if it can throw [PR104449]\n\nWith -fstack-check* __builtin_alloca* can throw and the asan\ninstrumentation of this builtin wasn't prepared for that case.\nThe following patch fixes that by replacing the builtin with the\nreplacement builtin and emitting any further insns on the fallthru\nedge.\n\nI haven't touched the hwasan code which most likely suffers from the\nsame problem.\n\n2022-02-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/104449\n\t* asan.cc: Include tree-eh.h.\n\t(handle_builtin_alloca): Handle the case when __builtin_alloca or\n\t__builtin_alloca_with_align can throw.\n\n\t* gcc.dg/asan/pr104449.c: New test.\n\t* g++.dg/asan/pr104449.C: New test.", "tree": {"sha": "df53385c4613bae236711f681d0289f74be4ffa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df53385c4613bae236711f681d0289f74be4ffa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c7367b8802c47efaad87b1f2126fe6350d8b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c7367b8802c47efaad87b1f2126fe6350d8b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c7367b8802c47efaad87b1f2126fe6350d8b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c7367b8802c47efaad87b1f2126fe6350d8b47/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c4258d7c78a92ab17c14dec1163d87fc42ff019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4258d7c78a92ab17c14dec1163d87fc42ff019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4258d7c78a92ab17c14dec1163d87fc42ff019"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "6046b805d590b82fc4108b7ea962bcaf9b91c7bc", "filename": "gcc/asan.cc", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=f0c7367b8802c47efaad87b1f2126fe6350d8b47", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fnmatch.h\"\n #include \"tree-inline.h\"\n #include \"tree-ssa.h\"\n+#include \"tree-eh.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -726,14 +727,24 @@ handle_builtin_alloca (gcall *call, gimple_stmt_iterator *iter)\n   gassign *g;\n   gcall *gg;\n   tree callee = gimple_call_fndecl (call);\n+  tree lhs = gimple_call_lhs (call);\n   tree old_size = gimple_call_arg (call, 0);\n-  tree ptr_type = gimple_call_lhs (call) ? TREE_TYPE (gimple_call_lhs (call))\n-\t\t\t\t\t : ptr_type_node;\n+  tree ptr_type = lhs ? TREE_TYPE (lhs) : ptr_type_node;\n   tree partial_size = NULL_TREE;\n   unsigned int align\n     = DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n       ? 0 : tree_to_uhwi (gimple_call_arg (call, 1));\n \n+  bool throws = false;\n+  edge e = NULL;\n+  if (stmt_can_throw_internal (cfun, call))\n+    {\n+      if (!lhs)\n+\treturn;\n+      throws = true;\n+      e = find_fallthru_edge (gsi_bb (*iter)->succs);\n+    }\n+\n   if (hwasan_sanitize_allocas_p ())\n     {\n       gimple_seq stmts = NULL;\n@@ -852,29 +863,54 @@ handle_builtin_alloca (gcall *call, gimple_stmt_iterator *iter)\n \t\t\t  build_int_cst (size_type_node, align));\n   tree new_alloca_with_rz = make_ssa_name (ptr_type, gg);\n   gimple_call_set_lhs (gg, new_alloca_with_rz);\n-  gsi_insert_before (iter, gg, GSI_SAME_STMT);\n+  if (throws)\n+    {\n+      gimple_call_set_lhs (call, NULL);\n+      gsi_replace (iter, gg, true);\n+    }\n+  else\n+    gsi_insert_before (iter, gg, GSI_SAME_STMT);\n \n   /* new_alloca = new_alloca_with_rz + align.  */\n   g = gimple_build_assign (make_ssa_name (ptr_type), POINTER_PLUS_EXPR,\n \t\t\t   new_alloca_with_rz,\n \t\t\t   build_int_cst (size_type_node,\n \t\t\t\t\t  align / BITS_PER_UNIT));\n-  gsi_insert_before (iter, g, GSI_SAME_STMT);\n+  gimple_stmt_iterator gsi = gsi_none ();\n+  if (throws)\n+    {\n+      gsi_insert_on_edge_immediate (e, g);\n+      gsi = gsi_for_stmt (g);\n+    }\n+  else\n+    gsi_insert_before (iter, g, GSI_SAME_STMT);\n   tree new_alloca = gimple_assign_lhs (g);\n \n   /* Poison newly created alloca redzones:\n       __asan_alloca_poison (new_alloca, old_size).  */\n   fn = builtin_decl_implicit (BUILT_IN_ASAN_ALLOCA_POISON);\n   gg = gimple_build_call (fn, 2, new_alloca, old_size);\n-  gsi_insert_before (iter, gg, GSI_SAME_STMT);\n+  if (throws)\n+    gsi_insert_after (&gsi, gg, GSI_NEW_STMT);\n+  else\n+    gsi_insert_before (iter, gg, GSI_SAME_STMT);\n \n   /* Save new_alloca_with_rz value into last_alloca to use it during\n      allocas unpoisoning.  */\n   g = gimple_build_assign (last_alloca, new_alloca_with_rz);\n-  gsi_insert_before (iter, g, GSI_SAME_STMT);\n+  if (throws)\n+    gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n+  else\n+    gsi_insert_before (iter, g, GSI_SAME_STMT);\n \n   /* Finally, replace old alloca ptr with NEW_ALLOCA.  */\n-  replace_call_with_value (iter, new_alloca);\n+  if (throws)\n+    {\n+      g = gimple_build_assign (lhs, new_alloca);\n+      gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n+    }\n+  else\n+    replace_call_with_value (iter, new_alloca);\n }\n \n /* Return the memory references contained in a gimple statement"}, {"sha": "166ed8ddb915e049520d070673437251ed0fdfaf", "filename": "gcc/testsuite/g++.dg/asan/pr104449.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr104449.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr104449.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr104449.C?ref=f0c7367b8802c47efaad87b1f2126fe6350d8b47", "patch": "@@ -0,0 +1,16 @@\n+// PR sanitizer/104449\n+// { dg-do compile }\n+// { dg-options \"-fexceptions -fsanitize=address -fstack-check=generic\" }\n+\n+void bar (int *);\n+struct A { A (); ~A (); };\n+\n+void\n+foo (int n)\n+{\n+  A b;\n+  {\n+    int a[n];\n+    bar (a);\n+  }\n+}"}, {"sha": "50540273a3d3a7f9d2f9ca70ec4549b4c956459e", "filename": "gcc/testsuite/gcc.dg/asan/pr104449.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr104449.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c7367b8802c47efaad87b1f2126fe6350d8b47/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr104449.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr104449.c?ref=f0c7367b8802c47efaad87b1f2126fe6350d8b47", "patch": "@@ -0,0 +1,12 @@\n+/* PR sanitizer/104449 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fexceptions -fsanitize=address -fstack-check=generic\" } */\n+\n+void bar (int *);\n+\n+void\n+foo (void)\n+{\n+  int a[16];\n+  bar (a);\n+}"}]}