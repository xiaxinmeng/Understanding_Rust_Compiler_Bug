{"sha": "75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZDFjOGY0ZTdiNDZjMjQ2M2M1NTE4NTk4MmUzZTJmMzRlNWZjNg==", "commit": {"author": {"name": "Anthony Green", "email": "green@moxielogic.com", "date": "2009-09-09T22:29:13Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2009-09-09T22:29:13Z"}, "message": "moxie.md (*movsi, [...]): Use xor to load the constant 0 when appropriate.\n\n\t* config/moxie/moxie.md (*movsi, *movhi, *movqi): Use xor to load\n\tthe constant 0 when appropriate.\n\t* config/moxie/constraints.md: Add constraint O.\n\n\t* config/moxie/moxie.c (moxie_setup_incoming_varargs): Adjust\n\tto pass up to 6 32-bit argument values in registers.\n\t(moxie_function_arg): Ditto.\n\t(moxie_arg_partial_bytes): Ditto.\n\t* config/moxie/moxie.h (FUNCTION_ARG_ADVANCE): Ditto.\n\t(REG_PARM_STACK_SPACE): Ditto.\n\t(FUNCTION_ARG_REGNO_P): Ditto.\n\n\t* config/moxie/moxie.c (moxie_expand_prologue): Use dec\n\tinstruction to allocate stack space.\n\nFrom-SVN: r151579", "tree": {"sha": "5f16b40af434e212bc207a1bdcfc091cc5834b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f16b40af434e212bc207a1bdcfc091cc5834b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29cd5cc56ac440ea5e3537c50c12181fc6884490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29cd5cc56ac440ea5e3537c50c12181fc6884490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29cd5cc56ac440ea5e3537c50c12181fc6884490"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "f9cea3d0fa17c12d8efd025671b70b94f9a73cb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "patch": "@@ -1,3 +1,20 @@\n+2009-09-09  Anthony Green  <green@moxielogic.com>\n+\n+\t* config/moxie/moxie.md (*movsi, *movhi, *movqi): Use xor to load\n+\tthe constant 0 when appropriate.\n+\t* config/moxie/constraints.md: Add constraint O.\n+\n+\t* config/moxie/moxie.c (moxie_setup_incoming_varargs): Adjust\n+\tto pass up to 6 32-bit argument values in registers.\n+\t(moxie_function_arg): Ditto.\n+\t(moxie_arg_partial_bytes): Ditto.\n+\t* config/moxie/moxie.h (FUNCTION_ARG_ADVANCE): Ditto.\n+\t(REG_PARM_STACK_SPACE): Ditto.\n+\t(FUNCTION_ARG_REGNO_P): Ditto.\n+\n+\t* config/moxie/moxie.c (moxie_expand_prologue): Use dec\n+\tinstruction to allocate stack space.\n+\n 2009-09-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (bswapdi2_64bit): Fix"}, {"sha": "f76726813e33deff3a9bdaaa07202e2388193dee", "filename": "gcc/config/moxie/constraints.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fconstraints.md?ref=75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "patch": "@@ -40,6 +40,11 @@\n        (match_test \"REG_P (XEXP (op, 0))\n \t\t    && REGNO_OK_FOR_BASE_P (REGNO (XEXP (op, 0)))\")))\n \n+(define_constraint \"O\"\n+  \"The constant zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n (define_constraint \"I\"\n   \"An 8-bit constant (0..255)\"\n   (and (match_code \"const_int\")\n@@ -49,4 +54,3 @@\n   \"A constant -(0..255)\"\n   (and (match_code \"const_int\")\n        (match_test \"ival >= -255 && ival <= 0\")))\n-"}, {"sha": "8b2d8b23fe3acafd77aa70d7bd975d566b39a9e8", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "patch": "@@ -273,25 +273,22 @@ moxie_expand_prologue (void)\n \n   if (cfun->machine->size_for_adjusting_sp > 0)\n     {\n-      if (cfun->machine->size_for_adjusting_sp <= 255)\n+      int i = cfun->machine->size_for_adjusting_sp;\n+      while (i > 255)\n \t{\n \t  insn = emit_insn (gen_subsi3 (stack_pointer_rtx, \n \t\t\t\t\tstack_pointer_rtx, \n-\t\t\t\t\tGEN_INT (cfun->machine->size_for_adjusting_sp)));\n+\t\t\t\t\tGEN_INT (255)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  i -= 255;\n \t}\n-      else\n+      if (i > 0)\n \t{\n-\t  insn = \n-\t    emit_insn (gen_movsi \n-\t\t       (gen_rtx_REG (Pmode, MOXIE_R5), \n-\t\t\tGEN_INT (-cfun->machine->size_for_adjusting_sp)));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, \n+\t  insn = emit_insn (gen_subsi3 (stack_pointer_rtx, \n \t\t\t\t\tstack_pointer_rtx, \n-\t\t\t\t\tgen_rtx_REG (Pmode, MOXIE_R5)));\n+\t\t\t\t\tGEN_INT (i)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t}\t\n+\t}\n     }\n }\n \n@@ -359,14 +356,14 @@ moxie_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n \t\t\t      int *pretend_size, int no_rtl)\n {\n   int regno;\n-  int regs = 7 - *cum;\n+  int regs = 8 - *cum;\n   \n   *pretend_size = regs < 0 ? 0 : GET_MODE_SIZE (SImode) * regs;\n   \n   if (no_rtl)\n     return;\n   \n-  for (regno = *cum; regno < 7; regno++)\n+  for (regno = *cum; regno < 8; regno++)\n     {\n       rtx reg = gen_rtx_REG (SImode, regno);\n       rtx slot = gen_rtx_PLUS (Pmode,\n@@ -395,7 +392,7 @@ rtx\n moxie_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n \t\t    tree type ATTRIBUTE_UNUSED, int named ATTRIBUTE_UNUSED)\n {\n-  if (cum < 7)\n+  if (cum < 8)\n     return gen_rtx_REG (mode, cum);\n   else \n     return NULL_RTX;\n@@ -420,7 +417,7 @@ moxie_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n   else\n     size = GET_MODE_SIZE (mode);\n \n-  return size > 4*5;\n+  return size > 4*6;\n }\n \n /* Some function arguments will only partially fit in the registers\n@@ -434,7 +431,7 @@ moxie_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n {\n   int bytes_left, size;\n \n-  if (*cum >= 7)\n+  if (*cum >= 8)\n     return 0;\n \n   if (moxie_pass_by_reference (cum, mode, type, named))\n@@ -448,7 +445,7 @@ moxie_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n   else\n     size = GET_MODE_SIZE (mode);\n \n-  bytes_left = (4 * 5) - ((*cum - 2) * 4);\n+  bytes_left = (4 * 6) - ((*cum - 2) * 4);\n \n   if (size > bytes_left)\n     return bytes_left;"}, {"sha": "21792da6527d8041fa01d99a01cd60355273b71b", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "patch": "@@ -182,7 +182,7 @@ enum reg_class\n \n /* A C expression whose value is a register class containing hard\n    register REGNO.  */\n-#define REGNO_REG_CLASS(R) ((R < MOXIE_PC) ? GENERAL_REGS : \\\n+#define REGNO_REG_CLASS(R) ((R < MOXIE_PC) ? GENERAL_REGS :\t\t\\\n                             (R == MOXIE_CC ? CC_REGS : SPECIAL_REGS))\n \n /* A C expression for the number of consecutive hard registers,\n@@ -263,7 +263,7 @@ enum reg_class\n    : (unsigned) int_size_in_bytes (TYPE))\n \n #define FUNCTION_ARG_ADVANCE(CUM,MODE,TYPE,NAMED) \\\n-  (CUM = (CUM < MOXIE_R5 ?                        \\\n+  (CUM = (CUM < MOXIE_R6 ?                        \\\n           CUM + ((3 + MOXIE_FUNCTION_ARG_SIZE(MODE,TYPE))/4) : CUM ))\n \n /* How Scalar Function Values Are Returned */\n@@ -299,7 +299,7 @@ enum reg_class\n \n /* Define this if it is the responsibility of the caller to allocate\n    the area reserved for arguments passed in registers.  */\n-#define REG_PARM_STACK_SPACE(FNDECL) (5 * UNITS_PER_WORD)\n+#define REG_PARM_STACK_SPACE(FNDECL) (6 * UNITS_PER_WORD)\n \n /* Offset from the argument pointer register to the first argument's\n    address.  On some machines it may depend on the data type of the\n@@ -463,7 +463,7 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n /* A C expression that is nonzero if REGNO is the number of a hard\n    register in which function arguments are sometimes passed.  */\n-#define FUNCTION_ARG_REGNO_P(r) (r >= MOXIE_R0 && r <= MOXIE_R4)\n+#define FUNCTION_ARG_REGNO_P(r) (r >= MOXIE_R0 && r <= MOXIE_R5)\n \n /* A C expression that is nonzero if REGNO is the number of a hard\n    register in which the values of called function may come back.  */"}, {"sha": "a8e68872e3fdd6a4d2e8e27a94a4c88e0ece17bb", "filename": "gcc/config/moxie/moxie.md", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.md?ref=75cd1c8f4e7b46c2463c55185982e3e2f34e5fc6", "patch": "@@ -223,11 +223,12 @@\n }\")\n \n (define_insn \"*movsi\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,W,A,r,r,B,r\")\n-\t(match_operand:SI 1 \"moxie_general_movsrc_operand\" \"r,i,r,r,W,A,r,B\"))]\n+  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+\t(match_operand:SI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\"\n   \"@\n+   xor    %0, %0\n    mov    %0, %1\n    ldi.l  %0, %1\n    st.l   %0, %1\n@@ -236,7 +237,7 @@\n    lda.l  %0, %1\n    sto.l  %0, %1\n    ldo.l  %0, %1\"\n-  [(set_attr \"length\"\t\"2,6,2,6,2,6,6,6\")])\n+  [(set_attr \"length\"\t\"2,2,6,2,6,2,6,6,6\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n@@ -250,11 +251,12 @@\n }\")\n \n (define_insn \"*movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,W,A,r,r,B,r\")\n-\t(match_operand:QI 1 \"moxie_general_movsrc_operand\" \"r,i,r,r,W,A,r,B\"))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+\t(match_operand:QI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n+   xor    %0, %0\n    mov    %0, %1\n    ldi.b  %0, %1\n    st.b   %0, %1\n@@ -263,7 +265,7 @@\n    lda.b  %0, %1\n    sto.b  %0, %1\n    ldo.b  %0, %1\"\n-  [(set_attr \"length\"\t\"2,6,2,6,2,6,6,6\")])\n+  [(set_attr \"length\"\t\"2,2,6,2,6,2,6,6,6\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n@@ -277,11 +279,12 @@\n }\")\n \n (define_insn \"*movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,W,A,r,r,B,r\")\n-\t(match_operand:HI 1 \"moxie_general_movsrc_operand\" \"r,i,r,r,W,A,r,B\"))]\n+  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+\t(match_operand:HI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"(register_operand (operands[0], HImode)\n     || register_operand (operands[1], HImode))\"\n   \"@\n+   xor    %0, %0\n    mov    %0, %1\n    ldi.s  %0, %1\n    st.s   %0, %1\n@@ -290,7 +293,7 @@\n    lda.s  %0, %1\n    sto.s  %0, %1\n    ldo.s  %0, %1\"\n-  [(set_attr \"length\"\t\"2,6,2,6,2,6,6,6\")])\n+  [(set_attr \"length\"\t\"2,2,6,2,6,2,6,6,6\")])\n \n ;; -------------------------------------------------------------------------\n ;; Compare instructions"}]}