{"sha": "59d1681bf3dec3a5077247a77e4862516b561284", "node_id": "C_kwDOANBUbNoAKDU5ZDE2ODFiZjNkZWMzYTUwNzcyNDdhNzdlNDg2MjUxNmI1NjEyODQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-16T15:32:15Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-05T14:30:00Z"}, "message": "ada: Further adjust freezing for expansion of contracts\n\nThis further adjusts a test deciding whether to freeze an entity coming from\nan outer scope in an inner scope based on language rules, to the presence of\nthe new internal subprogram generated because of post-conditions.\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Entity): For the purpose of deciding whether to\n\tfreeze an entity coming from an outer scope in an inner scope, treat\n\tthe internal subprogram generated because of post-conditions as also\n\tcoming from source if the original subprogram itself does.", "tree": {"sha": "29c390568ac8f05ffbef2efe1888bffad3a8c85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29c390568ac8f05ffbef2efe1888bffad3a8c85b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d1681bf3dec3a5077247a77e4862516b561284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d1681bf3dec3a5077247a77e4862516b561284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d1681bf3dec3a5077247a77e4862516b561284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d1681bf3dec3a5077247a77e4862516b561284/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "97a25d1083505fb7940657ca6656256447066d6a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d1681bf3dec3a5077247a77e4862516b561284/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d1681bf3dec3a5077247a77e4862516b561284/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=59d1681bf3dec3a5077247a77e4862516b561284", "patch": "@@ -6281,7 +6281,10 @@ package body Freeze is\n          end if;\n \n          --  Otherwise, loop through scopes checking if an enclosing scope\n-         --  comes from source or is a generic.\n+         --  comes from source or is a generic. Note that, for the purpose\n+         --  of this test, we need to consider that the internally generated\n+         --  subprogram described above comes from source too if the original\n+         --  subprogram itself does.\n \n          declare\n             S : Entity_Id;\n@@ -6291,6 +6294,8 @@ package body Freeze is\n             while Present (S) loop\n                if Is_Overloadable (S) then\n                   if Comes_From_Source (S)\n+                    or else (Chars (S) = Name_uWrapped_Statements\n+                              and then Comes_From_Source (Scope (S)))\n                     or else Is_Generic_Instance (S)\n                     or else Is_Child_Unit (S)\n                   then"}]}