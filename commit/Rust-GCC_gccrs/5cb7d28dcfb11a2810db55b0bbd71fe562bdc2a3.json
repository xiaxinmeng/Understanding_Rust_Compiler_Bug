{"sha": "5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "node_id": "C_kwDOANBUbNoAKDVjYjdkMjhkY2ZiMTFhMjgxMGRiNTViMGJiZDcxZmU1NjJiZGMyYTM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T02:28:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T02:28:55Z"}, "message": "analyzer: add test coverage for string ops\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/string-ops-concat-pair.c: New test.\n\t* gcc.dg/analyzer/string-ops-dup.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "cd75a97e3306bfc173a7c48ad7bc9183b1e8023a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd75a97e3306bfc173a7c48ad7bc9183b1e8023a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e055e6db974d8b8950b30859a853e0aee74e20c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e055e6db974d8b8950b30859a853e0aee74e20c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e055e6db974d8b8950b30859a853e0aee74e20c2"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "f5bcd67594fa7747feb245787a39facd197a89fe", "filename": "gcc/testsuite/gcc.dg/analyzer/string-ops-concat-pair.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-concat-pair.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-concat-pair.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-concat-pair.c?ref=5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "patch": "@@ -0,0 +1,67 @@\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+/* Concatenating a pair of strings.  */\n+\n+/* Correct but poor implementation with repeated __builtin_strlen calls.  */\n+\n+char *\n+alloc_dup_of_concatenated_pair_1_correct (const char *x, const char *y)\n+{\n+  size_t sz = __builtin_strlen (x) + __builtin_strlen (y) + 1;\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, __builtin_strlen (x));\n+  __builtin_memcpy (result + __builtin_strlen (x), y, __builtin_strlen (y));\n+  result[__builtin_strlen(x) + __builtin_strlen (y)] = '\\0';\n+  return result;\n+}\n+\n+/* Incorrect version: forgetting to add space for terminator.  */\n+\n+char *\n+alloc_dup_of_concatenated_pair_1_incorrect (const char *x, const char *y)\n+{\n+  /* Forgetting to add space for the terminator here.  */\n+  size_t sz = __builtin_strlen (x) + __builtin_strlen (y);\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, __builtin_strlen (x));\n+  __builtin_memcpy (result + __builtin_strlen (x), y, __builtin_strlen (y));\n+  result[__builtin_strlen(x) + __builtin_strlen (y)] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" \"PR analyzer/105899\" { xfail *-*-* } } */\n+  return result;\n+}\n+\n+/* As above, but only calling __builtin_strlen once on each input.  */\n+\n+char *\n+alloc_dup_of_concatenated_pair_2_correct (const char *x, const char *y)\n+{\n+  size_t len_x = __builtin_strlen (x);\n+  size_t len_y = __builtin_strlen (y);\n+  size_t sz = len_x + len_y + 1;\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, len_x);\n+  __builtin_memcpy (result + len_x, y, len_y);\n+  result[len_x + len_y] = '\\0';\n+  return result;\n+}\n+\n+char *\n+alloc_dup_of_concatenated_pair_2_incorrect (const char *x, const char *y)\n+{\n+  size_t len_x = __builtin_strlen (x);\n+  size_t len_y = __builtin_strlen (y);\n+  size_t sz = len_x + len_y; /* Forgetting to add space for the terminator.  */\n+  char *result = __builtin_malloc (sz); /* { dg-message \"capacity: 'len_x \\\\+ len_y' bytes\" } */\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, len_x);\n+  __builtin_memcpy (result + len_x, y, len_y);\n+  result[len_x + len_y] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n+  return result;\n+}"}, {"sha": "44c4e9dc67e66dd1f124945404c072a4504a9f65", "filename": "gcc/testsuite/gcc.dg/analyzer/string-ops-dup.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-dup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-dup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstring-ops-dup.c?ref=5cb7d28dcfb11a2810db55b0bbd71fe562bdc2a3", "patch": "@@ -0,0 +1,61 @@\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+/* Duplicating a string.  */\n+\n+/* Correct but poor implementation with repeated __builtin_strlen calls.  */\n+\n+char *\n+alloc_dup_1_correct (const char *x)\n+{\n+  size_t sz = __builtin_strlen (x) + 1;\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, __builtin_strlen (x));\n+  result[__builtin_strlen(x)] = '\\0';\n+  return result;\n+}\n+\n+/* Incorrect version: forgetting to add space for terminator.  */\n+\n+char *\n+alloc_dup_1_incorrect (const char *x, const char *y)\n+{\n+  /* Forgetting to add space for the terminator here.  */\n+  size_t sz = __builtin_strlen (x) + 1;\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, __builtin_strlen (x));\n+  result[__builtin_strlen(x)] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" \"PR analyzer/105899\" { xfail *-*-* } } */\n+  return result;\n+}\n+\n+/* As above, but only calling __builtin_strlen once.  */\n+\n+char *\n+alloc_dup_2_correct (const char *x)\n+{\n+  size_t len_x = __builtin_strlen (x);\n+  size_t sz = len_x + 1;\n+  char *result = __builtin_malloc (sz);\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, len_x);\n+  result[len_x] = '\\0';\n+  return result;\n+}\n+\n+char *\n+alloc_dup_of_concatenated_pair_2_incorrect (const char *x, const char *y)\n+{\n+  size_t len_x = __builtin_strlen (x);\n+  size_t sz = len_x; /* Forgetting to add space for the terminator.  */\n+  char *result = __builtin_malloc (sz); /* { dg-message \"capacity: 'len_x' bytes\" } */\n+  if (!result)\n+    return NULL;\n+  __builtin_memcpy (result, x, len_x);\n+  result[len_x] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n+  return result;\n+}"}]}