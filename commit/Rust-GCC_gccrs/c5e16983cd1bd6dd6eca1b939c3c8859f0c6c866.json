{"sha": "c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlMTY5ODNjZDFiZDZkZDZlY2ExYjkzOWMzYzg4NTlmMGM2Yzg2Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T10:56:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T10:56:57Z"}, "message": "[AArch64] Add SVE conditional conversion patterns\n\nThis patch adds patterns to match conditional conversions between\nintegers and like-sized floats.  The patterns are actually more\ngeneral than that, but the other combinations can only be tested\nvia the ACLE.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(*cond_<SVE_COND_FCVTI:optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>)\n\t(*cond_<SVE_COND_ICVTF:optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>):\n\tNew patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_convert_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_convert_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_convert_6_run.c: Likewise.\n\nFrom-SVN: r274478", "tree": {"sha": "62277739e93b1c6948530bbaa31a1d3c18036bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62277739e93b1c6948530bbaa31a1d3c18036bb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b21f7d53095b253753c5622f99809e9c82fd3009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21f7d53095b253753c5622f99809e9c82fd3009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21f7d53095b253753c5622f99809e9c82fd3009"}], "stats": {"total": 484, "additions": 484, "deletions": 0}, "files": [{"sha": "3338cf3475de7f4ac97bf36c1581ff98042e7a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(*cond_<SVE_COND_FCVTI:optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>)\n+\t(*cond_<SVE_COND_ICVTF:optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>):\n+\tNew patterns.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "b1bec73a18b0e4b80fee8600829170e4d1871d95", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -4071,6 +4071,39 @@\n   \"fcvtz<su>\\t%0.<VNx4SI_ONLY:Vetype>, %1/m, %2.<VNx2DF_ONLY:Vetype>\"\n )\n \n+;; Predicated float-to-integer conversion with merging, either to the same\n+;; width or wider.\n+;;\n+;; The first alternative doesn't need the earlyclobber, but the only case\n+;; it would help is the uninteresting one in which operands 2 and 3 are\n+;; the same register (despite having different modes).  Making all the\n+;; alternatives earlyclobber makes things more consistent for the\n+;; register allocator.\n+(define_insn_and_rewrite \"*cond_<optab>_nontrunc<SVE_F:mode><SVE_HSDI:mode>\"\n+  [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=&w, &w, ?&w\")\n+\t(unspec:SVE_HSDI\n+\t  [(match_operand:<SVE_HSDI:VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_HSDI\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE_COND_FCVTI)\n+\t   (match_operand:SVE_HSDI 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && <SVE_HSDI:elem_bits> >= <SVE_F:elem_bits>\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   fcvtz<su>\\t%0.<SVE_HSDI:Vetype>, %1/m, %2.<SVE_F:Vetype>\n+   movprfx\\t%0.<SVE_HSDI:Vetype>, %1/z, %2.<SVE_HSDI:Vetype>\\;fcvtz<su>\\t%0.<SVE_HSDI:Vetype>, %1/m, %2.<SVE_F:Vetype>\n+   movprfx\\t%0, %3\\;fcvtz<su>\\t%0.<SVE_HSDI:Vetype>, %1/m, %2.<SVE_F:Vetype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT<-FP] Packs\n ;; -------------------------------------------------------------------------\n@@ -4155,6 +4188,39 @@\n   \"<su>cvtf\\t%0.<VNx2DF_ONLY:Vetype>, %1/m, %2.<VNx4SI_ONLY:Vetype>\"\n )\n \n+;; Predicated integer-to-float conversion with merging, either to the same\n+;; width or narrower.\n+;;\n+;; The first alternative doesn't need the earlyclobber, but the only case\n+;; it would help is the uninteresting one in which operands 2 and 3 are\n+;; the same register (despite having different modes).  Making all the\n+;; alternatives earlyclobber makes things more consistent for the\n+;; register allocator.\n+(define_insn_and_rewrite \"*cond_<optab>_nonextend<SVE_HSDI:mode><SVE_F:mode>\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=&w, &w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<SVE_HSDI:VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_F\n+\t     [(match_operand 4)\n+\t      (match_operand:SI 5 \"aarch64_sve_gp_strictness\")\n+\t      (match_operand:SVE_HSDI 2 \"register_operand\" \"w, w, w\")]\n+\t     SVE_COND_ICVTF)\n+\t   (match_operand:SVE_F 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && <SVE_HSDI:elem_bits> >= <SVE_F:elem_bits>\n+   && aarch64_sve_pred_dominates_p (&operands[4], operands[1])\"\n+  \"@\n+   <su>cvtf\\t%0.<SVE_F:Vetype>, %1/m, %2.<SVE_HSDI:Vetype>\n+   movprfx\\t%0.<SVE_HSDI:Vetype>, %1/z, %2.<SVE_HSDI:Vetype>\\;<su>cvtf\\t%0.<SVE_F:Vetype>, %1/m, %2.<SVE_HSDI:Vetype>\n+   movprfx\\t%0, %3\\;<su>cvtf\\t%0.<SVE_F:Vetype>, %1/m, %2.<SVE_HSDI:Vetype>\"\n+  \"&& !rtx_equal_p (operands[1], operands[4])\"\n+  {\n+    operands[4] = copy_rtx (operands[1]);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP<-INT] Packs\n ;; -------------------------------------------------------------------------"}, {"sha": "a6c8c24f045216cac143faf117168ca056074937", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -1,3 +1,18 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_convert_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_convert_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_convert_6_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "69468eb69be09d105228d8a2ea2dd6da0592893c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (FLOAT_TYPE *__restrict r,\t\t\t\\\n+\t\t   INT_TYPE *__restrict a,\t\t\t\\\n+\t\t   FLOAT_TYPE *__restrict b,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (FLOAT_TYPE) a[i] : b[i];\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* At the moment we don't manage to avoid using MOVPRFX.  */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "1f712b485069a49286642f00c95ac5455aa0e660", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_1_run.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    FLOAT_TYPE r[N], b[N];\t\t\t\t\t\\\n+    INT_TYPE a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tb[i] = (i % 9) * (i % 7 + 1);\t\t\t\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, b, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (FLOAT_TYPE) a[i] : b[i]))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "0e60b4381548d370e16cf906224989efb7bdf965", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (FLOAT_TYPE *__restrict r,\t\t\t\\\n+\t\t   INT_TYPE *__restrict a,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (FLOAT_TYPE) a[i] : 1.0;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9a48349216d744de6802582c4e9b2638df9fa0ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_2_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_2_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    FLOAT_TYPE r[N];\t\t\t\t\t\t\\\n+    INT_TYPE a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (FLOAT_TYPE) a[i] : 1.0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "a294effd4a95098a525d320efef5291e93227a1b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (FLOAT_TYPE *__restrict r,\t\t\t\\\n+\t\t   INT_TYPE *__restrict a,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (FLOAT_TYPE) a[i] : 0.0;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* Really we should be able to use MOVPRFX /z here, but at the moment\n+   we're relying on combine to merge a SEL and an arithmetic operation,\n+   and the SEL doesn't allow the \"false\" value to be zero when the \"true\"\n+   value is a register.  */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "90021097c471abc1e1b3e09bc8c270a7339a374b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_3_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_3_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    FLOAT_TYPE r[N];\t\t\t\t\t\t\\\n+    INT_TYPE a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (FLOAT_TYPE) a[i] : 0.0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "55b535fa0cf339722e5dbba3c444dcf0e3511a9f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_4.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (INT_TYPE *__restrict r,\t\t\t\\\n+\t\t   FLOAT_TYPE *__restrict a,\t\t\t\\\n+\t\t   INT_TYPE *__restrict b,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (INT_TYPE) a[i] : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* At the moment we don't manage to avoid using MOVPRFX.  */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "eaadcb7d4f21f996f875a53eb581a4eaf8836c25", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_4_run.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INT_TYPE r[N], b[N], pred[N];\t\t\t\t\\\n+    FLOAT_TYPE a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tb[i] = (i % 9) * (i % 7 + 1);\t\t\t\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, b, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (INT_TYPE) a[i] : b[i]))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "5f3da83e69cae2ddfbc3d4ee993349669bb8ee64", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_5.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (INT_TYPE *__restrict r,\t\t\t\\\n+\t\t   FLOAT_TYPE *__restrict a,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (INT_TYPE) a[i] : 72;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "a1f2d49775124b89a622df36c2b1434f2e0898b9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_5_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_5_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_5.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INT_TYPE r[N], pred[N];\t\t\t\t\t\\\n+    FLOAT_TYPE a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (INT_TYPE) a[i] : 72))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "6541a2ea49decbc31ba8e5840abe9a4335f9d569", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##INT_TYPE (INT_TYPE *__restrict r,\t\t\t\\\n+\t\t   FLOAT_TYPE *__restrict a,\t\t\t\\\n+\t\t   INT_TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? (INT_TYPE) a[i] : 0;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (_Float16, int16_t) \\\n+  T (_Float16, uint16_t) \\\n+  T (float, int32_t) \\\n+  T (float, uint32_t) \\\n+  T (double, int64_t) \\\n+  T (double, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* Really we should be able to use MOVPRFX /z here, but at the moment\n+   we're relying on combine to merge a SEL and an arithmetic operation,\n+   and the SEL doesn't allow the \"false\" value to be zero when the \"true\"\n+   value is a register.  */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "49a64b4fc7b655d9a80080f0ed49e5064912dfab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_6_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_6_run.c?ref=c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ftrapping-math\" } */\n+\n+#include \"cond_convert_6.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(FLOAT_TYPE, INT_TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INT_TYPE r[N], pred[N];\t\t\t\t\t\\\n+    FLOAT_TYPE a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##INT_TYPE (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? (INT_TYPE) a[i] : 0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}