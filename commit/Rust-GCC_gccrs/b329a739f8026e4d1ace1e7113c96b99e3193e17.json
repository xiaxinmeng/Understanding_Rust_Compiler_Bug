{"sha": "b329a739f8026e4d1ace1e7113c96b99e3193e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyOWE3MzlmODAyNmU0ZDFhY2UxZTcxMTNjOTZiOTllMzE5M2UxNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:17:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:17:53Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Clean up and correct documentation of warnings.\n\t* usage.adb: Minor corrections to make sure warnings are properly\n\tdocumented.\n\t* warnsw.adb (Set_Warning_Switch): Remove redundant return statement.\n\t(WA_Warnings): Add Warn_On_Suspicious_Modulus_Value.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): The dummy block\n\tcreated to match internal sequence numbers between compilations\n\twith/without abort must have its type properly set.\n\nFrom-SVN: r213168", "tree": {"sha": "130e51c633a23cf34a2539ed489b02efb89800f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130e51c633a23cf34a2539ed489b02efb89800f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b329a739f8026e4d1ace1e7113c96b99e3193e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329a739f8026e4d1ace1e7113c96b99e3193e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b329a739f8026e4d1ace1e7113c96b99e3193e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329a739f8026e4d1ace1e7113c96b99e3193e17/comments", "author": null, "committer": null, "parents": [{"sha": "220d1fd9dfd8d7abcb9d5cc38f5ee8e5ba7c2a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220d1fd9dfd8d7abcb9d5cc38f5ee8e5ba7c2a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220d1fd9dfd8d7abcb9d5cc38f5ee8e5ba7c2a64"}], "stats": {"total": 169, "additions": 78, "deletions": 91}, "files": [{"sha": "d5b4c95be89e957d85c9232407e0d7a857d7077e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b329a739f8026e4d1ace1e7113c96b99e3193e17", "patch": "@@ -1,3 +1,17 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Clean up and correct documentation of warnings.\n+\t* usage.adb: Minor corrections to make sure warnings are properly\n+\tdocumented.\n+\t* warnsw.adb (Set_Warning_Switch): Remove redundant return statement.\n+\t(WA_Warnings): Add Warn_On_Suspicious_Modulus_Value.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): The dummy block\n+\tcreated to match internal sequence numbers between compilations\n+\twith/without abort must have its type properly set.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* ali.adb (Initialize_ALI): Initialize SSO_Default_Specified"}, {"sha": "8099b805ba23a7e7a3e3641dd8737450901a44ae", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=b329a739f8026e4d1ace1e7113c96b99e3193e17", "patch": "@@ -5252,8 +5252,10 @@ package body Exp_Ch3 is\n             else\n                --  Generate a dummy entity to ensure that the internal symbols\n                --  are in sync when a unit is compiled with and without aborts.\n+               --  The entity is a block with proper scope and type.\n \n                Dummy := New_Internal_Entity (E_Block, Current_Scope, Loc, 'B');\n+               Set_Etype (Dummy, Standard_Void_Type);\n                Abrt_Stmts := Fin_Stmts;\n             end if;\n "}, {"sha": "6b8079c9de6d35dc87a156dca466fb1940e38acd", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 31, "deletions": 60, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b329a739f8026e4d1ace1e7113c96b99e3193e17", "patch": "@@ -4980,17 +4980,25 @@ This switch activates most optional warning messages.  See the remaining list\n in this section for details on optional warning messages that can be\n individually controlled.  The warnings that are not turned on by this\n switch are:\n-@option{-gnatwd} (implicit dereferencing),\n-@option{-gnatwh} (hiding),\n+\n+@itemize\n+@option{-gnatwd} (implicit dereferencing)\n @option{-gnatw.d} (tag warnings with -gnatw switch)\n-@option{-gnatw.h} (holes (gaps) in record layouts)\n-@option{-gnatw.i} (overlapping actuals),\n-@option{-gnatw.k} (redefinition of names in standard),\n-@option{-gnatwl} (elaboration warnings),\n-@option{-gnatw.l} (inherited aspects),\n-@option{-gnatw.o} (warn on values set by out parameters ignored),\n+@option{-gnatwh} (hiding)\n+@option{-gnatw.h} (holes in record layouts)\n+@option{-gnatw.k} (redefinition of names in standard)\n+@option{-gnatwl} (elaboration warnings)\n+@option{-gnatw.l} (inherited aspects)\n+@option{-gnatw.n} (atomic synchronization)\n+@option{-gnatwo} (address clause overlay)\n+@option{-gnatw.o} (values set by out parameters ignored)\n+@option{-gnatw.s} (overridden size clause)\n @option{-gnatwt} (tracking of deleted conditional code)\n-and @option{-gnatw.u} (unordered enumeration),\n+@option{-gnatw.u} (unordered enumeration)\n+@option{-gnatw.w} (use of Warnings Off)\n+@option{-gnatw.y} (reasons for package needing body)\n+@end itemize\n+\n All other optional warnings are turned on.\n \n @item -gnatwA\n@@ -5102,8 +5110,6 @@ representation clause is present and has component clauses for the\n majority, but not all, of the components. A warning is given for each\n component for which no component clause is present.\n \n-This warning can also be turned on using @option{-gnatwa}.\n-\n @item -gnatw.C\n @emph{Suppress warnings on missing component clauses.}\n @cindex @option{-gnatwC} (@command{gcc})\n@@ -5120,8 +5126,6 @@ enabled, access checks occur only at points where an explicit\n @code{.all} appears in the source code (assuming no warnings are\n generated as a result of this switch). The default is that such\n warnings are not generated.\n-Note that @option{-gnatwa} does not affect the setting of\n-this warning option.\n \n @item -gnatwD\n @emph{Suppress warnings on implicit dereferencing.}\n@@ -5202,7 +5206,7 @@ been specifically designed according to specialized coding rules.\n @cindex Formals, unreferenced\n This switch causes a warning to be generated if a formal parameter\n is not referenced in the body of the subprogram. This warning can\n-also be turned on using @option{-gnatwa} or @option{-gnatwu}. The\n+also be turned on using @option{-gnatwu}. The\n default is that these warnings are not generated.\n \n @item -gnatwF\n@@ -5220,8 +5224,7 @@ formals.\n @cindex Pragmas, unrecognized\n This switch causes a warning to be generated if an unrecognized\n pragma is encountered. Apart from issuing this warning, the\n-pragma is ignored and has no effect. This warning can\n-also be turned on using @option{-gnatwa}. The default\n+pragma is ignored and has no effect. The default\n is that such warnings are issued (satisfying the Ada Reference\n Manual requirement that such warnings appear).\n \n@@ -5247,7 +5250,6 @@ A declaration is considered hiding\n if it is for a non-overloadable entity, and it declares an entity with the\n same name as some other entity that is directly or use-visible. The default\n is that such warnings are not generated.\n-Note that @option{-gnatwa} does not affect the setting of this warning option.\n \n @item -gnatwH\n @emph{Suppress warnings on hiding.}\n@@ -5262,7 +5264,6 @@ This switch activates warnings on component clauses in record\n representation clauses that leave holes (gaps) in the record layout.\n If this warning option is active, then record representation clauses\n should specify a contiguous layout, adding unused fill fields if needed.\n-Note that @option{-gnatwa} does not affect the setting of this warning option.\n \n @item -gnatw.H\n @emph{Suppress warnings on holes/gaps in records.}\n@@ -5282,7 +5283,6 @@ documented in either the Ada Reference Manual or the GNAT\n Programmer's Reference Manual. Such units are intended only\n for internal implementation purposes and should not be @code{with}'ed\n by user programs. The default is that such warnings are generated\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwI\n @emph{Disable warnings on implementation units.}\n@@ -5295,8 +5295,7 @@ implementation unit.\n @cindex @option{-gnatw.i} (@command{gcc})\n This switch enables a warning on statically detectable overlapping actuals in\n a subprogram call, when one of the actuals is an in-out parameter, and the\n-types of the actuals are not by-copy types. The warning is off by default,\n-and is not included under -gnatwa.\n+types of the actuals are not by-copy types. This warning is off by default.\n \n @item -gnatw.I\n @emph{Disable warnings on overlapping actuals.}\n@@ -5315,8 +5314,7 @@ case of Annex J, not all features are flagged. In particular use\n of the renamed packages (like @code{Text_IO}) and use of package\n @code{ASCII} are not flagged, since these are very common and\n would generate many annoying positive warnings. The default is that\n-such warnings are not generated. This warning is also turned on by\n-the use of @option{-gnatwa}.\n+such warnings are not generated.\n \n In addition to the above cases, warnings are also generated for\n GNAT features that have been provided in past versions but which\n@@ -5342,7 +5340,6 @@ This switch disables warnings on use of obsolescent features.\n This switch activates warnings for variables that are initialized but\n never modified, and then could be declared constants. The default is that\n such warnings are not given.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwK\n @emph{Suppress warnings on variables that could be constants.}\n@@ -5358,8 +5355,6 @@ especially since the names in package Standard continue to be directly\n visible, meaning that use visibiliy on such redeclared names does not\n work as expected. Names of discriminants and components in records are\n not included in this check.\n-This warning is not part of the warnings activated by @option{-gnatwa}.\n-It must be explicitly activated.\n \n @item -gnatw.K\n @emph{Suppress warnings on variables that could be constants.}\n@@ -5379,7 +5374,6 @@ dynamic elaboration model.\n See the section in this guide on elaboration checking for further details.\n The default is that such warnings\n are not generated.\n-This warning is not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatwL\n @emph{Suppress warnings for elaboration pragmas.}\n@@ -5392,7 +5386,6 @@ This switch suppresses warnings for possible elaboration problems.\n This switch causes the compiler to list inherited invariants,\n preconditions, and postconditions from Type_Invariant'Class, Invariant'Class,\n Pre'Class, and Post'Class aspects. Also list inherited subtype predicates.\n-These messages are not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatw.L\n @emph{Suppress listing of inherited aspects.}\n@@ -5407,7 +5400,6 @@ an initialization value or with one or more assignment statements) but\n whose value is never read. The warning is suppressed for volatile\n variables and also for variables that are renamings of other variables\n or for which an address clause is given.\n-This warning can also be turned on using @option{-gnatwa}.\n The default is that these warnings are not given.\n \n @item -gnatwM\n@@ -5449,9 +5441,7 @@ use of @option{-gnatg}.\n @cindex Atomic Synchronization, warnings\n This switch actives warnings when an access to an atomic variable\n requires the generation of atomic synchronization code. These\n-warnings are off by default and this warning is not included\n-in @code{-gnatwa}.\n-\n+warnings are off by default.\n @item -gnatw.N\n @emph{Suppress warnings on atomic synchronization.}\n @cindex @option{-gnatw.n} (@command{gcc})\n@@ -5466,7 +5456,6 @@ requires the generation of atomic synchronization code.\n This switch activates warnings for possibly unintended initialization\n effects of defining address clauses that cause one variable to overlap\n another. The default is that such warnings are generated.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwO\n @emph{Suppress warnings on address clause overlays.}\n@@ -5486,8 +5475,7 @@ mode formal, the warning is issued by default (controlled by -gnatwu).\n The warning is suppressed for volatile\n variables and also for variables that are renamings of other variables\n or for which an address clause is given.\n-The default is that these warnings are not given. Note that this warning\n-is not included in -gnatwa, it must be activated explicitly.\n+The default is that these warnings are not given.\n \n @item -gnatw.O\n @emph{Disable warnings on modified but unreferenced out parameters.}\n@@ -5505,7 +5493,6 @@ This switch activates warnings for failure of front end inlining\n many reasons for not being able to inline a call, including most\n commonly that the call is too complex to inline. The default is\n that such warnings are not given.\n-This warning can also be turned on using @option{-gnatwa}.\n Warnings on ineffective inlining by the gcc back-end can be activated\n separately, using the gcc switch -Winline.\n \n@@ -5526,9 +5513,7 @@ match the names of the formals, but are in a different order. The\n warning is suppressed if any use of named parameter notation is used,\n so this is the appropriate way to suppress a false positive (and\n serves to emphasize that the \"misordering\" is deliberate). The\n-default is\n-that such warnings are not given.\n-This warning can also be turned on using @option{-gnatwa}.\n+default is that such warnings are not given.\n \n @item -gnatw.P\n @emph{Suppress warnings on parameter ordering.}\n@@ -5548,7 +5533,6 @@ quite likely ((-x) mod 5) was intended. In such situations it seems best to\n follow the rule of always parenthesizing to make the association clear, and\n this warning switch warns if such parentheses are not present. The default\n is that these warnings are given.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwQ\n @emph{Suppress warnings on questionable missing parentheses.}\n@@ -5583,7 +5567,6 @@ to be non-negative\n Comparison of boolean expressions to an explicit True value.\n @end itemize\n \n-This warning can also be turned on using @option{-gnatwa}.\n The default is that warnings for redundant constructs are not given.\n \n @item -gnatwR\n@@ -5597,8 +5580,7 @@ This switch suppresses warnings for redundant constructs.\n This switch activates warnings for an object renaming that renames a\n function call, which is equivalent to a constant declaration (as\n opposed to renaming the function itself).  The default is that these\n-warnings are given.  This warning can also be turned on using\n-@option{-gnatwa}.\n+warnings are given.\n \n @item -gnatw.R\n @emph{Suppress warnings for object renaming function.}\n@@ -5631,7 +5613,6 @@ specified by an explicit size clause for the component type. A\n warning is similarly given in the array case if a specified\n component size overrides an explicit size clause for the array\n component type.\n-Note that @option{-gnatwa} does not affect the setting of this warning option.\n \n @item -gnatw.S\n @emph{Suppress warnings on overridden size clauses.}\n@@ -5647,8 +5628,7 @@ warnings when an array component size overrides a size clause.\n @cindex Deleted code, warnings\n This switch activates warnings for tracking of code in conditionals (IF and\n CASE statements) that is detected to be dead code which cannot be executed, and\n-which is removed by the front end. This warning is off by default, and is not\n-turned on by @option{-gnatwa}, it has to be turned on explicitly. This may be\n+which is removed by the front end. This warning is off by default. This may be\n useful for detecting deactivated code in certified applications.\n \n @item -gnatwT\n@@ -5667,7 +5647,7 @@ or contract case for this function mentions the result of the function.\n A procedure postcondition or contract case is suspicious when it only\n refers to the pre-state of the procedure, because in that case it should\n rather be expressed as a precondition. The default is that such warnings\n-are not generated. This warning can also be turned on using @option{-gnatwa}.\n+are not generated.\n \n @item -gnatw.T\n @emph{Suppress warnings on suspicious contracts.}\n@@ -5694,7 +5674,6 @@ a warning is also generated, noting that the\n such warnings are not generated.\n This switch also activates warnings on unreferenced formals\n (it includes the effect of @option{-gnatwf}).\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwU\n @emph{Suppress warnings on unused entities.}\n@@ -5715,7 +5694,6 @@ which the type is declared, or its body or subunits.) Please refer to\n the description of pragma @code{Ordered} in the\n @cite{@value{EDITION} Reference Manual} for further details.\n The default is that such warnings are not generated.\n-This warning is not automatically turned on by the use of @option{-gnatwa}.\n \n @item -gnatw.U\n @emph{Deactivate warnings on unordered enumeration types.}\n@@ -5730,7 +5708,6 @@ that no warnings are given for comparisons or subranges for any type.\n This switch activates warnings for access to variables which\n may not be properly initialized. The default is that\n such warnings are generated.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwV\n @emph{Suppress warnings on unassigned variables.}\n@@ -5758,8 +5735,7 @@ just informational messages) about the effects of non-default bit-order\n on records to which a component clause is applied. The effect of specifying\n non-default bit ordering is a bit subtle (and changed with Ada 2005), so\n these messages, which are given by default, are useful in understanding the\n-exact consequences of using this feature. These messages\n-can also be turned on using @option{-gnatwa}\n+exact consequences of using this feature.\n \n @item -gnatw.V\n @emph{Suppress info messages for non-default bit order.}\n@@ -5775,7 +5751,6 @@ This switch activates warnings for indexing an unconstrained string parameter\n with a literal or S'Length. This is a case where the code is assuming that the\n low bound is one, which is in general not true (for example when a slice is\n passed). The default is that such warnings are generated.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwW\n @emph{Suppress warnings on wrong low bound assumption.}\n@@ -5799,11 +5774,11 @@ as shown in the following example.\n This switch activates warnings for use of @code{pragma Warnings (Off, entity)}\n where either the pragma is entirely useless (because it suppresses no\n warnings), or it could be replaced by @code{pragma Unreferenced} or\n-@code{pragma Unmodified}. The default is that these warnings are not given.\n-Note that this warning is not included in -gnatwa, it must be\n-activated explicitly. Also activates warnings for the case of\n+@code{pragma Unmodified}.\n+Also activates warnings for the case of\n Warnings (Off, String), where either there is no matching\n Warnings (On, String), or the Warnings (Off) did not suppress any warning.\n+The default is that these warnings are not given.\n \n @item -gnatw.W\n @emph{Suppress warnings on unnecessary Warnings Off pragmas}\n@@ -5821,7 +5796,6 @@ default parameters in a convention C procedure is dubious\n because the C compiler cannot supply the proper default, so\n a warning is issued. The default is that such warnings are\n generated.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwX\n @emph{Suppress warnings on Export/Import pragmas.}\n@@ -5858,7 +5832,6 @@ switch activates several warnings to help in identifying\n and correcting such incompatibilities. The default is that\n these warnings are generated. Note that at one point Ada 2005\n was called Ada 0Y, hence the choice of character.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwY\n @emph{Disable warnings for Ada compatibility issues.}\n@@ -5896,7 +5869,6 @@ sizes. The default\n is that such warnings are generated. Warnings are also\n generated for subprogram pointers with different conventions,\n and, on VMS only, for data pointers with different conventions.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwZ\n @emph{Suppress warnings on unchecked conversions.}\n@@ -5914,7 +5886,6 @@ specified @code{Size} and @code{Alignment} attributes where the\n size is not a multiple of the alignment, resulting in an object\n size that is greater than the specified size. The default\n is that such warnings are generated.\n-This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatw.Z\n @emph{Suppress warnings for size not a multiple of alignment.}"}, {"sha": "9cb198f6fc8ba8169cc2e833bd09338da51d3b8a", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=b329a739f8026e4d1ace1e7113c96b99e3193e17", "patch": "@@ -528,7 +528,7 @@ begin\n                                                   \"but not read\");\n    Write_Line (\"        M*   turn off warnings for variable assigned \" &\n                                                   \"but not read\");\n-   Write_Line (\"        .m*  turn on warnings for suspicious modulus value\");\n+   Write_Line (\"        .m*+ turn on warnings for suspicious modulus value\");\n    Write_Line (\"        .M   turn off warnings for suspicious modulus value\");\n    Write_Line (\"        n*   normal warning mode (cancels -gnatws/-gnatwe)\");\n    Write_Line (\"        .n   turn on info messages for atomic \" &"}, {"sha": "10b60a8f779935b8ae74470184febe433bfb9ee4", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b329a739f8026e4d1ace1e7113c96b99e3193e17/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=b329a739f8026e4d1ace1e7113c96b99e3193e17", "patch": "@@ -636,7 +636,6 @@ package body Warnsw is\n             else\n                return False;\n             end if;\n-            return False;\n       end case;\n \n       return True;\n@@ -648,35 +647,36 @@ package body Warnsw is\n \n    procedure WA_Warnings is\n    begin\n-      Check_Unreferenced                  := True;\n-      Check_Unreferenced_Formals          := True;\n-      Check_Withs                         := True;\n-      Constant_Condition_Warnings         := True;\n-      Implementation_Unit_Warnings        := True;\n-      Ineffective_Inline_Warnings         := True;\n-      Warn_On_Ada_2005_Compatibility      := True;\n-      Warn_On_Ada_2012_Compatibility      := True;\n-      Warn_On_Assertion_Failure           := True;\n-      Warn_On_Assumed_Low_Bound           := True;\n-      Warn_On_Bad_Fixed_Value             := True;\n-      Warn_On_Biased_Representation       := True;\n-      Warn_On_Constant                    := True;\n-      Warn_On_Export_Import               := True;\n-      Warn_On_Modified_Unread             := True;\n-      Warn_On_No_Value_Assigned           := True;\n-      Warn_On_Non_Local_Exception         := True;\n-      Warn_On_Object_Renames_Function     := True;\n-      Warn_On_Obsolescent_Feature         := True;\n-      Warn_On_Overlap                     := True;\n-      Warn_On_Parameter_Order             := True;\n-      Warn_On_Questionable_Missing_Parens := True;\n-      Warn_On_Redundant_Constructs        := True;\n-      Warn_On_Reverse_Bit_Order           := True;\n-      Warn_On_Size_Alignment              := True;\n-      Warn_On_Suspicious_Contract         := True;\n-      Warn_On_Unchecked_Conversion        := True;\n-      Warn_On_Unrecognized_Pragma         := True;\n-      Warn_On_Unrepped_Components         := True;\n+      Check_Unreferenced                  := True; -- -gnatwf/-gnatwu\n+      Check_Unreferenced_Formals          := True; -- -gnatwf/-gnatwu\n+      Check_Withs                         := True; -- -gnatwu\n+      Constant_Condition_Warnings         := True; -- -gnatwc\n+      Implementation_Unit_Warnings        := True; -- -gnatwi\n+      Ineffective_Inline_Warnings         := True; -- -gnatwp\n+      Warn_On_Ada_2005_Compatibility      := True; -- -gnatwy\n+      Warn_On_Ada_2012_Compatibility      := True; -- -gnatwy\n+      Warn_On_Assertion_Failure           := True; -- -gnatw.a\n+      Warn_On_Assumed_Low_Bound           := True; -- -gnatww\n+      Warn_On_Bad_Fixed_Value             := True; -- -gnatwb\n+      Warn_On_Biased_Representation       := True; -- -gnatw.b\n+      Warn_On_Constant                    := True; -- -gnatwk\n+      Warn_On_Export_Import               := True; -- -gnatwx\n+      Warn_On_Modified_Unread             := True; -- -gnatwm\n+      Warn_On_No_Value_Assigned           := True; -- -gnatwv\n+      Warn_On_Non_Local_Exception         := True; -- -gnatw.x\n+      Warn_On_Object_Renames_Function     := True; -- -gnatw.r\n+      Warn_On_Obsolescent_Feature         := True; -- -gnatwj\n+      Warn_On_Overlap                     := True; -- -gnatw.i\n+      Warn_On_Parameter_Order             := True; -- -gnatw.p\n+      Warn_On_Questionable_Missing_Parens := True; -- -gnatwq\n+      Warn_On_Redundant_Constructs        := True; -- -gnatwr\n+      Warn_On_Reverse_Bit_Order           := True; -- -gnatw.v\n+      Warn_On_Size_Alignment              := True; -- -gnatw.z\n+      Warn_On_Suspicious_Contract         := True; -- -gnatw.t\n+      Warn_On_Suspicious_Modulus_Value    := True; -- -gnatw.m\n+      Warn_On_Unchecked_Conversion        := True; -- -gnatwz\n+      Warn_On_Unrecognized_Pragma         := True; -- -gnatwg\n+      Warn_On_Unrepped_Components         := True; -- -gnatw.c\n    end WA_Warnings;\n \n end Warnsw;"}]}