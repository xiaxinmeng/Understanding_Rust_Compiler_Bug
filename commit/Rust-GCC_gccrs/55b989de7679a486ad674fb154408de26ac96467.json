{"sha": "55b989de7679a486ad674fb154408de26ac96467", "node_id": "C_kwDOANBUbNoAKDU1Yjk4OWRlNzY3OWE0ODZhZDY3NGZiMTU0NDA4ZGUyNmFjOTY0Njc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-21T07:39:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-21T08:39:33Z"}, "message": "tree-optimization/102421 - copy alignment info when splitting groups\n\nThis makes sure to copy and adjust alignment info when we are splitting\nDR groups after alignment analysis.\n\n2021-09-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102421\n\t* tree-vect-loop.c (vect_dissolve_slp_only_groups): Copy and\n\tadjust alignment info.\n\n\t* g++.dg/vect/pr102421.cc: New testcase.", "tree": {"sha": "11571254f03b1d6de6da84ae99d8eafc4526d255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11571254f03b1d6de6da84ae99d8eafc4526d255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b989de7679a486ad674fb154408de26ac96467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b989de7679a486ad674fb154408de26ac96467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b989de7679a486ad674fb154408de26ac96467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b989de7679a486ad674fb154408de26ac96467/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6bf4cd21af39a7923bae007517ab43a4c3b36a"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "ccab6955c677dd4a1e86622525162b32db004edd", "filename": "gcc/testsuite/g++.dg/vect/pr102421.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b989de7679a486ad674fb154408de26ac96467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102421.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b989de7679a486ad674fb154408de26ac96467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102421.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102421.cc?ref=55b989de7679a486ad674fb154408de26ac96467", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" { target aarch64-*-* } } */\n+\n+#include <vector>\n+\n+template<typename ValueType>\n+struct BasicVector\n+{\n+    ValueType& operator[](int i) { return x_[i]; }\n+    ValueType operator[](int i) const { return x_[i]; }\n+    ValueType x_[3];\n+};\n+typedef int ivec1[3];\n+typedef BasicVector<double> RVec1;\n+void foo (\n+   std::vector<RVec1> &x_,\n+   std::vector<RVec1> &xp_,\n+   int homenr,\n+   unsigned short* cFREEZE,\n+   const ivec1* nFreeze)\n+{\n+    std::vector<RVec1> xp = xp_;\n+    std::vector<RVec1> x = x_;\n+    for (int i = 0; i < homenr; i++)\n+    {\n+        const int g = cFREEZE[i];\n+        for (int d = 0; d < 3; d++)\n+        {\n+            if (nFreeze[g][d] == 0)\n+                x[i][d] = xp[i][d];\n+        }\n+    }\n+}"}, {"sha": "e94356d76e987b68201d40b0beb507c7c1b8dbea", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b989de7679a486ad674fb154408de26ac96467/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b989de7679a486ad674fb154408de26ac96467/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=55b989de7679a486ad674fb154408de26ac96467", "patch": "@@ -2047,6 +2047,7 @@ vect_dissolve_slp_only_groups (loop_vec_info loop_vinfo)\n       if (STMT_VINFO_GROUPED_ACCESS (stmt_info))\n \t{\n \t  stmt_vec_info first_element = DR_GROUP_FIRST_ELEMENT (stmt_info);\n+\t  dr_vec_info *dr_info = STMT_VINFO_DR_INFO (first_element);\n \t  unsigned int group_size = DR_GROUP_SIZE (first_element);\n \n \t  /* Check if SLP-only groups.  */\n@@ -2067,6 +2068,24 @@ vect_dissolve_slp_only_groups (loop_vec_info loop_vinfo)\n \t\t    DR_GROUP_GAP (vinfo) = 0;\n \t\t  else\n \t\t    DR_GROUP_GAP (vinfo) = group_size - 1;\n+\t\t  /* Duplicate and adjust alignment info, it needs to\n+\t\t     be present on each group leader, see dr_misalignment.  */\n+\t\t  if (vinfo != first_element)\n+\t\t    {\n+\t\t      dr_vec_info *dr_info2 = STMT_VINFO_DR_INFO (vinfo);\n+\t\t      dr_info2->target_alignment = dr_info->target_alignment;\n+\t\t      int misalignment = dr_info->misalignment;\n+\t\t      if (misalignment != DR_MISALIGNMENT_UNKNOWN)\n+\t\t\t{\n+\t\t\t  HOST_WIDE_INT diff\n+\t\t\t    = (TREE_INT_CST_LOW (DR_INIT (dr_info2->dr))\n+\t\t\t       - TREE_INT_CST_LOW (DR_INIT (dr_info->dr)));\n+\t\t\t  unsigned HOST_WIDE_INT align_c\n+\t\t\t    = dr_info->target_alignment.to_constant ();\n+\t\t\t  misalignment = (misalignment + diff) % align_c;\n+\t\t\t}\n+\t\t      dr_info2->misalignment = misalignment;\n+\t\t    }\n \t\t  vinfo = next;\n \t\t}\n \t    }"}]}