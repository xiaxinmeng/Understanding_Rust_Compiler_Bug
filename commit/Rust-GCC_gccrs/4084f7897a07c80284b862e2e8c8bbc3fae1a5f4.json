{"sha": "4084f7897a07c80284b862e2e8c8bbc3fae1a5f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4NGY3ODk3YTA3YzgwMjg0Yjg2MmUyZThjOGJiYzNmYWUxYTVmNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T13:59:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T13:59:39Z"}, "message": "(valid_machine_attribute): Now receive name and args.\n\nFrom-SVN: r9262", "tree": {"sha": "1ff4a2bf3e936b9d04fa2b18dbf41ee5553458b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff4a2bf3e936b9d04fa2b18dbf41ee5553458b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4/comments", "author": null, "committer": null, "parents": [{"sha": "5306559682044f799760e0d8cbcdd622c3a5ca0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5306559682044f799760e0d8cbcdd622c3a5ca0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5306559682044f799760e0d8cbcdd622c3a5ca0b"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "689003e135316f34a570c2f5efbfaab8a5e3f4eb", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4084f7897a07c80284b862e2e8c8bbc3fae1a5f4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4084f7897a07c80284b862e2e8c8bbc3fae1a5f4", "patch": "@@ -2902,56 +2902,63 @@ build_type_attribute_variant (ttype, attribute)\n   return ttype;\n }\n \n-/* Return a 1 if NEW_ATTR is valid for either declaration DECL or type TYPE \n-   and 0 otherwise.  Validity is determined the configuration macros \n-   VALID_MACHINE_DECL_ATTRIBUTE and VALID_MACHINE_TYPE_ATTRIBUTE. */\n+/* Return a 1 if ATTR_NAME and ATTR_ARGS is valid for either declaration DECL\n+   or type TYPE and 0 otherwise.  Validity is determined the configuration\n+   macros VALID_MACHINE_DECL_ATTRIBUTE and VALID_MACHINE_TYPE_ATTRIBUTE. */\n \n int\n-valid_machine_attribute (new_attr, decl, type)\n-  tree new_attr;\n-  tree decl;\n-  tree type;\n+valid_machine_attribute (attr_name, attr_args, decl, type)\n+     tree attr_name, attr_args;\n+     tree decl;\n+     tree type;\n {\n   int valid = 0;\n-  tree decl_attr_list = DECL_MACHINE_ATTRIBUTES (decl);\n+  tree decl_attr_list = decl != 0 ? DECL_MACHINE_ATTRIBUTES (decl) : 0;\n   tree type_attr_list = TYPE_ATTRIBUTES (type);\n \n+  /* For now, we don't support args.  */\n+  if (attr_args != 0)\n+    return 0;\n+\n #ifdef VALID_MACHINE_DECL_ATTRIBUTE\n-  if (VALID_MACHINE_DECL_ATTRIBUTE (decl, decl_attr_list, new_attr))\n+  if (decl != 0\n+      && VALID_MACHINE_DECL_ATTRIBUTE (decl, decl_attr_list, attr_name))\n     {\n       tree attr_list;\n       int in_list = 0;\n \n       for (attr_list = decl_attr_list; \n            attr_list;\n            attr_list = TREE_CHAIN (attr_list))\n-\tif (TREE_VALUE (attr_list) == new_attr)\n+\tif (TREE_VALUE (attr_list) == attr_name)\n \t  in_list = 1;\n \n       if (! in_list)\n-        decl_attr_list = tree_cons (NULL_TREE, new_attr, decl_attr_list);\n+        decl_attr_list = tree_cons (NULL_TREE, attr_name, decl_attr_list);\n \n       decl = build_decl_attribute_variant (decl, decl_attr_list);\n       valid = 1;\n     }\n #endif\n \n #ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n-  if (VALID_MACHINE_TYPE_ATTRIBUTE (type, type_attr_list, new_attr))\n+  if (VALID_MACHINE_TYPE_ATTRIBUTE (type, type_attr_list, attr_name))\n     {\n       tree attr_list;\n       int in_list = 0;\n \n       for (attr_list = type_attr_list;\n            attr_list;\n \t   attr_list = TREE_CHAIN (attr_list))\n-\tif (TREE_VALUE (attr_list) == new_attr)\n+\tif (TREE_VALUE (attr_list) == attr_name)\n \t  in_list = 1;\n \n       if (! in_list)\n-        type_attr_list = tree_cons (NULL_TREE, new_attr, type_attr_list);\n+        type_attr_list = tree_cons (NULL_TREE, attr_name, type_attr_list);\n \n-      decl = build_type_attribute_variant (type, type_attr_list);\n+      type = build_type_attribute_variant (type, type_attr_list);\n+      if (decl != 0)\n+\tTREE_TYPE (decl) = type;\n       valid = 1;\n     }\n #endif"}]}