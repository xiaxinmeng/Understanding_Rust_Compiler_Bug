{"sha": "0d2f38ee4068f6d836a975f9e91663f72e17d93e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyZjM4ZWU0MDY4ZjZkODM2YTk3NWY5ZTkxNjYzZjcyZTE3ZDkzZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-21T21:32:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T21:32:06Z"}, "message": "expmed.c (extract_bit_field): Reverse operands of && condition to prevent a potential division by zero in the...\n\n\t* expmed.c (extract_bit_field): Reverse operands of && condition to\n        prevent a potential division by zero in the previously first branch.\n\t* config/pa/pa.md (extv, extzv): FAIL if the bitfield length is zero.\n\nFrom-SVN: r65907", "tree": {"sha": "28e1168b00fd20a7fceed802205b8b1947fdeec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28e1168b00fd20a7fceed802205b8b1947fdeec4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d2f38ee4068f6d836a975f9e91663f72e17d93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2f38ee4068f6d836a975f9e91663f72e17d93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2f38ee4068f6d836a975f9e91663f72e17d93e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2f38ee4068f6d836a975f9e91663f72e17d93e/comments", "author": null, "committer": null, "parents": [{"sha": "d79f9ec9ffb6aa93e0bd6479ac12564eb27b46c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79f9ec9ffb6aa93e0bd6479ac12564eb27b46c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79f9ec9ffb6aa93e0bd6479ac12564eb27b46c1"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "ec107c8a9ea62f2e025e18aac46ebf1cb9bf3874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d2f38ee4068f6d836a975f9e91663f72e17d93e", "patch": "@@ -3,6 +3,10 @@\n \t* calls.c (expand_call): Prevent sibcall optimization for calls to\n \tnested subprograms.\n \n+\t* expmed.c (extract_bit_field): Reverse operands of && condition to\n+        prevent a potential division by zero in the previously first branch.\n+\t* config/pa/pa.md (extv, extzv): FAIL if the bitfield length is zero.\n+\n 2003-04-21  Joel Brobecker  <brobecker@gnat.com>\n \n \t* dwarf2out.c (is_ada, is_ada_subrange_type): New functions."}, {"sha": "1d69c20d04c324b6f003536af52b2479420aa661", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=0d2f38ee4068f6d836a975f9e91663f72e17d93e", "patch": "@@ -7153,6 +7153,10 @@\n   \"\"\n   \"\n {\n+  /* PA extraction insns don't support zero length bitfields.  */\n+  if (INTVAL (operands[2]) == 0)\n+    FAIL;\n+\n   if (TARGET_64BIT)\n     emit_insn (gen_extzv_64 (operands[0], operands[1],\n \t\t\t     operands[2], operands[3]));\n@@ -7215,6 +7219,10 @@\n   \"\"\n   \"\n {\n+  /* PA extraction insns don't support zero length bitfields.  */\n+  if (INTVAL (operands[2]) == 0)\n+    FAIL;\n+\n   if (TARGET_64BIT)\n     emit_insn (gen_extv_64 (operands[0], operands[1],\n \t\t\t    operands[2], operands[3]));"}, {"sha": "5cc08945eddcd5c99c7b1d7fd06d28e37f700a46", "filename": "gcc/expmed.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d2f38ee4068f6d836a975f9e91663f72e17d93e/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0d2f38ee4068f6d836a975f9e91663f72e17d93e", "patch": "@@ -1104,25 +1104,25 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \t    ? mode\n \t    : mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0));\n \n-  if (((GET_CODE (op0) != MEM\n-\t&& TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\t  GET_MODE_BITSIZE (GET_MODE (op0)))\n-\t&& GET_MODE_SIZE (mode1) != 0\n-\t&& byte_offset % GET_MODE_SIZE (mode1) == 0)\n-       || (GET_CODE (op0) == MEM\n-\t   && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (op0))\n-\t       || (offset * BITS_PER_UNIT % bitsize == 0\n-\t\t   && MEM_ALIGN (op0) % bitsize == 0))))\n-      && ((bitsize >= BITS_PER_WORD && bitsize == GET_MODE_BITSIZE (mode)\n-\t   && bitpos % BITS_PER_WORD == 0)\n-\t  || (mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0) != BLKmode\n-\t      /* ??? The big endian test here is wrong.  This is correct\n-\t\t if the value is in a register, and if mode_for_size is not\n-\t\t the same mode as op0.  This causes us to get unnecessarily\n-\t\t inefficient code from the Thumb port when -mbig-endian.  */\n-\t      && (BYTES_BIG_ENDIAN\n-\t\t  ? bitpos + bitsize == BITS_PER_WORD\n-\t\t  : bitpos == 0))))\n+  if (((bitsize >= BITS_PER_WORD && bitsize == GET_MODE_BITSIZE (mode)\n+\t&& bitpos % BITS_PER_WORD == 0)\n+       || (mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0) != BLKmode\n+\t   /* ??? The big endian test here is wrong.  This is correct\n+\t      if the value is in a register, and if mode_for_size is not\n+\t      the same mode as op0.  This causes us to get unnecessarily\n+\t      inefficient code from the Thumb port when -mbig-endian.  */\n+\t   && (BYTES_BIG_ENDIAN\n+\t       ? bitpos + bitsize == BITS_PER_WORD\n+\t       : bitpos == 0)))\n+      && ((GET_CODE (op0) != MEM\n+\t   && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n+\t\t\t\t     GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t   && GET_MODE_SIZE (mode1) != 0\n+\t   && byte_offset % GET_MODE_SIZE (mode1) == 0)\n+\t  || (GET_CODE (op0) == MEM\n+\t      && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (op0))\n+\t\t  || (offset * BITS_PER_UNIT % bitsize == 0\n+\t\t      && MEM_ALIGN (op0) % bitsize == 0)))))\n     {\n       if (mode1 != GET_MODE (op0))\n \t{"}]}