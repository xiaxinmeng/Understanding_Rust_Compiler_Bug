{"sha": "fc130ab54fd9a254f07426f9c180c367b039d7f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMxMzBhYjU0ZmQ5YTI1NGYwNzQyNmY5YzE4MGMzNjdiMDM5ZDdmOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-03T10:11:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-03T10:12:50Z"}, "message": "Assorted LTO fixes for Ada\n\nThis polishes a few rough edges visible in LTO mode.\n\ngcc/ada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Make the\n\ttwo fields of the fat pointer type addressable, and do not make the\n\ttemplate type read-only.\n\t<E_Record_Type>: If the type has discriminants mark it as may_alias.\n\t* gcc-interface/utils.c (make_dummy_type): Likewise.\n\t(build_dummy_unc_pointer_types): Likewise.", "tree": {"sha": "fe1aeb09dfc044ff08612650600835286de256b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1aeb09dfc044ff08612650600835286de256b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc130ab54fd9a254f07426f9c180c367b039d7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc130ab54fd9a254f07426f9c180c367b039d7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc130ab54fd9a254f07426f9c180c367b039d7f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc130ab54fd9a254f07426f9c180c367b039d7f9/comments", "author": null, "committer": null, "parents": [{"sha": "e3f9f80bfa9e58a90dfe75631921c78660342daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9f80bfa9e58a90dfe75631921c78660342daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f9f80bfa9e58a90dfe75631921c78660342daf"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "8120d4e33cff75fc5798b96f9f8f5c431ebe359f", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc130ab54fd9a254f07426f9c180c367b039d7f9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc130ab54fd9a254f07426f9c180c367b039d7f9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fc130ab54fd9a254f07426f9c180c367b039d7f9", "patch": "@@ -2197,14 +2197,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  }\n \telse\n \t  {\n+\t    /* We make the fields addressable for the sake of compatibility\n+\t       with languages for which the regular fields are addressable.  */\n \t    tem\n \t      = create_field_decl (get_identifier (\"P_ARRAY\"),\n \t\t\t\t   ptr_type_node, gnu_fat_type,\n-\t\t\t\t   NULL_TREE, NULL_TREE, 0, 0);\n+\t\t\t\t   NULL_TREE, NULL_TREE, 0, 1);\n \t    DECL_CHAIN (tem)\n \t      = create_field_decl (get_identifier (\"P_BOUNDS\"),\n \t\t\t\t   gnu_ptr_template, gnu_fat_type,\n-\t\t\t\t   NULL_TREE, NULL_TREE, 0, 0);\n+\t\t\t\t   NULL_TREE, NULL_TREE, 0, 1);\n \t    finish_fat_pointer_type (gnu_fat_type, tem);\n \t    SET_TYPE_UNCONSTRAINED_ARRAY (gnu_fat_type, gnu_type);\n \t  }\n@@ -2327,7 +2329,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tfinish_record_type (gnu_template_type, gnu_template_fields, 0,\n \t\t\t    debug_info_p);\n \tTYPE_CONTEXT (gnu_template_type) = current_function_decl;\n-\tTYPE_READONLY (gnu_template_type) = 1;\n \n \t/* If Component_Size is not already specified, annotate it with the\n \t   size of the component.  */\n@@ -3054,15 +3055,24 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t        || type_annotate_only);\n \t  }\n \n-\t/* Make a node for the record.  If we are not defining the record,\n-\t   suppress expanding incomplete types.  */\n+\t/* Make a node for the record type.  */\n \tgnu_type = make_node (tree_code_for_record_type (gnat_entity));\n \tTYPE_NAME (gnu_type) = gnu_entity_name;\n \tTYPE_PACKED (gnu_type) = (packed != 0) || has_align || has_rep;\n \tTYPE_REVERSE_STORAGE_ORDER (gnu_type)\n \t  = Reverse_Storage_Order (gnat_entity);\n+\n+\t/* If the record type has discriminants, pointers to it may also point\n+\t   to constrained subtypes of it, so mark it as may_alias for LTO.  */\n+\tif (has_discr)\n+\t  prepend_one_attribute\n+\t    (&attr_list, ATTR_MACHINE_ATTRIBUTE,\n+\t     get_identifier (\"may_alias\"), NULL_TREE,\n+\t     gnat_entity);\n+\n \tprocess_attributes (&gnu_type, &attr_list, true, gnat_entity);\n \n+\t/* If we are not defining it, suppress expanding incomplete types.  */\n \tif (!definition)\n \t  {\n \t    defer_incomplete_level++;"}, {"sha": "2656f117fa96e9a3b6fee61193fb810b79b10e00", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc130ab54fd9a254f07426f9c180c367b039d7f9/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc130ab54fd9a254f07426f9c180c367b039d7f9/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=fc130ab54fd9a254f07426f9c180c367b039d7f9", "patch": "@@ -467,6 +467,11 @@ make_dummy_type (Entity_Id gnat_type)\n     = create_type_stub_decl (TYPE_NAME (gnu_type), gnu_type);\n   if (Is_By_Reference_Type (gnat_equiv))\n     TYPE_BY_REFERENCE_P (gnu_type) = 1;\n+  if (Has_Discriminants (gnat_equiv))\n+    decl_attributes (&gnu_type,\n+\t\t     tree_cons (get_identifier (\"may_alias\"), NULL_TREE,\n+\t\t\t\tNULL_TREE),\n+\t\t     ATTR_FLAG_TYPE_IN_PLACE);\n \n   SET_DUMMY_NODE (gnat_equiv, gnu_type);\n \n@@ -516,10 +521,10 @@ build_dummy_unc_pointer_types (Entity_Id gnat_desig_type, tree gnu_desig_type)\n     = create_type_stub_decl (create_concat_name (gnat_desig_type, \"XUP\"),\n \t\t\t     gnu_fat_type);\n   fields = create_field_decl (get_identifier (\"P_ARRAY\"), gnu_ptr_array,\n-\t\t\t      gnu_fat_type, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t\t      gnu_fat_type, NULL_TREE, NULL_TREE, 0, 1);\n   DECL_CHAIN (fields)\n     = create_field_decl (get_identifier (\"P_BOUNDS\"), gnu_ptr_template,\n-\t\t\t gnu_fat_type, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t\t gnu_fat_type, NULL_TREE, NULL_TREE, 0, 1);\n   finish_fat_pointer_type (gnu_fat_type, fields);\n   SET_TYPE_UNCONSTRAINED_ARRAY (gnu_fat_type, gnu_desig_type);\n   /* Suppress debug info until after the type is completed.  */"}]}