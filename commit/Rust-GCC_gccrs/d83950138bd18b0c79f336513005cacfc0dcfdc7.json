{"sha": "d83950138bd18b0c79f336513005cacfc0dcfdc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzOTUwMTM4YmQxOGIwYzc5ZjMzNjUxMzAwNWNhY2ZjMGRjZmRjNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-06-05T08:52:02Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-06-05T08:52:02Z"}, "message": "[AArch64] Add combine pattern for storing lane zero of a vector\n\n\t* config/aarch64/aarch64-simd.md (aarch64_store_lane0<mode>):\n\tNew pattern.\n\n\t* gcc.target/aarch64/store_lane0_str_1.c: New test.\n\nFrom-SVN: r248871", "tree": {"sha": "cfc8ea9bf517102b09175cd4e621302b1fa41679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfc8ea9bf517102b09175cd4e621302b1fa41679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d83950138bd18b0c79f336513005cacfc0dcfdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83950138bd18b0c79f336513005cacfc0dcfdc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83950138bd18b0c79f336513005cacfc0dcfdc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83950138bd18b0c79f336513005cacfc0dcfdc7/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "279dc4b464e3cc207b1729d8a392240430c57f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279dc4b464e3cc207b1729d8a392240430c57f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279dc4b464e3cc207b1729d8a392240430c57f42"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "06bfd2904e6a9f6bc0722f4c8405a2c921088d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d83950138bd18b0c79f336513005cacfc0dcfdc7", "patch": "@@ -1,3 +1,8 @@\n+2017-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_store_lane0<mode>):\n+\tNew pattern.\n+\n 2017-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (sub<mode>3_compare1_imm): New define_insn."}, {"sha": "c5a86ff6f7196eb634be426ecea97cdfbfc7a7a4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d83950138bd18b0c79f336513005cacfc0dcfdc7", "patch": "@@ -153,6 +153,19 @@\n    (set_attr \"length\" \"4,4,4,8,8,8,4\")]\n )\n \n+;; When storing lane zero we can use the normal STR and its more permissive\n+;; addressing modes.\n+\n+(define_insn \"aarch64_store_lane0<mode>\"\n+  [(set (match_operand:<VEL> 0 \"memory_operand\" \"=m\")\n+\t(vec_select:<VEL> (match_operand:VALL_F16 1 \"register_operand\" \"w\")\n+\t\t\t(parallel [(match_operand 2 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_SIMD\n+   && ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])) == 0\"\n+  \"str\\\\t%<Vetype>1, %0\"\n+  [(set_attr \"type\" \"neon_store1_1reg<q>\")]\n+)\n+\n (define_insn \"load_pair<mode>\"\n   [(set (match_operand:VD 0 \"register_operand\" \"=w\")\n \t(match_operand:VD 1 \"aarch64_mem_pair_operand\" \"Ump\"))"}, {"sha": "85de68e52d6f63a5d6ba58f3c35ba3b2dd5807f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d83950138bd18b0c79f336513005cacfc0dcfdc7", "patch": "@@ -1,3 +1,7 @@\n+2017-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/store_lane0_str_1.c: New test.\n+\n 2017-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/subs_compare_2.c: New test."}, {"sha": "4464fec2c1f24c212be4fc6c94b509843fd0058e", "filename": "gcc/testsuite/gcc.target/aarch64/store_lane0_str_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_lane0_str_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83950138bd18b0c79f336513005cacfc0dcfdc7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_lane0_str_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_lane0_str_1.c?ref=d83950138bd18b0c79f336513005cacfc0dcfdc7", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int v2si __attribute__ ((vector_size (8)));\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+typedef short v4hi __attribute__ ((vector_size (8)));\n+typedef __fp16 v4hf __attribute__ ((vector_size (8)));\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef __fp16 v8hf __attribute__ ((vector_size (16)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+#define LANE(N) (N - 1)\n+#else\n+#define LANE(N) 0\n+#endif\n+\n+#define FUNC(T, E, N)\t\t\t\\\n+void\t\t\t\t\t\\\n+store_lane_##T (T x, E *y)\t\t\\\n+{\t\t\t\t\t\\\n+  y[0] = x[N - 1 - LANE (N)];\t\t\\\n+  y[3] = x[LANE (N)];\t\t\t\\\n+}\n+\n+FUNC (v2si, int, 2)\n+FUNC (v2sf, float, 2)\n+FUNC (v4hi, short, 4)\n+FUNC (v4hf, __fp16, 4)\n+FUNC (v8qi, char, 8)\n+\n+FUNC (v4si, int, 4)\n+FUNC (v4sf, float, 4)\n+FUNC (v8hi, short, 8)\n+FUNC (v8hf, __fp16, 8)\n+FUNC (v16qi, char, 16)\n+FUNC (v2di, long long, 2)\n+FUNC (v2df, double, 2)\n+\n+/* When storing lane zero of a vector we can use the scalar STR instruction\n+   that supports more addressing modes.  */\n+\n+/* { dg-final { scan-assembler-times \"str\\ts\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"str\\tb\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"str\\th\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"str\\td\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-not \"umov\" } } */\n+/* { dg-final { scan-assembler-not \"dup\" } } */"}]}