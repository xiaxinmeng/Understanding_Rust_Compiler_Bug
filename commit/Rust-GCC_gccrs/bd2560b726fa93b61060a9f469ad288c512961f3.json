{"sha": "bd2560b726fa93b61060a9f469ad288c512961f3", "node_id": "C_kwDOANBUbNoAKGJkMjU2MGI3MjZmYTkzYjYxMDYwYTlmNDY5YWQyODhjNTEyOTYxZjM", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-08-30T14:33:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:06Z"}, "message": "[Ada] Proof of the runtime support for attribute 'Width\n\ngcc/ada/\n\n\t* libgnat/s-widlllu.ads: Mark in SPARK.\n\t* libgnat/s-widllu.ads: Likewise.\n\t* libgnat/s-widuns.ads: Likewise.\n\t* libgnat/s-widthu.adb: Add ghost code and a\n\tpseudo-postcondition.", "tree": {"sha": "520d242ef6824d20f9c41d059d56cac53ef42762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/520d242ef6824d20f9c41d059d56cac53ef42762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2560b726fa93b61060a9f469ad288c512961f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2560b726fa93b61060a9f469ad288c512961f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2560b726fa93b61060a9f469ad288c512961f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2560b726fa93b61060a9f469ad288c512961f3/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5742a0e1191365c57bc06fdbf1ff5da1028f127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5742a0e1191365c57bc06fdbf1ff5da1028f127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5742a0e1191365c57bc06fdbf1ff5da1028f127"}], "stats": {"total": 122, "additions": 116, "deletions": 6}, "files": [{"sha": "10a0c9c7f9b3fab95f54602c4d98a5f87f19fd25", "filename": "gcc/ada/libgnat/s-widlllu.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads?ref=bd2560b726fa93b61060a9f469ad288c512961f3", "patch": "@@ -34,8 +34,9 @@\n with System.Width_U;\n with System.Unsigned_Types;\n \n-package System.Wid_LLLU is\n-\n+package System.Wid_LLLU\n+  with SPARK_Mode\n+is\n    subtype Long_Long_Long_Unsigned is Unsigned_Types.Long_Long_Long_Unsigned;\n \n    function Width_Long_Long_Long_Unsigned is"}, {"sha": "7eaf966cbb7573942c7dacd39adfb3462e75ad77", "filename": "gcc/ada/libgnat/s-widllu.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widllu.ads?ref=bd2560b726fa93b61060a9f469ad288c512961f3", "patch": "@@ -34,8 +34,9 @@\n with System.Width_U;\n with System.Unsigned_Types;\n \n-package System.Wid_LLU is\n-\n+package System.Wid_LLU\n+  with SPARK_Mode\n+is\n    subtype Long_Long_Unsigned is Unsigned_Types.Long_Long_Unsigned;\n \n    function Width_Long_Long_Unsigned is new Width_U (Long_Long_Unsigned);"}, {"sha": "e0e4d17b4d19180343ca0b0da55ea4bc9de58154", "filename": "gcc/ada/libgnat/s-widthu.adb", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widthu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widthu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthu.adb?ref=bd2560b726fa93b61060a9f469ad288c512961f3", "patch": "@@ -29,10 +29,87 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n function System.Width_U (Lo, Hi : Uns) return Natural is\n+\n+   --  Ghost code, loop invariants and assertions in this unit are meant for\n+   --  analysis only, not for run-time checking, as it would be too costly\n+   --  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+   pragma Assertion_Policy (Ghost          => Ignore,\n+                            Loop_Invariant => Ignore,\n+                            Assert         => Ignore);\n+\n    W : Natural;\n    T : Uns;\n \n+   package Unsigned_Conversion is new Unsigned_Conversions (Int => Uns);\n+\n+   function Big (Arg : Uns) return Big_Integer is\n+     (Unsigned_Conversion.To_Big_Integer (Arg))\n+   with Ghost;\n+\n+   --  Maximum value of exponent for 10 that fits in Uns'Base\n+   function Max_Log10 return Natural is\n+     (case Uns'Base'Size is\n+        when 8   => 2,\n+        when 16  => 4,\n+        when 32  => 9,\n+        when 64  => 19,\n+        when 128 => 38,\n+        when others => raise Program_Error)\n+   with Ghost;\n+\n+   Max_W  : constant Natural := Max_Log10 with Ghost;\n+   Big_10 : constant Big_Integer := Big (10) with Ghost;\n+\n+   procedure Lemma_Lower_Mult (A, B, C : Big_Natural)\n+   with\n+     Ghost,\n+     Pre  => A <= B,\n+     Post => A * C <= B * C;\n+\n+   procedure Lemma_Div_Commutation (X, Y : Uns)\n+   with\n+     Ghost,\n+     Pre  => Y /= 0,\n+     Post => Big (X) / Big (Y) = Big (X / Y);\n+\n+   procedure Lemma_Div_Twice (X : Big_Natural; Y, Z : Big_Positive)\n+   with\n+     Ghost,\n+     Post => X / Y / Z = X / (Y * Z);\n+\n+   procedure Lemma_Lower_Mult (A, B, C : Big_Natural) is\n+   begin\n+      null;\n+   end Lemma_Lower_Mult;\n+\n+   procedure Lemma_Div_Commutation (X, Y : Uns) is\n+   begin\n+      null;\n+   end Lemma_Div_Commutation;\n+\n+   procedure Lemma_Div_Twice (X : Big_Natural; Y, Z : Big_Positive) is\n+      XY  : constant Big_Natural := X / Y;\n+      YZ  : constant Big_Natural := Y * Z;\n+      XYZ : constant Big_Natural := X / Y / Z;\n+      R   : constant Big_Natural := (XY rem Z) * Y + (X rem Y);\n+   begin\n+      pragma Assert (X = XY * Y + (X rem Y));\n+      pragma Assert (XY = XY / Z * Z + (XY rem Z));\n+      pragma Assert (X = XYZ * YZ + R);\n+      pragma Assert ((XY rem Z) * Y <= (Z - 1) * Y);\n+      pragma Assert (R <= YZ - 1);\n+      pragma Assert (X / YZ = (XYZ * YZ + R) / YZ);\n+      pragma Assert (X / YZ = XYZ + R / YZ);\n+   end Lemma_Div_Twice;\n+\n+   Pow    : Big_Integer := 1 with Ghost;\n+   T_Init : constant Uns := Uns'Max (Lo, Hi) with Ghost;\n+\n begin\n    if Lo > Hi then\n       return 0;\n@@ -50,10 +127,40 @@ begin\n       --  Increase value if more digits required\n \n       while T >= 10 loop\n+         Lemma_Div_Commutation (T, 10);\n+         Lemma_Div_Twice (Big (T_Init), Big_10 ** (W - 2), Big_10);\n+\n          T := T / 10;\n          W := W + 1;\n+         Pow := Pow * 10;\n+\n+         pragma Loop_Variant (Decreases => T);\n+         pragma Loop_Invariant (W in 3 .. Max_W + 3);\n+         pragma Loop_Invariant (Pow = Big_10 ** (W - 2));\n+         pragma Loop_Invariant (Big (T) = Big (T_Init) / Pow);\n       end loop;\n \n+      declare\n+         F : constant Big_Integer := Big_10 ** (W - 2) with Ghost;\n+         Q : constant Big_Integer := Big (T_Init) / F with Ghost;\n+         R : constant Big_Integer := Big (T_Init) rem F with Ghost;\n+      begin\n+         pragma Assert (Q < Big_10);\n+         pragma Assert (Big (T_Init) = Q * F + R);\n+         Lemma_Lower_Mult (Q, Big (9), F);\n+         pragma Assert (Big (T_Init) <= Big (9) * F + F - 1);\n+         pragma Assert (Big (T_Init) < Big_10 * F);\n+         pragma Assert (Big_10 * F = Big_10 ** (W - 1));\n+      end;\n+\n+      --  This is an expression of the functional postcondition for Width_U,\n+      --  which cannot be expressed readily as a postcondition as this would\n+      --  require making the instantiation Unsigned_Conversion and function\n+      --  Big available from the spec.\n+\n+      pragma Assert (Big (Lo) < Big_10 ** (W - 1));\n+      pragma Assert (Big (Hi) < Big_10 ** (W - 1));\n+\n       return W;\n    end if;\n "}, {"sha": "713532ed6d7e68577eda7cc67421c3d884eaa9d0", "filename": "gcc/ada/libgnat/s-widuns.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2560b726fa93b61060a9f469ad288c512961f3/gcc%2Fada%2Flibgnat%2Fs-widuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widuns.ads?ref=bd2560b726fa93b61060a9f469ad288c512961f3", "patch": "@@ -34,8 +34,9 @@\n with System.Width_U;\n with System.Unsigned_Types;\n \n-package System.Wid_Uns is\n-\n+package System.Wid_Uns\n+  with SPARK_Mode\n+is\n    subtype Unsigned is Unsigned_Types.Unsigned;\n \n    function Width_Unsigned is new Width_U (Unsigned);"}]}