{"sha": "9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0NDczYjZjNGE3MDZjZDVkMzhhNTBkMTBhODNjNTQ5ZDY3NmNhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:03:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:03:01Z"}, "message": "Be stricter about CONST_VECTOR operands\n\nThe recent gen_vec_duplicate patches used CONST_VECTOR for all\nconstants, but the documentation says:\n\n  @findex const_vector\n  @item (const_vector:@var{m} [@var{x0} @var{x1} @dots{}])\n  Represents a vector constant.  The square brackets stand for the vector\n  containing the constant elements.  @var{x0}, @var{x1} and so on are\n  the @code{const_int}, @code{const_double} or @code{const_fixed} elements.\n\nBoth the AArch32 and AArch64 ports relied on the elements having\nthis form and would ICE if the element was something like a CONST\ninstead.  This showed up as a failure in vect-126.c for both arm-eabi\nand aarch64-elf (but not aarch64-linux-gnu, which is what the series\nwas tested on).\n\nThe two obvious options were to redefine CONST_VECTOR to accept all\nconstants or make gen_vec_duplicate honour the existing documentation.\nIt looks like other code also assumes that integer CONST_VECTORs contain\nCONST_INTs, so the patch does the latter.\n\nI deliberately didn't add an assert to gen_const_vec_duplicate\nbecause it looks like the SPU port *does* expect to be able to create\nCONST_VECTORs of symbolic constants.\n\nAlso, I think the list above should include const_wide_int for vectors\nof TImode and wider.\n\nThe new routine takes a mode for consistency with the generators,\nand because I think it does make sense to accept all constants for\nvariable-length:\n\n    (const (vec_duplicate ...))\n\nrather than have some rtxes for which we instead use:\n\n    (vec_duplicate (const ...))\n\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* doc/rtl.texi (const_vector): Say that elements can be\n\tconst_wide_ints too.\n\t* emit-rtl.h (valid_for_const_vec_duplicate_p): Declare.\n\t* emit-rtl.c (valid_for_const_vec_duplicate_p): New function.\n\t(gen_vec_duplicate): Use it instead of CONSTANT_P.\n\t* optabs.c (expand_vector_broadcast): Likewise.\n\nFrom-SVN: r254586", "tree": {"sha": "1fae44f84b06409dadb5c1598de1a5106dd9fe18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fae44f84b06409dadb5c1598de1a5106dd9fe18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/comments", "author": null, "committer": null, "parents": [{"sha": "4d93060263ecf25f6324dbc5d07bbd79166cb2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d93060263ecf25f6324dbc5d07bbd79166cb2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d93060263ecf25f6324dbc5d07bbd79166cb2a3"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "79d156e09692194ae6daefb0eb766c8562f9bff4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "patch": "@@ -1,3 +1,12 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* doc/rtl.texi (const_vector): Say that elements can be\n+\tconst_wide_ints too.\n+\t* emit-rtl.h (valid_for_const_vec_duplicate_p): Declare.\n+\t* emit-rtl.c (valid_for_const_vec_duplicate_p): New function.\n+\t(gen_vec_duplicate): Use it instead of CONSTANT_P.\n+\t* optabs.c (expand_vector_broadcast): Likewise.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "21524f5469648c656ce39c1ec238dd0cb01ea1e6", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "patch": "@@ -1625,7 +1625,8 @@ accessed with @code{CONST_FIXED_VALUE_LOW}.\n @item (const_vector:@var{m} [@var{x0} @var{x1} @dots{}])\n Represents a vector constant.  The square brackets stand for the vector\n containing the constant elements.  @var{x0}, @var{x1} and so on are\n-the @code{const_int}, @code{const_double} or @code{const_fixed} elements.\n+the @code{const_int}, @code{const_wide_int}, @code{const_double} or\n+@code{const_fixed} elements.\n \n The number of units in a @code{const_vector} is obtained with the macro\n @code{CONST_VECTOR_NUNITS} as in @code{CONST_VECTOR_NUNITS (@var{v})}."}, {"sha": "a076711643618c7f95b2d6d8eb8dedc21369ed8d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "patch": "@@ -5772,6 +5772,17 @@ init_emit (void)\n #endif\n }\n \n+/* Return true if X is a valid element for a duplicated vector constant\n+   of the given mode.  */\n+\n+bool\n+valid_for_const_vec_duplicate_p (machine_mode, rtx x)\n+{\n+  return (CONST_SCALAR_INT_P (x)\n+\t  || CONST_DOUBLE_AS_FLOAT_P (x)\n+\t  || CONST_FIXED_P (x));\n+}\n+\n /* Like gen_const_vec_duplicate, but ignore const_tiny_rtx.  */\n \n static rtx\n@@ -5807,7 +5818,7 @@ gen_const_vec_duplicate (machine_mode mode, rtx elt)\n rtx\n gen_vec_duplicate (machine_mode mode, rtx x)\n {\n-  if (CONSTANT_P (x))\n+  if (valid_for_const_vec_duplicate_p (mode, x))\n     return gen_const_vec_duplicate (mode, x);\n   return gen_rtx_VEC_DUPLICATE (mode, x);\n }"}, {"sha": "dd2415dd1d01a3b870a24502262109f4e02cfe18", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "patch": "@@ -438,6 +438,7 @@ get_max_uid (void)\n   return crtl->emit.x_cur_insn_uid;\n }\n \n+extern bool valid_for_const_vec_duplicate_p (machine_mode, rtx);\n extern rtx gen_const_vec_duplicate (machine_mode, rtx);\n extern rtx gen_vec_duplicate (machine_mode, rtx);\n "}, {"sha": "847b801d288932412c7d8ed644b935d55ddbae21", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4473b6c4a706cd5d38a50d10a83c549d676ca3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9b4473b6c4a706cd5d38a50d10a83c549d676ca3", "patch": "@@ -377,7 +377,7 @@ expand_vector_broadcast (machine_mode vmode, rtx op)\n \n   gcc_checking_assert (VECTOR_MODE_P (vmode));\n \n-  if (CONSTANT_P (op))\n+  if (valid_for_const_vec_duplicate_p (vmode, op))\n     return gen_const_vec_duplicate (vmode, op);\n \n   /* ??? If the target doesn't have a vec_init, then we have no easy way"}]}