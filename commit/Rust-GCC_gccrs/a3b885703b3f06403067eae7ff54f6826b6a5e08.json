{"sha": "a3b885703b3f06403067eae7ff54f6826b6a5e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiODg1NzAzYjNmMDY0MDMwNjdlYWU3ZmY1NGY2ODI2YjZhNWUwOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-14T21:19:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-14T21:19:05Z"}, "message": "re PR rtl-optimization/6631 (Miscompiled structure access)\n\n\tPR optimization/6631\n\t* Makefile.in (function.o): Depend on langhooks.h.\n\t* alias.c (objects_must_conflict_p): Check honor_readonly when\n\texamining TYPE_READONLY.\n\t* function.c (assign_stack_temp_for_type): Likewise.\n\n\tPR optimization/6631\n\t* g++.dg/opt/const2.C: New test.\n\nFrom-SVN: r58136", "tree": {"sha": "770e70e8378f7c6f20a975a6e92e056f9a8f584b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/770e70e8378f7c6f20a975a6e92e056f9a8f584b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b885703b3f06403067eae7ff54f6826b6a5e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b885703b3f06403067eae7ff54f6826b6a5e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b885703b3f06403067eae7ff54f6826b6a5e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b885703b3f06403067eae7ff54f6826b6a5e08/comments", "author": null, "committer": null, "parents": [{"sha": "77631fa7edc6a2b6c4177c0f7a3b1eb454e372c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77631fa7edc6a2b6c4177c0f7a3b1eb454e372c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77631fa7edc6a2b6c4177c0f7a3b1eb454e372c3"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "2513b47cdbb330f38a1598a354f5e023268e5c70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3b885703b3f06403067eae7ff54f6826b6a5e08", "patch": "@@ -1,3 +1,10 @@\n+2002-10-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR optimization/6631\n+\t* alias.c (objects_must_conflict_p): Check honor_readonly when\n+\texamining TYPE_READONLY.\n+\t* function.c (assign_stack_temp_for_type): Likewise.\n+\n 2002-10-14  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n \n \t* config/alpha/alpha.md (extendsidi2_nofix, extendsidi2_fix):"}, {"sha": "ca560b69e8ce82f2ce3a0c0509f7b9654a158a6b", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a3b885703b3f06403067eae7ff54f6826b6a5e08", "patch": "@@ -1,5 +1,5 @@\n /* Alias analysis for GNU C\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by John Carr (jfc@mit.edu).\n \n This file is part of GCC.\n@@ -332,8 +332,8 @@ objects_must_conflict_p (t1, t2)\n      then they may not conflict.  */\n   if ((t1 != 0 && readonly_fields_p (t1))\n       || (t2 != 0 && readonly_fields_p (t2))\n-      || (t1 != 0 && TYPE_READONLY (t1))\n-      || (t2 != 0 && TYPE_READONLY (t2)))\n+      || (t1 != 0 && lang_hooks.honor_readonly && TYPE_READONLY (t1))\n+      || (t2 != 0 && lang_hooks.honor_readonly && TYPE_READONLY (t2)))\n     return 0;\n \n   /* If they are the same type, they must conflict.  */"}, {"sha": "0c066ed03588974b5be2fe32f8a84cd4a48be143", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a3b885703b3f06403067eae7ff54f6826b6a5e08", "patch": "@@ -798,7 +798,8 @@ assign_stack_temp_for_type (mode, size, keep, type)\n   /* If a type is specified, set the relevant flags.  */\n   if (type != 0)\n     {\n-      RTX_UNCHANGING_P (slot) = TYPE_READONLY (type);\n+      RTX_UNCHANGING_P (slot) = (lang_hooks.honor_readonly \n+\t\t\t\t && TYPE_READONLY (type));\n       MEM_VOLATILE_P (slot) = TYPE_VOLATILE (type);\n       MEM_SET_IN_STRUCT_P (slot, AGGREGATE_TYPE_P (type));\n     }"}, {"sha": "b368a720205b94c552d758f94c7e537b0230c8ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3b885703b3f06403067eae7ff54f6826b6a5e08", "patch": "@@ -1,3 +1,8 @@\n+2002-10-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR optimization/6631\n+\t* g++.dg/opt/const2.C: New test.\n+\n 2002-10-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7176"}, {"sha": "9ddc5e13764ecb0c90cd8c632a90c1faffcc4b37", "filename": "gcc/testsuite/g++.dg/opt/const2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b885703b3f06403067eae7ff54f6826b6a5e08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst2.C?ref=a3b885703b3f06403067eae7ff54f6826b6a5e08", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+extern \"C\" void abort (void);\n+\n+struct QSize\n+{\n+  QSize();\n+  QSize( int w, int h );\n+  int wd, ht;\n+  friend inline const QSize operator+( const QSize &, const QSize & );\n+};\n+\n+inline QSize::QSize()\n+{ wd = ht = -1; }\n+\n+inline QSize::QSize( int w, int h )\n+{ wd = w; ht = h; }\n+\n+inline const QSize operator+( const QSize & s1, const QSize & s2 )\n+{ return QSize(s1.wd+s2.wd, s1.ht+s2.ht); }\n+\n+QSize minimumSize()\n+{\n+  return QSize (100, 200);\n+}\n+\n+QSize totalMinimumSize()\n+{\n+    QSize s = minimumSize();\n+    return s + QSize( 0, 0 );\n+}\n+\n+int main()\n+{\n+  QSize s = totalMinimumSize();\n+  if (s.wd != 100 || s.ht != 200)\n+    abort ();\n+}\n+"}]}