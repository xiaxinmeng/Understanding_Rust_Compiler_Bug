{"sha": "02bb07655823135ef3e8b06f63b201bc19f54758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiYjA3NjU1ODIzMTM1ZWYzZThiMDZmNjNiMjAxYmMxOWY1NDc1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:08:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:08:12Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.adb (Has_Protected): Test base type.\n\t* sem_ch4.adb (Analyze_Allocator): Reorganize code to make sure\n\tthat we always properly check No_Protected_Type_Allocators.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Defining_Entity):\tNow applies to\n\tloop declarations as well.\n\t* exp_ch5.adb (Expand_Loop_Statement): Apply Qualify_Entity_Names\n\tto an iterator loop, because it may contain local renaming\n\tdeclarations that require debugging information.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads, exp_util.adb, sem_attr.adb: Minor reformatting.\n\nFrom-SVN: r213163", "tree": {"sha": "2fc7746496fdacb2eb996918ccc599b5a3591c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc7746496fdacb2eb996918ccc599b5a3591c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02bb07655823135ef3e8b06f63b201bc19f54758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bb07655823135ef3e8b06f63b201bc19f54758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bb07655823135ef3e8b06f63b201bc19f54758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bb07655823135ef3e8b06f63b201bc19f54758/comments", "author": null, "committer": null, "parents": [{"sha": "fc3a3f3b7e04b8249af59cbc6b398ef9518c8cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3a3f3b7e04b8249af59cbc6b398ef9518c8cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3a3f3b7e04b8249af59cbc6b398ef9518c8cb1"}], "stats": {"total": 491, "additions": 223, "deletions": 268}, "files": [{"sha": "5b18da401035177a208198a0dcdc848b204c8207", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -1,3 +1,21 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.adb (Has_Protected): Test base type.\n+\t* sem_ch4.adb (Analyze_Allocator): Reorganize code to make sure\n+\tthat we always properly check No_Protected_Type_Allocators.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Defining_Entity):\tNow applies to\n+\tloop declarations as well.\n+\t* exp_ch5.adb (Expand_Loop_Statement): Apply Qualify_Entity_Names\n+\tto an iterator loop, because it may contain local renaming\n+\tdeclarations that require debugging information.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, exp_util.adb, sem_attr.adb: Minor reformatting.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Static_Real_Or_String_Predicate): New function"}, {"sha": "926190b823d0e23ab3023ff90175274e10f2a33e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -1647,7 +1647,7 @@ package body Einfo is\n \n    function Has_Protected (Id : E) return B is\n    begin\n-      return Flag271 (Id);\n+      return Flag271 (Base_Type (Id));\n    end Has_Protected;\n \n    function Has_Qualified_Name (Id : E) return B is"}, {"sha": "96506f88109b30c7e1093d7359e01e4682f1a78a", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -3946,6 +3946,19 @@ package body Exp_Ch5 is\n         and then Present (Iterator_Specification (Scheme))\n       then\n          Expand_Iterator_Loop (N);\n+\n+         --  An iterator loop may generate renaming declarations for elements\n+         --  that require debug information. This is the case in particular\n+         --  with element iterators, where debug information must be generated\n+         --  for the temporary that holds the element value. These temporaries\n+         --  are created within a transient block whose local declarations are\n+         --  transferred to the loop, which now has non-trivial local objects.\n+\n+         if Nkind (N) = N_Loop_Statement\n+           and then Present (Identifier (N))\n+         then\n+            Qualify_Entity_Names (N);\n+         end if;\n       end if;\n \n       --  When the iteration scheme mentiones attribute 'Loop_Entry, the loop"}, {"sha": "0b6d7a3e62834bf1519f160f04efdfc6db0bf1a9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -5447,6 +5447,8 @@ package body Exp_Util is\n             --  that it is common and reasonable for code to be deleted in\n             --  instances for various reasons.\n \n+            --  Could we use Is_Statically_Unevaluated here???\n+\n             if Nkind (Parent (N)) = N_If_Statement then\n                declare\n                   C : constant Node_Id := Condition (Parent (N));\n@@ -5495,6 +5497,7 @@ package body Exp_Util is\n \n             declare\n                E : Entity_Id := First_Entity (Defining_Entity (N));\n+\n             begin\n                while Present (E) loop\n                   if Ekind (E) = E_Operator then\n@@ -5510,7 +5513,7 @@ package body Exp_Util is\n \n          elsif Nkind (N) = N_If_Statement then\n             Kill_Dead_Code (Then_Statements (N));\n-            Kill_Dead_Code (Elsif_Parts (N));\n+            Kill_Dead_Code (Elsif_Parts     (N));\n             Kill_Dead_Code (Else_Statements (N));\n \n          elsif Nkind (N) = N_Loop_Statement then\n@@ -5543,8 +5546,10 @@ package body Exp_Util is\n    procedure Kill_Dead_Code (L : List_Id; Warn : Boolean := False) is\n       N : Node_Id;\n       W : Boolean;\n+\n    begin\n       W := Warn;\n+\n       if Is_Non_Empty_List (L) then\n          N := First (L);\n          while Present (N) loop\n@@ -6770,7 +6775,7 @@ package body Exp_Util is\n                Analyze (Block);\n             end if;\n \n-         when others                       =>\n+         when others =>\n             null;\n       end case;\n    end Process_Statements_For_Controlled_Objects;\n@@ -6782,6 +6787,7 @@ package body Exp_Util is\n    function Power_Of_Two (N : Node_Id) return Nat is\n       Typ : constant Entity_Id := Etype (N);\n       pragma Assert (Is_Integer_Type (Typ));\n+\n       Siz : constant Nat := UI_To_Int (Esize (Typ));\n       Val : Uint;\n \n@@ -8703,7 +8709,6 @@ package body Exp_Util is\n       Loc   : constant Source_Ptr := Sloc (N);\n       Stseq : constant Node_Id    := Handled_Statement_Sequence (N);\n       Stmts : constant List_Id    := Statements (Stseq);\n-\n    begin\n       if Abort_Allowed then\n          Prepend_To (Stmts, Build_Runtime_Call (Loc, RE_Abort_Defer));"}, {"sha": "d22118e4db8b3f9bed84ac1565bc0a4ae9372564", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -5492,7 +5492,7 @@ package body Sem_Attr is\n \n       when Attribute_Scalar_Storage_Order => Scalar_Storage_Order :\n       declare\n-            Ent : Entity_Id := Empty;\n+         Ent : Entity_Id := Empty;\n \n       begin\n          Check_E0;\n@@ -5505,7 +5505,7 @@ package body Sem_Attr is\n             --  the default bit order for the target.\n \n             if not (GNAT_Mode and then Is_Generic_Type (P_Type))\n-                     and then not In_Instance\n+              and then not In_Instance\n             then\n                Error_Attr_P\n                  (\"prefix of % attribute must be record or array type\");"}, {"sha": "8ac94e926029f197e924f3d2f9a5e78ec7fa53d6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -639,15 +639,6 @@ package body Sem_Ch4 is\n                end;\n             end if;\n \n-            --  Check restriction against dynamically allocated protected\n-            --  objects. Note that when limited aggregates are supported,\n-            --  a similar test should be applied to an allocator with a\n-            --  qualified expression ???\n-\n-            if Has_Protected (Type_Id) then\n-               Check_Restriction (No_Protected_Type_Allocators, N);\n-            end if;\n-\n             --  Check for missing initialization. Skip this check if we already\n             --  had errors on analyzing the allocator, since in that case these\n             --  are probably cascaded errors.\n@@ -725,6 +716,12 @@ package body Sem_Ch4 is\n          Check_Restriction (No_Task_Allocators, N);\n       end if;\n \n+      --  Check restriction against dynamically allocated protected objects\n+\n+      if Has_Protected (Designated_Type (Acc_Type)) then\n+         Check_Restriction (No_Protected_Type_Allocators, N);\n+      end if;\n+\n       --  AI05-0013-1: No_Nested_Finalization forbids allocators if the access\n       --  type is nested, and the designated type needs finalization. The rule\n       --  is conservative in that class-wide types need finalization."}, {"sha": "62a5bdb9743450da8103ea6bb080ea3c23ed6b44", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 170, "deletions": 253, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -153,8 +153,8 @@ package body Sem_Util is\n \n          elsif Nkind (Parent (Typ)) = N_Private_Type_Declaration then\n             if Present (Full_View (Typ))\n-              and then Nkind (Parent (Full_View (Typ)))\n-                         = N_Full_Type_Declaration\n+              and then\n+                Nkind (Parent (Full_View (Typ))) = N_Full_Type_Declaration\n             then\n                Nod := Type_Definition (Parent (Full_View (Typ)));\n \n@@ -2149,7 +2149,7 @@ package body Sem_Util is\n                                  Get_Index_Bounds (Choice, L, H);\n                                  pragma Assert\n                                    (Compile_Time_Known_Value (L)\n-                                      and then Compile_Time_Known_Value (H));\n+                                     and then Compile_Time_Known_Value (H));\n                                  Count_Components :=\n                                    Count_Components\n                                      + Expr_Value (H) - Expr_Value (L) + 1;\n@@ -2364,9 +2364,7 @@ package body Sem_Util is\n       elsif not Comes_From_Source (Nam) then\n          return;\n \n-      elsif Is_Entity_Name (Nam)\n-        and then Is_Type (Entity (Nam))\n-      then\n+      elsif Is_Entity_Name (Nam) and then Is_Type (Entity (Nam)) then\n          null;\n \n       else\n@@ -2542,11 +2540,7 @@ package body Sem_Util is\n       --  Check for Is_Imported needs commenting below ???\n \n       if VM_Target /= No_VM\n-        and then (Ekind (Ent) = E_Variable\n-                    or else\n-                  Ekind (Ent) = E_Constant\n-                    or else\n-                  Ekind (Ent) = E_Loop_Parameter)\n+        and then Ekind_In (Ent, E_Variable, E_Constant, E_Loop_Parameter)\n         and then Scope (Ent) /= Empty\n         and then not Is_Library_Level_Entity (Ent)\n         and then not Is_Imported (Ent)\n@@ -2562,9 +2556,7 @@ package body Sem_Util is\n \n          Enclosing := Enclosing_Subprogram (Ent);\n \n-         if Enclosing /= Empty\n-           and then Enclosing /= Current_Subp\n-         then\n+         if Enclosing /= Empty and then Enclosing /= Current_Subp then\n             Set_Has_Up_Level_Access (Ent, True);\n          end if;\n       end if;\n@@ -2769,7 +2761,7 @@ package body Sem_Util is\n            Comes_From_Source (N)\n              and then Is_Entity_Name (N)\n              and then (Entity (N) = Standard_True\n-                         or else Entity (N) = Standard_False);\n+                        or else Entity (N) = Standard_False);\n       end Is_Trivial_Boolean;\n \n       -------------------------\n@@ -2950,9 +2942,7 @@ package body Sem_Util is\n \n       begin\n          S := Current_Scope;\n-         while Present (S)\n-           and then S /= Pref_Encl_Typ\n-         loop\n+         while Present (S) and then S /= Pref_Encl_Typ loop\n             if Scope (S) = Pref_Encl_Typ then\n                E := First_Entity (Pref_Encl_Typ);\n                while Present (E)\n@@ -2961,6 +2951,7 @@ package body Sem_Util is\n                   if E = S then\n                      return True;\n                   end if;\n+\n                   Next_Entity (E);\n                end loop;\n             end if;\n@@ -2987,7 +2978,7 @@ package body Sem_Util is\n            and then No (Cont_Encl_Typ)\n            and then Is_Public_Operation\n            and then Scope_Depth (Pref_Encl_Typ) >=\n-                      Object_Access_Level (Context)\n+                                       Object_Access_Level (Context)\n          then\n             Error_Msg_N\n               (\"??possible unprotected access to protected data\", Expr);\n@@ -3064,9 +3055,7 @@ package body Sem_Util is\n             Ancestor := Etype (Full_T);\n             Collect (Ancestor);\n \n-            if Is_Interface (Ancestor)\n-              and then not Exclude_Parents\n-            then\n+            if Is_Interface (Ancestor) and then not Exclude_Parents then\n                Append_Unique_Elmt (Ancestor, Ifaces_List);\n             end if;\n          end if;\n@@ -3210,8 +3199,8 @@ package body Sem_Util is\n          end if;\n \n          while Present (ADT)\n-            and then Is_Tag (Node (ADT))\n-            and then Related_Type (Node (ADT)) /= Iface\n+           and then Is_Tag (Node (ADT))\n+           and then Related_Type (Node (ADT)) /= Iface\n          loop\n             --  Skip secondary dispatch table referencing thunks to user\n             --  defined primitives covered by this interface.\n@@ -3389,8 +3378,8 @@ package body Sem_Util is\n \n       elsif Is_Generic_Type (B_Type) then\n          if Nkind (B_Decl) = N_Formal_Type_Declaration\n-           and then Nkind (Formal_Type_Definition (B_Decl))\n-             = N_Formal_Derived_Type_Definition\n+           and then Nkind (Formal_Type_Definition (B_Decl)) =\n+                                           N_Formal_Derived_Type_Definition\n          then\n             Formal_Derived := True;\n          else\n@@ -3489,8 +3478,7 @@ package body Sem_Util is\n                --  package declaration are not primitive for it.\n \n                if Is_Prim\n-                 and then (not Formal_Derived\n-                            or else Present (Alias (Id)))\n+                 and then (not Formal_Derived or else Present (Alias (Id)))\n                then\n                   --  In the special case of an equality operator aliased to\n                   --  an overriding dispatching equality belonging to the same\n@@ -4223,7 +4211,10 @@ package body Sem_Util is\n                end if;\n             end;\n \n-         when N_Block_Statement =>\n+         when\n+           N_Block_Statement                        |\n+           N_Loop_Statement\n+         =>\n             return Entity (Identifier (N));\n \n          when others =>\n@@ -4241,10 +4232,9 @@ package body Sem_Util is\n       Check_Concurrent : Boolean := False) return Boolean\n    is\n       E : Entity_Id;\n+\n    begin\n-      if not Is_Entity_Name (N)\n-        or else No (Entity (N))\n-      then\n+      if not Is_Entity_Name (N) or else No (Entity (N)) then\n          return False;\n       else\n          E := Entity (N);\n@@ -4440,7 +4430,7 @@ package body Sem_Util is\n       elsif Nkind (Obj1) = N_Selected_Component then\n          return Denotes_Same_Object (Prefix (Obj1), Prefix (Obj2))\n            and then\n-         Entity (Selector_Name (Obj1)) = Entity (Selector_Name (Obj2));\n+             Entity (Selector_Name (Obj1)) = Entity (Selector_Name (Obj2));\n \n       --  Both names are dereferences and the dereferenced names are known to\n       --  denote the same object (RM 6.4.1(6.7/3))\n@@ -4509,10 +4499,11 @@ package body Sem_Util is\n               and then Denotes_Same_Object (Hi1, Hi2);\n          end;\n \n-      --  In the recursion, literals appear as indexes.\n+      --  In the recursion, literals appear as indexes\n \n       elsif Nkind (Obj1) = N_Integer_Literal\n-        and then Nkind (Obj2) = N_Integer_Literal\n+              and then\n+            Nkind (Obj2) = N_Integer_Literal\n       then\n          return Intval (Obj1) = Intval (Obj2);\n \n@@ -4678,11 +4669,9 @@ package body Sem_Util is\n    --  Start of processing for Designate_Next_Unit\n \n    begin\n-      if (K1 = N_Identifier or else\n-          K1 = N_Defining_Identifier)\n-        and then\n-         (K2 = N_Identifier or else\n-          K2 = N_Defining_Identifier)\n+      if (K1 = N_Identifier or else K1 = N_Defining_Identifier)\n+           and then\n+         (K2 = N_Identifier or else K2 = N_Defining_Identifier)\n       then\n          return Chars (Name1) = Chars (Name2);\n \n@@ -5106,7 +5095,7 @@ package body Sem_Util is\n          --  same name as a generic formal which has been seen already.\n \n          elsif Nkind (Parent (Def_Id)) = N_Package_Renaming_Declaration\n-            and then not Comes_From_Source (Def_Id)\n+           and then not Comes_From_Source (Def_Id)\n          then\n             Set_Is_Immediately_Visible (E, False);\n \n@@ -5139,9 +5128,7 @@ package body Sem_Util is\n                --  entity in the scope.\n \n                Prev := First_Entity (Current_Scope);\n-               while Present (Prev)\n-                 and then Next_Entity (Prev) /= E\n-               loop\n+               while Present (Prev) and then Next_Entity (Prev) /= E loop\n                   Next_Entity (Prev);\n                end loop;\n \n@@ -5301,7 +5288,7 @@ package body Sem_Util is\n             end if;\n \n             if Nkind (Parent (Parent (Def_Id))) =\n-                N_Generic_Subprogram_Declaration\n+                                             N_Generic_Subprogram_Declaration\n               and then Def_Id =\n                 Defining_Entity (Specification (Parent (Parent (Def_Id))))\n             then\n@@ -5369,9 +5356,7 @@ package body Sem_Util is\n \n       --  Declaring a homonym is not allowed in SPARK ...\n \n-      if Present (C)\n-        and then Restriction_Check_Required (SPARK_05)\n-      then\n+      if Present (C) and then Restriction_Check_Required (SPARK_05) then\n          declare\n             Enclosing_Subp : constant Node_Id := Enclosing_Subprogram (Def_Id);\n             Enclosing_Pack : constant Node_Id := Enclosing_Package (Def_Id);\n@@ -5419,38 +5404,38 @@ package body Sem_Util is\n \n       if Warn_On_Hiding and then Present (C)\n \n-         --  Don't warn for record components since they always have a well\n-         --  defined scope which does not confuse other uses. Note that in\n-         --  some cases, Ekind has not been set yet.\n+        --  Don't warn for record components since they always have a well\n+        --  defined scope which does not confuse other uses. Note that in\n+        --  some cases, Ekind has not been set yet.\n \n-         and then Ekind (C) /= E_Component\n-         and then Ekind (C) /= E_Discriminant\n-         and then Nkind (Parent (C)) /= N_Component_Declaration\n-         and then Ekind (Def_Id) /= E_Component\n-         and then Ekind (Def_Id) /= E_Discriminant\n-         and then Nkind (Parent (Def_Id)) /= N_Component_Declaration\n+        and then Ekind (C) /= E_Component\n+        and then Ekind (C) /= E_Discriminant\n+        and then Nkind (Parent (C)) /= N_Component_Declaration\n+        and then Ekind (Def_Id) /= E_Component\n+        and then Ekind (Def_Id) /= E_Discriminant\n+        and then Nkind (Parent (Def_Id)) /= N_Component_Declaration\n \n-         --  Don't warn for one character variables. It is too common to use\n-         --  such variables as locals and will just cause too many false hits.\n+        --  Don't warn for one character variables. It is too common to use\n+        --  such variables as locals and will just cause too many false hits.\n \n-         and then Length_Of_Name (Chars (C)) /= 1\n+        and then Length_Of_Name (Chars (C)) /= 1\n \n-         --  Don't warn for non-source entities\n+        --  Don't warn for non-source entities\n \n-         and then Comes_From_Source (C)\n-         and then Comes_From_Source (Def_Id)\n+        and then Comes_From_Source (C)\n+        and then Comes_From_Source (Def_Id)\n \n-         --  Don't warn unless entity in question is in extended main source\n+        --  Don't warn unless entity in question is in extended main source\n \n-         and then In_Extended_Main_Source_Unit (Def_Id)\n+        and then In_Extended_Main_Source_Unit (Def_Id)\n \n-         --  Finally, the hidden entity must be either immediately visible or\n-         --  use visible (i.e. from a used package).\n+        --  Finally, the hidden entity must be either immediately visible or\n+        --  use visible (i.e. from a used package).\n \n-         and then\n-           (Is_Immediately_Visible (C)\n-              or else\n-            Is_Potentially_Use_Visible (C))\n+        and then\n+          (Is_Immediately_Visible (C)\n+             or else\n+           Is_Potentially_Use_Visible (C))\n       then\n          Error_Msg_Sloc := Sloc (C);\n          Error_Msg_N (\"declaration hides &#?h?\", Def_Id);\n@@ -5552,9 +5537,7 @@ package body Sem_Util is\n       Actual : Node_Id;\n \n    begin\n-      if (Nkind (Parnt) = N_Indexed_Component\n-            or else\n-          Nkind (Parnt) = N_Selected_Component)\n+      if Nkind_In (Parnt, N_Indexed_Component, N_Selected_Component)\n         and then N = Prefix (Parnt)\n       then\n          Find_Actual (Parnt, Formal, Call);\n@@ -5693,10 +5676,10 @@ package body Sem_Util is\n       while Present (Old_Disc) and then Present (New_Disc) loop\n          if Old_Disc = Par_Disc  then\n             return New_Disc;\n-         else\n-            Next_Discriminant (Old_Disc);\n-            Next_Discriminant (New_Disc);\n          end if;\n+\n+         Next_Discriminant (Old_Disc);\n+         Next_Discriminant (New_Disc);\n       end loop;\n \n       --  Should always find it\n@@ -5984,8 +5967,7 @@ package body Sem_Util is\n                --  be a static subtype, since otherwise it would have\n                --  been diagnosed as illegal.\n \n-               elsif Is_Entity_Name (Choice)\n-                 and then Is_Type (Entity (Choice))\n+               elsif Is_Entity_Name (Choice) and then Is_Type (Entity (Choice))\n                then\n                   exit Search when Is_In_Range (Expr, Etype (Choice),\n                                                 Assume_Valid => False);\n@@ -5999,7 +5981,7 @@ package body Sem_Util is\n \n                   begin\n                      exit Search when\n-                       Val >= Expr_Value (Low_Bound (R))\n+                       Val >= Expr_Value (Low_Bound  (R))\n                          and then\n                        Val <= Expr_Value (High_Bound (R));\n                   end;\n@@ -7273,8 +7255,7 @@ package body Sem_Util is\n                --  where we do not know the alignment of Obj.\n \n                if Known_Alignment (Entity (Expr))\n-                 and then\n-                   UI_To_Int (Alignment (Entity (Expr))) <\n+                 and then UI_To_Int (Alignment (Entity (Expr))) <\n                                                     Ttypes.Maximum_Alignment\n                then\n                   Set_Result (Unknown);\n@@ -7509,7 +7490,7 @@ package body Sem_Util is\n \n                      if Nkind (Prop_Nam) = N_Others_Choice\n                        or else (Nkind (Prop_Nam) = N_Identifier\n-                                  and then Chars (Prop_Nam) = Property)\n+                                 and then Chars (Prop_Nam) = Property)\n                      then\n                         return Is_True (Expr_Value (Expression (Prop)));\n                      end if;\n@@ -7563,24 +7544,20 @@ package body Sem_Util is\n             return True;\n \n          elsif Property = Name_Async_Writers\n-           and then\n-             (Present (AW)\n-                or else\n-             (No (AR) and then No (ER) and then No (EW)))\n+           and then (Present (AW)\n+                      or else (No (AR) and then No (ER) and then No (EW)))\n          then\n             return True;\n \n          elsif Property = Name_Effective_Reads\n-           and then\n-             (Present (ER)\n-                or else\n-             (No (AR) and then No (AW) and then No (EW)))\n+           and then (Present (ER)\n+                      or else (No (AR) and then No (AW) and then No (EW)))\n          then\n             return True;\n \n          elsif Property = Name_Effective_Writes\n-           and then\n-             (Present (EW) or else (No (AR) and then No (AW) and then No (ER)))\n+           and then (Present (EW)\n+                      or else (No (AR) and then No (AW) and then No (ER)))\n          then\n             return True;\n \n@@ -7646,9 +7623,7 @@ package body Sem_Util is\n \n       --  Handle private types\n \n-      if Use_Full_View\n-        and then Present (Full_View (Typ))\n-      then\n+      if Use_Full_View and then Present (Full_View (Typ)) then\n          Typ := Full_View (Typ);\n       end if;\n \n@@ -7675,7 +7650,7 @@ package body Sem_Util is\n             --  Handle private types\n \n             or else (Present (Full_View (Etype (Typ)))\n-                       and then Full_View (Etype (Typ)) = Typ)\n+                      and then Full_View (Etype (Typ)) = Typ)\n \n             --  Protect the frontend against wrong source with cyclic\n             --  derivations\n@@ -7714,13 +7689,12 @@ package body Sem_Util is\n          return Has_No_Obvious_Side_Effects (Right_Opnd (N));\n \n       elsif Nkind (N) in N_Binary_Op or else Nkind (N) in N_Short_Circuit then\n-         return Has_No_Obvious_Side_Effects (Left_Opnd (N))\n-                   and then\n+         return Has_No_Obvious_Side_Effects (Left_Opnd  (N))\n+                  and then\n                 Has_No_Obvious_Side_Effects (Right_Opnd (N));\n \n       elsif Nkind (N) = N_Expression_With_Actions\n-              and then\n-            Is_Empty_List (Actions (N))\n+        and then Is_Empty_List (Actions (N))\n       then\n          return Has_No_Obvious_Side_Effects (Expression (N));\n \n@@ -7850,13 +7824,13 @@ package body Sem_Util is\n                   Formal : constant Entity_Id := First_Formal (Init);\n                begin\n                   if Ekind (Init) = E_Procedure\n-                       and then Chars (Init) = Name_Initialize\n-                       and then Comes_From_Source (Init)\n-                       and then Present (Formal)\n-                       and then Etype (Formal) = BT\n-                       and then No (Next_Formal (Formal))\n-                       and then (Ada_Version < Ada_2012\n-                                   or else not Null_Present (Parent (Init)))\n+                    and then Chars (Init) = Name_Initialize\n+                    and then Comes_From_Source (Init)\n+                    and then Present (Formal)\n+                    and then Etype (Formal) = BT\n+                    and then No (Next_Formal (Formal))\n+                    and then (Ada_Version < Ada_2012\n+                               or else not Null_Present (Parent (Init)))\n                   then\n                      return True;\n                   end if;\n@@ -8613,9 +8587,7 @@ package body Sem_Util is\n \n    begin\n       S := Current_Scope;\n-      while Present (S)\n-        and then S /= Standard_Standard\n-      loop\n+      while Present (S) and then S /= Standard_Standard loop\n          if (Ekind (S) = E_Function\n               or else Ekind (S) = E_Package\n               or else Ekind (S) = E_Procedure)\n@@ -8628,9 +8600,8 @@ package body Sem_Util is\n             --  that it is not currently on the scope stack.\n \n             if Is_Child_Unit (Curr_Unit)\n-              and then\n-                Nkind (Unit (Cunit (Current_Sem_Unit)))\n-                  = N_Package_Instantiation\n+              and then Nkind (Unit (Cunit (Current_Sem_Unit))) =\n+                                                     N_Package_Instantiation\n               and then not In_Open_Scopes (Curr_Unit)\n             then\n                return False;\n@@ -8654,11 +8625,8 @@ package body Sem_Util is\n \n    begin\n       S := Current_Scope;\n-      while Present (S)\n-        and then S /= Standard_Standard\n-      loop\n-         if (Ekind (S) = E_Function\n-              or else Ekind (S) = E_Procedure)\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Ekind_In (S, E_Function, E_Procedure)\n            and then Is_Generic_Instance (S)\n          then\n             return True;\n@@ -8685,11 +8653,8 @@ package body Sem_Util is\n \n    begin\n       S := Current_Scope;\n-      while Present (S)\n-        and then S /= Standard_Standard\n-      loop\n-         if (Ekind (S) = E_Function\n-              or else Ekind (S) = E_Procedure)\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Ekind_In (S, E_Function, E_Procedure)\n            and then Is_Generic_Instance (S)\n          then\n             return True;\n@@ -8716,9 +8681,7 @@ package body Sem_Util is\n \n    begin\n       S := Current_Scope;\n-      while Present (S)\n-        and then S /= Standard_Standard\n-      loop\n+      while Present (S) and then S /= Standard_Standard loop\n          if Ekind (S) = E_Package\n            and then Is_Generic_Instance (S)\n            and then not In_Package_Body (S)\n@@ -8742,12 +8705,8 @@ package body Sem_Util is\n \n    begin\n       S := Current_Scope;\n-      while Present (S)\n-        and then S /= Standard_Standard\n-      loop\n-         if Ekind (S) = E_Package\n-           and then In_Package_Body (S)\n-         then\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Ekind (S) = E_Package and then In_Package_Body (S) then\n             return True;\n          else\n             S := Scope (S);\n@@ -8827,10 +8786,9 @@ package body Sem_Util is\n          Btyp := Base_Type (Etype (Pref));\n       end if;\n \n-      return\n-        Present (Btyp)\n-          and then (Is_Record_Type (Btyp) or else Is_Array_Type (Btyp))\n-          and then Reverse_Storage_Order (Btyp);\n+      return Present (Btyp)\n+        and then (Is_Record_Type (Btyp) or else Is_Array_Type (Btyp))\n+        and then Reverse_Storage_Order (Btyp);\n    end In_Reverse_Storage_Order_Object;\n \n    --------------------------------------\n@@ -8868,11 +8826,10 @@ package body Sem_Util is\n \n    function In_Visible_Part (Scope_Id : Entity_Id) return Boolean is\n    begin\n-      return\n-        Is_Package_Or_Generic_Package (Scope_Id)\n-          and then In_Open_Scopes (Scope_Id)\n-          and then not In_Package_Body (Scope_Id)\n-          and then not In_Private_Part (Scope_Id);\n+      return Is_Package_Or_Generic_Package (Scope_Id)\n+        and then In_Open_Scopes (Scope_Id)\n+        and then not In_Package_Body (Scope_Id)\n+        and then not In_Private_Part (Scope_Id);\n    end In_Visible_Part;\n \n    --------------------------------\n@@ -9043,14 +9000,13 @@ package body Sem_Util is\n          --  For a retrieval of a subcomponent of some composite object,\n          --  retrieve the ultimate entity if there is one.\n \n-         elsif Nkind (New_Prefix) = N_Selected_Component\n-           or else Nkind (New_Prefix) = N_Indexed_Component\n+         elsif Nkind_In (New_Prefix, N_Selected_Component,\n+                                     N_Indexed_Component)\n          then\n             Pref := Prefix (New_Prefix);\n             while Present (Pref)\n-              and then\n-                (Nkind (Pref) = N_Selected_Component\n-                  or else Nkind (Pref) = N_Indexed_Component)\n+              and then Nkind_In (Pref, N_Selected_Component,\n+                                       N_Indexed_Component)\n             loop\n                Pref := Prefix (Pref);\n             end loop;\n@@ -9226,9 +9182,7 @@ package body Sem_Util is\n \n    begin\n       Par := E2;\n-      while Present (Par)\n-        and then Par /= Standard_Standard\n-      loop\n+      while Present (Par) and then Par /= Standard_Standard loop\n          if Par = E1 then\n             return True;\n          end if;\n@@ -9331,9 +9285,8 @@ package body Sem_Util is\n \n    function Is_Attribute_Result (N : Node_Id) return Boolean is\n    begin\n-      return\n-         Nkind (N) = N_Attribute_Reference\n-           and then Attribute_Name (N) = Name_Result;\n+      return Nkind (N) = N_Attribute_Reference\n+        and then Attribute_Name (N) = Name_Result;\n    end Is_Attribute_Result;\n \n    ------------------------------------\n@@ -9532,9 +9485,8 @@ package body Sem_Util is\n \n    function Is_Concurrent_Interface (T : Entity_Id) return Boolean is\n    begin\n-      return\n-        Is_Interface (T)\n-          and then\n+      return Is_Interface (T)\n+        and then\n             (Is_Protected_Interface (T)\n                or else Is_Synchronized_Interface (T)\n                or else Is_Task_Interface (T));\n@@ -9980,7 +9932,7 @@ package body Sem_Util is\n                             and then In_Package_Body (Current_Scope)))\n \n               and then (Is_Declared_Within_Variant (Comp)\n-                          or else Has_Discriminant_Dependent_Constraint (Comp))\n+                         or else Has_Discriminant_Dependent_Constraint (Comp))\n               and then (not P_Aliased or else Ada_Version >= Ada_2005)\n             then\n                return True;\n@@ -10025,14 +9977,10 @@ package body Sem_Util is\n    function Is_Dereferenced (N : Node_Id) return Boolean is\n       P : constant Node_Id := Parent (N);\n    begin\n-      return\n-         (Nkind (P) = N_Selected_Component\n-            or else\n-          Nkind (P) = N_Explicit_Dereference\n-            or else\n-          Nkind (P) = N_Indexed_Component\n-            or else\n-          Nkind (P) = N_Slice)\n+      return Nkind_In (P, N_Selected_Component,\n+                          N_Explicit_Dereference,\n+                          N_Indexed_Component,\n+                          N_Slice)\n         and then Prefix (P) = N;\n    end Is_Dereferenced;\n \n@@ -10205,7 +10153,8 @@ package body Sem_Util is\n                   end if;\n \n                   if Compile_Time_Known_Value (Lbd)\n-                    and then Compile_Time_Known_Value (Hbd)\n+                       and then\n+                     Compile_Time_Known_Value (Hbd)\n                   then\n                      if Expr_Value (Hbd) < Expr_Value (Lbd) then\n                         return True;\n@@ -10287,7 +10236,7 @@ package body Sem_Util is\n             while Present (Ent) loop\n                if Ekind (Ent) = E_Component\n                  and then (No (Parent (Ent))\n-                             or else No (Expression (Parent (Ent))))\n+                            or else No (Expression (Parent (Ent))))\n                  and then not Is_Fully_Initialized_Type (Etype (Ent))\n \n                   --  Special VM case for tag components, which need to be\n@@ -10464,9 +10413,8 @@ package body Sem_Util is\n \n    begin\n       if Is_Class_Wide_Type (Typ)\n-        and then\n-          Nam_In (Chars (Etype (Typ)), Name_Forward_Iterator,\n-                                       Name_Reversible_Iterator)\n+        and then Nam_In (Chars (Etype (Typ)), Name_Forward_Iterator,\n+                                              Name_Reversible_Iterator)\n         and then\n           Is_Predefined_File_Name\n             (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n@@ -10710,7 +10658,7 @@ package body Sem_Util is\n                  Is_Object_Reference (Selector_Name (N))\n                    and then\n                      (Is_Object_Reference (Prefix (N))\n-                        or else Is_Access_Type (Etype (Prefix (N))));\n+                       or else Is_Access_Type (Etype (Prefix (N))));\n \n             when N_Explicit_Dereference =>\n                return True;\n@@ -11230,7 +11178,7 @@ package body Sem_Util is\n \n       elsif Present (Controlling_Argument (N))\n         and then Is_Remote_Access_To_Class_Wide_Type\n-          (Etype (Controlling_Argument (N)))\n+                   (Etype (Controlling_Argument (N)))\n       then\n          --  Any primitive operation call with a controlling argument of\n          --  a RACW type is a remote call.\n@@ -11306,16 +11254,13 @@ package body Sem_Util is\n \n    begin\n       if Is_Class_Wide_Type (Typ)\n-        and then  Chars (Etype (Typ)) = Name_Reversible_Iterator\n-        and then\n-          Is_Predefined_File_Name\n-            (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n+        and then Chars (Etype (Typ)) = Name_Reversible_Iterator\n+        and then Is_Predefined_File_Name\n+                   (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n       then\n          return True;\n \n-      elsif not Is_Tagged_Type (Typ)\n-        or else not Is_Derived_Type (Typ)\n-      then\n+      elsif not Is_Tagged_Type (Typ) or else not Is_Derived_Type (Typ) then\n          return False;\n \n       else\n@@ -11348,13 +11293,11 @@ package body Sem_Util is\n       if not Is_List_Member (N) then\n          declare\n             P : constant Node_Id   := Parent (N);\n-            K : constant Node_Kind := Nkind (P);\n          begin\n-            return\n-              (K = N_Expanded_Name          or else\n-               K = N_Generic_Association    or else\n-               K = N_Parameter_Association  or else\n-               K = N_Selected_Component)\n+            return Nkind_In (P, N_Expanded_Name,\n+                                N_Generic_Association,\n+                                N_Parameter_Association,\n+                                N_Selected_Component)\n               and then Selector_Name (P) = N;\n          end;\n \n@@ -11429,7 +11372,8 @@ package body Sem_Util is\n               N_Short_Circuit   |\n               N_Membership_Test =>\n             Is_Ok := Is_SPARK_Initialization_Expr (Left_Opnd (Orig_N))\n-              and then Is_SPARK_Initialization_Expr (Right_Opnd (Orig_N));\n+                       and then\n+                         Is_SPARK_Initialization_Expr (Right_Opnd (Orig_N));\n \n          when N_Aggregate           |\n               N_Extension_Aggregate =>\n@@ -11499,7 +11443,7 @@ package body Sem_Util is\n          return Present (Entity (N))\n            and then\n              (Ekind_In (Entity (N), E_Constant, E_Variable)\n-              or else Ekind (Entity (N)) in Formal_Kind);\n+               or else Ekind (Entity (N)) in Formal_Kind);\n \n       else\n          case Nkind (N) is\n@@ -11913,7 +11857,7 @@ package body Sem_Util is\n \n       elsif Nkind (N) = N_Explicit_Dereference\n         and then Present (Etype (Orig_Node))\n-        and then  Ada_Version >= Ada_2012\n+        and then Ada_Version >= Ada_2012\n         and then Has_Implicit_Dereference (Etype (Orig_Node))\n       then\n          return True;\n@@ -11933,10 +11877,10 @@ package body Sem_Util is\n             K : constant Entity_Kind := Ekind (E);\n \n          begin\n-            return (K = E_Variable\n-                      and then Nkind (Parent (E)) /= N_Exception_Handler)\n+            return     (K = E_Variable\n+                         and then Nkind (Parent (E)) /= N_Exception_Handler)\n               or else  (K = E_Component\n-                          and then not In_Protected_Function (E))\n+                         and then not In_Protected_Function (E))\n               or else  K = E_Out_Parameter\n               or else  K = E_In_Out_Parameter\n               or else  K = E_Generic_In_Out_Parameter\n@@ -12410,7 +12354,7 @@ package body Sem_Util is\n \n          if Is_OK_Static_Expression (L_Low)\n               and then\n-             Is_OK_Static_Expression (L_High)\n+            Is_OK_Static_Expression (L_High)\n          then\n             if Expr_Value (L_High) < Expr_Value (L_Low) then\n                L_Len := Uint_0;\n@@ -13462,9 +13406,7 @@ package body Sem_Util is\n                end;\n             end if;\n \n-         elsif F in List_Range\n-           and then Parent (List_Id (F)) = N\n-         then\n+         elsif F in List_Range and then Parent (List_Id (F)) = N then\n             Visit_List (List_Id (F));\n             return;\n          end if;\n@@ -13540,8 +13482,7 @@ package body Sem_Util is\n                   end if;\n \n                   if Is_Type (Node (E))\n-                    and then\n-                      Old_Itype = Associated_Node_For_Itype (Node (E))\n+                    and then Old_Itype = Associated_Node_For_Itype (Node (E))\n                   then\n                      Set_Associated_Node_For_Itype\n                        (Node (Next_Elmt (E)), New_Itype);\n@@ -13637,9 +13578,8 @@ package body Sem_Util is\n       begin\n          --  Handle case of an Itype, which must be copied\n \n-         if Has_Extension (N)\n-           and then Is_Itype (N)\n-         then\n+         if Has_Extension (N) and then Is_Itype (N) then\n+\n             --  Nothing to do if already in the list. This can happen with an\n             --  Itype entity that appears more than once in the tree.\n             --  Note that we do not want to visit descendents in this case.\n@@ -14071,14 +14011,13 @@ package body Sem_Util is\n                      then\n                         if No (Actuals)\n                           and then\n-                           (Nkind (Parent (N)) = N_Procedure_Call_Statement\n-                             or else\n-                           (Nkind (Parent (N)) = N_Function_Call\n-                             or else\n-                            Nkind (Parent (N)) = N_Parameter_Association))\n+                           Nkind_In (Parent (N), N_Procedure_Call_Statement,\n+                                                 N_Function_Call,\n+                                                 N_Parameter_Association)\n                           and then Ekind (S) /= E_Function\n                         then\n                            Set_Etype (N, Etype (S));\n+\n                         else\n                            Error_Msg_Name_1 := Chars (S);\n                            Error_Msg_Sloc := Sloc (S);\n@@ -14317,8 +14256,7 @@ package body Sem_Util is\n                   --  or container is also modified.\n \n                   if Ada_Version >= Ada_2012\n-                    and then\n-                      Nkind (Parent (Ent)) = N_Iterator_Specification\n+                    and then Nkind (Parent (Ent)) = N_Iterator_Specification\n                   then\n                      declare\n                         Domain : constant Node_Id := Name (Parent (Ent));\n@@ -14409,10 +14347,9 @@ package body Sem_Util is\n \n       function Is_Interface_Conversion (N : Node_Id) return Boolean is\n       begin\n-         return\n-           Nkind (N) = N_Unchecked_Type_Conversion\n-             and then Nkind (Expression (N)) = N_Attribute_Reference\n-             and then Attribute_Name (Expression (N)) = Name_Address;\n+         return Nkind (N) = N_Unchecked_Type_Conversion\n+           and then Nkind (Expression (N)) = N_Attribute_Reference\n+           and then Attribute_Name (Expression (N)) = Name_Address;\n       end Is_Interface_Conversion;\n \n       ------------------\n@@ -14786,9 +14723,7 @@ package body Sem_Util is\n             return Any_Type;\n          end if;\n \n-         if Is_Private_Type (Btype)\n-           and then not Is_Generic_Type (Btype)\n-         then\n+         if Is_Private_Type (Btype) and then not Is_Generic_Type (Btype) then\n             if Present (Full_View (Btype))\n               and then Is_Record_Type (Full_View (Btype))\n               and then not Is_Frozen (Btype)\n@@ -14875,16 +14810,16 @@ package body Sem_Util is\n       return Chars (E1) = Chars (E2)\n         or else\n            (not Is_Internal_Name (Chars (E1))\n-              and then Is_Internal_Name (Chars (E2))\n-              and then Non_Internal_Name (E2) = Chars (E1))\n+             and then Is_Internal_Name (Chars (E2))\n+             and then Non_Internal_Name (E2) = Chars (E1))\n         or else\n            (not Is_Internal_Name (Chars (E2))\n-              and then Is_Internal_Name (Chars (E1))\n-              and then Non_Internal_Name (E1) = Chars (E2))\n+             and then Is_Internal_Name (Chars (E1))\n+             and then Non_Internal_Name (E1) = Chars (E2))\n         or else\n            (Is_Predefined_Dispatching_Operation (E1)\n-              and then Is_Predefined_Dispatching_Operation (E2)\n-              and then Same_TSS (E1, E2))\n+             and then Is_Predefined_Dispatching_Operation (E2)\n+             and then Same_TSS (E1, E2))\n         or else\n            (Is_Init_Proc (E1) and then Is_Init_Proc (E2));\n    end Primitive_Names_Match;\n@@ -15484,12 +15419,7 @@ package body Sem_Util is\n       --  For conditionals, we also allow loop parameters and all formals,\n       --  including in parameters.\n \n-      elsif Cond\n-        and then\n-          (Ekind (Ent) = E_Loop_Parameter\n-             or else\n-           Ekind (Ent) = E_In_Parameter)\n-      then\n+      elsif Cond and then Ekind_In (Ent, E_Loop_Parameter, E_In_Parameter) then\n          null;\n \n       --  For all other cases, not just unsafe, but impossible to capture\n@@ -15511,7 +15441,7 @@ package body Sem_Util is\n         or else Present (Address_Clause (Ent))\n         or else Address_Taken (Ent)\n         or else (Is_Library_Level_Entity (Ent)\n-                   and then Ekind (Ent) = E_Variable)\n+                  and then Ekind (Ent) = E_Variable)\n       then\n          return False;\n       end if;\n@@ -15560,19 +15490,20 @@ package body Sem_Util is\n             if         Nkind (P) = N_If_Statement\n               or else  Nkind (P) = N_Case_Statement\n               or else (Nkind (P) in N_Short_Circuit\n-                         and then Desc = Right_Opnd (P))\n+                        and then Desc = Right_Opnd (P))\n               or else (Nkind (P) = N_If_Expression\n-                         and then Desc /= First (Expressions (P)))\n+                        and then Desc /= First (Expressions (P)))\n               or else  Nkind (P) = N_Exception_Handler\n               or else  Nkind (P) = N_Selective_Accept\n               or else  Nkind (P) = N_Conditional_Entry_Call\n               or else  Nkind (P) = N_Timed_Entry_Call\n               or else  Nkind (P) = N_Asynchronous_Select\n             then\n                return False;\n+\n             else\n                Desc := P;\n-               P    := Parent (P);\n+               P := Parent (P);\n \n                --  A special Ada 2012 case: the original node may be part\n                --  of the else_actions of a conditional expression, in which\n@@ -15908,9 +15839,7 @@ package body Sem_Util is\n \n       procedure Set_Debug_Info_Needed_If_Not_Set (E : Entity_Id) is\n       begin\n-         if Present (E)\n-           and then not Needs_Debug_Info (E)\n-         then\n+         if Present (E) and then not Needs_Debug_Info (E) then\n             Set_Debug_Info_Needed (E);\n \n             --  For a private type, indicate that the full view also needs\n@@ -16540,12 +16469,9 @@ package body Sem_Util is\n          if not Is_Public (Ent) then\n             Set_Public_Status (Ent);\n \n-            if Is_Public (Ent)\n-              and then Ekind (Ent) = E_Record_Subtype\n+            if Is_Public (Ent) and then Ekind (Ent) = E_Record_Subtype then\n \n-            then\n-               --  The components of the propagated Itype must be public\n-               --  as well.\n+               --  The components of the propagated Itype must also be public\n \n                declare\n                   Comp : Entity_Id;\n@@ -16608,7 +16534,7 @@ package body Sem_Util is\n               or else\n                 (Is_Itype (Btyp)\n                   and then Nkind (Associated_Node_For_Itype (Btyp)) =\n-                             N_Object_Declaration\n+                                                         N_Object_Declaration\n                   and then Is_Return_Object\n                              (Defining_Identifier\n                                 (Associated_Node_For_Itype (Btyp))))\n@@ -16730,9 +16656,7 @@ package body Sem_Util is\n             return Empty;\n          end;\n \n-      elsif Is_Private_Type (T)\n-        and then Present (Full_View (T))\n-      then\n+      elsif Is_Private_Type (T) and then Present (Full_View (T)) then\n          return Type_Without_Stream_Operation (Full_View (T), Op);\n       else\n          return Empty;\n@@ -17032,8 +16956,7 @@ package body Sem_Util is\n       Elmt   : Elmt_Id;\n \n    begin\n-      pragma Assert (Is_Record_Type (Typ)\n-        and then Is_Tagged_Type (Typ));\n+      pragma Assert (Is_Record_Type (Typ) and then Is_Tagged_Type (Typ));\n \n       --  Collect all the parents and progenitors of Typ. If the full-view of\n       --  private parents and progenitors is available then it is used to\n@@ -17133,8 +17056,7 @@ package body Sem_Util is\n \n          if Is_Array_Type (Expec_Type)\n            and then Number_Dimensions (Expec_Type) = 1\n-           and then\n-             Covers (Etype (Component_Type (Expec_Type)), Found_Type)\n+           and then Covers (Etype (Component_Type (Expec_Type)), Found_Type)\n          then\n             --  Use type name if available. This excludes multidimensional\n             --  arrays and anonymous arrays.\n@@ -17284,9 +17206,7 @@ package body Sem_Util is\n \n       elsif Is_Integer_Type (Expec_Type)\n         and then Is_RTE (Found_Type, RE_Address)\n-        and then (Nkind (Parent (Expr)) = N_Op_Add\n-                    or else\n-                  Nkind (Parent (Expr)) = N_Op_Subtract)\n+        and then Nkind_In (Parent (Expr), N_Op_Add, N_Op_Subtract)\n         and then Expr = Left_Opnd (Parent (Expr))\n         and then Is_Integer_Type (Etype (Right_Opnd (Parent (Expr))))\n       then\n@@ -17376,10 +17296,7 @@ package body Sem_Util is\n             Error_Msg_N (\"\\\\found package name!\", Expr);\n \n          elsif Is_Entity_Name (Expr)\n-           and then\n-             (Ekind (Entity (Expr)) = E_Procedure\n-                or else\n-              Ekind (Entity (Expr)) = E_Generic_Procedure)\n+           and then Ekind_In (Entity (Expr), E_Procedure, E_Generic_Procedure)\n          then\n             if Ekind (Expec_Type) = E_Access_Subprogram_Type then\n                Error_Msg_N"}, {"sha": "8140f61fb341b301099b9541d27e6cce0e0a7545", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02bb07655823135ef3e8b06f63b201bc19f54758/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=02bb07655823135ef3e8b06f63b201bc19f54758", "patch": "@@ -444,6 +444,11 @@ package Sem_Util is\n    --  specification. If the declaration has a defining unit name, then the\n    --  defining entity is obtained from the defining unit name ignoring any\n    --  child unit prefixes.\n+   --\n+   --  Iterator loops also have a defining entity, which holds the list of\n+   --  local entities declared during loop expansion. These entities need\n+   --  debugging information, generated through QUalify_Entity_Names, and\n+   --  the loop declaration must be placed in the table Name_Qualify_Units.\n \n    function Denotes_Discriminant\n      (N                : Node_Id;"}]}