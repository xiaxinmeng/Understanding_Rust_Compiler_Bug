{"sha": "1817104857bbe7dc96c2834b6b1472aa6359244b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxNzEwNDg1N2JiZTdkYzk2YzI4MzRiNmIxNDcyYWE2MzU5MjQ0Yg==", "commit": {"author": {"name": "Stephen L Moshier", "email": "moshier@mediaone.net", "date": "2000-04-12T07:57:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-12T07:57:37Z"}, "message": "Stephen L Moshier  <moshier@mediaone.net>\n\n        * real.h (MAX_LONG_DOUBLE_TYPE_SIZE): Comment.\n        * real.c (toe64): Revert previous change.\n\nFrom-SVN: r33097", "tree": {"sha": "4cb0039b1670cfacde6ddbbb1e02842961e75b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb0039b1670cfacde6ddbbb1e02842961e75b23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1817104857bbe7dc96c2834b6b1472aa6359244b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1817104857bbe7dc96c2834b6b1472aa6359244b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1817104857bbe7dc96c2834b6b1472aa6359244b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1817104857bbe7dc96c2834b6b1472aa6359244b/comments", "author": null, "committer": null, "parents": [{"sha": "298d6f60996d885b092748404528b60159a359ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298d6f60996d885b092748404528b60159a359ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298d6f60996d885b092748404528b60159a359ca"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "3888e7801553bef6fc2ccf593bde51e44f10ed8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1817104857bbe7dc96c2834b6b1472aa6359244b", "patch": "@@ -1,3 +1,8 @@\n+2000-04-12  Stephen L Moshier  <moshier@mediaone.net>\n+\n+\t* real.h (MAX_LONG_DOUBLE_TYPE_SIZE): Comment.\n+\t* real.c (toe64): Revert previous change.\n+\n 2000-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* objc/objc-act.c: Include ggc.h."}, {"sha": "b8a59b391b0eea6a30348fd3924cde8ffd05291f", "filename": "gcc/real.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=1817104857bbe7dc96c2834b6b1472aa6359244b", "patch": "@@ -3646,9 +3646,13 @@ toe64 (a, b)\n   else\n     {\n       q = b + 4;\t\t\t/* point to output exponent */\n-#if MAX_LONG_DOUBLE_TYPE_SIZE == 96\n-      /* Clear the last two bytes of 12-byte Intel format */\n-      *(q+1) = 0;\n+      /* The purpose of this conditional is to avoid scribbling beyond\n+         the end of a long double, in case the type is only 80 bits wide.  */\n+      if (LONG_DOUBLE_TYPE_SIZE == 96)\n+\t{\n+\t  /* Clear the last two bytes of 12-byte Intel format */\n+\t  *(q+1) = 0;\n+\t}\n #endif\n     }\n #endif"}, {"sha": "a85ca74112072299d1cf53ba5e84fb52b1c8f28e", "filename": "gcc/real.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1817104857bbe7dc96c2834b6b1472aa6359244b/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=1817104857bbe7dc96c2834b6b1472aa6359244b", "patch": "@@ -68,6 +68,11 @@ Boston, MA 02111-1307, USA.  */\n #ifndef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n #endif\n+/* MAX_LONG_DOUBLE_TYPE_SIZE is a constant tested by #if.\n+   LONG_DOUBLE_TYPE_SIZE can vary at compiler run time.\n+   So long as macros like REAL_VALUE_TO_TARGET_LONG_DOUBLE cannot\n+   vary too, however, then XFmode and TFmode long double\n+   cannot both be supported at the same time.  */\n #ifndef MAX_LONG_DOUBLE_TYPE_SIZE\n #define MAX_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n #endif"}]}