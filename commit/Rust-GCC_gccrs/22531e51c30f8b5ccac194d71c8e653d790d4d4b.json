{"sha": "22531e51c30f8b5ccac194d71c8e653d790d4d4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1MzFlNTFjMzBmOGI1Y2NhYzE5NGQ3MWM4ZTY1M2Q3OTBkNGQ0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-17T00:03:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-17T00:03:43Z"}, "message": "class.c (pushclass): Only use the mi_matrix stuff #ifdef MI_MATRIX.\n\n\t* class.c (pushclass): Only use the mi_matrix stuff #ifdef MI_MATRIX.\n\t* search.c: Likewise.\n\t* lex.c (do_pending_defargs): Only call\n\tmaybe_{begin,end}_member_template_processing for FUNCTION_DECLs.\n\t* parse.y (initdcl0_innards): Move maybeasm back into initdcl0 et al.\n\nFrom-SVN: r18637", "tree": {"sha": "709a594183b8af48148d13206218310243d66b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/709a594183b8af48148d13206218310243d66b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22531e51c30f8b5ccac194d71c8e653d790d4d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22531e51c30f8b5ccac194d71c8e653d790d4d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22531e51c30f8b5ccac194d71c8e653d790d4d4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22531e51c30f8b5ccac194d71c8e653d790d4d4b/comments", "author": null, "committer": null, "parents": [{"sha": "91885faad2906757a0b952b85a8cb093665bf630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91885faad2906757a0b952b85a8cb093665bf630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91885faad2906757a0b952b85a8cb093665bf630"}], "stats": {"total": 5673, "additions": 2841, "deletions": 2832}, "files": [{"sha": "94de5c0b1ec34c8ff45064a8acc3814cc4506a7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b", "patch": "@@ -1,3 +1,13 @@\n+Mon Mar 16 12:10:39 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (pushclass): Only use the mi_matrix stuff #ifdef MI_MATRIX.\n+\t* search.c: Likewise.\n+\n+\t* lex.c (do_pending_defargs): Only call \n+\tmaybe_{begin,end}_member_template_processing for FUNCTION_DECLs.\n+\n+\t* parse.y (initdcl0_innards): Move maybeasm back into initdcl0 et al.\n+\n Mon Mar 16 10:47:22 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* parse.y: Deal with CONSTRUCTORS in new_initializers."}, {"sha": "3cbf9ea3e689cc410d5d3454c97a7994f2fae17f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b", "patch": "@@ -4785,9 +4785,13 @@ pushclass (type, modify)\n \n       if (type != previous_class_type || current_class_depth > 1)\n \t{\n+#ifdef MI_MATRIX\n \t  build_mi_matrix (type);\n \t  push_class_decls (type);\n \t  free_mi_matrix ();\n+#else\n+\t  push_class_decls (type);\n+#endif\n \t}\n       else\n \t{"}, {"sha": "d4c5bbec9f588f34f67b1388ce0375cd0b7c8209", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b", "patch": "@@ -1886,7 +1886,8 @@ do_pending_defargs ()\n \t{\n \t  push_nested_class (TREE_PURPOSE (defarg_fns), 1);\n \t  pushlevel (0);\n-\t  maybe_begin_member_template_processing (defarg_fn);\n+\t  if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n+\t    maybe_begin_member_template_processing (defarg_fn);\n \n \t  if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n \t    {\n@@ -1914,7 +1915,8 @@ do_pending_defargs ()\n \t    return;\n \t  }\n \n-      maybe_end_member_template_processing (defarg_fn);\n+      if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n+\tmaybe_end_member_template_processing (defarg_fn);\n       poplevel (0, 0, 0);\n       pop_nested_class (1);\n     }"}, {"sha": "94152af051ffe583617e505219530489e5743fd8", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 2773, "deletions": 2800, "changes": 5573, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b"}, {"sha": "5d8dc28a8044d79585257462eeb45024256226d7", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b", "patch": "@@ -2051,37 +2051,39 @@ initdcl:\n \t\t  cp_finish_decl ($<ttype>$, NULL_TREE, $2, 1, 0); }\n \t;\n \n-        /* This rule assumes a certain configuration of the parser\n-\t   stack.  In particular, $0, the element directly before the\n-\t   beginning of this rule on the stack, must be a declarator,\n-\t   or notype_declarator.  And, $-1 must be some declmods, or\n-\t   declspecs.  */\n+        /* This rule assumes a certain configuration of the parser stack.\n+\t   In particular, $0, the element directly before the beginning of\n+\t   this rule on the stack, must be a maybeasm.  $-1 must be a\n+\t   declarator or notype_declarator.  And $-2 must be some declmods\n+\t   or declspecs.  We can't move the maybeasm into this rule because\n+\t   we need that reduce so we prefer fn.def1 when appropriate.  */\n initdcl0_innards:\n-\t  maybeasm maybe_attribute '='\n-\t\t{ $<itype>3 = parse_decl ($<ttype>0, $<ttype>-1, \n-\t\t\t\t\t   $2, 1, &$<ttype>$); }\n+\t  maybe_attribute '='\n+\t\t{ $<itype>2 = parse_decl ($<ttype>-1, $<ttype>-2, \n+\t\t\t\t\t   $1, 1, &$<ttype>$); }\n           /* Note how the declaration of the variable is in effect\n \t     while its init is parsed! */ \n \t  init\n-\t\t{ cp_finish_decl ($<ttype>4, $5, $1, 1, LOOKUP_ONLYCONVERTING);\n-\t\t  $$ = $<itype>3; }\n-\t| maybeasm maybe_attribute\n+\t\t{ cp_finish_decl ($<ttype>3, $4, $<ttype>0, 1,\n+\t\t\t\t  LOOKUP_ONLYCONVERTING);\n+\t\t  $$ = $<itype>2; }\n+\t| maybe_attribute\n \t\t{ tree d;\n-\t\t  $$ = parse_decl ($<ttype>0, $<ttype>-1, $2, 0, &d);\n-\t\t  cp_finish_decl (d, NULL_TREE, $1, 1, 0); }\n+\t\t  $$ = parse_decl ($<ttype>-1, $<ttype>-2, $1, 0, &d);\n+\t\t  cp_finish_decl (d, NULL_TREE, $<ttype>0, 1, 0); }\n   \t;\n   \n initdcl0:\n-\t  declarator initdcl0_innards\n-            { $$ = $2; }\n+\t  declarator maybeasm initdcl0_innards\n+            { $$ = $3; }\n   \n notype_initdcl0:\n-          notype_declarator initdcl0_innards\n-            { $$ = $2; }\n+          notype_declarator maybeasm initdcl0_innards\n+            { $$ = $3; }\n         ;\n   \n nomods_initdcl0:\n-          notype_declarator \n+          notype_declarator maybeasm\n             { /* Set things up as initdcl0_innards expects.  */\n \t      $<ttype>$ = $1; \n               $1 = NULL_TREE; }"}, {"sha": "a12ebf4eb47f5b5de9a6c891f0ba0fa2810f3173", "filename": "gcc/cp/search.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22531e51c30f8b5ccac194d71c8e653d790d4d4b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=22531e51c30f8b5ccac194d71c8e653d790d4d4b", "patch": "@@ -2417,6 +2417,7 @@ next_baselink (baselink)\n \f\n /* DEPTH-FIRST SEARCH ROUTINES.  */\n \n+#ifdef MI_MATRIX\n /* Assign unique numbers to _CLASSTYPE members of the lattice\n    specified by TYPE.  The root nodes are marked first; the nodes\n    are marked depth-fisrt, left-right.  */\n@@ -2441,6 +2442,7 @@ static int mi_size;\n   ((mi_matrix+mi_size*(CLASSTYPE_CID (C1)-1))[CLASSTYPE_CID (C2)-1])\n #define BINFO_DERIVES_FROM_STAR(C)\t\\\n   (mi_matrix+(BINFO_CID (C)-1))\n+#endif\n \n /* This routine converts a pointer to be a pointer of an immediate\n    base class.  The normal convert_pointer_to routine would diagnose\n@@ -2531,11 +2533,13 @@ dfs_walk (binfo, fn, qfn)\n   fn (binfo);\n }\n \n+#ifdef MI_MATRIX\n /* Predicate functions which serve for dfs_walk.  */\n static int numberedp (binfo) tree binfo;\n { return BINFO_CID (binfo); }\n static int unnumberedp (binfo) tree binfo;\n { return BINFO_CID (binfo) == 0; }\n+#endif\n \n static int markedp (binfo) tree binfo;\n { return BINFO_MARKED (binfo); }\n@@ -2578,6 +2582,7 @@ static int dfs_debug_unmarkedp (binfo) tree binfo;\n    test anything (vis a vis marking) if they are paired with\n    a predicate function (above).  */\n \n+#ifdef MI_MATRIX\n /* Assign each type within the lattice a number which is unique\n    in the lattice.  The first number assigned is 1.  */\n \n@@ -2594,6 +2599,7 @@ dfs_unnumber (binfo)\n {\n   BINFO_CID (binfo) = 0;\n }\n+#endif\n \n #if 0\n static void\n@@ -3131,6 +3137,7 @@ get_vbase_types (type)\n   return vbase_types;\n }\n \f\n+#ifdef MI_MATRIX\n static void\n dfs_record_inheritance (binfo)\n      tree binfo;\n@@ -3217,6 +3224,7 @@ free_mi_matrix ()\n   cid = 0;\n #endif\n }\n+#endif\n \f\n /* If we want debug info for a type TYPE, make sure all its base types\n    are also marked as being potentially interesting.  This avoids\n@@ -3300,12 +3308,17 @@ envelope_add_decl (type, decl, values)\n \t  else\n \t    dont_add = 1;\n \t}\n-      /* If we don't check CLASSTYPE_CID on CONTEXT right now, we'll end\n-\t up subtracting from the address of MI_MATRIX, putting us off\n-\t in la la land.  */\n-      else if (context\n-\t       && CLASSTYPE_CID (context)\n-\t       && TYPE_DERIVES_FROM (context, type))\n+      else if (type == current_class_type\n+#ifdef MI_MATRIX\n+\t       /* If we don't check CLASSTYPE_CID on CONTEXT right now,\n+\t\t  we'll end up subtracting from the address of MI_MATRIX,\n+\t\t  putting us off in la la land.  */\n+\t       || (CLASSTYPE_CID (type)\n+\t\t   && TYPE_DERIVES_FROM (context, type))\n+#else\n+\t       || DERIVED_FROM_P (context, type)\n+#endif\n+\t       )\n \t{\n \t  /* Don't add in *values to list */\n \t  *values = NULL_TREE;\n@@ -3323,12 +3336,17 @@ envelope_add_decl (type, decl, values)\n \t  ? DECL_CLASS_CONTEXT (value)\n \t    : DECL_CONTEXT (value);\n \n-\t/* If we don't check CLASSTYPE_CID on CONTEXT right now, we'll end\n-\t   up subtracting from the address of MI_MATRIX, putting us off\n-\t   in la la land.  */\n-\tif (context\n-\t    && CLASSTYPE_CID (context)\n-\t    && TYPE_DERIVES_FROM (context, type))\n+\tif (type == current_class_type\n+#ifdef MI_MATRIX\n+\t    /* If we don't check CLASSTYPE_CID on CONTEXT right now,\n+\t       we'll end up subtracting from the address of MI_MATRIX,\n+\t       putting us off in la la land.  */\n+\t    || (CLASSTYPE_CID (type)\n+\t\t&& TYPE_DERIVES_FROM (context, type))\n+#else\n+\t    || DERIVED_FROM_P (context, type)\n+#endif\n+\t    )\n \t  {\n \t    /* remove *tmp from list */\n \t    *tmp = TREE_CHAIN (*tmp);"}]}