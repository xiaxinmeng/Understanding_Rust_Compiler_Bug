{"sha": "82085eb3d44833bd1557fdd932c4738d987f559d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwODVlYjNkNDQ4MzNiZDE1NTdmZGQ5MzJjNDczOGQ5ODdmNTU5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T10:16:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T10:16:15Z"}, "message": "i386: Fix up _mm256_vzeroupper() handling [PR99563]\n\nMy r10-6451-gb7b3378f91c0641f2ef4d88db22af62a571c9359 fix for\nvzeroupper vs. ms ABI apparently broke the explicit vzeroupper handling\nwhen the implicit vzeroupper handling is disabled.\nThe epilogue_completed splitter for vzeroupper now adds clobbers for all\nregisters which don't have explicit sets in the pattern and the sets are\nadded during vzeroupper pass.  Before my changes, for explicit user\nvzeroupper, we just weren't modelling its effects at all, it was just\nunspec that didn't tell that it clobbers the upper parts of all XMM < %xmm16\nregisters.  But now the splitter will even for those add clobbers and as\nit has no sets, it will add clobbers for all registers, which means\nwe optimize away anything that lived across that vzeroupper.\n\nThe vzeroupper pass has two parts, one is the mode switching that computes\nwhere to put the implicit vzeroupper calls and puts them there, and then\nanother that uses df to figure out what sets to add to all the vzeroupper.\nThe former part should be done only under the conditions we have in the\ngate, but the latter as this PR shows needs to happen either if we perform\nthe implicit vzeroupper additions, or if there are (or could be) any\nexplicit vzeroupper instructions.  As that function does df_analyze and\nwalks the whole IL, I think it would be too expensive to run it always\nwhenever TARGET_AVX, so this patch remembers if we've expanded at least\none __builtin_ia32_vzeroupper in the function and runs that part of the\nvzeroupper pass both when the old condition is true or when this new\nflag is set.\n\n2021-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99563\n\t* config/i386/i386.h (struct machine_function): Add\n\thas_explicit_vzeroupper bitfield.\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Set\n\tcfun->machine->has_explicit_vzeroupper when expanding\n\tIX86_BUILTIN_VZEROUPPER.\n\t* config/i386/i386-features.c (rest_of_handle_insert_vzeroupper):\n\tDo the mode switching only when TARGET_VZEROUPPER, expensive\n\toptimizations turned on and not optimizing for size.\n\t(pass_insert_vzeroupper::gate): Enable even when\n\tcfun->machine->has_explicit_vzeroupper is set.\n\n\t* gcc.target/i386/avx-pr99563.c: New test.", "tree": {"sha": "29e555fdc52fd72f5f1985f5dceb5d3830da761d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e555fdc52fd72f5f1985f5dceb5d3830da761d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82085eb3d44833bd1557fdd932c4738d987f559d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82085eb3d44833bd1557fdd932c4738d987f559d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82085eb3d44833bd1557fdd932c4738d987f559d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82085eb3d44833bd1557fdd932c4738d987f559d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcefc59befd396267b824c170b6a37acaf10874e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcefc59befd396267b824c170b6a37acaf10874e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcefc59befd396267b824c170b6a37acaf10874e"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "33b88224d8189eef8b04b1235cbbcebae547a1f7", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=82085eb3d44833bd1557fdd932c4738d987f559d", "patch": "@@ -13210,6 +13210,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n       return 0;\n \n+    case IX86_BUILTIN_VZEROUPPER:\n+      cfun->machine->has_explicit_vzeroupper = true;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "77783a154b68d1eb8334659ad18bc20235304053", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=82085eb3d44833bd1557fdd932c4738d987f559d", "patch": "@@ -1837,19 +1837,22 @@ ix86_add_reg_usage_to_vzerouppers (void)\n static unsigned int\n rest_of_handle_insert_vzeroupper (void)\n {\n-  int i;\n-\n-  /* vzeroupper instructions are inserted immediately after reload to\n-     account for possible spills from 256bit or 512bit registers.  The pass\n-     reuses mode switching infrastructure by re-running mode insertion\n-     pass, so disable entities that have already been processed.  */\n-  for (i = 0; i < MAX_386_ENTITIES; i++)\n-    ix86_optimize_mode_switching[i] = 0;\n+  if (TARGET_VZEROUPPER\n+      && flag_expensive_optimizations\n+      && !optimize_size)\n+    {\n+      /* vzeroupper instructions are inserted immediately after reload to\n+\t account for possible spills from 256bit or 512bit registers.  The pass\n+\t reuses mode switching infrastructure by re-running mode insertion\n+\t pass, so disable entities that have already been processed.  */\n+      for (int i = 0; i < MAX_386_ENTITIES; i++)\n+\tix86_optimize_mode_switching[i] = 0;\n \n-  ix86_optimize_mode_switching[AVX_U128] = 1;\n+      ix86_optimize_mode_switching[AVX_U128] = 1;\n \n-  /* Call optimize_mode_switching.  */\n-  g->get_passes ()->execute_pass_mode_switching ();\n+      /* Call optimize_mode_switching.  */\n+      g->get_passes ()->execute_pass_mode_switching ();\n+    }\n   ix86_add_reg_usage_to_vzerouppers ();\n   return 0;\n }\n@@ -1880,8 +1883,10 @@ class pass_insert_vzeroupper : public rtl_opt_pass\n   virtual bool gate (function *)\n     {\n       return TARGET_AVX\n-\t     && TARGET_VZEROUPPER && flag_expensive_optimizations\n-\t     && !optimize_size;\n+\t     && ((TARGET_VZEROUPPER\n+\t\t  && flag_expensive_optimizations\n+\t\t  && !optimize_size)\n+\t\t || cfun->machine->has_explicit_vzeroupper);\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "48749104b2409020e36e6259f95252d103c2de00", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=82085eb3d44833bd1557fdd932c4738d987f559d", "patch": "@@ -2941,6 +2941,10 @@ struct GTY(()) machine_function {\n   /* True if the function needs a stack frame.  */\n   BOOL_BITFIELD stack_frame_required : 1;\n \n+  /* True if __builtin_ia32_vzeroupper () has been expanded in current\n+     function.  */\n+  BOOL_BITFIELD has_explicit_vzeroupper : 1;\n+\n   /* The largest alignment, in bytes, of stack slot actually used.  */\n   unsigned int max_used_stack_alignment;\n "}, {"sha": "e2e863b91ed5777caffaf7c8377c9f51de3d1f0a", "filename": "gcc/testsuite/gcc.target/i386/avx-pr99563.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr99563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82085eb3d44833bd1557fdd932c4738d987f559d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr99563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr99563.c?ref=82085eb3d44833bd1557fdd932c4738d987f559d", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/99563 */\n+/* { dg-do run { target avx } } */\n+/* { dg-options \"-O2 -mavx -mno-vzeroupper\" } */\n+\n+#include \"avx-check.h\"\n+#include <immintrin.h>\n+\n+\n+__attribute__((noipa)) float\n+compute_generic (void)\n+{\n+  return 0.0f;\n+}\n+\n+static inline __attribute__((always_inline))\n+float compute_avx (unsigned long block_count)\n+{\n+  __m128d mm_res = _mm_set1_pd (256.0);\n+  float res = (float) (_mm_cvtsd_f64 (mm_res) / (double) block_count);\n+  _mm256_zeroupper ();\n+  return res;\n+}\n+\n+__attribute__((noipa)) float\n+compute (unsigned long block_count)\n+{\n+  if (block_count >= 64)\n+    return compute_avx (block_count);\n+  else\n+    return compute_generic ();\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  if (compute (128) != 2.0f || compute (32) != 0.0f)\n+    abort ();\n+}"}]}