{"sha": "4cd533a7c73a0813a39b41147c9fe771fd65fd28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkNTMzYTdjNzNhMDgxM2EzOWI0MTE0N2M5ZmU3NzFmZDY1ZmQyOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-02T21:11:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-02T21:11:19Z"}, "message": "stl_bvector.h (hash<vector<bool, _Alloc>>): Add.\n\n2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_bvector.h (hash<vector<bool, _Alloc>>): Add.\n\t* include/debug/vector (hash<__debug::vector<bool, _Alloc>>):\n\tLikewise.\n\t* include/profile/vector (hash<__profile::vector<bool, _Alloc>>):\n\tLikewise.\n\t* testsuite/23_containers/vector/bool/hash/1.cc: New.\n\n\t* include/std/bitset (hash<bitset<_Nb>>): Small tweaks.\n\t(hash<bitset<0>>): Add.\n\t* include/debug/bitset (hash<__debug::bitset<_Nb>>): Forward to\n\thash<bitset<_Nb>>.\n\t* include/profile/bitset (hash<__profile::bitset<_Nb>>): Likewise.\n\t* testsuite/23_containers/bitset/hash/1.cc: Improve.\n\nFrom-SVN: r157176", "tree": {"sha": "5e48d10195e6a0bccc697e1485ec1558a6910b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e48d10195e6a0bccc697e1485ec1558a6910b5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cd533a7c73a0813a39b41147c9fe771fd65fd28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd533a7c73a0813a39b41147c9fe771fd65fd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd533a7c73a0813a39b41147c9fe771fd65fd28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd533a7c73a0813a39b41147c9fe771fd65fd28/comments", "author": null, "committer": null, "parents": [{"sha": "54bceaf397784a87995fa91a039dcb328b120bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54bceaf397784a87995fa91a039dcb328b120bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54bceaf397784a87995fa91a039dcb328b120bc9"}], "stats": {"total": 224, "additions": 197, "deletions": 27}, "files": [{"sha": "b1f673c1a43f9d1eec3ac90da98fcfcc3da5492b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -1,3 +1,19 @@\n+2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_bvector.h (hash<vector<bool, _Alloc>>): Add.\n+\t* include/debug/vector (hash<__debug::vector<bool, _Alloc>>):\n+\tLikewise.\n+\t* include/profile/vector (hash<__profile::vector<bool, _Alloc>>):\n+\tLikewise.\n+\t* testsuite/23_containers/vector/bool/hash/1.cc: New.\n+\n+\t* include/std/bitset (hash<bitset<_Nb>>): Small tweaks.\n+\t(hash<bitset<0>>): Add.\n+\t* include/debug/bitset (hash<__debug::bitset<_Nb>>): Forward to\n+\thash<bitset<_Nb>>.\n+\t* include/profile/bitset (hash<__profile::bitset<_Nb>>): Likewise.\n+\t* testsuite/23_containers/bitset/hash/1.cc: Improve.\n+\n 2010-03-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/43230\n@@ -7,9 +23,9 @@\n 2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/bitset (_Base_bitset<>::_M_getdata()): Add.\n-\t(hash<_GLIBCXX_STD_D::bitset<_Nb>>): Add, use the latter.\n-\t* include/debug/bitset (hash<std::__debug::bitset<_Nb>>): Add.\n-\t* include/profile/bitset (hash<std::__profile::bitset<_Nb>>): Likewise.\n+\t(hash<bitset<_Nb>>): Add, use the latter.\n+\t* include/debug/bitset (hash<__debug::bitset<_Nb>>): Add.\n+\t* include/profile/bitset (hash<__profile::bitset<_Nb>>): Likewise.\n \t* testsuite/23_containers/bitset/hash/1.cc: New.\n \n 2010-03-02  Jonathan Wakely  <jwakely.gcc@gmail.com>"}, {"sha": "c7a4acdc084ca04703ca75967c59493519efc4a4", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -475,6 +475,10 @@ template<typename _Alloc>\n   {\n     typedef _Bvector_base<_Alloc>\t\t\t _Base;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    template<typename> friend class hash;\n+#endif\n+\n   public:\n     typedef bool                                         value_type;\n     typedef size_t                                       size_type;\n@@ -1024,4 +1028,60 @@ template<typename _Alloc>\n \n _GLIBCXX_END_NESTED_NAMESPACE\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+#include <bits/functional_hash.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // DR 1182.\n+  /// std::hash specialization for vector<bool>.\n+  template<typename _Alloc>\n+    struct hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>\n+    : public std::unary_function<_GLIBCXX_STD_D::vector<bool, _Alloc>, size_t>\n+    {\n+      size_t\n+      operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const;\n+    };\n+\n+  template<typename _Alloc>\n+    size_t\n+    hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>::\n+    operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const\n+    {\n+      size_t __hash = 0;\n+      using _GLIBCXX_STD_D::_S_word_bit;\n+      using _GLIBCXX_STD_D::_Bit_type;\n+\n+      const size_t __words = __b.size() / _S_word_bit;\n+      if (__words)\n+\t{\n+\t  const char* __data\n+\t    = reinterpret_cast<const char*>(__b._M_impl._M_start._M_p);\n+\t  const size_t __size = __words * sizeof(_Bit_type);\n+\t  __hash = std::_Fnv_hash::hash(__data, __size);\n+\t}\n+\n+      const size_t __extrabits = __b.size() % _S_word_bit;\n+      if (__extrabits)\n+\t{\n+\t  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;\n+\t  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);\n+\n+\t  const char* __data = reinterpret_cast<const char*>(&__hiword);\n+\t  const size_t __size\n+\t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\t  if (__words)\n+\t    __hash = std::_Fnv_hash::hash(__data, __size, __hash);\n+\t  else\n+\t    __hash = std::_Fnv_hash::hash(__data, __size);\n+\t}\n+\n+      return __hash;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n #endif"}, {"sha": "034505d2c89b3468863fa8e28335ec79b694baa2", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -389,10 +389,7 @@ namespace __debug\n     {\n       size_t\n       operator()(const std::__debug::bitset<_Nb>& __b) const\n-      {\n-\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n-\treturn std::_Fnv_hash::hash(__b._M_base()._M_getdata(), __size);\n-      }\n+      { return std::hash<_GLIBCXX_STD_D::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif\n "}, {"sha": "e3caef5f60bda26b43abe1924634b15ec5889ce1", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -536,6 +536,21 @@ namespace __debug\n     { __lhs.swap(__rhs); }\n \n } // namespace __debug\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  // DR 1182.\n+  /// std::hash specialization for vector<bool>.\n+  template<typename _Alloc>\n+    struct hash<__debug::vector<bool, _Alloc>>\n+    : public std::unary_function<std::__debug::vector<bool, _Alloc>, size_t>\n+    {\n+      size_t\n+      operator()(const std::__debug::vector<bool, _Alloc>& __b) const\n+      { return std::hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>()\n+\t  (__b._M_base()); }\n+    };\n+#endif\n+\n } // namespace std\n \n #endif"}, {"sha": "fb47566ec2857e14ff5bb84b64849672b756b412", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -363,10 +363,7 @@ namespace __profile\n     {\n       size_t\n       operator()(const std::__profile::bitset<_Nb>& __b) const\n-      {\n-\tconst size_t __size = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n-\treturn std::_Fnv_hash::hash(__b._M_base()._M_getdata(), __size);\n-      }\n+      { return std::hash<_GLIBCXX_STD_D::bitset<_Nb>>()(__b._M_base()); }\n     };\n #endif\n "}, {"sha": "f7c18713544a98ffd60848bc2c08dac1c058eaed", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -461,7 +461,21 @@ namespace __profile\n #endif\n \n } // namespace __profile\n-  using _GLIBCXX_STD_D::_S_word_bit;\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  // DR 1182.\n+  /// std::hash specialization for vector<bool>.\n+  template<typename _Alloc>\n+    struct hash<__profile::vector<bool, _Alloc>>\n+    : public std::unary_function<std::__profile::vector<bool, _Alloc>, size_t>\n+    {\n+      size_t\n+      operator()(const std::__profile::vector<bool, _Alloc>& __b) const\n+      { return std::hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>()\n+\t  (__b._M_base()); }\n+    };\n+#endif\n+\n } // namespace std\n \n #endif"}, {"sha": "7372639c58a85362001902085c6c44386efb73e4", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -552,12 +552,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \treturn *new _WordT; \n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      const char*\n-      _M_getdata() const\n-      { return reinterpret_cast<const char*>(&_M_getword(0)); }\n-#endif\n-\n       _WordT\n       _M_hiword() const\n       { return 0; }\n@@ -1493,8 +1487,11 @@ _GLIBCXX_END_NESTED_NAMESPACE\n #undef _GLIBCXX_BITSET_BITS_PER_WORD\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-namespace std\n-{\n+\n+#include <bits/functional_hash.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   // DR 1182.\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>\n@@ -1508,7 +1505,18 @@ namespace std\n \treturn std::_Fnv_hash::hash(__b._M_getdata(), __size);\n       }\n     };\n-}\n+\n+  template<>\n+    struct hash<_GLIBCXX_STD_D::bitset<0>>\n+    : public std::unary_function<_GLIBCXX_STD_D::bitset<0>, size_t>\n+    {\n+      size_t\n+      operator()(const _GLIBCXX_STD_D::bitset<0>&) const\n+      { return 0; }\n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #ifdef _GLIBCXX_DEBUG"}, {"sha": "655192e4e8fd7431919e8a5f7895a629b24437c7", "filename": "libstdc++-v3/testsuite/23_containers/bitset/hash/1.cc", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fhash%2F1.cc?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -1,4 +1,3 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n // Copyright (C) 2010 Free Software Foundation, Inc.\n@@ -20,8 +19,27 @@\n \n #include <bitset>\n \n-// bitset hash\n-std::hash<std::bitset<0>>    h1;\n-std::hash<std::bitset<10>>   h2;\n-std::hash<std::bitset<100>>  h3;\n-std::hash<std::bitset<1000>> h4;\n+void test01()\n+{\n+  std::bitset<0>    b0;\n+  std::hash<std::bitset<0>>    h0;\n+  h0(b0);\n+\n+  std::bitset<10>   b1;\n+  std::hash<std::bitset<10>>   h1;\n+  h1(b1);\n+\n+  std::bitset<100>  b2;\n+  std::hash<std::bitset<100>>  h2;\n+  h2(b2);\n+\n+  std::bitset<1000> b3;\n+  std::hash<std::bitset<1000>> h3;\n+  h3(b3);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "85e91e98ed7792e421929ec05e88ac10f10d9074", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/hash/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fhash%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533a7c73a0813a39b41147c9fe771fd65fd28/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fhash%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fhash%2F1.cc?ref=4cd533a7c73a0813a39b41147c9fe771fd65fd28", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  std::vector<bool> b0;\n+  std::hash<std::vector<bool>>  h0;\n+  h0(b0);\n+\n+  std::vector<bool> b1(10);\n+  std::hash<std::vector<bool>>  h1;\n+  h1(b1);\n+\n+  std::vector<bool> b2(100);\n+  std::hash<std::vector<bool>>  h2;\n+  h2(b2);\n+\n+  std::vector<bool> b3(1000);\n+  std::hash<std::vector<bool>>  h3;\n+  h3(b3);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}