{"sha": "0cd50f8913574aff26ae486c87e964462025b791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkNTBmODkxMzU3NGFmZjI2YWU0ODZjODdlOTY0NDYyMDI1Yjc5MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-15T20:51:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-15T20:51:53Z"}, "message": "set.h (set<>::cbegin, [...]): Add.\n\n2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/debug/set.h (set<>::cbegin, cend, crbegin, crend): Add.\n\t* include/debug/multiset.h (set<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/debug/vector (vector<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/debug/map.h (map<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/debug/deque (deque<>::cbegin, cend, crbegin, crend): \n\tLikewise.\n\t* include/debug/list (list<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/debug/multimap.h (multimap<>::cbegin, cend, crbegin,\n\tcrend): Likewise.\n\t* include/tr1_impl/array (array<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/ext/vstring.h (__versa_string<>::cbegin, cend, crbegin,\n\tcrend): Likewise.\n\t* include/bits/stl_list.h (list<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/bits/stl_map.h (map<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/bits/stl_set.h (set<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/bits/stl_multimap.h (multimap<>::cbegin, cend, crbegin,\n\tcrend): Likewise.\n\t* include/bits/stl_vector.h (vector<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/bits/stl_deque.h (deque<>::cbegin, cend, crbegin, crend):\n\tLikewise.\n\t* include/bits/stl_multiset.h (multiset<>::cbegin, cend, crbegin,\n\tcrend): Likewise.\n\t* include/bits/stl_bvector.h (vector<bool>::cbegin, cend, crbegin,\n\tcrend): Likewise.\n\t* include/tr1_impl/hashtable (_Hashtable<>::cbegin, cend): Add.\t\n\n\t* testsuite/ext/vstring/requirements/citerators.cc: Add.\n\t* testsuite/23_containers/unordered_map/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/23_containers/multimap/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/23_containers/set/requirements/citerators.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\tciterators.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/citerators.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/citerators.cc: Likewise.\n\t* testsuite/23_containers/multiset/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/citerators.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\tciterators.cc: Likewise.\n\t* testsuite/23_containers/map/requirements/citerators.cc: Likewise.\n\t* testsuite/23_containers/array/requirements/citerators.cc: Likewise.\n\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error lines.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r129370", "tree": {"sha": "7f88beb46645ea943f3ec3bedb9765bbafb42b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f88beb46645ea943f3ec3bedb9765bbafb42b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd50f8913574aff26ae486c87e964462025b791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd50f8913574aff26ae486c87e964462025b791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd50f8913574aff26ae486c87e964462025b791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd50f8913574aff26ae486c87e964462025b791/comments", "author": null, "committer": null, "parents": [{"sha": "6b2fe1bcaf0005dbebb838aced50ea2b281645ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2fe1bcaf0005dbebb838aced50ea2b281645ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2fe1bcaf0005dbebb838aced50ea2b281645ff"}], "stats": {"total": 1368, "additions": 1336, "deletions": 32}, "files": [{"sha": "c72ab4764f89e3d375f927e556f05a33fd1084d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -1,3 +1,87 @@\n+2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/debug/set.h (set<>::cbegin, cend, crbegin, crend): Add.\n+\t* include/debug/multiset.h (set<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/debug/vector (vector<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/debug/map.h (map<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/debug/deque (deque<>::cbegin, cend, crbegin, crend): \n+\tLikewise.\n+\t* include/debug/list (list<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/debug/multimap.h (multimap<>::cbegin, cend, crbegin,\n+\tcrend): Likewise.\n+\t* include/tr1_impl/array (array<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/ext/vstring.h (__versa_string<>::cbegin, cend, crbegin,\n+\tcrend): Likewise.\n+\t* include/bits/stl_list.h (list<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/bits/stl_map.h (map<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/bits/stl_set.h (set<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/bits/stl_multimap.h (multimap<>::cbegin, cend, crbegin,\n+\tcrend): Likewise.\n+\t* include/bits/stl_vector.h (vector<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/bits/stl_deque.h (deque<>::cbegin, cend, crbegin, crend):\n+\tLikewise.\n+\t* include/bits/stl_multiset.h (multiset<>::cbegin, cend, crbegin,\n+\tcrend): Likewise.\n+\t* include/bits/stl_bvector.h (vector<bool>::cbegin, cend, crbegin,\n+\tcrend): Likewise.\n+\t* include/tr1_impl/hashtable (_Hashtable<>::cbegin, cend): Add.\t\n+\n+\t* testsuite/ext/vstring/requirements/citerators.cc: Add.\n+\t* testsuite/23_containers/unordered_map/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multimap/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/requirements/citerators.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\tciterators.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/citerators.cc: Likewise.\n+\t* testsuite/23_containers/vector/bool/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/citerators.cc: Likewise.\n+\t* testsuite/23_containers/multiset/requirements/citerators.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/citerators.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\tciterators.cc: Likewise.\n+\t* testsuite/23_containers/map/requirements/citerators.cc: Likewise.\n+\t* testsuite/23_containers/array/requirements/citerators.cc: Likewise.\n+\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error lines.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/33773 (cont)"}, {"sha": "a7044564d96b846a25eb9af7410aa64415e4ec68", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -602,6 +602,24 @@ template<typename _Alloc>\n     rend() const\n     { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    const_iterator\n+    cbegin() const\n+    { return this->_M_impl._M_start; }\n+\n+    const_iterator\n+    cend() const\n+    { return this->_M_impl._M_finish; }\n+\n+    const_reverse_iterator\n+    crbegin() const\n+    { return const_reverse_iterator(end()); }\n+\n+    const_reverse_iterator\n+    crend() const\n+    { return const_reverse_iterator(begin()); }\n+#endif\n+\n     size_type\n     size() const\n     { return size_type(end() - begin()); }"}, {"sha": "41cd231f4466263c0b5722b998eaa45072e5f62a", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -909,6 +909,43 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       rend() const\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  element in the %deque.  Iteration is done in ordinary element order.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return this->_M_impl._M_start; }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past\n+       *  the last element in the %deque.  Iteration is done in\n+       *  ordinary element order.\n+       */\n+      const_iterator\n+      cend() const\n+      { return this->_M_impl._M_finish; }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last element in the %deque.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(this->_M_impl._M_finish); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first element in the %deque.  Iteration is\n+       *  done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(this->_M_impl._M_start); }\n+#endif\n+\n       // [23.2.1.2] capacity\n       /**  Returns the number of elements in the %deque.  */\n       size_type"}, {"sha": "7bdeacb33fa5e343d48b0bead647819ceb8b9b3b", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -691,6 +691,44 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the\n+       *  first element in the %list.  Iteration is done in ordinary\n+       *  element order.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(this->_M_impl._M_node._M_next); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past\n+       *  the last element in the %list.  Iteration is done in ordinary\n+       *  element order.\n+       */\n+      const_iterator\n+      cend() const\n+      { return const_iterator(&this->_M_impl._M_node); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to\n+       *  the last element in the %list.  Iteration is done in reverse\n+       *  element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to one\n+       *  before the first element in the %list.  Iteration is done in reverse\n+       *  element order.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // [23.2.2.2] capacity\n       /**\n        *  Returns true if the %list is empty.  (Thus begin() would equal"}, {"sha": "28b396e31e0eb0a742741f04a477c2731035a01e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -340,6 +340,44 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       rend() const\n       { return _M_t.rend(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first pair\n+       *  in the %map.  Iteration is done in ascending order according to the\n+       *  keys.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return _M_t.begin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  pair in the %map.  Iteration is done in ascending order according to\n+       *  the keys.\n+       */\n+      const_iterator\n+      cend() const\n+      { return _M_t.end(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last pair in the %map.  Iteration is done in descending order\n+       *  according to the keys.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return _M_t.rbegin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to one\n+       *  before the first pair in the %map.  Iteration is done in descending\n+       *  order according to the keys.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return _M_t.rend(); }\n+#endif\n+\n       // capacity\n       /** Returns true if the %map is empty.  (Thus begin() would equal\n        *  end().)"}, {"sha": "1c1883a865157e9692b3448f04a9a1fbb7f92617", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -338,6 +338,44 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       rend() const\n       { return _M_t.rend(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first pair\n+       *  in the %multimap.  Iteration is done in ascending order according to\n+       *  the keys.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return _M_t.begin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  pair in the %multimap.  Iteration is done in ascending order according\n+       *  to the keys.\n+       */\n+      const_iterator\n+      cend() const\n+      { return _M_t.end(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last pair in the %multimap.  Iteration is done in descending order\n+       *  according to the keys.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return _M_t.rbegin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to one\n+       *  before the first pair in the %multimap.  Iteration is done in\n+       *  descending order according to the keys.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return _M_t.rend(); }\n+#endif\n+\n       // capacity\n       /** Returns true if the %multimap is empty.  */\n       bool"}, {"sha": "55ec0472defb7151813f05d86422f7f764509e7d", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -248,41 +248,79 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_t.get_allocator(); }\n \n       /**\n-       *  Returns a read/write iterator that points to the first element in the\n-       *  %multiset.  Iteration is done in ascending order according to the\n-       *  keys.\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  element in the %multiset.  Iteration is done in ascending order\n+       *  according to the keys.\n        */\n       iterator\n       begin() const\n       { return _M_t.begin(); }\n \n       /**\n-       *  Returns a read/write iterator that points one past the last element in\n-       *  the %multiset.  Iteration is done in ascending order according to the\n-       *  keys.\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  element in the %multiset.  Iteration is done in ascending order\n+       *  according to the keys.\n        */\n       iterator\n       end() const\n       { return _M_t.end(); }\n \n       /**\n-       *  Returns a read/write reverse iterator that points to the last element\n-       *  in the %multiset.  Iteration is done in descending order according to\n-       *  the keys.\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last element in the %multiset.  Iteration is done in descending order\n+       *  according to the keys.\n        */\n       reverse_iterator\n       rbegin() const\n       { return _M_t.rbegin(); }\n \n       /**\n-       *  Returns a read/write reverse iterator that points to the last element\n-       *  in the %multiset.  Iteration is done in descending order according to\n-       *  the keys.\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last element in the %multiset.  Iteration is done in descending order\n+       *  according to the keys.\n        */\n       reverse_iterator\n       rend() const\n       { return _M_t.rend(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  element in the %multiset.  Iteration is done in ascending order\n+       *  according to the keys.\n+       */\n+      iterator\n+      cbegin() const\n+      { return _M_t.begin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  element in the %multiset.  Iteration is done in ascending order\n+       *  according to the keys.\n+       */\n+      iterator\n+      cend() const\n+      { return _M_t.end(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last element in the %multiset.  Iteration is done in descending order\n+       *  according to the keys.\n+       */\n+      reverse_iterator\n+      crbegin() const\n+      { return _M_t.rbegin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last element in the %multiset.  Iteration is done in descending order\n+       *  according to the keys.\n+       */\n+      reverse_iterator\n+      crend() const\n+      { return _M_t.rend(); }\n+#endif\n+\n       ///  Returns true if the %set is empty.\n       bool\n       empty() const"}, {"sha": "1d6284867107653f8f6bcaee8d344638707b4e60", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -255,39 +255,79 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_t.get_allocator(); }\n \n       /**\n-       *  Returns a read/write iterator that points to the first element in the\n-       *  %set.  Iteration is done in ascending order according to the keys.\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  element in the %set.  Iteration is done in ascending order according\n+       *  to the keys.\n        */\n       iterator\n       begin() const\n       { return _M_t.begin(); }\n \n       /**\n-       *  Returns a read/write iterator that points one past the last element in\n-       *  the %set.  Iteration is done in ascending order according to the keys.\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  element in the %set.  Iteration is done in ascending order according\n+       *  to the keys.\n        */\n       iterator\n       end() const\n       { return _M_t.end(); }\n \n       /**\n-       *  Returns a read/write reverse iterator that points to the last element\n-       *  in the %set.  Iteration is done in descending order according to the\n-       *  keys.\n+       *  Returns a read-only (constant) iterator that points to the last\n+       *  element in the %set.  Iteration is done in descending order according\n+       *  to the keys.\n        */\n       reverse_iterator\n       rbegin() const\n       { return _M_t.rbegin(); }\n \n       /**\n        *  Returns a read-only (constant) reverse iterator that points to the\n-       *  last pair in the %map.  Iteration is done in descending order\n+       *  last pair in the %set.  Iteration is done in descending order\n        *  according to the keys.\n        */\n       reverse_iterator\n       rend() const\n       { return _M_t.rend(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  element in the %set.  Iteration is done in ascending order according\n+       *  to the keys.\n+       */\n+      iterator\n+      cbegin() const\n+      { return _M_t.begin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the last\n+       *  element in the %set.  Iteration is done in ascending order according\n+       *  to the keys.\n+       */\n+      iterator\n+      cend() const\n+      { return _M_t.end(); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the last\n+       *  element in the %set.  Iteration is done in descending order according\n+       *  to the keys.\n+       */\n+      reverse_iterator\n+      crbegin() const\n+      { return _M_t.rbegin(); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points to the\n+       *  last pair in the %set.  Iteration is done in descending order\n+       *  according to the keys.\n+       */\n+      reverse_iterator\n+      crend() const\n+      { return _M_t.rend(); }\n+#endif\n+\n       ///  Returns true if the %set is empty.\n       bool\n       empty() const"}, {"sha": "745ef79ed10c5eb589ac2abbbe2520f0ba8f1fe2", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -430,6 +430,44 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the\n+       *  first element in the %vector.  Iteration is done in ordinary\n+       *  element order.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(this->_M_impl._M_start); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past\n+       *  the last element in the %vector.  Iteration is done in\n+       *  ordinary element order.\n+       */\n+      const_iterator\n+      cend() const\n+      { return const_iterator(this->_M_impl._M_finish); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last element in the %vector.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first element in the %vector.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // [23.2.4.2] capacity\n       /**  Returns the number of elements in the %vector.  */\n       size_type"}, {"sha": "6571d151b1a991af3a9ca2210ca2f09d9f8ceea9", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -166,6 +166,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // 23.2.1.2 capacity:\n       using _Base::size;\n       using _Base::max_size;"}, {"sha": "717433471cb8a4e6eea10f5e85c85657b8b759f7", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -195,6 +195,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // 23.2.2.2 capacity:\n       using _Base::empty;\n       using _Base::size;"}, {"sha": "671e1f8365e518097b950e6a3f0015297fa34c5b", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -156,6 +156,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;"}, {"sha": "1dd4de81df1a093e19b74f335b40c5cd7cf07ccc", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -155,6 +155,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;"}, {"sha": "7c58db17b5cc9d7b1af7f62639703eb99ed4f9e0", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -152,6 +152,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;"}, {"sha": "bebc34c0083a177cdc0a49c84cfe805de657f390", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -152,6 +152,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;"}, {"sha": "ce44241004bb66a07a2b6b05a79765c65cc84e19", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -181,6 +181,24 @@ namespace __debug\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(_Base::begin(), this); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_Base::end(), this); }\n+\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // 23.2.4.2 capacity:\n       using _Base::size;\n       using _Base::max_size;"}, {"sha": "1f1965efb3e23112824687476e3bb4ea6a611b4e", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -327,6 +327,42 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       rend() const\n       { return const_reverse_iterator(this->begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  character in the %string.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(this->_M_data()); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the\n+       *  last character in the %string.\n+       */\n+      const_iterator\n+      cend() const\n+      { return const_iterator(this->_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last character in the %string.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first character in the %string.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(this->begin()); }\n+#endif\n+\n     public:\n       // Capacity:\n       ///  Returns the number of characters in the string, not including any"}, {"sha": "759f00e4b5a494f0902e1163d5bc09c9f511e55d", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -97,6 +97,24 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       rend() const\n       { return const_reverse_iterator(begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const \n+      { return const_iterator(&_M_instance[0]); }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(&_M_instance[_Nm]); }\n+\n+      const_reverse_iterator \n+      crbegin() const\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator \n+      crend() const\n+      { return const_reverse_iterator(begin()); }\n+#endif\n+\n       // Capacity.\n       size_type \n       size() const { return _Nm; }"}, {"sha": "1f7deed068a6630445c9babbb6ace520fcdfcc7e", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -252,6 +252,21 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       end() const\n       { return const_iterator(_M_buckets + _M_bucket_count); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      const_iterator\n+      cbegin() const\n+      {\n+\tconst_iterator __i(_M_buckets);\n+\tif (!__i._M_cur_node)\n+\t  __i._M_incr_bucket();\n+\treturn __i;\n+      }\n+\n+      const_iterator\n+      cend() const\n+      { return const_iterator(_M_buckets + _M_bucket_count); }\n+#endif\n+\n       size_type\n       size() const\n       { return _M_element_count; }"}, {"sha": "4e2cccf01819156cc8e5dd449480f7a9ef02cbd0", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::array<int, 7> a;\n+  VERIFY( a.cbegin() == a.begin() );\n+  VERIFY( a.cend() == a.end() );\n+  VERIFY( a.crbegin() == a.rbegin() );\n+  VERIFY( a.crend() == a.rend() );\n+  VERIFY( a.cbegin() != a.cend() );\n+  VERIFY( a.crbegin() != a.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e869a287cb60c5bb223113decef838f053ff5cff", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<int> d(7);\n+  VERIFY( d.cbegin() == d.begin() );\n+  VERIFY( d.cend() == d.end() );\n+  VERIFY( d.crbegin() == d.rbegin() );\n+  VERIFY( d.crend() == d.rend() );\n+  VERIFY( d.cbegin() != d.cend() );\n+  VERIFY( d.crbegin() != d.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75b656d0a4b19d21882232e892695fc840baea61", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1349 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1386 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "f8cdee357dbdf251025c4a21fd20678c8067836f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1284 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1321 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "5e652c697887a5a61feb047b2087ca191227d7f3", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1284 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1321 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "67cb8a625ffac4d0d4fee7cf501dc26632d51848", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1429 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1466 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "d9ef7581e60904a074f4d74a1e15610e853fb749", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<int> l(7);\n+  VERIFY( l.cbegin() == l.begin() );\n+  VERIFY( l.cend() == l.end() );\n+  VERIFY( l.crbegin() == l.rbegin() );\n+  VERIFY( l.crend() == l.rend() );\n+  VERIFY( l.cbegin() != l.cend() );\n+  VERIFY( l.crbegin() != l.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e47411eb1a6bd3e2b53b8427acb43816da4f7421", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1188 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1226 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "69bd5b48ba8a614fa0345f8b8115aa92a84ee884", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1157 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "49b4f7cd5043e12e580c70d4de67cc48e5e79e9f", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1157 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "af21a0c890248e1b1ef091c0003e188c15898b58", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1157 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "320d46d2e297f99a5e6f9c90bb0fe36b126c1c8c", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/citerators.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::map<int, int> m;\n+  m[1] = 1;\n+  VERIFY( m.cbegin() == m.begin() );\n+  VERIFY( m.cend() == m.end() );\n+  VERIFY( m.crbegin() == m.rbegin() );\n+  VERIFY( m.crend() == m.rend() );\n+  VERIFY( m.cbegin() != m.cend() );\n+  VERIFY( m.crbegin() != m.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ec01d38afbf1a6d60f609c6cf5ebb4764cccd69d", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/citerators.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::multimap<int, int> mm_type;\n+  mm_type mm;\n+  mm.insert(mm_type::value_type(1, 1));\n+  VERIFY( mm.cbegin() == mm.begin() );\n+  VERIFY( mm.cend() == mm.end() );\n+  VERIFY( mm.crbegin() == mm.rbegin() );\n+  VERIFY( mm.crend() == mm.rend() );\n+  VERIFY( mm.cbegin() != mm.cend() );\n+  VERIFY( mm.crbegin() != mm.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "48e3d49bcb87b88c7cb54aa2eec2da4aa8a54ca4", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/citerators.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::multiset<int> ms;\n+  ms.insert(1);\n+  VERIFY( ms.cbegin() == ms.begin() );\n+  VERIFY( ms.cend() == ms.end() );\n+  VERIFY( ms.crbegin() == ms.rbegin() );\n+  VERIFY( ms.crend() == ms.rend() );\n+  VERIFY( ms.cbegin() != ms.cend() );\n+  VERIFY( ms.crbegin() != ms.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3fd624b52084498c17b53866a91908e73c945921", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/citerators.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::set<int> s;\n+  s.insert(1);\n+  VERIFY( s.cbegin() == s.begin() );\n+  VERIFY( s.cend() == s.end() );\n+  VERIFY( s.crbegin() == s.rbegin() );\n+  VERIFY( s.crend() == s.rend() );\n+  VERIFY( s.cbegin() != s.cend() );\n+  VERIFY( s.crbegin() != s.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a14ad0e4bb3ba32e583a1d9429370d54d986caa6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/citerators.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unordered_map<int, int> um;\n+  um[1] = 1;\n+  VERIFY( um.cbegin() == um.begin() );\n+  VERIFY( um.cend() == um.end() );\n+  VERIFY( um.cbegin() != um.cend() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d480726b38e37da2dd08ed87fd95dab1952afda", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/citerators.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::unordered_multimap<int, int> umm_type;\n+  umm_type umm;\n+  umm.insert(umm_type::value_type(1, 1));\n+  VERIFY( umm.cbegin() == umm.begin() );\n+  VERIFY( umm.cend() == umm.end() );\n+  VERIFY( umm.cbegin() != umm.cend() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd54edc4c9586da338008253cf9264daf7c4a8b2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/citerators.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unordered_multiset<int> ums;\n+  ums.insert(1);\n+  VERIFY( ums.cbegin() == ums.begin() );\n+  VERIFY( ums.cend() == ums.end() );\n+  VERIFY( ums.cbegin() != ums.cend() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f358a0f3c7b0b92451f962fa23fbfa3e6a28239b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/citerators.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unordered_set<int> us;\n+  us.insert(1);\n+  VERIFY( us.cbegin() == us.begin() );\n+  VERIFY( us.cend() == us.end() );\n+  VERIFY( us.cbegin() != us.cend() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6ebd177a0356e9360c3e5bcca50603861fc2653", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<bool> vb(7);\n+  VERIFY( vb.cbegin() == vb.begin() );\n+  VERIFY( vb.cend() == vb.end() );\n+  VERIFY( vb.crbegin() == vb.rbegin() );\n+  VERIFY( vb.crend() == vb.rend() );\n+  VERIFY( vb.cbegin() != vb.cend() );\n+  VERIFY( vb.crbegin() != vb.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "99753389c297d618b2b1d2d7c35284c344baf403", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<int> v(7);\n+  VERIFY( v.cbegin() == v.begin() );\n+  VERIFY( v.cend() == v.end() );\n+  VERIFY( v.crbegin() == v.rbegin() );\n+  VERIFY( v.crend() == v.rend() );\n+  VERIFY( v.cbegin() != v.cend() );\n+  VERIFY( v.crbegin() != v.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "33c2c04989ab193f27c4da994eed24aeae3c0484", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 895 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 933 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "846cd04e6c6b099bf67cb7fb958bd0d39edee691", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 835 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 873 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "8dab6ce3195e2418f4a79b4f4a64ad875967a140", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 835 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 873 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "b97f22241d9858e991f53d297ae59ca1aec431f6", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 936 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 974 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "3e579e80fca6714c6d7808552b3d3218ff9b63fe", "filename": "libstdc++-v3/testsuite/ext/vstring/requirements/citerators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd50f8913574aff26ae486c87e964462025b791/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc?ref=0cd50f8913574aff26ae486c87e964462025b791", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__vstring v(7, 'a');\n+  VERIFY( v.cbegin() == v.begin() );\n+  VERIFY( v.cend() == v.end() );\n+  VERIFY( v.crbegin() == v.rbegin() );\n+  VERIFY( v.crend() == v.rend() );\n+  VERIFY( v.cbegin() != v.cend() );\n+  VERIFY( v.crbegin() != v.crend() );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}