{"sha": "d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "node_id": "C_kwDOANBUbNoAKGQ5MWNiMjA1OWZiOGI1YTUwYTJhY2VkMTk5ZTk4N2FiMmNmM2I2Mjk", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-04-28T10:40:59Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-04-28T10:58:12Z"}, "message": "d: Merge upstream dmd 313d28b3d, druntime e361d200.\n\nD front-end changes:\n\n    - Import latest bug fixes from the 2.100 release branch.\n    - Fix signatures of extern C++ functions that have size_t\n      parameters.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 313d28b3d.\n\t* d-port.cc (Port::memicmp): Use d_size_t instead of size_t.\n\t(Port::valcpy): Likewise.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime e361d200.", "tree": {"sha": "6a60ec92e1bf6f3599b047f9277f3c75321020c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a60ec92e1bf6f3599b047f9277f3c75321020c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89dbf9a5f55e0f7565865d1b38e681ef7d76afaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89dbf9a5f55e0f7565865d1b38e681ef7d76afaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89dbf9a5f55e0f7565865d1b38e681ef7d76afaf"}], "stats": {"total": 156, "additions": 121, "deletions": 35}, "files": [{"sha": "a908cc8dbb00dd0d8e389bed6552b25ff56d816e", "filename": "gcc/d/d-port.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fd-port.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fd-port.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-port.cc?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -31,11 +31,11 @@ along with GCC; see the file COPYING3.  If not see\n /* Compare the first N bytes of S1 and S2 without regard to the case.  */\n \n int\n-Port::memicmp (const char *s1, const char *s2, size_t n)\n+Port::memicmp (const char *s1, const char *s2, d_size_t n)\n {\n   int result = 0;\n \n-  for (size_t i = 0; i < n; i++)\n+  for (d_size_t i = 0; i < n; i++)\n     {\n       char c1 = s1[i];\n       char c2 = s2[i];\n@@ -143,9 +143,9 @@ Port::readlongBE (const void *buffer)\n /* Write an SZ-byte sized VALUE to BUFFER, ignoring endian-ness.  */\n \n void\n-Port::valcpy (void *buffer, uint64_t value, size_t sz)\n+Port::valcpy (void *buffer, uint64_t value, d_size_t sz)\n {\n-  gcc_assert (((size_t) buffer) % sz == 0);\n+  gcc_assert (((d_size_t) buffer) % sz == 0);\n \n   switch (sz)\n     {"}, {"sha": "d18119193d4639fa3c9c74029f9f7011f5996fa1", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -1,4 +1,4 @@\n-eb7bee331a13026eeb4dcbf9d43d5d4e744a4d26\n+313d28b3db7523e67880ae3baf8ef28ce9abe9bd\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "2b2046f3da30277a1431ce60fd0893bdecb0b9e5", "filename": "gcc/d/dmd/cparse.d", "status": "modified", "additions": 77, "deletions": 18, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fcparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fcparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcparse.d?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -213,16 +213,12 @@ final class CParser(AST) : Parser!AST\n                     goto Lexp;\n \n                 case TOK.leftParenthesis:\n-                {\n-                    /* If tokens look like a function call, assume it is one,\n-                     * As any type-name won't be resolved until semantic, this\n-                     * could be rewritten later.\n-                     */\n-                    auto tk = &token;\n-                    if (isFunctionCall(tk))\n-                        goto Lexp;\n-                    goto default;\n-                }\n+                    if (auto pt = lookupTypedef(token.ident))\n+                    {\n+                        if (*pt)\n+                            goto Ldeclaration;\n+                    }\n+                    goto Lexp;  // function call\n \n                 default:\n                 {\n@@ -1626,10 +1622,21 @@ final class CParser(AST) : Parser!AST\n          */\n         if (token.value == TOK.semicolon)\n         {\n-            nextToken();\n             if (!tspec)\n+            {\n+                nextToken();\n                 return;         // accept empty declaration as an extension\n+            }\n+\n+            if (auto ti = tspec.isTypeIdentifier())\n+            {\n+                // C11 6.7.2-2\n+                error(\"type-specifier missing for declaration of `%s`\", ti.ident.toChars());\n+                nextToken();\n+                return;\n+            }\n \n+            nextToken();\n             auto tt = tspec.isTypeTag();\n             if (!tt ||\n                 !tt.id && (tt.tok == TOK.struct_ || tt.tok == TOK.union_))\n@@ -1661,6 +1668,22 @@ final class CParser(AST) : Parser!AST\n             specifier.mod &= ~MOD.xnone;          // 'used' it\n         }\n \n+        void scanPastSemicolon()\n+        {\n+            while (token.value != TOK.semicolon && token.value != TOK.endOfFile)\n+                nextToken();\n+            nextToken();\n+        }\n+\n+        if (token.value == TOK.assign && tspec && tspec.isTypeIdentifier())\n+        {\n+            /* C11 6.7.2-2\n+             * Special check for `const b = 1;` because some compilers allow it\n+             */\n+            error(\"type-specifier omitted for declaration of `%s`\", tspec.isTypeIdentifier().ident.toChars());\n+            return scanPastSemicolon();\n+        }\n+\n         bool first = true;\n         while (1)\n         {\n@@ -1880,10 +1903,7 @@ final class CParser(AST) : Parser!AST\n                 default:\n                     error(\"`=`, `;` or `,` expected to end declaration instead of `%s`\", token.toChars());\n                 Lend:\n-                    while (token.value != TOK.semicolon && token.value != TOK.endOfFile)\n-                        nextToken();\n-                    nextToken();\n-                    return;\n+                    return scanPastSemicolon();\n             }\n         }\n     }\n@@ -2528,7 +2548,14 @@ final class CParser(AST) : Parser!AST\n                 default:\n                     if (declarator == DTR.xdirect)\n                     {\n-                        error(\"identifier or `(` expected\"); // )\n+                        if (!t || t.isTypeIdentifier())\n+                        {\n+                            // const arr[1];\n+                            error(\"no type-specifier for declarator\");\n+                            t = AST.Type.tint32;\n+                        }\n+                        else\n+                            error(\"identifier or `(` expected\"); // )\n                         panic();\n                     }\n                     ts = t;\n@@ -2744,6 +2771,11 @@ final class CParser(AST) : Parser!AST\n         Specifier specifier;\n         specifier.packalign.setDefault();\n         auto tspec = cparseSpecifierQualifierList(LVL.global, specifier);\n+        if (!tspec)\n+        {\n+            error(\"type-specifier is missing\");\n+            tspec = AST.Type.tint32;\n+        }\n         if (tspec && specifier.mod & MOD.xconst)\n         {\n             tspec = toConst(tspec);\n@@ -2829,8 +2861,18 @@ final class CParser(AST) : Parser!AST\n             Specifier specifier;\n             specifier.packalign.setDefault();\n             auto tspec = cparseDeclarationSpecifiers(LVL.prototype, specifier);\n-            if (tspec && specifier.mod & MOD.xconst)\n+            if (!tspec)\n             {\n+                error(\"no type-specifier for parameter\");\n+                tspec = AST.Type.tint32;\n+            }\n+\n+            if (specifier.mod & MOD.xconst)\n+            {\n+                if ((token.value == TOK.rightParenthesis || token.value == TOK.comma) &&\n+                    tspec.isTypeIdentifier())\n+                    error(\"type-specifier omitted for parameter `%s`\", tspec.isTypeIdentifier().ident.toChars());\n+\n                 tspec = toConst(tspec);\n                 specifier.mod = MOD.xnone;      // 'used' it\n             }\n@@ -3400,7 +3442,12 @@ final class CParser(AST) : Parser!AST\n         Specifier specifier;\n         specifier.packalign = this.packalign;\n         auto tspec = cparseSpecifierQualifierList(LVL.member, specifier);\n-        if (tspec && specifier.mod & MOD.xconst)\n+        if (!tspec)\n+        {\n+            error(\"no type-specifier for struct member\");\n+            tspec = AST.Type.tint32;\n+        }\n+        if (specifier.mod & MOD.xconst)\n         {\n             tspec = toConst(tspec);\n             specifier.mod = MOD.xnone;          // 'used' it\n@@ -3413,7 +3460,13 @@ final class CParser(AST) : Parser!AST\n             nextToken();\n             auto tt = tspec.isTypeTag();\n             if (!tt)\n+            {\n+                if (auto ti = tspec.isTypeIdentifier())\n+                {\n+                    error(\"type-specifier omitted before declaration of `%s`\", ti.ident.toChars());\n+                }\n                 return; // legal but meaningless empty declaration\n+            }\n \n             /* If anonymous struct declaration\n              *   struct { ... members ... };\n@@ -3453,6 +3506,12 @@ final class CParser(AST) : Parser!AST\n             AST.Type dt;\n             if (token.value == TOK.colon)\n             {\n+                if (auto ti = tspec.isTypeIdentifier())\n+                {\n+                    error(\"type-specifier omitted before bit field declaration of `%s`\", ti.ident.toChars());\n+                    tspec = AST.Type.tint32;\n+                }\n+\n                 // C11 6.7.2.1-12 unnamed bit-field\n                 id = Identifier.generateAnonymousId(\"BitField\");\n                 dt = tspec;"}, {"sha": "6339a9e36baf218d70bb5ca8bf0626d5f95c68c7", "filename": "gcc/d/dmd/dscope.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fdscope.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fdscope.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.d?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -457,6 +457,8 @@ struct Scope\n \n                 if (sc.scopesym.isModule())\n                     flags |= SearchUnqualifiedModule;        // tell Module.search() that SearchLocalsOnly is to be obeyed\n+                else if (sc.flags & SCOPE.Cfile && sc.scopesym.isStructDeclaration())\n+                    continue;                                // C doesn't have struct scope\n \n                 if (Dsymbol s = sc.scopesym.search(loc, ident, flags))\n                 {"}, {"sha": "330dcdb77ec1076d1cf8c6dc50be48e80a1519d0", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -373,11 +373,11 @@ class StringExp : public Expression\n     OwnedBy ownedByCtfe;\n \n     static StringExp *create(const Loc &loc, const char *s);\n-    static StringExp *create(const Loc &loc, const void *s, size_t len);\n+    static StringExp *create(const Loc &loc, const void *s, d_size_t len);\n     static void emplace(UnionExp *pue, const Loc &loc, const char *s);\n     bool equals(const RootObject *o) const;\n-    char32_t getCodeUnit(size_t i) const;\n-    void setCodeUnit(size_t i, char32_t c);\n+    char32_t getCodeUnit(d_size_t i) const;\n+    void setCodeUnit(d_size_t i, char32_t c);\n     StringExp *toStringExp();\n     StringExp *toUTF8(Scope *sc);\n     Optional<bool> toBool();"}, {"sha": "d4e96bb0f090e5a0e56d75b73ddd5e8a8b6c27e2", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -5216,13 +5216,30 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         if (s.ident)\n         {\n             VarDeclaration v = s.isVarDeclaration();\n-            if (v && !(sc.flags & SCOPE.Cfile))\n+            if (v)\n             {\n-                /* Do semantic() on initializer first so this will be illegal:\n-                 *      int a = a;\n-                 */\n-                e.declaration.dsymbolSemantic(sc);\n-                s.parent = sc.parent;\n+                if (sc.flags & SCOPE.Cfile)\n+                {\n+                    /* Do semantic() on the type before inserting v into the symbol table\n+                     */\n+                    if (!v.originalType)\n+                        v.originalType = v.type.syntaxCopy();\n+                    Scope* sc2 = sc.push();\n+                    sc2.stc |= v.storage_class & STC.FUNCATTR;\n+                    sc2.linkage = LINK.c;       // account for the extern(C) in front of the declaration\n+                    v.inuse++;\n+                    v.type = v.type.typeSemantic(v.loc, sc2);\n+                    v.inuse--;\n+                    sc2.pop();\n+                }\n+                else\n+                {\n+                    /* Do semantic() on initializer first so this will be illegal:\n+                     *      int a = a;\n+                     */\n+                    e.declaration.dsymbolSemantic(sc);\n+                    s.parent = sc.parent;\n+                }\n             }\n \n             if (!sc.insert(s))"}, {"sha": "66a67605b5c71b246309bbdfe9f4b59a87f9abe8", "filename": "gcc/d/dmd/root/port.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fport.h?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -13,12 +13,13 @@\n // The idea is to minimize #ifdef's in the app code.\n \n #include \"dsystem.h\"\n+#include \"dcompat.h\"\n \n typedef unsigned char utf8_t;\n \n struct Port\n {\n-    static int memicmp(const char *s1, const char *s2, size_t n);\n+    static int memicmp(const char *s1, const char *s2, d_size_t n);\n     static char *strupr(char *s);\n \n     static bool isFloat32LiteralOutOfRange(const char *s);\n@@ -30,5 +31,5 @@ struct Port\n     static unsigned readlongBE(const void *buffer);\n     static unsigned readwordLE(const void *buffer);\n     static unsigned readwordBE(const void *buffer);\n-    static void valcpy(void *dst, uint64_t val, size_t size);\n+    static void valcpy(void *dst, uint64_t val, d_size_t size);\n };"}, {"sha": "ad6a6d8aade8547544420860b080d836399d48a0", "filename": "gcc/testsuite/gdc.test/compilable/revert_dip1000.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Frevert_dip1000.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Frevert_dip1000.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Frevert_dip1000.d?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -0,0 +1,7 @@\n+/*\n+REQUIRED_ARGS: -revert=dip1000\n+TEST_OUTPUT:\n+---\n+---\n+*/\n+int* oops(scope int* p) @safe { return p; }"}, {"sha": "c94634f47708591ebacdd3755315b1bea4709007", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91cb2059fb8b5a50a2aced199e987ab2cf3b629/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=d91cb2059fb8b5a50a2aced199e987ab2cf3b629", "patch": "@@ -1,4 +1,4 @@\n-27834edb5e1613e3abd43e09880c36d9fc961938\n+e361d200b287a68344095f306cf5ea3a63c080e1\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}]}