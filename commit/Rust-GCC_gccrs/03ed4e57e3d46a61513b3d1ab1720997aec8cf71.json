{"sha": "03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "node_id": "C_kwDOANBUbNoAKDAzZWQ0ZTU3ZTNkNDZhNjE1MTNiM2QxYWIxNzIwOTk3YWVjOGNmNzE", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-11-01T16:49:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-11-07T19:18:21Z"}, "message": "Extend optimization for integer bit test on __atomic_fetch_[or|and]_*\n\nExtend optimization for\n\n_1 = __atomic_fetch_or_4 (ptr_6, 0x80000000, _3);\n_5 = (signed int) _1;\n_4 = _5 >= 0;\n\nto\n\n_1 = __atomic_fetch_or_4 (ptr_6, 0x80000000, _3);\n_5 = (signed int) _1;\nif (_5 >= 0)\n\ngcc/\n\n\tPR middle-end/102566\n\t* tree-ssa-ccp.cc (optimize_atomic_bit_test_and): Also handle\n\tif (_5 < 0) and if (_5 >= 0).\n\ngcc/testsuite/\n\n\tPR middle-end/102566\n\t* g++.target/i386/pr102566-7.C", "tree": {"sha": "5c077907598402c6266c63575d64378b10f8ac2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c077907598402c6266c63575d64378b10f8ac2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ed4e57e3d46a61513b3d1ab1720997aec8cf71/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee0165f72be96083deaa8fd315bcfed011acd52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0165f72be96083deaa8fd315bcfed011acd52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee0165f72be96083deaa8fd315bcfed011acd52"}], "stats": {"total": 106, "additions": 91, "deletions": 15}, "files": [{"sha": "ce90214f33d08ce1a388e8083ebcb13ee94ba140", "filename": "gcc/testsuite/g++.target/i386/pr102566-7.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ed4e57e3d46a61513b3d1ab1720997aec8cf71/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102566-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ed4e57e3d46a61513b3d1ab1720997aec8cf71/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102566-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr102566-7.C?ref=03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <atomic>\n+\n+template<uint32_t b>\n+void lock_bts(std::atomic<uint32_t> &a) { while (!(a.fetch_or(b) & b)); }\n+template<uint32_t b>\n+void lock_btr(std::atomic<uint32_t> &a) { while (a.fetch_and(~b) & b); }\n+template<uint32_t b>\n+void lock_btc(std::atomic<uint32_t> &a) { while (a.fetch_xor(b) & b); }\n+template void lock_bts<1U<<30>(std::atomic<uint32_t> &a);\n+template void lock_btr<1U<<30>(std::atomic<uint32_t> &a);\n+template void lock_btc<1U<<30>(std::atomic<uint32_t> &a);\n+template void lock_bts<1U<<31>(std::atomic<uint32_t> &a);\n+template void lock_btr<1U<<31>(std::atomic<uint32_t> &a);\n+template void lock_btc<1U<<31>(std::atomic<uint32_t> &a);\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btsl\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btrl\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*btcl\" 2 } } */\n+/* { dg-final { scan-assembler-not \"cmpxchg\" } } */"}, {"sha": "3a4b6bc111877c4717c9732f26654655ebcccb89", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ed4e57e3d46a61513b3d1ab1720997aec8cf71/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ed4e57e3d46a61513b3d1ab1720997aec8cf71/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=03ed4e57e3d46a61513b3d1ab1720997aec8cf71", "patch": "@@ -3471,17 +3471,35 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t{\n \t  gimple *use_nop_stmt;\n \t  if (!single_imm_use (use_lhs, &use_p, &use_nop_stmt)\n-\t      || !is_gimple_assign (use_nop_stmt))\n+\t      || (!is_gimple_assign (use_nop_stmt)\n+\t\t  && gimple_code (use_nop_stmt) != GIMPLE_COND))\n \t    return false;\n-\t  tree use_nop_lhs = gimple_assign_lhs (use_nop_stmt);\n-\t  rhs_code = gimple_assign_rhs_code (use_nop_stmt);\n-\t  if (rhs_code != BIT_AND_EXPR)\n+\t  /* Handle both\n+\t     _4 = _5 < 0;\n+\t     and\n+\t     if (_5 < 0)\n+\t   */\n+\t  tree use_nop_lhs = nullptr;\n+\t  rhs_code = ERROR_MARK;\n+\t  if (is_gimple_assign (use_nop_stmt))\n \t    {\n-\t      if (TREE_CODE (use_nop_lhs) == SSA_NAME\n+\t      use_nop_lhs = gimple_assign_lhs (use_nop_stmt);\n+\t      rhs_code = gimple_assign_rhs_code (use_nop_stmt);\n+\t    }\n+\t  if (!use_nop_lhs || rhs_code != BIT_AND_EXPR)\n+\t    {\n+\t      /* Also handle\n+\t\t if (_5 < 0)\n+\t       */\n+\t      if (use_nop_lhs\n+\t\t  && TREE_CODE (use_nop_lhs) == SSA_NAME\n \t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (use_nop_lhs))\n \t\treturn false;\n-\t      if (rhs_code == BIT_NOT_EXPR)\n+\t      if (use_nop_lhs && rhs_code == BIT_NOT_EXPR)\n \t\t{\n+\t\t  /* Handle\n+\t\t     _7 = ~_2;\n+\t\t   */\n \t\t  g = convert_atomic_bit_not (fn, use_nop_stmt, lhs,\n \t\t\t\t\t      mask);\n \t\t  if (!g)\n@@ -3512,14 +3530,31 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (TREE_CODE (TREE_TYPE (use_nop_lhs)) != BOOLEAN_TYPE)\n-\t\t    return false;\n+\t\t  tree cmp_rhs1, cmp_rhs2;\n+\t\t  if (use_nop_lhs)\n+\t\t    {\n+\t\t      /* Handle\n+\t\t\t _4 = _5 < 0;\n+\t\t       */\n+\t\t      if (TREE_CODE (TREE_TYPE (use_nop_lhs))\n+\t\t\t  != BOOLEAN_TYPE)\n+\t\t\treturn false;\n+\t\t      cmp_rhs1 = gimple_assign_rhs1 (use_nop_stmt);\n+\t\t      cmp_rhs2 = gimple_assign_rhs2 (use_nop_stmt);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* Handle\n+\t\t\t if (_5 < 0)\n+\t\t       */\n+\t\t      rhs_code = gimple_cond_code (use_nop_stmt);\n+\t\t      cmp_rhs1 = gimple_cond_lhs (use_nop_stmt);\n+\t\t      cmp_rhs2 = gimple_cond_rhs (use_nop_stmt);\n+\t\t    }\n \t\t  if (rhs_code != GE_EXPR && rhs_code != LT_EXPR)\n \t\t    return false;\n-\t\t  tree cmp_rhs1 = gimple_assign_rhs1 (use_nop_stmt);\n \t\t  if (use_lhs != cmp_rhs1)\n \t\t    return false;\n-\t\t  tree cmp_rhs2 = gimple_assign_rhs2 (use_nop_stmt);\n \t\t  if (!integer_zerop (cmp_rhs2))\n \t\t    return false;\n \n@@ -3547,6 +3582,14 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t\t _1 = __atomic_fetch_and_4 (ptr_6, 0x7fffffff, _3);\n \t\t\t _6 = _1 & 0x80000000;\n \t\t\t _4 = _6 != 0 or _6 == 0;\n+\t\t\t and convert\n+\t\t\t _1 = __atomic_fetch_and_4 (ptr_6, 0x7fffffff, _3);\n+\t\t\t _5 = (signed int) _1;\n+\t\t\t if (_5 < 0 or _5 >= 0)\n+\t\t\t to\n+\t\t\t _1 = __atomic_fetch_and_4 (ptr_6, 0x7fffffff, _3);\n+\t\t\t _6 = _1 & 0x80000000;\n+\t\t\t if (_6 != 0 or _6 == 0)\n \t\t       */\n \t\t      and_mask = build_int_cst (TREE_TYPE (use_rhs),\n \t\t\t\t\t\thighest);\n@@ -3567,6 +3610,14 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t\t _1 = __atomic_fetch_or_4 (ptr_6, 0x80000000, _3);\n \t\t\t _6 = _1 & 0x80000000;\n \t\t\t _4 = _6 != 0 or _6 == 0;\n+\t\t\t and convert\n+\t\t\t _1 = __atomic_fetch_or_4 (ptr_6, 0x80000000, _3);\n+\t\t\t _5 = (signed int) _1;\n+\t\t\t if (_5 < 0 or _5 >= 0)\n+\t\t\t to\n+\t\t\t _1 = __atomic_fetch_or_4 (ptr_6, 0x80000000, _3);\n+\t\t\t _6 = _1 & 0x80000000;\n+\t\t\t if (_6 != 0 or _6 == 0)\n \t\t       */\n \t\t    }\n \t\t  var = make_ssa_name (TREE_TYPE (use_rhs));\n@@ -3577,11 +3628,14 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t  gsi = gsi_for_stmt (use_nop_stmt);\n \t\t  gsi_insert_before (&gsi, g, GSI_NEW_STMT);\n \t\t  use_stmt = g;\n-\t\t  g = gimple_build_assign (use_nop_lhs,\n-\t\t\t\t\t   (rhs_code == GE_EXPR\n-\t\t\t\t\t    ? EQ_EXPR : NE_EXPR),\n-\t\t\t\t\t   var,\n-\t\t\t\t\t   build_zero_cst (TREE_TYPE (use_rhs)));\n+\t\t  rhs_code = rhs_code == GE_EXPR ? EQ_EXPR : NE_EXPR;\n+\t\t  tree const_zero = build_zero_cst (TREE_TYPE (use_rhs));\n+\t\t  if (use_nop_lhs)\n+\t\t    g = gimple_build_assign (use_nop_lhs, rhs_code,\n+\t\t\t\t\t     var, const_zero);\n+\t\t  else\n+\t\t    g = gimple_build_cond (rhs_code, var, const_zero,\n+\t\t\t\t\t   nullptr, nullptr);\n \t\t  gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n \t\t  gsi = gsi_for_stmt (use_nop_stmt);\n \t\t  gsi_remove (&gsi, true);"}]}