{"sha": "c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjNjM3ZTM2ZTM1ZDA2YWZhZjI2ZDFkZWJjYjBiZjA2OTJlNzNjMg==", "commit": {"author": {"name": "Graham Stott", "email": "graham.stott@btinternet.com", "date": "2002-09-12T16:33:37Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-09-12T16:33:37Z"}, "message": "i386.c (any_fp_register_operand, [...]): New predicate functions.\n\n2002-09-12  Graham Stott  <graham.stott@btinternet.com>\n            Roger Sayle  <roger@eyesopen.com>\n\n\t* i386.c (any_fp_register_operand, fp_register_operand,\n\tregister_and_not_any_fp_reg_operand, register_and_not_fp_reg_operand):\n\tNew predicate functions.\n\t* i386-protos.h:  Add their prototypes.\n\t* i386.h: Add them to PREDICATE_CODES.\n\t* i386.md (\"*pushsf_rex64\"+2, \"*pushsf_rex64\"+3, \"*pushdf_integer\"+1,\n\t\"*pushdf_integer\"+2, \"*pushtf_integer\"+1, \"*pushtf_integer\"+2,\n\t\"*pushtf_integer\"+3, \"*pushtf_integer\"+4, \"*dummy_extendsfdf2\"+1,\n\t\"*dummy_extendsfdf2\"+2, \"*dummy_extendsfxf2\"+1,\n\t\"*dummy_extendsftf2\"+1, \"*dummy_extendsftf2\"+2,\n\t\"*dummy_extenddfxf2\"+1, \"*dummy_extenddftf2\"+1,\n\t\"*dummy_extenddftf2\"+2, \"*negsf2_if\"+1, \"*negsf2_if\"+2,\n\t\"*negdf2_if_rex64\"+1, \"*negdf2_if_rex64\"+2, \"*negxf2_if\"+1,\n\t\"*negxf2_if\"+2, \"*negtf2_if\"+1, \"*negtf2_if\"+2, \"*abssf2_if\"+1,\n\t\"*abssf2_if\"+2, \"*absdf2_if_rex64\"+1, \"*absdf2_if_rex64\"+2,\n\t\"*absxf2_if\"+1, \"*absxf2_if\"+2, \"*abstf2_if\"+1, \"*abstf2_if\"+2):\n\tUse these new predicates to simplify and correct the use of\n\tFP_REG_P, ANY_FP_REG_P, FP_REGNO_P and any ANY_FP_REGNO_P.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r57068", "tree": {"sha": "1174fb30aa4886c42715383663e26958e4459fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1174fb30aa4886c42715383663e26958e4459fe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/comments", "author": {"login": "Graham-stott", "id": 17800827, "node_id": "MDQ6VXNlcjE3ODAwODI3", "avatar_url": "https://avatars.githubusercontent.com/u/17800827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Graham-stott", "html_url": "https://github.com/Graham-stott", "followers_url": "https://api.github.com/users/Graham-stott/followers", "following_url": "https://api.github.com/users/Graham-stott/following{/other_user}", "gists_url": "https://api.github.com/users/Graham-stott/gists{/gist_id}", "starred_url": "https://api.github.com/users/Graham-stott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Graham-stott/subscriptions", "organizations_url": "https://api.github.com/users/Graham-stott/orgs", "repos_url": "https://api.github.com/users/Graham-stott/repos", "events_url": "https://api.github.com/users/Graham-stott/events{/privacy}", "received_events_url": "https://api.github.com/users/Graham-stott/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "236a2ac8cc1eab20a63faccee479169d6b0c6b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236a2ac8cc1eab20a63faccee479169d6b0c6b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236a2ac8cc1eab20a63faccee479169d6b0c6b6b"}], "stats": {"total": 229, "additions": 147, "deletions": 82}, "files": [{"sha": "20b5cee976316dd76496bcfc1125010c7d586100", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "patch": "@@ -1,3 +1,25 @@\n+2002-09-12  Graham Stott  <graham.stott@btinternet.com>\n+            Roger Sayle  <roger@eyesopen.com>\n+\n+\t* i386.c (any_fp_register_operand, fp_register_operand,\n+\tregister_and_not_any_fp_reg_operand, register_and_not_fp_reg_operand):\n+\tNew predicate functions.\n+\t* i386-protos.h:  Add their prototypes.\n+\t* i386.h: Add them to PREDICATE_CODES.\n+\t* i386.md (\"*pushsf_rex64\"+2, \"*pushsf_rex64\"+3, \"*pushdf_integer\"+1,\n+\t\"*pushdf_integer\"+2, \"*pushtf_integer\"+1, \"*pushtf_integer\"+2,\n+\t\"*pushtf_integer\"+3, \"*pushtf_integer\"+4, \"*dummy_extendsfdf2\"+1,\n+\t\"*dummy_extendsfdf2\"+2, \"*dummy_extendsfxf2\"+1,\n+\t\"*dummy_extendsftf2\"+1, \"*dummy_extendsftf2\"+2,\n+\t\"*dummy_extenddfxf2\"+1, \"*dummy_extenddftf2\"+1,\n+\t\"*dummy_extenddftf2\"+2, \"*negsf2_if\"+1, \"*negsf2_if\"+2,\n+\t\"*negdf2_if_rex64\"+1, \"*negdf2_if_rex64\"+2, \"*negxf2_if\"+1,\n+\t\"*negxf2_if\"+2, \"*negtf2_if\"+1, \"*negtf2_if\"+2, \"*abssf2_if\"+1,\n+\t\"*abssf2_if\"+2, \"*absdf2_if_rex64\"+1, \"*absdf2_if_rex64\"+2,\n+\t\"*absxf2_if\"+1, \"*absxf2_if\"+2, \"*abstf2_if\"+1, \"*abstf2_if\"+2):\n+\tUse these new predicates to simplify and correct the use of\n+\tFP_REG_P, ANY_FP_REG_P, FP_REGNO_P and any ANY_FP_REGNO_P.\n+\n 2002-09-12  Jason Merrill  <jason@redhat.com>\n \n \t* diagnostic.c (output_add_identifier): New fn."}, {"sha": "1431c7396b1e1964a1dc597a7c380cee9823975d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "patch": "@@ -42,6 +42,12 @@ extern int standard_80387_constant_p PARAMS ((rtx));\n extern int standard_sse_constant_p PARAMS ((rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n \n+extern int any_fp_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int register_and_not_any_fp_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n+extern int fp_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int register_and_not_fp_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n extern int x86_64_general_operand PARAMS ((rtx, enum machine_mode));\n extern int x86_64_szext_general_operand PARAMS ((rtx, enum machine_mode));\n extern int x86_64_nonmemory_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "4f62e4c393806b2a3b2154ddbe0a4e8cae94f870", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "patch": "@@ -2754,6 +2754,43 @@ ix86_va_arg (valist, type)\n   return addr_rtx;\n }\n \f\n+/* Return nonzero if OP is either a i387 or SSE fp register.  */\n+int\n+any_fp_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return ANY_FP_REG_P (op);\n+}\n+\n+/* Return nonzero if OP is an i387 fp register.  */\n+int\n+fp_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return FP_REG_P (op);\n+}\n+\n+/* Return nonzero if OP is a non-fp register_operand.  */\n+int\n+register_and_not_any_fp_reg_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) && !ANY_FP_REG_P (op);\n+}\n+\n+/* Return nonzero of OP is a register operand other than an\n+   i387 fp register.  */\n+int\n+register_and_not_fp_reg_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) && !FP_REG_P (op);\n+}\n+\n /* Return nonzero if OP is general operand representable on x86_64.  */\n \n int"}, {"sha": "fa55084b46df3704dad3b0186406f2d1739ad454", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "patch": "@@ -3203,7 +3203,11 @@ do {\t\t\t\t\t\t\\\n   {\"global_dynamic_symbolic_operand\", {SYMBOL_REF}},\t\t\t\\\n   {\"local_dynamic_symbolic_operand\", {SYMBOL_REF}},\t\t\t\\\n   {\"initial_exec_symbolic_operand\", {SYMBOL_REF}},\t\t\t\\\n-  {\"local_exec_symbolic_operand\", {SYMBOL_REF}},\n+  {\"local_exec_symbolic_operand\", {SYMBOL_REF}},\t\t\t\\\n+  {\"any_fp_register_operand\", {REG}},\t\t\t\t\t\\\n+  {\"register_and_not_any_fp_reg_operand\", {REG}},\t\t\t\\\n+  {\"fp_register_operand\", {REG}},\t\t\t\t\t\\\n+  {\"register_and_not_fp_reg_operand\", {REG}},\t\t\t\t\\\n \n /* A list of predicates that do special things with modes, and so\n    should not elicit warnings for VOIDmode match_operand.  */"}, {"sha": "c1d581d84b80ead9221435dabfbdd11dccdf9c5f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 77, "deletions": 81, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c637e36e35d06afaf26d1debcb0bf0692e73c2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c3c637e36e35d06afaf26d1debcb0bf0692e73c2", "patch": "@@ -2077,15 +2077,15 @@\n ;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:SF 0 \"push_operand\" \"\")\n-\t(match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"!TARGET_64BIT && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:SF 1 \"any_fp_register_operand\" \"\"))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -4)))\n    (set (mem:SF (reg:SI 7)) (match_dup 1))])\n \n (define_split\n   [(set (match_operand:SF 0 \"push_operand\" \"\")\n-\t(match_operand:SF 1 \"register_operand\" \"\"))]\n-  \"TARGET_64BIT && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:SF 1 \"any_fp_register_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n    (set (mem:SF (reg:DI 7)) (match_dup 1))])\n \n@@ -2249,16 +2249,16 @@\n ;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"!TARGET_64BIT && reload_completed && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:DF 1 \"any_fp_register_operand\" \"\"))]\n+  \"!TARGET_64BIT && reload_completed\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n    (set (mem:DF (reg:SI 7)) (match_dup 1))]\n   \"\")\n \n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"TARGET_64BIT && reload_completed && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:DF 1 \"any_fp_register_operand\" \"\"))]\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n    (set (mem:DF (reg:DI 7)) (match_dup 1))]\n   \"\")\n@@ -2568,28 +2568,28 @@\n    && (GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == DFmode)\n-   && (!REG_P (operands[1]) || !ANY_FP_REGNO_P (REGNO (operands[1])))\"\n+   && !ANY_FP_REG_P (operands[1])\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(match_operand:XF 1 \"register_operand\" \"\"))]\n-  \"!TARGET_64BIT && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (match_dup 1))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"register_operand\" \"\"))]\n-  \"!TARGET_64BIT && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (match_dup 1))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"register_operand\" \"\"))]\n-  \"TARGET_64BIT && ANY_FP_REGNO_P (REGNO (operands[1]))\"\n+\t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n    (set (mem:TF (reg:DI 7)) (match_dup 1))])\n \n@@ -3341,15 +3341,15 @@\n \n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:DF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n    (set (mem:DF (reg:SI 7)) (float_extend:DF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:DF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n    (set (mem:DF (reg:DI 7)) (float_extend:DF (match_dup 1)))])\n \n@@ -3361,8 +3361,8 @@\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3374,15 +3374,15 @@\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:TF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (float_extend:TF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:TF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n    (set (mem:DF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n \n@@ -3394,8 +3394,8 @@\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3407,15 +3407,15 @@\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:TF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n+  \"!TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n+\t(float_extend:TF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n    (set (mem:TF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n \n@@ -3788,10 +3788,9 @@\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"\")))\n+\t (match_operand:DF 1 \"fp_register_operand\" \"\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387 && reload_completed\n-   && FP_REG_P (operands[1])\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2) (float_truncate:SF (match_dup 1)))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -4670,10 +4669,9 @@\n \n ;; %%% Kill these when reload knows how to do it.\n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"fp_register_operand\" \"\")\n \t(float (match_operand 1 \"register_operand\" \"\")))]\n-  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\n-   && FP_REG_P (operands[0])\"\n+  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n   [(const_int 0)]\n {\n   operands[2] = ix86_force_to_memory (GET_MODE (operands[1]), operands[1]);\n@@ -9348,19 +9346,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"fp_register_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(neg:SF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = gen_int_mode (0x80000000, SImode);\n@@ -9523,20 +9521,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"fp_register_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(neg:DF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && TARGET_80387 && reload_completed\n-   && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 3) (xor:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[4] = gen_int_mode (0x80000000, SImode);\n@@ -9568,19 +9565,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+  [(set (match_operand:XF 0 \"fp_register_operand\" \"\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(neg:XF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+  [(set (match_operand:XF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = GEN_INT (0x8000);\n@@ -9598,19 +9595,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+  [(set (match_operand:TF 0 \"fp_register_operand\" \"\")\n \t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(neg:TF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+  [(set (match_operand:TF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = GEN_INT (0x8000);\n@@ -9798,19 +9795,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"fp_register_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387\"\n   [(set (match_dup 0)\n \t(abs:SF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = gen_int_mode (~0x80000000, SImode);\n@@ -9951,20 +9948,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"fp_register_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(abs:DF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT && TARGET_80387 && reload_completed &&\n-   !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 3) (and:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[4] = gen_int_mode (~0x80000000, SImode);\n@@ -9996,19 +9992,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+  [(set (match_operand:XF 0 \"fp_register_operand\" \"\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(abs:XF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+  [(set (match_operand:XF 0 \"register_and_not_fp_reg_operand\" \"\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = GEN_INT (~0x8000);\n@@ -10023,19 +10019,19 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+  [(set (match_operand:TF 0 \"fp_register_operand\" \"\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(abs:TF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+  [(set (match_operand:TF 0 \"register_and_not_any_fp_reg_operand\" \"\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  \"TARGET_80387 && reload_completed\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = GEN_INT (~0x8000);\n@@ -15983,12 +15979,12 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"register_and_not_any_fp_reg_operand\" \"\")\n \t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n \t\t\t\t[(match_operand 4 \"\" \"\") (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"\")))]\n-  \"!TARGET_64BIT && !ANY_FP_REG_P (operands[0]) && reload_completed\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(set (match_dup 2)\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n \t\t      (match_dup 5)\n@@ -16096,13 +16092,13 @@\n ;; We can't represent the LT test directly.  Do this by swapping the operands.\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"fp_register_operand\" \"\")\n \t(if_then_else:SF (lt (match_operand:SF 1 \"register_operand\" \"\")\n \t\t\t     (match_operand:SF 2 \"register_operand\" \"\"))\n \t\t\t (match_operand:SF 3 \"register_operand\" \"\")\n \t\t\t (match_operand:SF 4 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"FP_REG_P (operands[0]) && reload_completed\n+  \"reload_completed\n    && ((operands_match_p (operands[1], operands[3])\n \t&& operands_match_p (operands[2], operands[4]))\n        || (operands_match_p (operands[1], operands[4])\n@@ -16178,13 +16174,13 @@\n \n ;; We can't represent the LT test directly.  Do this by swapping the operands.\n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"fp_register_operand\" \"\")\n \t(if_then_else:DF (lt (match_operand:DF 1 \"register_operand\" \"\")\n \t\t\t     (match_operand:DF 2 \"register_operand\" \"\"))\n \t\t\t (match_operand:DF 3 \"register_operand\" \"\")\n \t\t\t (match_operand:DF 4 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"FP_REG_P (operands[0]) && reload_completed\n+  \"reload_completed\n    && ((operands_match_p (operands[1], operands[3])\n \t&& operands_match_p (operands[2], operands[4]))\n        || (operands_match_p (operands[1], operands[4])\n@@ -16259,13 +16255,13 @@\n \t\t\t (match_dup 2)))])\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"fp_register_operand\" \"\")\n \t(if_then_else:SF (gt (match_operand:SF 1 \"register_operand\" \"\")\n \t\t\t     (match_operand:SF 2 \"register_operand\" \"\"))\n \t\t\t (match_operand:SF 3 \"register_operand\" \"\")\n \t\t\t (match_operand:SF 4 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"FP_REG_P (operands[0]) && reload_completed\n+  \"reload_completed\n    && ((operands_match_p (operands[1], operands[3])\n \t&& operands_match_p (operands[2], operands[4]))\n        || (operands_match_p (operands[1], operands[4])\n@@ -16340,13 +16336,13 @@\n \t\t\t (match_dup 2)))])\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"fp_register_operand\" \"\")\n \t(if_then_else:DF (gt (match_operand:DF 1 \"register_operand\" \"\")\n \t\t\t     (match_operand:DF 2 \"register_operand\" \"\"))\n \t\t\t (match_operand:DF 3 \"register_operand\" \"\")\n \t\t\t (match_operand:DF 4 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"FP_REG_P (operands[0]) && reload_completed\n+  \"reload_completed\n    && ((operands_match_p (operands[1], operands[3])\n \t&& operands_match_p (operands[2], operands[4]))\n        || (operands_match_p (operands[1], operands[4])"}]}