{"sha": "31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlOWViYWY3ZmE5ZTgwODE3YmYxYTg3ZjY3MDExM2E0ZTAyMzA5Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-10-08T08:12:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-08T08:12:25Z"}, "message": "re PR target/36635 (cc1 segfault from svn 137122)\n\n\tPR target/36635\n\tPR target/37290\n\tPR rtl-optimization/37341\n\t* cse.c (cse_cc_succs): Add ORIG_BB argument, don't follow edges\n\tto ORIG_BB, pass through ORIG_BB recursively.\n\t(cse_condition_code_reg): Adjust caller.\n\n\t* gcc.c-torture/compile/pr37341.c: New test.\n\nFrom-SVN: r140966", "tree": {"sha": "c241c6387c5dd816585ab35e6ad1b285b82e88d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c241c6387c5dd816585ab35e6ad1b285b82e88d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4a4f7755b77fb859050d11f62645d3a80a56ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a4f7755b77fb859050d11f62645d3a80a56ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a4f7755b77fb859050d11f62645d3a80a56ac8"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "a4f09c8dd1934e44956b05bf725e03975d234054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "patch": "@@ -1,3 +1,12 @@\n+2008-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/36635\n+\tPR target/37290\n+\tPR rtl-optimization/37341\n+\t* cse.c (cse_cc_succs): Add ORIG_BB argument, don't follow edges\n+\tto ORIG_BB, pass through ORIG_BB recursively.\n+\t(cse_condition_code_reg): Adjust caller.\n+\n 2008-10-08  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* sdbout.c (sdbout_one_type): Treat the value type"}, {"sha": "f4bd77e47009f39bfca52f0fb6d16b44ae29e6a9", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "patch": "@@ -1,6 +1,6 @@\n /* Common subexpression elimination for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -603,7 +603,8 @@ static bool set_live_p (rtx, rtx, int *);\n static int cse_change_cc_mode (rtx *, void *);\n static void cse_change_cc_mode_insn (rtx, rtx);\n static void cse_change_cc_mode_insns (rtx, rtx, rtx);\n-static enum machine_mode cse_cc_succs (basic_block, rtx, rtx, bool);\n+static enum machine_mode cse_cc_succs (basic_block, basic_block, rtx, rtx,\n+\t\t\t\t       bool);\n \f\n \n #undef RTL_HOOKS_GEN_LOWPART\n@@ -6587,13 +6588,17 @@ cse_change_cc_mode_insns (rtx start, rtx end, rtx newreg)\n    permitted to change the mode of CC_SRC to a compatible mode.  This\n    returns VOIDmode if no equivalent assignments were found.\n    Otherwise it returns the mode which CC_SRC should wind up with.\n+   ORIG_BB should be the same as BB in the outermost cse_cc_succs call,\n+   but is passed unmodified down to recursive calls in order to prevent\n+   endless recursion.\n \n    The main complexity in this function is handling the mode issues.\n    We may have more than one duplicate which we can eliminate, and we\n    try to find a mode which will work for multiple duplicates.  */\n \n static enum machine_mode\n-cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n+cse_cc_succs (basic_block bb, basic_block orig_bb, rtx cc_reg, rtx cc_src,\n+\t      bool can_change_mode)\n {\n   bool found_equiv;\n   enum machine_mode mode;\n@@ -6624,7 +6629,9 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \tcontinue;\n \n       if (EDGE_COUNT (e->dest->preds) != 1\n-\t  || e->dest == EXIT_BLOCK_PTR)\n+\t  || e->dest == EXIT_BLOCK_PTR\n+\t  /* Avoid endless recursion on unreachable blocks.  */\n+\t  || e->dest == orig_bb)\n \tcontinue;\n \n       end = NEXT_INSN (BB_END (e->dest));\n@@ -6729,7 +6736,7 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \t{\n \t  enum machine_mode submode;\n \n-\t  submode = cse_cc_succs (e->dest, cc_reg, cc_src, false);\n+\t  submode = cse_cc_succs (e->dest, orig_bb, cc_reg, cc_src, false);\n \t  if (submode != VOIDmode)\n \t    {\n \t      gcc_assert (submode == mode);\n@@ -6857,7 +6864,7 @@ cse_condition_code_reg (void)\n \t the basic block.  */\n \n       orig_mode = GET_MODE (cc_src);\n-      mode = cse_cc_succs (bb, cc_reg, cc_src, true);\n+      mode = cse_cc_succs (bb, bb, cc_reg, cc_src, true);\n       if (mode != VOIDmode)\n \t{\n \t  gcc_assert (mode == GET_MODE (cc_src));"}, {"sha": "031441e40bc15258701325abdc5a11654993302f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "patch": "@@ -1,3 +1,10 @@\n+2008-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/36635\n+\tPR target/37290\n+\tPR rtl-optimization/37341\n+\t* gcc.c-torture/compile/pr37341.c: New test.\n+\n 2008-10-07  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c/35437"}, {"sha": "adbf0c7e4840615f969f5b2d948559d2a861f159", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37341.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37341.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e9ebaf7fa9e80817bf1a87f670113a4e02309c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37341.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37341.c?ref=31e9ebaf7fa9e80817bf1a87f670113a4e02309c", "patch": "@@ -0,0 +1,35 @@\n+/* PR rtl-optimization/37341 */\n+\n+short int a;\n+int b;\n+\n+static inline int\n+f1 (int x, int y)\n+{\n+  if (x < 0 || y < 0 || y >= sizeof (int) * 8 || x > (1 >> y))\n+    return x;\n+}\n+\n+static inline unsigned int\n+f2 (int x, int y)\n+{\n+  if (y <= 0 && x && y < __INT_MAX__ / x)\n+    return x;\n+  return x * y;\n+}\n+\n+int\n+f3 (void)\n+{\n+  return (signed char) 0xb6;\n+}\n+\n+unsigned int\n+f4 (unsigned int x)\n+{\n+  while (1)\n+    {\n+      if ((f2 (f3 (), (f1 (a, b)))) < x)\n+\treturn 1;\n+    }\n+}"}]}