{"sha": "d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkZmUwYjhjMjZmYmU2YTc2NzY1NzEzZGMzYzM3YWVhMDFkOWIyNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-29T18:25:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-29T18:25:12Z"}, "message": "target-supports.exp (check_effective_target_vect_no_int_max): Rename from check_effective_target_vect_no_max.\n\n        * lib/target-supports.exp (check_effective_target_vect_no_int_max):\n        Rename from check_effective_target_vect_no_max.\n        (check_effective_target_vect_no_int_add): New.\n        * gcc.dg/vect/vect-13.c: Use vect_no_int_max.\n        * gcc.dg/vect/vect-91.c: Use vect_no_int_add.\n        * gcc.dg/vect/vect-reduc-3.c: Likewise.\n        * gcc.dg/vect/vect-reduc-1.c: Use both.\n        * gcc.dg/vect/vect-reduc-2.c: Likewise.\n\nFrom-SVN: r101435", "tree": {"sha": "bb8549bd36bddace1fda27b68ef87c9f269521a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8549bd36bddace1fda27b68ef87c9f269521a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/comments", "author": null, "committer": null, "parents": [{"sha": "70707f6c75be10f35bc206e9d59fa88234d3b568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70707f6c75be10f35bc206e9d59fa88234d3b568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70707f6c75be10f35bc206e9d59fa88234d3b568"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "0c5663fdf6eb6ce0dca22e87cd3d7dc5bf7572fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -1,3 +1,14 @@\n+2005-05-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_no_int_max):\n+\tRename from check_effective_target_vect_no_max.\n+\t(check_effective_target_vect_no_int_add): New.\n+\t* gcc.dg/vect/vect-13.c: Use vect_no_int_max.\n+\t* gcc.dg/vect/vect-91.c: Use vect_no_int_add.\n+\t* gcc.dg/vect/vect-reduc-3.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-1.c: Use both.\n+\t* gcc.dg/vect/vect-reduc-2.c: Likewise.\n+\n 2005-05-29  Richard Henderson  <rth@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_no_max): "}, {"sha": "dcafcaf2da61e87cdf97a999041b4223e41f1a8c", "filename": "gcc/testsuite/gcc.dg/vect/vect-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -36,6 +36,6 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_max } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_int_max } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "96099f4fe0b0b3e77388d9fed1abac43d75d3144", "filename": "gcc/testsuite/gcc.dg/vect/vect-91.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-91.c?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -63,7 +63,7 @@ main3 ()\n /* Currently only the loops in main2 and main3 get vectorized. After the merge \n    of the datarefs-analysis cleanups from autovect-branch to mainline, the loop\n    in main1 will also be vectorized.  */ \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail vect_no_int_add } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"accesses have the same alignment.\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */"}, {"sha": "660c2df9529c524fe541cbd600689e71be046b24", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -50,5 +50,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail { vect_no_int_add || vect_no_int_max } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "37635eaf2d32e277f41444fba410c87d7a8ca9a2", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -47,5 +47,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail { vect_no_int_add || vect_no_int_max } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "486ac53d09de64774622ca2485edf3ca8faa34b5", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-3.c?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -36,5 +36,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_no_int_add } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7605114a722378c33c94a1c793645151842289e1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "patch": "@@ -962,24 +962,45 @@ proc check_effective_target_vect_double { } {\n }\n \n # Return 1 if the target plus current options does not support a vector\n-# max instruction, 0 otherwise.\n+# max instruction on \"int\", 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n-proc check_effective_target_vect_no_max { } {\n-    global et_vect_no_max_saved\n+proc check_effective_target_vect_no_int_max { } {\n+    global et_vect_no_int_max_saved\n \n-    if [info exists et_vect_no_max_saved] {\n-\tverbose \"check_effective_target_vect_no_max: using cached result\" 2\n+    if [info exists et_vect_no_int_max_saved] {\n+\tverbose \"check_effective_target_vect_no_int_max: using cached result\" 2\n     } else {\n-\tset et_vect_no_max_saved 0\n+\tset et_vect_no_int_max_saved 0\n \tif { [istarget sparc*-*-*]\n \t     || [istarget alpha*-*-*] } {\n-\t    set et_vect_no_max_saved 1\n+\t    set et_vect_no_int_max_saved 1\n \t}\n     }\n-    verbose \"check_effective_target_vect_no_max: returning $et_vect_no_max_saved\" 2\n-    return $et_vect_no_max_saved\n+    verbose \"check_effective_target_vect_no_int_max: returning $et_vect_no_int_max_saved\" 2\n+    return $et_vect_no_int_max_saved\n+}\n+\n+# Return 1 if the target plus current options does not support a vector\n+# add instruction on \"int\", 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_no_int_add { } {\n+    global et_vect_no_int_add_saved\n+\n+    if [info exists et_vect_no_int_add_saved] {\n+\tverbose \"check_effective_target_vect_no_int_add: using cached result\" 2\n+    } else {\n+\tset et_vect_no_int_add_saved 0\n+\t# Alpha only supports vector add on V8QI and V4HI.\n+\tif { [istarget alpha*-*-*] } {\n+\t    set et_vect_no_int_add_saved 1\n+\t}\n+    }\n+    verbose \"check_effective_target_vect_no_int_add: returning $et_vect_no_int_add_saved\" 2\n+    return $et_vect_no_int_add_saved\n }\n \n # Return 1 if the target plus current options does not support vector"}]}