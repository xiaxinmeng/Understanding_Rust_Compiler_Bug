{"sha": "093f02000f6f5367e1018e786929d86b2a3ea096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzZjAyMDAwZjZmNTM2N2UxMDE4ZTc4NjkyOWQ4NmIyYTNlYTA5Ng==", "commit": {"author": {"name": "Jesse Rosenstock", "email": "jmr@ugcs.caltech.edu", "date": "2002-08-14T19:53:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-08-14T19:53:54Z"}, "message": "natPosixProcess.cc (cleanup): Added `path' argument.\n\n2002-08-14  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n\n\t* java/lang/natPosixProcess.cc (cleanup): Added `path' argument.\n\t(startProcess): Allocate path for chdir in async-signal-safe way.\n\nFrom-SVN: r56330", "tree": {"sha": "919a86c6dc505c79c1bc4f535e2034b7aa80e77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/919a86c6dc505c79c1bc4f535e2034b7aa80e77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/093f02000f6f5367e1018e786929d86b2a3ea096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093f02000f6f5367e1018e786929d86b2a3ea096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093f02000f6f5367e1018e786929d86b2a3ea096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093f02000f6f5367e1018e786929d86b2a3ea096/comments", "author": null, "committer": null, "parents": [{"sha": "77893a23f990867ccef065bb78fdff52b1e906c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77893a23f990867ccef065bb78fdff52b1e906c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77893a23f990867ccef065bb78fdff52b1e906c3"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "24a78110cb48371e6d38786a80a9faff3078e522", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093f02000f6f5367e1018e786929d86b2a3ea096/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093f02000f6f5367e1018e786929d86b2a3ea096/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=093f02000f6f5367e1018e786929d86b2a3ea096", "patch": "@@ -1,3 +1,8 @@\n+2002-08-14  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n+\n+\t* java/lang/natPosixProcess.cc (cleanup): Added `path' argument.\n+\t(startProcess): Allocate path for chdir in async-signal-safe way.\n+\n 2002-08-13  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n \n \tFix for PR libgcj/7570 and PR libgcj/7578:"}, {"sha": "ec3eccb221e4d915f02c8a62ce04aa1fd9fa4492", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093f02000f6f5367e1018e786929d86b2a3ea096/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093f02000f6f5367e1018e786929d86b2a3ea096/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=093f02000f6f5367e1018e786929d86b2a3ea096", "patch": "@@ -88,7 +88,7 @@ new_string (jstring string)\n }\n \n static void\n-cleanup (char **args, char **env)\n+cleanup (char **args, char **env, char *path)\n {\n   if (args != NULL)\n     {\n@@ -102,6 +102,8 @@ cleanup (char **args, char **env)\n \t_Jv_Free (env[i]);\n       _Jv_Free (env);\n     }\n+  if (path != NULL)\n+    _Jv_Free (path);\n }\n \n // This makes our error handling a bit simpler and it lets us avoid\n@@ -127,6 +129,7 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n   // Initialize all locals here to make cleanup simpler.\n   char **args = NULL;\n   char **env = NULL;\n+  char *path = NULL;\n   int inp[2], outp[2], errp[2], msgp[2];\n   inp[0] = -1;\n   inp[1] = -1;\n@@ -170,6 +173,11 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n \t  env[envp->length] = NULL;\n \t}\n \n+      // We allocate this here because we can't call malloc() after\n+      // the fork.\n+      if (dir != NULL)\n+\tpath = new_string (dir->getPath ());\n+\n       // Create pipes for I/O.  MSGP is for communicating exec()\n       // status.\n       if (pipe (inp) || pipe (outp) || pipe (errp) || pipe (msgp)\n@@ -233,11 +241,9 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n \t  close (msgp[0]);\n           \n \t  // Change directory.\n-\t  if (dir != NULL)\n+\t  if (path != NULL)\n \t    {\n-\t      // We don't care about leaking memory here; this process\n-\t      // is about to terminate one way or another.\n-\t      if (chdir (new_string (dir->getPath ())) != 0)\n+\t      if (chdir (path) != 0)\n \t\t{\n \t\t  char c = errno;\n \t\t  write (msgp[1], &c, 1);\n@@ -319,7 +325,7 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n     }\n \n   myclose (msgp[0]);\n-  cleanup (args, env);\n+  cleanup (args, env, path);\n \n   if (exc != NULL)\n     throw exc;"}]}