{"sha": "bdd3e6abedb77356422ad57820d0c81ee117f800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkM2U2YWJlZGI3NzM1NjQyMmFkNTc4MjBkMGM4MWVlMTE3ZjgwMA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-03-09T12:03:21Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-03-09T12:03:21Z"}, "message": "Patch to fix mips64-elf varargs aliasing failures.\n\n\t* function.c (put_reg_into_stack): Copy MEM_IN_STRUCT_P from new.\n\t(assign_parms): Set aggregate if hide_last_arg and last_named.\n\nFrom-SVN: r18450", "tree": {"sha": "8a7b7471471c33305b3352c302c6f8a391133159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a7b7471471c33305b3352c302c6f8a391133159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdd3e6abedb77356422ad57820d0c81ee117f800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd3e6abedb77356422ad57820d0c81ee117f800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd3e6abedb77356422ad57820d0c81ee117f800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd3e6abedb77356422ad57820d0c81ee117f800/comments", "author": null, "committer": null, "parents": [{"sha": "25938114e3005a99cc21c9e3bf1c3ca4d1b6bb23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25938114e3005a99cc21c9e3bf1c3ca4d1b6bb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25938114e3005a99cc21c9e3bf1c3ca4d1b6bb23"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "53b06392562148f5e7284c3edebc4af9589eea37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd3e6abedb77356422ad57820d0c81ee117f800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd3e6abedb77356422ad57820d0c81ee117f800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdd3e6abedb77356422ad57820d0c81ee117f800", "patch": "@@ -1,3 +1,8 @@\n+Mon Mar  9 12:02:23 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* function.c (put_reg_into_stack): Copy MEM_IN_STRUCT_P from new.\n+\t(assign_parms): Set aggregate if hide_last_arg and last_named.\n+\n Mon Mar  9 19:57:56 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* final.c (shorten_branches): Initialize insn_addresses."}, {"sha": "192bc5361a616b3f1bd8c11512a74b5b941cdd95", "filename": "gcc/function.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdd3e6abedb77356422ad57820d0c81ee117f800/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdd3e6abedb77356422ad57820d0c81ee117f800/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bdd3e6abedb77356422ad57820d0c81ee117f800", "patch": "@@ -1441,8 +1441,11 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n   PUT_CODE (reg, MEM);\n \n   /* If this is a memory ref that contains aggregate components,\n-     mark it as such for cse and loop optimize.  */\n-  MEM_IN_STRUCT_P (reg) = AGGREGATE_TYPE_P (type);\n+     mark it as such for cse and loop optimize.  If we are reusing a\n+     previously generated stack slot, then we need to copy the bit in\n+     case it was set for other reasons.  For instance, it is set for\n+     __builtin_va_alist.  */\n+  MEM_IN_STRUCT_P (reg) = AGGREGATE_TYPE_P (type) | MEM_IN_STRUCT_P (new);\n \n   /* Now make sure that all refs to the variable, previously made\n      when it was a register, are fixed up to be valid again.  */\n@@ -3650,6 +3653,12 @@ assign_parms (fndecl, second_time)\n #else\n       int named_arg = ! last_named;\n #endif\n+      /* If this is a varargs function, then we want to treat the last named\n+\t argument as if it was an aggregate, because it might be accessed as\n+\t one by the va_arg macros.  This is necessary to make the aliasing\n+\t code handle this parm correctly.  */\n+      if (hide_last_arg && last_named)\n+\taggregate = 1;\n \n       if (TREE_TYPE (parm) == error_mark_node\n \t  /* This can happen after weird syntax errors"}]}