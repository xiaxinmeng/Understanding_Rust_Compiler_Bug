{"sha": "5c640e296a195f791a8ace575c967d7e6f1b69e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2NDBlMjk2YTE5NWY3OTFhOGFjZTU3NWM5NjdkN2U2ZjFiNjllOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-01-25T06:48:32Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-01-25T06:48:32Z"}, "message": "Pass to dr_analyze_indices the analysis loop for subscripts.\n\n2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Update\n\tcall to graphite_find_data_references_in_stmt.\n\t* graphite-sese-to-poly.c (outermost_loop_in_sese_1): New.\n\t(try_generate_gimple_bb): Call outermost_loop_in_sese_1.  Update\n\tcall to graphite_find_data_references_in_stmt.\n\t(analyze_drs_in_stmts): Same.\n\t* tree-data-ref.c (dr_analyze_indices): Pass in parameter the loop\n\tin which the scalar analysis of indices is performed.\n\t(create_data_ref): Same.  Update call to dr_analyze_indices.\n\t(find_data_references_in_stmt): Update call to create_data_ref.\n\t(graphite_find_data_references_in_stmt): Same.\n\t* tree-data-ref.h (graphite_find_data_references_in_stmt): Update\n\tdeclaration.\n\t(create_data_ref): Same.\n\t* tree-ssa-loop-prefetch.c (determine_loop_nest_reuse): Update\n\tcall to create_data_ref.\n\nFrom-SVN: r169218", "tree": {"sha": "161cf05bc35732e9546711884cdfa0e1b5cb902f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/161cf05bc35732e9546711884cdfa0e1b5cb902f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c640e296a195f791a8ace575c967d7e6f1b69e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c640e296a195f791a8ace575c967d7e6f1b69e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c640e296a195f791a8ace575c967d7e6f1b69e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c640e296a195f791a8ace575c967d7e6f1b69e8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac53c0698a1eea50ce05c00d9e7d088c7e43f916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac53c0698a1eea50ce05c00d9e7d088c7e43f916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac53c0698a1eea50ce05c00d9e7d088c7e43f916"}], "stats": {"total": 140, "additions": 115, "deletions": 25}, "files": [{"sha": "ef46f7343699a379362434629e42181c24016656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -1,3 +1,22 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Update\n+\tcall to graphite_find_data_references_in_stmt.\n+\t* graphite-sese-to-poly.c (outermost_loop_in_sese_1): New.\n+\t(try_generate_gimple_bb): Call outermost_loop_in_sese_1.  Update\n+\tcall to graphite_find_data_references_in_stmt.\n+\t(analyze_drs_in_stmts): Same.\n+\t* tree-data-ref.c (dr_analyze_indices): Pass in parameter the loop\n+\tin which the scalar analysis of indices is performed.\n+\t(create_data_ref): Same.  Update call to dr_analyze_indices.\n+\t(find_data_references_in_stmt): Update call to create_data_ref.\n+\t(graphite_find_data_references_in_stmt): Same.\n+\t* tree-data-ref.h (graphite_find_data_references_in_stmt): Update\n+\tdeclaration.\n+\t(create_data_ref): Same.\n+\t* tree-ssa-loop-prefetch.c (determine_loop_nest_reuse): Update\n+\tcall to create_data_ref.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (build_poly_scop): Move"}, {"sha": "12524d4b9c1e5da785e2f1d3706a7516a9509d19", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -1,3 +1,22 @@\n+2011-01-19  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Update\n+\tcall to graphite_find_data_references_in_stmt.\n+\t* graphite-sese-to-poly.c (outermost_loop_in_sese_1): New.\n+\t(try_generate_gimple_bb): Call outermost_loop_in_sese_1.  Update\n+\tcall to graphite_find_data_references_in_stmt.\n+\t(analyze_drs_in_stmts): Same.\n+\t* tree-data-ref.c (dr_analyze_indices): Pass in parameter the loop\n+\tin which the scalar analysis of indices is performed.\n+\t(create_data_ref): Same.  Update call to dr_analyze_indices.\n+\t(find_data_references_in_stmt): Update call to create_data_ref.\n+\t(graphite_find_data_references_in_stmt): Same.\n+\t* tree-data-ref.h (graphite_find_data_references_in_stmt): Update\n+\tdeclaration.\n+\t(create_data_ref): Same.\n+\t* tree-ssa-loop-prefetch.c (determine_loop_nest_reuse): Update\n+\tcall to create_data_ref.\n+\n 2011-01-19  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (build_poly_scop): Move"}, {"sha": "45c6c75ccea1fa02a8497574c2f15aad762b2096", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -263,7 +263,9 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop, gimple stmt)\n   bool res = true;\n   VEC (data_reference_p, heap) *drs = VEC_alloc (data_reference_p, heap, 5);\n \n-  graphite_find_data_references_in_stmt (outermost_loop, stmt, &drs);\n+  graphite_find_data_references_in_stmt (outermost_loop,\n+\t\t\t\t\t loop_containing_stmt (stmt),\n+\t\t\t\t\t stmt, &drs);\n \n   FOR_EACH_VEC_ELT (data_reference_p, drs, j, dr)\n     for (i = 0; i < DR_NUM_DIMENSIONS (dr); i++)"}, {"sha": "88536fe84af5d836465880224532f75d785ef9ad", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -241,21 +241,56 @@ free_scops (VEC (scop_p, heap) *scops)\n   VEC_free (scop_p, heap, scops);\n }\n \n+/* Same as outermost_loop_in_sese, returns the outermost loop\n+   containing BB in REGION, but makes sure that the returned loop\n+   belongs to the REGION, and so this returns the first loop in the\n+   REGION when the loop containing BB does not belong to REGION.  */\n+\n+static loop_p\n+outermost_loop_in_sese_1 (sese region, basic_block bb)\n+{\n+  loop_p nest = outermost_loop_in_sese (region, bb);\n+\n+  if (loop_in_sese_p (nest, region))\n+    return nest;\n+\n+  /* When the basic block BB does not belong to a loop in the region,\n+     return the first loop in the region.  */\n+  nest = nest->inner;\n+  while (nest)\n+    if (loop_in_sese_p (nest, region))\n+      break;\n+    else\n+      nest = nest->next;\n+\n+  gcc_assert (nest);\n+  return nest;\n+}\n+\n /* Generates a polyhedral black box only if the bb contains interesting\n    information.  */\n \n static gimple_bb_p\n try_generate_gimple_bb (scop_p scop, basic_block bb)\n {\n   VEC (data_reference_p, heap) *drs = VEC_alloc (data_reference_p, heap, 5);\n-  loop_p nest = outermost_loop_in_sese (SCOP_REGION (scop), bb);\n+  sese region = SCOP_REGION (scop);\n+  loop_p nest = outermost_loop_in_sese_1 (region, bb);\n   gimple_stmt_iterator gsi;\n \n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple stmt = gsi_stmt (gsi);\n-      if (!is_gimple_debug (stmt))\n-\tgraphite_find_data_references_in_stmt (nest, stmt, &drs);\n+      loop_p loop;\n+\n+      if (is_gimple_debug (stmt))\n+\tcontinue;\n+\n+      loop = loop_containing_stmt (stmt);\n+      if (!loop_in_sese_p (loop, region))\n+\tloop = nest;\n+\n+      graphite_find_data_references_in_stmt (nest, loop, stmt, &drs);\n     }\n \n   return new_gimple_bb (bb, drs);\n@@ -2019,17 +2054,28 @@ analyze_drs_in_stmts (scop_p scop, basic_block bb, VEC (gimple, heap) *stmts)\n   gimple_bb_p gbb;\n   gimple stmt;\n   int i;\n+  sese region = SCOP_REGION (scop);\n \n-  if (!bb_in_sese_p (bb, SCOP_REGION (scop)))\n+  if (!bb_in_sese_p (bb, region))\n     return;\n \n-  nest = outermost_loop_in_sese (SCOP_REGION (scop), bb);\n+  nest = outermost_loop_in_sese_1 (region, bb);\n   gbb = gbb_from_bb (bb);\n \n   FOR_EACH_VEC_ELT (gimple, stmts, i, stmt)\n-    if (!is_gimple_debug (stmt))\n-      graphite_find_data_references_in_stmt (nest, stmt,\n+    {\n+      loop_p loop;\n+\n+      if (is_gimple_debug (stmt))\n+\tcontinue;\n+\n+      loop = loop_containing_stmt (stmt);\n+      if (!loop_in_sese_p (loop, region))\n+\tloop = nest;\n+\n+      graphite_find_data_references_in_stmt (nest, loop, stmt,\n \t\t\t\t\t     &GBB_DATA_REFS (gbb));\n+    }\n }\n \n /* Insert STMT at the end of the STMTS sequence and then insert the"}, {"sha": "5aecbff7fcb8271651c4320792226a8e842920e2", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -820,13 +820,11 @@ dr_analyze_innermost (struct data_reference *dr)\n }\n \n /* Determines the base object and the list of indices of memory reference\n-   DR, analyzed in loop nest NEST.  */\n+   DR, analyzed in LOOP and instantiated in loop nest NEST.  */\n \n static void\n-dr_analyze_indices (struct data_reference *dr, struct loop *nest)\n+dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n {\n-  gimple stmt = DR_STMT (dr);\n-  struct loop *loop = loop_containing_stmt (stmt);\n   VEC (tree, heap) *access_fns = NULL;\n   tree ref = unshare_expr (DR_REF (dr)), aref = ref, op;\n   tree base, off, access_fn = NULL_TREE;\n@@ -935,11 +933,13 @@ free_data_ref (data_reference_p dr)\n \n /* Analyzes memory reference MEMREF accessed in STMT.  The reference\n    is read if IS_READ is true, write otherwise.  Returns the\n-   data_reference description of MEMREF.  NEST is the outermost loop of the\n-   loop nest in that the reference should be analyzed.  */\n+   data_reference description of MEMREF.  NEST is the outermost loop\n+   in which the reference should be instantiated, LOOP is the loop in\n+   which the data reference should be analyzed.  */\n \n struct data_reference *\n-create_data_ref (struct loop *nest, tree memref, gimple stmt, bool is_read)\n+create_data_ref (loop_p nest, loop_p loop, tree memref, gimple stmt,\n+\t\t bool is_read)\n {\n   struct data_reference *dr;\n \n@@ -956,7 +956,7 @@ create_data_ref (struct loop *nest, tree memref, gimple stmt, bool is_read)\n   DR_IS_READ (dr) = is_read;\n \n   dr_analyze_innermost (dr);\n-  dr_analyze_indices (dr, nest);\n+  dr_analyze_indices (dr, nest, loop);\n   dr_analyze_alias (dr);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -4079,7 +4079,8 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n \n   FOR_EACH_VEC_ELT (data_ref_loc, references, i, ref)\n     {\n-      dr = create_data_ref (nest, *ref->pos, stmt, ref->is_read);\n+      dr = create_data_ref (nest, loop_containing_stmt (stmt),\n+\t\t\t    *ref->pos, stmt, ref->is_read);\n       gcc_assert (dr != NULL);\n \n       /* FIXME -- data dependence analysis does not work correctly for objects\n@@ -4100,12 +4101,14 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n   return ret;\n }\n \n-/* Stores the data references in STMT to DATAREFS.  If there is an unanalyzable\n-   reference, returns false, otherwise returns true.  NEST is the outermost\n-   loop of the loop nest in which the references should be analyzed.  */\n+/* Stores the data references in STMT to DATAREFS.  If there is an\n+   unanalyzable reference, returns false, otherwise returns true.\n+   NEST is the outermost loop of the loop nest in which the references\n+   should be instantiated, LOOP is the loop in which the references\n+   should be analyzed.  */\n \n bool\n-graphite_find_data_references_in_stmt (struct loop *nest, gimple stmt,\n+graphite_find_data_references_in_stmt (loop_p nest, loop_p loop, gimple stmt,\n \t\t\t\t       VEC (data_reference_p, heap) **datarefs)\n {\n   unsigned i;\n@@ -4122,7 +4125,7 @@ graphite_find_data_references_in_stmt (struct loop *nest, gimple stmt,\n \n   FOR_EACH_VEC_ELT (data_ref_loc, references, i, ref)\n     {\n-      dr = create_data_ref (nest, *ref->pos, stmt, ref->is_read);\n+      dr = create_data_ref (nest, loop, *ref->pos, stmt, ref->is_read);\n       gcc_assert (dr != NULL);\n       VEC_safe_push (data_reference_p, heap, *datarefs, dr);\n     }"}, {"sha": "2e7e0e52814e8c2510512dd7d1a510ad343679ec", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -407,9 +407,9 @@ extern void free_data_ref (data_reference_p);\n extern void free_data_refs (VEC (data_reference_p, heap) *);\n extern bool find_data_references_in_stmt (struct loop *, gimple,\n \t\t\t\t\t  VEC (data_reference_p, heap) **);\n-extern bool graphite_find_data_references_in_stmt (struct loop *, gimple,\n+extern bool graphite_find_data_references_in_stmt (loop_p, loop_p, gimple,\n \t\t\t\t\t\t   VEC (data_reference_p, heap) **);\n-struct data_reference *create_data_ref (struct loop *, tree, gimple, bool);\n+struct data_reference *create_data_ref (loop_p, loop_p, tree, gimple, bool);\n extern bool find_loop_nest (struct loop *, VEC (loop_p, heap) **);\n extern void compute_all_dependences (VEC (data_reference_p, heap) *,\n \t\t\t\t     VEC (ddr_p, heap) **, VEC (loop_p, heap) *,"}, {"sha": "d920ec6eb073436b6a6a5f303d608e60b906be2c", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c640e296a195f791a8ace575c967d7e6f1b69e8/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=5c640e296a195f791a8ace575c967d7e6f1b69e8", "patch": "@@ -1562,7 +1562,8 @@ determine_loop_nest_reuse (struct loop *loop, struct mem_ref_group *refs,\n   for (gr = refs; gr; gr = gr->next)\n     for (ref = gr->refs; ref; ref = ref->next)\n       {\n-\tdr = create_data_ref (nest, ref->mem, ref->stmt, !ref->write_p);\n+\tdr = create_data_ref (nest, loop_containing_stmt (ref->stmt),\n+\t\t\t      ref->mem, ref->stmt, !ref->write_p);\n \n \tif (dr)\n \t  {"}]}