{"sha": "06441dd5e3630dbeae13028968d0b12926211009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0NDFkZDVlMzYzMGRiZWFlMTMwMjg5NjhkMGIxMjkyNjIxMTAwOQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2015-09-03T11:34:28Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2015-09-03T11:34:28Z"}, "message": "[gomp] Add thread attribute customization\n\nlibgomp/ChangeLog\n\n\t* config/posix/pool.h (gomp_adjust_thread_attr): New.\n\t* config/rtems/pool.h (gomp_adjust_thread_attr): Likewise.\n\t(gomp_thread_pool_reservoir): Add priority member.\n\t* confi/rtems/proc.c (allocate_thread_pool_reservoir): Add\n\tpriority.\n\t(parse_thread_pools): Likewise.\n\t* team.c (gomp_team_start): Call configuration provided\n\tgomp_adjust_thread_attr(). Destroy thread attributes if\n\tnecessary.\n\t* libgomp.texi: Document GOMP_RTEMS_THREAD_POOLS.\n\nFrom-SVN: r227442", "tree": {"sha": "052af5b0dae75a0d1bac729a2ab635e831bb7933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052af5b0dae75a0d1bac729a2ab635e831bb7933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06441dd5e3630dbeae13028968d0b12926211009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06441dd5e3630dbeae13028968d0b12926211009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06441dd5e3630dbeae13028968d0b12926211009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06441dd5e3630dbeae13028968d0b12926211009/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66c59f92387c99ea5724cba69843f7dfb7593740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c59f92387c99ea5724cba69843f7dfb7593740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c59f92387c99ea5724cba69843f7dfb7593740"}], "stats": {"total": 150, "additions": 128, "deletions": 22}, "files": [{"sha": "03ab332a875fb161e3c4dae8812660c9985caa51", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -1,3 +1,16 @@\n+2015-09-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/posix/pool.h (gomp_adjust_thread_attr): New.\n+\t* config/rtems/pool.h (gomp_adjust_thread_attr): Likewise.\n+\t(gomp_thread_pool_reservoir): Add priority member.\n+\t* confi/rtems/proc.c (allocate_thread_pool_reservoir): Add\n+\tpriority.\n+\t(parse_thread_pools): Likewise.\n+\t* team.c (gomp_team_start): Call configuration provided\n+\tgomp_adjust_thread_attr(). Destroy thread attributes if\n+\tnecessary.\n+\t* libgomp.texi: Document GOMP_RTEMS_THREAD_POOLS.\n+\n 2015-09-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/posix/pool.h: New."}, {"sha": "35ccc9240d8753f075e69f21cfa248f1a2779fb5", "filename": "libgomp/config/posix/pool.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Fposix%2Fpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Fposix%2Fpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fposix%2Fpool.h?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -57,4 +57,11 @@ gomp_release_thread_pool (struct gomp_thread_pool *pool)\n   /* Do nothing in the default implementation.  */\n }\n \n+static inline pthread_attr_t *\n+gomp_adjust_thread_attr (pthread_attr_t *attr, pthread_attr_t *mutable_attr)\n+{\n+  /* Do nothing in the default implementation.  */\n+  return attr;\n+}\n+\n #endif /* GOMP_POOL_H */"}, {"sha": "8028b27484a653a37e577433d00ce80832befc29", "filename": "libgomp/config/rtems/pool.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Frtems%2Fpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Frtems%2Fpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fpool.h?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -41,6 +41,7 @@ struct gomp_thread_pool_reservoir {\n   gomp_sem_t available;\n   gomp_mutex_t lock;\n   size_t index;\n+  int priority;\n   struct gomp_thread_pool *pools[];\n };\n \n@@ -125,4 +126,32 @@ gomp_release_thread_pool (struct gomp_thread_pool *pool)\n     }\n }\n \n+static inline pthread_attr_t *\n+gomp_adjust_thread_attr (pthread_attr_t *attr, pthread_attr_t *mutable_attr)\n+{\n+  struct gomp_thread_pool_reservoir *res = gomp_get_thread_pool_reservoir ();\n+  if (res != NULL && res->priority > 0)\n+    {\n+      struct sched_param param;\n+      int err;\n+      if (attr != mutable_attr)\n+\t{\n+\t  attr = mutable_attr;\n+\t  pthread_attr_init (attr);\n+\t}\n+      memset (&param, 0, sizeof (param));\n+      param.sched_priority = res->priority;\n+      err = pthread_attr_setschedparam (attr, &param);\n+      if (err != 0)\n+\tgomp_fatal (\"Thread attribute set scheduler parameters failed: %s\", strerror (err));\n+      err = pthread_attr_setschedpolicy (attr, SCHED_FIFO);\n+      if (err != 0)\n+\tgomp_fatal (\"Thread attribute set scheduler policy failed: %s\", strerror (err));\n+      err = pthread_attr_setinheritsched (attr, PTHREAD_EXPLICIT_SCHED);\n+      if (err != 0)\n+\tgomp_fatal (\"Thread attribute set explicit scheduler failed: %s\", strerror (err));\n+    }\n+  return attr;\n+}\n+\n #endif /* GOMP_POOL_H */"}, {"sha": "0c3a79bf2d8a64687a6ca8bd9db1cc869f46b5f6", "filename": "libgomp/config/rtems/proc.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Frtems%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fconfig%2Frtems%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fproc.c?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -48,7 +48,8 @@ allocate_thread_pool_reservoirs (void)\n }\n \n static void\n-allocate_thread_pool_reservoir (unsigned long count, unsigned long scheduler)\n+allocate_thread_pool_reservoir (unsigned long count, unsigned long priority,\n+\t\t\t\tunsigned long scheduler)\n {\n   struct gomp_thread_pool_reservoir *res;\n   struct gomp_thread_pool *pools;\n@@ -63,6 +64,7 @@ allocate_thread_pool_reservoir (unsigned long count, unsigned long scheduler)\n   memset (pools, 0, size);\n   res = (struct gomp_thread_pool_reservoir *) (pools + count);\n   res->index = count;\n+  res->priority = priority;\n   gomp_sem_init (&res->available, count);\n   gomp_mutex_init (&res->lock);\n   for (i = 0; i < count; ++i)\n@@ -71,7 +73,8 @@ allocate_thread_pool_reservoir (unsigned long count, unsigned long scheduler)\n }\n \n static char *\n-parse_thread_pools (char *env, unsigned long *count, unsigned long *scheduler)\n+parse_thread_pools (char *env, unsigned long *count, unsigned long *priority,\n+\t\t    unsigned long *scheduler)\n {\n   size_t len;\n   int i;\n@@ -84,6 +87,17 @@ parse_thread_pools (char *env, unsigned long *count, unsigned long *scheduler)\n   if (errno != 0)\n     gomp_fatal (\"Invalid thread pool count\");\n \n+  if (*env == '$')\n+    {\n+      ++env;\n+      errno = 0;\n+      *priority = strtoul (env, &env, 10);\n+      if (errno != 0)\n+\tgomp_fatal (\"Invalid thread pool priority\");\n+    }\n+  else\n+    *priority = -1;\n+\n   if (*env != '@')\n     gomp_fatal (\"Invalid thread pool scheduler prefix\");\n   ++env;\n@@ -110,9 +124,10 @@ init_thread_pool_reservoirs (void)\n       while (*env != '\\0')\n \t{\n \t  unsigned long count;\n+\t  unsigned long priority;\n \t  unsigned long scheduler;\n-\t  env = parse_thread_pools (env, &count, &scheduler);\n-\t  allocate_thread_pool_reservoir (count, scheduler);\n+\t  env = parse_thread_pools (env, &count, &priority, &scheduler);\n+\t  allocate_thread_pool_reservoir (count, priority, scheduler);\n \t}\n     }\n }"}, {"sha": "06b1c67fc02787bf76df8e0f8e9a08b59d21e610", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -1306,23 +1306,24 @@ section 4 of the OpenMP specification in version 4.0, while those\n beginning with @env{GOMP_} are GNU extensions.\n \n @menu\n-* OMP_CANCELLATION::      Set whether cancellation is activated\n-* OMP_DISPLAY_ENV::       Show OpenMP version and environment variables\n-* OMP_DEFAULT_DEVICE::    Set the device used in target regions\n-* OMP_DYNAMIC::           Dynamic adjustment of threads\n-* OMP_MAX_ACTIVE_LEVELS:: Set the maximum number of nested parallel regions\n-* OMP_NESTED::            Nested parallel regions\n-* OMP_NUM_THREADS::       Specifies the number of threads to use\n-* OMP_PROC_BIND::         Whether theads may be moved between CPUs\n-* OMP_PLACES::            Specifies on which CPUs the theads should be placed\n-* OMP_STACKSIZE::         Set default thread stack size\n-* OMP_SCHEDULE::          How threads are scheduled\n-* OMP_THREAD_LIMIT::      Set the maximum number of threads\n-* OMP_WAIT_POLICY::       How waiting threads are handled\n-* GOMP_CPU_AFFINITY::     Bind threads to specific CPUs\n-* GOMP_DEBUG::            Enable debugging output\n-* GOMP_STACKSIZE::        Set default thread stack size\n-* GOMP_SPINCOUNT::        Set the busy-wait spin count\n+* OMP_CANCELLATION::        Set whether cancellation is activated\n+* OMP_DISPLAY_ENV::         Show OpenMP version and environment variables\n+* OMP_DEFAULT_DEVICE::      Set the device used in target regions\n+* OMP_DYNAMIC::             Dynamic adjustment of threads\n+* OMP_MAX_ACTIVE_LEVELS::   Set the maximum number of nested parallel regions\n+* OMP_NESTED::              Nested parallel regions\n+* OMP_NUM_THREADS::         Specifies the number of threads to use\n+* OMP_PROC_BIND::           Whether theads may be moved between CPUs\n+* OMP_PLACES::              Specifies on which CPUs the theads should be placed\n+* OMP_STACKSIZE::           Set default thread stack size\n+* OMP_SCHEDULE::            How threads are scheduled\n+* OMP_THREAD_LIMIT::        Set the maximum number of threads\n+* OMP_WAIT_POLICY::         How waiting threads are handled\n+* GOMP_CPU_AFFINITY::       Bind threads to specific CPUs\n+* GOMP_DEBUG::              Enable debugging output\n+* GOMP_STACKSIZE::          Set default thread stack size\n+* GOMP_SPINCOUNT::          Set the busy-wait spin count\n+* GOMP_RTEMS_THREAD_POOLS:: Set the RTEMS specific thread pools\n @end menu\n \n \n@@ -1705,6 +1706,46 @@ or @env{OMP_WAIT_POLICY} is @code{PASSIVE}.\n \n \n \n+@node GOMP_RTEMS_THREAD_POOLS\n+@section @env{GOMP_RTEMS_THREAD_POOLS} -- Set the RTEMS specific thread pools\n+@cindex Environment Variable\n+@cindex Implementation specific setting\n+@table @asis\n+@item @emph{Description}:\n+This environment variable is only used on the RTEMS real-time operating system.\n+It determines the scheduler instance specific thread pools.  The format for\n+@env{GOMP_RTEMS_THREAD_POOLS} is a list of optional\n+@code{<thread-pool-count>[$<priority>]@@<scheduler-name>} configurations\n+separated by @code{:} where:\n+@itemize @bullet\n+@item @code{<thread-pool-count>} is the thread pool count for this scheduler\n+instance.\n+@item @code{$<priority>} is an optional priority for the worker threads of a\n+thread pool according to @code{pthread_setschedparam}.  In case a priority\n+value is omitted, then a worker thread will inherit the priority of the OpenMP\n+master thread that created it.  The priority of the worker thread is not\n+changed after creation, even if a new OpenMP master thread using the worker has\n+a different priority.\n+@item @code{@@<scheduler-name>} is the scheduler instance name according to the\n+RTEMS application configuration.\n+@end itemize\n+In case no thread pool configuration is specified for a scheduler instance,\n+then each OpenMP master thread of this scheduler instance will use its own\n+dynamically allocated thread pool.  To limit the worker thread count of the\n+thread pools, each OpenMP master thread must call @code{omp_set_num_threads}.\n+@item @emph{Example}:\n+Lets suppose we have three scheduler instances @code{IO}, @code{WRK0}, and\n+@code{WRK1} with @env{GOMP_RTEMS_THREAD_POOLS} set to\n+@code{\"1@@WRK0:3$4@@WRK1\"}.  Then there are no thread pool restrictions for\n+scheduler instance @code{IO}.  In the scheduler instance @code{WRK0} there is\n+one thread pool available.  Since no priority is specified for this scheduler\n+instance, the worker thread inherits the priority of the OpenMP master thread\n+that created it.  In the scheduler instance @code{WRK1} there are three thread\n+pools available and their worker threads run at priority four.\n+@end table\n+\n+\n+\n @c ---------------------------------------------------------------------\n @c The libgomp ABI\n @c ---------------------------------------------------------------------"}, {"sha": "67e25b3cf7efb235c727d8d4dce99a8d69f8b3c4", "filename": "libgomp/team.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06441dd5e3630dbeae13028968d0b12926211009/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=06441dd5e3630dbeae13028968d0b12926211009", "patch": "@@ -799,12 +799,13 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n       start_data->thread_pool = pool;\n       start_data->nested = nested;\n \n+      attr = gomp_adjust_thread_attr (attr, &thread_attr);\n       err = pthread_create (&pt, attr, gomp_thread_start, start_data++);\n       if (err != 0)\n \tgomp_fatal (\"Thread creation failed: %s\", strerror (err));\n     }\n \n-  if (__builtin_expect (gomp_places_list != NULL, 0))\n+  if (__builtin_expect (attr == &thread_attr, 0))\n     pthread_attr_destroy (&thread_attr);\n \n  do_release:"}]}