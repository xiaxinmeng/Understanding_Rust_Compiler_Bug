{"sha": "ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkNWU4NmMwZjQxZGMxZDY5MmY5YjJiNjhhNTEwYjFmNjgzNWEzZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-10T14:12:31Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-25T12:57:03Z"}, "message": "Improve global state for options.\n\ngcc/c-family/ChangeLog:\n\n\tPR tree-optimization/92860\n\tPR target/99592\n\t* c-attribs.c (handle_optimize_attribute): Save target node\n\tbefore calling parse_optimize_options and save it in case\n\tit changes.\n\t* c-pragma.c (handle_pragma_target): Similarly for pragma.\n\t(handle_pragma_pop_options): Likewise here.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/92860\n\tPR target/99592\n\t* optc-save-gen.awk: Remove exceptions.", "tree": {"sha": "ca469bc244e0c469071dff79d93fbb241f0af6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca469bc244e0c469071dff79d93fbb241f0af6b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec4d4a6782c9bd8d071839c50a239c49caca689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec4d4a6782c9bd8d071839c50a239c49caca689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec4d4a6782c9bd8d071839c50a239c49caca689"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "804374d5acc8951101f3ff6bbbd7dcb9b430ef27", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "patch": "@@ -5383,6 +5383,8 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n \n       /* Save current options.  */\n       cl_optimization_save (&cur_opts, &global_options, &global_options_set);\n+      tree prev_target_node = build_target_option_node (&global_options,\n+\t\t\t\t\t\t\t&global_options_set);\n \n       /* If we previously had some optimization options, use them as the\n \t default.  */\n@@ -5401,10 +5403,17 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n       parse_optimize_options (args, true);\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t= build_optimization_node (&global_options, &global_options_set);\n+      tree target_node = build_target_option_node (&global_options,\n+\t\t\t\t\t\t   &global_options_set);\n+      if (prev_target_node != target_node)\n+\tDECL_FUNCTION_SPECIFIC_TARGET (*node) = target_node;\n \n       /* Restore current options.  */\n       cl_optimization_restore (&global_options, &global_options_set,\n \t\t\t       &cur_opts);\n+      cl_target_option_restore (&global_options, &global_options_set,\n+\t\t\t\tTREE_TARGET_OPTION (prev_target_node));\n+\n       if (saved_global_options != NULL)\n \t{\n \t  cl_optimization_compare (saved_global_options, &global_options);"}, {"sha": "7f658ea564680f5dd0e7c4b5ffc86281f3cfd321", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "patch": "@@ -918,6 +918,12 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n \n       if (targetm.target_option.pragma_parse (args, NULL_TREE))\n \tcurrent_target_pragma = chainon (current_target_pragma, args);\n+\n+      /* A target pragma can also influence optimization options. */\n+      tree current_optimize\n+\t= build_optimization_node (&global_options, &global_options_set);\n+      if (current_optimize != optimization_current_node)\n+\toptimization_current_node = current_optimize;\n     }\n }\n \n@@ -1078,12 +1084,14 @@ handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n       target_option_current_node = p->target_binary;\n     }\n \n+  /* Always restore optimization options as optimization_current_node is\n+   * overwritten by invoke_set_current_function_hook.  */\n+  cl_optimization_restore (&global_options, &global_options_set,\n+\t\t\t   TREE_OPTIMIZATION (p->optimize_binary));\n+\n   if (p->optimize_binary != optimization_current_node)\n     {\n-      tree old_optimize = optimization_current_node;\n-      cl_optimization_restore (&global_options, &global_options_set,\n-\t\t\t       TREE_OPTIMIZATION (p->optimize_binary));\n-      c_cpp_builtins_optimize_pragma (parse_in, old_optimize,\n+      c_cpp_builtins_optimize_pragma (parse_in, optimization_current_node,\n \t\t\t\t      p->optimize_binary);\n       optimization_current_node = p->optimize_binary;\n     }"}, {"sha": "e2a9a496bfde5b1b72e180a4d5b228d359fa1530", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ebd5e86c0f41dc1d692f9b2b68a510b1f6835a3e", "patch": "@@ -1438,19 +1438,10 @@ print \"{\"\n checked_options[\"flag_merge_constants\"]++\n checked_options[\"param_max_fields_for_field_sensitive\"]++\n checked_options[\"flag_omit_frame_pointer\"]++\n-checked_options[\"unroll_only_small_loops\"]++\n # arc exceptions\n checked_options[\"TARGET_ALIGN_CALL\"]++\n checked_options[\"TARGET_CASE_VECTOR_PC_RELATIVE\"]++\n checked_options[\"arc_size_opt_level\"]++\n-# arm exceptions\n-checked_options[\"arm_fp16_format\"]++\n-checked_options[\"flag_ipa_ra\"]++\n-# s390 exceptions\n-checked_options[\"param_max_completely_peel_times\"]++\n-checked_options[\"param_max_completely_peeled_insns\"]++\n-checked_options[\"param_max_unroll_times\"]++\n-checked_options[\"param_max_unrolled_insns\"]++\n \n \n for (i = 0; i < n_opts; i++) {"}]}