{"sha": "1cccf644ff92ac1145abdbf255d1862dd787875b", "node_id": "C_kwDOANBUbNoAKDFjY2NmNjQ0ZmY5MmFjMTE0NWFiZGJmMjU1ZDE4NjJkZDc4Nzg3NWI", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2022-10-13T13:41:55Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2022-10-13T13:56:27Z"}, "message": "[AArch64] Improve bit tests [PR105773]\n\nSince AArch64 sets all flags on logical operations, comparisons with zero\ncan be combined into an AND even if the condition is LE or GT. Add a new\nCC_NZV mode used by ANDS/BICS/TST instructions.\n\ngcc/\n\tPR target/105773\n\t* config/aarch64/aarch64.cc (aarch64_select_cc_mode): Allow\n\tGT/LE for merging compare with zero into AND.\n\t(aarch64_get_condition_code_1): Add CC_NZVmode support.\n\t* config/aarch64/aarch64-modes.def: Add CC_NZV.\n\t* config/aarch64/aarch64.md: Use CC_NZV in cmp+and patterns.\n\ngcc/testsuite/\n\tPR target/105773\n\t* gcc.target/aarch64/ands_2.c: Test for ANDS.\n\t* gcc.target/aarch64/bics_2.c: Test for BICS.\n\t* gcc.target/aarch64/tst_2.c: Test for TST.\n\t* gcc.target/aarch64/tst_imm_split_1.c: Fix test.", "tree": {"sha": "df0964bab5f5bc68c4e47db512b8fd4b9f038ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df0964bab5f5bc68c4e47db512b8fd4b9f038ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cccf644ff92ac1145abdbf255d1862dd787875b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cccf644ff92ac1145abdbf255d1862dd787875b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cccf644ff92ac1145abdbf255d1862dd787875b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cccf644ff92ac1145abdbf255d1862dd787875b/comments", "author": null, "committer": null, "parents": [{"sha": "5cbaf84c191b9a3e3cb26545c808d208bdbf2ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cbaf84c191b9a3e3cb26545c808d208bdbf2ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cbaf84c191b9a3e3cb26545c808d208bdbf2ab5"}], "stats": {"total": 203, "additions": 107, "deletions": 96}, "files": [{"sha": "0fd4c32ad0bd09f8651d1b8a77378fa4504ff488", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -35,6 +35,7 @@ CC_MODE (CCFPE);\n CC_MODE (CC_SWP);\n CC_MODE (CC_NZC);   /* Only N, Z and C bits of condition flags are valid.\n \t\t       (Used with SVE predicate tests.)  */\n+CC_MODE (CC_NZV);   /* Only N, Z and V bits of condition flags are valid.  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n CC_MODE (CC_C);     /* C represents unsigned overflow of a simple addition.  */"}, {"sha": "1d0f994f281d0412d1ba98d2b10eeffffcfea8e3", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -11274,23 +11274,37 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n   if (y == const0_rtx && (REG_P (x) || SUBREG_P (x))\n       && (code == EQ || code == NE)\n       && (mode_x == HImode || mode_x == QImode))\n-    return CC_NZmode;\n+    return CC_Zmode;\n \n   /* Similarly, comparisons of zero_extends from shorter modes can\n      be performed using an ANDS with an immediate mask.  */\n   if (y == const0_rtx && code_x == ZERO_EXTEND\n       && (mode_x == SImode || mode_x == DImode)\n       && (GET_MODE (XEXP (x, 0)) == HImode || GET_MODE (XEXP (x, 0)) == QImode)\n       && (code == EQ || code == NE))\n-    return CC_NZmode;\n+    return CC_Zmode;\n+\n+  /* Zero extracts support equality comparisons.  */\n+  if ((mode_x == SImode || mode_x == DImode)\n+      && y == const0_rtx\n+      && (code_x == ZERO_EXTRACT && CONST_INT_P (XEXP (x, 1))\n+\t  && CONST_INT_P (XEXP (x, 2)))\n+      && (code == EQ || code == NE))\n+    return CC_Zmode;\n+\n+  /* ANDS/BICS/TST support equality and all signed comparisons.  */\n+  if ((mode_x == SImode || mode_x == DImode)\n+      && y == const0_rtx\n+      && (code_x == AND)\n+      && (code == EQ || code == NE || code == LT || code == GE\n+\t  || code == GT || code == LE))\n+    return CC_NZVmode;\n \n+  /* ADDS/SUBS correctly set N and Z flags.  */\n   if ((mode_x == SImode || mode_x == DImode)\n       && y == const0_rtx\n       && (code == EQ || code == NE || code == LT || code == GE)\n-      && (code_x == PLUS || code_x == MINUS || code_x == AND\n-\t  || code_x == NEG\n-\t  || (code_x == ZERO_EXTRACT && CONST_INT_P (XEXP (x, 1))\n-\t      && CONST_INT_P (XEXP (x, 2)))))\n+      && (code_x == PLUS || code_x == MINUS || code_x == NEG))\n     return CC_NZmode;\n \n   /* A compare with a shifted operand.  Because of canonicalization,\n@@ -11427,6 +11441,19 @@ aarch64_get_condition_code_1 (machine_mode mode, enum rtx_code comp_code)\n \t}\n       break;\n \n+    case E_CC_NZVmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return AARCH64_NE;\n+\tcase EQ: return AARCH64_EQ;\n+\tcase GE: return AARCH64_PL;\n+\tcase LT: return AARCH64_MI;\n+\tcase GT: return AARCH64_GT;\n+\tcase LE: return AARCH64_LE;\n+\tdefault: return -1;\n+\t}\n+      break;\n+\n     case E_CC_NZmode:\n       switch (comp_code)\n \t{"}, {"sha": "f2e3d905dbbeb2949f2947f5cfd68208c94c9272", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -4514,8 +4514,8 @@\n )\n \n (define_insn \"*and<mode>3_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (match_operand:GPI 1 \"register_operand\" \"%r,r\")\n \t\t  (match_operand:GPI 2 \"aarch64_logical_operand\" \"r,<lconst>\"))\n \t (const_int 0)))\n@@ -4530,8 +4530,8 @@\n \n ;; zero_extend version of above\n (define_insn \"*andsi3_compare0_uxtw\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n \t\t (match_operand:SI 2 \"aarch64_logical_operand\" \"r,K\"))\n \t (const_int 0)))\n@@ -4545,8 +4545,8 @@\n )\n \n (define_insn \"*and_<SHIFT:optab><mode>3_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (SHIFT:GPI\n \t\t   (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n@@ -4565,8 +4565,8 @@\n \n ;; zero_extend version of above\n (define_insn \"*and_<SHIFT:optab>si3_compare0_uxtw\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:SI (SHIFT:SI\n \t\t  (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n@@ -4770,8 +4770,8 @@\n )\n \n (define_insn \"*and_one_cmpl<mode>3_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (not:GPI\n \t\t   (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n@@ -4785,8 +4785,8 @@\n \n ;; zero_extend version of above\n (define_insn \"*and_one_cmplsi3_compare0_uxtw\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:SI (not:SI\n \t\t  (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n@@ -4799,8 +4799,8 @@\n )\n \n (define_insn \"*and_one_cmpl<mode>3_compare0_no_reuse\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-    (compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+    (compare:CC_NZV\n      (and:GPI (not:GPI\n            (match_operand:GPI 0 \"register_operand\" \"r\"))\n           (match_operand:GPI 1 \"register_operand\" \"r\"))\n@@ -4878,8 +4878,8 @@\n )\n \n (define_insn \"*and_one_cmpl_<SHIFT:optab><mode>3_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (not:GPI\n \t\t   (SHIFT:GPI\n \t\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -4901,8 +4901,8 @@\n \n ;; zero_extend version of above\n (define_insn \"*and_one_cmpl_<SHIFT:optab>si3_compare0_uxtw\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:SI (not:SI\n \t\t  (SHIFT:SI\n \t\t   (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -4923,8 +4923,8 @@\n )\n \n (define_insn \"*and_one_cmpl_<SHIFT:optab><mode>3_compare0_no_reuse\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-    (compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+    (compare:CC_NZV\n      (and:GPI (not:GPI\n            (SHIFT:GPI\n             (match_operand:GPI 0 \"register_operand\" \"r\")\n@@ -5029,8 +5029,8 @@\n \")\n \n (define_insn \"*and<mode>_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n \t (match_operand:SHORT 0 \"register_operand\" \"r\")\n \t (const_int 0)))]\n   \"\"\n@@ -5039,8 +5039,8 @@\n )\n \n (define_insn \"*ands<GPI:mode>_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n \t (zero_extend:GPI (match_operand:SHORT 1 \"register_operand\" \"r\"))\n \t (const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -5051,8 +5051,8 @@\n )\n \n (define_insn \"*and<mode>3nr_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (match_operand:GPI 0 \"register_operand\" \"%r,r\")\n \t\t  (match_operand:GPI 1 \"aarch64_logical_operand\" \"r,<lconst>\"))\n \t (const_int 0)))]\n@@ -5064,24 +5064,24 @@\n )\n \n (define_split\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (match_operand:GPI 0 \"register_operand\")\n \t\t  (match_operand:GPI 1 \"aarch64_mov_imm_operand\"))\n \t (const_int 0)))\n    (clobber (match_operand:SI 2 \"register_operand\"))]\n   \"\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+   (set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (match_dup 0)\n \t\t  (match_dup 2))\n \t (const_int 0)))]\n )\n \n (define_insn \"*and<mode>3nr_compare0_zextract\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n \t (zero_extract:GPI (match_operand:GPI 0 \"register_operand\" \"r\")\n \t\t  (match_operand:GPI 1 \"const_int_operand\" \"n\")\n \t\t  (match_operand:GPI 2 \"const_int_operand\" \"n\"))\n@@ -5102,8 +5102,8 @@\n )\n \n (define_insn \"*and_<SHIFT:optab><mode>3nr_compare0\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (SHIFT:GPI\n \t\t   (match_operand:GPI 0 \"register_operand\" \"r\")\n \t\t   (match_operand:QI 1 \"aarch64_shift_imm_<mode>\" \"n\"))\n@@ -5119,8 +5119,8 @@\n )\n \n (define_split\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+  [(set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (SHIFT:GPI\n \t\t   (match_operand:GPI 0 \"register_operand\")\n \t\t   (match_operand:QI 1 \"aarch64_shift_imm_<mode>\"))\n@@ -5129,8 +5129,8 @@\n     (clobber (match_operand:SI 3 \"register_operand\"))]\n   \"\"\n   [(set (match_dup 3) (match_dup 2))\n-   (set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n+   (set (reg:CC_NZV CC_REGNUM)\n+\t(compare:CC_NZV\n \t (and:GPI (SHIFT:GPI\n \t\t   (match_dup 0)\n \t\t   (match_dup 1))"}, {"sha": "c8763f234c5f7d19ef9c222756ab5e8a6eaae6fe", "filename": "gcc/testsuite/gcc.target/aarch64/ands_2.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -8,8 +8,7 @@ ands_si_test1 (int a, int b, int c)\n {\n   int d = a & b;\n \n-  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return a + c;\n   else\n@@ -21,21 +20,19 @@ ands_si_test2 (int a, int b, int c)\n {\n   int d = a & 0x99999999;\n \n-  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n-  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n-  if (d <= 0)\n-    return a + c;\n-  else\n+  /* { dg-final { scan-assembler \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n+  if (d > 0)\n     return b + d + c;\n+  else\n+    return a + c;\n }\n \n int\n ands_si_test3 (int a, int b, int c)\n {\n   int d = a & (b << 3);\n \n-  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  /* { dg-final { scan-assembler \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n   if (d <= 0)\n     return a + c;\n   else\n@@ -49,8 +46,7 @@ ands_di_test1 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & b;\n \n-  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return a + c;\n   else\n@@ -62,21 +58,19 @@ ands_di_test2 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & 0xaaaaaaaaaaaaaaaall;\n \n-  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n-  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n-  if (d <= 0)\n-    return a + c;\n-  else\n+  /* { dg-final { scan-assembler \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n+  if (d > 0)\n     return b + d + c;\n+  else\n+    return a + c;\n }\n \n s64\n ands_di_test3 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & (b << 3);\n \n-  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  /* { dg-final { scan-assembler \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n   if (d <= 0)\n     return a + c;\n   else"}, {"sha": "c1f7e87a6121f7b067b7b37b149da64aa63ebd1a", "filename": "gcc/testsuite/gcc.target/aarch64/bics_2.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbics_2.c?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -8,8 +8,7 @@ bics_si_test1 (int a, int b, int c)\n {\n   int d = a & ~b;\n \n-  /* { dg-final { scan-assembler-not \"bics\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"bic\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"bics\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return a + c;\n   else\n@@ -21,12 +20,11 @@ bics_si_test2 (int a, int b, int c)\n {\n   int d = a & ~(b << 3);\n \n-  /* { dg-final { scan-assembler-not \"bics\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"bic\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n-  if (d <= 0)\n-    return a + c;\n-  else\n+  /* { dg-final { scan-assembler \"bics\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  if (d > 0)\n     return b + d + c;\n+  else\n+    return a + c;\n }\n \n typedef long long s64;\n@@ -36,8 +34,7 @@ bics_di_test1 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & ~b;\n \n-  /* { dg-final { scan-assembler-not \"bics\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"bic\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"bics\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return a + c;\n   else\n@@ -49,12 +46,11 @@ bics_di_test2 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & ~(b << 3);\n \n-  /* { dg-final { scan-assembler-not \"bics\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"bic\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n-  if (d <= 0)\n-    return a + c;\n-  else\n+  /* { dg-final { scan-assembler \"bics\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  if (d > 0)\n     return b + d + c;\n+  else\n+    return a + c;\n }\n \n int"}, {"sha": "3c9bdfd05c4a19e83150f84f454c3e875c7757d1", "filename": "gcc/testsuite/gcc.target/aarch64/tst_2.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_2.c?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -8,8 +8,7 @@ tst_si_test1 (int a, int b, int c)\n {\n   int d = a & b;\n \n-  /* { dg-final { scan-assembler-not \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return 12;\n   else\n@@ -21,21 +20,19 @@ tst_si_test2 (int a, int b, int c)\n {\n   int d = a & 0x99999999;\n \n-  /* { dg-final { scan-assembler-not \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n-  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n-  if (d <= 0)\n-    return 12;\n-  else\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, -1717986919\" } } */\n+  if (d > 0)\n     return 18;\n+  else\n+    return 12;\n }\n \n int\n tst_si_test3 (int a, int b, int c)\n {\n   int d = a & (b << 3);\n \n-  /* { dg-final { scan-assembler-not \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n   if (d <= 0)\n     return 12;\n   else\n@@ -49,8 +46,7 @@ tst_di_test1 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & b;\n \n-  /* { dg-final { scan-assembler-not \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n-  /* { dg-final { scan-assembler-times \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+\" } } */\n   if (d <= 0)\n     return 12;\n   else\n@@ -62,8 +58,7 @@ tst_di_test2 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & 0xaaaaaaaaaaaaaaaall;\n \n-  /* { dg-final { scan-assembler-not \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n-  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]+, -6148914691236517206\" } } */\n   if (d <= 0)\n     return 12;\n   else\n@@ -75,12 +70,11 @@ tst_di_test3 (s64 a, s64 b, s64 c)\n {\n   s64 d = a & (b << 3);\n \n-  /* { dg-final { scan-assembler-not \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n-  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n-  if (d <= 0)\n-    return 12;\n-  else\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  if (d > 0)\n     return 18;\n+  else\n+    return 12;\n }\n \n int"}, {"sha": "e456e823593fbe507a8a67b5115a45712e40f80e", "filename": "gcc/testsuite/gcc.target/aarch64/tst_imm_split_1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cccf644ff92ac1145abdbf255d1862dd787875b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c?ref=1cccf644ff92ac1145abdbf255d1862dd787875b", "patch": "@@ -14,5 +14,4 @@ g (unsigned char *p)\n }\n \n /* { dg-final { scan-assembler-not \"and\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+.*\" } } */\n-/* { dg-final { scan-assembler \"tst\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler \"tst\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+, lsr 4\" } } */\n+/* { dg-final { scan-assembler-times \"tst\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+\" 2 } } */"}]}