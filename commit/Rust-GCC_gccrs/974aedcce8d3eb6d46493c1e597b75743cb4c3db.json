{"sha": "974aedcce8d3eb6d46493c1e597b75743cb4c3db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YWVkY2NlOGQzZWI2ZDQ2NDkzYzFlNTk3Yjc1NzQzY2I0YzNkYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-11-22T16:06:18Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-11-22T16:06:18Z"}, "message": "re PR c++/60336 (empty struct value is passed differently in C and C++)\n\n\tPR c++/60336\n\tPR middle-end/67239\n\tPR target/68355\n\t* c-decl.c (grokdeclarator): Set DECL_PADDING_P on unnamed bit-fields.\n\n\t* class.c (layout_class_type): Set DECL_PADDING_P on padding.\n\t* decl.c (cxx_init_decl_processing): Set TRANSLATION_UNIT_WARN_EMPTY_P.\n\t(grokdeclarator): Set DECL_PADDING_P on unnamed bit-fields.\n\n\t* lto.c (compare_tree_sccs_1): Compare TYPE_EMPTY_P and DECL_PADDING_P.\n\n\t* calls.c (initialize_argument_information): Call\n\twarn_parameter_passing_abi target hook.\n\t(store_one_arg): Use 0 for empty record size.  Don't push 0 size\n\targument onto stack.\n\t(must_pass_in_stack_var_size_or_pad): Return false for empty types.\n\t* common.opt: Update -fabi-version description.\n\t* config/i386/i386.c (init_cumulative_args): Set cum->warn_empty.\n\t(ix86_gimplify_va_arg): Call arg_int_size_in_bytes instead of\n\tint_size_in_bytes.\n\t(ix86_is_empty_record): New function.\n\t(ix86_warn_parameter_passing_abi): New function.\n\t(TARGET_EMPTY_RECORD_P): Redefine.\n\t(TARGET_WARN_PARAMETER_PASSING_ABI): Redefine.\n\t* config/i386/i386.h (CUMULATIVE_ARGS): Add warn_empty.\n\t* doc/tm.texi: Regenerated.\n\t* doc/tm.texi.in (TARGET_EMPTY_RECORD_P,\n\tTARGET_WARN_PARAMETER_PASSING_ABI): Add.\n\t* dwarf2out.c (get_ultimate_context): Move to tree.c.\n\t* explow.c (hard_function_value): Call arg_int_size_in_bytes\n\tinstead of int_size_in_bytes.\n\t* expr.c (copy_blkmode_to_reg): Likewise.\n\t* function.c (aggregate_value_p): Return 0 for empty types.\n\t(assign_parm_find_entry_rtl): Call warn_parameter_passing_abi target hook.\n\t(locate_and_pad_parm): Call arg size_in_bytes instead\n\tsize_in_bytes.\n\t* lto-streamer-out.c (hash_tree): Hash TYPE_EMPTY_P and DECL_PADDING_P.\n\t* stor-layout.c (finalize_type_size): Set TYPE_EMPTY_P.\n\t* target.def (empty_record_p, warn_parameter_passing_abi): New target\n\thooks.\n\t* targhooks.c (hook_void_CUMULATIVE_ARGS_tree): New hook.\n\t(std_gimplify_va_arg_expr): Skip empty records.  Call\n\targ_size_in_bytes instead size_in_bytes.\n\t* targhooks.h (hook_void_CUMULATIVE_ARGS_tree): Declare.\n\t* tree-core.h (tree_type_common): Add empty_flag.\n\t(tree_decl_common): Update comments.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Stream\n\tDECL_PADDING_P.\n\t(unpack_ts_type_common_value_fields): Stream TYPE_EMPTY_P.\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Stream\n\tDECL_PADDING_P.\n\t(pack_ts_type_common_value_fields): Stream TYPE_EMPTY_P.\n\t* tree.c (default_is_empty_type): New function.\n\t(default_is_empty_record): New function.\n\t(arg_int_size_in_bytes): New function.\n\t(arg_size_in_bytes): New function.\n\t(get_ultimate_context): New function.\n\t* tree.h: Define TYPE_EMPTY_P, DECL_PADDING_P and\n\tTRANSLATION_UNIT_WARN_EMPTY_P.\n\t(default_is_empty_record, arg_int_size_in_bytes,\n\targ_size_in_bytes, get_ultimate_context): Declare.\n\n\t* g++.dg/abi/empty12.C: New test.\n\t* g++.dg/abi/empty12.h: New test.\n\t* g++.dg/abi/empty12a.c: New test.\n\t* g++.dg/abi/empty13.C: New test.\n\t* g++.dg/abi/empty13.h: New test.\n\t* g++.dg/abi/empty13a.c: New test.\n\t* g++.dg/abi/empty14.C: New test.\n\t* g++.dg/abi/empty14.h: New test.\n\t* g++.dg/abi/empty14a.c: New test.\n\t* g++.dg/abi/empty15.C: New test.\n\t* g++.dg/abi/empty15.h: New test.\n\t* g++.dg/abi/empty15a.c: New test.\n\t* g++.dg/abi/empty16.C: New test.\n\t* g++.dg/abi/empty16.h: New test.\n\t* g++.dg/abi/empty16a.c: New test.\n\t* g++.dg/abi/empty17.C: New test.\n\t* g++.dg/abi/empty17.h: New test.\n\t* g++.dg/abi/empty17a.c: New test.\n\t* g++.dg/abi/empty18.C: New test.\n\t* g++.dg/abi/empty18.h: New test.\n\t* g++.dg/abi/empty18a.c: New test.\n\t* g++.dg/abi/empty19.C: New test.\n\t* g++.dg/abi/empty19.h: New test.\n\t* g++.dg/abi/empty19a.c: New test.\n\t* g++.dg/abi/empty20.C: New test.\n\t* g++.dg/abi/empty21.C: New test.\n\t* g++.dg/abi/empty22.C: New test.\n\t* g++.dg/abi/empty22.h: New test.\n\t* g++.dg/abi/empty22a.c: New test.\n\t* g++.dg/abi/empty23.C: New test.\n\t* g++.dg/abi/empty24.C: New test.\n\t* g++.dg/abi/empty25.C: New test.\n\t* g++.dg/abi/empty25.h: New test.\n\t* g++.dg/abi/empty25a.c: New test.\n\t* g++.dg/abi/empty26.C: New test.\n\t* g++.dg/abi/empty26.h: New test.\n\t* g++.dg/abi/empty26a.c: New test.\n\t* g++.dg/abi/empty27.C: New test.\n\t* g++.dg/abi/empty28.C: New test.\n\t* g++.dg/abi/pr60336-1.C: New test.\n\t* g++.dg/abi/pr60336-10.C: New test.\n\t* g++.dg/abi/pr60336-11.C: New test.\n\t* g++.dg/abi/pr60336-12.C: New test.\n\t* g++.dg/abi/pr60336-2.C: New test.\n\t* g++.dg/abi/pr60336-3.C: New test.\n\t* g++.dg/abi/pr60336-4.C: New test.\n\t* g++.dg/abi/pr60336-5.C: New test.\n\t* g++.dg/abi/pr60336-6.C: New test.\n\t* g++.dg/abi/pr60336-7.C: New test.\n\t* g++.dg/abi/pr60336-8.C: New test.\n\t* g++.dg/abi/pr60336-9.C: New test.\n\t* g++.dg/abi/pr68355.C: New test.\n\t* g++.dg/lto/pr60336_0.C: New test.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r255066", "tree": {"sha": "76a622fb22ebe257b9dfc386c92eb31cc07221bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76a622fb22ebe257b9dfc386c92eb31cc07221bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974aedcce8d3eb6d46493c1e597b75743cb4c3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974aedcce8d3eb6d46493c1e597b75743cb4c3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974aedcce8d3eb6d46493c1e597b75743cb4c3db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974aedcce8d3eb6d46493c1e597b75743cb4c3db/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc7160b2c718d7974aee97ca9b8448ec760bbfb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7160b2c718d7974aee97ca9b8448ec760bbfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7160b2c718d7974aee97ca9b8448ec760bbfb7"}], "stats": {"total": 1491, "additions": 1453, "deletions": 38}, "files": [{"sha": "4b248cd81b7b3bd9b7d3bd5e3ad5bc4d81fa67b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1,3 +1,61 @@\n+2017-11-22  Marek Polacek  <polacek@redhat.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60336\n+\tPR middle-end/67239\n+\tPR target/68355\n+\t* calls.c (initialize_argument_information): Call\n+\twarn_parameter_passing_abi target hook.\n+\t(store_one_arg): Use 0 for empty record size.  Don't push 0 size\n+\targument onto stack.\n+\t(must_pass_in_stack_var_size_or_pad): Return false for empty types.\n+\t* common.opt: Update -fabi-version description.\n+\t* config/i386/i386.c (init_cumulative_args): Set cum->warn_empty.\n+\t(ix86_gimplify_va_arg): Call arg_int_size_in_bytes instead of\n+\tint_size_in_bytes.\n+\t(ix86_is_empty_record): New function.\n+\t(ix86_warn_parameter_passing_abi): New function.\n+\t(TARGET_EMPTY_RECORD_P): Redefine.\n+\t(TARGET_WARN_PARAMETER_PASSING_ABI): Redefine.\n+\t* config/i386/i386.h (CUMULATIVE_ARGS): Add warn_empty.\n+\t* doc/tm.texi: Regenerated.\n+\t* doc/tm.texi.in (TARGET_EMPTY_RECORD_P,\n+\tTARGET_WARN_PARAMETER_PASSING_ABI): Add.\n+\t* dwarf2out.c (get_ultimate_context): Move to tree.c.\n+\t* explow.c (hard_function_value): Call arg_int_size_in_bytes\n+\tinstead of int_size_in_bytes.\n+\t* expr.c (copy_blkmode_to_reg): Likewise.\n+\t* function.c (aggregate_value_p): Return 0 for empty types.\n+\t(assign_parm_find_entry_rtl): Call warn_parameter_passing_abi target hook.\n+\t(locate_and_pad_parm): Call arg size_in_bytes instead\n+\tsize_in_bytes.\n+\t* lto-streamer-out.c (hash_tree): Hash TYPE_EMPTY_P and DECL_PADDING_P.\n+\t* stor-layout.c (finalize_type_size): Set TYPE_EMPTY_P.\n+\t* target.def (empty_record_p, warn_parameter_passing_abi): New target\n+\thooks.\n+\t* targhooks.c (hook_void_CUMULATIVE_ARGS_tree): New hook.\n+\t(std_gimplify_va_arg_expr): Skip empty records.  Call\n+\targ_size_in_bytes instead size_in_bytes.\n+\t* targhooks.h (hook_void_CUMULATIVE_ARGS_tree): Declare.\n+\t* tree-core.h (tree_type_common): Add empty_flag.\n+\t(tree_decl_common): Update comments.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Stream\n+\tDECL_PADDING_P.\n+\t(unpack_ts_type_common_value_fields): Stream TYPE_EMPTY_P.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Stream\n+\tDECL_PADDING_P.\n+\t(pack_ts_type_common_value_fields): Stream TYPE_EMPTY_P.\n+\t* tree.c (default_is_empty_type): New function.\n+\t(default_is_empty_record): New function.\n+\t(arg_int_size_in_bytes): New function.\n+\t(arg_size_in_bytes): New function.\n+\t(get_ultimate_context): New function.\n+\t* tree.h: Define TYPE_EMPTY_P, DECL_PADDING_P and\n+\tTRANSLATION_UNIT_WARN_EMPTY_P.\n+\t(default_is_empty_record, arg_int_size_in_bytes,\n+\targ_size_in_bytes, get_ultimate_context): Declare.\n+\n 2017-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.c (cmse_clear_registers): New function."}, {"sha": "b936f9920899738c43c3ece20afb52fd0cb1d18e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1,3 +1,10 @@\n+2017-11-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60336\n+\tPR middle-end/67239\n+\tPR target/68355\n+\t* c-decl.c (grokdeclarator): Set DECL_PADDING_P on unnamed bit-fields.\n+\n 2017-11-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/83056"}, {"sha": "c66bc4043ce9687d256a609acd7b4399dee67b5a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -6822,7 +6822,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t   FIELD_DECL, declarator->u.id, type);\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \tif (bitfield && !declarator->u.id)\n-\t  TREE_NO_WARNING (decl) = 1;\n+\t  {\n+\t    TREE_NO_WARNING (decl) = 1;\n+\t    DECL_PADDING_P (decl) = 1;\n+\t  }\n \n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;"}, {"sha": "8ae9899008843ae51b2699e41d52d3e2df95b648", "filename": "gcc/calls.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -2002,6 +2002,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       args[i].unsignedp = unsignedp;\n       args[i].mode = mode;\n \n+      targetm.calls.warn_parameter_passing_abi (args_so_far, type);\n+\n       args[i].reg = targetm.calls.function_arg (args_so_far, mode, type,\n \t\t\t\t\t\targpos < n_named_args);\n \n@@ -5514,7 +5516,11 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t Note that in C the default argument promotions\n \t will prevent such mismatches.  */\n \n-      size = GET_MODE_SIZE (arg->mode);\n+      if (TYPE_EMPTY_P (TREE_TYPE (pval)))\n+\tsize = 0;\n+      else\n+\tsize = GET_MODE_SIZE (arg->mode);\n+\n       /* Compute how much space the push instruction will push.\n \t On many machines, pushing a byte will advance the stack\n \t pointer by a halfword.  */\n@@ -5546,10 +5552,12 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \n       /* This isn't already where we want it on the stack, so put it there.\n \t This can either be done with push or copy insns.  */\n-      if (!emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), NULL_RTX,\n-\t\t      parm_align, partial, reg, used - size, argblock,\n-\t\t      ARGS_SIZE_RTX (arg->locate.offset), reg_parm_stack_space,\n-\t\t      ARGS_SIZE_RTX (arg->locate.alignment_pad), true))\n+      if (used\n+\t  && !emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval),\n+\t\t\t      NULL_RTX, parm_align, partial, reg, used - size,\n+\t\t\t      argblock, ARGS_SIZE_RTX (arg->locate.offset),\n+\t\t\t      reg_parm_stack_space,\n+\t\t\t      ARGS_SIZE_RTX (arg->locate.alignment_pad), true))\n \tsibcall_failure = 1;\n \n       /* Unless this is a partially-in-register argument, the argument is now\n@@ -5582,9 +5590,9 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t  /* PUSH_ROUNDING has no effect on us, because emit_push_insn\n \t     for BLKmode is careful to avoid it.  */\n \t  excess = (arg->locate.size.constant\n-\t\t    - int_size_in_bytes (TREE_TYPE (pval))\n+\t\t    - arg_int_size_in_bytes (TREE_TYPE (pval))\n \t\t    + partial);\n-\t  size_rtx = expand_expr (size_in_bytes (TREE_TYPE (pval)),\n+\t  size_rtx = expand_expr (arg_size_in_bytes (TREE_TYPE (pval)),\n \t\t\t\t  NULL_RTX, TYPE_MODE (sizetype),\n \t\t\t\t  EXPAND_NORMAL);\n \t}\n@@ -5660,10 +5668,12 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t    }\n \t}\n \n-      emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx,\n-\t\t      parm_align, partial, reg, excess, argblock,\n-\t\t      ARGS_SIZE_RTX (arg->locate.offset), reg_parm_stack_space,\n-\t\t      ARGS_SIZE_RTX (arg->locate.alignment_pad), false);\n+      if (!CONST_INT_P (size_rtx) || INTVAL (size_rtx) != 0)\n+\temit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx,\n+\t\t\tparm_align, partial, reg, excess, argblock,\n+\t\t\tARGS_SIZE_RTX (arg->locate.offset),\n+\t\t\treg_parm_stack_space,\n+\t\t\tARGS_SIZE_RTX (arg->locate.alignment_pad), false);\n \n       /* Unless this is a partially-in-register argument, the argument is now\n \t in the stack.\n@@ -5741,6 +5751,9 @@ must_pass_in_stack_var_size_or_pad (machine_mode mode, const_tree type)\n   if (TREE_ADDRESSABLE (type))\n     return true;\n \n+  if (TYPE_EMPTY_P (type))\n+    return false;\n+\n   /* If the padding and mode of the type is such that a copy into\n      a register would put it into the wrong part of the register.  */\n   if (mode == BLKmode"}, {"sha": "28a0185f0cfa6444356ed588cbcc0b9a329f5394", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -936,7 +936,7 @@ Driver Undocumented\n ;     Default in G++ 7.\n ;\n ; 12: Corrects the calling convention for classes with only deleted copy/move\n-;     constructors.\n+;     constructors and changes passing/returning of empty records.\n ;     Default in G++ 8.\n ;\n ; Additional positive integers will be assigned as new versions of"}, {"sha": "202ef7a334a8a19430b438e6abdf039d59881fed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -7196,6 +7196,26 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   cum->force_bnd_pass = 0;\n   cum->decl = fndecl;\n \n+  cum->warn_empty = !warn_abi || cum->stdarg;\n+  if (!cum->warn_empty && fntype)\n+    {\n+      function_args_iterator iter;\n+      tree argtype;\n+      bool seen_empty_type = false;\n+      FOREACH_FUNCTION_ARGS (fntype, argtype, iter)\n+\t{\n+\t  if (VOID_TYPE_P (argtype))\n+\t    break;\n+\t  if (TYPE_EMPTY_P (argtype))\n+\t    seen_empty_type = true;\n+\t  else if (seen_empty_type)\n+\t    {\n+\t      cum->warn_empty = true;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n   if (!TARGET_64BIT)\n     {\n       /* If there are variable arguments, then we won't pass anything\n@@ -9883,7 +9903,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   indirect_p = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n   if (indirect_p)\n     type = build_pointer_type (type);\n-  size = int_size_in_bytes (type);\n+  size = arg_int_size_in_bytes (type);\n   rsize = CEIL (size, UNITS_PER_WORD);\n \n   nat_mode = type_natural_mode (type, NULL, false);\n@@ -28847,6 +28867,46 @@ ix86_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+/* Implement TARGET_EMPTY_RECORD_P.  */\n+\n+static bool\n+ix86_is_empty_record (const_tree type)\n+{\n+  if (!TARGET_64BIT)\n+    return false;\n+  return default_is_empty_record (type);\n+}\n+\n+/* Implement TARGET_WARN_PARAMETER_PASSING_ABI.  */\n+\n+static void\n+ix86_warn_parameter_passing_abi (cumulative_args_t cum_v, tree type)\n+{\n+  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n+\n+  if (!cum->warn_empty)\n+    return;\n+\n+  if (!TYPE_EMPTY_P (type))\n+    return;\n+\n+  const_tree ctx = get_ultimate_context (cum->decl);\n+  if (ctx != NULL_TREE\n+      && !TRANSLATION_UNIT_WARN_EMPTY_P (ctx))\n+    return;\n+\n+  /* If the actual size of the type is zero, then there is no change\n+     in how objects of this size are passed.  */\n+  if (int_size_in_bytes (type) == 0)\n+    return;\n+\n+  warning (OPT_Wabi, \"empty class %qT parameter passing ABI \"\n+\t   \"changes in -fabi-version=12 (GCC 8)\", type);\n+\n+  /* Only warn once.  */\n+  cum->warn_empty = false;\n+}\n+\n /* Compute the alignment for a variable for Intel MCU psABI.  TYPE is\n    the data type, and ALIGN is the alignment that the object would\n    ordinarily have.  */\n@@ -50574,6 +50634,12 @@ ix86_run_selftests (void)\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT ix86_constant_alignment\n \n+#undef TARGET_EMPTY_RECORD_P\n+#define TARGET_EMPTY_RECORD_P ix86_is_empty_record\n+\n+#undef TARGET_WARN_PARAMETER_PASSING_ABI\n+#define TARGET_WARN_PARAMETER_PASSING_ABI ix86_warn_parameter_passing_abi\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "fde8467b97c5900cf8519f940f81f73fbb52f87f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1640,6 +1640,8 @@ typedef struct ix86_args {\n   int warn_avx;\t\t\t/* True when we want to warn about AVX ABI.  */\n   int warn_sse;\t\t\t/* True when we want to warn about SSE ABI.  */\n   int warn_mmx;\t\t\t/* True when we want to warn about MMX ABI.  */\n+  int warn_empty;\t\t/* True when we want to warn about empty classes\n+\t\t\t\t   passing ABI change.  */\n   int sse_regno;\t\t/* next available sse register number */\n   int mmx_words;\t\t/* # mmx words passed so far */\n   int mmx_nregs;\t\t/* # mmx registers available for passing */"}, {"sha": "f7d3cfa4d3422ca5212a1334d90d6ea890bb20c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1,3 +1,12 @@\n+2017-11-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60336\n+\tPR middle-end/67239\n+\tPR target/68355\n+\t* class.c (layout_class_type): Set DECL_PADDING_P on padding.\n+\t* decl.c (cxx_init_decl_processing): Set TRANSLATION_UNIT_WARN_EMPTY_P.\n+\t(grokdeclarator): Set DECL_PADDING_P on unnamed bit-fields.\n+\n 2017-11-21  Martin Liska  <mliska@suse.cz>\n \n \t* class.c (finalize_literal_type_property): Add quotes for"}, {"sha": "73529a94a52377c74c1c06229aeff738f2aa4883", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -6196,6 +6196,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  DECL_CONTEXT (padding_field) = t;\n \t  DECL_ARTIFICIAL (padding_field) = 1;\n \t  DECL_IGNORED_P (padding_field) = 1;\n+\t  DECL_PADDING_P (padding_field) = 1;\n \t  layout_nonempty_base_or_field (rli, padding_field,\n \t\t\t\t\t NULL_TREE,\n \t\t\t\t\t empty_base_offsets);"}, {"sha": "121b4a4f0dbf5bd2c433fa0b1187c95bdf6a61e5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -4012,6 +4012,10 @@ cxx_init_decl_processing (void)\n   TREE_PUBLIC (global_namespace) = 1;\n   DECL_CONTEXT (global_namespace)\n     = build_translation_unit_decl (get_identifier (main_input_filename));\n+  /* Remember whether we want the empty class passing ABI change warning\n+     in this TU.  */\n+  TRANSLATION_UNIT_WARN_EMPTY_P (DECL_CONTEXT (global_namespace))\n+    = warn_abi && abi_version_crosses (12);\n   debug_hooks->register_main_translation_unit\n     (DECL_CONTEXT (global_namespace));\n   begin_scope (sk_namespace, global_namespace);\n@@ -12090,7 +12094,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t   FIELD_DECL, unqualified_id, type);\n \t\tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \t\tif (bitfield && !unqualified_id)\n-\t\t  TREE_NO_WARNING (decl) = 1;\n+\t\t  {\n+\t\t    TREE_NO_WARNING (decl) = 1;\n+\t\t    DECL_PADDING_P (decl) = 1;\n+\t\t  }\n \n \t\tif (storage_class == sc_mutable)\n \t\t  {"}, {"sha": "f16e73c31b10075f60573cabf2b542318b0e682c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -4559,6 +4559,16 @@ This target hook returns the mode to be used when accessing raw return registers\n This target hook returns the mode to be used when accessing raw argument registers in @code{__builtin_apply_args}.  Define this macro if the value in @var{reg_raw_mode} is not correct.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_EMPTY_RECORD_P (const_tree @var{type})\n+This target hook returns true if the type is an empty record.  The default\n+is to return @code{false}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_WARN_PARAMETER_PASSING_ABI (cumulative_args_t @var{ca}, tree @var{type})\n+This target hook warns about the change in empty class parameter passing\n+ABI.\n+@end deftypefn\n+\n @node Caller Saves\n @subsection Caller-Saves Register Allocation\n "}, {"sha": "39f6fcaaa11250680887e39d00e1cf679d12685c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -3439,6 +3439,10 @@ nothing when you use @option{-freg-struct-return} mode.\n \n @hook TARGET_GET_RAW_ARG_MODE\n \n+@hook TARGET_EMPTY_RECORD_P\n+\n+@hook TARGET_WARN_PARAMETER_PASSING_ABI\n+\n @node Caller Saves\n @subsection Caller-Saves Register Allocation\n "}, {"sha": "4b0216e3af1df66c52761c052c5dcac7ec5007e5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -5102,21 +5102,6 @@ get_AT_file (dw_die_ref die, enum dwarf_attribute attr_kind)\n   return a ? AT_file (a) : NULL;\n }\n \n-/* Returns the ultimate TRANSLATION_UNIT_DECL context of DECL or NULL.  */\n-\n-static const_tree\n-get_ultimate_context (const_tree decl)\n-{\n-  while (decl && TREE_CODE (decl) != TRANSLATION_UNIT_DECL)\n-    {\n-      if (TREE_CODE (decl) == BLOCK)\n-\tdecl = BLOCK_SUPERCONTEXT (decl);\n-      else\n-\tdecl = get_containing_scope (decl);\n-    }\n-  return decl;\n-}\n-\n /* Return TRUE if the language is C++.  */\n \n static inline bool"}, {"sha": "e2c8e459a43d6ec2fb3dc965a991146730401d32", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -2176,7 +2176,7 @@ hard_function_value (const_tree valtype, const_tree func, const_tree fntype,\n   if (REG_P (val)\n       && GET_MODE (val) == BLKmode)\n     {\n-      unsigned HOST_WIDE_INT bytes = int_size_in_bytes (valtype);\n+      unsigned HOST_WIDE_INT bytes = arg_int_size_in_bytes (valtype);\n       opt_scalar_int_mode tmpmode;\n \n       /* int_size_in_bytes can return -1.  We don't need a check here"}, {"sha": "487837afcccb9ae8c7d6cb09dc950f44702bccd9", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -2749,7 +2749,7 @@ copy_blkmode_to_reg (machine_mode mode_in, tree src)\n \n   x = expand_normal (src);\n \n-  bytes = int_size_in_bytes (TREE_TYPE (src));\n+  bytes = arg_int_size_in_bytes (TREE_TYPE (src));\n   if (bytes == 0)\n     return NULL_RTX;\n "}, {"sha": "1fa538b4b7fd21a9a4fd40d8e9a21cf81fed95b1", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -2084,6 +2084,9 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n   if (TREE_ADDRESSABLE (type))\n     return 1;\n \n+  if (TYPE_EMPTY_P (type))\n+    return 0;\n+\n   if (flag_pcc_struct_return && AGGREGATE_TYPE_P (type))\n     return 1;\n \n@@ -2528,6 +2531,9 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n       return;\n     }\n \n+  targetm.calls.warn_parameter_passing_abi (all->args_so_far,\n+\t\t\t\t\t    data->passed_type);\n+\n   entry_parm = targetm.calls.function_incoming_arg (all->args_so_far,\n \t\t\t\t\t\t    data->promoted_mode,\n \t\t\t\t\t\t    data->passed_type,\n@@ -4140,8 +4146,9 @@ locate_and_pad_parm (machine_mode passed_mode, tree type, int in_regs,\n \n   part_size_in_regs = (reg_parm_stack_space == 0 ? partial : 0);\n \n-  sizetree\n-    = type ? size_in_bytes (type) : size_int (GET_MODE_SIZE (passed_mode));\n+  sizetree = (type\n+\t      ? arg_size_in_bytes (type)\n+\t      : size_int (GET_MODE_SIZE (passed_mode)));\n   where_pad = targetm.calls.function_arg_padding (passed_mode, type);\n   boundary = targetm.calls.function_arg_boundary (passed_mode, type);\n   round_boundary = targetm.calls.function_arg_round_boundary (passed_mode,"}, {"sha": "e127e508f97291e555c4b3109678ba79a5db85d5", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1073,6 +1073,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t{\n \t  hstate.add_flag (DECL_PACKED (t));\n \t  hstate.add_flag (DECL_NONADDRESSABLE_P (t));\n+\t  hstate.add_flag (DECL_PADDING_P (t));\n \t  hstate.add_int (DECL_OFFSET_ALIGN (t));\n \t}\n       else if (code == VAR_DECL)\n@@ -1166,6 +1167,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       hstate.commit_flag ();\n       hstate.add_int (TYPE_PRECISION (t));\n       hstate.add_int (TYPE_ALIGN (t));\n+      hstate.add_int (TYPE_EMPTY_P (t));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))"}, {"sha": "ed55a5f547be5996e45eaa3b0e7a07385673e7fc", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1,3 +1,10 @@\n+2017-11-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60336\n+\tPR middle-end/67239\n+\tPR target/68355\n+\t* lto.c (compare_tree_sccs_1): Compare TYPE_EMPTY_P and DECL_PADDING_P.\n+\n 2017-11-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.c (lto_balanced_map): Use frequency accessor."}, {"sha": "748ef02143c129f73706fb99f1b7787eb24e4165", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1087,6 +1087,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t{\n \t  compare_values (DECL_PACKED);\n \t  compare_values (DECL_NONADDRESSABLE_P);\n+\t  compare_values (DECL_PADDING_P);\n \t  compare_values (DECL_OFFSET_ALIGN);\n \t}\n       else if (code == VAR_DECL)\n@@ -1165,6 +1166,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \tcompare_values (TYPE_NONALIASED_COMPONENT);\n       if (AGGREGATE_TYPE_P (t1))\n \tcompare_values (TYPE_TYPELESS_STORAGE);\n+      compare_values (TYPE_EMPTY_P);\n       compare_values (TYPE_PACKED);\n       compare_values (TYPE_RESTRICT);\n       compare_values (TYPE_USER_ALIGN);"}, {"sha": "1eef5781aa5d09108aa2dad16859b78e43908e79", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1859,6 +1859,9 @@ finalize_type_size (tree type)\n \t  SET_TYPE_MODE (variant, mode);\n \t}\n     }\n+\n+  /* Handle empty records as per the x86-64 psABI.  */\n+  TYPE_EMPTY_P (type) = targetm.calls.empty_record_p (type);\n }\n \n /* Return a new underlying object for a bitfield started with FIELD.  */"}, {"sha": "81aedee80d949bdaf4d1ec366c445a41c91af099", "filename": "gcc/target.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -5055,6 +5055,22 @@ DEFHOOK\n  fixed_size_mode, (int regno),\n  default_get_reg_raw_mode)\n \n+/* Return true if a type is an empty record.  */\n+DEFHOOK\n+(empty_record_p,\n+ \"This target hook returns true if the type is an empty record.  The default\\n\\\n+is to return @code{false}.\",\n+ bool, (const_tree type),\n+ hook_bool_const_tree_false)\n+\n+/* Warn about the change in empty class parameter passing ABI.  */\n+DEFHOOK\n+(warn_parameter_passing_abi,\n+ \"This target hook warns about the change in empty class parameter passing\\n\\\n+ABI.\",\n+ void, (cumulative_args_t ca, tree type),\n+ hook_void_CUMULATIVE_ARGS_tree)\n+\n HOOK_VECTOR_END (calls)\n \n DEFHOOK"}, {"sha": "0edc57b0a156a698a11f9a4b7d78a5709381f324", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -755,6 +755,12 @@ hook_int_CUMULATIVE_ARGS_mode_tree_bool_0 (\n   return 0;\n }\n \n+void\n+hook_void_CUMULATIVE_ARGS_tree (cumulative_args_t ca ATTRIBUTE_UNUSED,\n+\t\t\t\ttree ATTRIBUTE_UNUSED)\n+{\n+}\n+\n void\n default_function_arg_advance (cumulative_args_t ca ATTRIBUTE_UNUSED,\n \t\t\t      machine_mode mode ATTRIBUTE_UNUSED,\n@@ -2108,6 +2114,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n      requires greater alignment, we must perform dynamic alignment.  */\n   if (boundary > align\n+      && !TYPE_EMPTY_P (type)\n       && !integer_zerop (TYPE_SIZE (type)))\n     {\n       t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n@@ -2134,7 +2141,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     }\n \n   /* Compute the rounded size of the type.  */\n-  type_size = size_in_bytes (type);\n+  type_size = arg_size_in_bytes (type);\n   rounded_size = round_up (type_size, align);\n \n   /* Reduce rounded_size so it's sharable with the postqueue.  */"}, {"sha": "e431934cd601b46e6d4919ba919d3bd06997f505", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -135,6 +135,8 @@ extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n   (cumulative_args_t, machine_mode, const_tree, bool);\n extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (cumulative_args_t, machine_mode, tree, bool);\n+extern void hook_void_CUMULATIVE_ARGS_tree\n+  (cumulative_args_t, tree);\n extern const char *hook_invalid_arg_for_unprototyped_fn\n   (const_tree, const_tree, const_tree);\n extern void default_function_arg_advance"}, {"sha": "cb453e310a9e09d841d73839a5ee861681be8660", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1,3 +1,64 @@\n+2017-11-22  Marek Polacek  <polacek@redhat.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60336\n+\tPR middle-end/67239\n+\tPR target/68355\n+\t* g++.dg/abi/empty12.C: New test.\n+\t* g++.dg/abi/empty12.h: New test.\n+\t* g++.dg/abi/empty12a.c: New test.\n+\t* g++.dg/abi/empty13.C: New test.\n+\t* g++.dg/abi/empty13.h: New test.\n+\t* g++.dg/abi/empty13a.c: New test.\n+\t* g++.dg/abi/empty14.C: New test.\n+\t* g++.dg/abi/empty14.h: New test.\n+\t* g++.dg/abi/empty14a.c: New test.\n+\t* g++.dg/abi/empty15.C: New test.\n+\t* g++.dg/abi/empty15.h: New test.\n+\t* g++.dg/abi/empty15a.c: New test.\n+\t* g++.dg/abi/empty16.C: New test.\n+\t* g++.dg/abi/empty16.h: New test.\n+\t* g++.dg/abi/empty16a.c: New test.\n+\t* g++.dg/abi/empty17.C: New test.\n+\t* g++.dg/abi/empty17.h: New test.\n+\t* g++.dg/abi/empty17a.c: New test.\n+\t* g++.dg/abi/empty18.C: New test.\n+\t* g++.dg/abi/empty18.h: New test.\n+\t* g++.dg/abi/empty18a.c: New test.\n+\t* g++.dg/abi/empty19.C: New test.\n+\t* g++.dg/abi/empty19.h: New test.\n+\t* g++.dg/abi/empty19a.c: New test.\n+\t* g++.dg/abi/empty20.C: New test.\n+\t* g++.dg/abi/empty21.C: New test.\n+\t* g++.dg/abi/empty22.C: New test.\n+\t* g++.dg/abi/empty22.h: New test.\n+\t* g++.dg/abi/empty22a.c: New test.\n+\t* g++.dg/abi/empty23.C: New test.\n+\t* g++.dg/abi/empty24.C: New test.\n+\t* g++.dg/abi/empty25.C: New test.\n+\t* g++.dg/abi/empty25.h: New test.\n+\t* g++.dg/abi/empty25a.c: New test.\n+\t* g++.dg/abi/empty26.C: New test.\n+\t* g++.dg/abi/empty26.h: New test.\n+\t* g++.dg/abi/empty26a.c: New test.\n+\t* g++.dg/abi/empty27.C: New test.\n+\t* g++.dg/abi/empty28.C: New test.\n+\t* g++.dg/abi/pr60336-1.C: New test.\n+\t* g++.dg/abi/pr60336-10.C: New test.\n+\t* g++.dg/abi/pr60336-11.C: New test.\n+\t* g++.dg/abi/pr60336-12.C: New test.\n+\t* g++.dg/abi/pr60336-2.C: New test.\n+\t* g++.dg/abi/pr60336-3.C: New test.\n+\t* g++.dg/abi/pr60336-4.C: New test.\n+\t* g++.dg/abi/pr60336-5.C: New test.\n+\t* g++.dg/abi/pr60336-6.C: New test.\n+\t* g++.dg/abi/pr60336-7.C: New test.\n+\t* g++.dg/abi/pr60336-8.C: New test.\n+\t* g++.dg/abi/pr60336-9.C: New test.\n+\t* g++.dg/abi/pr68355.C: New test.\n+\t* g++.dg/lto/pr60336_0.C: New test.\n+\n 2017-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/cmse/mainline/hard-sp/cmse-13.c: Adapt expectations"}, {"sha": "20d85ff873ec6bd11daad7f15537807739b1e011", "filename": "gcc/testsuite/g++.dg/abi/empty12.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty12a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty12.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty12.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "34a25bad75dcf9bd9f92ce2cb0bc914dcd561e74", "filename": "gcc/testsuite/g++.dg/abi/empty12a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty12.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "0cb9a373e358072cc09688dc71a4b9fdd32d77b0", "filename": "gcc/testsuite/g++.dg/abi/empty13.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-x c -fabi-version=11\" }\n+// { dg-additional-sources \"empty13a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty13.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f);\n+  return 0;\n+}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty13.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "b4303a6382606e13f1d8054b26f158558abe9650", "filename": "gcc/testsuite/g++.dg/abi/empty13a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty13.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 == -1)\n+    __builtin_abort();\n+}"}, {"sha": "2868d8ad3f31d526e38bfadc71c5da033d8856ca", "filename": "gcc/testsuite/g++.dg/abi/empty14.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty14a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty14.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "5842279cf370763df124ae8bf5a7639424d9b7fd", "filename": "gcc/testsuite/g++.dg/abi/empty14.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,10 @@\n+struct dummy0 { };\n+struct dummy { struct dummy0 d[140]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "8b3d7800c36566b43a0d78f74e1264e02ca7a44e", "filename": "gcc/testsuite/g++.dg/abi/empty14a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty14.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "12385f78c7895e967c5c6c1c4ade98fbee202a83", "filename": "gcc/testsuite/g++.dg/abi/empty15.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty15a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty15.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "1c6f26f5ae811583d08ec1077668e71c82c1f0f8", "filename": "gcc/testsuite/g++.dg/abi/empty15.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,30 @@\n+struct A1 {};\n+struct A2 {};\n+struct B1 { struct A1 a; struct A2 b; };\n+struct B2 { struct A1 a; struct A2 b; };\n+struct C1 { struct B1 a; struct B2 b; };\n+struct C2 { struct B1 a; struct B2 b; };\n+struct D1 { struct C1 a; struct C2 b; };\n+struct D2 { struct C1 a; struct C2 b; };\n+struct E1 { struct D1 a; struct D2 b; };\n+struct E2 { struct D1 a; struct D2 b; };\n+struct F1 { struct E1 a; struct E2 b; };\n+struct F2 { struct E1 a; struct E2 b; };\n+struct G1 { struct F1 a; struct F2 b; };\n+struct G2 { struct F1 a; struct F2 b; };\n+struct H1 { struct G1 a; struct G2 b; };\n+struct H2 { struct G1 a; struct G2 b; };\n+struct I1 { struct H1 a; struct H2 b; };\n+struct I2 { struct H1 a; struct H2 b; };\n+struct J1 { struct I1 a; struct I2 b; };\n+struct J2 { struct I1 a; struct I2 b; };\n+struct dummy { struct J1 a; struct J2 b; };\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "325b2c5ba09e0ee9e3db17362f3187610e8d2e48", "filename": "gcc/testsuite/g++.dg/abi/empty15a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty15.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "1ca52f9011e6ce661a7dedbb0794ea84e554ea85", "filename": "gcc/testsuite/g++.dg/abi/empty16.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty16a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty16.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "7552ae06576bc70e23fc986c559d6028965a71c2", "filename": "gcc/testsuite/g++.dg/abi/empty16.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,16 @@\n+#ifdef __cplusplus\n+struct A1 {};\n+struct A2 {};\n+struct dummy : A1, A2 {} ;\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "6cb7fbccecc4d59ecb949319db12320224e17333", "filename": "gcc/testsuite/g++.dg/abi/empty16a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty16.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "d386e5481afc866871ae5ecf7b07d9c511fd66a1", "filename": "gcc/testsuite/g++.dg/abi/empty17.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty17a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty17.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "9cf72baca2e1a2f3e632ac6398b0ec1fd61daa9f", "filename": "gcc/testsuite/g++.dg/abi/empty17.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,27 @@\n+#ifdef __cplusplus\n+struct A1\n+{\n+  void foo (void);\n+  unsigned int : 15;\n+};\n+struct A2\n+{\n+  void bar (void);\n+  unsigned int : 15;\n+};\n+struct dummy : A1, A2\n+{\n+  unsigned int : 15;\n+};\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "24408fde09cb20017c486a9600dbe5bac034a765", "filename": "gcc/testsuite/g++.dg/abi/empty17a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty17.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "be69c6a2115b8b4681846ac2884287afd9fd566e", "filename": "gcc/testsuite/g++.dg/abi/empty18.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty18a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty18.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f);\n+  return 0;\n+}"}, {"sha": "86e7ecdd211174e8150d64e11ba4eb7c7b185e00", "filename": "gcc/testsuite/g++.dg/abi/empty18.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { int d[0]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "902860bdc01e72c50ea6505a5a42ab48dc363c2e", "filename": "gcc/testsuite/g++.dg/abi/empty18a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty18.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "84f5b75558bf7f80cd0f9421d4d1198997f3d91b", "filename": "gcc/testsuite/g++.dg/abi/empty19.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty19a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty19.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f);\n+  return 0;\n+}"}, {"sha": "616b87bdd933f4b4ec3fa5f048dd7dc096bc7bb2", "filename": "gcc/testsuite/g++.dg/abi/empty19.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,10 @@\n+struct dummy0 { };\n+struct dummy { struct dummy0 d[0]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "767b1eb73200be8b1e2312a740a71ba18b3eda80", "filename": "gcc/testsuite/g++.dg/abi/empty19a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty19.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "5022033f669cd1e5262cc595e67043147e7650c1", "filename": "gcc/testsuite/g++.dg/abi/empty20.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/60336\n+// { dg-options \"-Wabi=11 -O0\" }\n+\n+struct A { };\n+\n+void f(A, A) { }\t// No warning, trailing parms all empty\n+void f(A, A, int) { }\t// { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+__attribute__ ((always_inline))\n+inline void f(A a, int i) // No warning, always inlined\n+{\n+  f(a,a,i); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}\n+int main()\n+{\n+  A a;\n+  f(a,a);\n+  f(a,a,42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+  f(a,42);\n+}"}, {"sha": "3b2e3b836b1800acd60df645e45e902ca7191cfd", "filename": "gcc/testsuite/g++.dg/abi/empty21.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/60336\n+// { dg-options \"-Wabi=11\" }\n+\n+#include <stdarg.h>\n+\n+struct A { };\n+\n+void f(int i, ...)\n+{\n+  va_list ap;\n+  va_start (ap, i);\n+  if (i >= 1)\n+    va_arg (ap, A);\n+  if (i >= 2)\n+    va_arg (ap, int);\n+}\n+\n+int main()\n+{\n+  f(0);\n+  f(1, A()); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+  f(2, A(), 42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}"}, {"sha": "f4f4a02bf31f5cada7b908b6c93109426bd44718", "filename": "gcc/testsuite/g++.dg/abi/empty22.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty22a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty22.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "8d54dc74519f66c1fdd5d8a9fbf795c810f94b2b", "filename": "gcc/testsuite/g++.dg/abi/empty22.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,27 @@\n+#ifdef __cplusplus\n+struct A1\n+{\n+  void foo (void);\n+  unsigned int : 0;\n+};\n+struct A2\n+{\n+  void bar (void);\n+  unsigned int : 0;\n+};\n+struct dummy : A1, A2\n+{\n+  unsigned int : 0;\n+};\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "7606c5242636179daf72f3bf44e8a2e94a5f2917", "filename": "gcc/testsuite/g++.dg/abi/empty22a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty22.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "dbeda81fb24c8946744640e5f17fdc6fd547d820", "filename": "gcc/testsuite/g++.dg/abi/empty23.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty23.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=11\" }\n+\n+struct S\n+{\n+  struct { } a;\n+  __extension__ int b[0];\n+};\n+\n+struct S s;\n+struct S a[5];\n+\n+void\n+foo (struct S, struct S *arg1, struct S) // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+{\n+  if (arg1 != &a[1])\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (s, &a[1], a[2]); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}"}, {"sha": "822ced1ef50c1d3e09a01a10ffa16dab0043783a", "filename": "gcc/testsuite/g++.dg/abi/empty24.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty24.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=11\" }\n+\n+struct S\n+{\n+  struct { } a;\n+  __extension__ int b[];\n+};\n+\n+struct S s;\n+struct S a[5];\n+\n+void\n+foo (struct S, struct S *arg1, struct S) // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+{\n+  if (arg1 != &a[1])\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (s, &a[1], a[2]); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}"}, {"sha": "da6ef51ff0db2d2b8ca01cc994e667cfc36b9aa1", "filename": "gcc/testsuite/g++.dg/abi/empty25.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty25a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty25.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-bogus \"empty\" }\n+  return 0;\n+}"}, {"sha": "2f22fd5e5054b11a1455de82ed30cec2546dd8a6", "filename": "gcc/testsuite/g++.dg/abi/empty25.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,18 @@\n+#ifdef __cplusplus\n+struct dummy\n+{\n+  virtual void bar (void) { }\n+  unsigned int : 15;\n+};\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "8c16e453c75c30c9ccc65feb096af2a5bf4eb2ed", "filename": "gcc/testsuite/g++.dg/abi/empty25a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty25.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "ab2f54d8dab43b0ca0ce0f57063dfc32308828ed", "filename": "gcc/testsuite/g++.dg/abi/empty26.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-Wabi=11 -x c\" }\n+// { dg-additional-sources \"empty26a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty26.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "8d54dc74519f66c1fdd5d8a9fbf795c810f94b2b", "filename": "gcc/testsuite/g++.dg/abi/empty26.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,27 @@\n+#ifdef __cplusplus\n+struct A1\n+{\n+  void foo (void);\n+  unsigned int : 0;\n+};\n+struct A2\n+{\n+  void bar (void);\n+  unsigned int : 0;\n+};\n+struct dummy : A1, A2\n+{\n+  unsigned int : 0;\n+};\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "bc0ae47ba2c8af6cc7e00e785a34609dd1ba8aba", "filename": "gcc/testsuite/g++.dg/abi/empty26a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26a.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty26.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "5d14e7c6a03226428abdc11c55511eaea073fda4", "filename": "gcc/testsuite/g++.dg/abi/empty27.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty27.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/60336\n+// { dg-do compile }\n+// { dg-options \"-Wabi=12\" }\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};\n+\n+namespace N {\n+  class E { };\n+  void fun (class E, struct foo);\n+}\n+\n+int main()\n+{\n+  N::E d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  N::fun(d, f); // { dg-bogus \"empty\" }\n+  return 0;\n+}"}, {"sha": "7e0765d4468eeb7f69841000eb64b97301a27282", "filename": "gcc/testsuite/g++.dg/abi/empty28.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty28.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/60336\n+// { dg-do compile }\n+// { dg-options \"-Wabi=12\" }\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};\n+\n+struct N {\n+  class E { };\n+  void fun (class E, struct foo) { } // { dg-bogus \"empty\" }\n+};\n+\n+\n+int main()\n+{\n+  struct N n;\n+  N::E d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  n.fun(d, f); // { dg-bogus \"empty\" }\n+  return 0;\n+}"}, {"sha": "59447890cec8b15a19fe34e962cd6b94972155a5", "filename": "gcc/testsuite/g++.dg/abi/pr60336-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } }"}, {"sha": "960cc2307d1df464dd7a0c200c9842225dd69f81", "filename": "gcc/testsuite/g++.dg/abi/pr60336-10.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0 { };\n+struct dummy1 { };\n+struct dummy : dummy0, dummy1 { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "14cd6d0ff3de28961e0e219cd40851413fc020b6", "filename": "gcc/testsuite/g++.dg/abi/pr60336-11.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0\n+{\n+  void bar (void);\n+};\n+struct dummy1\n+{\n+  void foo (void);\n+};\n+struct dummy : dummy0, dummy1 { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "0991754793037ca1c947f3c64ed4746dea7c4f06", "filename": "gcc/testsuite/g++.dg/abi/pr60336-12.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0\n+{\n+};\n+struct dummy1\n+{\n+  unsigned : 15;\n+};\n+struct dummy : dummy0, dummy1\n+{\n+};\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "1c6c3eb8f013870dbd5254cf07100a0517268ccb", "filename": "gcc/testsuite/g++.dg/abi/pr60336-2.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2 -Wabi=11\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy { };\n+\n+void\n+test (struct dummy a, int m, ...) // { dg-warning \"empty\" }\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "4157e553b6b02c8436be0797d37ead637f5ad0e2", "filename": "gcc/testsuite/g++.dg/abi/pr60336-3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wabi=11\" }\n+\n+struct dummy { struct { } __attribute__((aligned (4))) a[7]; };\n+\n+extern void test1 (struct dummy, ...);\n+extern void (*test2) (struct dummy, ...);\n+\n+void\n+foo ()\n+{\n+  struct dummy a0;\n+  test1 (a0, 42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+  test2 (a0, 42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}"}, {"sha": "266f67a537dd49c28c7dc98abdec54f704c5f662", "filename": "gcc/testsuite/g++.dg/abi/pr60336-4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2 -fabi-version=11\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count == 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "fe838750f55698135ce04d8321a0def3c659b947", "filename": "gcc/testsuite/g++.dg/abi/pr60336-5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i; struct dummy j; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } }"}, {"sha": "6e08c8f06fa46fb8ca7bce0f323f25b2d02107bc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i1; struct dummy i2; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } }"}, {"sha": "3b8b8ba6f35040d5b8a4a8fec3ba2d301110cc95", "filename": "gcc/testsuite/g++.dg/abi/pr60336-7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i[120]; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } }"}, {"sha": "a1ffb64ef02aa5587422a699b0aa0dd8eab84dcb", "filename": "gcc/testsuite/g++.dg/abi/pr60336-8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wabi=11\" }\n+\n+struct dummy { struct{} a[7][3]; };\n+\n+extern void test1 (struct dummy, ...);\n+extern void (*test2) (struct dummy, ...);\n+\n+void\n+foo ()\n+{\n+  struct dummy a0;\n+  test1 (a0, 42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+  test2 (a0, 42); // { dg-warning \"ABI\" \"\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+}"}, {"sha": "393f02b62f0c2141c7e706e834efbdd380edfc1f", "filename": "gcc/testsuite/g++.dg/abi/pr60336-9.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct A1 {}; struct A2 {};\n+struct B1 { A1 a; A2 b; }; struct B2 { A1 a; A2 b; };\n+struct C1 { B1 a; B2 b; }; struct C2 { B1 a; B2 b; };\n+struct D1 { C1 a; C2 b; }; struct D2 { C1 a; C2 b; };\n+struct E1 { D1 a; D2 b; }; struct E2 { D1 a; D2 b; };\n+struct F1 { E1 a; E2 b; }; struct F2 { E1 a; E2 b; };\n+struct G1 { F1 a; F2 b; }; struct G2 { F1 a; F2 b; };\n+struct H1 { G1 a; G2 b; }; struct H2 { G1 a; G2 b; };\n+struct I1 { H1 a; H2 b; }; struct I2 { H1 a; H2 b; };\n+struct J1 { I1 a; I2 b; }; struct J2 { I1 a; I2 b; };\n+struct dummy { J1 a; J2 b; };\n+\n+struct true_type { struct dummy i; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } }"}, {"sha": "1354fc497b55b9db41d3d9f6a735dfc52ff8a0be", "filename": "gcc/testsuite/g++.dg/abi/pr68355.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+template<typename _Tp, _Tp __v>\n+struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+  typedef _Tp value_type;\n+  typedef integral_constant<_Tp, __v> type;\n+  constexpr operator value_type() const { return value; }\n+};\n+\n+typedef integral_constant<bool, true> true_type;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  true_type y;\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx17integral_constantIbLb1EE\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "a0a598c00290a8c6a9eb01578a489dcd86ae7c71", "filename": "gcc/testsuite/g++.dg/lto/pr60336_0.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr60336_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr60336_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr60336_0.C?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -0,0 +1,47 @@\n+// { dg-lto-do run }\n+\n+#include <stdarg.h>\n+\n+struct dummy { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "4f9c6c7be63a30d1615fc7bdf7cedf773e10188e", "filename": "gcc/tree-core.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -1532,7 +1532,8 @@ struct GTY(()) tree_type_common {\n   unsigned align : 6;\n   unsigned warn_if_not_align : 6;\n   unsigned typeless_storage : 1;\n-  unsigned spare : 18;\n+  unsigned empty_flag : 1;\n+  unsigned spare : 17;\n \n   alias_set_type alias_set;\n   tree pointer_to;\n@@ -1610,7 +1611,8 @@ struct GTY(()) tree_decl_common {\n   unsigned lang_flag_7 : 1;\n   unsigned lang_flag_8 : 1;\n \n-  /* In VAR_DECL and PARM_DECL, this is DECL_REGISTER.  */\n+  /* In VAR_DECL and PARM_DECL, this is DECL_REGISTER\n+     IN TRANSLATION_UNIT_DECL, this is TRANSLATION_UNIT_WARN_EMPTY_P.  */\n   unsigned decl_flag_0 : 1;\n   /* In FIELD_DECL, this is DECL_BIT_FIELD\n      In VAR_DECL and FUNCTION_DECL, this is DECL_EXTERNAL.\n@@ -1620,7 +1622,7 @@ struct GTY(()) tree_decl_common {\n      In VAR_DECL, PARM_DECL and RESULT_DECL, this is\n      DECL_HAS_VALUE_EXPR_P.  */\n   unsigned decl_flag_2 : 1;\n-  /* 1 bit unused.  */\n+  /* In FIELD_DECL, this is DECL_PADDING_P.  */\n   unsigned decl_flag_3 : 1;\n   /* Logically, these two would go in a theoretical base shared by var and\n      parm decl. */"}, {"sha": "36402c6a39c75a9375fb1b8e79fef7527bed9a42", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -251,6 +251,7 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n     {\n       DECL_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n       DECL_NONADDRESSABLE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      DECL_PADDING_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n       expr->decl_common.off_align = bp_unpack_value (bp, 8);\n     }\n \n@@ -381,6 +382,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     TYPE_NONALIASED_COMPONENT (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (AGGREGATE_TYPE_P (expr))\n     TYPE_TYPELESS_STORAGE (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_EMPTY_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   SET_TYPE_ALIGN (expr, bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER"}, {"sha": "08c58a4709d92365164b08ee8f170db9797414f4", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -211,6 +211,7 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n     {\n       bp_pack_value (bp, DECL_PACKED (expr), 1);\n       bp_pack_value (bp, DECL_NONADDRESSABLE_P (expr), 1);\n+      bp_pack_value (bp, DECL_PADDING_P (expr), 1);\n       bp_pack_value (bp, expr->decl_common.off_align, 8);\n     }\n \n@@ -330,6 +331,7 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n     bp_pack_value (bp, TYPE_NONALIASED_COMPONENT (expr), 1);\n   if (AGGREGATE_TYPE_P (expr))\n     bp_pack_value (bp, TYPE_TYPELESS_STORAGE (expr), 1);\n+  bp_pack_value (bp, TYPE_EMPTY_P (expr), 1);\n   bp_pack_var_len_unsigned (bp, TYPE_PRECISION (expr));\n   bp_pack_var_len_unsigned (bp, TYPE_ALIGN (expr));\n }"}, {"sha": "7efd644fb2753c7e1333d083b035ae1fcd1e17ee", "filename": "gcc/tree.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -8712,6 +8712,21 @@ get_containing_scope (const_tree t)\n   return (TYPE_P (t) ? TYPE_CONTEXT (t) : DECL_CONTEXT (t));\n }\n \n+/* Returns the ultimate TRANSLATION_UNIT_DECL context of DECL or NULL.  */\n+\n+const_tree\n+get_ultimate_context (const_tree decl)\n+{\n+  while (decl && TREE_CODE (decl) != TRANSLATION_UNIT_DECL)\n+    {\n+      if (TREE_CODE (decl) == BLOCK)\n+\tdecl = BLOCK_SUPERCONTEXT (decl);\n+      else\n+\tdecl = get_containing_scope (decl);\n+    }\n+  return decl;\n+}\n+\n /* Return the innermost context enclosing DECL that is\n    a FUNCTION_DECL, or zero if none.  */\n \n@@ -13822,6 +13837,62 @@ get_nonnull_args (const_tree fntype)\n   return argmap;\n }\n \n+/* Returns true if TYPE is a type where it and all of its subobjects\n+   (recursively) are of structure, union, or array type.  */\n+\n+static bool\n+default_is_empty_type (tree type)\n+{\n+  if (RECORD_OR_UNION_TYPE_P (type))\n+    {\n+      for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+\tif (TREE_CODE (field) == FIELD_DECL\n+\t    && !DECL_PADDING_P (field)\n+\t    && !default_is_empty_type (TREE_TYPE (field)))\n+\t  return false;\n+      return true;\n+    }\n+  else if (TREE_CODE (type) == ARRAY_TYPE)\n+    return (integer_minus_onep (array_type_nelts (type))\n+\t    || TYPE_DOMAIN (type) == NULL_TREE\n+\t    || default_is_empty_type (TREE_TYPE (type)));\n+  return false;\n+}\n+\n+/* Implement TARGET_EMPTY_RECORD_P.  Return true if TYPE is an empty type\n+   that shouldn't be passed via stack.  */\n+\n+bool\n+default_is_empty_record (const_tree type)\n+{\n+  if (!abi_version_at_least (12))\n+    return false;\n+\n+  if (type == error_mark_node)\n+    return false;\n+\n+  if (TREE_ADDRESSABLE (type))\n+    return false;\n+\n+  return default_is_empty_type (TYPE_MAIN_VARIANT (type));\n+}\n+\n+/* Like int_size_in_bytes, but handle empty records specially.  */\n+\n+HOST_WIDE_INT\n+arg_int_size_in_bytes (const_tree type)\n+{\n+  return TYPE_EMPTY_P (type) ? 0 : int_size_in_bytes (type);\n+}\n+\n+/* Like size_in_bytes, but handle empty records specially.  */\n+\n+tree\n+arg_size_in_bytes (const_tree type)\n+{\n+  return TYPE_EMPTY_P (type) ? size_zero_node : size_in_bytes (type);\n+}\n+\n /* List of pointer types used to declare builtins before we have seen their\n    real declaration.\n "}, {"sha": "c2cabfc752938097590c695987aaf54cdea983e1", "filename": "gcc/tree.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974aedcce8d3eb6d46493c1e597b75743cb4c3db/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=974aedcce8d3eb6d46493c1e597b75743cb4c3db", "patch": "@@ -696,6 +696,14 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    emitted.  */\n #define TREE_NO_WARNING(NODE) ((NODE)->base.nowarning_flag)\n \n+/* Nonzero if we should warn about the change in empty class parameter\n+   passing ABI in this TU.  */\n+#define TRANSLATION_UNIT_WARN_EMPTY_P(NODE) \\\n+  (TRANSLATION_UNIT_DECL_CHECK (NODE)->decl_common.decl_flag_0)\n+\n+/* Nonzero if this type is \"empty\" according to the particular psABI.  */\n+#define TYPE_EMPTY_P(NODE) (TYPE_CHECK (NODE)->type_common.empty_flag)\n+\n /* Used to indicate that this TYPE represents a compiler-generated entity.  */\n #define TYPE_ARTIFICIAL(NODE) (TYPE_CHECK (NODE)->base.nowarning_flag)\n \n@@ -2619,6 +2627,10 @@ extern void decl_value_expr_insert (tree, tree);\n #define DECL_NONADDRESSABLE_P(NODE) \\\n   (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_2)\n \n+/* Used in a FIELD_DECL to indicate that this field is padding.  */\n+#define DECL_PADDING_P(NODE) \\\n+  (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_3)\n+\n /* A numeric unique identifier for a LABEL_DECL.  The UID allocation is\n    dense, unique within any one function, and may be used to index arrays.\n    If the value is -1, then no UID has been assigned.  */\n@@ -4515,6 +4527,10 @@ storage_order_barrier_p (const_tree t)\n \n extern tree get_containing_scope (const_tree);\n \n+/* Returns the ultimate TRANSLATION_UNIT_DECL context of DECL or NULL.  */\n+\n+extern const_tree get_ultimate_context (const_tree);\n+\n /* Return the FUNCTION_DECL which provides this _DECL with its context,\n    or zero if none.  */\n extern tree decl_function_context (const_tree);\n@@ -5438,6 +5454,9 @@ extern void gt_pch_nx (tree &, gt_pointer_operator, void *);\n \n extern bool nonnull_arg_p (const_tree);\n extern bool is_redundant_typedef (const_tree);\n+extern bool default_is_empty_record (const_tree);\n+extern HOST_WIDE_INT arg_int_size_in_bytes (const_tree);\n+extern tree arg_size_in_bytes (const_tree);\n \n extern location_t\n set_source_range (tree expr, location_t start, location_t finish);"}]}