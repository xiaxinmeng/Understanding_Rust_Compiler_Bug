{"sha": "a94c94be24475b20cc1af6b3a01b9fd683486e6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0Yzk0YmUyNDQ3NWIyMGNjMWFmNmIzYTAxYjlmZDY4MzQ4NmU2Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-07T03:05:31Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-06-07T03:05:31Z"}, "message": "cpplib.c (init_parse_option): Renamed to cpp_options_init.\n\n* cpplib.c (init_parse_option):  Renamed to cpp_options_init.\n(push_parse_file):  Renamed to ...\n(cpp_start_read):  Change to return 1 on success, 0 on failure.\n(init_parse_file):  Renamed to cpp_reader_init.\n* cpplib.c (cpp_start_read, cpp_handle_options, cpp_finish,\nparse_goto_mark, parse_move_mark):  Use cpp_fatal rather than fatal.\n* cpplib.c (newline_fix):  Remove unused function.\n\nFrom-SVN: r12202", "tree": {"sha": "f72eebeb316612facc19f2e4507470095a4b07f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72eebeb316612facc19f2e4507470095a4b07f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a94c94be24475b20cc1af6b3a01b9fd683486e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94c94be24475b20cc1af6b3a01b9fd683486e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94c94be24475b20cc1af6b3a01b9fd683486e6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94c94be24475b20cc1af6b3a01b9fd683486e6c/comments", "author": null, "committer": null, "parents": [{"sha": "05a2b36fade742f173f9def1be59388c9ffcd3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a2b36fade742f173f9def1be59388c9ffcd3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a2b36fade742f173f9def1be59388c9ffcd3fa"}], "stats": {"total": 116, "additions": 56, "deletions": 60}, "files": [{"sha": "6746b1cf00407f87fc7d5b74e0787fa055277ebc", "filename": "gcc/cpplib.c", "status": "modified", "additions": 56, "deletions": 60, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94c94be24475b20cc1af6b3a01b9fd683486e6c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94c94be24475b20cc1af6b3a01b9fd683486e6c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=a94c94be24475b20cc1af6b3a01b9fd683486e6c", "patch": "@@ -771,8 +771,8 @@ path_include (pfile, path)\n }\n \f\n void\n-init_parse_options (opts)\n-     struct cpp_options *opts;\n+cpp_options_init (opts)\n+     cpp_options *opts;\n {\n   bzero ((char *) opts, sizeof *opts);\n   opts->in_fname = NULL;\n@@ -845,40 +845,6 @@ file_cleanup (pbuf, pfile)\n   return 0;\n }\n \n-static void\n-newline_fix (pfile)\n-     cpp_reader *pfile;\n-{\n-#if 1\n-  NEWLINE_FIX;\n-#else\n-  register U_CHAR *p = bp;\n-\n-  /* First count the backslash-newline pairs here.  */\n-\n-  while (p[0] == '\\\\' && p[1] == '\\n')\n-    p += 2;\n-\n-  /* What follows the backslash-newlines is not embarrassing.  */\n-\n-  if (*p != '/' && *p != '*')\n-    return;\n-\n-  /* Copy all potentially embarrassing characters\n-     that follow the backslash-newline pairs\n-     down to where the pairs originally started.  */\n-\n-  while (*p == '*' || *p == '/')\n-    *bp++ = *p++;\n-\n-  /* Now write the same number of pairs after the embarrassing chars.  */\n-  while (bp < p) {\n-    *bp++ = '\\\\';\n-    *bp++ = '\\n';\n-  }\n-#endif\n-}\n-\n /* Assuming we have read '/'.\n    If this is the start of a comment (followed by '*' or '/'),\n    skip to the end of the comment, and return ' '.\n@@ -1885,7 +1851,6 @@ struct argdata {\n   char use_count;\n };\n \n-\n /* Allocate a new cpp_buffer for PFILE, and push it on the input buffer stack.\n    If BUFFER != NULL, then use the LENGTH characters in BUFFER\n    as the new input buffer.\n@@ -5678,8 +5643,14 @@ finclude (pfile, f, fname, system_header_p, dirptr)\n   return 1;\n }\n \n+/* This is called after options have been processed.\n+ * Check options for consistency, and setup for processing input\n+ * from the file named FNAME.  (Use standard input if FNAME==NULL.)\n+ * Return 1 on succes, 0 on failure.\n+ */\n+\n int\n-push_parse_file (pfile, fname)\n+cpp_start_read (pfile, fname)\n      cpp_reader *pfile;\n      char *fname;\n {\n@@ -5972,7 +5943,7 @@ push_parse_file (pfile, fname)\n \t  if (fd < 0)\n \t    {\n \t      cpp_perror_with_name (pfile, pend->arg);\n-\t      return FATAL_EXIT_CODE;\n+\t      return 0;\n \t    }\n \t  cpp_push_buffer (pfile, NULL, 0);\n \t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n@@ -5994,7 +5965,10 @@ push_parse_file (pfile, fname)\n      inhibit compilation.  */\n   if (opts->print_deps_missing_files\n       && (opts->print_deps == 0 || !opts->no_output))\n-    fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n+    {\n+      cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n+      return 0;\n+    }\n \n   /* Either of two environment variables can specify output of deps.\n      Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n@@ -6137,7 +6111,7 @@ push_parse_file (pfile, fname)\n \t  if (fd < 0)\n \t    {\n \t      cpp_perror_with_name (pfile, pend->arg);\n-\t      return FATAL_EXIT_CODE;\n+\t      return 0;\n \t    }\n \t  cpp_push_buffer (pfile, NULL, 0);\n \t  finclude (pfile, fd, pend->arg, 0, NULL_PTR);\n@@ -6168,11 +6142,11 @@ push_parse_file (pfile, fname)\n #endif\n   if (finclude (pfile, f, fname, 0, NULL_PTR))\n     output_line_command (pfile, 0, same_file);\n-  return SUCCESS_EXIT_CODE;\n+  return 1;\n }\n \n void\n-init_parse_file (pfile)\n+cpp_reader_init (pfile)\n      cpp_reader *pfile;\n {\n   bzero ((char *) pfile, sizeof (cpp_reader));\n@@ -6236,25 +6210,35 @@ cpp_handle_options (pfile, argc, argv)\n   for (i = 0; i < argc; i++) {\n     if (argv[i][0] != '-') {\n       if (opts->out_fname != NULL)\n-\tfatal (\"Usage: %s [switches] input output\", argv[0]);\n+\t{\n+\t  cpp_fatal (pfile, \"Usage: %s [switches] input output\", argv[0]);\n+\t  return argc;\n+\t}\n       else if (opts->in_fname != NULL)\n \topts->out_fname = argv[i];\n       else\n \topts->in_fname = argv[i];\n     } else {\n       switch (argv[i][1]) {\n \n+      missing_filename:\n+\tcpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n+\treturn argc;\n+      missing_dirname:\n+\tcpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n+\treturn argc;\n+\n       case 'i':\n \tif (!strcmp (argv[i], \"-include\")\n \t    || !strcmp (argv[i], \"-imacros\")) {\n \t  if (i + 1 == argc)\n-\t    fatal (\"Filename missing after `%s' option\", argv[i]);\n+\t    goto missing_filename;\n \t  else\n \t    push_pending (pfile, argv[i], argv[i+1]), i++;\n \t}\n \tif (!strcmp (argv[i], \"-iprefix\")) {\n \t  if (i + 1 == argc)\n-\t    fatal (\"Filename missing after `-iprefix' option\");\n+\t    goto missing_filename;\n \t  else\n \t    opts->include_prefix = argv[++i];\n \t}\n@@ -6265,7 +6249,7 @@ cpp_handle_options (pfile, argc, argv)\n \t  struct file_name_list *dirtmp;\n \n \t  if (i + 1 == argc)\n-\t    fatal (\"Filename missing after `-isystem' option\");\n+\t    goto missing_filename;\n \n \t  dirtmp = (struct file_name_list *)\n \t    xmalloc (sizeof (struct file_name_list));\n@@ -6303,7 +6287,7 @@ cpp_handle_options (pfile, argc, argv)\n \t  dirtmp->control_macro = 0;\n \t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n-\t    fatal (\"Directory name missing after `-iwithprefix' option\");\n+\t    goto missing_dirname;\n \n \t  dirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n \t\t\t\t\t    + strlen (prefix) + 1);\n@@ -6338,7 +6322,7 @@ cpp_handle_options (pfile, argc, argv)\n \t  dirtmp->control_macro = 0;\n \t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n-\t    fatal (\"Directory name missing after `-iwithprefixbefore' option\");\n+\t    goto missing_dirname;\n \n \t  dirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n \t\t\t\t\t    + strlen (prefix) + 1);\n@@ -6358,7 +6342,7 @@ cpp_handle_options (pfile, argc, argv)\n \t  dirtmp->control_macro = 0;\n \t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n-\t    fatal (\"Directory name missing after `-idirafter' option\");\n+\t    goto missing_dirname;\n \t  else\n \t    dirtmp->fname = argv[++i];\n \t  dirtmp->got_name_map = 0;\n@@ -6373,9 +6357,12 @@ cpp_handle_options (pfile, argc, argv)\n \n       case 'o':\n \tif (opts->out_fname != NULL)\n-\t  fatal (\"Output filename specified twice\");\n+\t  {\n+\t    cpp_fatal (pfile, \"Output filename specified twice\");\n+\t    return argc;\n+\t  }\n \tif (i + 1 == argc)\n-\t  fatal (\"Filename missing after -o option\");\n+\t  goto missing_filename;\n \topts->out_fname = argv[++i];\n \tif (!strcmp (opts->out_fname, \"-\"))\n \t  opts->out_fname = \"\";\n@@ -6503,7 +6490,7 @@ cpp_handle_options (pfile, argc, argv)\n \tif (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n \t  {\n \t    if (i+1 == argc)\n-\t      fatal (\"Filename missing after %s option\", argv[i]);\n+\t      goto missing_filename;\n \t    opts->deps_file = argv[++i];\n \t  }\n \telse\n@@ -6558,7 +6545,10 @@ cpp_handle_options (pfile, argc, argv)\n \tif (argv[i][2] != 0)\n \t  push_pending (pfile, \"-D\", argv[i] + 2);\n \telse if (i + 1 == argc)\n-\t  fatal (\"Macro name missing after -D option\");\n+\t  {\n+\t    cpp_fatal (pfile, \"Macro name missing after -D option\");\n+\t    return argc;\n+\t  }\n \telse\n \t  i++, push_pending (pfile, \"-D\", argv[i]);\n \tbreak;\n@@ -6570,7 +6560,10 @@ cpp_handle_options (pfile, argc, argv)\n \t  if (argv[i][2] != 0)\n \t    p = argv[i] + 2;\n \t  else if (i + 1 == argc)\n-\t    fatal (\"Assertion missing after -A option\");\n+\t    {\n+\t      cpp_fatal (pfile, \"Assertion missing after -A option\");\n+\t      return argc;\n+\t    }\n \t  else\n \t    p = argv[++i];\n \n@@ -6604,7 +6597,10 @@ cpp_handle_options (pfile, argc, argv)\n \tif (argv[i][2] != 0)\n \t  push_pending (pfile, \"-U\", argv[i] + 2);\n \telse if (i + 1 == argc)\n-\t  fatal (\"Macro name missing after -U option\");\n+\t  {\n+\t    cpp_fatal (pfile, \"Macro name missing after -U option\", NULL);\n+\t    return argc;\n+\t  }\n \telse\n \t  push_pending (pfile, \"-U\", argv[i+1]), i++;\n \tbreak;\n@@ -6643,7 +6639,7 @@ cpp_handle_options (pfile, argc, argv)\n \t    if (argv[i][2] != 0)\n \t      dirtmp->fname = argv[i] + 2;\n \t    else if (i + 1 == argc)\n-\t      fatal (\"Directory name missing after -I option\");\n+\t      goto missing_dirname;\n \t    else\n \t      dirtmp->fname = argv[++i];\n \t    dirtmp->got_name_map = 0;\n@@ -6713,7 +6709,7 @@ cpp_finish (pfile)\n \t  if (opts->deps_file)\n \t    {\n \t      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n-\t\tfatal (\"I/O error on output\");\n+\t\tcpp_fatal (pfile, \"I/O error on output\");\n \t    }\n \t}\n     }\n@@ -7218,7 +7214,7 @@ parse_goto_mark (pmark, pfile)\n {\n   cpp_buffer *pbuf = CPP_BUFFER (pfile);\n   if (pbuf != pmark->buf)\n-    fatal (\"internal error %s\", \"parse_goto_mark\");\n+    cpp_fatal (pfile, \"internal error %s\", \"parse_goto_mark\");\n   pbuf->cur = pbuf->buf + pmark->position;\n }\n \n@@ -7232,7 +7228,7 @@ parse_move_mark (pmark, pfile)\n {\n   cpp_buffer *pbuf = CPP_BUFFER (pfile);\n   if (pbuf != pmark->buf)\n-    fatal (\"internal error %s\", \"parse_move_mark\");\n+    cpp_fatal (pfile, \"internal error %s\", \"parse_move_mark\");\n   pmark->position = pbuf->cur - pbuf->buf;\n }\n "}]}