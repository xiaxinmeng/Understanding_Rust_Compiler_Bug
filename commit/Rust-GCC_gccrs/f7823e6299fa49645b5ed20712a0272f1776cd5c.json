{"sha": "f7823e6299fa49645b5ed20712a0272f1776cd5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4MjNlNjI5OWZhNDk2NDViNWVkMjA3MTJhMDI3MmYxNzc2Y2Q1Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-12T17:16:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-11T09:53:31Z"}, "message": "[Ada] Add fallback on Integer_Arithmetic\n\n2020-06-11  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-aoinar.adb (Atomic_Fetch_And_Add,\n\tAtomic_Fetch_And_Subtract): Add fallback using\n\tcompare-and-exchange, in case the integer type does not map to a\n\tmachine type.", "tree": {"sha": "32fda3f98a61ae1ed8e738b9631d095ce1658bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32fda3f98a61ae1ed8e738b9631d095ce1658bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7823e6299fa49645b5ed20712a0272f1776cd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7823e6299fa49645b5ed20712a0272f1776cd5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7823e6299fa49645b5ed20712a0272f1776cd5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7823e6299fa49645b5ed20712a0272f1776cd5c/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cff672cb9a132d3d3158c2edfc9a64b55292b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cff672cb9a132d3d3158c2edfc9a64b55292b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cff672cb9a132d3d3158c2edfc9a64b55292b80"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "b05134faa59e2cdbd8b8bf650913e460363237a4", "filename": "gcc/ada/libgnat/s-aoinar.adb", "status": "modified", "additions": 75, "deletions": 14, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7823e6299fa49645b5ed20712a0272f1776cd5c/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7823e6299fa49645b5ed20712a0272f1776cd5c/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb?ref=f7823e6299fa49645b5ed20712a0272f1776cd5c", "patch": "@@ -30,10 +30,13 @@\n ------------------------------------------------------------------------------\n \n with System.Atomic_Primitives; use System.Atomic_Primitives;\n+with System.Atomic_Operations.Exchange;\n with Interfaces.C;\n \n package body System.Atomic_Operations.Integer_Arithmetic is\n \n+   package Exchange is new System.Atomic_Operations.Exchange (Atomic_Type);\n+\n    ----------------\n    -- Atomic_Add --\n    ----------------\n@@ -88,13 +91,42 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n       pragma Warnings (On);\n \n    begin\n-      case Atomic_Type'Object_Size is\n-         when 8      => return Atomic_Fetch_Add_1 (Item'Address, Value);\n-         when 16     => return Atomic_Fetch_Add_2 (Item'Address, Value);\n-         when 32     => return Atomic_Fetch_Add_4 (Item'Address, Value);\n-         when 64     => return Atomic_Fetch_Add_8 (Item'Address, Value);\n-         when others => raise Program_Error;\n-      end case;\n+      --  Use the direct intrinsics when possible, and fallback to\n+      --  compare-and-exchange otherwise.\n+\n+      if Atomic_Type'Base'Last = Atomic_Type'Last\n+        and then Atomic_Type'Base'First = Atomic_Type'First\n+        and then Atomic_Type'Last\n+                  in 2 ** 7 - 1 | 2 ** 15 - 1 | 2 ** 31 - 1 | 2 ** 63 - 1\n+      then\n+         case Long_Long_Integer (Atomic_Type'Last) is\n+            when 2 ** 7 - 1  =>\n+               return Atomic_Fetch_Add_1 (Item'Address, Value);\n+            when 2 ** 15 - 1 =>\n+               return Atomic_Fetch_Add_2 (Item'Address, Value);\n+            when 2 ** 31 - 1 =>\n+               return Atomic_Fetch_Add_4 (Item'Address, Value);\n+            when 2 ** 63 - 1 =>\n+               return Atomic_Fetch_Add_8 (Item'Address, Value);\n+            when others      =>\n+               raise Program_Error;\n+         end case;\n+      else\n+         declare\n+            Old_Value : aliased Atomic_Type := Item;\n+            New_Value : Atomic_Type := Old_Value + Value;\n+         begin\n+            --  Keep iterating until the exchange succeeds\n+\n+            while not Exchange.Atomic_Compare_And_Exchange\n+                        (Item, Old_Value, New_Value)\n+            loop\n+               New_Value := Old_Value + Value;\n+            end loop;\n+\n+            return Old_Value;\n+         end;\n+      end if;\n    end Atomic_Fetch_And_Add;\n \n    -------------------------------\n@@ -125,13 +157,42 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n       pragma Warnings (On);\n \n    begin\n-      case Atomic_Type'Object_Size is\n-         when 8      => return Atomic_Fetch_Sub_1 (Item'Address, Value);\n-         when 16     => return Atomic_Fetch_Sub_2 (Item'Address, Value);\n-         when 32     => return Atomic_Fetch_Sub_4 (Item'Address, Value);\n-         when 64     => return Atomic_Fetch_Sub_8 (Item'Address, Value);\n-         when others => raise Program_Error;\n-      end case;\n+      --  Use the direct intrinsics when possible, and fallback to\n+      --  compare-and-exchange otherwise.\n+\n+      if Atomic_Type'Base'Last = Atomic_Type'Last\n+        and then Atomic_Type'Base'First = Atomic_Type'First\n+        and then Atomic_Type'Last\n+                  in 2 ** 7 - 1 | 2 ** 15 - 1 | 2 ** 31 - 1 | 2 ** 63 - 1\n+      then\n+         case Long_Long_Integer (Atomic_Type'Last) is\n+            when 2 ** 7 - 1  =>\n+               return Atomic_Fetch_Sub_1 (Item'Address, Value);\n+            when 2 ** 15 - 1 =>\n+               return Atomic_Fetch_Sub_2 (Item'Address, Value);\n+            when 2 ** 31 - 1 =>\n+               return Atomic_Fetch_Sub_4 (Item'Address, Value);\n+            when 2 ** 63 - 1 =>\n+               return Atomic_Fetch_Sub_8 (Item'Address, Value);\n+            when others      =>\n+               raise Program_Error;\n+         end case;\n+      else\n+         declare\n+            Old_Value : aliased Atomic_Type := Item;\n+            New_Value : Atomic_Type := Old_Value - Value;\n+         begin\n+            --  Keep iterating until the exchange succeeds\n+\n+            while not Exchange.Atomic_Compare_And_Exchange\n+                        (Item, Old_Value, New_Value)\n+            loop\n+               New_Value := Old_Value - Value;\n+            end loop;\n+\n+            return Old_Value;\n+         end;\n+      end if;\n    end Atomic_Fetch_And_Subtract;\n \n    ------------------"}]}