{"sha": "57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjZDJlYTE0MDRjZmNhMjVmZDE4OGRmYjUzMGNjM2YyMzY2MWZlNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-01-13T22:37:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-01-13T22:37:01Z"}, "message": "Eliminated install-cross-tools\n\nFrom-SVN: r3226", "tree": {"sha": "392657161c3a54fd72f6512956e8fbd02f9535cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/392657161c3a54fd72f6512956e8fbd02f9535cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cd2ea1404cfca25fd188dfb530cc3f23661fe5/comments", "author": null, "committer": null, "parents": [{"sha": "de6cbba6ea41f2df3e5347b98ca4ed9442666363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6cbba6ea41f2df3e5347b98ca4ed9442666363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6cbba6ea41f2df3e5347b98ca4ed9442666363"}], "stats": {"total": 68, "additions": 5, "deletions": 63}, "files": [{"sha": "809a7bde582cd018da8a50ef83cabaf524d1c1ee", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cd2ea1404cfca25fd188dfb530cc3f23661fe5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cd2ea1404cfca25fd188dfb530cc3f23661fe5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "patch": "@@ -96,7 +96,7 @@ GCC_FOR_TARGET = ./xgcc -B./\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n # It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n-GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(CROSS_GCC_CFLAGS)\n+GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n \n # Special flags for compiling enquire.\n # We disable optimization to make floating point more reliable.\n@@ -112,7 +112,6 @@ AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar\n AR_FOR_TARGET_FLAGS = rc\n RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib\n RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]\n-CROSS_TOOLS =\n \n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n@@ -541,7 +540,7 @@ libgcc1.conv: libgcc1.a\n \n # Use this as value of LIBGCC1 to inhibit use of libgcc1.c entirely.\n # Make an empty file instead.\n-libgcc1.null: $(CROSS_TOOLS) $(GCC_PASSES)\n+libgcc1.null: $(GCC_PASSES)\n \techo \"__foo () {}\" > dummy.c\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) -c dummy.c\n \t$(OLDAR) $(OLDAR_FLAGS) libgcc1.null dummy.o\n@@ -602,10 +601,7 @@ libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status\n # Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.\n # But recompiling cc1 should not force recompilation of libgcc2.a.\n # If you want to force recompilation, delete libgcc2.a.\n-# Depend on install-cross-tools to make sure we set up properly \n-# to run the assembler before we try compiling anything.\n-# install-cross-tools does nothing if not cross compiling.\n-libgcc2.ready: $(GCC_PASSES) $(CROSS_TOOLS)\n+libgcc2.ready: $(GCC_PASSES)\n \t-if [ -f libgcc2.ready ] ; then \\\n \t\ttrue; \\\n \telse \\\n@@ -1369,61 +1365,14 @@ install-native: install-common install-libgcc $(INSTALL_HEADERS) \\\n \n # Copy the files of cross compiler into directories where they will be run.\n install-cross: install-common install-common-headers \\\n-   install-man install-cross-tools install-libgcc\n+   install-man install-libgcc\n \n # Do nothing while making gcc with a cross-compiler. The person who\n # makes gcc for the target machine has to know how to put a complete\n # gcc together by hand.\n install-build: force\n \t@echo You have to install gcc on your target machine by hand.\n \n-# Install the tools, libraries and header files for the target machine\n-# where cross-compilation will look for them.\n-# Use tooldir to find them.\n-install-cross-tools: install-dir\n-# The first if makes this a no-op except for a cross compiler.\n-# The /. after the dirname causes test to follow symlinks.\n-# Before making a link or an indirection script, \n-# we verify the desired file does not already exist.\n-# If a symlink does exist, then making a symlink would certainly fail, \n-# leading us to overwrite the real file through the symlink.\n-\t-if [ -f gcc-cross ] ; \\\n-\tthen \\\n-\t  if [ -d $(tooldir)/. ] ; \\\n-\t  then \\\n-\t    for file in as $(REAL_LD_NAME) ar nm ranlib; do \\\n-\t      if [ -f $(libsubdir)/$$file ] ; \\\n-\t      then true; \\\n-\t      else  \\\n-\t\trm -rf $(libsubdir)/$$file; \\\n-\t\t$(SYMLINK) $(tooldir)/bin/$$file $(libsubdir)/$$file \\\n-\t\t|| (echo \"#!/bin/sh\"; echo $(tooldir)/bin/$$file \"$$@\") > $(libsubdir)/$$file; \\\n-\t      fi; \\\n-\t    done; \\\n-\t    for file in $(tooldir)/lib/*; do \\\n-\t      if [ -f $$file ] ; \\\n-\t      then \\\n-\t\tif [ -f $(libsubdir)/`basename $$file` ] ; \\\n-\t\tthen true; \\\n-\t\telse  \\\n-\t\t  rm -rf $(libsubdir)/`basename $$file`; \\\n-\t\t  $(SYMLINK) $$file $(libsubdir)/`basename $$file` \\\n-\t\t  || $(INSTALL_DATA) $$file $(libsubdir)/`basename $$file`; \\\n-\t\tfi; \\\n-\t      else true; \\\n-\t      fi; \\\n-\t    done; \\\n-\t    if [ -d $(tooldir)/include/. ] ; then \\\n-\t      rm -rf $(libsubdir)/sys-include; \\\n-\t      $(SYMLINK) $(tooldir)/include $(libsubdir)/sys-include \\\n-\t      || (if [ -d $(libsubdir)/sys-include ] ; then true ; else mkdir $(libsubdir)/sys-include ; fi; \\\n-\t\t  (cd $(tooldir)/include; tar cf - .) | (cd $(libsubdir)/sys-include; tar xpf -)); \\\n-\t    else true; fi; \\\n-\t  else true; \\\n-\t  fi; \\\n-\telse true; \\\n-\tfi;\n-\n # Run this on the target machine\n # to finish installation of cross compiler.\n install-cross-rest: install-float-h-cross"}, {"sha": "5af66f0363eea86a0c52378c8e01a74859e2156f", "filename": "gcc/cross-make", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cd2ea1404cfca25fd188dfb530cc3f23661fe5/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cd2ea1404cfca25fd188dfb530cc3f23661fe5/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=57cd2ea1404cfca25fd188dfb530cc3f23661fe5", "patch": "@@ -1,6 +1,3 @@\n-# This variable gets added to GCC_CFLAGS.\n-CROSS_GCC_CFLAGS = -B$(tooldir)/bin/\n-\n # Expect user to provide libgcc1.a,\n # and give up immediately if the user has not done so.\n LIBGCC1 = libgcc1.cross\n@@ -13,12 +10,8 @@ OLDAR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n RANLIB = $(RANLIB_FOR_TARGET)\n RANLIB_TEST = $(RANLIB_TEST_FOR_TARGET)\n \n-# Cause installation of the cross-compilation tools\n-# before we try to build libgcc.a.\n-CROSS_TOOLS = install-cross-tools\n-\n # Dir to search for system headers.  Normally /usr/include.\n-SYSTEM_HEADER_DIR = $(libsubdir)/sys-include\n+SYSTEM_HEADER_DIR = $(tooldir)/include\n \n # Cause installation using install-cross.\n INSTALL_TARGET = install-cross"}]}