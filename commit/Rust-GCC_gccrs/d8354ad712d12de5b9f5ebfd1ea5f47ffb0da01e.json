{"sha": "d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzNTRhZDcxMmQxMmRlNWI5ZjVlYmZkMWVhNWY0N2ZmYjBkYTAxZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-24T11:37:34Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-24T11:37:34Z"}, "message": "[AArch64][4/5] Implement fusion of ARDP+LDR\n\n\t* config/aarch64/aarch64.c (AARCH64_FUSE_ADRP_LDR): Define.\n\t(cortexa53_tunings): Specify AARCH64_FUSE_ADRP_LDR in fuseable_ops.\n\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_ADRP_LDR.\n\nFrom-SVN: r218014", "tree": {"sha": "aa17303c7e2d2d4da3b47ab67c5f9d78024a20d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa17303c7e2d2d4da3b47ab67c5f9d78024a20d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd0cb23271a815fa6472029791c76cd604e19708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0cb23271a815fa6472029791c76cd604e19708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0cb23271a815fa6472029791c76cd604e19708"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "60a6b22a8942c2e25ffb4b7d2047dd3f0dd0ffcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "patch": "@@ -1,3 +1,9 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (AARCH64_FUSE_ADRP_LDR): Define.\n+\t(cortexa53_tunings): Specify AARCH64_FUSE_ADRP_LDR in fuseable_ops.\n+\t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_ADRP_LDR.\n+\n 2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (AARCH64_FUSE_MOVK_MOVK): Define."}, {"sha": "ee9a9624f16c1ef9a308a050c76c3153ba2fd0bb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d8354ad712d12de5b9f5ebfd1ea5f47ffb0da01e", "patch": "@@ -309,6 +309,7 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n #define AARCH64_FUSE_MOV_MOVK\t(1 << 0)\n #define AARCH64_FUSE_ADRP_ADD\t(1 << 1)\n #define AARCH64_FUSE_MOVK_MOVK\t(1 << 2)\n+#define AARCH64_FUSE_ADRP_LDR\t(1 << 3)\n \n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n@@ -332,7 +333,8 @@ static const struct tune_params cortexa53_tunings =\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK))\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+                             | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR))\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -10485,6 +10487,37 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         return true;\n \n     }\n+  if (simple_sets_p\n+      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_ADRP_LDR))\n+    {\n+      /* We're trying to match:\n+          prev (adrp) == (set (reg r0)\n+                              (high (symbol_ref (\"SYM\"))))\n+          curr (ldr) == (set (reg r1)\n+                             (mem (lo_sum (reg r0)\n+                                             (symbol_ref (\"SYM\")))))\n+                 or\n+          curr (ldr) == (set (reg r1)\n+                             (zero_extend (mem\n+                                           (lo_sum (reg r0)\n+                                                   (symbol_ref (\"SYM\"))))))  */\n+      if (satisfies_constraint_Ush (SET_SRC (prev_set))\n+          && REG_P (SET_DEST (prev_set)) && REG_P (SET_DEST (curr_set)))\n+        {\n+          rtx curr_src = SET_SRC (curr_set);\n+\n+          if (GET_CODE (curr_src) == ZERO_EXTEND)\n+            curr_src = XEXP (curr_src, 0);\n+\n+          if (MEM_P (curr_src) && GET_CODE (XEXP (curr_src, 0)) == LO_SUM\n+              && REG_P (XEXP (XEXP (curr_src, 0), 0))\n+              && REGNO (XEXP (XEXP (curr_src, 0), 0))\n+                 == REGNO (SET_DEST (prev_set))\n+              && rtx_equal_p (XEXP (XEXP (curr_src, 0), 1),\n+                              XEXP (SET_SRC (prev_set), 0)))\n+              return true;\n+        }\n+    }\n \n   return false;\n }"}]}