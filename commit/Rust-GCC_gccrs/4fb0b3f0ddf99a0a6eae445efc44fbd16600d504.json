{"sha": "4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiMGIzZjBkZGY5OWEwYTZlYWU0NDVlZmM0NGZiZDE2NjAwZDUwNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T13:44:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T13:44:04Z"}, "message": "[multiple changes]\n\n2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Is_Same_Value): Two occurrences of the same\n\tdiscriminant cannot be assumed to be the same value because they may\n\trefer to bounds of a component of two different instances of a\n\tdiscriminated type.\n\n2010-09-09  Gary Dismukes  <dismukes@adacore.com>\n\n\t* checks.adb (Apply_Arithmetic_Overflow_Check): When converting the\n\toperands of an operator to the type of an enclosing conversion, rewrite\n\tthe operator so the conversion can't be flagged as redundant.\n\tRemove useless assignments to Typ and Rtyp.\n\n2010-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_ugn.texi: Fix another long line.\n\n2010-09-09  Bob Duff  <duff@adacore.com>\n\n\t* sem_warn.adb (Output_Reference_Error): Don't warn for renames read\n\tbut never assigned.\n\nFrom-SVN: r164096", "tree": {"sha": "5bb42b5c9fd503b30a6ce3e268ee8f709af55414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb42b5c9fd503b30a6ce3e268ee8f709af55414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/comments", "author": null, "committer": null, "parents": [{"sha": "ffc3bba45ebcd2680b64b060298c5d7e84772629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc3bba45ebcd2680b64b060298c5d7e84772629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc3bba45ebcd2680b64b060298c5d7e84772629"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "941603e9b3d5103101e28f365c3d7e90a851cc3d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "patch": "@@ -1,3 +1,26 @@\n+2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Is_Same_Value): Two occurrences of the same\n+\tdiscriminant cannot be assumed to be the same value because they may\n+\trefer to bounds of a component of two different instances of a\n+\tdiscriminated type.\n+\n+2010-09-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Check): When converting the\n+\toperands of an operator to the type of an enclosing conversion, rewrite\n+\tthe operator so the conversion can't be flagged as redundant.\n+\tRemove useless assignments to Typ and Rtyp.\n+\n+2010-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix another long line.\n+\n+2010-09-09  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_warn.adb (Output_Reference_Error): Don't warn for renames read\n+\tbut never assigned.\n+\n 2010-09-09  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-convec.adb, a-coinve.adb (Clear, Delete, Delete_Last, Finalize,"}, {"sha": "793526ec8a2bacaea1410b533cb13cc7a1f10ed4", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "patch": "@@ -722,8 +722,8 @@ package body Checks is\n \n    procedure Apply_Arithmetic_Overflow_Check (N : Node_Id) is\n       Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : Entity_Id           := Etype (N);\n-      Rtyp  : Entity_Id           := Root_Type (Typ);\n+      Typ   : constant Entity_Id  := Etype (N);\n+      Rtyp  : constant Entity_Id  := Root_Type (Typ);\n \n    begin\n       --  An interesting special case. If the arithmetic operation appears as\n@@ -815,9 +815,14 @@ package body Checks is\n                         Subtype_Mark => New_Occurrence_Of (Target_Type, Loc),\n                         Expression   => Relocate_Node (Right_Opnd (N))));\n \n+                     --  Rewrite the conversion operand so that the original\n+                     --  node is retained, in order to avoid the warning for\n+                     --  redundant conversions in Resolve_Type_Conversion.\n+\n+                     Rewrite (N, Relocate_Node (N));\n+\n                      Set_Etype (N, Target_Type);\n-                     Typ := Target_Type;\n-                     Rtyp := Root_Type (Typ);\n+\n                      Analyze_And_Resolve (Left_Opnd  (N), Target_Type);\n                      Analyze_And_Resolve (Right_Opnd (N), Target_Type);\n "}, {"sha": "6a49f046f5f21be707efd98a3895093389572eec", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "patch": "@@ -10109,7 +10109,8 @@ the slowest compilation time.\n \n @item ^-O3^/OPTIMIZE=INLINING^\n Full optimization as in @option{-O2};\n-also uses more aggressive automatic inlining of subprograms within a unit (@pxref{Inlining of Subprograms}) and attemps to vectorize loops.\n+also uses more aggressive automatic inlining of subprograms within a unit\n+(@pxref{Inlining of Subprograms}) and attemps to vectorize loops.\n \n @item ^-Os^/OPTIMIZE=SPACE^\n Optimize space usage (code and data) of resulting program."}, {"sha": "68c9ce8bd497493704b00ba9b24db2d95c369c9e", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "patch": "@@ -642,9 +642,15 @@ package body Sem_Eval is\n          --  types, since we may have two NaN values and they should never\n          --  compare equal.\n \n+         --  If the entity is a discriminant, the two expressions may be\n+         --  bounds of components of objects of the same discriminated\n+         --  type. The values of the discriminants are not static, and\n+         --  therefore the result is unknown.\n+\n          if Nkind_In (Lf, N_Identifier, N_Expanded_Name)\n            and then Nkind_In (Rf, N_Identifier, N_Expanded_Name)\n            and then Entity (Lf) = Entity (Rf)\n+           and then Ekind (Entity (Lf)) /= E_Discriminant\n            and then Present (Entity (Lf))\n            and then not Is_Floating_Point_Type (Etype (L))\n            and then not Is_Volatile_Reference (L)"}, {"sha": "953229c5be92e1b5400d1b73f9119b531ebe7cfa", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb0b3f0ddf99a0a6eae445efc44fbd16600d504/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4fb0b3f0ddf99a0a6eae445efc44fbd16600d504", "patch": "@@ -858,9 +858,11 @@ package body Sem_Warn is\n \n       procedure Output_Reference_Error (M : String) is\n       begin\n-         --  Never issue messages for internal names\n+         --  Never issue messages for internal names, nor for renamings\n \n-         if Is_Internal_Name (Chars (E1)) then\n+         if Is_Internal_Name (Chars (E1))\n+           or else Nkind (Parent (E1)) = N_Object_Renaming_Declaration\n+         then\n             return;\n          end if;\n "}]}