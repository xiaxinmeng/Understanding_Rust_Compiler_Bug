{"sha": "a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxMjA3YzQ3M2RjYWI4OGViMGFjNzY5ZDJkOWM2OGQ3YzllMDU4OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-11-28T05:44:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-28T05:44:31Z"}, "message": "generic-morestack.c (__splitstack_find): Check for NULL old stack value.\n\n\t* generic-morestack.c (__splitstack_find): Check for NULL old\n\tstack value.\n\t(__splitstack_resetcontext): New function.\n\t(__splitstack_releasecontext): New function.\n\t* libgcc-std.ver.in: Add new functions to GCC_4.7.0.\n\nFrom-SVN: r181771", "tree": {"sha": "7e1df6a92bc29c787ad99524223f6d3134895e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1df6a92bc29c787ad99524223f6d3134895e11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/comments", "author": null, "committer": null, "parents": [{"sha": "8ce3007a90621b4f8a351ef8b58904b6c6610ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce3007a90621b4f8a351ef8b58904b6c6610ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce3007a90621b4f8a351ef8b58904b6c6610ae3"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "4b244f41022cfc3b641fd65c683e4aea4bdf8f19", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "patch": "@@ -1,3 +1,11 @@\n+2011-11-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* generic-morestack.c (__splitstack_find): Check for NULL old\n+\tstack value.\n+\t(__splitstack_resetcontext): New function.\n+\t(__splitstack_releasecontext): New function.\n+\t* libgcc-std.ver.in: Add new functions to GCC_4.7.0.\n+\n 2011-11-27  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin-crt-tm.c: Correct comments, use correct licence."}, {"sha": "4dbaa0e4cdc9db1fcb15b563860369f0742842b5", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "patch": "@@ -115,6 +115,14 @@ extern void *\n __splitstack_makecontext (size_t, void *context[10], size_t *)\n   __attribute__ ((visibility (\"default\")));\n \n+extern void *\n+__splitstack_resetcontext (void *context[10], size_t *)\n+  __attribute__ ((visibility (\"default\")));\n+\n+extern void\n+__splitstack_releasecontext (void *context[10])\n+  __attribute__ ((visibility (\"default\")));\n+\n extern void\n __splitstack_block_signals_context (void *context[10], int *, int *)\n   __attribute__ ((visibility (\"default\")));\n@@ -911,15 +919,23 @@ __splitstack_find (void *segment_arg, void *sp, size_t *len,\n \n   nsp = (char *) segment->old_stack;\n \n+  if (nsp == NULL)\n+    {\n+      /* We've reached the top of the stack.  */\n+      *next_segment = (void *) (uintptr_type) 2;\n+    }\n+  else\n+    {\n #if defined (__x86_64__)\n-  nsp -= 12 * sizeof (void *);\n+      nsp -= 12 * sizeof (void *);\n #elif defined (__i386__)\n-  nsp -= 6 * sizeof (void *);\n+      nsp -= 6 * sizeof (void *);\n #else\n #error \"unrecognized target\"\n #endif\n \n-  *next_sp = (void *) nsp;\n+      *next_sp = (void *) nsp;\n+    }\n \n #ifdef STACK_GROWS_DOWNWARD\n   *len = (char *) (segment + 1) + segment->size - (char *) sp;\n@@ -1037,6 +1053,60 @@ __splitstack_makecontext (size_t stack_size, void *context[NUMBER_OFFSETS],\n   return (void *) (segment + 1);\n }\n \n+/* Given an existing split stack context, reset it back to the start\n+   of the stack.  Return the stack pointer and size, appropriate for\n+   use with makecontext.  This may be used if a coroutine exits, in\n+   order to reuse the stack segments for a new coroutine.  */\n+\n+void *\n+__splitstack_resetcontext (void *context[10], size_t *size)\n+{\n+  struct stack_segment *segment;\n+  void *initial_sp;\n+  size_t initial_size;\n+  void *ret;\n+\n+  /* Reset the context assuming that MORESTACK_SEGMENTS, INITIAL_SP\n+     and INITIAL_SP_LEN are correct.  */\n+\n+  segment = context[MORESTACK_SEGMENTS];\n+  context[CURRENT_SEGMENT] = segment;\n+  context[CURRENT_STACK] = NULL;\n+  if (segment == NULL)\n+    {\n+      initial_sp = context[INITIAL_SP];\n+      initial_size = (uintptr_type) context[INITIAL_SP_LEN];\n+      ret = initial_sp;\n+#ifdef STACK_GROWS_DOWNWARD\n+      ret = (void *) ((char *) ret - initial_size);\n+#endif\n+    }\n+  else\n+    {\n+#ifdef STACK_GROWS_DOWNWARD\n+      initial_sp = (void *) ((char *) (segment + 1) + segment->size);\n+#else\n+      initial_sp = (void *) (segment + 1);\n+#endif\n+      initial_size = segment->size;\n+      ret = (void *) (segment + 1);\n+    }\n+  context[STACK_GUARD] = __morestack_make_guard (initial_sp, initial_size);\n+  context[BLOCK_SIGNALS] = NULL;\n+  *size = initial_size;\n+  return ret;\n+}\n+\n+/* Release all the memory associated with a splitstack context.  This\n+   may be used if a coroutine exits and the associated stack should be\n+   freed.  */\n+\n+void\n+__splitstack_releasecontext (void *context[10])\n+{\n+  __morestack_release_segments (context[MORESTACK_SEGMENTS], 1);\n+}\n+\n /* Like __splitstack_block_signals, but operating on CONTEXT, rather\n    than on the current state.  */\n "}, {"sha": "ec702952f9b96fb0296a84d8292af0a057451de3", "filename": "libgcc/libgcc-std.ver.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2Flibgcc-std.ver.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01207c473dcab88eb0ac769d2d9c68d7c9e0588/libgcc%2Flibgcc-std.ver.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc-std.ver.in?ref=a01207c473dcab88eb0ac769d2d9c68d7c9e0588", "patch": "@@ -1932,4 +1932,6 @@ GCC_4.7.0 {\n   __splitstack_makecontext\n   __splitstack_block_signals_context\n   __splitstack_find_context\n+  __splitstack_resetcontext\n+  __splitstack_releasecontext\n }"}]}