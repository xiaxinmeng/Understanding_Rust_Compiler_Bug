{"sha": "b8e6830b3446b34cb3aee27d94bca490546c7d07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlNjgzMGIzNDQ2YjM0Y2IzYWVlMjdkOTRiY2E0OTA1NDZjN2QwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T15:14:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T15:14:04Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_util.ads, sem_res.adb, exp_ch6.adb: Invert\n\tpredicate No_Predicate_Test_On_Arguments, new name is\n\tPredicate_Tests_On_Arguments (with the opposite sense).\n\n2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute): Clean up the code for\n\tattribute 'Access. Do not generate an elaboration flag for a\n\tstand alone expression function. The expression of an expression\n\tfunction is now frozen when the expression function appears as\n\tthe prefix of attribute 'Access.\n\t* sem_ch6.adb (Analyze_Expression_Function): Remove local\n\tvariable New_Decl and update all references to it after the\n\trewriting has taken place. Establish the linkages between the\n\tgenerated spec and body.\n\nFrom-SVN: r213212", "tree": {"sha": "f5fcc246ae710bb3b2516c5782c97cf5eece13b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fcc246ae710bb3b2516c5782c97cf5eece13b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8e6830b3446b34cb3aee27d94bca490546c7d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e6830b3446b34cb3aee27d94bca490546c7d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e6830b3446b34cb3aee27d94bca490546c7d07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e6830b3446b34cb3aee27d94bca490546c7d07/comments", "author": null, "committer": null, "parents": [{"sha": "094cf3330c711e995e3cd1e2cf6b81fd88b6b7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094cf3330c711e995e3cd1e2cf6b81fd88b6b7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094cf3330c711e995e3cd1e2cf6b81fd88b6b7b1"}], "stats": {"total": 221, "additions": 140, "deletions": 81}, "files": [{"sha": "ed9c60866e6ab43bc693fc6cca4c3698f5ad1fb6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -1,3 +1,21 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads, sem_res.adb, exp_ch6.adb: Invert\n+\tpredicate No_Predicate_Test_On_Arguments, new name is\n+\tPredicate_Tests_On_Arguments (with the opposite sense).\n+\n+2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Clean up the code for\n+\tattribute 'Access. Do not generate an elaboration flag for a\n+\tstand alone expression function. The expression of an expression\n+\tfunction is now frozen when the expression function appears as\n+\tthe prefix of attribute 'Access.\n+\t* sem_ch6.adb (Analyze_Expression_Function): Remove local\n+\tvariable New_Decl and update all references to it after the\n+\trewriting has taken place. Establish the linkages between the\n+\tgenerated spec and body.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (ip, rv): Prevent from being optimized away."}, {"sha": "0688a3cc633e5aa8f50e73b8aa61cda4fad3fb2e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -1754,7 +1754,7 @@ package body Exp_Ch6 is\n \n                  --  Skip predicate checks for special cases\n \n-                 and then not No_Predicate_Test_On_Arguments (Subp)\n+                 and then Predicate_Tests_On_Arguments (Subp)\n                then\n                   Append_To (Post_Call,\n                     Make_Predicate_Check (Atyp, Actual));"}, {"sha": "20395b40e45a4d7e96de7735a3b80df83812c6ed", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 63, "deletions": 27, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -86,7 +86,9 @@ package body Sem_Attr is\n    --  used so that we can abandon the processing so we don't run into\n    --  trouble with cascaded errors.\n \n-   --  The following array is the list of attributes defined in the Ada 83 RM:\n+   --  The following array is the list of attributes defined in the Ada 83 RM.\n+   --  In Ada 83 mode, these are the only recognized attributes. In other Ada\n+   --  modes all these attributes are recognized, even if removed in Ada 95.\n \n    Attribute_83 : constant Attribute_Class_Array := Attribute_Class_Array'(\n       Attribute_Address                      |\n@@ -10565,11 +10567,18 @@ package body Sem_Attr is\n                Set_Address_Taken (Entity (P));\n             end if;\n \n-            if Is_Entity_Name (P) then\n+            --  Deal with possible elaboration check\n+\n+            if Is_Entity_Name (P) and then Is_Subprogram (Entity (P)) then\n                declare\n-                  E    : constant Entity_Id := Entity (P);\n-                  Decl : Node_Id;\n-                  Flag : Entity_Id;\n+                  Subp_Id   : constant Entity_Id := Entity (P);\n+                  Scop      : constant Entity_Id := Scope (Subp_Id);\n+                  Subp_Decl : constant Node_Id   :=\n+                                Unit_Declaration_Node (Subp_Id);\n+\n+                  Flag_Id : Entity_Id;\n+                  HSS     : Node_Id;\n+                  Stmt    : Node_Id;\n \n                --  If the access has been taken and the body of the subprogram\n                --  has not been see yet, indirect calls must be protected with\n@@ -10578,40 +10587,67 @@ package body Sem_Attr is\n                --  a subprogram the body will appear in the same declarative\n                --  part, and we must insert a check in the eventual body itself\n                --  using the elaboration flag that we generate now. The check\n-               --  is then inserted when the body is expanded.\n+               --  is then inserted when the body is expanded. This processing\n+               --  is not needed for a stand alone expression function because\n+               --  the internally generated spec and body are always inserted\n+               --  as a pair in the same declarative list.\n \n                begin\n-                  if Is_Subprogram (E)\n-                    and then Expander_Active\n-                    and then Comes_From_Source (E)\n+                  if Expander_Active\n+                    and then Comes_From_Source (Subp_Id)\n                     and then Comes_From_Source (N)\n-                    and then In_Open_Scopes (Scope (E))\n-                    and then\n-                      Ekind_In (Scope (E), E_Block, E_Procedure, E_Function)\n-                    and then not Has_Completion (E)\n-                    and then No (Elaboration_Entity (E))\n-                    and then Nkind (Unit_Declaration_Node (E)) =\n-                                                  N_Subprogram_Declaration\n+                    and then In_Open_Scopes (Scop)\n+                    and then Ekind_In (Scop, E_Block, E_Procedure, E_Function)\n+                    and then not Has_Completion (Subp_Id)\n+                    and then No (Elaboration_Entity (Subp_Id))\n+                    and then Nkind (Subp_Decl) = N_Subprogram_Declaration\n+                    and then Nkind (Original_Node (Subp_Decl)) /=\n+                                                       N_Expression_Function\n                   then\n                      --  Create elaboration variable for it\n \n-                     Flag := Make_Temporary (Loc, 'E');\n-                     Decl :=\n+                     Flag_Id := Make_Temporary (Loc, 'E');\n+                     Set_Elaboration_Entity (Subp_Id, Flag_Id);\n+                     Set_Is_Frozen (Flag_Id);\n+\n+                     --  Insert declaration for flag after subprogram\n+                     --  declaration. Note that attribute reference may\n+                     --  appear within a nested scope.\n+\n+                     Insert_After_And_Analyze (Subp_Decl,\n                        Make_Object_Declaration (Loc,\n-                         Defining_Identifier => Flag,\n+                         Defining_Identifier => Flag_Id,\n                          Object_Definition   =>\n                            New_Occurrence_Of (Standard_Short_Integer, Loc),\n                          Expression          =>\n-                           Make_Integer_Literal (Loc, Uint_0));\n-                     Set_Elaboration_Entity (E, Flag);\n-                     Set_Is_Frozen (Flag);\n+                           Make_Integer_Literal (Loc, Uint_0)));\n+                  end if;\n \n-                     --  Insert declaration for flag after subprogram\n-                     --  declaration. Note that attribute reference may\n-                     --  appear within a nested scope.\n+                  --  Taking the 'Access of an expression function freezes its\n+                  --  expression (RM 13.14 10.3/3). This does not apply to an\n+                  --  expression function that acts as a completion because the\n+                  --  generated body is immediately analyzed and the expression\n+                  --  is automatically frozen.\n+\n+                  if Ekind (Subp_Id) = E_Function\n+                    and then Nkind (Subp_Decl) = N_Subprogram_Declaration\n+                    and then Nkind (Original_Node (Subp_Decl)) =\n+                                                        N_Expression_Function\n+                    and then Present (Corresponding_Body (Subp_Decl))\n+                    and then not Analyzed (Corresponding_Body (Subp_Decl))\n+                  then\n+                     HSS :=\n+                       Handled_Statement_Sequence\n+                         (Unit_Declaration_Node\n+                            (Corresponding_Body (Subp_Decl)));\n+\n+                     if Present (HSS) then\n+                        Stmt := First (Statements (HSS));\n \n-                     Insert_After (Unit_Declaration_Node (E), Decl);\n-                     Analyze (Decl);\n+                        if Nkind (Stmt) = N_Simple_Return_Statement then\n+                           Freeze_Expression (Expression (Stmt));\n+                        end if;\n+                     end if;\n                   end if;\n                end;\n             end if;"}, {"sha": "5a99a2c70d1b38cd0e738b42a5d35618090498b0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -266,7 +266,6 @@ package body Sem_Ch6 is\n       --  declaration is completed. Def_Id is needed to analyze the spec.\n \n       New_Body : Node_Id;\n-      New_Decl : Node_Id;\n       New_Spec : Node_Id;\n       Ret      : Node_Id;\n \n@@ -434,10 +433,7 @@ package body Sem_Ch6 is\n               (\"an expression function is not a legal protected operation\", N);\n          end if;\n \n-         New_Decl :=\n-           Make_Subprogram_Declaration (Loc, Specification => Spec);\n-\n-         Rewrite (N, New_Decl);\n+         Rewrite (N, Make_Subprogram_Declaration (Loc, Specification => Spec));\n \n          --  Correct the parent pointer of the aspect specification list to\n          --  reference the rewritten node.\n@@ -447,7 +443,15 @@ package body Sem_Ch6 is\n          end if;\n \n          Analyze (N);\n-         Set_Is_Inlined (Defining_Entity (New_Decl));\n+         Set_Is_Inlined (Defining_Entity (N));\n+\n+         --  Establish the linkages between the spec and the body. These are\n+         --  used when the expression function acts as the prefix of attribute\n+         --  'Access in order to freeze the original expression which has been\n+         --  moved to the generated body.\n+\n+         Set_Corresponding_Body (N, Defining_Entity (New_Body));\n+         Set_Corresponding_Spec (New_Body, Defining_Entity (N));\n \n          --  To prevent premature freeze action, insert the new body at the end\n          --  of the current declarations, or at the end of the package spec.\n@@ -461,7 +465,7 @@ package body Sem_Ch6 is\n          declare\n             Decls : List_Id            := List_Containing (N);\n             Par   : constant Node_Id   := Parent (Decls);\n-            Id    : constant Entity_Id := Defining_Entity (New_Decl);\n+            Id    : constant Entity_Id := Defining_Entity (N);\n \n          begin\n             if Nkind (Par) = N_Package_Specification"}, {"sha": "dab6c8f67488ad38446fea14c98ac1dd33c7afa8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -1974,7 +1974,7 @@ package body Sem_Res is\n                   if Nkind (Decl) = N_Subprogram_Body then\n                      Spec := Corresponding_Spec (Decl);\n \n-                     if not No (Spec) then\n+                     if Present (Spec) then\n                         Decl := Unit_Declaration_Node (Spec);\n                      end if;\n                   end if;\n@@ -4051,9 +4051,9 @@ package body Sem_Res is\n                --  Apply predicate tests except in certain special cases. Note\n                --  that it might be more consistent to apply these only when\n                --  expansion is active (in Exp_Ch6.Expand_Actuals), as we do\n-               --  for the outbound predicate tests.\n+               --  for the outbound predicate tests ???\n \n-               if not No_Predicate_Test_On_Arguments (Nam) then\n+               if Predicate_Tests_On_Arguments (Nam) then\n                   Apply_Predicate_Check (A, F_Typ);\n                end if;\n "}, {"sha": "4434d5b16d5e261994d3bd154737def12bd0c86e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -13785,44 +13785,6 @@ package body Sem_Util is\n       Actual_Id := Next_Actual (Actual_Id);\n    end Next_Actual;\n \n-   ------------------------------------\n-   -- No_Predicate_Test_On_Arguments --\n-   ------------------------------------\n-\n-   function No_Predicate_Test_On_Arguments (Subp : Entity_Id) return Boolean is\n-   begin\n-      --  Do not test predicates on call to generated default Finalize, since\n-      --  we are not interested in whether something we are finalizing (and\n-      --  typically destroying) satisfies its predicates.\n-\n-      if Chars (Subp) = Name_Finalize\n-        and then not Comes_From_Source (Subp)\n-      then\n-         return True;\n-\n-      --  Do not test predicates on call to Init_Proc, since if needed the\n-      --  predicate test will occur at some other point.\n-\n-      elsif Is_Init_Proc (Subp) then\n-         return True;\n-\n-      --  Do not test predicates on call to predicate function, since this\n-      --  would cause infinite recursion.\n-\n-      elsif Ekind (Subp) = E_Function\n-        and then (Is_Predicate_Function (Subp)\n-                    or else\n-                  Is_Predicate_Function_M (Subp))\n-      then\n-         return True;\n-\n-      --  For now, no other cases\n-\n-      else\n-         return False;\n-      end if;\n-   end No_Predicate_Test_On_Arguments;\n-\n    ---------------------\n    -- No_Scalar_Parts --\n    ---------------------\n@@ -14755,6 +14717,44 @@ package body Sem_Util is\n       end if;\n    end Original_Corresponding_Operation;\n \n+   ----------------------------------\n+   -- Predicate_Tests_On_Arguments --\n+   ----------------------------------\n+\n+   function Predicate_Tests_On_Arguments (Subp : Entity_Id) return Boolean is\n+   begin\n+      --  Do not test predicates on call to generated default Finalize, since\n+      --  we are not interested in whether something we are finalizing (and\n+      --  typically destroying) satisfies its predicates.\n+\n+      if Chars (Subp) = Name_Finalize\n+        and then not Comes_From_Source (Subp)\n+      then\n+         return False;\n+\n+         --  Do not test predicates on call to Init_Proc, since if needed the\n+         --  predicate test will occur at some other point.\n+\n+      elsif Is_Init_Proc (Subp) then\n+         return False;\n+\n+         --  Do not test predicates on call to predicate function, since this\n+         --  would cause infinite recursion.\n+\n+      elsif Ekind (Subp) = E_Function\n+        and then (Is_Predicate_Function (Subp)\n+                  or else\n+                  Is_Predicate_Function_M (Subp))\n+      then\n+         return False;\n+\n+         --  For now, no other exceptions\n+\n+      else\n+         return True;\n+      end if;\n+   end Predicate_Tests_On_Arguments;\n+\n    -----------------------\n    -- Private_Component --\n    -----------------------"}, {"sha": "970b2bafa77f12581356fa4937d6d4f67df8d5b1", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e6830b3446b34cb3aee27d94bca490546c7d07/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b8e6830b3446b34cb3aee27d94bca490546c7d07", "patch": "@@ -1582,11 +1582,6 @@ package Sem_Util is\n    --  Note that the result produced is always an expression, not a parameter\n    --  association node, even if named notation was used.\n \n-   function No_Predicate_Test_On_Arguments (Subp : Entity_Id) return Boolean;\n-   --  Subp is the entity for a subprogram call. This function returns True to\n-   --  eliminate predicate tests on the input or output arguments in a call to\n-   --  this subprogram. See body for exact cases currently covered.\n-\n    function No_Scalar_Parts (T : Entity_Id) return Boolean;\n    --  Tests if type T can be determined at compile time to have no scalar\n    --  parts in the sense of the Valid_Scalars attribute. Returns True if\n@@ -1634,6 +1629,12 @@ package Sem_Util is\n    --  Name_uPre, Name_uPost, Name_uInvariant, or Name_uType_Invariant being\n    --  returned to represent the corresponding aspects with x'Class names.\n \n+   function Predicate_Tests_On_Arguments (Subp : Entity_Id) return Boolean;\n+   --  Subp is the entity for a subprogram call. This function returns True if\n+   --  predicate tests are required for the arguments in this call (this is the\n+   --  normal case). It returns False for special cases where these predicate\n+   --  tests should be skipped (see body for details).\n+\n    function Primitive_Names_Match (E1, E2 : Entity_Id) return Boolean;\n    --  Returns True if the names of both entities correspond with matching\n    --  primitives. This routine includes support for the case in which one"}]}