{"sha": "190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwYmVhODc5ZjllNmM4NWFhN2E4ZDE5MWUwOWIxZWYxZTg1YWMyNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-18T20:48:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-18T20:48:17Z"}, "message": "Split BB_HEAD et al into BB_HEAD/SET_BB_HEAD variants\n\ngcc/\n2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n\n\t* basic-block.h (BB_HEAD): Split macro in two: the existing one,\n\tfor rvalues, and...\n\t(SET_BB_HEAD): New macro, for use as a lvalue.\n\t(BB_END, SET_BB_END): Likewise.\n\t(BB_HEADER, SET_BB_HEADER): Likewise.\n\t(BB_FOOTER, SET_BB_FOOTER): Likewise.\n\n\t* bb-reorder.c (add_labels_and_missing_jumps): Convert lvalue use\n\tof BB_* macros into SET_BB_* macros.\n\t(fix_crossing_unconditional_branches): Likewise.\n\t* caller-save.c (save_call_clobbered_regs): Likewise.\n\t(insert_one_insn): Likewise.\n\t* cfgbuild.c (find_bb_boundaries): Likewise.\n\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n\t(outgoing_edges_match): Likewise.\n\t(try_optimize_cfg): Likewise.\n\t* cfgexpand.c (expand_gimple_cond): Likewise.\n\t(expand_gimple_tailcall): Likewise.\n\t(expand_gimple_basic_block): Likewise.\n\t(construct_exit_block): Likewise.\n\t* cfgrtl.c (delete_insn): Likewise.\n\t(create_basic_block_structure): Likewise.\n\t(rtl_delete_block): Likewise.\n\t(rtl_split_block): Likewise.\n\t(emit_nop_for_unique_locus_between): Likewise.\n\t(rtl_merge_blocks): Likewise.\n\t(block_label): Likewise.\n\t(try_redirect_by_replacing_jump): Likewise.\n\t(emit_barrier_after_bb): Likewise.\n\t(fixup_abnormal_edges): Likewise.\n\t(record_effective_endpoints): Likewise.\n\t(relink_block_chain): Likewise.\n\t(fixup_reorder_chain): Likewise.\n\t(fixup_fallthru_exit_predecessor): Likewise.\n\t(cfg_layout_duplicate_bb): Likewise.\n\t(cfg_layout_split_block): Likewise.\n\t(cfg_layout_delete_block): Likewise.\n\t(cfg_layout_merge_blocks): Likewise.\n\t* combine.c (update_cfg_for_uncondjump): Likewise.\n\t* emit-rtl.c (add_insn_after): Likewise.\n\t(remove_insn): Likewise.\n\t(reorder_insns): Likewise.\n\t(emit_insn_after_1): Likewise.\n\t* haifa-sched.c (get_ebb_head_tail): Likewise.\n\t(restore_other_notes): Likewise.\n\t(move_insn): Likewise.\n\t(sched_extend_bb): Likewise.\n\t(fix_jump_move): Likewise.\n\t* ifcvt.c (noce_process_if_block): Likewise.\n\t(dead_or_predicable): Likewise.\n\t* ira.c (update_equiv_regs): Likewise.\n\t* reg-stack.c (change_stack): Likewise.\n\t* sel-sched-ir.c (sel_move_insn): Likewise.\n\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n\n\t* config/c6x/c6x.c (hwloop_optimize): Likewise.\n\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n\n/\n2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtx-classes-status.txt (TODO): Add SET_BB_HEAD, SET_BB_END,\n\tSET_BB_HEADER, SET_BB_FOOTER\n\nFrom-SVN: r214121", "tree": {"sha": "b4356fbacb07e1edc905225a3dabc568905187a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4356fbacb07e1edc905225a3dabc568905187a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb3fff01365409e16fd7b9b94f4130c21279f8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3fff01365409e16fd7b9b94f4130c21279f8b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3fff01365409e16fd7b9b94f4130c21279f8b4"}], "stats": {"total": 262, "additions": 169, "deletions": 93}, "files": [{"sha": "4688fe0f39e10b155b2fe24eb1ac6b971a4d89a2", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -1,3 +1,8 @@\n+2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtx-classes-status.txt (TODO): Add SET_BB_HEAD, SET_BB_END,\n+\tSET_BB_HEADER, SET_BB_FOOTER\n+\n 2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtx-classes-status.txt: New file"}, {"sha": "a6f2c4bf2b932f74cca7833e3e4de60dae320a62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -1,3 +1,63 @@\n+2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (BB_HEAD): Split macro in two: the existing one,\n+\tfor rvalues, and...\n+\t(SET_BB_HEAD): New macro, for use as a lvalue.\n+\t(BB_END, SET_BB_END): Likewise.\n+\t(BB_HEADER, SET_BB_HEADER): Likewise.\n+\t(BB_FOOTER, SET_BB_FOOTER): Likewise.\n+\n+\t* bb-reorder.c (add_labels_and_missing_jumps): Convert lvalue use\n+\tof BB_* macros into SET_BB_* macros.\n+\t(fix_crossing_unconditional_branches): Likewise.\n+\t* caller-save.c (save_call_clobbered_regs): Likewise.\n+\t(insert_one_insn): Likewise.\n+\t* cfgbuild.c (find_bb_boundaries): Likewise.\n+\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n+\t(outgoing_edges_match): Likewise.\n+\t(try_optimize_cfg): Likewise.\n+\t* cfgexpand.c (expand_gimple_cond): Likewise.\n+\t(expand_gimple_tailcall): Likewise.\n+\t(expand_gimple_basic_block): Likewise.\n+\t(construct_exit_block): Likewise.\n+\t* cfgrtl.c (delete_insn): Likewise.\n+\t(create_basic_block_structure): Likewise.\n+\t(rtl_delete_block): Likewise.\n+\t(rtl_split_block): Likewise.\n+\t(emit_nop_for_unique_locus_between): Likewise.\n+\t(rtl_merge_blocks): Likewise.\n+\t(block_label): Likewise.\n+\t(try_redirect_by_replacing_jump): Likewise.\n+\t(emit_barrier_after_bb): Likewise.\n+\t(fixup_abnormal_edges): Likewise.\n+\t(record_effective_endpoints): Likewise.\n+\t(relink_block_chain): Likewise.\n+\t(fixup_reorder_chain): Likewise.\n+\t(fixup_fallthru_exit_predecessor): Likewise.\n+\t(cfg_layout_duplicate_bb): Likewise.\n+\t(cfg_layout_split_block): Likewise.\n+\t(cfg_layout_delete_block): Likewise.\n+\t(cfg_layout_merge_blocks): Likewise.\n+\t* combine.c (update_cfg_for_uncondjump): Likewise.\n+\t* emit-rtl.c (add_insn_after): Likewise.\n+\t(remove_insn): Likewise.\n+\t(reorder_insns): Likewise.\n+\t(emit_insn_after_1): Likewise.\n+\t* haifa-sched.c (get_ebb_head_tail): Likewise.\n+\t(restore_other_notes): Likewise.\n+\t(move_insn): Likewise.\n+\t(sched_extend_bb): Likewise.\n+\t(fix_jump_move): Likewise.\n+\t* ifcvt.c (noce_process_if_block): Likewise.\n+\t(dead_or_predicable): Likewise.\n+\t* ira.c (update_equiv_regs): Likewise.\n+\t* reg-stack.c (change_stack): Likewise.\n+\t* sel-sched-ir.c (sel_move_insn): Likewise.\n+\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n+\n+\t* config/c6x/c6x.c (hwloop_optimize): Likewise.\n+\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n+\n 2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtl.h (for_each_rtx_in_insn): New function."}, {"sha": "98cb00c8d245930b06ce5044e6e8be1c39b34e2f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -368,10 +368,17 @@ struct GTY(()) control_flow_graph {\n \f\n /* Stuff for recording basic block info.  */\n \n-#define BB_HEAD(B)      (B)->il.x.head_\n-#define BB_END(B)       (B)->il.x.rtl->end_\n-#define BB_HEADER(B)    (B)->il.x.rtl->header_\n-#define BB_FOOTER(B)    (B)->il.x.rtl->footer_\n+/* These macros are currently split into two:\n+   one suitable for reading, and for writing.\n+   These will become functions in a follow-up patch.  */\n+#define BB_HEAD(B)      (((const_basic_block)B)->il.x.head_)\n+#define SET_BB_HEAD(B)  (B)->il.x.head_\n+#define BB_END(B)       (((const rtl_bb_info *)(B)->il.x.rtl)->end_)\n+#define SET_BB_END(B)   (B)->il.x.rtl->end_\n+#define BB_HEADER(B)    (((const rtl_bb_info *)(B)->il.x.rtl)->header_)\n+#define SET_BB_HEADER(B) (B)->il.x.rtl->header_\n+#define BB_FOOTER(B)    (((const rtl_bb_info *)(B)->il.x.rtl)->footer_)\n+#define SET_BB_FOOTER(B) (B)->il.x.rtl->footer_\n \n /* Special block numbers [markers] for entry and exit.\n    Neither of them is supposed to hold actual statements.  */"}, {"sha": "8675be02c318a54c90818595b20d641c3103cb30", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -1757,7 +1757,7 @@ add_labels_and_missing_jumps (vec<edge> crossing_edges)\n       gcc_assert (single_succ_p (src));\n \n       new_jump = emit_jump_insn_after (gen_jump (label), BB_END (src));\n-      BB_END (src) = new_jump;\n+      SET_BB_END (src) = new_jump;\n       JUMP_LABEL (new_jump) = label;\n       LABEL_NUSES (label) += 1;\n \n@@ -2188,7 +2188,7 @@ fix_crossing_unconditional_branches (void)\n \t      /* Make BB_END for cur_bb be the jump instruction (NOT the\n \t\t barrier instruction at the end of the sequence...).  */\n \n-\t      BB_END (cur_bb) = jump_insn;\n+\t      SET_BB_END (cur_bb) = jump_insn;\n \t    }\n \t}\n     }"}, {"sha": "41b3f01bbd3aa0dee59deac776a0215de5941104", "filename": "gcc/caller-save.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -921,7 +921,7 @@ save_call_clobbered_regs (void)\n \t\t      if (NEXT_INSN (ins))\n \t\t\tPREV_INSN (NEXT_INSN (ins)) = ins;\n                       if (BB_END (bb) == insn)\n-\t\t\tBB_END (bb) = ins;\n+\t\t\tSET_BB_END (bb) = ins;\n \t\t    }\n \t\t  else\n \t\t    gcc_assert (DEBUG_INSN_P (ins));\n@@ -1418,7 +1418,7 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \n       CLEAR_REG_SET (&new_chain->dead_or_set);\n       if (chain->insn == BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n-\tBB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n+\tSET_BB_HEAD (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   else\n     {\n@@ -1438,7 +1438,7 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n \t\t   &new_chain->live_throughout);\n       CLEAR_REG_SET (&new_chain->dead_or_set);\n       if (chain->insn == BB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)))\n-\tBB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n+\tSET_BB_END (BASIC_BLOCK_FOR_FN (cfun, chain->block)) = new_chain->insn;\n     }\n   new_chain->block = chain->block;\n   new_chain->is_caller_save_insn = 1;"}, {"sha": "76d3a99a8edb5bf79634357c018cbb93abe1ebfb", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -467,7 +467,7 @@ find_bb_boundaries (basic_block bb)\n \t  fallthru = split_block (bb, PREV_INSN (insn));\n \t  if (flow_transfer_insn)\n \t    {\n-\t      BB_END (bb) = flow_transfer_insn;\n+\t      SET_BB_END (bb) = flow_transfer_insn;\n \n \t      /* Clean up the bb field for the insns between the blocks.  */\n \t      for (x = NEXT_INSN (flow_transfer_insn);\n@@ -504,7 +504,7 @@ find_bb_boundaries (basic_block bb)\n      ordinary jump, we need to take care and move basic block boundary.  */\n   if (flow_transfer_insn)\n     {\n-      BB_END (bb) = flow_transfer_insn;\n+      SET_BB_END (bb) = flow_transfer_insn;\n \n       /* Clean up the bb field for the insns that do not belong to BB.  */\n       x = flow_transfer_insn;"}, {"sha": "d6d4bc04ebec63339f914be9f1123f9dad3155de", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -726,7 +726,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   if (tablejump_p (BB_END (b), &label, &table)\n       && prev_active_insn (label) == BB_END (b))\n     {\n-      BB_END (b) = table;\n+      SET_BB_END (b) = table;\n     }\n \n   /* There had better have been a barrier there.  Delete it.  */\n@@ -739,7 +739,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   reorder_insns_nobb (BB_HEAD (b), BB_END (b), BB_END (a));\n \n   /* Restore the real end of b.  */\n-  BB_END (b) = real_b_end;\n+  SET_BB_END (b) = real_b_end;\n \n   if (dump_file)\n     fprintf (dump_file, \"Moved block %d after %d and merged.\\n\",\n@@ -1723,7 +1723,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n \t\t  rr.r1 = label1;\n \t\t  rr.r2 = label2;\n \t\t  rr.update_label_nuses = false;\n-\t\t  for_each_rtx (&BB_END (bb1), replace_label, &rr);\n+\t\t  for_each_rtx (&SET_BB_END (bb1), replace_label, &rr);\n \n \t\t  match = (old_insns_match_p (mode, BB_END (bb1), BB_END (bb2))\n \t\t\t   == dir_both);\n@@ -1737,7 +1737,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n \t\t     from the instruction is deleted too.  */\n \t\t  rr.r1 = label2;\n \t\t  rr.r2 = label1;\n-\t\t  for_each_rtx (&BB_END (bb1), replace_label, &rr);\n+\t\t  for_each_rtx (&SET_BB_END (bb1), replace_label, &rr);\n \n \t\t  return match;\n \t\t}\n@@ -2673,13 +2673,13 @@ try_optimize_cfg (int mode)\n \t\t\t\t{\n \t\t\t\t  if (BB_FOOTER (b))\n \t\t\t\t    {\n-\t\t\t\t      BB_FOOTER (e->src) = BB_FOOTER (b);\n-\t\t\t\t      BB_FOOTER (b) = NULL;\n+\t\t\t\t      SET_BB_FOOTER (e->src) = BB_FOOTER (b);\n+\t\t\t\t      SET_BB_FOOTER (b) = NULL;\n \t\t\t\t    }\n \t\t\t\t  else\n \t\t\t\t    {\n \t\t\t\t      start_sequence ();\n-\t\t\t\t      BB_FOOTER (e->src) = emit_barrier ();\n+\t\t\t\t      SET_BB_FOOTER (e->src) = emit_barrier ();\n \t\t\t\t      end_sequence ();\n \t\t\t\t    }\n \t\t\t\t}"}, {"sha": "1235ff140bcc8c8cf30c51e9c8829f03ecf342ea", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -2170,9 +2170,9 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n     set_curr_insn_location (false_edge->goto_locus);\n   emit_jump (label_rtx_for_bb (false_edge->dest));\n \n-  BB_END (bb) = last;\n+  SET_BB_END (bb) = last;\n   if (BARRIER_P (BB_END (bb)))\n-    BB_END (bb) = PREV_INSN (BB_END (bb));\n+    SET_BB_END (bb) = PREV_INSN (BB_END (bb));\n   update_bb_for_insn (bb);\n \n   new_bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);\n@@ -2186,7 +2186,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   new_edge->probability = REG_BR_PROB_BASE;\n   new_edge->count = new_bb->count;\n   if (BARRIER_P (BB_END (new_bb)))\n-    BB_END (new_bb) = PREV_INSN (BB_END (new_bb));\n+    SET_BB_END (new_bb) = PREV_INSN (BB_END (new_bb));\n   update_bb_for_insn (new_bb);\n \n   maybe_dump_rtl_for_gimple_stmt (stmt, last2);\n@@ -3485,7 +3485,7 @@ expand_gimple_tailcall (basic_block bb, gimple stmt, bool *can_fallthru)\n \t\t | EDGE_SIBCALL);\n   e->probability += probability;\n   e->count += count;\n-  BB_END (bb) = last;\n+  SET_BB_END (bb) = last;\n   update_bb_for_insn (bb);\n \n   if (NEXT_INSN (last))\n@@ -3494,7 +3494,7 @@ expand_gimple_tailcall (basic_block bb, gimple stmt, bool *can_fallthru)\n \n       last = BB_END (bb);\n       if (BARRIER_P (last))\n-\tBB_END (bb) = PREV_INSN (last);\n+\tSET_BB_END (bb) = PREV_INSN (last);\n     }\n \n   maybe_dump_rtl_for_gimple_stmt (stmt, last2);\n@@ -4955,15 +4955,15 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n \n       /* Java emits line number notes in the top of labels.\n \t ??? Make this go away once line number notes are obsoleted.  */\n-      BB_HEAD (bb) = NEXT_INSN (last);\n+      SET_BB_HEAD (bb) = NEXT_INSN (last);\n       if (NOTE_P (BB_HEAD (bb)))\n-\tBB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));\n+\tSET_BB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));\n       note = emit_note_after (NOTE_INSN_BASIC_BLOCK, BB_HEAD (bb));\n \n       maybe_dump_rtl_for_gimple_stmt (stmt, last);\n     }\n   else\n-    note = BB_HEAD (bb) = emit_note (NOTE_INSN_BASIC_BLOCK);\n+    note = SET_BB_HEAD (bb) = emit_note (NOTE_INSN_BASIC_BLOCK);\n \n   NOTE_BASIC_BLOCK (note) = bb;\n \n@@ -5246,7 +5246,7 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n     last = PREV_INSN (last);\n   if (JUMP_TABLE_DATA_P (last))\n     last = PREV_INSN (PREV_INSN (last));\n-  BB_END (bb) = last;\n+  SET_BB_END (bb) = last;\n \n   update_bb_for_insn (bb);\n \n@@ -5348,7 +5348,7 @@ construct_exit_block (void)\n     return;\n   /* While emitting the function end we could move end of the last basic\n      block.  */\n-  BB_END (prev_bb) = orig_end;\n+  SET_BB_END (prev_bb) = orig_end;\n   while (NEXT_INSN (head) && NOTE_P (NEXT_INSN (head)))\n     head = NEXT_INSN (head);\n   /* But make sure exit_block starts with RETURN_LABEL, otherwise the\n@@ -5360,7 +5360,7 @@ construct_exit_block (void)\n       while (NEXT_INSN (head) != return_label)\n \t{\n \t  if (!NOTE_P (NEXT_INSN (head)))\n-\t    BB_END (prev_bb) = NEXT_INSN (head);\n+\t    SET_BB_END (prev_bb) = NEXT_INSN (head);\n \t  head = NEXT_INSN (head);\n \t}\n     }"}, {"sha": "65437625eae53a137ddee9f49dabcfb926f98372", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -152,9 +152,9 @@ delete_insn (rtx insn)\n \t      && bb == BLOCK_FOR_INSN (bb_note))\n \t    {\n \t      reorder_insns_nobb (insn, insn, bb_note);\n-\t      BB_HEAD (bb) = bb_note;\n+\t      SET_BB_HEAD (bb) = bb_note;\n \t      if (BB_END (bb) == bb_note)\n-\t\tBB_END (bb) = insn;\n+\t\tSET_BB_END (bb) = insn;\n \t    }\n \t}\n \n@@ -326,8 +326,8 @@ create_basic_block_structure (rtx head, rtx end, rtx bb_note, basic_block after)\n   if (NEXT_INSN (end) == bb_note)\n     end = bb_note;\n \n-  BB_HEAD (bb) = head;\n-  BB_END (bb) = end;\n+  SET_BB_HEAD (bb) = head;\n+  SET_BB_END (bb) = end;\n   bb->index = last_basic_block_for_fn (cfun)++;\n   bb->flags = BB_NEW | BB_RTL;\n   link_block (bb, after);\n@@ -400,7 +400,7 @@ rtl_delete_block (basic_block b)\n   end = get_last_bb_insn (b);\n \n   /* Selectively delete the entire chain.  */\n-  BB_HEAD (b) = NULL;\n+  SET_BB_HEAD (b) = NULL;\n   delete_insn_chain (insn, end, true);\n \n \n@@ -743,7 +743,7 @@ rtl_split_block (basic_block bb, void *insnp)\n   /* Create the new basic block.  */\n   new_bb = create_basic_block (NEXT_INSN (insn), BB_END (bb), bb);\n   BB_COPY_PARTITION (new_bb, bb);\n-  BB_END (bb) = insn;\n+  SET_BB_END (bb) = insn;\n \n   /* Redirect the outgoing edges.  */\n   new_bb->succs = bb->succs;\n@@ -802,7 +802,7 @@ emit_nop_for_unique_locus_between (basic_block a, basic_block b)\n   if (!unique_locus_on_edge_between_p (a, b))\n     return;\n \n-  BB_END (a) = emit_insn_after_noloc (gen_nop (), BB_END (a), a);\n+  SET_BB_END (a) = emit_insn_after_noloc (gen_nop (), BB_END (a), a);\n   INSN_LOCATION (BB_END (a)) = EDGE_SUCC (a, 0)->goto_locus;\n }\n \n@@ -884,8 +884,8 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \n   /* Delete everything marked above as well as crap that might be\n      hanging out between the two blocks.  */\n-  BB_END (a) = a_end;\n-  BB_HEAD (b) = b_empty ? NULL_RTX : b_head;\n+  SET_BB_END (a) = a_end;\n+  SET_BB_HEAD (b) = b_empty ? NULL_RTX : b_head;\n   delete_insn_chain (del_first, del_last, true);\n \n   /* When not optimizing and the edge is the only place in RTL which holds\n@@ -901,8 +901,8 @@ rtl_merge_blocks (basic_block a, basic_block b)\n     {\n       update_bb_for_insn_chain (a_end, b_debug_end, a);\n \n-      BB_END (a) = b_debug_end;\n-      BB_HEAD (b) = NULL_RTX;\n+      SET_BB_END (a) = b_debug_end;\n+      SET_BB_HEAD (b) = NULL_RTX;\n     }\n   else if (b_end != b_debug_end)\n     {\n@@ -914,7 +914,7 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \treorder_insns_nobb (NEXT_INSN (a_end), PREV_INSN (b_debug_start),\n \t\t\t    b_debug_end);\n       update_bb_for_insn_chain (b_debug_start, b_debug_end, a);\n-      BB_END (a) = b_debug_end;\n+      SET_BB_END (a) = b_debug_end;\n     }\n \n   df_bb_delete (b->index);\n@@ -979,7 +979,7 @@ block_label (basic_block block)\n \n   if (!LABEL_P (BB_HEAD (block)))\n     {\n-      BB_HEAD (block) = emit_label_before (gen_label_rtx (), BB_HEAD (block));\n+      SET_BB_HEAD (block) = emit_label_before (gen_label_rtx (), BB_HEAD (block));\n     }\n \n   return BB_HEAD (block);\n@@ -1062,7 +1062,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n \t\t  if (PREV_INSN (insn))\n \t\t    NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t\t  else\n-\t\t    BB_FOOTER (src) = NEXT_INSN (insn);\n+\t\t    SET_BB_FOOTER (src) = NEXT_INSN (insn);\n \t\t  if (NEXT_INSN (insn))\n \t\t    PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t\t}\n@@ -1447,7 +1447,7 @@ emit_barrier_after_bb (basic_block bb)\n   gcc_assert (current_ir_type () == IR_RTL_CFGRTL\n               || current_ir_type () == IR_RTL_CFGLAYOUT);\n   if (current_ir_type () == IR_RTL_CFGLAYOUT)\n-    BB_FOOTER (bb) = unlink_insn_chain (barrier, barrier);\n+    SET_BB_FOOTER (bb) = unlink_insn_chain (barrier, barrier);\n }\n \n /* Like force_nonfallthru below, but additionally performs redirection\n@@ -3252,7 +3252,7 @@ fixup_abnormal_edges (void)\n \t      e = find_fallthru_edge (bb->succs);\n \n \t      stop = NEXT_INSN (BB_END (bb));\n-\t      BB_END (bb) = insn;\n+\t      SET_BB_END (bb) = insn;\n \n \t      for (insn = NEXT_INSN (insn); insn != stop; insn = next)\n \t\t{\n@@ -3448,11 +3448,11 @@ record_effective_endpoints (void)\n       rtx end;\n \n       if (PREV_INSN (BB_HEAD (bb)) && next_insn != BB_HEAD (bb))\n-\tBB_HEADER (bb) = unlink_insn_chain (next_insn,\n-\t\t\t\t\t      PREV_INSN (BB_HEAD (bb)));\n+\tSET_BB_HEADER (bb) = unlink_insn_chain (next_insn,\n+\t\t\t\t\t\tPREV_INSN (BB_HEAD (bb)));\n       end = skip_insns_after_block (bb);\n       if (NEXT_INSN (BB_END (bb)) && BB_END (bb) != end)\n-\tBB_FOOTER (bb) = unlink_insn_chain (NEXT_INSN (BB_END (bb)), end);\n+\tSET_BB_FOOTER (bb) = unlink_insn_chain (NEXT_INSN (BB_END (bb)), end);\n       next_insn = NEXT_INSN (BB_END (bb));\n     }\n \n@@ -3610,7 +3610,7 @@ relink_block_chain (bool stay_in_cfglayout_mode)\n     {\n       bb->aux = NULL;\n       if (!stay_in_cfglayout_mode)\n-\tBB_HEADER (bb) = BB_FOOTER (bb) = NULL;\n+\tSET_BB_HEADER (bb) = SET_BB_FOOTER (bb) = NULL;\n     }\n \n   /* Maybe reset the original copy tables, they are not valid anymore\n@@ -3903,8 +3903,8 @@ fixup_reorder_chain (void)\n \t\t}\n \t      nb = split_edge (e);\n \t      if (!INSN_P (BB_END (nb)))\n-\t\tBB_END (nb) = emit_insn_after_noloc (gen_nop (), BB_END (nb),\n-\t\t\t\t\t\t     nb);\n+\t\tSET_BB_END (nb) = emit_insn_after_noloc (gen_nop (), BB_END (nb),\n+\t\t\t\t\t\t\t nb);\n \t      INSN_LOCATION (BB_END (nb)) = e->goto_locus;\n \n \t      /* If there are other incoming edges to the destination block\n@@ -3978,8 +3978,8 @@ fixup_fallthru_exit_predecessor (void)\n \t  bb = split_block (bb, NULL)->dest;\n \t  bb->aux = c->aux;\n \t  c->aux = bb;\n-\t  BB_FOOTER (bb) = BB_FOOTER (c);\n-\t  BB_FOOTER (c) = NULL;\n+\t  SET_BB_FOOTER (bb) = BB_FOOTER (c);\n+\t  SET_BB_FOOTER (c) = NULL;\n \t}\n \n       while (c->aux != bb)\n@@ -4182,7 +4182,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n \tinsn = NEXT_INSN (insn);\n       insn = duplicate_insn_chain (BB_HEADER (bb), insn);\n       if (insn)\n-\tBB_HEADER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n+\tSET_BB_HEADER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n     }\n \n   if (BB_FOOTER (bb))\n@@ -4192,7 +4192,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n \tinsn = NEXT_INSN (insn);\n       insn = duplicate_insn_chain (BB_FOOTER (bb), insn);\n       if (insn)\n-\tBB_FOOTER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n+\tSET_BB_FOOTER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n     }\n \n   return new_bb;\n@@ -4300,8 +4300,8 @@ cfg_layout_split_block (basic_block bb, void *insnp)\n   rtx insn = (rtx) insnp;\n   basic_block new_bb = rtl_split_block (bb, insn);\n \n-  BB_FOOTER (new_bb) = BB_FOOTER (bb);\n-  BB_FOOTER (bb) = NULL;\n+  SET_BB_FOOTER (new_bb) = BB_FOOTER (bb);\n+  SET_BB_FOOTER (bb) = NULL;\n \n   return new_bb;\n }\n@@ -4431,7 +4431,7 @@ cfg_layout_delete_block (basic_block bb)\n \t      if (PREV_INSN (insn))\n \t\tNEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t      else\n-\t\tBB_FOOTER (bb) = NEXT_INSN (insn);\n+\t\tSET_BB_FOOTER (bb) = NEXT_INSN (insn);\n \t      if (NEXT_INSN (insn))\n \t\tPREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t    }\n@@ -4454,7 +4454,7 @@ cfg_layout_delete_block (basic_block bb)\n \t}\n     }\n   if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n-    to = &BB_HEADER (bb->next_bb);\n+    to = &SET_BB_HEADER (bb->next_bb);\n   else\n     to = &cfg_layout_function_footer;\n \n@@ -4566,7 +4566,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   if (BB_FOOTER (b))\n     {\n       if (!BB_FOOTER (a))\n-\tBB_FOOTER (a) = BB_FOOTER (b);\n+\tSET_BB_FOOTER (a) = SET_BB_FOOTER (b);\n       else\n \t{\n \t  rtx last = BB_FOOTER (a);\n@@ -4576,7 +4576,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n \t  NEXT_INSN (last) = BB_FOOTER (b);\n \t  PREV_INSN (BB_FOOTER (b)) = last;\n \t}\n-      BB_FOOTER (b) = NULL;\n+      SET_BB_FOOTER (b) = NULL;\n     }\n \n   /* Move things from b->header before a->footer.\n@@ -4585,7 +4585,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n    if (BB_HEADER (b))\n      {\n       if (! BB_FOOTER (a))\n-\tBB_FOOTER (a) = BB_HEADER (b);\n+\tSET_BB_FOOTER (a) = BB_HEADER (b);\n       else\n \t{\n \t  rtx last = BB_HEADER (b);\n@@ -4594,9 +4594,9 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n \t    last = NEXT_INSN (last);\n \t  NEXT_INSN (last) = BB_FOOTER (a);\n \t  PREV_INSN (BB_FOOTER (a)) = last;\n-\t  BB_FOOTER (a) = BB_HEADER (b);\n+\t  SET_BB_FOOTER (a) = BB_HEADER (b);\n \t}\n-      BB_HEADER (b) = NULL;\n+      SET_BB_HEADER (b) = NULL;\n     }\n \n   /* In the case basic blocks are not adjacent, move them around.  */\n@@ -4610,7 +4610,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   else\n     {\n       insn = BB_HEAD (b);\n-      BB_END (a) = BB_END (b);\n+      SET_BB_END (a) = BB_END (b);\n     }\n \n   /* emit_insn_after_noloc doesn't call df_insn_change_bb.\n@@ -4621,7 +4621,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   if (!NOTE_INSN_BASIC_BLOCK_P (insn))\n     insn = NEXT_INSN (insn);\n   gcc_assert (NOTE_INSN_BASIC_BLOCK_P (insn));\n-  BB_HEAD (b) = BB_END (b) = NULL;\n+  SET_BB_HEAD (b) = SET_BB_END (b) = NULL;\n   delete_insn (insn);\n \n   df_bb_delete (b->index);"}, {"sha": "2fd516edf27b3bf4df6d0346bdef8a21fc5c1be6", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -2422,7 +2422,7 @@ update_cfg_for_uncondjump (rtx insn)\n \t    if (PREV_INSN (insn))\n \t      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t    else\n-\t      BB_FOOTER (bb) = NEXT_INSN (insn);\n+\t      SET_BB_FOOTER (bb) = NEXT_INSN (insn);\n \t    if (NEXT_INSN (insn))\n \t      PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t  }"}, {"sha": "90241ea0ae75e0bfdfeefb1e69eaf84ab20be742", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -5828,8 +5828,8 @@ hwloop_optimize (hwloop_info loop)\n   NEXT_INSN (PREV_INSN (BB_HEAD (bb))) = orig_vec[0];\n   NEXT_INSN (orig_vec[n_insns - 1]) = NEXT_INSN (BB_END (bb));\n   PREV_INSN (NEXT_INSN (BB_END (bb))) = orig_vec[n_insns - 1];\n-  BB_HEAD (bb) = orig_vec[0];\n-  BB_END (bb) = orig_vec[n_insns - 1];\n+  SET_BB_HEAD (bb) = orig_vec[0];\n+  SET_BB_END (bb) = orig_vec[n_insns - 1];\n  undo_splits:\n   free_delay_pairs ();\n   FOR_BB_INSNS (bb, insn)"}, {"sha": "ae22bea379e89f11489af76a9a65fc7ad7d72c1d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -9618,7 +9618,7 @@ emit_predicate_relation_info (void)\n \t    rtx p = gen_rtx_REG (BImode, r);\n \t    rtx n = emit_insn_after (gen_pred_rel_mutex (p), head);\n \t    if (head == BB_END (bb))\n-\t      BB_END (bb) = n;\n+\t      SET_BB_END (bb) = n;\n \t    head = n;\n \t  }\n     }\n@@ -9640,9 +9640,9 @@ emit_predicate_relation_info (void)\n \t      rtx b = emit_insn_before (gen_safe_across_calls_all (), insn);\n \t      rtx a = emit_insn_after (gen_safe_across_calls_normal (), insn);\n \t      if (BB_HEAD (bb) == insn)\n-\t\tBB_HEAD (bb) = b;\n+\t\tSET_BB_HEAD (bb) = b;\n \t      if (BB_END (bb) == insn)\n-\t\tBB_END (bb) = a;\n+\t\tSET_BB_END (bb) = a;\n \t    }\n \n \t  if (insn == BB_END (bb))"}, {"sha": "56aad90ab72f183167fecc4982ac0c2bf9d7aa6c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -3997,7 +3997,7 @@ add_insn_after (rtx insn, rtx after, basic_block bb)\n \t  /* Avoid clobbering of structure when creating new BB.  */\n \t  && !BARRIER_P (insn)\n \t  && !NOTE_INSN_BASIC_BLOCK_P (insn))\n-\tBB_END (bb) = insn;\n+\tSET_BB_END (bb) = insn;\n     }\n }\n \n@@ -4126,10 +4126,10 @@ remove_insn (rtx insn)\n \t  /* Never ever delete the basic block note without deleting whole\n \t     basic block.  */\n \t  gcc_assert (!NOTE_P (insn));\n-\t  BB_HEAD (bb) = next;\n+\t  SET_BB_HEAD (bb) = next;\n \t}\n       if (BB_END (bb) == insn)\n-\tBB_END (bb) = prev;\n+\tSET_BB_END (bb) = prev;\n     }\n }\n \n@@ -4229,12 +4229,12 @@ reorder_insns (rtx from, rtx to, rtx after)\n \t  && (bb2 = BLOCK_FOR_INSN (from)))\n \t{\n \t  if (BB_END (bb2) == to)\n-\t    BB_END (bb2) = prev;\n+\t    SET_BB_END (bb2) = prev;\n \t  df_set_bb_dirty (bb2);\n \t}\n \n       if (BB_END (bb) == after)\n-\tBB_END (bb) = to;\n+\tSET_BB_END (bb) = to;\n \n       for (x = from; x != NEXT_INSN (to); x = NEXT_INSN (x))\n \tif (!BARRIER_P (x))\n@@ -4402,7 +4402,7 @@ emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n \t  df_insn_rescan (last);\n \t}\n       if (BB_END (bb) == after)\n-\tBB_END (bb) = last;\n+\tSET_BB_END (bb) = last;\n     }\n   else\n     for (last = first; NEXT_INSN (last); last = NEXT_INSN (last))"}, {"sha": "69002af56c2b07852484e08610c425b97373b253", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -4809,7 +4809,7 @@ get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n \t\treorder_insns_nobb (note, note, end_tail);\n \n \t\tif (end_tail == BB_END (end))\n-\t\t  BB_END (end) = note;\n+\t\t  SET_BB_END (end) = note;\n \n \t\tif (BLOCK_FOR_INSN (note) != end)\n \t\t  df_insn_change_bb (note, end);\n@@ -4868,7 +4868,7 @@ restore_other_notes (rtx head, basic_block head_bb)\n       NEXT_INSN (note_list) = head;\n \n       if (BLOCK_FOR_INSN (head) != head_bb)\n-\tBB_END (head_bb) = note_list;\n+\tSET_BB_END (head_bb) = note_list;\n \n       head = note_head;\n     }\n@@ -5267,7 +5267,7 @@ move_insn (rtx insn, rtx last, rtx nt)\n \n \t  gcc_assert (BLOCK_FOR_INSN (PREV_INSN (insn)) == bb);\n \n-\t  BB_END (bb) = PREV_INSN (insn);\n+\t  SET_BB_END (bb) = PREV_INSN (insn);\n \t}\n \n       gcc_assert (BB_END (bb) != last);\n@@ -5316,7 +5316,7 @@ move_insn (rtx insn, rtx last, rtx nt)\n \n       /* Update BB_END, if needed.  */\n       if (BB_END (bb) == last)\n-\tBB_END (bb) = insn;\n+\tSET_BB_END (bb) = insn;\n     }\n \n   SCHED_GROUP_P (insn) = 0;\n@@ -7613,7 +7613,7 @@ sched_extend_bb (void)\n       rtx note = emit_note_after (NOTE_INSN_DELETED, end);\n       /* Make note appear outside BB.  */\n       set_block_for_insn (note, NULL);\n-      BB_END (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb) = end;\n+      SET_BB_END (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb) = end;\n     }\n }\n \n@@ -8297,18 +8297,18 @@ fix_jump_move (rtx jump)\n \n   if (!NOTE_INSN_BASIC_BLOCK_P (BB_END (jump_bb_next)))\n     /* if jump_bb_next is not empty.  */\n-    BB_END (jump_bb) = BB_END (jump_bb_next);\n+    SET_BB_END (jump_bb) = BB_END (jump_bb_next);\n \n   if (BB_END (bb) != PREV_INSN (jump))\n     /* Then there are instruction after jump that should be placed\n        to jump_bb_next.  */\n-    BB_END (jump_bb_next) = BB_END (bb);\n+    SET_BB_END (jump_bb_next) = BB_END (bb);\n   else\n     /* Otherwise jump_bb_next is empty.  */\n-    BB_END (jump_bb_next) = NEXT_INSN (BB_HEAD (jump_bb_next));\n+    SET_BB_END (jump_bb_next) = NEXT_INSN (BB_HEAD (jump_bb_next));\n \n   /* To make assertion in move_insn happy.  */\n-  BB_END (bb) = PREV_INSN (jump);\n+  SET_BB_END (bb) = PREV_INSN (jump);\n \n   update_bb_for_insn (jump_bb_next);\n }"}, {"sha": "8e0f3bd63c6b69654abad66fc595cec47325d176", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -2618,7 +2618,7 @@ noce_process_if_block (struct noce_if_info *if_info)\n \t  rtx note;\n \n \t  if (else_bb && insn_b == BB_END (else_bb))\n-\t    BB_END (else_bb) = PREV_INSN (insn_b);\n+\t    SET_BB_END (else_bb) = PREV_INSN (insn_b);\n \t  reorder_insns (insn_b, insn_b, PREV_INSN (jump));\n \n \t  /* If there was a REG_EQUAL note, delete it since it may have been\n@@ -4372,7 +4372,7 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n       rtx insn;\n \n       if (end == BB_END (merge_bb))\n-\tBB_END (merge_bb) = PREV_INSN (head);\n+\tSET_BB_END (merge_bb) = PREV_INSN (head);\n \n       /* PR 21767: when moving insns above a conditional branch, the REG_EQUAL\n \t notes being moved might become invalid.  */"}, {"sha": "3f41061413b6ff6eef054cabd089cde866f24721", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -3760,7 +3760,7 @@ update_equiv_regs (void)\n \t\t      REG_LIVE_LENGTH (regno) = 2;\n \n \t\t      if (insn == BB_HEAD (bb))\n-\t\t\tBB_HEAD (bb) = PREV_INSN (insn);\n+\t\t\tSET_BB_HEAD (bb) = PREV_INSN (insn);\n \n \t\t      ira_reg_equiv[regno].init_insns\n \t\t\t= gen_rtx_INSN_LIST (VOIDmode, new_insn, NULL_RTX);"}, {"sha": "fe1ce7e0eddb2504cffc54b5b272d439977e9960", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -2595,7 +2595,7 @@ change_stack (rtx insn, stack_ptr old, stack_ptr new_stack, enum emit_where wher\n     }\n \n   if (update_end)\n-    BB_END (current_block) = PREV_INSN (insn);\n+    SET_BB_END (current_block) = PREV_INSN (insn);\n }\n \f\n /* Print stack configuration.  */"}, {"sha": "8411d6f66cc1dcd80c40fa5f388a0a77dae313c6", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -1432,7 +1432,7 @@ sel_move_insn (expr_t expr, int seqno, insn_t after)\n   /* Update links from insn to bb and vice versa.  */\n   df_insn_change_bb (insn, bb);\n   if (BB_END (bb) == after)\n-    BB_END (bb) = insn;\n+    SET_BB_END (bb) = insn;\n \n   prepare_insn_expr (insn, seqno);\n   return insn;"}, {"sha": "60a077c23eaf2621441a404dab1dd336be00e5ca", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -5202,7 +5202,7 @@ move_nop_to_previous_block (insn_t nop, basic_block prev_bb)\n   NEXT_INSN (nop) = note;\n   PREV_INSN (next_insn) = note;\n \n-  BB_END (prev_bb) = nop;\n+  SET_BB_END (prev_bb) = nop;\n   BLOCK_FOR_INSN (nop) = prev_bb;\n }\n "}, {"sha": "59aa5c54b19f1c4a8705e4e212d950271bf5d7aa", "filename": "rtx-classes-status.txt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/rtx-classes-status.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190bea879f9e6c85aa7a8d191e09b1ef1e85ac26/rtx-classes-status.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/rtx-classes-status.txt?ref=190bea879f9e6c85aa7a8d191e09b1ef1e85ac26", "patch": "@@ -11,3 +11,7 @@ Phase 3: per-file commits within \"config\" subdirs: TODO\n Phase 4: removal of \"scaffolding\":                 TODO\n Phase 5: additional rtx_def subclasses:            TODO\n Phase 6: use extra rtx_def subclasses:             TODO\n+\n+TODO: \"Scaffolding\" to be removed\n+=================================\n+* SET_BB_HEAD, SET_BB_END, SET_BB_HEADER, SET_BB_FOOTER"}]}