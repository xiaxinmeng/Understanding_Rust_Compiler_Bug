{"sha": "93409b8c457d6b10875aff1931f57a099da88544", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0MDliOGM0NTdkNmIxMDg3NWFmZjE5MzFmNTdhMDk5ZGE4ODU0NA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T18:23:35Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T18:23:35Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* decl.c (pop_label):  Handle (imperfectly) USE_MAPPED_LOCATION case.\n\t* decl2.c:  If USE_MAPPED_LOCATION, don't do some line number\n\tadjustments - which I don't understand.\n\t* error.c (dump_decl):  Rename \"<interrnal>\" to \"<built-in>\".\n\t* error.c:  Use LOCATION_FILE and EXPR_LOCATION macros.\n\t(print_instantiation_partial_context):  Use expand_location.\n\t* decl.c (duplicate_decl):  Use new DECL_IS_BUILTIN macro.\n\t* name-lookup.c:  Likewise.\n\t* lex.c (cxx_init):  Likewise.  Also use BUILTINS_LOCATION.\n\t* name-lookup.c:  Use input_line macro.\n\t* parser.c (cp_lexer_get_preprocessor_token):  Use UNKNOWN_LOCATION.\n\t(cp_parser_statement):  Rename locaal variable statement_locus to\n\tstatement_location and use SET_EXPR_LOCATION macro.\n\t* pt.c:  Handle USE_MAPPED_LOCATION case.  Use new macros.\n\t* tree.c (cp_walk_subtrees):  Likewise.\n\nFrom-SVN: r83923", "tree": {"sha": "bee4190e15fa75923831305a97d15dbe3638b99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bee4190e15fa75923831305a97d15dbe3638b99e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93409b8c457d6b10875aff1931f57a099da88544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93409b8c457d6b10875aff1931f57a099da88544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93409b8c457d6b10875aff1931f57a099da88544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93409b8c457d6b10875aff1931f57a099da88544/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9506ac2be5e52ce7e184be3c52d31421355b7ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9506ac2be5e52ce7e184be3c52d31421355b7ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9506ac2be5e52ce7e184be3c52d31421355b7ab4"}], "stats": {"total": 105, "additions": 74, "deletions": 31}, "files": [{"sha": "8ff420081debed31c8c19910d2da2803ec9da906", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -1,3 +1,22 @@\n+2004-06-30  Per Bothner  <per@bothner.com>\n+\n+\tConditionally compile support for --enable-mapped_location.\n+\t* decl.c (pop_label):  Handle (imperfectly) USE_MAPPED_LOCATION case.\n+\t* decl2.c:  If USE_MAPPED_LOCATION, don't do some line number\n+\tadjustments - which I don't understand.\n+\t* error.c (dump_decl):  Rename \"<interrnal>\" to \"<built-in>\".\n+\t* error.c:  Use LOCATION_FILE and EXPR_LOCATION macros.\n+\t(print_instantiation_partial_context):  Use expand_location.\n+\t* decl.c (duplicate_decl):  Use new DECL_IS_BUILTIN macro.\n+\t* name-lookup.c:  Likewise.\n+\t* lex.c (cxx_init):  Likewise.  Also use BUILTINS_LOCATION.\n+\t* name-lookup.c:  Use input_line macro.\n+\t* parser.c (cp_lexer_get_preprocessor_token):  Use UNKNOWN_LOCATION.\n+\t(cp_parser_statement):  Rename locaal variable statement_locus to\n+\tstatement_location and use SET_EXPR_LOCATION macro.\n+\t* pt.c:  Handle USE_MAPPED_LOCATION case.  Use new macros.\n+\t* tree.c (cp_walk_subtrees):  Likewise.\n+\n 2004-06-29  Per Bothner  <per@bothner.com>\n \n \t* tree.c (build_min_nt, build_min, build_min_non_dep):"}, {"sha": "dced875564ad7c11ecbf5960d5d8567556f3a95b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -363,8 +363,12 @@ pop_label (tree label, tree old_value)\n \t  location_t location;\n \n \t  cp_error_at (\"label `%D' used but not defined\", label);\n+#ifdef USE_MAPPED_LOCATION\n+\t  location = input_location; /* FIXME want (input_filename, (line)0) */\n+#else\n  \t  location.file = input_filename;\n \t  location.line = 0;\n+#endif\n \t  /* Avoid crashing later.  */\n \t  define_label (location, DECL_NAME (label));\n \t}\n@@ -1635,7 +1639,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t\t\t\t\t\t\t TYPE_RAISES_EXCEPTIONS (oldtype));\n \n \t  if ((pedantic || ! DECL_IN_SYSTEM_HEADER (olddecl))\n-\t      && DECL_SOURCE_LINE (olddecl) != 0\n+\t      && ! DECL_IS_BUILTIN (olddecl)\n \t      && flag_exceptions\n \t      && !comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (newdecl)),\n \t                             TYPE_RAISES_EXCEPTIONS (TREE_TYPE (olddecl)), 1))"}, {"sha": "f3ecc3e5dcc9b125f8b474b5017f81d853354196", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -2419,7 +2419,11 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n   size_t i;\n \n   input_location = *locus;\n+#ifdef USE_MAPPED_LOCATION\n+  /* ??? */\n+#else\n   locus->line++;\n+#endif\n   \n   /* We use `I' to indicate initialization and `D' to indicate\n      destruction.  */\n@@ -2556,9 +2560,13 @@ finish_file (void)\n   if (pch_file)\n     c_common_write_pch ();\n \n+#ifdef USE_MAPPED_LOCATION\n+  /* FIXME - huh? */\n+#else\n   /* Otherwise, GDB can get confused, because in only knows\n      about source for LINENO-1 lines.  */\n   input_line -= 1;\n+#endif\n \n   interface_unknown = 1;\n   interface_only = 0;\n@@ -2714,7 +2722,11 @@ finish_file (void)\n \t     instantiations, etc.  */\n \t  reconsider = true;\n \t  ssdf_count++;\n+#ifdef USE_MAPPED_LOCATION\n+\t  /* ??? */\n+#else\n \t  locus.line++;\n+#endif\n \t}\n       \n       for (i = 0; i < deferred_fns_used; ++i)"}, {"sha": "e345793f3c74a12e9a2511e22c0bf05b5c744b9b", "filename": "gcc/cp/error.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -835,7 +835,7 @@ dump_decl (tree t, int flags)\n       if (DECL_GLOBAL_CTOR_P (t) || DECL_GLOBAL_DTOR_P (t))\n \tdump_global_iord (t);\n       else if (! DECL_LANG_SPECIFIC (t))\n-\tpp_identifier (cxx_pp, \"<internal>\");\n+\tpp_identifier (cxx_pp, \"<built-in>\");\n       else\n         dump_function_decl (t, flags);\n       break;\n@@ -2145,9 +2145,8 @@ cp_print_error_function (diagnostic_context *context,\n   if (diagnostic_last_function_changed (context))\n     {\n       const char *old_prefix = context->printer->prefix;\n-      char *new_prefix = diagnostic->location.file\n-        ? file_name_as_prefix (diagnostic->location.file)\n-        : NULL;\n+      const char *file = LOCATION_FILE (diagnostic->location);\n+      char *new_prefix = file ? file_name_as_prefix (file) : NULL;\n \n       pp_base_set_prefix (context->printer, new_prefix);\n \n@@ -2208,11 +2207,12 @@ print_instantiation_full_context (diagnostic_context *context)\n \t    /* Avoid redundancy with the the \"In function\" line.  */;\n \t  else\n \t    pp_verbatim (context->printer,\n-                         \"%s: In instantiation of `%s':\\n\", location.file,\n+                         \"%s: In instantiation of `%s':\\n\",\n+\t\t\t LOCATION_FILE (location),\n                          decl_as_string (TINST_DECL (p),\n                                          TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n \n-\t  location = *EXPR_LOCUS (p);\n+\t  location = EXPR_LOCATION (p);\n \t  p = TREE_CHAIN (p);\n \t}\n     }\n@@ -2225,16 +2225,20 @@ static void\n print_instantiation_partial_context (diagnostic_context *context,\n                                      tree t, location_t loc)\n {\n-  for (; t; t = TREE_CHAIN (t))\n+  expanded_location xloc;\n+  for (; ; t = TREE_CHAIN (t))\n     {\n+      xloc = expand_location (loc);\n+      if (t == NULL_TREE)\n+\tbreak;\n       pp_verbatim (context->printer, \"%s:%d:   instantiated from `%s'\\n\",\n-                   loc.file, loc.line,\n+                   xloc.file, xloc.line,\n                    decl_as_string (TINST_DECL (t),\n                                    TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n-      loc = *EXPR_LOCUS (t);\n+      loc = EXPR_LOCATION (t);\n     }\n   pp_verbatim (context->printer, \"%s:%d:   instantiated from here\\n\",\n-               loc.file, loc.line);\n+               xloc.file, xloc.line);\n }\n \n /* Called from cp_thing to print the template context for an error.  */"}, {"sha": "f47aa931ce582263ef571e8a59fa90ffbd71a9b5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -336,7 +336,11 @@ cxx_init (void)\n   /* We cannot just assign to input_filename because it has already\n      been initialized and will be used later as an N_BINCL for stabs+\n      debugging.  */\n-  push_srcloc (\"<internal>\", 0);\n+#ifdef USE_MAPPED_LOCATION\n+  push_srcloc (BUILTINS_LOCATION);\n+#else\n+  push_srcloc (\"<built-in>\", 0);\n+#endif\n \n   init_reswords ();\n   init_tree ();"}, {"sha": "899a2ead9f4a07619887fb524ef7c78c26446aea", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -781,7 +781,7 @@ pushdecl (tree x)\n       if (TREE_CODE (x) == TYPE_DECL)\n \t{\n \t  tree type = TREE_TYPE (x);\n-\t  if (DECL_SOURCE_LINE (x) == 0)\n+\t  if (DECL_IS_BUILTIN (x))\n             {\n \t      if (TYPE_NAME (type) == 0)\n \t        TYPE_NAME (type) = x;\n@@ -1328,7 +1328,7 @@ begin_scope (scope_kind kind, tree entity)\n     {\n       scope->binding_depth = binding_depth;\n       indent (binding_depth);\n-      cxx_scope_debug (scope, input_location.line, \"push\");\n+      cxx_scope_debug (scope, input_line, \"push\");\n       is_class_level = 0;\n       binding_depth++;\n     }\n@@ -1354,7 +1354,7 @@ leave_scope (void)\n   if (ENABLE_SCOPE_CHECKING)\n     {\n       indent (--binding_depth);\n-      cxx_scope_debug (scope, input_location.line, \"leave\");\n+      cxx_scope_debug (scope, input_line, \"leave\");\n       if (is_class_level != (scope == class_binding_level))\n         {\n           indent (binding_depth);\n@@ -1407,7 +1407,7 @@ resume_scope (struct cp_binding_level* b)\n     {\n       b->binding_depth = binding_depth;\n       indent (binding_depth);\n-      cxx_scope_debug (b, input_location.line, \"resume\");\n+      cxx_scope_debug (b, input_line, \"resume\");\n       is_class_level = 0;\n       binding_depth++;\n     }\n@@ -1600,7 +1600,7 @@ print_binding_level (struct cp_binding_level* lvl)\n \t    continue;\n \t  if (no_print_builtins\n \t      && (TREE_CODE (t) == TYPE_DECL)\n-\t      && (!strcmp (DECL_SOURCE_FILE (t),\"<built-in>\")))\n+\t      && DECL_IS_BUILTIN (t))\n \t    continue;\n \n \t  /* Function decls tend to have longer names.  */"}, {"sha": "e3b97369cfd17844ef01c1bb15aae12c64f6c698", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -597,8 +597,7 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n   if (lexer != NULL && !lexer->main_lexer_p)\n     {\n       token->type = CPP_EOF;\n-      token->location.line = 0;\n-      token->location.file = NULL;\n+      token->location = UNKNOWN_LOCATION;\n       token->value = NULL_TREE;\n       token->keyword = RID_MAX;\n \n@@ -5890,14 +5889,14 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr)\n {\n   tree statement;\n   cp_token *token;\n-  location_t statement_locus;\n+  location_t statement_location;\n \n   /* There is no statement yet.  */\n   statement = NULL_TREE;\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n   /* Remember the location of the first token in the statement.  */\n-  statement_locus = token->location;\n+  statement_location = token->location;\n   /* If this is a keyword, then that will often determine what kind of\n      statement we have.  */\n   if (token->type == CPP_KEYWORD)\n@@ -5973,10 +5972,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr)\n \n   /* Set the line number for the statement.  */\n   if (statement && STATEMENT_CODE_P (TREE_CODE (statement)))\n-    {\n-      SET_EXPR_LOCUS (statement, NULL);\n-      annotate_with_locus (statement, statement_locus);\n-    }\n+    SET_EXPR_LOCATION (statement, statement_location);\n }\n \n /* Parse a labeled-statement."}, {"sha": "e7a598bc38be85ac135bac943ed8b4b670d37087", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -4871,7 +4871,7 @@ push_tinst_level (tree d)\n     }\n \n   new = make_node (TINST_LEVEL);\n-  annotate_with_locus (new, input_location);\n+  SET_EXPR_LOCATION (new, input_location);\n   TINST_DECL (new) = d;\n   TREE_CHAIN (new) = current_tinst_level;\n   current_tinst_level = new;\n@@ -4896,7 +4896,7 @@ pop_tinst_level (void)\n \n   /* Restore the filename and line number stashed away when we started\n      this instantiation.  */\n-  input_location = *EXPR_LOCUS (old);\n+  input_location = EXPR_LOCATION (old);\n   extract_interface_info ();\n   \n   current_tinst_level = TREE_CHAIN (old);\n@@ -6930,8 +6930,12 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       message to avoid spewing a ton of messages during a\n \t       single bad template instantiation.  */\n \t    if (complain & tf_error\n+#ifdef USE_MAPPED_LOCATION\n+\t\t&& last_loc != input_location)\n+#else\n \t\t&& (last_loc.line != input_line\n \t\t    || last_loc.file != input_filename))\n+#endif\n \t      {\n \t\tif (TREE_CODE (type) == VOID_TYPE)\n \t\t  error (\"forming reference to void\");\n@@ -7713,8 +7717,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   if (t == NULL_TREE || t == error_mark_node)\n     return t;\n \n-  if (EXPR_LOCUS (t))\n-    input_location = *EXPR_LOCUS (t);\n+  if (EXPR_HAS_LOCATION (t))\n+    input_location = EXPR_LOCATION (t);\n   if (STATEMENT_CODE_P (TREE_CODE (t)))\n     current_stmt_tree ()->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n "}, {"sha": "fb08095f94c2f682dbdc9df1f9828e9f5856d4ce", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93409b8c457d6b10875aff1931f57a099da88544/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=93409b8c457d6b10875aff1931f57a099da88544", "patch": "@@ -1973,8 +1973,8 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n   /* Set input_location here so we get the right instantiation context\n      if we call instantiate_decl from inlinable_function_p.  */\n   save_locus = input_location;\n-  if (EXPR_LOCUS (*tp))\n-    input_location = *EXPR_LOCUS (*tp);\n+  if (EXPR_HAS_LOCATION (*tp))\n+    input_location = EXPR_LOCATION (*tp);\n \n   /* Not one of the easy cases.  We must explicitly go through the\n      children.  */"}]}