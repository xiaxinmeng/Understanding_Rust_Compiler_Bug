{"sha": "5c24ddaf36be1236f276269d356257d59ff860b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNGRkYWYzNmJlMTIzNmYyNzYyNjlkMzU2MjU3ZDU5ZmY4NjBiMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-07-30T09:28:14Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-07-30T09:28:14Z"}, "message": "re PR tree-optimization/32527 (ICE in build2_stat, at tree.c:3074)\n\n2007-07-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/32527\n        * tree-affine.h (aff_tree): The type of rest is sizetype for types\n        of pointers.\n        * tree-affine.c (aff_combination_scale): If type is a pointer type,\n        use sizetype for rest.\n        (aff_combination_add_elt): Likewise. Don't specialize pointer types.\n        (aff_combination_convert): Don't convert rest for pointer types.\n\nFrom-SVN: r127058", "tree": {"sha": "2bc849178633a1d10806791d26cd3af88a6bcfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc849178633a1d10806791d26cd3af88a6bcfa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c24ddaf36be1236f276269d356257d59ff860b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c24ddaf36be1236f276269d356257d59ff860b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c24ddaf36be1236f276269d356257d59ff860b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c24ddaf36be1236f276269d356257d59ff860b3/comments", "author": null, "committer": null, "parents": [{"sha": "cef44ee25f2609eaa6104a6d4be11b08380bd57e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef44ee25f2609eaa6104a6d4be11b08380bd57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef44ee25f2609eaa6104a6d4be11b08380bd57e"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "73cc1e46367f911d70336008be11318d4980f149", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c24ddaf36be1236f276269d356257d59ff860b3", "patch": "@@ -1,3 +1,13 @@\n+2007-07-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/32527\n+\t* tree-affine.h (aff_tree): The type of rest is sizetype for types\n+\tof pointers.\n+\t* tree-affine.c (aff_combination_scale): If type is a pointer type,\n+\tuse sizetype for rest.\n+\t(aff_combination_add_elt): Likewise. Don't specialize pointer types.\n+\t(aff_combination_convert): Don't convert rest for pointer types.\n+\n 2007-07-28  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* Makefile.in (tree-ssa-alias.o): Add alloc-pool.h"}, {"sha": "75281884f7fcd3fa5a5a45d265f9c493bfbd4f2a", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=5c24ddaf36be1236f276269d356257d59ff860b3", "patch": "@@ -110,6 +110,9 @@ aff_combination_scale (aff_tree *comb, double_int scale)\n \n   if (comb->rest)\n     {\n+      tree type = comb->type;\n+      if (POINTER_TYPE_P (type))\n+\ttype = sizetype;\n       if (comb->n < MAX_AFF_ELTS)\n \t{\n \t  comb->elts[comb->n].coef = scale;\n@@ -118,8 +121,8 @@ aff_combination_scale (aff_tree *comb, double_int scale)\n \t  comb->n++;\n \t}\n       else\n-\tcomb->rest = fold_build2 (MULT_EXPR, comb->type, comb->rest, \n-\t\t\t\t  double_int_to_tree (comb->type, scale));\n+\tcomb->rest = fold_build2 (MULT_EXPR, type, comb->rest, \n+\t\t\t\t  double_int_to_tree (type, scale));\n     }\n }\n \n@@ -181,14 +184,8 @@ aff_combination_add_elt (aff_tree *comb, tree elt, double_int scale)\n \t\t       double_int_to_tree (type, scale)); \n \n   if (comb->rest)\n-    {\n-      if (POINTER_TYPE_P (comb->type))\n-\tcomb->rest = fold_build2 (POINTER_PLUS_EXPR, comb->type,\n-\t\t\t\t  comb->rest, elt);\n-      else\n-\tcomb->rest = fold_build2 (PLUS_EXPR, comb->type, comb->rest,\n-\t\t\t\t  elt);\n-    }\n+    comb->rest = fold_build2 (PLUS_EXPR, type, comb->rest,\n+\t\t\t      elt);\n   else\n     comb->rest = elt;\n }\n@@ -231,7 +228,7 @@ aff_combination_convert (aff_tree *comb, tree type)\n     }\n \n   comb->type = type;\n-  if (comb->rest)\n+  if (comb->rest && !POINTER_TYPE_P (type))\n     comb->rest = fold_convert (type, comb->rest);\n \n   if (TYPE_PRECISION (type) == TYPE_PRECISION (comb_type))"}, {"sha": "5da34bead9a3dc0edfc5c027b175e0528f4cad55", "filename": "gcc/tree-affine.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2Ftree-affine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c24ddaf36be1236f276269d356257d59ff860b3/gcc%2Ftree-affine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.h?ref=5c24ddaf36be1236f276269d356257d59ff860b3", "patch": "@@ -53,7 +53,8 @@ typedef struct affine_tree_combination\n   struct aff_comb_elt elts[MAX_AFF_ELTS];\n \n   /* Remainder of the expression.  Usually NULL, used only if there are more\n-     than MAX_AFF_ELTS elements.  Type of REST must be TYPE.  */\n+     than MAX_AFF_ELTS elements.  Type of REST will be either sizetype for \n+     TYPE of POINTER_TYPEs or TYPE.  */\n   tree rest;\n } aff_tree;\n "}]}