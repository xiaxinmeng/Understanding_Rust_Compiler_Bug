{"sha": "928af3bfe2bd34a803c3a371436463fd46b31e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4YWYzYmZlMmJkMzRhODAzYzNhMzcxNDM2NDYzZmQ0NmIzMWU1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-23T18:55:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-23T18:55:38Z"}, "message": "re PR c++/70001 (Infinity compilation time)\n\n\tPR c++/70001\n\t* constexpr.c (cxx_eval_vec_init_1): Reuse CONSTRUCTOR initializers\n\tfor 1..max even for multi-dimensional arrays.  Call unshare_expr\n\ton it.\n\n\t* g++.dg/cpp0x/constexpr-70001-4.C: New test.\n\t* g++.dg/cpp1y/pr70001.C: New test.\n\nFrom-SVN: r234439", "tree": {"sha": "ab45560fcaf026a391bb8e5afaa07f430e349432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab45560fcaf026a391bb8e5afaa07f430e349432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928af3bfe2bd34a803c3a371436463fd46b31e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928af3bfe2bd34a803c3a371436463fd46b31e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928af3bfe2bd34a803c3a371436463fd46b31e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928af3bfe2bd34a803c3a371436463fd46b31e5d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61637db3f2f55a1b97e6f466be012a131bede75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61637db3f2f55a1b97e6f466be012a131bede75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61637db3f2f55a1b97e6f466be012a131bede75d"}], "stats": {"total": 110, "additions": 96, "deletions": 14}, "files": [{"sha": "42c7054637838edeea144012e17c69302900ab6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=928af3bfe2bd34a803c3a371436463fd46b31e5d", "patch": "@@ -1,5 +1,10 @@\n 2016-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/70001\n+\t* constexpr.c (cxx_eval_vec_init_1): Reuse CONSTRUCTOR initializers\n+\tfor 1..max even for multi-dimensional arrays.  Call unshare_expr\n+\ton it.\n+\n \tPR c++/70323\n \t* constexpr.c (cxx_eval_constant_expression): Diagnose overflow\n \ton TREE_OVERFLOW constants."}, {"sha": "8427513854d408451b1e959e3cf793f8da110a5a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=928af3bfe2bd34a803c3a371436463fd46b31e5d", "patch": "@@ -2362,7 +2362,6 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   vec_alloc (*p, max + 1);\n   bool pre_init = false;\n-  tree pre_init_elt = NULL_TREE;\n   unsigned HOST_WIDE_INT i;\n \n   /* For the default constructor, build up a call to the default\n@@ -2392,6 +2391,7 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n     {\n       tree idx = build_int_cst (size_type_node, i);\n       tree eltinit;\n+      bool reuse = false;\n       constexpr_ctx new_ctx;\n       init_subob_ctx (ctx, new_ctx, idx, pre_init ? init : elttype);\n       if (new_ctx.ctor != ctx->ctor)\n@@ -2400,7 +2400,10 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t{\n \t  /* A multidimensional array; recurse.  */\n \t  if (value_init || init == NULL_TREE)\n-\t    eltinit = NULL_TREE;\n+\t    {\n+\t      eltinit = NULL_TREE;\n+\t      reuse = i == 0;\n+\t    }\n \t  else\n \t    eltinit = cp_build_array_ref (input_location, init, idx,\n \t\t\t\t\t  tf_warning_or_error);\n@@ -2412,18 +2415,9 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t{\n \t  /* Initializing an element using value or default initialization\n \t     we just pre-built above.  */\n-\t  if (pre_init_elt == NULL_TREE)\n-\t    pre_init_elt\n-\t      = cxx_eval_constant_expression (&new_ctx, init, lval,\n-\t\t\t\t\t      non_constant_p, overflow_p);\n-\t  eltinit = pre_init_elt;\n-\t  /* Don't reuse the result of cxx_eval_constant_expression\n-\t     call if it isn't a constant initializer or if it requires\n-\t     relocations.  */\n-\t  if (initializer_constant_valid_p (pre_init_elt,\n-\t\t\t\t\t    TREE_TYPE (pre_init_elt))\n-\t      != null_pointer_node)\n-\t    pre_init_elt = NULL_TREE;\n+\t  eltinit = cxx_eval_constant_expression (&new_ctx, init, lval,\n+\t\t\t\t\t\t  non_constant_p, overflow_p);\n+\t  reuse = i == 0;\n \t}\n       else\n \t{\n@@ -2449,6 +2443,23 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t}\n       else\n \tCONSTRUCTOR_APPEND_ELT (*p, idx, eltinit);\n+      /* Reuse the result of cxx_eval_constant_expression call\n+\t  from the first iteration to all others if it is a constant\n+\t  initializer that doesn't require relocations.  */\n+      if (reuse\n+\t  && max > 1\n+\t  && (initializer_constant_valid_p (eltinit, TREE_TYPE (eltinit))\n+\t      == null_pointer_node))\n+\t{\n+\t  if (new_ctx.ctor != ctx->ctor)\n+\t    eltinit = new_ctx.ctor;\n+\t  for (i = 1; i < max; ++i)\n+\t    {\n+\t      idx = build_int_cst (size_type_node, i);\n+\t      CONSTRUCTOR_APPEND_ELT (*p, idx, unshare_expr (eltinit));\n+\t    }\n+\t  break;\n+\t}\n     }\n \n   if (!*non_constant_p)"}, {"sha": "1b3283286c37627efcf922560c2cbf59fa93c443", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=928af3bfe2bd34a803c3a371436463fd46b31e5d", "patch": "@@ -1,5 +1,9 @@\n 2016-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/70001\n+\t* g++.dg/cpp0x/constexpr-70001-4.C: New test.\n+\t* g++.dg/cpp1y/pr70001.C: New test.\n+\n \tPR c++/70323\n \t* g++.dg/cpp0x/constexpr-70323.C: New test.\n "}, {"sha": "c1ab1765b3e8b9732f3c128a1671a134cf058f07", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70001-4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70001-4.C?ref=928af3bfe2bd34a803c3a371436463fd46b31e5d", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/70001\n+// { dg-do compile { target c++11 } }\n+\n+struct B\n+{\n+  int a;\n+  constexpr B () : a (0) { }\n+};\n+\n+struct A\n+{\n+  B b[1 << 19][1][1][1];\n+} c;"}, {"sha": "adbb13251e6c1cac3f17fb3e85b98842842b0084", "filename": "gcc/testsuite/g++.dg/cpp1y/pr70001.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr70001.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928af3bfe2bd34a803c3a371436463fd46b31e5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr70001.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr70001.C?ref=928af3bfe2bd34a803c3a371436463fd46b31e5d", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/70001\n+// { dg-do compile { target c++14 } }\n+\n+struct B\n+{\n+  int a;\n+  constexpr B () : a (0) { }\n+  constexpr B (int x) : a (x) { }\n+};\n+struct C\n+{\n+  B c;\n+  constexpr C () : c (0) { }\n+};\n+struct A\n+{\n+  B b[1 << 4];\n+};\n+struct D\n+{\n+  C d[1 << 4];\n+};\n+\n+constexpr int\n+foo (int a, int b)\n+{\n+  A c;\n+  c.b[a].a += b;\n+  c.b[b].a += a;\n+  return c.b[0].a + c.b[a].a + c.b[b].a;\n+}\n+\n+constexpr int\n+bar (int a, int b)\n+{\n+  D c;\n+  c.d[a].c.a += b;\n+  c.d[b].c.a += a;\n+  return c.d[0].c.a + c.d[a].c.a + c.d[b].c.a;\n+}\n+\n+constexpr int d = foo (1, 2);\n+constexpr int e = foo (0, 3);\n+constexpr int f = foo (2, 4);\n+constexpr int g = bar (1, 2);\n+constexpr int h = bar (0, 3);\n+constexpr int i = bar (2, 4);\n+static_assert (d == 3 && e == 6 && f == 6, \"\");\n+static_assert (g == 3 && h == 6 && i == 6, \"\");"}]}