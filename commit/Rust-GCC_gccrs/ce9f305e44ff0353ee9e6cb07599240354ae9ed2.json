{"sha": "ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5ZjMwNWU0NGZmMDM1M2VlOWU2Y2IwNzU5OTI0MDM1NGFlOWVkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T14:39:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T14:39:58Z"}, "message": "Add __is_nothrow_convertible to fix std::is_nothrow_invocable_r\n\nThe definition of is_nothrow_invocable in terms of is_convertible and\nis_nothrow_constructible is incorrect, because a type could have an\nexplicit constructor that means is_nothrow_constructible is true, but\nimplicit conversions could use a different constructor that is\npotentially-throwing.\n\nFix it by adding a C++11 version of C++20's is_nothrow_convertible that\nonly considers implicit conversions.\n\n\t* include/std/type_traits (__is_nt_convertible_helper): Define it\n\tunconditionally, not only for C++20.\n\t(__is_nothrow_convertible): Define internal trait for use in C++11.\n\t(__is_nt_invocable_impl: Fix by using __is_nothrow_convertible.\n\t(is_invocable_r_v, is_nothrow_invocable_r_v): Add missing parameter.\n\t* testsuite/20_util/is_nothrow_convertible/value_ext.cc: New test.\n\t* testsuite/20_util/is_nothrow_convertible/value.cc: Check with type\n\tthat has nothrow explicit conversion but potentially-throwing implicit\n\tconversion.\n\t* testsuite/20_util/is_nothrow_invocable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Fix helper\n\tfunction to only consider implicit conversions.\n\t* testsuite/20_util/tuple/cons/noexcept_specs.cc: Add comment.\n\nFrom-SVN: r271171", "tree": {"sha": "bbe2f05868657c7771ea3a3e5a4dac499bfa24e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe2f05868657c7771ea3a3e5a4dac499bfa24e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1158c5b424c9c3a24a47e6cdfce923b373d9b013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1158c5b424c9c3a24a47e6cdfce923b373d9b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1158c5b424c9c3a24a47e6cdfce923b373d9b013"}], "stats": {"total": 114, "additions": 100, "deletions": 14}, "files": [{"sha": "fced2f98538fd82a10ae6be275f037439a196d8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -1,5 +1,19 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/type_traits (__is_nt_convertible_helper): Define it\n+\tunconditionally, not only for C++20.\n+\t(__is_nothrow_convertible): Define internal trait for use in C++11.\n+\t(__is_nt_invocable_impl: Fix by using __is_nothrow_convertible.\n+\t(is_invocable_r_v, is_nothrow_invocable_r_v): Add missing parameter.\n+\t* testsuite/20_util/is_nothrow_convertible/value_ext.cc: New test.\n+\t* testsuite/20_util/is_nothrow_convertible/value.cc: Check with type\n+\tthat has nothrow explicit conversion but potentially-throwing implicit\n+\tconversion.\n+\t* testsuite/20_util/is_nothrow_invocable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Fix helper\n+\tfunction to only consider implicit conversions.\n+\t* testsuite/20_util/tuple/cons/noexcept_specs.cc: Add comment.\n+\n \t* include/std/iterator: Include <iosfwd> instead of <istream> and\n \t<ostream>.\n "}, {"sha": "f68d366269dde56093f4d40d0cc2bf9e5535e5ae", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -1378,7 +1378,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_convertible_helper<_From, _To>::type\n     { };\n \n-#if __cplusplus > 201703L\n     template<typename _From, typename _To,\n            bool = __or_<is_void<_From>, is_function<_To>,\n                         is_array<_To>>::value>\n@@ -1393,7 +1392,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic void __test_aux(_To1) noexcept;\n \n       template<typename _From1, typename _To1>\n-\tstatic bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>\n+\tstatic\n+\t__bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>\n \t__test(int);\n \n       template<typename, typename>\n@@ -1404,6 +1404,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using type = decltype(__test<_From, _To>(0));\n     };\n \n+  // is_nothrow_convertible for C++11\n+  template<typename _From, typename _To>\n+    struct __is_nothrow_convertible\n+    : public __is_nt_convertible_helper<_From, _To>::type\n+    { };\n+\n+#if __cplusplus > 201703L\n   /// is_nothrow_convertible\n   template<typename _From, typename _To>\n     struct is_nothrow_convertible\n@@ -2831,8 +2838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_nt_invocable_impl<_Result, _Ret,\n \t\t\t\t  __void_t<typename _Result::type>>\n     : __or_<is_void<_Ret>,\n-\t    __and_<is_convertible<typename _Result::type, _Ret>,\n-\t\t   is_nothrow_constructible<_Ret, typename _Result::type>>>\n+\t    __is_nothrow_convertible<typename _Result::type, _Ret>>\n     { };\n \n   /// std::is_nothrow_invocable_r\n@@ -2852,14 +2858,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       = is_nothrow_invocable<_Fn, _Args...>::value;\n \n   /// std::is_invocable_r_v\n-  template<typename _Fn, typename... _Args>\n+  template<typename _Ret, typename _Fn, typename... _Args>\n     inline constexpr bool is_invocable_r_v\n-      = is_invocable_r<_Fn, _Args...>::value;\n+      = is_invocable_r<_Ret, _Fn, _Args...>::value;\n \n   /// std::is_nothrow_invocable_r_v\n-  template<typename _Fn, typename... _Args>\n+  template<typename _Ret, typename _Fn, typename... _Args>\n     inline constexpr bool is_nothrow_invocable_r_v\n-      = is_nothrow_invocable_r<_Fn, _Args...>::value;\n+      = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;\n #endif // C++17\n \n #if __cplusplus >= 201703L"}, {"sha": "c4c2fda845cc006f171ec48ad54fa53c3931b3ba", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/value.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -21,9 +21,12 @@\n #include <type_traits>\n #include <testsuite_tr1.h>\n \n+#ifndef IS_NT_CONVERTIBLE_DEFINED\n+using std::is_nothrow_convertible;\n+#endif\n+\n void test01()\n {\n-  using std::is_nothrow_convertible;\n   using namespace __gnu_test;\n \n   // Positive conversion tests.\n@@ -175,3 +178,16 @@ void test01()\n \t\t\t\t  NoexceptMoveConsClass&,\n \t\t\t\t  NoexceptMoveConsClass>(false));\n }\n+\n+void test02()\n+{\n+  struct X { };\n+\n+  struct Y\n+  {\n+    explicit Y(X) noexcept; // not viable for implicit conversions\n+    Y(...);\n+  };\n+\n+  static_assert(!is_nothrow_convertible<X, Y>::value, \"\");\n+}"}, {"sha": "50bab80596f4a9f563aee37e2aafe47c8ce8f709", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/value_ext.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue_ext.cc?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <type_traits>\n+\n+// Test the non-standard __is_nothrow_convertible trait\n+\n+template<typename From, typename To>\n+  using is_nothrow_convertible = std::__is_nothrow_convertible<From, To>;\n+\n+#define IS_NT_CONVERTIBLE_DEFINED\n+#include \"value.cc\""}, {"sha": "04d310fff38048c4ad5c7df2f14612387d057640", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -16,7 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-options \"-std=gnu++17\" }\n-// { dg-do compile }\n+// { dg-do compile { target c++17 } }\n \n #include <type_traits>\n \n@@ -151,4 +151,17 @@ void test01()\n \t\t   \"would call private member\");\n   static_assert( ! is_nt_invocable_r<void, F, int, int >(),\n \t\t   \"would call private member\");\n+\n+  struct FX {\n+    X operator()() const noexcept { return {}; }\n+  };\n+  static_assert( is_nt_invocable< FX >(), \"FX::operator() is nothrow\" );\n+  static_assert( is_nt_invocable_r<X, FX >(), \"no conversion needed\" );\n+\n+  struct Y {\n+    explicit Y(X) noexcept; // not viable for implicit conversions\n+    Y(...);\n+  };\n+\n+  static_assert( ! is_nt_invocable_r<Y, FX >(), \"conversion to Y can throw\" );\n }"}, {"sha": "3a133ade4dea477fe411f9b373f1a1abbba6d01a", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value_ext.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -23,13 +23,20 @@ template<typename... T>\n   constexpr bool is_nt_invocable()\n   { return std::__is_nothrow_invocable<T...>::value; }\n \n-  template<typename R, typename... T>\n+template<typename R, typename... T>\n   constexpr bool is_nt_invocable_conv(std::true_type)\n   {\n     using result_type = typename std::__invoke_result<T...>::type;\n+\n+    struct ConvIsNothrow\n+    {\n+      static void test(std::true_type, R) noexcept;\n+      static void test(std::false_type, const result_type&);\n+    };\n+\n     return std::is_void<R>::value\n-      || (std::is_convertible<result_type, R>::value\n-\t  && std::is_nothrow_constructible<R, result_type>::value);\n+      || noexcept(ConvIsNothrow::test(std::is_convertible<result_type, R>(),\n+\t\t\t\t      std::declval<result_type>()));\n   }\n \n template<typename R, typename... T>"}, {"sha": "d04b0aee8ed46f2d9ba3720843f06f800e33d73d", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/noexcept_specs.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_specs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9f305e44ff0353ee9e6cb07599240354ae9ed2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_specs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_specs.cc?ref=ce9f305e44ff0353ee9e6cb07599240354ae9ed2", "patch": "@@ -56,7 +56,9 @@ namespace test_trait{\n       using type = decltype(test<From, To>(0));\n     };\n \n-  /// is_nothrow_convertible\n+  // Similar to std::is_nothrow_convertible, but only considers whether the\n+  // actual conversion can throw (and not any potential copies of From).\n+  // This means the result is not affected by copy elision of From in C++17.\n   template<typename From, typename To>\n     struct is_nothrow_convertible\n     : public is_nt_convertible_helper<From, To>::type"}]}