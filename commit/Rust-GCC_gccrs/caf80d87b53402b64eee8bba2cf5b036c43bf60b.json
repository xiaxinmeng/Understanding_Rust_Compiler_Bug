{"sha": "caf80d87b53402b64eee8bba2cf5b036c43bf60b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmODBkODdiNTM0MDJiNjRlZWU4YmJhMmNmNWIwMzZjNDNiZjYwYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-06T20:52:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-06T20:52:34Z"}, "message": "PR libstdc++/87431 fix regression introduced by r264574\n\nThe previous patch for PR 87431 assumed that initialing a scalar type\ncould not throw, but it can obtain its value via a conversion operator,\nwhich could throw. This meant the variant could get into a valueless\nstate, but the valueless_by_exception() member function would always\nreturn false.\n\nThis patch fixes it by changing the emplace members to have strong\nexception safety when initializing a contained value of trivially\ncopyable type. The _M_valid() member gets a corresponding change to\nalways return true for trivially copyable types, not just scalar types.\n\nStrong exception safety (i.e. never becoming valueless) is achieved by\nonly replacing the current contained value once any potentially throwing\noperations have completed. If constructing the new contained value can\nthrow then a new std::variant object is constructed to hold it, and then\nmove-assigned to *this (which won't throw).\n\n\tPR libstdc++/87431\n\t* include/std/variant (_Variant_storage<true, _Types...>::_M_valid):\n\tCheck is_trivially_copyable instead of is_scalar.\n\t(variant::emplace<N, Args>(Args&&...)): If construction of the new\n\tcontained value can throw and its type is trivially copyable then\n\tconstruct into a temporary variant and move from it, to provide the\n\tstrong exception safety guarantee.\n\t(variant::emplace<N, U, Args>(initializer_list<U>, Args&&...)):\n\tLikewise.\n\t* testsuite/20_util/variant/87431.cc: New test.\n\t* testsuite/20_util/variant/run.cc: Adjust test so that throwing\n\tconversion causes valueless state.\n\nFrom-SVN: r267614", "tree": {"sha": "f24b48f30f75133c6feccb12ea6e56b6481a0cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24b48f30f75133c6feccb12ea6e56b6481a0cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caf80d87b53402b64eee8bba2cf5b036c43bf60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf80d87b53402b64eee8bba2cf5b036c43bf60b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf80d87b53402b64eee8bba2cf5b036c43bf60b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf80d87b53402b64eee8bba2cf5b036c43bf60b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be917808aa3310d46f586e6586ef08d302837f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be917808aa3310d46f586e6586ef08d302837f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be917808aa3310d46f586e6586ef08d302837f1e"}], "stats": {"total": 121, "additions": 118, "deletions": 3}, "files": [{"sha": "fe1643d69cc6374df8f8cfa9ed12bd9e6f3a0d35", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=caf80d87b53402b64eee8bba2cf5b036c43bf60b", "patch": "@@ -1,5 +1,18 @@\n 2019-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/87431\n+\t* include/std/variant (_Variant_storage<true, _Types...>::_M_valid):\n+\tCheck is_trivially_copyable instead of is_scalar.\n+\t(variant::emplace<N, Args>(Args&&...)): If construction of the new\n+\tcontained value can throw and its type is trivially copyable then\n+\tconstruct into a temporary variant and move from it, to provide the\n+\tstrong exception safety guarantee.\n+\t(variant::emplace<N, U, Args>(initializer_list<U>, Args&&...)):\n+\tLikewise.\n+\t* testsuite/20_util/variant/87431.cc: New test.\n+\t* testsuite/20_util/variant/run.cc: Adjust test so that throwing\n+\tconversion causes valueless state.\n+\n \tPR libstdc++/88607\n \t* testsuite/17_intro/headers/c++1998/charset.cc: New test.\n \t* testsuite/17_intro/headers/c++2011/charset.cc: New test."}, {"sha": "83cf99e9ae0097920f5f23c4f9a9b35d891c3a1a", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=caf80d87b53402b64eee8bba2cf5b036c43bf60b", "patch": "@@ -439,7 +439,7 @@ namespace __variant\n       constexpr bool\n       _M_valid() const noexcept\n       {\n-\tif constexpr ((is_scalar_v<_Types> && ...))\n+\tif constexpr ((is_trivially_copyable_v<_Types> && ...))\n \t  return true;\n \treturn this->_M_index != __index_type(variant_npos);\n       }\n@@ -1185,6 +1185,23 @@ namespace __variant\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n \t\t\t\"The index should be in [0, number of alternatives)\");\n+\n+\t  using type = variant_alternative_t<_Np, variant>;\n+\t  // If constructing the value can throw but move assigning it can't,\n+\t  // construct in a temporary and then move assign from it. This gives\n+\t  // the strong exception safety guarantee, ensuring we never become\n+\t  // valueless.\n+\t  if constexpr (is_trivially_copyable_v<type>\n+\t      && !is_nothrow_constructible_v<type, _Args...>)\n+\t    {\n+\t      // If move assignment cannot throw then we can provide the\n+\t      // strong exception safety guarantee, and never become valueless.\n+\t      variant __tmp(in_place_index<_Np>,\n+\t\t\t    std::forward<_Args>(__args)...);\n+\t      *this = std::move(__tmp);\n+\t      return std::get<_Np>(*this);\n+\t    }\n+\n \t  this->~variant();\n \t  __try\n \t    {\n@@ -1208,6 +1225,20 @@ namespace __variant\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n \t\t\t\"The index should be in [0, number of alternatives)\");\n+\n+\t  using type = variant_alternative_t<_Np, variant>;\n+\t  if constexpr (is_trivially_copyable_v<type>\n+\t      && !is_nothrow_constructible_v<type, initializer_list<_Up>,\n+\t\t\t\t\t     _Args...>)\n+\t    {\n+\t      // If move assignment cannot throw then we can provide the\n+\t      // strong exception safety guarantee, and never become valueless.\n+\t      variant __tmp(in_place_index<_Np>, __il,\n+\t\t\t    std::forward<_Args>(__args)...);\n+\t      *this = std::move(__tmp);\n+\t      return std::get<_Np>(*this);\n+\t    }\n+\n \t  this->~variant();\n \t  __try\n \t    {"}, {"sha": "8c5c4a7815407d85e5472765b9cd907c3c0e01e3", "filename": "libstdc++-v3/testsuite/20_util/variant/87431.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87431.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87431.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F87431.cc?ref=caf80d87b53402b64eee8bba2cf5b036c43bf60b", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <variant>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  struct ThrowingConversion {\n+    operator int() { throw 0; }\n+  };\n+\n+  std::variant<float, char, int> v{'a'};\n+  try\n+  {\n+    ThrowingConversion x;\n+    v.emplace<2>(x);\n+    VERIFY(false);\n+  }\n+  catch (int)\n+  {\n+    VERIFY( !v.valueless_by_exception() );\n+    VERIFY( v.index() == 1 );\n+    VERIFY( std::get<1>(v) == 'a' );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+  struct ThrowingConstructor {\n+    ThrowingConstructor(std::initializer_list<int>, char) { throw 1; }\n+  };\n+\n+  std::variant<float, char, ThrowingConstructor> v{'a'};\n+  try\n+  {\n+    v.emplace<2>({1, 2, 3}, '4');\n+    VERIFY(false);\n+  }\n+  catch (int)\n+  {\n+    VERIFY( !v.valueless_by_exception() );\n+    VERIFY( v.index() == 1 );\n+    VERIFY( std::get<1>(v) == 'a' );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "c5ea7df37ece68f03bfdc6521a3039758c77cc69", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf80d87b53402b64eee8bba2cf5b036c43bf60b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=caf80d87b53402b64eee8bba2cf5b036c43bf60b", "patch": "@@ -354,15 +354,15 @@ void test_hash()\n   {\n     struct A\n     {\n-      operator int()\n+      operator string()\n       {\n         throw nullptr;\n       }\n     };\n     variant<int, string> v;\n     try\n       {\n-        v.emplace<0>(A{});\n+        v.emplace<1>(A{});\n       }\n     catch (nullptr_t)\n       {"}]}