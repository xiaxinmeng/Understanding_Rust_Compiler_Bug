{"sha": "73c49bf53abd68081dec20ad8adac0546a8e479b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjNDliZjUzYWJkNjgwODFkZWMyMGFkOGFkYWMwNTQ2YThlNDc5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-31T19:42:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-31T19:42:39Z"}, "message": "re PR rtl-optimization/63659 (wrong code at -O2 and -O3 on x86_64-linux-gnu)\n\n\tPR rtl-optimization/63659\n\t* ree.c (update_reg_equal_equiv_notes): New function.\n\t(combine_set_extension, transform_ifelse): Use it.\n\n\t* gcc.c-torture/execute/pr63659.c: New test.\n\nFrom-SVN: r216985", "tree": {"sha": "417f075cb33de7f4237fb474ba35ff9fcd9ec51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417f075cb33de7f4237fb474ba35ff9fcd9ec51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c49bf53abd68081dec20ad8adac0546a8e479b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c49bf53abd68081dec20ad8adac0546a8e479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c49bf53abd68081dec20ad8adac0546a8e479b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c49bf53abd68081dec20ad8adac0546a8e479b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62871ba282e75e15af03de75b3e946b745d3c80f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62871ba282e75e15af03de75b3e946b745d3c80f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62871ba282e75e15af03de75b3e946b745d3c80f"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "6a130836fdea0938cbe2837c1ef62970988c4c85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73c49bf53abd68081dec20ad8adac0546a8e479b", "patch": "@@ -1,3 +1,9 @@\n+2014-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63659\n+\t* ree.c (update_reg_equal_equiv_notes): New function.\n+\t(combine_set_extension, transform_ifelse): Use it.\n+\n 2014-10-31  Jeff Law  <law@redhat.com>\n \n \t* doc/contrib.texi: Add contribution notes for Balaji Iyer (Cilk+)"}, {"sha": "2b44ccc6b541dd6ddb43df45e40206d4882e732a", "filename": "gcc/ree.c", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=73c49bf53abd68081dec20ad8adac0546a8e479b", "patch": "@@ -274,6 +274,50 @@ typedef struct ext_cand\n \n static int max_insn_uid;\n \n+/* Update or remove REG_EQUAL or REG_EQUIV notes for INSN.  */\n+\n+static bool\n+update_reg_equal_equiv_notes (rtx_insn *insn, machine_mode new_mode,\n+\t\t\t      machine_mode old_mode, enum rtx_code code)\n+{\n+  rtx *loc = &REG_NOTES (insn);\n+  while (*loc)\n+    {\n+      enum reg_note kind = REG_NOTE_KIND (*loc);\n+      if (kind == REG_EQUAL || kind == REG_EQUIV)\n+\t{\n+\t  rtx orig_src = XEXP (*loc, 0);\n+\t  /* Update equivalency constants.  Recall that RTL constants are\n+\t     sign-extended.  */\n+\t  if (GET_CODE (orig_src) == CONST_INT\n+\t      && HOST_BITS_PER_WIDE_INT >= GET_MODE_BITSIZE (new_mode))\n+\t    {\n+\t      if (INTVAL (orig_src) >= 0 || code == SIGN_EXTEND)\n+\t\t/* Nothing needed.  */;\n+\t      else\n+\t\t{\n+\t\t  /* Zero-extend the negative constant by masking out the\n+\t\t     bits outside the source mode.  */\n+\t\t  rtx new_const_int\n+\t\t    = gen_int_mode (INTVAL (orig_src)\n+\t\t\t\t    & GET_MODE_MASK (old_mode),\n+\t\t\t\t    new_mode);\n+\t\t  if (!validate_change (insn, &XEXP (*loc, 0),\n+\t\t\t\t\tnew_const_int, true))\n+\t\t    return false;\n+\t\t}\n+\t      loc = &XEXP (*loc, 1);\n+\t    }\n+\t  /* Drop all other notes, they assume a wrong mode.  */\n+\t  else if (!validate_change (insn, loc, XEXP (*loc, 1), true))\n+\t    return false;\n+\t}\n+      else\n+\tloc = &XEXP (*loc, 1);\n+    }\n+  return true;\n+}\n+\n /* Given a insn (CURR_INSN), an extension candidate for removal (CAND)\n    and a pointer to the SET rtx (ORIG_SET) that needs to be modified,\n    this code modifies the SET rtx to a new SET rtx that extends the\n@@ -295,6 +339,7 @@ static bool\n combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n {\n   rtx orig_src = SET_SRC (*orig_set);\n+  machine_mode orig_mode = GET_MODE (SET_DEST (*orig_set));\n   rtx new_set;\n   rtx cand_pat = PATTERN (cand->insn);\n \n@@ -331,9 +376,8 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n \t{\n \t  /* Zero-extend the negative constant by masking out the bits outside\n \t     the source mode.  */\n-\t  machine_mode src_mode = GET_MODE (SET_DEST (*orig_set));\n \t  rtx new_const_int\n-\t    = gen_int_mode (INTVAL (orig_src) & GET_MODE_MASK (src_mode),\n+\t    = gen_int_mode (INTVAL (orig_src) & GET_MODE_MASK (orig_mode),\n \t\t\t    GET_MODE (new_reg));\n \t  new_set = gen_rtx_SET (VOIDmode, new_reg, new_const_int);\n \t}\n@@ -372,7 +416,9 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n \n   /* This change is a part of a group of changes.  Hence,\n      validate_change will not try to commit the change.  */\n-  if (validate_change (curr_insn, orig_set, new_set, true))\n+  if (validate_change (curr_insn, orig_set, new_set, true)\n+      && update_reg_equal_equiv_notes (curr_insn, cand->mode, orig_mode,\n+\t\t\t\t       cand->code))\n     {\n       if (dump_file)\n         {\n@@ -422,7 +468,9 @@ transform_ifelse (ext_cand *cand, rtx_insn *def_insn)\n   ifexpr = gen_rtx_IF_THEN_ELSE (cand->mode, cond, map_srcreg, map_srcreg2);\n   new_set = gen_rtx_SET (VOIDmode, map_dstreg, ifexpr);\n \n-  if (validate_change (def_insn, &PATTERN (def_insn), new_set, true))\n+  if (validate_change (def_insn, &PATTERN (def_insn), new_set, true)\n+      && update_reg_equal_equiv_notes (def_insn, cand->mode, GET_MODE (dstreg),\n+\t\t\t\t       cand->code))\n     {\n       if (dump_file)\n         {"}, {"sha": "ac737184b549d234aef932e9543214da5a8d45fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73c49bf53abd68081dec20ad8adac0546a8e479b", "patch": "@@ -1,3 +1,8 @@\n+2014-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63659\n+\t* gcc.c-torture/execute/pr63659.c: New test.\n+\n 2014-10-31  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \tPR target/63534"}, {"sha": "780dc8a7e218b3e994e245cf274b6f4674d8dbbb", "filename": "gcc/testsuite/gcc.c-torture/execute/pr63659.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63659.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c49bf53abd68081dec20ad8adac0546a8e479b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63659.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63659.c?ref=73c49bf53abd68081dec20ad8adac0546a8e479b", "patch": "@@ -0,0 +1,29 @@\n+/* PR rtl-optimization/63659 */\n+\n+int a, b, c, *d = &b, g, h, i;\n+unsigned char e;\n+char f;\n+\n+int\n+main ()\n+{\n+  while (a)\n+    {\n+      for (a = 0; a; a++)\n+\tfor (; c; c++)\n+\t  ;\n+      if (i)\n+\tbreak;\n+    }\n+\n+  char j = c, k = -1, l;\n+  l = g = j >> h;\n+  f = l == 0 ? k : k % l;\n+  e = 0 ? 0 : f;\n+  *d = e;\n+\n+  if (b != 255)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}