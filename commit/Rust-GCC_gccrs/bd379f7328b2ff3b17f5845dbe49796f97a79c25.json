{"sha": "bd379f7328b2ff3b17f5845dbe49796f97a79c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzNzlmNzMyOGIyZmYzYjE3ZjU4NDVkYmU0OTc5NmY5N2E3OWMyNQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2007-09-06T13:51:21Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2007-09-06T13:51:21Z"}, "message": "reload.c (find_reloads_address_1): Try to preserve original base/index regclass of operands.\n\nChangeLog:\n\n2007-09-06  Pat Haugen  <pthaugen@us.ibm.com>\n\n\t* reload.c (find_reloads_address_1): Try to preserve original\n\tbase/index regclass of operands.\n\t* regrename.c (scan_rtx_address): Likewise.\n\t(replace_oldest_value_addr): Likewise.\n\nFrom-SVN: r128183", "tree": {"sha": "620790cc14778ca43ae1261ccbee1a3cae2f9cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/620790cc14778ca43ae1261ccbee1a3cae2f9cfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd379f7328b2ff3b17f5845dbe49796f97a79c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd379f7328b2ff3b17f5845dbe49796f97a79c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd379f7328b2ff3b17f5845dbe49796f97a79c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd379f7328b2ff3b17f5845dbe49796f97a79c25/comments", "author": null, "committer": null, "parents": [{"sha": "200809cbbf0d8e99ce059e82494b8bd3a5c16ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200809cbbf0d8e99ce059e82494b8bd3a5c16ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200809cbbf0d8e99ce059e82494b8bd3a5c16ca9"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "87a376329b9978c72ef7e60bf4f9f72a9b821a1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd379f7328b2ff3b17f5845dbe49796f97a79c25", "patch": "@@ -1,3 +1,10 @@\n+2007-09-06  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* reload.c (find_reloads_address_1): Try to preserve original\n+\tbase/index regclass of operands.\n+\t* regrename.c (scan_rtx_address): Likewise.\n+\t(replace_oldest_value_addr): Likewise.\n+\n 2007-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33302"}, {"sha": "74112c3ca5337a1513b429ec068949ee5b218e4b", "filename": "gcc/regrename.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=bd379f7328b2ff3b17f5845dbe49796f97a79c25", "patch": "@@ -559,20 +559,19 @@ scan_rtx_address (rtx insn, rtx *loc, enum reg_class cl,\n \t    int index_op;\n \t    unsigned regno0 = REGNO (op0), regno1 = REGNO (op1);\n \n-\t    if (REGNO_OK_FOR_INDEX_P (regno0)\n-\t\t&& regno_ok_for_base_p (regno1, mode, PLUS, REG))\n+\t    if (REGNO_OK_FOR_INDEX_P (regno1)\n+\t\t&& regno_ok_for_base_p (regno0, mode, PLUS, REG))\n+\t      index_op = 1;\n+\t    else if (REGNO_OK_FOR_INDEX_P (regno0)\n+\t\t     && regno_ok_for_base_p (regno1, mode, PLUS, REG))\n \t      index_op = 0;\n-\t    else if (REGNO_OK_FOR_INDEX_P (regno1)\n-\t\t     && regno_ok_for_base_p (regno0, mode, PLUS, REG))\n+\t    else if (regno_ok_for_base_p (regno0, mode, PLUS, REG)\n+\t\t     || REGNO_OK_FOR_INDEX_P (regno1))\n \t      index_op = 1;\n \t    else if (regno_ok_for_base_p (regno1, mode, PLUS, REG))\n \t      index_op = 0;\n-\t    else if (regno_ok_for_base_p (regno0, mode, PLUS, REG))\n-\t      index_op = 1;\n-\t    else if (REGNO_OK_FOR_INDEX_P (regno1))\n-\t      index_op = 1;\n \t    else\n-\t      index_op = 0;\n+\t      index_op = 1;\n \n \t    locI = &XEXP (x, index_op);\n \t    locB = &XEXP (x, !index_op);\n@@ -1476,20 +1475,19 @@ replace_oldest_value_addr (rtx *loc, enum reg_class cl,\n \t    int index_op;\n \t    unsigned regno0 = REGNO (op0), regno1 = REGNO (op1);\n \n-\t    if (REGNO_OK_FOR_INDEX_P (regno0)\n-\t\t&& regno_ok_for_base_p (regno1, mode, PLUS, REG))\n+\t    if (REGNO_OK_FOR_INDEX_P (regno1)\n+\t\t&& regno_ok_for_base_p (regno0, mode, PLUS, REG))\n+\t      index_op = 1;\n+\t    else if (REGNO_OK_FOR_INDEX_P (regno0)\n+\t\t     && regno_ok_for_base_p (regno1, mode, PLUS, REG))\n \t      index_op = 0;\n-\t    else if (REGNO_OK_FOR_INDEX_P (regno1)\n-\t\t     && regno_ok_for_base_p (regno0, mode, PLUS, REG))\n+\t    else if (regno_ok_for_base_p (regno0, mode, PLUS, REG)\n+\t\t     || REGNO_OK_FOR_INDEX_P (regno1))\n \t      index_op = 1;\n \t    else if (regno_ok_for_base_p (regno1, mode, PLUS, REG))\n \t      index_op = 0;\n-\t    else if (regno_ok_for_base_p (regno0, mode, PLUS, REG))\n-\t      index_op = 1;\n-\t    else if (REGNO_OK_FOR_INDEX_P (regno1))\n-\t      index_op = 1;\n \t    else\n-\t      index_op = 0;\n+\t      index_op = 1;\n \n \t    locI = &XEXP (x, index_op);\n \t    locB = &XEXP (x, !index_op);"}, {"sha": "6eb380202e241a26f078938cf7b2565efabd9472", "filename": "gcc/reload.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd379f7328b2ff3b17f5845dbe49796f97a79c25/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=bd379f7328b2ff3b17f5845dbe49796f97a79c25", "patch": "@@ -5464,16 +5464,12 @@ find_reloads_address_1 (enum machine_mode mode, rtx x, int context,\n \n \telse if (code0 == REG && code1 == REG)\n \t  {\n-\t    if (REGNO_OK_FOR_INDEX_P (REGNO (op0))\n-\t\t&& regno_ok_for_base_p (REGNO (op1), mode, PLUS, REG))\n+\t    if (REGNO_OK_FOR_INDEX_P (REGNO (op1))\n+\t\t&& regno_ok_for_base_p (REGNO (op0), mode, PLUS, REG))\n \t      return 0;\n-\t    else if (REGNO_OK_FOR_INDEX_P (REGNO (op1))\n-\t\t     && regno_ok_for_base_p (REGNO (op0), mode, PLUS, REG))\n+\t    else if (REGNO_OK_FOR_INDEX_P (REGNO (op0))\n+\t\t     && regno_ok_for_base_p (REGNO (op1), mode, PLUS, REG))\n \t      return 0;\n-\t    else if (regno_ok_for_base_p (REGNO (op1), mode, PLUS, REG))\n-\t      find_reloads_address_1 (mode, orig_op0, 1, PLUS, SCRATCH,\n-\t\t\t\t      &XEXP (x, 0), opnum, type, ind_levels,\n-\t\t\t\t      insn);\n \t    else if (regno_ok_for_base_p (REGNO (op0), mode, PLUS, REG))\n \t      find_reloads_address_1 (mode, orig_op1, 1, PLUS, SCRATCH,\n \t\t\t\t      &XEXP (x, 1), opnum, type, ind_levels,\n@@ -5482,16 +5478,20 @@ find_reloads_address_1 (enum machine_mode mode, rtx x, int context,\n \t      find_reloads_address_1 (mode, orig_op0, 0, PLUS, REG,\n \t\t\t\t      &XEXP (x, 0), opnum, type, ind_levels,\n \t\t\t\t      insn);\n+\t    else if (regno_ok_for_base_p (REGNO (op1), mode, PLUS, REG))\n+\t      find_reloads_address_1 (mode, orig_op0, 1, PLUS, SCRATCH,\n+\t\t\t\t      &XEXP (x, 0), opnum, type, ind_levels,\n+\t\t\t\t      insn);\n \t    else if (REGNO_OK_FOR_INDEX_P (REGNO (op0)))\n \t      find_reloads_address_1 (mode, orig_op1, 0, PLUS, REG,\n \t\t\t\t      &XEXP (x, 1), opnum, type, ind_levels,\n \t\t\t\t      insn);\n \t    else\n \t      {\n-\t\tfind_reloads_address_1 (mode, orig_op0, 1, PLUS, SCRATCH,\n+\t\tfind_reloads_address_1 (mode, orig_op0, 0, PLUS, REG,\n \t\t\t\t\t&XEXP (x, 0), opnum, type, ind_levels,\n \t\t\t\t\tinsn);\n-\t\tfind_reloads_address_1 (mode, orig_op1, 0, PLUS, REG,\n+\t\tfind_reloads_address_1 (mode, orig_op1, 1, PLUS, SCRATCH,\n \t\t\t\t\t&XEXP (x, 1), opnum, type, ind_levels,\n \t\t\t\t\tinsn);\n \t      }"}]}