{"sha": "2965eaa89d843a1c260291376020d71127c05741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2NWVhYTg5ZDg0M2ExYzI2MDI5MTM3NjAyMGQ3MTEyN2MwNTc0MQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-11-12T01:11:46Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-11-12T01:11:46Z"}, "message": "[RS6000] PC-relative TLS support\n\nSupporting TLS for -mpcrel turns out to be relatively simple.  The\nexisting TLSGD and TLSLD unspecs happily can have their GOT pointer\nreg element replaced with zero, refelecting the fact that optimisation\nof calls to __tls_get_addr when pc-rel won't use the GOT pointer.\nSome other insns also can be reused, and just a few added.\n\n\t* config/rs6000/predicates.md (unspec_tls): Allow const0_rtx for got\n\telement of unspec vec.\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Support\n\tPC-relative TLS.\n\t* config/rs6000/rs6000.md (UNSPEC_TLSTLS_PCREL): New unspec.\n\t(tls_gd_pcrel, tls_ld_pcrel): New insns.\n\t(tls_dtprel, tls_tprel): Set attr prefixed when tls_size is not 16.\n\t(tls_got_tprel_pcrel, tls_tls_pcrel): New insns.\n\nFrom-SVN: r278076", "tree": {"sha": "3b8930ad957500ac4c6b16dd73b76b30f93a3643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b8930ad957500ac4c6b16dd73b76b30f93a3643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2965eaa89d843a1c260291376020d71127c05741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2965eaa89d843a1c260291376020d71127c05741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2965eaa89d843a1c260291376020d71127c05741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2965eaa89d843a1c260291376020d71127c05741/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed2181fc2a3ff3a0f65110c906093d5ce0d8e048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2181fc2a3ff3a0f65110c906093d5ce0d8e048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2181fc2a3ff3a0f65110c906093d5ce0d8e048"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "4a38e5459b482705af4767ab76a0f69a9aa9d489", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2965eaa89d843a1c260291376020d71127c05741/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2965eaa89d843a1c260291376020d71127c05741/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2965eaa89d843a1c260291376020d71127c05741", "patch": "@@ -1,3 +1,14 @@\n+2019-11-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/predicates.md (unspec_tls): Allow const0_rtx for got\n+\telement of unspec vec.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Support\n+\tPC-relative TLS.\n+\t* config/rs6000/rs6000.md (UNSPEC_TLSTLS_PCREL): New unspec.\n+\t(tls_gd_pcrel, tls_ld_pcrel): New insns.\n+\t(tls_dtprel, tls_tprel): Set attr prefixed when tls_size is not 16.\n+\t(tls_got_tprel_pcrel, tls_tls_pcrel): New insns.\n+\n 2019-11-12  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.opt (mtls-markers): Delete."}, {"sha": "f4ecc4193ef345339cede83b500c6d90766fbffd", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=2965eaa89d843a1c260291376020d71127c05741", "patch": "@@ -986,9 +986,9 @@\n   if (CONST_INT_P (op))\n     return 1;\n   if (XINT (op, 1) == UNSPEC_TLSGD)\n-    return REG_P (XVECEXP (op, 0, 1));\n+    return REG_P (XVECEXP (op, 0, 1)) || XVECEXP (op, 0, 1) == const0_rtx;\n   if (XINT (op, 1) == UNSPEC_TLSLD)\n-    return REG_P (XVECEXP (op, 0, 0));\n+    return REG_P (XVECEXP (op, 0, 0)) || XVECEXP (op, 0, 0) == const0_rtx;\n   return 0;\n })\n "}, {"sha": "32101b77ea3777f95bc9e1fbf42b0131931432d2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2965eaa89d843a1c260291376020d71127c05741", "patch": "@@ -8518,7 +8518,8 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n     return rs6000_legitimize_tls_address_aix (addr, model);\n \n   dest = gen_reg_rtx (Pmode);\n-  if (model == TLS_MODEL_LOCAL_EXEC && rs6000_tls_size == 16)\n+  if (model == TLS_MODEL_LOCAL_EXEC\n+      && (rs6000_tls_size == 16 || rs6000_pcrel_p (cfun)))\n     {\n       rtx tlsreg;\n \n@@ -8565,7 +8566,9 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t them in the .got section.  So use a pointer to the .got section,\n \t not one to secondary TOC sections used by 64-bit -mminimal-toc,\n \t or to secondary GOT sections used by 32-bit -fPIC.  */\n-      if (TARGET_64BIT)\n+      if (rs6000_pcrel_p (cfun))\n+\tgot = const0_rtx;\n+      else if (TARGET_64BIT)\n \tgot = gen_rtx_REG (Pmode, 2);\n       else\n \t{\n@@ -8628,7 +8631,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t  rtx uns = gen_rtx_UNSPEC (Pmode, vec, UNSPEC_TLS_GET_ADDR);\n \t  set_unique_reg_note (get_last_insn (), REG_EQUAL, uns);\n \n-\t  if (rs6000_tls_size == 16)\n+\t  if (rs6000_tls_size == 16 || rs6000_pcrel_p (cfun))\n \t    {\n \t      if (TARGET_64BIT)\n \t\tinsn = gen_tls_dtprel_64 (dest, tmp1, addr);\n@@ -8669,7 +8672,14 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t  else\n \t    insn = gen_tls_got_tprel_32 (tmp2, got, addr);\n \t  emit_insn (insn);\n-\t  if (TARGET_64BIT)\n+\t  if (rs6000_pcrel_p (cfun))\n+\t    {\n+\t      if (TARGET_64BIT)\n+\t\tinsn = gen_tls_tls_pcrel_64 (dest, tmp2, addr);\n+\t      else\n+\t\tinsn = gen_tls_tls_pcrel_32 (dest, tmp2, addr);\n+\t    }\n+\t  else if (TARGET_64BIT)\n \t    insn = gen_tls_tls_64 (dest, tmp2, addr);\n \t  else\n \t    insn = gen_tls_tls_32 (dest, tmp2, addr);"}, {"sha": "cbfe38bef9477151222878744ef808ddceeba0bd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2965eaa89d843a1c260291376020d71127c05741/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2965eaa89d843a1c260291376020d71127c05741", "patch": "@@ -86,6 +86,7 @@\n    UNSPEC_TLSTPRELLO\n    UNSPEC_TLSGOTTPREL\n    UNSPEC_TLSTLS\n+   UNSPEC_TLSTLS_PCREL\n    UNSPEC_FIX_TRUNC_TF\t\t; fadd, rounding towards zero\n    UNSPEC_STFIWX\n    UNSPEC_POPCNTB\n@@ -9495,6 +9496,15 @@\n \f\n ;; TLS support.\n \n+(define_insn \"*tls_gd_pcrel<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(match_operand:P 1 \"rs6000_tls_symbol_ref\" \"\")\n+\t\t   (const_int 0)]\n+\t\t  UNSPEC_TLSGD))]\n+  \"HAVE_AS_TLS && TARGET_ELF\"\n+  \"la %0,%1@got@tlsgd@pcrel\"\n+  [(set_attr \"prefixed\" \"yes\")])\n+\n (define_insn_and_split \"*tls_gd<bits>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n \t(unspec:P [(match_operand:P 1 \"rs6000_tls_symbol_ref\" \"\")\n@@ -9535,6 +9545,14 @@\n   \"HAVE_AS_TLS && TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addi %0,%1,%2@got@tlsgd@l\")\n \n+(define_insn \"*tls_ld_pcrel<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(const_int 0)]\n+\t\t  UNSPEC_TLSLD))]\n+  \"HAVE_AS_TLS && TARGET_ELF\"\n+  \"la %0,%&@got@tlsld@pcrel\"\n+  [(set_attr \"prefixed\" \"yes\")])\n+\n (define_insn_and_split \"*tls_ld<bits>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n \t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")]\n@@ -9578,7 +9596,11 @@\n \t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n \t\t  UNSPEC_TLSDTPREL))]\n   \"HAVE_AS_TLS\"\n-  \"addi %0,%1,%2@dtprel\")\n+  \"addi %0,%1,%2@dtprel\"\n+  [(set (attr \"prefixed\")\n+\t(if_then_else (match_test \"rs6000_tls_size == 16\")\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))])\n \n (define_insn \"tls_dtprel_ha_<bits>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n@@ -9642,7 +9664,11 @@\n \t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n \t\t  UNSPEC_TLSTPREL))]\n   \"HAVE_AS_TLS\"\n-  \"addi %0,%1,%2@tprel\")\n+  \"addi %0,%1,%2@tprel\"\n+  [(set (attr \"prefixed\")\n+\t(if_then_else (match_test \"rs6000_tls_size == 16\")\n+\t\t      (const_string \"no\")\n+\t\t      (const_string \"yes\")))])\n \n (define_insn \"tls_tprel_ha_<bits>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n@@ -9660,6 +9686,15 @@\n   \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@tprel@l\")\n \n+(define_insn \"*tls_got_tprel_pcrel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(const_int 0)\n+\t\t   (match_operand:P 1 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSGOTTPREL))]\n+  \"HAVE_AS_TLS\"\n+  \"<ptrload> %0,%1@got@tprel@pcrel\"\n+  [(set_attr \"prefixed\" \"yes\")])\n+\n ;; \"b\" output constraint here and on tls_tls input to support linker tls\n ;; optimization.  The linker may edit the instructions emitted by a\n ;; tls_got_tprel/tls_tls pair to addis,addi.\n@@ -9703,6 +9738,14 @@\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"<ptrload> %0,%2@got@tprel@l(%1)\")\n \n+(define_insn \"tls_tls_pcrel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSTLS_PCREL))]\n+  \"TARGET_ELF && HAVE_AS_TLS\"\n+  \"add %0,%1,%2@tls@pcrel\")\n+\n (define_insn \"tls_tls_<bits>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")"}]}