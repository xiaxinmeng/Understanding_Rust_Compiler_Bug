{"sha": "e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjMWVjYjBmZTU3ODg0OTk4ZTIyNTI2YTdmYWEzM2UxZjM1MjhkNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-02-11T13:27:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-02-11T13:27:28Z"}, "message": "[AArch64] Only update assembler .arch directive when necessary\n\n\t* config/aarch64/aarch64.c (aarch64_last_printed_arch_string):\n\tNew variable.\n\t(aarch64_last_printed_tune_string): Likewise.\n\t(aarch64_declare_function_name): Only output .arch assembler\n\tdirective if it will be different from the previously output\n\tdirective.  Same for .tune comment but only if -dA is set.\n\t(aarch64_start_file): New function.\n\t(TARGET_ASM_FILE_START): Define.\n\n\t* gcc.target/aarch64/target_attr_15.c: Scan assembly for\n\t.arch armv8-a\\n.  Add -dA to dg-options.\n\t* gcc.target/aarch64/assembler_arch_1.c: New test.\n\t* gcc.target/aarch64/target_attr_7.c: Add -dA to dg-options.\n\nFrom-SVN: r233342", "tree": {"sha": "d5fac32fbeb9acfc78bd5ffd4b90be9fe208e2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5fac32fbeb9acfc78bd5ffd4b90be9fe208e2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4146b7b8c4fc145f1a2e482878b1c9a371cf8282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4146b7b8c4fc145f1a2e482878b1c9a371cf8282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4146b7b8c4fc145f1a2e482878b1c9a371cf8282"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "4c17a5caf5d18c2c8b5e92ed02d07f0707c71b99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -1,3 +1,14 @@\n+2016-02-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_last_printed_arch_string):\n+\tNew variable.\n+\t(aarch64_last_printed_tune_string): Likewise.\n+\t(aarch64_declare_function_name): Only output .arch assembler\n+\tdirective if it will be different from the previously output\n+\tdirective.  Same for .tune comment but only if -dA is set.\n+\t(aarch64_start_file): New function.\n+\t(TARGET_ASM_FILE_START): Define.\n+\n 2016-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR plugins/69758"}, {"sha": "a2d880de9ac75619e25d4f17e3039a823b3040ab", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -11181,6 +11181,10 @@ aarch64_asm_preferred_eh_data_format (int code ATTRIBUTE_UNUSED, int global)\n    return (global ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | type;\n }\n \n+/* The last .arch and .tune assembly strings that we printed.  */\n+static std::string aarch64_last_printed_arch_string;\n+static std::string aarch64_last_printed_tune_string;\n+\n /* Implement ASM_DECLARE_FUNCTION_NAME.  Output the ISA features used\n    by the function fndecl.  */\n \n@@ -11203,23 +11207,55 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   unsigned long isa_flags = targ_options->x_aarch64_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (isa_flags);\n-  asm_fprintf (asm_out_file, \"\\t.arch %s%s\\n\",\n-\t       this_arch->name, extension.c_str ());\n+  /* Only update the assembler .arch string if it is distinct from the last\n+     such string we printed.  */\n+  std::string to_print = this_arch->name + extension;\n+  if (to_print != aarch64_last_printed_arch_string)\n+    {\n+      asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", to_print.c_str ());\n+      aarch64_last_printed_arch_string = to_print;\n+    }\n \n   /* Print the cpu name we're tuning for in the comments, might be\n-     useful to readers of the generated asm.  */\n-\n+     useful to readers of the generated asm.  Do it only when it changes\n+     from function to function and verbose assembly is requested.  */\n   const struct processor *this_tune\n     = aarch64_get_tune_cpu (targ_options->x_explicit_tune_core);\n \n-  asm_fprintf (asm_out_file, \"\\t\" ASM_COMMENT_START \".tune %s\\n\",\n-\t       this_tune->name);\n+  if (flag_debug_asm && aarch64_last_printed_tune_string != this_tune->name)\n+    {\n+      asm_fprintf (asm_out_file, \"\\t\" ASM_COMMENT_START \".tune %s\\n\",\n+\t\t   this_tune->name);\n+      aarch64_last_printed_tune_string = this_tune->name;\n+    }\n \n   /* Don't forget the type directive for ELF.  */\n   ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"function\");\n   ASM_OUTPUT_LABEL (stream, name);\n }\n \n+/* Implements TARGET_ASM_FILE_START.  Output the assembly header.  */\n+\n+static void\n+aarch64_start_file (void)\n+{\n+  struct cl_target_option *default_options\n+    = TREE_TARGET_OPTION (target_option_default_node);\n+\n+  const struct processor *default_arch\n+    = aarch64_get_arch (default_options->x_explicit_arch);\n+  unsigned long default_isa_flags = default_options->x_aarch64_isa_flags;\n+  std::string extension\n+    = aarch64_get_extension_string_for_isa_flags (default_isa_flags);\n+\n+   aarch64_last_printed_arch_string = default_arch->name + extension;\n+   aarch64_last_printed_tune_string = \"\";\n+   asm_fprintf (asm_out_file, \"\\t.arch %s\\n\",\n+\t\taarch64_last_printed_arch_string.c_str ());\n+\n+   default_file_start ();\n+}\n+\n /* Emit load exclusive.  */\n \n static void\n@@ -13957,6 +13993,9 @@ aarch64_optab_supported_p (int op, machine_mode, machine_mode,\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK \\\n   hook_bool_const_tree_hwi_hwi_const_tree_true\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START aarch64_start_file\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK aarch64_output_mi_thunk\n "}, {"sha": "d0277a8403d482d10c9e9c397234fa7b20ac6d1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -1,3 +1,10 @@\n+2016-02-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/target_attr_15.c: Scan assembly for\n+\t.arch armv8-a\\n.  Add -dA to dg-options.\n+\t* gcc.target/aarch64/assembler_arch_1.c: New test.\n+\t* gcc.target/aarch64/target_attr_7.c: Add -dA to dg-options.\n+\n 2016-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/68726"}, {"sha": "901e50a178d7a4a443a5ad0abe63f624688db268", "filename": "gcc/testsuite/gcc.target/aarch64/assembler_arch_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fassembler_arch_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fassembler_arch_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fassembler_arch_1.c?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-march=armv8-a\" } */\n+\n+/* Make sure that the function header in assembly doesn't override\n+   user asm arch_extension directives.  */\n+\n+__asm__ (\".arch_extension lse\");\n+\n+void\n+foo (int i, int *v)\n+{\n+  register int w0 asm (\"w0\") = i;\n+  register int *x1 asm (\"x1\") = v;\n+\n+  asm volatile (\n+  \"\\tstset   %w[i], %[v]\\n\"\n+  : [i] \"+r\" (w0), [v] \"+Q\" (v)\n+  : \"r\" (x1)\n+  : \"x30\");\n+}"}, {"sha": "0527d0c3d613ca696f63161e54d46cc0060b30fb", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mcpu=thunderx -save-temps\" } */\n+/* { dg-options \"-O2 -mcpu=thunderx -dA\" } */\n \n /* Test that cpu attribute overrides the command-line -mcpu.  */\n "}, {"sha": "f72bec878bf635429d67d441f0ec168839ff9888", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_15.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -10,6 +10,4 @@ foo (int a)\n   return a + 1;\n }\n \n-/* { dg-final { scan-assembler-not \"\\\\+fp\" } } */\n-/* { dg-final { scan-assembler-not \"\\\\+crypto\" } } */\n-/* { dg-final { scan-assembler-not \"\\\\+simd\" } } */\n+/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\n\" 1 } } */"}, {"sha": "818d327705f3d5ec7863da93c4181cc1441f58f5", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c1ecb0fe57884998e22526a7faa33e1f3528d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c?ref=e1c1ecb0fe57884998e22526a7faa33e1f3528d5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mcpu=thunderx -save-temps\" } */\n+/* { dg-options \"-O2 -mcpu=thunderx -dA\" } */\n \n /* Make sure that #pragma overrides command line option and\n    target attribute overrides the pragma.  */"}]}