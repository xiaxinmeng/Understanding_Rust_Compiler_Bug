{"sha": "0630a4ecda602a90e978c3285cf1028e92ff5e8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYzMGE0ZWNkYTYwMmE5MGU5NzhjMzI4NWNmMTAyOGU5MmZmNWU4Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-29T14:04:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-29T14:04:02Z"}, "message": "tree-vect-loop.c (vect_analyze_scalar_cycles_1): Do not add reduction chains to LOOP_VINFO_REDUCTIONS.\n\n2017-06-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Do not add\n\treduction chains to LOOP_VINFO_REDUCTIONS.\n\t* tree-vect-slp.c (vect_analyze_slp): Continue looking for\n\tSLP reductions after processing reduction chains.\n\n\t* gcc.dg/vect/slp-reduc-8.c: New testcase.\n\nFrom-SVN: r249785", "tree": {"sha": "cc5cefd595920573102156822f21d901451a76c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5cefd595920573102156822f21d901451a76c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0630a4ecda602a90e978c3285cf1028e92ff5e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630a4ecda602a90e978c3285cf1028e92ff5e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0630a4ecda602a90e978c3285cf1028e92ff5e8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630a4ecda602a90e978c3285cf1028e92ff5e8b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f76b422479df586a93a0a2eaac748b59923d6e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76b422479df586a93a0a2eaac748b59923d6e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76b422479df586a93a0a2eaac748b59923d6e97"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "bc58f15c5d5b00c01b189fe391b3d543bffe76f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0630a4ecda602a90e978c3285cf1028e92ff5e8b", "patch": "@@ -1,3 +1,10 @@\n+2017-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Do not add\n+\treduction chains to LOOP_VINFO_REDUCTIONS.\n+\t* tree-vect-slp.c (vect_analyze_slp): Continue looking for\n+\tSLP reductions after processing reduction chains.\n+\n 2017-06-29  Nathan Sidwell  <nathan@acm.org>\n \n \t* builtins.c (fold_builtin_FUNCTION): Use"}, {"sha": "3dbd4e2628658f8eeab9559245efb5b12eb5a6e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0630a4ecda602a90e978c3285cf1028e92ff5e8b", "patch": "@@ -1,3 +1,7 @@\n+2017-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-reduc-8.c: New testcase.\n+\n 2017-06-29  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/cpp1y/builtin_FUNCTION.C: New."}, {"sha": "618c800e577aa1b93ff49ba7da1eda8c1c112f03", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-8.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-8.c?ref=0630a4ecda602a90e978c3285cf1028e92ff5e8b", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+static int a[512], b[512];\n+\n+void __attribute__((noinline,noclone))\n+foo (int *sum1p, int *sum2p, int *sum3p)\n+{\n+  int sum1 = 0;\n+  int sum2 = 0;\n+  int sum3 = 0;\n+  /* Check that we vectorize a reduction chain and a SLP reduction\n+     at the same time.  */\n+  for (int i = 0; i < 256; ++i)\n+    {\n+      sum1 += a[2*i];\n+      sum1 += a[2*i + 1];\n+      sum2 += b[2*i];\n+      sum3 += b[2*i + 1];\n+    }\n+  *sum1p = sum1;\n+  *sum2p = sum2;\n+  *sum3p = sum3;\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 256; ++i)\n+    {\n+      a[2*i] = i;\n+      a[2*i + 1] = i/2;\n+      b[2*i] = i + 1;\n+      b[2*i + 1] = i/2 + 1;\n+      __asm__ volatile (\"\" : : : \"memory\");\n+    }\n+  int sum1, sum2, sum3;\n+  foo (&sum1, &sum2, &sum3);\n+  if (sum1 != 48896 || sum2 != 32896 || sum3 != 16512)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Loop contains only SLP stmts\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "32a5caa391e669c2fb4cd0dbf359553acdb6d46f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0630a4ecda602a90e978c3285cf1028e92ff5e8b", "patch": "@@ -890,8 +890,10 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n                   STMT_VINFO_DEF_TYPE (vinfo_for_stmt (reduc_stmt)) =\n                                                            vect_reduction_def;\n                   /* Store the reduction cycles for possible vectorization in\n-                     loop-aware SLP.  */\n-                  LOOP_VINFO_REDUCTIONS (loop_vinfo).safe_push (reduc_stmt);\n+                     loop-aware SLP if it was not detected as reduction\n+\t\t     chain.  */\n+\t\t  if (! GROUP_FIRST_ELEMENT (vinfo_for_stmt (reduc_stmt)))\n+\t\t    LOOP_VINFO_REDUCTIONS (loop_vinfo).safe_push (reduc_stmt);\n                 }\n             }\n         }"}, {"sha": "9e7a20dbfe433f84b8b85a71e27bad32cb4d7e62", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630a4ecda602a90e978c3285cf1028e92ff5e8b/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=0630a4ecda602a90e978c3285cf1028e92ff5e8b", "patch": "@@ -2102,38 +2102,29 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n {\n   unsigned int i;\n   gimple *first_element;\n-  bool ok = false;\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"=== vect_analyze_slp ===\\n\");\n \n   /* Find SLP sequences starting from groups of grouped stores.  */\n   FOR_EACH_VEC_ELT (vinfo->grouped_stores, i, first_element)\n-    if (vect_analyze_slp_instance (vinfo, first_element, max_tree_size))\n-      ok = true;\n+    vect_analyze_slp_instance (vinfo, first_element, max_tree_size);\n \n   if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo))\n     {\n       if (loop_vinfo->reduction_chains.length () > 0)\n \t{\n \t  /* Find SLP sequences starting from reduction chains.  */\n \t  FOR_EACH_VEC_ELT (loop_vinfo->reduction_chains, i, first_element)\n-\t      if (vect_analyze_slp_instance (vinfo, first_element,\n+\t    if (! vect_analyze_slp_instance (vinfo, first_element,\n \t\t\t\t\t     max_tree_size))\n-\t\tok = true;\n-\t      else\n-\t\treturn false;\n-\n-\t  /* Don't try to vectorize SLP reductions if reduction chain was\n-\t     detected.  */\n-\t  return ok;\n+\t      return false;\n \t}\n \n       /* Find SLP sequences starting from groups of reductions.  */\n-      if (loop_vinfo->reductions.length () > 1\n-\t  && vect_analyze_slp_instance (vinfo, loop_vinfo->reductions[0],\n-\t\t\t\t\tmax_tree_size))\n-\tok = true;\n+      if (loop_vinfo->reductions.length () > 1)\n+\tvect_analyze_slp_instance (vinfo, loop_vinfo->reductions[0],\n+\t\t\t\t   max_tree_size);\n     }\n \n   return true;"}]}