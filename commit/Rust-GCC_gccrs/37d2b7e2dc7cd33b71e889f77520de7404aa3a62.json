{"sha": "37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkMmI3ZTJkYzdjZDMzYjcxZTg4OWY3NzUyMGRlNzQwNGFhM2E2Mg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-10-11T22:12:48Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-10-11T22:12:48Z"}, "message": "* gcj.texi (Compatibility): Add Limitations and Extensions section.\n\nFrom-SVN: r58067", "tree": {"sha": "e42d64aa0f6ffe7051dd6b4373ba1d61cce62c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42d64aa0f6ffe7051dd6b4373ba1d61cce62c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d2b7e2dc7cd33b71e889f77520de7404aa3a62/comments", "author": null, "committer": null, "parents": [{"sha": "9dac635528219ffe0b7a7aef4d355947edd6c48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dac635528219ffe0b7a7aef4d355947edd6c48c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dac635528219ffe0b7a7aef4d355947edd6c48c"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "5c22fe92a2ed42ad85b40a9e70dd48910a39bdcb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d2b7e2dc7cd33b71e889f77520de7404aa3a62/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d2b7e2dc7cd33b71e889f77520de7404aa3a62/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "patch": "@@ -1,3 +1,7 @@\n+2002-10-11  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gcj.texi (Compatibility): Add Limitations and Extensions section.\n+\n 2002-10-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (JAVA_TREEHASHHASH_H): Use htab_hash_pointer."}, {"sha": "f1209f68a1e784a6737d9b32df1f2232d1a70945", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d2b7e2dc7cd33b71e889f77520de7404aa3a62/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d2b7e2dc7cd33b71e889f77520de7404aa3a62/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=37d2b7e2dc7cd33b71e889f77520de7404aa3a62", "patch": "@@ -487,14 +487,21 @@ specifications.  However, limited manpower and incomplete and unclear\n documentation work against us.  So, there are caveats to using\n @command{gcj}.\n \n+@menu\n+* Limitations::                 \n+* Extensions::                  \n+@end menu\n+\n+@node Limitations\n+@section Standard features not yet supported\n+\n This list of compatibility issues is by no means complete.\n \n @itemize @bullet\n @item\n-@command{gcj} implements the JDK 1.1 language.  It supports inner classes,\n-though these are known to still be buggy.  It does not yet support the\n-Java 2 @code{strictfp} keyword (it recognizes the keyword but ignores\n-it).\n+@command{gcj} implements the JDK 1.2 language.  It supports inner classes\n+and the new 1.4 @code{assert} keyword.  It does not yet support the Java 2\n+@code{strictfp} keyword (it recognizes the keyword but ignores it).  \n \n @item\n @code{libgcj} is largely compatible with the JDK 1.2 libraries.\n@@ -510,6 +517,31 @@ affects you, it probably makes sense to report it so that we can discuss\n the appropriate response.\n @end itemize\n \n+@node Extensions\n+@section Extra features unique to gcj\n+\n+The main feature of @command{gcj} is that it can compile programs written in\n+the Java programming language to native code.  Most extensions that have been\n+added are to facilitate this functionality.\n+\n+@itemize @bullet\n+@item\n+@command{gcj} makes it easy and efficient to mix code written in Java and C++.\n+@xref{About CNI}, for more info on how to use this in your programs.\n+\n+@item\n+When you compile your classes into a shared library they can be automatically\n+loaded by the @code{libgcj} system classloader.  When trying to load a class\n+@code{gnu.pkg.SomeClass} the system classloader will first try to load the\n+shared library @file{lib-gnu-pkg-SomeClass.so}, if that fails to load the\n+class then it will try to load @file{lib-gnu-pkg.so} and finally when the\n+class is still not loaded it will try to load @file{lib-gnu.so}.  Note that\n+all @samp{.}s will be transformed into @samp{-}s and that searching\n+for inner classes starts with their outermost outer class.  If the class\n+cannot be found this way the system classloader tries to use\n+the @code{libgcj} bytecode interpreter to load the class from the standard\n+classpath.\n+@end itemize\n \n @node Invoking gcjh\n @chapter Invoking gcjh"}]}