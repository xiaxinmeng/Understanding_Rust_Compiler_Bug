{"sha": "107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3YWJiMmY2MWY2ZTUzZWJiN2FhMDViNzhmZGQ5MjM0ZWU3ODc3Yw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-10-16T08:35:17Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-16T08:35:17Z"}, "message": "Eliminate use of C++ static constructors.\n\n\t* interpret.cc: Remove static Utf8Consts. Use namespace gcj.\n\t* jni.cc: Likewise.\n\t* resolve.cc: Likewise.\n\t* defineclass.cc: Likewise.\n\t(_Jv_ClassReader::handleClassBegin): Synchronize call to\n\t_Jv_RegisterClass.\n\t* include/jvm.h (void_signature, clinit_name, init_name, finit_name):\n\tDeclare in namespace gcj.\n\t* java/lang/Class.h (Class): Remove initialization for primitive\n\ttypes.\n\t(friend void _Jv_InitPrimClass): This is in prims.cc.\n\t* prims.cc (_Jv_InitPrimClass): Do primitive type initialization\n\there instead.\n\t(void_signature, clinit_name, init_name, finit_name): Define in\n\tnamespace gcj.\n\t(_Jv_CreateJavaVM): Call _Jv_InitThreads, _Jv_InitGC, and\n\t_Jv_InitializeSyncMutex from here. Initialize Utf8 constants.\n\tInitialize primitive types.\n\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Don't call\n\tinitialization routines. Don't synchronize.\n\t* java/lang/natRuntime.cc (_load): Synchronize on java.lang.Class\n\tacross dlopen call.\n\nFrom-SVN: r46282", "tree": {"sha": "48472b1f97ae998bfbcb469ac6838d504c367998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48472b1f97ae998bfbcb469ac6838d504c367998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/comments", "author": null, "committer": null, "parents": [{"sha": "6fd617e3e1087374b10ae48d822bf23b9ba19e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd617e3e1087374b10ae48d822bf23b9ba19e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd617e3e1087374b10ae48d822bf23b9ba19e1b"}], "stats": {"total": 194, "additions": 132, "deletions": 62}, "files": [{"sha": "88639b9fa6a084d48c3f4992018659b1bb72edb8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -2,6 +2,30 @@\n \n \t* name-finder.cc (_Jv_name_finder::lookup): Check for NULL dli_sname.\n \n+\tEliminate use of C++ static constructors.\t\t\n+\t* interpret.cc: Remove static Utf8Consts. Use namespace gcj. \n+\t* jni.cc: Likewise.\n+\t* resolve.cc: Likewise.\n+\t* defineclass.cc: Likewise.\n+\t(_Jv_ClassReader::handleClassBegin): Synchronize call to \n+\t_Jv_RegisterClass.\n+\t* include/jvm.h (void_signature, clinit_name, init_name, finit_name):\n+\tDeclare in namespace gcj.\n+\t* java/lang/Class.h (Class): Remove initialization for primitive\n+\ttypes.\n+\t(friend void _Jv_InitPrimClass): This is in prims.cc.\n+\t* prims.cc (_Jv_InitPrimClass): Do primitive type initialization\n+\there instead.\n+\t(void_signature, clinit_name, init_name, finit_name): Define in \n+\tnamespace gcj.\n+\t(_Jv_CreateJavaVM): Call _Jv_InitThreads, _Jv_InitGC, and \n+\t_Jv_InitializeSyncMutex from here. Initialize Utf8 constants. \n+\tInitialize primitive types.\n+\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Don't call\n+\tinitialization routines. Don't synchronize.\n+\t* java/lang/natRuntime.cc (_load): Synchronize on java.lang.Class\n+\tacross dlopen call.\n+\n 2001-10-15  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/util/HashMap.java (HashEntry.clone): Removed."}, {"sha": "85f6ce3a65e234bfc16eaa2b846499ac6164b2dc", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -41,10 +41,7 @@ details.  */\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/reflect/Modifier.h>\n \n-// we don't verify method names that match these.\n-static _Jv_Utf8Const *clinit_name = _Jv_makeUtf8Const (\"<clinit>\", 8);\n-static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n-\n+using namespace gcj;\n \n // these go in some separate functions, to avoid having _Jv_InitClass\n // inserted all over the place.\n@@ -934,7 +931,11 @@ _Jv_ClassReader::handleClassBegin\n   // to include references to this class.\n \n   def->state = JV_STATE_PRELOADING;\n-  _Jv_RegisterClass (def);\n+\n+  {\n+    JvSynchronize sync (&java::lang::Class::class$);\n+    _Jv_RegisterClass (def);\n+  }\n \n   if (super_class != 0)\n     {"}, {"sha": "bb54c8b58d883bf929bf4393e7ef19c0f62cc1a7", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -124,6 +124,15 @@ extern jboolean _Jv_equaln (_Jv_Utf8Const *, jstring, jint);\n // FIXME: remove this define.\n #define StringClass java::lang::String::class$\n \n+namespace gcj\n+{\n+  /* Some constants used during lookup of special class methods.  */\n+  extern _Jv_Utf8Const *void_signature; /* \"()V\" */\n+  extern _Jv_Utf8Const *clinit_name;    /* \"<clinit>\" */\n+  extern _Jv_Utf8Const *init_name;      /* \"<init>\" */\n+  extern _Jv_Utf8Const *finit_name;     /* \"finit$\", */\n+};\n+\n /* Type of pointer used as finalizer.  */\n typedef void _Jv_FinalizerFunc (jobject);\n "}, {"sha": "5bfe4e7fbba91d8b979b2955724cd6370a3801f2", "filename": "libjava/interpret.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -37,7 +37,7 @@ details.  */\n \n #include <stdlib.h>\n \n-static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n+using namespace gcj;\n \n static void throw_internal_error (char *msg)\n   __attribute__ ((__noreturn__));"}, {"sha": "2ca7960466dc1f03f8970cc50e59fe077c2ad0bd", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -60,17 +60,10 @@ details.  */\n #define FieldClass java::lang::reflect::Field::class$\n #define ConstructorClass java::lang::reflect::Constructor::class$\n \n-// Some constants we use to look up the class initializer.\n-static _Jv_Utf8Const *void_signature = _Jv_makeUtf8Const (\"()V\", 3);\n-static _Jv_Utf8Const *clinit_name = _Jv_makeUtf8Const (\"<clinit>\", 8);\n-static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n-static _Jv_Utf8Const *finit_name = _Jv_makeUtf8Const (\"finit$\", 6);\n-// The legacy `$finit$' method name, which still needs to be\n-// recognized as equivalent to the now prefered `finit$' name.\n-static _Jv_Utf8Const *finit_leg_name = _Jv_makeUtf8Const (\"$finit$\", 7);\n-\n \f\n \n+using namespace gcj;\n+\n jclass\n java::lang::Class::forName (jstring className, jboolean initialize,\n                             java::lang::ClassLoader *loader)\n@@ -341,9 +334,7 @@ java::lang::Class::getDeclaredMethods (void)\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n-\t  // Backward compatibility hack: match the legacy `$finit$' name\n-\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n \tcontinue;\n       numMethods++;\n     }\n@@ -357,9 +348,7 @@ java::lang::Class::getDeclaredMethods (void)\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n-\t  // Backward compatibility hack: match the legacy `$finit$' name\n-\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n \tcontinue;\n       java::lang::reflect::Method* rmethod\n \t= new java::lang::reflect::Method ();\n@@ -522,9 +511,7 @@ java::lang::Class::_getMethods (JArray<java::lang::reflect::Method *> *result,\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n-\t  // Backward compatibility hack: match the legacy `$finit$' name\n-\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n \tcontinue;\n       // Only want public methods.\n       if (! java::lang::reflect::Modifier::isPublic (method->accflags))"}, {"sha": "3c2679bd8b4367d78191a0c93ae15a6191657945", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -175,7 +175,6 @@ java::lang::ClassLoader::markClassErrorState0 (java::lang::Class *klass)\n   klass->notifyAll ();\n }\n \n-\n // This is the findClass() implementation for the System classloader. It is \n // the only native method in VMClassLoader, so we define it here.\n jclass\n@@ -419,24 +418,13 @@ _Jv_RegisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n }\n \n // This function is called many times during startup, before main() is\n-// run.  We do our runtime initialization here the very first time we\n-// are called.  At that point in time we know for certain we are\n-// running single-threaded, so we don't need to lock when modifying\n-// `init'.  CLASSES is NULL-terminated.\n+// run.  At that point in time we know for certain we are running \n+// single-threaded, so we don't need to lock when adding classes to the \n+// class chain.  At all other times, the caller should synchronize on\n+// Class::class$.\n void\n _Jv_RegisterClasses (jclass *classes)\n {\n-  static bool init = false;\n-\n-  if (! init)\n-    {\n-      init = true;\n-      _Jv_InitThreads ();\n-      _Jv_InitGC ();\n-      _Jv_InitializeSyncMutex ();\n-    }\n-\n-  JvSynchronize sync (&ClassClass);\n   for (; *classes; ++classes)\n     {\n       jclass klass = *classes;"}, {"sha": "18bc3cb9bf9eb205dd209d49e64ee3093756c633", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -138,8 +138,15 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n #endif\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), &buf[offset]);\n   buf[offset + total] = '\\0';\n+  lt_dlhandle h;\n   // FIXME: make sure path is absolute.\n-  lt_dlhandle h = do_search ? lt_dlopenext (buf) : lt_dlopen (buf);\n+  {\n+    // Synchronize on java.lang.Class. This is to protect the class chain from\n+    // concurrent modification by class registration calls which may be run\n+    // during the dlopen().\n+    JvSynchronize sync (&java::lang::Class::class$);\n+    h = do_search ? lt_dlopenext (buf) : lt_dlopen (buf);\n+  }\n   if (h == NULL)\n     {\n       const char *msg = lt_dlerror ();"}, {"sha": "8e586fa38f1a3039fecebb9220a157e1ef563283", "filename": "libjava/jni.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -48,6 +48,8 @@ details.  */\n #include <java-interp.h>\n #include <java-threads.h>\n \n+using namespace gcj;\n+\n // This enum is used to select different template instantiations in\n // the invocation code.\n enum invocation_type\n@@ -1502,9 +1504,6 @@ _Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n {\n   using namespace java::lang::reflect;\n \n-  // FIXME.\n-  static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n-\n   jobject result = NULL;\n \n   try"}, {"sha": "7b3dd6c6a005e0ddbac6622ca7b1e79c43429d77", "filename": "libjava/prims.cc", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -574,21 +574,39 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n \n \f\n \n-#define DECLARE_PRIM_TYPE(NAME, SIG, LEN)\t\t\t\t\\\n-  _Jv_ArrayVTable _Jv_##NAME##VTable;\t\t\t\t\t\\\n-  java::lang::Class _Jv_##NAME##Class ((jobject) #NAME,\t\t\t\\\n-\t\t\t\t       (jbyte) SIG, (jint) LEN,\t\t\\\n-\t\t\t\t       (jobject) &_Jv_##NAME##VTable);\n-\n-DECLARE_PRIM_TYPE(byte, 'B', 1);\n-DECLARE_PRIM_TYPE(short, 'S', 2);\n-DECLARE_PRIM_TYPE(int, 'I', 4);\n-DECLARE_PRIM_TYPE(long, 'J', 8);\n-DECLARE_PRIM_TYPE(boolean, 'Z', 1);\n-DECLARE_PRIM_TYPE(char, 'C', 2);\n-DECLARE_PRIM_TYPE(float, 'F', 4);\n-DECLARE_PRIM_TYPE(double, 'D', 8);\n-DECLARE_PRIM_TYPE(void, 'V', 0);\n+#define DECLARE_PRIM_TYPE(NAME)\t\t\t\\\n+  _Jv_ArrayVTable _Jv_##NAME##VTable;\t\t\\\n+  java::lang::Class _Jv_##NAME##Class;\n+\n+DECLARE_PRIM_TYPE(byte);\n+DECLARE_PRIM_TYPE(short);\n+DECLARE_PRIM_TYPE(int);\n+DECLARE_PRIM_TYPE(long);\n+DECLARE_PRIM_TYPE(boolean);\n+DECLARE_PRIM_TYPE(char);\n+DECLARE_PRIM_TYPE(float);\n+DECLARE_PRIM_TYPE(double);\n+DECLARE_PRIM_TYPE(void);\n+\n+void\n+_Jv_InitPrimClass (jclass cl, char *cname, char sig, int len, \n+                   _Jv_ArrayVTable *array_vtable)\n+{    \n+  using namespace java::lang::reflect;\n+\n+  // We must initialize every field of the class.  We do this in the\n+  // same order they are declared in Class.h, except for fields that\n+  // are initialized to NULL.\n+  cl->name = _Jv_makeUtf8Const ((char *) cname, -1);\n+  cl->accflags = Modifier::PUBLIC | Modifier::FINAL | Modifier::ABSTRACT;\n+  cl->method_count = sig;\n+  cl->size_in_bytes = len;\n+  cl->vtable = JV_PRIMITIVE_VTABLE;\n+  cl->state = JV_STATE_DONE;\n+  cl->depth = -1;\n+  if (sig != 'V')\n+    _Jv_NewArrayClass (cl, NULL, (_Jv_VTable *) array_vtable);\n+}\n \n jclass\n _Jv_FindClassFromSignature (char *sig, java::lang::ClassLoader *loader)\n@@ -848,11 +866,49 @@ process_gcj_properties ()\n }\n #endif // DISABLE_GETENV_PROPERTIES\n \n+namespace gcj\n+{\n+  _Jv_Utf8Const *void_signature;\n+  _Jv_Utf8Const *clinit_name;\n+  _Jv_Utf8Const *init_name;\n+  _Jv_Utf8Const *finit_name;\n+}\n+\n jint\n _Jv_CreateJavaVM (void* /*vm_args*/)\n {\n+  using namespace gcj;\n+  \n+  static bool init = false;\n+\n+  if (init)\n+    return -1;\n+\n+  init = true;\n+\n   PROCESS_GCJ_PROPERTIES;\n \n+  _Jv_InitThreads ();\n+  _Jv_InitGC ();\n+  _Jv_InitializeSyncMutex ();\n+\n+  /* Initialize Utf8 constants declared in jvm.h. */\n+  void_signature = _Jv_makeUtf8Const (\"()V\", 3);\n+  clinit_name = _Jv_makeUtf8Const (\"<clinit>\", 8);\n+  init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n+  finit_name = _Jv_makeUtf8Const (\"finit$\", 6);\n+\n+  /* Initialize built-in classes to represent primitive TYPEs. */\n+  _Jv_InitPrimClass (&_Jv_byteClass,    \"byte\",    'B', 1, &_Jv_byteVTable);\n+  _Jv_InitPrimClass (&_Jv_shortClass,   \"short\",   'S', 2, &_Jv_shortVTable);\n+  _Jv_InitPrimClass (&_Jv_intClass,     \"int\",     'I', 4, &_Jv_intVTable);\n+  _Jv_InitPrimClass (&_Jv_longClass,    \"long\",    'J', 8, &_Jv_longVTable);\n+  _Jv_InitPrimClass (&_Jv_booleanClass, \"boolean\", 'Z', 1, &_Jv_booleanVTable);\n+  _Jv_InitPrimClass (&_Jv_charClass,    \"char\",    'C', 2, &_Jv_charVTable);\n+  _Jv_InitPrimClass (&_Jv_floatClass,   \"float\",   'F', 4, &_Jv_floatVTable);\n+  _Jv_InitPrimClass (&_Jv_doubleClass,  \"double\",  'D', 8, &_Jv_doubleVTable);\n+  _Jv_InitPrimClass (&_Jv_voidClass,    \"void\",    'V', 0, &_Jv_voidVTable);\n+\n   // Turn stack trace generation off while creating exception objects.\n   _Jv_InitClass (&java::lang::Throwable::class$);\n   java::lang::Throwable::trace_enabled = 0;"}, {"sha": "ea0faadf22155ab219ec9616f9c5b71a96d8e022", "filename": "libjava/resolve.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107abb2f61f6e53ebb7aa05b78fdd9234ee7877c/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=107abb2f61f6e53ebb7aa05b78fdd9234ee7877c", "patch": "@@ -32,6 +32,8 @@ details.  */\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/reflect/Modifier.h>\n \n+using namespace gcj;\n+\n void\n _Jv_ResolveField (_Jv_Field *field, java::lang::ClassLoader *loader)\n {\n@@ -65,9 +67,6 @@ _Jv_BuildResolvedMethod (_Jv_Method*,\n \t\t\t jint);\n \n \n-// We need to know the name of a constructor.\n-static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n-\n static void throw_incompatible_class_change_error (jstring msg)\n {\n   throw new java::lang::IncompatibleClassChangeError (msg);"}]}