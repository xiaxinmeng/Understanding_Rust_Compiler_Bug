{"sha": "a834e70bc5a5ebd751d5782d713da81c95b31766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzNGU3MGJjNWE1ZWJkNzUxZDU3ODJkNzEzZGE4MWM5NWIzMTc2Ng==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-09-24T07:57:28Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-09-24T07:57:28Z"}, "message": "fix spaces/tabs again\n\nFrom-SVN: r88017", "tree": {"sha": "27dd23c0d0b076d984f372071f1303eedb420960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27dd23c0d0b076d984f372071f1303eedb420960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a834e70bc5a5ebd751d5782d713da81c95b31766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a834e70bc5a5ebd751d5782d713da81c95b31766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a834e70bc5a5ebd751d5782d713da81c95b31766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a834e70bc5a5ebd751d5782d713da81c95b31766/comments", "author": null, "committer": null, "parents": [{"sha": "56a4b3e249e32274893ced1368c8793b265043ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a4b3e249e32274893ced1368c8793b265043ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a4b3e249e32274893ced1368c8793b265043ab"}], "stats": {"total": 182, "additions": 91, "deletions": 91}, "files": [{"sha": "fa3fac7d33ecb4f803e5bf339fa6b268573bf7d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e70bc5a5ebd751d5782d713da81c95b31766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e70bc5a5ebd751d5782d713da81c95b31766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a834e70bc5a5ebd751d5782d713da81c95b31766", "patch": "@@ -101,97 +101,97 @@\n \t\n 2004-09-23  Dorit Naishlos <dorit@il.ibm.com>\n \n-        * tree.def (ALIGN_INDIRECT_REF, MISALIGNED_INDIRECT_REF):\n-        New tree-codes.\n-        * tree.h (REF_ORIGINAL): Consider ALIGN_INDIRECT_REF and\n-        MISALIGNED_INDIRECT_REF.\n-        * alias.c (get_alias_set, nonoverlapping_memrefs_p): Likewise.\n-        * emit-rtl.c (mem_expr_equal_p, set_mem_attributes_minus_bitpos):\n-        Likewise.\n-        * expr.c (safe_from_p, expand_expr_real_1, rewrite_address_base)\n-        (find_interesting_uses_address): Likewise.\n-        * fold-const.c (non_lvalue, operand_equal_p): Likewise.\n-        (build_fold_addr_expr_with_type): Likewise.\n-        * gimplify.c (gimplify_addr_expr, gimplify_expr): Likewise.\n-        * print-rtl.c (print_mem_expr): Likewise.\n-        * tree-dump.c (dequeue_and_dump): Likewise.\n-        * tree-eh.c (tree_could_trap_p): Likewise.\n-        * tree-gimple.c (is_gimple_addressable, get_base_address): Likewise.\n-        * tree-pretty-print.c (op_prio, op_symbol, dump_generic_node): Likewise.\n-        * tree-ssa-alias.c (find_ptr_dereference, ptr_is_dereferenced_by):\n-        Likewise.\n-        * tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n-        * tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n-        * tree-ssa-loop-im.c (for_each_index, is_call_clobbered_ref): Likewise.\n-        * tree-ssa-loop-ivopts.c (find_interesting_uses_address): Likewise.\n-        (add_address_candidates, rewrite_address_base): Likewise.\n-        * tree-ssa-operands.c (get_expr_operands, get_indirect_ref_operands):\n-        Likewise.\n-        * tree.c (staticp, build1_stat): Likewise.\n-\n-        * tree.def (REALIGN_LOAD_EXPR, REALIGN_STORE_EXPR): New tree-codes.\n-        * tree-pretty-print.c (dump_generic_node): Consider REALIGN_LOAD_EXPR.\n-        * tree-ssa-operands.c (get_expr_operands): Likewise.\n-        * expr.c (expand_expr_real_1): Likewise.\n-\n-        * optabs.h (vec_realign_store_optab, vec_realign_load_optab): New\n-        optabs.\n-        (OTI_vec_realign_store, OTI_vec_realign_load): New optab_index values\n-        for the new optabs.\n-        (expand_ternary_op): New function.\n-        * genopinit.c (optabs): Handle the new optabs.\n-        * optabs.c (optab_for_tree_code): Add cases for the new tree-codes.\n-        (init_optabs): Initialize vec_realign_load_optab.\n-        (expand_ternary_op): New functions.\n-\n-        * target-def.h (TARGET_VECTORIZE): New member for struct gcc_target.\n-        (TARGET_VECTORIZE_MISALIGNED_MEM_OK): New member for targetm.vectorize.\n-        (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Likewise.\n-        (TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE): Likewise.\n-        * target.h (struct vectorize): New member for struct gcc_target.\n-        (misaligned_mem_ok): New member for targetm.vectorize.\n-        (builtin_mask_for_load): Likewise.\n-        (builtin_mask_for_store): Likewise.\n-        * targethooks.c (default_vect_misaligned_mem_ok): New function.\n-        * targethooks.h (default_vect_misaligned_mem_ok): New function.\n-\n-        * config/rs6000/altivec.md (build_vector_mask_for_load): New\n-        define_expand.\n-        (vec_realign_load_v4si, vec_realign_load_v4sf, vec_realign_load_v8hi)\n-        (vec_realign_load_v16qi): New define_insn.\n-        * config/rs6000/rs6000.h (ALTIVEC_BUILTIN_MASK_FOR_LOAD):\n-        (ALTIVEC_BUILTIN_MASK_FOR_STORE): New target builtins.\n-        * config/rs6000/rs6000.c (altivec_builtin_mask_for_load):\n-        (altivec_builtin_mask_for_store): New variables.\n-        (rs6000_builtin_mask_for_load): New function. Implements\n-        TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD.\n-        (rs6000_builtin_mask_for_store): New function. Implements\n-        TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE.\n-        (rs6000_expand_builtin): Expand the target builtins\n-        builtin_mask_for_load and builtin_mask_for_store.\n-        (altivec_init_builtins): Initialize the new target builtins.\n-        * config/i386/i386.c (ix86_misaligned_mem_ok): New function.\n-        Implements the target hook TARGET_VECTORIZE_MISALIGNED_MEM_OK.\n-\n-        * tree-vectorizer.c (vect_create_data_ref): Renamed to\n-        vect_create_data_ref_ptr. Returns a pointer instead of an array-ref.\n-        (vect_create_addr_base_for_vector_ref): Additional argument (offset).\n-        (vectorizable_store): Call vect_create_data_ref_ptr with additional\n-        arguments, and create an indirect_ref with its return value data_ref.\n-        Check aligned_access_p.\n-        (vectorizable_load): Handle misaligned loads, using software-pipelined\n-        scheme with REALIGN_LOAD_EXPR and ALIGN_INDIRECT_REF if\n-        vec_realign_load_optab is supported, or using a scheme without\n-        software-pipelining with MISALIGNED_INDIRECT_REF if the target hook\n-        misaligned_mem_ok is supported.\n-\n-        (vect_finish_stmt_generation): Typo.\n-        (vect_enhance_data_refs_alignment): Rename loop_vinfo to loop_info.\n-        (vect_analyze_data_refs_alignment): Don't fail vectorization in the\n-        presence of misaligned loads.\n-        (vect_analyze_data_ref_access): Add check for constant init.\n-        (vect_get_symbl_and_dr): Remove duplicate line.\n-        * tree-vectorizer.h (DR_MISALIGNMENT): Add comment.\n+\t* tree.def (ALIGN_INDIRECT_REF, MISALIGNED_INDIRECT_REF):\n+\tNew tree-codes.\n+\t* tree.h (REF_ORIGINAL): Consider ALIGN_INDIRECT_REF and\n+\tMISALIGNED_INDIRECT_REF.\n+\t* alias.c (get_alias_set, nonoverlapping_memrefs_p): Likewise.\n+\t* emit-rtl.c (mem_expr_equal_p, set_mem_attributes_minus_bitpos):\n+\tLikewise.\n+\t* expr.c (safe_from_p, expand_expr_real_1, rewrite_address_base)\n+\t(find_interesting_uses_address): Likewise.\n+\t* fold-const.c (non_lvalue, operand_equal_p): Likewise.\n+\t(build_fold_addr_expr_with_type): Likewise.\n+\t* gimplify.c (gimplify_addr_expr, gimplify_expr): Likewise.\n+\t* print-rtl.c (print_mem_expr): Likewise.\n+\t* tree-dump.c (dequeue_and_dump): Likewise.\n+\t* tree-eh.c (tree_could_trap_p): Likewise.\n+\t* tree-gimple.c (is_gimple_addressable, get_base_address): Likewise.\n+\t* tree-pretty-print.c (op_prio, op_symbol, dump_generic_node): Likewise.\n+\t* tree-ssa-alias.c (find_ptr_dereference, ptr_is_dereferenced_by):\n+\tLikewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n+\t* tree-ssa-loop-im.c (for_each_index, is_call_clobbered_ref): Likewise.\n+\t* tree-ssa-loop-ivopts.c (find_interesting_uses_address): Likewise.\n+\t(add_address_candidates, rewrite_address_base): Likewise.\n+\t* tree-ssa-operands.c (get_expr_operands, get_indirect_ref_operands):\n+\tLikewise.\n+\t* tree.c (staticp, build1_stat): Likewise.\n+\n+\t* tree.def (REALIGN_LOAD_EXPR, REALIGN_STORE_EXPR): New tree-codes.\n+\t* tree-pretty-print.c (dump_generic_node): Consider REALIGN_LOAD_EXPR.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\n+\t* optabs.h (vec_realign_store_optab, vec_realign_load_optab): New\n+\toptabs.\n+\t(OTI_vec_realign_store, OTI_vec_realign_load): New optab_index values\n+\tfor the new optabs.\n+\t(expand_ternary_op): New function.\n+\t* genopinit.c (optabs): Handle the new optabs.\n+\t* optabs.c (optab_for_tree_code): Add cases for the new tree-codes.\n+\t(init_optabs): Initialize vec_realign_load_optab.\n+\t(expand_ternary_op): New functions.\n+\n+\t* target-def.h (TARGET_VECTORIZE): New member for struct gcc_target.\n+\t(TARGET_VECTORIZE_MISALIGNED_MEM_OK): New member for targetm.vectorize.\n+\t(TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Likewise.\n+\t(TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE): Likewise.\n+\t* target.h (struct vectorize): New member for struct gcc_target.\n+\t(misaligned_mem_ok): New member for targetm.vectorize.\n+\t(builtin_mask_for_load): Likewise.\n+\t(builtin_mask_for_store): Likewise.\n+\t* targethooks.c (default_vect_misaligned_mem_ok): New function.\n+\t* targethooks.h (default_vect_misaligned_mem_ok): New function.\n+\n+\t* config/rs6000/altivec.md (build_vector_mask_for_load): New\n+\tdefine_expand.\n+\t(vec_realign_load_v4si, vec_realign_load_v4sf, vec_realign_load_v8hi)\n+\t(vec_realign_load_v16qi): New define_insn.\n+\t* config/rs6000/rs6000.h (ALTIVEC_BUILTIN_MASK_FOR_LOAD):\n+\t(ALTIVEC_BUILTIN_MASK_FOR_STORE): New target builtins.\n+\t* config/rs6000/rs6000.c (altivec_builtin_mask_for_load):\n+\t(altivec_builtin_mask_for_store): New variables.\n+\t(rs6000_builtin_mask_for_load): New function. Implements\n+\tTARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD.\n+\t(rs6000_builtin_mask_for_store): New function. Implements\n+\tTARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE.\n+\t(rs6000_expand_builtin): Expand the target builtins\n+\tbuiltin_mask_for_load and builtin_mask_for_store.\n+\t(altivec_init_builtins): Initialize the new target builtins.\n+\t* config/i386/i386.c (ix86_misaligned_mem_ok): New function.\n+\tImplements the target hook TARGET_VECTORIZE_MISALIGNED_MEM_OK.\n+\n+\t* tree-vectorizer.c (vect_create_data_ref): Renamed to\n+\tvect_create_data_ref_ptr. Returns a pointer instead of an array-ref.\n+\t(vect_create_addr_base_for_vector_ref): Additional argument (offset).\n+\t(vectorizable_store): Call vect_create_data_ref_ptr with additional\n+\targuments, and create an indirect_ref with its return value data_ref.\n+\tCheck aligned_access_p.\n+\t(vectorizable_load): Handle misaligned loads, using software-pipelined\n+\tscheme with REALIGN_LOAD_EXPR and ALIGN_INDIRECT_REF if\n+\tvec_realign_load_optab is supported, or using a scheme without\n+\tsoftware-pipelining with MISALIGNED_INDIRECT_REF if the target hook\n+\tmisaligned_mem_ok is supported.\n+\n+\t(vect_finish_stmt_generation): Typo.\n+\t(vect_enhance_data_refs_alignment): Rename loop_vinfo to loop_info.\n+\t(vect_analyze_data_refs_alignment): Don't fail vectorization in the\n+\tpresence of misaligned loads.\n+\t(vect_analyze_data_ref_access): Add check for constant init.\n+\t(vect_get_symbl_and_dr): Remove duplicate line.\n+\t* tree-vectorizer.h (DR_MISALIGNMENT): Add comment.\n \n 2004-09-23  Kazu Hirata  <kazu@cs.umass.edu>\n "}]}