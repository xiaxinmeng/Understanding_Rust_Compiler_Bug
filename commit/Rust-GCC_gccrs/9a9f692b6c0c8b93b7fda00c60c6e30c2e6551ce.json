{"sha": "9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5ZjY5MmI2YzBjOGI5M2I3ZmRhMDBjNjBjNmUzMGMyZTY1NTFjZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-09-14T01:42:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-09-14T01:42:56Z"}, "message": "expr.c (string_constant): Adjust function comment.\n\n\t* expr.c (string_constant): Adjust function comment.\n\tRemove bogus check for zero termination.\n\nFrom-SVN: r264300", "tree": {"sha": "e56aa83bdf7dc83978ba79e82ec037c5bc02f671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56aa83bdf7dc83978ba79e82ec037c5bc02f671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffbd4c4a250936a9283aaceb23eec6ce3788936c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbd4c4a250936a9283aaceb23eec6ce3788936c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffbd4c4a250936a9283aaceb23eec6ce3788936c"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "8e63d3eac3c439225a086c062968eeba986a544a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "patch": "@@ -1,5 +1,8 @@\n 2018-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n+\t* expr.c (string_constant): Adjust function comment.\n+\tRemove bogus check for zero termination.\n+\n \t* fold-const.c (c_getstr): Clamp STRING_LENGTH to STRING_SIZE.\n \n \t* varasm.c (compare_constant): Compare type size of STRING_CSTs."}, {"sha": "2d9a9eb90c3c06e33cb1dbc66044ddb0e166b0bf", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9a9f692b6c0c8b93b7fda00c60c6e30c2e6551ce", "patch": "@@ -11307,8 +11307,9 @@ is_aligning_offset (const_tree offset, const_tree exp)\n    aren't nul-terminated strings.  In that case, if ARG refers to such\n    a sequence set *NONSTR to its declaration and clear it otherwise.\n    The type of the offset is sizetype.  If MEM_SIZE is non-zero the storage\n-   size of the memory is returned.  If MEM_SIZE is zero, the string is\n-   only returned when it is properly zero terminated.  */\n+   size of the memory is returned.  The returned STRING_CST object is\n+   valid up to TREE_STRING_LENGTH.  Bytes between TREE_STRING_LENGTH\n+   and MEM_SIZE are zero.  MEM_SIZE is at least TREE_STRING_LENGTH.  */\n \n tree\n string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *nonstr)\n@@ -11410,6 +11411,8 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *nonstr)\n       /* This is not strictly correct.  FIXME in follow-up patch.  */\n       if (nonstr)\n \t*nonstr = NULL_TREE;\n+      gcc_checking_assert (tree_to_shwi (TYPE_SIZE_UNIT (TREE_TYPE (array)))\n+\t\t\t   >= TREE_STRING_LENGTH (array));\n       return array;\n     }\n \n@@ -11452,40 +11455,26 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *nonstr)\n   if (!init || TREE_CODE (init) != STRING_CST)\n     return NULL_TREE;\n \n-  tree array_size = DECL_SIZE_UNIT (array);\n-  if (!array_size || TREE_CODE (array_size) != INTEGER_CST)\n-    return NULL_TREE;\n-\n-  /* Avoid returning an array that is unterminated because it lacks\n-     a terminating nul, like\n-     const char a[4] = \"abcde\";\n-     but do handle those that are strings even if they have excess\n-     initializers, such as in\n-     const char a[4] = \"abc\\000\\000\";\n-     The excess elements contribute to TREE_STRING_LENGTH()\n-     but not to strlen().  */\n-  unsigned HOST_WIDE_INT charsize\n-    = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (init))));\n   /* Compute the lower bound number of elements (not bytes) in the array\n      that the string is used to initialize.  The actual size of the array\n      may be greater if the string is shorter, but the the important\n      data point is whether the literal, inlcuding the terminating nul,\n      fits the array.  */\n+  unsigned HOST_WIDE_INT charsize\n+    = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (init))));\n   unsigned HOST_WIDE_INT array_elts\n     = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (init))) / charsize;\n \n   /* Compute the string length in (wide) characters.  */\n   unsigned HOST_WIDE_INT length = TREE_STRING_LENGTH (init);\n-  length = string_length (TREE_STRING_POINTER (init), charsize,\n-\t\t\t  length / charsize);\n+\n   if (mem_size)\n     *mem_size = TYPE_SIZE_UNIT (TREE_TYPE (init));\n   if (nonstr)\n     *nonstr = array_elts > length ? NULL_TREE : array;\n \n-  if ((!mem_size && !nonstr)\n-      && array_elts <= length)\n-    return NULL_TREE;\n+  gcc_checking_assert (tree_to_shwi (TYPE_SIZE_UNIT (TREE_TYPE (init)))\n+\t\t       >= TREE_STRING_LENGTH (init));\n \n   *ptr_offset = offset;\n   return init;"}]}