{"sha": "558ee214f31ef39421944b6c78cf3218b61c1337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4ZWUyMTRmMzFlZjM5NDIxOTQ0YjZjNzhjZjMyMThiNjFjMTMzNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-07-26T13:45:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-07-26T13:45:38Z"}, "message": "c-dump.c: Resurrect.\n\n        * c-dump.c: Resurrect.\n        * tree-dump.c: Move C-specific stuff to c-dump.c.\n        * c-common.h: Declare c_dump_tree.\n        * c-lang.c (LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN): Define.\n        * Makefile.in (C_AND_OBJC_OBJS): Add c-dump.o.\n        (c-dump.o): New rule.\ncp/\n        * dump.c (cp_dump_tree): Call c_dump_tree.\n        * Make-lang.in (CXX_C_OBJS): Add c-dump.o.\n\nFrom-SVN: r55776", "tree": {"sha": "10eb7f55dc83c7ac766387eb09cd9cafc6a0cd4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10eb7f55dc83c7ac766387eb09cd9cafc6a0cd4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/558ee214f31ef39421944b6c78cf3218b61c1337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558ee214f31ef39421944b6c78cf3218b61c1337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558ee214f31ef39421944b6c78cf3218b61c1337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558ee214f31ef39421944b6c78cf3218b61c1337/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0a5af59f4a0301a8a9f7a107952e6c6c3529c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a5af59f4a0301a8a9f7a107952e6c6c3529c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a5af59f4a0301a8a9f7a107952e6c6c3529c9d"}], "stats": {"total": 372, "additions": 220, "deletions": 152}, "files": [{"sha": "dbcc464ef8e34cd4783f51d19e11ee2a39791364", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -1,3 +1,12 @@\n+2002-07-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-dump.c: Resurrect.\n+\t* tree-dump.c: Move C-specific stuff to c-dump.c.\n+\t* c-common.h: Declare c_dump_tree.\n+\t* c-lang.c (LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN): Define.\n+\t* Makefile.in (C_AND_OBJC_OBJS): Add c-dump.o.\n+\t(c-dump.o): New rule.\n+\n 2002-07-26  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.md: Enable patterns using rlwinm for"}, {"sha": "f878050a84d3ad2d251da6593c10b2ed46d3c9fa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -713,7 +713,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-format.o c-semantics.o \\\n-  c-objc-common.o libcpp.a $(C_TARGET_OBJS)\n+  c-objc-common.o c-dump.o libcpp.a $(C_TARGET_OBJS)\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n@@ -1251,6 +1251,8 @@ c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n \tflags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(PREDICT_H)\n \n+c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) tree-dump.h\n+\n # Language-independent files.\n \n DRIVER_DEFINES = \\"}, {"sha": "abdd859c54e1c41b3fed0c0d83ddf8dd23cf305b", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -912,4 +912,6 @@ struct c_fileinfo\n struct c_fileinfo *get_fileinfo\t\t\tPARAMS ((const char *));\n extern void dump_time_statistics\t\tPARAMS ((void));\n \n+extern int c_dump_tree\t\t\t\tPARAMS ((void *, tree));\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "6ca07664fbe51809c26aa2be6bd01ad9af97280a", "filename": "gcc/c-dump.c", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -0,0 +1,196 @@\n+/* Tree-dumping functionality for C-family languages.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Written by Mark Mitchell <mark@codesourcery.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"c-tree.h\"\n+#include \"tree-dump.h\"\n+\n+/* Dump information common to statements from STMT.  */\n+\n+void\n+dump_stmt (di, t)\n+     dump_info_p di;\n+     tree t;\n+{\n+  dump_int (di, \"line\", STMT_LINENO (t));\n+}\n+\n+/* Dump the next statement after STMT.  */\n+\n+void\n+dump_next_stmt (di, t)\n+     dump_info_p di;\n+     tree t;\n+{\n+  dump_child (\"next\", TREE_CHAIN (t));\n+}\n+\n+/* Dump any C-specific tree codes and attributes of common codes.  */\n+\n+int\n+c_dump_tree (dump_info, t)\n+     void *dump_info;\n+     tree t;\n+{\n+  enum tree_code code;\n+  dump_info_p di = (dump_info_p) dump_info;\n+\n+  /* Figure out what kind of node this is.  */\n+  code = TREE_CODE (t);\n+\n+  switch (code)\n+    {\n+    case FIELD_DECL:\n+      if (DECL_C_BIT_FIELD (t))\n+\tdump_string (di, \"bitfield\");\n+      break;\n+\n+    case ASM_STMT:\n+      dump_stmt (di, t);\n+      if (ASM_VOLATILE_P (t))\n+\tdump_string (di, \"volatile\");\n+      dump_child (\"strg\", ASM_STRING (t));\n+      dump_child (\"outs\", ASM_OUTPUTS (t));\n+      dump_child (\"ins\", ASM_INPUTS (t));\n+      dump_child (\"clbr\", ASM_CLOBBERS (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case BREAK_STMT:\n+    case CONTINUE_STMT:\n+      dump_stmt (di, t);\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case CASE_LABEL:\n+      /* Note that a case label is not like other statements; there is\n+\t no way to get the line-number of a case label.  */\n+      dump_child (\"low\", CASE_LOW (t));\n+      dump_child (\"high\", CASE_HIGH (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case CLEANUP_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"decl\", CLEANUP_DECL (t));\n+      dump_child (\"expr\", CLEANUP_EXPR (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case COMPOUND_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"body\", COMPOUND_BODY (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case DECL_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"decl\", DECL_STMT_DECL (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case DO_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"body\", DO_BODY (t));\n+      dump_child (\"cond\", DO_COND (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case EXPR_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"expr\", EXPR_STMT_EXPR (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case FOR_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"init\", FOR_INIT_STMT (t));\n+      dump_child (\"cond\", FOR_COND (t));\n+      dump_child (\"expr\", FOR_EXPR (t));\n+      dump_child (\"body\", FOR_BODY (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case GOTO_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"dest\", GOTO_DESTINATION (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case IF_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"cond\", IF_COND (t));\n+      dump_child (\"then\", THEN_CLAUSE (t));\n+      dump_child (\"else\", ELSE_CLAUSE (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case LABEL_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"labl\", LABEL_STMT_LABEL (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case RETURN_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"expr\", RETURN_EXPR (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case SWITCH_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"cond\", SWITCH_COND (t));\n+      dump_child (\"body\", SWITCH_BODY (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case WHILE_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"cond\", WHILE_COND (t));\n+      dump_child (\"body\", WHILE_BODY (t));\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case SCOPE_STMT:\n+      dump_stmt (di, t);\n+      if (SCOPE_BEGIN_P (t))\n+\tdump_string (di, \"begn\");\n+      else\n+\tdump_string (di, \"end\");\n+      if (SCOPE_NULLIFIED_P (t))\n+\tdump_string (di, \"null\");\n+      if (!SCOPE_NO_CLEANUPS_P (t))\n+\tdump_string (di, \"clnp\");\n+      dump_next_stmt (di, t);\n+      break;\n+\n+    case STMT_EXPR:\n+      dump_child (\"stmt\", STMT_EXPR_STMT (t));\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "346e2aa3e06cd517ad7adf372a065fe73447b0a6", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -95,6 +95,8 @@ static void c_init_options PARAMS ((void));\n #undef LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   c_convert_parm_for_inlining\n+#undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n+#define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN c_dump_tree\n \n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode"}, {"sha": "bd9af440946e35c3dd6796896432ce7380bc2d72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -1,3 +1,8 @@\n+2002-07-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* dump.c (cp_dump_tree): Call c_dump_tree.\n+\t* Make-lang.in (CXX_C_OBJS): Add c-dump.o.\n+\n 2002-07-25  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* error.c (print_whitespace): Remove."}, {"sha": "44966f4c46a15b65310361be09708da5ed28513f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -96,7 +96,7 @@ $(DEMANGLER_PROG): cxxmain.o underscore.o $(LIBDEPS)\n # The compiler itself.\n # Shared with C front end:\n CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n- $(CXX_TARGET_OBJS)\n+\tc-dump.o $(CXX_TARGET_OBJS)\n \n # Language-specific object files.\n CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\"}, {"sha": "0b404a1bab3c5a181bea47583380d0763f6ee964", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -48,8 +48,7 @@ dump_access (di, t)\n }\n \n /* Dump a representation of the specific operator for an overloaded\n-   operator associated with node t.\n-*/\n+   operator associated with node t.  */\n \n static void\n dump_op (di, t)\n@@ -413,6 +412,5 @@ cp_dump_tree (dump_info, t)\n       break;\n     }\n \n-  return 0;\n+  return c_dump_tree (di, t);\n }\n-"}, {"sha": "5348c2d1be322c05abb089af9aed362b9d850dfc", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ee214f31ef39421944b6c78cf3218b61c1337/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=558ee214f31ef39421944b6c78cf3218b61c1337", "patch": "@@ -22,7 +22,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n-#include \"c-tree.h\"\n #include \"splay-tree.h\"\n #include \"diagnostic.h\"\n #include \"toplev.h\"\n@@ -225,26 +224,6 @@ dump_string_field (di, field, string)\n     di->column += 14;\n }\n \n-/* Dump information common to statements from STMT.  */\n-\n-void\n-dump_stmt (di, t)\n-     dump_info_p di;\n-     tree t;\n-{\n-  dump_int (di, \"line\", STMT_LINENO (t));\n-}\n-\n-/* Dump the next statement after STMT.  */\n-\n-void\n-dump_next_stmt (di, t)\n-     dump_info_p di;\n-     tree t;\n-{\n-  dump_child (\"next\", TREE_CHAIN (t));\n-}\n-\n /* Dump the next node in the queue.  */\n \n static void\n@@ -497,8 +476,6 @@ dequeue_and_dump (di)\n \n       if (TREE_CODE (t) == FIELD_DECL)\n \t{\n-\t  if (DECL_C_BIT_FIELD (t))\n-\t    dump_string (di, \"bitfield\");\n \t  if (DECL_FIELD_OFFSET (t))\n \t    dump_child (\"bpos\", bit_position (t));\n \t}\n@@ -523,125 +500,6 @@ dequeue_and_dump (di)\n \tdump_child (\"body\", DECL_SAVED_TREE (t));\n       break;\n \n-    case ASM_STMT:\n-      dump_stmt (di, t);\n-      if (ASM_VOLATILE_P (t))\n-\tdump_string (di, \"volatile\");\n-      dump_child (\"strg\", ASM_STRING (t));\n-      dump_child (\"outs\", ASM_OUTPUTS (t));\n-      dump_child (\"ins\", ASM_INPUTS (t));\n-      dump_child (\"clbr\", ASM_CLOBBERS (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case BREAK_STMT:\n-    case CONTINUE_STMT:\n-      dump_stmt (di, t);\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case CASE_LABEL:\n-      /* Note that a case label is not like other statements; there is\n-\t no way to get the line-number of a case label.  */\n-      dump_child (\"low\", CASE_LOW (t));\n-      dump_child (\"high\", CASE_HIGH (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case CLEANUP_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"decl\", CLEANUP_DECL (t));\n-      dump_child (\"expr\", CLEANUP_EXPR (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case COMPOUND_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"body\", COMPOUND_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case DECL_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"decl\", DECL_STMT_DECL (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case DO_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"body\", DO_BODY (t));\n-      dump_child (\"cond\", DO_COND (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case EXPR_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"expr\", EXPR_STMT_EXPR (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case FOR_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"init\", FOR_INIT_STMT (t));\n-      dump_child (\"cond\", FOR_COND (t));\n-      dump_child (\"expr\", FOR_EXPR (t));\n-      dump_child (\"body\", FOR_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case GOTO_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"dest\", GOTO_DESTINATION (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case IF_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"cond\", IF_COND (t));\n-      dump_child (\"then\", THEN_CLAUSE (t));\n-      dump_child (\"else\", ELSE_CLAUSE (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case LABEL_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"labl\", LABEL_STMT_LABEL (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case RETURN_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"expr\", RETURN_EXPR (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case SWITCH_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"cond\", SWITCH_COND (t));\n-      dump_child (\"body\", SWITCH_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case WHILE_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"cond\", WHILE_COND (t));\n-      dump_child (\"body\", WHILE_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case SCOPE_STMT:\n-      dump_stmt (di, t);\n-      if (SCOPE_BEGIN_P (t))\n-\tdump_string (di, \"begn\");\n-      else\n-\tdump_string (di, \"end\");\n-      if (SCOPE_NULLIFIED_P (t))\n-\tdump_string (di, \"null\");\n-      if (!SCOPE_NO_CLEANUPS_P (t))\n-\tdump_string (di, \"clnp\");\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case INTEGER_CST:\n       if (TREE_INT_CST_HIGH (t))\n \tdump_int (di, \"high\", TREE_INT_CST_HIGH (t));\n@@ -693,10 +551,6 @@ dequeue_and_dump (di)\n       dump_child (\"elts\", TREE_OPERAND (t, 1));\n       break;\n \n-    case STMT_EXPR:\n-      dump_child (\"stmt\", STMT_EXPR_STMT (t));\n-      break;\n-\n     case BIND_EXPR:\n       dump_child (\"vars\", TREE_OPERAND (t, 0));\n       dump_child (\"body\", TREE_OPERAND (t, 1));"}]}