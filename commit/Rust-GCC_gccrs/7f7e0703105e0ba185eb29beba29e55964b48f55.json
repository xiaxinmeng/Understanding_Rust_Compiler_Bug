{"sha": "7f7e0703105e0ba185eb29beba29e55964b48f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3ZTA3MDMxMDVlMGJhMTg1ZWIyOWJlYmEyOWU1NTk2NGI0OGY1NQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2004-09-08T18:25:01Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2004-09-08T18:25:01Z"}, "message": "tree-if-conv.c (find_phi_replacement_condition): Return true edge block.\n\n        * tree-if-conv.c (find_phi_replacement_condition): Return true edge block.\n        (replace_phi_with_cond_modify_expr): Select conditional expr args based on\n        true edge basic block.\n\nFrom-SVN: r87194", "tree": {"sha": "5cfc3a71e600025c3a8c8f119a5b0f1e54281ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cfc3a71e600025c3a8c8f119a5b0f1e54281ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7e0703105e0ba185eb29beba29e55964b48f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7e0703105e0ba185eb29beba29e55964b48f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7e0703105e0ba185eb29beba29e55964b48f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7e0703105e0ba185eb29beba29e55964b48f55/comments", "author": null, "committer": null, "parents": [{"sha": "ed7f7d851c0d1cbf6b96ddb82f654f82cb1478a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7f7d851c0d1cbf6b96ddb82f654f82cb1478a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7f7d851c0d1cbf6b96ddb82f654f82cb1478a2"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "3108964bfa2a1a43a4b94063313d8feaba92c4ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7e0703105e0ba185eb29beba29e55964b48f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7e0703105e0ba185eb29beba29e55964b48f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f7e0703105e0ba185eb29beba29e55964b48f55", "patch": "@@ -1,3 +1,9 @@\n+2004-09-08  Devang Patel  <dpatel@apple.com>\n+\n+\t* tree-if-conv.c (find_phi_replacement_condition): Return true edge block.\n+\t(replace_phi_with_cond_modify_expr): Select conditional expr args based on\n+\ttrue edge basic block.\n+\t\n 2004-09-08  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-operands.c (add_stmt_operand): Use V_MUST_DEF even for"}, {"sha": "1e2fd76e3a9757d17df0ccba22a6877249885faa", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7e0703105e0ba185eb29beba29e55964b48f55/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7e0703105e0ba185eb29beba29e55964b48f55/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=7f7e0703105e0ba185eb29beba29e55964b48f55", "patch": "@@ -117,9 +117,9 @@ static void add_to_predicate_list (basic_block, tree);\n static tree add_to_dst_predicate_list (struct loop * loop, tree, tree, tree,\n \t\t\t\t       block_stmt_iterator *);\n static void clean_predicate_lists (struct loop *loop);\n-static bool find_phi_replacement_condition (basic_block, tree *,\n-                                            block_stmt_iterator *);\n-static void replace_phi_with_cond_modify_expr (tree, tree, bool,\n+static basic_block find_phi_replacement_condition (basic_block, tree *,\n+\t\t\t\t\t\t   block_stmt_iterator *);\n+static void replace_phi_with_cond_modify_expr (tree, tree, basic_block,\n                                                block_stmt_iterator *);\n static void process_phi_nodes (struct loop *);\n static void combine_blocks (struct loop *);\n@@ -671,17 +671,17 @@ clean_predicate_lists (struct loop *loop)\n }\n \n /* Basic block BB has two predecessors. Using predecessor's aux field, set\n-   appropriate condition COND for the PHI node replacement. Return true if\n-   phi arguments are condition is selected from second predecessor.  */\n+   appropriate condition COND for the PHI node replacement. Return true block\n+   whose phi arguments are selected when cond is true.  */\n \n-static bool\n+static basic_block\n find_phi_replacement_condition (basic_block bb, tree *cond,\n                                 block_stmt_iterator *bsi)\n {\n   edge e;\n   basic_block p1 = NULL;\n   basic_block p2 = NULL;\n-  bool switch_args = false;\n+  basic_block true_bb = NULL; \n   tree tmp_cond;\n \n   for (e = bb->pred; e; e = e->pred_next)\n@@ -700,12 +700,12 @@ find_phi_replacement_condition (basic_block bb, tree *cond,\n   if (TREE_CODE (tmp_cond) == TRUTH_NOT_EXPR)\n     {\n       *cond  = p2->aux;\n-      switch_args = true;\n+      true_bb = p2;\n     }\n   else\n     {\n       *cond  = p1->aux;\n-      switch_args = false;\n+      true_bb = p1;\n     }\n \n   /* Create temp. for the condition. Vectorizer prefers to have gimple\n@@ -727,7 +727,7 @@ find_phi_replacement_condition (basic_block bb, tree *cond,\n     abort ();\n #endif\n \n-  return switch_args;\n+  return true_bb;\n }\n \n \n@@ -738,18 +738,18 @@ find_phi_replacement_condition (basic_block bb, tree *cond,\n    is converted into,\n      S2: A = cond ? x1 : x2;\n    S2 is inserted at the top of basic block's statement list.\n-   PHI arguments are switched if SWITCH_ARGS is true.\n+   When COND is true, phi arg from TRUE_BB is selected.\n */\n \n static void\n-replace_phi_with_cond_modify_expr (tree phi, tree cond, bool switch_args,\n+replace_phi_with_cond_modify_expr (tree phi, tree cond, basic_block true_bb,\n                                    block_stmt_iterator *bsi)\n {\n   tree new_stmt;\n   basic_block bb;\n   tree rhs;\n   tree arg_0, arg_1;\n-\n+  \n #ifdef ENABLE_CHECKING\n   if (TREE_CODE (phi) != PHI_NODE)\n     abort ();\n@@ -767,7 +767,7 @@ replace_phi_with_cond_modify_expr (tree phi, tree cond, bool switch_args,\n   arg_1 = NULL_TREE;\n \n   /* Use condition that is not TRUTH_NOT_EXPR in conditional modify expr.  */\n-  if (switch_args)\n+  if (PHI_ARG_EDGE(phi, 1)->src == true_bb)\n     {\n       arg_0 = PHI_ARG_DEF (phi, 1);\n       arg_1 = PHI_ARG_DEF (phi, 0);\n@@ -820,7 +820,7 @@ process_phi_nodes (struct loop *loop)\n     {\n       tree phi, cond;\n       block_stmt_iterator bsi;\n-      bool switch_args = false;\n+      basic_block true_bb = NULL;\n       bb = ifc_bbs[i];\n \n       if (bb == loop->header || bb == loop->latch)\n@@ -832,12 +832,12 @@ process_phi_nodes (struct loop *loop)\n       /* BB has two predecessors. Using predecessor's aux field, set\n \t appropriate condition for the PHI node replacement.  */\n       if (phi)\n-\tswitch_args = find_phi_replacement_condition (bb, &cond, &bsi);\n+\ttrue_bb = find_phi_replacement_condition (bb, &cond, &bsi);\n \n       while (phi)\n \t{\n \t  tree next = TREE_CHAIN (phi);\n-\t  replace_phi_with_cond_modify_expr (phi, cond, switch_args, &bsi);\n+\t  replace_phi_with_cond_modify_expr (phi, cond, true_bb, &bsi);\n \t  release_phi_node (phi);\n \t  phi = next;\n \t}"}]}