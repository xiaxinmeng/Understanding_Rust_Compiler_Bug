{"sha": "62d87a321b29f9febdacc6220367021d98db3057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkODdhMzIxYjI5ZjlmZWJkYWNjNjIyMDM2NzAyMWQ5OGRiMzA1Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-08T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-08T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "d8763feb89aa1e2163a1ec51de99b0fe2be6dd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8763feb89aa1e2163a1ec51de99b0fe2be6dd8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d87a321b29f9febdacc6220367021d98db3057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d87a321b29f9febdacc6220367021d98db3057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d87a321b29f9febdacc6220367021d98db3057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d87a321b29f9febdacc6220367021d98db3057/comments", "author": null, "committer": null, "parents": [{"sha": "292da5c58da8fe60395c4b7569a0e828c800ded5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292da5c58da8fe60395c4b7569a0e828c800ded5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292da5c58da8fe60395c4b7569a0e828c800ded5"}], "stats": {"total": 746, "additions": 745, "deletions": 1}, "files": [{"sha": "121e02741f2f240ddf6f1d30d92cc5d12d5f5b24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,115 @@\n+2021-05-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tRevert:\n+\t2021-05-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_scalar_mode_supported_p): Disable TImode.\n+\n+2021-05-07  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andrew Stubbs  <amd@codesourcery.com>\n+\n+\tPR target/100418\n+\t* builtins.c (try_store_by_multiple_pieces): Use force_operand for\n+\temit_move_insn operands.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Do not inherit a current\n+\tlocation for the outgoing edges of an empty block.\n+\t* dwarf2out.c (add_subscript_info): Retrieve the bounds and index\n+\ttype by means of the get_array_descr_info langhook, if it is set and\n+\treturns true.  Remove obsolete code dealing with unnamed subtypes.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ssa_block_ranges): Virtualize.\n+\t(sbr_vector): Renamed from ssa_block_cache.\n+\t(sbr_vector::sbr_vector): Allocate from obstack abd initialize.\n+\t(ssa_block_ranges::~ssa_block_ranges): Remove.\n+\t(sbr_vector::set_bb_range): Use varying and undefined cached values.\n+\t(ssa_block_ranges::set_bb_varying): Remove.\n+\t(sbr_vector::get_bb_range): Adjust assert.\n+\t(sbr_vector::bb_range_p): Adjust assert.\n+\t(~block_range_cache): No freeing loop required.\n+\t(block_range_cache::get_block_ranges): Remove.\n+\t(block_range_cache::set_bb_range): Inline get_block_ranges.\n+\t(block_range_cache::set_bb_varying): Remove.\n+\t* gimple-range-cache.h (set_bb_varying): Remove prototype.\n+\t* value-range.h (irange_allocator::get_memory): New.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::non_null_deref_p): Search\n+\tdominator tree is available and requested.\n+\t(ranger_cache::ssa_range_in_bb): Don't search dom tree here.\n+\t(ranger_cache::fill_block_cache): Don't search dom tree here either.\n+\t* gimple-range-cache.h (non_null_deref_p): Add dom_search param.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::range_on_exit): Handle block with\n+\tonly PHI nodes better.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-edge.h (gimple_outgoing_range): Rename from\n+\toutgoing_range.\n+\t(gcond_edge_range): Export prototype.\n+\t* gimple-range-edge.cc (gcond_edge_range): New.\n+\t(gimple_outgoing_range::edge_range_p): Use gcond_edge_range.\n+\t* gimple-range-gori.h (gori_compute): Use gimple_outgoing_range.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-edge.cc (outgoing_range::calc_switch_ranges): Compute\n+\tdefault range into a temp and allocate only what is needed.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_trunc_mod::wi_fold): x % 0 is UNDEFINED.\n+\n+2021-05-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.h (gimple_range_global): Pick up parameter initial\n+\tvalues, and use-before defined locals are UNDEFINED.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/extend.texi (scalar_storage_order): Mention effect on pointer\n+\tand vector fields.\n+\t* tree.h (reverse_storage_order_for_component_p): Return false if\n+\tthe type is a pointer.\n+\n+2021-05-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_scalar_mode_supported_p): Disable TImode.\n+\n+2021-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98218\n+\t* config/i386/i386-expand.c (ix86_expand_sse_movcc):\n+\tHandle V8QI, V4HI and V2SI modes.\n+\t* config/i386/mmx.md (mmx_pblendvb): New insn pattern.\n+\t* config/i386/sse.md (unspec): Move UNSPEC_BLENDV ...\n+\t* config/i386/i386.md (unspec): ... here.\n+\n+2021-05-07  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* omp-low.c (lower_rec_simd_input_clauses): Set max_vf = 1 if\n+\ta truth_value_p reduction variable is nonintegral.\n+\n+2021-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100445\n+\t* config/i386/i386-expand.c (ix86_use_mask_cmp_p):\n+\tReturn false for mode sizes < 16.\n+\n+2021-05-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100445\n+\t* config/i386/mmx.md (*xop_pcmov_<mode>): New define_insn.\n+\n 2021-05-06  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-sra.c (ipa_sra_dump_all_summaries): Dump edge summaries even"}, {"sha": "81f0a6bd0c26e350b260264ff789198e1fb4389c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1 +1 @@\n-20210507\n+20210508"}, {"sha": "0b25439ffa9588148b9cf78aad13058d7159fffd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 537, "deletions": 0, "changes": 537, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,540 @@\n+2021-05-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo-utils.adb (Is_Access_Object_Type): Use\n+\tDirectly_Designated_Type.\n+\t(Is_Access_Subprogram_Type): Use Directly_Designated_Type.\n+\t(Set_Convention): Use plain Ekind.\n+\t* gen_il-gen-gen_entities.adb (Type_Kind): Use plain Ekind.\n+\t* sem_ch3.adb (Access_Type_Declaration): When seeing an illegal\n+\tcompletion with an access type don't attempt to decorate the\n+\tcompletion entity; previously the entity had its Ekind set to\n+\tE_General_Access_Type or E_Access_Type, but its Designated_Type\n+\twas empty, which caused a crash in freezing. (Actually, the\n+\terror recovery in the surrounding context is still incomplete,\n+\te.g. we will crash when the illegal completion is an access to\n+\tan unknown identifier).\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* par_sco.adb: Align with/use clauses.\n+\t(Traverse_Declarations_Or_Statements): Minor comment fix.\n+\t* aspects.adb, atree.adb, atree.ads, checks.adb, comperr.adb,\n+\tcontracts.adb, cstand.adb, debug_a.adb, einfo-utils.adb,\n+\terrout.adb, eval_fat.adb, exp_aggr.adb, expander.adb,\n+\texp_atag.adb, exp_attr.adb, exp_cg.adb, exp_ch11.adb,\n+\texp_ch12.adb, exp_ch13.adb, exp_ch2.adb, exp_ch3.adb,\n+\texp_ch4.adb, exp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_ch8.adb,\n+\texp_ch9.adb, exp_code.adb, exp_dbug.adb, exp_disp.adb,\n+\texp_dist.adb, exp_fixd.adb, exp_imgv.adb, exp_intr.adb,\n+\texp_pakd.adb, exp_prag.adb, exp_put_image.adb, exp_sel.adb,\n+\texp_smem.adb, exp_spark.adb, exp_strm.adb, exp_tss.adb,\n+\texp_unst.adb, exp_util.adb, exp_util.ads, freeze.adb,\n+\tfrontend.adb, ghost.adb, gnat1drv.adb, gnat_cuda.adb,\n+\timpunit.adb, inline.adb, itypes.adb, itypes.ads, layout.adb,\n+\tlib.adb, lib-load.adb, lib-writ.adb, lib-xref.adb,\n+\tlib-xref-spark_specific.adb, live.adb, nlists.adb, par.adb,\n+\tpar-ch11.adb, par-ch3.adb, par-ch5.adb, par-ch6.adb, pprint.adb,\n+\trepinfo.adb, restrict.adb, rtsfind.adb, scil_ll.adb, scn.adb,\n+\tsem.adb, sem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_case.adb,\n+\tsem_cat.adb, sem_ch10.adb, sem_ch11.adb, sem_ch12.adb,\n+\tsem_ch13.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_ch9.adb,\n+\tsem_dim.adb, sem_disp.adb, sem_dist.adb, sem_elab.adb,\n+\tsem_elim.adb, sem_eval.adb, sem_intr.adb, sem_mech.adb,\n+\tsem_prag.adb, sem_res.adb, sem_scil.adb, sem_smem.adb,\n+\tsem_type.adb, sem_util.adb, sem_util.ads, sem_warn.adb,\n+\tsinfo-cn.adb, sinfo-utils.ads, sinput.adb, sinput-l.adb,\n+\tsprint.adb, style.adb, styleg.adb, tbuild.adb, tbuild.ads,\n+\ttreepr.adb, uname.adb: Align with/use clauses.\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads, atree.adb, gen_il-gen.ads: Fix comments and clean\n+\tup ???  marks.  Rename Set_Ekind to be Mutate_Ekind.\n+\t* einfo.ads, sinfo.ads: Likewise.  Change \"definitive\n+\tdefinition\" to \"official definition\", because the former sounds\n+\tredundant.  Rename Set_Ekind to be Mutate_Ekind.\n+\t* checks.adb, contracts.adb, cstand.adb, exp_aggr.adb,\n+\texp_attr.adb, exp_ch11.adb, exp_ch3.adb, exp_ch5.adb,\n+\texp_ch6.adb, exp_ch7.adb, exp_ch9.adb, exp_disp.adb,\n+\texp_dist.adb, exp_imgv.adb, exp_intr.adb, exp_prag.adb,\n+\texp_unst.adb, exp_util.adb, gen_il-gen.adb, inline.adb,\n+\tlib-writ.adb, lib-xref-spark_specific.adb, sem_aggr.adb,\n+\tsem_ch10.adb, sem_ch11.adb, sem_ch12.adb, sem_ch13.adb,\n+\tsem_ch3.adb, sem_ch5.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb,\n+\tsem_ch9.adb, sem_dist.adb, sem_elab.adb, sem_prag.adb,\n+\tsem_util.adb: Rename Set_Ekind to be Mutate_Ekind.\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.adb: Move nnd-related code from here, and leave a\n+\tcomment pointing to sinfo-utils.adb.\n+\t* sinfo-utils.ads, sinfo-utils.adb: Move nnd-related code to\n+\there.\n+\n+2021-05-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.ads: Move Corresponding_Protected_Entry...\n+\t* sinfo.ads: ... here.\n+\t* exp_ch9.adb (Build_Entry_Body): Link procedure and entry\n+\tbodies.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Add\n+\tCorresponding_Entry_Body field to nodes; remove\n+\tCorresponding_Protected_Entry field from entities.\n+\t* gen_il-gen-gen_entities.adb (Gen_Entities): Remove\n+\tCorresponding_Protected_Entry field from E_Void and\n+\tE_Subprogram_Body.\n+\t* gen_il-gen-gen_nodes.adb (Gen_Nodes): Add\n+\tCorresponding_Entry_Body field to N_Subprogram_Body.\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): Remove\n+\tmanipulation of Ekind and Corresponding_Protected_Entry added as\n+\tpart of the support for varsize-nodes.\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Incomplete_Dependents): Reset\n+\tPrivate_Dependents field to zero before calling Set_Ekind.  Also\n+\tmove Set_Etype to after Set_Ekind, because it's always best to\n+\tset the Ekind as early as possible.\n+\t* atree.adb: Improve debugging facilities for vanishing fields.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.ads (Slot): Change to modular type.\n+\t(Slot_1_Bit): Delete.\n+\t(Slot_2_Bit): Likewise.\n+\t(Slot_4_Bit): Likewise.\n+\t(Slot_8_Bit): Likewise.\n+\t(Slot_32_Bit): Likewise.\n+\t* atree.adb (Get_1_Bit_Val): Adjust to above change.\n+\t(Get_2_Bit_Val): Likewise.\n+\t(Get_4_Bit_Val): Likewise.\n+\t(Get_8_Bit_Val): Likewise.\n+\t(Get_32_Bit_Val): Likewise.\n+\t(Set_1_Bit_Val): Likewise.\n+\t(Set_2_Bit_Val): Likewise.\n+\t(Set_4_Bit_Val): Likewise.\n+\t(Set_8_Bit_Val): Likewise.\n+\t(Set_32_Bit_Val): Likewise.\n+\t(Print_Atree_Info): Likewise.\n+\t(Zero): Likewise.\n+\t* atree.h (Get_1_Bit_Field): Likewise.\n+\t(Get_2_Bit_Field): Likewise.\n+\t(Get_4_Bit_Field): Likewise.\n+\t(Get_8_Bit_Field): Likewise.\n+\t(Get_32_Bit_Field): Likewise.\n+\t(Get_32_Bit_Field_With_Default): Likewise.\n+\t* types.h (slot_1_bit): Delete.\n+\t(slot_2_bit): Likewise.\n+\t(slot_4_bit): Likewise.\n+\t(slot_8_bit): Likewise.\n+\t(slot_32_bit): Likewise.\n+\t(any_slot): Change to unsigned int.\n+\t(Slot_Size): New macro.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (enum standard_datatype): Remove\n+\tADT_exception_data_name_id and add ADT_not_handled_by_others_name_id.\n+\t(exception_data_name_id): Delete.\n+\t(not_handled_by_others_name_id): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Exception>: Remove old\n+\tkludge for exceptions.\n+\t<E_Record_Type>: Likewise.\n+\t(gnat_to_gnu_field): Force character type on Not_Handled_By_Others.\n+\t* gcc-interface/misc.c (gnat_argv): Change type to char **.\n+\t(gnat_init_options): Adjust accordingly.\n+\t* gcc-interface/trans.c (gigi): Set not_handled_by_others_name_id\n+\tand use it to set not_handled_by_others_decl.\n+\t(Exception_Handler_to_gnu_fe_sjlj): Fix indentation.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* raise-gcc.c (__gnat_others_value): Remove const qualifier.\n+\t(__gnat_all_others_value): Likewise.\n+\t(__gnat_unhandled_others_value): Likewise.\n+\t(GNAT_OTHERS): Cast to Exception_Id instead of _Unwind_Ptr.\n+\t(GNAT_ALL_OTHERS): Likewise.\n+\t(GNAT_UNHANDLED_OTHERS): Likewise.\n+\t(Is_Handled_By_Others): Change parameter type to Exception_Id.\n+\t(Language_For): Likewise.\n+\t(Foreign_Data_For): Likewise.\n+\t(is_handled_by): Likewise.  Adjust throughout, remove redundant\n+\tline and fix indentation.\n+\t* libgnat/a-exexpr.adb (Is_Handled_By_Others): Remove pragma and\n+\tuseless qualification from parameter type.\n+\t(Foreign_Data_For): Likewise.\n+\t(Language_For): Likewise.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-stalib.ads (Exception_Data): Mark components as aliased.\n+\t* stand.ads (Standard_Entity_Type): Enhance comments.\n+\t* cstand.adb (Make_Component): Rename into...\n+\t(Make_Aliased_Component): ...this; set Is_Aliased and Is_Independent\n+\tflags on the component.\n+\t(Create_Standard): Adjust the types of the component of the record\n+\tStandard_Exception_Type and mark them as aliased.\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): Use OK\n+\tconversion to Standard_Address for Full_Name component, except\n+\tin CodePeer_Mode (set it to 0).\n+\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Likewise.\n+\t* raise.h (struct Exception_Data): Change the type of Full_Name,\n+\tHTable_Ptr and Foreign_Data.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.h (Slots_Ptr): Change pointed-to type to any_slot.\n+\t* fe.h (Get_RT_Exception_Name): Change type of parameter.\n+\t* namet.ads (Name_Entry): Mark non-boolean components as aliased,\n+\treorder the boolean components and add an explicit Spare component.\n+\t* namet.adb (Name_Enter): Adjust aggregate accordingly.\n+\t(Name_Find): Likewise.\n+\t(Reinitialize): Likewise.\n+\t* namet.h (struct Name_Entry): Adjust accordingly.\n+\t(Names_Ptr): Use correct type.\n+\t(Name_Chars_Ptr): Likewise.\n+\t(Get_Name_String): Fix declaration and adjust to above changes.\n+\t* types.ads (RT_Exception_Code): Add pragma Convention C.\n+\t* types.h (Column_Number_Type): Fix original type.\n+\t(slot): Rename union type to...\n+\t(any_slot): ...this and adjust assertion accordingly.\n+\t(RT_Exception_Code): New enumeration type.\n+\t* uintp.ads (Uint_Entry): Mark components as aliased.\n+\t* uintp.h (Uints_Ptr):  Use correct type.\n+\t(Udigits_Ptr): Likewise.\n+\t* gcc-interface/gigi.h (gigi): Adjust name and type of parameter.\n+\t* gcc-interface/cuintp.c (UI_To_gnu): Adjust references to Uints_Ptr\n+\tand Udigits_Ptr.\n+\t* gcc-interface/trans.c (Slots_Ptr): Adjust pointed-to type.\n+\t(gigi): Adjust type of parameter.\n+\t(build_raise_check): Add cast in call to Get_RT_Exception_Name.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c (__gnat_raise_program_error): Fix parameter type.\n+\t(Raise_From_Signal_Handler): Likewise and mark as no-return.\n+\t* raise-gcc.c (__gnat_others_value): Fix type.\n+\t(__gnat_all_others_value): Likewise.\n+\t(__gnat_unhandled_others_value): Likewise.\n+\t* seh_init.c (Raise_From_Signal_Handler): Fix parameter type.\n+\t* libgnat/a-except.ads (Raise_From_Signal_Handler): Use convention C\n+\tand new symbol name, move declaration to...\n+\t(Raise_From_Controlled_Operation): Minor tweak.\n+\t* libgnat/a-except.adb (Raise_From_Signal_Handler): ...here.\n+\t* libgnat/a-exexpr.adb (bool): New C compatible boolean type.\n+\t(Is_Handled_By_Others): Use it as return type for the function.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* errout.ads (Set_Identifier_Casing): Add pragma Convention C.\n+\t* eval_fat.ads (Rounding_Mode): Likewise.\n+\t(Machine): Add WARNING comment line.\n+\t* exp_code.ads (Clobber_Get_Next): Add pragma Convention C.\n+\t* fe.h (Compiler_Abort): Fix return type.\n+\t(Set_Identifier_Casing): Change type of parameters.\n+\t(Clobber_Get_Next): Change return type.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Code_Statement>: Add cast.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.h (Parent): Remove duplicate declaration.\n+\t(Get_1_Bit_Field): Also use INLINE specifier in the declaration,\n+\tfix formatting and use gcc_unreachable for the default case.\n+\t(Get_2_Bit_Field): Likewise.\n+\t(Get_4_Bit_Field): Likewise.\n+\t(Get_8_Bit_Field): Likewise.\n+\t(Get_32_Bit_Field): Likewise.\n+\t(Get_32_Bit_Field_With_Default): Likewise.\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads, atree.adb: Major rewrite to support variable-sized\n+\tnode types. Add pragmas Suppress and Assertion_Policy.  We now\n+\thave an extra level of indirection: Node_Offsets is a table\n+\tmapping Node_Ids to the offset of the start of each node in\n+\tSlots. Slots is a table containing one or more contiguous slots\n+\tfor each node. Each slot is a 32-bit unchecked union that can\n+\tcontain any mixture of 1, 2, 4, 8, and 32-bit fields that fits.\n+\tThe old low-level getters and setters (e.g.  Flag123) are\n+\tremoved.\n+\t* gen_il-fields.ads, gen_il-gen-gen_entities.adb,\n+\tgen_il-gen-gen_nodes.adb, gen_il-gen.adb, gen_il-gen.ads,\n+\tgen_il-main.adb, gen_il-types.ads, gen_il-utils.adb,\n+\tgen_il-utils.ads, gen_il.adb, gen_il.ads: New gen_il program\n+\tthat generates various Ada and C++ files. In particular, the\n+\tfollowing files are generated by gen_il: einfo-entities.adb\n+\teinfo-entities.ads, gnatvsn.ads, nmake.adb, nmake.ads,\n+\tseinfo.ads, seinfo_tables.adb, seinfo_tables.ads,\n+\tsinfo-nodes.adb, sinfo-nodes.ads, einfo.h, and sinfo.h.\n+\t* sinfo-utils.adb, sinfo-utils.ads, einfo-utils.adb,\n+\teinfo-utils.ads: New files containing code that needs to refer\n+\tto Sinfo.Nodes and Einfo.Entities. This code is mostly moved\n+\there from Sinfo and Einfo to break cycles.\n+\t* back_end.adb: Pass node_offsets_ptr and slots_ptr to gigi,\n+\tinstead of nodes_ptr and flags_ptr. The Nodes and Flags tables\n+\tno longer exist. (Note that gigi never used the Flags table.)\n+\t* sinfo-cn.ads (Change_Identifier_To_Defining_Identifier,\n+\tChange_Character_Literal_To_Defining_Character_Literal,\n+\tChange_Operator_Symbol_To_Defining_Operator_Symbol): Turn N into\n+\tan IN formal.\n+\t* sinfo-cn.adb: Update.  Add assertions, which can be removed at\n+\tsome point.  Rewrite to use higher-level facilities.  Make sure\n+\tvanishing fields are zeroed out.  Add with/use for new packages.\n+\t* sem_util.adb: Remove \"Assert(False)\" immediately followed by\n+\t\"raise Program_Error\".  Use higher-level facilities such as\n+\tWalk_Sinfo_Fields instead of depending on low-level Set_FieldN\n+\troutines that no longer exist. Use Get_Comes_From_Source_Default\n+\tinstead of Default_Node.Comes_From_Source (Default_Node no\n+\tlonger exists).  Use Set_Basic_Convention instead of\n+\tBasic_Set_Convention.  Add with/use for new packages.\n+\t* sem_util.ads: The Convention field had getter Convention and\n+\tsetter Basic_Set_Convention. Make that more uniform: there is\n+\tnow a field called Basic_Convention, with Basic_Convention and\n+\tSet_Basic_Convention as getter/setter, and write Convention and\n+\tSet_Convention here.\n+\t* nlists.adb: Rewrite to use abstractions, rather then depending\n+\ton low-level implementation details of Atree. Necessary because\n+\tthose details have changed. Add with/use for new packages.\n+\t* sem_ch12.adb: Use higher-level facilities such as\n+\tWalk_Sinfo_Fields instead of depending on low-level Set_FieldN\n+\troutines that no longer exist. Add with/use for new packages.\n+\t* exp_cg.adb, sem_ch10.adb, sem_ch4.adb, sem_eval.adb,\n+\tsem_prag.adb, sem_warn.adb: Change expanded names to refer to\n+\tthe new packages for things that moved. Add with/use for new\n+\tpackages.\n+\t* sem_ch3.adb: Likewise. Reinitialize vanishing fields.\n+\t* exp_disp.adb: Likewise. Remove failing assertion.\n+\t* sinfo.ads, einfo.ads: Remove code that is now generated into\n+\tSinfo.Nodes and Einfo.Entities.\n+\t* sinfo.adb, einfo.adb: Replace bodies with \"pragma No_Body;\".\n+\tWe should delete these at some point, but No_Body makes make\n+\tfiles easier. Some code is moved to Sinfo.Nodes, Einfo.Entities,\n+\tSinfo.Utils, and Einfo.Utils. Some is no longer necessary.\n+\t* treepr.adb: Rewrite to use new tables. We no longer need\n+\ttreeprs.ads.\n+\t* treepr.ads: Add comment.\n+\t* types.ads: Move types Component_Alignment_Kind and\n+\tFloat_Rep_Kind here.\n+\t* atree.h: Major update to match atree.ads changes.  Add slot\n+\ttypes, for use by getters/setters.\n+\t* types.h: Move types Component_Alignment_Kind and\n+\tFloat_Rep_Kind here.\n+\t* fe.h: Rewrite to deal with code that has changed or moved from\n+\tAtree, Sinfo, Einfo.\n+\t* nlists.h: Move some code to fe.h.\n+\t* alloc.ads: Split Nodes_* constants into Node_Offsets and\n+\tSlots, because Atree has two separate tables.  Increase values.\n+\tRemove Nodes_Release_Threshold. Improve comment.\n+\t* debug.adb, gnat1drv.adb: Remove obsolete gnatd.A and gnatd.N\n+\tswitches.  Add with/use for new packages.\n+\t* opt.ads: Minor comment fix.\n+\t* aspects.adb, checks.adb, comperr.adb, contracts.adb,\n+\tcstand.adb, debug_a.adb, errout.adb, eval_fat.adb, exp_aggr.adb,\n+\texp_atag.adb, exp_attr.adb, exp_ch11.adb, exp_ch12.adb,\n+\texp_ch13.adb, exp_ch2.adb, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_ch8.adb, exp_ch9.adb,\n+\texp_code.adb, exp_dbug.adb, exp_dist.adb, exp_fixd.adb,\n+\texp_imgv.adb, exp_intr.adb, exp_pakd.adb, exp_prag.adb,\n+\texp_put_image.adb, exp_sel.adb, exp_smem.adb, exp_spark.adb,\n+\texp_strm.adb, exp_tss.adb, exp_unst.adb, exp_util.adb,\n+\texp_util.ads, expander.adb, freeze.adb, frontend.adb,\n+\tget_targ.ads, ghost.adb, gnat_cuda.adb, impunit.adb, inline.adb,\n+\titypes.adb, itypes.ads, layout.adb, lib.adb, lib-load.adb,\n+\tlib-writ.adb, lib-xref.adb, lib-xref.ads,\n+\tlib-xref-spark_specific.adb, live.adb, par.adb, par_sco.adb,\n+\tpprint.adb, repinfo.adb, restrict.adb, rtsfind.adb, scil_ll.adb,\n+\tscn.adb, sem.adb, sem.ads, sem_aggr.adb, sem_attr.adb,\n+\tsem_aux.adb, sem_case.adb, sem_cat.adb, sem_ch11.adb,\n+\tsem_ch13.adb, sem_ch2.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch7.adb, sem_ch8.adb, sem_ch9.adb, sem_dim.adb,\n+\tsem_disp.adb, sem_dist.adb, sem_elab.adb, sem_elim.adb,\n+\tsem_intr.adb, sem_mech.adb, sem_res.adb, sem_scil.adb,\n+\tsem_smem.adb, sem_type.adb, set_targ.ads, sinput.adb,\n+\tsinput-l.adb, sprint.adb, style.adb, styleg.adb, tbuild.adb,\n+\ttbuild.ads, uname.adb: Add with/use for new packages.\n+\t* libgnat/a-stoubu.adb, libgnat/a-stouut.adb: Simplify to ease\n+\tbootstrap.\n+\t* libgnat/a-stobfi.adb, libgnat/a-stoufi.adb (Create_File,\n+\tCreate_New_File): Create file in binary format, to avoid\n+\tintroducing unwanted text conversions on Windows. Simplify to\n+\tease bootstrap.\n+\t* libgnat/a-stteou__bootstrap.ads: New.\n+\t* ceinfo.adb, csinfo.adb, nmake.adt, treeprs.adt, xeinfo.adb,\n+\txnmake.adb, xsinfo.adb, xtreeprs.adb: Delete.\n+\t* Make-generated.in: Build and run the gen_il program to\n+\tgenerate files. The files are generated in the ada/gen_il\n+\tsubdirectory, and then moved up to ada.  We rely on gnatmake (as\n+\topposed to make) to build the gen_il program efficiently (i.e.\n+\tdon't do anything if the sources didn't change).\n+\t* gcc-interface/Makefile.in (ADAFLAGS): Add -gnatU.\n+\t(GNATMAKE_OBJS): Add new object files.\n+\t(GENERATED_FILES_FOR_TOOLS): New variable.\n+\t(../stamp-tools): Create a link for all\n+\tGENERATED_FILES_FOR_TOOLS.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add new object\n+\tfiles.  Remove ada/treeprs.o.\n+\t(GNATBIND_OBJS): Add new object files.\n+\t(ada.mostlyclean): Remove ada/sdefault.adb and add\n+\tada/stamp-gen_il.\n+\t(ada.maintainer-clean): Remove ada/treeprs.ads.\n+\t(update-sources): Remove obsolete target.\n+\t(ada_generated_files): Rename to...\n+\t(ADA_GENERATED_FILES): ... this.  Add new source files.  Add\n+\tcomment.\n+\t* gcc-interface/trans.c: Remove obsolete Nodes_Ptr and\n+\tFlags_ptr.  Add Node_Offsets_Ptr and Slots_Ptr, which point to\n+\tthe corresponding tables in Atree.\n+\t* gcc-interface/gigi.h (gigi): New parameters for initializing\n+\tNode_Offsets_Ptr and Slots_Ptr.\n+\t* gcc-interface/decl.c: Numeric_Kind,\n+\tDiscrete_Or_Fixed_Point_Kind, and Record_Kind were\n+\tnonhierarchical, and were therefore removed for simplicity.\n+\tReplace uses with calls to Is_In_... functions.\n+\n+2021-05-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Unconstrained_UU_In_Component_Declaration): A\n+\tcomponent declaration whose subtype indication is an entity name\n+\twithout an explicit constraint is an Unchecked_Union type only\n+\tif the entity has an unconstrained nominal subtype (record type\n+\tor private type) whose parent type is an Unchecked_Union.\n+\n+2021-05-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Object): Ignore prefixes of attribute\n+\tAddress.\n+\n+2021-05-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* opt.ads: Update comment for Warn_On_Suspicious_Modulus_Value.\n+\t* sem_res.adb (Resolve_Unary_Op): Generate warning.\n+\t* usage.adb: Refine doc for -gnatw.m/M switch.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tUpdate doc on -gnatw.m switch.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-05-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Object): Replace chained IF with a CASE;\n+\tremove repeated calls to Entity; do not traverse into\n+\tN_Identifier and N_Expanded_Name, because only need to examine\n+\ttheir Entity field anyway.\n+\n+2021-05-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Call): Remove call to End_Interp_List.\n+\t(Process_Overloaded_Indexed_Component): Remove call to\n+\tEnd_Interp_List.\n+\t* sem_util.adb (Insert_Explicit_Dereference): Remove call to\n+\tEnd_Interp_List.\n+\t* sem_type.ads (End_Interp_List): Remove.\n+\t* sem_type.adb (Add_Entry): The guard against duplicate entries\n+\tis now checked before other conditions, so that EXIT statements\n+\tdo not bypass this guard.\n+\t(End_Interp_List): Remove.\n+\n+2021-05-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Remove_Init_Call): If a simple initialization\n+\tcall is present, and the next statement is an initialization\n+\tblock (that contains a call to a Deep_ Initialize routine),\n+\tremove the block as well, and insert the first initialization\n+\tcall in it, in case it is needed for later relocation.\n+\n+2021-05-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* errout.ads (Size_Too_Small_Message): Remove low-value ???\n+\tcomment.\n+\t* exp_util.ads: Remove ??? in part of overall package comments\n+\tand restructure comment to clarify.\n+\t(Duplicate_Subexpr): Remove ??? comment that seems unnecessary.\n+\t* sem_ch3.ads (Analyze_Declarations): Remove two parenthesized\n+\t??? comments and add more description of the procedure's\n+\tactions.\n+\t(Get_Discriminant_Value): Remove ??? comment requesting more\n+\tdocumentation, expanding description of the function's actions.\n+\t* sem_disp.ads (Check_Operation_From_Incomplete_Type): Add more\n+\tsemantic description of the procedure and remove ??? comment\n+\trequesting such.\n+\t(Propagate_Tag): Refine comment to indicate meaning of formal\n+\tparameters and generally improve the spec comment (and remove\n+\t??? comment asking about the parameters).\n+\n+2021-05-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Fold_Shift): Fix computation of Shift_Left\n+\tresulting in negative signed values.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.ads (Defining_Entity): Remove Empty_On_Errors parameter.\n+\t(Defining_Entity_Or_Empty): New function.\n+\t* sem_util.adb (Defining_Entity): Move bulk of implementation to...\n+\t(Defining_Entity_Or_Empty): ...here.  Do not raise Program_Error.\n+\t(Innermost_Master_Scope_Depth): Call Defining_Entity_Or_Empty.\n+\n+2021-05-07  Justin Squirek  <squirek@adacore.com>\n+\n+\t* aspects.ads: Add entries to register\n+\tAspect_No_Controlled_Parts.\n+\t* freeze.adb (Check_No_Controlled_Parts_Violations): Added to\n+\tcheck requirements of aspect No_Controlled_Parts after a type\n+\thas been frozen.\n+\t(Freeze_Entity): Add call to\n+\tCheck_No_Controlled_Parts_Violations.\n+\t(Find_Aspect_No_Controlled_Parts): Created to obtain the aspect\n+\tspecification for No_Controlled_Parts on a given type when\n+\tpresent.\n+\t(Find_Aspect_No_Controlled_Parts_Value): Protect against invalid\n+\tvalue.\n+\t(Has_Aspect_No_Controlled_Parts): Created as a prediate function\n+\tto check if No_Controlled_Parts has been specified on a type for\n+\tGet_Anacestor_Types_With_Specification.\n+\t(Get_Aspect_No_Controlled_Parts_Value): Created to obtain the\n+\tvalue of the aspect No_Controlled_Parts when specified on a\n+\tgiven type.\n+\t(Get_Generic_Formal_Types_In_Hierarchy): Created to collect\n+\tformal types in a given type's hierarchy.\n+\t(Get_Types_With_Aspect_In_Hierarchy): Created to collect types\n+\tin a given type's hierarchy with No_Controlled_Parts specified.\n+\t* sem_ch13.adb (Analyze_One_Aspect): Add processing for\n+\tNo_Controlled_Parts, and fix error in check for allowed pragmas\n+\tfor formal types.\n+\t(Check_Expr_Is_OK_Static_Expression): Created to enforce\n+\tchecking of static expressions in the same vein as\n+\tAnalyze_Pragma.Check_Expr_OK_Static_Expression.\n+\t* sem_util.adb (Collect_Types_In_Hierarchy): Created to collect\n+\ttypes in a given type's hierarchy that match a given predicate\n+\tfunction.\n+\t* sem_util.ads: Fix typo.\n+\t* snames.ads-tmpl: Add entry for No_Controlled_Parts.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb (Scaling): Raise Constraint_Error in the\n+\toverflow case when T'Machine_Overflows is True.\n+\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-conhel.adb (TC_Check): Move the Assert into the\n+\t'if'.\n+\n+2021-05-07  Frederic Konrad  <konrad@adacore.com>\n+\n+\t* sigtramp-vxworks-target.inc: Use a local label for the TOC.\n+\n+2021-05-07  Claire Dross  <dross@adacore.com>\n+\n+\t* exp_ch4.adb (Has_Inferable_Discriminants): Moved to Sem_Util.\n+\t* sem_util.ads, sem_util.adb (Has_Inferable_Discriminants):\n+\tMoved from Exp_Ch4.\n+\n+2021-05-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Build_Class_Wide_Expression, Replace_Entity):\n+\tAdd guard to verify that the enclosing pragma is a precondition.\n+\n 2021-05-06  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_disp.adb (Build_Class_Wide_Check): Extending the"}, {"sha": "d5750cfa8a6b1a358d9c9a2b04257b1b8329abfc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,8 @@\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-typeck.c (build_unary_op) <ADDR_EXPR>: Do not issue an error\n+\ton the address of a pointer field in a record with reverse SSO.\n+\n 2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-typeck.c (c_finish_omp_clauses): Accept float + complex"}, {"sha": "8bbc030217e32649f011203d39aeb7ba32b2c7a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,22 @@\n+2021-05-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (rvalue): Assert expr is not a class lvalue.\n+\n+2021-05-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (build_stub_object): Declare.\n+\t* method.c (build_stub_object): No longer static.\n+\t* call.c (can_convert): Use it.\n+\t* tree.c (build_dummy_object): Adjust comment.\n+\t* typeck.c (cp_build_binary_op): Wrap SPACESHIP_EXPR in a\n+\tTARGET_EXPR.\n+\n+2021-05-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* coroutines.cc (build_co_await): Don't call 'rvalue'.\n+\t(flatten_await_stmt): Simplify initialization.\n+\t(morph_fn_to_coro): Change 'rvalue' to 'move'.  Simplify.\n+\n 2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* semantics.c (finish_omp_reduction_clause): Accept float + complex"}, {"sha": "80eb9a64b673b177c0520efcb3943355eed682b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,36 @@\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/debug18.adb: New test.\n+\n+2021-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/sso-12.c: New test.\n+\n+2021-05-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/coroutines/coro-bad-gro-00-class-gro-scalar-return.C:\n+\tAdjust diagnostic.\n+\n+2021-05-07  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR tree-optimization/79333\n+\t* gcc.dg/tree-ssa/ssa-fre-94.c: Require c99_runtime.\n+\n+2021-05-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/100450\n+\t* c-c++-common/gomp/pr100450.c: New test.\n+\n+2021-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100445\n+\t* gcc.target/i386/pr100445-1.c: New test.\n+\n+2021-05-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100445\n+\t* gcc.target/i386/pr100445.c: New test.\n+\n 2021-05-06  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c++/83873"}, {"sha": "d86a991732e01f4a72447e490d5d43d64d19378d", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,8 @@\n+2021-05-07  Bob Duff  <duff@adacore.com>\n+\n+\t* Makefile.in (GENERATED_FILES_FOR_TOOLS): New variable.\n+\t($(GCC_DIR)/stamp-tools): Walk it for the first copy operation.\n+\n 2018-11-19  Alexandre Oliva <oliva@adacore.com>\n \n \tPR ada/81878"}, {"sha": "e1275e6d3c867e4cfa1a72ece0ec8e9bc63a7384", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,8 @@\n+2021-05-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/100450\n+\t* lex.c (cpp_avoid_paste): Handle token1 CPP_PRAGMA like CPP_NAME.\n+\n 2021-05-06  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c++/83873"}, {"sha": "d9d88ca6c7d6b72ddf20bde17ad130fa8e213dc3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,10 @@\n+2021-05-07  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.c-c++-common/reduction-5.c: New test, testing\n+\tcomplex/floating-point || + && reduction with 'omp target'.\n+\t* testsuite/libgomp.c-c++-common/reduction-6.c: Likewise.\n+\n 2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.c-c++-common/reduction-1.c: New test."}, {"sha": "63236739c9529c5ed2e065fcde68293d12c690a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d87a321b29f9febdacc6220367021d98db3057/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d87a321b29f9febdacc6220367021d98db3057/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=62d87a321b29f9febdacc6220367021d98db3057", "patch": "@@ -1,3 +1,24 @@\n+2021-05-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/istream (__rvalue_stream_extraction_t): Replace\n+\tuse of __rval_streamable.\n+\t* include/std/ostream (__rvalue_stream_insertion_t): Likewise.\n+\t(__rval_streamable): Remove.\n+\t(_Require_derived_from_ios_base, __derived_from_ios_base): New\n+\thelper for checking constraints.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/4.cc: Fix\n+\treference to the wrong subclause of the standard.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/6.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/6.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/99692.cc:\n+\tNew test.\n+\t* testsuite/27_io/filesystem/path/io/dr2989.cc: Adjust pruned\n+\terrors.\n+\n 2021-05-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_algobase.h (__copy_move, __copy_move_backward):"}]}