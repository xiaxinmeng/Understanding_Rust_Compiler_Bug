{"sha": "fa8884d805ef576b616dbaf062eb882b80efb467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4ODg0ZDgwNWVmNTc2YjYxNmRiYWYwNjJlYjg4MmI4MGVmYjQ2Nw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-07-19T06:41:30Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-07-19T06:41:30Z"}, "message": "dwarf2out.c (add_subscript_info): New explicit COLLAPSE_P argument...\n\n\t* dwarf2out.c (add_subscript_info): New explicit COLLAPSE_P\n\targument, saying whether nested array are to be collapsed\n\tinto a single array type DIE with multiple subscripts.\n\t(gen_array_type_die): Factorize comments about the MIPS_DEBUG_INFO\n\tissues, centralize the nested array types collapsing control and\n\tdisable the transformation for Ada.\n\nFrom-SVN: r137975", "tree": {"sha": "e91bf6d56a6458065aa84d9777ee72e8cafad3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91bf6d56a6458065aa84d9777ee72e8cafad3df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa8884d805ef576b616dbaf062eb882b80efb467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8884d805ef576b616dbaf062eb882b80efb467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8884d805ef576b616dbaf062eb882b80efb467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8884d805ef576b616dbaf062eb882b80efb467/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16ca580ec6a653b30802cdbb040cbd4f29384bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ca580ec6a653b30802cdbb040cbd4f29384bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ca580ec6a653b30802cdbb040cbd4f29384bd7"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "d552bab2b82065f7c34bccbeed795b506930af71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8884d805ef576b616dbaf062eb882b80efb467/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8884d805ef576b616dbaf062eb882b80efb467/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa8884d805ef576b616dbaf062eb882b80efb467", "patch": "@@ -1,3 +1,12 @@\n+2008-07-19  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* dwarf2out.c (add_subscript_info): New explicit COLLAPSE_P\n+\targument, saying whether nested array are to be collapsed\n+\tinto a single array type DIE with multiple subscripts.\n+\t(gen_array_type_die): Factorize comments about the MIPS_DEBUG_INFO\n+\tissues, centralize the nested array types collapsing control and\n+\tdisable the transformation for Ada.\n+\t\n 2008-07-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36786"}, {"sha": "c3cb97383b11cce6e71fb977b68e26a861f90dcb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa8884d805ef576b616dbaf062eb882b80efb467/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa8884d805ef576b616dbaf062eb882b80efb467/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fa8884d805ef576b616dbaf062eb882b80efb467", "patch": "@@ -4341,7 +4341,7 @@ static void tree_add_const_value_attribute (dw_die_ref, tree);\n static void add_name_attribute (dw_die_ref, const char *);\n static void add_comp_dir_attribute (dw_die_ref);\n static void add_bound_info (dw_die_ref, enum dwarf_attribute, tree);\n-static void add_subscript_info (dw_die_ref, tree);\n+static void add_subscript_info (dw_die_ref, tree, bool);\n static void add_byte_size_attribute (dw_die_ref, tree);\n static void add_bit_offset_attribute (dw_die_ref, tree);\n static void add_bit_size_attribute (dw_die_ref, tree);\n@@ -11220,36 +11220,21 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n     }\n }\n \n-/* Note that the block of subscript information for an array type also\n-   includes information about the element type of type given array type.  */\n+/* Add subscript info to TYPE_DIE, describing an array TYPE, collapsing\n+   possibly nested array subscripts in a flat sequence if COLLAPSE_P is true.\n+   Note that the block of subscript information for an array type also\n+   includes information about the element type of the given array type.  */\n \n static void\n-add_subscript_info (dw_die_ref type_die, tree type)\n+add_subscript_info (dw_die_ref type_die, tree type, bool collapse_p)\n {\n-#ifndef MIPS_DEBUGGING_INFO\n   unsigned dimension_number;\n-#endif\n   tree lower, upper;\n   dw_die_ref subrange_die;\n \n-  /* The GNU compilers represent multidimensional array types as sequences of\n-     one dimensional array types whose element types are themselves array\n-     types.  Here we squish that down, so that each multidimensional array\n-     type gets only one array_type DIE in the Dwarf debugging info. The draft\n-     Dwarf specification say that we are allowed to do this kind of\n-     compression in C (because there is no difference between an array or\n-     arrays and a multidimensional array in C) but for other source languages\n-     (e.g. Ada) we probably shouldn't do this.  */\n-\n-  /* ??? The SGI dwarf reader fails for multidimensional arrays with a\n-     const enum type.  E.g. const enum machine_mode insn_operand_mode[2][10].\n-     We work around this by disabling this feature.  See also\n-     gen_array_type_die.  */\n-#ifndef MIPS_DEBUGGING_INFO\n   for (dimension_number = 0;\n-       TREE_CODE (type) == ARRAY_TYPE;\n+       TREE_CODE (type) == ARRAY_TYPE && (dimension_number == 0 || collapse_p);\n        type = TREE_TYPE (type), dimension_number++)\n-#endif\n     {\n       tree domain = TYPE_DOMAIN (type);\n \n@@ -11773,13 +11758,29 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n {\n   dw_die_ref scope_die = scope_die_for (type, context_die);\n   dw_die_ref array_die;\n+\n+  /* GNU compilers represent multidimensional array types as sequences of one\n+     dimensional array types whose element types are themselves array types.\n+     We sometimes squish that down to a single array_type DIE with multiple\n+     subscripts in the Dwarf debugging info.  The draft Dwarf specification\n+     say that we are allowed to do this kind of compression in C, because\n+     there is no difference between an array of arrays and a multidimensional\n+     array.  We don't do this for Ada to remain as close as possible to the\n+     actual representation, which is especially important against the language\n+     flexibilty wrt arrays of variable size.  */\n+\n+  bool collapse_nested_arrays = !is_ada ();\n   tree element_type;\n+  \n+  /* ??? The SGI dwarf reader fails for array of array of enum types\n+     (e.g. const enum machine_mode insn_operand_mode[2][10]) unless the inner\n+     array type comes before the outer array type.  We thus call gen_type_die\n+     before we new_die and must prevent nested array types collapsing for this\n+     target.  */\n \n-  /* ??? The SGI dwarf reader fails for array of array of enum types unless\n-     the inner array type comes before the outer array type.  Thus we must\n-     call gen_type_die before we call new_die.  See below also.  */\n #ifdef MIPS_DEBUGGING_INFO\n   gen_type_die (TREE_TYPE (type), context_die);\n+  collapse_nested_arrays = false;\n #endif\n \n   array_die = new_die (DW_TAG_array_type, scope_die, type);\n@@ -11818,19 +11819,16 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n     add_AT_flag (array_die, DW_AT_declaration, 1);\n   else\n #endif\n-    add_subscript_info (array_die, type);\n+    add_subscript_info (array_die, type, collapse_nested_arrays);\n \n-  /* Add representation of the type of the elements of this array type.  */\n+  /* Add representation of the type of the elements of this array type and\n+     emit the corresponding DIE if we haven't done it already.  */  \n   element_type = TREE_TYPE (type);\n-\n-  /* ??? The SGI dwarf reader fails for multidimensional arrays with a\n-     const enum type.  E.g. const enum machine_mode insn_operand_mode[2][10].\n-     We work around this by disabling this feature.  See also\n-     add_subscript_info.  */\n+  if (collapse_nested_arrays)\n+    while (TREE_CODE (element_type) == ARRAY_TYPE)\n+      element_type = TREE_TYPE (element_type);\n+  \n #ifndef MIPS_DEBUGGING_INFO\n-  while (TREE_CODE (element_type) == ARRAY_TYPE)\n-    element_type = TREE_TYPE (element_type);\n-\n   gen_type_die (element_type, context_die);\n #endif\n "}]}