{"sha": "093a6c996efdb16e7cf20f2677dbe128e618031d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzYTZjOTk2ZWZkYjE2ZTdjZjIwZjI2NzdkYmUxMjhlNjE4MDMxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-07-26T09:47:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-07-26T09:47:33Z"}, "message": "rtl.h (tls_referenced_p): Declare.\n\ngcc/\n\t* rtl.h (tls_referenced_p): Declare.\n\t* rtlanal.c (tls_referenced_p_1, tls_referenced_p): New functions.\n\t* config/mips/mips.c (mips_tls_symbol_ref_1): Delete.\n\t(mips_cannot_force_const_mem): Use tls_referenced_p.\n\t* config/pa/pa-protos.h (pa_tls_referenced_p): Delete.\n\t* config/pa/pa.h (CONSTANT_ADDRESS_P): Use tls_referenced_p\n\tinstead of pa_tls_referenced_p.\n\t* config/pa/pa.c (hppa_legitimize_address, pa_cannot_force_const_mem)\n\t(pa_emit_move_sequence, pa_emit_move_sequence): Likewise.\n\t(pa_legitimate_constant_p): Likewise.\n\t(pa_tls_symbol_ref_1, pa_tls_referenced_p): Delete.\n\t* config/rs6000/rs6000.c (rs6000_tls_referenced_p): Delete.\n\t(rs6000_cannot_force_const_mem, rs6000_emit_move)\n\t(rs6000_address_for_altivec): Use tls_referenced_p instead of\n\trs6000_tls_referenced_p.\n\t(rs6000_tls_symbol_ref_1): Delete.\n\nFrom-SVN: r213077", "tree": {"sha": "cfe6d5164490a03236fafa60c8d95b2fe0ded477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe6d5164490a03236fafa60c8d95b2fe0ded477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/093a6c996efdb16e7cf20f2677dbe128e618031d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093a6c996efdb16e7cf20f2677dbe128e618031d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093a6c996efdb16e7cf20f2677dbe128e618031d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093a6c996efdb16e7cf20f2677dbe128e618031d/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82e3a7199574db824fc468831c6db6378fb7f87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e3a7199574db824fc468831c6db6378fb7f87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e3a7199574db824fc468831c6db6378fb7f87e"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "6cf53647c62ef2fe25085d56ad534852e631f108", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -1,3 +1,22 @@\n+2014-07-26  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.h (tls_referenced_p): Declare.\n+\t* rtlanal.c (tls_referenced_p_1, tls_referenced_p): New functions.\n+\t* config/mips/mips.c (mips_tls_symbol_ref_1): Delete.\n+\t(mips_cannot_force_const_mem): Use tls_referenced_p.\n+\t* config/pa/pa-protos.h (pa_tls_referenced_p): Delete.\n+\t* config/pa/pa.h (CONSTANT_ADDRESS_P): Use tls_referenced_p\n+\tinstead of pa_tls_referenced_p.\n+\t* config/pa/pa.c (hppa_legitimize_address, pa_cannot_force_const_mem)\n+\t(pa_emit_move_sequence, pa_emit_move_sequence): Likewise.\n+\t(pa_legitimate_constant_p): Likewise.\n+\t(pa_tls_symbol_ref_1, pa_tls_referenced_p): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_tls_referenced_p): Delete.\n+\t(rs6000_cannot_force_const_mem, rs6000_emit_move)\n+\t(rs6000_address_for_altivec): Use tls_referenced_p instead of\n+\trs6000_tls_referenced_p.\n+\t(rs6000_tls_symbol_ref_1): Delete.\n+\n 2014-07-26  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR target/44551"}, {"sha": "d8654c4479acfc66a298e4ec24e83bf422bb6794", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -2171,15 +2171,6 @@ mips_symbol_insns (enum mips_symbol_type type, enum machine_mode mode)\n   return mips_symbol_insns_1 (type, mode) * (TARGET_MIPS16 ? 2 : 1);\n }\n \f\n-/* A for_each_rtx callback.  Stop the search if *X references a\n-   thread-local symbol.  */\n-\n-static int\n-mips_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n-{\n-  return mips_tls_symbol_p (*x);\n-}\n-\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool\n@@ -2223,7 +2214,7 @@ mips_cannot_force_const_mem (enum machine_mode mode, rtx x)\n     }\n \n   /* TLS symbols must be computed by mips_legitimize_move.  */\n-  if (for_each_rtx (&x, &mips_tls_symbol_ref_1, NULL))\n+  if (tls_referenced_p (x))\n     return true;\n \n   return false;"}, {"sha": "e72abeadd9b249751d77584773921b8613f90d9e", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -54,7 +54,6 @@ extern void pa_output_global_address (FILE *, rtx, int);\n extern void pa_print_operand (FILE *, rtx, int);\n extern void pa_encode_label (rtx);\n extern int pa_symbolic_expression_p (rtx);\n-extern bool pa_tls_referenced_p (rtx);\n extern int pa_adjust_insn_length (rtx, int);\n extern int pa_fmpyaddoperands (rtx *);\n extern int pa_fmpysuboperands (rtx *);"}, {"sha": "d52d52f071d953c8dbbd93b459742275a6e5f1e8", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -1037,7 +1037,7 @@ hppa_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       && !REG_POINTER (XEXP (x, 1)))\n     return gen_rtx_PLUS (Pmode, XEXP (x, 1), XEXP (x, 0));\n \n-  if (pa_tls_referenced_p (x))\n+  if (tls_referenced_p (x))\n     return legitimize_tls_address (x);\n   else if (flag_pic)\n     return legitimize_pic_address (x, mode, gen_reg_rtx (Pmode));\n@@ -1542,31 +1542,12 @@ force_mode (enum machine_mode mode, rtx orig)\n   return gen_rtx_REG (mode, REGNO (orig));\n }\n \n-/* Return 1 if *X is a thread-local symbol.  */\n-\n-static int\n-pa_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n-{\n-  return PA_SYMBOL_REF_TLS_P (*x);\n-}\n-\n-/* Return 1 if X contains a thread-local symbol.  */\n-\n-bool\n-pa_tls_referenced_p (rtx x)\n-{\n-  if (!TARGET_HAVE_TLS)\n-    return false;\n-\n-  return for_each_rtx (&x, &pa_tls_symbol_ref_1, 0);\n-}\n-\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool\n pa_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n-  return pa_tls_referenced_p (x);\n+  return tls_referenced_p (x);\n }\n \n /* Emit insns to move operands[1] into operands[0].\n@@ -1921,7 +1902,7 @@ pa_emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n       || (GET_CODE (operand1) == HIGH\n \t  && symbolic_operand (XEXP (operand1, 0), mode))\n       || function_label_operand (operand1, VOIDmode)\n-      || pa_tls_referenced_p (operand1))\n+      || tls_referenced_p (operand1))\n     {\n       int ishighonly = 0;\n \n@@ -2081,7 +2062,7 @@ pa_emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t    }\n \t  return 1;\n \t}\n-      else if (pa_tls_referenced_p (operand1))\n+      else if (tls_referenced_p (operand1))\n \t{\n \t  rtx tmp = operand1;\n \t  rtx addend = NULL;\n@@ -10293,7 +10274,7 @@ pa_legitimate_constant_p (enum machine_mode mode, rtx x)\n   /* TLS_MODEL_GLOBAL_DYNAMIC and TLS_MODEL_LOCAL_DYNAMIC are not\n      legitimate constants.  The other variants can't be handled by\n      the move patterns after reload starts.  */\n-  if (pa_tls_referenced_p (x))\n+  if (tls_referenced_p (x))\n     return false;\n \n   if (TARGET_64BIT && GET_CODE (x) == CONST_DOUBLE)"}, {"sha": "7292d6a42bf1c00ce7083da63a523ed16d7f4b1b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -797,7 +797,7 @@ extern int may_call_alloca;\n   ((GET_CODE (X) == LABEL_REF \t\t\t\t\t\t\\\n    || (GET_CODE (X) == SYMBOL_REF && !SYMBOL_REF_TLS_MODEL (X))\t\t\\\n    || GET_CODE (X) == CONST_INT\t\t\t\t\t\t\\\n-   || (GET_CODE (X) == CONST && !pa_tls_referenced_p (X))\t\t\\\n+   || (GET_CODE (X) == CONST && !tls_referenced_p (X))\t\t\t\\\n    || GET_CODE (X) == HIGH) \t\t\t\t\t\t\\\n    && (reload_in_progress || reload_completed\t\t\t\t\\\n        || ! pa_symbolic_expression_p (X)))"}, {"sha": "8b6e45d23afa3ae65f50a0c918e4bd01c8cf0faa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -1101,7 +1101,6 @@ static void is_altivec_return_reg (rtx, void *);\n int easy_vector_constant (rtx, enum machine_mode);\n static rtx rs6000_debug_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n-static int rs6000_tls_symbol_ref_1 (rtx *, void *);\n static int rs6000_get_some_local_dynamic_name_1 (rtx *, void *);\n static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree,\n \t\t\t\t       bool, bool);\n@@ -7254,17 +7253,6 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n   return dest;\n }\n \n-/* Return 1 if X contains a thread-local symbol.  */\n-\n-static bool\n-rs6000_tls_referenced_p (rtx x)\n-{\n-  if (! TARGET_HAVE_TLS)\n-    return false;\n-\n-  return for_each_rtx (&x, &rs6000_tls_symbol_ref_1, 0);\n-}\n-\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool\n@@ -7282,16 +7270,7 @@ rs6000_cannot_force_const_mem (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n     return true;\n \n   /* Do not place an ELF TLS symbol in the constant pool.  */\n-  return TARGET_ELF && rs6000_tls_referenced_p (x);\n-}\n-\n-/* Return 1 if *X is a thread-local symbol.  This is the same as\n-   rs6000_tls_symbol_ref except for the type of the unused argument.  */\n-\n-static int\n-rs6000_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n-{\n-  return RS6000_SYMBOL_REF_TLS_P (*x);\n+  return TARGET_ELF && tls_referenced_p (x);\n }\n \n /* Return true iff the given SYMBOL_REF refers to a constant pool entry\n@@ -8240,7 +8219,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \n   /* Recognize the case where operand[1] is a reference to thread-local\n      data and load its address to a register.  */\n-  if (rs6000_tls_referenced_p (operands[1]))\n+  if (tls_referenced_p (operands[1]))\n     {\n       enum tls_model model;\n       rtx tmp = operands[1];\n@@ -32441,7 +32420,7 @@ rs6000_address_for_altivec (rtx x)\n static bool\n rs6000_legitimate_constant_p (enum machine_mode mode, rtx x)\n {\n-  if (TARGET_ELF && rs6000_tls_referenced_p (x))\n+  if (TARGET_ELF && tls_referenced_p (x))\n     return false;\n \n   return ((GET_CODE (x) != CONST_DOUBLE && GET_CODE (x) != CONST_VECTOR)"}, {"sha": "3ab45d253f25906b270b485b6ff565a15de254c2", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -2292,6 +2292,7 @@ extern int replace_label (rtx *, void *);\n extern int rtx_referenced_p (rtx, rtx);\n extern bool tablejump_p (const_rtx, rtx *, rtx *);\n extern int computed_jump_p (const_rtx);\n+extern bool tls_referenced_p (rtx);\n \n typedef int (*rtx_function) (rtx *, void *);\n extern int for_each_rtx (rtx *, rtx_function, void *);"}, {"sha": "c513ec1a79611521ab7fa30a5d6bcd2328cc1e5e", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093a6c996efdb16e7cf20f2677dbe128e618031d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=093a6c996efdb16e7cf20f2677dbe128e618031d", "patch": "@@ -5960,3 +5960,22 @@ get_index_code (const struct address_info *info)\n \n   return SCRATCH;\n }\n+\n+/* Return 1 if *X is a thread-local symbol.  */\n+\n+static int\n+tls_referenced_p_1 (rtx *x, void *)\n+{\n+  return GET_CODE (*x) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (*x) != 0;\n+}\n+\n+/* Return true if X contains a thread-local symbol.  */\n+\n+bool\n+tls_referenced_p (rtx x)\n+{\n+  if (!targetm.have_tls)\n+    return false;\n+\n+  return for_each_rtx (&x, &tls_referenced_p_1, 0);\n+}"}]}