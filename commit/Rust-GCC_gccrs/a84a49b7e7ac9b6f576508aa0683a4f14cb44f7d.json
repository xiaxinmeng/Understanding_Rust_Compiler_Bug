{"sha": "a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0YTQ5YjdlN2FjOWI2ZjU3NjUwOGFhMDY4M2E0ZjE0Y2I0NGY3ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-07T17:01:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-07T17:01:54Z"}, "message": "re PR tree-optimization/69740 (gcc ICE at -O2 and above on valid code on x86_64-linux-gnu in \"verify_loop_structure\")\n\n\tPR tree-optimization/69740\n\t* cfghooks.c (remove_edge): Request loop fixups if we delete\n\tan edge that might turn an irreducible loop into a natural\n\tloop.\n\t* cfgloop.h (check_verify_loop_structure): Clear LOOPS_NEED_FIXUP.\n\tMove after definition of loops_state_clear.\n\n\tPR tree-optimization/69740\n\t* gcc.c-torture/compile/pr69740-1.c: New test.\n\t* gcc.c-torture/compile/pr69740-2.c: New test.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r234036", "tree": {"sha": "705e817ab10e9dde6d04bbbf7f189860002d06c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705e817ab10e9dde6d04bbbf7f189860002d06c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55a82b661e036bab010d916f5bb60c0b6d279f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a82b661e036bab010d916f5bb60c0b6d279f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a82b661e036bab010d916f5bb60c0b6d279f3c"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "9f83f366ab397589a1c1765ddc11bda78898603b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -1,3 +1,13 @@\n+2016-02-26  Richard Biener  <rguenther@suse.de>\n+            Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69740\n+\t* cfghooks.c (remove_edge): Request loop fixups if we delete\n+\tan edge that might turn an irreducible loop into a natural\n+\tloop.\n+\t* cfgloop.h (check_verify_loop_structure): Clear LOOPS_NEED_FIXUP.\n+\tMove after definition of loops_state_clear.\n+\n 2016-03-07  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR rtl-optimization/69052"}, {"sha": "06c05d1fb39a6146de45ac0b71fda31284fb3994", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -408,7 +408,20 @@ void\n remove_edge (edge e)\n {\n   if (current_loops != NULL)\n-    rescan_loop_exit (e, false, true);\n+    {\n+      rescan_loop_exit (e, false, true);\n+\n+      /* Removal of an edge inside an irreducible region or which leads\n+\t to an irreducible region can turn the region into a natural loop.\n+\t In that case, ask for the loop structure fixups.\n+\n+\t FIXME: Note that LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS is not always\n+\t set, so always ask for fixups when removing an edge in that case.  */\n+      if (!loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+\t  || (e->flags & EDGE_IRREDUCIBLE_LOOP)\n+\t  || (e->dest->flags & BB_IRREDUCIBLE_LOOP))\n+\tloops_state_set (LOOPS_NEED_FIXUP);\n+    }\n \n   /* This is probably not needed, but it doesn't hurt.  */\n   /* FIXME: This should be called via a remove_edge hook.  */"}, {"sha": "54e738f20f4c333722851f18ea8c419404a9e863", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -314,16 +314,6 @@ extern void delete_loop (struct loop *);\n \n extern void verify_loop_structure (void);\n \n-/* Check loop structure invariants, if internal consistency checks are\n-   enabled.  */\n-\n-static inline void\n-checking_verify_loop_structure (void)\n-{\n-  if (flag_checking)\n-    verify_loop_structure ();\n-}\n-\n /* Loop analysis.  */\n extern bool just_once_each_iteration_p (const struct loop *, const_basic_block);\n gcov_type expected_loop_iterations_unbounded (const struct loop *);\n@@ -546,6 +536,28 @@ loops_state_clear (unsigned flags)\n   loops_state_clear (cfun, flags);\n }\n \n+/* Check loop structure invariants, if internal consistency checks are\n+   enabled.  */\n+\n+static inline void\n+checking_verify_loop_structure (void)\n+{\n+  /* VERIFY_LOOP_STRUCTURE essentially asserts that no loops need fixups.\n+\n+     The loop optimizers should never make changes to the CFG which\n+     require loop fixups.  But the low level CFG manipulation code may\n+     set the flag conservatively.\n+\n+     Go ahead and clear the flag here.  That avoids the assert inside\n+     VERIFY_LOOP_STRUCTURE, and if there is an inconsistency in the loop\n+     structures VERIFY_LOOP_STRUCTURE will detect it.\n+\n+     This also avoid the compile time cost of excessive fixups.  */\n+  loops_state_clear (LOOPS_NEED_FIXUP);\n+  if (flag_checking)\n+    verify_loop_structure ();\n+}\n+\n /* Loop iterators.  */\n \n /* Flags for loop iteration.  */"}, {"sha": "bf8e231065c3d3f7fbb395b88de15085ff8c1095", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -1,3 +1,10 @@\n+2016-02-26  Richard Biener  <rguenther@suse.de>\n+            Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69740\n+\t* gcc.c-torture/compile/pr69740-1.c: New test.\n+\t* gcc.c-torture/compile/pr69740-2.c: New test.\n+\n 2016-03-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* lib/target-supports.exp"}, {"sha": "ac867d8a99926d0a0dbe7422f65e20902ff24d32", "filename": "gcc/testsuite/gcc.c-torture/compile/pr69740-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-1.c?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -0,0 +1,12 @@\n+char a;\n+short b;\n+void fn1() {\n+  if (b)\n+    ;\n+  else {\n+    int c[1] = {0};\n+  l1:;\n+  }\n+  if (a)\n+    goto l1;\n+}"}, {"sha": "a89c9a0fd12e972bd1605345acffc2422ebdf721", "filename": "gcc/testsuite/gcc.c-torture/compile/pr69740-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69740-2.c?ref=a84a49b7e7ac9b6f576508aa0683a4f14cb44f7d", "patch": "@@ -0,0 +1,19 @@\n+inline int foo(int *p1, int p2) {\n+  int z = *p1;\n+  while (z > p2)\n+    p2 = 2;\n+  return z;\n+}\n+int main() {\n+  int i;\n+  for (;;) {\n+    int j, k;\n+    i = foo(&k, 7);\n+    if (k)\n+      j = i;\n+    else\n+      k = j;\n+    if (2 != j)\n+      __builtin_abort();\n+  }\n+}"}]}