{"sha": "cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhYzZlOWZiNGVhMmZjN2IwNWRlZDg1YzgwNTUwMWU0ZDc3MDBiOQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@gnat.com", "date": "2001-10-11T23:28:47Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-11T23:28:47Z"}, "message": "* Makefile.in:\n\n\t(GNAT_ADA_OBJS): add g-crc32.o, a-tags.o, a-stream.o\n\t(GNATBIND_OBJS): add g-crc32.o, a-tags.o, a-stream.o\n\t(GNATLS_RTL_OBJS): add g-crc32.o\n\t(GNATMAKE_RTL_OBJS): add g-crc32.o\n\n\t* ali-util.adb:\n\t(CRC_Match): new function.\n\t(Get_File_Checksum): renamed Get_File_CRC. Use the GNAT.CRC32 unit\n\tinstead of the previous simple checksum algorithm.\n\t(Time_Stamp_Mismatch): use CRC_Match for comparison.\n\t(Set_Source_Table): idem.\n\n\t* ali-util.ads:\n\t(Get_File_Checksum): renamed Get_File_CRC as now we compute CRC\n\tinstead of simple checksum.\n\t(CRC_Match): new function.\n\t(CRC_Error): new constant.\n\n\t* ali.adb (Scan_ALI): rename variable Chk to CRC as we are handling\n\ta CRC now and not a simple checksum. A CRC uses lower-case hex\n\tletters, fixes ambiguity in parsing.\n\n\t* ali.ads (Sdep_Record.Checksum): renamed Sdep_Record.CRC as this\n\tis what this variable will store.\n\n\t* bcheck.adb: Change reference to chechsum in comments by CRC.\n\t(Check_Consistency): Rename Get_File_Checksum to Get_File_CRC.\n\trename All_Checksum_Match to All_CRC_Match. Change due to API\n\trenaming since now GNAT does not use a simple checksum but a\n\tCRC using GNAT.CRC32.\n\n\t* gnatls.adb: Rename Checksum to CRC in many places, we use a CRC\n\tnow and not anymore a simple checksum.\n\n\t* lib-load.adb: Use Source_CRC instead of Source_Checksum in many\n\tplaces.\n\n\t* lib-writ.adb (Write_ALI): Use Source_CRC instead of Source_Checksum.\n\n\t* scans.adb:\n\t(Restore_Scan_State): rename Checksum to CRC.\n\t(Save_Scan_State): idem.\n\n\t* scans.ads:\n\tWith GNAT.CRC32.\n\t(Checksum): rename to CRC.\n\t(Saved_Scan_State): Save_Checksum field renamed to Save_CRC\n\n\t* scn-nlit.adb: Rename many Accumulate_Checksum to Update (from\n\tGNAT.CRC32).  Update copyright notice.\n\n\t* scn-slit.adb: Rename many Accumulate_Checksum to Update (from\n\tGNAT.CRC32).  Update copyright notice.\n\n\t* scn.adb:\n\t(Accumulate_Checksum): removed.\n\t(Update): new procedure. Add a wide-character into the CRC.\n\n\t* sinput-l.adb:\n\t(Complete_Source_File_Entry): use CRC32 instead of simple checksum.\n\t(Load_File): fix initialization of S (change Source_Checksum to\n\tSource_CRC)\n\n\t* sinput-p.adb (Load_Project_File): rename Source_Checksum to\n\tSource_CRC in S initialization.\n\n\t* sinput.adb (Source_Checksum): renamed to Source_CRC.\n\n\t* sinput.ads (Source_Checksum): renamed to Source_CRC.\n\tUpdate comments for the CRC.\n\n\t* types.adb (Hex): Use lowercase for the letter part.\n\n\t* types.ads (Get_Hex_String): Returns the hexadecimal representation\n\tfor a word. This is currently used only for CRC. In previous version,\n\tthe checksum was using a representation with all letter being\n\tupper-case. With the new implementation (using CRC) we do not remove\n\tthe 32th bit of the CRC, so we can have an upper-case starting letter\n\tin the CRC. This is not possible to parse in Scan_ALI (ali.adb).\n\tIt is ambigous since the CRC was optional and could be followed by\n\toptions like EB, EE. So now this routines uses lower-case letter for\n\tthe hexadecimal representation. Strange enough only lower case letters\n\twhere checked in Scan_ALI (even if this was not a possible case).\n\n\t* gnatvsn.ads (Library_Version): changed to 3.15a.\n\n\t* s-crc32.ads: Initial version from GNAT.CRC32. This is the version\n\tfor the compiler.\n\n\t* s-crc32.adb: Initial version from GNAT.CRC32. This is the version\n\tfor the compiler.\n\n\t* ali-util.adb: Redo previous change to avoid using word CRC everywhere\n\tAdd 2001 to copyright notice\n\t(Accumulate_Checksum): Modify to use System.CRC32.\n\n\t* ali-util.ads: Redo changes of previous revision to continue to use\n\tthe word Checksum. Add 2001 to copyright notice.\n\n\t* ali.adb: Undo some of previous changes, not needed.\n\tKeep the change for lower case letters in the checksum.\n\n\t* ali.ads: Undo previous change not needed.\n\n\t* bcheck.adb: Undo most of previous change, not needed.\n\tBut do use Checksums_Match for checksum comparison.\n\n\t* gnatls.adb: Undo most of previous change, not needed.\n\tBut do use Checksums_Match for comparing checksums.\n\n\t* lib-load.adb: Undo previous change, not needed.\n\n\t* lib-writ.adb: Undo previous change, not needed.\n\n\t* lib-writ.ads: Document that checksums use lower case,\n\tnot upper case letters.\n\n\t* scans.adb: Undo previous change, not needed\n\n\t* scans.ads: Undo previous change, not needed.\n\n\t* scn-nlit.adb: Undo previous changes, not needed.\n\n\t* scn-slit.adb: Undo previous change, not needed.  Fix header format.\n\n\t* scn.adb:\n\t(Accumulate_Checksum): Use System.CRC32.\n\t(Initialize_Checksum): New procedure.\n\tRemove other changes of previous revision.\n\n\t* sinput-p.adb: Undo previous change, not needed.\n\n\t* sinput.adb: Undo previous change, not needed.\n\n\t* sinput-l.adb: Undo previous change, not needed.\n\n\t* sinput.ads: Undo previous change, not needed.  Keep only comment\n\ton new checksum algorithm\n\n\t* Makefile.in: Add s-crc32 as needed, remove g-crc32.\n\tAlso remove a-tags and a-stream from GNAT sources.\n\n\t* ali.adb (Scan_ALI): fix typo introduce in latest check-in.\n\n\t* Makefile.in (GNATRTL_NONTASKING_OBJS): Add g-crc32.o.\n\nFrom-SVN: r46206", "tree": {"sha": "1eb5c3598cab3e28720f900ad0f6e3a309265f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb5c3598cab3e28720f900ad0f6e3a309265f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/comments", "author": null, "committer": null, "parents": [{"sha": "3d7a191ffc392c46a555149fd52cac6decd4e977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7a191ffc392c46a555149fd52cac6decd4e977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7a191ffc392c46a555149fd52cac6decd4e977"}], "stats": {"total": 787, "additions": 702, "deletions": 85}, "files": [{"sha": "889ac48015e014528e6e65f99846d3f9118cf622", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -1,3 +1,152 @@\n+2001-10-11  Pascal Obry <obry@gnat.com>\n+\n+\t* Makefile.in:\n+\t(GNAT_ADA_OBJS): add g-crc32.o, a-tags.o, a-stream.o\n+\t(GNATBIND_OBJS): add g-crc32.o, a-tags.o, a-stream.o\n+\t(GNATLS_RTL_OBJS): add g-crc32.o\n+\t(GNATMAKE_RTL_OBJS): add g-crc32.o\n+\t\n+\t* ali-util.adb:\n+\t(CRC_Match): new function.\n+\t(Get_File_Checksum): renamed Get_File_CRC. Use the GNAT.CRC32 unit \n+\tinstead of the previous simple checksum algorithm.\n+\t(Time_Stamp_Mismatch): use CRC_Match for comparison.\n+\t(Set_Source_Table): idem.\n+\t\n+\t* ali-util.ads:\n+\t(Get_File_Checksum): renamed Get_File_CRC as now we compute CRC \n+\tinstead of simple checksum.\n+\t(CRC_Match): new function.\n+\t(CRC_Error): new constant.\n+\t\n+\t* ali.adb (Scan_ALI): rename variable Chk to CRC as we are handling \n+\ta CRC now and not a simple checksum. A CRC uses lower-case hex \n+\tletters, fixes ambiguity in parsing.\n+\t\n+\t* ali.ads (Sdep_Record.Checksum): renamed Sdep_Record.CRC as this \n+\tis what this variable will store.\n+\t\n+\t* bcheck.adb: Change reference to chechsum in comments by CRC.\n+\t(Check_Consistency): Rename Get_File_Checksum to Get_File_CRC. \n+\trename All_Checksum_Match to All_CRC_Match. Change due to API \n+\trenaming since now GNAT does not use a simple checksum but a \n+\tCRC using GNAT.CRC32.\n+\t\n+\t* gnatls.adb: Rename Checksum to CRC in many places, we use a CRC \n+\tnow and not anymore a simple checksum.\n+\t\n+\t* lib-load.adb: Use Source_CRC instead of Source_Checksum in many \n+\tplaces.\n+\t\n+\t* lib-writ.adb (Write_ALI): Use Source_CRC instead of Source_Checksum.\n+\t\n+\t* scans.adb:\n+\t(Restore_Scan_State): rename Checksum to CRC.\n+\t(Save_Scan_State): idem.\n+\t\n+\t* scans.ads:\n+\tWith GNAT.CRC32.\n+\t(Checksum): rename to CRC.\n+\t(Saved_Scan_State): Save_Checksum field renamed to Save_CRC\n+\t\n+\t* scn-nlit.adb: Rename many Accumulate_Checksum to Update (from \n+\tGNAT.CRC32).  Update copyright notice.\n+\t\n+\t* scn-slit.adb: Rename many Accumulate_Checksum to Update (from \n+\tGNAT.CRC32).  Update copyright notice.\n+\t\n+\t* scn.adb:\n+\t(Accumulate_Checksum): removed.\n+\t(Update): new procedure. Add a wide-character into the CRC.\n+\t\n+\t* sinput-l.adb:\n+\t(Complete_Source_File_Entry): use CRC32 instead of simple checksum.\n+\t(Load_File): fix initialization of S (change Source_Checksum to \n+\tSource_CRC)\n+\t\n+\t* sinput-p.adb (Load_Project_File): rename Source_Checksum to \n+\tSource_CRC in S initialization.\n+\t\n+\t* sinput.adb (Source_Checksum): renamed to Source_CRC.\n+\t\n+\t* sinput.ads (Source_Checksum): renamed to Source_CRC.\n+\tUpdate comments for the CRC.\n+\t\n+\t* types.adb (Hex): Use lowercase for the letter part.\n+\t\n+\t* types.ads (Get_Hex_String): Returns the hexadecimal representation \n+\tfor a word. This is currently used only for CRC. In previous version, \n+\tthe checksum was using a representation with all letter being \n+\tupper-case. With the new implementation (using CRC) we do not remove \n+\tthe 32th bit of the CRC, so we can have an upper-case starting letter \n+\tin the CRC. This is not possible to parse in Scan_ALI (ali.adb). \n+\tIt is ambigous since the CRC was optional and could be followed by \n+\toptions like EB, EE. So now this routines uses lower-case letter for \n+\tthe hexadecimal representation. Strange enough only lower case letters \n+\twhere checked in Scan_ALI (even if this was not a possible case).\n+\t\n+\t* gnatvsn.ads (Library_Version): changed to 3.15a.\n+\t\n+\t* s-crc32.ads: Initial version from GNAT.CRC32. This is the version \n+\tfor the compiler.\n+\t\n+\t* s-crc32.adb: Initial version from GNAT.CRC32. This is the version \n+\tfor the compiler.\n+\t\n+\t* ali-util.adb: Redo previous change to avoid using word CRC everywhere\n+\tAdd 2001 to copyright notice\n+\t(Accumulate_Checksum): Modify to use System.CRC32.\n+\t\n+\t* ali-util.ads: Redo changes of previous revision to continue to use \n+\tthe word Checksum. Add 2001 to copyright notice.\n+\t\n+\t* ali.adb: Undo some of previous changes, not needed.\n+\tKeep the change for lower case letters in the checksum.\n+\t\n+\t* ali.ads: Undo previous change not needed.\n+\n+\t* bcheck.adb: Undo most of previous change, not needed.\n+\tBut do use Checksums_Match for checksum comparison.\n+\t\n+\t* gnatls.adb: Undo most of previous change, not needed.\n+\tBut do use Checksums_Match for comparing checksums.\n+\t\n+\t* lib-load.adb: Undo previous change, not needed.\n+\t\n+\t* lib-writ.adb: Undo previous change, not needed.\n+\t\n+\t* lib-writ.ads: Document that checksums use lower case, \n+\tnot upper case letters.\n+\t\n+\t* scans.adb: Undo previous change, not needed\n+\t\n+\t* scans.ads: Undo previous change, not needed.\n+\t\n+\t* scn-nlit.adb: Undo previous changes, not needed.\n+\t\n+\t* scn-slit.adb: Undo previous change, not needed.  Fix header format.\n+\t\n+\t* scn.adb:\n+\t(Accumulate_Checksum): Use System.CRC32.\n+\t(Initialize_Checksum): New procedure.\n+\tRemove other changes of previous revision.\n+\t\n+\t* sinput-p.adb: Undo previous change, not needed.\n+\t\n+\t* sinput.adb: Undo previous change, not needed.\n+\n+\t* sinput-l.adb: Undo previous change, not needed.\n+\t\n+\t* sinput.ads: Undo previous change, not needed.  Keep only comment \n+\ton new checksum algorithm\n+\t\n+\t* Makefile.in: Add s-crc32 as needed, remove g-crc32.\n+\tAlso remove a-tags and a-stream from GNAT sources.\n+\t\n+\t* ali.adb (Scan_ALI): fix typo introduce in latest check-in.\n+\t\n+\t* Makefile.in (GNATRTL_NONTASKING_OBJS): Add g-crc32.o.\n+\n 2001-10-11  Geert Bosch  <bosch@gnat.com>\n \n \t* einfo.h: Regenerate."}, {"sha": "df2a68c1d7e44d776f253d60225f773ef702c763", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -299,16 +299,16 @@ GNAT1_C_OBJS = b_gnat1.o adaint.o cstreams.o cio.o targtyps.o decl.o \\\n # Object files from Ada sources that are used by gnat1\n \n GNAT_ADA_OBJS = \\\n- ada.o a-charac.o a-chlat1.o a-except.o s-memory.o s-traceb.o s-mastop.o \\\n- s-except.o ali.o alloc.o atree.o butil.o casing.o checks.o comperr.o     \\\n- csets.o cstand.o debug.o debug_a.o einfo.o elists.o errout.o eval_fat.o \\\n- exp_attr.o exp_ch11.o exp_ch12.o exp_ch13.o exp_ch2.o exp_ch3.o exp_ch4.o \\\n- exp_ch5.o exp_ch6.o exp_ch7.o exp_ch8.o exp_ch9.o exp_code.o exp_dbug.o \\\n- exp_disp.o exp_dist.o exp_fixd.o exp_aggr.o exp_imgv.o \\\n+ ada.o a-charac.o a-chlat1.o a-except.o s-memory.o \\\n+ s-traceb.o s-mastop.o s-except.o ali.o alloc.o atree.o butil.o casing.o \\\n+ checks.o comperr.o csets.o cstand.o debug.o debug_a.o einfo.o elists.o \\\n+ errout.o eval_fat.o exp_attr.o exp_ch11.o exp_ch12.o exp_ch13.o exp_ch2.o \\\n+ exp_ch3.o exp_ch4.o exp_ch5.o exp_ch6.o exp_ch7.o exp_ch8.o exp_ch9.o \\\n+ exp_code.o exp_dbug.o exp_disp.o exp_dist.o exp_fixd.o exp_aggr.o exp_imgv.o \\\n  exp_intr.o exp_pakd.o exp_prag.o exp_smem.o \\\n  exp_strm.o exp_tss.o exp_util.o exp_vfpt.o expander.o fname.o fname-uf.o \\\n  freeze.o frontend.o gnat.o g-hesora.o g-htable.o g-os_lib.o \\\n- g-speche.o get_targ.o gnatvsn.o \\\n+ g-speche.o s-crc32.o get_targ.o gnatvsn.o \\\n  hlo.o hostparm.o impunit.o \\\n  interfac.o itypes.o inline.o krunch.o lib.o \\\n  layout.o lib-load.o lib-util.o lib-xref.o lib-writ.o live.o \\\n@@ -339,7 +339,7 @@ GNATBIND_OBJS = \\\n  butil.o casing.o csets.o \\\n  debug.o fname.o gnat.o g-hesora.o g-htable.o \\\n  g-os_lib.o gnatbind.o gnatvsn.o hostparm.o \\\n- krunch.o namet.o opt.o osint.o output.o rident.o s-assert.o \\\n+ krunch.o namet.o opt.o osint.o output.o rident.o s-crc32.o s-assert.o \\\n  s-parame.o s-sopco3.o s-sopco4.o s-sopco5.o s-stache.o s-stalib.o \\\n  s-stoele.o s-imgenu.o s-strops.o s-soflin.o s-wchcon.o s-wchjis.o \\\n  sdefault.o switch.o stylesw.o validsw.o \\\n@@ -392,7 +392,7 @@ GNATKR_RTL_OBJS = ada.o a-charac.o a-chahan.o a-chlat1.o a-comlin.o \\\n   a-filico.o  s-strops.o  s-stratt.o s-imgenu.o a-ioexce.o s-exctab.o\n GNATKR_OBJS = gnatkr.o gnatvsn.o \\\n   krunch.o hostparm.o $(GNATKR_RTL_OBJS) $(EXTRA_GNATTOOLS_OBJS)\n- \n+\n GNATLINK_RTL_OBJS = \\\n    adaint.o argv.o cio.o cstreams.o \\\n    exit.o init.o final.o raise.o tracebak.o \\\n@@ -451,6 +451,7 @@ GNATLS_RTL_OBJS = \\\n  system.o   \\\n  s-assert.o \\\n  s-bitops.o \\\n+ s-crc32.o  \\\n  s-except.o \\\n  s-exctab.o \\\n  s-finroo.o \\\n@@ -478,6 +479,7 @@ GNATLS_RTL_OBJS = \\\n  s-wchcnv.o \\\n  s-wchcon.o \\\n  s-wchjis.o\n+\n GNATLS_OBJS = \\\n  ali.o      \\\n  ali-util.o \\\n@@ -553,7 +555,7 @@ GNATMAKE_RTL_OBJS = adaint.o argv.o raise.o exit.o a-comlin.o \\\n  s-imgenu.o s-assert.o s-secsta.o s-stoele.o s-soflin.o s-fileio.o \\\n  s-valenu.o s-valuti.o g-casuti.o \\\n  system.o s-exctab.o s-strops.o s-sopco3.o s-sopco4.o s-sopco5.o \\\n- g-htable.o g-regexp.o s-wchcnv.o\n+ g-htable.o g-regexp.o s-crc32.o s-wchcnv.o\n \n GNATMAKE_OBJS = ali.o ali-util.o \\\n  alloc.o atree.o binderr.o butil.o casing.o csets.o debug.o einfo.o elists.o \\\n@@ -1666,6 +1668,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-cgicoo.o \\\n   g-cgideb.o \\\n   g-comlin.o \\\n+  g-crc32.o \\\n   g-curexc.o \\\n   g-debuti.o \\\n   g-debpoo.o \\\n@@ -1715,6 +1718,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-auxdec.o \\\n   s-bitops.o \\\n   s-chepoo.o \\\n+  s-crc32.o  \\\n   s-direio.o \\\n   s-errrep.o \\\n   s-except.o \\\n@@ -3930,6 +3934,8 @@ s-assert.o : ada.ads a-except.ads gnat.ads g-htable.ads system.ads \\\n s-bitops.o : gnat.ads g-except.ads system.ads s-bitops.ads s-bitops.adb \\\n    s-unstyp.ads unchconv.ads \n \n+s-crc32.o : interfac.ads system.ads s-crc32.ads s-crc32.adb\n+\n s-except.o : ada.ads a-except.ads system.ads s-except.ads s-stalib.ads \\\n    unchconv.ads \n "}, {"sha": "0e0ded9ac7c8dfecfb5c787edfedbd1d52cf9f94", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.7 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,8 @@ with Namet;   use Namet;\n with Opt;     use Opt;\n with Osint;   use Osint;\n \n+with System.CRC32;\n+\n package body ALI.Util is\n \n    -----------------------\n@@ -48,19 +50,27 @@ package body ALI.Util is\n    --  generate code, so it is not necessary to worry about making the right\n    --  sequence of calls in any error situation.\n \n+   procedure Initialize_Checksum (Csum : in out Word);\n+   --  Sets initial value of Csum before any calls to Accumulate_Checksum\n+\n    -------------------------\n    -- Accumulate_Checksum --\n    -------------------------\n \n    procedure Accumulate_Checksum (C : Character; Csum : in out Word) is\n    begin\n-      Csum := Csum + Csum + Character'Pos (C);\n-\n-      if Csum > 16#8000_0000# then\n-         Csum := (Csum + 1) and 16#7FFF_FFFF#;\n-      end if;\n+      System.CRC32.Update (System.CRC32.CRC32 (Csum), C);\n    end Accumulate_Checksum;\n \n+   ---------------------\n+   -- Checksums_Match --\n+   ---------------------\n+\n+   function Checksums_Match (Checksum1, Checksum2 : Word) return Boolean is\n+   begin\n+      return Checksum1 = Checksum2 and then Checksum1 /= Checksum_Error;\n+   end Checksums_Match;\n+\n    -----------------------\n    -- Get_File_Checksum --\n    -----------------------\n@@ -101,7 +111,7 @@ package body ALI.Util is\n          raise Bad;\n       end if;\n \n-      Csum := 0;\n+      Initialize_Checksum (Csum);\n       Ptr := 0;\n \n       loop\n@@ -249,7 +259,7 @@ package body ALI.Util is\n    exception\n       when Bad =>\n          Free_Source;\n-         return 16#FFFF_FFFF#;\n+         return Checksum_Error;\n \n    end Get_File_Checksum;\n \n@@ -272,6 +282,15 @@ package body ALI.Util is\n       Source.Init;\n    end Initialize_ALI_Source;\n \n+   -------------------------\n+   -- Initialize_Checksum --\n+   -------------------------\n+\n+   procedure Initialize_Checksum (Csum : in out Word) is\n+   begin\n+      System.CRC32.Initialize (System.CRC32.CRC32 (Csum));\n+   end Initialize_Checksum;\n+\n    --------------\n    -- Read_ALI --\n    --------------\n@@ -406,7 +425,9 @@ package body ALI.Util is\n \n             --  Update checksum flag\n \n-            if Sdep.Table (D).Checksum /= Source.Table (S).Checksum then\n+            if not Checksums_Match\n+                     (Sdep.Table (D).Checksum, Source.Table (S).Checksum)\n+            then\n                Source.Table (S).All_Checksums_Match := False;\n             end if;\n \n@@ -492,8 +513,9 @@ package body ALI.Util is\n             --  ??? It is probably worth updating the ALI file with a new\n             --  field to avoid recomputing it each time.\n \n-            if Get_File_Checksum (Sdep.Table (D).Sfile) =\n-                                             Source.Table (Src).Checksum\n+            if Checksums_Match\n+                 (Get_File_Checksum (Sdep.Table (D).Sfile),\n+                  Source.Table (Src).Checksum)\n             then\n                Sdep.Table (D).Stamp := Source.Table (Src).Stamp;\n             end if;"}, {"sha": "9cfefb70c83dee2c60957701078a32998552b91b", "filename": "gcc/ada/ali-util.ads", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.2 $                              --\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -130,12 +130,26 @@ package ALI.Util is\n    -- Subprograms for manipulating checksums --\n    --------------------------------------------\n \n+   Checksum_Error : constant Word := 16#FFFF_FFFF#;\n+   --  This value is used to indicate an error in computing the checksum.\n+   --  When comparing checksums for smart recompilation, the CRC_Error\n+   --  value is never considered to match. This could possibly result\n+   --  in a false negative, but that is never harmful, it just means\n+   --  that in unusual cases an unnecessary recompilation occurs.\n+\n    function Get_File_Checksum (Fname : Name_Id) return Word;\n    --  Compute checksum for the given file. As far as possible, this circuit\n    --  computes exactly the same value computed by the compiler, but it does\n    --  not matter if it gets it wrong in marginal cases, since the only result\n    --  is to miss some smart recompilation cases, correct functioning is not\n-   --  affecte by a mis-computation. Returns an impossible checksum value,\n-   --  with the upper bit set, if the file is missing or has an error.\n+   --  affected by a miscomputation. Returns Checksum_Error if the file is\n+   --  missing or has an error.\n+\n+   function Checksums_Match (Checksum1, Checksum2 : Word) return Boolean;\n+   pragma Inline (Checksums_Match);\n+   --  Returns True if Checksum1 and Checksum2 have the same value and are\n+   --  not equal to Checksum_Error, returns False in all other cases. This\n+   --  routine must always be used to compare for checksum equality, to\n+   --  ensure that the case of Checksum_Error is handled properly.\n \n end ALI.Util;"}, {"sha": "db6a0f258318290e87a864e2ef612cf3b1630bc8", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.124 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -1143,9 +1143,9 @@ package body ALI is\n                   Chk := Chk * 16 +\n                            Character'Pos (Nextc) - Character'Pos ('0');\n \n-               elsif Nextc in 'A' .. 'F' then\n+               elsif Nextc in 'a' .. 'f' then\n                   Chk := Chk * 16 +\n-                           Character'Pos (Nextc) - Character'Pos ('A') + 10;\n+                           Character'Pos (Nextc) - Character'Pos ('a') + 10;\n \n                else\n                   exit;"}, {"sha": "c4da75740301fc68618602bdc935739d4442f766", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.39 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -511,8 +511,9 @@ package body Bcheck is\n          --  with the checksums in the ALI files.\n \n          elsif Check_Source_Files then\n-            if Source.Table (S).Checksum /=\n-               Get_File_Checksum (Source.Table (S).Sfile)\n+            if not Checksums_Match\n+              (Source.Table (S).Checksum,\n+               Get_File_Checksum (Source.Table (S).Sfile))\n             then\n                Source.Table (S).All_Checksums_Match := False;\n             end if;"}, {"sha": "e7ed74c0f6f1cc9ba5a0b288143e970a85e25d16", "filename": "gcc/ada/g-crc32.adb", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fg-crc32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fg-crc32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-crc32.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -0,0 +1,92 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--                           G N A T . C R C 3 2                            --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision$\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Unchecked_Conversion;\n+\n+package body GNAT.CRC32 is\n+\n+   ------------\n+   -- Update --\n+   ------------\n+\n+   procedure Update (C : in out CRC32; Value : String) is\n+   begin\n+      for K in Value'Range loop\n+         Update (C, Value (K));\n+      end loop;\n+   end Update;\n+\n+   procedure Update (C : in out CRC32; Value : Ada.Streams.Stream_Element) is\n+      function To_Char is new Unchecked_Conversion\n+        (Ada.Streams.Stream_Element, Character);\n+\n+      V : constant Character := To_Char (Value);\n+\n+   begin\n+      Update (C, V);\n+   end Update;\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : Ada.Streams.Stream_Element_Array)\n+   is\n+   begin\n+      for K in Value'Range loop\n+         Update (C, Value (K));\n+      end loop;\n+   end Update;\n+\n+   -----------------\n+   -- Wide_Update --\n+   -----------------\n+\n+   procedure Wide_Update (C : in out CRC32; Value : Wide_Character) is\n+      subtype S2 is String (1 .. 2);\n+      function To_S2 is new Unchecked_Conversion (Wide_Character, S2);\n+\n+      VS : S2 := To_S2 (Value);\n+\n+   begin\n+      Update (C, VS (1));\n+      Update (C, VS (2));\n+   end Wide_Update;\n+\n+   procedure Wide_Update (C : in out CRC32; Value : Wide_String) is\n+   begin\n+      for K in Value'Range loop\n+         Wide_Update (C, Value (K));\n+      end loop;\n+   end Wide_Update;\n+\n+end GNAT.CRC32;"}, {"sha": "ab16a36db98d1c6234cac39e1f7d3cae0614bc38", "filename": "gcc/ada/g-crc32.ads", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fg-crc32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fg-crc32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-crc32.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -0,0 +1,117 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--                           G N A T . C R C 3 2                            --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision$\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides routines for computing a commonly used checksum\n+--  called CRC-32. This is a checksum based on treating the binary data\n+--  as a polynomial over a binary field, and the exact specifications of\n+--  the CRC-32 algorithm are as follows:\n+--\n+--     Name   : \"CRC-32\"\n+--     Width  : 32\n+--     Poly   : 04C11DB7\n+--     Init   : FFFFFFFF\n+--     RefIn  : True\n+--     RefOut : True\n+--     XorOut : FFFFFFFF\n+--     Check  : CBF43926\n+--\n+--  Note that this is the algorithm used by PKZip, Ethernet and FDDI.\n+--\n+--  For more information about this algorithm see:\n+--\n+--  ftp://ftp.rocksoft.com/papers/crc_v3.txt\n+\n+--  \"A Painless Guide to CRC Error Detection Algorithms\", Ross N. Williams\n+--\n+--  \"Computation of Cyclic Redundancy Checks via Table Look-Up\", Communications\n+--  of the ACM, Vol. 31 No. 8, pp.1008-1013 Aug. 1988. Sarwate, D.V.\n+\n+with Ada.Streams;\n+with Interfaces;\n+with System.CRC32;\n+\n+package GNAT.CRC32 is\n+\n+   subtype CRC32 is System.CRC32.CRC32;\n+   --  Used to represent CRC32 values, which are 32 bit bit-strings\n+\n+   procedure Initialize (C : out CRC32)\n+     renames System.CRC32.Initialize;\n+   --  Initialize CRC value by assigning the standard Init value (16#FFFF_FFFF)\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : Character)\n+     renames System.CRC32.Update;\n+   --  Evolve CRC by including the contribution from Character'Pos (Value)\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : String);\n+   pragma Inline (Update);\n+   --  For each character in the Value string call above routine\n+\n+   procedure Wide_Update\n+     (C     : in out CRC32;\n+      Value : Wide_Character);\n+   pragma Inline (Update);\n+   --  Evolve CRC by including the contribution from Wide_Character'Pos (Value)\n+   --  with the bytes being included in the natural memory order.\n+\n+   procedure Wide_Update\n+     (C     : in out CRC32;\n+      Value : Wide_String);\n+   pragma Inline (Update);\n+   --  For each character in the Value string call above routine\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : Ada.Streams.Stream_Element);\n+   pragma Inline (Update);\n+   --  Evolve CRC by including the contribution from Value\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : Ada.Streams.Stream_Element_Array);\n+   pragma Inline (Update);\n+   --  For each element in the Value array call above routine\n+\n+   function Get_Value (C : CRC32) return Interfaces.Unsigned_32\n+     renames System.CRC32.Get_Value;\n+   --  Get_Value computes the CRC32 value by performing an XOR with the\n+   --  standard XorOut value (16#FFFF_FFFF). Note that this does not\n+   --  change the value of C, so it may be used to retrieve intermediate\n+   --  values of the CRC32 value during a sequence of Update calls.\n+\n+end GNAT.CRC32;"}, {"sha": "f5446e8f6ee5c62943443e61092237ba4c209b8b", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.37 $\n+--                            $Revision$\n --                                                                          --\n --           Copyright (C) 1992-2001 Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -352,7 +352,7 @@ procedure Gnatls is\n          FS     := Tmp1;\n          Status := OK;\n \n-      elsif Get_File_Checksum (FS) = Checksum then\n+      elsif Checksums_Match (Get_File_Checksum (FS), Checksum) then\n          FS := Tmp1;\n          Status := Checksum_OK;\n "}, {"sha": "9287832366cb9c64d2e399289d86453ab8845228", "filename": "gcc/ada/gnatvsn.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fgnatvsn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fgnatvsn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatvsn.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.2068 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -54,7 +54,7 @@ package Gnatvsn is\n    --  value should never be decreased in the future, but it would be\n    --  OK to increase it if absolutely necessary.\n \n-   Library_Version : constant String := \"GNAT Lib v3.15 \";\n+   Library_Version : constant String := \"GNAT Lib v3.15a\";\n    --  Library version. This value must be updated whenever any change to the\n    --  compiler affects the library formats in such a way as to obsolete\n    --  previously compiled library modules."}, {"sha": "75621d765a4a330b6059aa6d55fa9318ef2c5323", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.14 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -411,7 +411,7 @@ package Lib.Writ is\n    --      time stamp representation.\n \n    --      The checksum is an 8-hex digit representation of the source\n-   --      file checksum, with letters given in upper case.\n+   --      file checksum, with letters given in lower case.\n \n    --      The subunit name is present only if the dependency line is for\n    --      a subunit. It contains the fully qualified name of the subunit"}, {"sha": "120914b3c00b0de879172e617b3bcfb4a1f13da7", "filename": "gcc/ada/s-crc32.adb", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fs-crc32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fs-crc32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crc32.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -0,0 +1,139 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M  . C R C 3 2                          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision$\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.CRC32 is\n+\n+   Init   : constant CRC32 := 16#FFFF_FFFF#;  -- Initial value\n+   XorOut : constant CRC32 := 16#FFFF_FFFF#;  -- To compute final result.\n+\n+   --  The following table contains precomputed values for contributions\n+   --  from various possible byte values. Doing a table lookup is quicker\n+   --  than processing the byte bit by bit.\n+\n+   Table : array (CRC32 range 0 .. 255) of CRC32 :=\n+     (16#0000_0000#, 16#7707_3096#, 16#EE0E_612C#, 16#9909_51BA#,\n+      16#076D_C419#, 16#706A_F48F#, 16#E963_A535#, 16#9E64_95A3#,\n+      16#0EDB_8832#, 16#79DC_B8A4#, 16#E0D5_E91E#, 16#97D2_D988#,\n+      16#09B6_4C2B#, 16#7EB1_7CBD#, 16#E7B8_2D07#, 16#90BF_1D91#,\n+      16#1DB7_1064#, 16#6AB0_20F2#, 16#F3B9_7148#, 16#84BE_41DE#,\n+      16#1ADA_D47D#, 16#6DDD_E4EB#, 16#F4D4_B551#, 16#83D3_85C7#,\n+      16#136C_9856#, 16#646B_A8C0#, 16#FD62_F97A#, 16#8A65_C9EC#,\n+      16#1401_5C4F#, 16#6306_6CD9#, 16#FA0F_3D63#, 16#8D08_0DF5#,\n+      16#3B6E_20C8#, 16#4C69_105E#, 16#D560_41E4#, 16#A267_7172#,\n+      16#3C03_E4D1#, 16#4B04_D447#, 16#D20D_85FD#, 16#A50A_B56B#,\n+      16#35B5_A8FA#, 16#42B2_986C#, 16#DBBB_C9D6#, 16#ACBC_F940#,\n+      16#32D8_6CE3#, 16#45DF_5C75#, 16#DCD6_0DCF#, 16#ABD1_3D59#,\n+      16#26D9_30AC#, 16#51DE_003A#, 16#C8D7_5180#, 16#BFD0_6116#,\n+      16#21B4_F4B5#, 16#56B3_C423#, 16#CFBA_9599#, 16#B8BD_A50F#,\n+      16#2802_B89E#, 16#5F05_8808#, 16#C60C_D9B2#, 16#B10B_E924#,\n+      16#2F6F_7C87#, 16#5868_4C11#, 16#C161_1DAB#, 16#B666_2D3D#,\n+      16#76DC_4190#, 16#01DB_7106#, 16#98D2_20BC#, 16#EFD5_102A#,\n+      16#71B1_8589#, 16#06B6_B51F#, 16#9FBF_E4A5#, 16#E8B8_D433#,\n+      16#7807_C9A2#, 16#0F00_F934#, 16#9609_A88E#, 16#E10E_9818#,\n+      16#7F6A_0DBB#, 16#086D_3D2D#, 16#9164_6C97#, 16#E663_5C01#,\n+      16#6B6B_51F4#, 16#1C6C_6162#, 16#8565_30D8#, 16#F262_004E#,\n+      16#6C06_95ED#, 16#1B01_A57B#, 16#8208_F4C1#, 16#F50F_C457#,\n+      16#65B0_D9C6#, 16#12B7_E950#, 16#8BBE_B8EA#, 16#FCB9_887C#,\n+      16#62DD_1DDF#, 16#15DA_2D49#, 16#8CD3_7CF3#, 16#FBD4_4C65#,\n+      16#4DB2_6158#, 16#3AB5_51CE#, 16#A3BC_0074#, 16#D4BB_30E2#,\n+      16#4ADF_A541#, 16#3DD8_95D7#, 16#A4D1_C46D#, 16#D3D6_F4FB#,\n+      16#4369_E96A#, 16#346E_D9FC#, 16#AD67_8846#, 16#DA60_B8D0#,\n+      16#4404_2D73#, 16#3303_1DE5#, 16#AA0A_4C5F#, 16#DD0D_7CC9#,\n+      16#5005_713C#, 16#2702_41AA#, 16#BE0B_1010#, 16#C90C_2086#,\n+      16#5768_B525#, 16#206F_85B3#, 16#B966_D409#, 16#CE61_E49F#,\n+      16#5EDE_F90E#, 16#29D9_C998#, 16#B0D0_9822#, 16#C7D7_A8B4#,\n+      16#59B3_3D17#, 16#2EB4_0D81#, 16#B7BD_5C3B#, 16#C0BA_6CAD#,\n+      16#EDB8_8320#, 16#9ABF_B3B6#, 16#03B6_E20C#, 16#74B1_D29A#,\n+      16#EAD5_4739#, 16#9DD2_77AF#, 16#04DB_2615#, 16#73DC_1683#,\n+      16#E363_0B12#, 16#9464_3B84#, 16#0D6D_6A3E#, 16#7A6A_5AA8#,\n+      16#E40E_CF0B#, 16#9309_FF9D#, 16#0A00_AE27#, 16#7D07_9EB1#,\n+      16#F00F_9344#, 16#8708_A3D2#, 16#1E01_F268#, 16#6906_C2FE#,\n+      16#F762_575D#, 16#8065_67CB#, 16#196C_3671#, 16#6E6B_06E7#,\n+      16#FED4_1B76#, 16#89D3_2BE0#, 16#10DA_7A5A#, 16#67DD_4ACC#,\n+      16#F9B9_DF6F#, 16#8EBE_EFF9#, 16#17B7_BE43#, 16#60B0_8ED5#,\n+      16#D6D6_A3E8#, 16#A1D1_937E#, 16#38D8_C2C4#, 16#4FDF_F252#,\n+      16#D1BB_67F1#, 16#A6BC_5767#, 16#3FB5_06DD#, 16#48B2_364B#,\n+      16#D80D_2BDA#, 16#AF0A_1B4C#, 16#3603_4AF6#, 16#4104_7A60#,\n+      16#DF60_EFC3#, 16#A867_DF55#, 16#316E_8EEF#, 16#4669_BE79#,\n+      16#CB61_B38C#, 16#BC66_831A#, 16#256F_D2A0#, 16#5268_E236#,\n+      16#CC0C_7795#, 16#BB0B_4703#, 16#2202_16B9#, 16#5505_262F#,\n+      16#C5BA_3BBE#, 16#B2BD_0B28#, 16#2BB4_5A92#, 16#5CB3_6A04#,\n+      16#C2D7_FFA7#, 16#B5D0_CF31#, 16#2CD9_9E8B#, 16#5BDE_AE1D#,\n+      16#9B64_C2B0#, 16#EC63_F226#, 16#756A_A39C#, 16#026D_930A#,\n+      16#9C09_06A9#, 16#EB0E_363F#, 16#7207_6785#, 16#0500_5713#,\n+      16#95BF_4A82#, 16#E2B8_7A14#, 16#7BB1_2BAE#, 16#0CB6_1B38#,\n+      16#92D2_8E9B#, 16#E5D5_BE0D#, 16#7CDC_EFB7#, 16#0BDB_DF21#,\n+      16#86D3_D2D4#, 16#F1D4_E242#, 16#68DD_B3F8#, 16#1FDA_836E#,\n+      16#81BE_16CD#, 16#F6B9_265B#, 16#6FB0_77E1#, 16#18B7_4777#,\n+      16#8808_5AE6#, 16#FF0F_6A70#, 16#6606_3BCA#, 16#1101_0B5C#,\n+      16#8F65_9EFF#, 16#F862_AE69#, 16#616B_FFD3#, 16#166C_CF45#,\n+      16#A00A_E278#, 16#D70D_D2EE#, 16#4E04_8354#, 16#3903_B3C2#,\n+      16#A767_2661#, 16#D060_16F7#, 16#4969_474D#, 16#3E6E_77DB#,\n+      16#AED1_6A4A#, 16#D9D6_5ADC#, 16#40DF_0B66#, 16#37D8_3BF0#,\n+      16#A9BC_AE53#, 16#DEBB_9EC5#, 16#47B2_CF7F#, 16#30B5_FFE9#,\n+      16#BDBD_F21C#, 16#CABA_C28A#, 16#53B3_9330#, 16#24B4_A3A6#,\n+      16#BAD0_3605#, 16#CDD7_0693#, 16#54DE_5729#, 16#23D9_67BF#,\n+      16#B366_7A2E#, 16#C461_4AB8#, 16#5D68_1B02#, 16#2A6F_2B94#,\n+      16#B40B_BE37#, 16#C30C_8EA1#, 16#5A05_DF1B#, 16#2D02_EF8D#);\n+\n+   ---------------\n+   -- Get_Value --\n+   ---------------\n+\n+   function Get_Value (C : CRC32) return Interfaces.Unsigned_32 is\n+   begin\n+      return Interfaces.Unsigned_32 (C xor XorOut);\n+   end Get_Value;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize (C : out CRC32) is\n+   begin\n+      C := Init;\n+   end Initialize;\n+\n+   ------------\n+   -- Update --\n+   ------------\n+\n+   procedure Update (C : in out CRC32; Value : Character) is\n+      V : constant CRC32 := CRC32 (Character'Pos (Value));\n+\n+   begin\n+      C := Shift_Right (C, 8) xor Table (V xor (C and 16#0000_00FF#));\n+   end Update;\n+\n+end System.CRC32;"}, {"sha": "07ad1b552f33676a246459c3aef59f694412a8a6", "filename": "gcc/ada/s-crc32.ads", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fs-crc32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fs-crc32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crc32.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -0,0 +1,84 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M  . C R C 3 2                          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision$\n+--                                                                          --\n+--              Copyright (C) 2001 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides routines for computing a commonly used checksum\n+--  called CRC-32. This is a checksum based on treating the binary data\n+--  as a polynomial over a binary field, and the exact specifications of\n+--  the CRC-32 algorithm are as follows:\n+--\n+--     Name   : \"CRC-32\"\n+--     Width  : 32\n+--     Poly   : 04C11DB7\n+--     Init   : FFFFFFFF\n+--     RefIn  : True\n+--     RefOut : True\n+--     XorOut : FFFFFFFF\n+--     Check  : CBF43926\n+--\n+--  Note that this is the algorithm used by PKZip, Ethernet and FDDI.\n+--\n+--  For more information about this algorithm see:\n+--\n+--  ftp://ftp.rocksoft.com/papers/crc_v3.txt\n+\n+--  \"A Painless Guide to CRC Error Detection Algorithms\", Ross N. Williams\n+--\n+--  \"Computation of Cyclic Redundancy Checks via Table Look-Up\", Communications\n+--  of the ACM, Vol. 31 No. 8, pp.1008-1013 Aug. 1988. Sarwate, D.V.\n+\n+with Interfaces;\n+\n+package System.CRC32 is\n+\n+   type CRC32 is new Interfaces.Unsigned_32;\n+   --  Used to represent CRC32 values, which are 32 bit bit-strings\n+\n+   procedure Initialize (C : out CRC32);\n+   pragma Inline (Initialize);\n+   --  Initialize CRC value by assigning the standard Init value (16#FFFF_FFFF)\n+\n+   procedure Update\n+     (C     : in out CRC32;\n+      Value : Character);\n+   pragma Inline (Update);\n+   --  Evolve CRC by including the contribution from Character'Pos (Value)\n+\n+   function Get_Value (C : CRC32) return Interfaces.Unsigned_32;\n+   pragma Inline (Get_Value);\n+   --  Get_Value computes the CRC32 value by performing an XOR with the\n+   --  standard XorOut value (16#FFFF_FFFF). Note that this does not\n+   --  change the value of C, so it may be used to retrieve intermediate\n+   --  values of the CRC32 value during a sequence of Update calls.\n+\n+end System.CRC32;"}, {"sha": "a68cbbfe37521b5727d4de994c4b0d9a12d19ba0", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.32 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@\n ------------------------------------------------------------------------------\n \n with Types; use Types;\n+\n package Scans is\n \n --  The scanner maintains a current state in the global variables defined\n@@ -342,8 +343,8 @@ package Scans is\n    --  recovery circuits which depend on looking at the column line up.\n \n    Checksum : Word;\n-   --  Used to accumulate a checksum representing the tokens in the source\n-   --  file being compiled. This checksum includes only program tokens, and\n+   --  Used to accumulate a CRC representing the tokens in the source\n+   --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n \n    First_Non_Blank_Location : Source_Ptr;"}, {"sha": "d1fc9ea325f19903f387d89f42e0f0ee27482ce8", "filename": "gcc/ada/scn-nlit.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn-nlit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn-nlit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn-nlit.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.32 $                             --\n+--                            $Revision$                             --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--           Copyright (C) 1992-2001 Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "b60ffc22f117a088ed14a4f2b29cd533e5b9a5fe", "filename": "gcc/ada/scn-slit.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn-slit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn-slit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn-slit.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.29 $                             --\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "af6668af5c1bcc8b078c635633ecc374d8762aae", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.111 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -39,6 +39,7 @@ with Snames;   use Snames;\n with Style;\n with Widechar; use Widechar;\n \n+with System.CRC32;\n with System.WCh_Con; use System.WCh_Con;\n \n package body Scn is\n@@ -73,6 +74,10 @@ package body Scn is\n    --  are scanned. We use the character code rather than the ASCII characters\n    --  so that the checksum is independent of wide character encoding method.\n \n+   procedure Initialize_Checksum;\n+   pragma Inline (Initialize_Checksum);\n+   --  Initialize checksum value\n+\n    procedure Check_End_Of_Line;\n    --  Called when end of line encountered. Checks that line is not\n    --  too long, and that other style checks for the end of line are met.\n@@ -135,20 +140,13 @@ package body Scn is\n \n    procedure Accumulate_Checksum (C : Character) is\n    begin\n-      Checksum := Checksum + Checksum + Character'Pos (C);\n-\n-      if Checksum > 16#8000_0000# then\n-         Checksum := (Checksum + 1) and 16#7FFF_FFFF#;\n-      end if;\n+      System.CRC32.Update (System.CRC32.CRC32 (Checksum), C);\n    end Accumulate_Checksum;\n \n    procedure Accumulate_Checksum (C : Char_Code) is\n    begin\n-      Checksum := Checksum + Checksum + Char_Code'Pos (C);\n-\n-      if Checksum > 16#8000_0000# then\n-         Checksum := (Checksum + 1) and 16#7FFF_FFFF#;\n-      end if;\n+      Accumulate_Checksum (Character'Val (C / 256));\n+      Accumulate_Checksum (Character'Val (C mod 256));\n    end Accumulate_Checksum;\n \n    -----------------------\n@@ -367,6 +365,15 @@ package body Scn is\n       Error_Msg_S (\"two consecutive underlines not permitted\");\n    end Error_No_Double_Underline;\n \n+   -------------------------\n+   -- Initialize_Checksum --\n+   -------------------------\n+\n+   procedure Initialize_Checksum is\n+   begin\n+      System.CRC32.Initialize (System.CRC32.CRC32 (Checksum));\n+   end Initialize_Checksum;\n+\n    ------------------------\n    -- Initialize_Scanner --\n    ------------------------\n@@ -465,7 +472,8 @@ package body Scn is\n       Token_Name                := No_Name;\n       Start_Column              := Set_Start_Column;\n       First_Non_Blank_Location  := Scan_Ptr;\n-      Checksum                  := 0;\n+\n+      Initialize_Checksum;\n \n       --  Set default for Comes_From_Source. All nodes built now until we\n       --  reenter the analyzer will have Comes_From_Source set to True"}, {"sha": "b842790bc1016d2e93f44e48f41892dd8d7a5c97", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.69 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -274,34 +274,18 @@ package Sinput is\n    --  minus-minus sequence starting a comment, and all control characters\n    --  except ESC.\n \n-   --  These characters are used to compute a 31-bit checksum which is stored\n-   --  in the variable Scans.Checksum, as follows:\n-\n-   --    If a character, C, is not part of a wide character sequence, then\n-   --    either the character itself, or its lower case equivalent if it\n-   --    is a letter outside a string literal is used in the computation:\n-\n-   --      Checksum := Checksum + Checksum + Character'Pos (C);\n-   --      if Checksum > 16#8000_0000# then\n-   --         Checksum := (Checksum + 1) and 16#7FFF_FFFF#;\n-   --      end if;\n-\n-   --    For a wide character sequence, the checksum is computed using the\n-   --    corresponding character code value C, as follows:\n-\n-   --      Checksum := Checksum + Checksum + Char_Code'Pos (C);\n-   --      if Checksum > 16#8000_0000# then\n-   --         Checksum := (Checksum + 1) and 16#7FFF_FFFF#;\n-   --      end if;\n+   --  The checksum algorithm used is the standard CRC-32 algorithm, as\n+   --  implemented by System.CRC32, except that we do not bother with the\n+   --  final XOR with all 1 bits.\n \n    --  This algorithm ensures that the checksum includes all semantically\n    --  significant aspects of the program represented by the source file,\n    --  but is insensitive to layout, presence or contents of comments, wide\n    --  character representation method, or casing conventions outside strings.\n \n-   --  Scans.Checksum is initialized to zero at the start of scanning a file,\n-   --  and copied into the Source_Checksum field of the file table entry when\n-   --  the end of file is encountered.\n+   --  Scans.Checksum is initialized appropriately at the start of scanning\n+   --  a file, and copied into the Source_Checksum field of the file table\n+   --  entry when the end of file is encountered.\n \n    -------------------------------------\n    -- Handling Generic Instantiations --"}, {"sha": "2ab0c5b3d05b257e21b52b5d45956ad7bfa80691", "filename": "gcc/ada/types.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Ftypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Ftypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.adb?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.20 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -140,7 +140,7 @@ package body Types is\n    --------------------\n \n    subtype Wordh is Word range 0 .. 15;\n-   Hex : constant array (Wordh) of Character := \"0123456789ABCDEF\";\n+   Hex : constant array (Wordh) of Character := \"0123456789abcdef\";\n \n    function Get_Hex_String (W : Word) return Word_Hex_String is\n       X  : Word := W;"}, {"sha": "77b22198b728a626c3feb027448fd2b1cf751509", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.87 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -121,7 +121,7 @@ pragma Preelaborate (Types);\n    --  Procedure for freeing dynamically allocated String values\n \n    subtype Word_Hex_String is String (1 .. 8);\n-   --  Type used to represent Word value as 8 hex digits, with upper case\n+   --  Type used to represent Word value as 8 hex digits, with lower case\n    --  letters for the alphabetic cases.\n \n    function Get_Hex_String (W : Word) return Word_Hex_String;"}]}