{"sha": "fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4ZmZkMTA5YTA5OGQ2NjgyZTA2ODdlZTA4M2ZhMWMzYjgwZDBiNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-05-08T12:10:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-05-08T12:10:48Z"}, "message": "type_traits (make_signed): Remove specializations for floating point types.\n\n2007-05-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/type_traits (make_signed): Remove specializations\n\tfor floating point types.\n\t(make_unsigned): Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Fix.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Same.\n\nFrom-SVN: r124543", "tree": {"sha": "d25b7c3e4197458a7f88e1fbbf52ce478bfabb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d25b7c3e4197458a7f88e1fbbf52ce478bfabb01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/comments", "author": null, "committer": null, "parents": [{"sha": "1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e4ca1808800d4afb40f8a46caeba46cd405f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9e4ca1808800d4afb40f8a46caeba46cd405f7"}], "stats": {"total": 83, "additions": 22, "deletions": 61}, "files": [{"sha": "a7f62f99ed64e222d80337ab27fb753e18c5e8a5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -1,3 +1,15 @@\n+2007-05-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/type_traits (make_signed): Remove specializations\n+\tfor floating point types.\n+\t(make_unsigned): Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Fix.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Same.\n+\t\n 2007-05-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/26_numerics/headers/cmath/types_std_c++0x_neg.cc: New."}, {"sha": "6806ebc255e56cc60f9425f917e97a59b6ab886e", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -185,21 +185,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __cv_unsigned::__type __type;\n     };\n \n-  template<typename _Tp>\n-    struct __make_unsigned_selector<_Tp, false, true, false>\n-    {\n-    private:\n-      // GNU floating point types start with sizeof int.\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned int);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned long);\n-      typedef conditional<__b2, unsigned long, unsigned long long> __cond;\n-      typedef typename __cond::type __cond_type;\n-      typedef unsigned int __ui_type;\n-\n-    public:\n-      typedef typename conditional<__b1, __ui_type, __cond_type>::type __type;\n-    };\n-\n   template<typename _Tp>\n     struct __make_unsigned_selector<_Tp, false, false, true>\n     {\n@@ -260,7 +245,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { typedef signed long long __type; };\n \n \n-  // Select between arithmetic and enum: not possible to be both.\n+  // Select between integral and enum: not possible to be both.\n   template<typename _Tp, \n \t   bool _IsInt = is_integral<_Tp>::value,\n \t   bool _IsSigned = is_signed<_Tp>::value,\n@@ -283,20 +268,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __cv_signed::__type __type;\n     };\n \n-  template<typename _Tp>\n-    struct __make_signed_selector<_Tp, false, true, false>\n-    {\n-      // GNU floating point types start with sizeof int.\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(signed int);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(signed long);\n-      typedef conditional<__b2, signed long, signed long long> __cond;\n-      typedef typename __cond::type __cond_type;\n-      typedef unsigned int __i_type;\n-\n-    public:\n-      typedef typename conditional<__b1, __i_type, __cond_type>::type __type;\n-    };\n-\n   template<typename _Tp>\n     struct __make_signed_selector<_Tp, false, false, true>\n     {"}, {"sha": "43fc33a6fd2eb74c22e35510dbbf1b54b32a52b6", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -50,13 +50,6 @@ void test01()\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n   VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n \n-#if 0\n-  // XXX \n-  // When is_signed works for floating points types this should pass\n-  typedef make_signed<volatile float>::type  \ttest24_type;\n-  VERIFY( (is_same<test24_type, volatile int>::value) );\n-#endif\n-\n   typedef make_signed<test_enum>::type  \ttest25_type;\n   VERIFY( (is_same<test25_type, int>::value) );\n }"}, {"sha": "4dd9bb6e5b695478bd618155a8bf4d8c939bb5dc", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -50,13 +50,6 @@ void test01()\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n   VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n \n-#if 0\n-  // XXX \n-  // When is_signed works for floating points types this should pass\n-  typedef make_signed<volatile float>::type  \ttest24_type;\n-  VERIFY( (is_same<test24_type, volatile int>::value) );\n-#endif\n-\n   typedef make_signed<test_enum>::type  \ttest25_type;\n   VERIFY( (is_same<test25_type, short>::value) );\n }"}, {"sha": "063c12eb30b872f56779917e400c25f206174792", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -39,15 +39,18 @@ void test01()\n \n   typedef void (fn_type) ();\n   typedef make_signed<fn_type>::type  \ttest4_type;\n+\n+  typedef make_signed<float>::type  \ttest5_type;\n }\n \n // { dg-error \"does not name a type\" \"\" { target *-*-* } 34 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 320 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 268 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 291 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 253 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "e204c55f4fd383d964294cc4213ec736e7a44dd4", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -50,13 +50,6 @@ void test01()\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n   VERIFY( (is_same<test23_type, volatile unsigned wchar_t>::value) );\n \n-#if 0\n-  // XXX \n-  // When is_unsigned works for floating points types this should pass\n-  typedef make_unsigned<volatile float>::type  \ttest24_type;\n-  VERIFY( (is_same<test24_type, volatile unsigned int>::value) );\n-#endif\n-\n   typedef make_unsigned<test_enum>::type  \ttest25_type;\n   VERIFY( (is_same<test25_type, unsigned int>::value) );\n }"}, {"sha": "5038f81e657281c3f6b6d9fd170da8aaefa981ca", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -50,13 +50,6 @@ void test01()\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n   VERIFY( (is_same<test23_type, volatile unsigned wchar_t>::value) );\n \n-#if 0\n-  // XXX \n-  // When is_unsigned works for floating points types this should pass\n-  typedef make_unsigned<volatile float>::type  \ttest24_type;\n-  VERIFY( (is_same<test24_type, volatile unsigned int>::value) );\n-#endif\n-\n   typedef make_unsigned<test_enum>::type  \ttest25_type;\n   VERIFY( (is_same<test25_type, unsigned short>::value) );\n }"}, {"sha": "79277a7b0c62007044dbb9a79bf21b405ae1cd6b", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8ffd109a098d6682e0687ee083fa1c3b80d0b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=fb8ffd109a098d6682e0687ee083fa1c3b80d0b4", "patch": "@@ -39,14 +39,17 @@ void test01()\n \n   typedef void (fn_type) ();\n   typedef make_unsigned<fn_type>::type  \ttest4_type;\n+\n+  typedef make_unsigned<float>::type  \t\ttest5_type;\n }\n \n // { dg-error \"does not name a type\" \"\" { target *-*-* } 34 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 38 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 223 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 208 }\n // { dg-error \"declaration of\" \"\" { target *-*-* } 170 }\n \n // { dg-excess-errors \"At global scope\" }"}]}