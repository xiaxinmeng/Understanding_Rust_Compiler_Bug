{"sha": "fe77449a165426dfd6793158bc15204736ddd783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3NzQ0OWExNjU0MjZkZmQ2NzkzMTU4YmMxNTIwNDczNmRkZDc4Mw==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2003-01-09T05:23:55Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2003-01-09T05:23:55Z"}, "message": "i386.c (ix86_attribute_table): Add new attributes ms_struct and gcc_struct.\n\n\t* config/i386/i386.c (ix86_attribute_table): Add new attributes\n\tms_struct and gcc_struct.\n\t(ix86_handle_struct_attribute): New function.\n\t(ix86_ms_bitfield_layout_p): Update to take new attributes\n\tinto account.\n\t* doc/extend.texi: Document new attributes.\n\t* testsuite/gcc.dg/bf-ms-attrib.c: New test.\n\nFrom-SVN: r61072", "tree": {"sha": "b72f87fe5a93707fed09664a945fd2d2b191832f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72f87fe5a93707fed09664a945fd2d2b191832f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe77449a165426dfd6793158bc15204736ddd783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe77449a165426dfd6793158bc15204736ddd783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe77449a165426dfd6793158bc15204736ddd783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe77449a165426dfd6793158bc15204736ddd783/comments", "author": null, "committer": null, "parents": [{"sha": "984179689f29e1a1d257e1aa63bdaca9c0ec89b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984179689f29e1a1d257e1aa63bdaca9c0ec89b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984179689f29e1a1d257e1aa63bdaca9c0ec89b2"}], "stats": {"total": 137, "additions": 135, "deletions": 2}, "files": [{"sha": "8ba806e23549af1b28ce3c6941af175069f236ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe77449a165426dfd6793158bc15204736ddd783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe77449a165426dfd6793158bc15204736ddd783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe77449a165426dfd6793158bc15204736ddd783", "patch": "@@ -1,3 +1,13 @@\n+2003-01-08  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/i386/i386.c (ix86_attribute_table): Add new attributes\n+\tms_struct and gcc_struct.\n+\t(ix86_handle_struct_attribute): New function.\n+\t(ix86_ms_bitfield_layout_p): Update to take new attributes\n+\tinto account.\n+\t* doc/extend.texi: Document new attributes.\n+\t* testsuite/gcc.dg/bf-ms-attrib.c: New test.\n+\n 2003-01-08  Danny Smith  <dannysmith@users.sourceforge.net>\n \n         PR optimization/8750"}, {"sha": "682fa897d0b077067a1d7df166b9fdb48f23e58a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fe77449a165426dfd6793158bc15204736ddd783", "patch": "@@ -870,6 +870,7 @@ static tree ix86_handle_cdecl_attribute PARAMS ((tree *, tree, tree, int, bool *\n static tree ix86_handle_regparm_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static int ix86_value_regno PARAMS ((enum machine_mode));\n static bool ix86_ms_bitfield_layout_p PARAMS ((tree));\n+static tree ix86_handle_struct_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static int extended_reg_mentioned_1 PARAMS ((rtx *, void *));\n \n #if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n@@ -1456,6 +1457,8 @@ const struct attribute_spec ix86_attribute_table[] =\n   { \"dllexport\", 0, 0, false, false, false, ix86_handle_dll_attribute },\n   { \"shared\",    0, 0, true,  false, false, ix86_handle_shared_attribute },\n #endif\n+  { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n+  { \"gcc_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n \n@@ -14531,11 +14534,52 @@ x86_order_regs_for_local_alloc ()\n #define TARGET_USE_MS_BITFIELD_LAYOUT 0\n #endif\n \n+/* Handle a \"ms_struct\" or \"gcc_struct\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+ix86_handle_struct_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  tree *type = NULL;\n+  if (DECL_P (*node))\n+    {\n+      if (TREE_CODE (*node) == TYPE_DECL)\n+\ttype = &TREE_TYPE (*node);\n+    }\n+  else\n+    type = node;\n+\n+  if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n+\t\t || TREE_CODE (*type) == UNION_TYPE)))\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  else if ((is_attribute_p (\"ms_struct\", name)\n+\t    && lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (*type)))\n+\t   || ((is_attribute_p (\"gcc_struct\", name)\n+\t\t&& lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n+    {\n+      warning (\"`%s' incompatible attribute ignored\",\n+               IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n static bool\n ix86_ms_bitfield_layout_p (record_type)\n-     tree record_type ATTRIBUTE_UNUSED;\n+     tree record_type;\n {\n-  return TARGET_USE_MS_BITFIELD_LAYOUT;\n+  return (TARGET_USE_MS_BITFIELD_LAYOUT &&\n+      !lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (record_type)))\n+    || lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (record_type));\n }\n \n /* Returns an expression indicating where the this parameter is"}, {"sha": "26817b0ca66c5ff184bc7c96f566f134dd11d4d6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fe77449a165426dfd6793158bc15204736ddd783", "patch": "@@ -3212,6 +3212,26 @@ Medium and large model objects may live anywhere in the 32-bit address space\n (the compiler will generate @code{seth/add3} instructions to load their\n addresses).\n \n+@subsection i386 Variable Attributes\n+\n+Two attributes are currently defined for i386 configurations:\n+@code{ms_struct} and @code{gcc_struct}\n+\n+@item ms_struct\n+@itemx gcc_struct\n+@cindex @code{ms_struct}\n+@cindex @code{gcc_struct}\n+\n+If @code{packed} is used on a structure, or if bit-fields are used\n+it may be that the Microsoft ABI packs them differently\n+than GCC would normally pack them.  Particularly when moving packed\n+data between functions compiled with GCC and the native Microsoft compiler\n+(either via function call or as data in a file), it may be necessary to access\n+either format.\n+\n+Currently @option{-m[no-]ms-bitfields} is provided for the Windows X86\n+compilers to match the native Microsoft compiler.\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the\n@@ -3471,6 +3491,26 @@ If you replaced @code{short_a} with @code{short} in the variable\n declaration, the above program would abort when compiled with\n @option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n above in recent GCC versions.\n+\n+@subsection i386 Type Attributes\n+\n+Two attributes are currently defined for i386 configurations:\n+@code{ms_struct} and @code{gcc_struct}\n+\n+@item ms_struct\n+@itemx gcc_struct\n+@cindex @code{ms_struct}\n+@cindex @code{gcc_struct}\n+\n+If @code{packed} is used on a structure, or if bit-fields are used\n+it may be that the Microsoft ABI packs them differently\n+than GCC would normally pack them.  Particularly when moving packed\n+data between functions compiled with GCC and the native Microsoft compiler\n+(either via function call or as data in a file), it may be necessary to access\n+either format.\n+\n+Currently @option{-m[no-]ms-bitfields} is provided for the Windows X86\n+compilers to match the native Microsoft compiler.\n @end table\n \n To specify multiple attributes, separate them by commas within the"}, {"sha": "5633476c0e70e9a4e97bd3d68a1103503e67a0db", "filename": "gcc/testsuite/gcc.dg/bf-ms-attrib.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe77449a165426dfd6793158bc15204736ddd783/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-attrib.c?ref=fe77449a165426dfd6793158bc15204736ddd783", "patch": "@@ -0,0 +1,39 @@\n+/* bf-ms-attrib.c */\n+/* Adapted from Donn Terry <donnte@microsoft.com> testcase\n+   posted to GCC-patches\n+   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */ \n+\n+/* { dg-do run { target *-*-interix* } } */\n+\n+/* We don't want the default \"pedantic-errors\" in this case, since we're\n+   testing nonstandard stuff to begin with. */\n+/* { dg-options \"-ansi\" } */\n+\n+#include <stdio.h>\n+\n+struct one_gcc {\n+  int d;\n+  unsigned char a;\n+  unsigned short b:7;\n+  char c;\t\n+} __attribute__((__gcc_struct__)) ;\n+\n+\n+struct one_ms {\n+  int d;\n+  unsigned char a;\n+  unsigned short b:7;\n+  char c;\t\n+} __attribute__((__ms_struct__));\n+\n+\n+main() \n+  {\n+    /* As long as the sizes are as expected, we know attributes are working.\n+       bf-ms-layout.c makes sure the right thing happens when the attribute\n+       is on. */\n+    if (sizeof(struct one_ms) != 12)\n+\tabort();\n+    if (sizeof(struct one_gcc) != 8)\n+\tabort();\n+  }"}]}