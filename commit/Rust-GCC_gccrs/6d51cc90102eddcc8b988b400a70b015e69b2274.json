{"sha": "6d51cc90102eddcc8b988b400a70b015e69b2274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1MWNjOTAxMDJlZGRjYzhiOTg4YjQwMGE3MGIwMTVlNjliMjI3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-02-02T15:58:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-02T15:58:38Z"}, "message": "mips.c (mips_one_only_stub): New class.\n\ngcc/\n\t* config/mips/mips.c (mips_one_only_stub): New class.\n\t(mips_need_mips16_rdhwr_p): Replace with...\n\t(mips16_rdhwr_stub): ...this new variable.\n\t(mips16_stub_call_address): New function.\n\t(mips16_rdhwr_one_only_stub): New class.\n\t(mips_expand_thread_pointer): Use mips16_stub_call_address.\n\t(mips_output_mips16_rdhwr): Delete.\n\t(mips_finish_stub): New function.\n\t(mips_code_end): Use it to handle rdhwr stubs.\n\nFrom-SVN: r207400", "tree": {"sha": "c02ccb5de1fcf0160a1ba6256cfdfcca20a9d28e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c02ccb5de1fcf0160a1ba6256cfdfcca20a9d28e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d51cc90102eddcc8b988b400a70b015e69b2274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d51cc90102eddcc8b988b400a70b015e69b2274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d51cc90102eddcc8b988b400a70b015e69b2274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d51cc90102eddcc8b988b400a70b015e69b2274/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c90f137151fc996489e9a5652bd59078a65f162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c90f137151fc996489e9a5652bd59078a65f162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c90f137151fc996489e9a5652bd59078a65f162"}], "stats": {"total": 104, "additions": 83, "deletions": 21}, "files": [{"sha": "3311e2b0a69dff807858283a31b0883f7db98c59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51cc90102eddcc8b988b400a70b015e69b2274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51cc90102eddcc8b988b400a70b015e69b2274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d51cc90102eddcc8b988b400a70b015e69b2274", "patch": "@@ -1,3 +1,15 @@\n+2014-02-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c (mips_one_only_stub): New class.\n+\t(mips_need_mips16_rdhwr_p): Replace with...\n+\t(mips16_rdhwr_stub): ...this new variable.\n+\t(mips16_stub_call_address): New function.\n+\t(mips16_rdhwr_one_only_stub): New class.\n+\t(mips_expand_thread_pointer): Use mips16_stub_call_address.\n+\t(mips_output_mips16_rdhwr): Delete.\n+\t(mips_finish_stub): New function.\n+\t(mips_code_end): Use it to handle rdhwr stubs.\n+\n 2014-02-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/60017"}, {"sha": "12cecde84736cd0c8e3b49f910c93de2f1400f2b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 71, "deletions": 21, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51cc90102eddcc8b988b400a70b015e69b2274/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51cc90102eddcc8b988b400a70b015e69b2274/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d51cc90102eddcc8b988b400a70b015e69b2274", "patch": "@@ -275,12 +275,27 @@ enum mips_builtin_type {\n enum mips_fp_condition {\n   MIPS_FP_CONDITIONS (DECLARE_MIPS_COND)\n };\n+#undef DECLARE_MIPS_COND\n \n /* Index X provides the string representation of MIPS_FP_COND_<X>.  */\n #define STRINGIFY(X) #X\n static const char *const mips_fp_conditions[] = {\n   MIPS_FP_CONDITIONS (STRINGIFY)\n };\n+#undef STRINGIFY\n+\n+/* A class used to control a comdat-style stub that we output in each\n+   translation unit that needs it.  */\n+class mips_one_only_stub {\n+public:\n+  virtual ~mips_one_only_stub () {}\n+\n+  /* Return the name of the stub.  */\n+  virtual const char *get_name () = 0;\n+\n+  /* Output the body of the function to asm_out_file.  */\n+  virtual void output_body () = 0;\n+};\n \n /* Tuning information that is automatically derived from other sources\n    (such as the scheduler).  */\n@@ -626,8 +641,8 @@ struct target_globals *mips16_globals;\n    and returned from mips_sched_reorder2.  */\n static int cached_can_issue_more;\n \n-/* True if the output uses __mips16_rdhwr.  */\n-static bool mips_need_mips16_rdhwr_p;\n+/* The stub for __mips16_rdhwr, if used.  */\n+static mips_one_only_stub *mips16_rdhwr_stub;\n \n /* Index R is the smallest register class that contains register R.  */\n const enum reg_class mips_regno_to_class[FIRST_PSEUDO_REGISTER] = {\n@@ -1606,6 +1621,45 @@ mips16_stub_function (const char *name)\n   SYMBOL_REF_FLAGS (x) |= (SYMBOL_FLAG_EXTERNAL | SYMBOL_FLAG_FUNCTION);\n   return x;\n }\n+\n+/* Return a legitimate call address for STUB, given that STUB is a MIPS16\n+   support function.  */\n+\n+static rtx\n+mips16_stub_call_address (mips_one_only_stub *stub)\n+{\n+  rtx fn = mips16_stub_function (stub->get_name ());\n+  SYMBOL_REF_FLAGS (fn) |= SYMBOL_FLAG_LOCAL;\n+  if (!call_insn_operand (fn, VOIDmode))\n+    fn = force_reg (Pmode, fn);\n+  return fn;\n+}\n+\f\n+/* A stub for moving the thread pointer into TLS_GET_TP_REGNUM.  */\n+\n+class mips16_rdhwr_one_only_stub : public mips_one_only_stub\n+{\n+  virtual const char *get_name ();\n+  virtual void output_body ();\n+};\n+\n+const char *\n+mips16_rdhwr_one_only_stub::get_name ()\n+{\n+  return \"__mips16_rdhwr\";\n+}\n+\n+void\n+mips16_rdhwr_one_only_stub::output_body ()\n+{\n+  fprintf (asm_out_file,\n+\t   \"\\t.set\\tpush\\n\"\n+\t   \"\\t.set\\tmips32r2\\n\"\n+\t   \"\\t.set\\tnoreorder\\n\"\n+\t   \"\\trdhwr\\t$3,$29\\n\"\n+\t   \"\\t.set\\tpop\\n\"\n+\t   \"\\tj\\t$31\\n\");\n+}\n \f\n /* Return true if symbols of type TYPE require a GOT access.  */\n \n@@ -3070,11 +3124,9 @@ mips_expand_thread_pointer (rtx tp)\n \n   if (TARGET_MIPS16)\n     {\n-      mips_need_mips16_rdhwr_p = true;\n-      fn = mips16_stub_function (\"__mips16_rdhwr\");\n-      SYMBOL_REF_FLAGS (fn) |= SYMBOL_FLAG_LOCAL;\n-      if (!call_insn_operand (fn, VOIDmode))\n-\tfn = force_reg (Pmode, fn);\n+      if (!mips16_rdhwr_stub)\n+\tmips16_rdhwr_stub = new mips16_rdhwr_one_only_stub ();\n+      fn = mips16_stub_call_address (mips16_rdhwr_stub);\n       emit_insn (PMODE_INSN (gen_tls_get_tp_mips16, (tp, fn)));\n     }\n   else\n@@ -6204,25 +6256,24 @@ mips_end_function_definition (const char *name)\n       fputs (\"\\n\", asm_out_file);\n     }\n }\n-\f\n-/* Output a definition of the __mips16_rdhwr function.  */\n+\n+/* If *STUB_PTR points to a stub, output a comdat-style definition for it,\n+   then free *STUB_PTR.  */\n \n static void\n-mips_output_mips16_rdhwr (void)\n+mips_finish_stub (mips_one_only_stub **stub_ptr)\n {\n-  const char *name;\n+  mips_one_only_stub *stub = *stub_ptr;\n+  if (!stub)\n+    return;\n \n-  name = \"__mips16_rdhwr\";\n+  const char *name = stub->get_name ();\n   mips_start_unique_function (name);\n   mips_start_function_definition (name, false);\n-  fprintf (asm_out_file,\n-\t   \"\\t.set\\tpush\\n\"\n-\t   \"\\t.set\\tmips32r2\\n\"\n-\t   \"\\t.set\\tnoreorder\\n\"\n-\t   \"\\trdhwr\\t$3,$29\\n\"\n-\t   \"\\t.set\\tpop\\n\"\n-\t   \"\\tj\\t$31\\n\");\n+  stub->output_body ();\n   mips_end_function_definition (name);\n+  delete stub;\n+  *stub_ptr = 0;\n }\n \f\n /* Return true if calls to X can use R_MIPS_CALL* relocations.  */\n@@ -8906,8 +8957,7 @@ mips_file_start (void)\n static void\n mips_code_end (void)\n {\n-  if (mips_need_mips16_rdhwr_p)\n-    mips_output_mips16_rdhwr ();\n+  mips_finish_stub (&mips16_rdhwr_stub);\n }\n \f\n /* Make the last instruction frame-related and note that it performs"}]}