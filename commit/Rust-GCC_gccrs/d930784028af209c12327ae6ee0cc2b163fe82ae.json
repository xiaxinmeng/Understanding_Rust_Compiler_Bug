{"sha": "d930784028af209c12327ae6ee0cc2b163fe82ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzMDc4NDAyOGFmMjA5YzEyMzI3YWU2ZWUwY2MyYjE2M2ZlODJhZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-11-18T10:05:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:05:58Z"}, "message": "sem_ch4.adb: Minor reformatting.\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Expand_Subtype_From_Expr): Add new formal\n\tparameter Related_Id and propagate it to Make_Subtype_From_Expr.\n\t(Make_Subtype_From_Expr): Add new formal parameter\n\tRelated_Id. Create external entities when requested by the caller.\n\t* exp_util.ads (Expand_Subtype_From_Expr): Add new formal\n\tparameter Related_Id. Update the comment on usage.\n\t(Make_Subtype_From_Expr): Add new formal parameter\n\tRelated_Id. Update the comment on usage.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Add local variable\n\tRelated_Id. Generate an external constrained subtype when the\n\tobject is a public symbol.\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Update the grammars of pragmas\n\tAbstract_State, Depends, Global, Initializes, Refined_Depends,\n\tRefined_Global and Refined_State.\n\nFrom-SVN: r230524", "tree": {"sha": "8f414e7247172af735290f8e76ecffe66d775ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f414e7247172af735290f8e76ecffe66d775ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d930784028af209c12327ae6ee0cc2b163fe82ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d930784028af209c12327ae6ee0cc2b163fe82ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d930784028af209c12327ae6ee0cc2b163fe82ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d930784028af209c12327ae6ee0cc2b163fe82ae/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5904016a5c1d7df58877678583a3f65ebecc052d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5904016a5c1d7df58877678583a3f65ebecc052d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5904016a5c1d7df58877678583a3f65ebecc052d"}], "stats": {"total": 144, "additions": 102, "deletions": 42}, "files": [{"sha": "1393a92c0beb9e9411c4dcd277c7545f01354fc7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -1,3 +1,27 @@\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Add new formal\n+\tparameter Related_Id and propagate it to Make_Subtype_From_Expr.\n+\t(Make_Subtype_From_Expr): Add new formal parameter\n+\tRelated_Id. Create external entities when requested by the caller.\n+\t* exp_util.ads (Expand_Subtype_From_Expr): Add new formal\n+\tparameter Related_Id. Update the comment on usage.\n+\t(Make_Subtype_From_Expr): Add new formal parameter\n+\tRelated_Id. Update the comment on usage.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Add local variable\n+\tRelated_Id. Generate an external constrained subtype when the\n+\tobject is a public symbol.\n+\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Update the grammars of pragmas\n+\tAbstract_State, Depends, Global, Initializes, Refined_Depends,\n+\tRefined_Global and Refined_State.\n+\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_util.adb (Has_Full_Default_Initialization):"}, {"sha": "3f10b9573fd1b34ed03bfe93d448c71e5e058208", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -2152,7 +2152,8 @@ package body Exp_Util is\n      (N             : Node_Id;\n       Unc_Type      : Entity_Id;\n       Subtype_Indic : Node_Id;\n-      Exp           : Node_Id)\n+      Exp           : Node_Id;\n+      Related_Id    : Entity_Id := Empty)\n    is\n       Loc     : constant Source_Ptr := Sloc (N);\n       Exp_Typ : constant Entity_Id  := Etype (Exp);\n@@ -2357,7 +2358,7 @@ package body Exp_Util is\n       else\n          Remove_Side_Effects (Exp);\n          Rewrite (Subtype_Indic,\n-           Make_Subtype_From_Expr (Exp, Unc_Type));\n+           Make_Subtype_From_Expr (Exp, Unc_Type, Related_Id));\n       end if;\n    end Expand_Subtype_From_Expr;\n \n@@ -6566,8 +6567,9 @@ package body Exp_Util is\n    --  3. If Expr is class-wide, creates an implicit class-wide subtype\n \n    function Make_Subtype_From_Expr\n-     (E       : Node_Id;\n-      Unc_Typ : Entity_Id) return Node_Id\n+     (E          : Node_Id;\n+      Unc_Typ    : Entity_Id;\n+      Related_Id : Entity_Id := Empty) return Node_Id\n    is\n       List_Constr : constant List_Id    := New_List;\n       Loc         : constant Source_Ptr := Sloc (E);\n@@ -6584,18 +6586,32 @@ package body Exp_Util is\n       if Is_Private_Type (Unc_Typ)\n         and then Has_Unknown_Discriminants (Unc_Typ)\n       then\n+         --  The caller requests a unque external name for both the private and\n+         --  the full subtype.\n+\n+         if Present (Related_Id) then\n+            Full_Subtyp :=\n+              Make_Defining_Identifier (Loc,\n+                Chars => New_External_Name (Chars (Related_Id), 'C'));\n+            Priv_Subtyp :=\n+              Make_Defining_Identifier (Loc,\n+                Chars => New_External_Name (Chars (Related_Id), 'P'));\n+\n+         else\n+            Full_Subtyp := Make_Temporary (Loc, 'C');\n+            Priv_Subtyp := Make_Temporary (Loc, 'P');\n+         end if;\n+\n          --  Prepare the subtype completion. Use the base type to find the\n          --  underlying type because the type may be a generic actual or an\n          --  explicit subtype.\n \n-         Utyp        := Underlying_Type (Base_Type (Unc_Typ));\n-         Full_Subtyp := Make_Temporary (Loc, 'C');\n-         Full_Exp    :=\n+         Utyp := Underlying_Type (Base_Type (Unc_Typ));\n+\n+         Full_Exp :=\n            Unchecked_Convert_To (Utyp, Duplicate_Subexpr_No_Checks (E));\n          Set_Parent (Full_Exp, Parent (E));\n \n-         Priv_Subtyp := Make_Temporary (Loc, 'P');\n-\n          Insert_Action (E,\n            Make_Subtype_Declaration (Loc,\n              Defining_Identifier => Full_Subtyp,"}, {"sha": "10fd70c7981808dfc9e9432b61431e5376943d29", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -445,10 +445,12 @@ package Exp_Util is\n      (N             : Node_Id;\n       Unc_Type      : Entity_Id;\n       Subtype_Indic : Node_Id;\n-      Exp           : Node_Id);\n+      Exp           : Node_Id;\n+      Related_Id    : Entity_Id := Empty);\n    --  Build a constrained subtype from the initial value in object\n    --  declarations and/or allocations when the type is indefinite (including\n-   --  class-wide).\n+   --  class-wide). Set Related_Id to request an external name for the subtype\n+   --  rather than an internal temporary.\n \n    function Finalize_Address (Typ : Entity_Id) return Entity_Id;\n    --  Locate TSS primitive Finalize_Address in type Typ. Return Empty if the\n@@ -780,11 +782,13 @@ package Exp_Util is\n    --  Predicate_Check is suppressed then a null statement is returned instead.\n \n    function Make_Subtype_From_Expr\n-     (E       : Node_Id;\n-      Unc_Typ : Entity_Id) return Node_Id;\n+     (E          : Node_Id;\n+      Unc_Typ    : Entity_Id;\n+      Related_Id : Entity_Id := Empty) return Node_Id;\n    --  Returns a subtype indication corresponding to the actual type of an\n-   --  expression E. Unc_Typ is an unconstrained array or record, or\n-   --  a classwide type.\n+   --  expression E. Unc_Typ is an unconstrained array or record, or a class-\n+   --  wide type. Set Related_Id to request an external name for the subtype\n+   --  rather than an internal temporary.\n \n    function Matching_Standard_Type (Typ : Entity_Id) return Entity_Id;\n    --  Given a scalar subtype Typ, returns a matching type in standard that"}, {"sha": "cff492a8c4105ae9933e26cc62f5837df6d80ef2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -3390,6 +3390,7 @@ package body Sem_Ch3 is\n       --  Local variables\n \n       Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+      Related_Id      : Entity_Id;\n \n    --  Start of processing for Analyze_Object_Declaration\n \n@@ -4015,7 +4016,25 @@ package body Sem_Ch3 is\n                return;\n \n             else\n-               Expand_Subtype_From_Expr (N, T, Object_Definition (N), E);\n+               --  Ensure that the generated subtype has a unique external name\n+               --  when the related object is public. This guarantees that the\n+               --  subtype and its bounds will not be affected by switches or\n+               --  pragmas that may offset the internal counter due to extra\n+               --  generated code.\n+\n+               if Is_Public (Id) then\n+                  Related_Id := Id;\n+               else\n+                  Related_Id := Empty;\n+               end if;\n+\n+               Expand_Subtype_From_Expr\n+                 (N             => N,\n+                  Unc_Type      => T,\n+                  Subtype_Indic => Object_Definition (N),\n+                  Exp           => E,\n+                  Related_Id    => Related_Id);\n+\n                Act_T := Find_Type_Of_Object (Object_Definition (N), N);\n             end if;\n "}, {"sha": "9ac6f8fc5ac66a0fef07819b081f8bb0706693b1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -3073,7 +3073,7 @@ package body Sem_Ch4 is\n          if not Is_Type (Nam) then\n             if Is_Entity_Name (Name (N)) then\n                Set_Entity (Name (N), Nam);\n-               Set_Etype (Name (N), Etype (Nam));\n+               Set_Etype  (Name (N), Etype (Nam));\n \n             elsif Nkind (Name (N)) = N_Selected_Component then\n                Set_Entity (Selector_Name (Name (N)),  Nam);"}, {"sha": "be42aaa390caf888a12efc37c73cf4f37d2de1e3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d930784028af209c12327ae6ee0cc2b163fe82ae/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d930784028af209c12327ae6ee0cc2b163fe82ae", "patch": "@@ -9998,7 +9998,7 @@ package body Sem_Prag is\n          --  ABSTRACT_STATE_LIST ::=\n          --     null\n          --  |  STATE_NAME_WITH_OPTIONS\n-         --  | (STATE_NAME_WITH_OPTIONS {, STATE_NAME_WITH_OPTIONS} )\n+         --  | (STATE_NAME_WITH_OPTIONS {, STATE_NAME_WITH_OPTIONS})\n \n          --  STATE_NAME_WITH_OPTIONS ::=\n          --     STATE_NAME\n@@ -10018,7 +10018,7 @@ package body Sem_Prag is\n \n          --  EXTERNAL_PROPERTY_LIST ::=\n          --     EXTERNAL_PROPERTY\n-         --  | (EXTERNAL_PROPERTY {, EXTERNAL_PROPERTY} )\n+         --  | (EXTERNAL_PROPERTY {, EXTERNAL_PROPERTY})\n \n          --  EXTERNAL_PROPERTY ::=\n          --    Async_Readers    [=> boolean_EXPRESSION]\n@@ -13412,8 +13412,8 @@ package body Sem_Prag is\n          --  pragma Depends (DEPENDENCY_RELATION);\n \n          --  DEPENDENCY_RELATION ::=\n-         --    null\n-         --  | DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE}\n+         --     null\n+         --  | (DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE})\n \n          --  DEPENDENCY_CLAUSE ::=\n          --    OUTPUT_LIST =>[+] INPUT_LIST\n@@ -14945,9 +14945,9 @@ package body Sem_Prag is\n          --  pragma Global (GLOBAL_SPECIFICATION);\n \n          --  GLOBAL_SPECIFICATION ::=\n-         --    null\n-         --  | GLOBAL_LIST\n-         --  | MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST}\n+         --     null\n+         --  | (GLOBAL_LIST)\n+         --  | (MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST})\n \n          --  MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n \n@@ -15689,20 +15689,18 @@ package body Sem_Prag is\n          -- Initializes --\n          -----------------\n \n-         --  pragma Initializes (INITIALIZATION_SPEC);\n-\n-         --  INITIALIZATION_SPEC ::= null | INITIALIZATION_LIST\n+         --  pragma Initializes (INITIALIZATION_LIST);\n \n          --  INITIALIZATION_LIST ::=\n-         --    INITIALIZATION_ITEM\n-         --    | (INITIALIZATION_ITEM {, INITIALIZATION_ITEM})\n+         --     null\n+         --  | (INITIALIZATION_ITEM {, INITIALIZATION_ITEM})\n \n          --  INITIALIZATION_ITEM ::= name [=> INPUT_LIST]\n \n          --  INPUT_LIST ::=\n-         --    null\n-         --    | INPUT\n-         --    | (INPUT {, INPUT})\n+         --     null\n+         --  |  INPUT\n+         --  | (INPUT {, INPUT})\n \n          --  INPUT ::= name\n \n@@ -19287,8 +19285,8 @@ package body Sem_Prag is\n          --  pragma Refined_Depends (DEPENDENCY_RELATION);\n \n          --  DEPENDENCY_RELATION ::=\n-         --    null\n-         --  | DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE}\n+         --     null\n+         --  | (DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE})\n \n          --  DEPENDENCY_CLAUSE ::=\n          --    OUTPUT_LIST =>[+] INPUT_LIST\n@@ -19363,9 +19361,9 @@ package body Sem_Prag is\n          --  pragma Refined_Global (GLOBAL_SPECIFICATION);\n \n          --  GLOBAL_SPECIFICATION ::=\n-         --    null\n-         --  | GLOBAL_LIST\n-         --  | MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST}\n+         --     null\n+         --  | (GLOBAL_LIST)\n+         --  | (MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST})\n \n          --  MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n \n@@ -19488,15 +19486,14 @@ package body Sem_Prag is\n          --  pragma Refined_State (REFINEMENT_LIST);\n \n          --  REFINEMENT_LIST ::=\n-         --    REFINEMENT_CLAUSE\n-         --    | (REFINEMENT_CLAUSE {, REFINEMENT_CLAUSE})\n+         --    (REFINEMENT_CLAUSE {, REFINEMENT_CLAUSE})\n \n          --  REFINEMENT_CLAUSE ::= state_NAME => CONSTITUENT_LIST\n \n          --  CONSTITUENT_LIST ::=\n-         --    null\n-         --    | CONSTITUENT\n-         --    | (CONSTITUENT {, CONSTITUENT})\n+         --     null\n+         --  |  CONSTITUENT\n+         --  | (CONSTITUENT {, CONSTITUENT})\n \n          --  CONSTITUENT ::= object_NAME | state_NAME\n "}]}