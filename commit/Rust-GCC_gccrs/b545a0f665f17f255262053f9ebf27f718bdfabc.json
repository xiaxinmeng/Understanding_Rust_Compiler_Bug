{"sha": "b545a0f665f17f255262053f9ebf27f718bdfabc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0NWEwZjY2NWYxN2YyNTUyNjIwNTNmOWViZjI3ZjcxOGJkZmFiYw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-06-06T10:27:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:27:12Z"}, "message": "exp_intr.adb (Expand_Unc_Deallocation): Add missing support for deallocation of class-wide interface objects.\n\n2007-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_intr.adb (Expand_Unc_Deallocation): Add missing support for\n\tdeallocation of class-wide interface objects.\n\t(Expand_Dispatching_Constructor_Call): Take into account that if the\n\tresult of the dispatching constructor is an interface type, the\n\tfunction returns a class-wide interface type; otherwise the returned\n\tobject would be actual. The frontend previously accepted returning\n\tinterface types because Expand_Interface_Actuals silently performed\n\tthe management of the returned type \"as if\" it were a class-wide\n\tinterface type.\n\t(Expand_Dispatching_Constructor_Call): Replace call to\n\tMake_DT_Access_Action by direct call to Make_Function_Call.\n\nFrom-SVN: r125406", "tree": {"sha": "34a5ab51899cbffbc75e4a007da7cf396ce723e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a5ab51899cbffbc75e4a007da7cf396ce723e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b545a0f665f17f255262053f9ebf27f718bdfabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b545a0f665f17f255262053f9ebf27f718bdfabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b545a0f665f17f255262053f9ebf27f718bdfabc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b545a0f665f17f255262053f9ebf27f718bdfabc/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cde4a4b1a387e3d37d5ea534b59703e4234b754a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde4a4b1a387e3d37d5ea534b59703e4234b754a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde4a4b1a387e3d37d5ea534b59703e4234b754a"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "acbb8a792a8ad5d588ba48f01522ec8973f3c32c", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b545a0f665f17f255262053f9ebf27f718bdfabc/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b545a0f665f17f255262053f9ebf27f718bdfabc/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=b545a0f665f17f255262053f9ebf27f718bdfabc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,6 @@ with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Code; use Exp_Code;\n-with Exp_Disp; use Exp_Disp;\n with Exp_Fixd; use Exp_Fixd;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n@@ -155,6 +154,14 @@ package body Exp_Intr is\n       Act_Constr := Entity (Name (Act_Rename));\n       Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n \n+      --  Ada 2005 (AI-251): If the result is an interface type, the function\n+      --  returns a class-wide interface type (otherwise the resulting object\n+      --  would be abstract!)\n+\n+      if Is_Interface (Etype (Act_Constr)) then\n+         Set_Etype (Act_Constr, Result_Typ);\n+      end if;\n+\n       --  Create the call to the actual Constructor function\n \n       Cnstr_Call :=\n@@ -215,9 +222,9 @@ package body Exp_Intr is\n            Make_Implicit_If_Statement (N,\n              Condition =>\n                Make_Op_Not (Loc,\n-                 Make_DT_Access_Action (Result_Typ,\n-                    Action => IW_Membership,\n-                    Args   => New_List (\n+                 Make_Function_Call (Loc,\n+                    Name => New_Occurrence_Of (RTE (RE_IW_Membership), Loc),\n+                    Parameter_Associations => New_List (\n                       Make_Attribute_Reference (Loc,\n                         Prefix => Duplicate_Subexpr (Tag_Arg),\n                         Attribute_Name => Name_Address),\n@@ -984,7 +991,27 @@ package body Exp_Intr is\n          end if;\n       end if;\n \n-      Set_Expression (Free_Node, Free_Arg);\n+      --  Ada 2005 (AI-251): In case of abstract interface type we must\n+      --  displace the pointer to reference the base of the object to\n+      --  deallocate its memory.\n+\n+      --  Generate:\n+      --    free (Base_Address (Obj_Ptr))\n+\n+      if Is_Interface (Directly_Designated_Type (Typ)) then\n+         Set_Expression (Free_Node,\n+           Unchecked_Convert_To (Typ,\n+             Make_Function_Call (Loc,\n+               Name => New_Reference_To (RTE (RE_Base_Address), Loc),\n+               Parameter_Associations => New_List (\n+                 Unchecked_Convert_To (RTE (RE_Address), Free_Arg)))));\n+\n+      --  Generate:\n+      --    free (Obj_Ptr)\n+\n+      else\n+         Set_Expression (Free_Node, Free_Arg);\n+      end if;\n \n       --  Only remaining step is to set result to null, or generate a\n       --  raise of constraint error if the target object is \"not null\"."}]}