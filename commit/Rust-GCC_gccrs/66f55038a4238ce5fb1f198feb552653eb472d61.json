{"sha": "66f55038a4238ce5fb1f198feb552653eb472d61", "node_id": "C_kwDOANBUbNoAKDY2ZjU1MDM4YTQyMzhjZTVmYjFmMTk4ZmViNTUyNjUzZWI0NzJkNjE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-07T12:59:01Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T08:00:36Z"}, "message": "sphinx: do not use tm.rst.in with empty content\n\ngcc/ChangeLog:\n\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/assembler-commands-for-exception-regions.rst:\n\tDo not include tm.rst.in.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/the-overall-framework-of-an-assembler-file.rst:\n\tLikewise.\n\t* doc/gccint/target-macros/run-time-target-specification.rst:\n\tLikewise.", "tree": {"sha": "d8b43662a9926ff924b98b56f6d24b2507dc5eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b43662a9926ff924b98b56f6d24b2507dc5eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66f55038a4238ce5fb1f198feb552653eb472d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f55038a4238ce5fb1f198feb552653eb472d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f55038a4238ce5fb1f198feb552653eb472d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f55038a4238ce5fb1f198feb552653eb472d61/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72318642439703bba8c83423d4706e06444254d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72318642439703bba8c83423d4706e06444254d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72318642439703bba8c83423d4706e06444254d6"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "6efe42f3515e8b3e2829fa1821e1d88289237dce", "filename": "gcc/doc/gccint/target-macros/defining-the-output-assembler-language/assembler-commands-for-exception-regions.rst", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fassembler-commands-for-exception-regions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fassembler-commands-for-exception-regions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fassembler-commands-for-exception-regions.rst?ref=66f55038a4238ce5fb1f198feb552653eb472d61", "patch": "@@ -54,10 +54,7 @@ region.\n   ``INCOMING_RETURN_ADDR_RTX`` and ``OBJECT_FORMAT_ELF``),\n   GCC will provide a default definition of 1.\n \n-.. include:: ../tm.rst.in\n-  :start-after: [TARGET_EXCEPT_UNWIND_INFO]\n-  :end-before: [TARGET_EXCEPT_UNWIND_INFO]\n-\n+.. function:: enum unwind_info_type TARGET_EXCEPT_UNWIND_INFO (struct gcc_options *opts)\n \n   This hook defines the mechanism that will be used for exception handling\n   by the target.  If the target has ABI specified unwind tables, the hook\n@@ -83,10 +80,7 @@ region.\n   ``DWARF2_UNWIND_INFO`` depends on command-line options, the target\n   must define this hook so that :samp:`{opts}` is used correctly.\n \n-.. include:: ../tm.rst.in\n-  :start-after: [TARGET_UNWIND_TABLES_DEFAULT]\n-  :end-before: [TARGET_UNWIND_TABLES_DEFAULT]\n-\n+.. c:var:: bool TARGET_UNWIND_TABLES_DEFAULT\n \n   This variable should be set to ``true`` if the target ABI requires unwinding\n   tables even when exceptions are not used.  It must not be modified by"}, {"sha": "7b0c7f700a948f11527b31cb0e2ddacac5064eeb", "filename": "gcc/doc/gccint/target-macros/defining-the-output-assembler-language/the-overall-framework-of-an-assembler-file.rst", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fthe-overall-framework-of-an-assembler-file.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fthe-overall-framework-of-an-assembler-file.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Fdefining-the-output-assembler-language%2Fthe-overall-framework-of-an-assembler-file.rst?ref=66f55038a4238ce5fb1f198feb552653eb472d61", "patch": "@@ -128,10 +128,7 @@ This describes the overall framework of an assembly file.\n   :end-before: [TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS]\n \n \n-.. include:: ../tm.rst.in\n-  :start-after: [TARGET_HAVE_NAMED_SECTIONS]\n-  :end-before: [TARGET_HAVE_NAMED_SECTIONS]\n-\n+.. c:var:: bool TARGET_HAVE_NAMED_SECTIONS\n \n   This flag is true if the target supports ``TARGET_ASM_NAMED_SECTION``.\n   It must not be modified by command-line option processing."}, {"sha": "46a423a840d273fc7ebfe3b26c03e0568cd8cecf", "filename": "gcc/doc/gccint/target-macros/run-time-target-specification.rst", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Frun-time-target-specification.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f55038a4238ce5fb1f198feb552653eb472d61/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Frun-time-target-specification.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint%2Ftarget-macros%2Frun-time-target-specification.rst?ref=66f55038a4238ce5fb1f198feb552653eb472d61", "patch": "@@ -67,20 +67,15 @@ Here are run-time target specifications.\n Variable extern int target_flagsThis variable is declared in :samp:`options.h`, which is included before\n any target-specific headers.\n \n-.. include:: tm.rst.in\n-  :start-after: [TARGET_DEFAULT_TARGET_FLAGS]\n-  :end-before: [TARGET_DEFAULT_TARGET_FLAGS]\n-\n+.. c:var:: int TARGET_DEFAULT_TARGET_FLAGS\n \n   This variable specifies the initial value of ``target_flags``.\n   Its default setting is 0.\n \n .. index:: optional hardware or system features, features, optional, in system conventions\n \n-.. include:: tm.rst.in\n-  :start-after: [TARGET_HANDLE_OPTION]\n-  :end-before: [TARGET_HANDLE_OPTION]\n \n+.. function:: bool TARGET_HANDLE_OPTION (struct gcc_options *opts, struct gcc_options *opts_set, const struct cl_decoded_option *decoded, location_t loc)\n \n   This hook is called whenever the user specifies one of the\n   target-specific options described by the :samp:`.opt` definition files\n@@ -94,10 +89,7 @@ any target-specific headers.\n   option was passed (``UNKNOWN_LOCATION`` except for options passed\n   via attributes).\n \n-.. include:: tm.rst.in\n-  :start-after: [TARGET_HANDLE_C_OPTION]\n-  :end-before: [TARGET_HANDLE_C_OPTION]\n-\n+.. function:: bool TARGET_HANDLE_C_OPTION (size_t code, const char *arg, int value)\n \n   This target hook is called whenever the user specifies one of the\n   target-specific C language family options described by the :samp:`.opt`\n@@ -149,10 +141,7 @@ any target-specific headers.\n   used to alter option flag variables which only exist in those\n   frontends.\n \n-.. include:: tm.rst.in\n-  :start-after: [TARGET_OPTION_OPTIMIZATION_TABLE]\n-  :end-before: [TARGET_OPTION_OPTIMIZATION_TABLE]\n-\n+.. c:var:: const struct default_options * TARGET_OPTION_OPTIMIZATION_TABLE\n \n   Some machines may desire to change what optimizations are performed for\n   various optimization levels.   This variable, if defined, describes"}]}