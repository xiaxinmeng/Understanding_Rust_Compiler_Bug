{"sha": "8a313b81190044ea28610df85fb185abe1af3dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEzMTNiODExOTAwNDRlYTI4NjEwZGY4NWZiMTg1YWJlMWFmM2RmZA==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2008-03-20T19:43:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-20T19:43:56Z"}, "message": "re PR testsuite/34168 (runtime tests in gfortran.dg/vect fail for unsupported [non-SSE2] targets)\n\n        PR testsuite/34168\n        * lib/target-supports.exp (check_sse2_hw_available): New procedure.\n        * gcc.dg/vect/vect.exp: Set dg-do-what-default to \"compile\"\n        if SSE2 hardware is not available.\n        * g++.dg/vect/vect.exp: Update target-dependent overrides to match\n        gcc.dg/vect/vect.exp.\n        * gfortran.dg/vect/vect.exp: Ditto.\n        (check_effective_target_lp64_or_vect_no_align): Remove procedure.\n\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r133393", "tree": {"sha": "23f07de0427ac6daae86ea2a57019d5d1345cca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f07de0427ac6daae86ea2a57019d5d1345cca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a313b81190044ea28610df85fb185abe1af3dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a313b81190044ea28610df85fb185abe1af3dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a313b81190044ea28610df85fb185abe1af3dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a313b81190044ea28610df85fb185abe1af3dfd/comments", "author": null, "committer": null, "parents": [{"sha": "8894d2ba3895c47c52362137d11b1a687a694a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8894d2ba3895c47c52362137d11b1a687a694a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8894d2ba3895c47c52362137d11b1a687a694a62"}], "stats": {"total": 152, "additions": 120, "deletions": 32}, "files": [{"sha": "737dbba33fae80a1f7c391325fb4cbdfdbe6fba3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a313b81190044ea28610df85fb185abe1af3dfd", "patch": "@@ -1,3 +1,15 @@\n+2008-03-20 Victor Kaplansky  <victork@gcc.gnu.org>\n+\t   Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR testsuite/34168\n+\t* lib/target-supports.exp (check_sse2_hw_available): New procedure.\n+\t* gcc.dg/vect/vect.exp: Set dg-do-what-default to \"compile\"\n+\tif SSE2 hardware is not available.\n+\t* g++.dg/vect/vect.exp: Update target-dependent overrides to match\n+\tgcc.dg/vect/vect.exp.\n+\t* gfortran.dg/vect/vect.exp: Ditto.\n+\t(check_effective_target_lp64_or_vect_no_align): Remove procedure.\n+\n 2008-03-20  Andreas Schwab  <schwab@suse.de>\n \n \t* gcc.dg/cpp/cmdlne-dD-M.c: Fix test for makefile rule and remove"}, {"sha": "f3db0368ef7e6113492ae24493ff60c5db0874bb", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=8a313b81190044ea28610df85fb185abe1af3dfd", "patch": "@@ -45,49 +45,76 @@ lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \"-fno-vect-cost-model\" \\\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n-if [istarget \"powerpc*-*-*\"] {\n+if  [istarget \"powerpc-*paired*\"]  {\n+   lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n+    if [check_750cl_hw_available] {\n+        set dg-do-what-default run \n+    } else {\n+        set dg-do-what-default compile\n+    }\n+} elseif [istarget \"powerpc*-*-*\"] {\n     # Skip targets not supporting -maltivec.\n     if ![is-effective-target powerpc_altivec_ok] {\n \treturn\n     }\n \n     lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n     if [check_vmx_hw_available] {\n-        set dg-do-what-default run\n+\tset dg-do-what-default run\n     } else {\n-        if [is-effective-target ilp32] {\n-            # Specify a cpu that supports VMX for compile-only tests.\n-            lappend DEFAULT_VECTCFLAGS \"-mcpu=7400\"\n-        }\n-        set dg-do-what-default compile\n+\tif [is-effective-target ilp32] {\n+\t    # Specify a cpu that supports VMX for compile-only tests.\n+\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n+\t}\n+\tset dg-do-what-default compile\n     }\n } elseif { [istarget  \"spu-*-*\"] } {\n    set dg-do-what-default run\n } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    set dg-do-what-default run\n+    if [check_sse2_hw_available] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n } elseif { [istarget \"mips*-*-*\"]\n \t   && [check_effective_target_mpaired_single]\n \t   && [check_effective_target_nomips16] } {\n     lappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n     set dg-do-what-default run\n } elseif [istarget \"sparc*-*-*\"] {\n     lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n-    set dg-do-what-default run\n+    if [check_effective_target_ultrasparc_hw] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n } elseif [istarget \"alpha*-*-*\"] {\n+    # Alpha's vectorization capabilities are extremely limited.\n+    # It's more effort than its worth disabling all of the tests\n+    # that it cannot pass.  But if you actually want to see what\n+    # does work, command out the return.\n+    return\n+\n     lappend DEFAULT_VECTCFLAGS \"-mmax\"\n     if [check_alpha_max_hw_available] {\n-        set dg-do-what-default run\n+\tset dg-do-what-default run\n     } else {\n-        set dg-do-what-default compile\n+\tset dg-do-what-default compile\n     }\n } elseif [istarget \"ia64-*-*\"] {\n     set dg-do-what-default run\n+} elseif [is-effective-target arm_neon_ok] {\n+    lappend DEFAULT_VECTCFLAGS \"-mfpu=neon\" \"-mfloat-abi=softfp\"\n+    if [is-effective-target arm_neon_hw] {\n+      set dg-do-what-default run\n+    } else {\n+      set dg-do-what-default compile\n+    }\n } else {\n     return\n }\n \n-\n # Initialize `dg'.\n dg-init\n "}, {"sha": "18877095fa9dfe8436382658810d1188ec786b61", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=8a313b81190044ea28610df85fb185abe1af3dfd", "patch": "@@ -63,7 +63,11 @@ if  [istarget \"powerpc-*paired*\"]  {\n    set dg-do-what-default run\n } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    set dg-do-what-default run\n+    if [check_sse2_hw_available] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n } elseif { [istarget \"mips*-*-*\"]\n \t   && [check_effective_target_mpaired_single]\n \t   && [check_effective_target_nomips16] } {"}, {"sha": "518b6850b6a44dc0bbed071679646fb6c6814411", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=8a313b81190044ea28610df85fb185abe1af3dfd", "patch": "@@ -38,29 +38,57 @@ set save-dg-do-what-default ${dg-do-what-default}\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n-if [istarget \"powerpc*-*-*\"] {\n-    # If there are powerpc targets to skip, do it here.\n+if  [istarget \"powerpc-*paired*\"]  {\n+   lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n+    if [check_750cl_hw_available] {\n+        set dg-do-what-default run \n+    } else {\n+        set dg-do-what-default compile\n+    }\n+} elseif [istarget \"powerpc*-*-*\"] {\n+    # Skip targets not supporting -maltivec.\n+    if ![is-effective-target powerpc_altivec_ok] {\n+\treturn\n+    }\n \n     lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n     if [check_vmx_hw_available] {\n \tset dg-do-what-default run\n     } else {\n \tif [is-effective-target ilp32] {\n \t    # Specify a cpu that supports VMX for compile-only tests.\n-\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=7400\"\n+\t    lappend DEFAULT_VECTCFLAGS \"-mcpu=970\"\n \t}\n \tset dg-do-what-default compile\n     }\n+} elseif { [istarget  \"spu-*-*\"] } {\n+   set dg-do-what-default run\n } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     lappend DEFAULT_VECTCFLAGS \"-msse2\"\n-    set dg-do-what-default run\n-} elseif [istarget \"mipsisa64*-*-*\"] {\n+    if [check_sse2_hw_available] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n+} elseif { [istarget \"mips*-*-*\"]\n+\t   && [check_effective_target_mpaired_single]\n+\t   && [check_effective_target_nomips16] } {\n     lappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n     set dg-do-what-default run\n } elseif [istarget \"sparc*-*-*\"] {\n     lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n-    set dg-do-what-default run\n+    if [check_effective_target_ultrasparc_hw] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n } elseif [istarget \"alpha*-*-*\"] {\n+    # Alpha's vectorization capabilities are extremely limited.\n+    # It's more effort than its worth disabling all of the tests\n+    # that it cannot pass.  But if you actually want to see what\n+    # does work, command out the return.\n+    return\n+\n     lappend DEFAULT_VECTCFLAGS \"-mmax\"\n     if [check_alpha_max_hw_available] {\n \tset dg-do-what-default run\n@@ -69,21 +97,15 @@ if [istarget \"powerpc*-*-*\"] {\n     }\n } elseif [istarget \"ia64-*-*\"] {\n     set dg-do-what-default run\n-} else {\n-    return\n-}\n-\n-# Return 1 if the effective target is LP64 or if the effective target\n-# does not support a vector alignment mechanism.\n-\n-proc check_effective_target_lp64_or_vect_no_align { } {\n-    if { [is-effective-target lp64]\n-          || [is-effective-target vect_no_align] } {\n-        set answer 1\n+} elseif [is-effective-target arm_neon_ok] {\n+    lappend DEFAULT_VECTCFLAGS \"-mfpu=neon\" \"-mfloat-abi=softfp\"\n+    if [is-effective-target arm_neon_hw] {\n+      set dg-do-what-default run\n     } else {\n-        set answer 0\n+      set dg-do-what-default compile\n     }\n-    return $answer\n+} else {\n+    return\n }\n \n # Initialize `dg'."}, {"sha": "2d50643485b63e3eaba5650718107ef5b86366f2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a313b81190044ea28610df85fb185abe1af3dfd/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8a313b81190044ea28610df85fb185abe1af3dfd", "patch": "@@ -764,6 +764,29 @@ proc check_750cl_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports executing SSE2 instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_sse2_hw_available { } {\n+    return [check_cached_effective_target sse2_hw_available {\n+\t# If this is not the right target then we can skip the test.\n+\tif { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\t    expr 0\n+\t} else {\n+\t    check_runtime_nocache sse2_hw_available {\n+\t\t#include \"cpuid.h\"\n+\t\tint main ()\n+\t\t{\n+\t\t  unsigned int eax, ebx, ecx, edx = 0;\n+\t\t  if (__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t\t    return !(edx & bit_SSE2);\n+\t\t  return 1;\n+\t\t}\n+\t    } \"\"\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing AltiVec instructions, 0\n # otherwise.  Cache the result.\n "}]}