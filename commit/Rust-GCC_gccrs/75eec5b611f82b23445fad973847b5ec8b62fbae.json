{"sha": "75eec5b611f82b23445fad973847b5ec8b62fbae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlZWM1YjYxMWY4MmIyMzQ0NWZhZDk3Mzg0N2I1ZWM4YjYyZmJhZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-02-14T10:04:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-02-14T10:04:04Z"}, "message": "regex_compiler.h: Remove unnecessary bind() calls.\n\n2011-02-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/regex_compiler.h: Remove unnecessary bind() calls.\n\t* include/bits/regex_nfa.h: Remove unnecessary base classes.\n\nFrom-SVN: r170124", "tree": {"sha": "6b2bfb283835bbe1f5cecfce9fb824f6f76acc2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2bfb283835bbe1f5cecfce9fb824f6f76acc2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75eec5b611f82b23445fad973847b5ec8b62fbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eec5b611f82b23445fad973847b5ec8b62fbae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75eec5b611f82b23445fad973847b5ec8b62fbae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eec5b611f82b23445fad973847b5ec8b62fbae/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e26379233bef9226b6cb26a2cd300de46f06b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e26379233bef9226b6cb26a2cd300de46f06b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e26379233bef9226b6cb26a2cd300de46f06b81"}], "stats": {"total": 53, "additions": 20, "deletions": 33}, "files": [{"sha": "cb03341efc788415dcd07d641ffecf99e530e764", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75eec5b611f82b23445fad973847b5ec8b62fbae", "patch": "@@ -1,3 +1,8 @@\n+2011-02-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/regex_compiler.h: Remove unnecessary bind() calls.\n+\t* include/bits/regex_nfa.h: Remove unnecessary base classes.\n+\n 2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "eda4e357cf003426c9a88d52be97639f6343c663", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=75eec5b611f82b23445fad973847b5ec8b62fbae", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -714,23 +714,18 @@ namespace __regex\n     : _M_traits(__traits), _M_scanner(__b, __e, __flags, _M_traits.getloc()),\n       _M_state_store(__flags)\n     {\n-      using std::bind;\n-      using std::placeholders::_1;\n-      using std::placeholders::_2;\n       typedef _StartTagger<_InIter, _TraitsT> _Start;\n       typedef _EndTagger<_InIter, _TraitsT> _End;\n \n       _StateSeq __r(_M_state_store,\n-      \t\t    _M_state_store._M_insert_subexpr_begin(\n-                        bind(_Start(0), _1, _2)));\n+      \t\t    _M_state_store._M_insert_subexpr_begin(_Start(0)));\n       _M_disjunction();\n       if (!_M_stack.empty())\n \t{\n \t  __r._M_append(_M_stack.top());\n \t  _M_stack.pop();\n \t}\n-      __r._M_append(_M_state_store.\n-\t\t    _M_insert_subexpr_end(0, bind(_End(0), _1, _2)));\n+      __r._M_append(_M_state_store._M_insert_subexpr_end(0, _End(0)));\n       __r._M_append(_M_state_store._M_insert_accept());\n     }\n \n@@ -905,36 +900,30 @@ namespace __regex\n     _Compiler<_InIter, _TraitsT>::\n     _M_atom()\n     {\n-      using std::bind;\n-      using std::placeholders::_1;\n-      using std::placeholders::_2;\n       typedef _CharMatcher<_InIter, _TraitsT> _CMatcher;\n       typedef _StartTagger<_InIter, _TraitsT> _Start;\n       typedef _EndTagger<_InIter, _TraitsT> _End;\n \n       if (_M_match_token(_ScannerT::_S_token_anychar))\n \t{\n \t  _M_stack.push(_StateSeq(_M_state_store,\n-\t\t\t\t  _M_state_store.\n-\t\t\t\t  _M_insert_matcher(bind(_AnyMatcher, _1))));\n+                                  _M_state_store._M_insert_matcher\n+                                  (_AnyMatcher)));\n \t  return true;\n \t}\n       if (_M_match_token(_ScannerT::_S_token_ord_char))\n \t{\n-\t  _M_stack.push(_StateSeq\n-\t\t\t(_M_state_store, _M_state_store. \n-\t\t\t _M_insert_matcher\n-\t\t\t (bind(_CMatcher(_M_cur_value[0], _M_traits), _1))));\n+\t  _M_stack.push(_StateSeq(_M_state_store,\n+                                  _M_state_store._M_insert_matcher\n+                                  (_CMatcher(_M_cur_value[0], _M_traits))));\n \t  return true;\n \t}\n       if (_M_match_token(_ScannerT::_S_token_quoted_char))\n \t{\n \t  // note that in the ECMA grammar, this case covers backrefs.\n \t  _M_stack.push(_StateSeq(_M_state_store,\n-\t\t\t\t  _M_state_store.\n-\t\t\t\t  _M_insert_matcher\n-\t\t\t\t  (bind(_CMatcher(_M_cur_value[0], _M_traits),\n-\t\t\t\t\t_1))));\n+\t\t\t\t  _M_state_store._M_insert_matcher\n+\t\t\t\t  (_CMatcher(_M_cur_value[0], _M_traits))));\n \t  return true;\n \t}\n       if (_M_match_token(_ScannerT::_S_token_backref))\n@@ -947,7 +936,7 @@ namespace __regex\n \t  int __mark = _M_state_store._M_sub_count();\n \t  _StateSeq __r(_M_state_store,\n \t\t\t_M_state_store.\n-\t\t\t_M_insert_subexpr_begin(bind(_Start(__mark), _1, _2)));\n+\t\t\t_M_insert_subexpr_begin(_Start(__mark)));\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n \t    __throw_regex_error(regex_constants::error_paren);\n@@ -957,7 +946,7 @@ namespace __regex\n \t      _M_stack.pop();\n \t    }\n \t  __r._M_append(_M_state_store._M_insert_subexpr_end\n-\t\t\t(__mark, bind(_End(__mark), _1, _2)));\n+\t\t\t(__mark, _End(__mark)));\n \t  _M_stack.push(__r);\n \t  return true;\n \t}\n@@ -969,8 +958,6 @@ namespace __regex\n     _Compiler<_InIter, _TraitsT>::\n     _M_bracket_expression()\n     {\n-      using std::bind;\n-      using std::placeholders::_1;\n       if (_M_match_token(_ScannerT::_S_token_bracket_begin))\n \t{\n \t  _RMatcherT __matcher(_M_match_token(_ScannerT::_S_token_line_begin),\n@@ -979,8 +966,7 @@ namespace __regex\n \t      || !_M_match_token(_ScannerT::_S_token_bracket_end))\n \t    __throw_regex_error(regex_constants::error_brack);\n \t  _M_stack.push(_StateSeq(_M_state_store,\n-\t\t\t\t  _M_state_store._M_insert_matcher\n-\t\t\t\t  (bind(__matcher, _1))));\n+\t\t\t\t  _M_state_store._M_insert_matcher(__matcher)));\n \t  return true;\n \t}\n       return false;"}, {"sha": "8aed9b48cc7f662e178eedef499c8bb9ffd0ebf2", "filename": "libstdc++-v3/include/bits/regex_nfa.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eec5b611f82b23445fad973847b5ec8b62fbae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h?ref=75eec5b611f82b23445fad973847b5ec8b62fbae", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -82,7 +82,6 @@ namespace __regex\n \n   template<typename _FwdIterT, typename _TraitsT>\n     struct _StartTagger\n-    : public _Tagger\n     {\n       explicit\n       _StartTagger(int __i)\n@@ -98,7 +97,6 @@ namespace __regex\n \n   template<typename _FwdIterT, typename _TraitsT>\n     struct _EndTagger\n-    : public _Tagger\n     {\n       explicit\n       _EndTagger(int __i)\n@@ -123,7 +121,6 @@ namespace __regex\n   // Matches a single character\n   template<typename _InIterT, typename _TraitsT>\n     struct _CharMatcher\n-    : public _Matcher\n     {\n       typedef typename _TraitsT::char_type char_type;\n \n@@ -147,7 +144,6 @@ namespace __regex\n   // Matches a character range (bracket expression)\n   template<typename _InIterT, typename _TraitsT>\n     struct _RangeMatcher\n-    : public _Matcher\n     {\n       typedef typename _TraitsT::char_type _CharT;\n       typedef std::basic_string<_CharT>    _StringT;\n@@ -208,7 +204,7 @@ namespace __regex\n     typedef int  _OpcodeT;\n \n     _OpcodeT     _M_opcode;    // type of outgoing transition\n-    _StateIdT    _M_next;      // outgoing tranition\n+    _StateIdT    _M_next;      // outgoing transition\n     _StateIdT    _M_alt;       // for _S_opcode_alternative\n     unsigned int _M_subexpr;   // for _S_opcode_subexpr_*\n     _Tagger      _M_tagger;    // for _S_opcode_subexpr_*"}]}