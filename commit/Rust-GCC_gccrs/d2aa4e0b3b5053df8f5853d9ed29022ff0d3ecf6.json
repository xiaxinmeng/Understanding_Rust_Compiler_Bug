{"sha": "d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhYTRlMGIzYjUwNTNkZjhmNTg1M2Q5ZWQyOTAyMmZmMGQzZWNmNg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-14T11:27:55Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-18T18:41:43Z"}, "message": "Objective-C: fix crash with -fobjc-nilcheck\n\nWhen -fobjc-nilcheck is enabled, messages that result in a struct type should\nyield a zero-initialized struct when sent to nil.  Currently, the frontend\ncrashes when it encounters this situation.  This patch fixes the crash by\ngenerating the tree for the `{}` initializer.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\nCo-authored-by: Matt Jacobson  <mhjacobson@me.com>\n\n\tPR objc/101666\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_build_constructor): Handle empty constructor\n\tlists.\n\t* objc-next-runtime-abi-02.c (build_v2_objc_method_fixup_call):\n\tHandle nil receivers.\n\t(build_v2_build_objc_method_call): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* obj-c++.dg/pr101666-0.mm: New test.\n\t* obj-c++.dg/pr101666-1.mm: New test.\n\t* obj-c++.dg/pr101666.inc: New.\n\t* objc.dg/pr101666-0.m: New test.\n\t* objc.dg/pr101666-1.m: New test.\n\t* objc.dg/pr101666.inc: New.", "tree": {"sha": "af7be9b0ba6076f8d448735eb9eff65403a8cc33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af7be9b0ba6076f8d448735eb9eff65403a8cc33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220c410162ebece4fffa2912ed79e348d3731d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220c410162ebece4fffa2912ed79e348d3731d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220c410162ebece4fffa2912ed79e348d3731d77"}], "stats": {"total": 130, "additions": 108, "deletions": 22}, "files": [{"sha": "6e4fb626936f9937bcfba576c043ddd1e7fbc36e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -3377,8 +3377,10 @@ objc_build_string_object (tree string)\n   return addr;\n }\n \n-/* Build a static constant CONSTRUCTOR\n-   with type TYPE and elements ELTS.  */\n+/* Build a static constant CONSTRUCTOR with type TYPE and elements ELTS.\n+   We might be presented with a NULL for ELTS, which means 'empty ctor'\n+   which will subsequently be converted into a zero initializer in the\n+   middle end.  */\n \n tree\n objc_build_constructor (tree type, vec<constructor_elt, va_gc> *elts)\n@@ -3390,12 +3392,10 @@ objc_build_constructor (tree type, vec<constructor_elt, va_gc> *elts)\n   TREE_READONLY (constructor) = 1;\n \n #ifdef OBJCPLUS\n-  /* Adjust for impedance mismatch.  We should figure out how to build\n-     CONSTRUCTORs that consistently please both the C and C++ gods.  */\n-  if (!(*elts)[0].index)\n+  /* If we know the initializer, then set the type to what C++ expects.  */\n+  if (elts && !(*elts)[0].index)\n     TREE_TYPE (constructor) = init_list_type_node;\n #endif\n-\n   return constructor;\n }\n \n@@ -9664,7 +9664,9 @@ objc_gimplify_property_ref (tree *expr_p)\n       call_exp = TREE_OPERAND (getter, 1);\n     }\n #endif\n-  gcc_assert (TREE_CODE (call_exp) == CALL_EXPR);\n+  gcc_checking_assert ((flag_objc_nilcheck\n+\t\t\t&& TREE_CODE (call_exp) == COND_EXPR)\n+\t\t       || TREE_CODE (call_exp) == CALL_EXPR);\n \n   *expr_p = call_exp;\n }"}, {"sha": "0d963e357c47abf0e97f1263c78f1de74f068816", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -1675,13 +1675,8 @@ build_v2_objc_method_fixup_call (int super_flag, tree method_prototype,\n \n       if (TREE_CODE (ret_type) == RECORD_TYPE\n \t  || TREE_CODE (ret_type) == UNION_TYPE)\n-\t{\n-\t  vec<constructor_elt, va_gc> *rtt = NULL;\n-\t  /* ??? CHECKME. hmmm..... think we need something more\n-\t     here.  */\n-\t  CONSTRUCTOR_APPEND_ELT (rtt, NULL_TREE, NULL_TREE);\n-\t  ftree = objc_build_constructor (ret_type, rtt);\n-\t}\n+\t/* An empty constructor is zero-filled by the middle end.  */\n+\tftree = objc_build_constructor (ret_type, NULL);\n       else\n \tftree = fold_convert (ret_type, integer_zero_node);\n \n@@ -1694,11 +1689,11 @@ build_v2_objc_method_fixup_call (int super_flag, tree method_prototype,\n \t\t\t\t\tifexp, ret_val, ftree,\n \t\t\t\t\ttf_warning_or_error);\n #else\n-     /* ??? CHECKME.   */\n       ret_val = build_conditional_expr (input_location,\n-\t\t\t\t\tifexp, 1,\n+\t\t\t\t\tifexp, 0,\n \t\t\t\t\tret_val, NULL_TREE, input_location,\n \t\t\t\t\tftree, NULL_TREE, input_location);\n+      ret_val = fold_convert (ret_type, ret_val);\n #endif\n     }\n   return ret_val;\n@@ -1790,11 +1785,8 @@ build_v2_build_objc_method_call (int super, tree method_prototype,\n       if (TREE_CODE (ret_type) == RECORD_TYPE\n \t  || TREE_CODE (ret_type) == UNION_TYPE)\n \t{\n-\t  vec<constructor_elt, va_gc> *rtt = NULL;\n-\t  /* ??? CHECKME. hmmm..... think we need something more\n-\t     here.  */\n-\t  CONSTRUCTOR_APPEND_ELT (rtt, NULL_TREE, NULL_TREE);\n-\t  ftree = objc_build_constructor (ret_type, rtt);\n+\t/* An empty constructor is zero-filled by the middle end.  */\n+\t  ftree = objc_build_constructor (ret_type, NULL);\n \t}\n       else\n \tftree = fold_convert (ret_type, integer_zero_node);\n@@ -1807,10 +1799,10 @@ build_v2_build_objc_method_call (int super, tree method_prototype,\n       ret_val = build_conditional_expr (loc, ifexp, ret_val, ftree,\n \t\t\t\t\ttf_warning_or_error);\n #else\n-     /* ??? CHECKME.   */\n       ret_val = build_conditional_expr (loc, ifexp, 1,\n \t\t\t\t\tret_val, NULL_TREE, loc,\n \t\t\t\t\tftree, NULL_TREE, loc);\n+      ret_val = fold_convert (ret_type, ret_val);\n #endif\n     }\n   return ret_val;"}, {"sha": "5f87f605ae45a6e77e6f2bc1b8bfa4e259127664", "filename": "gcc/testsuite/obj-c++.dg/pr101666-0.mm", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-0.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-0.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-0.mm?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-skip-if \"ABI 2 only\" { *-*-* && { ! objc2 } } { \"*\" } { \"\" } } */\n+/* { dg-additional-options \"-fobjc-nilcheck -Wno-objc-root-class\" } */\n+\n+#include \"pr101666.inc\"\n+"}, {"sha": "41ef3704bff8bf31b970fec6589d252c96f5abe6", "filename": "gcc/testsuite/obj-c++.dg/pr101666-1.mm", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666-1.mm?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,10 @@\n+/* Later versions of Darwin can compile for 10.5, but cannot link it so we\n+   can only run this test up to 10.13.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do run { target *-*-darwin[89]* *-*-darwin1[0-7]* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-skip-if \"ABI 2 only\" { *-*-* && { ! objc2 } } { \"*\" } { \"\" } } */\n+/* { dg-additional-options \"-fobjc-nilcheck -mmacosx-version-min=10.5 \" } */\n+/* { dg-additional-options \"-Wno-objc-root-class\" } */\n+\n+#include \"pr101666.inc\""}, {"sha": "e81e1be2e4c79175487d42e7dab0a91ba28b8ab2", "filename": "gcc/testsuite/obj-c++.dg/pr101666.inc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr101666.inc?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,29 @@\n+#include <cstdlib>\n+struct point { double x, y, z; };\n+\n+@interface Foo\n+- (struct point)bar;\n+- (struct point)baz;\n+@end\n+\n+@implementation Foo\n+- (struct point)bar { struct point q = { 1.0, 2.0, 3.0 }; return q; };\n+- (struct point)baz { struct point q = { 4.0, 5.0, 6.0 }; return q; };\n+@end\n+\n+/* Cases where a check for nil should be inserted by the compiler, when\n+   -fobjc-nilcheck is in force. We should not attempt the calls, and the\n+   result should be 0-filled. */\n+\n+Foo *f;\n+\n+int main(void) {\n+  struct point p = [f bar];\n+  if (p.x != 0.0 || p.y != 0.0 || p.z != 0.0)\n+    abort ();\n+  id nilobj = (id)0;\n+  p = [nilobj baz];\n+  if (p.x != 0.0 || p.y != 0.0 || p.z != 0.0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5f87f605ae45a6e77e6f2bc1b8bfa4e259127664", "filename": "gcc/testsuite/objc.dg/pr101666-0.m", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-0.m?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-skip-if \"ABI 2 only\" { *-*-* && { ! objc2 } } { \"*\" } { \"\" } } */\n+/* { dg-additional-options \"-fobjc-nilcheck -Wno-objc-root-class\" } */\n+\n+#include \"pr101666.inc\"\n+"}, {"sha": "41ef3704bff8bf31b970fec6589d252c96f5abe6", "filename": "gcc/testsuite/objc.dg/pr101666-1.m", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666-1.m?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,10 @@\n+/* Later versions of Darwin can compile for 10.5, but cannot link it so we\n+   can only run this test up to 10.13.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do run { target *-*-darwin[89]* *-*-darwin1[0-7]* } } */\n+/* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-skip-if \"ABI 2 only\" { *-*-* && { ! objc2 } } { \"*\" } { \"\" } } */\n+/* { dg-additional-options \"-fobjc-nilcheck -mmacosx-version-min=10.5 \" } */\n+/* { dg-additional-options \"-Wno-objc-root-class\" } */\n+\n+#include \"pr101666.inc\""}, {"sha": "f1dddca6498f2d5d9d8600a216105cc511f71125", "filename": "gcc/testsuite/objc.dg/pr101666.inc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr101666.inc?ref=d2aa4e0b3b5053df8f5853d9ed29022ff0d3ecf6", "patch": "@@ -0,0 +1,29 @@\n+#include <stdlib.h>\n+struct point { double x, y, z; };\n+\n+@interface Foo\n+- (struct point)bar;\n+- (struct point)baz;\n+@end\n+\n+@implementation Foo\n+- (struct point)bar { struct point q = { 1.0, 2.0, 3.0 }; return q; };\n+- (struct point)baz { struct point q = { 4.0, 5.0, 6.0 }; return q; };\n+@end\n+\n+/* Cases where a check for nil should be inserted by the compiler, when\n+   -fobjc-nilcheck is in force. We should not attempt the calls, and the\n+   result should be 0-filled. */\n+\n+Foo *f;\n+\n+int main(void) {\n+  struct point p = [f bar];\n+  if (p.x != 0.0 || p.y != 0.0 || p.z != 0.0)\n+    abort ();\n+  id nilobj = (id)0;\n+  p = [nilobj baz];\n+  if (p.x != 0.0 || p.y != 0.0 || p.z != 0.0)\n+    abort ();\n+  return 0;\n+}"}]}