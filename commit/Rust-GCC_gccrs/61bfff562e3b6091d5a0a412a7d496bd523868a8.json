{"sha": "61bfff562e3b6091d5a0a412a7d496bd523868a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiZmZmNTYyZTNiNjA5MWQ1YTBhNDEyYTdkNDk2YmQ1MjM4NjhhOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-04-24T23:49:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-04-24T23:49:31Z"}, "message": "analyzer: fix ICE on NULL change.m_expr [PR100244]\n\nPR analyzer/100244 reports an ICE on a -Wanalyzer-free-of-non-heap\ndue to a case where free_of_non_heap::describe_state_change can be\npassed a NULL change.m_expr for a suitably complicated symbolic value.\n\nBulletproof it by checking for change.m_expr being NULL before\ndereferencing it.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/100244\n\t* sm-malloc.cc (free_of_non_heap::describe_state_change):\n\tBulletproof against change.m_expr being NULL.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/100244\n\t* g++.dg/analyzer/pr100244.C: New test.", "tree": {"sha": "7a0ea8554cc234243438422f4f941458013d4312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0ea8554cc234243438422f4f941458013d4312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61bfff562e3b6091d5a0a412a7d496bd523868a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bfff562e3b6091d5a0a412a7d496bd523868a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61bfff562e3b6091d5a0a412a7d496bd523868a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bfff562e3b6091d5a0a412a7d496bd523868a8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e7833b94953ba6b4a915150666969ad9fc66af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e7833b94953ba6b4a915150666969ad9fc66af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e7833b94953ba6b4a915150666969ad9fc66af"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "f02b73ab90a6b9c209ac288b60f249437c19721d", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bfff562e3b6091d5a0a412a7d496bd523868a8/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bfff562e3b6091d5a0a412a7d496bd523868a8/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=61bfff562e3b6091d5a0a412a7d496bd523868a8", "patch": "@@ -1303,7 +1303,7 @@ class free_of_non_heap : public malloc_diagnostic\n   {\n     /* Attempt to reconstruct what kind of pointer it is.\n        (It seems neater for this to be a part of the state, though).  */\n-    if (TREE_CODE (change.m_expr) == SSA_NAME)\n+    if (change.m_expr && TREE_CODE (change.m_expr) == SSA_NAME)\n       {\n \tgimple *def_stmt = SSA_NAME_DEF_STMT (change.m_expr);\n \tif (gcall *call = dyn_cast <gcall *> (def_stmt))"}, {"sha": "261b3cfff5705bc98125f804cbee64c4a822711f", "filename": "gcc/testsuite/g++.dg/analyzer/pr100244.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bfff562e3b6091d5a0a412a7d496bd523868a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr100244.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bfff562e3b6091d5a0a412a7d496bd523868a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr100244.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr100244.C?ref=61bfff562e3b6091d5a0a412a7d496bd523868a8", "patch": "@@ -0,0 +1,22 @@\n+// { dg-additional-options \"-O1 -Wno-free-nonheap-object\" }\n+\n+inline void *operator new (__SIZE_TYPE__, void *__p) { return __p; }\n+\n+struct __aligned_buffer {\n+  int _M_storage;\n+  int *_M_addr() { return &_M_storage; }\n+};\n+\n+struct _Hashtable_alloc {\n+  int _M_single_bucket;\n+  int *_M_buckets;\n+  _Hashtable_alloc () { _M_buckets = &_M_single_bucket; }\n+  ~_Hashtable_alloc () { delete _M_buckets; } // { dg-warning \"not on the heap\" }\n+};\n+\n+void\n+test01 (__aligned_buffer buf)\n+{\n+  _Hashtable_alloc *tmp = new (buf._M_addr ()) _Hashtable_alloc;\n+  tmp->~_Hashtable_alloc ();\n+}"}]}