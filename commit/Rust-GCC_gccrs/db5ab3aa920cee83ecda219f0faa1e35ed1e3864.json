{"sha": "db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1YWIzYWE5MjBjZWU4M2VjZGEyMTlmMGZhYTFlMzVlZDFlMzg2NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-14T19:36:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-14T19:36:54Z"}, "message": "LWG 3074 make scalar types non-deduced in valarray non-member functions\n\n\t* include/bits/valarray_after.h (_DEFINE_EXPR_BINARY_FUNCTION): Change\n\tscalar parameters to be a non-deduced context.\n\t* include/std/valarray (_DEFINE_BINARY_OPERATOR): Likewise. Adjust\n\twhitespace.\n\t* testsuite/26_numerics/valarray/operators.cc: Test scalar operands.\n\t* testsuite/26_numerics/valarray/transcend.cc: New.\n\nFrom-SVN: r261610", "tree": {"sha": "5e4da3936c1f1d6c583a8b9020cdeb6731911d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e4da3936c1f1d6c583a8b9020cdeb6731911d5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7595376f17fdd6b6a558dbc1f14d30baa69949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7595376f17fdd6b6a558dbc1f14d30baa69949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7595376f17fdd6b6a558dbc1f14d30baa69949"}], "stats": {"total": 211, "additions": 188, "deletions": 23}, "files": [{"sha": "6db36225c1feae13253fcf63656238323d8b1015", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -1,5 +1,13 @@\n 2018-06-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tLWG 3074 make scalar types non-deduced in valarray non-member functions\n+\t* include/bits/valarray_after.h (_DEFINE_EXPR_BINARY_FUNCTION): Change\n+\tscalar parameters to be a non-deduced context.\n+\t* include/std/valarray (_DEFINE_BINARY_OPERATOR): Likewise. Adjust\n+\twhitespace.\n+\t* testsuite/26_numerics/valarray/operators.cc: Test scalar operands.\n+\t* testsuite/26_numerics/valarray/transcend.cc: New.\n+\n \t* include/std/tuple (__cpp_lib_tuple_element_t, tuple_element_t):\n \tMove back to <utility>.\n \t* include/std/utility (__cpp_lib_tuple_element_t. tuple_element_t):"}, {"sha": "b0fc131d1eb9069ca9b88aecebb9a0a9fe29178f", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -1160,6 +1160,14 @@ requirements of the license of GCC.\n     <listitem><para>Add noexcept.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr3074\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#3074\">3074</link>:\n+       <emphasis>Non-member functions for <code>valarray</code> should only deduce from the <code>valarray</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Change scalar operands to be non-deduced context, so that\n+      they will allow conversions from other types to the value_type.\n+    </para></listitem></varlistentry>\n+\n   </variablelist>\n \n  </section>"}, {"sha": "d2ba76d54c579ad0b5a38d9cd8ff3231eb091c51", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -529,15 +529,17 @@ namespace __detail\n                                                                        \\\n   template<typename _Tp>                                               \\\n     inline _Expr<_BinClos<_UFun, _ValArray, _Constant, _Tp, _Tp>, _Tp> \\\n-    _Fun(const valarray<_Tp>& __v, const _Tp& __t)                     \\\n+    _Fun(const valarray<_Tp>& __v,\t\t\t\t       \\\n+\t const typename valarray<_Tp>::value_type& __t)                \\\n     {                                                                  \\\n       typedef _BinClos<_UFun, _ValArray, _Constant, _Tp, _Tp> _Closure;\\\n       return _Expr<_Closure, _Tp>(_Closure(__v, __t));                 \\\n     }                                                                  \\\n \t\t\t\t\t\t\t\t       \\\n   template<typename _Tp>                                               \\\n     inline _Expr<_BinClos<_UFun, _Constant, _ValArray, _Tp, _Tp>, _Tp> \\\n-    _Fun(const _Tp& __t, const valarray<_Tp>& __v)                     \\\n+    _Fun(const typename valarray<_Tp>::value_type& __t,\t\t       \\\n+\t const valarray<_Tp>& __v)                                     \\\n     {                                                                  \\\n       typedef _BinClos<_UFun, _Constant, _ValArray, _Tp, _Tp> _Closure;\\\n       return _Expr<_Closure, _Tp>(_Closure(__t, __v));                 \\"}, {"sha": "7b446fdf9eb92090892a1f1a3d9028f4985eefdf", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -1078,11 +1078,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define _DEFINE_VALARRAY_UNARY_OPERATOR(_Op, _Name)                     \\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-    inline typename valarray<_Tp>::template _UnaryOp<_Name>::_Rt      \t\\\n+    inline typename valarray<_Tp>::template _UnaryOp<_Name>::_Rt\t\\\n     valarray<_Tp>::operator _Op() const\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      typedef _UnClos<_Name, _ValArray, _Tp> _Closure;\t                \\\n-      typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n+      typedef _UnClos<_Name, _ValArray, _Tp> _Closure;\t\t\t\\\n+      typedef typename __fun<_Name, _Tp>::result_type _Rt;\t\t\\\n       return _Expr<_Closure, _Rt>(_Closure(*this));\t\t\t\\\n     }\n \n@@ -1150,34 +1150,36 @@ _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, __shift_right)\n \n #define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-    inline _Expr<_BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp>,       \\\n-                 typename __fun<_Name, _Tp>::result_type>               \\\n+    inline _Expr<_BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp>,\t\\\n+\t\t typename __fun<_Name, _Tp>::result_type>\t\t\\\n     operator _Op(const valarray<_Tp>& __v, const valarray<_Tp>& __w)\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      __glibcxx_assert(__v.size() == __w.size());                       \\\n-      typedef _BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp> _Closure; \\\n-      typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n-      return _Expr<_Closure, _Rt>(_Closure(__v, __w));                  \\\n+      __glibcxx_assert(__v.size() == __w.size());\t\t\t\\\n+      typedef _BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp> _Closure;\t\\\n+      typedef typename __fun<_Name, _Tp>::result_type _Rt;\t\t\\\n+      return _Expr<_Closure, _Rt>(_Closure(__v, __w));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-    inline _Expr<_BinClos<_Name, _ValArray,_Constant, _Tp, _Tp>,        \\\n-                 typename __fun<_Name, _Tp>::result_type>               \\\n-    operator _Op(const valarray<_Tp>& __v, const _Tp& __t)\t\t\\\n+    inline _Expr<_BinClos<_Name, _ValArray,_Constant, _Tp, _Tp>,\t\\\n+\t\t typename __fun<_Name, _Tp>::result_type>\t\t\\\n+    operator _Op(const valarray<_Tp>& __v,\t\t\t\t\\\n+\t\t const typename valarray<_Tp>::value_type& __t)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name, _ValArray, _Constant, _Tp, _Tp> _Closure;\t\\\n-      typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n-      return _Expr<_Closure, _Rt>(_Closure(__v, __t));\t                \\\n+      typedef typename __fun<_Name, _Tp>::result_type _Rt;\t\t\\\n+      return _Expr<_Closure, _Rt>(_Closure(__v, __t));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-    inline _Expr<_BinClos<_Name, _Constant, _ValArray, _Tp, _Tp>,       \\\n-                 typename __fun<_Name, _Tp>::result_type>               \\\n-    operator _Op(const _Tp& __t, const valarray<_Tp>& __v)\t\t\\\n+    inline _Expr<_BinClos<_Name, _Constant, _ValArray, _Tp, _Tp>,\t\\\n+\t\t typename __fun<_Name, _Tp>::result_type>\t\t\\\n+    operator _Op(const typename valarray<_Tp>::value_type& __t,\t\t\\\n+\t\t const valarray<_Tp>& __v)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name, _Constant, _ValArray, _Tp, _Tp> _Closure; \\\n-      typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n-      return _Expr<_Closure, _Rt>(_Closure(__t, __v));        \t        \\\n+      typedef _BinClos<_Name, _Constant, _ValArray, _Tp, _Tp> _Closure;\t\\\n+      typedef typename __fun<_Name, _Tp>::result_type _Rt;\t\t\\\n+      return _Expr<_Closure, _Rt>(_Closure(__t, __v));\t\t\t\\\n     }\n \n _DEFINE_BINARY_OPERATOR(+, __plus)"}, {"sha": "f0d5c05c0b7b15c2b48058789c5c11fe3a5a9a9d", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/operators.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Foperators.cc?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -58,9 +58,54 @@ void test02() // check binary operators\n   VERIFY( (u>=v)[0] == (1>=3) );\n }\n \n+void test03() // check binary operators with scalar operands\n+{\n+  std::valarray<int> u(1);\n+  u[0]=1;\n+  long v = 3; // LWG 3074 allows scalar operand to be different to value_type.\n+\n+  VERIFY( (u+ v)[0] == (1+ 3) );\n+  VERIFY( (u- v)[0] == (1- 3) );\n+  VERIFY( (u* v)[0] == (1* 3) );\n+  VERIFY( (u/ v)[0] == (1/ 3) );\n+  VERIFY( (u% v)[0] == (1% 3) );\n+  VERIFY( (u^ v)[0] == (1^ 3) );\n+  VERIFY( (u& v)[0] == (1& 3) );\n+  VERIFY( (u| v)[0] == (1| 3) );\n+  VERIFY( (u<<v)[0] == (1<<3) );\n+  VERIFY( (u>>v)[0] == (1>>3) );\n+  VERIFY( (u&&v)[0] == (1&&3) );\n+  VERIFY( (u||v)[0] == (1||3) );\n+  VERIFY( (u==v)[0] == (1==3) );\n+  VERIFY( (u!=v)[0] == (1!=3) );\n+  VERIFY( (u< v)[0] == (1< 3) );\n+  VERIFY( (u> v)[0] == (1> 3) );\n+  VERIFY( (u<=v)[0] == (1<=3) );\n+  VERIFY( (u>=v)[0] == (1>=3) );\n+\n+  VERIFY( (v+ u)[0] == (3+ 1) );\n+  VERIFY( (v- u)[0] == (3- 1) );\n+  VERIFY( (v* u)[0] == (3* 1) );\n+  VERIFY( (v/ u)[0] == (3/ 1) );\n+  VERIFY( (v% u)[0] == (3% 1) );\n+  VERIFY( (v^ u)[0] == (3^ 1) );\n+  VERIFY( (v& u)[0] == (3& 1) );\n+  VERIFY( (v| u)[0] == (3| 1) );\n+  VERIFY( (v<<u)[0] == (3<<1) );\n+  VERIFY( (v>>u)[0] == (3>>1) );\n+  VERIFY( (v&&u)[0] == (3&&1) );\n+  VERIFY( (v||u)[0] == (3||1) );\n+  VERIFY( (v==u)[0] == (3==1) );\n+  VERIFY( (v!=u)[0] == (3!=1) );\n+  VERIFY( (v< u)[0] == (3< 1) );\n+  VERIFY( (v> u)[0] == (3> 1) );\n+  VERIFY( (v<=u)[0] == (3<=1) );\n+  VERIFY( (v>=u)[0] == (3>=1) );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n-  return 0;\n+  test03();\n }"}, {"sha": "e18c30ac35a1f8e05f6700f8a270759475707b59", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/transcend.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Ftranscend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ab3aa920cee83ecda219f0faa1e35ed1e3864/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Ftranscend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Ftranscend.cc?ref=db5ab3aa920cee83ecda219f0faa1e35ed1e3864", "patch": "@@ -0,0 +1,100 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+bool eq(double d, double e)\n+{\n+  return (int)(d * 100) == (int)(e * 100);\n+}\n+\n+void\n+test01()\n+{\n+  std::valarray<double> v(2);\n+  v[0] = -0.5;\n+  v[1] = 0.25;\n+  std::valarray<double> v_abs = abs(v);\n+  VERIFY( v_abs[0] == 0.5 );\n+  VERIFY( v_abs[1] == 0.25 );\n+\n+  std::valarray<double> v_acos = acos(v);\n+  VERIFY( eq( v_acos[0], 2.09 ) );\n+  VERIFY( eq( v_acos[1], 1.31 ) );\n+\n+  std::valarray<double> v_asin = asin(v);\n+  VERIFY( eq( v_asin[0], -0.52 ) );\n+  VERIFY( eq( v_asin[1], 0.25 ) );\n+\n+  std::valarray<double> v_atan = atan(v);\n+  VERIFY( eq( v_atan[0], -0.46 ) );\n+  VERIFY( eq( v_atan[1], 0.24 ) );\n+\n+  std::valarray<double> v2(2);\n+  v2[0] = 4;\n+  v2[1] = 3;\n+  std::valarray<double> v_atan2 = atan2(v, v2);\n+  VERIFY( eq( v_atan2[0], -0.12 ) );\n+  VERIFY( eq( v_atan2[1], 0.08 ) );\n+\n+  v_atan2 = atan2(v, 4);  // LWG 3074 allows mixed types\n+  VERIFY( eq( v_atan2[0], -0.12 ) );\n+  VERIFY( eq( v_atan2[1], 0.06 ) );\n+\n+  v_atan2 = atan2(4, v);  // LWG 3074 allows mixed types\n+  VERIFY( eq( v_atan2[0], 1.69 ) );\n+  VERIFY( eq( v_atan2[1], 1.50 ) );\n+\n+  std::valarray<double> v_cos = cos(v);\n+  VERIFY( eq( v_cos[0], 0.87 ) );\n+  VERIFY( eq( v_cos[1], 0.96 ) );\n+\n+  std::valarray<double> v_cosh = cosh(v);\n+  VERIFY( eq( v_cosh[0], 1.12 ) );\n+  VERIFY( eq( v_cosh[1], 1.03 ) );\n+\n+  std::valarray<double> v_exp = exp(v);\n+  VERIFY( eq( v_exp[0], 0.60 ) );\n+  VERIFY( eq( v_exp[1], 1.28 ) );\n+\n+  std::valarray<double> v_log = log(v);\n+  VERIFY( eq( v_log[1], -1.38 ) );\n+\n+  std::valarray<double> v_log10 = log10(v);\n+  VERIFY( eq( v_log10[1], -0.60 ) );\n+\n+  std::valarray<double> v_pow = pow(v, v2);\n+  VERIFY( eq( v_pow[0], 0.06 ) );\n+  VERIFY( eq( v_pow[1], 0.01 ) );\n+\n+  v_pow = pow(v, 3);  // LWG 3074 allows mixed types\n+  VERIFY( eq( v_pow[0], -0.12 ) );\n+  VERIFY( eq( v_pow[1], 0.01 ) );\n+\n+  v_pow = pow(4, v);  // LWG 3074 allows mixed types\n+  VERIFY( eq( v_pow[0], 0.5 ) );\n+  VERIFY( eq( v_pow[1], 1.41 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}