{"sha": "4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkOWNhOTJjZjhjYjlkNjkxYTVkYmUwNGRlMTE0ZmM5YWI4MTdmYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-01-07T12:43:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-01-07T12:43:06Z"}, "message": "Add round_nimm_scalar_predicate and use xBm\n\nAdd round_nimm_scalar_predicate for scalar SSE integer to floating point\nconversions since round_nimm_predicate is for vector operand.\n\nround_constraint can't be used on vector SSE patterns since it is mapped\nto \"vm\".  The \"xBm\" constraint must be used in this case.\n\ngcc/\n\n\tPR target/69171\n\t* config/i386/sse.md (<sse>_sqrt<mode>2<mask_name><round_name>):\n\tUse the \"xBm\" constraint.\n\t(float<sseintvecmodelower><mode>2<mask_name><round_name):\n\tLikewise.\n\t(sse_cvtsi2ss<round_name>): Use round_nimm_scalar_predicate.\n\t(sse_cvtsi2ssq<round_name>): Likewise.\n\t(sse_cvtss2si<round_name>): Likewise.\n\t(sse_cvtss2siq<round_name>): Likewise.\n\t(sse2_cvtsi2sdq<round_name>): Likewise.\n\t(sse2_cvtsd2si<round_name>): Likewise.\n\t(sse2_cvtsd2siq<round_name>): Likewise.\n\t* config/i386/subst.md (round_nimm_scalar_predicate): New\n\tpredicate.\n\ngcc/testsuite/\n\n\tPR target/69171\n\t* gcc.target/i386/pr69171-1.c: New test.\n\t* gcc.target/i386/pr69171-2.c: Likewise.\n\t* gcc.target/i386/pr69171-3.c: Likewise.\n\t* gcc.target/i386/pr69171-4.c: Likewise.\n\t* gcc.target/i386/pr69171-5.c: Likewise.\n\t* gcc.target/i386/pr69171-6.c: Likewise.\n\nFrom-SVN: r232126", "tree": {"sha": "076f8017e501ee48e47d9e59842fe038f35ac797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076f8017e501ee48e47d9e59842fe038f35ac797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e33d4dc9e35aa31ecfde6ed68f8d5e66eb19446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e33d4dc9e35aa31ecfde6ed68f8d5e66eb19446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e33d4dc9e35aa31ecfde6ed68f8d5e66eb19446"}], "stats": {"total": 138, "additions": 123, "deletions": 15}, "files": [{"sha": "619bae65a85d4f73fa20f6c774f691c72432eed6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -1,3 +1,20 @@\n+2016-01-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/69171\n+\t* config/i386/sse.md (<sse>_sqrt<mode>2<mask_name><round_name>):\n+\tUse the \"xBm\" constraint.\n+\t(float<sseintvecmodelower><mode>2<mask_name><round_name):\n+\tLikewise.\n+\t(sse_cvtsi2ss<round_name>): Use round_nimm_scalar_predicate.\n+\t(sse_cvtsi2ssq<round_name>): Likewise.\n+\t(sse_cvtss2si<round_name>): Likewise.\n+\t(sse_cvtss2siq<round_name>): Likewise.\n+\t(sse2_cvtsi2sdq<round_name>): Likewise.\n+\t(sse2_cvtsd2si<round_name>): Likewise.\n+\t(sse2_cvtsd2siq<round_name>): Likewise.\n+\t* config/i386/subst.md (round_nimm_scalar_predicate): New\n+\tpredicate.\n+\n 2015-12-15  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR middle-end/67639"}, {"sha": "278dd383295fc12a53354d85c2a7c87c298919bd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -1862,11 +1862,14 @@\n })\n \n (define_insn \"<sse>_sqrt<mode>2<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=v\")\n-\t(sqrt:VF (match_operand:VF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n+\t(sqrt:VF (match_operand:VF 1 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n-  \"%vsqrt<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n-  [(set_attr \"type\" \"sse\")\n+  \"@\n+   sqrt<ssemodesuffix>\\t{%1, %0|%0, %1}\n+   vsqrt<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -4269,7 +4272,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:SI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n+\t    (float:SF (match_operand:SI 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -4291,7 +4294,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:DI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n+\t    (float:SF (match_operand:DI 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE && TARGET_64BIT\"\n@@ -4314,7 +4317,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n@@ -4344,7 +4347,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n \t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n+\t     (match_operand:V4SF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE && TARGET_64BIT\"\n@@ -4431,12 +4434,15 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"float<sseintvecmodelower><mode>2<mask_name><round_name>\"\n-  [(set (match_operand:VF1 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:VF1 0 \"register_operand\" \"=x,v\")\n \t(float:VF1\n-\t  (match_operand:<sseintvecmode> 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+\t  (match_operand:<sseintvecmode> 1 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n-  \"%vcvtdq2ps\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  \"@\n+   cvtdq2ps\\t{%1, %0|%0, %1}\n+   vcvtdq2ps\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n@@ -4684,7 +4690,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V2DF\n \t  (vec_duplicate:V2DF\n-\t    (float:DF (match_operand:DI 2 \"<round_nimm_predicate>\" \"r,m,<round_constraint3>\")))\n+\t    (float:DF (match_operand:DI 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V2DF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n@@ -4806,7 +4812,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n@@ -4837,7 +4843,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n \t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"v,<round_constraint2>\")\n+\t     (match_operand:V2DF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\""}, {"sha": "e2f67c4a00c77a46f42ad000c561344bfd122944", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -124,6 +124,7 @@\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n (define_subst_attr \"round_nimm_predicate\" \"round\" \"vector_operand\" \"register_operand\")\n+(define_subst_attr \"round_nimm_scalar_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"round_prefix\" \"round\" \"vex\" \"evex\")\n (define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode\n \t\t\t\t\t\t\t      || <MODE>mode == V8DFmode"}, {"sha": "53c19946899c9cb254c37beaa09b675db34a7339", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -1,3 +1,13 @@\n+2016-01-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/69171\n+\t* gcc.target/i386/pr69171-1.c: New test.\n+\t* gcc.target/i386/pr69171-2.c: Likewise.\n+\t* gcc.target/i386/pr69171-3.c: Likewise.\n+\t* gcc.target/i386/pr69171-4.c: Likewise.\n+\t* gcc.target/i386/pr69171-5.c: Likewise.\n+\t* gcc.target/i386/pr69171-6.c: Likewise.\n+\n 2015-12-15  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR middle-end/67639"}, {"sha": "0b92c22b61f8a21b830d835e13fd8da7246b2cfe", "filename": "gcc/testsuite/gcc.target/i386/pr69171-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-1.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+#pragma pack(2)\n+struct {\n+  int n;\n+} a;\n+extern void fn2 (float);\n+void\n+fn1 ()\n+{\n+  fn2 (a.n);\n+}"}, {"sha": "80e1a097f20ed26baa752465a899a294c5311305", "filename": "gcc/testsuite/gcc.target/i386/pr69171-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-2.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+#pragma pack(2)\n+struct {\n+  long long int n;\n+} a;\n+extern void fn2 (float);\n+void\n+fn1 ()\n+{\n+  fn2 (a.n);\n+}"}, {"sha": "73717bef6baf8e7e64247adcba88a8fd37ada8d3", "filename": "gcc/testsuite/gcc.target/i386/pr69171-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-3.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-fpic -O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+extern int glob1;\n+\n+double\n+foo (void)\n+{\n+  return (double) (int) (uintptr_t) &glob1;\n+}"}, {"sha": "e4acf3fd5f8d2b16869a19782e807ac80af62a9e", "filename": "gcc/testsuite/gcc.target/i386/pr69171-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-4.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-fpic -O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+extern int glob1;\n+\n+float\n+foo (void)\n+{\n+  return (float) (int) (uintptr_t) &glob1;\n+}"}, {"sha": "230af3ec3d1ecd89056e13b8a59e3cd5faaa8235", "filename": "gcc/testsuite/gcc.target/i386/pr69171-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-5.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-fpic -O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+extern int glob1;\n+\n+float\n+foo (void)\n+{\n+  return (float) (long long) (uintptr_t) &glob1;\n+}"}, {"sha": "b82627a441903dcd9002b5d6e48da6cb28ad44fc", "filename": "gcc/testsuite/gcc.target/i386/pr69171-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69171-6.c?ref=4cd9ca92cf8cb9d691a5dbe04de114fc9ab817fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-fpic -O2 -msse2 -mno-avx -mfpmath=sse\" } */\n+\n+__extension__ typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+extern int glob1;\n+\n+double\n+foo (void)\n+{\n+  return (double) (long long) (uintptr_t) &glob1;\n+}"}]}