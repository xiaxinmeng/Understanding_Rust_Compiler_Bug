{"sha": "63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiZTJhNWFiNGY4NGIyNTdjYjE3ZDNhOGYxNmJjNTZmZjg5MjdiYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T13:53:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T13:53:38Z"}, "message": "[multiple changes]\n\n2011-08-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c, g-socket.ads: Adjust maximum allowed value for\n\tfield tv_sec in struct timeval.\n\n2011-08-30  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch9.adb, exp_disp.adb, sem_ch9.adb, sem_res.adb: Protect several\n\tblocks of code doing full expansion, previously only guarded by\n\tExpander_Active, by anding the test that ALFA_Mode is not set\n\n2011-08-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Return_Type): If the return type is incomplete,\n\tadd the function to the list of private dependents, for subsequent\n\tlegality check on Taft amendment types.\n\t* sem_ch12.adb (Analyze_Formal_Incomplete_Type): Initialize\n\tPrivate_Dependents, as for other incomplete types.\n\t* sem_util.adb (Wrong_Type): Avoid cascaded errors when a\n\tTaft-amendment type is used as the return type of a function.\n\nFrom-SVN: r178307", "tree": {"sha": "ac56f5229e339d6d196cd4be5f5cd789acb95c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac56f5229e339d6d196cd4be5f5cd789acb95c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/comments", "author": null, "committer": null, "parents": [{"sha": "dd54644b315aa181b563ee78ee5f48ec908632c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd54644b315aa181b563ee78ee5f48ec908632c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd54644b315aa181b563ee78ee5f48ec908632c2"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "0ef75da9cae6141eac4309a6785085d9fecbe18a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -1,3 +1,24 @@\n+2011-08-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c, g-socket.ads: Adjust maximum allowed value for\n+\tfield tv_sec in struct timeval.\n+\n+2011-08-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch9.adb, exp_disp.adb, sem_ch9.adb, sem_res.adb: Protect several\n+\tblocks of code doing full expansion, previously only guarded by\n+\tExpander_Active, by anding the test that ALFA_Mode is not set\n+\n+2011-08-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Return_Type): If the return type is incomplete,\n+\tadd the function to the list of private dependents, for subsequent\n+\tlegality check on Taft amendment types.\n+\t* sem_ch12.adb (Analyze_Formal_Incomplete_Type): Initialize\n+\tPrivate_Dependents, as for other incomplete types.\n+\t* sem_util.adb (Wrong_Type): Avoid cascaded errors when a\n+\tTaft-amendment type is used as the return type of a function.\n+\n 2011-08-30  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Check_Abstract_Overriding): Code cleanup: replace code"}, {"sha": "9e5951af7f497d530599ceca4d5f767d3a562483", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -4906,13 +4906,9 @@ package body Exp_Ch9 is\n       Ldecl2 : Node_Id;\n \n    begin\n-      --  In formal verification mode, do not expand tasking constructs\n-\n-      if ALFA_Mode then\n-         return;\n-      end if;\n-\n-      if Expander_Active then\n+      if Expander_Active\n+        and then not ALFA_Mode\n+      then\n \n          --  If we have no handled statement sequence, we may need to build\n          --  a dummy sequence consisting of a null statement. This can be\n@@ -11599,7 +11595,9 @@ package body Exp_Ch9 is\n          Error_Msg_CRT (\"protected body\", N);\n          return;\n \n-      elsif Expander_Active then\n+      elsif Expander_Active\n+        and then not ALFA_Mode\n+      then\n \n          --  Associate discriminals with the first subprogram or entry body to\n          --  be expanded."}, {"sha": "b4f4970c4579eec25e55318ff953511aa21fc360", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -702,6 +702,7 @@ package body Exp_Disp is\n       --  of this restriction.\n \n       if not Expander_Active\n+        or else ALFA_Mode\n         or else Restriction_Active (No_Dispatching_Calls)\n       then\n          return;"}, {"sha": "c218b924ab0d4235c6fea20797e68aa3c23866d2", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2010, AdaCore                     --\n+--                     Copyright (C) 2001-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -432,7 +432,7 @@ package GNAT.Sockets is\n \n    Immediate : constant Duration := 0.0;\n \n-   Timeval_Forever : constant := 2.0 ** (SOSC.SIZEOF_tv_sec * 8 - 1) - 1.0;\n+   Timeval_Forever : constant := 1.0 * SOSC.MAX_tv_sec;\n    Forever         : constant Duration :=\n                        Duration'Min (Duration'Last, Timeval_Forever);\n "}, {"sha": "fe3b90d1854cc884fdcf949e8514f066b2cff8f9", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1219,6 +1219,26 @@ CND(IP_PKTINFO, \"Get datagram info\")\n CND(SIZEOF_tv_sec, \"tv_sec\")\n #define SIZEOF_tv_usec (sizeof tv.tv_usec)\n CND(SIZEOF_tv_usec, \"tv_usec\")\n+/*\n+\n+   --  Maximum allowed value for tv_sec\n+*/\n+\n+/**\n+ ** On Solaris and IRIX, field tv_sec in struct timeval has an undocumented\n+ ** hard-wired limit of 100 million.\n+ ** On IA64 HP-UX the limit is 2**31 - 1.\n+ **/\n+#if defined (sun) || (defined (__mips) && defined (__sgi))\n+# define MAX_tv_sec \"100_000_000\"\n+\n+#elif defined (__hpux__)\n+# define MAX_tv_sec \"16#7fffffff#\"\n+\n+#else\n+# define MAX_tv_sec \"2 ** (SIZEOF_tv_sec * 8 - 1) - 1\"\n+#endif\n+CNS(MAX_tv_sec, \"\")\n }\n /*\n "}, {"sha": "39ba9b95c110daae85b26b8d066f4a16889dec33", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -2381,6 +2381,7 @@ package body Sem_Ch12 is\n       Enter_Name (T);\n       Set_Ekind (T, E_Incomplete_Type);\n       Set_Etype (T, T);\n+      Set_Private_Dependents (T, New_Elmt_List);\n \n       if Tagged_Present (Def) then\n          Set_Is_Tagged_Type (T);"}, {"sha": "a5d6a1afab8c30ff3f470d438c72df9ca416a958", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -1596,6 +1596,17 @@ package body Sem_Ch6 is\n                           Designator, Typ);\n                   end if;\n \n+                  --  The type must be completed in the current package. This\n+                  --  is checked at the end of the package declaraton, when\n+                  --  Taft amemdment types are identified.\n+\n+                  if Ekind (Scope (Current_Scope)) = E_Package\n+                    and then\n+                      In_Private_Part (Scope (Current_Scope))\n+                  then\n+                     Append_Elmt (Designator, Private_Dependents (Typ));\n+                  end if;\n+\n                else\n                   Error_Msg_NE\n                     (\"invalid use of incomplete type&\", Designator, Typ);"}, {"sha": "e26707603e46c9ecbc10fe045e124266bc113e14", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -1280,6 +1280,7 @@ package body Sem_Ch9 is\n \n          if Serious_Errors_Detected = 0\n            and then Expander_Active\n+           and then not ALFA_Mode\n          then\n             Expand_N_Protected_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);\n@@ -2083,6 +2084,7 @@ package body Sem_Ch9 is\n \n          if Serious_Errors_Detected = 0\n            and then Expander_Active\n+           and then not ALFA_Mode\n          then\n             Expand_N_Task_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);"}, {"sha": "c3d9ec96a175ab8d62068e108f377d610cf99bba", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -3443,6 +3443,7 @@ package body Sem_Res is\n               and then Is_Limited_Record (Etype (F))\n               and then not Is_Constrained (Etype (F))\n               and then Expander_Active\n+              and then not ALFA_Mode\n               and then (Is_Controlled (Etype (F)) or else Has_Task (Etype (F)))\n             then\n                Establish_Transient_Scope (A, False);\n@@ -3458,6 +3459,7 @@ package body Sem_Res is\n             elsif Nkind (A) = N_Op_Concat\n               and then Nkind (N) = N_Procedure_Call_Statement\n               and then Expander_Active\n+              and then not ALFA_Mode\n               and then\n                 not (Is_Intrinsic_Subprogram (Nam)\n                       and then Chars (Nam) = Name_Asm)\n@@ -3521,6 +3523,7 @@ package body Sem_Res is\n \n                      if (Is_Controlled (DDT) or else Has_Task (DDT))\n                        and then Expander_Active\n+                       and then not ALFA_Mode\n                      then\n                         Establish_Transient_Scope (A, False);\n                      end if;\n@@ -5492,6 +5495,7 @@ package body Sem_Res is\n          null;\n \n       elsif Expander_Active\n+        and then not ALFA_Mode\n         and then Is_Type (Etype (Nam))\n         and then Requires_Transient_Scope (Etype (Nam))\n         and then\n@@ -6613,6 +6617,7 @@ package body Sem_Res is\n       --  case we must trigger the transient scope mechanism.\n \n       elsif Expander_Active\n+        and then not ALFA_Mode\n         and then Requires_Transient_Scope (Etype (Nam))\n       then\n          Establish_Transient_Scope (N, Sec_Stack => True);"}, {"sha": "5306ec6bbd27d40adff9d08ca15eed6fbffa0cc0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=63be2a5ab4f84b257cb17d3a8f16bc56ff8927bc", "patch": "@@ -13096,6 +13096,22 @@ package body Sem_Util is\n       then\n          return;\n \n+      --  If one of the types is a Taft-Amendment type and the other it its\n+      --  completion, it must be an illegal use of a TAT in the spec, for\n+      --  which an error was already emitted. Avoid cascaded errors.\n+\n+      elsif Is_Incomplete_Type (Expec_Type)\n+        and then Has_Completion_In_Body (Expec_Type)\n+        and then Full_View (Expec_Type) = Etype (Expr)\n+      then\n+         return;\n+\n+      elsif Is_Incomplete_Type (Etype (Expr))\n+        and then Has_Completion_In_Body (Etype (Expr))\n+        and then Full_View (Etype (Expr)) = Expec_Type\n+      then\n+         return;\n+\n       --  In  an instance, there is an ongoing problem with completion of\n       --  type derived from private types. Their structure is what Gigi\n       --  expects, but the  Etype is the parent type rather than the"}]}