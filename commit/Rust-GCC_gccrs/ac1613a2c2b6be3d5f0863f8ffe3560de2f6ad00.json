{"sha": "ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxNjEzYTJjMmI2YmUzZDVmMDg2M2Y4ZmZlMzU2MGRlMmY2YWQwMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-15T04:53:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-15T04:53:52Z"}, "message": "[multiple changes]\n\n\n2003-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/23_containers/bitset_members.cc: Add test variable.\n\t* testsuite/23_containers/map_insert.cc: Same.\n\t* testsuite/22_locale/ctype/cons/char/1.cc: Same.\n\t* testsuite/22_locale/codecvt/max_length/wchar_t/1.cc: Same.\n\t* testsuite/22_locale/codecvt/max_length/wchar_t/2.cc: Same.\n\t* testsuite/22_locale/codecvt/max_length/wchar_t/3.cc: Same.\n\t* testsuite/22_locale/codecvt/max_length/wchar_t/4.cc: Same.\n\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/1.cc: Same.\n\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/2.cc: Same.\n\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/3.cc: Same.\n\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/4.cc: Same.\n\t* testsuite/27_io/istream_exception.cc: Same.\n\t* testsuite/27_io/filebuf_virtuals.cc: Same.\n\t* testsuite/27_io/stringbuf_virtuals.cc: Same.\n\t* testsuite/27_io/ostream_inserter_arith.cc: Same.\n\t* testsuite/26_numerics/valarray_operators.cc: Same.\n\t* testsuite/26_numerics/slice.cc: Same.\n\t* testsuite/26_numerics/slice_array_assignment.cc: Same.\n\t* testsuite/24_iterators/istream_iterator.cc: Same.\n\t* mkcheck.in (TESTS_FILE): Use dejagnu-generated file if possible.\n\n2003-03-14  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/9581\n\tPR libstdc++/9870\n\t* config/locale/generic/ctype_members.cc,\n\t* config/locale/gnu/ctype_members.cc\n\t(ctype<wchar_t>::do_widen(char)):  Cast argument to\n\tunsigned char before passing to btowc.\n\t(ctype<wchar_t>::do_widen(const char*, const char*, wchar_t*)):\n\tConvert characters with btowc instead of mbsrtowcs.\n\t(ctype<wchar_t>::do_narrow(const wchar_t*, const wchar_t*,\n\tchar, char*):\n\tConvert characters with wctob instead of wcsrtombs.\n\t* testsuite/22_locale/ctype/narrow/wchar_t/3.cc:  New test.\n\t* testsuite/22_locale/ctype/widen/wchar_t/2.cc:  New test.\n\t* testsuite/22_locale/ctype/widen/wchar_t/3.cc:  New test.\n\nFrom-SVN: r64391", "tree": {"sha": "204e3dee0d4d25d00d7dec32745c0e03db31439a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204e3dee0d4d25d00d7dec32745c0e03db31439a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/comments", "author": null, "committer": null, "parents": [{"sha": "d8eed979a34b1888fe34127d183a053ccc9a6a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8eed979a34b1888fe34127d183a053ccc9a6a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8eed979a34b1888fe34127d183a053ccc9a6a67"}], "stats": {"total": 311, "additions": 265, "deletions": 46}, "files": [{"sha": "62ce3f789006919affb661a2d437c496aa524014", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,3 +1,43 @@\n+2003-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/23_containers/bitset_members.cc: Add test variable.\t\n+\t* testsuite/23_containers/map_insert.cc: Same.\n+\t* testsuite/22_locale/ctype/cons/char/1.cc: Same.\n+\t* testsuite/22_locale/codecvt/max_length/wchar_t/1.cc: Same.\n+\t* testsuite/22_locale/codecvt/max_length/wchar_t/2.cc: Same.\n+\t* testsuite/22_locale/codecvt/max_length/wchar_t/3.cc: Same.\n+\t* testsuite/22_locale/codecvt/max_length/wchar_t/4.cc: Same.\n+\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/1.cc: Same.\n+\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/2.cc: Same.\n+\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/3.cc: Same.\n+\t* testsuite/22_locale/codecvt/always_noconv/wchar_t/4.cc: Same.\n+\t* testsuite/27_io/istream_exception.cc: Same.\n+\t* testsuite/27_io/filebuf_virtuals.cc: Same.\n+\t* testsuite/27_io/stringbuf_virtuals.cc: Same.\n+\t* testsuite/27_io/ostream_inserter_arith.cc: Same.\n+\t* testsuite/26_numerics/valarray_operators.cc: Same.\n+\t* testsuite/26_numerics/slice.cc: Same.\n+\t* testsuite/26_numerics/slice_array_assignment.cc: Same.\n+\t* testsuite/24_iterators/istream_iterator.cc: Same.\n+\t* mkcheck.in (TESTS_FILE): Use dejagnu-generated file if possible.\n+\t\n+2003-03-14  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/9581\n+\tPR libstdc++/9870\n+\t* config/locale/generic/ctype_members.cc,\n+\t* config/locale/gnu/ctype_members.cc\n+\t(ctype<wchar_t>::do_widen(char)):  Cast argument to\n+\tunsigned char before passing to btowc.\n+\t(ctype<wchar_t>::do_widen(const char*, const char*, wchar_t*)):\n+\tConvert characters with btowc instead of mbsrtowcs.\n+\t(ctype<wchar_t>::do_narrow(const wchar_t*, const wchar_t*,\n+\tchar, char*):\n+\tConvert characters with wctob instead of wcsrtombs.\n+\t* testsuite/22_locale/ctype/narrow/wchar_t/3.cc:  New test.\n+\t* testsuite/22_locale/ctype/widen/wchar_t/2.cc:  New test.\t\n+\t* testsuite/22_locale/ctype/widen/wchar_t/3.cc:  New test.\t\n+\n 2003-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/stdc++.h: New.\t"}, {"sha": "6b5a603583f454d695acf4bc552eb4a2737f2cf3", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -158,15 +158,18 @@ namespace std\n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  { return btowc(__c); }\n+  { return btowc(static_cast<unsigned char>(__c)); }\n   \n   const char* \n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n+    while (__lo < __hi)\n+      {\n+\t*__dest = btowc(static_cast<unsigned char>(*__lo));\n+\t++__lo;\n+\t++__dest;\n+      }\n     return __hi;\n   }\n \n@@ -183,22 +186,12 @@ namespace std\n   do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n \t    char* __dest) const\n   {\n-    size_t __offset = 0;\n-    while (true)\n+    while (__lo < __hi)\n       {\n-\tconst wchar_t* __start = __lo + __offset;        \n-\tsize_t __len = __hi - __start;\n-\t\n-\tmbstate_t __state;\n-\tmemset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-\tsize_t __con = wcsrtombs(__dest + __offset, &__start, __len, &__state);\n-\tif (__con != __len && __start != 0)\n-\t  {\n-\t    __offset = __start - __lo;          \n-\t    __dest[__offset++] = __dfault;\n-\t  }\n-\telse\n-\t  break;\n+\tint __c = wctob(*__lo);\n+\t*__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t++__lo;\n+\t++__dest;\n       }\n     return __hi;\n   }"}, {"sha": "34c79be0ca38d7d8d39a931540ccc30532999af5", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -169,7 +169,7 @@ namespace std\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    wchar_t __ret = btowc(__c);\n+    wchar_t __ret = btowc(static_cast<unsigned char>(__c));\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n@@ -183,9 +183,12 @@ namespace std\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    mbstate_t __state;\n-    memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n+    while (__lo < __hi)\n+      {\n+\t*__dest = btowc(static_cast<unsigned char>(*__lo));\n+\t++__lo;\n+\t++__dest;\n+      }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n@@ -214,22 +217,12 @@ namespace std\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    size_t __offset = 0;\n-    while (true)\n+    while (__lo < __hi)\n       {\n-\tconst wchar_t* __start = __lo + __offset;        \n-\tsize_t __len = __hi - __start;\n-\t\n-\tmbstate_t __state;\n-\tmemset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-\tsize_t __con = wcsrtombs(__dest + __offset, &__start, __len, &__state);\n-\tif (__con != __len && __start != 0)\n-\t  {\n-\t    __offset = __start - __lo;          \n-\t    __dest[__offset++] = __dfault;\n-\t  }\n-\telse\n-\t  break;\n+\tint __c = wctob(*__lo);\n+\t*__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t++__lo;\n+\t++__dest;\n       }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);"}, {"sha": "377321cac43a293877e646da9b4c63d3183706cf", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -99,13 +99,17 @@ fi\n \n # Make a list of the files we're going to run, or use an old one if it exists.\n if [ ! -f \"$TESTS_FILE\" ]; then\n+  if [ -f \"$TEST_DIR/testsuite_files\" ]; then\n+      cp $TEST_DIR/testsuite_files $TESTS_FILE\n+  else\n     echo \"making file $TESTS_FILE\"\n     for LONG_NAME in $SRC_DIR/testsuite/*/*.cc\n     do\n         DIR_NAME=$(dirname $LONG_NAME)\n         SHORT_NAME=\"`basename $DIR_NAME`/`basename $LONG_NAME`\"\n         echo \"$SHORT_NAME\" >> $TESTS_FILE\n     done\n+  fi\n fi\n \n # Nasty solution to replace GNU date(1)'s %s time_t output function."}, {"sha": "6b57c89232f2aac448df3ca4ee41a5c0b0597408", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -28,6 +28,7 @@\n void test01()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc;"}, {"sha": "07b3a2dabd0cfd31e04cbe9af4e41d2a074b3522", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -30,6 +30,7 @@\n void test02()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.ISO-8859-1\");"}, {"sha": "b44e86f70794f21b749678ea594b63cd2905a0f9", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -30,6 +30,7 @@\n void test03()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.ISO-8859-15\");"}, {"sha": "15a8546c3d7afbc9e4e97ce4227b9613d70a69ce", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -30,6 +30,7 @@\n void test04()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.UTF-8\");"}, {"sha": "5ecc99e0c6a9efe6c90325c962b4fd21451d6a41", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -28,6 +28,7 @@\n void test01()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc_c = locale::classic();"}, {"sha": "9c76752d6116fd00fdd3e8c9d5869ae63af994e8", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -28,6 +28,7 @@\n void test02()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.ISO-8859-1\");"}, {"sha": "2d312bddc311f8562b6925e2e80e59c168b022aa", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -28,6 +28,7 @@\n void test03()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.ISO-8859-15\");"}, {"sha": "cd4d08d5733a287e531239f33e7bdd3e4c2fc810", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -28,6 +28,7 @@\n void test04()\n {\n   using namespace std;\n+  bool test = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc (\"en_US.UTF-8\");"}, {"sha": "4846aec220edbdea4551d497e2993a00a5e0abbe", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -51,7 +51,8 @@ class comma_ctype: public std::ctype<char>\n void test01()\n {\n   using namespace std;\n-  \n+  bool test = true; \n+\n   comma_ctype obj;\n   const ctype_base::mask* tmp = obj.get_classic_table();\n "}, {"sha": "f235d8a36610a228f252176c4f1aeef4ce5f9082", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -0,0 +1,56 @@\n+// 2003-03-12  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<wchar_t> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9581\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc (\"se_NO.UTF-8\");\n+  const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);\n+\n+  const wchar_t* wstrlit = L\"\\x80\";\n+\t\n+  char buf[2];\n+  wct.narrow(wstrlit, wstrlit + 2, ' ', buf);\n+  VERIFY( buf[0] == wct.narrow(wstrlit[0], ' ') );\n+  VERIFY( buf[1] == wct.narrow(wstrlit[1], ' ') );  \n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "e4e49676c5ba4a8092d562a4a555d1daecee63de", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/2.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -0,0 +1,54 @@\n+// 2003-03-12  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<wchar_t> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9870\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc (\"en_US.ISO-8859-1\");\n+  const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);\n+\n+  char c = 0xff;\n+  wchar_t wc = wct.widen(c);\n+\n+  VERIFY( wc == static_cast<wchar_t>(0xff) );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "e872a944b8504dccc00efe793648427515c7bdc2", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/3.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -0,0 +1,57 @@\n+// 2003-03-12  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<wchar_t> members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9581\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc (\"se_NO.UTF-8\");\n+  const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);\n+\n+  const char* strlit = \"\\xc2\\x80\";\n+\t\n+  wchar_t wbuf[3];\n+  wct.widen(strlit, strlit + 3, wbuf);\n+  VERIFY( wbuf[0] == wct.widen(strlit[0]) );\n+  VERIFY( wbuf[1] == wct.widen(strlit[1]) );\n+  VERIFY( wbuf[2] == wct.widen(strlit[2]) );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "82e3a487ea3509e6b1b962acb2f6a78b4d3b2e7b", "filename": "libstdc++-v3/testsuite/23_containers/bitset_members.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-03 pme\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,6 +55,7 @@ void test02()\n \n void test03()\n {\n+  bool test = true;\n   std::bitset<5>      b;\n   std::stringstream   ss (\"101\");\n "}, {"sha": "67c838f993ae72c9f19005f6fcc164b9fb257ef3", "filename": "libstdc++-v3/testsuite/23_containers/map_insert.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap_insert.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-23 pme & Sylvain.Pion@sophia.inria.fr\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,6 +29,7 @@\n // http://gcc.gnu.org/ml/gcc-patches/2001-08/msg01375.html\n void test01()\n {\n+  bool test = true;\n   typedef std::map<int, int>   Map;\n   Map             M;\n   Map::iterator   hint;"}, {"sha": "17836499cf9a7e2f51aaa3ff7c09b8f759100ee4", "filename": "libstdc++-v3/testsuite/23_containers/vector_bool.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_bool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_bool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_bool.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 2002-03-05 Stephen M. Webb  <stephen.webb@bregmasoft.com>\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@ void test01()\n // libstdc++/6886\n void test02()\n {\n+  bool test = true;\n   typedef std::vector<bool>  bvec;\n   int  i, num = 0;\n   bvec v;"}, {"sha": "d278e1994b4efbe88d830e057f433fbe3e5d96a9", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,6 +53,7 @@ template class std::istream_iterator<char>;\n void test02()\n {\n   using namespace std;\n+  bool test = true;\n \n   string st(\"R.Rorty\");\n "}, {"sha": "a02c1f5801b336812be7564dc7c515136d1ac76c", "filename": "libstdc++-v3/testsuite/26_numerics/slice.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 20020717 gdr\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,6 +51,7 @@ assignment(int start, int size, int stride)\n \n int main()\n {\n+  bool test = true;\n   std::srand(20020717);         using std::rand;\n   VERIFY(construction(rand(), rand(), rand()));\n "}, {"sha": "a637b872b2efba5a40b06a4514ffdc56ad8939a2", "filename": "libstdc++-v3/testsuite/26_numerics/slice_array_assignment.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,6 +1,6 @@\n // 20010613 gdr\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +34,7 @@\n \n int main()\n {\n+  bool test = true;\n   using std::valarray;\n   using std::slice;\n   valarray<int> v(1, 10), w(2, 10);"}, {"sha": "84c072a4895b89e02030f129c61e1cc8e4f24a0e", "filename": "libstdc++-v3/testsuite/26_numerics/valarray_operators.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -24,6 +24,7 @@\n \n void test01() // check unary operators\n {\n+  bool test = true;\n   std::valarray<int> u(1);\n   u[0]=1;\n \n@@ -35,6 +36,7 @@ void test01() // check unary operators\n \n void test02() // check binary operators\n {\n+  bool test = true;\n   std::valarray<int> u(1), v(1);\n   u[0]=1;\n   v[0]=3;"}, {"sha": "a88108635c33f79c38a23fffeffa8e4bab7ea498", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -546,6 +546,7 @@ class MyTraits : public std::char_traits<char>\n public:\n   static bool eq(char c1, char c2)\n   {\n+    bool test = true;\n     VERIFY( c1 != 'X' );\n     VERIFY( c2 != 'X' );\n     return std::char_traits<char>::eq(c1, c2);"}, {"sha": "055c4fb02c52fdcf4deb4da887532d99498060ea", "filename": "libstdc++-v3/testsuite/27_io/istream_exception.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_exception.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -40,6 +40,7 @@ struct buf: std::streambuf\n void test01()\n {\n   using namespace std;\n+  bool test = true;\n \n   buf b;\n   std::istream strm (&b);"}, {"sha": "2523ab6241a9f8b2ec258fe15c1084a1d2c542cb", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -360,6 +360,7 @@ test04()\n int\n test05()\n {\n+  bool test = true;\n   double pi = 3.14159265358979323846;\n   ostringstream ostr;\n   ostr.precision(20);\n@@ -377,6 +378,7 @@ test05()\n int\n test06()\n {\n+  bool test = true;\n   int prec = numeric_limits<double>::digits10 + 2;\n   double oval = numeric_limits<double>::min();\n "}, {"sha": "40e95bae4318a4b00145303ccd9e94d41f5e07bf", "filename": "libstdc++-v3/testsuite/27_io/stringbuf_virtuals.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc?ref=ac1613a2c2b6be3d5f0863f8ffe3560de2f6ad00", "patch": "@@ -40,6 +40,7 @@ void test01()\n \n void test02(std::stringbuf& in, bool pass)\n {\n+  bool test = true;\n   using namespace std;\n   typedef streambuf::pos_type pos_type;\n   typedef streambuf::off_type off_type;"}]}