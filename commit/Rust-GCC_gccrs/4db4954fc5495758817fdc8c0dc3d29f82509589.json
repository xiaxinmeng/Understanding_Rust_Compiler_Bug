{"sha": "4db4954fc5495758817fdc8c0dc3d29f82509589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiNDk1NGZjNTQ5NTc1ODgxN2ZkYzhjMGRjM2QyOWY4MjUwOTU4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-12-12T15:46:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-12-12T15:46:57Z"}, "message": "re PR middle-end/64182 (wide-int rounding division is broken)\n\ngcc/\n\tPR middle-end/64182\n\t* wide-int.h (wi::div_round, wi::mod_round): Fix rounding of tied\n\tcases.\n\t* double-int.c (div_and_round_double): Fix handling of unsigned\n\tcases.  Use same rounding approach as wide-int.h.\n\ngcc/testsuite/\n2014-xx-xx  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Joseph Myers  <joseph@codesourcery.com>\n\n\tPR middle-end/64182\n\t* gcc.dg/plugin/wide-int-test-1.c,\n\tgcc.dg/plugin/wide-int_plugin.c: New test.\n\t* gcc.dg/plugin/plugin.exp: Register it.\n\t* gnat.dg/round_div.adb: New test.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r218678", "tree": {"sha": "b4ad83f4876c83d62f4f1ff43d1f923c4cd90840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4ad83f4876c83d62f4f1ff43d1f923c4cd90840"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db4954fc5495758817fdc8c0dc3d29f82509589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db4954fc5495758817fdc8c0dc3d29f82509589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db4954fc5495758817fdc8c0dc3d29f82509589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db4954fc5495758817fdc8c0dc3d29f82509589/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f596ff51a4177ce494b6567c83a2fa0bbf12c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f596ff51a4177ce494b6567c83a2fa0bbf12c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f596ff51a4177ce494b6567c83a2fa0bbf12c71"}], "stats": {"total": 125, "additions": 107, "deletions": 18}, "files": [{"sha": "bf9571bed9820f84fd0eda2f199e6d5bad2cf1cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -1,3 +1,11 @@\n+2014-12-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/64182\n+\t* wide-int.h (wi::div_round, wi::mod_round): Fix rounding of tied\n+\tcases.\n+\t* double-int.c (div_and_round_double): Fix handling of unsigned\n+\tcases.  Use same rounding approach as wide-int.h.\n+\n 2014-12-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/64274"}, {"sha": "9dc501c8edf6e9f61a4a7737f7f659097acd92e7", "filename": "gcc/double-int.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -569,24 +569,23 @@ div_and_round_double (unsigned code, int uns,\n       {\n \tunsigned HOST_WIDE_INT labs_rem = *lrem;\n \tHOST_WIDE_INT habs_rem = *hrem;\n-\tunsigned HOST_WIDE_INT labs_den = lden, ltwice;\n-\tHOST_WIDE_INT habs_den = hden, htwice;\n+\tunsigned HOST_WIDE_INT labs_den = lden, lnegabs_rem, ldiff;\n+\tHOST_WIDE_INT habs_den = hden, hnegabs_rem, hdiff;\n \n \t/* Get absolute values.  */\n-\tif (*hrem < 0)\n+\tif (!uns && *hrem < 0)\n \t  neg_double (*lrem, *hrem, &labs_rem, &habs_rem);\n-\tif (hden < 0)\n+\tif (!uns && hden < 0)\n \t  neg_double (lden, hden, &labs_den, &habs_den);\n \n-\t/* If (2 * abs (lrem) >= abs (lden)), adjust the quotient.  */\n-\tmul_double ((HOST_WIDE_INT) 2, (HOST_WIDE_INT) 0,\n-\t\t    labs_rem, habs_rem, &ltwice, &htwice);\n+\t/* If abs(rem) >= abs(den) - abs(rem), adjust the quotient.  */\n+\tneg_double (labs_rem, habs_rem, &lnegabs_rem, &hnegabs_rem);\n+\tadd_double (labs_den, habs_den, lnegabs_rem, hnegabs_rem,\n+\t\t    &ldiff, &hdiff);\n \n-\tif (((unsigned HOST_WIDE_INT) habs_den\n-\t     < (unsigned HOST_WIDE_INT) htwice)\n-\t    || (((unsigned HOST_WIDE_INT) habs_den\n-\t\t == (unsigned HOST_WIDE_INT) htwice)\n-\t\t&& (labs_den <= ltwice)))\n+\tif (((unsigned HOST_WIDE_INT) habs_rem\n+\t     > (unsigned HOST_WIDE_INT) hdiff)\n+\t    || (habs_rem == hdiff && labs_rem >= ldiff))\n \t  {\n \t    if (quo_neg)\n \t      /* quo = quo - 1;  */"}, {"sha": "2c7b6159adb0d14a94c14941bc63ad1bcc2e87e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -1,3 +1,12 @@\n+2014-12-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/64182\n+\t* gcc.dg/plugin/wide-int-test-1.c,\n+\tgcc.dg/plugin/wide-int_plugin.c: New test.\n+\t* gcc.dg/plugin/plugin.exp: Register it.\n+\t* gnat.dg/round_div.adb: New test.\n+\n 2014-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/64269"}, {"sha": "6c1d27f5a10bcea02977f193a5a24bc3f047a119", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -62,6 +62,7 @@ set plugin_test_list [list \\\n     { sreal_plugin.c sreal-test-1.c } \\\n     { start_unit_plugin.c start_unit-test-1.c } \\\n     { finish_unit_plugin.c finish_unit-test-1.c } \\\n+    { wide-int_plugin.c wide-int-test-1.c } \\\n ]\n \n foreach plugin_test $plugin_test_list {"}, {"sha": "2de35d88452635b4bf9b6da1945342b34b8b321a", "filename": "gcc/testsuite/gcc.dg/plugin/wide-int-test-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int-test-1.c?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -0,0 +1,9 @@\n+/* Test that pass is inserted and invoked once. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  return 0;\n+}"}, {"sha": "b20ee2803542fe817647fb9d8760e9d41d5d74cc", "filename": "gcc/testsuite/gcc.dg/plugin/wide-int_plugin.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fwide-int_plugin.c?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -0,0 +1,46 @@\n+#include \"config.h\"\n+#include \"gcc-plugin.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+static void\n+test_double_int_round_udiv (void)\n+{\n+  double_int dmin = { 0, HOST_WIDE_INT_MIN };\n+  double_int dmax = { -1, HOST_WIDE_INT_MAX };\n+  double_int dnegone = { -1, -1 };\n+  double_int mod, div;\n+  div = dmin.udivmod (dnegone, ROUND_DIV_EXPR, &mod);\n+  if (div.low != 1 || div.high != 0\n+      || mod.low != 1 || mod.high != HOST_WIDE_INT_MIN)\n+    abort ();\n+  div = dmax.udivmod (dnegone, ROUND_DIV_EXPR, &mod);\n+  if (div.low != 0 || div.high != 0\n+      || mod.low != dmax.low || mod.high != dmax.high)\n+    abort ();\n+}\n+\n+static void\n+test_wide_int_round_sdiv (void)\n+{\n+  if (wi::ne_p (wi::div_round (2, 3, SIGNED), 1))\n+    abort ();\n+  if (wi::ne_p (wi::div_round (1, 3, SIGNED), 0))\n+    abort ();\n+  if (wi::ne_p (wi::mod_round (2, 3, SIGNED), -1))\n+    abort ();\n+  if (wi::ne_p (wi::mod_round (1, 3, SIGNED), 1))\n+    abort ();\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+  test_double_int_round_udiv ();\n+  test_wide_int_round_sdiv ();\n+  return 0;\n+}"}, {"sha": "0a79291c3bd68053d0e562589378e8a53eab81c0", "filename": "gcc/testsuite/gnat.dg/round_div.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgnat.dg%2Fround_div.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Ftestsuite%2Fgnat.dg%2Fround_div.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fround_div.adb?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do run }\n+-- { dg-options \"-O3\" }\n+procedure Round_Div is\n+   type Fixed is delta 1.0 range -2147483648.0 .. 2147483647.0;\n+   A : Fixed := 1.0;\n+   B : Fixed := 3.0;\n+   C : Integer;\n+   function Divide (X, Y : Fixed) return Integer is\n+   begin\n+      return Integer (X / Y);\n+   end;\n+begin\n+   C := Divide (A, B);\n+   if C /= 0 then\n+      raise Program_Error;\n+   end if;\n+end Round_Div;"}, {"sha": "acfdb40bc82eec70a2ca965b96196f837108467c", "filename": "gcc/wide-int.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db4954fc5495758817fdc8c0dc3d29f82509589/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=4db4954fc5495758817fdc8c0dc3d29f82509589", "patch": "@@ -2616,8 +2616,8 @@ wi::div_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)\n     {\n       if (sgn == SIGNED)\n \t{\n-\t  if (wi::ges_p (wi::abs (remainder),\n-\t\t\t wi::lrshift (wi::abs (y), 1)))\n+\t  WI_BINARY_RESULT (T1, T2) abs_remainder = wi::abs (remainder);\n+\t  if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))\n \t    {\n \t      if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))\n \t\treturn quotient - 1;\n@@ -2627,7 +2627,7 @@ wi::div_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)\n \t}\n       else\n \t{\n-\t  if (wi::geu_p (remainder, wi::lrshift (y, 1)))\n+\t  if (wi::geu_p (remainder, wi::sub (y, remainder)))\n \t    return quotient + 1;\n \t}\n     }\n@@ -2784,8 +2784,8 @@ wi::mod_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)\n     {\n       if (sgn == SIGNED)\n \t{\n-\t  if (wi::ges_p (wi::abs (remainder),\n-\t\t\t wi::lrshift (wi::abs (y), 1)))\n+\t  WI_BINARY_RESULT (T1, T2) abs_remainder = wi::abs (remainder);\n+\t  if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))\n \t    {\n \t      if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))\n \t\treturn remainder + y;\n@@ -2795,7 +2795,7 @@ wi::mod_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)\n \t}\n       else\n \t{\n-\t  if (wi::geu_p (remainder, wi::lrshift (y, 1)))\n+\t  if (wi::geu_p (remainder, wi::sub (y, remainder)))\n \t    return remainder - y;\n \t}\n     }"}]}