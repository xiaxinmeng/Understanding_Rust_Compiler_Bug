{"sha": "4665ac17309744645b3c03bf77328bbc040f6954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2NWFjMTczMDk3NDQ2NDViM2MwM2JmNzczMjhiYmMwNDBmNjk1NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:07:06Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:07:06Z"}, "message": "mcore-protos.h (mcore_function_arg): Delete.\n\n\t* config/mcore/mcore-protos.h (mcore_function_arg): Delete.\n\t* config/mcore/mcore.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/mcore/mcore.c (mcore_function_arg): Declare.  Make static.\n\tTake a const_tree and a bool.\n\t(mcore_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166043", "tree": {"sha": "4befcc9f26fcd58ff9d90e84e7fa8ca534de8d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4befcc9f26fcd58ff9d90e84e7fa8ca534de8d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4665ac17309744645b3c03bf77328bbc040f6954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4665ac17309744645b3c03bf77328bbc040f6954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4665ac17309744645b3c03bf77328bbc040f6954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4665ac17309744645b3c03bf77328bbc040f6954/comments", "author": null, "committer": null, "parents": [{"sha": "56f9413b9442d24f6b0ea85e18103eb8399c0063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f9413b9442d24f6b0ea85e18103eb8399c0063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f9413b9442d24f6b0ea85e18103eb8399c0063"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "a4b63903accb90524e900b8b21cb87938922c782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4665ac17309744645b3c03bf77328bbc040f6954", "patch": "@@ -1,3 +1,12 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/mcore/mcore-protos.h (mcore_function_arg): Delete.\n+\t* config/mcore/mcore.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/mcore/mcore.c (mcore_function_arg): Declare.  Make static.\n+\tTake a const_tree and a bool.\n+\t(mcore_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/h8300/h8300-protos.h (function_arg): Delete."}, {"sha": "b9f8f330737bfc7e7eb224fa917bf8ba6e622da0", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=4665ac17309744645b3c03bf77328bbc040f6954", "patch": "@@ -65,8 +65,5 @@ extern int          mcore_arith_S_operand         \t(rtx);\n extern const char * mcore_output_move          \t\t(rtx, rtx *, enum machine_mode);\n extern const char * mcore_output_movedouble    \t\t(rtx *, enum machine_mode);\n extern int          const_ok_for_mcore                  (HOST_WIDE_INT);\n-#ifdef TREE_CODE\n-extern rtx          mcore_function_arg           \t(CUMULATIVE_ARGS, enum machine_mode, tree, int);\n-#endif /* TREE_CODE */\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */"}, {"sha": "3bd17299b116e52b1bde0b19559f2294e26dd1b2", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=4665ac17309744645b3c03bf77328bbc040f6954", "patch": "@@ -142,6 +142,12 @@ static bool       mcore_return_in_memory\t(const_tree, const_tree);\n static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, bool);\n+static rtx        mcore_function_arg            (CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t const_tree, bool);\n+static void       mcore_function_arg_advance    (CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t const_tree, bool);\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n static void       mcore_option_override\t\t(void);\n@@ -229,6 +235,10 @@ static const struct default_options mcore_option_optimization_table[] =\n #define TARGET_PASS_BY_REFERENCE  hook_pass_by_reference_must_pass_in_stack\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES\tmcore_arg_partial_bytes\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG\t\tmcore_function_arg\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE\tmcore_function_arg_advance\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS\tmcore_setup_incoming_varargs\n@@ -2804,9 +2814,9 @@ mcore_function_value (const_tree valtype, const_tree func)\n    NPARM_REGS words is at least partially passed in a register unless\n    its data type forbids.  */\n \n-rtx\n-mcore_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n-\t\t    tree type, int named)\n+static rtx\n+mcore_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t    const_tree type, bool named)\n {\n   int arg_reg;\n   \n@@ -2816,14 +2826,22 @@ mcore_function_arg (CUMULATIVE_ARGS cum, enum machine_mode mode,\n   if (targetm.calls.must_pass_in_stack (mode, type))\n     return 0;\n \n-  arg_reg = ROUND_REG (cum, mode);\n+  arg_reg = ROUND_REG (*cum, mode);\n   \n   if (arg_reg < NPARM_REGS)\n     return handle_structs_in_regs (mode, type, FIRST_PARM_REG + arg_reg);\n \n   return 0;\n }\n \n+static void\n+mcore_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t    const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum = (ROUND_REG (*cum, mode)\n+\t  + (int)named * mcore_num_arg_regs (mode, type));\n+}\n+\n /* Returns the number of bytes of argument registers required to hold *part*\n    of a parameter of machine mode MODE and type TYPE (which may be NULL if\n    the type is not known).  If the argument fits entirely in the argument"}, {"sha": "515865854ae69b4bb679c089ed368411f792e365", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4665ac17309744645b3c03bf77328bbc040f6954/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=4665ac17309744645b3c03bf77328bbc040f6954", "patch": "@@ -559,18 +559,6 @@ extern const enum reg_class reg_class_from_letter[];\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be\n-   available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t   \\\n- ((CUM) = (ROUND_REG ((CUM), (MODE))\t\t\t   \\\n-\t   + ((NAMED) * mcore_num_arg_regs (MODE, TYPE)))) \\\n-\n-/* Define where to put the arguments to a function.  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  mcore_function_arg (CUM, MODE, TYPE, NAMED)\n-\n /* Call the function profiler with a given profile label.  */\n #define FUNCTION_PROFILER(STREAM,LABELNO)\t\t\\\n {\t\t\t\t\t\t\t\\"}]}