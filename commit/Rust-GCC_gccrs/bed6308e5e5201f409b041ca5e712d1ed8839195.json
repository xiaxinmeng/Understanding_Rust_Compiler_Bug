{"sha": "bed6308e5e5201f409b041ca5e712d1ed8839195", "node_id": "C_kwDOANBUbNoAKGJlZDYzMDhlNWU1MjAxZjQwOWIwNDFjYTVlNzEyZDFlZDg4MzkxOTU", "commit": {"author": {"name": "Mahmoud Mohamed", "email": "mahadelr19@gmail.com", "date": "2023-03-13T14:18:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-15T11:14:06Z"}, "message": "resolve: Handle multiple bindings to the same identifier\n\nhttps://github.com/rust-lang/rust/blob/master/compiler/rustc_resolve/src/late.rs#L3168\nThis commit follows rustc's implementation of handling multiple bindings\nto the same identifier in parameters.\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit) :declare and\n\tpass bindings to PatternDeclaration::go.\n\t(ResolveExpr::resolve_closure_param): Likewise.\n\t* resolve/rust-ast-resolve-expr.h: Likewise.\n\t* resolve/rust-ast-resolve-item.cc (ResolveTraitItems::visit): Likewise.\n\t(ResolveItem::visit): Likewise.\n\t* resolve/rust-ast-resolve-pattern.cc (PatternDeclaration::go): Likewise.\n\t(PatternDeclaration::visit): check for previous identifier bindings\n\tbefore inserting the new one.\n\t* resolve/rust-ast-resolve-pattern.h (enum PatternBoundCtx): New enum.\n\t* resolve/rust-ast-resolve-stmt.h: pass bindings to PatterDeclaration::go.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/multiple_bindings1.rs: New test.\n\nSigned-off-by: Mahmoud Mohamed <mahadelr19@gmail.com>", "tree": {"sha": "6942925354d10bc41582450b190be07b57a8e2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6942925354d10bc41582450b190be07b57a8e2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed6308e5e5201f409b041ca5e712d1ed8839195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed6308e5e5201f409b041ca5e712d1ed8839195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed6308e5e5201f409b041ca5e712d1ed8839195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed6308e5e5201f409b041ca5e712d1ed8839195/comments", "author": {"login": "goar5670", "id": 40712841, "node_id": "MDQ6VXNlcjQwNzEyODQx", "avatar_url": "https://avatars.githubusercontent.com/u/40712841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goar5670", "html_url": "https://github.com/goar5670", "followers_url": "https://api.github.com/users/goar5670/followers", "following_url": "https://api.github.com/users/goar5670/following{/other_user}", "gists_url": "https://api.github.com/users/goar5670/gists{/gist_id}", "starred_url": "https://api.github.com/users/goar5670/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goar5670/subscriptions", "organizations_url": "https://api.github.com/users/goar5670/orgs", "repos_url": "https://api.github.com/users/goar5670/repos", "events_url": "https://api.github.com/users/goar5670/events{/privacy}", "received_events_url": "https://api.github.com/users/goar5670/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc0addd1ffae33478cfc838f93e6685c0cbfa08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0addd1ffae33478cfc838f93e6685c0cbfa08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0addd1ffae33478cfc838f93e6685c0cbfa08c"}], "stats": {"total": 230, "additions": 183, "deletions": 47}, "files": [{"sha": "ff9f7ef0cd158e99e2cd1381adec062a0c9c1043", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -207,9 +207,14 @@ ResolveExpr::visit (AST::IfLetExpr &expr)\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n+  // FIXME: this declaration should be removed after refactoring\n+  // parse_match_arm_patterns output into an AltPattern\n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Or, std::set<Identifier> ())};\n+\n   for (auto &pattern : expr.get_patterns ())\n     {\n-      PatternDeclaration::go (pattern.get (), Rib::ItemType::Var);\n+      PatternDeclaration::go (pattern.get (), Rib::ItemType::Var, bindings);\n     }\n \n   ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n@@ -517,10 +522,15 @@ ResolveExpr::visit (AST::MatchExpr &expr)\n \tResolveExpr::go (arm.get_guard_expr ().get (), prefix,\n \t\t\t canonical_prefix);\n \n+      // FIXME: this declaration should be removed after refactoring\n+      // parse_match_arms_patterns output into a single AltPattern\n+      std::vector<PatternBinding> bindings\n+\t= {PatternBinding (PatternBoundCtx::Or, std::set<Identifier> ())};\n+\n       // insert any possible new patterns\n       for (auto &pattern : arm.get_patterns ())\n \t{\n-\t  PatternDeclaration::go (pattern.get (), Rib::ItemType::Var);\n+\t  PatternDeclaration::go (pattern.get (), Rib::ItemType::Var, bindings);\n \t}\n \n       // resolve the body\n@@ -576,9 +586,12 @@ ResolveExpr::visit (AST::ClosureExprInner &expr)\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   for (auto &p : expr.get_params ())\n     {\n-      resolve_closure_param (p);\n+      resolve_closure_param (p, bindings);\n     }\n \n   resolver->push_closure_context (expr.get_node_id ());\n@@ -604,9 +617,12 @@ ResolveExpr::visit (AST::ClosureExprInnerTyped &expr)\n   resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   for (auto &p : expr.get_params ())\n     {\n-      resolve_closure_param (p);\n+      resolve_closure_param (p, bindings);\n     }\n \n   ResolveType::go (expr.get_return_type ().get ());\n@@ -624,9 +640,11 @@ ResolveExpr::visit (AST::ClosureExprInnerTyped &expr)\n }\n \n void\n-ResolveExpr::resolve_closure_param (AST::ClosureParam &param)\n+ResolveExpr::resolve_closure_param (AST::ClosureParam &param,\n+\t\t\t\t    std::vector<PatternBinding> &bindings)\n {\n-  PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param);\n+  PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param,\n+\t\t\t  bindings);\n \n   if (param.has_type_given ())\n     ResolveType::go (param.get_type ().get ());"}, {"sha": "07b029fabb35ba6746d60d5dbb73726ed7d6f0c4", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -20,6 +20,7 @@\n #define RUST_AST_RESOLVE_EXPR_H\n \n #include \"rust-ast-resolve-base.h\"\n+#include \"rust-ast-resolve-pattern.h\"\n #include \"rust-ast-full.h\"\n \n namespace Rust {\n@@ -79,7 +80,8 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::ClosureExprInnerTyped &expr) override;\n \n protected:\n-  void resolve_closure_param (AST::ClosureParam &param);\n+  void resolve_closure_param (AST::ClosureParam &param,\n+\t\t\t      std::vector<PatternBinding> &bindings);\n \n private:\n   ResolveExpr (const CanonicalPath &prefix,"}, {"sha": "958ae49c810442ee93d9e7265123675a1f638296", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -77,13 +77,16 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      Rib::ItemType::Param);\n+      PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param,\n+\t\t\t      bindings);\n     }\n \n   if (function.has_where_clause ())\n@@ -141,13 +144,16 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   ResolveType::go (&self_type_path);\n   PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      Rib::ItemType::Param);\n+      PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param,\n+\t\t\t      bindings);\n     }\n \n   if (function.has_where_clause ())\n@@ -496,13 +502,16 @@ ResolveItem::visit (AST::Function &function)\n   if (function.has_return_type ())\n     ResolveType::go (function.get_return_type ().get ());\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      Rib::ItemType::Param);\n+      PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param,\n+\t\t\t      bindings);\n     }\n \n   // resolve the function body\n@@ -633,13 +642,16 @@ ResolveItem::visit (AST::Method &method)\n   ResolveType::go (&self_type_path);\n   PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n   // we make a new scope so the names of parameters are resolved and shadowed\n   // correctly\n   for (auto &param : method.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      Rib::ItemType::Param);\n+      PatternDeclaration::go (param.get_pattern ().get (), Rib::ItemType::Param,\n+\t\t\t      bindings);\n     }\n \n   // resolve any where clause items"}, {"sha": "866745e098e923292ff28186132fd18a3c8e6cfd", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.cc", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -23,6 +23,78 @@\n namespace Rust {\n namespace Resolver {\n \n+void\n+PatternDeclaration::go (AST::Pattern *pattern, Rib::ItemType type)\n+{\n+  std::vector<PatternBinding> bindings\n+    = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+  PatternDeclaration resolver (bindings, type);\n+  pattern->accept_vis (resolver);\n+};\n+\n+void\n+PatternDeclaration::go (AST::Pattern *pattern, Rib::ItemType type,\n+\t\t\tstd::vector<PatternBinding> &bindings)\n+{\n+  PatternDeclaration resolver (bindings, type);\n+  pattern->accept_vis (resolver);\n+}\n+\n+void\n+PatternDeclaration::visit (AST::IdentifierPattern &pattern)\n+{\n+  bool has_binding_ctx = bindings.size () > 0;\n+  rust_assert (has_binding_ctx);\n+\n+  auto &binding_idents = bindings.back ().idents;\n+\n+  bool current_ctx_is_product\n+    = bindings.back ().ctx == PatternBoundCtx::Product;\n+  bool identifier_is_product_bound\n+    = current_ctx_is_product\n+      && binding_idents.find (pattern.get_ident ()) != binding_idents.end ();\n+\n+  if (identifier_is_product_bound)\n+    {\n+      if (type == Rib::ItemType::Param)\n+\t{\n+\t  rust_error_at (pattern.get_locus (), ErrorCode (\"E0415\"),\n+\t\t\t \"identifier '%s' is bound more than once in the \"\n+\t\t\t \"same parameter list\",\n+\t\t\t pattern.get_ident ().c_str ());\n+\t}\n+      else\n+\t{\n+\t  rust_error_at (\n+\t    pattern.get_locus (), ErrorCode (\"E0416\"),\n+\t    \"identifier '%s' is bound more than once in the same pattern\",\n+\t    pattern.get_ident ().c_str ());\n+\t}\n+\n+      return;\n+    }\n+\n+  // if we have a duplicate id this then allows for shadowing correctly\n+  // as new refs to this decl will match back here so it is ok to overwrite\n+  resolver->get_name_scope ().insert (\n+    CanonicalPath::new_seg (pattern.get_node_id (), pattern.get_ident ()),\n+    pattern.get_node_id (), pattern.get_locus (), type);\n+\n+  binding_idents.insert (pattern.get_ident ());\n+}\n+\n+void\n+PatternDeclaration::visit (AST::GroupedPattern &pattern)\n+{\n+  pattern.get_pattern_in_parens ()->accept_vis (*this);\n+}\n+\n+void\n+PatternDeclaration::visit (AST::ReferencePattern &pattern)\n+{\n+  pattern.get_referenced_pattern ()->accept_vis (*this);\n+}\n+\n void\n PatternDeclaration::visit (AST::PathInExpression &pattern)\n {\n@@ -49,7 +121,7 @@ PatternDeclaration::visit (AST::TupleStructPattern &pattern)\n \n \tfor (auto &inner_pattern : items_no_range.get_patterns ())\n \t  {\n-\t    PatternDeclaration::go (inner_pattern.get (), type);\n+\t    inner_pattern.get ()->accept_vis (*this);\n \t  }\n       }\n       break;"}, {"sha": "0ff500a4d993b609a5057f0bf2bba457b680a403", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -25,6 +25,26 @@\n namespace Rust {\n namespace Resolver {\n \n+// Specifies whether the set of already bound patterns are related by 'Or' or\n+// 'Product'. Used to check for multiple bindings to the same identifier.\n+enum PatternBoundCtx\n+{\n+  // A product pattern context (e.g. struct and tuple patterns)\n+  Product,\n+  // An or-pattern context (e.g. p_0 | p_1 | ...)\n+  Or,\n+};\n+\n+struct PatternBinding\n+{\n+  PatternBoundCtx ctx;\n+  std::set<Identifier> idents;\n+\n+  PatternBinding (PatternBoundCtx ctx, std::set<Identifier> idents)\n+    : ctx (ctx), idents (idents)\n+  {}\n+};\n+\n class ResolvePattern : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;\n@@ -55,45 +75,25 @@ class PatternDeclaration : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Pattern *pattern, Rib::ItemType type)\n-  {\n-    PatternDeclaration resolver (type);\n-    pattern->accept_vis (resolver);\n-  };\n+  static void go (AST::Pattern *pattern, Rib::ItemType type);\n+  static void go (AST::Pattern *pattern, Rib::ItemType type,\n+\t\t  std::vector<PatternBinding> &bindings);\n \n-  void visit (AST::IdentifierPattern &pattern) override\n-  {\n-    // if we have a duplicate id this then allows for shadowing correctly\n-    // as new refs to this decl will match back here so it is ok to overwrite\n-    resolver->get_name_scope ().insert (\n-      CanonicalPath::new_seg (pattern.get_node_id (), pattern.get_ident ()),\n-      pattern.get_node_id (), pattern.get_locus (), type);\n-  }\n-\n-  void visit (AST::GroupedPattern &pattern) override\n-  {\n-    pattern.get_pattern_in_parens ()->accept_vis (*this);\n-  }\n-\n-  void visit (AST::ReferencePattern &pattern) override\n-  {\n-    pattern.get_referenced_pattern ()->accept_vis (*this);\n-  }\n-\n-  // cases in a match expression\n+  void visit (AST::IdentifierPattern &pattern) override;\n+  void visit (AST::GroupedPattern &pattern) override;\n+  void visit (AST::ReferencePattern &pattern) override;\n   void visit (AST::PathInExpression &pattern) override;\n-\n   void visit (AST::StructPattern &pattern) override;\n-\n   void visit (AST::TupleStructPattern &pattern) override;\n-\n   void visit (AST::TuplePattern &pattern) override;\n-\n   void visit (AST::RangePattern &pattern) override;\n \n private:\n-  PatternDeclaration (Rib::ItemType type) : ResolverBase (), type (type) {}\n+  PatternDeclaration (std::vector<PatternBinding> &bindings, Rib::ItemType type)\n+    : ResolverBase (), bindings (bindings), type (type)\n+  {}\n \n+  std::vector<PatternBinding> &bindings;\n   Rib::ItemType type;\n };\n "}, {"sha": "1336402d43ec8c0310a8f3428a4693fdeee7df13", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -344,13 +344,16 @@ class ResolveStmt : public ResolverBase\n     if (function.has_return_type ())\n       ResolveType::go (function.get_return_type ().get ());\n \n+    std::vector<PatternBinding> bindings\n+      = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n+\n     // we make a new scope so the names of parameters are resolved and shadowed\n     // correctly\n     for (auto &param : function.get_function_params ())\n       {\n \tResolveType::go (param.get_type ().get ());\n \tPatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t\tRib::ItemType::Param);\n+\t\t\t\tRib::ItemType::Param, bindings);\n       }\n \n     // resolve the function body"}, {"sha": "e73dc2ae7d94ffb7c98aa253a4197e2323da1eb6", "filename": "gcc/testsuite/rust/compile/multiple_bindings1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmultiple_bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed6308e5e5201f409b041ca5e712d1ed8839195/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmultiple_bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmultiple_bindings1.rs?ref=bed6308e5e5201f409b041ca5e712d1ed8839195", "patch": "@@ -0,0 +1,29 @@\n+fn f1(i: i32, i: i32) {}\n+// { dg-error \"identifier .i. is bound more than once in the same parameter list .E0415.\" \"\" { target *-*-* } .-1 }\n+\n+trait Foo {\n+  fn f2(i: i32, i: i32) {}\n+  // { dg-error \"identifier .i. is bound more than once in the same parameter list .E0415.\" \"\" { target *-*-* } .-1 }\n+}\n+\n+trait Bar {\n+  fn f3(i: i32, j: i32) {}\n+}\n+\n+struct S;\n+\n+impl S {\n+  fn f4(i: i32, i: i32) {}\n+  // { dg-error \"identifier .i. is bound more than once in the same parameter list .E0415.\" \"\" { target *-*-* } .-1 }\n+}\n+\n+impl Bar for S {\n+  fn f3(i: i32, i: i32) {}\n+  // { dg-error \"identifier .i. is bound more than once in the same parameter list .E0415.\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() {\n+  let _ = |i, i| {};\n+  // { dg-error \"identifier .i. is bound more than once in the same parameter list .E0415.\" \"\" { target *-*-* } .-1 }\n+}\n+"}]}