{"sha": "f3964bb8a3b4262473d1237707ca7388a17e3174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5NjRiYjhhM2I0MjYyNDczZDEyMzc3MDdjYTczODhhMTdlMzE3NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-17T10:37:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-17T10:37:06Z"}, "message": "(convert_to_integer): Don't add a NOP_EXPR in cases where we can\nsimply change the type of the entire tree.\n\nFrom-SVN: r1616", "tree": {"sha": "669ca777615cff78533c929fd6af8c0e86b9ea81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669ca777615cff78533c929fd6af8c0e86b9ea81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3964bb8a3b4262473d1237707ca7388a17e3174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3964bb8a3b4262473d1237707ca7388a17e3174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3964bb8a3b4262473d1237707ca7388a17e3174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3964bb8a3b4262473d1237707ca7388a17e3174/comments", "author": null, "committer": null, "parents": [{"sha": "0c2e838b251178be0a1eb709fc9e3d86d52f6577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2e838b251178be0a1eb709fc9e3d86d52f6577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2e838b251178be0a1eb709fc9e3d86d52f6577"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "d20db4c6289fd1607f82f496399bbe651f6cc547", "filename": "gcc/c-convert.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3964bb8a3b4262473d1237707ca7388a17e3174/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3964bb8a3b4262473d1237707ca7388a17e3174/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=f3964bb8a3b4262473d1237707ca7388a17e3174", "patch": "@@ -137,7 +137,20 @@ convert_to_integer (type, expr)\n       register unsigned inprec = TYPE_PRECISION (intype);\n       register enum tree_code ex_form = TREE_CODE (expr);\n \n-      if (outprec >= inprec)\n+      /* If we are widening the type, put in an explicit conversion.\n+\t Similarly if we are not changing the width.  However, if this is\n+\t a logical operation that just returns 0 or 1, we can change the\n+\t type of the expression (see below).  */\n+\n+      if (TREE_CODE_CLASS (ex_form) == '<'\n+\t  || ex_form == TRUTH_AND_EXPR || ex_form == TRUTH_ANDIF_EXPR\n+\t  || ex_form == TRUTH_OR_EXPR || ex_form == TRUTH_ORIF_EXPR\n+\t  || ex_form == TRUTH_NOT_EXPR)\n+\t{\n+\t  TREE_TYPE (expr) = type;\n+\t  return expr;\n+\t}\n+      else if (outprec >= inprec)\n \treturn build1 (NOP_EXPR, type, expr);\n \n /* Here detect when we can distribute the truncation down past some arithmetic.\n@@ -250,22 +263,6 @@ convert_to_integer (type, expr)\n \t  }\n \t  break;\n \n-\tcase EQ_EXPR:\n-\tcase NE_EXPR:\n-\tcase GT_EXPR:\n-\tcase GE_EXPR:\n-\tcase LT_EXPR:\n-\tcase LE_EXPR:\n-\tcase TRUTH_AND_EXPR:\n-\tcase TRUTH_ANDIF_EXPR:\n-\tcase TRUTH_OR_EXPR:\n-\tcase TRUTH_ORIF_EXPR:\n-\tcase TRUTH_NOT_EXPR:\n-\t  /* If we want result of comparison converted to a byte,\n-\t     we can just regard it as a byte, since it is 0 or 1.  */\n-\t  TREE_TYPE (expr) = type;\n-\t  return expr;\n-\n \tcase NEGATE_EXPR:\n \tcase BIT_NOT_EXPR:\n \t  {"}]}