{"sha": "2afe882858699bb6c13f8502f4f6e862a126d4ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmZTg4Mjg1ODY5OWJiNmMxM2Y4NTAyZjRmNmU4NjJhMTI2ZDRlZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-13T01:58:03Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-26T01:51:52Z"}, "message": "Lower for loops before lowering cond in genmatch\n\nWhile converting some fold_cond_expr_with_comparison\nto match, I found that I wanted to use \"for cnd (cond vec_cond)\"\nbut that was not causing the lowering of cond to happen.\nWhat was happening was the lowering of the for loop\nwas happening after the lowering of the cond. So\nswapping was the correct thing to do but it also\nmeans we need to copy for_subst_vec in lower_cond.\n\nOK?  Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\t* genmatch.c (lower_cond): Copy for_subst_vec\n\tfor the simplify also.\n\t(lower): Swap the order for lower_for and lower_cond.", "tree": {"sha": "c08a0e4833d3856fbc936ac098b3ac9f6a1dabc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08a0e4833d3856fbc936ac098b3ac9f6a1dabc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2afe882858699bb6c13f8502f4f6e862a126d4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afe882858699bb6c13f8502f4f6e862a126d4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afe882858699bb6c13f8502f4f6e862a126d4ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afe882858699bb6c13f8502f4f6e862a126d4ef/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbad6c62529fd2e5dcf9f7db884cee01e9dcc4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbad6c62529fd2e5dcf9f7db884cee01e9dcc4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbad6c62529fd2e5dcf9f7db884cee01e9dcc4bd"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "970a2ebba68e9701794e76f837c6b4f1e2a60b3e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afe882858699bb6c13f8502f4f6e862a126d4ef/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afe882858699bb6c13f8502f4f6e862a126d4ef/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=2afe882858699bb6c13f8502f4f6e862a126d4ef", "patch": "@@ -1306,6 +1306,7 @@ lower_cond (simplify *s, vec<simplify *>& simplifiers)\n     {\n       simplify *ns = new simplify (s->kind, s->id, matchers[i], s->result,\n \t\t\t\t   s->for_vec, s->capture_ids);\n+      ns->for_subst_vec.safe_splice (s->for_subst_vec);\n       simplifiers.safe_push (ns);\n     }\n }\n@@ -1543,24 +1544,27 @@ static void\n lower (vec<simplify *>& simplifiers, bool gimple)\n {\n   auto_vec<simplify *> out_simplifiers;\n-  for (unsigned i = 0; i < simplifiers.length (); ++i)\n-    lower_opt (simplifiers[i], out_simplifiers);\n+  for (auto s: simplifiers)\n+    lower_opt (s, out_simplifiers);\n \n   simplifiers.truncate (0);\n-  for (unsigned i = 0; i < out_simplifiers.length (); ++i)\n-    lower_commutative (out_simplifiers[i], simplifiers);\n+  for (auto s: out_simplifiers)\n+    lower_commutative (s, simplifiers);\n \n+  /* Lower for needs to happen before lowering cond\n+     to support (for cnd (cond vec_cond)).  This is\n+     safe as substitution delay does not happen for\n+     cond or vec_cond. */\n   out_simplifiers.truncate (0);\n-  if (gimple)\n-    for (unsigned i = 0; i < simplifiers.length (); ++i)\n-      lower_cond (simplifiers[i], out_simplifiers);\n-  else\n-    out_simplifiers.safe_splice (simplifiers);\n-\n+  for (auto s: simplifiers)\n+    lower_for (s, out_simplifiers);\n \n   simplifiers.truncate (0);\n-  for (unsigned i = 0; i < out_simplifiers.length (); ++i)\n-    lower_for (out_simplifiers[i], simplifiers);\n+  if (gimple)\n+    for (auto s: out_simplifiers)\n+      lower_cond (s, simplifiers);\n+  else\n+    simplifiers.safe_splice (out_simplifiers);\n }\n \n "}]}