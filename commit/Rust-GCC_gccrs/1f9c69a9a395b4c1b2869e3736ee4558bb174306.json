{"sha": "1f9c69a9a395b4c1b2869e3736ee4558bb174306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5YzY5YTlhMzk1YjRjMWIyODY5ZTM3MzZlZTQ1NThiYjE3NDMwNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-21T00:11:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-21T00:11:52Z"}, "message": "re PR libstdc++/29134 (Has there been a serious attempt to define the max_size() member functions?)\n\n2006-09-20  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/29134\n\t* include/bits/stl_list.h (list<>::max_size): Forward to allocator'\n\tmax_size.\n\t* include/bits/stl_vector.h (vector<>::max_size): Likewise.\n\t* include/bits/stl_deque.h (deque<>::max_size): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree<>::max_size): Likewise.\n\t* include/tr1/hashtable (_Hashtable<>::max_size): Likewise.\n\t* testsuite/23_containers/vector/capacity/29134.cc: Add.\n\t* testsuite/23_containers/deque/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/list/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/set/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/map/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/multiset/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/multimap/capacity/29134.cc: Likewise.\t\n\t* testsuite/tr1/6_containers/unordered/capacity/29134-set.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/capacity/29134-map.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/capacity/29134-multiset.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/unordered/capacity/29134-multimap.cc:\n\tLikewise.\n\n\t* include/bits/deque.tcc (deque<>::_M_new_elements_at_front,\n\tdeque<>::_M_new_elements_at_back): Check for length errors.\n\t* testsuite/23_containers/deque/capacity/29134-2.cc: New.\n\t* testsuite/23_containers/vector/capacity/29134-2.cc: Likewise.\n\n\t* include/tr1/hashtable (_Hashtable<>::_M_get_Value_allocator): Add.\n\t(_Hashtable<>::_M_allocate_node, _M_deallocate_node): Use it.\n\t* testsuite/tr1/6_containers/unordered/instantiate/set.cc: Add test.\n\t* testsuite/tr1/6_containers/unordered/instantiate/map.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/instantiate/multiset.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/unordered/instantiate/multimap.cc:\n\tLikewise.\n\nFrom-SVN: r117099", "tree": {"sha": "3bbaff3c7dfa297f621de5704fd92b3bbed413c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bbaff3c7dfa297f621de5704fd92b3bbed413c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9c69a9a395b4c1b2869e3736ee4558bb174306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9c69a9a395b4c1b2869e3736ee4558bb174306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9c69a9a395b4c1b2869e3736ee4558bb174306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9c69a9a395b4c1b2869e3736ee4558bb174306/comments", "author": null, "committer": null, "parents": [{"sha": "e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e853e26e117d4e481d2d1cba07dcdae9cc26dd43"}], "stats": {"total": 660, "additions": 622, "deletions": 38}, "files": [{"sha": "48059ebe044bb1cd83c283896c6dbef7a19b6ff0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -1,3 +1,40 @@\n+2006-09-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/29134\n+\t* include/bits/stl_list.h (list<>::max_size): Forward to allocator'\n+\tmax_size.\n+\t* include/bits/stl_vector.h (vector<>::max_size): Likewise.\n+\t* include/bits/stl_deque.h (deque<>::max_size): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree<>::max_size): Likewise.\n+\t* include/tr1/hashtable (_Hashtable<>::max_size): Likewise.\n+\t* testsuite/23_containers/vector/capacity/29134.cc: Add.\n+\t* testsuite/23_containers/deque/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/list/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/set/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/map/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/multiset/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/multimap/capacity/29134.cc: Likewise.\t\n+\t* testsuite/tr1/6_containers/unordered/capacity/29134-set.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/capacity/29134-map.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/capacity/29134-multiset.cc:\n+\tLikewise.\n+\t* testsuite/tr1/6_containers/unordered/capacity/29134-multimap.cc:\n+\tLikewise.\n+\n+\t* include/bits/deque.tcc (deque<>::_M_new_elements_at_front,\n+\tdeque<>::_M_new_elements_at_back): Check for length errors.\n+\t* testsuite/23_containers/deque/capacity/29134-2.cc: New.\n+\t* testsuite/23_containers/vector/capacity/29134-2.cc: Likewise.\n+\n+\t* include/tr1/hashtable (_Hashtable<>::_M_get_Value_allocator): Add.\n+\t(_Hashtable<>::_M_allocate_node, _M_deallocate_node): Use it.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/set.cc: Add test.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/map.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/multiset.cc:\n+\tLikewise.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/multimap.cc:\n+\tLikewise.\n+\n 2006-09-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/detail/"}, {"sha": "4416b71c948bae010f4b6a1c28addb2fee4ad9fb", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -1,6 +1,7 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -277,13 +278,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n             for (__cur_node = this->_M_impl._M_start._M_node;\n                  __cur_node < this->_M_impl._M_finish._M_node;\n                  ++__cur_node)\n-            {\n-              _ForwardIterator __mid = __first;\n-              std::advance(__mid, _S_buffer_size());\n-              std::__uninitialized_copy_a(__first, __mid, *__cur_node,\n-\t\t\t\t\t  _M_get_Tp_allocator());\n-              __first = __mid;\n-            }\n+\t      {\n+\t\t_ForwardIterator __mid = __first;\n+\t\tstd::advance(__mid, _S_buffer_size());\n+\t\tstd::__uninitialized_copy_a(__first, __mid, *__cur_node,\n+\t\t\t\t\t    _M_get_Tp_allocator());\n+\t\t__first = __mid;\n+\t      }\n             std::__uninitialized_copy_a(__first, __last,\n \t\t\t\t\tthis->_M_impl._M_finish._M_first,\n \t\t\t\t\t_M_get_Tp_allocator());\n@@ -659,8 +660,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n     deque<_Tp, _Alloc>::\n     _M_new_elements_at_front(size_type __new_elems)\n     {\n-      const size_type __new_nodes\n-\t= (__new_elems + _S_buffer_size() - 1) / _S_buffer_size();\n+      if (this->max_size() - this->size() < __new_elems)\n+\t__throw_length_error(__N(\"deque::_M_new_elements_at_front\"));\n+\n+      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)\n+\t\t\t\t     / _S_buffer_size());\n       _M_reserve_map_at_front(__new_nodes);\n       size_type __i;\n       try\n@@ -681,8 +685,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n     deque<_Tp, _Alloc>::\n     _M_new_elements_at_back(size_type __new_elems)\n     {\n-      const size_type __new_nodes\n-\t= (__new_elems + _S_buffer_size() - 1) / _S_buffer_size();\n+      if (this->max_size() - this->size() < __new_elems)\n+\t__throw_length_error(__N(\"deque::_M_new_elements_at_back\"));\n+\n+      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)\n+\t\t\t\t     / _S_buffer_size());\n       _M_reserve_map_at_back(__new_nodes);\n       size_type __i;\n       try\n@@ -715,8 +722,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t                 + (__add_at_front ? __nodes_to_add : 0);\n \t  if (__new_nstart < this->_M_impl._M_start._M_node)\n \t    std::copy(this->_M_impl._M_start._M_node,\n-\t\t    this->_M_impl._M_finish._M_node + 1,\n-\t\t    __new_nstart);\n+\t\t      this->_M_impl._M_finish._M_node + 1,\n+\t\t      __new_nstart);\n \t  else\n \t    std::copy_backward(this->_M_impl._M_start._M_node,\n \t\t\t       this->_M_impl._M_finish._M_node + 1,"}, {"sha": "03cda6956ca2ad4a6d2d246f94eb4f08204d254e", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -870,7 +870,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       /**  Returns the size() of the largest possible %deque.  */\n       size_type\n       max_size() const\n-      { return size_type(-1); }\n+      { return _M_get_Tp_allocator().max_size(); }\n \n       /**\n        *  @brief  Resizes the %deque to the specified number of elements.\n@@ -1521,7 +1521,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       }\n \n       void\n-      _M_reserve_map_at_front (size_type __nodes_to_add = 1)\n+      _M_reserve_map_at_front(size_type __nodes_to_add = 1)\n       {\n \tif (__nodes_to_add > size_type(this->_M_impl._M_start._M_node\n \t\t\t\t       - this->_M_impl._M_map))"}, {"sha": "e37e5ee36f3b1fe38d4bd637c6312ab6711d5f8a", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -662,7 +662,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n       max_size() const\n-      { return size_type(-1); }\n+      { return _M_get_Tp_allocator().max_size(); }\n \n       /**\n        *  @brief Resizes the %list to the specified number of elements."}, {"sha": "e1efe0a6d2cb29dcb1009e5b4f3103f47533cf35", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -650,7 +650,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       size_type\n       max_size() const\n-      { return size_type(-1); }\n+      { return get_allocator().max_size(); }\n \n       void\n       swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);"}, {"sha": "a81c5974d997f5729a7175ecd75480b837d86e19", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -399,7 +399,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       /**  Returns the size() of the largest possible %vector.  */\n       size_type\n       max_size() const\n-      { return size_type(-1) / sizeof(value_type); }\n+      { return _M_get_Tp_allocator().max_size(); }\n \n       /**\n        *  @brief  Resizes the %vector to the specified number of elements."}, {"sha": "f4451b9033eddd0fe3e4eee962aaab61eacddcb8", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -73,8 +73,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   // _Key and _Value: arbitrary CopyConstructible types.\n   \n   // _Allocator: an allocator type ([lib.allocator.requirements]) whose\n-  // value type is Value.\n-  \n+  // value type is Value.  As a conforming extension, we allow for\n+  // value type != Value.\n+\n   // _ExtractKey: function object that takes a object of type Value\n   // and returns a value of type _Key.\n   \n@@ -106,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   // bucket count.  If not, returns make_pair(false, <anything>).\n   \n   // ??? Right now it is hard-wired that the number of buckets never\n-  // shrinks.  Should we allow RehashPolicy to change that?\n+  // shrinks.  Should we allow _RehashPolicy to change that?\n   \n   // __cache_hash_code: bool.  true if we store the value of the hash\n   // function along with the value.  This is a time-space tradeoff.\n@@ -154,8 +155,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef _Value                                      value_type;\n       typedef _Key                                        key_type;\n       typedef _Equal                                      key_equal;\n-      // mapped_type, if present, comes from map_base.\n-      // hasher, if present, comes from hash_code_base.\n+      // mapped_type, if present, comes from _Map_base.\n+      // hasher, if present, comes from _Hash_code_base.\n       typedef typename _Allocator::difference_type        difference_type;\n       typedef typename _Allocator::size_type              size_type;\n       typedef typename _Allocator::reference              reference;\n@@ -187,6 +188,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef typename _Allocator::template rebind<_Node*>::other\n                                                         _Bucket_allocator_type;\n \n+      typedef typename _Allocator::template rebind<_Value>::other\n+                                                        _Value_allocator_type;\n+\n       _Node_allocator_type   _M_node_allocator;\n       _Node**                _M_buckets;\n       size_type              _M_bucket_count;\n@@ -268,11 +272,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       allocator_type\n       get_allocator() const\n-      { return _M_node_allocator; }\n-  \n+      { return allocator_type(_M_node_allocator); }\n+\n+      _Value_allocator_type\n+      _M_get_Value_allocator() const\n+      { return _Value_allocator_type(_M_node_allocator); }\n+\n       size_type\n       max_size() const\n-      { return _M_node_allocator.max_size(); }\n+      { return _M_get_Value_allocator().max_size(); }\n \n       // Observers\n       key_equal\n@@ -443,7 +451,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       _Node* __n = _M_node_allocator.allocate(1);\n       try\n \t{\n-\t  get_allocator().construct(&__n->_M_v, __v);\n+\t  _M_get_Value_allocator().construct(&__n->_M_v, __v);\n \t  __n->_M_next = 0;\n \t  return __n;\n \t}\n@@ -463,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     _M_deallocate_node(_Node* __n)\n     {\n-      get_allocator().destroy(&__n->_M_v);\n+      _M_get_Value_allocator().destroy(&__n->_M_v);\n       _M_node_allocator.deallocate(__n, 1);\n     }\n \n@@ -555,10 +563,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n       _Hashtable(_InputIterator __f, _InputIterator __l,\n-\t\tsize_type __bucket_hint,\n-\t\tconst _H1& __h1, const _H2& __h2, const _Hash& __h,\n-\t\tconst _Equal& __eq, const _ExtractKey& __exk,\n-\t\tconst allocator_type& __a)\n+\t\t size_type __bucket_hint,\n+\t\t const _H1& __h1, const _H2& __h2, const _Hash& __h,\n+\t\t const _Equal& __eq, const _ExtractKey& __exk,\n+\t\t const allocator_type& __a)\n       : __detail::_Rehash_base<_RehashPolicy, _Hashtable>(),\n \t__detail::_Hash_code_base<_Key, _Value, _ExtractKey, _Equal,\n \t\t\t\t  _H1, _H2, _Hash, __chc>(__exk, __eq,\n@@ -599,7 +607,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __detail::_Hash_code_base<_Key, _Value, _ExtractKey, _Equal,\n \t\t\t\t_H1, _H2, _Hash, __chc>(__ht),\n       __detail::_Map_base<_Key, _Value, _ExtractKey, __uk, _Hashtable>(__ht),\n-      _M_node_allocator(__ht.get_allocator()),\n+      _M_node_allocator(__ht._M_node_allocator),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),\n       _M_rehash_policy(__ht._M_rehash_policy)"}, {"sha": "bce8f91567b2cc1e28e7f4e549c446289a10c467", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/29134-2.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134-2.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.1.2 deque capacity [lib.deque.capacity]\n+\n+#include <deque>\n+#include <stdexcept>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  deque<int> d;\n+\n+  try\n+    {\n+      d.resize(numeric_limits<size_t>::max());\n+    }\n+  catch(const std::length_error&)\n+    {\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b787f05db9fea608d0d256eac98750f8cad7e3e4", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.1.2 deque capacity [lib.deque.capacity]\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::deque<int> d;\n+\n+  VERIFY( d.max_size() == d.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "513466565f62534cbca84c953986ff4652a9f116", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.2.2 list capacity [lib.list.capacity]\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<int> l;\n+\n+  VERIFY( l.max_size() == l.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6383eefa3ab1c6dc7a01be1a80f37c88b39b28ce", "filename": "libstdc++-v3/testsuite/23_containers/map/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.1 map capacity\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::map<int, int> m;\n+\n+  VERIFY( m.max_size() == m.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "466a3341f9e79fd02114a35115aae3cb26c795dd", "filename": "libstdc++-v3/testsuite/23_containers/multimap/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.2 multimap capacity\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::multimap<int, int> mm;\n+\n+  VERIFY( mm.max_size() == mm.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ddfb165e8d9b87333db1fc661cbe6de98a942801", "filename": "libstdc++-v3/testsuite/23_containers/multiset/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.4 multiset capacity\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::multiset<int> ms;\n+\n+  VERIFY( ms.max_size() == ms.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "51650399b733b468c26db7ea0492714891969114", "filename": "libstdc++-v3/testsuite/23_containers/set/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.3 set capacity\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::set<int> s;\n+\n+  VERIFY( s.max_size() == s.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "79a1d24ef78dd521fc567eec317a18efefd475a4", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/29134-2.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134-2.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.4.2 vector capacity [lib.vector.capacity]\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  vector<int> v;\n+\n+  try\n+    {\n+      v.resize(numeric_limits<size_t>::max());\n+    }\n+  catch(const std::length_error&)\n+    {\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5a98587954bc6183aa971a363a03caa741c0f211", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/29134.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.4.2 vector capacity [lib.vector.capacity]\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<int> v;\n+\n+  VERIFY( v.max_size() == v.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "459ace41a888e3259ca823f3a078ef02fed5c5e2", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/capacity/29134-map.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-map.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.4  Class template unordered_map\n+\n+#include <tr1/unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::unordered_map<int, int> um;\n+\n+  VERIFY( um.max_size() == um.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "af41fa154d6c158d60845314910eaa07995d4063", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/capacity/29134-multimap.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multimap.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.6  Class template unordered_multimap\n+\n+#include <tr1/unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::unordered_multimap<int, int> umm;\n+\n+  VERIFY( umm.max_size() == umm.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "923af9be118e71af4c2e78eb447a62954a603ce0", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/capacity/29134-multiset.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-multiset.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.5  Class template unordered_multiset\n+\n+#include <tr1/unordered_set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::unordered_multiset<int> ums;\n+\n+  VERIFY( ums.max_size() == ums.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5822341c85e0547162134c8b9f17adc4451e9379", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/capacity/29134-set.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fcapacity%2F29134-set.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.3  Class template unordered_set\n+\n+#include <tr1/unordered_set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/29134\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::unordered_set<int> us;\n+\n+  VERIFY( us.max_size() == us.get_allocator().max_size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "41ce95db89e39d9ba6bb1ece523b14c92c686764", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/map.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,3 +32,6 @@ template class unordered_map<string, float>;\n template class unordered_map<string, float,\n \t\t\t     hash<string>, equal_to<string>, \n \t\t\t     allocator<pair<const string, float> >, true>;\n+template class unordered_map<string, float,\n+\t\t\t     hash<string>, equal_to<string>, \n+\t\t\t     allocator<char>, false>;"}, {"sha": "d48aef831b66cc1495279a8dfd8ab5a5bc231819", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/multimap.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,3 +32,6 @@ template class unordered_multimap<string, float>;\n template class unordered_multimap<string, float,\n \t\t\t\t  hash<string>, equal_to<string>, \n \t\t\t\t  allocator<pair<const string, float> >, true>;\n+template class unordered_multimap<string, float,\n+\t\t\t\t  hash<string>, equal_to<string>, \n+\t\t\t\t  allocator<char>, false>;"}, {"sha": "5d1e8710b05aac4a66ae8ce784c04072dfc65f3c", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/multiset.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,3 +30,5 @@ using namespace std::tr1;\n template class unordered_multiset<int>;\n template class unordered_multiset<int, hash<int>, equal_to<int>,\n \t\t\t\t  allocator<int>, true>;\n+template class unordered_multiset<int, hash<int>, equal_to<int>,\n+\t\t\t\t  allocator<char>, false>;"}, {"sha": "ae3214f1bae349c23913374c33429128188debe5", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/set.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c69a9a395b4c1b2869e3736ee4558bb174306/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc?ref=1f9c69a9a395b4c1b2869e3736ee4558bb174306", "patch": "@@ -2,7 +2,7 @@\n \n // 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,3 +30,5 @@ using namespace std::tr1;\n template class unordered_set<int>;\n template class unordered_set<int, hash<int>, equal_to<int>,\n \t\t\t     allocator<int>, true>;\n+template class unordered_set<int, hash<int>, equal_to<int>,\n+\t\t\t     allocator<char>, false>;"}]}