{"sha": "d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1NDg1YzU4ZmRkOWFiNmNhMmNiNmJjMjAwYmI3MTYzMmRiYmQ5Yw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-06-12T13:28:46Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-06-12T13:28:46Z"}, "message": "[ARC] Update warning messges.\n\nWhen we pass an mcpu to the compiler we have two types of (hardware\nconfiguration) flags that are set:\n\n1. Architecture specific, for example code-density is always enabled\nfor ARCHS architectures. These options are overwriting whatever the\ncorresponding user options with the preset ones.\n\n2. CPU specific, for example archs is using LL64 option by\ndefault. These options can be freely enabled or disabled.\n\nBecause of the above complexity, we need to throw some errors for the\nuser to know when he/she does something which goes against the above\nrules. Thus, I came up with the following set of rules:\n\n1. Overwriting default architecture specific hardware option: it is\nignored, a warning is thrown;\n\n2. Overwriting default CPU specific hardware option: it is taken into\naccount, a warning is thrown.\n\ngcc/\n2018-06-12  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-arch.h: Update ARC_OPTX macro.\n\t* config/arc/arc-options.def (ARC_OPTX): Introduce a new doc\n\tfield.\n\t* config/arc/arc.c (arc_init): Update pic warning.\n\t(irq_range): Update irq range parsing warnings.\n\t(arc_override_options): Update various warning messages.\n\t(arc_handle_aux_attribute): Likewise.\n\ngcc/testsuite\n2018-06-12  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/builtin_simdarc.c: Update test.\n\t* gcc.target/arc/mulsi3_highpart-2.c: Likewise.\n\t* gcc.target/arc/tumaddsidi4.c: Likewise.\n\nFrom-SVN: r261495", "tree": {"sha": "42220041d72f645157627a73b96ebde291af427b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42220041d72f645157627a73b96ebde291af427b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5def02b7a456f6669c381cb1b60a68a953c9abfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5def02b7a456f6669c381cb1b60a68a953c9abfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5def02b7a456f6669c381cb1b60a68a953c9abfe"}], "stats": {"total": 158, "additions": 96, "deletions": 62}, "files": [{"sha": "ffbe27dcc351f77f4ea84f342f7c262525b8fd07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -1,3 +1,13 @@\n+2018-06-12  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arch.h: Update ARC_OPTX macro.\n+\t* config/arc/arc-options.def (ARC_OPTX): Introduce a new doc\n+\tfield.\n+\t* config/arc/arc.c (arc_init): Update pic warning.\n+\t(irq_range): Update irq range parsing warnings.\n+\t(arc_override_options): Update various warning messages.\n+\t(arc_handle_aux_attribute): Likewise.\n+\n 2018-06-12  Robert Suchanek  <robert.suchanek@mips.com>\n \n \t* config/mips/i6400.md (i6400_fpu_fadd): Remove frint."}, {"sha": "f9468c8955b192bc9714fad2b6f98f5c2b8c3a81", "filename": "gcc/config/arc/arc-arch.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n enum cpu_flags\n   {\n #define ARC_OPT(NAME, CODE, MASK, DOC)\t    NAME = CODE,\n-#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC) NAME = CODE,\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC0, DOC1) NAME = CODE,\n #include \"arc-options.def\"\n #undef ARC_OPT\n #undef ARC_OPTX"}, {"sha": "fefb3081c81e1eab64f25fbf91ebd4a33aa0253e", "filename": "gcc/config/arc/arc-options.def", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc-options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc-options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-options.def?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -74,32 +74,32 @@ ARC_OPT (FL_DPFP,     (1ULL << 13), MASK_DPFP_COMPACT_SET, \"double precission FP\n ARC_OPT (FL_ARGONAUT, (1ULL << 14), MASK_ARGONAUT_SET,\t   \"argonaut\")\n ARC_OPT (FL_SIMD,     (1ULL << 15), MASK_SIMD_SET,\t   \"simd\")\n \n-ARC_OPTX (FL_MPYOPT_1, (1ULL << 17), arc_mpy_option, 1, \"mpy option w\")\n-ARC_OPTX (FL_MPYOPT_2, (1ULL << 18), arc_mpy_option, 2, \"mpy option wlh1\")\n-ARC_OPTX (FL_MPYOPT_3, (1ULL << 19), arc_mpy_option, 3, \"mpy option wlh2\")\n-ARC_OPTX (FL_MPYOPT_4, (1ULL << 20), arc_mpy_option, 4, \"mpy option wlh3\")\n-ARC_OPTX (FL_MPYOPT_5, (1ULL << 21), arc_mpy_option, 5, \"mpy option wlh4\")\n-ARC_OPTX (FL_MPYOPT_6, (1ULL << 22), arc_mpy_option, 6, \"mpy option wlh5\")\n-ARC_OPTX (FL_MPYOPT_7, (1ULL << 23), arc_mpy_option, 7, \"mpy option plus_dmpy\")\n-ARC_OPTX (FL_MPYOPT_8, (1ULL << 24), arc_mpy_option, 8, \"mpy option plus_macd\")\n-ARC_OPTX (FL_MPYOPT_9, (1ULL << 25), arc_mpy_option, 9, \"mpy option plus_qmacw\")\n+ARC_OPTX (FL_MPYOPT_1, (1ULL << 17), arc_mpy_option, 1, \"mpy-option\", \"w\")\n+ARC_OPTX (FL_MPYOPT_2, (1ULL << 18), arc_mpy_option, 2, \"mpy-option\", \"wlh1\")\n+ARC_OPTX (FL_MPYOPT_3, (1ULL << 19), arc_mpy_option, 3, \"mpy-option\", \"wlh2\")\n+ARC_OPTX (FL_MPYOPT_4, (1ULL << 20), arc_mpy_option, 4, \"mpy-option\", \"wlh3\")\n+ARC_OPTX (FL_MPYOPT_5, (1ULL << 21), arc_mpy_option, 5, \"mpy-option\", \"wlh4\")\n+ARC_OPTX (FL_MPYOPT_6, (1ULL << 22), arc_mpy_option, 6, \"mpy-option\", \"wlh5\")\n+ARC_OPTX (FL_MPYOPT_7, (1ULL << 23), arc_mpy_option, 7, \"mpy-option\", \"plus_dmpy\")\n+ARC_OPTX (FL_MPYOPT_8, (1ULL << 24), arc_mpy_option, 8, \"mpy-option\", \"plus_macd\")\n+ARC_OPTX (FL_MPYOPT_9, (1ULL << 25), arc_mpy_option, 9, \"mpy-option\", \"plus_qmacw\")\n \n ARC_OPT (FL_MPYOPT_7_9, (0x01c2ULL << 17), 0, \"mpy option\")\n ARC_OPT (FL_MPYOPT_1_6, (0x003fULL << 17), 0, \"mpy option\")\n \n-ARC_OPTX (FL_FPU_FPUS,\t    (1ULL << 26), arc_fpu_build, FPU_FPUS,\t\"mfpu=fpus\")\n-ARC_OPTX (FL_FPU_FPUS_DIV,  (1ULL << 27), arc_fpu_build, FPU_FPUS_DIV,\t\"mfpu=fpus_div\")\n-ARC_OPTX (FL_FPU_FPUS_FMA,  (1ULL << 28), arc_fpu_build, FPU_FPUS_FMA,\t\"mfpu=fpus_fma\")\n-ARC_OPTX (FL_FPU_FPUS_ALL,  (1ULL << 29), arc_fpu_build, FPU_FPUS_ALL,\t\"mfpu=fpus_all\")\n-ARC_OPTX (FL_FPU_FPUDA,\t    (1ULL << 30), arc_fpu_build, FPU_FPUDA,\t\"mfpu=fpuda\")\n-ARC_OPTX (FL_FPU_FPUDA_DIV, (1ULL << 31), arc_fpu_build, FPU_FPUDA_DIV, \"mfpu=fpuda_div\")\n-ARC_OPTX (FL_FPU_FPUDA_FMA, (1ULL << 32), arc_fpu_build, FPU_FPUDA_FMA, \"mfpu=fpuda_fma\")\n-ARC_OPTX (FL_FPU_FPUDA_ALL, (1ULL << 33), arc_fpu_build, FPU_FPUDA_ALL, \"mfpu=fpuda_all\")\n-ARC_OPTX (FL_FPU_FPUD,\t    (1ULL << 34), arc_fpu_build, FPU_FPUD,\t\"mfpu=fpud\")\n-ARC_OPTX (FL_FPU_FPUD_DIV,  (1ULL << 35), arc_fpu_build, FPU_FPUD_DIV,\t\"mfpu=fpud_div\")\n-ARC_OPTX (FL_FPU_FPUD_FMA,  (1ULL << 36), arc_fpu_build, FPU_FPUD_FMA,\t\"mfpu=fpud_fma\")\n-ARC_OPTX (FL_FPU_FPUD_ALL,  (1ULL << 37), arc_fpu_build, FPU_FPUD_ALL,\t\"mfpu=fpud_all\")\n-ARC_OPTX (FL_FPX_QUARK,\t    (1ULL << 38), arc_fpu_build, FPX_QK,\t\"quarkse fp\")\n+ARC_OPTX (FL_FPU_FPUS,\t    (1ULL << 26), arc_fpu_build, FPU_FPUS,\t\"mfpu\", \"fpus\")\n+ARC_OPTX (FL_FPU_FPUS_DIV,  (1ULL << 27), arc_fpu_build, FPU_FPUS_DIV,\t\"mfpu\", \"fpus_div\")\n+ARC_OPTX (FL_FPU_FPUS_FMA,  (1ULL << 28), arc_fpu_build, FPU_FPUS_FMA,\t\"mfpu\", \"fpus_fma\")\n+ARC_OPTX (FL_FPU_FPUS_ALL,  (1ULL << 29), arc_fpu_build, FPU_FPUS_ALL,\t\"mfpu\", \"fpus_all\")\n+ARC_OPTX (FL_FPU_FPUDA,\t    (1ULL << 30), arc_fpu_build, FPU_FPUDA,\t\"mfpu\", \"fpuda\")\n+ARC_OPTX (FL_FPU_FPUDA_DIV, (1ULL << 31), arc_fpu_build, FPU_FPUDA_DIV, \"mfpu\", \"fpuda_div\")\n+ARC_OPTX (FL_FPU_FPUDA_FMA, (1ULL << 32), arc_fpu_build, FPU_FPUDA_FMA, \"mfpu\", \"fpuda_fma\")\n+ARC_OPTX (FL_FPU_FPUDA_ALL, (1ULL << 33), arc_fpu_build, FPU_FPUDA_ALL, \"mfpu\", \"fpuda_all\")\n+ARC_OPTX (FL_FPU_FPUD,\t    (1ULL << 34), arc_fpu_build, FPU_FPUD,\t\"mfpu\", \"fpud\")\n+ARC_OPTX (FL_FPU_FPUD_DIV,  (1ULL << 35), arc_fpu_build, FPU_FPUD_DIV,\t\"mfpu\", \"fpud_div\")\n+ARC_OPTX (FL_FPU_FPUD_FMA,  (1ULL << 36), arc_fpu_build, FPU_FPUD_FMA,\t\"mfpu\", \"fpud_fma\")\n+ARC_OPTX (FL_FPU_FPUD_ALL,  (1ULL << 37), arc_fpu_build, FPU_FPUD_ALL,\t\"mfpu\", \"fpud_all\")\n+ARC_OPTX (FL_FPX_QUARK,\t    (1ULL << 38), arc_fpu_build, FPX_QK,\t\"quarkse fp\", \"N.A.\")\n \n ARC_OPT (FL_FPUS,  (0xFULL << 26), 0, \"single precission floating point\")\n ARC_OPT (FL_FPUDA, (0xFFULL << 26), 0, \"double precission fp assist\")"}, {"sha": "d3b8984493d5603c3ccd29de09e6168487fda3b2", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 54, "deletions": 36, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -934,7 +934,7 @@ arc_init (void)\n   /* Warn for unimplemented PIC in pre-ARC700 cores, and disable flag_pic.  */\n   if (flag_pic && TARGET_ARC600_FAMILY)\n     {\n-      warning (DK_WARNING,\n+      warning (0,\n \t       \"PIC is not supported for %s. Generating non-PIC code only..\",\n \t       arc_cpu_string);\n       flag_pic = 0;\n@@ -998,7 +998,7 @@ irq_range (const char *cstr)\n   dash = strchr (str, '-');\n   if (!dash)\n     {\n-      warning (0, \"value of -mirq-ctrl-saved must have form R0-REGx\");\n+      warning (OPT_mirq_ctrl_saved_, \"missing dash\");\n       return;\n     }\n   *dash = '\\0';\n@@ -1010,7 +1010,7 @@ irq_range (const char *cstr)\n   first = decode_reg_name (str);\n   if (first != 0)\n     {\n-      warning (0, \"first register must be R0\");\n+      warning (OPT_mirq_ctrl_saved_, \"first register must be R0\");\n       return;\n     }\n \n@@ -1023,21 +1023,23 @@ irq_range (const char *cstr)\n \n   if (last < 0)\n     {\n-      warning (0, \"unknown register name: %s\", dash + 1);\n+      warning (OPT_mirq_ctrl_saved_, \"unknown register name: %s\", dash + 1);\n       return;\n     }\n \n   if (!(last & 0x01))\n     {\n-      warning (0, \"last register name %s must be an odd register\", dash + 1);\n+      warning (OPT_mirq_ctrl_saved_,\n+\t       \"last register name %s must be an odd register\", dash + 1);\n       return;\n     }\n \n   *dash = '-';\n \n   if (first > last)\n     {\n-      warning (0, \"%s-%s is an empty range\", str, dash + 1);\n+      warning (OPT_mirq_ctrl_saved_,\n+\t       \"%s-%s is an empty range\", str, dash + 1);\n       return;\n     }\n \n@@ -1062,7 +1064,8 @@ irq_range (const char *cstr)\n \t  break;\n \n \tdefault:\n-\t  warning (0, \"unknown register name: %s\", str);\n+\t  warning (OPT_mirq_ctrl_saved_,\n+\t\t   \"unknown register name: %s\", str);\n \t  return;\n \t}\n     }\n@@ -1147,14 +1150,16 @@ arc_override_options (void)\n \t    if (TARGET_V2)\n \t      irq_range (opt->arg);\n \t    else\n-\t      warning (0, \"option -mirq-ctrl-saved valid only for ARC v2 processors\");\n+\t      warning (OPT_mirq_ctrl_saved_,\n+\t\t       \"option -mirq-ctrl-saved valid only for ARC v2 processors\");\n \t    break;\n \n \t  case OPT_mrgf_banked_regs_:\n \t    if (TARGET_V2)\n \t      parse_mrgf_banked_regs_option (opt->arg);\n \t    else\n-\t      warning (0, \"option -mrgf-banked-regs valid only for ARC v2 processors\");\n+\t      warning (OPT_mrgf_banked_regs_,\n+\t\t       \"option -mrgf-banked-regs valid only for ARC v2 processors\");\n \t    break;\n \n \t  default:\n@@ -1186,6 +1191,42 @@ arc_override_options (void)\n \t}\n     }\n \n+  /* Check options against architecture options.  Throw an error if\n+     option is not allowed.  Extra, check options against default\n+     architecture/cpu flags and throw an warning if we find a\n+     mismatch.  */\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC0, DOC1)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((!(arc_selected_cpu->arch_info->flags & CODE))\t\t\\\n+\t&& (VAR == VAL))\t\t\t\t\t\\\n+      error (\"Option %s=%s is not available for %s CPU.\",\t\\\n+\t     DOC0, DOC1, arc_selected_cpu->name);\t\t\\\n+    if ((arc_selected_cpu->arch_info->dflags & CODE)\t\t\\\n+\t&& (VAR != DEFAULT_##VAR)\t\t\t\t\\\n+\t&& (VAR != VAL))\t\t\t\t\t\\\n+      warning (0, \"Option %s is ignored, the default value %s\"\t\\\n+\t       \" is considered for %s CPU.\", DOC0, DOC1,\t\\\n+\t       arc_selected_cpu->name);\t\t\t\t\\\n+ } while (0);\n+#define ARC_OPT(NAME, CODE, MASK, DOC)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((!(arc_selected_cpu->arch_info->flags & CODE))\t\t\\\n+\t&& (target_flags & MASK))\t\t\t\t\\\n+      error (\"Option %s is not available for %s CPU\",\t\t\\\n+\t     DOC, arc_selected_cpu->name);\t\t\t\\\n+    if ((arc_selected_cpu->arch_info->dflags & CODE)\t\t\\\n+\t&& (target_flags_explicit & MASK)\t\t\t\\\n+\t&& (!(target_flags & MASK)))\t\t\t\t\\\n+      warning (0, \"Unset option %s is ignored, it is always\"\t\\\n+\t       \" enabled for %s CPU.\", DOC,\t\t\t\\\n+\t       arc_selected_cpu->name);\t\t\t\t\\\n+  } while (0);\n+\n+#include \"arc-options.def\"\n+\n+#undef ARC_OPTX\n+#undef ARC_OPT\n+\n   /* Set cpu flags accordingly to architecture/selected cpu.  The cpu\n      specific flags are set in arc-common.c.  The architecture forces\n      the default hardware configurations in, regardless what command\n@@ -1199,7 +1240,7 @@ arc_override_options (void)\n     if (arc_selected_cpu->arch_info->dflags & CODE)\t\\\n       target_flags |= MASK;\t\t\t\t\\\n   } while (0);\n-#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\t\\\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC0, DOC1)\t\\\n   do {\t\t\t\t\t\t\t\\\n     if ((arc_selected_cpu->flags & CODE)\t\t\\\n \t&& (VAR == DEFAULT_##VAR))\t\t\t\\\n@@ -1210,30 +1251,6 @@ arc_override_options (void)\n \n #include \"arc-options.def\"\n \n-#undef ARC_OPTX\n-#undef ARC_OPT\n-\n-  /* Check options against architecture options.  Throw an error if\n-     option is not allowed.  */\n-#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    if ((VAR == VAL)\t\t\t\t\t\t\\\n-\t&& (!(arc_selected_cpu->arch_info->flags & CODE)))\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\terror (\"%s is not available for %s architecture\",\t\\\n-\t       DOC, arc_selected_cpu->arch_info->name);\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  } while (0);\n-#define ARC_OPT(NAME, CODE, MASK, DOC)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    if ((target_flags & MASK)\t\t\t\t\t\\\n-\t&& (!(arc_selected_cpu->arch_info->flags & CODE)))\t\\\n-      error (\"%s is not available for %s architecture\",\t\t\\\n-\t     DOC, arc_selected_cpu->arch_info->name);\t\t\\\n-  } while (0);\n-\n-#include \"arc-options.def\"\n-\n #undef ARC_OPTX\n #undef ARC_OPT\n \n@@ -1249,7 +1266,8 @@ arc_override_options (void)\n     {\n       if (TARGET_COMPACT_CASESI)\n \t{\n-\t  warning (0, \"compact-casesi is not applicable to ARCv2\");\n+\t  warning (OPT_mcompact_casesi,\n+\t\t   \"compact-casesi is not applicable to ARCv2\");\n \t  TARGET_COMPACT_CASESI = 0;\n \t}\n     }\n@@ -10717,7 +10735,7 @@ arc_handle_aux_attribute (tree *node,\n \t  tree arg = TREE_VALUE (args);\n \t  if (TREE_CODE (arg) != INTEGER_CST)\n \t    {\n-\t      warning (0, \"%qE attribute allows only an integer \"\n+\t      warning (OPT_Wattributes, \"%qE attribute allows only an integer \"\n \t\t       \"constant argument\", name);\n \t      *no_add_attrs = true;\n \t    }"}, {"sha": "d5ce43d14837cbb6d51cd96d2dbf540014c2fe80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -1,3 +1,9 @@\n+2018-06-12  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/builtin_simdarc.c: Update test.\n+\t* gcc.target/arc/mulsi3_highpart-2.c: Likewise.\n+\t* gcc.target/arc/tumaddsidi4.c: Likewise.\n+\n 2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt72a.ad[sb]: New test."}, {"sha": "5a7c85991994649a6671bbf43f61caf7111fc650", "filename": "gcc/testsuite/gcc.target/arc/builtin_simdarc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_simdarc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_simdarc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_simdarc.c?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { ! { clmcpu } } } */\n-/* { dg-options \"-mcpu=archs -O2 -Werror-implicit-function-declaration -mmpy-option=9\" } */\n+/* { dg-options \"-mcpu=hs38 -O2 -Werror-implicit-function-declaration -mmpy-option=9\" } */\n \n #define STEST(name, rettype, op1type, op2type)\t\\\n   rettype test_ ## name\t\t\t\t\\"}, {"sha": "4b54cbf6a52ec8a9d77d8229082ed55c32a50c07", "filename": "gcc/testsuite/gcc.target/arc/mulsi3_highpart-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-skip-if \"ARC700 always has mpy option on\" { arc700 } } */\n /* { dg-skip-if \"ARC600 doesn't have mpy instruction\" { arc6xx } } */\n-/* { dg-options \"-O2 --save-temps -mmpy-option=0\" } */\n+/* { dg-options \"-O2 -mmpy-option=0 -w\" } */\n \n #include <stdlib.h>\n "}, {"sha": "d5dc2944d9b557345b498981cb0241f23c9f70ae", "filename": "gcc/testsuite/gcc.target/arc/tumaddsidi4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftumaddsidi4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftumaddsidi4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftumaddsidi4.c?ref=d65485c58fdd9ab6ca2cb6bc200bb71632dbbd9c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mcpu=archs -O1 -mmpy-option=plus_dmpy\" } */\n+/* { dg-options \"-mcpu=archs -O1 -mmpy-option=plus_dmpy -w\" } */\n \n /* Check how we generate umaddsidi4 patterns.  */\n long a;"}]}