{"sha": "351ac9c582a8b73e8783618c369f25bbbb24eac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxYWM5YzU4MmE4YjczZTg3ODM2MThjMzY5ZjI1YmJiYjI0ZWFjOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-06-13T18:53:05Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-06-13T18:53:05Z"}, "message": "Darwin, Driver - Improve processing of macosx-version-min=\n\nFor PR target/63810 some improvements were made in the parsing of\nthe version string at the point it's used to define the built-in\n__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__.  This is fine, but the\nspecs processing also uses the version, and specs version-compare\ndoesn't like leading zeros on components.  This means that while we\nsucceed in processing -mmacosx-version-min=010.00002.000099 on compile\nlines, it fails for any other line that uses the value as part of a spec\n(in particular, link lines fail).\n\nTo fix this, we need to apply a bit of clean-up to the version that's\npresented to the driver, and push that back into the command line opts.\n\nThe value can come from four places:\n 1. User-entered on the command line\n 2. User-entered as MACOSX_DEPLOYMENT_TARGET= environment var.\n 3. Absent those two\n   3a For self-hosting systems, look-up from the kernel\n   3b For cross-compilers, as a default supplied at configure time.\n\nWe apply the clean-up to all 4 (although it shouldn't really be needed\nfor the cases under 3).\n\nWe also supply a test-case that adapts to the target-version of the\nsystem, so that the link requirements are met by the SDK in use (if you\ntry to link i686-darwin9 on an x86-64-darwin18 SDK, it will fail).\n\ngcc/\n\n2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin-driver.c (validate_macosx_version_min): New.\n\t(darwin_default_min_version): Cleanup and validate supplied version.\n\t(darwin_driver_init): Likewise and push cleaned version into opts.\n\ngcc/testsuite/\n\n2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* gcc.dg/darwin-minversion-link.c: New test.\n\nFrom-SVN: r272260", "tree": {"sha": "4efe29fe5d9054476d319e42c3d9b2e812932187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4efe29fe5d9054476d319e42c3d9b2e812932187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/351ac9c582a8b73e8783618c369f25bbbb24eac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ac9c582a8b73e8783618c369f25bbbb24eac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351ac9c582a8b73e8783618c369f25bbbb24eac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ac9c582a8b73e8783618c369f25bbbb24eac9/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00802f5e09f2765d299c2a54c30cd372e0013ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00802f5e09f2765d299c2a54c30cd372e0013ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00802f5e09f2765d299c2a54c30cd372e0013ee"}], "stats": {"total": 179, "additions": 158, "deletions": 21}, "files": [{"sha": "2b9171f4ff2c1f6df7cd9af871c8e63f080c5d61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=351ac9c582a8b73e8783618c369f25bbbb24eac9", "patch": "@@ -1,3 +1,9 @@\n+2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-driver.c (validate_macosx_version_min): New.\n+\t(darwin_default_min_version): Cleanup and validate supplied version.\n+\t(darwin_driver_init): Likewise and push cleaned version into opts.\n+\n 2019-06-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR tree-optimization/90869"}, {"sha": "01238e2634da4f4e9c44641ddd8f3df36553bc7d", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 122, "deletions": 21, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=351ac9c582a8b73e8783618c369f25bbbb24eac9", "patch": "@@ -26,6 +26,91 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"diagnostic-core.h\"\n \n+/* Validate a version string (either given on the command line or, perhaps\n+   as MACOSX_DEPLOYMENT_TARGET).\n+\n+   The specs %version-compare() function doesn't accept leading '0' on\n+   numbers so strip them out.  Do sanity checking here too.\n+\n+   Return:\n+     * original string means it was OK and we didn't want to change it.\n+     * new string means it was OK but we rewrote it to avoid possible format\n+     problems.\n+     * NULL means we didn't like what we saw.\n+*/\n+\n+static const char *\n+validate_macosx_version_min (const char *version_str)\n+{\n+  size_t version_len;\n+  unsigned long major, minor, tiny = 0;\n+  char *end;\n+  const char *old_version = version_str;\n+  bool need_rewrite = false;\n+\n+  version_len = strlen (version_str);\n+  if (version_len < 4) /* The minimum would be 10.x  */\n+    return NULL;\n+\n+  /* Version string must consist of digits and periods only.  */\n+  if (strspn (version_str, \"0123456789.\") != version_len)\n+    return NULL;\n+\n+  if (!ISDIGIT (version_str[0]) || !ISDIGIT (version_str[version_len - 1]))\n+    return NULL;\n+\n+  if (version_str[0] == '0')\n+    need_rewrite = true;\n+\n+  major = strtoul (version_str, &end, 10);\n+  version_str = end + ((*end == '.') ? 1 : 0);\n+\n+  if (major != 10) /* So far .. all MacOS 10 ... */\n+    return NULL;\n+\n+  /* Version string components must be present and numeric.  */\n+  if (!ISDIGIT (version_str[0]))\n+    return NULL;\n+\n+  /* If we have one or more leading zeros on a component, then rewrite the\n+     version string.  */\n+  if (version_str[0] == '0' && version_str[1] != '\\0'\n+      && version_str[1] != '.')\n+    need_rewrite = true;\n+\n+  minor = strtoul (version_str, &end, 10);\n+  version_str = end + ((*end == '.') ? 1 : 0);\n+  if (minor > 99)\n+    return NULL;\n+\n+  /* If 'tiny' is present it must be numeric.  */\n+  if (*end != '\\0' && !ISDIGIT (version_str[0]))\n+    return NULL;\n+\n+  /* If we have one or more leading zeros on a component, then rewrite the\n+     version string.  */\n+  if (*end != '\\0' && version_str[0] == '0'\n+      && version_str[1] != '\\0')\n+    need_rewrite = true;\n+\n+  tiny = strtoul (version_str, &end, 10);\n+  if (tiny > 99)\n+    return NULL;\n+\n+  /* Version string must contain no more than three tokens.  */\n+  if (*end != '\\0')\n+    return NULL;\n+\n+  if (need_rewrite)\n+    {\n+      char *new_version;\n+      asprintf (&new_version, \"10.%lu.%lu\", minor, tiny);\n+      return new_version;\n+    }\n+\n+  return old_version;\n+}\n+\n #ifndef CROSS_DIRECTORY_STRUCTURE\n #include <sys/sysctl.h>\n #include \"xregex.h\"\n@@ -114,12 +199,13 @@ darwin_default_min_version (void)\n \n   if (new_flag != NULL)\n     {\n-      size_t len = strlen (new_flag);\n-      if (len > 128) { /* Arbitrary limit, number should be like xx.yy.zz */\n-\twarning (0, \"couldn%'t understand version %s\\n\", new_flag);\n-\treturn NULL;\n-      }\n-      new_flag = xstrndup (new_flag, len);\n+      const char *checked = validate_macosx_version_min (new_flag);\n+      if (checked == NULL)\n+\t{\n+\t  warning (0, \"couldn%'t understand version %s\\n\", new_flag);\n+\t  return NULL;\n+\t}\n+      new_flag = xstrndup (checked, strlen (checked));\n     }\n   return new_flag;\n }\n@@ -209,7 +295,24 @@ darwin_driver_init (unsigned int *decoded_options_count,\n \n \tcase OPT_mmacosx_version_min_:\n \t  seen_version_min = true;\n-\t  vers_string = xstrndup ((*decoded_options)[i].arg, 32);\n+\t  vers_string =\n+\t    validate_macosx_version_min ((*decoded_options)[i].arg);\n+\t  if (vers_string == NULL)\n+\t    warning (0, \"%qs is not valid for %<mmacosx-version-min%>\\n\",\n+\t\t     (*decoded_options)[i].arg);\n+\t  else if (vers_string == (*decoded_options)[i].arg)\n+\t    vers_string = xstrndup ((*decoded_options)[i].arg, 32);\n+\t  /* Now we've examined it, and verified/re-written, put it to\n+\t     one side and append later.  */\n+\t  if (*decoded_options_count > i) {\n+\t    memmove (*decoded_options + i,\n+\t\t     *decoded_options + i + 1,\n+\t\t     ((*decoded_options_count - i)\n+\t\t      * sizeof (struct cl_decoded_option)));\n+\t  }\n+\t  --i;\n+\t  --*decoded_options_count;\n+\t  break;\n \n \tdefault:\n \t  break;\n@@ -276,22 +379,20 @@ darwin_driver_init (unsigned int *decoded_options_count,\n      so that we can figure out the mechanism and source for the sysroot to\n      be used.  */\n   if (! seen_version_min && *decoded_options_count > 1)\n-    {\n-      /* Not set by the User, try to figure it out.  */\n-      vers_string = darwin_default_min_version ();\n-      if (vers_string != NULL)\n-\t{\n-\t  ++*decoded_options_count;\n-\t  *decoded_options = XRESIZEVEC (struct cl_decoded_option,\n-\t\t\t\t\t *decoded_options,\n-\t\t\t\t\t *decoded_options_count);\n-\t  generate_option (OPT_mmacosx_version_min_, vers_string, 1, CL_DRIVER,\n-\t\t\t  &(*decoded_options)[*decoded_options_count - 1]);\n-\t}\n-    }\n-  /* Create and push the major version for assemblers that need it.  */\n+    /* Not set by the User, try to figure it out.  */\n+    vers_string = darwin_default_min_version ();\n+\n+  /* Create and push a cleaned up version, plus the major version for\n+     assemblers and other cases that need it.  */\n   if (vers_string != NULL)\n     {\n+       ++*decoded_options_count;\n+       *decoded_options = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t      *decoded_options,\n+\t\t\t\t      *decoded_options_count);\n+      generate_option (OPT_mmacosx_version_min_, vers_string, 1, CL_DRIVER,\n+\t\t       &(*decoded_options)[*decoded_options_count - 1]);\n+\n       char *asm_major = NULL;\n       const char *first_period = strchr(vers_string, '.');\n       if (first_period != NULL)"}, {"sha": "9f05d1f22dc99a8da548432ff51826524b54fb91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=351ac9c582a8b73e8783618c369f25bbbb24eac9", "patch": "@@ -1,3 +1,7 @@\n+2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.dg/darwin-minversion-link.c: New test.\n+\n 2019-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/68544"}, {"sha": "0a80048ba354f945125c03bee958b5586e5e0839", "filename": "gcc/testsuite/gcc.dg/darwin-minversion-link.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-minversion-link.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351ac9c582a8b73e8783618c369f25bbbb24eac9/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-minversion-link.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-minversion-link.c?ref=351ac9c582a8b73e8783618c369f25bbbb24eac9", "patch": "@@ -0,0 +1,26 @@\n+/* Test that we can handle leading-zeros on mmacosx-version-min for invocations\n+   including linking (so that spec processing works).  To make sure that any\n+   necessary target libs are present we make this specific to the target version\n+   being built.  */\n+/* { dg-do link { target *-*-darwin* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.04.11 -DCHECK=1049\" { target *-*-darwin8* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.05.08 -DCHECK=1058\" { target *-*-darwin9* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.06.08 -DCHECK=1068\" { target *-*-darwin10* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.07.05 -DCHECK=1075\" { target *-*-darwin11* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.08.05 -DCHECK=1085\" { target *-*-darwin12* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.09.05 -DCHECK=1095\" { target *-*-darwin13* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.010.03 -DCHECK=101003\" { target *-*-darwin14* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.011.06 -DCHECK=101106\" { target *-*-darwin15* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.012.06 -DCHECK=101206\" { target *-*-darwin16* } } */\n+/* { dg-additional-options \"-mmacosx-version-min=010.013.06 -DCHECK=101306\" { target *-*-darwin17* } } */\n+/* This next test covers 10.18 and (currently unreleased) 10.19 for now. */  \n+/* { dg-additional-options \"-mmacosx-version-min=010.014.05 -DCHECK=101405\" { target *-*-darwin1[89]* } } */\n+\n+int\n+main ()\n+{\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ != CHECK\n+  fail me;\n+#endif\n+  return 0;\n+}"}]}