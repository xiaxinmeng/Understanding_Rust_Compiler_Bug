{"sha": "da20811c09fa4146938034c32311a290c59c394d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEyMDgxMWMwOWZhNDE0NjkzODAzNGMzMjMxMWEyOTBjNTljMzk0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-19T22:37:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-08-19T22:37:19Z"}, "message": "merge\n\nFrom-SVN: r14852", "tree": {"sha": "c8c543d8e3d26335e4c36b96311e6dad36aef6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c543d8e3d26335e4c36b96311e6dad36aef6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da20811c09fa4146938034c32311a290c59c394d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da20811c09fa4146938034c32311a290c59c394d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da20811c09fa4146938034c32311a290c59c394d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da20811c09fa4146938034c32311a290c59c394d/comments", "author": null, "committer": null, "parents": [{"sha": "62d65906d6dfa51febd5ff9ec86e50ddc21d2514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d65906d6dfa51febd5ff9ec86e50ddc21d2514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d65906d6dfa51febd5ff9ec86e50ddc21d2514"}], "stats": {"total": 206, "additions": 173, "deletions": 33}, "files": [{"sha": "e54eb9d8888426aaa5675d29ea405fcda83d72f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -1,6 +1,80 @@\n+Thu Aug 14 10:05:13 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* rtti.c (permanent_obstack): Fix decl to not be a pointer.\n+\n+\t* cp-tree.h (report_type_mismatch): Add prototype.\n+\t* call.c (build_overload_call_real): Remove erroneous fourth\n+\targument to report_type_mismatch.\n+\t(build_user_type_conversion_1): Remove erroneous second arg to\n+\ttourney.\n+\t(build_new_function_call): Likewise.\n+\t(build_object_call): Likewise.\n+\t(build_new_op): Likewise.\n+\t(build_new_method_call): Likewise.\n+\n+Wed Aug 13 19:19:25 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* error.c (dump_decl): Don't bother processing a function with no\n+\tDECL_LANG_SPECIFIC.\n+\n+\t* method.c (emit_thunk): Call init_function_start in the macro case.\n+\n+Wed Aug 13 10:46:19 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* decl2.c (DEFAULT_VTABLE_THUNKS): Define to be 0 if not\n+\tdefined and used to set flag_vtable_thunks.\n+\n+Tue Aug 12 20:13:57 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y: Don't clear the inlines from their obstack until they've \n+\tall been processed.\n+\n+\t* decl.c (duplicate_decls): Don't complain about exception\n+ \tspecification mismatch if flag_exceptions is off.\n+\n+Mon Aug 11 15:01:56  1997  Marc Lehmann <pcg@goof.com>\n+\n+\t* Make-lang.in (c++.distclean): Remove g++.c on make distclean.\n+\n+Sun Aug 10 12:06:09 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* cp-tree.h: Replace STDIO_PROTO with PROTO in include files.\n+\t* cvt.c, error.c, except.c, expr.c, friend.c, init.c, rtti.c:\n+\tInclude <stdio.h> before include files that formerly used STDIO_PROTO. \n+\n+\t* decl.c, g++spec.c, lex.c, method.c, repo.c:\n+\tInclude\t\"config.h\" first, as per autoconf manual.\n+\n+Fri Aug  8 11:47:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Tweak wording.\n+\t* lex.c (do_pending_defargs): Don't die if we see a default arg\n+\tthat isn't a DEFAULT_ARG.\n+\t* error.c (dump_expr): Handle DEFAULT_ARG.\n+\n+\t* decl2.c (lang_decode_option): Handle -fhandle-exceptions.\n+\t* lang-options.h: Add -fhandle-exceptions.\n+\n+\t* class.c (build_vtable): vtables are artificial.\n+\t(prepare_fresh_vtable): Likewise.\n+\n+Wed Aug  6 11:02:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cvt.c (ocp_convert): After converting to the target type, set\n+ \tLOOKUP_NO_CONVERSION.\n+\n+\t* call.c (joust): Warn about potentially confusing promotion rules\n+\twith -Wsign-promo.\n+\t* cp-tree.h, lang-options.h, decl2.c: Support -Wsign-promo.\n+\n+Tue Aug  5 15:15:07 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* exception.cc: Declare __terminate_func with noreturn attribute.\n+\n Fri Aug  1 03:18:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* parse.y: Break out eat_saved_input, handle errors.\n+\t(function_try_block): Use compstmt instead of compstmt_or_error.\n \n Thu Jul 31 17:14:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -573,6 +647,8 @@ Mon Apr 21 15:42:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \tfunction is not changed.\n \n \t* call.c (build_over_call): Move setting of conv into the loop.\n+\tNote: this change, along with the related changes of the 18th thru\n+\tthe 20th of April, fix an infinite loop problem in conversions.\n \n Sun Apr 20 16:24:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n "}, {"sha": "34d3016c8d985f0a5f1bda9fd5755262718eca8e", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -247,6 +247,7 @@ c++.clean:\n c++.distclean:\n \t-rm -f cp/config.status cp/Makefile\n \t-rm -f cp/parse.output\n+\t-rm -f g++.c\n c++.extraclean:\n c++.maintainer-clean:\n \t-rm -f cp/parse.c cp/parse.h"}, {"sha": "ba313aaea48c09303aa450efb0dc1c5bf686b97e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -2885,8 +2885,7 @@ build_overload_call_real (fnname, parms, flags, final_cp, require_complete)\n     return NULL_TREE;\n   \n   if (flags & LOOKUP_COMPLAIN)\n-    report_type_mismatch (cp, parms, \"function\",\n-\t\t\t  decl_as_string (cp->function, 1));\n+    report_type_mismatch (cp, parms, \"function\");\n \n   return error_mark_node;\n }\n@@ -4287,7 +4286,7 @@ build_user_type_conversion_1 (totype, expr, flags)\n     }\n \n   candidates = splice_viable (candidates);\n-  cand = tourney (candidates, totype);\n+  cand = tourney (candidates);\n \n   if (cand == 0)\n     {\n@@ -4400,7 +4399,7 @@ build_new_function_call (fn, args, obj)\n \t  return error_mark_node;\n \t}\n       candidates = splice_viable (candidates);\n-      cand = tourney (candidates, NULL_TREE);\n+      cand = tourney (candidates);\n \n       if (cand == 0)\n \t{\n@@ -4474,7 +4473,7 @@ build_object_call (obj, args)\n     }\n \n   candidates = splice_viable (candidates);\n-  cand = tourney (candidates, NULL_TREE);\n+  cand = tourney (candidates);\n \n   if (cand == 0)\n     {\n@@ -4749,7 +4748,7 @@ build_new_op (code, flags, arg1, arg2, arg3)\n       return error_mark_node;\n     }\n   candidates = splice_viable (candidates);\n-  cand = tourney (candidates, NULL_TREE);\n+  cand = tourney (candidates);\n \n   if (cand == 0)\n     {\n@@ -5386,7 +5385,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       return error_mark_node;\n     }\n   candidates = splice_viable (candidates);\n-  cand = tourney (candidates, NULL_TREE);\n+  cand = tourney (candidates);\n \n   if (cand == 0)\n     {\n@@ -5751,11 +5750,36 @@ joust (cand1, cand2)\n \n   for (i = 0; i < len; ++i)\n     {\n-      int comp = compare_ics (TREE_VEC_ELT (cand1->convs, i+off1),\n-\t\t\t      TREE_VEC_ELT (cand2->convs, i+off2));\n+      tree t1 = TREE_VEC_ELT (cand1->convs, i+off1);\n+      tree t2 = TREE_VEC_ELT (cand2->convs, i+off2);\n+      int comp = compare_ics (t1, t2);\n \n       if (comp != 0)\n \t{\n+\t  if (warn_sign_promo\n+\t      && ICS_RANK (t1) + ICS_RANK (t2) == STD_RANK + PROMO_RANK\n+\t      && TREE_CODE (t1) == STD_CONV\n+\t      && TREE_CODE (t2) == STD_CONV\n+\t      && TREE_CODE (TREE_TYPE (t1)) == INTEGER_TYPE\n+\t      && TREE_CODE (TREE_TYPE (t2)) == INTEGER_TYPE\n+\t      && (TYPE_PRECISION (TREE_TYPE (t1))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (t2)))\n+\t      && (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (t1, 0)))\n+\t\t  || (TREE_CODE (TREE_TYPE (TREE_OPERAND (t1, 0)))\n+\t\t      == ENUMERAL_TYPE)))\n+\t    {\n+\t      tree type = TREE_TYPE (TREE_OPERAND (t1, 0));\n+\t      tree type1, type2;\n+\t      if (comp > 0)\n+\t\ttype1 = TREE_TYPE (t1), type2 = TREE_TYPE (t2);\n+\t      else\n+\t\ttype1 = TREE_TYPE (t2), type2 = TREE_TYPE (t1);\n+\n+\t      cp_warning (\"`%T' promotes to `%T', not `%T'\",\n+\t\t\t  type, type1, type2);\n+\t      cp_warning (\"  in call to `%D'\", DECL_NAME (cand1->fn));\n+\t    }\n+\n \t  if (winner && comp != winner)\n \t    {\n \t      winner = 0;"}, {"sha": "0d33c80f88f2bc66758557664b6bb3039c4ae13f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -671,6 +671,7 @@ build_vtable (binfo, type)\n   TYPE_BINFO_VTABLE (type) = decl;\n   TYPE_BINFO_VIRTUALS (type) = virtuals;\n \n+  DECL_ARTIFICIAL (decl) = 1;\n   TREE_STATIC (decl) = 1;\n #ifndef WRITABLE_VTABLES\n   /* Make them READONLY by default. (mrs) */\n@@ -781,6 +782,7 @@ prepare_fresh_vtable (binfo, for_type)\n   /* Remember which class this vtable is really for.  */\n   DECL_CONTEXT (new_decl) = for_type;\n \n+  DECL_ARTIFICIAL (new_decl) = 1;\n   TREE_STATIC (new_decl) = 1;\n   BINFO_VTABLE (binfo) = pushdecl_top_level (new_decl);\n   DECL_VIRTUAL_P (new_decl) = 1;"}, {"sha": "b8edc52b0cb8d6d6e4e2fb5074166a9d1c2b7eef", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -248,6 +248,11 @@ extern int warn_pmf2ptr;\n \n extern int warn_ecpp;\n \n+/* Nonzero means warn where overload resolution chooses a promotion from\n+   unsigned to signed over a conversion to an unsigned of the same size.  */\n+\n+extern int warn_sign_promo;\n+\n /* Non-zero means warn when a function is declared extern and later inline.  */\n \n extern int warn_extern_inline;\n@@ -1463,7 +1468,7 @@ extern tree convert_and_check\t\t\tPROTO((tree, tree));\n extern void overflow_warning\t\t\tPROTO((tree));\n extern void unsigned_conversion_warning\t\tPROTO((tree, tree));\n /* Read the rest of the current #-directive line.  */\n-extern char *get_directive_line                 STDIO_PROTO((FILE *));\n+extern char *get_directive_line                 PROTO((FILE *));\n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.  */\n@@ -2265,7 +2270,7 @@ extern void yyerror\t\t\t\tPROTO((char *));\n /* in method.c */\n extern void init_method\t\t\t\tPROTO((void));\n extern void do_inline_function_hair\t\tPROTO((tree, tree));\n-/* skip report_type_mismatch */\n+extern void  report_type_mismatch\t\tPROTO((struct candidate *, tree, char *));\n extern char *build_overload_name\t\tPROTO((tree, int, int));\n extern tree build_static_name\t\t\tPROTO((tree, tree));\n extern tree build_decl_overload\t\t\tPROTO((tree, tree, int));"}, {"sha": "20e86e0096f4b6ee29aa117eea7b481b41e22858", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n    but what kind of conversions it does will depend on the language.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"cp-tree.h\"\n@@ -1100,7 +1101,10 @@ ocp_convert (type, expr, convtype, flags)\n \t  \n \t  if ((flags & LOOKUP_ONLYCONVERTING)\n \t      && ! (IS_AGGR_TYPE (dtype) && DERIVED_FROM_P (type, dtype)))\n-\t    ctor = build_user_type_conversion (type, ctor, flags);\n+\t    {\n+\t      ctor = build_user_type_conversion (type, ctor, flags);\n+\t      flags |= LOOKUP_NO_CONVERSION;\n+\t    }\n \t  if (ctor)\n \t    ctor = build_method_call (NULL_TREE, ctor_identifier,\n \t\t\t\t      build_tree_list (NULL_TREE, ctor),"}, {"sha": "63e42b805c289b521062e62ea38e2f2eed2c6dd3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -27,8 +27,8 @@ Boston, MA 02111-1307, USA.  */\n /* ??? not all decl nodes are given the most useful possible\n    line numbers.  For example, the CONST_DECLs for enum values.  */\n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n@@ -2576,7 +2576,7 @@ duplicate_decls (newdecl, olddecl)\n \t\t  {\n \t\t    cp_error (\"default argument given for parameter %d of `%#D'\",\n \t\t\t      i, newdecl);\n-\t\t    cp_error_at (\"conflicts with previous specification in `%#D'\",\n+\t\t    cp_error_at (\"after previous specification in `%#D'\",\n \t\t\t\t olddecl);\n \t\t  }\n \t      }\n@@ -2699,6 +2699,7 @@ duplicate_decls (newdecl, olddecl)\n \t\t\t\t\t\t\t TYPE_RAISES_EXCEPTIONS (oldtype));\n \n \t  if ((pedantic || ! DECL_IN_SYSTEM_HEADER (olddecl))\n+\t      && flag_exceptions\n \t      && ! compexcepttypes (TREE_TYPE (newdecl), TREE_TYPE (olddecl)))\n \t    {\n \t      cp_pedwarn (\"declaration of `%D' throws different exceptions\","}, {"sha": "5af605a83e14da6ae1dd0354619fdaff757de708", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -158,11 +158,10 @@ int warn_ctor_dtor_privacy = 1;\n /* True if we want to implement vtables using \"thunks\".\n    The default is off.  */\n \n-#if defined(NEW_OVER) && defined (__i386__)\n-int flag_vtable_thunks = 1;\n-#else\n-int flag_vtable_thunks;\n+#ifndef DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS 0\n #endif\n+int flag_vtable_thunks = DEFAULT_VTABLE_THUNKS;\n \n /* True if we want to deal with repository information.  */\n \n@@ -246,7 +245,12 @@ int warn_pmf2ptr = 1;\n \n /* Nonzero means warn about violation of some Effective C++ style rules.  */\n \n-int warn_ecpp = 0;\n+int warn_ecpp;\n+\n+/* Nonzero means warn where overload resolution chooses a promotion from\n+   unsigned to signed over a conversion to an unsigned of the same size.  */\n+\n+int warn_sign_promo;\n \n /* Nonzero means `$' can be in an identifier.\n    See cccp.c for reasons why this breaks some obscure ANSI C programs.  */\n@@ -409,6 +413,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"all-virtual\", &flag_all_virtual, 1},\n   {\"memoize-lookups\", &flag_memoize_lookups, 1},\n   {\"elide-constructors\", &flag_elide_constructors, 1},\n+  {\"handle-exceptions\", &flag_exceptions, 1},\n   {\"handle-signatures\", &flag_handle_signatures, 1},\n   {\"default-inline\", &flag_default_inline, 1},\n   {\"dollars-in-identifiers\", &dollars_in_ident, 1},\n@@ -470,13 +475,17 @@ lang_decode_option (p)\n       p += 2;\n       /* Try special -f options.  */\n \n+      if (!strcmp (p, \"handle-exceptions\")\n+\t  || !strcmp (p, \"no-handle-exceptions\"))\n+\twarning (\"-fhandle-exceptions has been renamed to -fexceptions (and is now on by default)\");\n+\n       if (!strcmp (p, \"save-memoized\"))\n \t{\n \t  flag_memoize_lookups = 1;\n \t  flag_save_memoized_contexts = 1;\n \t  found = 1;\n \t}\n-      if (!strcmp (p, \"no-save-memoized\"))\n+      else if (!strcmp (p, \"no-save-memoized\"))\n \t{\n \t  flag_memoize_lookups = 0;\n \t  flag_save_memoized_contexts = 0;\n@@ -585,6 +594,8 @@ lang_decode_option (p)\n \twarn_pmf2ptr = setting;\n       else if (!strcmp (p, \"effc++\"))\n \twarn_ecpp = setting;\n+      else if (!strcmp (p, \"sign-promo\"))\n+\twarn_sign_promo = setting;\n       else if (!strcmp (p, \"comment\"))\n \t;\t\t\t/* cpp handles this one.  */\n       else if (!strcmp (p, \"comments\"))\n@@ -613,6 +624,7 @@ lang_decode_option (p)\n \t    warn_uninitialized = (setting ? 2 : 0);\n \t  warn_template_debugging = setting;\n \t  warn_reorder = setting;\n+\t  warn_sign_promo = setting;\n \t}\n \n       else if (!strcmp (p, \"overloaded-virtual\"))"}, {"sha": "ea675f346ee420c83dd9329612a3c7fba00cfa70", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -20,6 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"obstack.h\"\n@@ -700,6 +701,8 @@ dump_decl (t, v)\n     case FUNCTION_DECL:\n       if (GLOBAL_IORD_P (DECL_ASSEMBLER_NAME (t)))\n \tdump_global_iord (DECL_ASSEMBLER_NAME (t));\n+      else if (! DECL_LANG_SPECIFIC (t))\n+\tOB_PUTS (\"{internal}\");\n       else\n \tdump_function_decl (t, v);\n       break;\n@@ -1388,6 +1391,10 @@ dump_expr (t, nop)\n       OB_PUTC (')');\n       break;\n \n+    case DEFAULT_ARG:\n+      OB_PUTS (\"{unparsed}\");\n+      break;\n+\n     case TREE_LIST:\n       if (TREE_VALUE (t) && TREE_CODE (TREE_VALUE (t)) == FUNCTION_DECL)\n \t{"}, {"sha": "a5d8235857175e7655b9bff16423147830208e21", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"cp-tree.h\"\n@@ -44,8 +45,6 @@ tree builtin_return_address_fndecl;\n static tree BuiltinReturnAddress;\n      \n \n-#include <stdio.h>\n-\n static void\n easy_expand_asm (str)\n      char *str;"}, {"sha": "839525faafe8b1c66398f4ceda7ca11216da16b2", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -33,7 +33,7 @@\n /* Define terminate, unexpected, set_terminate, set_unexpected as\n    well as the default terminate func and default unexpected func.  */\n \n-extern terminate_handler __terminate_func;\n+extern terminate_handler __terminate_func __attribute__((__noreturn__));\n \n void\n terminate ()"}, {"sha": "fdc7815516978584961a0c8803a4c56114fb69d1", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -21,6 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "26528862d0c9519f002b0a045cf38c04645cef94", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -19,6 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"cp-tree.h\""}, {"sha": "126e1c4d4678c77f57f511c30ef6c928881306c3", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -1,7 +1,8 @@\n+#include \"config.h\"\n+\n #include <sys/types.h>\n #include <stdio.h>\n \n-#include \"config.h\"\n #include \"gansidecl.h\"\n \n /* This bit is set if we saw a `-xfoo' language specification.  */"}, {"sha": "a1cff1a5e095c9360755b45e1fb5d69ccea2d8ee", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n /* High-level class interface.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"cp-tree.h\""}, {"sha": "73b37fb7d1d25042324b85c803e7db40c38fa3ae", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -50,6 +50,8 @@ Boston, MA 02111-1307, USA.  */\n   \"-fno-for-scope\",\n   \"-fgnu-keywords\",\n   \"-fno-gnu-keywords\",\n+  \"-fhandle-exceptions\",\n+  \"-fno-handle-exceptions\",\n   \"-fhandle-signatures\",\n   \"-fno-handle-signatures\",\n   \"-fhuge-objects\",\n@@ -104,3 +106,5 @@ Boston, MA 02111-1307, USA.  */\n   \"-Wno-pmf-conversions\",\n   \"-Weffc++\",\n   \"-Wno-effc++\",\n+  \"-Wsign-promo\",\n+  \"-Wno-sign-promo\","}, {"sha": "2c4b5234074fff93edc4b072d5511b3b64614d22", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -25,11 +25,11 @@ Boston, MA 02111-1307, USA.  */\n /* Cause the `yydebug' variable to be defined.  */\n #define YYDEBUG 1\n \n+#include \"config.h\"\n #include <sys/types.h>\n #include <stdio.h>\n #include <errno.h>\n #include <setjmp.h>\n-#include \"config.h\"\n #include \"input.h\"\n #include \"tree.h\"\n #include \"lex.h\"\n@@ -1865,10 +1865,9 @@ do_pending_defargs ()\n \tdefarg_parm = TREE_CHAIN (defarg_parm);\n \n       for (; defarg_parm; defarg_parm = TREE_CHAIN (defarg_parm))\n-\tif (TREE_PURPOSE (defarg_parm))\n+\tif (TREE_PURPOSE (defarg_parm)\n+\t    && TREE_CODE (TREE_PURPOSE (defarg_parm)) == DEFAULT_ARG)\n \t  {\n-\t    my_friendly_assert (TREE_CODE (TREE_PURPOSE (defarg_parm))\n-\t\t\t\t== DEFAULT_ARG, 2349);\n \t    feed_defarg (defarg_fn, defarg_parm);\n \n \t    /* Return to the parser, which will process this defarg"}, {"sha": "a0e9d9610ae119bbb90c1b583285a019d25977c0", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -26,8 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Handle method declarations.  */\n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"class.h\"\n@@ -1777,6 +1777,7 @@ emit_thunk (thunk_fndecl)\n     DECL_RESULT (thunk_fndecl)\n       = build_decl (RESULT_DECL, 0, integer_type_node);\n     fnname = XSTR (XEXP (DECL_RTL (thunk_fndecl), 0), 0);\n+    init_function_start (thunk_fndecl, input_filename, lineno);\n     assemble_start_function (thunk_fndecl, fnname);\n     ASM_OUTPUT_MI_THUNK (asm_out_file, thunk_fndecl, delta, function);\n     assemble_end_function (thunk_fndecl, fnname);"}, {"sha": "8514148604d7683c8b11968f675a4960bde295f5", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -2227,7 +2227,7 @@ structsp:\n \t\t{ \n \t\t  $$.t = $<ttype>6;\n \t\t  $$.new_type_flag = 1; \n-\t\t  if (current_scope () == current_function_decl)\n+\t\t  if (current_class_type == NULL_TREE)\n \t\t    clear_inline_text_obstack (); \n \t\t}\n \t| class_head  %prec EMPTY\n@@ -3719,7 +3719,7 @@ function_try_block:\n \t\t    store_parm_decls ();\n \t\t  expand_start_early_try_stmts ();\n \t\t}\n-\t  ctor_initializer_opt compstmt_or_error\n+\t  ctor_initializer_opt compstmt\n \t\t{ expand_start_all_catch (); }\n \t  handler_seq\n \t\t{"}, {"sha": "c9406f23820ab6b4929349a708ad09bcf5b93b0b", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -25,8 +25,8 @@ Boston, MA 02111-1307, USA.  */\n    The results of the automatic process should be easily reproducible with\n    explicit code.  */\n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"input.h\""}, {"sha": "4019eb14e16923945475f37108cf9a45042e4bde", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da20811c09fa4146938034c32311a290c59c394d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=da20811c09fa4146938034c32311a290c59c394d", "patch": "@@ -21,6 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n@@ -33,7 +34,7 @@ Boston, MA 02111-1307, USA.  */\n \n extern tree define_function ();\n extern tree build_t_desc_overload ();\n-extern struct obstack *permanent_obstack;\n+extern struct obstack permanent_obstack;\n \n tree type_info_type_node;\n tree tinfo_fn_id;"}]}