{"sha": "419b55d0f9076bfa47c93b5899a83e953cee2d96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5YjU1ZDBmOTA3NmJmYTQ3YzkzYjU4OTlhODNlOTUzY2VlMmQ5Ng==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-05T17:37:06Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-05T17:37:06Z"}, "message": "In gcc/objc/: 2011-06-05 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (receiver_is_class_object): Expanded comment.\n\t(objc_finish_message_expr): Likewise.\n\nIn gcc/testsuite/:\n2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR testsuite/49287\n\t* objc.dg/gnu-api-2-class.m: Updated testcase silencing compiler\n\twarning.\n\t* objc.dg/gnu-api-2-objc.m: Likewise.\n\t* obj-c++.dg/gnu-api-2-class.mm: Likewise\n\t* obj-c++.dg/gnu-api-2-objc.mm: Likewise.\n\nFrom-SVN: r174657", "tree": {"sha": "96cb0781b47ee50a4ea92a5034d09720f619838b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96cb0781b47ee50a4ea92a5034d09720f619838b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419b55d0f9076bfa47c93b5899a83e953cee2d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419b55d0f9076bfa47c93b5899a83e953cee2d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419b55d0f9076bfa47c93b5899a83e953cee2d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419b55d0f9076bfa47c93b5899a83e953cee2d96/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b74b7579245cc7724490f6038908858963ac3104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74b7579245cc7724490f6038908858963ac3104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74b7579245cc7724490f6038908858963ac3104"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "208decc7c86e826df554ca607d92b0585f1b5ab7", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -1,3 +1,8 @@\n+2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (receiver_is_class_object): Expanded comment.\n+\t(objc_finish_message_expr): Likewise.\n+\n 2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/48539"}, {"sha": "321d52aaf28f80457f26e4d086ca0f9db1db9b23", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -5270,7 +5270,42 @@ receiver_is_class_object (tree receiver, int self, int super)\n     return exp;\n \n   /* The receiver is a function call that returns an id.  Check if\n-     it is a call to objc_getClass, if so, pick up the class name.  */\n+     it is a call to objc_getClass, if so, pick up the class name.\n+\n+     This is required by the GNU runtime, which compiles\n+\n+       [NSObject alloc]\n+\n+     into\n+\n+       [objc_get_class (\"NSObject\") alloc];\n+\n+     and then, to check that the receiver responds to the +alloc\n+     method, needs to be able to determine that the objc_get_class()\n+     call returns the NSObject class and not just a generic Class\n+     pointer.\n+\n+     But, traditionally this is enabled for all runtimes, not just the\n+     GNU one, which means that the compiler is smarter than you'd\n+     expect when dealing with objc_getClass().  For example, with the\n+     Apple runtime, in the code\n+\n+       [objc_getClass (\"NSObject\")  alloc];\n+\n+     the compiler will recognize the objc_getClass() call as special\n+     (due to the code below) and so will know that +alloc is called on\n+     the 'NSObject' class, and can perform the corresponding checks.\n+\n+     Programmers can disable this behaviour by casting the results of\n+     objc_getClass() to 'Class' (this may seem weird because\n+     objc_getClass() is already declared to return 'Class', but the\n+     compiler treats it as a special function).  This may be useful if\n+     the class is never declared, and the compiler would complain\n+     about a missing @interface for it.  Then, you can do\n+\n+       [(Class)objc_getClass (\"MyClassNeverDeclared\")  alloc];\n+\n+     to silence the warnings.  */\n   if (TREE_CODE (receiver) == CALL_EXPR\n       && (exp = CALL_EXPR_FN (receiver))\n       && TREE_CODE (exp) == ADDR_EXPR\n@@ -5478,13 +5513,16 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t    {\n \t      /* If 'rtype' is NULL_TREE at this point it means that\n \t\t we have seen no @interface corresponding to that\n-\t\t class name, only a @class declaration.  So, we have a\n-\t\t class name (class_tree) but no actual details of the\n-\t\t class methods.  We won't be able to check that the\n-\t\t class responds to the method, and we will have to\n-\t\t guess the method prototype.  Emit a warning, then\n-\t\t keep going (this will use any method with a matching\n-\t\t name, as if the receiver was of type 'Class').  */\n+\t\t class name, only a @class declaration (alternatively,\n+\t\t this was a call such as [objc_getClass(\"SomeClass\")\n+\t\t alloc], where we've never seen the @interface of\n+\t\t SomeClass).  So, we have a class name (class_tree)\n+\t\t but no actual details of the class methods.  We won't\n+\t\t be able to check that the class responds to the\n+\t\t method, and we will have to guess the method\n+\t\t prototype.  Emit a warning, then keep going (this\n+\t\t will use any method with a matching name, as if the\n+\t\t receiver was of type 'Class').  */\n \t      warning (0, \"@interface of class %qE not found\", class_tree);\n \t    }\n \t}"}, {"sha": "7fdb2ae2a1d9177c3e796ed5cab0e9a1d74e17cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -1,3 +1,12 @@\n+2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR testsuite/49287\n+\t* objc.dg/gnu-api-2-class.m: Updated testcase silencing compiler\n+\twarning.\n+\t* objc.dg/gnu-api-2-objc.m: Likewise.\n+\t* obj-c++.dg/gnu-api-2-class.mm: Likewise\n+\t* obj-c++.dg/gnu-api-2-objc.mm: Likewise.\n+\t\n 2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/gnu-api-2-objc.m: Fixed testcase.  Use log2 of the"}, {"sha": "6dc9dd3733c12bd811ab2a546c96b7b8db76db7e", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-class.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -109,7 +109,7 @@ int main ()\n     objc_registerClassPair (new_class);    \n \n     {\n-      MySubClass *o = [[objc_getClass (\"MySubSubClass\") alloc] init];\n+      MySubClass *o = [[(Class)objc_getClass (\"MySubSubClass\") alloc] init];\n       Ivar variable2 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable2_ivar\");\n       Ivar variable3 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable3_ivar\");\n       Ivar variable4 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable4_ivar\");\n@@ -178,7 +178,7 @@ int main ()\n     /* Now, MySubClass2 is basically the same as MySubClass!  We'll\n        use the variable and setVariable: methods on it.  */\n     {\n-      MySubClass *o = (MySubClass *)[[objc_getClass (\"MySubClass2\") alloc] init];\n+      MySubClass *o = (MySubClass *)[[(Class)objc_getClass (\"MySubClass2\") alloc] init];\n \n       [o setVariable: o];\n "}, {"sha": "e5b1a69ed042e36ae69d210a0b142d6f4b1e5af2", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-objc.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc.mm?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -93,7 +93,7 @@ int main ()\n       abort ();\n \n     {\n-      MySubClass *o = [[objc_getClass (\"MyNewSubClass\") alloc] init];\n+      MySubClass *o = [[(Class)objc_getClass (\"MyNewSubClass\") alloc] init];\n       \n       if (object_getClass (o) != objc_getClass (\"MyNewSubClass\"))\n \tabort ();"}, {"sha": "f396a09fad8b6775fc84c05d87b9f89f78ca3289", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -109,7 +109,7 @@ int main(int argc, void **args)\n     objc_registerClassPair (new_class);    \n \n     {\n-      MySubClass *o = [[objc_getClass (\"MySubSubClass\") alloc] init];\n+      MySubClass *o = [[(Class)objc_getClass (\"MySubSubClass\") alloc] init];\n       Ivar variable2 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable2_ivar\");\n       Ivar variable3 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable3_ivar\");\n       Ivar variable4 = class_getInstanceVariable (objc_getClass (\"MySubSubClass\"), \"variable4_ivar\");\n@@ -178,7 +178,7 @@ int main(int argc, void **args)\n     /* Now, MySubClass2 is basically the same as MySubClass!  We'll\n        use the variable and setVariable: methods on it.  */\n     {\n-      MySubClass *o = (MySubClass *)[[objc_getClass (\"MySubClass2\") alloc] init];\n+      MySubClass *o = (MySubClass *)[[(Class)objc_getClass (\"MySubClass2\") alloc] init];\n \n       [o setVariable: o];\n "}, {"sha": "d65c120455e4aa9b43397743e9eb388f26d1d560", "filename": "gcc/testsuite/objc.dg/gnu-api-2-objc.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419b55d0f9076bfa47c93b5899a83e953cee2d96/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m?ref=419b55d0f9076bfa47c93b5899a83e953cee2d96", "patch": "@@ -93,7 +93,7 @@ int main(int argc, void **args)\n       abort ();\n \n     {\n-      MySubClass *o = [[objc_getClass (\"MyNewSubClass\") alloc] init];\n+      MySubClass *o = [[(Class)objc_getClass (\"MyNewSubClass\") alloc] init];\n       \n       if (object_getClass (o) != objc_getClass (\"MyNewSubClass\"))\n \tabort ();"}]}