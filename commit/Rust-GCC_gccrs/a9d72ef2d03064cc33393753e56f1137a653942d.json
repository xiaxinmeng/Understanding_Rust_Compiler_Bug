{"sha": "a9d72ef2d03064cc33393753e56f1137a653942d", "node_id": "C_kwDOANBUbNoAKGE5ZDcyZWYyZDAzMDY0Y2MzMzM5Mzc1M2U1NmYxMTM3YTY1Mzk0MmQ", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-10T15:19:24Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:22Z"}, "message": "gccrs: Add variadic argument type checking\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty-call.cc\n\t(TypeCheckCallExpr::visit): Add variadic argument type checking.\n\t(TypeCheckCallExpr::visit): Fix comment spelling (\"varadic\").\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/overflow1.rs: Fix test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "d0dcd492803e8a8973cc73e8e040ec5289a49fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0dcd492803e8a8973cc73e8e040ec5289a49fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d72ef2d03064cc33393753e56f1137a653942d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d72ef2d03064cc33393753e56f1137a653942d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d72ef2d03064cc33393753e56f1137a653942d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d72ef2d03064cc33393753e56f1137a653942d/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5eb9f2b01e9e91720fea55d5c29b62b6ba498b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5eb9f2b01e9e91720fea55d5c29b62b6ba498b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5eb9f2b01e9e91720fea55d5c29b62b6ba498b"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "f0846ae25ec073ae90c64e5eb6632bc6674ef50f", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d72ef2d03064cc33393753e56f1137a653942d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d72ef2d03064cc33393753e56f1137a653942d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=a9d72ef2d03064cc33393753e56f1137a653942d", "patch": "@@ -122,7 +122,7 @@ TypeCheckCallExpr::visit (FnType &type)\n \t  return;\n \t}\n \n-      // it might be a varadic function\n+      // it might be a variadic function\n       if (i < type.num_params ())\n \t{\n \t  auto fnparam = type.param_at (i);\n@@ -143,6 +143,60 @@ TypeCheckCallExpr::visit (FnType &type)\n \t      return;\n \t    }\n \t}\n+      else\n+\t{\n+\t  switch (argument_expr_tyty->get_kind ())\n+\t    {\n+\t    case TyTy::TypeKind::ERROR:\n+\t      return;\n+\t      case TyTy::TypeKind::INT: {\n+\t\tauto &int_ty\n+\t\t  = static_cast<TyTy::IntType &> (*argument_expr_tyty);\n+\t\tif ((int_ty.get_int_kind () == TyTy::IntType::IntKind::I8)\n+\t\t    || (int_ty.get_int_kind () == TyTy::IntType::IntKind::I16))\n+\t\t  {\n+\t\t    rust_error_at (arg_locus,\n+\t\t\t\t   \"expected %<c_int%> variadic argument\");\n+\t\t    return;\n+\t\t  }\n+\t\tbreak;\n+\t      }\n+\t      case TyTy::TypeKind::UINT: {\n+\t\tauto &uint_ty\n+\t\t  = static_cast<TyTy::UintType &> (*argument_expr_tyty);\n+\t\tif ((uint_ty.get_uint_kind () == TyTy::UintType::UintKind::U8)\n+\t\t    || (uint_ty.get_uint_kind ()\n+\t\t\t== TyTy::UintType::UintKind::U16))\n+\t\t  {\n+\t\t    rust_error_at (arg_locus,\n+\t\t\t\t   \"expected %<c_uint%> variadic argument\");\n+\t\t    return;\n+\t\t  }\n+\t\tbreak;\n+\t      }\n+\t      case TyTy::TypeKind::FLOAT: {\n+\t\tif (static_cast<TyTy::FloatType &> (*argument_expr_tyty)\n+\t\t      .get_float_kind ()\n+\t\t    == TyTy::FloatType::FloatKind::F32)\n+\t\t  {\n+\t\t    rust_error_at (arg_locus,\n+\t\t\t\t   \"expected %<c_double%> variadic argument\");\n+\t\t    return;\n+\t\t  }\n+\t\tbreak;\n+\t      }\n+\t    case TyTy::TypeKind::BOOL:\n+\t      rust_error_at (arg_locus, \"expected %<c_int%> variadic argument\");\n+\t      return;\n+\t    case TyTy::TypeKind::FNDEF:\n+\t      rust_error_at (arg_locus,\n+\t\t\t     \"unexpected function definition type as variadic \"\n+\t\t\t     \"argument - cast to function pointer\");\n+\t      return;\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n \n       i++;\n     }"}, {"sha": "c4ccab1a1337acf6df3433bbf1ea2d9810b73d3e", "filename": "gcc/testsuite/rust/execute/torture/overflow1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d72ef2d03064cc33393753e56f1137a653942d/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foverflow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d72ef2d03064cc33393753e56f1137a653942d/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foverflow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foverflow1.rs?ref=a9d72ef2d03064cc33393753e56f1137a653942d", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     // { dg-final { scan-tree-dump ADD_OVERFLOW original } }\n     let c = a + b;\n \n-    unsafe { printf(\"%d\\n\\0\" as *const str as *const i8, c) }\n+    unsafe { printf(\"%d\\n\\0\" as *const str as *const i8, c as i32) }\n }"}]}