{"sha": "16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmNjgxMmY4NmI5MDk1YTdiMzhkMWE2Y2JlNjY1YmM4MDFjYTUwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-07-18T11:13:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-07-18T11:13:37Z"}, "message": "re PR target/11087 (gcc miscompiles raid1.c from linux kernel)\n\n\tPR target/11087\n\t* loop.c (basic_induction_var): Check if convert_modes emitted any\n\tinstructions. Remove them and return 0 if so.\n\n\t* gcc.c-torture/execute/20030717-1.c: New test.\n\nFrom-SVN: r69552", "tree": {"sha": "b37326901374d1542b48895f7a8d13061117176b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37326901374d1542b48895f7a8d13061117176b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d5f9af2bf821d062b6e089e15ccbae915aa1efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5f9af2bf821d062b6e089e15ccbae915aa1efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5f9af2bf821d062b6e089e15ccbae915aa1efe"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "1162471468f13aee0e092297fc2c850d141a0fde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "patch": "@@ -1,3 +1,9 @@\n+2003-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/11087\n+\t* loop.c (basic_induction_var): Check if convert_modes emitted any\n+\tinstructions. Remove them and return 0 if so.\n+\n 2003-07-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/11083"}, {"sha": "683d83aef043794b0268f21cb9a7175f84b87c60", "filename": "gcc/loop.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "patch": "@@ -6197,7 +6197,7 @@ basic_induction_var (const struct loop *loop, rtx x, enum machine_mode mode,\n {\n   enum rtx_code code;\n   rtx *argp, arg;\n-  rtx insn, set = 0;\n+  rtx insn, set = 0, last, inc;\n \n   code = GET_CODE (x);\n   *location = NULL;\n@@ -6225,7 +6225,26 @@ basic_induction_var (const struct loop *loop, rtx x, enum machine_mode mode,\n       if (loop_invariant_p (loop, arg) != 1)\n \treturn 0;\n \n-      *inc_val = convert_modes (GET_MODE (dest_reg), GET_MODE (x), arg, 0);\n+      /* convert_modes can emit new instructions, e.g. when arg is a loop\n+\t invariant MEM and dest_reg has a different mode.\n+\t These instructions would be emitted after the end of the function\n+\t and then *inc_val would be an unitialized pseudo.\n+\t Detect this and bail in this case.\n+\t Other alternatives to solve this can be introducing a convert_modes\n+\t variant which is allowed to fail but not allowed to emit new\n+\t instructions, emit these instructions before loop start and let\n+\t it be garbage collected if *inc_val is never used or saving the\n+\t *inc_val initialization sequence generated here and when *inc_val\n+\t is going to be actually used, emit it at some suitable place.  */\n+      last = get_last_insn ();\n+      inc = convert_modes (GET_MODE (dest_reg), GET_MODE (x), arg, 0);\n+      if (get_last_insn () != last)\n+\t{\n+\t  delete_insns_since (last);\n+\t  return 0;\n+\t}\n+\n+      *inc_val = inc;\n       *mult_val = const1_rtx;\n       *location = argp;\n       return 1;\n@@ -6306,7 +6325,15 @@ basic_induction_var (const struct loop *loop, rtx x, enum machine_mode mode,\n \t  && GET_MODE_CLASS (mode) != MODE_CC)\n \t{\n \t  /* Possible bug here?  Perhaps we don't know the mode of X.  */\n-\t  *inc_val = convert_modes (GET_MODE (dest_reg), mode, x, 0);\n+\t  last = get_last_insn ();\n+\t  inc = convert_modes (GET_MODE (dest_reg), mode, x, 0);\n+\t  if (get_last_insn () != last)\n+\t    {\n+\t      delete_insns_since (last);\n+\t      return 0;\n+\t    }\n+\n+\t  *inc_val = inc;\n \t  *mult_val = const0_rtx;\n \t  return 1;\n \t}"}, {"sha": "70c6936fb98b4d11c0152885dca555df284bec44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "patch": "@@ -1,3 +1,8 @@\n+2003-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/11087\n+\t* gcc.c-torture/execute/20030717-1.c: New test.\n+\n 2003-07-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* g++.dg/opt/cfg1.C: New test."}, {"sha": "7e43e44be041b315d1de020b6abb970290101bcd", "filename": "gcc/testsuite/gcc.c-torture/execute/20030717-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030717-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f6812f86b9095a7b38d1a6cbe665bc801ca50a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030717-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030717-1.c?ref=16f6812f86b9095a7b38d1a6cbe665bc801ca50a", "patch": "@@ -0,0 +1,69 @@\n+/* PR target/11087\n+   This testcase was miscompiled on ppc64, because basic_induction_var called\n+   convert_modes, yet did not expect it to emit any new instructions.\n+   Those were emitted at the end of the function and destroyed during life\n+   analysis, while the program used uninitialized pseudos created by\n+   convert_modes.  */\n+\n+struct A\n+{\n+  unsigned short a1;\n+  unsigned long a2;\n+};\n+\n+struct B\n+{\n+  int b1, b2, b3, b4, b5;\n+};\n+\n+struct C\n+{\n+  struct B c1[1];\n+  int c2, c3;\n+};\n+\n+static\n+int foo (int x)\n+{\n+  return  x < 0 ? -x : x;\n+}\n+\n+int bar (struct C *x, struct A *y)\n+{\n+  int a = x->c3;\n+  const int b = y->a1 >> 9;\n+  const unsigned long c = y->a2;\n+  int d = a;\n+  unsigned long e, f;\n+\n+  f = foo (c - x->c1[d].b4);\n+  do\n+    {\n+      if (d <= 0)\n+\td = x->c2;\n+      d--;\n+\n+      e = foo (c-x->c1[d].b4);\n+      if (e < f)\n+\ta = d;\n+    }\n+  while (d != x->c3);\n+  x->c1[a].b4 = c + b;\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  struct A a;\n+  struct C b;\n+  int c;\n+\n+  a.a1 = 512;\n+  a.a2 = 4242;\n+  __builtin_memset (&b, 0, sizeof (b));\n+  b.c1[0].b3 = 424242;\n+  b.c2 = 1;\n+  c = bar (&b, &a);\n+  return 0;\n+}"}]}