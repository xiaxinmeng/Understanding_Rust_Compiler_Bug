{"sha": "124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0ZjFiZTZhOTdlYjAyNjNkZjU2Y2IzNGM4Y2U5YThkZTQwNWYxZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-09-06T14:46:55Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-09-06T14:46:55Z"}, "message": "ipa-inline.h (struct inline_summary): Move versionable flag...\n\n2011-09-06  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-inline.h (struct inline_summary): Move versionable flag...\n\t* cgraph.h (struct cgraph_local_info): ...here\n\t* ipa-cp.c (determine_versionability): Use the new versionable flag.\n\t(determine_versionability): Likewise.\n\t(ipcp_versionable_function_p): Likewise.\n\t(ipcp_generate_summary): Likewise.\n\t* ipa-inline-analysis.c (dump_inline_summary): Do not dump the\n\tversionable flag.\n\t(compute_inline_parameters): Do not clear the versionable flag.\n\t(inline_read_section): Do not stream the versionable flag.\n\t(inline_write_summary): Likewise.\n\t* lto-cgraph.c (lto_output_node): Stream the versionable flag.\n\t(input_overwrite_node): Likewise.\n\nFrom-SVN: r178598", "tree": {"sha": "60c8adebdd85ef74f46a1d6e5721b6e999184d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c8adebdd85ef74f46a1d6e5721b6e999184d27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a60c3521a55e8496c1100b8ab4d1d06ce1e829a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a60c3521a55e8496c1100b8ab4d1d06ce1e829a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a60c3521a55e8496c1100b8ab4d1d06ce1e829a"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "65d81138d4b61923311e7580fccdf8c226ac23e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -1,3 +1,19 @@\n+2011-09-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-inline.h (struct inline_summary): Move versionable flag...\n+\t* cgraph.h (struct cgraph_local_info): ...here\n+\t* ipa-cp.c (determine_versionability): Use the new versionable flag.\n+\t(determine_versionability): Likewise.\n+\t(ipcp_versionable_function_p): Likewise.\n+\t(ipcp_generate_summary): Likewise.\n+\t* ipa-inline-analysis.c (dump_inline_summary): Do not dump the\n+\tversionable flag.\n+\t(compute_inline_parameters): Do not clear the versionable flag.\n+\t(inline_read_section): Do not stream the versionable flag.\n+\t(inline_write_summary): Likewise.\n+\t* lto-cgraph.c (lto_output_node): Stream the versionable flag.\n+\t(input_overwrite_node): Likewise.\n+\n 2011-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48149"}, {"sha": "294fb772a5b35de6d5fd5ce3d6d98c68bbfaaad8", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -84,10 +84,13 @@ struct GTY(()) cgraph_local_info {\n \n   /* Set when function is visible by other units.  */\n   unsigned externally_visible : 1;\n-  \n+\n   /* Set once it has been finalized so we consider it to be output.  */\n   unsigned finalized : 1;\n \n+  /* False when there is something makes versioning impossible.  */\n+  unsigned versionable : 1;\n+\n   /* False when function calling convention and signature can not be changed.\n      This is the case when __builtin_apply_args is used.  */\n   unsigned can_change_signature : 1;"}, {"sha": "f6e083e66542c536da2d8e001c65279d82d26c66", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -367,7 +367,7 @@ determine_versionability (struct cgraph_node *node)\n      present.  */\n   if (node->alias || node->thunk.thunk_p)\n     reason = \"alias or thunk\";\n-  else if (!inline_summary (node)->versionable)\n+  else if (!node->local.versionable)\n     reason = \"not a tree_versionable_function\";\n   else if (cgraph_function_body_availability (node) <= AVAIL_OVERWRITABLE)\n     reason = \"insufficient body availability\";\n@@ -376,7 +376,7 @@ determine_versionability (struct cgraph_node *node)\n     fprintf (dump_file, \"Function %s/%i is not versionable, reason: %s.\\n\",\n \t     cgraph_node_name (node), node->uid, reason);\n \n-  inline_summary (node)->versionable = (reason == NULL);\n+  node->local.versionable = (reason == NULL);\n }\n \n /* Return true if it is at all technically possible to create clones of a\n@@ -385,7 +385,7 @@ determine_versionability (struct cgraph_node *node)\n static bool\n ipcp_versionable_function_p (struct cgraph_node *node)\n {\n-  return inline_summary (node)->versionable;\n+  return node->local.versionable;\n }\n \n /* Structure holding accumulated information about callers of a node.  */\n@@ -2449,14 +2449,11 @@ ipcp_generate_summary (void)\n     fprintf (dump_file, \"\\nIPA constant propagation start:\\n\");\n   ipa_register_cgraph_hooks ();\n \n-  /* FIXME: We could propagate through thunks happily and we could be\n-     even able to clone them, if needed.  Do that later.  */\n   FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)\n       {\n \t/* Unreachable nodes should have been eliminated before ipcp.  */\n \tgcc_assert (node->needed || node->reachable);\n-\n-\tinline_summary (node)->versionable = tree_versionable_function_p (node->decl);\n+\tnode->local.versionable = tree_versionable_function_p (node->decl);\n \tipa_analyze_node (node);\n       }\n }"}, {"sha": "f92541651837e01689d80a2b5d7c639157ceeb27", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -986,8 +986,6 @@ dump_inline_summary (FILE * f, struct cgraph_node *node)\n \tfprintf (f, \" always_inline\");\n       if (s->inlinable)\n \tfprintf (f, \" inlinable\");\n-      if (s->versionable)\n-\tfprintf (f, \" versionable\");\n       fprintf (f, \"\\n  self time:       %i\\n\",\n \t       s->self_time);\n       fprintf (f, \"  global time:     %i\\n\", s->time);\n@@ -1644,7 +1642,7 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n       struct inline_edge_summary *es = inline_edge_summary (node->callees);\n       struct predicate t = true_predicate ();\n \n-      info->inlinable = info->versionable = 0;\n+      info->inlinable = 0;\n       node->callees->call_stmt_cannot_inline_p = true;\n       node->local.can_change_signature = false;\n       es->call_stmt_time = 1;\n@@ -2410,7 +2408,6 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n \n       bp = streamer_read_bitpack (&ib);\n       info->inlinable = bp_unpack_value (&bp, 1);\n-      info->versionable = bp_unpack_value (&bp, 1);\n \n       count2 = streamer_read_uhwi (&ib);\n       gcc_assert (!info->conds);\n@@ -2541,15 +2538,13 @@ inline_write_summary (cgraph_node_set set,\n \t  int i;\n \t  size_time_entry *e;\n \t  struct condition *c;\n-\t  \n \n \t  streamer_write_uhwi (ob, lto_cgraph_encoder_encode (encoder, node));\n \t  streamer_write_hwi (ob, info->estimated_self_stack_size);\n \t  streamer_write_hwi (ob, info->self_size);\n \t  streamer_write_hwi (ob, info->self_time);\n \t  bp = bitpack_create (ob->main_stream);\n \t  bp_pack_value (&bp, info->inlinable, 1);\n-\t  bp_pack_value (&bp, info->versionable, 1);\n \t  streamer_write_bitpack (&bp);\n \t  streamer_write_uhwi (ob, VEC_length (condition, info->conds));\n \t  for (i = 0; VEC_iterate (condition, info->conds, i, c); i++)"}, {"sha": "bba13b6af46a5e3c19d59d5c31a87c54e888e608", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -85,9 +85,6 @@ struct GTY(()) inline_summary\n \n   /* False when there something makes inlining impossible (such as va_arg).  */\n   unsigned inlinable : 1;\n-  /* False when there something makes versioning impossible.\n-     Currently computed and used only by ipa-cp.  */\n-  unsigned versionable : 1;\n \n   /* Information about function that will result after applying all the\n      inline decisions present in the callgraph.  Generally kept up to"}, {"sha": "edc3ad7759e2be056fea883385b01c8cabd49e77", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f1be6a97eb0263df56cb34c8ce9a8de405f1e/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=124f1be6a97eb0263df56cb34c8ce9a8de405f1e", "patch": "@@ -495,6 +495,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (&bp, node->local.local, 1);\n   bp_pack_value (&bp, node->local.externally_visible, 1);\n   bp_pack_value (&bp, node->local.finalized, 1);\n+  bp_pack_value (&bp, node->local.versionable, 1);\n   bp_pack_value (&bp, node->local.can_change_signature, 1);\n   bp_pack_value (&bp, node->local.redefined_extern_inline, 1);\n   bp_pack_value (&bp, node->needed, 1);\n@@ -896,6 +897,7 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->local.local = bp_unpack_value (bp, 1);\n   node->local.externally_visible = bp_unpack_value (bp, 1);\n   node->local.finalized = bp_unpack_value (bp, 1);\n+  node->local.versionable = bp_unpack_value (bp, 1);\n   node->local.can_change_signature = bp_unpack_value (bp, 1);\n   node->local.redefined_extern_inline = bp_unpack_value (bp, 1);\n   node->needed = bp_unpack_value (bp, 1);"}]}