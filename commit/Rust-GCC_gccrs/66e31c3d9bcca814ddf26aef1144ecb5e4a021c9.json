{"sha": "66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlMzFjM2Q5YmNjYTgxNGRkZjI2YWVmMTE0NGVjYjVlNGEwMjFjOQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-23T10:28:44Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T10:28:44Z"}, "message": "[PATCH 11/17][ARM] Add builtins for VFP FP16 intrinsics.\n\ngcc/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm-builtins.c (hf_UP): New.\n\t(si_UP): New.\n\t(vfp_builtin_data): New.  Update comment.\n\t(enum arm_builtins): Include \"arm_vfp_builtins.def\".\n\t(ARM_BUILTIN_VFP_PATTERN_START): New.\n\t(arm_init_vfp_builtins): New.\n\t(arm_init_builtins): Add arm_init_vfp_builtins.\n\t(arm_expand_vfp_builtin): New.\n\t(arm_expand_builtins): Update for arm_expand_vfp_builtin.  Fix\n\tlong line.\n\t* config/arm/arm_vfp_builtins.def: New file.\n\t* config/arm/t-arm (arm.o): Add arm_vfp_builtins.def.\n\t(arm-builtins.o): Likewise.\n\nFrom-SVN: r240421", "tree": {"sha": "9d1e61e4dda0cc1cd8e2acd50f2267f69041ff19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1e61e4dda0cc1cd8e2acd50f2267f69041ff19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/comments", "author": null, "committer": null, "parents": [{"sha": "1e401340719c3bb64382f81cf95607898139487f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e401340719c3bb64382f81cf95607898139487f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e401340719c3bb64382f81cf95607898139487f"}], "stats": {"total": 146, "additions": 137, "deletions": 9}, "files": [{"sha": "9e76a72575e18816c380d136af97bcf750852611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "patch": "@@ -1,3 +1,19 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm-builtins.c (hf_UP): New.\n+\t(si_UP): New.\n+\t(vfp_builtin_data): New.  Update comment.\n+\t(enum arm_builtins): Include \"arm_vfp_builtins.def\".\n+\t(ARM_BUILTIN_VFP_PATTERN_START): New.\n+\t(arm_init_vfp_builtins): New.\n+\t(arm_init_builtins): Add arm_init_vfp_builtins.\n+\t(arm_expand_vfp_builtin): New.\n+\t(arm_expand_builtins): Update for arm_expand_vfp_builtin.  Fix\n+\tlong line.\n+\t* config/arm/arm_vfp_builtins.def: New file.\n+\t* config/arm/t-arm (arm.o): Add arm_vfp_builtins.def.\n+\t(arm-builtins.o): Likewise.\n+\n 2016-09-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR ipa/77677"}, {"sha": "70bcc07405f1891bce5ab1ed86b299698347f561", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 67, "deletions": 8, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "patch": "@@ -190,6 +190,8 @@ arm_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define ti_UP\t TImode\n #define ei_UP\t EImode\n #define oi_UP\t OImode\n+#define hf_UP\t HFmode\n+#define si_UP\t SImode\n \n #define UP(X) X##_UP\n \n@@ -239,12 +241,22 @@ typedef struct {\n   VAR11 (T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n   VAR1 (T, N, L)\n \n-/* The NEON builtin data can be found in arm_neon_builtins.def.\n-   The mode entries in the following table correspond to the \"key\" type of the\n-   instruction variant, i.e. equivalent to that which would be specified after\n-   the assembler mnemonic, which usually refers to the last vector operand.\n-   The modes listed per instruction should be the same as those defined for\n-   that instruction's pattern in neon.md.  */\n+/* The NEON builtin data can be found in arm_neon_builtins.def and\n+   arm_vfp_builtins.def.  The entries in arm_neon_builtins.def require\n+   TARGET_NEON to be true.  The entries in arm_vfp_builtins.def require\n+   TARGET_VFP to be true.  The feature tests are checked when the builtins are\n+   expanded.\n+\n+   The mode entries in the following table correspond to\n+   the \"key\" type of the instruction variant, i.e. equivalent to that which\n+   would be specified after the assembler mnemonic, which usually refers to the\n+   last vector operand.  The modes listed per instruction should be the same as\n+   those defined for that instruction's pattern in neon.md.  */\n+\n+static neon_builtin_datum vfp_builtin_data[] =\n+{\n+#include \"arm_vfp_builtins.def\"\n+};\n \n static neon_builtin_datum neon_builtin_data[] =\n {\n@@ -534,6 +546,10 @@ enum arm_builtins\n #undef CRYPTO2\n #undef CRYPTO3\n \n+  ARM_BUILTIN_VFP_BASE,\n+\n+#include \"arm_vfp_builtins.def\"\n+\n   ARM_BUILTIN_NEON_BASE,\n   ARM_BUILTIN_NEON_LANE_CHECK = ARM_BUILTIN_NEON_BASE,\n \n@@ -542,6 +558,9 @@ enum arm_builtins\n   ARM_BUILTIN_MAX\n };\n \n+#define ARM_BUILTIN_VFP_PATTERN_START \\\n+  (ARM_BUILTIN_VFP_BASE + 1)\n+\n #define ARM_BUILTIN_NEON_PATTERN_START \\\n   (ARM_BUILTIN_NEON_BASE + 1)\n \n@@ -1033,6 +1052,20 @@ arm_init_neon_builtins (void)\n     }\n }\n \n+/* Set up all the scalar floating point builtins.  */\n+\n+static void\n+arm_init_vfp_builtins (void)\n+{\n+  unsigned int i, fcode = ARM_BUILTIN_VFP_PATTERN_START;\n+\n+  for (i = 0; i < ARRAY_SIZE (vfp_builtin_data); i++, fcode++)\n+    {\n+      neon_builtin_datum *d = &vfp_builtin_data[i];\n+      arm_init_neon_builtin (fcode, d);\n+    }\n+}\n+\n static void\n arm_init_crypto_builtins (void)\n {\n@@ -1777,7 +1810,7 @@ arm_init_builtins (void)\n   if (TARGET_HARD_FLOAT)\n     {\n       arm_init_neon_builtins ();\n-\n+      arm_init_vfp_builtins ();\n       arm_init_crypto_builtins ();\n     }\n \n@@ -2324,6 +2357,27 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n   return arm_expand_neon_builtin_1 (fcode, exp, target, d);\n }\n \n+/* Expand a VFP builtin, if TARGET_VFP is true.  These builtins are treated like\n+   neon builtins except that the data is looked up in table\n+   VFP_BUILTIN_DATA.  */\n+\n+static rtx\n+arm_expand_vfp_builtin (int fcode, tree exp, rtx target)\n+{\n+  if (fcode >= ARM_BUILTIN_VFP_BASE && ! TARGET_VFP)\n+    {\n+      fatal_error (input_location,\n+\t\t   \"You must enable VFP instructions\"\n+\t\t   \" to use these intrinsics.\");\n+      return const0_rtx;\n+    }\n+\n+  neon_builtin_datum *d\n+    = &vfp_builtin_data[fcode - ARM_BUILTIN_VFP_PATTERN_START];\n+\n+  return arm_expand_neon_builtin_1 (fcode, exp, target, d);\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -2361,13 +2415,18 @@ arm_expand_builtin (tree exp,\n   if (fcode >= ARM_BUILTIN_NEON_BASE)\n     return arm_expand_neon_builtin (fcode, exp, target);\n \n+  if (fcode >= ARM_BUILTIN_VFP_BASE)\n+    return arm_expand_vfp_builtin (fcode, exp, target);\n+\n   /* Check in the context of the function making the call whether the\n      builtin is supported.  */\n   if (fcode >= ARM_BUILTIN_CRYPTO_BASE\n       && (!TARGET_CRYPTO || !TARGET_HARD_FLOAT))\n     {\n       fatal_error (input_location,\n-\t\t   \"You must enable crypto intrinsics (e.g. include -mfloat-abi=softfp -mfpu=crypto-neon...) to use these intrinsics.\");\n+\t\t   \"You must enable crypto instructions\"\n+\t\t   \" (e.g. include -mfloat-abi=softfp -mfpu=crypto-neon...)\"\n+\t\t   \" to use these intrinsics.\");\n       return const0_rtx;\n     }\n "}, {"sha": "5abfcddaab5b02aceb5d9c0e956aadf7ede9498b", "filename": "gcc/config/arm/arm_vfp_builtins.def", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Farm_vfp_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Farm_vfp_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_vfp_builtins.def?ref=66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "patch": "@@ -0,0 +1,51 @@\n+/* VFP instruction builtin definitions.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This file lists the builtins that may be available when VFP is enabled but\n+   not NEON is enabled.  The entries otherwise have the same requirements and\n+   generate the same structures as those in the arm_neon_builtins.def.  */\n+\n+/* FP16 Arithmetic instructions.  */\n+VAR1 (UNOP, vabs, hf)\n+VAR2 (UNOP, vcvths, hf, si)\n+VAR2 (UNOP, vcvthu, hf, si)\n+VAR1 (UNOP, vcvtahs, si)\n+VAR1 (UNOP, vcvtahu, si)\n+VAR1 (UNOP, vcvtmhs, si)\n+VAR1 (UNOP, vcvtmhu, si)\n+VAR1 (UNOP, vcvtnhs, si)\n+VAR1 (UNOP, vcvtnhu, si)\n+VAR1 (UNOP, vcvtphs, si)\n+VAR1 (UNOP, vcvtphu, si)\n+VAR1 (UNOP, vrnd, hf)\n+VAR1 (UNOP, vrnda, hf)\n+VAR1 (UNOP, vrndi, hf)\n+VAR1 (UNOP, vrndm, hf)\n+VAR1 (UNOP, vrndn, hf)\n+VAR1 (UNOP, vrndp, hf)\n+VAR1 (UNOP, vrndx, hf)\n+VAR1 (UNOP, vsqrt, hf)\n+\n+VAR2 (BINOP, vcvths_n, hf, si)\n+VAR2 (BINOP, vcvthu_n, hf, si)\n+VAR1 (BINOP, vmaxnm, hf)\n+VAR1 (BINOP, vminnm, hf)\n+\n+VAR1 (TERNOP, vfma, hf)\n+VAR1 (TERNOP, vfms, hf)"}, {"sha": "803baa20684fbd6763d3ecaba37a5713e3a62a17", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e31c3d9bcca814ddf26aef1144ecb5e4a021c9/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=66e31c3d9bcca814ddf26aef1144ecb5e4a021c9", "patch": "@@ -95,14 +95,16 @@ arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(srcdir)/config/arm/arm-cores.def \\\n   $(srcdir)/config/arm/arm-arches.def $(srcdir)/config/arm/arm-fpus.def \\\n   $(srcdir)/config/arm/arm-protos.h \\\n-  $(srcdir)/config/arm/arm_neon_builtins.def\n+  $(srcdir)/config/arm/arm_neon_builtins.def \\\n+  $(srcdir)/config/arm/arm_vfp_builtins.def\n \n arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) expr.h $(TM_P_H) $(RECOG_H) langhooks.h \\\n   $(DIAGNOSTIC_CORE_H) $(OPTABS_H) \\\n   $(srcdir)/config/arm/arm-protos.h \\\n   $(srcdir)/config/arm/arm_neon_builtins.def \\\n+  $(srcdir)/config/arm/arm_vfp_builtins.def \\\n   $(srcdir)/config/arm/arm-simd-builtin-types.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/arm-builtins.c"}]}