{"sha": "a95753214b55d21e5b44eeb098cccf88d44c94dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1NzUzMjE0YjU1ZDIxZTViNDRlZWIwOThjY2NmODhkNDRjOTRkZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-11-25T22:05:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-04T22:47:05Z"}, "message": "c++: Fix deduction from auto template parameter [PR93083]\n\nThe check in do_class_deduction to handle passing one class placeholder\ntemplate parm as an argument for itself needed to be extended to also handle\nequivalent parms from other templates.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93083\n\t* pt.c (convert_template_argument): Handle equivalent placeholders.\n\t(do_class_deduction): Look through EXPR_PACK_EXPANSION, too.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93083\n\t* g++.dg/cpp2a/nontype-class40.C: New test.", "tree": {"sha": "baf54176edc281d78bf9eb314bb06b74aa59a089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf54176edc281d78bf9eb314bb06b74aa59a089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95753214b55d21e5b44eeb098cccf88d44c94dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95753214b55d21e5b44eeb098cccf88d44c94dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95753214b55d21e5b44eeb098cccf88d44c94dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95753214b55d21e5b44eeb098cccf88d44c94dd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df933e307b1950ce12472660dcac1765b8eb431d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df933e307b1950ce12472660dcac1765b8eb431d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df933e307b1950ce12472660dcac1765b8eb431d"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "2d3ab92dfd1713993158762dfccc76179760c805", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95753214b55d21e5b44eeb098cccf88d44c94dd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95753214b55d21e5b44eeb098cccf88d44c94dd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a95753214b55d21e5b44eeb098cccf88d44c94dd", "patch": "@@ -8266,7 +8266,7 @@ convert_template_argument (tree parm,\n \n   /* When determining whether an argument pack expansion is a template,\n      look at the pattern.  */\n-  if (TREE_CODE (arg) == TYPE_PACK_EXPANSION)\n+  if (PACK_EXPANSION_P (arg))\n     arg = PACK_EXPANSION_PATTERN (arg);\n \n   /* Deal with an injected-class-name used as a template template arg.  */\n@@ -29013,6 +29013,12 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   if (DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl))\n     return ptype;\n \n+  /* Initializing one placeholder from another.  */\n+  if (init && TREE_CODE (init) == TEMPLATE_PARM_INDEX\n+      && is_auto (TREE_TYPE (init))\n+      && CLASS_PLACEHOLDER_TEMPLATE (TREE_TYPE (init)) == tmpl)\n+    return cp_build_qualified_type (TREE_TYPE (init), cp_type_quals (ptype));\n+\n   /* Look through alias templates that just rename another template.  */\n   tmpl = get_underlying_template (tmpl);\n   if (!ctad_template_p (tmpl))\n@@ -29029,10 +29035,6 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \t\t \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n     }\n \n-  if (init && TREE_TYPE (init) == ptype)\n-    /* Using the template parm as its own argument.  */\n-    return ptype;\n-\n   tree type = TREE_TYPE (tmpl);\n \n   bool try_list_ctor = false;"}, {"sha": "d19354491ffd04243b1d4cd12d242d3c170bbfee", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class40.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95753214b55d21e5b44eeb098cccf88d44c94dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95753214b55d21e5b44eeb098cccf88d44c94dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class40.C?ref=a95753214b55d21e5b44eeb098cccf88d44c94dd", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/93083\n+// { dg-do compile { target c++20 } }\n+\n+template<unsigned N>\n+struct FixedString\n+{\n+    char buf[N + 1]{};\n+    constexpr FixedString(char const* s) {\n+        for (unsigned i = 0; i != N; ++i) buf[i] = s[i];\n+    }\n+\n+    auto operator<=>(const FixedString&) const = default;\n+    constexpr operator char const*() const { return buf; }\n+    constexpr static unsigned size() noexcept { return N; }\n+};\n+\n+template<unsigned N> FixedString(char const (&)[N]) -> FixedString<N - 1>;\n+\n+template <FixedString... names>\n+struct name_list\n+{\n+    template <FixedString name>\n+    using add_name = name_list<\n+        names...,\n+        FixedString<name.size()>{ name }\n+    >;\n+};\n+\n+\n+int main()\n+{\n+    using names =\n+        name_list<>\n+        ::add_name<\"Zaphod Beeblebrox\">;\n+\n+}\n+\n+// ----------------\n+\n+template <int N> struct literal {\n+  constexpr literal(const char (&input)[N]) noexcept { }\n+  constexpr literal(const literal &) noexcept { }\n+};\n+\n+template <literal Name, int id> struct field { };\n+\n+template <literal Name> struct field<Name, 1u> { };\n+\n+// ----------------\n+\n+template <int N>\n+struct use_as_nttp {};\n+\n+template <use_as_nttp Value>\n+struct has_nttp {};\n+\n+template <use_as_nttp Value>\n+using has_nttp_2 = has_nttp<Value>;\n+\n+// ----------------\n+\n+using size_t = decltype(sizeof(0));\n+\n+template <size_t N>\n+struct string_literal\n+{\n+  constexpr string_literal(const char*) {}\n+  string_literal(string_literal const&) = default;\n+};\n+template <size_t N>\n+string_literal(const char (&)[N]) -> string_literal<N - 1>;\n+\n+template <string_literal Str>\n+struct type_string { };\n+\n+template <string_literal Str>\n+void foo() {\n+  type_string<Str>{};\n+}"}]}