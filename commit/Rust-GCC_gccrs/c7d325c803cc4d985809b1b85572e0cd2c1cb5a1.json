{"sha": "c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMzI1YzgwM2NjNGQ5ODU4MDliMWI4NTU3MmUwY2QyYzFjYjVhMQ==", "commit": {"author": {"name": "Glen Nakamura", "email": "glen@imodulo.com", "date": "2003-03-27T18:53:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-03-27T18:53:36Z"}, "message": "re PR rtl-optimization/10087 (optimizer produces wrong code when indexing 2D array)\n\n\tPR opt/10087\n\t* gcc.dg/20030324-1.c: New test.\n\n\tPR opt/10087\n\t* loop.c (loop_givs_reduce): Skip bivs with duplicate locations\n\twhile incrementing giv.\n\t(record_biv): Check for duplicate biv locations and\n\tset (struct induction *) v->same if found.\n\nFrom-SVN: r64928", "tree": {"sha": "796445c9df0e9caa4b8e1dce2480c314d1c297fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796445c9df0e9caa4b8e1dce2480c314d1c297fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/comments", "author": null, "committer": null, "parents": [{"sha": "f18ab43711810de62db708d3c643664344c96aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18ab43711810de62db708d3c643664344c96aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18ab43711810de62db708d3c643664344c96aef"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "03113df8678a953fd860ea20236faa55fb97f20b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "patch": "@@ -1,3 +1,11 @@\n+2003-03-27  Glen Nakamura  <glen@imodulo.com>\n+\n+\tPR opt/10087\n+\t* loop.c (loop_givs_reduce): Skip bivs with duplicate locations\n+\twhile incrementing giv.\n+\t(record_biv): Check for duplicate biv locations and\n+\tset (struct induction *) v->same if found.\n+\n 2003-03-27  David Mosberger  <davidm@hpl.hp.com>\n \n         * unwind-libunwind.c (uw_frame_state_for): Adjust for libunwind"}, {"sha": "7624b6d6a03887ea39b40c3c597200b67b55b7a2", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "patch": "@@ -4817,6 +4817,9 @@ loop_givs_reduce (loop, bl)\n \t    {\n \t      rtx insert_before;\n \n+\t      /* Skip if location is the same as a previous one.  */\n+\t      if (tv->same)\n+\t\tcontinue;\n \t      if (! auto_inc_opt)\n \t\tinsert_before = NEXT_INSN (tv->insn);\n \t      else if (auto_inc_opt == 1)\n@@ -5724,6 +5727,7 @@ record_biv (loop, v, insn, dest_reg, inc_val, mult_val, location,\n   v->always_computable = ! not_every_iteration;\n   v->always_executed = ! not_every_iteration;\n   v->maybe_multiple = maybe_multiple;\n+  v->same = 0;\n \n   /* Add this to the reg's iv_class, creating a class\n      if this is the first incrementation of the reg.  */\n@@ -5761,6 +5765,17 @@ record_biv (loop, v, insn, dest_reg, inc_val, mult_val, location,\n       /* Put it in the array of biv register classes.  */\n       REG_IV_CLASS (ivs, REGNO (dest_reg)) = bl;\n     }\n+  else\n+    {\n+      /* Check if location is the same as a previous one.  */\n+      struct induction *induction;\n+      for (induction = bl->biv; induction; induction = induction->next_iv)\n+\tif (location == induction->location)\n+\t  {\n+\t    v->same = induction;\n+\t    break;\n+\t  }\n+    }\n \n   /* Update IV_CLASS entry for this biv.  */\n   v->next_iv = bl->biv;"}, {"sha": "3fa38837c3d6f0c6f00aae2c4c18327b61527fe1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "patch": "@@ -1,3 +1,8 @@\n+2003-03-27  Glen Nakamura  <glen@imodulo.com>\n+\n+\tPR opt/10087\n+\t* gcc.dg/20030324-1.c: New test.\n+\n 2003-03-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/10224"}, {"sha": "343c721dc6432c0fba4918dd1f2fce7f63b4e115", "filename": "gcc/testsuite/gcc.dg/20030324-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d325c803cc4d985809b1b85572e0cd2c1cb5a1/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030324-1.c?ref=c7d325c803cc4d985809b1b85572e0cd2c1cb5a1", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fstrength-reduce -fstrict-aliasing -fforce-mem -fgcse\" } */\n+\n+void b(int*,int*);\n+    \n+typedef struct {\n+    double T1;\n+    char c;\n+} S;\n+\n+int main(void)\n+{\n+  int i,j;\n+  double s;\n+\n+  S x1[2][2];\n+  S *x[2] = { x1[0], x1[1] };\n+  S **E = x;\n+\n+  for( i=0; i < 2; i++ )\n+    for( j=0; j < 2; j++ )\n+      E[j][i].T1 = 1;\n+\n+  for( i=0; i < 2; i++ )\n+    for( j=0; j < 2; j++ )\n+      s = E[j][i].T1;\n+\n+  b(&j,&i);\n+  printf( \"result %.6e\\n\", s);\n+  return 0;\n+}\n+\n+void b(int *i, int *j) {}"}]}