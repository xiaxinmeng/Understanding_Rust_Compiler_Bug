{"sha": "875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc1YmRiZTJmNmQyZDU0ZjBjY2VmZDI3Y2VhM2E1MzNmZWY4MzRlYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-30T15:32:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-30T15:32:51Z"}, "message": "decl.c (maybe_saturate_size): New function.\n\n\t* gcc-interface/decl.c (maybe_saturate_size): New function.\n\t(gnat_to_gnu_entity): Invoke it on the Esize of types before sending\n\tit for back-annotations.\n\t* gcc-interface/trans.c: Fix typo.\n\nFrom-SVN: r275200", "tree": {"sha": "9a2afaa36f69c5a449b22f5fa5b624fe3824adb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2afaa36f69c5a449b22f5fa5b624fe3824adb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/comments", "author": null, "committer": null, "parents": [{"sha": "f76cf133e283a99c8b39fb52c4a27fbac59b4c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76cf133e283a99c8b39fb52c4a27fbac59b4c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76cf133e283a99c8b39fb52c4a27fbac59b4c66"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "410828ed37a14966409112d61d5f4b73b67382de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "patch": "@@ -1,3 +1,10 @@\n+2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (maybe_saturate_size): New function.\n+\t(gnat_to_gnu_entity): Invoke it on the Esize of types before sending\n+\tit for back-annotations.\n+\t* gcc-interface/trans.c: Fix typo.\n+\n 2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_FORCED_BY_REF_P): New macro."}, {"sha": "d1082ee1a405f2f54f99252929c82003800949f2", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "patch": "@@ -232,6 +232,7 @@ static tree build_position_list (tree, bool, tree, tree, unsigned int, tree);\n static vec<subst_pair> build_subst_list (Entity_Id, Entity_Id, bool);\n static vec<variant_desc> build_variant_list (tree, vec<subst_pair>,\n \t\t\t\t\t     vec<variant_desc>);\n+static tree maybe_saturate_size (tree);\n static tree validate_size (Uint, tree, Entity_Id, enum tree_code, bool, bool);\n static void set_rm_size (Uint, tree, Entity_Id);\n static unsigned int validate_alignment (Uint, Entity_Id, unsigned int);\n@@ -4327,9 +4328,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t{\n \t  tree gnu_size = TYPE_SIZE (gnu_type);\n \n-\t  /* If the size is self-referential, annotate the maximum value.  */\n+\t  /* If the size is self-referential, annotate the maximum value\n+\t     after saturating it, if need be, to avoid a No_Uint value.  */\n \t  if (CONTAINS_PLACEHOLDER_P (gnu_size))\n-\t    gnu_size = max_size (gnu_size, true);\n+\t    gnu_size = maybe_saturate_size (max_size (gnu_size, true));\n \n \t  /* If we are just annotating types and the type is tagged, the tag\n \t     and the parent components are not generated by the front-end so\n@@ -4365,7 +4367,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t  gnu_size = size_binop (PLUS_EXPR, gnu_size, offset);\n \t\t}\n \n-\t      gnu_size = round_up (gnu_size, align);\n+\t      gnu_size = maybe_saturate_size (round_up (gnu_size, align));\n \t      Set_Esize (gnat_entity, annotate_value (gnu_size));\n \n \t      /* Tagged types are Strict_Alignment so RM_Size = Esize.  */\n@@ -8723,6 +8725,19 @@ build_variant_list (tree qual_union_type, vec<subst_pair> subst_list,\n   return gnu_list;\n }\n \f\n+/* If SIZE has overflowed, return the maximum valid size, which is the upper\n+   bound of the signed sizetype in bits; otherwise return SIZE unmodified.  */\n+\n+static tree\n+maybe_saturate_size (tree size)\n+{\n+  if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n+    size = size_binop (MULT_EXPR,\n+\t\t       fold_convert (bitsizetype, TYPE_MAX_VALUE (ssizetype)),\n+\t\t       build_int_cst (bitsizetype, BITS_PER_UNIT));\n+  return size;\n+}\n+\n /* UINT_SIZE is a Uint giving the specified size for an object of GNU_TYPE\n    corresponding to GNAT_OBJECT.  If the size is valid, return an INTEGER_CST\n    corresponding to its value.  Otherwise, return NULL_TREE.  KIND is set to\n@@ -10137,7 +10152,7 @@ concat_name (tree gnu_name, const char *suffix)\n   return get_identifier_with_length (new_name, len);\n }\n \n-/* Initialize data structures of the decl.c module.  */\n+/* Initialize the data structures of the decl.c module.  */\n \n void\n init_gnat_decl (void)\n@@ -10149,7 +10164,7 @@ init_gnat_decl (void)\n   dummy_to_subprog_map = hash_table<dummy_type_hasher>::create_ggc (512);\n }\n \n-/* Destroy data structures of the decl.c module.  */\n+/* Destroy the data structures of the decl.c module.  */\n \n void\n destroy_gnat_decl (void)"}, {"sha": "fe02dc4d64f2c96f0a9b51ea52230049c43c7b53", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875bdbe2f6d2d54f0ccefd27cea3a533fef834eb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=875bdbe2f6d2d54f0ccefd27cea3a533fef834eb", "patch": "@@ -8790,7 +8790,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n        5. If this is a reference to an unconstrained array which is used as the\n \t  prefix of an attribute reference that requires an lvalue, return the\n-\t  result unmodified because we want return the original bounds.\n+\t  result unmodified because we want to return the original bounds.\n \n        6. Finally, if the type of the result is already correct.  */\n "}]}