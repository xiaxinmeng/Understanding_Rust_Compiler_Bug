{"sha": "76508852a0241db33b2512c0b460cdf06f7e0ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1MDg4NTJhMDI0MWRiMzNiMjUxMmMwYjQ2MGNkZjA2ZjdlMGNlNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-12-05T00:49:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-05T00:49:30Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (nat_source_files): Added natVMSecurityManager,\n\tnatResourceBundle.\n\t* java/util/ResourceBundle.java (Security): Removed.\n\t(getCallingClassLoader): Now native.\n\t* java/util/natResourceBundle.cc: New file.\n\t* java/lang/natVMSecurityManager.cc: New file.\n\t* java/lang/VMSecurityManager.java (getClassContext): Now native.\n\nFrom-SVN: r59840", "tree": {"sha": "55c5e4e7a3fc1386a525f3b48aea94a0f0b26bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c5e4e7a3fc1386a525f3b48aea94a0f0b26bef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76508852a0241db33b2512c0b460cdf06f7e0ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76508852a0241db33b2512c0b460cdf06f7e0ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76508852a0241db33b2512c0b460cdf06f7e0ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76508852a0241db33b2512c0b460cdf06f7e0ce5/comments", "author": null, "committer": null, "parents": [{"sha": "67f1b906114cdfc69b72e7135f34162ec6a67cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f1b906114cdfc69b72e7135f34162ec6a67cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f1b906114cdfc69b72e7135f34162ec6a67cc0"}], "stats": {"total": 180, "additions": 121, "deletions": 59}, "files": [{"sha": "4d7c7ff15f5999c20a8bccae2570cd49a81ec871", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -1,3 +1,14 @@\n+2002-12-04  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (nat_source_files): Added natVMSecurityManager,\n+\tnatResourceBundle.\n+\t* java/util/ResourceBundle.java (Security): Removed.\n+\t(getCallingClassLoader): Now native.\n+\t* java/util/natResourceBundle.cc: New file.\n+\t* java/lang/natVMSecurityManager.cc: New file.\n+\t* java/lang/VMSecurityManager.java (getClassContext): Now native.\n+\n 2002-12-03  Mark Wielaard  <mark@klomp.org>\n \n \t* java/util/jar/JarFile.java (manifest): Not final."}, {"sha": "b993d5028a9b50a065f0ad96b581685efeffaf62", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -2337,6 +2337,7 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n+java/lang/natVMSecurityManager.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n java/lang/reflect/natConstructor.cc \\\n@@ -2348,6 +2349,7 @@ java/net/natInetAddress.cc \\\n java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n+java/util/natResourceBundle.cc \\\n java/util/natTimeZone.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc"}, {"sha": "8b74b390365b186acff7b755e172813a6951c18d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -2086,6 +2086,7 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n+java/lang/natVMSecurityManager.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n java/lang/reflect/natConstructor.cc \\\n@@ -2097,6 +2098,7 @@ java/net/natInetAddress.cc \\\n java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n+java/util/natResourceBundle.cc \\\n java/util/natTimeZone.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc\n@@ -2244,12 +2246,13 @@ java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n-java/lang/natThread.lo java/lang/ref/natReference.lo \\\n-java/lang/reflect/natArray.lo java/lang/reflect/natConstructor.lo \\\n-java/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n-java/lang/reflect/natProxy.lo java/net/natNetworkInterface.lo \\\n-java/net/natInetAddress.lo java/net/natPlainDatagramSocketImpl.lo \\\n-java/net/natPlainSocketImpl.lo java/text/natCollator.lo \\\n+java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n+java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n+java/lang/reflect/natConstructor.lo java/lang/reflect/natField.lo \\\n+java/lang/reflect/natMethod.lo java/lang/reflect/natProxy.lo \\\n+java/net/natNetworkInterface.lo java/net/natInetAddress.lo \\\n+java/net/natPlainDatagramSocketImpl.lo java/net/natPlainSocketImpl.lo \\\n+java/text/natCollator.lo java/util/natResourceBundle.lo \\\n java/util/natTimeZone.lo java/util/zip/natDeflater.lo \\\n java/util/zip/natInflater.lo\n libgcjx_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n@@ -2959,8 +2962,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/natMath.P .deps/java/lang/natObject.P \\\n .deps/java/lang/natRuntime.P .deps/java/lang/natString.P \\\n .deps/java/lang/natStringBuffer.P .deps/java/lang/natSystem.P \\\n-.deps/java/lang/natThread.P .deps/java/lang/ref/PhantomReference.P \\\n-.deps/java/lang/ref/Reference.P .deps/java/lang/ref/ReferenceQueue.P \\\n+.deps/java/lang/natThread.P .deps/java/lang/natVMSecurityManager.P \\\n+.deps/java/lang/ref/PhantomReference.P .deps/java/lang/ref/Reference.P \\\n+.deps/java/lang/ref/ReferenceQueue.P \\\n .deps/java/lang/ref/SoftReference.P .deps/java/lang/ref/WeakReference.P \\\n .deps/java/lang/ref/natReference.P \\\n .deps/java/lang/reflect/AccessibleObject.P \\\n@@ -3286,8 +3290,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n .deps/java/util/jar/JarInputStream.P \\\n .deps/java/util/jar/JarOutputStream.P .deps/java/util/jar/Manifest.P \\\n-.deps/java/util/natTimeZone.P .deps/java/util/regex/Matcher.P \\\n-.deps/java/util/regex/Pattern.P \\\n+.deps/java/util/natResourceBundle.P .deps/java/util/natTimeZone.P \\\n+.deps/java/util/regex/Matcher.P .deps/java/util/regex/Pattern.P \\\n .deps/java/util/regex/PatternSyntaxException.P \\\n .deps/java/util/zip/Adler32.P .deps/java/util/zip/CRC32.P \\\n .deps/java/util/zip/CheckedInputStream.P \\"}, {"sha": "f6f0645ac753f60b6b9ad8c94974a0a88969cad3", "filename": "libjava/java/lang/VMSecurityManager.java", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Flang%2FVMSecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Flang%2FVMSecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMSecurityManager.java?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -1,6 +1,6 @@\n /*\n  * java.lang.SecurityManager: part of the Java Class Libraries project.\n- * Copyright (C) 1998, 2001 Free Software Foundation\n+ * Copyright (C) 1998, 2001, 2002 Free Software Foundation\n  *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Library General Public\n@@ -43,11 +43,7 @@\n    ** @return an array containing all the methods on classes\n    **         on the Java execution stack.\n    **/\n-  static Class[] getClassContext()\n-  {\n-    // FIXME: can't yet implement this for libgcj.\n-    return new Class[0];\n-  }\n+  static native Class[] getClassContext();\n \n   /** Get the current ClassLoader--the one nearest to the\n    ** top of the stack."}, {"sha": "7b88e8a4a8c467e541f843a43d30589e19c99a97", "filename": "libjava/java/lang/natVMSecurityManager.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -0,0 +1,54 @@\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+// Written by Tom Tromey <tromey@redhat.com>\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+#include <java/lang/VMSecurityManager.h>\n+#include <java/lang/SecurityManager.h>\n+#include <java/lang/ClassLoader.h>\n+#include <java/lang/Class.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n+\n+JArray<jclass> *\n+java::lang::VMSecurityManager::getClassContext ()\n+{\n+  JArray<jclass> *result = NULL;\n+  gnu::gcj::runtime::StackTrace *t = new gnu::gcj::runtime::StackTrace();\n+  if (t)\n+    {\n+      int maxlen = t->length();\n+\n+      int len = 0;\n+      while (len < maxlen)\n+\t{\n+\t  jclass klass = t->classAt(len);\n+\t  if (klass != NULL && klass != &java::lang::VMSecurityManager::class$\n+\t      && klass != &java::lang::SecurityManager::class$)\n+\t    ++len;\n+\t}\n+\n+      result =\n+\t(JArray<jclass> *) _Jv_NewObjectArray (len, &java::lang::Class::class$,\n+\t\t\t\t\t       NULL);\n+\n+      len = 0;\n+      while (len < maxlen)\n+\t{\n+\t  jclass klass = t->classAt(len);\n+\t  if (klass != NULL && klass != &java::lang::VMSecurityManager::class$\n+\t      && klass != &java::lang::SecurityManager::class$)\n+\t    elements(result)[len++] = klass;\n+\t}\n+    }\n+\n+  return result;\n+}"}, {"sha": "ecc63af2596b9dbf9aac771d21a0bc7b7650799c", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -42,8 +42,6 @@\n import java.lang.ref.SoftReference;\n import java.io.InputStream;\n import java.io.IOException;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n import gnu.classpath.Configuration;\n \n /**\n@@ -105,44 +103,7 @@\n    */\n   private Locale locale;\n \n-  /**\n-   * We override SecurityManager in order to access getClassContext().\n-   */\n-  private static final class Security extends SecurityManager\n-  {\n-    /**\n-     * Avoid accessor method of private constructor.\n-     */\n-    Security()\n-    {\n-    }\n-\n-    /**\n-     * Return the ClassLoader of the class which called into this\n-     * ResourceBundle, or null if it cannot be determined.\n-     */\n-    ClassLoader getCallingClassLoader()\n-    {\n-      Class[] stack = getClassContext();\n-      for (int i = 0; i < stack.length; i++)\n-        if (stack[i] != Security.class && stack[i] != ResourceBundle.class)\n-          return stack[i].getClassLoader();\n-      return null;\n-    }\n-  }\n-\n-  /** A security context for grabbing the correct class loader. */\n-  private static final Security security\n-    = (Security) AccessController.doPrivileged(new PrivilegedAction()\n-      {\n-        // This will always work since java.util classes have (all) system\n-        // permissions.\n-        public Object run()\n-        {\n-          return new Security();\n-        }\n-      }\n-    );\n+  private static native ClassLoader getCallingClassLoader();\n \n   /**\n    * The resource bundle cache. This is a two-level hash map: The key\n@@ -256,7 +217,7 @@ protected void setParent(ResourceBundle parent)\n   public static final ResourceBundle getBundle(String baseName)\n   {\n     return getBundle(baseName, Locale.getDefault(),\n-                     security.getCallingClassLoader());\n+                     getCallingClassLoader());\n   }\n \n   /**\n@@ -274,7 +235,7 @@ public static final ResourceBundle getBundle(String baseName)\n   public static final ResourceBundle getBundle(String baseName,\n                                                Locale locale)\n   {\n-    return getBundle(baseName, locale, security.getCallingClassLoader());\n+    return getBundle(baseName, locale, getCallingClassLoader());\n   }\n \n   /**"}, {"sha": "9d142e060ef44d6297c4b98af9235341daf1da2c", "filename": "libjava/java/util/natResourceBundle.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Futil%2FnatResourceBundle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fjava%2Futil%2FnatResourceBundle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FnatResourceBundle.cc?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -0,0 +1,34 @@\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+// Written by Tom Tromey <tromey@redhat.com>\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+#include <java/util/ResourceBundle.h>\n+#include <java/lang/SecurityManager.h>\n+#include <java/lang/ClassLoader.h>\n+#include <java/lang/Class.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n+\n+java::lang::ClassLoader *\n+java::util::ResourceBundle::getCallingClassLoader ()\n+{\n+  gnu::gcj::runtime::StackTrace *t = new gnu::gcj::runtime::StackTrace(6);\n+  if (! t)\n+    return NULL;\n+  for (int i = 3; i < 6; ++i)\n+    {\n+      jclass klass = t->classAt(i);\n+      if (klass != NULL)\n+\treturn klass->getClassLoaderInternal();\n+    }\n+  return NULL;\n+}"}, {"sha": "2195db161e1f0162c76e4cf4fb90222a1d9477d5", "filename": "libjava/prims.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76508852a0241db33b2512c0b460cdf06f7e0ce5/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=76508852a0241db33b2512c0b460cdf06f7e0ce5", "patch": "@@ -397,7 +397,7 @@ _Jv_AllocObject (jclass klass, jint size)\n   // if there really is an interesting finalizer.\n   // Unfortunately, we still have to the dynamic test, since there may\n   // be cni calls to this routine.\n-  // Nore that on IA64 get_finalizer() returns the starting address of the\n+  // Note that on IA64 get_finalizer() returns the starting address of the\n   // function, not a function pointer.  Thus this still works.\n   if (klass->vtable->get_finalizer ()\n       != java::lang::Object::class$.vtable->get_finalizer ())"}]}