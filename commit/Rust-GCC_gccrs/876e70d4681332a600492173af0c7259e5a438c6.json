{"sha": "876e70d4681332a600492173af0c7259e5a438c6", "node_id": "C_kwDOANBUbNoAKDg3NmU3MGQ0NjgxMzMyYTYwMDQ5MjE3M2FmMGM3MjU5ZTVhNDM4YzY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-04T08:26:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-04T10:30:11Z"}, "message": "tree-optimization/103641 - improve vect_synth_mult_by_constant\n\nThe following happens to improve compile-time of the PR103641\ntestcase on aarch64 significantly.  I did not investigate the\neffect on the generated code but at least in theory\nchoose_mult_variant should do a better job when we tell it\nthe actual mode we are going to use for the operations it\nsynthesizes.\n\n2022-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103641\n\t* tree-vect-patterns.cc (vect_synth_mult_by_constant):\n\tPass the vector mode to choose_mult_variant.", "tree": {"sha": "70ab826fa8708c4b33d41f54afda85ad102b1c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ab826fa8708c4b33d41f54afda85ad102b1c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/876e70d4681332a600492173af0c7259e5a438c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876e70d4681332a600492173af0c7259e5a438c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876e70d4681332a600492173af0c7259e5a438c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876e70d4681332a600492173af0c7259e5a438c6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49365d511ac9b64009b1de11ef8a941f59407f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49365d511ac9b64009b1de11ef8a941f59407f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49365d511ac9b64009b1de11ef8a941f59407f67"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2baf974627e13d426e6bf0762161ba78b4edd6c9", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876e70d4681332a600492173af0c7259e5a438c6/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876e70d4681332a600492173af0c7259e5a438c6/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=876e70d4681332a600492173af0c7259e5a438c6", "patch": "@@ -3041,6 +3041,9 @@ vect_synth_mult_by_constant (vec_info *vinfo, tree op, tree val,\n   bool cast_to_unsigned_p = !TYPE_OVERFLOW_WRAPS (itype);\n \n   tree multtype = cast_to_unsigned_p ? unsigned_type_for (itype) : itype;\n+  tree vectype = get_vectype_for_scalar_type (vinfo, multtype);\n+  if (!vectype)\n+    return NULL;\n \n   /* Targets that don't support vector shifts but support vector additions\n      can synthesize shifts that way.  */\n@@ -3050,16 +3053,13 @@ vect_synth_mult_by_constant (vec_info *vinfo, tree op, tree val,\n   /* Use MAX_COST here as we don't want to limit the sequence on rtx costs.\n      The vectorizer's benefit analysis will decide whether it's beneficial\n      to do this.  */\n-  bool possible = choose_mult_variant (mode, hwval, &alg,\n-\t\t\t\t\t&variant, MAX_COST);\n+  bool possible = choose_mult_variant (VECTOR_MODE_P (TYPE_MODE (vectype))\n+\t\t\t\t       ? TYPE_MODE (vectype) : mode,\n+\t\t\t\t       hwval, &alg, &variant, MAX_COST);\n   if (!possible)\n     return NULL;\n \n-  tree vectype = get_vectype_for_scalar_type (vinfo, multtype);\n-\n-  if (!vectype\n-      || !target_supports_mult_synth_alg (&alg, variant,\n-\t\t\t\t\t   vectype, synth_shift_p))\n+  if (!target_supports_mult_synth_alg (&alg, variant, vectype, synth_shift_p))\n     return NULL;\n \n   tree accumulator;"}]}