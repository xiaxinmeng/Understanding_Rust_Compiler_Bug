{"sha": "f616a5db5cce0dc48bef0200952ae4c034cd107d", "node_id": "C_kwDOANBUbNoAKGY2MTZhNWRiNWNjZTBkYzQ4YmVmMDIwMDk1MmFlNGMwMzRjZDEwN2Q", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-03T12:38:51Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-11T07:38:22Z"}, "message": "converter: Convert literals back to tokens\n\nAdd the implementation of the function to convert Literal back to\ntokens. Also change the function signature to accept const.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-token-converter.cc (from_literal): Add function\n\timplementation.\n\t(string_literal): String literal specific handler.\n\t(byte_string_literal): Byte string specific handler.\n\t(unsigned_literal): Unsigned literal specific handler.\n\t(signed_literal): Signed literal specific handler.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "47b5958d78ffbda0769364f8dd667ce70998507c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47b5958d78ffbda0769364f8dd667ce70998507c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f616a5db5cce0dc48bef0200952ae4c034cd107d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f616a5db5cce0dc48bef0200952ae4c034cd107d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f616a5db5cce0dc48bef0200952ae4c034cd107d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f616a5db5cce0dc48bef0200952ae4c034cd107d/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c10eb4fbd58444aad9162692f571967a8d1ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c10eb4fbd58444aad9162692f571967a8d1ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c10eb4fbd58444aad9162692f571967a8d1ef2"}], "stats": {"total": 140, "additions": 138, "deletions": 2}, "files": [{"sha": "1a44de2ce7e038bb6aa25fdd5c19d4496dc37e22", "filename": "gcc/rust/util/rust-token-converter.cc", "status": "modified", "additions": 138, "deletions": 2, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f616a5db5cce0dc48bef0200952ae4c034cd107d/gcc%2Frust%2Futil%2Frust-token-converter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f616a5db5cce0dc48bef0200952ae4c034cd107d/gcc%2Frust%2Futil%2Frust-token-converter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.cc?ref=f616a5db5cce0dc48bef0200952ae4c034cd107d", "patch": "@@ -307,8 +307,144 @@ from_ident (ProcMacro::Ident ident, std::vector<const_TokenPtr> &result)\n {}\n \n static void\n-from_literal (ProcMacro::Literal literal, std::vector<const_TokenPtr> &result)\n-{}\n+string_literal (const ProcMacro::StringPayload &payload,\n+\t\tstd::vector<const_TokenPtr> &result)\n+{\n+  // TODO: UTF-8 string\n+  result.push_back (Token::make_string (\n+    Location (),\n+    std::string (reinterpret_cast<const char *> (payload.data), payload.len)));\n+}\n+\n+static void\n+byte_string_literal (const ProcMacro::ByteStringPayload &payload,\n+\t\t     std::vector<const_TokenPtr> &result)\n+{\n+  result.push_back (Token::make_byte_string (\n+    Location (),\n+    std::string (reinterpret_cast<const char *> (payload.data), payload.size)));\n+}\n+\n+static void\n+unsigned_literal (const ProcMacro::Unsigned &lit,\n+\t\t  std::vector<const_TokenPtr> &result)\n+{\n+  switch (lit.tag)\n+    {\n+    case ProcMacro::UNSIGNED_8:\n+      result.push_back (Token::make_int (Location (),\n+\t\t\t\t\t std::to_string (lit.payload.unsigned8),\n+\t\t\t\t\t CORETYPE_U8));\n+      break;\n+    case ProcMacro::UNSIGNED_16:\n+      result.push_back (\n+\tToken::make_int (Location (), std::to_string (lit.payload.unsigned16),\n+\t\t\t CORETYPE_U16));\n+      break;\n+    case ProcMacro::UNSIGNED_32:\n+      result.push_back (\n+\tToken::make_int (Location (), std::to_string (lit.payload.unsigned32),\n+\t\t\t CORETYPE_U32));\n+      break;\n+    case ProcMacro::UNSIGNED_64:\n+      result.push_back (\n+\tToken::make_int (Location (), std::to_string (lit.payload.unsigned64),\n+\t\t\t CORETYPE_U64));\n+      break;\n+    case ProcMacro::UNSIGNED_128:\n+      // TODO: Handle 128 bits\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static void\n+signed_literal (const ProcMacro::Signed &lit,\n+\t\tstd::vector<const_TokenPtr> &result)\n+{\n+  switch (lit.tag)\n+    {\n+    case ProcMacro::SIGNED_8:\n+      result.push_back (Token::make_int (Location (),\n+\t\t\t\t\t std::to_string (lit.payload.signed8),\n+\t\t\t\t\t CORETYPE_I8));\n+      break;\n+    case ProcMacro::SIGNED_16:\n+      result.push_back (Token::make_int (Location (),\n+\t\t\t\t\t std::to_string (lit.payload.signed16),\n+\t\t\t\t\t CORETYPE_I16));\n+      break;\n+    case ProcMacro::SIGNED_32:\n+      result.push_back (Token::make_int (Location (),\n+\t\t\t\t\t std::to_string (lit.payload.signed32),\n+\t\t\t\t\t CORETYPE_I32));\n+      break;\n+    case ProcMacro::SIGNED_64:\n+      result.push_back (Token::make_int (Location (),\n+\t\t\t\t\t std::to_string (lit.payload.signed64),\n+\t\t\t\t\t CORETYPE_I64));\n+      break;\n+    case ProcMacro::SIGNED_128:\n+      // TODO: Handle 128 bits\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/**\n+ * Append the token corresponding to a given Literal to a vector.\n+ *\n+ * @param literal Reference to the Literal to convert.\n+ * @param result Reference to the vector tokens should be appended to.\n+ */\n+static void\n+from_literal (const ProcMacro::Literal &literal,\n+\t      std::vector<const_TokenPtr> &result)\n+{\n+  switch (literal.tag)\n+    {\n+    case ProcMacro::STRING:\n+      string_literal (literal.payload.string_payload, result);\n+      break;\n+    case ProcMacro::BYTE_STRING:\n+      byte_string_literal (literal.payload.byte_string_payload, result);\n+      break;\n+    case ProcMacro::CHAR:\n+      result.push_back (\n+\tToken::make_char (Location (), literal.payload.char_payload));\n+      break;\n+    case ProcMacro::UNSIGNED:\n+      unsigned_literal (literal.payload.unsigned_payload.value, result);\n+      break;\n+    case ProcMacro::SIGNED:\n+      signed_literal (literal.payload.signed_payload.value, result);\n+      break;\n+    case ProcMacro::USIZE:\n+      result.push_back (\n+\tToken::make_int (Location (),\n+\t\t\t std::to_string (literal.payload.usize_payload.value),\n+\t\t\t CORETYPE_USIZE));\n+      break;\n+    case ProcMacro::ISIZE:\n+      result.push_back (\n+\tToken::make_int (Location (),\n+\t\t\t std::to_string (literal.payload.isize_payload.value),\n+\t\t\t CORETYPE_ISIZE));\n+      break;\n+    case ProcMacro::FLOAT32:\n+      result.push_back (Token::make_float (\n+\tLocation (), std::to_string (literal.payload.float32_payload.value),\n+\tCORETYPE_F32));\n+      break;\n+    case ProcMacro::FLOAT64:\n+      result.push_back (Token::make_float (\n+\tLocation (), std::to_string (literal.payload.float64_payload.value),\n+\tCORETYPE_F64));\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n \n /**\n  * Accumulate through successive calls multiple Punct until one is tagged"}]}