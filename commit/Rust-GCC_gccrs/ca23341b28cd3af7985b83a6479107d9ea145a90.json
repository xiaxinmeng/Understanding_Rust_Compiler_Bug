{"sha": "ca23341b28cd3af7985b83a6479107d9ea145a90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyMzM0MWIyOGNkM2FmNzk4NWI4M2E2NDc5MTA3ZDllYTE0NWE5MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-25T21:05:01Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-25T22:00:27Z"}, "message": "Clean up -Wformat-diag warnings (PR bootstrap/97622, PR bootstrap/94982)\n\ngcc/c-family/ChangeLog:\n\n\tPR bootstrap/94982\n\t* c-attribs.c (handle_patchable_function_entry_attribute): Avoid\n\t-Wformat-diag.\n\ngcc/cp/ChangeLog:\n\n\tPR bootstrap/94982\n\t* constraint.cc (debug_argument_list): Avoid -Wformat-diag.\n\t* error.c (function_category): Same.\n\t(print_template_differences): Same.\n\t* logic.cc (debug): Same.\n\t* name-lookup.c (lookup_using_decl): Same.\n\t* parser.c (maybe_add_cast_fixit): Same.\n\t(cp_parser_template_introduction): Same.\n\t* typeck.c (access_failure_info::add_fixit_hint): Same.\n\ngcc/ChangeLog:\n\n\tPR bootstrap/97622\n\tPR bootstrap/94982\n\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p):\n\tAvoid -Wformat-diag.\n\t* digraph.cc (struct test_edge): Same.\n\t* dumpfile.c (dump_loc): Same.\n\t(dump_context::begin_scope): Same.\n\t* edit-context.c (edited_file::print_diff): Same.\n\t(edited_file::print_diff_hunk): Same.\n\t* json.cc (object::print): Same.\n\t* lto-wrapper.c (merge_and_complain): Same.\n\t* reload.c (find_reloads): Same.\n\t* tree-diagnostic-path.cc (print_path_summary_as_text): Same.\n\t* ubsan.c (ubsan_type_descriptor): Same.\n\ngcc/jit/ChangeLog:\n\n\tPR bootstrap/94982\n\t* jit-recording.c (recording::function::dump_to_dot): Avoid\n\t-Wformat-diag.\n\t(recording::block::dump_to_dot): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR bootstrap/94982\n\t* c-c++-common/patchable_function_entry-error-3.c: Adjust text\n\tof expected warning.", "tree": {"sha": "abaa791c43dac7f771cdc4dd863821bb89325df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abaa791c43dac7f771cdc4dd863821bb89325df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca23341b28cd3af7985b83a6479107d9ea145a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca23341b28cd3af7985b83a6479107d9ea145a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca23341b28cd3af7985b83a6479107d9ea145a90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca23341b28cd3af7985b83a6479107d9ea145a90/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f82d80cfbf834365f5819d75aaa9eeb9321224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f82d80cfbf834365f5819d75aaa9eeb9321224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f82d80cfbf834365f5819d75aaa9eeb9321224"}], "stats": {"total": 146, "additions": 109, "deletions": 37}, "files": [{"sha": "99b663085f29ba42b54edb97badc5f33fdd1ee0a", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -5191,8 +5191,8 @@ handle_patchable_function_entry_attribute (tree *, tree name, tree args,\n       if (tree_to_uhwi (val) > USHRT_MAX)\n \t{\n \t  warning (OPT_Wattributes,\n-\t\t   \"%qE attribute argument %qE is out of range (> 65535)\",\n-\t\t   name, val);\n+\t\t   \"%qE attribute argument %qE exceeds %u\",\n+\t\t   name, val, USHRT_MAX);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}"}, {"sha": "dc07697f622db3fd72584995d890d11886253967", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -1209,7 +1209,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n \t    {\n \t      if (!opt_set_p)\n \t\t{\n-\t\t  error_at (loc, \"pragma or attribute %<target(\\\"%s\\\")%>  \"\n+\t\t  error_at (loc, \"pragma or attribute %<target(\\\"%s\\\")%> \"\n \t\t\t    \"does not allow a negated form\", p);\n \t\t  return false;\n \t\t}\n@@ -2077,7 +2077,7 @@ ix86_option_override_internal (bool main_args_p,\n \t    && (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n \t\t|| opts->x_ix86_abi != SYSV_ABI))\n \t  {\n-\t    error (G_(\"%<%s%> architecture level is only defined\"\n+\t    error (G_(\"%qs architecture level is only defined\"\n \t\t      \" for the x86-64 psABI\"), opts->x_ix86_arch_string);\n \t    return false;\n \t  }"}, {"sha": "00d2f2ea9a841e72811f8ca5fed060907a81ab16", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -533,9 +533,9 @@ debug_argument_list (tree args)\n     {\n       tree arg = TREE_VEC_ELT (args, i);\n       if (TYPE_P (arg))\n-\tverbatim (\"ARG %qT\", arg);\n+\tverbatim (\"argument %qT\", arg);\n       else\n-\tverbatim (\"ARG %qE\", arg);\n+\tverbatim (\"argument %qE\", arg);\n     }\n }\n "}, {"sha": "ff701fc789d4e3e24bb993c26102711f610d80b4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -3553,6 +3553,14 @@ function_category (tree fn)\n     return _(\"In function %qs\");\n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the pp_verbatim calls.  Their format strings deliberately don't\n+   follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Report the full context of a current template instantiation,\n    onto BUFFER.  */\n static void\n@@ -4053,6 +4061,10 @@ print_template_differences (pretty_printer *pp, tree type_a, tree type_b,\n   pp_printf (pp, \">\");\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n /* As type_to_string, but for a template, potentially colorizing/eliding\n    in comparison with PEER.\n    For example, if TYPE is map<int,double> and PEER is map<int,int>,\n@@ -4152,9 +4164,12 @@ add_quotes (const char *content, bool show_color)\n   pretty_printer tmp_pp;\n   pp_show_color (&tmp_pp) = show_color;\n \n-  /* We have to use \"%<%s%>\" rather than \"%qs\" here in order to avoid\n-     quoting colorization bytes within the results.  */\n-  pp_printf (&tmp_pp, \"%<%s%>\", content);\n+  /* We use pp_quote & pp_string rather than pp_printf with \"%<%s%>\"\n+     or \"%qs\" here in order to avoid quoting colorization bytes within\n+     the results, and to avoid -Wformat-diag.  */\n+  pp_quote (&tmp_pp);\n+  pp_string (&tmp_pp, content);\n+  pp_quote (&tmp_pp);\n \n   return pp_ggc_formatted_text (&tmp_pp);\n }"}, {"sha": "5592680b08eccbb2eb0def070c7f1cecfb36a185", "filename": "gcc/cp/logic.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Flogic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Flogic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flogic.cc?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -303,9 +303,10 @@ debug (formula& f)\n {\n   for (formula::iterator i = f.begin(); i != f.end(); ++i)\n     {\n-      verbatim (\"(((\");\n+      /* Format punctuators via %s to avoid -Wformat-diag.  */\n+      verbatim (\"%s\", \"(((\");\n       debug (*i);\n-      verbatim (\")))\");\n+      verbatim (\"%s\", \")))\");\n     }\n }\n "}, {"sha": "837c0ea89af40f07fa164ff5193d9dbc70150c82", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -4613,7 +4613,8 @@ lookup_using_decl (tree scope, name_lookup &lookup)\n \t{\n \t  if (!TYPE_P (current))\n \t    {\n-\t      error (\"non-member using-decl names constructor of %qT\", scope);\n+\t      error (\"non-member using-declaration names constructor of %qT\",\n+\t\t     scope);\n \t      return NULL_TREE;\n \t    }\n \t  maybe_warn_cpp0x (CPP0X_INHERITING_CTORS);"}, {"sha": "d11900a7dd522fa39830891767ccbd91dd826be7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -9382,7 +9382,8 @@ maybe_add_cast_fixit (rich_location *rich_loc, location_t open_paren_loc,\n \n   /* Replace the open paren with \"CAST_SUGGESTION<\".  */\n   pretty_printer pp;\n-  pp_printf (&pp, \"%s<\", cast_suggestion);\n+  pp_string (&pp, cast_suggestion);\n+  pp_less (&pp);\n   rich_loc->add_fixit_replace (open_paren_loc, pp_formatted_text (&pp));\n \n   /* Replace the close paren with \"> (\".  */\n@@ -29750,7 +29751,8 @@ cp_parser_template_introduction (cp_parser* parser, bool member_p)\n     {\n       if (!flag_concepts_ts)\n \tpedwarn (introduction_loc, 0, \"template-introductions\"\n-\t\t \" are not part of C++20 concepts [-fconcepts-ts]\");\n+\t\t \" are not part of C++20 concepts; use %qs to enable\",\n+\t\t \"-fconcepts-ts\");\n \n       cp_parser_template_declaration_after_parameters (parser, parms,\n \t\t\t\t\t\t       member_p);"}, {"sha": "267b284ea40fad3c985ed520e7f7eab91ea19fc8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -2901,7 +2901,8 @@ access_failure_info::add_fixit_hint (rich_location *richloc,\n \t\t\t\t     tree accessor_decl)\n {\n   pretty_printer pp;\n-  pp_printf (&pp, \"%s()\", IDENTIFIER_POINTER (DECL_NAME (accessor_decl)));\n+  pp_string (&pp, IDENTIFIER_POINTER (DECL_NAME (accessor_decl)));\n+  pp_string (&pp, \"()\");\n   richloc->add_fixit_replace (pp_formatted_text (&pp));\n }\n "}, {"sha": "cd376ba1873b0b2cfd83b82aeef0e9c40164a355", "filename": "gcc/digraph.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fdigraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fdigraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdigraph.cc?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -67,7 +67,7 @@ struct test_edge : public dedge<test_graph_traits>\n \n   void dump_dot (graphviz_out *gv, const dump_args_t &) const OVERRIDE\n   {\n-    gv->println (\"%s -> %s;\", m_src->m_name, m_dest->m_name);\n+    gv->println (\"%s %s %s%c\", m_src->m_name, \"->\", m_dest->m_name, ';');\n   }\n };\n "}, {"sha": "80a65fe1ec35ab14adc02246b7e11952a677b1cb", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -492,6 +492,14 @@ dump_loc (dump_flags_t dump_kind, FILE *dfile, location_t loc)\n static void\n dump_loc (dump_flags_t dump_kind, pretty_printer *pp, location_t loc)\n {\n+  /* Disable warnings about missing quoting in GCC diagnostics for\n+     the pp_printf calls.  Their format strings aren't used to format\n+     diagnostics so don't need to follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n   if (dump_kind)\n     {\n       if (LOCATION_LOCUS (loc) > BUILTINS_LOCATION)\n@@ -507,6 +515,10 @@ dump_loc (dump_flags_t dump_kind, pretty_printer *pp, location_t loc)\n       for (unsigned i = 0; i < get_dump_scope_depth (); i++)\n \tpp_character (pp, ' ');\n     }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n }\n \n /* Implementation of dump_context member functions.  */\n@@ -1118,8 +1130,12 @@ dump_context::begin_scope (const char *name,\n   if (m_test_pp && apply_dump_filter_p (MSG_NOTE, m_test_pp_flags))\n     ::dump_loc (MSG_NOTE, m_test_pp, src_loc);\n \n+  /* Format multiple consecutive punctuation characters via %s to\n+     avoid -Wformat-diag in the pp_printf call below whose output\n+     isn't used for diagnostic output.  */\n   pretty_printer pp;\n-  pp_printf (&pp, \"=== %s ===\\n\", name);\n+  pp_printf (&pp, \"%s %s %s\", \"===\", name, \"===\");\n+  pp_newline (&pp);\n   optinfo_item *item\n     = new optinfo_item (OPTINFO_ITEM_KIND_TEXT, UNKNOWN_LOCATION,\n \t\t\txstrdup (pp_formatted_text (&pp)));"}, {"sha": "80641c2843b53fa2dc0f7ce7639fde0a6e976dfa", "filename": "gcc/edit-context.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fedit-context.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fedit-context.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fedit-context.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -447,8 +447,13 @@ edited_file::print_diff (pretty_printer *pp, bool show_filenames)\n   if (show_filenames)\n     {\n       pp_string (pp, colorize_start (pp_show_color (pp), \"diff-filename\"));\n-      pp_printf (pp, \"--- %s\\n\", m_filename);\n-      pp_printf (pp, \"+++ %s\\n\", m_filename);\n+      /* Avoid -Wformat-diag in non-diagnostic output.  */\n+      pp_string (pp, \"--- \");\n+      pp_string (pp, m_filename);\n+      pp_newline (pp);\n+      pp_string (pp, \"+++ \");\n+      pp_string (pp, m_filename);\n+      pp_newline (pp);\n       pp_string (pp, colorize_stop (pp_show_color (pp)));\n     }\n \n@@ -519,8 +524,9 @@ edited_file::print_diff_hunk (pretty_printer *pp, int old_start_of_hunk,\n     = get_effective_line_count (old_start_of_hunk, old_end_of_hunk);\n \n   pp_string (pp, colorize_start (pp_show_color (pp), \"diff-hunk\"));\n-  pp_printf (pp, \"@@ -%i,%i +%i,%i @@\\n\", old_start_of_hunk, old_num_lines,\n-\t     new_start_of_hunk, new_num_lines);\n+  pp_printf (pp, \"%s -%i,%i +%i,%i %s\",\n+\t     \"@@\", old_start_of_hunk, old_num_lines,\n+\t     new_start_of_hunk, new_num_lines, \"@@\\n\");\n   pp_string (pp, colorize_stop (pp_show_color (pp)));\n \n   int line_num = old_start_of_hunk;"}, {"sha": "a237d574fe58b41243712f8c5785f239c4e8a108", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -4038,8 +4038,8 @@ recording::function::dump_to_dot (const char *path)\n \n   pretty_printer *pp = &the_pp;\n \n-  pp_printf (pp,\n-\t     \"digraph %s {\\n\", get_debug_string ());\n+  pp_printf (pp, \"digraph %s\", get_debug_string ());\n+  pp_string (pp, \" {\\n\");\n \n   /* Blocks: */\n   {\n@@ -4057,7 +4057,7 @@ recording::function::dump_to_dot (const char *path)\n       b->dump_edges_to_dot (pp);\n   }\n \n-  pp_printf (pp, \"}\\n\");\n+  pp_string (pp, \"}\\n\");\n   pp_flush (pp);\n   fclose (fp);\n }\n@@ -4479,6 +4479,14 @@ recording::block::write_reproducer (reproducer &r)\n \t   m_name ? m_name->get_debug_string () : \"NULL\");\n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the pp_printf calls.  Their format strings deliberately don't\n+   follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Dump a block in graphviz form into PP, capturing the block name (if\n    any) and the statements.  */\n \n@@ -4507,7 +4515,7 @@ recording::block::dump_to_dot (pretty_printer *pp)\n       pp_write_text_as_dot_label_to_stream (pp, true /*for_record*/);\n     }\n \n-  pp_printf (pp,\n+  pp_string (pp,\n \t     \"}\\\"];\\n\\n\");\n   pp_flush (pp);\n }\n@@ -4527,6 +4535,10 @@ recording::block::dump_edges_to_dot (pretty_printer *pp)\n   successors.release ();\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n /* The implementation of class gcc::jit::recording::global.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into"}, {"sha": "70775d1c0af387dd74064df045af35f91319d691", "filename": "gcc/json.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -70,7 +70,10 @@ object::print (pretty_printer *pp) const\n \tpp_string (pp, \", \");\n       const char *key = const_cast <char *>((*it).first);\n       value *value = (*it).second;\n-      pp_printf (pp, \"\\\"%s\\\": \", key); // FIXME: escaping?\n+      pp_doublequote (pp);\n+      pp_string (pp, key); // FIXME: escaping?\n+      pp_doublequote (pp);\n+      pp_string (pp, \": \");\n       value->print (pp);\n     }\n   pp_character (pp, '}');"}, {"sha": "68ccb1565219a4c0ec6adf54778182358252a792", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -323,8 +323,9 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t\t  if (cf_protection_option\n \t\t      && cf_protection_option->value == CF_CHECK)\n \t\t    fatal_error (input_location,\n-\t\t\t\t \"option -fcf-protection with mismatching values\"\n+\t\t\t\t \"option %qs with mismatching values\"\n \t\t\t\t \" (%s, %s)\",\n+\t\t\t\t \"-fcf-protection\",\n \t\t\t\t (*decoded_options)[j].arg, foption->arg);\n \t\t  else\n \t\t    {"}, {"sha": "a63cc02d4b3f522eda5f62b0184bf301ee55a39e", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -2665,7 +2665,7 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n       if (i < recog_data.n_operands)\n \t{\n \t  error_for_asm (insn,\n-\t\t\t \"the target does not support asm goto \"\n+\t\t\t \"the target does not support %<asm goto%> \"\n \t\t\t \"with outputs in %<asm%>\");\n \t  ira_nullify_asm_goto (insn);\n \t  return 0;"}, {"sha": "c3ef54d32073861ca4415b31de9e99874129a94b", "filename": "gcc/testsuite/c-c++-common/patchable_function_entry-error-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-error-3.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -3,15 +3,15 @@\n \n void\n  __attribute__((patchable_function_entry(65536)))\n-foo1 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+foo1 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' exceeds 65535\" } */\n }\n \n void\n  __attribute__((patchable_function_entry(65536,1)))\n-foo2 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+foo2 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' exceeds 65535\" } */\n }\n \n void\n  __attribute__((patchable_function_entry(65536,65536)))\n-foo3 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' is out of range\" } */\n+foo3 (void) { /* { dg-warning \"'patchable_function_entry' attribute argument '65536' exceeds 65535\" } */\n }"}, {"sha": "b4fef2bea6f9ec4106402a27f569532551d509dd", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -411,7 +411,7 @@ print_path_summary_as_text (const path_summary *ps, diagnostic_context *dc,\n \n \t\t  write_indent (pp, vbar_for_next_frame);\n \t\t  pp_string (pp, start_line_color);\n-\t\t  pp_printf (pp, \"|\");\n+\t\t  pp_character (pp, '|');\n \t\t  pp_string (pp, end_line_color);\n \t\t  pp_newline (pp);\n \t\t}\n@@ -520,6 +520,13 @@ default_tree_make_json_for_path (diagnostic_context *context,\n \n #if CHECKING_P\n \n+/* Disable warnings about missing quoting in GCC diagnostics for the print\n+   calls in the tests below.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n namespace selftest {\n \n /* A subclass of simple_diagnostic_path that adds member functions\n@@ -814,4 +821,8 @@ tree_diagnostic_path_cc_tests ()\n \n } // namespace selftest\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n #endif /* #if CHECKING_P */"}, {"sha": "4c14a386a0e0bba118003eabf1078b19a060631a", "filename": "gcc/ubsan.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca23341b28cd3af7985b83a6479107d9ea145a90/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=ca23341b28cd3af7985b83a6479107d9ea145a90", "patch": "@@ -405,10 +405,12 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n     /* We weren't able to determine the type name.  */\n     tname = \"<unknown>\";\n \n+  pp_quote (&pretty_name);\n+\n   tree eltype = type;\n   if (pstyle == UBSAN_PRINT_POINTER)\n     {\n-      pp_printf (&pretty_name, \"'%s%s%s%s%s%s%s\",\n+      pp_printf (&pretty_name, \"%s%s%s%s%s%s%s\",\n \t\t TYPE_VOLATILE (type2) ? \"volatile \" : \"\",\n \t\t TYPE_READONLY (type2) ? \"const \" : \"\",\n \t\t TYPE_RESTRICT (type2) ? \"restrict \" : \"\",\n@@ -420,14 +422,14 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n \t\t deref_depth == 0 ? \"\" : \" \");\n       while (deref_depth-- > 0)\n \tpp_star (&pretty_name);\n-      pp_quote (&pretty_name);\n     }\n   else if (pstyle == UBSAN_PRINT_ARRAY)\n     {\n       /* Pretty print the array dimensions.  */\n       gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n       tree t = type;\n-      pp_printf (&pretty_name, \"'%s \", tname);\n+      pp_string (&pretty_name, tname);\n+      pp_space (&pretty_name);\n       while (deref_depth-- > 0)\n \tpp_star (&pretty_name);\n       while (TREE_CODE (t) == ARRAY_TYPE)\n@@ -453,13 +455,14 @@ ubsan_type_descriptor (tree type, enum ubsan_print_style pstyle)\n \t  pp_right_bracket (&pretty_name);\n \t  t = TREE_TYPE (t);\n \t}\n-      pp_quote (&pretty_name);\n \n       /* Save the tree with stripped types.  */\n       eltype = t;\n     }\n   else\n-    pp_printf (&pretty_name, \"'%s'\", tname);\n+    pp_string (&pretty_name, tname);\n+\n+  pp_quote (&pretty_name);\n \n   switch (TREE_CODE (eltype))\n     {"}]}