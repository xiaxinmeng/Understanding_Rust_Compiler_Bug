{"sha": "8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViM2I2YjljZjJlMjg1NDUwZmM1ZWZjOThhNjNjZjcxN2QyYjAwMg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T16:58:10Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T16:58:10Z"}, "message": "[ARM][GCC][2/4x]: MVE intrinsics with quaternary operands.\n\nThis patch supports following MVE ACLE intrinsics with quaternary operands.\n\nvabdq_m_s8, vabdq_m_s32, vabdq_m_s16, vabdq_m_u8, vabdq_m_u32, vabdq_m_u16, vaddq_m_n_s8, vaddq_m_n_s32, vaddq_m_n_s16, vaddq_m_n_u8, vaddq_m_n_u32, vaddq_m_n_u16, vaddq_m_s8, vaddq_m_s32, vaddq_m_s16, vaddq_m_u8, vaddq_m_u32, vaddq_m_u16, vandq_m_s8, vandq_m_s32, vandq_m_s16, vandq_m_u8, vandq_m_u32, vandq_m_u16, vbicq_m_s8, vbicq_m_s32, vbicq_m_s16, vbicq_m_u8, vbicq_m_u32, vbicq_m_u16, vbrsrq_m_n_s8, vbrsrq_m_n_s32, vbrsrq_m_n_s16, vbrsrq_m_n_u8, vbrsrq_m_n_u32, vbrsrq_m_n_u16, vcaddq_rot270_m_s8, vcaddq_rot270_m_s32, vcaddq_rot270_m_s16, vcaddq_rot270_m_u8, vcaddq_rot270_m_u32, vcaddq_rot270_m_u16, vcaddq_rot90_m_s8, vcaddq_rot90_m_s32, vcaddq_rot90_m_s16, vcaddq_rot90_m_u8, vcaddq_rot90_m_u32, vcaddq_rot90_m_u16, veorq_m_s8, veorq_m_s32, veorq_m_s16, veorq_m_u8, veorq_m_u32, veorq_m_u16, vhaddq_m_n_s8, vhaddq_m_n_s32, vhaddq_m_n_s16, vhaddq_m_n_u8, vhaddq_m_n_u32, vhaddq_m_n_u16, vhaddq_m_s8, vhaddq_m_s32, vhaddq_m_s16, vhaddq_m_u8, vhaddq_m_u32, vhaddq_m_u16, vhcaddq_rot270_m_s8, vhcaddq_rot270_m_s32, vhcaddq_rot270_m_s16, vhcaddq_rot90_m_s8, vhcaddq_rot90_m_s32, vhcaddq_rot90_m_s16, vhsubq_m_n_s8, vhsubq_m_n_s32, vhsubq_m_n_s16, vhsubq_m_n_u8, vhsubq_m_n_u32, vhsubq_m_n_u16, vhsubq_m_s8, vhsubq_m_s32, vhsubq_m_s16, vhsubq_m_u8, vhsubq_m_u32, vhsubq_m_u16, vmaxq_m_s8, vmaxq_m_s32, vmaxq_m_s16, vmaxq_m_u8, vmaxq_m_u32, vmaxq_m_u16, vminq_m_s8, vminq_m_s32, vminq_m_s16, vminq_m_u8, vminq_m_u32, vminq_m_u16, vmladavaq_p_s8, vmladavaq_p_s32, vmladavaq_p_s16, vmladavaq_p_u8, vmladavaq_p_u32, vmladavaq_p_u16, vmladavaxq_p_s8, vmladavaxq_p_s32, vmladavaxq_p_s16, vmlaq_m_n_s8, vmlaq_m_n_s32, vmlaq_m_n_s16, vmlaq_m_n_u8, vmlaq_m_n_u32, vmlaq_m_n_u16, vmlasq_m_n_s8, vmlasq_m_n_s32, vmlasq_m_n_s16, vmlasq_m_n_u8, vmlasq_m_n_u32, vmlasq_m_n_u16, vmlsdavaq_p_s8, vmlsdavaq_p_s32, vmlsdavaq_p_s16, vmlsdavaxq_p_s8, vmlsdavaxq_p_s32, vmlsdavaxq_p_s16, vmulhq_m_s8, vmulhq_m_s32, vmulhq_m_s16, vmulhq_m_u8, vmulhq_m_u32, vmulhq_m_u16, vmullbq_int_m_s8, vmullbq_int_m_s32, vmullbq_int_m_s16, vmullbq_int_m_u8, vmullbq_int_m_u32, vmullbq_int_m_u16, vmulltq_int_m_s8, vmulltq_int_m_s32, vmulltq_int_m_s16, vmulltq_int_m_u8, vmulltq_int_m_u32, vmulltq_int_m_u16, vmulq_m_n_s8, vmulq_m_n_s32, vmulq_m_n_s16, vmulq_m_n_u8, vmulq_m_n_u32, vmulq_m_n_u16, vmulq_m_s8, vmulq_m_s32, vmulq_m_s16, vmulq_m_u8, vmulq_m_u32, vmulq_m_u16, vornq_m_s8, vornq_m_s32, vornq_m_s16, vornq_m_u8, vornq_m_u32, vornq_m_u16, vorrq_m_s8, vorrq_m_s32, vorrq_m_s16, vorrq_m_u8, vorrq_m_u32, vorrq_m_u16, vqaddq_m_n_s8, vqaddq_m_n_s32, vqaddq_m_n_s16, vqaddq_m_n_u8, vqaddq_m_n_u32, vqaddq_m_n_u16, vqaddq_m_s8, vqaddq_m_s32, vqaddq_m_s16, vqaddq_m_u8, vqaddq_m_u32, vqaddq_m_u16, vqdmladhq_m_s8, vqdmladhq_m_s32, vqdmladhq_m_s16, vqdmladhxq_m_s8, vqdmladhxq_m_s32, vqdmladhxq_m_s16, vqdmlahq_m_n_s8, vqdmlahq_m_n_s32, vqdmlahq_m_n_s16, vqdmlahq_m_n_u8, vqdmlahq_m_n_u32, vqdmlahq_m_n_u16, vqdmlsdhq_m_s8, vqdmlsdhq_m_s32, vqdmlsdhq_m_s16, vqdmlsdhxq_m_s8, vqdmlsdhxq_m_s32, vqdmlsdhxq_m_s16, vqdmulhq_m_n_s8, vqdmulhq_m_n_s32, vqdmulhq_m_n_s16, vqdmulhq_m_s8, vqdmulhq_m_s32, vqdmulhq_m_s16, vqrdmladhq_m_s8, vqrdmladhq_m_s32, vqrdmladhq_m_s16, vqrdmladhxq_m_s8, vqrdmladhxq_m_s32, vqrdmladhxq_m_s16, vqrdmlahq_m_n_s8, vqrdmlahq_m_n_s32, vqrdmlahq_m_n_s16, vqrdmlahq_m_n_u8, vqrdmlahq_m_n_u32, vqrdmlahq_m_n_u16, vqrdmlashq_m_n_s8, vqrdmlashq_m_n_s32, vqrdmlashq_m_n_s16, vqrdmlashq_m_n_u8, vqrdmlashq_m_n_u32, vqrdmlashq_m_n_u16, vqrdmlsdhq_m_s8, vqrdmlsdhq_m_s32, vqrdmlsdhq_m_s16, vqrdmlsdhxq_m_s8, vqrdmlsdhxq_m_s32, vqrdmlsdhxq_m_s16, vqrdmulhq_m_n_s8, vqrdmulhq_m_n_s32, vqrdmulhq_m_n_s16, vqrdmulhq_m_s8, vqrdmulhq_m_s32, vqrdmulhq_m_s16, vqrshlq_m_s8, vqrshlq_m_s32, vqrshlq_m_s16, vqrshlq_m_u8, vqrshlq_m_u32, vqrshlq_m_u16, vqshlq_m_n_s8, vqshlq_m_n_s32, vqshlq_m_n_s16, vqshlq_m_n_u8, vqshlq_m_n_u32, vqshlq_m_n_u16, vqshlq_m_s8, vqshlq_m_s32, vqshlq_m_s16, vqshlq_m_u8, vqshlq_m_u32, vqshlq_m_u16, vqsubq_m_n_s8, vqsubq_m_n_s32, vqsubq_m_n_s16, vqsubq_m_n_u8, vqsubq_m_n_u32, vqsubq_m_n_u16, vqsubq_m_s8, vqsubq_m_s32, vqsubq_m_s16, vqsubq_m_u8, vqsubq_m_u32, vqsubq_m_u16, vrhaddq_m_s8, vrhaddq_m_s32, vrhaddq_m_s16, vrhaddq_m_u8, vrhaddq_m_u32, vrhaddq_m_u16, vrmulhq_m_s8, vrmulhq_m_s32, vrmulhq_m_s16, vrmulhq_m_u8, vrmulhq_m_u32, vrmulhq_m_u16, vrshlq_m_s8, vrshlq_m_s32, vrshlq_m_s16, vrshlq_m_u8, vrshlq_m_u32, vrshlq_m_u16, vrshrq_m_n_s8, vrshrq_m_n_s32, vrshrq_m_n_s16, vrshrq_m_n_u8, vrshrq_m_n_u32, vrshrq_m_n_u16, vshlq_m_n_s8, vshlq_m_n_s32, vshlq_m_n_s16, vshlq_m_n_u8, vshlq_m_n_u32, vshlq_m_n_u16, vshrq_m_n_s8, vshrq_m_n_s32, vshrq_m_n_s16, vshrq_m_n_u8, vshrq_m_n_u32, vshrq_m_n_u16, vsliq_m_n_s8, vsliq_m_n_s32, vsliq_m_n_s16, vsliq_m_n_u8, vsliq_m_n_u32, vsliq_m_n_u16, vsubq_m_n_s8, vsubq_m_n_s32, vsubq_m_n_s16, vsubq_m_n_u8, vsubq_m_n_u32, vsubq_m_n_u16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vabdq_m_s8): Define macro.\n\t(vabdq_m_s32): Likewise.\n\t(vabdq_m_s16): Likewise.\n\t(vabdq_m_u8): Likewise.\n\t(vabdq_m_u32): Likewise.\n\t(vabdq_m_u16): Likewise.\n\t(vaddq_m_n_s8): Likewise.\n\t(vaddq_m_n_s32): Likewise.\n\t(vaddq_m_n_s16): Likewise.\n\t(vaddq_m_n_u8): Likewise.\n\t(vaddq_m_n_u32): Likewise.\n\t(vaddq_m_n_u16): Likewise.\n\t(vaddq_m_s8): Likewise.\n\t(vaddq_m_s32): Likewise.\n\t(vaddq_m_s16): Likewise.\n\t(vaddq_m_u8): Likewise.\n\t(vaddq_m_u32): Likewise.\n\t(vaddq_m_u16): Likewise.\n\t(vandq_m_s8): Likewise.\n\t(vandq_m_s32): Likewise.\n\t(vandq_m_s16): Likewise.\n\t(vandq_m_u8): Likewise.\n\t(vandq_m_u32): Likewise.\n\t(vandq_m_u16): Likewise.\n\t(vbicq_m_s8): Likewise.\n\t(vbicq_m_s32): Likewise.\n\t(vbicq_m_s16): Likewise.\n\t(vbicq_m_u8): Likewise.\n\t(vbicq_m_u32): Likewise.\n\t(vbicq_m_u16): Likewise.\n\t(vbrsrq_m_n_s8): Likewise.\n\t(vbrsrq_m_n_s32): Likewise.\n\t(vbrsrq_m_n_s16): Likewise.\n\t(vbrsrq_m_n_u8): Likewise.\n\t(vbrsrq_m_n_u32): Likewise.\n\t(vbrsrq_m_n_u16): Likewise.\n\t(vcaddq_rot270_m_s8): Likewise.\n\t(vcaddq_rot270_m_s32): Likewise.\n\t(vcaddq_rot270_m_s16): Likewise.\n\t(vcaddq_rot270_m_u8): Likewise.\n\t(vcaddq_rot270_m_u32): Likewise.\n\t(vcaddq_rot270_m_u16): Likewise.\n\t(vcaddq_rot90_m_s8): Likewise.\n\t(vcaddq_rot90_m_s32): Likewise.\n\t(vcaddq_rot90_m_s16): Likewise.\n\t(vcaddq_rot90_m_u8): Likewise.\n\t(vcaddq_rot90_m_u32): Likewise.\n\t(vcaddq_rot90_m_u16): Likewise.\n\t(veorq_m_s8): Likewise.\n\t(veorq_m_s32): Likewise.\n\t(veorq_m_s16): Likewise.\n\t(veorq_m_u8): Likewise.\n\t(veorq_m_u32): Likewise.\n\t(veorq_m_u16): Likewise.\n\t(vhaddq_m_n_s8): Likewise.\n\t(vhaddq_m_n_s32): Likewise.\n\t(vhaddq_m_n_s16): Likewise.\n\t(vhaddq_m_n_u8): Likewise.\n\t(vhaddq_m_n_u32): Likewise.\n\t(vhaddq_m_n_u16): Likewise.\n\t(vhaddq_m_s8): Likewise.\n\t(vhaddq_m_s32): Likewise.\n\t(vhaddq_m_s16): Likewise.\n\t(vhaddq_m_u8): Likewise.\n\t(vhaddq_m_u32): Likewise.\n\t(vhaddq_m_u16): Likewise.\n\t(vhcaddq_rot270_m_s8): Likewise.\n\t(vhcaddq_rot270_m_s32): Likewise.\n\t(vhcaddq_rot270_m_s16): Likewise.\n\t(vhcaddq_rot90_m_s8): Likewise.\n\t(vhcaddq_rot90_m_s32): Likewise.\n\t(vhcaddq_rot90_m_s16): Likewise.\n\t(vhsubq_m_n_s8): Likewise.\n\t(vhsubq_m_n_s32): Likewise.\n\t(vhsubq_m_n_s16): Likewise.\n\t(vhsubq_m_n_u8): Likewise.\n\t(vhsubq_m_n_u32): Likewise.\n\t(vhsubq_m_n_u16): Likewise.\n\t(vhsubq_m_s8): Likewise.\n\t(vhsubq_m_s32): Likewise.\n\t(vhsubq_m_s16): Likewise.\n\t(vhsubq_m_u8): Likewise.\n\t(vhsubq_m_u32): Likewise.\n\t(vhsubq_m_u16): Likewise.\n\t(vmaxq_m_s8): Likewise.\n\t(vmaxq_m_s32): Likewise.\n\t(vmaxq_m_s16): Likewise.\n\t(vmaxq_m_u8): Likewise.\n\t(vmaxq_m_u32): Likewise.\n\t(vmaxq_m_u16): Likewise.\n\t(vminq_m_s8): Likewise.\n\t(vminq_m_s32): Likewise.\n\t(vminq_m_s16): Likewise.\n\t(vminq_m_u8): Likewise.\n\t(vminq_m_u32): Likewise.\n\t(vminq_m_u16): Likewise.\n\t(vmladavaq_p_s8): Likewise.\n\t(vmladavaq_p_s32): Likewise.\n\t(vmladavaq_p_s16): Likewise.\n\t(vmladavaq_p_u8): Likewise.\n\t(vmladavaq_p_u32): Likewise.\n\t(vmladavaq_p_u16): Likewise.\n\t(vmladavaxq_p_s8): Likewise.\n\t(vmladavaxq_p_s32): Likewise.\n\t(vmladavaxq_p_s16): Likewise.\n\t(vmlaq_m_n_s8): Likewise.\n\t(vmlaq_m_n_s32): Likewise.\n\t(vmlaq_m_n_s16): Likewise.\n\t(vmlaq_m_n_u8): Likewise.\n\t(vmlaq_m_n_u32): Likewise.\n\t(vmlaq_m_n_u16): Likewise.\n\t(vmlasq_m_n_s8): Likewise.\n\t(vmlasq_m_n_s32): Likewise.\n\t(vmlasq_m_n_s16): Likewise.\n\t(vmlasq_m_n_u8): Likewise.\n\t(vmlasq_m_n_u32): Likewise.\n\t(vmlasq_m_n_u16): Likewise.\n\t(vmlsdavaq_p_s8): Likewise.\n\t(vmlsdavaq_p_s32): Likewise.\n\t(vmlsdavaq_p_s16): Likewise.\n\t(vmlsdavaxq_p_s8): Likewise.\n\t(vmlsdavaxq_p_s32): Likewise.\n\t(vmlsdavaxq_p_s16): Likewise.\n\t(vmulhq_m_s8): Likewise.\n\t(vmulhq_m_s32): Likewise.\n\t(vmulhq_m_s16): Likewise.\n\t(vmulhq_m_u8): Likewise.\n\t(vmulhq_m_u32): Likewise.\n\t(vmulhq_m_u16): Likewise.\n\t(vmullbq_int_m_s8): Likewise.\n\t(vmullbq_int_m_s32): Likewise.\n\t(vmullbq_int_m_s16): Likewise.\n\t(vmullbq_int_m_u8): Likewise.\n\t(vmullbq_int_m_u32): Likewise.\n\t(vmullbq_int_m_u16): Likewise.\n\t(vmulltq_int_m_s8): Likewise.\n\t(vmulltq_int_m_s32): Likewise.\n\t(vmulltq_int_m_s16): Likewise.\n\t(vmulltq_int_m_u8): Likewise.\n\t(vmulltq_int_m_u32): Likewise.\n\t(vmulltq_int_m_u16): Likewise.\n\t(vmulq_m_n_s8): Likewise.\n\t(vmulq_m_n_s32): Likewise.\n\t(vmulq_m_n_s16): Likewise.\n\t(vmulq_m_n_u8): Likewise.\n\t(vmulq_m_n_u32): Likewise.\n\t(vmulq_m_n_u16): Likewise.\n\t(vmulq_m_s8): Likewise.\n\t(vmulq_m_s32): Likewise.\n\t(vmulq_m_s16): Likewise.\n\t(vmulq_m_u8): Likewise.\n\t(vmulq_m_u32): Likewise.\n\t(vmulq_m_u16): Likewise.\n\t(vornq_m_s8): Likewise.\n\t(vornq_m_s32): Likewise.\n\t(vornq_m_s16): Likewise.\n\t(vornq_m_u8): Likewise.\n\t(vornq_m_u32): Likewise.\n\t(vornq_m_u16): Likewise.\n\t(vorrq_m_s8): Likewise.\n\t(vorrq_m_s32): Likewise.\n\t(vorrq_m_s16): Likewise.\n\t(vorrq_m_u8): Likewise.\n\t(vorrq_m_u32): Likewise.\n\t(vorrq_m_u16): Likewise.\n\t(vqaddq_m_n_s8): Likewise.\n\t(vqaddq_m_n_s32): Likewise.\n\t(vqaddq_m_n_s16): Likewise.\n\t(vqaddq_m_n_u8): Likewise.\n\t(vqaddq_m_n_u32): Likewise.\n\t(vqaddq_m_n_u16): Likewise.\n\t(vqaddq_m_s8): Likewise.\n\t(vqaddq_m_s32): Likewise.\n\t(vqaddq_m_s16): Likewise.\n\t(vqaddq_m_u8): Likewise.\n\t(vqaddq_m_u32): Likewise.\n\t(vqaddq_m_u16): Likewise.\n\t(vqdmladhq_m_s8): Likewise.\n\t(vqdmladhq_m_s32): Likewise.\n\t(vqdmladhq_m_s16): Likewise.\n\t(vqdmladhxq_m_s8): Likewise.\n\t(vqdmladhxq_m_s32): Likewise.\n\t(vqdmladhxq_m_s16): Likewise.\n\t(vqdmlahq_m_n_s8): Likewise.\n\t(vqdmlahq_m_n_s32): Likewise.\n\t(vqdmlahq_m_n_s16): Likewise.\n\t(vqdmlahq_m_n_u8): Likewise.\n\t(vqdmlahq_m_n_u32): Likewise.\n\t(vqdmlahq_m_n_u16): Likewise.\n\t(vqdmlsdhq_m_s8): Likewise.\n\t(vqdmlsdhq_m_s32): Likewise.\n\t(vqdmlsdhq_m_s16): Likewise.\n\t(vqdmlsdhxq_m_s8): Likewise.\n\t(vqdmlsdhxq_m_s32): Likewise.\n\t(vqdmlsdhxq_m_s16): Likewise.\n\t(vqdmulhq_m_n_s8): Likewise.\n\t(vqdmulhq_m_n_s32): Likewise.\n\t(vqdmulhq_m_n_s16): Likewise.\n\t(vqdmulhq_m_s8): Likewise.\n\t(vqdmulhq_m_s32): Likewise.\n\t(vqdmulhq_m_s16): Likewise.\n\t(vqrdmladhq_m_s8): Likewise.\n\t(vqrdmladhq_m_s32): Likewise.\n\t(vqrdmladhq_m_s16): Likewise.\n\t(vqrdmladhxq_m_s8): Likewise.\n\t(vqrdmladhxq_m_s32): Likewise.\n\t(vqrdmladhxq_m_s16): Likewise.\n\t(vqrdmlahq_m_n_s8): Likewise.\n\t(vqrdmlahq_m_n_s32): Likewise.\n\t(vqrdmlahq_m_n_s16): Likewise.\n\t(vqrdmlahq_m_n_u8): Likewise.\n\t(vqrdmlahq_m_n_u32): Likewise.\n\t(vqrdmlahq_m_n_u16): Likewise.\n\t(vqrdmlashq_m_n_s8): Likewise.\n\t(vqrdmlashq_m_n_s32): Likewise.\n\t(vqrdmlashq_m_n_s16): Likewise.\n\t(vqrdmlashq_m_n_u8): Likewise.\n\t(vqrdmlashq_m_n_u32): Likewise.\n\t(vqrdmlashq_m_n_u16): Likewise.\n\t(vqrdmlsdhq_m_s8): Likewise.\n\t(vqrdmlsdhq_m_s32): Likewise.\n\t(vqrdmlsdhq_m_s16): Likewise.\n\t(vqrdmlsdhxq_m_s8): Likewise.\n\t(vqrdmlsdhxq_m_s32): Likewise.\n\t(vqrdmlsdhxq_m_s16): Likewise.\n\t(vqrdmulhq_m_n_s8): Likewise.\n\t(vqrdmulhq_m_n_s32): Likewise.\n\t(vqrdmulhq_m_n_s16): Likewise.\n\t(vqrdmulhq_m_s8): Likewise.\n\t(vqrdmulhq_m_s32): Likewise.\n\t(vqrdmulhq_m_s16): Likewise.\n\t(vqrshlq_m_s8): Likewise.\n\t(vqrshlq_m_s32): Likewise.\n\t(vqrshlq_m_s16): Likewise.\n\t(vqrshlq_m_u8): Likewise.\n\t(vqrshlq_m_u32): Likewise.\n\t(vqrshlq_m_u16): Likewise.\n\t(vqshlq_m_n_s8): Likewise.\n\t(vqshlq_m_n_s32): Likewise.\n\t(vqshlq_m_n_s16): Likewise.\n\t(vqshlq_m_n_u8): Likewise.\n\t(vqshlq_m_n_u32): Likewise.\n\t(vqshlq_m_n_u16): Likewise.\n\t(vqshlq_m_s8): Likewise.\n\t(vqshlq_m_s32): Likewise.\n\t(vqshlq_m_s16): Likewise.\n\t(vqshlq_m_u8): Likewise.\n\t(vqshlq_m_u32): Likewise.\n\t(vqshlq_m_u16): Likewise.\n\t(vqsubq_m_n_s8): Likewise.\n\t(vqsubq_m_n_s32): Likewise.\n\t(vqsubq_m_n_s16): Likewise.\n\t(vqsubq_m_n_u8): Likewise.\n\t(vqsubq_m_n_u32): Likewise.\n\t(vqsubq_m_n_u16): Likewise.\n\t(vqsubq_m_s8): Likewise.\n\t(vqsubq_m_s32): Likewise.\n\t(vqsubq_m_s16): Likewise.\n\t(vqsubq_m_u8): Likewise.\n\t(vqsubq_m_u32): Likewise.\n\t(vqsubq_m_u16): Likewise.\n\t(vrhaddq_m_s8): Likewise.\n\t(vrhaddq_m_s32): Likewise.\n\t(vrhaddq_m_s16): Likewise.\n\t(vrhaddq_m_u8): Likewise.\n\t(vrhaddq_m_u32): Likewise.\n\t(vrhaddq_m_u16): Likewise.\n\t(vrmulhq_m_s8): Likewise.\n\t(vrmulhq_m_s32): Likewise.\n\t(vrmulhq_m_s16): Likewise.\n\t(vrmulhq_m_u8): Likewise.\n\t(vrmulhq_m_u32): Likewise.\n\t(vrmulhq_m_u16): Likewise.\n\t(vrshlq_m_s8): Likewise.\n\t(vrshlq_m_s32): Likewise.\n\t(vrshlq_m_s16): Likewise.\n\t(vrshlq_m_u8): Likewise.\n\t(vrshlq_m_u32): Likewise.\n\t(vrshlq_m_u16): Likewise.\n\t(vrshrq_m_n_s8): Likewise.\n\t(vrshrq_m_n_s32): Likewise.\n\t(vrshrq_m_n_s16): Likewise.\n\t(vrshrq_m_n_u8): Likewise.\n\t(vrshrq_m_n_u32): Likewise.\n\t(vrshrq_m_n_u16): Likewise.\n\t(vshlq_m_n_s8): Likewise.\n\t(vshlq_m_n_s32): Likewise.\n\t(vshlq_m_n_s16): Likewise.\n\t(vshlq_m_n_u8): Likewise.\n\t(vshlq_m_n_u32): Likewise.\n\t(vshlq_m_n_u16): Likewise.\n\t(vshrq_m_n_s8): Likewise.\n\t(vshrq_m_n_s32): Likewise.\n\t(vshrq_m_n_s16): Likewise.\n\t(vshrq_m_n_u8): Likewise.\n\t(vshrq_m_n_u32): Likewise.\n\t(vshrq_m_n_u16): Likewise.\n\t(vsliq_m_n_s8): Likewise.\n\t(vsliq_m_n_s32): Likewise.\n\t(vsliq_m_n_s16): Likewise.\n\t(vsliq_m_n_u8): Likewise.\n\t(vsliq_m_n_u32): Likewise.\n\t(vsliq_m_n_u16): Likewise.\n\t(vsubq_m_n_s8): Likewise.\n\t(vsubq_m_n_s32): Likewise.\n\t(vsubq_m_n_s16): Likewise.\n\t(vsubq_m_n_u8): Likewise.\n\t(vsubq_m_n_u32): Likewise.\n\t(vsubq_m_n_u16): Likewise.\n\t(__arm_vabdq_m_s8): Define intrinsic.\n\t(__arm_vabdq_m_s32): Likewise.\n\t(__arm_vabdq_m_s16): Likewise.\n\t(__arm_vabdq_m_u8): Likewise.\n\t(__arm_vabdq_m_u32): Likewise.\n\t(__arm_vabdq_m_u16): Likewise.\n\t(__arm_vaddq_m_n_s8): Likewise.\n\t(__arm_vaddq_m_n_s32): Likewise.\n\t(__arm_vaddq_m_n_s16): Likewise.\n\t(__arm_vaddq_m_n_u8): Likewise.\n\t(__arm_vaddq_m_n_u32): Likewise.\n\t(__arm_vaddq_m_n_u16): Likewise.\n\t(__arm_vaddq_m_s8): Likewise.\n\t(__arm_vaddq_m_s32): Likewise.\n\t(__arm_vaddq_m_s16): Likewise.\n\t(__arm_vaddq_m_u8): Likewise.\n\t(__arm_vaddq_m_u32): Likewise.\n\t(__arm_vaddq_m_u16): Likewise.\n\t(__arm_vandq_m_s8): Likewise.\n\t(__arm_vandq_m_s32): Likewise.\n\t(__arm_vandq_m_s16): Likewise.\n\t(__arm_vandq_m_u8): Likewise.\n\t(__arm_vandq_m_u32): Likewise.\n\t(__arm_vandq_m_u16): Likewise.\n\t(__arm_vbicq_m_s8): Likewise.\n\t(__arm_vbicq_m_s32): Likewise.\n\t(__arm_vbicq_m_s16): Likewise.\n\t(__arm_vbicq_m_u8): Likewise.\n\t(__arm_vbicq_m_u32): Likewise.\n\t(__arm_vbicq_m_u16): Likewise.\n\t(__arm_vbrsrq_m_n_s8): Likewise.\n\t(__arm_vbrsrq_m_n_s32): Likewise.\n\t(__arm_vbrsrq_m_n_s16): Likewise.\n\t(__arm_vbrsrq_m_n_u8): Likewise.\n\t(__arm_vbrsrq_m_n_u32): Likewise.\n\t(__arm_vbrsrq_m_n_u16): Likewise.\n\t(__arm_vcaddq_rot270_m_s8): Likewise.\n\t(__arm_vcaddq_rot270_m_s32): Likewise.\n\t(__arm_vcaddq_rot270_m_s16): Likewise.\n\t(__arm_vcaddq_rot270_m_u8): Likewise.\n\t(__arm_vcaddq_rot270_m_u32): Likewise.\n\t(__arm_vcaddq_rot270_m_u16): Likewise.\n\t(__arm_vcaddq_rot90_m_s8): Likewise.\n\t(__arm_vcaddq_rot90_m_s32): Likewise.\n\t(__arm_vcaddq_rot90_m_s16): Likewise.\n\t(__arm_vcaddq_rot90_m_u8): Likewise.\n\t(__arm_vcaddq_rot90_m_u32): Likewise.\n\t(__arm_vcaddq_rot90_m_u16): Likewise.\n\t(__arm_veorq_m_s8): Likewise.\n\t(__arm_veorq_m_s32): Likewise.\n\t(__arm_veorq_m_s16): Likewise.\n\t(__arm_veorq_m_u8): Likewise.\n\t(__arm_veorq_m_u32): Likewise.\n\t(__arm_veorq_m_u16): Likewise.\n\t(__arm_vhaddq_m_n_s8): Likewise.\n\t(__arm_vhaddq_m_n_s32): Likewise.\n\t(__arm_vhaddq_m_n_s16): Likewise.\n\t(__arm_vhaddq_m_n_u8): Likewise.\n\t(__arm_vhaddq_m_n_u32): Likewise.\n\t(__arm_vhaddq_m_n_u16): Likewise.\n\t(__arm_vhaddq_m_s8): Likewise.\n\t(__arm_vhaddq_m_s32): Likewise.\n\t(__arm_vhaddq_m_s16): Likewise.\n\t(__arm_vhaddq_m_u8): Likewise.\n\t(__arm_vhaddq_m_u32): Likewise.\n\t(__arm_vhaddq_m_u16): Likewise.\n\t(__arm_vhcaddq_rot270_m_s8): Likewise.\n\t(__arm_vhcaddq_rot270_m_s32): Likewise.\n\t(__arm_vhcaddq_rot270_m_s16): Likewise.\n\t(__arm_vhcaddq_rot90_m_s8): Likewise.\n\t(__arm_vhcaddq_rot90_m_s32): Likewise.\n\t(__arm_vhcaddq_rot90_m_s16): Likewise.\n\t(__arm_vhsubq_m_n_s8): Likewise.\n\t(__arm_vhsubq_m_n_s32): Likewise.\n\t(__arm_vhsubq_m_n_s16): Likewise.\n\t(__arm_vhsubq_m_n_u8): Likewise.\n\t(__arm_vhsubq_m_n_u32): Likewise.\n\t(__arm_vhsubq_m_n_u16): Likewise.\n\t(__arm_vhsubq_m_s8): Likewise.\n\t(__arm_vhsubq_m_s32): Likewise.\n\t(__arm_vhsubq_m_s16): Likewise.\n\t(__arm_vhsubq_m_u8): Likewise.\n\t(__arm_vhsubq_m_u32): Likewise.\n\t(__arm_vhsubq_m_u16): Likewise.\n\t(__arm_vmaxq_m_s8): Likewise.\n\t(__arm_vmaxq_m_s32): Likewise.\n\t(__arm_vmaxq_m_s16): Likewise.\n\t(__arm_vmaxq_m_u8): Likewise.\n\t(__arm_vmaxq_m_u32): Likewise.\n\t(__arm_vmaxq_m_u16): Likewise.\n\t(__arm_vminq_m_s8): Likewise.\n\t(__arm_vminq_m_s32): Likewise.\n\t(__arm_vminq_m_s16): Likewise.\n\t(__arm_vminq_m_u8): Likewise.\n\t(__arm_vminq_m_u32): Likewise.\n\t(__arm_vminq_m_u16): Likewise.\n\t(__arm_vmladavaq_p_s8): Likewise.\n\t(__arm_vmladavaq_p_s32): Likewise.\n\t(__arm_vmladavaq_p_s16): Likewise.\n\t(__arm_vmladavaq_p_u8): Likewise.\n\t(__arm_vmladavaq_p_u32): Likewise.\n\t(__arm_vmladavaq_p_u16): Likewise.\n\t(__arm_vmladavaxq_p_s8): Likewise.\n\t(__arm_vmladavaxq_p_s32): Likewise.\n\t(__arm_vmladavaxq_p_s16): Likewise.\n\t(__arm_vmlaq_m_n_s8): Likewise.\n\t(__arm_vmlaq_m_n_s32): Likewise.\n\t(__arm_vmlaq_m_n_s16): Likewise.\n\t(__arm_vmlaq_m_n_u8): Likewise.\n\t(__arm_vmlaq_m_n_u32): Likewise.\n\t(__arm_vmlaq_m_n_u16): Likewise.\n\t(__arm_vmlasq_m_n_s8): Likewise.\n\t(__arm_vmlasq_m_n_s32): Likewise.\n\t(__arm_vmlasq_m_n_s16): Likewise.\n\t(__arm_vmlasq_m_n_u8): Likewise.\n\t(__arm_vmlasq_m_n_u32): Likewise.\n\t(__arm_vmlasq_m_n_u16): Likewise.\n\t(__arm_vmlsdavaq_p_s8): Likewise.\n\t(__arm_vmlsdavaq_p_s32): Likewise.\n\t(__arm_vmlsdavaq_p_s16): Likewise.\n\t(__arm_vmlsdavaxq_p_s8): Likewise.\n\t(__arm_vmlsdavaxq_p_s32): Likewise.\n\t(__arm_vmlsdavaxq_p_s16): Likewise.\n\t(__arm_vmulhq_m_s8): Likewise.\n\t(__arm_vmulhq_m_s32): Likewise.\n\t(__arm_vmulhq_m_s16): Likewise.\n\t(__arm_vmulhq_m_u8): Likewise.\n\t(__arm_vmulhq_m_u32): Likewise.\n\t(__arm_vmulhq_m_u16): Likewise.\n\t(__arm_vmullbq_int_m_s8): Likewise.\n\t(__arm_vmullbq_int_m_s32): Likewise.\n\t(__arm_vmullbq_int_m_s16): Likewise.\n\t(__arm_vmullbq_int_m_u8): Likewise.\n\t(__arm_vmullbq_int_m_u32): Likewise.\n\t(__arm_vmullbq_int_m_u16): Likewise.\n\t(__arm_vmulltq_int_m_s8): Likewise.\n\t(__arm_vmulltq_int_m_s32): Likewise.\n\t(__arm_vmulltq_int_m_s16): Likewise.\n\t(__arm_vmulltq_int_m_u8): Likewise.\n\t(__arm_vmulltq_int_m_u32): Likewise.\n\t(__arm_vmulltq_int_m_u16): Likewise.\n\t(__arm_vmulq_m_n_s8): Likewise.\n\t(__arm_vmulq_m_n_s32): Likewise.\n\t(__arm_vmulq_m_n_s16): Likewise.\n\t(__arm_vmulq_m_n_u8): Likewise.\n\t(__arm_vmulq_m_n_u32): Likewise.\n\t(__arm_vmulq_m_n_u16): Likewise.\n\t(__arm_vmulq_m_s8): Likewise.\n\t(__arm_vmulq_m_s32): Likewise.\n\t(__arm_vmulq_m_s16): Likewise.\n\t(__arm_vmulq_m_u8): Likewise.\n\t(__arm_vmulq_m_u32): Likewise.\n\t(__arm_vmulq_m_u16): Likewise.\n\t(__arm_vornq_m_s8): Likewise.\n\t(__arm_vornq_m_s32): Likewise.\n\t(__arm_vornq_m_s16): Likewise.\n\t(__arm_vornq_m_u8): Likewise.\n\t(__arm_vornq_m_u32): Likewise.\n\t(__arm_vornq_m_u16): Likewise.\n\t(__arm_vorrq_m_s8): Likewise.\n\t(__arm_vorrq_m_s32): Likewise.\n\t(__arm_vorrq_m_s16): Likewise.\n\t(__arm_vorrq_m_u8): Likewise.\n\t(__arm_vorrq_m_u32): Likewise.\n\t(__arm_vorrq_m_u16): Likewise.\n\t(__arm_vqaddq_m_n_s8): Likewise.\n\t(__arm_vqaddq_m_n_s32): Likewise.\n\t(__arm_vqaddq_m_n_s16): Likewise.\n\t(__arm_vqaddq_m_n_u8): Likewise.\n\t(__arm_vqaddq_m_n_u32): Likewise.\n\t(__arm_vqaddq_m_n_u16): Likewise.\n\t(__arm_vqaddq_m_s8): Likewise.\n\t(__arm_vqaddq_m_s32): Likewise.\n\t(__arm_vqaddq_m_s16): Likewise.\n\t(__arm_vqaddq_m_u8): Likewise.\n\t(__arm_vqaddq_m_u32): Likewise.\n\t(__arm_vqaddq_m_u16): Likewise.\n\t(__arm_vqdmladhq_m_s8): Likewise.\n\t(__arm_vqdmladhq_m_s32): Likewise.\n\t(__arm_vqdmladhq_m_s16): Likewise.\n\t(__arm_vqdmladhxq_m_s8): Likewise.\n\t(__arm_vqdmladhxq_m_s32): Likewise.\n\t(__arm_vqdmladhxq_m_s16): Likewise.\n\t(__arm_vqdmlahq_m_n_s8): Likewise.\n\t(__arm_vqdmlahq_m_n_s32): Likewise.\n\t(__arm_vqdmlahq_m_n_s16): Likewise.\n\t(__arm_vqdmlahq_m_n_u8): Likewise.\n\t(__arm_vqdmlahq_m_n_u32): Likewise.\n\t(__arm_vqdmlahq_m_n_u16): Likewise.\n\t(__arm_vqdmlsdhq_m_s8): Likewise.\n\t(__arm_vqdmlsdhq_m_s32): Likewise.\n\t(__arm_vqdmlsdhq_m_s16): Likewise.\n\t(__arm_vqdmlsdhxq_m_s8): Likewise.\n\t(__arm_vqdmlsdhxq_m_s32): Likewise.\n\t(__arm_vqdmlsdhxq_m_s16): Likewise.\n\t(__arm_vqdmulhq_m_n_s8): Likewise.\n\t(__arm_vqdmulhq_m_n_s32): Likewise.\n\t(__arm_vqdmulhq_m_n_s16): Likewise.\n\t(__arm_vqdmulhq_m_s8): Likewise.\n\t(__arm_vqdmulhq_m_s32): Likewise.\n\t(__arm_vqdmulhq_m_s16): Likewise.\n\t(__arm_vqrdmladhq_m_s8): Likewise.\n\t(__arm_vqrdmladhq_m_s32): Likewise.\n\t(__arm_vqrdmladhq_m_s16): Likewise.\n\t(__arm_vqrdmladhxq_m_s8): Likewise.\n\t(__arm_vqrdmladhxq_m_s32): Likewise.\n\t(__arm_vqrdmladhxq_m_s16): Likewise.\n\t(__arm_vqrdmlahq_m_n_s8): Likewise.\n\t(__arm_vqrdmlahq_m_n_s32): Likewise.\n\t(__arm_vqrdmlahq_m_n_s16): Likewise.\n\t(__arm_vqrdmlahq_m_n_u8): Likewise.\n\t(__arm_vqrdmlahq_m_n_u32): Likewise.\n\t(__arm_vqrdmlahq_m_n_u16): Likewise.\n\t(__arm_vqrdmlashq_m_n_s8): Likewise.\n\t(__arm_vqrdmlashq_m_n_s32): Likewise.\n\t(__arm_vqrdmlashq_m_n_s16): Likewise.\n\t(__arm_vqrdmlashq_m_n_u8): Likewise.\n\t(__arm_vqrdmlashq_m_n_u32): Likewise.\n\t(__arm_vqrdmlashq_m_n_u16): Likewise.\n\t(__arm_vqrdmlsdhq_m_s8): Likewise.\n\t(__arm_vqrdmlsdhq_m_s32): Likewise.\n\t(__arm_vqrdmlsdhq_m_s16): Likewise.\n\t(__arm_vqrdmlsdhxq_m_s8): Likewise.\n\t(__arm_vqrdmlsdhxq_m_s32): Likewise.\n\t(__arm_vqrdmlsdhxq_m_s16): Likewise.\n\t(__arm_vqrdmulhq_m_n_s8): Likewise.\n\t(__arm_vqrdmulhq_m_n_s32): Likewise.\n\t(__arm_vqrdmulhq_m_n_s16): Likewise.\n\t(__arm_vqrdmulhq_m_s8): Likewise.\n\t(__arm_vqrdmulhq_m_s32): Likewise.\n\t(__arm_vqrdmulhq_m_s16): Likewise.\n\t(__arm_vqrshlq_m_s8): Likewise.\n\t(__arm_vqrshlq_m_s32): Likewise.\n\t(__arm_vqrshlq_m_s16): Likewise.\n\t(__arm_vqrshlq_m_u8): Likewise.\n\t(__arm_vqrshlq_m_u32): Likewise.\n\t(__arm_vqrshlq_m_u16): Likewise.\n\t(__arm_vqshlq_m_n_s8): Likewise.\n\t(__arm_vqshlq_m_n_s32): Likewise.\n\t(__arm_vqshlq_m_n_s16): Likewise.\n\t(__arm_vqshlq_m_n_u8): Likewise.\n\t(__arm_vqshlq_m_n_u32): Likewise.\n\t(__arm_vqshlq_m_n_u16): Likewise.\n\t(__arm_vqshlq_m_s8): Likewise.\n\t(__arm_vqshlq_m_s32): Likewise.\n\t(__arm_vqshlq_m_s16): Likewise.\n\t(__arm_vqshlq_m_u8): Likewise.\n\t(__arm_vqshlq_m_u32): Likewise.\n\t(__arm_vqshlq_m_u16): Likewise.\n\t(__arm_vqsubq_m_n_s8): Likewise.\n\t(__arm_vqsubq_m_n_s32): Likewise.\n\t(__arm_vqsubq_m_n_s16): Likewise.\n\t(__arm_vqsubq_m_n_u8): Likewise.\n\t(__arm_vqsubq_m_n_u32): Likewise.\n\t(__arm_vqsubq_m_n_u16): Likewise.\n\t(__arm_vqsubq_m_s8): Likewise.\n\t(__arm_vqsubq_m_s32): Likewise.\n\t(__arm_vqsubq_m_s16): Likewise.\n\t(__arm_vqsubq_m_u8): Likewise.\n\t(__arm_vqsubq_m_u32): Likewise.\n\t(__arm_vqsubq_m_u16): Likewise.\n\t(__arm_vrhaddq_m_s8): Likewise.\n\t(__arm_vrhaddq_m_s32): Likewise.\n\t(__arm_vrhaddq_m_s16): Likewise.\n\t(__arm_vrhaddq_m_u8): Likewise.\n\t(__arm_vrhaddq_m_u32): Likewise.\n\t(__arm_vrhaddq_m_u16): Likewise.\n\t(__arm_vrmulhq_m_s8): Likewise.\n\t(__arm_vrmulhq_m_s32): Likewise.\n\t(__arm_vrmulhq_m_s16): Likewise.\n\t(__arm_vrmulhq_m_u8): Likewise.\n\t(__arm_vrmulhq_m_u32): Likewise.\n\t(__arm_vrmulhq_m_u16): Likewise.\n\t(__arm_vrshlq_m_s8): Likewise.\n\t(__arm_vrshlq_m_s32): Likewise.\n\t(__arm_vrshlq_m_s16): Likewise.\n\t(__arm_vrshlq_m_u8): Likewise.\n\t(__arm_vrshlq_m_u32): Likewise.\n\t(__arm_vrshlq_m_u16): Likewise.\n\t(__arm_vrshrq_m_n_s8): Likewise.\n\t(__arm_vrshrq_m_n_s32): Likewise.\n\t(__arm_vrshrq_m_n_s16): Likewise.\n\t(__arm_vrshrq_m_n_u8): Likewise.\n\t(__arm_vrshrq_m_n_u32): Likewise.\n\t(__arm_vrshrq_m_n_u16): Likewise.\n\t(__arm_vshlq_m_n_s8): Likewise.\n\t(__arm_vshlq_m_n_s32): Likewise.\n\t(__arm_vshlq_m_n_s16): Likewise.\n\t(__arm_vshlq_m_n_u8): Likewise.\n\t(__arm_vshlq_m_n_u32): Likewise.\n\t(__arm_vshlq_m_n_u16): Likewise.\n\t(__arm_vshrq_m_n_s8): Likewise.\n\t(__arm_vshrq_m_n_s32): Likewise.\n\t(__arm_vshrq_m_n_s16): Likewise.\n\t(__arm_vshrq_m_n_u8): Likewise.\n\t(__arm_vshrq_m_n_u32): Likewise.\n\t(__arm_vshrq_m_n_u16): Likewise.\n\t(__arm_vsliq_m_n_s8): Likewise.\n\t(__arm_vsliq_m_n_s32): Likewise.\n\t(__arm_vsliq_m_n_s16): Likewise.\n\t(__arm_vsliq_m_n_u8): Likewise.\n\t(__arm_vsliq_m_n_u32): Likewise.\n\t(__arm_vsliq_m_n_u16): Likewise.\n\t(__arm_vsubq_m_n_s8): Likewise.\n\t(__arm_vsubq_m_n_s32): Likewise.\n\t(__arm_vsubq_m_n_s16): Likewise.\n\t(__arm_vsubq_m_n_u8): Likewise.\n\t(__arm_vsubq_m_n_u32): Likewise.\n\t(__arm_vsubq_m_n_u16): Likewise.\n\t(vqdmladhq_m): Define polymorphic variant.\n\t(vqdmladhxq_m): Likewise.\n\t(vqdmlsdhq_m): Likewise.\n\t(vqdmlsdhxq_m): Likewise.\n\t(vabdq_m): Likewise.\n\t(vandq_m): Likewise.\n\t(vbicq_m): Likewise.\n\t(vbrsrq_m_n): Likewise.\n\t(vcaddq_rot270_m): Likewise.\n\t(vcaddq_rot90_m): Likewise.\n\t(veorq_m): Likewise.\n\t(vmaxq_m): Likewise.\n\t(vminq_m): Likewise.\n\t(vmladavaq_p): Likewise.\n\t(vmlaq_m_n): Likewise.\n\t(vmlasq_m_n): Likewise.\n\t(vmulhq_m): Likewise.\n\t(vmullbq_int_m): Likewise.\n\t(vmulltq_int_m): Likewise.\n\t(vornq_m): Likewise.\n\t(vorrq_m): Likewise.\n\t(vqdmlahq_m_n): Likewise.\n\t(vqrdmlahq_m_n): Likewise.\n\t(vqrdmlashq_m_n): Likewise.\n\t(vqrshlq_m): Likewise.\n\t(vqshlq_m_n): Likewise.\n\t(vqshlq_m): Likewise.\n\t(vrhaddq_m): Likewise.\n\t(vrmulhq_m): Likewise.\n\t(vrshlq_m): Likewise.\n\t(vrshrq_m_n): Likewise.\n\t(vshlq_m_n): Likewise.\n\t(vshrq_m_n): Likewise.\n\t(vsliq_m): Likewise.\n\t(vaddq_m_n): Likewise.\n\t(vaddq_m): Likewise.\n\t(vhaddq_m_n): Likewise.\n\t(vhaddq_m): Likewise.\n\t(vhcaddq_rot270_m): Likewise.\n\t(vhcaddq_rot90_m): Likewise.\n\t(vhsubq_m): Likewise.\n\t(vhsubq_m_n): Likewise.\n\t(vmulq_m_n): Likewise.\n\t(vmulq_m): Likewise.\n\t(vqaddq_m_n): Likewise.\n\t(vqaddq_m): Likewise.\n\t(vqdmulhq_m_n): Likewise.\n\t(vqdmulhq_m): Likewise.\n\t(vsubq_m_n): Likewise.\n\t(vsliq_m_n): Likewise.\n\t(vqsubq_m_n): Likewise.\n\t(vqsubq_m): Likewise.\n\t(vqrdmulhq_m): Likewise.\n\t(vqrdmulhq_m_n): Likewise.\n\t(vqrdmlsdhxq_m): Likewise.\n\t(vqrdmlsdhq_m): Likewise.\n\t(vqrdmladhq_m): Likewise.\n\t(vqrdmladhxq_m): Likewise.\n\t(vmlsdavaxq_p): Likewise.\n\t(vmlsdavaq_p): Likewise.\n\t(vmladavaxq_p): Likewise.\n\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n\tbuiltin qualifier.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/mve.md (VHSUBQ_M): Define iterators.\n\t(VSLIQ_M_N): Likewise.\n\t(VQRDMLAHQ_M_N): Likewise.\n\t(VRSHLQ_M): Likewise.\n\t(VMINQ_M): Likewise.\n\t(VMULLBQ_INT_M): Likewise.\n\t(VMULHQ_M): Likewise.\n\t(VMULQ_M): Likewise.\n\t(VHSUBQ_M_N): Likewise.\n\t(VHADDQ_M_N): Likewise.\n\t(VORRQ_M): Likewise.\n\t(VRMULHQ_M): Likewise.\n\t(VQADDQ_M): Likewise.\n\t(VRSHRQ_M_N): Likewise.\n\t(VQSUBQ_M_N): Likewise.\n\t(VADDQ_M): Likewise.\n\t(VORNQ_M): Likewise.\n\t(VQDMLAHQ_M_N): Likewise.\n\t(VRHADDQ_M): Likewise.\n\t(VQSHLQ_M): Likewise.\n\t(VANDQ_M): Likewise.\n\t(VBICQ_M): Likewise.\n\t(VSHLQ_M_N): Likewise.\n\t(VCADDQ_ROT270_M): Likewise.\n\t(VQRSHLQ_M): Likewise.\n\t(VQADDQ_M_N): Likewise.\n\t(VADDQ_M_N): Likewise.\n\t(VMAXQ_M): Likewise.\n\t(VQSUBQ_M): Likewise.\n\t(VMLASQ_M_N): Likewise.\n\t(VMLADAVAQ_P): Likewise.\n\t(VBRSRQ_M_N): Likewise.\n\t(VMULQ_M_N): Likewise.\n\t(VCADDQ_ROT90_M): Likewise.\n\t(VMULLTQ_INT_M): Likewise.\n\t(VEORQ_M): Likewise.\n\t(VSHRQ_M_N): Likewise.\n\t(VSUBQ_M_N): Likewise.\n\t(VHADDQ_M): Likewise.\n\t(VABDQ_M): Likewise.\n\t(VQRDMLASHQ_M_N): Likewise.\n\t(VMLAQ_M_N): Likewise.\n\t(VQSHLQ_M_N): Likewise.\n\t(mve_vabdq_m_<supf><mode>): Define RTL pattern.\n\t(mve_vaddq_m_n_<supf><mode>): Likewise.\n\t(mve_vaddq_m_<supf><mode>): Likewise.\n\t(mve_vandq_m_<supf><mode>): Likewise.\n\t(mve_vbicq_m_<supf><mode>): Likewise.\n\t(mve_vbrsrq_m_n_<supf><mode>): Likewise.\n\t(mve_vcaddq_rot270_m_<supf><mode>): Likewise.\n\t(mve_vcaddq_rot90_m_<supf><mode>): Likewise.\n\t(mve_veorq_m_<supf><mode>): Likewise.\n\t(mve_vhaddq_m_n_<supf><mode>): Likewise.\n\t(mve_vhaddq_m_<supf><mode>): Likewise.\n\t(mve_vhsubq_m_n_<supf><mode>): Likewise.\n\t(mve_vhsubq_m_<supf><mode>): Likewise.\n\t(mve_vmaxq_m_<supf><mode>): Likewise.\n\t(mve_vminq_m_<supf><mode>): Likewise.\n\t(mve_vmladavaq_p_<supf><mode>): Likewise.\n\t(mve_vmlaq_m_n_<supf><mode>): Likewise.\n\t(mve_vmlasq_m_n_<supf><mode>): Likewise.\n\t(mve_vmulhq_m_<supf><mode>): Likewise.\n\t(mve_vmullbq_int_m_<supf><mode>): Likewise.\n\t(mve_vmulltq_int_m_<supf><mode>): Likewise.\n\t(mve_vmulq_m_n_<supf><mode>): Likewise.\n\t(mve_vmulq_m_<supf><mode>): Likewise.\n\t(mve_vornq_m_<supf><mode>): Likewise.\n\t(mve_vorrq_m_<supf><mode>): Likewise.\n\t(mve_vqaddq_m_n_<supf><mode>): Likewise.\n\t(mve_vqaddq_m_<supf><mode>): Likewise.\n\t(mve_vqdmlahq_m_n_<supf><mode>): Likewise.\n\t(mve_vqrdmlahq_m_n_<supf><mode>): Likewise.\n\t(mve_vqrdmlashq_m_n_<supf><mode>): Likewise.\n\t(mve_vqrshlq_m_<supf><mode>): Likewise.\n\t(mve_vqshlq_m_n_<supf><mode>): Likewise.\n\t(mve_vqshlq_m_<supf><mode>): Likewise.\n\t(mve_vqsubq_m_n_<supf><mode>): Likewise.\n\t(mve_vqsubq_m_<supf><mode>): Likewise.\n\t(mve_vrhaddq_m_<supf><mode>): Likewise.\n\t(mve_vrmulhq_m_<supf><mode>): Likewise.\n\t(mve_vrshlq_m_<supf><mode>): Likewise.\n\t(mve_vrshrq_m_n_<supf><mode>): Likewise.\n\t(mve_vshlq_m_n_<supf><mode>): Likewise.\n\t(mve_vshrq_m_n_<supf><mode>): Likewise.\n\t(mve_vsliq_m_n_<supf><mode>): Likewise.\n\t(mve_vsubq_m_n_<supf><mode>): Likewise.\n\t(mve_vhcaddq_rot270_m_s<mode>): Likewise.\n\t(mve_vhcaddq_rot90_m_s<mode>): Likewise.\n\t(mve_vmladavaxq_p_s<mode>): Likewise.\n\t(mve_vmlsdavaq_p_s<mode>): Likewise.\n\t(mve_vmlsdavaxq_p_s<mode>): Likewise.\n\t(mve_vqdmladhq_m_s<mode>): Likewise.\n\t(mve_vqdmladhxq_m_s<mode>): Likewise.\n\t(mve_vqdmlsdhq_m_s<mode>): Likewise.\n\t(mve_vqdmlsdhxq_m_s<mode>): Likewise.\n\t(mve_vqdmulhq_m_n_s<mode>): Likewise.\n\t(mve_vqdmulhq_m_s<mode>): Likewise.\n\t(mve_vqrdmladhq_m_s<mode>): Likewise.\n\t(mve_vqrdmladhxq_m_s<mode>): Likewise.\n\t(mve_vqrdmlsdhq_m_s<mode>): Likewise.\n\t(mve_vqrdmlsdhxq_m_s<mode>): Likewise.\n\t(mve_vqrdmulhq_m_n_s<mode>): Likewise.\n\t(mve_vqrdmulhq_m_s<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u8.c: Likewise.", "tree": {"sha": "56aba3b2522e96a735ddcb1dc599d2b5cfe1c7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56aba3b2522e96a735ddcb1dc599d2b5cfe1c7a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5db9d254853decad675afbb4272cf30fec179d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5db9d254853decad675afbb4272cf30fec179d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5db9d254853decad675afbb4272cf30fec179d"}], "stats": {"total": 12529, "additions": 12527, "deletions": 2}, "files": [{"sha": "e9e019a4a9b00fb7488e08344363c38f660928f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 793, "deletions": 0, "changes": 793, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -1,3 +1,796 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t\n+\t* config/arm/arm_mve.h (vabdq_m_s8): Define macro.\n+\t(vabdq_m_s32): Likewise.\n+\t(vabdq_m_s16): Likewise.\n+\t(vabdq_m_u8): Likewise.\n+\t(vabdq_m_u32): Likewise.\n+\t(vabdq_m_u16): Likewise.\n+\t(vaddq_m_n_s8): Likewise.\n+\t(vaddq_m_n_s32): Likewise.\n+\t(vaddq_m_n_s16): Likewise.\n+\t(vaddq_m_n_u8): Likewise.\n+\t(vaddq_m_n_u32): Likewise.\n+\t(vaddq_m_n_u16): Likewise.\n+\t(vaddq_m_s8): Likewise.\n+\t(vaddq_m_s32): Likewise.\n+\t(vaddq_m_s16): Likewise.\n+\t(vaddq_m_u8): Likewise.\n+\t(vaddq_m_u32): Likewise.\n+\t(vaddq_m_u16): Likewise.\n+\t(vandq_m_s8): Likewise.\n+\t(vandq_m_s32): Likewise.\n+\t(vandq_m_s16): Likewise.\n+\t(vandq_m_u8): Likewise.\n+\t(vandq_m_u32): Likewise.\n+\t(vandq_m_u16): Likewise.\n+\t(vbicq_m_s8): Likewise.\n+\t(vbicq_m_s32): Likewise.\n+\t(vbicq_m_s16): Likewise.\n+\t(vbicq_m_u8): Likewise.\n+\t(vbicq_m_u32): Likewise.\n+\t(vbicq_m_u16): Likewise.\n+\t(vbrsrq_m_n_s8): Likewise.\n+\t(vbrsrq_m_n_s32): Likewise.\n+\t(vbrsrq_m_n_s16): Likewise.\n+\t(vbrsrq_m_n_u8): Likewise.\n+\t(vbrsrq_m_n_u32): Likewise.\n+\t(vbrsrq_m_n_u16): Likewise.\n+\t(vcaddq_rot270_m_s8): Likewise.\n+\t(vcaddq_rot270_m_s32): Likewise.\n+\t(vcaddq_rot270_m_s16): Likewise.\n+\t(vcaddq_rot270_m_u8): Likewise.\n+\t(vcaddq_rot270_m_u32): Likewise.\n+\t(vcaddq_rot270_m_u16): Likewise.\n+\t(vcaddq_rot90_m_s8): Likewise.\n+\t(vcaddq_rot90_m_s32): Likewise.\n+\t(vcaddq_rot90_m_s16): Likewise.\n+\t(vcaddq_rot90_m_u8): Likewise.\n+\t(vcaddq_rot90_m_u32): Likewise.\n+\t(vcaddq_rot90_m_u16): Likewise.\n+\t(veorq_m_s8): Likewise.\n+\t(veorq_m_s32): Likewise.\n+\t(veorq_m_s16): Likewise.\n+\t(veorq_m_u8): Likewise.\n+\t(veorq_m_u32): Likewise.\n+\t(veorq_m_u16): Likewise.\n+\t(vhaddq_m_n_s8): Likewise.\n+\t(vhaddq_m_n_s32): Likewise.\n+\t(vhaddq_m_n_s16): Likewise.\n+\t(vhaddq_m_n_u8): Likewise.\n+\t(vhaddq_m_n_u32): Likewise.\n+\t(vhaddq_m_n_u16): Likewise.\n+\t(vhaddq_m_s8): Likewise.\n+\t(vhaddq_m_s32): Likewise.\n+\t(vhaddq_m_s16): Likewise.\n+\t(vhaddq_m_u8): Likewise.\n+\t(vhaddq_m_u32): Likewise.\n+\t(vhaddq_m_u16): Likewise.\n+\t(vhcaddq_rot270_m_s8): Likewise.\n+\t(vhcaddq_rot270_m_s32): Likewise.\n+\t(vhcaddq_rot270_m_s16): Likewise.\n+\t(vhcaddq_rot90_m_s8): Likewise.\n+\t(vhcaddq_rot90_m_s32): Likewise.\n+\t(vhcaddq_rot90_m_s16): Likewise.\n+\t(vhsubq_m_n_s8): Likewise.\n+\t(vhsubq_m_n_s32): Likewise.\n+\t(vhsubq_m_n_s16): Likewise.\n+\t(vhsubq_m_n_u8): Likewise.\n+\t(vhsubq_m_n_u32): Likewise.\n+\t(vhsubq_m_n_u16): Likewise.\n+\t(vhsubq_m_s8): Likewise.\n+\t(vhsubq_m_s32): Likewise.\n+\t(vhsubq_m_s16): Likewise.\n+\t(vhsubq_m_u8): Likewise.\n+\t(vhsubq_m_u32): Likewise.\n+\t(vhsubq_m_u16): Likewise.\n+\t(vmaxq_m_s8): Likewise.\n+\t(vmaxq_m_s32): Likewise.\n+\t(vmaxq_m_s16): Likewise.\n+\t(vmaxq_m_u8): Likewise.\n+\t(vmaxq_m_u32): Likewise.\n+\t(vmaxq_m_u16): Likewise.\n+\t(vminq_m_s8): Likewise.\n+\t(vminq_m_s32): Likewise.\n+\t(vminq_m_s16): Likewise.\n+\t(vminq_m_u8): Likewise.\n+\t(vminq_m_u32): Likewise.\n+\t(vminq_m_u16): Likewise.\n+\t(vmladavaq_p_s8): Likewise.\n+\t(vmladavaq_p_s32): Likewise.\n+\t(vmladavaq_p_s16): Likewise.\n+\t(vmladavaq_p_u8): Likewise.\n+\t(vmladavaq_p_u32): Likewise.\n+\t(vmladavaq_p_u16): Likewise.\n+\t(vmladavaxq_p_s8): Likewise.\n+\t(vmladavaxq_p_s32): Likewise.\n+\t(vmladavaxq_p_s16): Likewise.\n+\t(vmlaq_m_n_s8): Likewise.\n+\t(vmlaq_m_n_s32): Likewise.\n+\t(vmlaq_m_n_s16): Likewise.\n+\t(vmlaq_m_n_u8): Likewise.\n+\t(vmlaq_m_n_u32): Likewise.\n+\t(vmlaq_m_n_u16): Likewise.\n+\t(vmlasq_m_n_s8): Likewise.\n+\t(vmlasq_m_n_s32): Likewise.\n+\t(vmlasq_m_n_s16): Likewise.\n+\t(vmlasq_m_n_u8): Likewise.\n+\t(vmlasq_m_n_u32): Likewise.\n+\t(vmlasq_m_n_u16): Likewise.\n+\t(vmlsdavaq_p_s8): Likewise.\n+\t(vmlsdavaq_p_s32): Likewise.\n+\t(vmlsdavaq_p_s16): Likewise.\n+\t(vmlsdavaxq_p_s8): Likewise.\n+\t(vmlsdavaxq_p_s32): Likewise.\n+\t(vmlsdavaxq_p_s16): Likewise.\n+\t(vmulhq_m_s8): Likewise.\n+\t(vmulhq_m_s32): Likewise.\n+\t(vmulhq_m_s16): Likewise.\n+\t(vmulhq_m_u8): Likewise.\n+\t(vmulhq_m_u32): Likewise.\n+\t(vmulhq_m_u16): Likewise.\n+\t(vmullbq_int_m_s8): Likewise.\n+\t(vmullbq_int_m_s32): Likewise.\n+\t(vmullbq_int_m_s16): Likewise.\n+\t(vmullbq_int_m_u8): Likewise.\n+\t(vmullbq_int_m_u32): Likewise.\n+\t(vmullbq_int_m_u16): Likewise.\n+\t(vmulltq_int_m_s8): Likewise.\n+\t(vmulltq_int_m_s32): Likewise.\n+\t(vmulltq_int_m_s16): Likewise.\n+\t(vmulltq_int_m_u8): Likewise.\n+\t(vmulltq_int_m_u32): Likewise.\n+\t(vmulltq_int_m_u16): Likewise.\n+\t(vmulq_m_n_s8): Likewise.\n+\t(vmulq_m_n_s32): Likewise.\n+\t(vmulq_m_n_s16): Likewise.\n+\t(vmulq_m_n_u8): Likewise.\n+\t(vmulq_m_n_u32): Likewise.\n+\t(vmulq_m_n_u16): Likewise.\n+\t(vmulq_m_s8): Likewise.\n+\t(vmulq_m_s32): Likewise.\n+\t(vmulq_m_s16): Likewise.\n+\t(vmulq_m_u8): Likewise.\n+\t(vmulq_m_u32): Likewise.\n+\t(vmulq_m_u16): Likewise.\n+\t(vornq_m_s8): Likewise.\n+\t(vornq_m_s32): Likewise.\n+\t(vornq_m_s16): Likewise.\n+\t(vornq_m_u8): Likewise.\n+\t(vornq_m_u32): Likewise.\n+\t(vornq_m_u16): Likewise.\n+\t(vorrq_m_s8): Likewise.\n+\t(vorrq_m_s32): Likewise.\n+\t(vorrq_m_s16): Likewise.\n+\t(vorrq_m_u8): Likewise.\n+\t(vorrq_m_u32): Likewise.\n+\t(vorrq_m_u16): Likewise.\n+\t(vqaddq_m_n_s8): Likewise.\n+\t(vqaddq_m_n_s32): Likewise.\n+\t(vqaddq_m_n_s16): Likewise.\n+\t(vqaddq_m_n_u8): Likewise.\n+\t(vqaddq_m_n_u32): Likewise.\n+\t(vqaddq_m_n_u16): Likewise.\n+\t(vqaddq_m_s8): Likewise.\n+\t(vqaddq_m_s32): Likewise.\n+\t(vqaddq_m_s16): Likewise.\n+\t(vqaddq_m_u8): Likewise.\n+\t(vqaddq_m_u32): Likewise.\n+\t(vqaddq_m_u16): Likewise.\n+\t(vqdmladhq_m_s8): Likewise.\n+\t(vqdmladhq_m_s32): Likewise.\n+\t(vqdmladhq_m_s16): Likewise.\n+\t(vqdmladhxq_m_s8): Likewise.\n+\t(vqdmladhxq_m_s32): Likewise.\n+\t(vqdmladhxq_m_s16): Likewise.\n+\t(vqdmlahq_m_n_s8): Likewise.\n+\t(vqdmlahq_m_n_s32): Likewise.\n+\t(vqdmlahq_m_n_s16): Likewise.\n+\t(vqdmlahq_m_n_u8): Likewise.\n+\t(vqdmlahq_m_n_u32): Likewise.\n+\t(vqdmlahq_m_n_u16): Likewise.\n+\t(vqdmlsdhq_m_s8): Likewise.\n+\t(vqdmlsdhq_m_s32): Likewise.\n+\t(vqdmlsdhq_m_s16): Likewise.\n+\t(vqdmlsdhxq_m_s8): Likewise.\n+\t(vqdmlsdhxq_m_s32): Likewise.\n+\t(vqdmlsdhxq_m_s16): Likewise.\n+\t(vqdmulhq_m_n_s8): Likewise.\n+\t(vqdmulhq_m_n_s32): Likewise.\n+\t(vqdmulhq_m_n_s16): Likewise.\n+\t(vqdmulhq_m_s8): Likewise.\n+\t(vqdmulhq_m_s32): Likewise.\n+\t(vqdmulhq_m_s16): Likewise.\n+\t(vqrdmladhq_m_s8): Likewise.\n+\t(vqrdmladhq_m_s32): Likewise.\n+\t(vqrdmladhq_m_s16): Likewise.\n+\t(vqrdmladhxq_m_s8): Likewise.\n+\t(vqrdmladhxq_m_s32): Likewise.\n+\t(vqrdmladhxq_m_s16): Likewise.\n+\t(vqrdmlahq_m_n_s8): Likewise.\n+\t(vqrdmlahq_m_n_s32): Likewise.\n+\t(vqrdmlahq_m_n_s16): Likewise.\n+\t(vqrdmlahq_m_n_u8): Likewise.\n+\t(vqrdmlahq_m_n_u32): Likewise.\n+\t(vqrdmlahq_m_n_u16): Likewise.\n+\t(vqrdmlashq_m_n_s8): Likewise.\n+\t(vqrdmlashq_m_n_s32): Likewise.\n+\t(vqrdmlashq_m_n_s16): Likewise.\n+\t(vqrdmlashq_m_n_u8): Likewise.\n+\t(vqrdmlashq_m_n_u32): Likewise.\n+\t(vqrdmlashq_m_n_u16): Likewise.\n+\t(vqrdmlsdhq_m_s8): Likewise.\n+\t(vqrdmlsdhq_m_s32): Likewise.\n+\t(vqrdmlsdhq_m_s16): Likewise.\n+\t(vqrdmlsdhxq_m_s8): Likewise.\n+\t(vqrdmlsdhxq_m_s32): Likewise.\n+\t(vqrdmlsdhxq_m_s16): Likewise.\n+\t(vqrdmulhq_m_n_s8): Likewise.\n+\t(vqrdmulhq_m_n_s32): Likewise.\n+\t(vqrdmulhq_m_n_s16): Likewise.\n+\t(vqrdmulhq_m_s8): Likewise.\n+\t(vqrdmulhq_m_s32): Likewise.\n+\t(vqrdmulhq_m_s16): Likewise.\n+\t(vqrshlq_m_s8): Likewise.\n+\t(vqrshlq_m_s32): Likewise.\n+\t(vqrshlq_m_s16): Likewise.\n+\t(vqrshlq_m_u8): Likewise.\n+\t(vqrshlq_m_u32): Likewise.\n+\t(vqrshlq_m_u16): Likewise.\n+\t(vqshlq_m_n_s8): Likewise.\n+\t(vqshlq_m_n_s32): Likewise.\n+\t(vqshlq_m_n_s16): Likewise.\n+\t(vqshlq_m_n_u8): Likewise.\n+\t(vqshlq_m_n_u32): Likewise.\n+\t(vqshlq_m_n_u16): Likewise.\n+\t(vqshlq_m_s8): Likewise.\n+\t(vqshlq_m_s32): Likewise.\n+\t(vqshlq_m_s16): Likewise.\n+\t(vqshlq_m_u8): Likewise.\n+\t(vqshlq_m_u32): Likewise.\n+\t(vqshlq_m_u16): Likewise.\n+\t(vqsubq_m_n_s8): Likewise.\n+\t(vqsubq_m_n_s32): Likewise.\n+\t(vqsubq_m_n_s16): Likewise.\n+\t(vqsubq_m_n_u8): Likewise.\n+\t(vqsubq_m_n_u32): Likewise.\n+\t(vqsubq_m_n_u16): Likewise.\n+\t(vqsubq_m_s8): Likewise.\n+\t(vqsubq_m_s32): Likewise.\n+\t(vqsubq_m_s16): Likewise.\n+\t(vqsubq_m_u8): Likewise.\n+\t(vqsubq_m_u32): Likewise.\n+\t(vqsubq_m_u16): Likewise.\n+\t(vrhaddq_m_s8): Likewise.\n+\t(vrhaddq_m_s32): Likewise.\n+\t(vrhaddq_m_s16): Likewise.\n+\t(vrhaddq_m_u8): Likewise.\n+\t(vrhaddq_m_u32): Likewise.\n+\t(vrhaddq_m_u16): Likewise.\n+\t(vrmulhq_m_s8): Likewise.\n+\t(vrmulhq_m_s32): Likewise.\n+\t(vrmulhq_m_s16): Likewise.\n+\t(vrmulhq_m_u8): Likewise.\n+\t(vrmulhq_m_u32): Likewise.\n+\t(vrmulhq_m_u16): Likewise.\n+\t(vrshlq_m_s8): Likewise.\n+\t(vrshlq_m_s32): Likewise.\n+\t(vrshlq_m_s16): Likewise.\n+\t(vrshlq_m_u8): Likewise.\n+\t(vrshlq_m_u32): Likewise.\n+\t(vrshlq_m_u16): Likewise.\n+\t(vrshrq_m_n_s8): Likewise.\n+\t(vrshrq_m_n_s32): Likewise.\n+\t(vrshrq_m_n_s16): Likewise.\n+\t(vrshrq_m_n_u8): Likewise.\n+\t(vrshrq_m_n_u32): Likewise.\n+\t(vrshrq_m_n_u16): Likewise.\n+\t(vshlq_m_n_s8): Likewise.\n+\t(vshlq_m_n_s32): Likewise.\n+\t(vshlq_m_n_s16): Likewise.\n+\t(vshlq_m_n_u8): Likewise.\n+\t(vshlq_m_n_u32): Likewise.\n+\t(vshlq_m_n_u16): Likewise.\n+\t(vshrq_m_n_s8): Likewise.\n+\t(vshrq_m_n_s32): Likewise.\n+\t(vshrq_m_n_s16): Likewise.\n+\t(vshrq_m_n_u8): Likewise.\n+\t(vshrq_m_n_u32): Likewise.\n+\t(vshrq_m_n_u16): Likewise.\n+\t(vsliq_m_n_s8): Likewise.\n+\t(vsliq_m_n_s32): Likewise.\n+\t(vsliq_m_n_s16): Likewise.\n+\t(vsliq_m_n_u8): Likewise.\n+\t(vsliq_m_n_u32): Likewise.\n+\t(vsliq_m_n_u16): Likewise.\n+\t(vsubq_m_n_s8): Likewise.\n+\t(vsubq_m_n_s32): Likewise.\n+\t(vsubq_m_n_s16): Likewise.\n+\t(vsubq_m_n_u8): Likewise.\n+\t(vsubq_m_n_u32): Likewise.\n+\t(vsubq_m_n_u16): Likewise.\n+\t(__arm_vabdq_m_s8): Define intrinsic.\n+\t(__arm_vabdq_m_s32): Likewise.\n+\t(__arm_vabdq_m_s16): Likewise.\n+\t(__arm_vabdq_m_u8): Likewise.\n+\t(__arm_vabdq_m_u32): Likewise.\n+\t(__arm_vabdq_m_u16): Likewise.\n+\t(__arm_vaddq_m_n_s8): Likewise.\n+\t(__arm_vaddq_m_n_s32): Likewise.\n+\t(__arm_vaddq_m_n_s16): Likewise.\n+\t(__arm_vaddq_m_n_u8): Likewise.\n+\t(__arm_vaddq_m_n_u32): Likewise.\n+\t(__arm_vaddq_m_n_u16): Likewise.\n+\t(__arm_vaddq_m_s8): Likewise.\n+\t(__arm_vaddq_m_s32): Likewise.\n+\t(__arm_vaddq_m_s16): Likewise.\n+\t(__arm_vaddq_m_u8): Likewise.\n+\t(__arm_vaddq_m_u32): Likewise.\n+\t(__arm_vaddq_m_u16): Likewise.\n+\t(__arm_vandq_m_s8): Likewise.\n+\t(__arm_vandq_m_s32): Likewise.\n+\t(__arm_vandq_m_s16): Likewise.\n+\t(__arm_vandq_m_u8): Likewise.\n+\t(__arm_vandq_m_u32): Likewise.\n+\t(__arm_vandq_m_u16): Likewise.\n+\t(__arm_vbicq_m_s8): Likewise.\n+\t(__arm_vbicq_m_s32): Likewise.\n+\t(__arm_vbicq_m_s16): Likewise.\n+\t(__arm_vbicq_m_u8): Likewise.\n+\t(__arm_vbicq_m_u32): Likewise.\n+\t(__arm_vbicq_m_u16): Likewise.\n+\t(__arm_vbrsrq_m_n_s8): Likewise.\n+\t(__arm_vbrsrq_m_n_s32): Likewise.\n+\t(__arm_vbrsrq_m_n_s16): Likewise.\n+\t(__arm_vbrsrq_m_n_u8): Likewise.\n+\t(__arm_vbrsrq_m_n_u32): Likewise.\n+\t(__arm_vbrsrq_m_n_u16): Likewise.\n+\t(__arm_vcaddq_rot270_m_s8): Likewise.\n+\t(__arm_vcaddq_rot270_m_s32): Likewise.\n+\t(__arm_vcaddq_rot270_m_s16): Likewise.\n+\t(__arm_vcaddq_rot270_m_u8): Likewise.\n+\t(__arm_vcaddq_rot270_m_u32): Likewise.\n+\t(__arm_vcaddq_rot270_m_u16): Likewise.\n+\t(__arm_vcaddq_rot90_m_s8): Likewise.\n+\t(__arm_vcaddq_rot90_m_s32): Likewise.\n+\t(__arm_vcaddq_rot90_m_s16): Likewise.\n+\t(__arm_vcaddq_rot90_m_u8): Likewise.\n+\t(__arm_vcaddq_rot90_m_u32): Likewise.\n+\t(__arm_vcaddq_rot90_m_u16): Likewise.\n+\t(__arm_veorq_m_s8): Likewise.\n+\t(__arm_veorq_m_s32): Likewise.\n+\t(__arm_veorq_m_s16): Likewise.\n+\t(__arm_veorq_m_u8): Likewise.\n+\t(__arm_veorq_m_u32): Likewise.\n+\t(__arm_veorq_m_u16): Likewise.\n+\t(__arm_vhaddq_m_n_s8): Likewise.\n+\t(__arm_vhaddq_m_n_s32): Likewise.\n+\t(__arm_vhaddq_m_n_s16): Likewise.\n+\t(__arm_vhaddq_m_n_u8): Likewise.\n+\t(__arm_vhaddq_m_n_u32): Likewise.\n+\t(__arm_vhaddq_m_n_u16): Likewise.\n+\t(__arm_vhaddq_m_s8): Likewise.\n+\t(__arm_vhaddq_m_s32): Likewise.\n+\t(__arm_vhaddq_m_s16): Likewise.\n+\t(__arm_vhaddq_m_u8): Likewise.\n+\t(__arm_vhaddq_m_u32): Likewise.\n+\t(__arm_vhaddq_m_u16): Likewise.\n+\t(__arm_vhcaddq_rot270_m_s8): Likewise.\n+\t(__arm_vhcaddq_rot270_m_s32): Likewise.\n+\t(__arm_vhcaddq_rot270_m_s16): Likewise.\n+\t(__arm_vhcaddq_rot90_m_s8): Likewise.\n+\t(__arm_vhcaddq_rot90_m_s32): Likewise.\n+\t(__arm_vhcaddq_rot90_m_s16): Likewise.\n+\t(__arm_vhsubq_m_n_s8): Likewise.\n+\t(__arm_vhsubq_m_n_s32): Likewise.\n+\t(__arm_vhsubq_m_n_s16): Likewise.\n+\t(__arm_vhsubq_m_n_u8): Likewise.\n+\t(__arm_vhsubq_m_n_u32): Likewise.\n+\t(__arm_vhsubq_m_n_u16): Likewise.\n+\t(__arm_vhsubq_m_s8): Likewise.\n+\t(__arm_vhsubq_m_s32): Likewise.\n+\t(__arm_vhsubq_m_s16): Likewise.\n+\t(__arm_vhsubq_m_u8): Likewise.\n+\t(__arm_vhsubq_m_u32): Likewise.\n+\t(__arm_vhsubq_m_u16): Likewise.\n+\t(__arm_vmaxq_m_s8): Likewise.\n+\t(__arm_vmaxq_m_s32): Likewise.\n+\t(__arm_vmaxq_m_s16): Likewise.\n+\t(__arm_vmaxq_m_u8): Likewise.\n+\t(__arm_vmaxq_m_u32): Likewise.\n+\t(__arm_vmaxq_m_u16): Likewise.\n+\t(__arm_vminq_m_s8): Likewise.\n+\t(__arm_vminq_m_s32): Likewise.\n+\t(__arm_vminq_m_s16): Likewise.\n+\t(__arm_vminq_m_u8): Likewise.\n+\t(__arm_vminq_m_u32): Likewise.\n+\t(__arm_vminq_m_u16): Likewise.\n+\t(__arm_vmladavaq_p_s8): Likewise.\n+\t(__arm_vmladavaq_p_s32): Likewise.\n+\t(__arm_vmladavaq_p_s16): Likewise.\n+\t(__arm_vmladavaq_p_u8): Likewise.\n+\t(__arm_vmladavaq_p_u32): Likewise.\n+\t(__arm_vmladavaq_p_u16): Likewise.\n+\t(__arm_vmladavaxq_p_s8): Likewise.\n+\t(__arm_vmladavaxq_p_s32): Likewise.\n+\t(__arm_vmladavaxq_p_s16): Likewise.\n+\t(__arm_vmlaq_m_n_s8): Likewise.\n+\t(__arm_vmlaq_m_n_s32): Likewise.\n+\t(__arm_vmlaq_m_n_s16): Likewise.\n+\t(__arm_vmlaq_m_n_u8): Likewise.\n+\t(__arm_vmlaq_m_n_u32): Likewise.\n+\t(__arm_vmlaq_m_n_u16): Likewise.\n+\t(__arm_vmlasq_m_n_s8): Likewise.\n+\t(__arm_vmlasq_m_n_s32): Likewise.\n+\t(__arm_vmlasq_m_n_s16): Likewise.\n+\t(__arm_vmlasq_m_n_u8): Likewise.\n+\t(__arm_vmlasq_m_n_u32): Likewise.\n+\t(__arm_vmlasq_m_n_u16): Likewise.\n+\t(__arm_vmlsdavaq_p_s8): Likewise.\n+\t(__arm_vmlsdavaq_p_s32): Likewise.\n+\t(__arm_vmlsdavaq_p_s16): Likewise.\n+\t(__arm_vmlsdavaxq_p_s8): Likewise.\n+\t(__arm_vmlsdavaxq_p_s32): Likewise.\n+\t(__arm_vmlsdavaxq_p_s16): Likewise.\n+\t(__arm_vmulhq_m_s8): Likewise.\n+\t(__arm_vmulhq_m_s32): Likewise.\n+\t(__arm_vmulhq_m_s16): Likewise.\n+\t(__arm_vmulhq_m_u8): Likewise.\n+\t(__arm_vmulhq_m_u32): Likewise.\n+\t(__arm_vmulhq_m_u16): Likewise.\n+\t(__arm_vmullbq_int_m_s8): Likewise.\n+\t(__arm_vmullbq_int_m_s32): Likewise.\n+\t(__arm_vmullbq_int_m_s16): Likewise.\n+\t(__arm_vmullbq_int_m_u8): Likewise.\n+\t(__arm_vmullbq_int_m_u32): Likewise.\n+\t(__arm_vmullbq_int_m_u16): Likewise.\n+\t(__arm_vmulltq_int_m_s8): Likewise.\n+\t(__arm_vmulltq_int_m_s32): Likewise.\n+\t(__arm_vmulltq_int_m_s16): Likewise.\n+\t(__arm_vmulltq_int_m_u8): Likewise.\n+\t(__arm_vmulltq_int_m_u32): Likewise.\n+\t(__arm_vmulltq_int_m_u16): Likewise.\n+\t(__arm_vmulq_m_n_s8): Likewise.\n+\t(__arm_vmulq_m_n_s32): Likewise.\n+\t(__arm_vmulq_m_n_s16): Likewise.\n+\t(__arm_vmulq_m_n_u8): Likewise.\n+\t(__arm_vmulq_m_n_u32): Likewise.\n+\t(__arm_vmulq_m_n_u16): Likewise.\n+\t(__arm_vmulq_m_s8): Likewise.\n+\t(__arm_vmulq_m_s32): Likewise.\n+\t(__arm_vmulq_m_s16): Likewise.\n+\t(__arm_vmulq_m_u8): Likewise.\n+\t(__arm_vmulq_m_u32): Likewise.\n+\t(__arm_vmulq_m_u16): Likewise.\n+\t(__arm_vornq_m_s8): Likewise.\n+\t(__arm_vornq_m_s32): Likewise.\n+\t(__arm_vornq_m_s16): Likewise.\n+\t(__arm_vornq_m_u8): Likewise.\n+\t(__arm_vornq_m_u32): Likewise.\n+\t(__arm_vornq_m_u16): Likewise.\n+\t(__arm_vorrq_m_s8): Likewise.\n+\t(__arm_vorrq_m_s32): Likewise.\n+\t(__arm_vorrq_m_s16): Likewise.\n+\t(__arm_vorrq_m_u8): Likewise.\n+\t(__arm_vorrq_m_u32): Likewise.\n+\t(__arm_vorrq_m_u16): Likewise.\n+\t(__arm_vqaddq_m_n_s8): Likewise.\n+\t(__arm_vqaddq_m_n_s32): Likewise.\n+\t(__arm_vqaddq_m_n_s16): Likewise.\n+\t(__arm_vqaddq_m_n_u8): Likewise.\n+\t(__arm_vqaddq_m_n_u32): Likewise.\n+\t(__arm_vqaddq_m_n_u16): Likewise.\n+\t(__arm_vqaddq_m_s8): Likewise.\n+\t(__arm_vqaddq_m_s32): Likewise.\n+\t(__arm_vqaddq_m_s16): Likewise.\n+\t(__arm_vqaddq_m_u8): Likewise.\n+\t(__arm_vqaddq_m_u32): Likewise.\n+\t(__arm_vqaddq_m_u16): Likewise.\n+\t(__arm_vqdmladhq_m_s8): Likewise.\n+\t(__arm_vqdmladhq_m_s32): Likewise.\n+\t(__arm_vqdmladhq_m_s16): Likewise.\n+\t(__arm_vqdmladhxq_m_s8): Likewise.\n+\t(__arm_vqdmladhxq_m_s32): Likewise.\n+\t(__arm_vqdmladhxq_m_s16): Likewise.\n+\t(__arm_vqdmlahq_m_n_s8): Likewise.\n+\t(__arm_vqdmlahq_m_n_s32): Likewise.\n+\t(__arm_vqdmlahq_m_n_s16): Likewise.\n+\t(__arm_vqdmlahq_m_n_u8): Likewise.\n+\t(__arm_vqdmlahq_m_n_u32): Likewise.\n+\t(__arm_vqdmlahq_m_n_u16): Likewise.\n+\t(__arm_vqdmlsdhq_m_s8): Likewise.\n+\t(__arm_vqdmlsdhq_m_s32): Likewise.\n+\t(__arm_vqdmlsdhq_m_s16): Likewise.\n+\t(__arm_vqdmlsdhxq_m_s8): Likewise.\n+\t(__arm_vqdmlsdhxq_m_s32): Likewise.\n+\t(__arm_vqdmlsdhxq_m_s16): Likewise.\n+\t(__arm_vqdmulhq_m_n_s8): Likewise.\n+\t(__arm_vqdmulhq_m_n_s32): Likewise.\n+\t(__arm_vqdmulhq_m_n_s16): Likewise.\n+\t(__arm_vqdmulhq_m_s8): Likewise.\n+\t(__arm_vqdmulhq_m_s32): Likewise.\n+\t(__arm_vqdmulhq_m_s16): Likewise.\n+\t(__arm_vqrdmladhq_m_s8): Likewise.\n+\t(__arm_vqrdmladhq_m_s32): Likewise.\n+\t(__arm_vqrdmladhq_m_s16): Likewise.\n+\t(__arm_vqrdmladhxq_m_s8): Likewise.\n+\t(__arm_vqrdmladhxq_m_s32): Likewise.\n+\t(__arm_vqrdmladhxq_m_s16): Likewise.\n+\t(__arm_vqrdmlahq_m_n_s8): Likewise.\n+\t(__arm_vqrdmlahq_m_n_s32): Likewise.\n+\t(__arm_vqrdmlahq_m_n_s16): Likewise.\n+\t(__arm_vqrdmlahq_m_n_u8): Likewise.\n+\t(__arm_vqrdmlahq_m_n_u32): Likewise.\n+\t(__arm_vqrdmlahq_m_n_u16): Likewise.\n+\t(__arm_vqrdmlashq_m_n_s8): Likewise.\n+\t(__arm_vqrdmlashq_m_n_s32): Likewise.\n+\t(__arm_vqrdmlashq_m_n_s16): Likewise.\n+\t(__arm_vqrdmlashq_m_n_u8): Likewise.\n+\t(__arm_vqrdmlashq_m_n_u32): Likewise.\n+\t(__arm_vqrdmlashq_m_n_u16): Likewise.\n+\t(__arm_vqrdmlsdhq_m_s8): Likewise.\n+\t(__arm_vqrdmlsdhq_m_s32): Likewise.\n+\t(__arm_vqrdmlsdhq_m_s16): Likewise.\n+\t(__arm_vqrdmlsdhxq_m_s8): Likewise.\n+\t(__arm_vqrdmlsdhxq_m_s32): Likewise.\n+\t(__arm_vqrdmlsdhxq_m_s16): Likewise.\n+\t(__arm_vqrdmulhq_m_n_s8): Likewise.\n+\t(__arm_vqrdmulhq_m_n_s32): Likewise.\n+\t(__arm_vqrdmulhq_m_n_s16): Likewise.\n+\t(__arm_vqrdmulhq_m_s8): Likewise.\n+\t(__arm_vqrdmulhq_m_s32): Likewise.\n+\t(__arm_vqrdmulhq_m_s16): Likewise.\n+\t(__arm_vqrshlq_m_s8): Likewise.\n+\t(__arm_vqrshlq_m_s32): Likewise.\n+\t(__arm_vqrshlq_m_s16): Likewise.\n+\t(__arm_vqrshlq_m_u8): Likewise.\n+\t(__arm_vqrshlq_m_u32): Likewise.\n+\t(__arm_vqrshlq_m_u16): Likewise.\n+\t(__arm_vqshlq_m_n_s8): Likewise.\n+\t(__arm_vqshlq_m_n_s32): Likewise.\n+\t(__arm_vqshlq_m_n_s16): Likewise.\n+\t(__arm_vqshlq_m_n_u8): Likewise.\n+\t(__arm_vqshlq_m_n_u32): Likewise.\n+\t(__arm_vqshlq_m_n_u16): Likewise.\n+\t(__arm_vqshlq_m_s8): Likewise.\n+\t(__arm_vqshlq_m_s32): Likewise.\n+\t(__arm_vqshlq_m_s16): Likewise.\n+\t(__arm_vqshlq_m_u8): Likewise.\n+\t(__arm_vqshlq_m_u32): Likewise.\n+\t(__arm_vqshlq_m_u16): Likewise.\n+\t(__arm_vqsubq_m_n_s8): Likewise.\n+\t(__arm_vqsubq_m_n_s32): Likewise.\n+\t(__arm_vqsubq_m_n_s16): Likewise.\n+\t(__arm_vqsubq_m_n_u8): Likewise.\n+\t(__arm_vqsubq_m_n_u32): Likewise.\n+\t(__arm_vqsubq_m_n_u16): Likewise.\n+\t(__arm_vqsubq_m_s8): Likewise.\n+\t(__arm_vqsubq_m_s32): Likewise.\n+\t(__arm_vqsubq_m_s16): Likewise.\n+\t(__arm_vqsubq_m_u8): Likewise.\n+\t(__arm_vqsubq_m_u32): Likewise.\n+\t(__arm_vqsubq_m_u16): Likewise.\n+\t(__arm_vrhaddq_m_s8): Likewise.\n+\t(__arm_vrhaddq_m_s32): Likewise.\n+\t(__arm_vrhaddq_m_s16): Likewise.\n+\t(__arm_vrhaddq_m_u8): Likewise.\n+\t(__arm_vrhaddq_m_u32): Likewise.\n+\t(__arm_vrhaddq_m_u16): Likewise.\n+\t(__arm_vrmulhq_m_s8): Likewise.\n+\t(__arm_vrmulhq_m_s32): Likewise.\n+\t(__arm_vrmulhq_m_s16): Likewise.\n+\t(__arm_vrmulhq_m_u8): Likewise.\n+\t(__arm_vrmulhq_m_u32): Likewise.\n+\t(__arm_vrmulhq_m_u16): Likewise.\n+\t(__arm_vrshlq_m_s8): Likewise.\n+\t(__arm_vrshlq_m_s32): Likewise.\n+\t(__arm_vrshlq_m_s16): Likewise.\n+\t(__arm_vrshlq_m_u8): Likewise.\n+\t(__arm_vrshlq_m_u32): Likewise.\n+\t(__arm_vrshlq_m_u16): Likewise.\n+\t(__arm_vrshrq_m_n_s8): Likewise.\n+\t(__arm_vrshrq_m_n_s32): Likewise.\n+\t(__arm_vrshrq_m_n_s16): Likewise.\n+\t(__arm_vrshrq_m_n_u8): Likewise.\n+\t(__arm_vrshrq_m_n_u32): Likewise.\n+\t(__arm_vrshrq_m_n_u16): Likewise.\n+\t(__arm_vshlq_m_n_s8): Likewise.\n+\t(__arm_vshlq_m_n_s32): Likewise.\n+\t(__arm_vshlq_m_n_s16): Likewise.\n+\t(__arm_vshlq_m_n_u8): Likewise.\n+\t(__arm_vshlq_m_n_u32): Likewise.\n+\t(__arm_vshlq_m_n_u16): Likewise.\n+\t(__arm_vshrq_m_n_s8): Likewise.\n+\t(__arm_vshrq_m_n_s32): Likewise.\n+\t(__arm_vshrq_m_n_s16): Likewise.\n+\t(__arm_vshrq_m_n_u8): Likewise.\n+\t(__arm_vshrq_m_n_u32): Likewise.\n+\t(__arm_vshrq_m_n_u16): Likewise.\n+\t(__arm_vsliq_m_n_s8): Likewise.\n+\t(__arm_vsliq_m_n_s32): Likewise.\n+\t(__arm_vsliq_m_n_s16): Likewise.\n+\t(__arm_vsliq_m_n_u8): Likewise.\n+\t(__arm_vsliq_m_n_u32): Likewise.\n+\t(__arm_vsliq_m_n_u16): Likewise.\n+\t(__arm_vsubq_m_n_s8): Likewise.\n+\t(__arm_vsubq_m_n_s32): Likewise.\n+\t(__arm_vsubq_m_n_s16): Likewise.\n+\t(__arm_vsubq_m_n_u8): Likewise.\n+\t(__arm_vsubq_m_n_u32): Likewise.\n+\t(__arm_vsubq_m_n_u16): Likewise.\n+\t(vqdmladhq_m): Define polymorphic variant.\n+\t(vqdmladhxq_m): Likewise.\n+\t(vqdmlsdhq_m): Likewise.\n+\t(vqdmlsdhxq_m): Likewise.\n+\t(vabdq_m): Likewise.\n+\t(vandq_m): Likewise.\n+\t(vbicq_m): Likewise.\n+\t(vbrsrq_m_n): Likewise.\n+\t(vcaddq_rot270_m): Likewise.\n+\t(vcaddq_rot90_m): Likewise.\n+\t(veorq_m): Likewise.\n+\t(vmaxq_m): Likewise.\n+\t(vminq_m): Likewise.\n+\t(vmladavaq_p): Likewise.\n+\t(vmlaq_m_n): Likewise.\n+\t(vmlasq_m_n): Likewise.\n+\t(vmulhq_m): Likewise.\n+\t(vmullbq_int_m): Likewise.\n+\t(vmulltq_int_m): Likewise.\n+\t(vornq_m): Likewise.\n+\t(vorrq_m): Likewise.\n+\t(vqdmlahq_m_n): Likewise.\n+\t(vqrdmlahq_m_n): Likewise.\n+\t(vqrdmlashq_m_n): Likewise.\n+\t(vqrshlq_m): Likewise.\n+\t(vqshlq_m_n): Likewise.\n+\t(vqshlq_m): Likewise.\n+\t(vrhaddq_m): Likewise.\n+\t(vrmulhq_m): Likewise.\n+\t(vrshlq_m): Likewise.\n+\t(vrshrq_m_n): Likewise.\n+\t(vshlq_m_n): Likewise.\n+\t(vshrq_m_n): Likewise.\n+\t(vsliq_m): Likewise.\n+\t(vaddq_m_n): Likewise.\n+\t(vaddq_m): Likewise.\n+\t(vhaddq_m_n): Likewise.\n+\t(vhaddq_m): Likewise.\n+\t(vhcaddq_rot270_m): Likewise.\n+\t(vhcaddq_rot90_m): Likewise.\n+\t(vhsubq_m): Likewise.\n+\t(vhsubq_m_n): Likewise.\n+\t(vmulq_m_n): Likewise.\n+\t(vmulq_m): Likewise.\n+\t(vqaddq_m_n): Likewise.\n+\t(vqaddq_m): Likewise.\n+\t(vqdmulhq_m_n): Likewise.\n+\t(vqdmulhq_m): Likewise.\n+\t(vsubq_m_n): Likewise.\n+\t(vsliq_m_n): Likewise.\n+\t(vqsubq_m_n): Likewise.\n+\t(vqsubq_m): Likewise.\n+\t(vqrdmulhq_m): Likewise.\n+\t(vqrdmulhq_m_n): Likewise.\n+\t(vqrdmlsdhxq_m): Likewise.\n+\t(vqrdmlsdhq_m): Likewise.\n+\t(vqrdmladhq_m): Likewise.\n+\t(vqrdmladhxq_m): Likewise.\n+\t(vmlsdavaxq_p): Likewise.\n+\t(vmlsdavaq_p): Likewise.\n+\t(vmladavaxq_p): Likewise.\n+\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n+\tbuiltin qualifier.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/mve.md (VHSUBQ_M): Define iterators.\n+\t(VSLIQ_M_N): Likewise.\n+\t(VQRDMLAHQ_M_N): Likewise.\n+\t(VRSHLQ_M): Likewise.\n+\t(VMINQ_M): Likewise.\n+\t(VMULLBQ_INT_M): Likewise.\n+\t(VMULHQ_M): Likewise.\n+\t(VMULQ_M): Likewise.\n+\t(VHSUBQ_M_N): Likewise.\n+\t(VHADDQ_M_N): Likewise.\n+\t(VORRQ_M): Likewise.\n+\t(VRMULHQ_M): Likewise.\n+\t(VQADDQ_M): Likewise.\n+\t(VRSHRQ_M_N): Likewise.\n+\t(VQSUBQ_M_N): Likewise.\n+\t(VADDQ_M): Likewise.\n+\t(VORNQ_M): Likewise.\n+\t(VQDMLAHQ_M_N): Likewise.\n+\t(VRHADDQ_M): Likewise.\n+\t(VQSHLQ_M): Likewise.\n+\t(VANDQ_M): Likewise.\n+\t(VBICQ_M): Likewise.\n+\t(VSHLQ_M_N): Likewise.\n+\t(VCADDQ_ROT270_M): Likewise.\n+\t(VQRSHLQ_M): Likewise.\n+\t(VQADDQ_M_N): Likewise.\n+\t(VADDQ_M_N): Likewise.\n+\t(VMAXQ_M): Likewise.\n+\t(VQSUBQ_M): Likewise.\n+\t(VMLASQ_M_N): Likewise.\n+\t(VMLADAVAQ_P): Likewise.\n+\t(VBRSRQ_M_N): Likewise.\n+\t(VMULQ_M_N): Likewise.\n+\t(VCADDQ_ROT90_M): Likewise.\n+\t(VMULLTQ_INT_M): Likewise.\n+\t(VEORQ_M): Likewise.\n+\t(VSHRQ_M_N): Likewise.\n+\t(VSUBQ_M_N): Likewise.\n+\t(VHADDQ_M): Likewise.\n+\t(VABDQ_M): Likewise.\n+\t(VQRDMLASHQ_M_N): Likewise.\n+\t(VMLAQ_M_N): Likewise.\n+\t(VQSHLQ_M_N): Likewise.\n+\t(mve_vabdq_m_<supf><mode>): Define RTL pattern.\n+\t(mve_vaddq_m_n_<supf><mode>): Likewise.\n+\t(mve_vaddq_m_<supf><mode>): Likewise.\n+\t(mve_vandq_m_<supf><mode>): Likewise.\n+\t(mve_vbicq_m_<supf><mode>): Likewise.\n+\t(mve_vbrsrq_m_n_<supf><mode>): Likewise.\n+\t(mve_vcaddq_rot270_m_<supf><mode>): Likewise.\n+\t(mve_vcaddq_rot90_m_<supf><mode>): Likewise.\n+\t(mve_veorq_m_<supf><mode>): Likewise.\n+\t(mve_vhaddq_m_n_<supf><mode>): Likewise.\n+\t(mve_vhaddq_m_<supf><mode>): Likewise.\n+\t(mve_vhsubq_m_n_<supf><mode>): Likewise.\n+\t(mve_vhsubq_m_<supf><mode>): Likewise.\n+\t(mve_vmaxq_m_<supf><mode>): Likewise.\n+\t(mve_vminq_m_<supf><mode>): Likewise.\n+\t(mve_vmladavaq_p_<supf><mode>): Likewise.\n+\t(mve_vmlaq_m_n_<supf><mode>): Likewise.\n+\t(mve_vmlasq_m_n_<supf><mode>): Likewise.\n+\t(mve_vmulhq_m_<supf><mode>): Likewise.\n+\t(mve_vmullbq_int_m_<supf><mode>): Likewise.\n+\t(mve_vmulltq_int_m_<supf><mode>): Likewise.\n+\t(mve_vmulq_m_n_<supf><mode>): Likewise.\n+\t(mve_vmulq_m_<supf><mode>): Likewise.\n+\t(mve_vornq_m_<supf><mode>): Likewise.\n+\t(mve_vorrq_m_<supf><mode>): Likewise.\n+\t(mve_vqaddq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqaddq_m_<supf><mode>): Likewise.\n+\t(mve_vqdmlahq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrdmlahq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrdmlashq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrshlq_m_<supf><mode>): Likewise.\n+\t(mve_vqshlq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqshlq_m_<supf><mode>): Likewise.\n+\t(mve_vqsubq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqsubq_m_<supf><mode>): Likewise.\n+\t(mve_vrhaddq_m_<supf><mode>): Likewise.\n+\t(mve_vrmulhq_m_<supf><mode>): Likewise.\n+\t(mve_vrshlq_m_<supf><mode>): Likewise.\n+\t(mve_vrshrq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshlq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshrq_m_n_<supf><mode>): Likewise.\n+\t(mve_vsliq_m_n_<supf><mode>): Likewise.\n+\t(mve_vsubq_m_n_<supf><mode>): Likewise.\n+\t(mve_vhcaddq_rot270_m_s<mode>): Likewise.\n+\t(mve_vhcaddq_rot90_m_s<mode>): Likewise.\n+\t(mve_vmladavaxq_p_s<mode>): Likewise.\n+\t(mve_vmlsdavaq_p_s<mode>): Likewise.\n+\t(mve_vmlsdavaxq_p_s<mode>): Likewise.\n+\t(mve_vqdmladhq_m_s<mode>): Likewise.\n+\t(mve_vqdmladhxq_m_s<mode>): Likewise.\n+\t(mve_vqdmlsdhq_m_s<mode>): Likewise.\n+\t(mve_vqdmlsdhxq_m_s<mode>): Likewise.\n+\t(mve_vqdmulhq_m_n_s<mode>): Likewise.\n+\t(mve_vqdmulhq_m_s<mode>): Likewise.\n+\t(mve_vqrdmladhq_m_s<mode>): Likewise.\n+\t(mve_vqrdmladhxq_m_s<mode>): Likewise.\n+\t(mve_vqrdmlsdhq_m_s<mode>): Likewise.\n+\t(mve_vqrdmlsdhxq_m_s<mode>): Likewise.\n+\t(mve_vqrdmulhq_m_n_s<mode>): Likewise.\n+\t(mve_vqrdmulhq_m_s<mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "53bf29e355eee4823b994ea16b797f54cd699c4e", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 3012, "deletions": 0, "changes": 3012, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002"}, {"sha": "666558899a9bd436d9fad4f815ba5f9dd56e71d1", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -513,3 +513,103 @@ VAR3 (QUADOP_UNONE_UNONE_NONE_NONE_UNONE, vabavq_p_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vabavq_p_u, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vshlq_m_u, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vshlq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsubq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vrmulhq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vrhaddq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vqsubq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vqsubq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vqaddq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vqaddq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vorrq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vornq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulltq_int_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmullbq_int_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulhq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlasq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlaq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmladavaq_p_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vminq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmaxq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vhsubq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vhsubq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vhaddq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vhaddq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, veorq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vcaddq_rot90_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vcaddq_rot270_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vbicq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vandq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vaddq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vaddq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vabdq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vrshlq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vqshlq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vqrshlq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vbrsrq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vsliq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshrq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vrshrq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vqshlq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsubq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrshlq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmulhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrhaddq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqsubq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqsubq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqshlq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrshlq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmulhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmulhq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmlsdhxq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmlsdhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmlashq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmlahq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmladhxq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqrdmladhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmulhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmulhq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlsdhxq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlsdhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlahq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmladhxq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmladhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqaddq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqaddq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vorrq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vornq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulltq_int_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmullbq_int_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulhq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlsdavaxq_p_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlsdavaq_p_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlasq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlaq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmladavaxq_p_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmladavaq_p_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vminq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmaxq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhsubq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhsubq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhcaddq_rot90_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhcaddq_rot270_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhaddq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vhaddq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, veorq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcaddq_rot90_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcaddq_rot270_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vbrsrq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vbicq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vandq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vabdq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vsliq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshrq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshlq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vrshrq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqshlq_m_n_s, v16qi, v8hi, v4si)"}, {"sha": "254cf93c11fa55de789a29ea37b5cd131912a268", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1123, "deletions": 2, "changes": 1125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -143,7 +143,37 @@\n \t\t\t VCVTQ_M_N_FROM_F_U VQSHLUQ_M_N_S VABAVQ_P_S\n \t\t\t VABAVQ_P_U VSHLQ_M_S VSHLQ_M_U VSRIQ_M_N_S\n \t\t\t VSRIQ_M_N_U VSUBQ_M_U VSUBQ_M_S VCVTQ_M_N_TO_F_U\n-\t\t\t VCVTQ_M_N_TO_F_S])\n+\t\t\t VCVTQ_M_N_TO_F_S VQADDQ_M_U VQADDQ_M_S\n+\t\t\t VRSHRQ_M_N_S VSUBQ_M_N_S VSUBQ_M_N_U VBRSRQ_M_N_S\n+\t\t\t VSUBQ_M_N_F VBICQ_M_F VHADDQ_M_U VBICQ_M_U VBICQ_M_S\n+\t\t\t VMULQ_M_N_U VHADDQ_M_S VORNQ_M_F VMLAQ_M_N_S VQSUBQ_M_U\n+\t\t\t VQSUBQ_M_S VMLAQ_M_N_U VQSUBQ_M_N_U VQSUBQ_M_N_S\n+\t\t\t VMULLTQ_INT_M_S VMULLTQ_INT_M_U VMULQ_M_N_S VMULQ_M_N_F\n+\t\t\t VMLASQ_M_N_U VMLASQ_M_N_S VMAXQ_M_U VQRDMLAHQ_M_N_U\n+\t\t\t VCADDQ_ROT270_M_F VCADDQ_ROT270_M_U VCADDQ_ROT270_M_S\n+\t\t\t VQRSHLQ_M_S VMULQ_M_F VRHADDQ_M_U VSHRQ_M_N_U\n+\t\t\t VRHADDQ_M_S VMULQ_M_S VMULQ_M_U VQRDMLASHQ_M_N_S\n+\t\t\t VRSHLQ_M_S VRSHLQ_M_U VRSHRQ_M_N_U VADDQ_M_N_F\n+\t\t\t VADDQ_M_N_S VADDQ_M_N_U VQRDMLASHQ_M_N_U VMAXQ_M_S\n+\t\t\t VQRDMLAHQ_M_N_S VORRQ_M_S VORRQ_M_U VORRQ_M_F\n+\t\t\t VQRSHLQ_M_U VRMULHQ_M_U VRMULHQ_M_S VMINQ_M_S VMINQ_M_U\n+\t\t\t VANDQ_M_F VANDQ_M_U VANDQ_M_S VHSUBQ_M_N_S VHSUBQ_M_N_U\n+\t\t\t VMULHQ_M_S VMULHQ_M_U VMULLBQ_INT_M_U\n+\t\t\t VMULLBQ_INT_M_S VCADDQ_ROT90_M_F\n+\t\t\t VSHRQ_M_N_S VADDQ_M_U VSLIQ_M_N_U\n+\t\t\t VQADDQ_M_N_S VBRSRQ_M_N_F VABDQ_M_F VBRSRQ_M_N_U\n+\t\t\t VEORQ_M_F VSHLQ_M_N_S VQDMLAHQ_M_N_U VQDMLAHQ_M_N_S\n+\t\t\t VSHLQ_M_N_U VMLADAVAQ_P_U VMLADAVAQ_P_S VSLIQ_M_N_S\n+\t\t\t VQSHLQ_M_U VQSHLQ_M_S VCADDQ_ROT90_M_U VCADDQ_ROT90_M_S\n+\t\t\t VORNQ_M_U VORNQ_M_S VQSHLQ_M_N_S VQSHLQ_M_N_U VADDQ_M_S\n+\t\t\t VHADDQ_M_N_S VADDQ_M_F VQADDQ_M_N_U VEORQ_M_S VEORQ_M_U\n+\t\t\t VHSUBQ_M_S VHSUBQ_M_U VHADDQ_M_N_U VHCADDQ_ROT90_M_S\n+\t\t\t VQRDMLSDHQ_M_S VQRDMLSDHXQ_M_S VQRDMLADHXQ_M_S\n+\t\t\t VQDMULHQ_M_S VMLADAVAXQ_P_S VQDMLADHXQ_M_S\n+\t\t\t VQRDMULHQ_M_S VMLSDAVAXQ_P_S VQDMULHQ_M_N_S\n+\t\t\t VHCADDQ_ROT270_M_S VQDMLSDHQ_M_S VQDMLSDHXQ_M_S\n+\t\t\t VMLSDAVAQ_P_S VQRDMLADHQ_M_S VQDMLADHQ_M_S\n+\t\t\t VQRDMULHQ_M_N_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -251,7 +281,37 @@\n \t\t       (VABAVQ_P_S \"s\") (VSHLQ_M_S \"s\") (VSHLQ_M_U \"u\")\n \t\t       (VSRIQ_M_N_S \"s\") (VSRIQ_M_N_U \"u\") (VSUBQ_M_S \"s\")\n \t\t       (VSUBQ_M_U \"u\") (VCVTQ_M_N_TO_F_S \"s\")\n-\t\t       (VCVTQ_M_N_TO_F_U \"u\")])\n+\t\t       (VCVTQ_M_N_TO_F_U \"u\") (VADDQ_M_N_U \"u\")\n+\t\t       (VSHLQ_M_N_S \"s\") (VMAXQ_M_U \"u\") (VHSUBQ_M_N_U \"u\")\n+\t\t       (VMULQ_M_N_S \"s\") (VQSHLQ_M_U \"u\") (VRHADDQ_M_S \"s\")\n+\t\t       (VEORQ_M_U \"u\") (VSHRQ_M_N_U \"u\") (VCADDQ_ROT90_M_U \"u\")\n+\t\t       (VMLADAVAQ_P_U \"u\") (VEORQ_M_S \"s\") (VBRSRQ_M_N_S \"s\")\n+\t\t       (VMULQ_M_U \"u\") (VQRDMLAHQ_M_N_S \"s\") (VHSUBQ_M_N_S \"s\")\n+\t\t       (VQRSHLQ_M_S \"s\") (VMULQ_M_N_U \"u\")\n+\t\t       (VMULQ_M_S \"s\") (VQSHLQ_M_N_U \"u\") (VSLIQ_M_N_U \"u\")\n+\t\t       (VMLADAVAQ_P_S \"s\") (VQRSHLQ_M_U \"u\")\n+\t\t       (VMULLBQ_INT_M_U \"u\") (VSHLQ_M_N_U \"u\") (VQSUBQ_M_U \"u\")\n+\t\t       (VQRDMLASHQ_M_N_U \"u\") (VRSHRQ_M_N_S \"s\")\n+\t\t       (VORNQ_M_S \"s\") (VCADDQ_ROT270_M_S \"s\") (VRHADDQ_M_U \"u\")\n+\t\t       (VRSHRQ_M_N_U \"u\") (VMLASQ_M_N_U \"u\") (VHSUBQ_M_U \"u\")\n+\t\t       (VQSUBQ_M_N_S \"s\") (VMULLTQ_INT_M_S \"s\")\n+\t\t       (VORRQ_M_S \"s\") (VQDMLAHQ_M_N_U \"u\") (VRSHLQ_M_S \"s\")\n+\t\t       (VHADDQ_M_U \"u\") (VHADDQ_M_N_S \"s\") (VMULLTQ_INT_M_U \"u\")\n+\t\t       (VORRQ_M_U \"u\") (VHADDQ_M_S \"s\") (VHADDQ_M_N_U \"u\")\n+\t\t       (VQDMLAHQ_M_N_S \"s\") (VMAXQ_M_S \"s\") (VORNQ_M_U \"u\")\n+\t\t       (VCADDQ_ROT270_M_U \"u\") (VQADDQ_M_U \"u\")\n+\t\t       (VQRDMLASHQ_M_N_S \"s\") (VBICQ_M_U \"u\") (VMINQ_M_U \"u\")\n+\t\t       (VSUBQ_M_N_S \"s\") (VMULLBQ_INT_M_S \"s\") (VQSUBQ_M_S \"s\")\n+\t\t       (VCADDQ_ROT90_M_S \"s\") (VRMULHQ_M_S \"s\") (VANDQ_M_U \"u\")\n+\t\t       (VMULHQ_M_S \"s\") (VADDQ_M_S \"s\") (VQRDMLAHQ_M_N_U \"u\")\n+\t\t       (VMLASQ_M_N_S \"s\") (VHSUBQ_M_S \"s\") (VRMULHQ_M_U \"u\")\n+\t\t       (VQADDQ_M_N_S \"s\") (VSHRQ_M_N_S \"s\") (VANDQ_M_S \"s\")\n+\t\t       (VABDQ_M_U \"u\") (VQSHLQ_M_S \"s\") (VABDQ_M_S \"s\")\n+\t\t       (VSUBQ_M_N_U \"u\") (VMLAQ_M_N_S \"s\") (VBRSRQ_M_N_U \"u\")\n+\t\t       (VADDQ_M_U \"u\") (VRSHLQ_M_U \"u\") (VSLIQ_M_N_S \"s\")\n+\t\t       (VQADDQ_M_N_U \"u\") (VADDQ_M_N_S \"s\") (VQSUBQ_M_N_U \"u\")\n+\t\t       (VMLAQ_M_N_U \"u\") (VMINQ_M_S \"s\") (VMULHQ_M_U \"u\")\n+\t\t       (VQADDQ_M_S \"s\") (VBICQ_M_S \"s\") (VQSHLQ_M_N_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -419,6 +479,47 @@\n (define_int_iterator VSRIQ_M_N [VSRIQ_M_N_S VSRIQ_M_N_U])\n (define_int_iterator VSUBQ_M [VSUBQ_M_U VSUBQ_M_S])\n (define_int_iterator VCVTQ_M_N_TO_F [VCVTQ_M_N_TO_F_U VCVTQ_M_N_TO_F_S])\n+(define_int_iterator VHSUBQ_M [VHSUBQ_M_S VHSUBQ_M_U])\n+(define_int_iterator VSLIQ_M_N [VSLIQ_M_N_U VSLIQ_M_N_S])\n+(define_int_iterator VRSHLQ_M [VRSHLQ_M_S VRSHLQ_M_U])\n+(define_int_iterator VMINQ_M [VMINQ_M_S VMINQ_M_U])\n+(define_int_iterator VMULLBQ_INT_M [VMULLBQ_INT_M_U VMULLBQ_INT_M_S])\n+(define_int_iterator VMULHQ_M [VMULHQ_M_S VMULHQ_M_U])\n+(define_int_iterator VMULQ_M [VMULQ_M_S VMULQ_M_U])\n+(define_int_iterator VHSUBQ_M_N [VHSUBQ_M_N_S VHSUBQ_M_N_U])\n+(define_int_iterator VHADDQ_M_N [VHADDQ_M_N_S VHADDQ_M_N_U])\n+(define_int_iterator VORRQ_M [VORRQ_M_S VORRQ_M_U])\n+(define_int_iterator VRMULHQ_M [VRMULHQ_M_U VRMULHQ_M_S])\n+(define_int_iterator VQADDQ_M [VQADDQ_M_U VQADDQ_M_S])\n+(define_int_iterator VRSHRQ_M_N [VRSHRQ_M_N_S VRSHRQ_M_N_U])\n+(define_int_iterator VQSUBQ_M_N [VQSUBQ_M_N_U VQSUBQ_M_N_S])\n+(define_int_iterator VADDQ_M [VADDQ_M_U VADDQ_M_S])\n+(define_int_iterator VORNQ_M [VORNQ_M_U VORNQ_M_S])\n+(define_int_iterator VRHADDQ_M [VRHADDQ_M_U VRHADDQ_M_S])\n+(define_int_iterator VQSHLQ_M [VQSHLQ_M_U VQSHLQ_M_S])\n+(define_int_iterator VANDQ_M [VANDQ_M_U VANDQ_M_S])\n+(define_int_iterator VBICQ_M [VBICQ_M_U VBICQ_M_S])\n+(define_int_iterator VSHLQ_M_N [VSHLQ_M_N_S VSHLQ_M_N_U])\n+(define_int_iterator VCADDQ_ROT270_M [VCADDQ_ROT270_M_U VCADDQ_ROT270_M_S])\n+(define_int_iterator VQRSHLQ_M [VQRSHLQ_M_U VQRSHLQ_M_S])\n+(define_int_iterator VQADDQ_M_N [VQADDQ_M_N_U VQADDQ_M_N_S])\n+(define_int_iterator VADDQ_M_N [VADDQ_M_N_S VADDQ_M_N_U])\n+(define_int_iterator VMAXQ_M [VMAXQ_M_S VMAXQ_M_U])\n+(define_int_iterator VQSUBQ_M [VQSUBQ_M_U VQSUBQ_M_S])\n+(define_int_iterator VMLASQ_M_N [VMLASQ_M_N_U VMLASQ_M_N_S])\n+(define_int_iterator VMLADAVAQ_P [VMLADAVAQ_P_U VMLADAVAQ_P_S])\n+(define_int_iterator VBRSRQ_M_N [VBRSRQ_M_N_U VBRSRQ_M_N_S])\n+(define_int_iterator VMULQ_M_N [VMULQ_M_N_U VMULQ_M_N_S])\n+(define_int_iterator VCADDQ_ROT90_M [VCADDQ_ROT90_M_U VCADDQ_ROT90_M_S])\n+(define_int_iterator VMULLTQ_INT_M [VMULLTQ_INT_M_S VMULLTQ_INT_M_U])\n+(define_int_iterator VEORQ_M [VEORQ_M_S VEORQ_M_U])\n+(define_int_iterator VSHRQ_M_N [VSHRQ_M_N_S VSHRQ_M_N_U])\n+(define_int_iterator VSUBQ_M_N [VSUBQ_M_N_S VSUBQ_M_N_U])\n+(define_int_iterator VHADDQ_M [VHADDQ_M_S VHADDQ_M_U])\n+(define_int_iterator VABDQ_M [VABDQ_M_S VABDQ_M_U])\n+(define_int_iterator VMLAQ_M_N [VMLAQ_M_N_S VMLAQ_M_N_U])\n+(define_int_iterator VQSHLQ_M_N [VQSHLQ_M_N_S VQSHLQ_M_N_U])\n+\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -5793,3 +5894,1023 @@\n   \"vpst\\;vcvtt.f%#<V_sz_elem>.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+;;\n+;; [vabdq_m_s, vabdq_m_u])\n+;;\n+(define_insn \"mve_vabdq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VABDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vabdt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddq_m_n_s, vaddq_m_n_u])\n+;;\n+(define_insn \"mve_vaddq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADDQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddt.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddq_m_u, vaddq_m_s])\n+;;\n+(define_insn \"mve_vaddq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddt.i%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vandq_m_u, vandq_m_s])\n+;;\n+(define_insn \"mve_vandq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VANDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vandt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vbicq_m_u, vbicq_m_s])\n+;;\n+(define_insn \"mve_vbicq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VBICQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vbict %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vbrsrq_m_n_u, vbrsrq_m_n_s])\n+;;\n+(define_insn \"mve_vbrsrq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VBRSRQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vbrsrt.%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcaddq_rot270_m_u, vcaddq_rot270_m_s])\n+;;\n+(define_insn \"mve_vcaddq_rot270_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCADDQ_ROT270_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcaddt.i%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcaddq_rot90_m_u, vcaddq_rot90_m_s])\n+;;\n+(define_insn \"mve_vcaddq_rot90_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCADDQ_ROT90_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vcaddt.i%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [veorq_m_s, veorq_m_u])\n+;;\n+(define_insn \"mve_veorq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VEORQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;veort %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhaddq_m_n_s, vhaddq_m_n_u])\n+;;\n+(define_insn \"mve_vhaddq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHADDQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhaddt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhaddq_m_s, vhaddq_m_u])\n+;;\n+(define_insn \"mve_vhaddq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHADDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhaddt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhsubq_m_n_s, vhsubq_m_n_u])\n+;;\n+(define_insn \"mve_vhsubq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHSUBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhsubt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhsubq_m_s, vhsubq_m_u])\n+;;\n+(define_insn \"mve_vhsubq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHSUBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhsubt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxq_m_s, vmaxq_m_u])\n+;;\n+(define_insn \"mve_vmaxq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMAXQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmaxt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminq_m_s, vminq_m_u])\n+;;\n+(define_insn \"mve_vminq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMINQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmint.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmladavaq_p_u, vmladavaq_p_s])\n+;;\n+(define_insn \"mve_vmladavaq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLADAVAQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmladavat.<supf>%#<V_sz_elem>\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlaq_m_n_s, vmlaq_m_n_u])\n+;;\n+(define_insn \"mve_vmlaq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLAQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlat.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlasq_m_n_u, vmlasq_m_n_s])\n+;;\n+(define_insn \"mve_vmlasq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLASQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlast.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulhq_m_s, vmulhq_m_u])\n+;;\n+(define_insn \"mve_vmulhq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULHQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmulht.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmullbq_int_m_u, vmullbq_int_m_s])\n+;;\n+(define_insn \"mve_vmullbq_int_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULLBQ_INT_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmullbt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulltq_int_m_s, vmulltq_int_m_u])\n+;;\n+(define_insn \"mve_vmulltq_int_m_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t\t\t  (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t\t\t  (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULLTQ_INT_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmulltt.<supf>%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulq_m_n_u, vmulq_m_n_s])\n+;;\n+(define_insn \"mve_vmulq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmult.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulq_m_s, vmulq_m_u])\n+;;\n+(define_insn \"mve_vmulq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmult.i%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vornq_m_u, vornq_m_s])\n+;;\n+(define_insn \"mve_vornq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VORNQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vornt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vorrq_m_s, vorrq_m_u])\n+;;\n+(define_insn \"mve_vorrq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VORRQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vorrt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqaddq_m_n_u, vqaddq_m_n_s])\n+;;\n+(define_insn \"mve_vqaddq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQADDQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqaddt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqaddq_m_u, vqaddq_m_s])\n+;;\n+(define_insn \"mve_vqaddq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQADDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqaddt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmlahq_m_n_s])\n+;;\n+(define_insn \"mve_vqdmlahq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLAHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmlaht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmlahq_m_n_s])\n+;;\n+(define_insn \"mve_vqrdmlahq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLAHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmlaht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmlashq_m_n_s])\n+;;\n+(define_insn \"mve_vqrdmlashq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLASHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmlasht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshlq_m_u, vqrshlq_m_s])\n+;;\n+(define_insn \"mve_vqrshlq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHLQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshlq_m_n_s, vqshlq_m_n_u])\n+;;\n+(define_insn \"mve_vqshlq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHLQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshlq_m_u, vqshlq_m_s])\n+;;\n+(define_insn \"mve_vqshlq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHLQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqsubq_m_n_u, vqsubq_m_n_s])\n+;;\n+(define_insn \"mve_vqsubq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSUBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqsubt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqsubq_m_u, vqsubq_m_s])\n+;;\n+(define_insn \"mve_vqsubq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSUBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqsubt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrhaddq_m_u, vrhaddq_m_s])\n+;;\n+(define_insn \"mve_vrhaddq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRHADDQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrhaddt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmulhq_m_u, vrmulhq_m_s])\n+;;\n+(define_insn \"mve_vrmulhq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMULHQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmulht.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshlq_m_s, vrshlq_m_u])\n+;;\n+(define_insn \"mve_vrshlq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRSHLQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshrq_m_n_s, vrshrq_m_n_u])\n+;;\n+(define_insn \"mve_vrshrq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred2>\" \"<MVE_constraint2>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRSHRQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrshrt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshlq_m_n_s, vshlq_m_n_u])\n+;;\n+(define_insn \"mve_vshlq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHLQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshrq_m_n_s, vshrq_m_n_u])\n+;;\n+(define_insn \"mve_vshrq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred2>\" \"<MVE_constraint2>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHRQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshrt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vsliq_m_n_u, vsliq_m_n_s])\n+;;\n+(define_insn \"mve_vsliq_m_n_<supf><mode>\"\n+   [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred>\" \"<MVE_constraint>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSLIQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vslit.%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vsubq_m_n_s, vsubq_m_n_u])\n+;;\n+(define_insn \"mve_vsubq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSUBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vsubt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhcaddq_rot270_m_s])\n+;;\n+(define_insn \"mve_vhcaddq_rot270_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHCADDQ_ROT270_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhcaddt.s%#<V_sz_elem>\\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vhcaddq_rot90_m_s])\n+;;\n+(define_insn \"mve_vhcaddq_rot90_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VHCADDQ_ROT90_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vhcaddt.s%#<V_sz_elem>\\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmladavaxq_p_s])\n+;;\n+(define_insn \"mve_vmladavaxq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLADAVAXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmladavaxt.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsdavaq_p_s])\n+;;\n+(define_insn \"mve_vmlsdavaq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLSDAVAQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsdavat.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsdavaxq_p_s])\n+;;\n+(define_insn \"mve_vmlsdavaxq_p_s<mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=e\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLSDAVAXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsdavaxt.s%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmladhq_m_s])\n+;;\n+(define_insn \"mve_vqdmladhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLADHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmladht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmladhxq_m_s])\n+;;\n+(define_insn \"mve_vqdmladhxq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLADHXQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmladhxt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmlsdhq_m_s])\n+;;\n+(define_insn \"mve_vqdmlsdhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLSDHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmlsdht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmlsdhxq_m_s])\n+;;\n+(define_insn \"mve_vqdmlsdhxq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLSDHXQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmlsdhxt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmulhq_m_n_s])\n+;;\n+(define_insn \"mve_vqdmulhq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmulht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmulhq_m_s])\n+;;\n+(define_insn \"mve_vqdmulhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmulht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmladhq_m_s])\n+;;\n+(define_insn \"mve_vqrdmladhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLADHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmladht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmladhxq_m_s])\n+;;\n+(define_insn \"mve_vqrdmladhxq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLADHXQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmladhxt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmlsdhq_m_s])\n+;;\n+(define_insn \"mve_vqrdmlsdhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLSDHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmlsdht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmlsdhxq_m_s])\n+;;\n+(define_insn \"mve_vqrdmlsdhxq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMLSDHXQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmlsdhxt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmulhq_m_n_s])\n+;;\n+(define_insn \"mve_vqrdmulhq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMULHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmulht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrdmulhq_m_s])\n+;;\n+(define_insn \"mve_vqrdmulhq_m_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRDMULHQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrdmulht.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+"}, {"sha": "276c55f8822af6aaac25dcb0ca143bba1d4474b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -1,3 +1,317 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshlq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshlq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsliq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_u8.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "a51b4cce6c1ddfaba0bff8745752aa60eb184f90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */"}, {"sha": "cddc068884f447b33830915e6e7c8cf5dea3d066", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */"}, {"sha": "d6cbba93ce94b8db6a10e72b5e60973888985672", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */"}, {"sha": "b35d8d66ae8974dc82a1a58543fe6e8206c97792", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */"}, {"sha": "3055fc296baa6219b09c13d3730e2af392e5dc39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */"}, {"sha": "03be33ffbdd8d5cbf3fc371278d85dce8a9622d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */"}, {"sha": "c18e1d0301d45d8b8ec1789b4c485c105a7c7b6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "37b4443980cb84a8402b82b29c09221422cc7b1a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "89cacc2010db449c231a33790e25e55b93e9c2d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "9039f51ecaa52c8e2ab90034ea69e4783504e5a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "fdf11aa4a36f92ca30ff9f03ec13eefdd758fa8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "35b71db32d2509e878ac0d009d65af069ab38418", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "337b76648733c86a0068b1e77a3fd70da45b6670", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "5832354caa3d5b4fb321d3655066600cd601d62d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "9c40875400f84765c68eaa350fb58bb4615e23c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "9bab84ec5e3f751c4aaddc606f892b61f5969779", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "b758ca6ee111a46e943cacfb49e0198f11c51368", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "f5918d6b2dc0ebb42d628a6e71c076f6720875ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "aa96d4df216729e7bb822f09723fd8afcdd45cb8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "e266b748058c8ba4c8f8d662178f3020bbb89c01", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "680d98cf4d28096c8ca233b15b754655c9f915d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "ab5bb9462f8eaa578849cea7294b73a4af416031", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "408a309c16d71facd84c547f3f525a1844aa3185", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "0b6338161c14a6bece22ab21037aa5e8f0c1179e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "3e1e8a20e568e9dd0024b19d893d6dadbe1213e3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "20b2366d44b3dc912f3f90ef7119ea457d345eca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "a54609daca67d91f327171a005d62f4e4f7eb349", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "18f29b0043e5e81539f9a0dad43d33f21701d7ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "840f613bd219f676f03f91e0f850577f28a49702", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "7ee610374265be2a536c4926f83ce61c7de6cc86", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "fe011ec0edeaf1bb26d057289f99d2a37893283e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "22b2673889f8f7f41cacd1abf7366aab6a86b595", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "fab7ec0acdb6f9cf7b962019f0a6a482c6c917ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */"}, {"sha": "6b0a5c3b28f0c31b36bafc4984e24cf4df97a820", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "68e40150b59ab3a3ad22efd3bffb6365fbb28178", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "d9956dcb1f1f192871e28d80a62fbf7d066e11bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */"}, {"sha": "f9068581ad2ad185c4bba944f06d82dad383755d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */"}, {"sha": "87d347c4ae92e67fbb765bbaf9790106c9bd964f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */"}, {"sha": "708d174d7742d0a5896098315cd89065c3687950", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */"}, {"sha": "070a4fcc66dedf9b1b21791ec1ab75f005d20742", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */"}, {"sha": "9f75313eefc6168ae77ef805fd20623e4e39146a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */"}, {"sha": "4cb5a30c71972f3ddc85a78fe89b8702dfcccc3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */"}, {"sha": "30da2de5b9cd3ede0de184ca028d8e6653039d9b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */"}, {"sha": "4ee23c284fc655a9fe577863ebe9915a5b835eb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */"}, {"sha": "42f83a62bbf6e568c931f8c2e3b5c2bcd93360f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */"}, {"sha": "1bbaaf5df1f7caf220b4ac25a9d784f6fa75e020", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */"}, {"sha": "16ac73d96c2209098fcc7d0cd7c93cadb6df3e44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */"}, {"sha": "bd4fdba125f68256e6bbdaebe003abbb0c8d3a5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */"}, {"sha": "7c3ff0d501ef627704a3b343dc8233409e8d7750", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "a4e62e05ef9c82a8b77cf5ba663b307d24ffc9d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "e7c91aafa7f304af56711ec0f2abcdaa1e431e82", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "9b2a380926d09d0b650e64f15e64c86ac1c6a5ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "fdfc5de15c1763af7318ad4ec9613a16041d1b57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "741e1860b08472df8db817274ae639b055881cf2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "72cc006e56d269ec0248056b7fd593e3faf6c49c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */"}, {"sha": "84c5f5a0c4f089fa0c1d500bfa006f815902c2bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */"}, {"sha": "2a391cb1dd4d7f4ddfa13c19f10ff8d3a04b041e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */"}, {"sha": "3d6ce0e41b1b009a3cf58ccd671e493dfa24f087", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */"}, {"sha": "6acad1b931a430afe963dbefa71330f3838e3a28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */"}, {"sha": "709c8d0a58254ded894b0a0d58a0db83c202f0ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */"}, {"sha": "421116a18bded9ab57a34eaebd81f86e2eab9dc9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */"}, {"sha": "2f9b1bbcb36b08d0003f459c0cd50a4414376523", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */"}, {"sha": "b9cec7db674bed89bcd7a7718271662c79b00264", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */"}, {"sha": "8045faf680f700d7e765e9a19e0398f17fd94d6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */"}, {"sha": "c65a2e04e0eaa64f5912b189880b722a5cfde7f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */"}, {"sha": "164098a45f8eac6a47540624c37152ab7cab6304", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */"}, {"sha": "bb9aa150eaa9eddc5aeacee5814611f3e09e6396", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */"}, {"sha": "d1a0f3624dd8aa5e6a2648f4745f2afc51838094", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */"}, {"sha": "65ba17485ed2fa910ca9a5a76b6605cb5249abe9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */"}, {"sha": "3289c1931d4455be2257722cca4d96df00ad3618", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */"}, {"sha": "266c8219ac56a2a9e113d901daafff3d71a93fdc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */"}, {"sha": "b42af7462b6b7e1bb4685f0fb2b8491a1320a501", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */"}, {"sha": "5e283a52a06e52de145b04e774951c7cae626bd5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */"}, {"sha": "ceefcd4468a6274de0b45f243d93fa304094cb24", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */"}, {"sha": "85dde181c14a2285e8a1f437924816858bcee28b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */"}, {"sha": "ceeb5d432f1b68183490d9b0713729e5f4479552", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */"}, {"sha": "b0656bcb5dbf6fbd7cfddb5386543ccfa3db570a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */"}, {"sha": "a1b9e29c2d52d924abdbc434923e5cf1cb2f8461", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */"}, {"sha": "a5cc707b0d1fabba567b22933a66cf348e0a1078", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */"}, {"sha": "7a0322fb8c1f9254dafbb73c1c5565f5a3a75095", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */"}, {"sha": "c9f84d10b8b093ea9048ad6dd8bd50e6621ee23f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */"}, {"sha": "0ea33ae3ba6c1c7da015d723db231ad420b663aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */"}, {"sha": "5ee5da89e6614e8de9eaa3752e5c0c8d820d1d50", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */"}, {"sha": "c5e2130bf8a32fda9d2acc0cb1f0195ed5efc3b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */"}, {"sha": "d1ae619e7cd9d22bb6ed68ec1fd2f377a6ba4c1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */"}, {"sha": "7d23817ceabff9c74dec17044b8f78946b566336", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */"}, {"sha": "3f4f8d0b11ffcc8fe19892d18e803083eb745135", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */"}, {"sha": "6d56612ac9d2c9a08c366934cc34ab198573257b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */"}, {"sha": "fd7a4b236eeb1626c273ed4b1cef7e46e103d4af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */"}, {"sha": "885d9ca5b922affb043dee26761c657f324815be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */"}, {"sha": "84b8960eb49a69659c4754ae43d43da5addc8f1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s16\"  }  } */"}, {"sha": "6181b85f39800f1e48e808e22f41e2d39df7a9cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s32\"  }  } */"}, {"sha": "99fe68eea82fdc6eadb6817c0caef9ee106ca8bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s8\"  }  } */"}, {"sha": "a3f307defd1aa57257b2fbd1eb2fcb09847cf5c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u16\"  }  } */"}, {"sha": "10b17c6fa3c700155b9ab51d1a19db7ae4c7f580", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u32\"  }  } */"}, {"sha": "54898e02faacfb0fcd7e4d593ce09d427f0b9e29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u8\"  }  } */"}, {"sha": "3ec6294e72c40955768948a5c70148a513e29aa0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */"}, {"sha": "5af847df6cb885d9b915f50d48d111036a3da3c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */"}, {"sha": "dc3d2303f013816c900c2fedc91adff47cc6e320", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */"}, {"sha": "8fe3ade9be26a8f367dac61f55b2ba7c05891455", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */"}, {"sha": "924322ee29d39150b968e364f639f89949a02f39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */"}, {"sha": "6e44d375f6280dfd604fb3565476aa2b212aa970", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p_u8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */"}, {"sha": "5ddefa91da9723b31ec81ef9f2f79830b85e8587", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */"}, {"sha": "f25f764284e30e525689210587da04310044d642", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */"}, {"sha": "3ea63d649817127a574ae4a1d86ed1f1e65795b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmladavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */\n+/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */"}, {"sha": "01b73b8417b6cd12fb68f5944adbd1af0d877a70", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s16\"  }  } */"}, {"sha": "c800e7b28668a223aed8f8e2954842dfabb60ac2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s32\"  }  } */"}, {"sha": "8fb6c70bd0ee102386139cdb5e6b520a12a93f17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.s8\"  }  } */"}, {"sha": "9ec669aae526547622417144bfda0c087eef5493", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u16\"  }  } */"}, {"sha": "2809abd93e99389939567b87b13d9113a0e86f17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u32\"  }  } */"}, {"sha": "a662b26da33503e4707b6be211067307599d199b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m_n_u8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+{\n+  return vmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlat.u8\"  }  } */"}, {"sha": "bf2209d0bbf852ef6065fdae0cf99611f3e2007f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s16\"  }  } */"}, {"sha": "014f571649bfffadd18b2e7df7998d969cfd86a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s32\"  }  } */"}, {"sha": "a347adcd6fc90c268847dd99136932f6643e0e87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.s8\"  }  } */"}, {"sha": "c0e3a26a7af479b672f23503b603020617c90305", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, uint16_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u16\"  }  } */"}, {"sha": "c74df5b4041aead0069e3a89e1527b7e8bb2ca06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, uint32_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u32\"  }  } */"}, {"sha": "3ca4a4b0e54065fd48a5fa8c8e1a928f6296c1cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlasq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlasq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m_n_u8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, uint8_t c, mve_pred16_t p)\n+{\n+  return vmlasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmlast.u8\"  }  } */"}, {"sha": "8ef9665e39d1aa40a47410b23bedfb4c8e265508", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s16\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavat.s16\"  }  } */"}, {"sha": "40326c882e58b6a9ecbe430c7285f0bf9795b6cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s32\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavat.s32\"  }  } */"}, {"sha": "5e035a3d02a114780e7e2b63ce041248c53b031f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaq_p_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaq_p_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavat.s8\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavat.s8\"  }  } */"}, {"sha": "a1f4fe72fa41eb5421e3a2aa540f5806b8d1af0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s16\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s16\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s16\"  }  } */"}, {"sha": "c659aa7fcc0d98ab7928ed3e2312289b89477127", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s32\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s32\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s32\"  }  } */"}, {"sha": "462c04cb4b11ee75d82b30710d00f751151b8e3c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsdavaxq_p_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsdavaxq_p_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s8\"  }  } */\n+\n+int32_t\n+foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vmlsdavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s8\"  }  } */\n+/* { dg-final { scan-assembler \"vmlsdavaxt.s8\"  }  } */"}, {"sha": "e73de9b2113c75b2c146ae24e73f85a70a31df8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s16\"  }  } */"}, {"sha": "21fa61f9da422176b9a38da16acf2af609235cb9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s32\"  }  } */"}, {"sha": "e789775792ea70b6f5615967b50302f45642406f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s8\"  }  } */"}, {"sha": "0b6dba78092bed9bd328efa2ec73c56ebe75eb10", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u16\"  }  } */"}, {"sha": "265212a4c41a104bc57f2b5243f5ef7a243b2fcd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u32\"  }  } */"}, {"sha": "5212df1f70dcd32b615d724486c39cc8f667446d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u8\"  }  } */"}, {"sha": "d1548b245cf62d54951bfd61a3fb83e8d8a2d1ee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s16\"  }  } */"}, {"sha": "8ae8963b93585ca07dd3988c78b74bcaaa9bce6a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s32\"  }  } */"}, {"sha": "a5959c2b344f6458cb20c0b74b9b38e8e74eaa85", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s8\"  }  } */"}, {"sha": "2fb72175639e962575450534becab5e75a49b232", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u16\"  }  } */"}, {"sha": "2ba1bfc036816a4b5d0599901a17a312ef56609a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64x2_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u32\"  }  } */"}, {"sha": "fa15fd2d97eb428ac019dbebb3bb81b0c69ef897", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u8\"  }  } */"}, {"sha": "8c602dce7b8ac9d0e69f053d357d953a086a04ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s16\"  }  } */"}, {"sha": "a5a3e8afc025b3bd37f871d182e8d454d252029e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s32\"  }  } */"}, {"sha": "3dd90ba963f37f798b07f1f07a758901d951bfc8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s8\"  }  } */"}, {"sha": "9a8d76649671d6f7632d04a78863c6d78489a340", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u16\"  }  } */"}, {"sha": "0f072e77cc96dafd9aee2a8bb5ae8f83d7a15a26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64x2_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint64x2_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u32\"  }  } */"}, {"sha": "20c067b305bc50f36b2a671aab7099c6af50e895", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u8\"  }  } */"}, {"sha": "5c73b8b757eeeb92458e79074e2076b482c1724e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "8cfa1b83efb36e59e1bdd0a6d8a776b9511e0b5d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "82492dd42ae764463c7392b6f246f21e4f946d2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "9e2e4839c87dea06f3c9200c675e4ea5877e6609", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "4aced386142c65d1aa39350298efb036437773f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "7afcd4772146a4d5e214d0ba6fc0764ae40eeab4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "1b32d9bf07caee812d87cb00c9d1dff9e11e6e91", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "cb4e54ba64562f0efd2a190e2e8afc40cf541e93", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "90c8d59499f4a992e0ac81b6d1871e87ef1bbb14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "7f10e89373608bf9d21354d02a4a86e5c044917b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "521658cba45abf653c7c0cfc5cb175e6e84e6f14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "d9af6fa2d587ec0ae49db5f33821d4e5c50f9123", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "bc2c3b8f4e0105c57aaaf73e0c3988f2c66ab75a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "2c50ea2eb040250dcc9a9d61ab4818a06ffa5f02", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "20bf2ebd74149423b433a30fcbddec6100f56d44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "d3e68c621eed285801ce377a6a8d4b851305aa59", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "594822e5779253697a2368d124301f964b25e07f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "fcab2ced2c10004e8b1a60d269e0a2aebf737b93", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "cd55980dd4767d2d11af0db545a77e81be16b977", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "6f7ce5589b99083779c7920df96bcfeef7a9ce82", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "ed99e5109a3066a3af28620a4038c25843ea03aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "e48050a8c66eddd762833d93dadbd4957239c0b6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "611e8156407d381c12102ef8c47dea46866ec8ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "e2d49f523d3cf27cb9137cb7ecb879d5a271f429", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "367bf20127eb3b74399d152f8a66de46fcb650d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */"}, {"sha": "3082db02be23e7b94c03533781b3f684263222d8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */"}, {"sha": "12e65734c367383690395540f15b1ced48fe42a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */"}, {"sha": "1ca7a1cd63ff0bc594c51b5aa4520e055273bc60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */"}, {"sha": "b27a7d6a668097b1cf64dfc499516cd96552ca42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */"}, {"sha": "434125ed71597612012b9c6ee81b086489ea575e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */"}, {"sha": "de13f243637b8451bfd805c447d0c67f2a7fb402", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s16\"  }  } */"}, {"sha": "57044b2debad1a47028d2a1308689198267d8234", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s32\"  }  } */"}, {"sha": "6fa2718f1305513ea0a52d1651c917d98a1d5966", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.s8\"  }  } */"}, {"sha": "9f304eeb191a989baaa9c60d3a68170a08685b67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u16\"  }  } */"}, {"sha": "3fd179fe6cde4a63f03eb01be079778414300686", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u32\"  }  } */"}, {"sha": "136cdb4d2e201bb75c9651e9fb3ef9f14bfa0b70", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqaddq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqaddq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vqaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqaddt.u8\"  }  } */"}, {"sha": "80616799be46a0c7d27c234989ece531209b75b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s16\"  }  } */"}, {"sha": "e6ee9a70a5ea4bf8eaa56127f8c30b15ebfc142d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s32\"  }  } */"}, {"sha": "bf4ff90f9d66774bae9ae82907143fb7e78daabf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladht.s8\"  }  } */"}, {"sha": "d45c6e9e048863e7aa819a1bf802b899ec149f8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s16\"  }  } */"}, {"sha": "daea1cfce70aa00e5293629f871fea0b809c9268", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s32\"  }  } */"}, {"sha": "138cfd5b0da1c181d2d3eccc71a04f1fb9f94a92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmladhxq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmladhxt.s8\"  }  } */"}, {"sha": "91e88898fb9fe295ca382f7f1f3a5036b9f174c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s16\"  }  } */"}, {"sha": "2e0854763f3c3a077764557245cc76fc1db76ba9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s32\"  }  } */"}, {"sha": "430a9cf50c6e80734f4c03620f89ad4772c4f8c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlahq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlahq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlaht.s8\"  }  } */"}, {"sha": "a79b13d2d85130756fb3444d7dcb1ec7cb8c7399", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s16\"  }  } */"}, {"sha": "c15b74a9d9c207d98a26f8fc7d7639b0ecac8777", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s32\"  }  } */"}, {"sha": "571962d8f60a6ff9eb44475539ef358077f2d37c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdht.s8\"  }  } */"}, {"sha": "47b95dd5fe4ffdbf10232d67aeffb26728dace90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s16\"  }  } */"}, {"sha": "6e20e5bee8f835c9398b671d9dbeb059c05a805c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s32\"  }  } */"}, {"sha": "297db079cbbe02e1da19ec18214c9a8f2eaad54d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlsdhxq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlsdhxt.s8\"  }  } */"}, {"sha": "747fd3c08c9b8f7fb110326b6c2db1227ecf1e0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s16\"  }  } */"}, {"sha": "b50f91401cab3715c8660555ee006ee9c7ed7a2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s32\"  }  } */"}, {"sha": "1f4dc63dba506bd1df10ef3158a33ee98b59a122", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s8\"  }  } */"}, {"sha": "59e6b18f98142697dee49e275f9b12077fcbb565", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s16\"  }  } */"}, {"sha": "b806a660de3af4c7d45593d8a0085db07985756d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s32\"  }  } */"}, {"sha": "3f8fcf6dde0492af0a0dac4b6ba3ae67e28f7d8a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulht.s8\"  }  } */"}, {"sha": "ba1b44ddcd8f75b84dc2cce0e044d3d27ae69b08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s16\"  }  } */"}, {"sha": "8503dfc64b195025b998cdce908a7f7f22f17a4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s32\"  }  } */"}, {"sha": "f13b6251de85135fa03d98513c5a30d3bfbb29e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladht.s8\"  }  } */"}, {"sha": "854eac4250e78f2b3a6ba0497cd0f0cb7794b380", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s16\"  }  } */"}, {"sha": "b96ca346a393a13100b21cc7ccf50f83c8882adc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s32\"  }  } */"}, {"sha": "af480b0a3e2e87ba72c9cde6b6028b855fa2392c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmladhxq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmladhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmladhxt.s8\"  }  } */"}, {"sha": "b9cd42e3548a5f52eab229c6c668b3b4c4521235", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s16\"  }  } */"}, {"sha": "cf14605d2e08501a3c1e3ed555edc8cf32992593", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s32\"  }  } */"}, {"sha": "4ac58f2f26eedf626b7cf355c585dddae09dbb92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlahq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlahq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqrdmlahq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlaht.s8\"  }  } */"}, {"sha": "f62974e98e339e43b0f458097b423de9ddfc1978", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s16\"  }  } */"}, {"sha": "2250d74be4d35ff4a9cdef2b993b783e90e97352", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s32\"  }  } */"}, {"sha": "f85f30211dd269078eb4f3f5cf43e8ecfc6021a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlashq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlashq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqrdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlasht.s8\"  }  } */"}, {"sha": "0aae23ff294120fd075e2bbdba505aec97b8576e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s16\"  }  } */"}, {"sha": "3490312495a1a6bdd5851e15bc5f45b91e1c7216", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s32\"  }  } */"}, {"sha": "4fef001bdcc212595851989077cf57232629486e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdht.s8\"  }  } */"}, {"sha": "ac86aaeedee363ffae922622ce856db15562141e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s16\"  }  } */"}, {"sha": "7dd2d425653f1ed3eec3d186e2d35d0996f57570", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s32\"  }  } */"}, {"sha": "da2d78ec1e63e33d57a5103771e7a373dc31c5ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmlsdhxq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmlsdhxq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmlsdhxt.s8\"  }  } */"}, {"sha": "ebea67e11391eedced3ed53a42e470569d148c0f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */"}, {"sha": "2ae4b9aaac67e277061a292cf0ed5a2facb4e150", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */"}, {"sha": "f44778e7f462a4be26e4ae7a29c7c71921840cc6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */"}, {"sha": "9acdb2f6c88188bc79a220a46a274114646d9503", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */"}, {"sha": "5b041f889a4f37eb5cf0fcf2bb3c113d754dd793", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */"}, {"sha": "bb339ee5289296f9d9d52ac02f088a183ae2d14c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrdmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */"}, {"sha": "71391903b6ea1f94c8d5908d48b0dc0361a4f552", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s16\"  }  } */"}, {"sha": "3fd1b4662be8cdf91c0138030915fb1205ef9126", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s32\"  }  } */"}, {"sha": "f23f5c90e2e18d97c35d4f3a4a5eb617c3a3201c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.s8\"  }  } */"}, {"sha": "2675da7c4c5a96c138e42e0d1bf2d2872e18f5b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u16\"  }  } */"}, {"sha": "3da5ec0ce673edf25e7fc8429601c131fd0da119", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u32\"  }  } */"}, {"sha": "2dd5be97d4bda3b6c912007f919ac68c20f8a01d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshlq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshlq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshlt.u8\"  }  } */"}, {"sha": "7077b944632638cde948728b170821e1aa9ae77a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_s16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s16\"  }  } */"}, {"sha": "301e9d606d47c04eb88d377d8cabc2c370f90cf1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_s32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s32\"  }  } */"}, {"sha": "1cb13d2108f22571534e68eb53552894e6fc03ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_s8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s8\"  }  } */"}, {"sha": "5832a1ef312d8fcaeb3cbccc26454f786e57883e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u16\"  }  } */"}, {"sha": "73a8789debef666fe2f20a4180002599b26265c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_u32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u32\"  }  } */"}, {"sha": "18fd8664578ce2e52432920deac747ab5c12866e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vqshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u8\"  }  } */"}, {"sha": "ebca2cfd367eaf015e9e1b783abe4b1f588fc585", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s16\"  }  } */"}, {"sha": "9e0c647ce37271c7f5a2fea504c332ad00d7064c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s32\"  }  } */"}, {"sha": "86850b387e8da0235c4c5fad9e0b51fe8ed05135", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.s8\"  }  } */"}, {"sha": "1615cbfe0b9d1295a8ef2828af7e49f1a744e026", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u16\"  }  } */"}, {"sha": "97ac94cc1375537459dcd363b21a34cc857c72d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u32\"  }  } */"}, {"sha": "1f2de6d064c96dbcb0469206c92d799c6968630f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshlq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshlq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlt.u8\"  }  } */"}, {"sha": "823c1f9b5d67e5dfd10a0a0182554c8b5f8281db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s16\"  }  } */"}, {"sha": "98c1c212458dc6d51a357b9c3e6553765ce66757", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s32\"  }  } */"}, {"sha": "dfe88e4fda6bff997e0c3854c1d760935d26a1bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s8\"  }  } */"}, {"sha": "2ede884b802d7c34a1db556b40839db5a7d65e50", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u16\"  }  } */"}, {"sha": "6396a97bf29e2867891d9153c469f0475177aa55", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u32\"  }  } */"}, {"sha": "fadfcf66c654eaf7ba39db9afce191bb49802b50", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_n_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u8\"  }  } */"}, {"sha": "d890d7f54221b523fda2460e56f841db944ac35a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s16\"  }  } */"}, {"sha": "450a5bbd692661c578084ec7b13c5edbda4df5b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s32\"  }  } */"}, {"sha": "88afb828a0d41842b5015ca21c97633734c65a77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.s8\"  }  } */"}, {"sha": "8a85984098eb408f49af0882824f7f60645bf7a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u16\"  }  } */"}, {"sha": "42bc3c19e8593ce90a1b9a7c1ec0b8623123a464", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u32\"  }  } */"}, {"sha": "936a383f61ef2af50ce65e10ea538de1b244caa7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqsubq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqsubq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vqsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqsubt.u8\"  }  } */"}, {"sha": "e7c6df563c8c55dd272ce4968ce219858b7c772f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s16\"  }  } */"}, {"sha": "9643ad8f1e3ff66e6f515725f97a66a873b21a53", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s32\"  }  } */"}, {"sha": "a1e04113c1edf55447261ceea52aefde3b09967b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.s8\"  }  } */"}, {"sha": "490217c642dfc7419138e03eed3866eea6cfe418", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u16\"  }  } */"}, {"sha": "7935fae33d4dc5c9fb6c0aa43ac5ce59ca34bb71", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u32\"  }  } */"}, {"sha": "c49845b3a8236b45d05dfcd2fec8502d14fa61b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrhaddq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrhaddq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vrhaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrhaddt.u8\"  }  } */"}, {"sha": "421fda1636d6552f11523c212846ce4b7268e0af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s16\"  }  } */"}, {"sha": "226747cc578bad7d56619bdf70644f9c18fd4392", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s32\"  }  } */"}, {"sha": "d90b02e767f60e576e19ecadae711fa2aa2bd677", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.s8\"  }  } */"}, {"sha": "1a3618d1663c712da209d809199bc5ad08a77eac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u16\"  }  } */"}, {"sha": "42b5efe41913d27b73135324efb0c776a022f533", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u32\"  }  } */"}, {"sha": "0bc38089601eccefa61d204d07d20174a6a26f04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmulhq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmulhq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vrmulhq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrmulht.u8\"  }  } */"}, {"sha": "41430126d6ea38effb020cc50748ea9a8c45b4a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s16\"  }  } */"}, {"sha": "9e0bb7c6d319e520f7d043ceb74fc1bea1c57949", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s32\"  }  } */"}, {"sha": "5bcf233316a7e728add3a26649e7a8c967add97f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.s8\"  }  } */"}, {"sha": "59dd87031a463c6d4048e4c2ecccfd8435f437be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u16\"  }  } */"}, {"sha": "a5d72a2ab21e0394f68845ea69b83bac7251480f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u32\"  }  } */"}, {"sha": "058099194d3206602c8d8145cbf0960294350905", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshlq_m_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshlq_m_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vrshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshlt.u8\"  }  } */"}, {"sha": "bf8b870abc69a1c85aec2bcc08050f3c7421fa06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_s16 (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s16\"  }  } */"}, {"sha": "f6029fc0f41b37e506e77e9198aa973f46617c84", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_s32 (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s32\"  }  } */"}, {"sha": "07100c19f77180ef4d0396743df93d237fe1b8dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_s8 (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.s8\"  }  } */"}, {"sha": "957d0e5a1e9a14d44bd02c9feb11d35f3774467c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_u16 (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u16\"  }  } */"}, {"sha": "bcca8e228a791d196f36e3a408330ca9365ff704", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_u32 (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u32\"  }  } */"}, {"sha": "2b53dc60b3eef5640f0813ee1282769e8e62686c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m_n_u8 (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrshrq_m (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrt.u8\"  }  } */"}, {"sha": "632b7bf62d3c6fd22e4adf83990f82476bddd788", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_s16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s16\"  }  } */"}, {"sha": "833cef016af214dda4dd6ad2d80d493f2110c364", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_s32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s32\"  }  } */"}, {"sha": "58b570d9bd314498ac30b2cdcff4aeea3cec698d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_s8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s8\"  }  } */"}, {"sha": "b98324c3f3a555958527d724f884fe6a688da522", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u16\"  }  } */"}, {"sha": "ddd72afcce69f12a176ee0db82250c88cdea110a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_u32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u32\"  }  } */"}, {"sha": "ff9e57c630d0ab832964145bb9f82d8e5c507d0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshlq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u8\"  }  } */"}, {"sha": "b9a31a935205b15661269a40323ec59e45bb196e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_s16 (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s16\"  }  } */"}, {"sha": "b3a7767a2f85f8301e8eae89246a415b0f4a04dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_s32 (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s32\"  }  } */"}, {"sha": "f298429ee1f4720c96f05fc34deea218d2ce3d6c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_s8 (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.s8\"  }  } */"}, {"sha": "23099df7abc375d16edafd1c5e92534d558e2f88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_u16 (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u16\"  }  } */"}, {"sha": "12c1866f68b96b08b2c8f19c4f21869bdac74cb4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_u32 (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u32\"  }  } */"}, {"sha": "d88c5afed1f30dcef4342767067c02d7fb982de2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshrq_m_n_u8 (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshrq_m (inactive, a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrt.u8\"  }  } */"}, {"sha": "edaa7bfee689f14eb11a692ae0843af23d0771f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_s16 (a, b, 15, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 15, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.16\"  }  } */"}, {"sha": "8ea0d401c370f34d028a8a171ac7bd19c4d38e69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_s32 (a, b, 31, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 31, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.32\"  }  } */"}, {"sha": "96c3bbc9563e88a96ee4a45d339405e99c79caee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_s8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_s8 (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.8\"  }  } */"}, {"sha": "40d0b084b0ff330f6a319ca301867bbdf55be58b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_u16 (a, b, 15, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 15, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.16\"  }  } */"}, {"sha": "14fcc4e7a219c62ac65b4e4f068027db85f52996", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u32.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_u32 (a, b, 31, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 31, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.32\"  }  } */"}, {"sha": "506bbd2a897f6dbff6f327328c98225a13e13f96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsliq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsliq_m_n_u8.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsliq_m_n_u8 (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsliq_m (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vslit.8\"  }  } */"}, {"sha": "42367ddddd304346ae0fcf469f7c5eae77a6c2fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_s16.c?ref=8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i16\"  }  } */"}]}