{"sha": "7ad93142a811fc19c99d1e61f994c32344f73794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FkOTMxNDJhODExZmMxOWM5OWQxZTYxZjk5NGMzMjM0NGY3Mzc5NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-17T21:10:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-17T21:10:19Z"}, "message": "postreload.c (reload_combine): Call control_flow_insn_p only once.\n\n\t* postreload.c (reload_combine): Call control_flow_insn_p only once.\n\tReverse backward loop.  Fix formatting issues.\n\nFrom-SVN: r166878", "tree": {"sha": "1ed791d76477d1f0e296456bed57934afc778f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed791d76477d1f0e296456bed57934afc778f47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ad93142a811fc19c99d1e61f994c32344f73794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad93142a811fc19c99d1e61f994c32344f73794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad93142a811fc19c99d1e61f994c32344f73794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad93142a811fc19c99d1e61f994c32344f73794/comments", "author": null, "committer": null, "parents": [{"sha": "a6759a8a0b0e969c699c2c8271387086445e504c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6759a8a0b0e969c699c2c8271387086445e504c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6759a8a0b0e969c699c2c8271387086445e504c"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "005e26a1898b1cb7e91a8c819bb257c8a6eb57a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad93142a811fc19c99d1e61f994c32344f73794/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad93142a811fc19c99d1e61f994c32344f73794/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ad93142a811fc19c99d1e61f994c32344f73794", "patch": "@@ -1,3 +1,8 @@\n+2010-11-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* postreload.c (reload_combine): Call control_flow_insn_p only once.\n+\tReverse backward loop.  Fix formatting issues.\n+\n 2010-11-17  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-parser.c (c_token_is_qualifier,"}, {"sha": "1772c9e058d06b8cd1a1f52e776c6248cfe0f2b0", "filename": "gcc/postreload.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad93142a811fc19c99d1e61f994c32344f73794/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad93142a811fc19c99d1e61f994c32344f73794/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=7ad93142a811fc19c99d1e61f994c32344f73794", "patch": "@@ -1224,7 +1224,6 @@ static void\n reload_combine (void)\n {\n   rtx insn, prev;\n-  int i;\n   basic_block bb;\n   unsigned int r;\n   int min_labelno, n_labels;\n@@ -1292,6 +1291,7 @@ reload_combine (void)\n \n   for (insn = get_last_insn (); insn; insn = prev)\n     {\n+      bool control_flow_insn;\n       rtx note;\n \n       prev = PREV_INSN (insn);\n@@ -1311,7 +1311,8 @@ reload_combine (void)\n \n       reload_combine_ruid++;\n \n-      if (control_flow_insn_p (insn))\n+      control_flow_insn = control_flow_insn_p (insn);\n+      if (control_flow_insn)\n \tlast_jump_ruid = reload_combine_ruid;\n \n       if (reload_combine_recognize_const_pattern (insn)\n@@ -1339,9 +1340,9 @@ reload_combine (void)\n \t        {\n \t\t  unsigned int i;\n \t\t  unsigned int start_reg = REGNO (usage_rtx);\n-\t\t  unsigned int num_regs =\n-\t\t\thard_regno_nregs[start_reg][GET_MODE (usage_rtx)];\n-\t\t  unsigned int end_reg  = start_reg + num_regs - 1;\n+\t\t  unsigned int num_regs\n+\t\t    = hard_regno_nregs[start_reg][GET_MODE (usage_rtx)];\n+\t\t  unsigned int end_reg = start_reg + num_regs - 1;\n \t\t  for (i = start_reg; i <= end_reg; i++)\n \t\t    if (GET_CODE (XEXP (link, 0)) == CLOBBER)\n \t\t      {\n@@ -1352,10 +1353,9 @@ reload_combine (void)\n \t\t      reg_state[i].use_index = -1;\n \t         }\n \t     }\n-\n \t}\n \n-      if (control_flow_insn_p (insn) && GET_CODE (PATTERN (insn)) != RETURN)\n+      if (control_flow_insn && GET_CODE (PATTERN (insn)) != RETURN)\n \t{\n \t  /* Non-spill registers might be used at the call destination in\n \t     some unknown fashion, so we have to mark the unknown use.  */\n@@ -1367,20 +1367,19 @@ reload_combine (void)\n \t  else\n \t    live = &ever_live_at_start;\n \n-\t  for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; --i)\n-\t    if (TEST_HARD_REG_BIT (*live, i))\n-\t      reg_state[i].use_index = -1;\n+\t  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n+\t    if (TEST_HARD_REG_BIT (*live, r))\n+\t      reg_state[r].use_index = -1;\n \t}\n \n-      reload_combine_note_use (&PATTERN (insn), insn,\n-\t\t\t       reload_combine_ruid, NULL_RTX);\n+      reload_combine_note_use (&PATTERN (insn), insn, reload_combine_ruid,\n+\t\t\t       NULL_RTX);\n+\n       for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n \t{\n-\t  if (REG_NOTE_KIND (note) == REG_INC\n-\t      && REG_P (XEXP (note, 0)))\n+\t  if (REG_NOTE_KIND (note) == REG_INC && REG_P (XEXP (note, 0)))\n \t    {\n \t      int regno = REGNO (XEXP (note, 0));\n-\n \t      reg_state[regno].store_ruid = reload_combine_ruid;\n \t      reg_state[regno].real_store_ruid = reload_combine_ruid;\n \t      reg_state[regno].use_index = -1;"}]}