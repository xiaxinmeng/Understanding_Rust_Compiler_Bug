{"sha": "52a921766efef3d82ec99d240a8f931ddbb1b20a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhOTIxNzY2ZWZlZjNkODJlYzk5ZDI0MGE4ZjkzMWRkYmIxYjIwYQ==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "1999-12-01T08:13:54Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "1999-12-01T08:13:54Z"}, "message": "ggc.h (ggc_test_and_set_mark): New macro.\n\n\t* ggc.h (ggc_test_and_set_mark): New macro.\n\t(ggc_mark_rtx): Use ggc_test_and_set_mark.\n\t(ggc_mark_tree): Likewise.\n\t(ggc_mark_rtvec): Likewise.\n\t* ggc-common.c (ggc_mark_rtx_children): Reduce recursion.\n\nFrom-SVN: r30734", "tree": {"sha": "c96dbba718d499e1c801803080a2d22950da4a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c96dbba718d499e1c801803080a2d22950da4a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a921766efef3d82ec99d240a8f931ddbb1b20a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a921766efef3d82ec99d240a8f931ddbb1b20a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a921766efef3d82ec99d240a8f931ddbb1b20a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a921766efef3d82ec99d240a8f931ddbb1b20a/comments", "author": null, "committer": null, "parents": [{"sha": "777ad4c21f744ae353c2ee440c61ef7600174823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777ad4c21f744ae353c2ee440c61ef7600174823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777ad4c21f744ae353c2ee440c61ef7600174823"}], "stats": {"total": 171, "additions": 100, "deletions": 71}, "files": [{"sha": "6f153d10e0fc934920a28c09d6a7362d77d1a7c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52a921766efef3d82ec99d240a8f931ddbb1b20a", "patch": "@@ -1,3 +1,11 @@\n+1999-11-30  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* ggc.h (ggc_test_and_set_mark): New macro.\n+\t(ggc_mark_rtx): Use ggc_test_and_set_mark.\n+\t(ggc_mark_tree): Likewise.\n+\t(ggc_mark_rtvec): Likewise.\n+\t* ggc-common.c (ggc_mark_rtx_children): Reduce recursion. \n+\n 1999-11-30  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* dwarf2out.c (scope_die_for): Only handle types.  Only search for"}, {"sha": "4fd9810e6332eb61120aef8ac90c1ea837c17a3f", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 72, "deletions": 56, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=52a921766efef3d82ec99d240a8f931ddbb1b20a", "patch": "@@ -234,76 +234,92 @@ ggc_mark_rtx_children (r)\n {\n   const char *fmt;\n   int i;\n-  enum rtx_code code = GET_CODE (r);\n+  rtx next_rtx;\n \n-  /* Collect statistics, if appropriate.  */\n-  if (ggc_stats)\n+  do \n     {\n-      ++ggc_stats->num_rtxs[(int) code];\n-      ggc_stats->size_rtxs[(int) code] += ggc_get_size (r);\n-    }\n+      enum rtx_code code = GET_CODE (r);\n+      /* This gets set to a child rtx to eliminate tail recursion.  */\n+      next_rtx = NULL;\n \n-  /* ??? If (some of) these are really pass-dependant info, do we have\n-     any right poking our noses in?  */\n-  switch (code)\n-    {\n-    case JUMP_INSN:\n-      ggc_mark_rtx (JUMP_LABEL (r));\n-      break;\n-    case CODE_LABEL:\n-      ggc_mark_rtx (LABEL_REFS (r));\n-      ggc_mark_string (LABEL_ALTERNATE_NAME (r));\n-      break;\n-    case LABEL_REF:\n-      ggc_mark_rtx (LABEL_NEXTREF (r));\n-      ggc_mark_rtx (CONTAINING_INSN (r));\n-      break;\n-    case ADDRESSOF:\n-      ggc_mark_tree (ADDRESSOF_DECL (r));\n-      break;\n-    case CONST_DOUBLE:\n-      ggc_mark_rtx (CONST_DOUBLE_CHAIN (r));\n-      break;\n-    case NOTE:\n-      switch (NOTE_LINE_NUMBER (r))\n+      /* Collect statistics, if appropriate.  */\n+      if (ggc_stats)\n \t{\n-\tcase NOTE_INSN_RANGE_START:\n-\tcase NOTE_INSN_RANGE_END:\n-\tcase NOTE_INSN_LIVE:\n-\t  ggc_mark_rtx (NOTE_RANGE_INFO (r));\n-\t  break;\n+\t  ++ggc_stats->num_rtxs[(int) code];\n+\t  ggc_stats->size_rtxs[(int) code] += ggc_get_size (r);\n+\t}\n \n-\tcase NOTE_INSN_BLOCK_BEG:\n-\tcase NOTE_INSN_BLOCK_END:\n-\t  ggc_mark_tree (NOTE_BLOCK (r));\n+      /* ??? If (some of) these are really pass-dependant info, do we\n+\t have any right poking our noses in?  */\n+      switch (code)\n+\t{\n+\tcase JUMP_INSN:\n+\t  ggc_mark_rtx (JUMP_LABEL (r));\n+\t  break;\n+\tcase CODE_LABEL:\n+\t  ggc_mark_rtx (LABEL_REFS (r));\n+\t  ggc_mark_string (LABEL_ALTERNATE_NAME (r));\n+\t  break;\n+\tcase LABEL_REF:\n+\t  ggc_mark_rtx (LABEL_NEXTREF (r));\n+\t  ggc_mark_rtx (CONTAINING_INSN (r));\n+\t  break;\n+\tcase ADDRESSOF:\n+\t  ggc_mark_tree (ADDRESSOF_DECL (r));\n+\t  break;\n+\tcase CONST_DOUBLE:\n+\t  ggc_mark_rtx (CONST_DOUBLE_CHAIN (r));\n+\t  break;\n+\tcase NOTE:\n+\t  switch (NOTE_LINE_NUMBER (r))\n+\t    {\n+\t    case NOTE_INSN_RANGE_START:\n+\t    case NOTE_INSN_RANGE_END:\n+\t    case NOTE_INSN_LIVE:\n+\t      ggc_mark_rtx (NOTE_RANGE_INFO (r));\n+\t      break;\n+\n+\t    case NOTE_INSN_BLOCK_BEG:\n+\t    case NOTE_INSN_BLOCK_END:\n+\t      ggc_mark_tree (NOTE_BLOCK (r));\n+\t      break;\n+\n+\t    default:\n+\t      if (NOTE_LINE_NUMBER (r) >= 0)\n+\t\tggc_mark_string (NOTE_SOURCE_FILE (r));\n+\t      break;\n+\t    }\n \t  break;\n \n \tdefault:\n-\t  if (NOTE_LINE_NUMBER (r) >= 0)\n-\t    ggc_mark_string (NOTE_SOURCE_FILE (r));\n \t  break;\n \t}\n-      break;\n \n-    default:\n-      break;\n-    }\n-\n-  for (fmt = GET_RTX_FORMAT (GET_CODE (r)), i = 0; *fmt ; ++fmt, ++i)\n-    {\n-      switch (*fmt)\n+      for (fmt = GET_RTX_FORMAT (GET_CODE (r)), i = 0; *fmt ; ++fmt, ++i)\n \t{\n-\tcase 'e': case 'u':\n-\t  ggc_mark_rtx (XEXP (r, i));\n-\t  break;\n-\tcase 'V': case 'E':\n-\t  ggc_mark_rtvec (XVEC (r, i));\n-\t  break;\n-\tcase 'S': case 's':\n-\t  ggc_mark_if_gcable (XSTR (r, i));\n-\t  break;\n+\t  rtx exp;\n+\t  switch (*fmt)\n+\t    {\n+\t    case 'e': case 'u':\n+\t      exp = XEXP (r, i);\n+\t      if (ggc_test_and_set_mark (exp))\n+\t\t{ \n+\t\t  if (next_rtx == NULL) \n+\t\t    next_rtx = exp; \n+\t\t  else \n+\t\t    ggc_mark_rtx_children (exp);\n+\t\t} \n+\t      break;\n+\t    case 'V': case 'E':\n+\t      ggc_mark_rtvec (XVEC (r, i));\n+\t      break;\n+\t    case 'S': case 's':\n+\t      ggc_mark_if_gcable (XSTR (r, i));\n+\t      break;\n+\t    }\n \t}\n     }\n+  while ((r = next_rtx) != NULL);\n }\n \n /* V had not been previously marked, but has now been marked via"}, {"sha": "809edeca1a3d5fa33f913d89c85a00fe769eb192", "filename": "gcc/ggc.h", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a921766efef3d82ec99d240a8f931ddbb1b20a/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=52a921766efef3d82ec99d240a8f931ddbb1b20a", "patch": "@@ -64,25 +64,30 @@ extern void ggc_mark_rtx_children PROTO ((struct rtx_def *));\n extern void ggc_mark_rtvec_children PROTO ((struct rtvec_def *));\n extern void ggc_mark_tree_children PROTO ((union tree_node *));\n \n-#define ggc_mark_rtx(EXPR)\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    rtx r__ = (EXPR);\t\t\t\t\\\n-    if (r__ != NULL && ! ggc_set_mark (r__))\t\\\n-      ggc_mark_rtx_children (r__);\t\t\\\n+/* If EXPR is not NULL and previously unmarked, mark it and evaluate\n+   to true.  Otherwise evaluate to false.  */\n+#define ggc_test_and_set_mark(EXPR) \\\n+  ((EXPR) != NULL && ! ggc_set_mark (EXPR))\n+\n+#define ggc_mark_rtx(EXPR)                      \\\n+  do {                                          \\\n+    rtx r__ = (EXPR);                           \\\n+    if (ggc_test_and_set_mark (r__))            \\\n+      ggc_mark_rtx_children (r__);              \\\n   } while (0)\n \n-#define ggc_mark_tree(EXPR)\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    tree t__ = (EXPR);\t\t\t\t\\\n-    if (t__ != NULL && ! ggc_set_mark (t__))\t\\\n-      ggc_mark_tree_children (t__);\t\t\\\n+#define ggc_mark_tree(EXPR)                     \\\n+  do {                                          \\\n+    tree t__ = (EXPR);                          \\\n+    if (ggc_test_and_set_mark (t__))            \\\n+      ggc_mark_tree_children (t__);             \\\n   } while (0)\n \n-#define ggc_mark_rtvec(EXPR)\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    rtvec v__ = (EXPR);\t\t\t\t\\\n-    if (v__ != NULL && ! ggc_set_mark (v__))\t\\\n-      ggc_mark_rtvec_children (v__);\t\t\\\n+#define ggc_mark_rtvec(EXPR)                    \\\n+  do {                                          \\\n+    rtvec v__ = (EXPR);                         \\\n+    if (ggc_test_and_set_mark (v__))            \\\n+      ggc_mark_rtvec_children (v__);            \\\n   } while (0)\n \n #define ggc_mark_string(EXPR)\t\t\t\\"}]}