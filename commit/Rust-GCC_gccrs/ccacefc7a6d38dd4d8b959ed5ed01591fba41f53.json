{"sha": "ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhY2VmYzdhNmQzOGRkNGQ4Yjk1OWVkNWVkMDE1OTFmYmE0MWY1Mw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-13T22:13:52Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-13T22:13:52Z"}, "message": "re PR libfortran/34746 (wrong formats in libgfortran's runtime_error)\n\n2008-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/34746\n\t* m4/iforeach.m4 (name`'rtype_qual`_'atype_code):  Use %ld\n\tin printf format for all bounds checking; cast all\n\tinteger-like arguments to runtime_error() to long int.\n\t(`m'name`'rtype_qual`_'atype_code):  Likewise.\n\t(`s'name`'rtype_qual`_'atype_code):  Likewise.\n\t* m4/ifunction.m4 (name`'rtype_qual`_'atype_code):  Likewise.\n\t(`m'name`'rtype_qual`_'atype_code):  Likewise.\n\t(`s'name`'rtype_qual`_'atype_code):  Likewise.\n\t* generated/all_l16.c: Regenerated.\n\t* generated/all_l4.c: Regenerated.\n\t* generated/all_l8.c: Regenerated.\n\t* generated/any_l16.c: Regenerated.\n\t* generated/any_l4.c: Regenerated.\n\t* generated/any_l8.c: Regenerated.\n\t* generated/count_16_l16.c: Regenerated.\n\t* generated/count_16_l4.c: Regenerated.\n\t* generated/count_16_l8.c: Regenerated.\n\t* generated/count_4_l16.c: Regenerated.\n\t* generated/count_4_l4.c: Regenerated.\n\t* generated/count_4_l8.c: Regenerated.\n\t* generated/count_8_l16.c: Regenerated.\n\t* generated/count_8_l4.c: Regenerated.\n\t* generated/count_8_l8.c: Regenerated.\n\t* generated/maxloc0_16_i1.c: Regenerated.\n\t* generated/maxloc0_16_i16.c: Regenerated.\n\t* generated/maxloc0_16_i2.c: Regenerated.\n\t* generated/maxloc0_16_i4.c: Regenerated.\n\t* generated/maxloc0_16_i8.c: Regenerated.\n\t* generated/maxloc0_16_r10.c: Regenerated.\n\t* generated/maxloc0_16_r16.c: Regenerated.\n\t* generated/maxloc0_16_r4.c: Regenerated.\n\t* generated/maxloc0_16_r8.c: Regenerated.\n\t* generated/maxloc0_4_i1.c: Regenerated.\n\t* generated/maxloc0_4_i16.c: Regenerated.\n\t* generated/maxloc0_4_i2.c: Regenerated.\n\t* generated/maxloc0_4_i4.c: Regenerated.\n\t* generated/maxloc0_4_i8.c: Regenerated.\n\t* generated/maxloc0_4_r10.c: Regenerated.\n\t* generated/maxloc0_4_r16.c: Regenerated.\n\t* generated/maxloc0_4_r4.c: Regenerated.\n\t* generated/maxloc0_4_r8.c: Regenerated.\n\t* generated/maxloc0_8_i1.c: Regenerated.\n\t* generated/maxloc0_8_i16.c: Regenerated.\n\t* generated/maxloc0_8_i2.c: Regenerated.\n\t* generated/maxloc0_8_i4.c: Regenerated.\n\t* generated/maxloc0_8_i8.c: Regenerated.\n\t* generated/maxloc0_8_r10.c: Regenerated.\n\t* generated/maxloc0_8_r16.c: Regenerated.\n\t* generated/maxloc0_8_r4.c: Regenerated.\n\t* generated/maxloc0_8_r8.c: Regenerated.\n\t* generated/maxloc1_16_i1.c: Regenerated.\n\t* generated/maxloc1_16_i16.c: Regenerated.\n\t* generated/maxloc1_16_i2.c: Regenerated.\n\t* generated/maxloc1_16_i4.c: Regenerated.\n\t* generated/maxloc1_16_i8.c: Regenerated.\n\t* generated/maxloc1_16_r10.c: Regenerated.\n\t* generated/maxloc1_16_r16.c: Regenerated.\n\t* generated/maxloc1_16_r4.c: Regenerated.\n\t* generated/maxloc1_16_r8.c: Regenerated.\n\t* generated/maxloc1_4_i1.c: Regenerated.\n\t* generated/maxloc1_4_i16.c: Regenerated.\n\t* generated/maxloc1_4_i2.c: Regenerated.\n\t* generated/maxloc1_4_i4.c: Regenerated.\n\t* generated/maxloc1_4_i8.c: Regenerated.\n\t* generated/maxloc1_4_r10.c: Regenerated.\n\t* generated/maxloc1_4_r16.c: Regenerated.\n\t* generated/maxloc1_4_r4.c: Regenerated.\n\t* generated/maxloc1_4_r8.c: Regenerated.\n\t* generated/maxloc1_8_i1.c: Regenerated.\n\t* generated/maxloc1_8_i16.c: Regenerated.\n\t* generated/maxloc1_8_i2.c: Regenerated.\n\t* generated/maxloc1_8_i4.c: Regenerated.\n\t* generated/maxloc1_8_i8.c: Regenerated.\n\t* generated/maxloc1_8_r10.c: Regenerated.\n\t* generated/maxloc1_8_r16.c: Regenerated.\n\t* generated/maxloc1_8_r4.c: Regenerated.\n\t* generated/maxloc1_8_r8.c: Regenerated.\n\t* generated/maxval_i1.c: Regenerated.\n\t* generated/maxval_i16.c: Regenerated.\n\t* generated/maxval_i2.c: Regenerated.\n\t* generated/maxval_i4.c: Regenerated.\n\t* generated/maxval_i8.c: Regenerated.\n\t* generated/maxval_r10.c: Regenerated.\n\t* generated/maxval_r16.c: Regenerated.\n\t* generated/maxval_r4.c: Regenerated.\n\t* generated/maxval_r8.c: Regenerated.\n\t* generated/minloc0_16_i1.c: Regenerated.\n\t* generated/minloc0_16_i16.c: Regenerated.\n\t* generated/minloc0_16_i2.c: Regenerated.\n\t* generated/minloc0_16_i4.c: Regenerated.\n\t* generated/minloc0_16_i8.c: Regenerated.\n\t* generated/minloc0_16_r10.c: Regenerated.\n\t* generated/minloc0_16_r16.c: Regenerated.\n\t* generated/minloc0_16_r4.c: Regenerated.\n\t* generated/minloc0_16_r8.c: Regenerated.\n\t* generated/minloc0_4_i1.c: Regenerated.\n\t* generated/minloc0_4_i16.c: Regenerated.\n\t* generated/minloc0_4_i2.c: Regenerated.\n\t* generated/minloc0_4_i4.c: Regenerated.\n\t* generated/minloc0_4_i8.c: Regenerated.\n\t* generated/minloc0_4_r10.c: Regenerated.\n\t* generated/minloc0_4_r16.c: Regenerated.\n\t* generated/minloc0_4_r4.c: Regenerated.\n\t* generated/minloc0_4_r8.c: Regenerated.\n\t* generated/minloc0_8_i1.c: Regenerated.\n\t* generated/minloc0_8_i16.c: Regenerated.\n\t* generated/minloc0_8_i2.c: Regenerated.\n\t* generated/minloc0_8_i4.c: Regenerated.\n\t* generated/minloc0_8_i8.c: Regenerated.\n\t* generated/minloc0_8_r10.c: Regenerated.\n\t* generated/minloc0_8_r16.c: Regenerated.\n\t* generated/minloc0_8_r4.c: Regenerated.\n\t* generated/minloc0_8_r8.c: Regenerated.\n\t* generated/minloc1_16_i1.c: Regenerated.\n\t* generated/minloc1_16_i16.c: Regenerated.\n\t* generated/minloc1_16_i2.c: Regenerated.\n\t* generated/minloc1_16_i4.c: Regenerated.\n\t* generated/minloc1_16_i8.c: Regenerated.\n\t* generated/minloc1_16_r10.c: Regenerated.\n\t* generated/minloc1_16_r16.c: Regenerated.\n\t* generated/minloc1_16_r4.c: Regenerated.\n\t* generated/minloc1_16_r8.c: Regenerated.\n\t* generated/minloc1_4_i1.c: Regenerated.\n\t* generated/minloc1_4_i16.c: Regenerated.\n\t* generated/minloc1_4_i2.c: Regenerated.\n\t* generated/minloc1_4_i4.c: Regenerated.\n\t* generated/minloc1_4_i8.c: Regenerated.\n\t* generated/minloc1_4_r10.c: Regenerated.\n\t* generated/minloc1_4_r16.c: Regenerated.\n\t* generated/minloc1_4_r4.c: Regenerated.\n\t* generated/minloc1_4_r8.c: Regenerated.\n\t* generated/minloc1_8_i1.c: Regenerated.\n\t* generated/minloc1_8_i16.c: Regenerated.\n\t* generated/minloc1_8_i2.c: Regenerated.\n\t* generated/minloc1_8_i4.c: Regenerated.\n\t* generated/minloc1_8_i8.c: Regenerated.\n\t* generated/minloc1_8_r10.c: Regenerated.\n\t* generated/minloc1_8_r16.c: Regenerated.\n\t* generated/minloc1_8_r4.c: Regenerated.\n\t* generated/minloc1_8_r8.c: Regenerated.\n\t* generated/minval_i1.c: Regenerated.\n\t* generated/minval_i16.c: Regenerated.\n\t* generated/minval_i2.c: Regenerated.\n\t* generated/minval_i4.c: Regenerated.\n\t* generated/minval_i8.c: Regenerated.\n\t* generated/minval_r10.c: Regenerated.\n\t* generated/minval_r16.c: Regenerated.\n\t* generated/minval_r4.c: Regenerated.\n\t* generated/minval_r8.c: Regenerated.\n\t* generated/product_c10.c: Regenerated.\n\t* generated/product_c16.c: Regenerated.\n\t* generated/product_c4.c: Regenerated.\n\t* generated/product_c8.c: Regenerated.\n\t* generated/product_i1.c: Regenerated.\n\t* generated/product_i16.c: Regenerated.\n\t* generated/product_i2.c: Regenerated.\n\t* generated/product_i4.c: Regenerated.\n\t* generated/product_i8.c: Regenerated.\n\t* generated/product_r10.c: Regenerated.\n\t* generated/product_r16.c: Regenerated.\n\t* generated/product_r4.c: Regenerated.\n\t* generated/product_r8.c: Regenerated.\n\t* generated/sum_c10.c: Regenerated.\n\t* generated/sum_c16.c: Regenerated.\n\t* generated/sum_c4.c: Regenerated.\n\t* generated/sum_c8.c: Regenerated.\n\t* generated/sum_i1.c: Regenerated.\n\t* generated/sum_i16.c: Regenerated.\n\t* generated/sum_i2.c: Regenerated.\n\t* generated/sum_i4.c: Regenerated.\n\t* generated/sum_i8.c: Regenerated.\n\t* generated/sum_r10.c: Regenerated.\n\t* generated/sum_r16.c: Regenerated.\n\t* generated/sum_r4.c: Regenerated.\n\t* generated/sum_r8.c: Regenerated.\n\nFrom-SVN: r131514", "tree": {"sha": "2b158e0165f5aa4758358e2f62c9cf2ba4b8963c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b158e0165f5aa4758358e2f62c9cf2ba4b8963c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/comments", "author": null, "committer": null, "parents": [{"sha": "5ad6345e92e2e6f191b943cf7cba49bb5d90ec27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad6345e92e2e6f191b943cf7cba49bb5d90ec27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad6345e92e2e6f191b943cf7cba49bb5d90ec27"}], "stats": {"total": 3350, "additions": 1849, "deletions": 1501}, "files": [{"sha": "16ef713c4b5fa037246e224160ebc7120788c23c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -1,3 +1,182 @@\n+2008-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/34746\n+\t* m4/iforeach.m4 (name`'rtype_qual`_'atype_code):  Use %ld\n+\tin printf format for all bounds checking; cast all\n+\tinteger-like arguments to runtime_error() to long int.\n+\t(`m'name`'rtype_qual`_'atype_code):  Likewise.\n+\t(`s'name`'rtype_qual`_'atype_code):  Likewise.\n+\t* m4/ifunction.m4 (name`'rtype_qual`_'atype_code):  Likewise.\n+\t(`m'name`'rtype_qual`_'atype_code):  Likewise.\n+\t(`s'name`'rtype_qual`_'atype_code):  Likewise.\n+\t* generated/all_l16.c: Regenerated.\n+\t* generated/all_l4.c: Regenerated.\n+\t* generated/all_l8.c: Regenerated.\n+\t* generated/any_l16.c: Regenerated.\n+\t* generated/any_l4.c: Regenerated.\n+\t* generated/any_l8.c: Regenerated.\n+\t* generated/count_16_l16.c: Regenerated.\n+\t* generated/count_16_l4.c: Regenerated.\n+\t* generated/count_16_l8.c: Regenerated.\n+\t* generated/count_4_l16.c: Regenerated.\n+\t* generated/count_4_l4.c: Regenerated.\n+\t* generated/count_4_l8.c: Regenerated.\n+\t* generated/count_8_l16.c: Regenerated.\n+\t* generated/count_8_l4.c: Regenerated.\n+\t* generated/count_8_l8.c: Regenerated.\n+\t* generated/maxloc0_16_i1.c: Regenerated.\n+\t* generated/maxloc0_16_i16.c: Regenerated.\n+\t* generated/maxloc0_16_i2.c: Regenerated.\n+\t* generated/maxloc0_16_i4.c: Regenerated.\n+\t* generated/maxloc0_16_i8.c: Regenerated.\n+\t* generated/maxloc0_16_r10.c: Regenerated.\n+\t* generated/maxloc0_16_r16.c: Regenerated.\n+\t* generated/maxloc0_16_r4.c: Regenerated.\n+\t* generated/maxloc0_16_r8.c: Regenerated.\n+\t* generated/maxloc0_4_i1.c: Regenerated.\n+\t* generated/maxloc0_4_i16.c: Regenerated.\n+\t* generated/maxloc0_4_i2.c: Regenerated.\n+\t* generated/maxloc0_4_i4.c: Regenerated.\n+\t* generated/maxloc0_4_i8.c: Regenerated.\n+\t* generated/maxloc0_4_r10.c: Regenerated.\n+\t* generated/maxloc0_4_r16.c: Regenerated.\n+\t* generated/maxloc0_4_r4.c: Regenerated.\n+\t* generated/maxloc0_4_r8.c: Regenerated.\n+\t* generated/maxloc0_8_i1.c: Regenerated.\n+\t* generated/maxloc0_8_i16.c: Regenerated.\n+\t* generated/maxloc0_8_i2.c: Regenerated.\n+\t* generated/maxloc0_8_i4.c: Regenerated.\n+\t* generated/maxloc0_8_i8.c: Regenerated.\n+\t* generated/maxloc0_8_r10.c: Regenerated.\n+\t* generated/maxloc0_8_r16.c: Regenerated.\n+\t* generated/maxloc0_8_r4.c: Regenerated.\n+\t* generated/maxloc0_8_r8.c: Regenerated.\n+\t* generated/maxloc1_16_i1.c: Regenerated.\n+\t* generated/maxloc1_16_i16.c: Regenerated.\n+\t* generated/maxloc1_16_i2.c: Regenerated.\n+\t* generated/maxloc1_16_i4.c: Regenerated.\n+\t* generated/maxloc1_16_i8.c: Regenerated.\n+\t* generated/maxloc1_16_r10.c: Regenerated.\n+\t* generated/maxloc1_16_r16.c: Regenerated.\n+\t* generated/maxloc1_16_r4.c: Regenerated.\n+\t* generated/maxloc1_16_r8.c: Regenerated.\n+\t* generated/maxloc1_4_i1.c: Regenerated.\n+\t* generated/maxloc1_4_i16.c: Regenerated.\n+\t* generated/maxloc1_4_i2.c: Regenerated.\n+\t* generated/maxloc1_4_i4.c: Regenerated.\n+\t* generated/maxloc1_4_i8.c: Regenerated.\n+\t* generated/maxloc1_4_r10.c: Regenerated.\n+\t* generated/maxloc1_4_r16.c: Regenerated.\n+\t* generated/maxloc1_4_r4.c: Regenerated.\n+\t* generated/maxloc1_4_r8.c: Regenerated.\n+\t* generated/maxloc1_8_i1.c: Regenerated.\n+\t* generated/maxloc1_8_i16.c: Regenerated.\n+\t* generated/maxloc1_8_i2.c: Regenerated.\n+\t* generated/maxloc1_8_i4.c: Regenerated.\n+\t* generated/maxloc1_8_i8.c: Regenerated.\n+\t* generated/maxloc1_8_r10.c: Regenerated.\n+\t* generated/maxloc1_8_r16.c: Regenerated.\n+\t* generated/maxloc1_8_r4.c: Regenerated.\n+\t* generated/maxloc1_8_r8.c: Regenerated.\n+\t* generated/maxval_i1.c: Regenerated.\n+\t* generated/maxval_i16.c: Regenerated.\n+\t* generated/maxval_i2.c: Regenerated.\n+\t* generated/maxval_i4.c: Regenerated.\n+\t* generated/maxval_i8.c: Regenerated.\n+\t* generated/maxval_r10.c: Regenerated.\n+\t* generated/maxval_r16.c: Regenerated.\n+\t* generated/maxval_r4.c: Regenerated.\n+\t* generated/maxval_r8.c: Regenerated.\n+\t* generated/minloc0_16_i1.c: Regenerated.\n+\t* generated/minloc0_16_i16.c: Regenerated.\n+\t* generated/minloc0_16_i2.c: Regenerated.\n+\t* generated/minloc0_16_i4.c: Regenerated.\n+\t* generated/minloc0_16_i8.c: Regenerated.\n+\t* generated/minloc0_16_r10.c: Regenerated.\n+\t* generated/minloc0_16_r16.c: Regenerated.\n+\t* generated/minloc0_16_r4.c: Regenerated.\n+\t* generated/minloc0_16_r8.c: Regenerated.\n+\t* generated/minloc0_4_i1.c: Regenerated.\n+\t* generated/minloc0_4_i16.c: Regenerated.\n+\t* generated/minloc0_4_i2.c: Regenerated.\n+\t* generated/minloc0_4_i4.c: Regenerated.\n+\t* generated/minloc0_4_i8.c: Regenerated.\n+\t* generated/minloc0_4_r10.c: Regenerated.\n+\t* generated/minloc0_4_r16.c: Regenerated.\n+\t* generated/minloc0_4_r4.c: Regenerated.\n+\t* generated/minloc0_4_r8.c: Regenerated.\n+\t* generated/minloc0_8_i1.c: Regenerated.\n+\t* generated/minloc0_8_i16.c: Regenerated.\n+\t* generated/minloc0_8_i2.c: Regenerated.\n+\t* generated/minloc0_8_i4.c: Regenerated.\n+\t* generated/minloc0_8_i8.c: Regenerated.\n+\t* generated/minloc0_8_r10.c: Regenerated.\n+\t* generated/minloc0_8_r16.c: Regenerated.\n+\t* generated/minloc0_8_r4.c: Regenerated.\n+\t* generated/minloc0_8_r8.c: Regenerated.\n+\t* generated/minloc1_16_i1.c: Regenerated.\n+\t* generated/minloc1_16_i16.c: Regenerated.\n+\t* generated/minloc1_16_i2.c: Regenerated.\n+\t* generated/minloc1_16_i4.c: Regenerated.\n+\t* generated/minloc1_16_i8.c: Regenerated.\n+\t* generated/minloc1_16_r10.c: Regenerated.\n+\t* generated/minloc1_16_r16.c: Regenerated.\n+\t* generated/minloc1_16_r4.c: Regenerated.\n+\t* generated/minloc1_16_r8.c: Regenerated.\n+\t* generated/minloc1_4_i1.c: Regenerated.\n+\t* generated/minloc1_4_i16.c: Regenerated.\n+\t* generated/minloc1_4_i2.c: Regenerated.\n+\t* generated/minloc1_4_i4.c: Regenerated.\n+\t* generated/minloc1_4_i8.c: Regenerated.\n+\t* generated/minloc1_4_r10.c: Regenerated.\n+\t* generated/minloc1_4_r16.c: Regenerated.\n+\t* generated/minloc1_4_r4.c: Regenerated.\n+\t* generated/minloc1_4_r8.c: Regenerated.\n+\t* generated/minloc1_8_i1.c: Regenerated.\n+\t* generated/minloc1_8_i16.c: Regenerated.\n+\t* generated/minloc1_8_i2.c: Regenerated.\n+\t* generated/minloc1_8_i4.c: Regenerated.\n+\t* generated/minloc1_8_i8.c: Regenerated.\n+\t* generated/minloc1_8_r10.c: Regenerated.\n+\t* generated/minloc1_8_r16.c: Regenerated.\n+\t* generated/minloc1_8_r4.c: Regenerated.\n+\t* generated/minloc1_8_r8.c: Regenerated.\n+\t* generated/minval_i1.c: Regenerated.\n+\t* generated/minval_i16.c: Regenerated.\n+\t* generated/minval_i2.c: Regenerated.\n+\t* generated/minval_i4.c: Regenerated.\n+\t* generated/minval_i8.c: Regenerated.\n+\t* generated/minval_r10.c: Regenerated.\n+\t* generated/minval_r16.c: Regenerated.\n+\t* generated/minval_r4.c: Regenerated.\n+\t* generated/minval_r8.c: Regenerated.\n+\t* generated/product_c10.c: Regenerated.\n+\t* generated/product_c16.c: Regenerated.\n+\t* generated/product_c4.c: Regenerated.\n+\t* generated/product_c8.c: Regenerated.\n+\t* generated/product_i1.c: Regenerated.\n+\t* generated/product_i16.c: Regenerated.\n+\t* generated/product_i2.c: Regenerated.\n+\t* generated/product_i4.c: Regenerated.\n+\t* generated/product_i8.c: Regenerated.\n+\t* generated/product_r10.c: Regenerated.\n+\t* generated/product_r16.c: Regenerated.\n+\t* generated/product_r4.c: Regenerated.\n+\t* generated/product_r8.c: Regenerated.\n+\t* generated/sum_c10.c: Regenerated.\n+\t* generated/sum_c16.c: Regenerated.\n+\t* generated/sum_c4.c: Regenerated.\n+\t* generated/sum_c8.c: Regenerated.\n+\t* generated/sum_i1.c: Regenerated.\n+\t* generated/sum_i16.c: Regenerated.\n+\t* generated/sum_i2.c: Regenerated.\n+\t* generated/sum_i4.c: Regenerated.\n+\t* generated/sum_i8.c: Regenerated.\n+\t* generated/sum_r10.c: Regenerated.\n+\t* generated/sum_r16.c: Regenerated.\n+\t* generated/sum_r4.c: Regenerated.\n+\t* generated/sum_r8.c: Regenerated.\n+\n 2008-01-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/34670"}, {"sha": "9c53707ae762a537582202e3d9e976a77396e24b", "filename": "libgfortran/generated/all_l16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ all_l16 (gfc_array_l16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ALL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ALL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ all_l16 (gfc_array_l16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ALL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ALL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "6eb798619b6b53bddc6fec67f9d86e066ab1f3fe", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ all_l4 (gfc_array_l4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ALL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ALL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ all_l4 (gfc_array_l4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ALL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ALL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "7b98652bce52b3f7518f4e675adc940937e5bc11", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ all_l8 (gfc_array_l8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ALL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ALL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ all_l8 (gfc_array_l8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ALL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ALL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "bffd620f02b994de24502ba9278d863e5ac1cdb1", "filename": "libgfortran/generated/any_l16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ any_l16 (gfc_array_l16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ANY intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ANY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ any_l16 (gfc_array_l16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ANY intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ANY intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "f86445e69e1f0e2246ef807eac804a1a5374a228", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ any_l4 (gfc_array_l4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ANY intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ANY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ any_l4 (gfc_array_l4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ANY intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ANY intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "f155abbed362e70f943f2a1d8e9a71388998a896", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ any_l8 (gfc_array_l8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" ANY intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" ANY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ any_l8 (gfc_array_l8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" ANY intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" ANY intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "4f3418bd73a12c413b75efb1ef04492b6f185964", "filename": "libgfortran/generated/count_16_l16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_16_l16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_16_l16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "9b853699b9de50d2a11d474c8f4f1a681730cf7b", "filename": "libgfortran/generated/count_16_l4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_16_l4 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_16_l4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "7a6a31adf0cd8acc8304ca38835aae89516b0729", "filename": "libgfortran/generated/count_16_l8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_16_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_16_l8 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_16_l8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "5dee5468c6486f2399c7c73e084226c9843ff362", "filename": "libgfortran/generated/count_4_l16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_4_l16 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_4_l16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "04493b2f4b4ff16a7a3598040ba65793e95eb730", "filename": "libgfortran/generated/count_4_l4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_4_l4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_4_l4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "0e2f9bbb5439e40d85671c1f33687b199ea15232", "filename": "libgfortran/generated/count_4_l8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_4_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_4_l8 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_4_l8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "b0d11164fc530e9b92cfe382b2fe3953482bf355", "filename": "libgfortran/generated/count_8_l16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_8_l16 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_8_l16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "e6a386e8a8d2929d28870a781b5a4cf32892cfbe", "filename": "libgfortran/generated/count_8_l4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_8_l4 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_8_l4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "2a1b2a570de005d116f02cb76d162d4beb8ceb47", "filename": "libgfortran/generated/count_8_l8.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fcount_8_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ count_8_l8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" COUNT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" COUNT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ count_8_l8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" COUNT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" COUNT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}"}, {"sha": "7fc44432fa44cc143da3bcaff869e766aad9e933", "filename": "libgfortran/generated/maxloc0_16_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "29eb3ccecf13ca325f284c26c78d4881af928a2a", "filename": "libgfortran/generated/maxloc0_16_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "30b693c1068f439360a6f1302218f085a214e8bc", "filename": "libgfortran/generated/maxloc0_16_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "03f2794f30badbd1e0edf35ede8d760c4512b178", "filename": "libgfortran/generated/maxloc0_16_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "be18af39ce8e467efb06d36006690ffefe0f0476", "filename": "libgfortran/generated/maxloc0_16_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "48ba77e8732af3323085ea630fea0da75556b5b1", "filename": "libgfortran/generated/maxloc0_16_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "9d2ce0870153a74f3b8326b13c62f255e5dfbcc0", "filename": "libgfortran/generated/maxloc0_16_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e908dadcdd0c42fa6af1fc874ddc9f03b5d6d4df", "filename": "libgfortran/generated/maxloc0_16_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "cb01745a44c19b11ec1588b08616e8d995b14a6f", "filename": "libgfortran/generated/maxloc0_16_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "21ab578c4025c69dad10c13ac6868b44bafa67c0", "filename": "libgfortran/generated/maxloc0_4_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6803420884c7345b3559100629ae73a83c7025ed", "filename": "libgfortran/generated/maxloc0_4_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "27cccae9784341a88de0bf3b6d2272f7f79ca165", "filename": "libgfortran/generated/maxloc0_4_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "650da03a1ed0473d9b9ebc594ca95c8c2bcdc2d7", "filename": "libgfortran/generated/maxloc0_4_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "48e1d3e521579456190b3d6e50143c7825819e82", "filename": "libgfortran/generated/maxloc0_4_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "05e316592386ee316e9aba65ffac2673593676fc", "filename": "libgfortran/generated/maxloc0_4_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "38cf35272825209964f542e8fa01908ee7322bf4", "filename": "libgfortran/generated/maxloc0_4_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5ab9429028ebc986368add7638be0bdab96f4f37", "filename": "libgfortran/generated/maxloc0_4_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2658e4a5b9ac0ef29307be6405e42971a87df0ac", "filename": "libgfortran/generated/maxloc0_4_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "ce71eb1ebbdabafc5ea1694c7f1e821e7e7d3917", "filename": "libgfortran/generated/maxloc0_8_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e808a91cf5968ce934d99d89d4ee17c54a039030", "filename": "libgfortran/generated/maxloc0_8_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8bc1961ea3a7bc703136f1b328c01dc27e3e80dc", "filename": "libgfortran/generated/maxloc0_8_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8b6d2128a5dd106cfe2afbfc67ab922096ff5535", "filename": "libgfortran/generated/maxloc0_8_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "121827eabb343a05775253aab8782bac0b86dc24", "filename": "libgfortran/generated/maxloc0_8_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8fb4b13eb6953d7d74bd54625f83a11ed9ef3c2f", "filename": "libgfortran/generated/maxloc0_8_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "7a5a4f354af7e3e43bcc1e564a353aaab3ea4630", "filename": "libgfortran/generated/maxloc0_8_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8e02dcb771809222ee0141af371f6cd4515fbdc5", "filename": "libgfortran/generated/maxloc0_8_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c539df0596d83c1b6a668e6655875a0628b2ad1a", "filename": "libgfortran/generated/maxloc0_8_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ maxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mmaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MAXLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MAXLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MAXLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ smaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "47e67239322cd8520ca9932d5b5f60675420089e", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2c8a06cb6757a4260a6d8a913d99f53e3a56e905", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d7b1ca57eede2b50d82f5de4c079421731a80e36", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "394c0160261d0f8e5ee2f1a60d046f97e50f7907", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5cff65dece47f2b0a23f0c2e618c9b9d2d354bc4", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "32af8cd88544e30f949ac794235a9f48aab6e186", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d695ad8ec5d6157d363ac2f54010daae45852faf", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "05dfbe380a7e891acc1c18991b22a5fcde5a9f37", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "a060e0620a8a57aae25552ec6e4613297e07980d", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2244456c15448d5fd9e51e4574fe13bc45d1dbdf", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d0f260c962d99a4b5f864513ffcfe31f25f43f02", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5415ebabacfa82155cb26ca67a3f7a514a241a1c", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "291b919945d0d4edd30ec1d7582513afa17ea389", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "97a904dc6875eb68b807529a286916c52c75561e", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "07ccb242ae4bfed001cf7a70dc926dd2e4b4513e", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5ecfffd7b044eff3c8ca961607066a1af14eb367", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f859cc761996f9606c2650ffa645ddaf749ad99f", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5d673420fd9e265e4cdf30229583c18e3d06bc5c", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f9ea707ab95df62c61fe5f023fd9d2f5da678597", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "478a8bc87b0c662d6350ff128ab74f1a4e170d2e", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "972767f6558a4c6b77a7548d52688292d3bfc73e", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e3b566d57ec4c78b6c0752b5b514d15f15dba8a9", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e30e104dfc6a787aa81edc080cd78e82fbfc0f3e", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "01e30f660e44abfcfb8be1d8f8c50e32ca6ae2bb", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "fbe72d1874fa0834ff09e32ec43a3cfdff8ecd9d", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "3985d684fe4f9c9831ceff10c7662f33529b3a42", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6e7745b31ba975872e47c5e99c67f73a83a55a09", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ smaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "901f4e7f2a7fa903884ea2b9052118b8cf584249", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_i1 (gfc_array_i1 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c082e856922d92530ae61c7269833ac985dfbbc9", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "87865e1b49b123252b9fcd3a31c72cc7d224a318", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_i2 (gfc_array_i2 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "3fa4a10b1bf5f56ec613a6f142ba7389101ef5c4", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8b2106d209f6f3c1ce4d5fe9f6d94eac29d3e08d", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "a076190e8af70b0e54a901d376381729455e6a8e", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_r10 (gfc_array_r10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1e36379048bc3c48d8ae42cabf328743a9534fa6", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_r16 (gfc_array_r16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "222a4e3beeec9c7d6708333c1caee57a91411345", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_r4 (gfc_array_r4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "163ec5a1b030c47bac2f80c457641d8361c17303", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MAXVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MAXVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MAXVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MAXVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ smaxval_r8 (gfc_array_r8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MAXVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d0d6903bf411b7b6a67b4f4dd6a734cb3e617c12", "filename": "libgfortran/generated/minloc0_16_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "59c1d0abbf8931516cfe2564c2001d3336117766", "filename": "libgfortran/generated/minloc0_16_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "0df6bd189c5b8c113d9af2166e443d1b70d88a82", "filename": "libgfortran/generated/minloc0_16_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "48bb60be73754c8721625fabe181c9e79b04a70b", "filename": "libgfortran/generated/minloc0_16_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "b92f7e430313b25c9b274895a07be10558acd06a", "filename": "libgfortran/generated/minloc0_16_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6480a8dd681e1edbfed9da165972dc32fcc344f6", "filename": "libgfortran/generated/minloc0_16_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "325c8f68d509ccf2784380847c297099e8a6a21b", "filename": "libgfortran/generated/minloc0_16_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2376d4034b677295d598f5d68bc0c68f28b0e9fc", "filename": "libgfortran/generated/minloc0_16_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e72abab2c5bd61402b5e2065804aeec601b5185e", "filename": "libgfortran/generated/minloc0_16_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "ce045a28e731be1649bd48d8517f12ae2b6cb5b1", "filename": "libgfortran/generated/minloc0_4_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "9ae856e686c3afdcb3f0b2f8527661e0295ec640", "filename": "libgfortran/generated/minloc0_4_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c33e99cfedba2941afb146da028499ccc353ca85", "filename": "libgfortran/generated/minloc0_4_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "9d7eda6c8394927cf96893fea8a846db30fad0b2", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "046e040daf0b6f8aa64e1b5aa0c129abdfc695d3", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8f7b92478686e36a9bb38e3fee526dda0c909b1c", "filename": "libgfortran/generated/minloc0_4_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1539192ca158e064315505e25cfebe4e3eb2a425", "filename": "libgfortran/generated/minloc0_4_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "86ffdb8c6efcbd989481429cbb02a3f4ee3c411f", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e78cdd898f522eae8187ba98dcdd1c4c514d342f", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5872d85560dba1edec62f199cd12cf24a2bb9dcb", "filename": "libgfortran/generated/minloc0_8_i1.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "b56409a050c77a7542208f3823e0b3e7065abc5d", "filename": "libgfortran/generated/minloc0_8_i16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "63cd947c42d57ac7a85082d86d233319573db46c", "filename": "libgfortran/generated/minloc0_8_i2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5092f89f7062fd52ab294f9b95fd7351fbde25e2", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e1b99ef9f9402d01d3b0cd40d84f0c133fa4fc8b", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "600b3aa6af050d45c4160592c128a9c9d96afce5", "filename": "libgfortran/generated/minloc0_8_r10.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "fa4b5cd1d560fae7efdd5a6a1b515b9a70926fcd", "filename": "libgfortran/generated/minloc0_8_r16.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1347f15c8a88d047bcc14ce3b3b98c1ba004a1ae", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6a7b2f0d6b01c464c68ded8e75cb817559d0dfc9", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -77,13 +77,13 @@ minloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -203,27 +203,28 @@ mminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" MINLOC intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" MINLOC intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in MINLOC intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -360,7 +361,7 @@ sminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f4abfa8f0d1e3f2330944cd2741e1fbcbf13372a", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "40b86eadc6c90aabda58ad44b7261aafd7a34919", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f7057b2c849bc257cb21fcaa1bc206ad232c6318", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "3cf6f0de83fa14f82e1a6eac3daa88e5164dbc5c", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "a0838687ba88ec9328de1be7b8a69de855a835c4", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "20b1c5789a7d3a573c1b4c7f5c0e5b8c7b842a22", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "40fcbaea3f95c44dc79606ee67e9add1d12709d3", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "76e7efaf0eba7ffb8d1aba46666278eae263130b", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "97ca8661dfbbc3f04af146c6d9e1e832a5c34141", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "330c0d9b91a1928a1080392c4e8402d6c7d880b2", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "a142adb9630aa18dfda8a1dd810c84cbd5708cf4", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d7a92804094c2df7635022eee8fd5c342d9b6fc3", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c6b12e84e2614ad103bbb19937b9088cc8d6140c", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "bac4eb5fc8216309e73573968840636083012634", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "0579519ab0deee9199666c169d4b6d5d943af3fa", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d74d26dc605737dd38268d887b14cb2c03680cd9", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "050ed5c3c793b0f2d8e80da031d2caecbcbb30bd", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "483cd19f2629332b81f549a35a4c6cff5cf4ee20", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1fc81d106e20d2335d3a869cc538ad8c518e331d", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "ecbabc7a9818b11a177e3bba6fb17ad22735478d", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2c03443258e23761fd4dc2358c89763feffe60f7", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "945423748c5c5f1b3623ca79364dee0088ccc14a", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "df801458e09ab0e396ab964b86095f31b11e97aa", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "364bf5c6f04f77892d60228bab12ebe4d53bec90", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "b8ad0950ec5eb6af59dbb26cebd4aefccfc3817e", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e9df66c669f703bbfafb0ab367507c902c52e0a1", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "7d2cfff7fed03cf2627e34760e5ec7a42be1d4a8", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -117,8 +117,9 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINLOC intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINLOC intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -130,8 +131,8 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -323,8 +324,8 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -335,8 +336,8 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINLOC intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINLOC intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -460,7 +461,7 @@ sminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINLOC intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1789ec9fcfad0aff7dd22200384c455530efc166", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_i1 (gfc_array_i1 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "2916256e3ebd361a21b4f1938bc9a92c175674e7", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "73bf18b61673278ff596d6206acf1a62dd5108f9", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_i2 (gfc_array_i2 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "8d6e52a2ac0cd358f66d5ccb2853898807afc574", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "22cf462d0605bb0dba0b8574d4eb5c0e5ad21718", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f4d467c0d992f8fcba563022eefcf2f579960ac6", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_r10 (gfc_array_r10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "7ba19c99c1bcfb2c7013d6843bbfa771b2213d5c", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_r16 (gfc_array_r16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "3b29f2f5d3b98e7adbf7c2c34e6b2d07c07a034f", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_r4 (gfc_array_r4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "adca8b28c7d347f064cd3104e6ddcef2151a2f2c", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" MINVAL intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" MINVAL intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -317,8 +318,8 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -329,8 +330,8 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" MINVAL intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" MINVAL intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -449,7 +450,7 @@ sminval_r8 (gfc_array_r8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in MINVAL intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "def678ab953eeca8fb477f707d59e632e712c77b", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_c10 (gfc_array_c10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "d8750aef5b00d606a61174b236db30e761b5bd08", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_c16 (gfc_array_c16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "7cac33fc8c63a58c45a7df73abf5045aed1e2789", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_c4 (gfc_array_c4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e4f0f6bfd303ead4a29febf42f71f98b2fb39993", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_c8 (gfc_array_c8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5a428cad202f77eeccb862b42d88b84bb9b00b65", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_i1 (gfc_array_i1 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "a1593a4f66a4da1dcdda3879059f781b315b0f2b", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "16793f89579579663129beed34f660c24333faa8", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_i2 (gfc_array_i2 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "cbace913d6af6ad6b6ae2409e8b57ce21aa3c67c", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "f1fc56718a8110d52a932f346d20ea5ae64585e1", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "4b7c5803096a59391a620d74b8e045aa74fa7963", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_r10 (gfc_array_r10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "b18155bd73ca9efa3f77e3f2a1f90e1c638c4e5f", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_r16 (gfc_array_r16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "754cac2bfb18b5db0e8796f38de03885d1c5f602", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_r4 (gfc_array_r4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "5f68856a8b024acbac1c725df3b06b06f9227bc3", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" PRODUCT intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" PRODUCT intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" PRODUCT intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" PRODUCT intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ sproduct_r8 (gfc_array_r8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in PRODUCT intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e495a0ba49779844da8ab9c062f5e6cc1cc8fc58", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_c10 (gfc_array_c10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c73083a930c25f321e2f05e411c8e430884e6fae", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_c16 (gfc_array_c16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6f32327ad0b2e3149838e75521b274dc334919a4", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_c4 (gfc_array_c4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "80db1101cfe442a94264458bf6cf4f116a4bb77a", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_c8 (gfc_array_c8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "c652712d4e7f27ef9743c4783a79a51987162709", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_i1 (gfc_array_i1 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "43a29a2956f8dbbced815c2e40d5ac8b37378cfe", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_i16 (gfc_array_i16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6c6fcc1116a3580be14cf104b9b35aa5ca4e520c", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_i2 (gfc_array_i2 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "e28d2c96fdf3bc07d336ee9338612c3f9c8a4d2b", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_i4 (gfc_array_i4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "6e824f1ca56f745aad96c6cfec48e8649ccab1b2", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_i8 (gfc_array_i8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1ebd1ed542541179aebd45801e52de84cefc7c7a", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_r10 (gfc_array_r10 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "0038983a6b4a537c06b8e60ddd513c00a6d20b87", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_r16 (gfc_array_r16 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "1f058dcbda05d09a86a0cea69708d6a6bf8c2fe2", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_r4 (gfc_array_r4 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "82a03bc81f707ffd2f30a30f5f00d46a60427089", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -116,8 +116,9 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" SUM intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" SUM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -129,8 +130,8 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -316,8 +317,8 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -328,8 +329,8 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" SUM intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" SUM intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -448,7 +449,7 @@ ssum_r8 (gfc_array_r8 * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in SUM intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "071900b03b8e1aee41b91ffd9b56013ada6ef521", "filename": "libgfortran/m4/iforeach.m4", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fm4%2Fiforeach.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fm4%2Fiforeach.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach.m4?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -44,13 +44,13 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in u_name intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" u_name intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" u_name intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t}\n     }\n \n@@ -162,27 +162,28 @@ void\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in u_name intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t  if (ret_extent != rank)\n \t    runtime_error (\"Incorrect extent in return value of\"\n-\t\t\t   \" u_name intrnisic: is %ld, should be %d\",\n-\t\t\t   (long int) ret_extent, rank);\n+\t\t\t   \" u_name intrnisic: is %ld, should be %ld\",\n+\t\t\t   (long int) ret_extent, (long int) rank);\n \t\n \t  mask_rank = GFC_DESCRIPTOR_RANK (mask);\n \t  if (rank != mask_rank)\n \t    runtime_error (\"rank of MASK argument in u_name intrnisic\"\n-\t                   \"should be %d, is %d\", rank, mask_rank);\n+\t                   \"should be %ld, is %ld\", (long int) rank,\n+\t\t\t   (long int) mask_rank);\n \n \t  for (n=0; n<rank; n++)\n \t    {\n \t      array_extent = array->dim[n].ubound + 1 - array->dim[n].lbound;\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" u_name intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" u_name intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -318,7 +319,7 @@ void\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in u_name intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}, {"sha": "9769e4d2ddb626696e6459f29337382332d32b4e", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacefc7a6d38dd4d8b959ed5ed01591fba41f53/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=ccacefc7a6d38dd4d8b959ed5ed01591fba41f53", "patch": "@@ -99,8 +99,9 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n     {\n       if (rank != GFC_DESCRIPTOR_RANK (retarray))\n \truntime_error (\"rank of return array incorrect in\"\n-\t\t       \" u_name intrinsic: is %d, should be %d\",\n-\t\t       GFC_DESCRIPTOR_RANK (retarray), rank);\n+\t\t       \" u_name intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n \n       if (compile_options.bounds_check)\n \t{\n@@ -112,8 +113,8 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" u_name intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" u_name intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n \t}\n@@ -299,8 +300,8 @@ void\n \t\t- retarray->dim[n].lbound;\n \t      if (extent[n] != ret_extent)\n \t\truntime_error (\"Incorrect extent in return value of\"\n-\t\t\t       \" u_name intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" u_name intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) ret_extent, (long int) extent[n]);\n \t    }\n           for (n=0; n<= rank; n++)\n@@ -311,8 +312,8 @@ void\n \t      mask_extent = mask->dim[n].ubound + 1 - mask->dim[n].lbound;\n \t      if (array_extent != mask_extent)\n \t\truntime_error (\"Incorrect extent in MASK argument of\"\n-\t\t\t       \" u_name intrinsic in dimension %d:\"\n-\t\t\t       \" is %ld, should be %ld\", n + 1,\n+\t\t\t       \" u_name intrinsic in dimension %ld:\"\n+\t\t\t       \" is %ld, should be %ld\", (long int) n + 1,\n \t\t\t       (long int) mask_extent, (long int) array_extent);\n \t    }\n \t}\n@@ -430,7 +431,7 @@ void\n \t  ret_rank = GFC_DESCRIPTOR_RANK (retarray);\n \t  if (ret_rank != 1)\n \t    runtime_error (\"rank of return array in u_name intrinsic\"\n-\t\t\t   \" should be 1, is %d\", ret_rank);\n+\t\t\t   \" should be 1, is %ld\", (long int) ret_rank);\n \n \t  ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n \t    if (ret_extent != rank)"}]}