{"sha": "596fd31c72350cdd6b4e283c6e8f2757220a7322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2ZmQzMWM3MjM1MGNkZDZiNGUyODNjNmU4ZjI3NTcyMjBhNzMyMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-06-26T02:18:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-26T02:18:14Z"}, "message": "cp-tree.h (genrtl_begin_stmt_expr): Rename to ...\n\n\t* cp-tree.h (genrtl_begin_stmt_expr): Rename to ...\n\t(begin_global_stmt_expr): ... this.\n\t(genrtl_finish_stmt_expr): Rename to ...\n\t(finish_global_stmt_expr): ... this.\n\t* init.c (begin_init_stmts): Adjust calls.\n\t(finish_init_stmts): Likewise.\n\t* semantics.c (genrtl_begin_stmt_expr): Rename to ...\n\t(begin_global_stmt_expr): ... this.\n\t(genrtl_finish_stmt_expr): Rename to ...\n\t(finish_global_stmt_expr): ... this.\n\nFrom-SVN: r34702", "tree": {"sha": "52f7fe189833adff3c33803e82193be734e83e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f7fe189833adff3c33803e82193be734e83e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596fd31c72350cdd6b4e283c6e8f2757220a7322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596fd31c72350cdd6b4e283c6e8f2757220a7322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596fd31c72350cdd6b4e283c6e8f2757220a7322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596fd31c72350cdd6b4e283c6e8f2757220a7322/comments", "author": null, "committer": null, "parents": [{"sha": "b42115f711f164a05b1e9f3ca5565eb74ab3964b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42115f711f164a05b1e9f3ca5565eb74ab3964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42115f711f164a05b1e9f3ca5565eb74ab3964b"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "854eb8f935dfe1a9151a0e5a27882beb19dcbb9c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=596fd31c72350cdd6b4e283c6e8f2757220a7322", "patch": "@@ -1,3 +1,16 @@\n+2000-06-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (genrtl_begin_stmt_expr): Rename to ...\n+\t(begin_global_stmt_expr): ... this.\n+\t(genrtl_finish_stmt_expr): Rename to ...\n+\t(finish_global_stmt_expr): ... this.\n+\t* init.c (begin_init_stmts): Adjust calls.\n+\t(finish_init_stmts): Likewise.\n+\t* semantics.c (genrtl_begin_stmt_expr): Rename to ...\n+\t(begin_global_stmt_expr): ... this.\n+\t(genrtl_finish_stmt_expr): Rename to ...\n+\t(finish_global_stmt_expr): ... this.\n+\n 2000-06-25 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n         * search.c (lookup_member): Fix typo in comment."}, {"sha": "f7e3b07b51f53670e554be0e4b760502d3a7170f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=596fd31c72350cdd6b4e283c6e8f2757220a7322", "patch": "@@ -4535,8 +4535,8 @@ extern void genrtl_asm_stmt                     PARAMS ((tree, tree,\n \t\t\t\t\t\t\t tree));\n extern void genrtl_named_return_value           PARAMS ((tree,\n \t\t\t\t\t\t\t tree));\n-extern tree genrtl_begin_stmt_expr              PARAMS ((void));\n-extern tree genrtl_finish_stmt_expr             PARAMS ((tree));\n+extern tree begin_global_stmt_expr              PARAMS ((void));\n+extern tree finish_global_stmt_expr             PARAMS ((tree));\n \n \n /* in spew.c */"}, {"sha": "00a9d73229198b2fb5c86125a24e02d6ea9a6e6a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=596fd31c72350cdd6b4e283c6e8f2757220a7322", "patch": "@@ -100,7 +100,7 @@ begin_init_stmts (stmt_expr_p, compound_stmt_p)\n   if (building_stmt_tree ())\n     *stmt_expr_p = begin_stmt_expr ();\n   else\n-    *stmt_expr_p = genrtl_begin_stmt_expr ();\n+    *stmt_expr_p = begin_global_stmt_expr ();\n   \n   if (building_stmt_tree ())\n     *compound_stmt_p = begin_compound_stmt (/*has_no_scope=*/1);\n@@ -125,7 +125,7 @@ finish_init_stmts (stmt_expr, compound_stmt)\n   if (building_stmt_tree ())\n     stmt_expr = finish_stmt_expr (stmt_expr);\n   else\n-    stmt_expr = genrtl_finish_stmt_expr (stmt_expr);\n+    stmt_expr = finish_global_stmt_expr (stmt_expr);\n   \n   /* To avoid spurious warnings about unused values, we set \n      TREE_USED.  */"}, {"sha": "aa95da8193acceaa51c2a5f287ed44318e9d0eaa", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596fd31c72350cdd6b4e283c6e8f2757220a7322/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=596fd31c72350cdd6b4e283c6e8f2757220a7322", "patch": "@@ -1776,21 +1776,6 @@ finish_parenthesized_expr (expr)\n   return expr;\n }\n \n-/* The last_tree will be NULL_TREE when entering this function. Unlike\n-   the other genrtl functions, in this function, that state can change\n-   hence the check at the end as in the original version of\n-   begin_stmt_expr. Generate the RTL for the start of a STMT_EXPR. */\n-tree\n-genrtl_begin_stmt_expr ()\n-{\n-  if (! cfun && !last_tree)\n-    begin_stmt_tree (&scope_chain->x_saved_tree);\n-\n-  keep_next_level (1);\n-  \n-  return (last_tree != NULL_TREE) ? last_tree : expand_start_stmt_expr(); \n-}\n-\n /* Begin a statement-expression.  The value returned must be passed to\n    finish_stmt_expr.  */\n \n@@ -1811,22 +1796,34 @@ begin_stmt_expr ()\n   return last_tree; \n }\n \n-/* Generate the RTL for the end of the STMT_EXPR. */\n+/* Used when beginning a statement-expression outside function scope.\n+   For example, when handling a file-scope initializer, we use this\n+   function.  */\n \n-tree \n-genrtl_finish_stmt_expr (rtl_expr)\n-     tree rtl_expr;\n+tree\n+begin_global_stmt_expr ()\n {\n-  tree result;\n+  if (! cfun && !last_tree)\n+    begin_stmt_tree (&scope_chain->x_saved_tree);\n+\n+  keep_next_level (1);\n+  \n+  return (last_tree != NULL_TREE) ? last_tree : expand_start_stmt_expr(); \n+}\n+\n+/* Finish the STMT_EXPR last begun with begin_global_stmt_expr.  */\n \n-  rtl_expr = expand_end_stmt_expr (rtl_expr);\n-  result = rtl_expr;\n+tree \n+finish_global_stmt_expr (stmt_expr)\n+     tree stmt_expr;\n+{\n+  stmt_expr = expand_end_stmt_expr (stmt_expr);\n   \n   if (! cfun\n       && TREE_CHAIN (scope_chain->x_saved_tree) == NULL_TREE)\n     finish_stmt_tree (&scope_chain->x_saved_tree);\n \n-  return result;\n+  return stmt_expr;\n }\n \n /* Finish a statement-expression.  RTL_EXPR should be the value"}]}