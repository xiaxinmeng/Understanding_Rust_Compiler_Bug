{"sha": "4f4ced28826ece7b7b76649522ee2a9601a63b90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0Y2VkMjg4MjZlY2U3YjdiNzY2NDk1MjJlZTJhOTYwMWE2M2I5MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-02T07:00:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-02T09:22:20Z"}, "message": "c++: Set CALL_FROM_NEW_OR_DELETE_P on more calls.\n\nWe were failing to set the flag on a delete call in a new expression, in a\ndeleting destructor, and in a coroutine.  Fixed by setting it in the\nfunction that builds the call.\n\n2020-10-02  Jason Merril  <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\t* call.c (build_operator_new_call): Set CALL_FROM_NEW_OR_DELETE_P.\n\t(build_op_delete_call): Likewise.\n\t* init.c (build_new_1, build_vec_delete_1, build_delete): Not here.\n\t(build_delete):\n\ngcc/ChangeLog:\n\t* gimple.h (gimple_call_operator_delete_p): Rename from\n\tgimple_call_replaceable_operator_delete_p.\n\t* gimple.c (gimple_call_operator_delete_p): Likewise.\n\t* tree.h (DECL_IS_REPLACEABLE_OPERATOR_DELETE_P): Remove.\n\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Adjust.\n\t(propagate_necessity): Likewise.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases_for_call): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/pr94314.C: new/delete no longer omitted.", "tree": {"sha": "4fe85bc7a6d70681537bfe2d93b32fbd39ad5a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fe85bc7a6d70681537bfe2d93b32fbd39ad5a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f4ced28826ece7b7b76649522ee2a9601a63b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4ced28826ece7b7b76649522ee2a9601a63b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4ced28826ece7b7b76649522ee2a9601a63b90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4ced28826ece7b7b76649522ee2a9601a63b90/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b945f959f03a6185a3130f30bfd524d01d4142c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b945f959f03a6185a3130f30bfd524d01d4142c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b945f959f03a6185a3130f30bfd524d01d4142c"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "bd662518958321ff5c0cbb99cf671418fc0befc5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -4769,7 +4769,16 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n      *fn = cand->fn;\n \n    /* Build the CALL_EXPR.  */\n-   return build_over_call (cand, LOOKUP_NORMAL, complain);\n+   tree ret = build_over_call (cand, LOOKUP_NORMAL, complain);\n+\n+   /* Set this flag for all callers of this function.  In addition to\n+      new-expressions, this is called for allocating coroutine state; treat\n+      that as an implicit new-expression.  */\n+   tree call = extract_call_expr (ret);\n+   if (TREE_CODE (call) == CALL_EXPR)\n+     CALL_FROM_NEW_OR_DELETE_P (call) = 1;\n+\n+   return ret;\n }\n \n /* Build a new call to operator().  This may change ARGS.  */\n@@ -6146,7 +6155,7 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n     case VEC_NEW_EXPR:\n     case VEC_DELETE_EXPR:\n     case DELETE_EXPR:\n-      /* Use build_op_new_call and build_op_delete_call instead.  */\n+      /* Use build_operator_new_call and build_op_delete_call instead.  */\n       gcc_unreachable ();\n \n     case CALL_EXPR:\n@@ -6983,6 +6992,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n       if (DECL_DELETED_FN (fn) && alloc_fn)\n \treturn NULL_TREE;\n \n+      tree ret;\n       if (placement)\n \t{\n \t  /* The placement args might not be suitable for overload\n@@ -6995,7 +7005,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t    argarray[i] = CALL_EXPR_ARG (placement, i);\n \t  if (!mark_used (fn, complain) && !(complain & tf_error))\n \t    return error_mark_node;\n-\t  return build_cxx_call (fn, nargs, argarray, complain);\n+\t  ret = build_cxx_call (fn, nargs, argarray, complain);\n \t}\n       else\n \t{\n@@ -7013,7 +7023,6 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t\t\t\t\t\t  complain);\n \t    }\n \n-\t  tree ret;\n \t  releasing_vec args;\n \t  args->quick_push (addr);\n \t  if (destroying)\n@@ -7026,8 +7035,18 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t      args->quick_push (al);\n \t    }\n \t  ret = cp_build_function_call_vec (fn, &args, complain);\n-\t  return ret;\n \t}\n+\n+      /* Set this flag for all callers of this function.  In addition to\n+\t delete-expressions, this is called for deallocating coroutine state;\n+\t treat that as an implicit delete-expression.  This is also called for\n+\t the delete if the constructor throws in a new-expression, and for a\n+\t deleting destructor (which implements a delete-expression).  */\n+      tree call = extract_call_expr (ret);\n+      if (TREE_CODE (call) == CALL_EXPR)\n+\tCALL_FROM_NEW_OR_DELETE_P (call) = 1;\n+\n+      return ret;\n     }\n \n   /* [expr.new]"}, {"sha": "00fff3f732750ca38345013d1a8a2882213d2f29", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -3433,10 +3433,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t}\n     }\n \n-  tree alloc_call_expr = extract_call_expr (alloc_call);\n-  if (TREE_CODE (alloc_call_expr) == CALL_EXPR)\n-    CALL_FROM_NEW_OR_DELETE_P (alloc_call_expr) = 1;\n-\n   if (cookie_size)\n     alloc_call = maybe_wrap_new_for_constexpr (alloc_call, elt_type,\n \t\t\t\t\t       cookie_size);\n@@ -4145,10 +4141,6 @@ build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n \t\t\t\t\t      /*placement=*/NULL_TREE,\n \t\t\t\t\t      /*alloc_fn=*/NULL_TREE,\n \t\t\t\t\t      complain);\n-\n-      tree deallocate_call_expr = extract_call_expr (deallocate_expr);\n-      if (TREE_CODE (deallocate_call_expr) == CALL_EXPR)\n-\tCALL_FROM_NEW_OR_DELETE_P (deallocate_call_expr) = 1;\n     }\n \n   body = loop;\n@@ -5073,12 +5065,6 @@ build_delete (location_t loc, tree otype, tree addr,\n \n   if (do_delete == error_mark_node)\n     return error_mark_node;\n-  else if (do_delete)\n-    {\n-      tree do_delete_call_expr = extract_call_expr (do_delete);\n-      if (TREE_CODE (do_delete_call_expr) == CALL_EXPR)\n-\tCALL_FROM_NEW_OR_DELETE_P (do_delete_call_expr) = 1;\n-    }\n \n   if (do_delete && !TREE_SIDE_EFFECTS (expr))\n     expr = do_delete;"}, {"sha": "523d845de892fc09160e2b90ea64e552a468cd8a", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -2717,12 +2717,12 @@ gimple_builtin_call_types_compatible_p (const gimple *stmt, tree fndecl)\n /* Return true when STMT is operator a replaceable delete call.  */\n \n bool\n-gimple_call_replaceable_operator_delete_p (const gcall *stmt)\n+gimple_call_operator_delete_p (const gcall *stmt)\n {\n   tree fndecl;\n \n   if ((fndecl = gimple_call_fndecl (stmt)) != NULL_TREE)\n-    return DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (fndecl);\n+    return DECL_IS_OPERATOR_DELETE_P (fndecl);\n   return false;\n }\n "}, {"sha": "3c9b9965f5a11093d6113f4950a1375dd7d591eb", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -1605,7 +1605,7 @@ extern alias_set_type gimple_get_alias_set (tree);\n extern bool gimple_ior_addresses_taken (bitmap, gimple *);\n extern bool gimple_builtin_call_types_compatible_p (const gimple *, tree);\n extern combined_fn gimple_call_combined_fn (const gimple *);\n-extern bool gimple_call_replaceable_operator_delete_p (const gcall *);\n+extern bool gimple_call_operator_delete_p (const gcall *);\n extern bool gimple_call_builtin_p (const gimple *);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_class);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_function);"}, {"sha": "72467127feaae9a6be0de7044cd73d77b42d068b", "filename": "gcc/testsuite/g++.dg/pr94314.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -78,5 +78,5 @@ int main(){\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Deleting : operator delete\" 1 \"cddce1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleting : operator delete\" \"cddce1\"} } */\n /* { dg-final { scan-tree-dump-not \"Deleting : B::operator delete\" \"cddce1\"} } */"}, {"sha": "a0466127f9c8fce2b243d64357be1bb69564eac8", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -612,7 +612,7 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \n       if (callee != NULL_TREE\n \t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n-\t      || DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (callee))\n+\t      || DECL_IS_OPERATOR_DELETE_P (callee))\n \t  && gimple_call_from_new_or_delete (call))\n \treturn false;\n     }\n@@ -877,7 +877,7 @@ propagate_necessity (bool aggressive)\n \t  bool is_delete_operator\n \t    = (is_gimple_call (stmt)\n \t       && gimple_call_from_new_or_delete (as_a <gcall *> (stmt))\n-\t       && gimple_call_replaceable_operator_delete_p (as_a <gcall *> (stmt)));\n+\t       && gimple_call_operator_delete_p (as_a <gcall *> (stmt)));\n \t  if (is_delete_operator\n \t      || gimple_call_builtin_p (stmt, BUILT_IN_FREE))\n \t    {\n@@ -975,7 +975,7 @@ propagate_necessity (bool aggressive)\n \n \t      if (callee != NULL_TREE\n \t\t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n-\t\t      || DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (callee))\n+\t\t      || DECL_IS_OPERATOR_DELETE_P (callee))\n \t\t  && gimple_call_from_new_or_delete (call))\n \t\tcontinue;\n \n@@ -1402,7 +1402,7 @@ eliminate_unnecessary_stmts (void)\n \t      && (gimple_call_builtin_p (stmt, BUILT_IN_FREE)\n \t\t  || (is_gimple_call (stmt)\n \t\t      && gimple_call_from_new_or_delete (as_a <gcall *> (stmt))\n-\t\t      && gimple_call_replaceable_operator_delete_p (as_a <gcall *> (stmt)))))\n+\t\t      && gimple_call_operator_delete_p (as_a <gcall *> (stmt)))))\n \t    {\n \t      tree ptr = gimple_call_arg (stmt, 0);\n \t      if (TREE_CODE (ptr) == SSA_NAME)"}, {"sha": "30a8c93b4ff82e519e7feed4fb2b246575ca03c7", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -4862,7 +4862,7 @@ find_func_aliases_for_call (struct function *fn, gcall *t)\n \t such operator, then the effects for PTA (in particular\n \t the escaping of the pointer) can be ignored.  */\n       else if (fndecl\n-\t       && DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (fndecl)\n+\t       && DECL_IS_OPERATOR_DELETE_P (fndecl)\n \t       && gimple_call_from_new_or_delete (t))\n \t;\n       else"}, {"sha": "c0a027a650d591291fccfa7e1eb468abf93e3af5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4ced28826ece7b7b76649522ee2a9601a63b90/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4f4ced28826ece7b7b76649522ee2a9601a63b90", "patch": "@@ -3074,9 +3074,6 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n #define DECL_IS_OPERATOR_DELETE_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_DELETE)\n \n-#define DECL_IS_REPLACEABLE_OPERATOR_DELETE_P(NODE) \\\n-  (DECL_IS_OPERATOR_DELETE_P (NODE) && DECL_IS_REPLACEABLE_OPERATOR (NODE))\n-\n #define DECL_SET_IS_OPERATOR_DELETE(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_DELETE, VAL)\n "}]}