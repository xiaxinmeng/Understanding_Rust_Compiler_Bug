{"sha": "164e38246f0f469fa83f5fa3f56fc53fa1b46450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY0ZTM4MjQ2ZjBmNDY5ZmE4M2Y1ZmEzZjU2ZmM1M2ZhMWI0NjQ1MA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-11-07T14:29:44Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-08T13:10:24Z"}, "message": "Added more cfg-stripping", "tree": {"sha": "0a59a68159f92cd224569d3325bb41b1b754ca7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a59a68159f92cd224569d3325bb41b1b754ca7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/164e38246f0f469fa83f5fa3f56fc53fa1b46450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164e38246f0f469fa83f5fa3f56fc53fa1b46450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164e38246f0f469fa83f5fa3f56fc53fa1b46450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164e38246f0f469fa83f5fa3f56fc53fa1b46450/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1271b772038d1e01cfed35ea5c764ceedc9842f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1271b772038d1e01cfed35ea5c764ceedc9842f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1271b772038d1e01cfed35ea5c764ceedc9842f9"}], "stats": {"total": 120, "additions": 97, "deletions": 23}, "files": [{"sha": "a4ff3eb2004a16c811d57c824af5758eb8a3f3b9", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164e38246f0f469fa83f5fa3f56fc53fa1b46450/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164e38246f0f469fa83f5fa3f56fc53fa1b46450/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=164e38246f0f469fa83f5fa3f56fc53fa1b46450", "patch": "@@ -1585,20 +1585,28 @@ struct StructField\n   // Copy constructor\n   StructField (StructField const &other)\n     : outer_attrs (other.outer_attrs), visibility (other.visibility),\n-      field_name (other.field_name),\n-      field_type (other.field_type->clone_type ())\n-  {}\n+      field_name (other.field_name)\n+  {\n+    // guard to prevent null dereference\n+    if (other.field_type != nullptr)\n+      field_type = other.field_type->clone_type ();\n+  }\n \n   ~StructField () = default;\n \n   // Overloaded assignment operator to clone\n   StructField &operator= (StructField const &other)\n   {\n     field_name = other.field_name;\n-    field_type = other.field_type->clone_type ();\n     visibility = other.visibility;\n     outer_attrs = other.outer_attrs;\n \n+    // guard to prevent null dereference\n+    if (other.field_type != nullptr)\n+      field_type = other.field_type->clone_type ();\n+    else\n+      field_type = nullptr;\n+\n     return *this;\n   }\n \n@@ -1620,6 +1628,10 @@ struct StructField\n   }\n \n   std::string as_string () const;\n+\n+  // TODO: this mutable getter seems really dodgy. Think up better way.\n+  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n };\n \n // Rust struct declaration with true struct type AST node\n@@ -2074,6 +2086,10 @@ class Union : public VisItem\n   void mark_for_strip () override { union_name = \"\"; }\n   bool is_marked_for_strip () const override { return union_name.empty (); }\n \n+  // TODO: this mutable getter seems really dodgy. Think up better way.\n+  std::vector<StructField> &get_variants () { return variants; }\n+  const std::vector<StructField> &get_variants () const { return variants; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2420,6 +2436,12 @@ class TraitItemFunc : public TraitItem\n   std::vector<FunctionParam> &get_function_params () { return decl.get_function_params (); }\n   const std::vector<FunctionParam> &get_function_params () const { return decl.get_function_params (); }\n \n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  std::unique_ptr<BlockExpr> &get_definition () {\n+    rust_assert (has_definition());\n+    return block_expr;\n+  }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override\n@@ -2602,6 +2624,12 @@ class TraitItemMethod : public TraitItem\n   std::vector<FunctionParam> &get_function_params () { return decl.get_function_params (); }\n   const std::vector<FunctionParam> &get_function_params () const { return decl.get_function_params (); }\n \n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  std::unique_ptr<BlockExpr> &get_definition () {\n+    rust_assert (has_definition());\n+    return block_expr;\n+  }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemMethod *clone_trait_item_impl () const override"}, {"sha": "ad97e2cd6af6ab24d13fd184717a472dbcd64adc", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164e38246f0f469fa83f5fa3f56fc53fa1b46450/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164e38246f0f469fa83f5fa3f56fc53fa1b46450/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=164e38246f0f469fa83f5fa3f56fc53fa1b46450", "patch": "@@ -12,6 +12,28 @@ namespace Rust {\n       public:\n         AttrVisitor(MacroExpander& expander) : expander(expander) {}\n \n+        void expand_struct_fields(std::vector<AST::StructField>& fields) {\n+            for (int i = 0; i < fields.size(); ) {\n+                auto& field_attrs = fields[i].get_outer_attrs ();\n+                expander.expand_cfg_attrs(field_attrs);\n+                if (expander.fails_cfg (field_attrs))\n+                    fields.erase (fields.begin() + i);\n+                else\n+                    i++;\n+            }\n+        }\n+\n+        void expand_function_params(std::vector<AST::FunctionParam>& params) {\n+            for (int i = 0; i < params.size(); ) {\n+                auto& param_attrs = params[i].get_outer_attrs ();\n+                expander.expand_cfg_attrs(param_attrs);\n+                if (expander.fails_cfg (param_attrs))\n+                    params.erase (params.begin() + i);\n+                else\n+                    i++;\n+            }\n+        }\n+\n         void visit(AST::Token& tok) override {}\n         void visit(AST::DelimTokenTree& delim_tok_tree) override {}\n         void visit(AST::AttrInputMetaItemContainer& input) override {}\n@@ -122,10 +144,37 @@ namespace Rust {\n         void visit(AST::EnumItemStruct& item) override {}\n         void visit(AST::EnumItemDiscriminant& item) override {}\n         void visit(AST::Enum& enum_item) override {}\n-        void visit(AST::Union& union_item) override {}\n-        void visit(AST::ConstantItem& const_item) override {}\n-        void visit(AST::StaticItem& static_item) override {\n+        void visit(AST::Union& union_item) override {\n+            // initial test based on outer attrs\n+            expander.expand_cfg_attrs(union_item.get_outer_attrs());\n+            if (expander.fails_cfg(union_item.get_outer_attrs())) {\n+                union_item.mark_for_strip();\n+                return;\n+            }\n             \n+            /* strip union fields if required - this is presumably\n+             * allowed by spec */\n+            expand_struct_fields(union_item.get_variants());\n+        }\n+        void visit(AST::ConstantItem& const_item) override {\n+            // initial test based on outer attrs\n+            expander.expand_cfg_attrs(const_item.get_outer_attrs());\n+            if (expander.fails_cfg(const_item.get_outer_attrs())) {\n+                const_item.mark_for_strip();\n+                return;\n+            }\n+            /* TODO: is there any way to invalidate the expr? Are attributes \n+             * even allowed on it? */\n+        }\n+        void visit(AST::StaticItem& static_item) override {\n+            // initial test based on outer attrs\n+            expander.expand_cfg_attrs(static_item.get_outer_attrs());\n+            if (expander.fails_cfg(static_item.get_outer_attrs())) {\n+                static_item.mark_for_strip();\n+                return;\n+            }\n+            /* TODO: is there any way to invalidate the expr? Are attributes \n+             * even allowed on it? */\n         }\n         void visit(AST::TraitItemFunc& item) override {\n             // initial test based on outer attrs\n@@ -137,14 +186,11 @@ namespace Rust {\n \n             /* strip function parameters if required - this is specifically \n              * allowed by spec */\n-            auto& params = item.get_function_params();\n-            for (int i = 0; i < params.size(); ) {\n-                auto& param_attrs = params[i].get_outer_attrs ();\n-                expander.expand_cfg_attrs(param_attrs);\n-                if (expander.fails_cfg (param_attrs))\n-                    params.erase (params.begin() + i);\n-                else\n-                    i++;\n+            expand_function_params(item.get_function_params());\n+\n+            if (item.has_definition()) {\n+                item.get_definition()->accept_vis(*this);\n+                // TODO: can block as a whole be invalidated here? Assuming no\n             }\n         }\n         void visit(AST::TraitItemMethod& item) override {\n@@ -161,14 +207,11 @@ namespace Rust {\n \n             /* strip function parameters if required - this is specifically \n              * allowed by spec */\n-            auto& params = item.get_function_params();\n-            for (int i = 0; i < params.size(); ) {\n-                auto& param_attrs = params[i].get_outer_attrs ();\n-                expander.expand_cfg_attrs(param_attrs);\n-                if (expander.fails_cfg (param_attrs))\n-                    params.erase (params.begin() + i);\n-                else\n-                    i++;\n+            expand_function_params(item.get_function_params());\n+\n+            if (item.has_definition()) {\n+                item.get_definition()->accept_vis(*this);\n+                // TODO: can block as a whole be invalidated here? Assuming no\n             }\n         }\n         void visit(AST::TraitItemConst& item) override {\n@@ -303,6 +346,9 @@ namespace Rust {\n                 else\n                     i++;\n             }\n+            /* NOTE: these are extern function params, which may have different \n+             * rules and restrictions to \"normal\" function params. So expansion \n+             * handled separately. */\n \n             /* TODO: assuming that variadic nature cannot be stripped. If this \n              * is not true, then have code here to do so. */"}]}