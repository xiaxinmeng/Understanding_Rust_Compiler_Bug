{"sha": "f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "node_id": "C_kwDOANBUbNoAKGY2OGMzZGU3ZmM5MDY1ZDhjOWFjNzViMzczNmVhMjdhYmZmZGNlNDU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-03T13:46:40Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-10T08:01:54Z"}, "message": "nvptx: Fix and use BI mode logic instructions (e.g. and.pred)\n\nThis patch adds support for nvptx's BImode and.pred, or.pred and\nxor.pred instructions.  Technically, nvptx.md previously defined\nandbi3, iorbi3 and xorbi3 instructions, but the assembly language\nmnemonic output for these was incorrect (e.g. and.b1) and would be\nrejected by the ptxas assembler.  The most significant part of this\npatch is the new define_split which teaches the compiler to actually\nuse these instructions when appropriate (exposing the latent bug above).\n\nAfter https://gcc.gnu.org/pipermail/gcc-patches/2022-January/587999.html,\nthe function:\n\nint foo(int x, int y) { return (x==21) && (y==69); }\n\nwhen compiled with -O2 produces:\n\n                mov.u32 %r26, %ar0;\n                mov.u32 %r27, %ar1;\n                setp.eq.u32     %r31, %r26, 21;\n                setp.eq.u32     %r34, %r27, 69;\n                selp.u32        %r37, 1, 0, %r31;\n                selp.u32        %r38, 1, 0, %r34;\n                and.b32 %value, %r37, %r38;\n\nwith this patch we now save an extra instruction and generate:\n\n                mov.u32 %r26, %ar0;\n                mov.u32 %r27, %ar1;\n                setp.eq.u32     %r31, %r26, 21;\n                setp.eq.u32     %r34, %r27, 69;\n                and.pred        %r39, %r34, %r31;\n                selp.u32        %value, 1, 0, %r39;\n\nThis patch has been tested (on top of the patch mentioned above) on\nnvptx-none hosted on x86_64-pc-linux-gnu (including newlib) with a\nmake and make -k check with no new failures.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.md (any_logic): Move code iterator earlier\n\tin machine description.\n\t(logic): Move code attribute earlier in machine description.\n\t(ilogic): New code attribute, like logic but \"ior\" for IOR.\n\t(and<mode>3, ior<mode>3, xor<mode>3): Delete. Replace with...\n\t(<ilogic><mode>3): New define_insn for HSDIM logic operations.\n\t(<ilogic>bi3): New define_insn for BI mode logic operations.\n\t(define_split): Lower logic operations from integer modes to\n\tBI mode predicate operations.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/bool-1.c: Update.\n\t* gcc.target/nvptx/bool-2.c: New test case for and.pred.\n\t* gcc.target/nvptx/bool-3.c: New test case for or.pred.\n\t* gcc.target/nvptx/bool-4.c: New test case for xor.pred.", "tree": {"sha": "7e1bdde96877da38500750081c4da6f9a7dccdf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1bdde96877da38500750081c4da6f9a7dccdf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "107df74e46c8a153b1c9630c0e64b6f94e8a60b3", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "patch": "@@ -801,26 +801,38 @@\n \n ;; Logical operations\n \n-(define_insn \"and<mode>3\"\n-  [(set (match_operand:BHSDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(and:BHSDIM (match_operand:BHSDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t    (match_operand:BHSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n-  \"\"\n-  \"%.\\\\tand.b%T0\\\\t%0, %1, %2;\")\n+(define_code_iterator any_logic [and ior xor])\n+(define_code_attr logic [(and \"and\") (ior \"or\") (xor \"xor\")])\n+(define_code_attr ilogic [(and \"and\") (ior \"ior\") (xor \"xor\")])\n \n-(define_insn \"ior<mode>3\"\n-  [(set (match_operand:BHSDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(ior:BHSDIM (match_operand:BHSDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t    (match_operand:BHSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+(define_insn \"<ilogic><mode>3\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(any_logic:HSDIM\n+\t  (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t  (match_operand:HSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n   \"\"\n-  \"%.\\\\tor.b%T0\\\\t%0, %1, %2;\")\n+  \"%.\\\\t<logic>.b%T0\\\\t%0, %1, %2;\")\n \n-(define_insn \"xor<mode>3\"\n-  [(set (match_operand:BHSDIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(xor:BHSDIM (match_operand:BHSDIM 1 \"nvptx_register_operand\" \"R\")\n-\t\t    (match_operand:BHSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+(define_insn \"<ilogic>bi3\"\n+  [(set (match_operand:BI 0 \"nvptx_register_operand\" \"=R\")\n+\t(any_logic:BI (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n+\t\t      (match_operand:BI 2 \"nvptx_register_operand\" \"R\")))]\n   \"\"\n-  \"%.\\\\txor.b%T0\\\\t%0, %1, %2;\")\n+  \"%.\\\\t<logic>.pred\\\\t%0, %1, %2;\")\n+\n+(define_split\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\")\n+\t(any_logic:HSDIM\n+\t  (ne:HSDIM (match_operand:BI 1 \"nvptx_register_operand\")\n+\t\t    (const_int 0))\n+\t  (ne:HSDIM (match_operand:BI 2 \"nvptx_register_operand\")\n+\t\t    (const_int 0))))]\n+  \"can_create_pseudo_p ()\"\n+  [(set (match_dup 3) (any_logic:BI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (ne:HSDIM (match_dup 3) (const_int 0)))]\n+{\n+  operands[3] = gen_reg_rtx (BImode);\n+})\n \n ;; Comparisons and branches\n \n@@ -2042,9 +2054,6 @@\n   }\n   [(set_attr \"atomic\" \"true\")])\n \n-(define_code_iterator any_logic [and ior xor])\n-(define_code_attr logic [(and \"and\") (ior \"or\") (xor \"xor\")])\n-\n (define_insn \"atomic_fetch_<logic><mode>\"\n   [(set (match_operand:SDIM 1 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SDIM"}, {"sha": "9b8a2d4ef572dde876e2b89995bd1efcedceb875", "filename": "gcc/testsuite/gcc.target/nvptx/bool-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-1.c?ref=f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "patch": "@@ -12,5 +12,5 @@ foo (int x, int y)\n /* { dg-final { scan-assembler-not \"cvt.u32.u8\" } } */\n \n /* { dg-final { scan-assembler-times \"setp.eq.u32\" 2 } } */\n-/* { dg-final { scan-assembler-times \"selp.u32\" 2 } } */\n-/* { dg-final { scan-assembler-times \"and.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"selp.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"and.pred\" 1 } } */"}, {"sha": "b7792480b54aaf98980dff4f67f0810045dcef70", "filename": "gcc/testsuite/gcc.target/nvptx/bool-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-2.c?ref=f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x, int y)\n+{\n+  return (x==21) && (y==69);\n+}\n+\n+int bar(int x, int y)\n+{\n+  return (x==21) & (y==69);\n+}\n+\n+/* { dg-final { scan-assembler-times \"and.pred\" 2 } } */"}, {"sha": "ab4206a60eb99f92f27667a16cfc1fc9ea832283", "filename": "gcc/testsuite/gcc.target/nvptx/bool-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-3.c?ref=f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x, int y)\n+{\n+  return (x==21) || (y==69);\n+}\n+\n+int bar(int x, int y)\n+{\n+  return (x==21) | (y==69);\n+}\n+\n+/* { dg-final { scan-assembler-times \"or.pred\" 2 } } */"}, {"sha": "b5885742308a243d3903c0ad9dd6db53749b293f", "filename": "gcc/testsuite/gcc.target/nvptx/bool-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68c3de7fc9065d8c9ac75b3736ea27abffdce45/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fbool-4.c?ref=f68c3de7fc9065d8c9ac75b3736ea27abffdce45", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(int x, int y)\n+{\n+  return (x==21) ^ (y==69);\n+}\n+\n+/* { dg-final { scan-assembler \"xor.pred\" } } */"}]}