{"sha": "1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3NDZiMGYyYWY2YWI1MGU5YTA4MjQ0YmRmMjMzODBjODVjNGUyMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-01-25T19:21:30Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-01-25T19:21:30Z"}, "message": "class.c (abort_fndecl_addr): New variable.\n\n2005-01-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * class.c (abort_fndecl_addr): New variable.\n        (build_vtbl_initializer): If we have a pure virtual function\n        share the abort function's address.\n        Include gt-cp-class.h at the end.\n        * config-lang.in (gtfiles): Add cp/class.c.\n\nFrom-SVN: r94225", "tree": {"sha": "962b6fe7d5abb7a169372f67b8c286c7b2e60f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/962b6fe7d5abb7a169372f67b8c286c7b2e60f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/comments", "author": null, "committer": null, "parents": [{"sha": "60b5ee6b4783eed69470cfee80adbf6f67743c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b5ee6b4783eed69470cfee80adbf6f67743c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b5ee6b4783eed69470cfee80adbf6f67743c4b"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "52a0ee6bb34ea2ea23e7e0b2ef96378143d9fc8f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "patch": "@@ -1,3 +1,11 @@\n+2005-01-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* class.c (abort_fndecl_addr): New variable.\n+\t(build_vtbl_initializer): If we have a pure virtual function\n+\tshare the abort function's address.\n+\tInclude gt-cp-class.h at the end.\n+\t* config-lang.in (gtfiles): Add cp/class.c.\n+\n 2005-01-25  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* cxx-pretty-print.c (pp_cxx_statement): Add prototype. Make static."}, {"sha": "84db9e2169b0fea1f7710f9a1a6944253361605a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "patch": "@@ -7063,6 +7063,8 @@ dfs_accumulate_vtbl_inits (tree binfo,\n   return inits;\n }\n \n+static GTY(()) tree abort_fndecl_addr;\n+\n /* Construct the initializer for BINFO's virtual function table.  BINFO\n    is part of the hierarchy dominated by T.  If we're building a\n    construction vtable, the ORIG_BINFO is the binfo we should use to\n@@ -7212,16 +7214,24 @@ build_vtbl_initializer (tree binfo,\n \t  /* You can't call an abstract virtual function; it's abstract.\n \t     So, we replace these functions with __pure_virtual.  */\n \t  if (DECL_PURE_VIRTUAL_P (fn_original))\n-\t    fn = abort_fndecl;\n-\t  else if (!integer_zerop (delta) || vcall_index)\n \t    {\n-\t      fn = make_thunk (fn, /*this_adjusting=*/1, delta, vcall_index);\n-\t      if (!DECL_NAME (fn))\n-\t\tfinish_thunk (fn);\n+\t      fn = abort_fndecl;\n+\t      if (abort_fndecl_addr == NULL)\n+\t\tabort_fndecl_addr = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n+\t      init = abort_fndecl_addr;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!integer_zerop (delta) || vcall_index)\n+\t\t{\n+\t\t  fn = make_thunk (fn, /*this_adjusting=*/1, delta, vcall_index);\n+\t\t  if (!DECL_NAME (fn))\n+\t\t    finish_thunk (fn);\n+\t\t}\n+\t      /* Take the address of the function, considering it to be of an\n+\t\t appropriate generic type.  */\n+\t      init = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n \t    }\n-\t  /* Take the address of the function, considering it to be of an\n-\t     appropriate generic type.  */\n-\t  init = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n \t}\n \n       /* And add it to the chain of initializers.  */\n@@ -7682,3 +7692,4 @@ cp_fold_obj_type_ref (tree ref, tree known_type)\n   return build_address (fndecl);\n }\n \n+#include \"gt-cp-class.h\""}, {"sha": "7243f4d6ac9ce0fa7f1d0b6460423421024b5cf0", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b746b0f2af6ab50e9a08244bdf23380c85c4e20/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=1b746b0f2af6ab50e9a08244bdf23380c85c4e20", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3 target-gperf\"\n \n-gtfiles=\"\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c\"\n+gtfiles=\"\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c\""}]}