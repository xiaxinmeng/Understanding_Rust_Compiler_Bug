{"sha": "522aa6ee70820727d5be628b0f6b3cc7a185a14b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyYWE2ZWU3MDgyMDcyN2Q1YmU2MjhiMGY2YjNjYzdhMTg1YTE0Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:00:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:00:42Z"}, "message": "[multiple changes]\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb (Find_Direct_Name): Account for the case where\n\ta use-visible entity is defined within a nested scope of an\n\tinstance when giving priority to entities which were visible in\n\tthe original generic.\n\t* sem_util.ads, sem_util.adb (Nearest_Enclosing_Instance): New routine.\n\n2017-04-27  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c: Don't use unwind.h while compiling\n\tfor the frontend, but mimic host behavior.\n\n2017-04-27  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Build_Discriminated_Subtype):\n\tPropagate Has_Pragma_Unreferenced_Objects to the built subtype.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Global_Item):\n\tDo not consider discriminants because they are not \"entire\n\tobjects\". Remove the discriminant-related checks because they are\n\tobsolete.\n\t(Analyze_Input_Output): Do not consider discriminants\n\tbecause they are not \"entire objects\".\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): Do not\n\tperform check if the current scope does not come from source,\n\tas is the case for a rewritten task body, because check has\n\tbeen performed already, and may not be doable because of changed\n\tvisibility.\n\nFrom-SVN: r247309", "tree": {"sha": "ae207153ba994c3456cf41e612a494ca2c615cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae207153ba994c3456cf41e612a494ca2c615cdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522aa6ee70820727d5be628b0f6b3cc7a185a14b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522aa6ee70820727d5be628b0f6b3cc7a185a14b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522aa6ee70820727d5be628b0f6b3cc7a185a14b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522aa6ee70820727d5be628b0f6b3cc7a185a14b/comments", "author": null, "committer": null, "parents": [{"sha": "f138ea5cbaf8f2a8cec00b741e5b23a8db5c0f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f138ea5cbaf8f2a8cec00b741e5b23a8db5c0f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f138ea5cbaf8f2a8cec00b741e5b23a8db5c0f83"}], "stats": {"total": 183, "additions": 139, "deletions": 44}, "files": [{"sha": "89c28e8ad6f1f4f43294481a6cd44b340d2645ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -1,3 +1,38 @@\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name): Account for the case where\n+\ta use-visible entity is defined within a nested scope of an\n+\tinstance when giving priority to entities which were visible in\n+\tthe original generic.\n+\t* sem_util.ads, sem_util.adb (Nearest_Enclosing_Instance): New routine.\n+\n+2017-04-27  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c: Don't use unwind.h while compiling\n+\tfor the frontend, but mimic host behavior.\n+\n+2017-04-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Discriminated_Subtype):\n+\tPropagate Has_Pragma_Unreferenced_Objects to the built subtype.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item):\n+\tDo not consider discriminants because they are not \"entire\n+\tobjects\". Remove the discriminant-related checks because they are\n+\tobsolete.\n+\t(Analyze_Input_Output): Do not consider discriminants\n+\tbecause they are not \"entire objects\".\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): Do not\n+\tperform check if the current scope does not come from source,\n+\tas is the case for a rewritten task body, because check has\n+\tbeen performed already, and may not be doable because of changed\n+\tvisibility.\n+\n 2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* a-cofuse.adb, a-cfdlli.adb, a-cofuse.ads, a-cfdlli.ads, a-cofuve.adb,"}, {"sha": "1264a726c63cccd2d2faf24c381529dcd85f4cfd", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -32,12 +32,20 @@\n /* Code related to the integration of the GCC mechanism for exception\n    handling.  */\n \n-#ifndef CERT\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#ifndef IN_RTS\n+  /* For gnat1/gnatbind compilation: use host headers.  */\n+# include \"config.h\"\n+# include \"system.h\"\n+  /* Don't use fancy_abort.  */\n+# undef abort\n #else\n-#define ATTRIBUTE_UNUSED __attribute__((unused))\n-#define HAVE_GETIPINFO 1\n+# ifndef CERT\n+#  include \"tconfig.h\"\n+#  include \"tsystem.h\"\n+# else\n+#  define ATTRIBUTE_UNUSED __attribute__((unused))\n+#  define HAVE_GETIPINFO 1\n+# endif\n #endif\n \n #include <stdarg.h>\n@@ -71,7 +79,19 @@ typedef char bool;\n    (SJLJ or DWARF). We need a consistently named interface to import from\n    a-except, so wrappers are defined here.  */\n \n-#include \"unwind.h\"\n+#ifndef IN_RTS\n+  /* For gnat1/gnatbind compilation: cannot use unwind.h, as it is for the\n+     target. So mimic configure...\n+     This is a hack ???, the real fix is to link gnat1/gnatbind with the\n+     runtime of the build compiler.  */\n+# ifdef EH_MECHANISM_arm\n+#   include \"config/arm/unwind-arm.h\"\n+# else\n+#   include \"unwind-generic.h\"\n+# endif\n+#else\n+# include \"unwind.h\"\n+#endif\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -98,6 +118,11 @@ extern void __gnat_raise_abort (void) __attribute__ ((noreturn));\n \n #include \"unwind-pe.h\"\n \n+#ifdef __ARM_EABI_UNWINDER__\n+/* for memcmp */\n+#include <string.h>\n+#endif\n+\n /* The known and handled exception classes.  */\n \n #ifdef __ARM_EABI_UNWINDER__"}, {"sha": "34fd7a53b52c5d1aafc8fde8bce0450858192885", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -9083,6 +9083,14 @@ package body Sem_Ch13 is\n       if In_Instance then\n          return;\n \n+      --  The enclosing scope may have been rewritten during expansion (.e.g.\n+      --  a task body is rewritten as a procedure) after this conformance check\n+      --  has been performed, so do not perform it again (it may not easily\n+      --  be done if full visibility of local entities is not available).\n+\n+      elsif not Comes_From_Source (Current_Scope) then\n+         return;\n+\n       --  Case of aspects Dimension, Dimension_System and Synchronization\n \n       elsif A_Id = Aspect_Synchronization then"}, {"sha": "342e1deb6a28a1b828fca057c9810acba2922c0f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -9931,6 +9931,8 @@ package body Sem_Ch3 is\n       Set_Last_Entity       (Def_Id, Last_Entity    (T));\n       Set_Has_Implicit_Dereference\n                             (Def_Id, Has_Implicit_Dereference (T));\n+      Set_Has_Pragma_Unreferenced_Objects\n+                            (Def_Id, Has_Pragma_Unreferenced_Objects (T));\n \n       --  If the subtype is the completion of a private declaration, there may\n       --  have been representation clauses for the partial view, and they must"}, {"sha": "0a7f20488db216e07ae15a963ed1ddd55675dc47", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4764,16 +4764,16 @@ package body Sem_Ch8 is\n    ----------------------\n \n    procedure Find_Direct_Name (N : Node_Id) is\n-      E    : Entity_Id;\n-      E2   : Entity_Id;\n-      Msg  : Boolean;\n-\n-      Inst : Entity_Id := Empty;\n-      --  Enclosing instance, if any\n+      E   : Entity_Id;\n+      E2  : Entity_Id;\n+      Msg : Boolean;\n \n       Homonyms : Entity_Id;\n       --  Saves start of homonym chain\n \n+      Inst : Entity_Id := Empty;\n+      --  Enclosing instance, if any\n+\n       Nvis_Entity : Boolean;\n       --  Set True to indicate that there is at least one entity on the homonym\n       --  chain which, while not visible, is visible enough from the user point\n@@ -4835,8 +4835,6 @@ package body Sem_Ch8 is\n          Scop : constant Entity_Id := Scope (E);\n          --  Declared scope of candidate entity\n \n-         Act : Entity_Id;\n-\n          function Declared_In_Actual (Pack : Entity_Id) return Boolean;\n          --  Recursive function that does the work and examines actuals of\n          --  actual packages of current instance.\n@@ -4858,7 +4856,7 @@ package body Sem_Ch8 is\n                   if Renamed_Object (Pack) = Scop then\n                      return True;\n \n-                  --  Check for end of list of actuals.\n+                  --  Check for end of list of actuals\n \n                   elsif Ekind (Act) = E_Package\n                     and then Renamed_Object (Act) = Pack\n@@ -4878,6 +4876,10 @@ package body Sem_Ch8 is\n             end if;\n          end Declared_In_Actual;\n \n+         --  Local variables\n+\n+         Act : Entity_Id;\n+\n       --  Start of processing for From_Actual_Package\n \n       begin\n@@ -5331,6 +5333,11 @@ package body Sem_Ch8 is\n          Msg := True;\n       end Undefined;\n \n+      --  Local variables\n+\n+      Nested_Inst : Entity_Id := Empty;\n+      --  The entity of a nested instance which appears within Inst (if any)\n+\n    --  Start of processing for Find_Direct_Name\n \n    begin\n@@ -5497,15 +5504,17 @@ package body Sem_Ch8 is\n          --  If there is more than one potentially use-visible entity and at\n          --  least one of them non-overloadable, we have an error (RM 8.4(11)).\n          --  Note that E points to the first such entity on the homonym list.\n-         --  Special case: if one of the entities is declared in an actual\n-         --  package, it was visible in the generic, and takes precedence over\n-         --  other entities that are potentially use-visible. Same if it is\n-         --  declared in a local instantiation of the current instance.\n \n          else\n+            --  If one of the entities is declared in an actual package, it\n+            --  was visible in the generic, and takes precedence over other\n+            --  entities that are potentially use-visible. The same applies\n+            --  if the entity is declared in a local instantiation of the\n+            --  current instance.\n+\n             if In_Instance then\n \n-               --  Find current instance\n+               --  Find the current instance\n \n                Inst := Current_Scope;\n                while Present (Inst) and then Inst /= Standard_Standard loop\n@@ -5516,12 +5525,21 @@ package body Sem_Ch8 is\n                   Inst := Scope (Inst);\n                end loop;\n \n+               --  Reexamine the candidate entities, giving priority to those\n+               --  that were visible within the generic.\n+\n                E2 := E;\n                while Present (E2) loop\n+                  Nested_Inst := Nearest_Enclosing_Instance (E2);\n+\n+                  --  The entity is declared within an actual package, or in a\n+                  --  nested instance. The \">=\" accounts for the case where the\n+                  --  current instance and the nested instance are the same.\n+\n                   if From_Actual_Package (E2)\n-                    or else\n-                      (Is_Generic_Instance (Scope (E2))\n-                        and then Scope_Depth (Scope (E2)) > Scope_Depth (Inst))\n+                    or else (Present (Nested_Inst)\n+                              and then Scope_Depth (Nested_Inst) >=\n+                                       Scope_Depth (Inst))\n                   then\n                      E := E2;\n                      goto Found;\n@@ -5533,8 +5551,7 @@ package body Sem_Ch8 is\n                Nvis_Messages;\n                goto Done;\n \n-            elsif\n-              Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit))\n+            elsif Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit))\n             then\n                --  A use-clause in the body of a system file creates conflict\n                --  with some entity in a user scope, while rtsfind is active.\n@@ -5543,7 +5560,7 @@ package body Sem_Ch8 is\n                E2 := E;\n                while Present (E2) loop\n                   if Is_Predefined_File_Name\n-                    (Unit_File_Name (Get_Source_Unit (Sloc (E2))))\n+                       (Unit_File_Name (Get_Source_Unit (Sloc (E2))))\n                   then\n                      E := E2;\n                      goto Found;"}, {"sha": "10ec8d75d922e8a1d06150d6ddc04813fbbaa0a1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -928,9 +928,7 @@ package body Sem_Prag is\n \n                   --  Constants\n \n-                  if Ekind_In (Item_Id, E_Constant,\n-                                        E_Discriminant,\n-                                        E_Loop_Parameter)\n+                  if Ekind_In (Item_Id, E_Constant, E_Loop_Parameter)\n                       or else\n \n                     --  Current instances of concurrent types\n@@ -2216,7 +2214,6 @@ package body Sem_Prag is\n \n                elsif not Ekind_In (Item_Id, E_Abstract_State,\n                                             E_Constant,\n-                                            E_Discriminant,\n                                             E_Loop_Parameter,\n                                             E_Variable)\n                then\n@@ -2287,19 +2284,6 @@ package body Sem_Prag is\n                      return;\n                   end if;\n \n-               --  Discriminant related checks\n-\n-               elsif Ekind (Item_Id) = E_Discriminant then\n-\n-                  --  A discriminant is a read-only item, therefore it cannot\n-                  --  act as an output.\n-\n-                  if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n-                     SPARK_Msg_NE\n-                       (\"discriminant & cannot act as output\", Item, Item_Id);\n-                     return;\n-                  end if;\n-\n                --  Loop parameter related checks\n \n                elsif Ekind (Item_Id) = E_Loop_Parameter then"}, {"sha": "f924b739b68a45a022273d18945b19aee75c99eb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -16750,6 +16750,26 @@ package body Sem_Util is\n       Mark_Allocators (Root_Nod);\n    end Mark_Coextensions;\n \n+   --------------------------------\n+   -- Nearest_Enclosing_Instance --\n+   --------------------------------\n+\n+   function Nearest_Enclosing_Instance (E : Entity_Id) return Entity_Id is\n+      Inst : Entity_Id;\n+\n+   begin\n+      Inst := Scope (E);\n+      while Present (Inst) and then Inst /= Standard_Standard loop\n+         if Is_Generic_Instance (Inst) then\n+            return Inst;\n+         end if;\n+\n+         Inst := Scope (Inst);\n+      end loop;\n+\n+      return Empty;\n+   end Nearest_Enclosing_Instance;\n+\n    ----------------------\n    -- Needs_One_Actual --\n    ----------------------"}, {"sha": "de0e2a8a1a1137b32445e7b5d027f7e2b9002452", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522aa6ee70820727d5be628b0f6b3cc7a185a14b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=522aa6ee70820727d5be628b0f6b3cc7a185a14b", "patch": "@@ -1941,6 +1941,10 @@ package Sem_Util is\n    --  to guarantee this in all cases. Note that it is more possible to give\n    --  correct answer if the tree is fully analyzed.\n \n+   function Nearest_Enclosing_Instance (E : Entity_Id) return Entity_Id;\n+   --  Return the entity of the nearest enclosing instance which encapsulates\n+   --  entity E. If no such instance exits, return Empty.\n+\n    function Needs_One_Actual (E : Entity_Id) return Boolean;\n    --  Returns True if a function has defaults for all but its first\n    --  formal. Used in Ada 2005 mode to solve the syntactic ambiguity that"}]}