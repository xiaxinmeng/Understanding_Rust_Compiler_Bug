{"sha": "f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmNzVmOGQzY2M0YWZiNzdjMmU3NWMxZTc4NjgxMGNkY2E5MjBjMw==", "commit": {"author": {"name": "Philippe Waroquiers", "email": "philippe.waroquiers@skynet.be", "date": "2019-02-12T13:02:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2019-02-12T13:02:48Z"}, "message": "Fix splay tree KEY leak detected in GDB test gdb.base/macscp.exp\n\nWhen a node is removed from a splay tree, the splay tree was\nnot using the function splay_tree_delete_key_fn to release the key.\nThis was causing a leak, fixed by Tom Tromey.\n\nThis patch fixes another key leak, that happens when a key equal to\na key already present is inserted.  In such a case, we have to release\nthe old KEY.\nNote that this is based on the assumption that the caller always\nallocates a new KEY when doing an insert.\n\nAlso, clarify the documentation about when the release functions are\ncalled.\n\n2019-02-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* splay-tree.h (splay_tree_delete_key_fn): Update comment.\n\t(splay_tree_delete_value_fn): Likewise.\n\nlibiberty/ChangeLog\n2019-02-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* splay-tree.c (splay_tree_insert): Also release old KEY in case\n\tof insertion of a key equal to an already present key.\n\t(splay_tree_new_typed_alloc): Update comment.\n\nFrom-SVN: r268793", "tree": {"sha": "bc94a11a30f45a52486ce30aeb3b950e48f9d1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc94a11a30f45a52486ce30aeb3b950e48f9d1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/comments", "author": null, "committer": null, "parents": [{"sha": "c4d5763224c7817ad5cb671e651e69b2708d49f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d5763224c7817ad5cb671e651e69b2708d49f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d5763224c7817ad5cb671e651e69b2708d49f0"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "be08141deeb9dd2ad44a5abac90a811ea0d63cd5", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "patch": "@@ -1,3 +1,8 @@\n+2019-02-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* splay-tree.h (splay_tree_delete_key_fn): Update comment.\n+\t(splay_tree_delete_value_fn): Likewise.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "da533dec183ffa15ebfe0a87e42635090fdfc522", "filename": "include/splay-tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/include%2Fsplay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/include%2Fsplay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsplay-tree.h?ref=f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "patch": "@@ -58,11 +58,18 @@ typedef struct splay_tree_node_s *splay_tree_node;\n typedef int (*splay_tree_compare_fn) (splay_tree_key, splay_tree_key);\n \n /* The type of a function used to deallocate any resources associated\n-   with the key.  */\n+   with the key.  If you provide this function, the splay tree\n+   will take the ownership of the memory of the splay_tree_key arg\n+   of splay_tree_insert.  This function is called to release the keys\n+   present in the tree when calling splay_tree_delete or splay_tree_remove.\n+   If splay_tree_insert is called with a key equal to a key already\n+   present in the tree, the old key and old value will be released.  */\n typedef void (*splay_tree_delete_key_fn) (splay_tree_key);\n \n /* The type of a function used to deallocate any resources associated\n-   with the value.  */\n+   with the value.  If you provide this function, the memory of the\n+   splay_tree_value arg of splay_tree_insert is managed similarly to\n+   the splay_tree_key memory: see splay_tree_delete_key_fn.  */\n typedef void (*splay_tree_delete_value_fn) (splay_tree_value);\n \n /* The type of a function used to iterate over the tree.  */"}, {"sha": "f632558992779204037c69df62ca9aa60e25402a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "patch": "@@ -1,3 +1,9 @@\n+2019-02-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* splay-tree.c (splay_tree_insert): Also release old KEY in case\n+\tof insertion of a key equal to an already present key.\n+\t(splay_tree_new_typed_alloc): Update comment.\n+\n 2019-01-22  Nidal Faour  <nidal.faour@wdc.com>\n \n \tPR lto/88422"}, {"sha": "4bbb39a62ca476de7dd63b5ee592373e7a9a51a2", "filename": "libiberty/splay-tree.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/libiberty%2Fsplay-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f75f8d3cc4afb77c2e75c1e786810cdca920c3/libiberty%2Fsplay-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsplay-tree.c?ref=f9f75f8d3cc4afb77c2e75c1e786810cdca920c3", "patch": "@@ -318,7 +318,11 @@ different types need to be allocated with different allocators.\n \n The splay tree will use @var{compare_fn} to compare nodes,\n @var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} to\n-deallocate values.\n+deallocate values.  Keys and values will be deallocated when the\n+tree is deleted using splay_tree_delete or when a node is removed\n+using splay_tree_remove.  splay_tree_insert will release the previously\n+inserted key and value using @var{delete_key_fn} and @var{delete_value_fn}\n+if the inserted key is already found in the tree.\n \n @end deftypefn\n \n@@ -372,10 +376,13 @@ splay_tree_insert (splay_tree sp, splay_tree_key key, splay_tree_value value)\n \n   if (sp->root && comparison == 0)\n     {\n-      /* If the root of the tree already has the indicated KEY, just\n-\t replace the value with VALUE.  */\n+      /* If the root of the tree already has the indicated KEY, delete\n+         the old key and old value, and replace them with KEY and  VALUE.  */\n+      if (sp->delete_key)\n+\t(*sp->delete_key) (sp->root->key);\n       if (sp->delete_value)\n \t(*sp->delete_value)(sp->root->value);\n+      sp->root->key = key;\n       sp->root->value = value;\n     } \n   else "}]}