{"sha": "f6bb145c0bff19767931d37733be11c8acc6fa00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiYjE0NWMwYmZmMTk3Njc5MzFkMzc3MzNiZTExYzhhY2M2ZmEwMA==", "commit": {"author": {"name": "Tim Adye", "email": "Tim.Adye@cern.ch", "date": "2021-06-04T14:59:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-04T14:59:38Z"}, "message": "libstdc++: Optimize std::any_cast by replacing indirect call\n\nThis significantly improves the performance of std::any_cast, by\navoiding an indirect call to the _S_manage function through a function\npointer. Before we make that indirect call we've already established\nthat the contained value has the expected type, which means we also know\nthe manager type, and so can call one of its members directly.\n\nWe also know the precise type in the any::emplace functions, because\nwe've just constructed that type, so we can use the new member there\ntoo. That doesn't seem to affect performance, but we might as well use\nthe new _S_access function anyway.\n\nSigned-off-by: Tim Adye <Tim.Adye@cern.ch>\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/any (any::_Manager::_S_access): New static\n\tfunction to access the contained value.\n\t(any::emplace, __any_caster): Use _S_access member of the\n\tmanager type.", "tree": {"sha": "369f46cbe40b2b8c2ee3bc73467bcebb07570723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369f46cbe40b2b8c2ee3bc73467bcebb07570723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6bb145c0bff19767931d37733be11c8acc6fa00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bb145c0bff19767931d37733be11c8acc6fa00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bb145c0bff19767931d37733be11c8acc6fa00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bb145c0bff19767931d37733be11c8acc6fa00/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78f25f43864f38ae5a6a9fcce8f26c94fe45bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78f25f43864f38ae5a6a9fcce8f26c94fe45bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78f25f43864f38ae5a6a9fcce8f26c94fe45bcd"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "21120a9146f9774cdcd76c5c960e1b33bc96cdea", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bb145c0bff19767931d37733be11c8acc6fa00/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bb145c0bff19767931d37733be11c8acc6fa00/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=f6bb145c0bff19767931d37733be11c8acc6fa00", "patch": "@@ -263,9 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tusing _VTp = decay_t<_Tp>;\n \t__do_emplace<_VTp>(std::forward<_Args>(__args)...);\n-\tany::_Arg __arg;\n-\tthis->_M_manager(any::_Op_access, this, &__arg);\n-\treturn *static_cast<_VTp*>(__arg._M_obj);\n+\treturn *any::_Manager<_VTp>::_S_access(_M_storage);\n       }\n \n     /// Emplace with an object created from @p __il and @p __args as\n@@ -276,9 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tusing _VTp = decay_t<_Tp>;\n \t__do_emplace<_VTp, _Up>(__il, std::forward<_Args>(__args)...);\n-\tany::_Arg __arg;\n-\tthis->_M_manager(any::_Op_access, this, &__arg);\n-\treturn *static_cast<_VTp*>(__arg._M_obj);\n+\treturn *any::_Manager<_VTp>::_S_access(_M_storage);\n       }\n \n     // modifiers\n@@ -384,6 +380,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    void* __addr = &__storage._M_buffer;\n \t    ::new (__addr) _Tp(std::forward<_Args>(__args)...);\n \t  }\n+\n+\tstatic _Tp*\n+\t_S_access(const _Storage& __storage)\n+\t{\n+\t  // The contained object is in __storage._M_buffer\n+\t  const void* __addr = &__storage._M_buffer;\n+\t  return static_cast<_Tp*>(const_cast<void*>(__addr));\n+\t}\n       };\n \n     // Manage external contained object.\n@@ -405,6 +409,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    __storage._M_ptr = new _Tp(std::forward<_Args>(__args)...);\n \t  }\n+\tstatic _Tp*\n+\t_S_access(const _Storage& __storage)\n+\t{\n+\t  // The contained object is in *__storage._M_ptr\n+\t  return static_cast<_Tp*>(__storage._M_ptr);\n+\t}\n       };\n   };\n \n@@ -511,9 +521,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t  )\n \t{\n-\t  any::_Arg __arg;\n-\t  __any->_M_manager(any::_Op_access, __any, &__arg);\n-\t  return __arg._M_obj;\n+\t  return any::_Manager<_Up>::_S_access(__any->_M_storage);\n \t}\n       return nullptr;\n     }"}]}