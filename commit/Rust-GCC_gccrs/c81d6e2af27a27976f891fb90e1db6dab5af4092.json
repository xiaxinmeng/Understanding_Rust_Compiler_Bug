{"sha": "c81d6e2af27a27976f891fb90e1db6dab5af4092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgxZDZlMmFmMjdhMjc5NzZmODkxZmI5MGUxZGI2ZGFiNWFmNDA5Mg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2006-07-08T00:02:39Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2006-07-08T00:02:39Z"}, "message": "Add SB-1A support.\n\n* config/mips/mips.md (cpu): Add sb1a.\n* config/mips/sb1.md: Modify almost all patterns to accept sb1a in\naddition to sb1.  Adjust comments to clarify SB-1A differences from\nSB-1.\n(ir_sb1a_load): New.  Modify bypasses to use it.\n(ir_sb1a_simple_alu): Likewise.\n* config/mips/mips.c (mips_cpu_info_table): Add sb1a.\n(mips_rtx_cost_data): Add PROCESSOR_SB1A support.\n(mips_issue_rate): Add PROCESSOR_SB1A.\n(mips_multipass_dfa_lookahead): Use TUNE_SB1 instead of PROCESSOR_SB1.\n* config/mips/mips.h (processor_type): Add PROCESSOR_SB1A.\n(TARGET_SB1): Add PROCESSOR_SB1A check.\n(TUNE_SB1): Likewise.\n* config/mips/mips-protos.h (mips_store_data_bypass_p): New.\n* config/mips/mips.c (mips_store_data_bypass_p): New.\n* config/mips/sb1.md: Use mips_store_data_bypass_p instead of\nstore_data_bypass_p.\n\nFrom-SVN: r115274", "tree": {"sha": "6d9cac8d5cac52dd45ceff5ca343d551eb760020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d9cac8d5cac52dd45ceff5ca343d551eb760020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c81d6e2af27a27976f891fb90e1db6dab5af4092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81d6e2af27a27976f891fb90e1db6dab5af4092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81d6e2af27a27976f891fb90e1db6dab5af4092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81d6e2af27a27976f891fb90e1db6dab5af4092/comments", "author": null, "committer": null, "parents": [{"sha": "1b13a49083fce7d2e7185b8b400c2e40b3ddcbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b13a49083fce7d2e7185b8b400c2e40b3ddcbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b13a49083fce7d2e7185b8b400c2e40b3ddcbb8"}], "stats": {"total": 202, "additions": 136, "deletions": 66}, "files": [{"sha": "b846bdc7fac7f8380e83630414a546b048a35050", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -1,3 +1,24 @@\n+2006-07-07  James E Wilson  <wilson@specifix.com>\n+\n+\t* config/mips/mips.md (cpu): Add sb1a.\n+\t* config/mips/sb1.md: Modify almost all patterns to accept sb1a in\n+\taddition to sb1.  Adjust comments to clarify SB-1A differences from\n+\tSB-1.\n+\t(ir_sb1a_load): New.  Modify bypasses to use it.\n+\t(ir_sb1a_simple_alu): Likewise.\n+\t* config/mips/mips.c (mips_cpu_info_table): Add sb1a.\n+\t(mips_rtx_cost_data): Add PROCESSOR_SB1A support.\n+\t(mips_issue_rate): Add PROCESSOR_SB1A.\n+\t(mips_multipass_dfa_lookahead): Use TUNE_SB1 instead of PROCESSOR_SB1.\n+\t* config/mips/mips.h (processor_type): Add PROCESSOR_SB1A.\n+\t(TARGET_SB1): Add PROCESSOR_SB1A check.\n+\t(TUNE_SB1): Likewise.\n+\n+\t* config/mips/mips-protos.h (mips_store_data_bypass_p): New.\n+\t* config/mips/mips.c (mips_store_data_bypass_p): New.\n+\t* config/mips/sb1.md: Use mips_store_data_bypass_p instead of\n+\tstore_data_bypass_p.\n+\n 2006-07-08  Paul Brook  <paul@codesourcery.com>\n \n \tPR target/27991"}, {"sha": "090c2ef524ecd967c223b7f431f2619e75e10499", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -243,6 +243,7 @@ extern const char *mips_output_order_conditional_branch (rtx, rtx *, bool);\n extern const char *mips_output_division (const char *, rtx *);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n extern bool mips_linked_madd_p (rtx, rtx);\n+extern int mips_store_data_bypass_p (rtx, rtx);\n extern rtx mips_prefetch_cookie (rtx, rtx);\n \n extern void irix_asm_output_align (FILE *, unsigned);"}, {"sha": "ff8ce7d05983599c485b36c4aa26de002cac3983", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -759,6 +759,7 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"5kf\", PROCESSOR_5KF, 64 },\n   { \"20kc\", PROCESSOR_20KC, 64 },\n   { \"sb1\", PROCESSOR_SB1, 64 },\n+  { \"sb1a\", PROCESSOR_SB1A, 64 },\n   { \"sr71000\", PROCESSOR_SR71000, 64 },\n \n   /* End marker */\n@@ -1016,6 +1017,21 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        4            /* memory_latency */\n     },\n     { /* SB1 */\n+      /* These costs are the same as the SB-1A below.  */\n+      COSTS_N_INSNS (4),            /* fp_add */\n+      COSTS_N_INSNS (4),            /* fp_mult_sf */\n+      COSTS_N_INSNS (4),            /* fp_mult_df */\n+      COSTS_N_INSNS (24),           /* fp_div_sf */\n+      COSTS_N_INSNS (32),           /* fp_div_df */\n+      COSTS_N_INSNS (3),            /* int_mult_si */\n+      COSTS_N_INSNS (4),            /* int_mult_di */\n+      COSTS_N_INSNS (36),           /* int_div_si */\n+      COSTS_N_INSNS (68),           /* int_div_di */\n+                       1,           /* branch_cost */\n+                       4            /* memory_latency */\n+    },\n+    { /* SB1-A */\n+      /* These costs are the same as the SB-1 above.  */\n       COSTS_N_INSNS (4),            /* fp_add */\n       COSTS_N_INSNS (4),            /* fp_mult_sf */\n       COSTS_N_INSNS (4),            /* fp_mult_df */\n@@ -9904,6 +9920,7 @@ mips_issue_rate (void)\n       return 2;\n \n     case PROCESSOR_SB1:\n+    case PROCESSOR_SB1A:\n       /* This is actually 4, but we get better performance if we claim 3.\n \t This is partly because of unwanted speculative code motion with the\n \t larger number, and partly because in most common cases we can't\n@@ -9922,11 +9939,25 @@ static int\n mips_multipass_dfa_lookahead (void)\n {\n   /* Can schedule up to 4 of the 6 function units in any one cycle.  */\n-  if (mips_tune == PROCESSOR_SB1)\n+  if (TUNE_SB1)\n     return 4;\n \n   return 0;\n }\n+\n+/* Implements a store data bypass check.  We need this because the cprestore\n+   pattern is type store, but defined using an UNSPEC.  This UNSPEC causes the\n+   default routine to abort.  We just return false for that case.  */\n+/* ??? Should try to give a better result here than assuming false.  */\n+\n+int\n+mips_store_data_bypass_p (rtx out_insn, rtx in_insn)\n+{\n+  if (GET_CODE (PATTERN (in_insn)) == UNSPEC_VOLATILE)\n+    return false;\n+\n+  return ! store_data_bypass_p (out_insn, in_insn);\n+}\n \f\n /* Given that we have an rtx of the form (prefetch ... WRITE LOCALITY),\n    return the first operand of the associated \"pref\" or \"prefx\" insn.  */"}, {"sha": "4b72c8c8e3a32cba9ba7ae649dc99c114a6c471c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -58,6 +58,7 @@ enum processor_type {\n   PROCESSOR_R8000,\n   PROCESSOR_R9000,\n   PROCESSOR_SB1,\n+  PROCESSOR_SB1A,\n   PROCESSOR_SR71000,\n   PROCESSOR_MAX\n };\n@@ -208,7 +209,8 @@ extern const struct mips_rtx_cost_data *mips_cost;\n #define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)\n #define TARGET_MIPS7000             (mips_arch == PROCESSOR_R7000)\n #define TARGET_MIPS9000             (mips_arch == PROCESSOR_R9000)\n-#define TARGET_SB1                  (mips_arch == PROCESSOR_SB1)\n+#define TARGET_SB1                  (mips_arch == PROCESSOR_SB1\t\t\\\n+\t\t\t\t     || mips_arch == PROCESSOR_SB1A)\n #define TARGET_SR71K                (mips_arch == PROCESSOR_SR71000)\n \n /* Scheduling target defines.  */\n@@ -223,7 +225,8 @@ extern const struct mips_rtx_cost_data *mips_cost;\n #define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)\n #define TUNE_MIPS7000               (mips_tune == PROCESSOR_R7000)\n #define TUNE_MIPS9000               (mips_tune == PROCESSOR_R9000)\n-#define TUNE_SB1                    (mips_tune == PROCESSOR_SB1)\n+#define TUNE_SB1                    (mips_tune == PROCESSOR_SB1\t\t\\\n+\t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n \n /* True if the pre-reload scheduler should try to create chains of\n    multiply-add or multiply-subtract instructions.  For example,"}, {"sha": "1ddc3726fc24502c461ce9d7d3d9ae0573dd2e73", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -340,7 +340,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24k,24kx,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24k,24kx,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction."}, {"sha": "7db31ef55164bdf10346e7b9c4df3aba85630524", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 76, "deletions": 62, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c81d6e2af27a27976f891fb90e1db6dab5af4092/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=c81d6e2af27a27976f891fb90e1db6dab5af4092", "patch": "@@ -90,7 +90,7 @@\n ;;\n \n (define_insn_reservation \"ir_sb1_unknown\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"unknown,multi\"))\n   \"sb1_ls0+sb1_ls1+sb1_ex0+sb1_ex1+sb1_fp0+sb1_fp1\")\n \n@@ -102,15 +102,16 @@\n ;; investigated.  Maybe using 2 here will give better results.\n \n (define_insn_reservation \"ir_sb1_branch\" 0\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"branch,jump,call\"))\n   \"sb1_ex0\")\n \n ;; ??? This is 1 cycle for ldl/ldr to ldl/ldr when they use the same data\n ;; register as destination.\n \n-;; ??? Can co-issue a load with a dependent arith insn if it executes on an EX\n-;; unit.  Can not co-issue if the dependent insn executes on an LS unit.\n+;; ??? SB-1 can co-issue a load with a dependent arith insn if it executes on\n+;; an EX unit.  Can not co-issue if the dependent insn executes on an LS unit.\n+;; SB-1A can always co-issue here.\n \n ;; A load normally has a latency of zero cycles.  In some cases, dependent\n ;; insns can be issued in the same cycle.  However, a value of 1 gives\n@@ -121,17 +122,22 @@\n        (eq_attr \"type\" \"load,prefetch\"))\n   \"sb1_ls0 | sb1_ls1\")\n \n+(define_insn_reservation \"ir_sb1a_load\" 0\n+  (and (eq_attr \"cpu\" \"sb1a\")\n+       (eq_attr \"type\" \"load,prefetch\"))\n+  \"sb1_ls0 | sb1_ls1\")\n+\n ;; Can not co-issue fpload with fp exe when in 32-bit mode.\n \n (define_insn_reservation \"ir_sb1_fpload\" 0\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpload\")\n \t    (ne (symbol_ref \"TARGET_FLOAT64\")\n \t\t(const_int 0))))\n   \"sb1_ls0 | sb1_ls1\")\n \n (define_insn_reservation \"ir_sb1_fpload_32bitfp\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpload\")\n \t    (eq (symbol_ref \"TARGET_FLOAT64\")\n \t\t(const_int 0))))\n@@ -140,14 +146,14 @@\n ;; Indexed loads can only execute on LS1 pipe.\n \n (define_insn_reservation \"ir_sb1_fpidxload\" 0\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpidxload\")\n \t    (ne (symbol_ref \"TARGET_FLOAT64\")\n \t\t(const_int 0))))\n   \"sb1_ls1\")\n \n (define_insn_reservation \"ir_sb1_fpidxload_32bitfp\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpidxload\")\n \t    (eq (symbol_ref \"TARGET_FLOAT64\")\n \t\t(const_int 0))))\n@@ -156,27 +162,27 @@\n ;; prefx can only execute on the ls1 pipe.\n \n (define_insn_reservation \"ir_sb1_prefetchx\" 0\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"prefetchx\"))\n   \"sb1_ls1\")\n \n ;; ??? There is a 4.5 cycle latency if a store is followed by a load, and\n ;; there is a RAW dependency.\n \n (define_insn_reservation \"ir_sb1_store\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"store\"))\n   \"sb1_ls0+sb1_ex1 | sb1_ls0+sb1_ex0 | sb1_ls1+sb1_ex1 | sb1_ls1+sb1_ex0\")\n \n (define_insn_reservation \"ir_sb1_fpstore\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"fpstore\"))\n   \"sb1_ls0+sb1_fp1 | sb1_ls0+sb1_fp0 | sb1_ls1+sb1_fp1 | sb1_ls1+sb1_fp0\")\n \n ;; Indexed stores can only execute on LS1 pipe.\n \n (define_insn_reservation \"ir_sb1_fpidxstore\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"fpidxstore\"))\n   \"sb1_ls1+sb1_fp1 | sb1_ls1+sb1_fp0\")\n \n@@ -188,18 +194,18 @@\n ;; be an address dependence.\n \n (define_bypass 3\n-  \"ir_sb1_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,ir_sb1_fpidxload,\n-   ir_sb1_fpidxload_32bitfp\"\n-  \"ir_sb1_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,ir_sb1_fpidxload,\n-   ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n+  \"ir_sb1_load,ir_sb1a_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,\n+   ir_sb1_fpidxload,ir_sb1_fpidxload_32bitfp\"\n+  \"ir_sb1_load,ir_sb1a_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,\n+   ir_sb1_fpidxload,ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n \n (define_bypass 3\n-  \"ir_sb1_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,ir_sb1_fpidxload,\n-   ir_sb1_fpidxload_32bitfp\"\n+  \"ir_sb1_load,ir_sb1a_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,\n+   ir_sb1_fpidxload,ir_sb1_fpidxload_32bitfp\"\n   \"ir_sb1_store,ir_sb1_fpstore,ir_sb1_fpidxstore\"\n-  \"store_data_bypass_p\")\n+  \"mips_store_data_bypass_p\")\n \n-;; Simple alu instructions can execute on the LS1 unit.\n+;; On SB-1, simple alu instructions can execute on the LS1 unit.\n \n ;; ??? A simple alu insn issued on an LS unit has 0 cycle latency to an EX\n ;; insn, to a store (for data), and to an xfer insn.  It has 1 cycle latency to\n@@ -233,18 +239,26 @@\n        (eq_attr \"type\" \"const,arith\"))\n   \"sb1_ls1 | sb1_ex1 | sb1_ex0\")\n \n+;; On SB-1A, simple alu instructions can not execute on the LS1 unit, and we\n+;; have none of the above problems.\n+\n+(define_insn_reservation \"ir_sb1a_simple_alu\" 1\n+  (and (eq_attr \"cpu\" \"sb1a\")\n+       (eq_attr \"type\" \"const,arith\"))\n+  \"sb1_ex1 | sb1_ex0\")\n+\n ;; ??? condmove also includes some FP instructions that execute on the FP\n ;; units.  This needs to be clarified.\n \n (define_insn_reservation \"ir_sb1_alu\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"condmove,nop,shift\"))\n   \"sb1_ex1 | sb1_ex0\")\n \n ;; These are type arith/darith that only execute on the EX0 unit.\n \n (define_insn_reservation \"ir_sb1_alu_0\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"slt,clz,trap\"))\n   \"sb1_ex0\")\n \n@@ -255,33 +269,33 @@\n ;; be an address dependence.\n \n (define_bypass 5\n-  \"ir_sb1_alu,ir_sb1_alu_0,ir_sb1_mfhi,ir_sb1_mflo\"\n-  \"ir_sb1_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,ir_sb1_fpidxload,\n-   ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n+  \"ir_sb1a_simple_alu,ir_sb1_alu,ir_sb1_alu_0,ir_sb1_mfhi,ir_sb1_mflo\"\n+  \"ir_sb1_load,ir_sb1a_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,\n+   ir_sb1_fpidxload,ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n \n (define_bypass 5\n-  \"ir_sb1_alu,ir_sb1_alu_0,ir_sb1_mfhi,ir_sb1_mflo\"\n+  \"ir_sb1a_simple_alu,ir_sb1_alu,ir_sb1_alu_0,ir_sb1_mfhi,ir_sb1_mflo\"\n   \"ir_sb1_store,ir_sb1_fpstore,ir_sb1_fpidxstore\"\n-  \"store_data_bypass_p\")\n+  \"mips_store_data_bypass_p\")\n \n ;; mf{hi,lo} is 1 cycle.  \n \n (define_insn_reservation \"ir_sb1_mfhi\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"mfhilo\")\n \t    (not (match_operand 1 \"lo_operand\"))))\n   \"sb1_ex1\")\n \n (define_insn_reservation \"ir_sb1_mflo\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"mfhilo\")\n \t    (match_operand 1 \"lo_operand\")))\n   \"sb1_ex1\")\n \n ;; mt{hi,lo} to mul/div is 4 cycles.\n \n (define_insn_reservation \"ir_sb1_mthilo\" 4\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"mthilo\"))\n   \"sb1_ex1\")\n \n@@ -295,7 +309,7 @@\n ;; to/from hilo registers.\n \n (define_insn_reservation \"ir_sb1_mulsi\" 3\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"imul,imul3,imadd\")\n \t    (eq_attr \"mode\" \"SI\")))\n   \"sb1_ex1+sb1_mul\")\n@@ -304,7 +318,7 @@\n ;; Blocks any other multiply insn issue for 1 cycle.\n \n (define_insn_reservation \"ir_sb1_muldi\" 4\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"imul,imul3\")\n \t    (eq_attr \"mode\" \"DI\")))\n   \"sb1_ex1+sb1_mul, sb1_mul\")\n@@ -320,13 +334,13 @@\n \n (define_bypass 7\n   \"ir_sb1_mulsi,ir_sb1_muldi\"\n-  \"ir_sb1_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,ir_sb1_fpidxload,\n-   ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n+  \"ir_sb1_load,ir_sb1a_load,ir_sb1_fpload,ir_sb1_fpload_32bitfp,\n+   ir_sb1_fpidxload,ir_sb1_fpidxload_32bitfp,ir_sb1_prefetchx\")\n \n (define_bypass 7\n   \"ir_sb1_mulsi,ir_sb1_muldi\"\n   \"ir_sb1_store,ir_sb1_fpstore,ir_sb1_fpidxstore\"\n-  \"store_data_bypass_p\")\n+  \"mips_store_data_bypass_p\")\n \n ;; The divide unit is not pipelined.  Divide busy is asserted in the 4th\n ;; cycle, and then deasserted on the latency cycle.  So only one divide at\n@@ -340,37 +354,37 @@\n ;; stall for 33 cycles.  This does not seem significant enough to worry about.\n \n (define_insn_reservation \"ir_sb1_divsi\" 36\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"idiv\")\n \t    (eq_attr \"mode\" \"SI\")))\n   \"sb1_ex1, nothing*3, sb1_div*32\")\n \n (define_insn_reservation \"ir_sb1_divdi\" 68\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"idiv\")\n \t    (eq_attr \"mode\" \"DI\")))\n   \"sb1_ex1, nothing*3, sb1_div*64\")\n \n (define_insn_reservation \"ir_sb1_fpu_2pipes\" 4\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fmove,fadd,fmul,fabs,fneg,fcvt,frdiv1,frsqrt1\")\n \t    (eq_attr \"sb1_fp_pipes\" \"two\")))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_fpu_1pipe\" 4\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fmove,fadd,fmul,fabs,fneg,fcvt,frdiv1,frsqrt1\")\n \t    (eq_attr \"sb1_fp_pipes\" \"one\")))\n   \"sb1_fp1\")\n \n (define_insn_reservation \"ir_sb1_fpu_step2_2pipes\" 8\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv2,frsqrt2\")\n \t    (eq_attr \"sb1_fp_pipes\" \"two\")))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_fpu_step2_1pipe\" 8\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv2,frsqrt2\")\n \t    (eq_attr \"sb1_fp_pipes\" \"one\")))\n   \"sb1_fp1\")\n@@ -381,34 +395,34 @@\n ;; ??? Blocks issue of another non-madd/msub after 4 cycles.\n \n (define_insn_reservation \"ir_sb1_fmadd_2pipes\" 8\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fmadd\")\n \t    (eq_attr \"sb1_fp_pipes\" \"two\")))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_fmadd_1pipe\" 8\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fmadd\")\n \t    (eq_attr \"sb1_fp_pipes\" \"one\")))\n   \"sb1_fp1\")\n \n (define_insn_reservation \"ir_sb1_fcmp\" 4\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (eq_attr \"type\" \"fcmp\"))\n   \"sb1_fp1\")\n \n ;; mtc1 latency 5 cycles.\n \n (define_insn_reservation \"ir_sb1_mtxfer\" 5\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"xfer\")\n \t    (match_operand 0 \"fpr_operand\")))\n   \"sb1_fp0\")\n \n ;; mfc1 latency 1 cycle.  \n \n (define_insn_reservation \"ir_sb1_mfxfer\" 1\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"xfer\")\n \t    (not (match_operand 0 \"fpr_operand\"))))\n   \"sb1_fp0\")\n@@ -417,14 +431,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_divsf_2pipes\" 24\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_divsf_1pipe\" 24\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -434,14 +448,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_divdf_2pipes\" 32\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_divdf_1pipe\" 32\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -451,14 +465,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_recipsf_2pipes\" 12\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_recipsf_1pipe\" 12\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -468,14 +482,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_recipdf_2pipes\" 20\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_recipdf_1pipe\" 20\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frdiv\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -485,14 +499,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_sqrtsf_2pipes\" 28\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_sqrtsf_1pipe\" 28\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -502,14 +516,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_sqrtdf_2pipes\" 40\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_sqrtdf_1pipe\" 40\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -519,14 +533,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_rsqrtsf_2pipes\" 16\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_rsqrtsf_1pipe\" 16\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (and (eq_attr \"mode\" \"SF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))\n@@ -536,14 +550,14 @@\n ;; restrictions.\n \n (define_insn_reservation \"ir_sb1_rsqrtdf_2pipes\" 28\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"two\"))))\n   \"sb1_fp1 | sb1_fp0\")\n \n (define_insn_reservation \"ir_sb1_rsqrtdf_1pipe\" 28\n-  (and (eq_attr \"cpu\" \"sb1\")\n+  (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"frsqrt\")\n \t    (and (eq_attr \"mode\" \"DF\")\n \t\t (eq_attr \"sb1_fp_pipes\" \"one\"))))"}]}