{"sha": "df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwMDNkMWUwYmYyZDBhOGUyZWQ0NWEzMjNkNGU5NzRiMTVkYzk1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-02T21:45:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-02T21:46:48Z"}, "message": "libbacktrace: pass -1 to error callback for unrecognized DWARF\n\n\tPR libbacktrace/98818\n\t* dwarf.c (dwarf_buf_error): Add errnum parameter.  Change all\n\tcallers.\n\t* backtrace.h: Update backtrace_error_callback comment.", "tree": {"sha": "43c1f8e66ad1ce5f903ec9b471f7f529f2f2c8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c1f8e66ad1ce5f903ec9b471f7f529f2f2c8f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fbacdd10305654b1d10f887fa3f4677f9b8f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fbacdd10305654b1d10f887fa3f4677f9b8f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fbacdd10305654b1d10f887fa3f4677f9b8f34"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "caaa66d368659d304e70e1ab93c49bc0c28383a1", "filename": "libbacktrace/backtrace.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f/libbacktrace%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f/libbacktrace%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fbacktrace.h?ref=df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "patch": "@@ -71,13 +71,14 @@ struct backtrace_state;\n    invalid after this function returns.\n \n    As a special case, the ERRNUM argument will be passed as -1 if no\n-   debug info can be found for the executable, but the function\n-   requires debug info (e.g., backtrace_full, backtrace_pcinfo).  The\n-   MSG in this case will be something along the lines of \"no debug\n-   info\".  Similarly, ERRNUM will be passed as -1 if there is no\n-   symbol table, but the function requires a symbol table (e.g.,\n-   backtrace_syminfo).  This may be used as a signal that some other\n-   approach should be tried.  */\n+   debug info can be found for the executable, or if the debug info\n+   exists but has an unsupported version, but the function requires\n+   debug info (e.g., backtrace_full, backtrace_pcinfo).  The MSG in\n+   this case will be something along the lines of \"no debug info\".\n+   Similarly, ERRNUM will be passed as -1 if there is no symbol table,\n+   but the function requires a symbol table (e.g., backtrace_syminfo).\n+   This may be used as a signal that some other approach should be\n+   tried.  */\n \n typedef void (*backtrace_error_callback) (void *data, const char *msg,\n \t\t\t\t\t  int errnum);"}, {"sha": "546b4b26a3202642465a9fdc5e74c8af15ad65f8", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "patch": "@@ -410,13 +410,13 @@ struct dwarf_data\n /* Report an error for a DWARF buffer.  */\n \n static void\n-dwarf_buf_error (struct dwarf_buf *buf, const char *msg)\n+dwarf_buf_error (struct dwarf_buf *buf, const char *msg, int errnum)\n {\n   char b[200];\n \n   snprintf (b, sizeof b, \"%s in %s at %d\",\n \t    msg, buf->name, (int) (buf->buf - buf->start));\n-  buf->error_callback (buf->data, b, 0);\n+  buf->error_callback (buf->data, b, errnum);\n }\n \n /* Require at least COUNT bytes in BUF.  Return 1 if all is well, 0 on\n@@ -430,7 +430,7 @@ require (struct dwarf_buf *buf, size_t count)\n \n   if (!buf->reported_underflow)\n     {\n-      dwarf_buf_error (buf, \"DWARF underflow\");\n+      dwarf_buf_error (buf, \"DWARF underflow\", 0);\n       buf->reported_underflow = 1;\n     }\n \n@@ -592,7 +592,7 @@ read_address (struct dwarf_buf *buf, int addrsize)\n     case 8:\n       return read_uint64 (buf);\n     default:\n-      dwarf_buf_error (buf, \"unrecognized address size\");\n+      dwarf_buf_error (buf, \"unrecognized address size\", 0);\n       return 0;\n     }\n }\n@@ -643,7 +643,7 @@ read_uleb128 (struct dwarf_buf *buf)\n \tret |= ((uint64_t) (b & 0x7f)) << shift;\n       else if (!overflow)\n \t{\n-\t  dwarf_buf_error (buf, \"LEB128 overflows uint64_t\");\n+\t  dwarf_buf_error (buf, \"LEB128 overflows uint64_t\", 0);\n \t  overflow = 1;\n \t}\n       shift += 7;\n@@ -678,7 +678,7 @@ read_sleb128 (struct dwarf_buf *buf)\n \tval |= ((uint64_t) (b & 0x7f)) << shift;\n       else if (!overflow)\n \t{\n-\t  dwarf_buf_error (buf, \"signed LEB128 overflows uint64_t\");\n+\t  dwarf_buf_error (buf, \"signed LEB128 overflows uint64_t\", 0);\n \t  overflow = 1;\n \t}\n       shift += 7;\n@@ -818,7 +818,7 @@ read_attribute (enum dwarf_form form, uint64_t implicit_val,\n \toffset = read_offset (buf, is_dwarf64);\n \tif (offset >= dwarf_sections->size[DEBUG_STR])\n \t  {\n-\t    dwarf_buf_error (buf, \"DW_FORM_strp out of range\");\n+\t    dwarf_buf_error (buf, \"DW_FORM_strp out of range\", 0);\n \t    return 0;\n \t  }\n \tval->encoding = ATTR_VAL_STRING;\n@@ -833,7 +833,7 @@ read_attribute (enum dwarf_form form, uint64_t implicit_val,\n \toffset = read_offset (buf, is_dwarf64);\n \tif (offset >= dwarf_sections->size[DEBUG_LINE_STR])\n \t  {\n-\t    dwarf_buf_error (buf, \"DW_FORM_line_strp out of range\");\n+\t    dwarf_buf_error (buf, \"DW_FORM_line_strp out of range\", 0);\n \t    return 0;\n \t  }\n \tval->encoding = ATTR_VAL_STRING;\n@@ -880,7 +880,8 @@ read_attribute (enum dwarf_form form, uint64_t implicit_val,\n \tif (form == DW_FORM_implicit_const)\n \t  {\n \t    dwarf_buf_error (buf,\n-\t\t\t     \"DW_FORM_indirect to DW_FORM_implicit_const\");\n+\t\t\t     \"DW_FORM_indirect to DW_FORM_implicit_const\",\n+\t\t\t     0);\n \t    return 0;\n \t  }\n \treturn read_attribute ((enum dwarf_form) form, 0, buf, is_dwarf64,\n@@ -1013,7 +1014,7 @@ read_attribute (enum dwarf_form form, uint64_t implicit_val,\n \t  }\n \tif (offset >= altlink->dwarf_sections.size[DEBUG_STR])\n \t  {\n-\t    dwarf_buf_error (buf, \"DW_FORM_strp_sup out of range\");\n+\t    dwarf_buf_error (buf, \"DW_FORM_strp_sup out of range\", 0);\n \t    return 0;\n \t  }\n \tval->encoding = ATTR_VAL_STRING;\n@@ -1022,7 +1023,7 @@ read_attribute (enum dwarf_form form, uint64_t implicit_val,\n \treturn 1;\n       }\n     default:\n-      dwarf_buf_error (buf, \"unrecognized DWARF form\");\n+      dwarf_buf_error (buf, \"unrecognized DWARF form\", -1);\n       return 0;\n     }\n }\n@@ -1071,7 +1072,9 @@ resolve_string (const struct dwarf_sections *dwarf_sections, int is_dwarf64,\n \toffset = read_offset (&offset_buf, is_dwarf64);\n \tif (offset >= dwarf_sections->size[DEBUG_STR])\n \t  {\n-\t    dwarf_buf_error (&offset_buf, \"DW_FORM_strx offset out of range\");\n+\t    dwarf_buf_error (&offset_buf,\n+\t\t\t     \"DW_FORM_strx offset out of range\",\n+\t\t\t     0);\n \t    return 0;\n \t  }\n \t*string = (const char *) dwarf_sections->data[DEBUG_STR] + offset;\n@@ -1879,7 +1882,7 @@ add_ranges_from_rnglists (\n \t  break;\n \n \tdefault:\n-\t  dwarf_buf_error (&rnglists_buf, \"unrecognized DW_RLE value\");\n+\t  dwarf_buf_error (&rnglists_buf, \"unrecognized DW_RLE value\", -1);\n \t  return 0;\n \t}\n     }\n@@ -2146,7 +2149,7 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       version = read_uint16 (&unit_buf);\n       if (version < 2 || version > 5)\n \t{\n-\t  dwarf_buf_error (&unit_buf, \"unrecognized DWARF version\");\n+\t  dwarf_buf_error (&unit_buf, \"unrecognized DWARF version\", -1);\n \t  goto fail;\n \t}\n \n@@ -2425,7 +2428,8 @@ read_v2_paths (struct backtrace_state *state, struct unit *u,\n \t    {\n \t      dwarf_buf_error (hdr_buf,\n \t\t\t       (\"invalid directory index in \"\n-\t\t\t\t\"line number program header\"));\n+\t\t\t\t\"line number program header\"),\n+\t\t\t       0);\n \t      return 0;\n \t    }\n \t  dir_len = strlen (dir);\n@@ -2494,7 +2498,8 @@ read_lnct (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t{\n \t\t  dwarf_buf_error (hdr_buf,\n \t\t\t\t   (\"invalid directory index in \"\n-\t\t\t\t    \"line number program header\"));\n+\t\t\t\t    \"line number program header\"),\n+\t\t\t\t   0);\n \t\t  return 0;\n \t\t}\n \t      dir = hdr->dirs[val.u.uint];\n@@ -2509,7 +2514,8 @@ read_lnct (struct backtrace_state *state, struct dwarf_data *ddata,\n   if (path == NULL)\n     {\n       dwarf_buf_error (hdr_buf,\n-\t\t       \"missing file name in line number program header\");\n+\t\t       \"missing file name in line number program header\",\n+\t\t       0);\n       return 0;\n     }\n \n@@ -2636,7 +2642,7 @@ read_line_header (struct backtrace_state *state, struct dwarf_data *ddata,\n   hdr->version = read_uint16 (line_buf);\n   if (hdr->version < 2 || hdr->version > 5)\n     {\n-      dwarf_buf_error (line_buf, \"unsupported line number version\");\n+      dwarf_buf_error (line_buf, \"unsupported line number version\", -1);\n       return 0;\n     }\n \n@@ -2650,7 +2656,8 @@ read_line_header (struct backtrace_state *state, struct dwarf_data *ddata,\n       if (read_byte (line_buf) != 0)\n \t{\n \t  dwarf_buf_error (line_buf,\n-\t\t\t   \"non-zero segment_selector_size not supported\");\n+\t\t\t   \"non-zero segment_selector_size not supported\",\n+\t\t\t   -1);\n \t  return 0;\n \t}\n     }\n@@ -2791,7 +2798,8 @@ read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t      {\n \t\t\tdwarf_buf_error (line_buf,\n \t\t\t\t\t (\"invalid directory index \"\n-\t\t\t\t\t  \"in line number program\"));\n+\t\t\t\t\t  \"in line number program\"),\n+\t\t\t\t\t 0);\n \t\t\treturn 0;\n \t\t      }\n \t\t    dir_len = strlen (dir);\n@@ -2857,7 +2865,8 @@ read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t      {\n \t\t\tdwarf_buf_error (line_buf,\n \t\t\t\t\t (\"invalid file number in \"\n-\t\t\t\t\t  \"line number program\"));\n+\t\t\t\t\t  \"line number program\"),\n+\t\t\t\t\t 0);\n \t\t\treturn 0;\n \t\t      }\n \t\t    filename = hdr->filenames[fileno];\n@@ -3092,7 +3101,9 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n   code = read_uleb128 (&unit_buf);\n   if (code == 0)\n     {\n-      dwarf_buf_error (&unit_buf, \"invalid abstract origin or specification\");\n+      dwarf_buf_error (&unit_buf,\n+\t\t       \"invalid abstract origin or specification\",\n+\t\t       0);\n       return NULL;\n     }\n \n@@ -3295,7 +3306,8 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t\t    {\n \t\t\t      dwarf_buf_error (unit_buf,\n \t\t\t\t\t       (\"invalid file number in \"\n-\t\t\t\t\t\t\"DW_AT_call_file attribute\"));\n+\t\t\t\t\t\t\"DW_AT_call_file attribute\"),\n+\t\t\t\t\t       0);\n \t\t\t      return 0;\n \t\t\t    }\n \t\t\t  function->caller_filename ="}]}