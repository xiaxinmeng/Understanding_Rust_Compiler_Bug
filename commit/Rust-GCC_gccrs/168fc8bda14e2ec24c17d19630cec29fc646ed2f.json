{"sha": "168fc8bda14e2ec24c17d19630cec29fc646ed2f", "node_id": "C_kwDOANBUbNoAKDE2OGZjOGJkYTE0ZTJlYzI0YzE3ZDE5NjMwY2VjMjlmYzY0NmVkMmY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-24T00:17:03Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-24T00:17:03Z"}, "message": "Daily bump.", "tree": {"sha": "527da2347ddf1e378c140f3f59e5ef9861426ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/527da2347ddf1e378c140f3f59e5ef9861426ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/168fc8bda14e2ec24c17d19630cec29fc646ed2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168fc8bda14e2ec24c17d19630cec29fc646ed2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168fc8bda14e2ec24c17d19630cec29fc646ed2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168fc8bda14e2ec24c17d19630cec29fc646ed2f/comments", "author": null, "committer": null, "parents": [{"sha": "f1a80c05db8b08e71741bae8170f9e77e94bfc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a80c05db8b08e71741bae8170f9e77e94bfc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a80c05db8b08e71741bae8170f9e77e94bfc35"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "2e912a790dc01329a606fef546132c2daca30ac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,155 @@\n+2022-05-23  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* config/riscv/predicates.md (const_0_operand): Remove\n+\tconst_double.\n+\t* config/riscv/riscv.cc (riscv_rtx_costs): Add check for\n+\tCONST_DOUBLE.\n+\t* config/riscv/riscv.h (TARGET_SUPPORTS_WIDE_INT): New define.\n+\n+2022-05-23  Mayshao  <mayshao-oc@zhaoxin.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_zhaoxin_cpu): Detect\n+\tthe specific type of Zhaoxin CPU, and return Zhaoxin CPU name.\n+\t(cpu_indicator_init): Handle Zhaoxin processors.\n+\t* common/config/i386/i386-common.cc: Add lujiazui.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_vendor): Add\n+\tVENDOR_ZHAOXIN.\n+\t(enum processor_types): Add ZHAOXIN_FAM7H.\n+\t(enum processor_subtypes): Add ZHAOXIN_FAM7H_LUJIAZUI.\n+\t* config.gcc: Add lujiazui.\n+\t* config/i386/cpuid.h (signature_SHANGHAI_ebx): Add\n+\tSignatures for zhaoxin\n+\t(signature_SHANGHAI_ecx): Ditto.\n+\t(signature_SHANGHAI_edx): Ditto.\n+\t* config/i386/driver-i386.cc (host_detect_local_cpu): Let\n+\t-march=native recognize lujiazui processors.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Add lujiazui.\n+\t* config/i386/i386-options.cc (m_LUJIAZUI): New_definition.\n+\t* config/i386/i386.h (enum processor_type): Ditto.\n+\t* config/i386/i386.md: Add lujiazui.\n+\t* config/i386/x86-tune-costs.h (struct processor_costs): Add\n+\tlujiazui costs.\n+\t* config/i386/x86-tune-sched.cc (ix86_issue_rate): Add lujiazui.\n+\t(ix86_adjust_cost): Ditto.\n+\t* config/i386/x86-tune.def (X86_TUNE_SCHEDULE): Add lujiazui Tunnings.\n+\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Ditto.\n+\t(X86_TUNE_MOVX): Ditto.\n+\t(X86_TUNE_MEMORY_MISMATCH_STALL): Ditto.\n+\t(X86_TUNE_FUSE_CMP_AND_BRANCH_32): Ditto.\n+\t(X86_TUNE_FUSE_CMP_AND_BRANCH_64): Ditto.\n+\t(X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS): Ditto.\n+\t(X86_TUNE_FUSE_ALU_AND_BRANCH): Ditto.\n+\t(X86_TUNE_ACCUMULATE_OUTGOING_ARGS): Ditto.\n+\t(X86_TUNE_USE_LEAVE): Ditto.\n+\t(X86_TUNE_PUSH_MEMORY): Ditto.\n+\t(X86_TUNE_LCP_STALL): Ditto.\n+\t(X86_TUNE_USE_INCDEC): Ditto.\n+\t(X86_TUNE_INTEGER_DFMODE_MOVES): Ditto.\n+\t(X86_TUNE_OPT_AGU): Ditto.\n+\t(X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB): Ditto.\n+\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Ditto.\n+\t(X86_TUNE_USE_SAHF): Ditto.\n+\t(X86_TUNE_USE_BT): Ditto.\n+\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Ditto.\n+\t(X86_TUNE_ONE_IF_CONV_INSN): Ditto.\n+\t(X86_TUNE_AVOID_MFENCE): Ditto.\n+\t(X86_TUNE_EXPAND_ABS): Ditto.\n+\t(X86_TUNE_USE_SIMODE_FIOP): Ditto.\n+\t(X86_TUNE_USE_FFREEP): Ditto.\n+\t(X86_TUNE_EXT_80387_CONSTANTS): Ditto.\n+\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Ditto.\n+\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Ditto.\n+\t(X86_TUNE_SSE_TYPELESS_STORES): Ditto.\n+\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Ditto.\n+\t* doc/extend.texi: Add details about lujiazui.\n+\t* doc/invoke.texi: Add details about lujiazui.\n+\t* config/i386/lujiazui.md: Introduce lujiazui cpu and include new md file.\n+\n+2022-05-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/tilepro/gen-mul-tables.cc (ARRAY_SIZE): Add new macro.\n+\n+2022-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.cc (forward_propagate_into_cond): Remove.\n+\t(pass_forwprop::execute): Do not propagate into COND_EXPR conditions.\n+\n+2022-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-expr.cc (is_gimple_condexpr): Remove.\n+\t* gimple-expr.h (is_gimple_condexpr): Likewise.\n+\t* gimplify.cc (gimplify_expr): Remove is_gimple_condexpr usage.\n+\t* tree-if-conv.cc (set_bb_predicate): Likewie.\n+\t(add_to_predicate_list): Likewise.\n+\t(gen_phi_arg_condition): Likewise.\n+\t(predicate_scalar_phi): Likewise.\n+\t(predicate_statements): Likewise.\n+\n+2022-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-expr.cc (is_gimple_condexpr): Equate to is_gimple_val.\n+\t* gimplify.cc (gimplify_pure_cond_expr): Gimplify the condition\n+\tas is_gimple_val.\n+\t* gimple-fold.cc (valid_gimple_rhs_p): Simplify.\n+\t* tree-cfg.cc (verify_gimple_assign_ternary): Likewise.\n+\t* gimple-loop-interchange.cc (loop_cand::undo_simple_reduction):\n+\tBuild the condition of the COND_EXPR separately.\n+\t* tree-ssa-loop-im.cc (move_computations_worker): Likewise.\n+\t* tree-vect-generic.cc (expand_vector_condition): Likewise.\n+\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n+\tLikewise.\n+\t* vr-values.cc (simplify_using_ranges::simplify): Likewise.\n+\t* tree-vect-patterns.cc: Add comment indicating we are\n+\tbuilding invalid COND_EXPRs and why.\n+\t* omp-expand.cc (expand_omp_simd): Gimplify the condition\n+\tto the COND_EXPR separately.\n+\t(expand_omp_atomic_cas): Note part that should be unreachable\n+\tnow.\n+\t* tree-ssa-forwprop.cc (forward_propagate_into_cond): Adjust\n+\tcondition for valid replacements.\n+\t* tree-if-conv.cc (predicate_bbs): Simulate previous\n+\tre-folding of the condition in folded COND_EXPRs which\n+\tis necessary because of unfolded GIMPLE_CONDs in the IL\n+\tas in for example gcc.dg/fold-bopcond-1.c.\n+\t* gimple-range-gori.cc (gori_compute::condexpr_adjust):\n+\tHandle that the comparison is now in the def stmt of\n+\tthe select operand.  Required by gcc.dg/pr104526.c.\n+\n+2022-05-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/104949\n+\t* langhooks-def.h (lhd_omp_array_size): New.\n+\t(LANG_HOOKS_OMP_ARRAY_SIZE): Define.\n+\t(LANG_HOOKS_DECLS): Add it.\n+\t* langhooks.cc (lhd_omp_array_size): New.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add hook.\n+\t* omp-low.cc (scan_sharing_clauses, lower_omp_target):\n+\tHandle GOMP_MAP_FIRSTPRIVATE for array descriptors.\n+\n+2022-05-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.cc (ix86_rtx_costs) <case AND>: Split from\n+\tXOR/IOR case.  Account for two instructions for double-word\n+\toperations.  In case of vector pandn, account for single\n+\tinstruction.  Likewise for integer andn with TARGET_BMI.\n+\t<case NOT>: Vector NOT requires more than 1 instruction (pxor).\n+\t<case NEG>: Double-word negation requires 3 instructions.\n+\n+2022-05-23  Tsukasa OI  <research_trasio@irq.a4lg.com>\n+\n+\t* common/config/riscv/riscv-common.cc (riscv_supported_std_ext):\n+\tFix \"K\" extension prefix to be placed before \"J\".\n+\t* config/riscv/arch-canonicalize: Likewise.\n+\n+2022-05-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/x86-tune-costs.h (skylake_cost): Increase gpr\n+\t<-> mask cost from 5 to 6.\n+\t(icelake_cost): Ditto.\n+\n 2022-05-20  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* config/aarch64/aarch64.md"}, {"sha": "7d93d3872a34f2fbb5392498d18eff667ceb2047", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1 +1 @@\n-20220523\n+20220524"}, {"sha": "6bceab882075db253af8c803378055fbcd68f1ac", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,14 @@\n+2022-05-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-info.cc: Add \"final\" and \"override\" to all vfunc\n+\timplementations that were missing them, as appropriate.\n+\t* engine.cc: Likewise.\n+\t* region-model.cc: Likewise.\n+\t* sm-malloc.cc: Likewise.\n+\t* supergraph.h: Likewise.\n+\t* svalue.cc: Likewise.\n+\t* varargs.cc: Likewise.\n+\n 2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer-pass.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with"}, {"sha": "dce150a570000d0bfe7a5415ab5f8271b2b4ffbf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,12 @@\n+2022-05-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/104949\n+\t* f95-lang.cc (LANG_HOOKS_OMP_ARRAY_SIZE): Redefine.\n+\t* trans-openmp.cc (gfc_omp_array_size): New.\n+\t(gfc_trans_omp_variable_list): Never turn has_device_addr\n+\tto firstprivate.\n+\t* trans.h (gfc_omp_array_size): New.\n+\n 2022-05-18  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (enum gfc_omp_depend_op): Add OMP_DEPEND_INOUTSET."}, {"sha": "0c424cda5ee3146a6156a926d985ec9295c170fb", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,8 @@\n+2022-05-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-recording.h: Add \"final\" and \"override\" to all vfunc\n+\timplementations that were missing them, as appropriate.\n+\n 2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit-playback.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with"}, {"sha": "c6b33deb5173fdfd1833460fa1f64a836730efeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,37 @@\n+2022-05-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104441\n+\t* gcc.target/i386/pr104441-1a.c (load8bit_4x4_avx2): Initialize\n+\tsrc23.\n+\n+2022-05-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c: Replace uses of \"FINAL\" and\n+\t\"OVERRIDE\" with \"final\" and \"override\".\n+\n+2022-05-23  Mayshao  <mayshao-oc@zhaoxin.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Test -arch=lujiauzi and -tune=lujiazui.\n+\t* g++.target/i386/mv32.C: Ditto.\n+\n+2022-05-23  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/mallign.c: Skip check if sizeof(word)==1.\n+\n+2022-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-27.c: Adjust.\n+\t* gcc.dg/gimplefe-45.c: Likewise.\n+\t* gcc.dg/pr101145-2.c: Likewise.\n+\t* gcc.dg/pr98211.c: Likewise.\n+\t* gcc.dg/torture/pr89595.c: Likewise.\n+\t* gcc.dg/tree-ssa/divide-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-lim-12.c: Likewise.\n+\n+2022-05-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/spill_to_mask-1.c: New test.\n+\n 2022-05-21  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* gcc.dg/tree-ssa/gen-vect-11.c: For PRU target, skip the"}, {"sha": "2671ad8861544e9cfd88d27506b978c031b45341", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,7 @@\n+2022-05-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* demangle.h (enum demangle_component_type): Add module components.\n+\n 2022-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* cuda/cuda.h (enum CUjit_option): Add"}, {"sha": "3b61d22d6db249759bb32aa6950284c1986cfda1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,12 @@\n+2022-05-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/104949\n+\t* target.c (gomp_map_vars_internal, copy_firstprivate_data):\n+\tSupport attach for GOMP_MAP_FIRSTPRIVATE.\n+\t* testsuite/libgomp.fortran/target-firstprivate-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-firstprivate-2.f90: New test.\n+\t* testsuite/libgomp.fortran/target-firstprivate-3.f90: New test.\n+\n 2022-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* libgomp.map: Added omp_target_memcpy_async and"}, {"sha": "7d07c0befa29708ef2cb775a16b17f14dc1fc7fe", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/168fc8bda14e2ec24c17d19630cec29fc646ed2f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/168fc8bda14e2ec24c17d19630cec29fc646ed2f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=168fc8bda14e2ec24c17d19630cec29fc646ed2f", "patch": "@@ -1,3 +1,14 @@\n+2022-05-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (d_make_comp): Adjust.\n+\t(d_name, d_prefix): Adjust subst handling. Add module handling.\n+\t(d_maybe_module_name): New.\n+\t(d_unqualified_name): Add incoming module parm. Handle it.  Adjust all callers.\n+\t(d_special_name): Add 'GI' support.\n+\t(d_count_template_scopes): Adjust.\n+\t(d_print_comp_inner): Print module.\n+\t* testsuite/demangle-expected: New test cases\n+\n 2022-05-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-demangle.c (d_name): Add SUBSTABLE parameter,"}]}