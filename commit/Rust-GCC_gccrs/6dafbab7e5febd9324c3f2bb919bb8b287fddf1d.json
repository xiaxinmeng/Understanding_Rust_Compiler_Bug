{"sha": "6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhZmJhYjdlNWZlYmQ5MzI0YzNmMmJiOTE5YmI4YjI4N2ZkZGYxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-11-28T18:58:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-11-28T18:58:19Z"}, "message": "2001-11-28  Paolo Carlini <pcarlini@unitus.it>\n\t    Loren J. Rittle <ljrittle@acm.org>\n\n\t* include/bits/basic_string.h\n\t(basic_string::_Rep::__default_excess, _S_excess_slop):\n\tUnused, remove.\n\t* include/bits/basic_string.tcc: Remove dead code.\n\t* include/bits/c++config: Remove comment.\n\nCo-Authored-By: Loren J. Rittle <ljrittle@acm.org>\n\nFrom-SVN: r47425", "tree": {"sha": "5cbda0a09856b7a120631ece4e192384a7596b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cbda0a09856b7a120631ece4e192384a7596b86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/comments", "author": null, "committer": null, "parents": [{"sha": "391f61d92883e54552f566538e93330049ee27b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391f61d92883e54552f566538e93330049ee27b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391f61d92883e54552f566538e93330049ee27b6"}], "stats": {"total": 49, "additions": 9, "deletions": 40}, "files": [{"sha": "c381c9eaa28d3ffa0d2158826b966e21ebc67a06", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "patch": "@@ -1,3 +1,12 @@\n+2001-11-28  Paolo Carlini <pcarlini@unitus.it>\n+\t    Loren J. Rittle <ljrittle@acm.org>\n+\n+\t* include/bits/basic_string.h\n+\t(basic_string::_Rep::__default_excess, _S_excess_slop):\n+\tUnused, remove.\n+\t* include/bits/basic_string.tcc: Remove dead code.\n+\t* include/bits/c++config: Remove comment.\n+\n 2001-11-28  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "8c5caff788a94e70b52d30db114642d664c29549", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "patch": "@@ -196,22 +196,6 @@ namespace std\n \n \t_CharT* \n \t_M_clone(const _Alloc&, size_type __res = 0);\n-\n-#if _GLIBCPP_ALLOC_CONTROL\n-\t// These function pointers allow you to modify the allocation\n-\t// policy used by the string classes.  By default they expand by\n-\t// powers of two, but this may be excessive for space-critical\n-\t// applications.\n-\t\n-\t// Returns true if ALLOCATED is too much larger than LENGTH\n-\tstatic bool (*_S_excess_slop) (size_t __length, size_t __allocated);\n-\n-\tinline static bool \n-\t__default_excess(size_t, size_t);\n-#else\n-\tinline static bool \n-\t_S_excess_slop(size_t, size_t);\n-#endif\n       };\n \n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html"}, {"sha": "eeaa20aadefdde9789b9cd4efad3cca5fe98d904", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "patch": "@@ -349,13 +349,6 @@ namespace std\n \t}\n     }\n \n-#ifdef _GLIBCPP_ALLOC_CONTROL\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    bool (*basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_excess_slop) \n-    (size_t, size_t) = \n-    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_default_excess;\n-#endif\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::_Rep*\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n@@ -452,19 +445,6 @@ namespace std\n       return __r->_M_refdata();\n     }\n   \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-  inline bool\n-#ifdef _GLIBCPP_ALLOC_CONTROL\n-    basic_string<_CharT, _Traits, _Alloc>::_Rep::\n-    _S_default_excess(size_t __s, size_t __r)\n-#else\n-    basic_string<_CharT, _Traits, _Alloc>::_Rep::\n-    _S_excess_slop(size_t __s, size_t __r)\n-#endif\n-    {\n-      return 2 * (__s <= 16 ? 16 : __s) < __r;\n-    }\n-  \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)"}, {"sha": "2ddcabcb954c03e0aee7c27fc873d386f9440469", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dafbab7e5febd9324c3f2bb919bb8b287fddf1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=6dafbab7e5febd9324c3f2bb919bb8b287fddf1d", "patch": "@@ -55,10 +55,6 @@\n // Use corrected code from the committee library group's issues list.\n #define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n-// Define this to permit user-level control of the expansion of string\n-// buffers (via a fn pointer), see basic_string.* for more.\n-//#define _GLIBCPP_ALLOC_CONTROL\n-\n // Map gthr.h abstraction to that required for STL.  Do not key off of\n // __GTHREADS at this point since we haven't seen the correct symbol\n // yet, instead setup so that include/bits/stl_threads.h will know to"}]}