{"sha": "8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "node_id": "C_kwDOANBUbNoAKDhlNDMzOWY1MDIzMjg2ZDI1YzdkZmE0MGI0Yzg4ZTYzYjc4MGNmZDc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-07T02:20:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-07T03:25:56Z"}, "message": "c++: nested generic lambda in DMI [PR101717]\n\nWe were already checking COMPLETE_TYPE_P to recognize instantiation of a\ngeneric lambda, but didn't consider that we might be nested in a non-generic\nlambda.\n\n\tPR c++/101717\n\ngcc/cp/ChangeLog:\n\n\t* lambda.cc (lambda_expr_this_capture): Check all enclosing\n\tlambdas for completeness.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/lambda-generic-this4.C: New test.", "tree": {"sha": "c8eb6556a57a41b2430b41f4b8c9e8d0478b4ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8eb6556a57a41b2430b41f4b8c9e8d0478b4ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4339f5023286d25c7dfa40b4c88e63b780cfd7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dda1094a7c195398c3f2b31519f427ac7d97956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda1094a7c195398c3f2b31519f427ac7d97956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dda1094a7c195398c3f2b31519f427ac7d97956"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "f22798d51e8e17d2aa5a2d76499f16dac4d490b3", "filename": "gcc/cp/lambda.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4339f5023286d25c7dfa40b4c88e63b780cfd7/gcc%2Fcp%2Flambda.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4339f5023286d25c7dfa40b4c88e63b780cfd7/gcc%2Fcp%2Flambda.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.cc?ref=8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "patch": "@@ -741,6 +741,7 @@ lambda_expr_this_capture (tree lambda, int add_capture_p)\n     {\n       tree lambda_stack = NULL_TREE;\n       tree init = NULL_TREE;\n+      bool saw_complete = false;\n \n       /* If we are in a lambda function, we can move out until we hit:\n            1. a non-lambda function or NSDMI,\n@@ -759,6 +760,11 @@ lambda_expr_this_capture (tree lambda, int add_capture_p)\n \t\t\t\t      lambda_stack);\n \n \t  tree closure = LAMBDA_EXPR_CLOSURE (tlambda);\n+\t  if (COMPLETE_TYPE_P (closure))\n+\t    /* We're instantiating a generic lambda op(), the containing\n+\t       scope may be gone.  */\n+\t    saw_complete = true;\n+\n \t  tree containing_function\n \t    = decl_function_context (TYPE_NAME (closure));\n \n@@ -768,7 +774,7 @@ lambda_expr_this_capture (tree lambda, int add_capture_p)\n \t      /* Lambda in an NSDMI.  We don't have a function to look up\n \t\t 'this' in, but we can find (or rebuild) the fake one from\n \t\t inject_this_parameter.  */\n-\t      if (!containing_function && !COMPLETE_TYPE_P (closure))\n+\t      if (!containing_function && !saw_complete)\n \t\t/* If we're parsing a lambda in a non-local class,\n \t\t   we can find the fake 'this' in scope_chain.  */\n \t\tinit = scope_chain->x_current_class_ptr;"}, {"sha": "38d582bec5e9e76bcf1dab52da4e1c1db998e627", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-this4.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4339f5023286d25c7dfa40b4c88e63b780cfd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4339f5023286d25c7dfa40b4c88e63b780cfd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this4.C?ref=8e4339f5023286d25c7dfa40b4c88e63b780cfd7", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/101717\n+// { dg-do compile { target c++14 } }\n+\n+struct x {\n+  static void f() { }\n+  void (*_)() = [] { [=](auto) { f(); }(0); };\n+};"}]}