{"sha": "13b457e7e0d79ec4b1897fa270e06a209e3a9802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiNDU3ZTdlMGQ3OWVjNGIxODk3ZmEyNzBlMDZhMjA5ZTNhOTgwMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-20T21:58:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-20T21:58:21Z"}, "message": "(output_constructor): Add support for non-zero lower array bound.\n\nFrom-SVN: r5836", "tree": {"sha": "1528a10c190ec8605a37c0082987ef584b45ef58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1528a10c190ec8605a37c0082987ef584b45ef58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b457e7e0d79ec4b1897fa270e06a209e3a9802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b457e7e0d79ec4b1897fa270e06a209e3a9802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b457e7e0d79ec4b1897fa270e06a209e3a9802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b457e7e0d79ec4b1897fa270e06a209e3a9802/comments", "author": null, "committer": null, "parents": [{"sha": "7c314719ba9e1607b7638524184d1aad7fd85944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c314719ba9e1607b7638524184d1aad7fd85944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c314719ba9e1607b7638524184d1aad7fd85944"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "497d3a55a5f4a73f32c37455aa2d1ee3dd82c4a8", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b457e7e0d79ec4b1897fa270e06a209e3a9802/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b457e7e0d79ec4b1897fa270e06a209e3a9802/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=13b457e7e0d79ec4b1897fa270e06a209e3a9802", "patch": "@@ -3401,6 +3401,7 @@ output_constructor (exp, size)\n      int size;\n {\n   register tree link, field = 0;\n+  HOST_WIDE_INT min_index = 0;\n   /* Number of bytes output or skipped so far.\n      In other words, current position within the constructor.  */\n   int total_bytes = 0;\n@@ -3414,6 +3415,10 @@ output_constructor (exp, size)\n   if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n     field = TYPE_FIELDS (TREE_TYPE (exp));\n \n+  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+    min_index\n+      = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (exp))));\n+\n   /* As LINK goes through the elements of the constant,\n      FIELD goes through the structure fields, if the constant is a structure.\n      if the constant is a union, then we override this,\n@@ -3457,7 +3462,7 @@ output_constructor (exp, size)\n \t  if (index != 0)\n \t    bitpos = (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (val)))\n \t\t      / BITS_PER_UNIT\n-\t\t      * TREE_INT_CST_LOW (index));\n+\t\t      * (TREE_INT_CST_LOW (index) - min_index));\n \n \t  /* Output any buffered-up bit-fields preceding this element.  */\n \t  if (byte_buffer_in_use)"}]}