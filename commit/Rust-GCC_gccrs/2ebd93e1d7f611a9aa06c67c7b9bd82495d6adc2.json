{"sha": "2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViZDkzZTFkN2Y2MTFhOWFhMDZjNjdjN2I5YmQ4MjQ5NWQ2YWRjMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-01-20T12:02:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-01-20T12:02:50Z"}, "message": "re PR c/64279 (Warning missing for \"(cond) ? A : A\" / if(cond) expr1; else expr1; // same expression in if and else branch)\n\n\tPR c/64279\n\t* c-common.h (do_warn_duplicated_branches_r): Declare.\n\t* c-gimplify.c (c_genericize): Walk the function tree calling\n\tdo_warn_duplicated_branches_r.\n\t* c-warn.c (expr_from_macro_expansion_r): New.\n\t(do_warn_duplicated_branches): New.\n\t(do_warn_duplicated_branches_r): New.\n\t* c.opt (Wduplicated-branches): New option.\n\n\t* c-typeck.c (build_conditional_expr): Warn about duplicated branches.\n\n\t* call.c (build_conditional_expr_1): Warn about duplicated branches.\n\t* semantics.c (finish_expr_stmt): Build statement using the proper\n\tlocation.\n\n\t* doc/invoke.texi: Document -Wduplicated-branches.\n\t* fold-const.c (operand_equal_p): Handle MODIFY_EXPR, INIT_EXPR,\n\tCOMPOUND_EXPR, PREDECREMENT_EXPR, PREINCREMENT_EXPR,\n\tPOSTDECREMENT_EXPR, POSTINCREMENT_EXPR, CLEANUP_POINT_EXPR, EXPR_STMT,\n\tSTATEMENT_LIST, and RETURN_EXPR.  For non-pure non-const functions\n\treturn 0 only when not OEP_LEXICOGRAPHIC.\n\t(fold_build_cleanup_point_expr): Use the expression\n\tlocation when building CLEANUP_POINT_EXPR.\n\t* tree-core.h (enum operand_equal_flag): Add OEP_LEXICOGRAPHIC.\n\t* tree.c (add_expr): Handle error_mark_node.\n\n\t* c-c++-common/Wduplicated-branches-1.c: New test.\n\t* c-c++-common/Wduplicated-branches-10.c: New test.\n\t* c-c++-common/Wduplicated-branches-11.c: New test.\n\t* c-c++-common/Wduplicated-branches-12.c: New test.\n\t* c-c++-common/Wduplicated-branches-2.c: New test.\n\t* c-c++-common/Wduplicated-branches-3.c: New test.\n\t* c-c++-common/Wduplicated-branches-4.c: New test.\n\t* c-c++-common/Wduplicated-branches-5.c: New test.\n\t* c-c++-common/Wduplicated-branches-6.c: New test.\n\t* c-c++-common/Wduplicated-branches-7.c: New test.\n\t* c-c++-common/Wduplicated-branches-8.c: New test.\n\t* c-c++-common/Wduplicated-branches-9.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Coalesce dg-warning.\n\t* g++.dg/cpp0x/lambda/lambda-switch.C: Move dg-warning.\n\t* g++.dg/ext/builtin-object-size3.C: Likewise.\n\t* g++.dg/gomp/loop-1.C: Likewise.\n\t* g++.dg/warn/Wduplicated-branches1.C: New test.\n\t* g++.dg/warn/Wduplicated-branches2.C: New test.\n\nFrom-SVN: r244705", "tree": {"sha": "39d4b3ac7435621b91ed6c263d0a91106c3b2153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d4b3ac7435621b91ed6c263d0a91106c3b2153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e9e35e127fe5d487d5be35dd740da9ec79595ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9e35e127fe5d487d5be35dd740da9ec79595ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9e35e127fe5d487d5be35dd740da9ec79595ff"}], "stats": {"total": 942, "additions": 925, "deletions": 17}, "files": [{"sha": "38eeb5a21b9af9ca23b2609a044f54c72b38bbee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1,3 +1,17 @@\n+2017-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64279\n+\t* doc/invoke.texi: Document -Wduplicated-branches.\n+\t* fold-const.c (operand_equal_p): Handle MODIFY_EXPR, INIT_EXPR,\n+\tCOMPOUND_EXPR, PREDECREMENT_EXPR, PREINCREMENT_EXPR,\n+\tPOSTDECREMENT_EXPR, POSTINCREMENT_EXPR, CLEANUP_POINT_EXPR, EXPR_STMT,\n+\tSTATEMENT_LIST, and RETURN_EXPR.  For non-pure non-const functions\n+\treturn 0 only when not OEP_LEXICOGRAPHIC.\n+\t(fold_build_cleanup_point_expr): Use the expression\n+\tlocation when building CLEANUP_POINT_EXPR.\n+\t* tree-core.h (enum operand_equal_flag): Add OEP_LEXICOGRAPHIC.\n+\t* tree.c (add_expr): Handle error_mark_node.\n+\n 2017-01-20  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/69188"}, {"sha": "8d1a61ef8518ab40a0d3e00576b5485b7d74540f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1,3 +1,14 @@\n+2017-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64279\n+\t* c-common.h (do_warn_duplicated_branches_r): Declare.\n+\t* c-gimplify.c (c_genericize): Walk the function tree calling\n+\tdo_warn_duplicated_branches_r.\n+\t* c-warn.c (expr_from_macro_expansion_r): New.\n+\t(do_warn_duplicated_branches): New.\n+\t(do_warn_duplicated_branches_r): New.\n+\t* c.opt (Wduplicated-branches): New option.\n+\n 2017-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/71497"}, {"sha": "06918dbaf1fb6652a18e0e7c4599f7b39d4cde9a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1537,6 +1537,7 @@ extern void maybe_warn_bool_compare (location_t, enum tree_code, tree, tree);\n extern bool maybe_warn_shift_overflow (location_t, tree, tree);\n extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);\n extern bool diagnose_mismatched_attributes (tree, tree);\n+extern tree do_warn_duplicated_branches_r (tree *, int *, void *);\n \n /* In c-attribs.c.  */\n extern bool attribute_takes_identifier_p (const_tree);"}, {"sha": "57edb41af0f08dfb193965213808d852a5ea53c3", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -125,6 +125,10 @@ c_genericize (tree fndecl)\n \t\t &pset);\n     }\n \n+  if (warn_duplicated_branches)\n+    walk_tree_without_duplicates (&DECL_SAVED_TREE (fndecl),\n+\t\t\t\t  do_warn_duplicated_branches_r, NULL);\n+\n   /* Dump the C-specific tree IR.  */\n   dump_orig = get_dump_info (TDI_original, &local_dump_flags);\n   if (dump_orig)"}, {"sha": "3c9077c5e804a602651dec78525f4883b0ea9087", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -2217,3 +2217,73 @@ warn_for_restrict (unsigned param_pos, vec<tree, va_gc> *args)\n \n   free (arg_positions);\n }\n+\n+/* Callback function to determine whether an expression TP or one of its\n+   subexpressions comes from macro expansion.  Used to suppress bogus\n+   warnings.  */\n+\n+static tree\n+expr_from_macro_expansion_r (tree *tp, int *, void *)\n+{\n+  if (CAN_HAVE_LOCATION_P (*tp)\n+      && from_macro_expansion_at (EXPR_LOCATION (*tp)))\n+    return integer_zero_node;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Possibly warn when an if-else has identical branches.  */\n+\n+static void\n+do_warn_duplicated_branches (tree expr)\n+{\n+  tree thenb = COND_EXPR_THEN (expr);\n+  tree elseb = COND_EXPR_ELSE (expr);\n+\n+  /* Don't bother if there's no else branch.  */\n+  if (elseb == NULL_TREE)\n+    return;\n+\n+  /* And don't warn for empty statements.  */\n+  if (TREE_CODE (thenb) == NOP_EXPR\n+      && TREE_TYPE (thenb) == void_type_node\n+      && TREE_OPERAND (thenb, 0) == size_zero_node)\n+    return;\n+\n+  /* ... or empty branches.  */\n+  if (TREE_CODE (thenb) == STATEMENT_LIST\n+      && STATEMENT_LIST_HEAD (thenb) == NULL)\n+    return;\n+\n+  /* Compute the hash of the then branch.  */\n+  inchash::hash hstate0 (0);\n+  inchash::add_expr (thenb, hstate0);\n+  hashval_t h0 = hstate0.end ();\n+\n+  /* Compute the hash of the else branch.  */\n+  inchash::hash hstate1 (0);\n+  inchash::add_expr (elseb, hstate1);\n+  hashval_t h1 = hstate1.end ();\n+\n+  /* Compare the hashes.  */\n+  if (h0 == h1\n+      && operand_equal_p (thenb, elseb, OEP_LEXICOGRAPHIC)\n+      /* Don't warn if any of the branches or their subexpressions comes\n+\t from a macro.  */\n+      && !walk_tree_without_duplicates (&thenb, expr_from_macro_expansion_r,\n+\t\t\t\t\tNULL)\n+      && !walk_tree_without_duplicates (&elseb, expr_from_macro_expansion_r,\n+\t\t\t\t\tNULL))\n+    warning_at (EXPR_LOCATION (expr), OPT_Wduplicated_branches,\n+\t\t\"this condition has identical branches\");\n+}\n+\n+/* Callback for c_genericize to implement -Wduplicated-branches.  */\n+\n+tree\n+do_warn_duplicated_branches_r (tree *tp, int *, void *)\n+{\n+  if (TREE_CODE (*tp) == COND_EXPR)\n+    do_warn_duplicated_branches (*tp);\n+  return NULL_TREE;\n+}"}, {"sha": "a1b3ae5c0b09c95e9ba1bdd34453b7087fd32181", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -468,6 +468,10 @@ Wdiv-by-zero\n C ObjC C++ ObjC++ Var(warn_div_by_zero) Init(1) Warning\n Warn about compile-time integer division by zero.\n \n+Wduplicated-branches\n+C ObjC C++ ObjC++ Var(warn_duplicated_branches) Init(0) Warning\n+Warn about duplicated branches in if-else statements.\n+\n Wduplicated-cond\n C ObjC C++ ObjC++ Var(warn_duplicated_cond) Init(0) Warning\n Warn about duplicated conditions in an if-else-if chain."}, {"sha": "18ef3c2e37e083ab7bf59abfa4b046d58d216a10", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1,3 +1,8 @@\n+2017-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64279\n+\t* c-typeck.c (build_conditional_expr): Warn about duplicated branches.\n+\n 2017-01-13  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_compound_statement): Handle"}, {"sha": "ed8ffe4c2e7269232b7c1037ab21c3bab66e7022", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -5193,6 +5193,15 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n     ret = build1 (EXCESS_PRECISION_EXPR, semantic_result_type, ret);\n \n   protected_set_expr_location (ret, colon_loc);\n+\n+  /* If the OP1 and OP2 are the same and don't have side-effects,\n+     warn here, because the COND_EXPR will be turned into OP1.  */\n+  if (warn_duplicated_branches\n+      && TREE_CODE (ret) == COND_EXPR\n+      && (op1 == op2 || operand_equal_p (op1, op2, 0)))\n+    warning_at (EXPR_LOCATION (ret), OPT_Wduplicated_branches,\n+\t\t\"this condition has identical branches\");\n+\n   return ret;\n }\n \f"}, {"sha": "6554cb7cc753698f6d386afe3ce24097abd9188b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1,3 +1,10 @@\n+2017-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64279\n+\t* call.c (build_conditional_expr_1): Warn about duplicated branches.\n+\t* semantics.c (finish_expr_stmt): Build statement using the proper\n+\tlocation.\n+\n 2017-01-19  Jason Merrill  <jason@redhat.com>\n \n \tUS 20 - forwarding references and class template argument deduction"}, {"sha": "a78e1a9c8a2eb4c2fca25e5c7e08b0a78bee6c9b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -5302,6 +5302,13 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n  valid_operands:\n   result = build3_loc (loc, COND_EXPR, result_type, arg1, arg2, arg3);\n \n+  /* If the ARG2 and ARG3 are the same and don't have side-effects,\n+     warn here, because the COND_EXPR will be turned into ARG2.  */\n+  if (warn_duplicated_branches\n+      && (arg2 == arg3 || operand_equal_p (arg2, arg3, 0)))\n+    warning_at (EXPR_LOCATION (result), OPT_Wduplicated_branches,\n+\t\t\"this condition has identical branches\");\n+\n   /* We can't use result_type below, as fold might have returned a\n      throw_expr.  */\n "}, {"sha": "55710e64c97ea1902087ea3b2e6f826954efd9ba", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -670,6 +670,7 @@ tree\n finish_expr_stmt (tree expr)\n {\n   tree r = NULL_TREE;\n+  location_t loc = EXPR_LOCATION (expr);\n \n   if (expr != NULL_TREE)\n     {\n@@ -694,7 +695,7 @@ finish_expr_stmt (tree expr)\n       if (TREE_CODE (expr) != CLEANUP_POINT_EXPR)\n \t{\n \t  if (TREE_CODE (expr) != EXPR_STMT)\n-\t    expr = build_stmt (input_location, EXPR_STMT, expr);\n+\t    expr = build_stmt (loc, EXPR_STMT, expr);\n \t  expr = maybe_cleanup_point_expr_void (expr);\n \t}\n "}, {"sha": "5b96f362c1acba5f6cd4642d6f6358eba15888d1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -3734,7 +3734,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Warray-bounds=1 @r{(only with} @option{-O2}@r{)}  @gol\n -Wbool-compare  @gol\n -Wbool-operation  @gol\n--Wc++11-compat  -Wc++14-compat@gol\n+-Wc++11-compat  -Wc++14-compat  @gol\n -Wchar-subscripts  @gol\n -Wcomment  @gol\n -Wduplicate-decl-specifier @r{(C and Objective-C only)} @gol\n@@ -5263,6 +5263,22 @@ Incrementing a boolean is invalid in C++1z, and deprecated otherwise.)\n \n This warning is enabled by @option{-Wall}.\n \n+@item -Wduplicated-branches\n+@opindex Wno-duplicated-branches\n+@opindex Wduplicated-branches\n+Warn when an if-else has identical branches.  This warning detects cases like\n+@smallexample\n+if (p != NULL)\n+  return 0;\n+else\n+  return 0;\n+@end smallexample\n+It doesn't warn when both branches contain just a null statement.  This warning\n+also warn for conditional operators:\n+@smallexample\n+  int i = x ? *p : *p;\n+@end smallexample\n+\n @item -Wduplicated-cond\n @opindex Wno-duplicated-cond\n @opindex Wduplicated-cond"}, {"sha": "5576d592988fdae47a1b77f64bce4cd3057489a9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -2722,6 +2722,9 @@ combine_comparisons (location_t loc,\n    If OEP_ADDRESS_OF is set, we are actually comparing addresses of objects,\n    not values of expressions.\n \n+   If OEP_LEXICOGRAPHIC is set, then also handle expressions with side-effects\n+   such as MODIFY_EXPR, RETURN_EXPR, as well as STATEMENT_LISTs.\n+\n    Unless OEP_MATCH_SIDE_EFFECTS is set, the function returns false on\n    any operand with side effect.  This is unnecesarily conservative in the\n    case we know that arg0 and arg1 are in disjoint code paths (such as in\n@@ -3154,6 +3157,23 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \tcase BIT_INSERT_EXPR:\n \t  return OP_SAME (0) && OP_SAME (1) && OP_SAME (2);\n \n+\tcase MODIFY_EXPR:\n+\tcase INIT_EXPR:\n+\tcase COMPOUND_EXPR:\n+\tcase PREDECREMENT_EXPR:\n+\tcase PREINCREMENT_EXPR:\n+\tcase POSTDECREMENT_EXPR:\n+\tcase POSTINCREMENT_EXPR:\n+\t  if (flags & OEP_LEXICOGRAPHIC)\n+\t    return OP_SAME (0) && OP_SAME (1);\n+\t  return 0;\n+\n+\tcase CLEANUP_POINT_EXPR:\n+\tcase EXPR_STMT:\n+\t  if (flags & OEP_LEXICOGRAPHIC)\n+\t    return OP_SAME (0);\n+\t  return 0;\n+\n \tdefault:\n \t  return 0;\n \t}\n@@ -3190,7 +3210,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t      cef &= ECF_CONST | ECF_PURE;\n \t    else\n \t      cef &= ECF_CONST;\n-\t    if (!cef)\n+\t    if (!cef && !(flags & OEP_LEXICOGRAPHIC))\n \t      return 0;\n \t  }\n \n@@ -3269,8 +3289,39 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t    }\n \t  return 1;\n \t}\n+      else if (TREE_CODE (arg0) == STATEMENT_LIST\n+\t       && (flags & OEP_LEXICOGRAPHIC))\n+\t{\n+\t  /* Compare the STATEMENT_LISTs.  */\n+\t  tree_stmt_iterator tsi1, tsi2;\n+\t  tree body1 = CONST_CAST_TREE (arg0);\n+\t  tree body2 = CONST_CAST_TREE (arg1);\n+\t  for (tsi1 = tsi_start (body1), tsi2 = tsi_start (body2); ;\n+\t       tsi_next (&tsi1), tsi_next (&tsi2))\n+\t    {\n+\t      /* The lists don't have the same number of statements.  */\n+\t      if (tsi_end_p (tsi1) ^ tsi_end_p (tsi2))\n+\t\treturn 0;\n+\t      if (tsi_end_p (tsi1) && tsi_end_p (tsi2))\n+\t\treturn 1;\n+\t      if (!operand_equal_p (tsi_stmt (tsi1), tsi_stmt (tsi2),\n+\t\t\t\t    OEP_LEXICOGRAPHIC))\n+\t\treturn 0;\n+\t    }\n+\t}\n       return 0;\n \n+    case tcc_statement:\n+      switch (TREE_CODE (arg0))\n+\t{\n+\tcase RETURN_EXPR:\n+\t  if (flags & OEP_LEXICOGRAPHIC)\n+\t    return OP_SAME_WITH_NULL (0);\n+\t  return 0;\n+\tdefault:\n+\t  return 0;\n+\t }\n+\n     default:\n       return 0;\n     }\n@@ -13897,7 +13948,7 @@ fold_build_cleanup_point_expr (tree type, tree expr)\n         return expr;\n     }\n \n-  return build1 (CLEANUP_POINT_EXPR, type, expr);\n+  return build1_loc (EXPR_LOCATION (expr), CLEANUP_POINT_EXPR, type, expr);\n }\n \n /* Given a pointer value OP0 and a type TYPE, return a simplified version"}, {"sha": "201395d9e55a91c47b7d89ec9d3d1030feb52278", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -1,3 +1,25 @@\n+2017-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64279\n+\t* c-c++-common/Wduplicated-branches-1.c: New test.\n+\t* c-c++-common/Wduplicated-branches-10.c: New test.\n+\t* c-c++-common/Wduplicated-branches-11.c: New test.\n+\t* c-c++-common/Wduplicated-branches-12.c: New test.\n+\t* c-c++-common/Wduplicated-branches-2.c: New test.\n+\t* c-c++-common/Wduplicated-branches-3.c: New test.\n+\t* c-c++-common/Wduplicated-branches-4.c: New test.\n+\t* c-c++-common/Wduplicated-branches-5.c: New test.\n+\t* c-c++-common/Wduplicated-branches-6.c: New test.\n+\t* c-c++-common/Wduplicated-branches-7.c: New test.\n+\t* c-c++-common/Wduplicated-branches-8.c: New test.\n+\t* c-c++-common/Wduplicated-branches-9.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Coalesce dg-warning.\n+\t* g++.dg/cpp0x/lambda/lambda-switch.C: Move dg-warning.\n+\t* g++.dg/ext/builtin-object-size3.C: Likewise.\n+\t* g++.dg/gomp/loop-1.C: Likewise.\n+\t* g++.dg/warn/Wduplicated-branches1.C: New test.\n+\t* g++.dg/warn/Wduplicated-branches2.C: New test.\n+\n 2017-01-20  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/69188"}, {"sha": "c0b93fcf97a0c7732dedb42dd96c569600570dfc", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-1.c", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-1.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,187 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches -O2\" } */\n+\n+extern void foo (int);\n+extern int g;\n+extern int a[10];\n+\n+int\n+f (int i, int *p)\n+{\n+  const int j = 0;\n+  if (j == 0)\n+    {\n+      if (i > 10) /* { dg-warning \"this condition has identical branches\" } */\n+\t/* Optimizers can figure out that this is 1.  */\n+\t*p = j * 2 + 1;\n+      else\n+\t*p = 1;\n+    }\n+\n+  if (i)\n+    ;\n+  else\n+    ;\n+\n+  if (i == 0) /* { dg-warning \"this condition has identical branches\" } */\n+    return 0;\n+  else\n+    return 0;\n+\n+  if (i == 1) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      g = 10;\n+    }\n+  else\n+    {\n+      g = 10;\n+    }\n+\n+  const char *s;\n+  if (i == 2) /* { dg-warning \"this condition has identical branches\" } */\n+    s = \"foo\";\n+  else\n+    s = \"foo\";\n+\n+  if (i == 3) /* { dg-warning \"this condition has identical branches\" } */\n+    g = a[i];\n+  else\n+    g = a[i];\n+\n+  if (i == 4) /* { dg-warning \"this condition has identical branches\" } */\n+    return i ? 1 : g;\n+  else\n+    return i ? 1 : g;\n+\n+  if (i == 5) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      {\n+\t{\n+\t  {\n+\t    g++;\n+\t  }\n+\t}\n+      }\n+    }\n+  else\n+    {\n+      {\n+\t{\n+\t  {\n+\t    g++;\n+\t  }\n+\t}\n+      }\n+    }\n+\n+  if (i == 6) /* { dg-warning \"this condition has identical branches\" } */\n+    g = i * 6;\n+  else\n+    g = i * 6;\n+\n+  /* Don't warn.  */\n+  if (i == 7)\n+    g = i / 6;\n+  else\n+    g = 6 / i;\n+\n+  if (i == 8) /* { dg-warning \"this condition has identical branches\" } */\n+    return i * 8 * i * 8;\n+  else\n+    return 8 * i * 8 * i;\n+\n+\n+  if (i == 9) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      p++;\n+      return *p;\n+    }\n+  else\n+    {\n+      p++;\n+      return *p;\n+    }\n+\n+  /* Don't warn.  */\n+  if (i == 10)\n+    return *++p;\n+  else\n+    return ++*p;\n+\n+  if (i == 11) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      foo (6);\n+    }\n+  else\n+    {\n+      foo (6);\n+    }\n+\n+  if (i == 12) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      foo (6 + i), foo (2);\n+    }\n+  else\n+    {\n+      foo (6 + i), foo (2);\n+    }\n+\n+  if (i == 13) /* { dg-warning \"this condition has identical branches\" } */\n+    p += (g + 1);\n+  else\n+    p += (g + 1);\n+\n+  if (i == 14) /* { dg-warning \"this condition has identical branches\" } */\n+    {\n+      foo (7);\n+      *p = 0;\n+      foo (9);\n+    }\n+  else\n+    {\n+      foo (7);\n+      *p = 0;\n+      foo (9);\n+    }\n+\n+  if (i == 15) /* { dg-warning \"this condition has identical branches\" } */\n+    p += (g + (1 + 2));\n+  else\n+    p += (g + (1 + 1 + 1));\n+\n+  if (i == 16) /* { dg-warning \"this condition has identical branches\" } */\n+    foo (10 + g);\n+  else\n+    foo (g + 10);\n+\n+  if (i == 17) /* { dg-warning \"this condition has identical branches\" } */\n+    ({ foo (i); });\n+  else\n+    ({ foo (i); });\n+\n+  if (i == 18)\n+    {\n+      if (i == 19)\n+\t{\n+\t  if (i == 20) /* { dg-warning \"this condition has identical branches\" } */\n+\t    foo (++i);\n+\t  else\n+\t    foo (++i);\n+\t}\n+    }\n+\n+  /* Don't warn.  */\n+  if (i == 21)\n+    {\n+      foo (1);\n+      foo (2);\n+    }\n+  else\n+    {\n+      foo (2);\n+      foo (1);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8d918efcdc3a3c04d917c7a17daa44c5cbf0f860", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-10.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+#define DEBUG(msg) ;\n+\n+void\n+f (int i)\n+{\n+  if (i > 9)\n+    {\n+      DEBUG (\"foo\");\n+    }\n+  else\n+    {\n+      DEBUG (\"bar\");\n+    }\n+}"}, {"sha": "70d86cf7f05f12a73d0aef3406d174811b30df63", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-11.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-11.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,75 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+int\n+f (int p)\n+{\n+  if (p == 0)\n+    {\n+      p += 1, ++p;\n+    }\n+  else\n+    {\n+      p -= 1, ++p;\n+    }\n+\n+  if (p == 1)\n+    {\n+    }\n+  else\n+    p++;\n+\n+  if (p == 2)\n+    p++;\n+  else\n+    {\n+    }\n+\n+  if (p == 3)\n+    {\n+    }\n+  else\n+    {\n+    }\n+\n+  if (p == 4)\n+    {\n+      ++p;\n+      return p;\n+    }\n+  else\n+    {\n+      p++;\n+      return p;\n+    }\n+\n+  if (p == 5)\n+    ++p;\n+  else\n+    p++;\n+\n+  if (p == 6)\n+    {\n+      ++p;\n+      ++p;\n+      return p;\n+    }\n+  else\n+    {\n+      ++p;\n+      return p;\n+    }\n+\n+  if (p == 7)\n+    {\n+      ++p;\n+      return p;\n+    }\n+  else\n+    {\n+      ++p;\n+      ++p;\n+      return p;\n+    }\n+}"}, {"sha": "cd746f1ad3090ae4c67925a9db21d6b989c66e17", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-12.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-12.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+void\n+f (int i)\n+{\n+  if (i) /* { dg-warning \"this condition has identical branches\" } */\n+    return 0;\n+/* { dg-warning \".return. with a value\" \"\" { target c } .-1 } */\n+/* { dg-error \"return-statement with a value\" \"\" { target c++ } .-2 } */\n+  else\n+   return 0;\n+/* { dg-warning \".return. with a value\" \"\" { target c } .-1 } */\n+/* { dg-error \"return-statement with a value\" \"\" { target c++ } .-2 } */\n+}"}, {"sha": "8669dd6a6291c4d4572288f926d75d3b5ca939a7", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-2.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-2.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,114 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches -O2\" } */\n+\n+void\n+f (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (x == 0) /* { dg-error \"undeclared|not declared\" } */\n+\t*p = 5;\n+      else\n+\t*p = 6;\n+    }\n+}\n+\n+void\n+f2 (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (*p > 2)\n+\t*p = x; /* { dg-error \"undeclared|not declared\" } */\n+      else\n+\t*p = 6;\n+    }\n+}\n+\n+void\n+f3 (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (*p > 2)\n+\t*p = 8;\n+      else\n+\t*p = x; /* { dg-error \"undeclared|not declared\" } */\n+    }\n+}\n+\n+void\n+f4 (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (x == 0) /* { dg-error \"undeclared|not declared\" } */\n+\t*p = 5;\n+      else\n+\t*p = 6;\n+    }\n+  else\n+    {\n+      if (x == 0) /* { dg-error \"not declared\" \"\" { target c++ } } */\n+\t*p = 7;\n+      else\n+\t*p = 6;\n+    }\n+}\n+\n+void\n+f5 (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (*p > 2)\n+\t*p = x; /* { dg-error \"undeclared|not declared\" } */\n+      else\n+\t*p = 6;\n+    }\n+  else\n+    {\n+      if (x == 0) /* { dg-error \"not declared\" \"\" { target c++ } } */\n+\t*p = 5;\n+      else\n+\t*p = 6;\n+    }\n+}\n+\n+void\n+f6 (int *p)\n+{\n+  if (*p > 0)\n+    {\n+      if (*p > 2)\n+\t*p = 8;\n+      else\n+\t*p = x; /* { dg-error \"undeclared|not declared\" } */\n+    }\n+  else\n+    {\n+      if (x == 0) /* { dg-error \"not declared\" \"\" { target c++ } } */\n+\t*p = 5;\n+      else\n+\t*p = 6;\n+    }\n+}\n+\n+void\n+f7 (int i)\n+{\n+  if (i > 5)\n+    ({ x++; }); /* { dg-error \"undeclared|not declared\" } */\n+  else\n+    ({ i++; });\n+}\n+\n+void\n+f8 (int i)\n+{\n+  if (i > 5)\n+    ({ i++; });\n+  else\n+    ({ x++; }); /* { dg-error \"undeclared|not declared\" } */\n+}"}, {"sha": "e1883843d543798769b62e3c6e284ec12b9d635e", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-3.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+extern int *g;\n+\n+void\n+f (short int i)\n+{\n+  if (i == 0) /* { dg-warning \"this condition has identical branches\" } */\n+    *g = (int) i;\n+  else\n+    *g = (int) i;\n+\n+  if (i == 1)\n+    *g = (unsigned char) i;\n+  else\n+    *g = (signed char) i;\n+}"}, {"sha": "79af549386636d55187c322eade7c82e7fb86dc6", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-4.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+extern int *g;\n+extern const int *q;\n+\n+void\n+f (int i)\n+{\n+  int j;\n+\n+  if (i == 0)\n+    for (j = 0; j < 10; j++)\n+       ++*g;\n+  else\n+    for (j = 0; j < 10; j++)\n+       ++*g;\n+\n+  if (i == 1)\n+    {\n+      int i = 10;\n+      *g = i;\n+    }\n+  else\n+    {\n+      int i = 10;\n+      *g = i;\n+    }\n+\n+  if (i == 3)\n+    q = (const int []){1};\n+  else\n+    q = (const int []){1};\n+}"}, {"sha": "f2eb8ecfefa9cdfa15adcd5d182373787ca70a2c", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-5.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+extern int g;\n+extern void foo ();\n+#define A g = i\n+#define B g = i\n+#define DOIT() foo()\n+#define DOIT2() foo()\n+\n+void\n+f (int i)\n+{\n+  if (i == 0)\n+    A;\n+  else\n+    B;\n+\n+  if (i == 1)\n+    DOIT();\n+  else\n+    DOIT2();\n+}"}, {"sha": "0010693d81ac5eae43819391465f107fbac00b60", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-6.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+void\n+f (int i)\n+{\n+  if (i == 0)\n+    ;\n+  else if (i == 1)\n+    ;\n+}"}, {"sha": "03721dc4cb632292fcf2576f761b44f5e548f9f8", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-7.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+struct S\n+{\n+  int x;\n+} s;\n+int a[10];\n+\n+#define XMEM(R) ((R).x)\n+#define XSTR(R) ((R).x)\n+\n+void\n+f (int i)\n+{\n+  if (i)\n+    XMEM(s) = 1;\n+  else\n+    XSTR(s) = 1;\n+\n+  if (i) /* { dg-warning \"this condition has identical branches\" } */\n+    s.x = 1;\n+  else\n+    s.x = 1;\n+\n+  if (i)\n+    XMEM(s) = 1;\n+  else\n+    s.x = 1;\n+\n+  if (i)\n+    s.x = 1;\n+  else\n+    XMEM(s) = 1;\n+}"}, {"sha": "c5e8ca0748931ae1827fd291923158e2e6e00796", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-8.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-8.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,73 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+#define A 5\n+#define B 5\n+#define I i\n+extern int a[10];\n+extern int g;\n+\n+int\n+f (int i)\n+{\n+  if (i == 1) /* { dg-warning \"this condition has identical branches\" } */\n+   return a[5];\n+  else\n+   return a[5];\n+\n+  if (i == 2) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+   return a[A];\n+  else\n+   return a[5];\n+\n+  if (i == 3) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+   return a[5];\n+  else\n+   return a[A];\n+\n+  if (i == 4) /* { dg-warning \"this condition has identical branches\" } */\n+   return a[A];\n+  else\n+   return a[A];\n+\n+  if (i == 5) /* { dg-warning \"this condition has identical branches\" } */\n+   return a[i];\n+  else\n+   return a[i];\n+\n+  if (i == 6) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+   return a[I];\n+  else\n+   return a[i];\n+\n+  if (i == 7) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+   return a[i];\n+  else\n+   return a[I];\n+\n+  if (i == 8) /* { dg-warning \"this condition has identical branches\" } */\n+   return a[I];\n+  else\n+   return a[I];\n+\n+  if (i == 10) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+    g += A;\n+  else\n+    g += B;\n+\n+  if (i == 11) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+    g += B;\n+  else\n+    g += A;\n+\n+  if (i == 12) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+    g += A;\n+  else\n+    g += 5;\n+\n+  if (i == 12) /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+    g += 5;\n+  else\n+    g += A;\n+}"}, {"sha": "9b21776af2e72d13c3fba3a184afe0f1ea1b0312", "filename": "gcc/testsuite/c-c++-common/Wduplicated-branches-9.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWduplicated-branches-9.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,46 @@\n+/* PR c/64279 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicated-branches\" } */\n+\n+extern int *p, foo (void), a[10];\n+#define N 5\n+#define M 5\n+#define I i\n+\n+void\n+f (int i)\n+{\n+  *p += i ? 1 : 1; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? N : M; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? M : N; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? i : i; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? i++ : i++; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? foo () : foo (); /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? ({ i++; }) : ({ i++; }); /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? a[i] : a[i]; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? a[5] : a[5]; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? a[N] : a[M]; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? a[5] : a[M]; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? a[M] : a[5]; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? a[I] : a[I]; /* { dg-warning \"this condition has identical branches\" } */\n+  *p += i ? a[i] : a[I]; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+  *p += i ? a[I] : a[i]; /* { dg-bogus \"this condition has identical branches\" \"\" { xfail *-*-* } } */\n+\n+  *p += i ?: 1;\n+  *p += i ?: M;\n+  *p += i ?: N;\n+  *p += i ?: i; /* { dg-warning \"this condition has identical branches\" \"\" { target c++ } } */\n+  *p += i ?: i++;\n+  *p += i ?: foo ();\n+  *p += i ?: ({ i++; });\n+  *p += i ?: a[i];\n+  *p += i ?: a[5];\n+  *p += i ?: a[M];\n+  *p += i ?: a[M];\n+  *p += i ?: a[5];\n+  *p += i ?: a[I];\n+  *p += i ?: a[I];\n+  *p += i ?: a[i];\n+\n+  *p += (i > 5 ? (i > 10 ? i : i) : i); /* { dg-warning \"this condition has identical branches\" } */\n+}"}, {"sha": "898e5fa6d465f42a8d64cee7cf2039970d46717d", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -39,9 +39,9 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      do /* { dg-warning \"statement may fall through\" \"\" { target c++ } 42 } */\n+      do\n \tbar (2);\n-      while (--i); /* { dg-warning \"statement may fall through\" \"\" { target c } 44 } */\n+      while (--i); /* { dg-warning \"statement may fall through\" } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "ee87defac9f73d20e36a28e36ea55a22eea65ade", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-switch.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -16,11 +16,11 @@ main ()\n \t      break;\t\t// { dg-error \"break\" }\n \t    }\n \t  };\n-\t  l = []()\n+\t  l = []()\t\t// { dg-warning \"statement will never be executed\" }\n \t    {\n \t    case 3:\t\t// { dg-error \"case\" }\n \t      break;\t\t// { dg-error \"break\" }\n-\t    };\t\t\t// { dg-warning \"statement will never be executed\" }\n+\t    };\n \t}\n     }\n }"}, {"sha": "b2a9170fc30ef1e6aea303f70c897cde5717aed6", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size3.C?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -3,7 +3,7 @@\n \n void baz (int *, int *);\n \n-#define MEMCPY(d,s,l) __builtin___memcpy_chk (d, s, l, __builtin_object_size (d, 0))\n+#define MEMCPY(d,s,l) __builtin___memcpy_chk (d, s, l, __builtin_object_size (d, 0)) // { dg-warning \"writing\" }\n \n int\n foo ()\n@@ -20,7 +20,7 @@ bar ()\n {\n   int *p = new int;\n   int *q = new int[4];\n-  MEMCPY (p, \"abcdefghijklmnopqrstuvwxyz\", sizeof (int) + 1);\t\t// { dg-warning \"writing\" }\n-  MEMCPY (q, \"abcdefghijklmnopqrstuvwxyz\", 4 * sizeof (int) + 1);\t// { dg-warning \"writing\" }\n+  MEMCPY (p, \"abcdefghijklmnopqrstuvwxyz\", sizeof (int) + 1); // { dg-message \"in expansion of macro\" }\n+  MEMCPY (q, \"abcdefghijklmnopqrstuvwxyz\", 4 * sizeof (int) + 1); // { dg-message \"in expansion of macro\" }\n   baz (p, q);\n }"}, {"sha": "b3db0f4736b9e752eb39757eee032c75524dfe74", "filename": "gcc/testsuite/g++.dg/gomp/loop-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Floop-1.C?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -82,8 +82,8 @@ f1 (int x)\n     for (j = i + 3; j < 16; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n-  for (i = 0; i < 16; i++) /* { dg-error \"initializer expression refers to iteration variable\" } */\n-    for (j = baz (&i); j < 16; j += 2)\n+  for (i = 0; i < 16; i++)\n+    for (j = baz (&i); j < 16; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n   for (i = 0; i < 16; i++)\n@@ -215,8 +215,8 @@ f2 (int x)\n     for (int j = i + 3; j < 16; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n-  for (int i = 0; i < 16; i++) /* { dg-error \"initializer expression refers to iteration variable\" } */\n-    for (int j = baz (&i); j < 16; j += 2)\n+  for (int i = 0; i < 16; i++)\n+    for (int j = baz (&i); j < 16; j += 2) /* { dg-error \"initializer expression refers to iteration variable\" } */\n       ;\n   #pragma omp for collapse(2)\n   for (int i = 0; i < 16; i++)"}, {"sha": "7ebd55e190fcddb7e554b7c9ae9c4f8d9df310ab", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-branches1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches1.C?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,21 @@\n+// PR c/64279\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-branches\" }\n+\n+template <typename T>\n+void\n+f (char i, int *p)\n+{\n+  if (i)\n+    *p = (signed short) i;\n+  else\n+    *p = (unsigned short) i;\n+\n+  if (i) // { dg-warning \"this condition has identical branches\" }\n+    *p = (T) i;\n+  else\n+    *p = (unsigned short) i;\n+}\n+\n+template void f<unsigned short>(char, int *); // { dg-message \"required from here\" }\n+template void f<signed short>(char, int *);"}, {"sha": "4da2d544a1cbaa1695a927fd2bee10960dd317e0", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-branches2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches2.C?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -0,0 +1,8 @@\n+// PR c/6427\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wduplicated-branches\" }\n+\n+template<typename _ITp>\n+struct S {\n+  static constexpr int i = sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);\n+};"}, {"sha": "2b1759efcb182bf57b80033a4cc7f1af4dbf22eb", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -814,7 +814,9 @@ enum operand_equal_flag {\n   /* Internal within operand_equal_p:  */\n   OEP_NO_HASH_CHECK = 16,\n   /* Internal within inchash::add_expr:  */\n-  OEP_HASH_CHECK = 32\n+  OEP_HASH_CHECK = 32,\n+  /* Makes operand_equal_p handle more expressions:  */\n+  OEP_LEXICOGRAPHIC = 64\n };\n \n /* Enum and arrays used for tree allocation stats."}, {"sha": "7127bd265de63a37a179b8fd804b42f953e549b5", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2ebd93e1d7f611a9aa06c67c7b9bd82495d6adc2", "patch": "@@ -7776,7 +7776,7 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n   enum tree_code code;\n   enum tree_code_class tclass;\n \n-  if (t == NULL_TREE)\n+  if (t == NULL_TREE || t == error_mark_node)\n     {\n       hstate.merge_hash (0);\n       return;"}]}