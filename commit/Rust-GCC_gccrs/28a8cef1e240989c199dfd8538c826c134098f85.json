{"sha": "28a8cef1e240989c199dfd8538c826c134098f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhOGNlZjFlMjQwOTg5YzE5OWRmZDg1MzhjODI2YzEzNDA5OGY4NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-02-11T17:35:17Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-02-11T17:35:17Z"}, "message": "PR c++/87996 - size of array is negative error when SIZE_MAX/2 < sizeof(array) <= SIZE_MAX\n\ngcc/ChangeLog:\n\n\tPR c++/87996\n\t* builtins.c (max_object_size): Move from here...\n\t* builtins.h (max_object_size): ...and here...\n\t* tree.c (max_object_size): ...to here...\n\t* tree.h (max_object_size): ...and here.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/87996\n\t* c-common.c (invalid_array_size_error): New function.\n\t(valid_array_size_p): Call it.  Handle size as well as type.\n\t* c-common.h (valid_constant_size_p): New function.\n\t(enum cst_size_error): New type.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/87996\n\t* decl.c (compute_array_index_type_loc): Preserve signed sizes\n\tfor diagnostics.  Call valid_array_size_p instead of error.\n\t* init.c (build_new_1): Compute size for diagnostic.  Call\n\tinvalid_array_size_error\n\t(build_new): Call valid_array_size_p instead of error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/87996\n\t* c-c++-common/array-5.c: New test.\n\t* c-c++-common/pr68107.c: Adjust text of diagnostics.\n\t* g++.dg/init/new38.C: Same.\n\t* g++.dg/init/new43.C: Same.\n\t* g++.dg/init/new44.C: Same.\n\t* g++.dg/init/new46.C: Same.\n\t* g++.dg/other/large-size-array.C: Same.\n\t* g++.dg/other/new-size-type.C: Same.\n\t* g++.dg/template/array30.C: Same.\n\t* g++.dg/template/array32.C: New test.\n\t* g++.dg/template/dependent-name3.C: Adjust.\n\t* gcc.dg/large-size-array-3.c: Same.\n\t* gcc.dg/large-size-array-5.c: Same.\n\t* gcc.dg/large-size-array.c: Same.\n\t* g++.old-deja/g++.brendan/array1.C: Same.\n\t* g++.old-deja/g++.mike/p6149.C: Same.\n\nFrom-SVN: r268774", "tree": {"sha": "a7b930a4f8e120d187bde8f6ea311c2ed60e6d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b930a4f8e120d187bde8f6ea311c2ed60e6d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28a8cef1e240989c199dfd8538c826c134098f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8cef1e240989c199dfd8538c826c134098f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a8cef1e240989c199dfd8538c826c134098f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8cef1e240989c199dfd8538c826c134098f85/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c4860e346b8292ac398d971aff933586b11e3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4860e346b8292ac398d971aff933586b11e3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4860e346b8292ac398d971aff933586b11e3ea"}], "stats": {"total": 1136, "additions": 697, "deletions": 439}, "files": [{"sha": "a8b815658c881446c715da7dd03b61bf7baee4ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,3 +1,11 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/87996\n+\t* builtins.c (max_object_size): Move from here...\n+\t* builtins.h (max_object_size): ...and here...\n+\t* tree.c (max_object_size): ...to here...\n+\t* tree.h (max_object_size): ...and here.\n+\n 2019-02-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Shift-right"}, {"sha": "693e8937918a72d8ee0bfb4dae75346e2c9dec55", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -11210,12 +11210,3 @@ target_char_cst_p (tree t, char *p)\n   *p = (char)tree_to_uhwi (t);\n   return true;\n }\n-\n-/* Return the maximum object size.  */\n-\n-tree\n-max_object_size (void)\n-{\n-  /* To do: Make this a configurable parameter.  */\n-  return TYPE_MAX_VALUE (ptrdiff_type_node);\n-}"}, {"sha": "3ec4ba09b662967c546775dd71f14e7e282a4821", "filename": "gcc/builtins.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -150,6 +150,5 @@ extern internal_fn replacement_internal_fn (gcall *);\n \n extern void warn_string_no_nul (location_t, const char *, tree, tree);\n extern tree unterminated_array (tree, tree * = NULL, bool * = NULL);\n-extern tree max_object_size ();\n \n #endif /* GCC_BUILTINS_H */"}, {"sha": "7dae7bf530a88a23d4e49d1174746b773a93cd73", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,3 +1,11 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/87996\n+\t* c-common.c (invalid_array_size_error): New function.\n+\t(valid_array_size_p): Call it.  Handle size as well as type.\n+\t* c-common.h (valid_constant_size_p): New function.\n+\t(enum cst_size_error): New type.\n+\n 2019-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/89122"}, {"sha": "ae23e59f65244be167569a51feced84903278231", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 69, "deletions": 16, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -8231,29 +8231,82 @@ reject_gcc_builtin (const_tree expr, location_t loc /* = UNKNOWN_LOCATION */)\n   return false;\n }\n \n+/* Issue an ERROR for an invalid SIZE of array NAME which is null\n+   for unnamed arrays.  */\n+\n+void\n+invalid_array_size_error (location_t loc, cst_size_error error,\n+\t\t\t  const_tree size, const_tree name)\n+{\n+  tree maxsize = max_object_size ();\n+  switch (error)\n+    {\n+    case cst_size_negative:\n+      if (name)\n+\terror_at (loc, \"size %qE of array %qE is negative\",\n+\t\t  size, name);\n+      else\n+\terror_at (loc, \"size %qE of array is negative\",\n+\t\t  size);\n+      break;\n+    case cst_size_too_big:\n+      if (name)\n+\terror_at (loc, \"size %qE of array %qE exceeds maximum \"\n+\t\t  \"object size %qE\", size, name, maxsize);\n+      else\n+\terror_at (loc, \"size %qE of array exceeds maximum \"\n+\t\t  \"object size %qE\", size, maxsize);\n+      break;\n+    case cst_size_overflow:\n+      if (name)\n+\terror_at (loc, \"size of array %qE exceeds maximum \"\n+\t\t  \"object size %qE\", name, maxsize);\n+      else\n+\terror_at (loc, \"size of array exceeds maximum \"\n+\t\t  \"object size %qE\", maxsize);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Check if array size calculations overflow or if the array covers more\n    than half of the address space.  Return true if the size of the array\n-   is valid, false otherwise.  TYPE is the type of the array and NAME is\n-   the name of the array, or NULL_TREE for unnamed arrays.  */\n+   is valid, false otherwise.  T is either the type of the array or its\n+   size, and NAME is the name of the array, or null for unnamed arrays.  */\n \n bool\n-valid_array_size_p (location_t loc, tree type, tree name, bool complain)\n+valid_array_size_p (location_t loc, const_tree t, tree name, bool complain)\n {\n-  if (type != error_mark_node\n-      && COMPLETE_TYPE_P (type)\n-      && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST\n-      && !valid_constant_size_p (TYPE_SIZE_UNIT (type)))\n+  if (t == error_mark_node)\n+    return true;\n+\n+  const_tree size;\n+  if (TYPE_P (t))\n     {\n-      if (complain)\n-\t{\n-\t  if (name)\n-\t    error_at (loc, \"size of array %qE is too large\", name);\n-\t  else\n-\t    error_at (loc, \"size of unnamed array is too large\");\n-\t}\n-      return false;\n+      if (!COMPLETE_TYPE_P (t))\n+\treturn true;\n+      size = TYPE_SIZE_UNIT (t);\n     }\n-  return true;\n+  else\n+    size = t;\n+\n+  if (TREE_CODE (size) != INTEGER_CST)\n+    return true;\n+\n+  cst_size_error error;\n+  if (valid_constant_size_p (size, &error))\n+    return true;\n+\n+  if (!complain)\n+    return false;\n+\n+  if (TREE_CODE (TREE_TYPE (size)) == ENUMERAL_TYPE)\n+    /* Show the value of the enumerator rather than its name.  */\n+    size = convert (ssizetype, const_cast<tree> (size));\n+\n+  invalid_array_size_error (loc, error, size, name);\n+  return false;\n }\n \n /* Read SOURCE_DATE_EPOCH from environment to have a deterministic"}, {"sha": "394a0ea1c895959df42979f783d6dc3e8c675351", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1270,7 +1270,9 @@ extern tree find_inv_trees (tree *, int *, void *);\n extern tree replace_inv_trees (tree *, int *, void *);\n \n extern bool reject_gcc_builtin (const_tree, location_t = UNKNOWN_LOCATION);\n-extern bool valid_array_size_p (location_t, tree, tree, bool = true);\n+extern bool valid_array_size_p (location_t, const_tree, tree, bool = true);\n+extern void invalid_array_size_error (location_t, cst_size_error,\n+\t\t\t\t      const_tree, const_tree);\n \n /* In c-warn.c.  */\n extern void constant_expression_warning (tree);"}, {"sha": "76f22f5e363f32648d474774eb65516a851cafdb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,3 +1,12 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/87996\n+\t* decl.c (compute_array_index_type_loc): Preserve signed sizes\n+\tfor diagnostics.  Call valid_array_size_p instead of error.\n+\t* init.c (build_new_1): Compute size for diagnostic.  Call\n+\tinvalid_array_size_error\n+\t(build_new): Call valid_array_size_p instead of error.\n+\n 2019-02-07  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/86218"}, {"sha": "40381978312bb93be40dafd6c9aa32f2c8b7c77d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -9652,17 +9652,21 @@ static tree\n compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t\t\t      tsubst_flags_t complain)\n {\n-  tree itype;\n-  tree osize = size;\n-\n   if (error_operand_p (size))\n     return error_mark_node;\n \n+  /* The type of the index being computed.  */\n+  tree itype;\n+\n+  /* The original numeric size as seen in the source code before\n+     conversion to size_t.  */\n+  tree origsize = size;\n+\n   location_t loc = cp_expr_loc_or_loc (size, name ? name_loc : input_location);\n \n   if (!type_dependent_expression_p (size))\n     {\n-      osize = size = mark_rvalue_use (size);\n+      origsize = size = mark_rvalue_use (size);\n \n       if (cxx_dialect < cxx11 && TREE_CODE (size) == NOP_EXPR\n \t  && TREE_SIDE_EFFECTS (size))\n@@ -9679,7 +9683,7 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t\t\t\t       /*manifestly_const_eval=*/true);\n \n \t  if (!TREE_CONSTANT (size))\n-\t    size = osize;\n+\t    size = origsize;\n \t}\n \n       if (error_operand_p (size))\n@@ -9740,16 +9744,30 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n   /* Normally, the array-bound will be a constant.  */\n   if (TREE_CODE (size) == INTEGER_CST)\n     {\n-      /* An array must have a positive number of elements.  */\n-      if (!valid_constant_size_p (size))\n+      /* The size to use in diagnostics that reflects the constant\n+\t size used in the source, rather than SIZE massaged above.  */\n+      tree diagsize = size;\n+\n+      /* If the original size before conversion to size_t was signed\n+\t and negative, convert it to ssizetype to restore the sign.  */\n+      if (!TYPE_UNSIGNED (TREE_TYPE (origsize))\n+\t  && TREE_CODE (size) == INTEGER_CST\n+\t  && tree_int_cst_sign_bit (size))\n+\t{\n+\t  diagsize = fold_convert (ssizetype, size);\n+\n+\t  /* Clear the overflow bit that may have been set as a result\n+\t     of the conversion from the sizetype of the new size to\n+\t     ssizetype.  */\n+\t  TREE_OVERFLOW (diagsize) = false;\n+\t}\n+\n+      /* Verify that the array has a positive number of elements\n+\t and issue the appropriate diagnostic if it doesn't.  */\n+      if (!valid_array_size_p (loc, diagsize, name, (complain & tf_error)))\n \t{\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n-\n-\t  if (name)\n-\t    error_at (loc, \"size of array %qD is negative\", name);\n-\t  else\n-\t    error_at (loc, \"size of array is negative\");\n \t  size = integer_one_node;\n \t}\n       /* As an extension we allow zero-sized arrays.  */"}, {"sha": "606d246ef940bb24298b01c8f95b5e7e01b1e971", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -3086,7 +3086,21 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       if (overflow || wi::gtu_p (inner_size, max_size))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"size of array is too large\");\n+\t    {\n+\t      cst_size_error error;\n+\t      if (overflow)\n+\t\terror = cst_size_overflow;\n+\t      else\n+\t\t{\n+\t\t  error = cst_size_too_big;\n+\t\t  size = size_binop (MULT_EXPR, size,\n+\t\t\t\t     wide_int_to_tree (sizetype,\n+\t\t\t\t\t\t       inner_nelts_count));\n+\t\t  size = cp_fully_fold (size);\n+\t\t}\n+\t      invalid_array_size_error (input_location, error, size,\n+\t\t\t\t\t/*name=*/NULL_TREE);\n+\t    }\n \t  return error_mark_node;\n \t}\n \n@@ -3105,7 +3119,11 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t isn't explicitly stated but it's enforced anyway -- see\n \t\t grokdeclarator in cp/decl.c).  */\n \t      if (complain & tf_error)\n-\t\terror (\"size of array is too large\");\n+\t\t{\n+\t\t  size = cp_fully_fold (size);\n+\t\t  invalid_array_size_error (input_location, cst_size_too_big,\n+\t\t\t\t\t    size, NULL_TREE);\n+\t\t}\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -3747,12 +3765,9 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t less than zero. ... If the expression is a constant expression,\n \t the program is ill-fomed.  */\n       if (TREE_CODE (cst_nelts) == INTEGER_CST\n-\t  && tree_int_cst_sgn (cst_nelts) == -1)\n-\t{\n-\t  if (complain & tf_error)\n-\t    error (\"size of array is negative\");\n-\t  return error_mark_node;\n-\t}\n+\t  && !valid_array_size_p (input_location, cst_nelts, NULL_TREE,\n+\t\t\t\t  complain & tf_error))\n+\treturn error_mark_node;\n \n       nelts = mark_rvalue_use (nelts);\n       nelts = cp_save_expr (cp_convert (sizetype, nelts, complain));"}, {"sha": "0406b6b0dceadfd8103d9d74b90c79d54c25e774", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,3 +1,23 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/87996\n+\t* c-c++-common/array-5.c: New test.\n+\t* c-c++-common/pr68107.c: Adjust text of diagnostics.\n+\t* g++.dg/init/new38.C: Same.\n+\t* g++.dg/init/new43.C: Same.\n+\t* g++.dg/init/new44.C: Same.\n+\t* g++.dg/init/new46.C: Same.\n+\t* g++.dg/other/large-size-array.C: Same.\n+\t* g++.dg/other/new-size-type.C: Same.\n+\t* g++.dg/template/array30.C: Same.\n+\t* g++.dg/template/array32.C: New test.\n+\t* g++.dg/template/dependent-name3.C: Adjust.\n+\t* gcc.dg/large-size-array-3.c: Same.\n+\t* gcc.dg/large-size-array-5.c: Same.\n+\t* gcc.dg/large-size-array.c: Same.\n+\t* g++.old-deja/g++.brendan/array1.C: Same.\n+\t* g++.old-deja/g++.mike/p6149.C: Same.\n+\n 2019-02-11  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/tree-prof/inliner-1.c: Correct comments."}, {"sha": "bf17d1bb53dd6b60331d509a02867f24d7000130", "filename": "gcc/testsuite/c-c++-common/array-5.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Farray-5.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -0,0 +1,60 @@\n+/* PR c++/87996 - \"size of array is negative\" error when SIZE_MAX/2 < sizeof(array) <= SIZE_MAX\n+   { dg-do compile }\n+   { dg-options \"-ftrack-macro-expansion=0\" }  */\n+\n+#define INT16_MAX __INT16_MAX__\n+#define UINT16_MAX ((INT16_MAX << 1) + 1)\n+\n+#define DIFF_MAX __PTRDIFF_MAX__\n+#define SIZE_MAX __SIZE_MAX__\n+\n+typedef __INT16_TYPE__ int16_t;\n+typedef __INT32_TYPE__ int32_t;\n+typedef __SIZE_TYPE__  size_t;\n+\n+/* Verify errors for types.  */\n+\n+typedef char i8a1_d_m1_t[DIFF_MAX - 1];\n+/* The following should also be diagnosed because the difference between\n+   &i8a1_dx[0] and &i8a1_dx[sizeof i8a1_dx] cannot be represented.\n+typedef char i8a1_d_t[DIFF_MAX];\n+*/\n+\n+typedef char i8a1_d_p1_t[(size_t)DIFF_MAX + 1];    /* { dg-error \"size .\\[0-9\\]+. of array .i8a1_d_p1_t. exceeds maximum object size .\\[0-9\\]+.|is too large\" } */\n+\n+typedef char i8a1_s_t[SIZE_MAX];                   /* { dg-error \"size .\\[0-9\\]+. of array .i8a1_s_t. exceeds maximum object size .\\[0-9\\]+.|is too large\" } */\n+\n+typedef int16_t i16a_s_d2_t[SIZE_MAX / 2];         /* { dg-error \"size .\\[0-9\\]+. of array .i16a_s_d2_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+typedef int16_t i16a_s_d3_t[SIZE_MAX / 3];         /* { dg-error \"size .\\[0-9\\]+. of array .i16a_s_d3_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+typedef int16_t i16a_s_d4_m1_t[SIZE_MAX / 4 - 1];\n+typedef int16_t i16a_s_d4_p1_t[SIZE_MAX / 4 + 1];  /* { dg-error \"size .\\[0-9\\]+. of array .i16a_s_d4_p1_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+\n+/* The internal computation overflows the message doesn't show the object\n+   size (but GCC should compute the result and print it anyway).  */\n+typedef int32_t i32a_s_d2_t[SIZE_MAX / 2];         /* { dg-error \"size of array .i32a_s_d2_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+typedef int32_t i32a_s_d3_t[SIZE_MAX / 3];         /* { dg-error \"size of array .i32a_s_d3_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+typedef int32_t i32a_s_d4_t[SIZE_MAX / 4];         /* { dg-error \"size .\\[0-9\\]+. of array .i32a_s_d4_t. exceeds maximum object size .\\[0-9\\]+.\" } */\n+\n+\n+/* Verify errors for objects.  */\n+\n+char i8a1_d_m1[DIFF_MAX - 1];\n+/* The following should also be diagnosed because the difference between\n+   &i8a1_dx[0] and &i8a1_dx[sizeof i8a1_dx] cannot be represented.\n+char i8a1_d[DIFF_MAX];\n+*/\n+\n+char i8a_d_p1[(size_t)DIFF_MAX + 1];    /* { dg-error \"size .\\[0-9\\]+. of array .i8a_d_p1. exceeds maximum object size .\\[0-9\\]+.|is too large\" } */\n+\n+char i8a_s[SIZE_MAX];                   /* { dg-error \"size .\\[0-9\\]+. of array .i8a_s. exceeds maximum object size .\\[0-9\\]+.|is too large\" } */\n+\n+int16_t i16a_s_d2[SIZE_MAX / 2];         /* { dg-error \"size .\\[0-9\\]+. of array .i16a_s_d2. exceeds maximum object size .\\[0-9\\]+.\" } */\n+int16_t i16a_s_d3[SIZE_MAX / 3];         /* { dg-error \"size .\\[0-9\\]+. of array .i16a_s_d3. exceeds maximum object size .\\[0-9\\]+.\" } */\n+int16_t i16a_sz_d4_m1[SIZE_MAX / 4 - 1];\n+int16_t i16a_sz_d4_p1[SIZE_MAX / 4 + 1];  /* { dg-error \"size .\\[0-9\\]+. of array .i16a_sz_d4_p1. exceeds maximum object size .\\[0-9\\]+.\" } */\n+\n+/* The internal computation overflows the message doesn't show the object\n+   size (but GCC should compute the result and print it anyway).  */\n+int32_t i32a_s_d2[SIZE_MAX / 2];         /* { dg-error \"size of array .i32a_s_d2. exceeds maximum object size .\\[0-9\\]+.\" } */\n+int32_t i32a_s_d3[SIZE_MAX / 3];         /* { dg-error \"size of array .i32a_s_d3. exceeds maximum object size .\\[0-9\\]+.\" } */\n+int32_t i32a_s_d4[SIZE_MAX / 4];         /* { dg-error \"size .\\[0-9\\]+. of array .i32a_s_d4. exceeds maximum object size .\\[0-9\\]+.\" } */"}, {"sha": "6cf19cb0da9c065f732ce9ecdf3ea9d19349d475", "filename": "gcc/testsuite/c-c++-common/pr68107.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -3,35 +3,35 @@\n \n #define N ((__SIZE_MAX__ / sizeof (int)) / 2 + 1)\n \n-typedef int (*T1)[N]; /* { dg-error \"too large\" } */\n+typedef int (*T1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n typedef int (*T2)[N - 1];\n-typedef int (*T3)[N][N]; /* { dg-error \"too large\" } */\n-typedef int (*T4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n-typedef int (**T5)[N]; /* { dg-error \"too large\" } */\n+typedef int (*T3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n+typedef int (*T4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n+typedef int (**T5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n \n struct S {\n-  int (*q1)[N]; /* { dg-error \"too large\" } */\n+  int (*q1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n   int (*q2)[N - 1];\n-  int (*q3)[N][N]; /* { dg-error \"too large\" } */\n-  int (*q4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n-  int (**q5)[N]; /* { dg-error \"too large\" } */\n+  int (*q3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*q4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (**q5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n };\n \n-void fn1 (int (*p1)[N]); /* { dg-error \"too large\" } */\n+void fn1 (int (*p1)[N]); /* { dg-error \"exceeds maximum object size\" } */\n void fn2 (int (*p1)[N - 1]);\n-void fn3 (int (*p3)[N][N]); /* { dg-error \"too large\" } */\n-void fn4 (int (*p4)[N - 1][N - 1]); /* { dg-error \"too large\" } */\n-void fn5 (int (**p5)[N]); /* { dg-error \"too large\" } */\n+void fn3 (int (*p3)[N][N]); /* { dg-error \"exceeds maximum object size\" } */\n+void fn4 (int (*p4)[N - 1][N - 1]); /* { dg-error \"exceeds maximum object size\" } */\n+void fn5 (int (**p5)[N]); /* { dg-error \"exceeds maximum object size\" } */\n \n void\n fn (void)\n {\n-  int (*n1)[N]; /* { dg-error \"too large\" } */\n+  int (*n1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n   int (*n2)[N - 1];\n-  int (*n3)[N][N]; /* { dg-error \"too large\" } */\n-  int (*n4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n-  int (**n5)[N]; /* { dg-error \"too large\" } */\n+  int (*n3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*n4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (**n5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n \n-  sizeof (int (*)[N]); /* { dg-error \"too large\" } */\n-  sizeof (int [N]); /* { dg-error \"too large\" } */\n+  sizeof (int (*)[N]); /* { dg-error \"exceeds maximum object size\" } */\n+  sizeof (int [N]); /* { dg-error \"exceeds maximum object size\" } */\n }"}, {"sha": "cf73aa18e6094b5dfcc3cc94bff10ded037a0d2f", "filename": "gcc/testsuite/g++.dg/init/new38.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -5,7 +5,7 @@ large_array_char(int n)\n {\n   new char[n]\n     [1ULL << (sizeof(void *) * 4)]\n-    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of unnamed array\" }\n+    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of array\" }\n }\n \n template <typename T>\n@@ -14,15 +14,15 @@ large_array_char_template(int n)\n {\n   new char[n]\n     [1ULL << (sizeof(void *) * 4)]\n-    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of unnamed array\" }\n+    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of array\" }\n }\n \n \n template <typename T>\n void\n large_array_template1(int n)\n {\n-  new T[n] // { dg-error \"size of unnamed array is too large\" }\n+  new T[n] // { dg-error \"size of array exceeds maximum object size\" }\n     [(1ULL << (sizeof(void *) * 4)) / sizeof(T)]\n     [1ULL << (sizeof(void *) * 4)];\n }\n@@ -31,7 +31,7 @@ template <typename T>\n void\n large_array_template2(int n)\n {\n-  new T[n] // { dg-error \"size of unnamed array is too large\" }\n+  new T[n] // { dg-error \"size of array exceeds maximum object size\" }\n     [(1ULL << (sizeof(void *) * 4)) / sizeof(T)]\n     [1ULL << (sizeof(void *) * 4)];\n }\n@@ -40,7 +40,7 @@ template <typename T>\n void\n large_array_template3(int n)\n {\n-  new T[n] // { dg-error \"size of unnamed array is too large\" }\n+  new T[n] // { dg-error \"size of array exceeds maximum object size\" }\n     [(1ULL << (sizeof(void *) * 4)) / sizeof(T)]\n     [1ULL << (sizeof(void *) * 4)];\n }"}, {"sha": "e2ad67d83073e66153f0dd97bd07cf2190f1be7d", "filename": "gcc/testsuite/g++.dg/init/new43.C", "status": "modified", "additions": 93, "deletions": 90, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -30,36 +30,36 @@ void test_literal ()\n     B b;\n \n     // Verify integer literal.\n-    p = new char [-1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][-3];        // { dg-error \"size of array|narrowing conversion\" }\n-    p = new char [-4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [-6][-7];       // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) char [-1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][-3];    // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) char [-4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [-6][-7];   // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) A [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) A [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) B [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) B [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (&b) B [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (&b) B [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new char [1 - 2];         // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2 - 3];     // { dg-error \"size of array is negative\" }\n-    p = new A [2 < 1 ? -1 : -2];  // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2 - 3 * 2];    // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"size of array|narrowing conversion\" }\n+    p = new char [-1];           // { dg-error \"size .-1. of array is negative\" }\n+    p = new char [2][-3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new char [-4][5];        // { dg-error \"size .-4. of array is negative\" }\n+    p = new char [-6][-7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) char [-1];       // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) char [2][-3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [-4][5];    // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) char [-6][-7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) A [-1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) A [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) A [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) B [-1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) B [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) B [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (&b) B [-1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (&b) B [2][-3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [-4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (&b) B [-6][-7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new char [1 - 2];         // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) char [2 - 3];     // { dg-error \"size .-1. of array is negative\" }\n+    p = new A [2 < 1 ? -1 : -2];  // { dg-error \"size .-2. of array is negative\" }\n+    p = new (p) B [2 - 3 * 2];    // { dg-error \"size .-4. of array is negative\" }\n+    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"size .-4. of array|narrowing conversion\" }\n }\n \n void test_constant_expression ()\n@@ -78,36 +78,36 @@ void test_constant_expression ()\n     static const int i7 = -7;\n \n     // Verify constant expression.\n-    p = new char [i1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][i3];        // { dg-error \"size of array|narrowing conversion\" }\n-    p = new char [i4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [i6][i7];       // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) char [i1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][i3];    // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) char [i4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [i6][i7];   // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) A [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) A [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) B [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) B [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (&b) B [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (&b) B [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new short [i1 - 2];       // { dg-error \"size of array is negative\" }\n-    p = new (p) bool [i2 - 3];    // { dg-error \"size of array is negative\" }\n-    p = new A [2 < 1 ? i1 : i2];  // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2 + i3 * 2];   // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"size of array|narrowing conversion\" }\n+    p = new char [i1];           // { dg-error \"size .-1. of array is negative\" }\n+    p = new char [2][i3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new char [i4][5];        // { dg-error \"size .-4. of array is negative\" }\n+    p = new char [i6][i7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) char [i1];       // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) char [2][i3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [i4][5];    // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) char [i6][i7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) A [i1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) A [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) A [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) B [i1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) B [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) B [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (&b) B [i1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (&b) B [2][i3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [i4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (&b) B [i6][i7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new short [i1 - 2];       // { dg-error \"size .-3. of array is negative\" }\n+    p = new (p) bool [i2 - 3];    // { dg-error \"size .-5. of array is negative\" }\n+    p = new A [2 < 1 ? i1 : i2];  // { dg-error \"size .-2. of array is negative\" }\n+    p = new (p) B [2 + i3 * 2];   // { dg-error \"size .-4. of array is negative\" }\n+    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"size .-7. of array|narrowing conversion\" }\n }\n \n void test_constexpr ()\n@@ -131,34 +131,37 @@ void test_constexpr ()\n #endif\n \n     // Verify constant expression.\n-    p = new char [s1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][s3];        // { dg-error \"size of array|narrowing conversion\" }\n-    p = new char [s4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [s6][s7];       // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) char [s1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][s3];    // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) char [s4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [s6][s7];   // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) A [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) A [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (p) B [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (p) B [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new (&b) B [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n-    p = new (&b) B [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n-\n-    p = new int [s1 + s2];           // { dg-error \"size of array is negative\" }\n-    p = new (p) long [2 * s3];       // { dg-error \"size of array is negative\" }\n-    p = new A [s2 < s1 ? s1 : s2];   // { dg-error \"size of array is negative\" }\n-    p = new (p) B [s7 - s2 * 2];     // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"size of array|narrowing conversion\" }\n+    p = new char [s1];           // { dg-error \"size .-1. of array is negative\" }\n+    p = new char [2][s3];        // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new char [s4][5];        // { dg-error \"size .-4. of array is negative\" }\n+    p = new char [s6][s7];       // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) char [s1];       // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) char [2][s3];    // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) char [s4][5];    // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) char [s6][s7];   // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) A [s1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) A [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) A [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) A [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (p) B [s1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) B [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (p) B [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (p) B [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new (&b) B [s1];          // { dg-error \"size .-1. of array is negative\" }\n+    p = new (&b) B [2][s3];       // { dg-error \"size .-3. of array|narrowing conversion\" }\n+    p = new (&b) B [s4][5];       // { dg-error \"size .-4. of array is negative\" }\n+    p = new (&b) B [s6][s7];      // { dg-error \"size .-\\[67\\]. of array|narrowing conversion\" }\n+\n+    p = new int [s1 + s2];           // { dg-error \"size .-3. of array is negative\" }\n+    p = new (p) long [2 * s3];       // { dg-error \"size .-6. of array is negative\" }\n+    p = new A [s2 < s1 ? s1 : s2];   // { dg-error \"size .-1. of array is negative\" }\n+    p = new (p) B [s7 - s2 * 2];     // { dg-error \"size .-3. of array is negative\" }\n+    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"size .-2. of array|narrowing conversion\" }\n }\n+\n+/* Prune out pedantic warnins (turned into errors via -pedantic-errors).\n+  { dg-prune-output \"size of array is not an integral constant-expressio\" } */"}, {"sha": "a10ef4241361038ef2e3518673a99012c5bd6ae6", "filename": "gcc/testsuite/g++.dg/init/new44.C", "status": "modified", "additions": 259, "deletions": 259, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -37,13 +37,13 @@ void *p;\n static void __attribute__ ((used))\n test_one_dim_char_array ()\n {\n-    p = new char [MAX];                 // { dg-error \"size of array\" }\n-    p = new char [MAX - 1];             // { dg-error \"size of array\" }\n-    p = new char [MAX - 2];             // { dg-error \"size of array\" }\n-    p = new char [MAX - 99];            // { dg-error \"size of array\" }\n-    p = new char [MAX / 2];             // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 1];         // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 2];         // { dg-error \"size of array\" }\n+    p = new char [MAX];                 // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 1];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 99];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 1];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 2];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid testing the expressions below since whether or not they\n     // are accepted depends on the precision of size_t (which also\n@@ -63,20 +63,20 @@ test_one_dim_char_array ()\n static void __attribute__ ((used))\n test_one_dim_short_array ()\n {\n-    p = new short [MAX];                // { dg-error \"size of array\" }\n-    p = new short [MAX - 1];            // { dg-error \"size of array\" }\n-    p = new short [MAX - 2];            // { dg-error \"size of array\" }\n-    p = new short [MAX - 99];           // { dg-error \"size of array\" }\n-    p = new short [MAX / 2];            // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 1];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 2];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 3];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 4];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 5];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 6];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 7];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 2 - 8];        // { dg-error \"size of array\" }\n-    p = new short [MAX / 4];            // { dg-error \"size of array\" }\n+    p = new short [MAX];                // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX - 1];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX - 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX - 99];           // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 1];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 2];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 3];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 4];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 5];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 6];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 7];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 2 - 8];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new short [MAX / 4];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new short [MAX / 4 - 1];\n@@ -88,13 +88,13 @@ test_one_dim_short_array ()\n static void __attribute__ ((used))\n test_two_dim_char_array ()\n {\n-    p = new char [1][MAX];              // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][MAX - 1];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][MAX - 2];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][MAX - 99];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][MAX / 2];          // { dg-error \"size of array\" }\n-    p = new char [1][MAX / 2 - 1];      // { dg-error \"size of array\" }\n-    p = new char [1][MAX / 2 - 2];      // { dg-error \"size of array\" }\n+    p = new char [1][MAX];              // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][MAX - 1];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][MAX - 2];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][MAX - 99];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][MAX / 2];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][MAX / 2 - 1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][MAX / 2 - 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][MAX / 2 - 3];\n@@ -105,28 +105,28 @@ test_two_dim_char_array ()\n     p = new char [1][MAX / 2 - 7];      // okay\n     p = new char [1][MAX / 2 - 8];      // okay\n \n-    p = new char [2][MAX];              // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX - 1];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX - 2];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2];          // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 1];      // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 2];      // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 7];      // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 8];      // { dg-error \"size of array\" }\n-\n-    p = new char [MAX][MAX];            // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [MAX][MAX - 1];        // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [MAX][MAX - 2];        // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [MAX][MAX / 2];        // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2 - 1];    // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2 - 2];    // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2 - 7];    // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2 - 8];    // { dg-error \"size of array\" }\n-    p = new char [MAX][2];              // { dg-error \"size of array\" }\n-    p = new char [MAX][1];              // { dg-error \"size of array\" }\n-    p = new char [MAX / 2][1];          // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 1][1];      // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 2][1];      // { dg-error \"size of array\" }\n+    p = new char [2][MAX];              // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX - 1];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX - 2];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 2 - 1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 2 - 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 2 - 7];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 2 - 8];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+\n+    p = new char [MAX][MAX];            // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [MAX][MAX - 1];        // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [MAX][MAX - 2];        // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [MAX][MAX / 2];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][MAX / 2 - 1];    // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][MAX / 2 - 2];    // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][MAX / 2 - 7];    // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][MAX / 2 - 8];    // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][2];              // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX][1];              // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2][1];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 1][1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 2][1];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [MAX / 2 - 3][1];\n@@ -143,13 +143,13 @@ test_two_dim_char_array ()\n static __attribute__ ((used)) void\n test_three_dim_char_array ()\n {\n-    p = new char [1][1][MAX];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][1][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][1][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][1][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][1][MAX / 2];       // { dg-error \"size of array\" }\n-    p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n-    p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n+    p = new char [1][1][MAX];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 1];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 99];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][1][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][1][MAX / 2 - 3];\n@@ -160,20 +160,20 @@ test_three_dim_char_array ()\n     p = new char [1][1][MAX / 2 - 7];   // okay\n     p = new char [1][1][MAX / 2 - 8];   // okay\n \n-    p = new char [1][2][MAX];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [1][2][MAX / 4];       // { dg-error \"size of array\" }\n+    p = new char [1][2][MAX];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 1];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 99];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [1][2][MAX / 4 - 1];\n@@ -182,20 +182,20 @@ test_three_dim_char_array ()\n     p = new char [1][2][MAX / 4 - 3];   // okay\n     p = new char [1][2][MAX / 4 - 4];   // okay\n \n-    p = new char [2][1][MAX];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][1][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][1][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][1][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][1][MAX / 2];       // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 3];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 4];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 5];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 6];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 7];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 2 - 8];   // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX / 4];       // { dg-error \"size of array\" }\n+    p = new char [2][1][MAX];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 1];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 99];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][1][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 3];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 4];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 5];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 6];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][1][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [2][1][MAX / 4 - 1];\n@@ -204,22 +204,22 @@ test_three_dim_char_array ()\n     p = new char [2][1][MAX / 4 - 3];   // okay\n     p = new char [2][1][MAX / 4 - 4];   // okay\n \n-    p = new char [2][2][MAX];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][2][MAX / 4];       // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 4 - 1];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 4 - 2];   // { dg-error \"size of array\" }\n+    p = new char [2][2][MAX];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 1];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 99];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 4];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][2][MAX / 4 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][2][MAX / 4 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [2][2][MAX / 8];\n@@ -228,22 +228,22 @@ test_three_dim_char_array ()\n     p = new char [2][2][MAX / 8 - 2];\n     p = new char [2][2][MAX / 8 - 3];\n \n-    p = new char [2][MAX][2];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX - 1][2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX - 2][2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX - 99][2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2][2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [2][MAX / 4][2];       // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 4 - 1][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 4 - 2][2];   // { dg-error \"size of array\" }\n+    p = new char [2][MAX][2];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX - 1][2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX - 2][2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX - 99][2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2][2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [2][MAX / 4][2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 4 - 1][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [2][MAX / 4 - 2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [2][MAX / 8][2];\n@@ -252,22 +252,22 @@ test_three_dim_char_array ()\n     p = new char [2][MAX / 8 - 2][2];\n     p = new char [2][MAX / 8 - 3][2];\n \n-    p = new char [MAX][2][2];           // { dg-error \"size of array\" }\n-    p = new char [MAX - 1][2][2];       // { dg-error \"size of array\" }\n-    p = new char [MAX - 2][2][2];       // { dg-error \"size of array\" }\n-    p = new char [MAX - 99][2][2];      // { dg-error \"size of array\" }\n-    p = new char [MAX / 2][2][2];       // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 1][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 2][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 3][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 4][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 5][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 6][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 7][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 2 - 8][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 4][2][2];       // { dg-error \"size of array\" }\n-    p = new char [MAX / 4 - 1][2][2];   // { dg-error \"size of array\" }\n-    p = new char [MAX / 4 - 2][2][2];   // { dg-error \"size of array\" }\n+    p = new char [MAX][2][2];           // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 1][2][2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 2][2][2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX - 99][2][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2][2][2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 1][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 2][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 3][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 4][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 5][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 6][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 7][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 2 - 8][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 4][2][2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 4 - 1][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [MAX / 4 - 2][2][2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new char [MAX / 8][2][2];\n@@ -276,9 +276,9 @@ test_three_dim_char_array ()\n     p = new char [MAX / 8 - 2][2][2];\n     p = new char [MAX / 8 - 3][2][2];\n \n-    p = new char [MAX][MAX][MAX];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX][MAX];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n     p = new char [MAX][MAX / 2][MAX / 2]; // { dg-error \"size of (unnamed )?array\" }\n     p = new char [MAX / 2][MAX / 2][MAX / 2]; // { dg-error \"size of (unnamed )?array\" }\n }\n@@ -297,9 +297,9 @@ test_N_dim_char_array ()\n     p = new char        [N][N][N][N][N][N][N];\n     p = new char [N / 2][2][N][N][N][N][N][N];\n     p = new char [N - 1][N / 2][N][N][N][N][N][N];\n-    p = new char [N / 2][N][N][N][N][N][N][N];  // { dg-error \"size of array\" }\n-    p = new char [N - 1][N][N][N][N][N][N][N];  // { dg-error \"size of array\" }\n-    p = new char [N]    [N][N][N][N][N][N][N];  // { dg-error \"size of array\" }\n+    p = new char [N / 2][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [N - 1][N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new char [N]    [N][N][N][N][N][N][N];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n }\n \n typedef struct Byte {\n@@ -316,17 +316,17 @@ void* operator new[] (size_t, B*);\n static void __attribute__ ((used))\n test_one_dim_byte_array (void *p)\n {\n-    p = new (p) B [MAX];                // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 1];            // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 2];            // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 99];           // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2];            // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 1];        // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 2];        // { dg-error \"size of array\" }\n+    p = new (p) B [MAX];                // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 1];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 99];           // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2];            // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 1];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 2];        // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid testing the expressions below since whether or not they\n     // are accepted depends on the precision of size_t (which determines\n-    // the size of the cookie).\n+    // the size .\\[0-9\\]+. of the cookie).\n     // p = new (p) B [MAX / 2 - 3];\n     // p = new (p) B [MAX / 2 - 4];\n     // p = new (p) B [MAX / 2 - 5];\n@@ -343,13 +343,13 @@ test_one_dim_byte_array (void *p)\n static void __attribute__ ((used))\n test_placement_two_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][MAX];             // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][MAX - 1];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][MAX - 2];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][MAX - 99];        // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][MAX / 2];         // { dg-error \"size of array\" }\n-    p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size of array\" }\n-    p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size of array\" }\n+    p = new (p) B [1][MAX];             // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 1];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 2];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 99];        // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][MAX / 2];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][MAX / 2 - 3];\n@@ -360,28 +360,28 @@ test_placement_two_dim_byte_struct_array (void *p)\n     p = new (p) B [1][MAX / 2 - 7];      // okay\n     p = new (p) B [1][MAX / 2 - 8];      // okay\n \n-    p = new (p) B [2][MAX];             // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX - 1];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX - 2];         // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2];         // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 1];     // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 2];     // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 7];     // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 8];     // { dg-error \"size of array\" }\n-\n-    p = new (p) B [MAX][MAX];           // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [MAX][MAX / 2];       // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX / 2 - 1];   // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX / 2 - 2];   // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX / 2 - 7];   // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX / 2 - 8];   // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][2];             // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][1];             // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2][1];         // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 1][1];     // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 2][1];     // { dg-error \"size of array\" }\n+    p = new (p) B [2][MAX];             // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 1];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 2];         // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 2 - 1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 2 - 2];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 2 - 7];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 2 - 8];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+\n+    p = new (p) B [MAX][MAX];           // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [MAX][MAX / 2];       // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][MAX / 2 - 1];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][MAX / 2 - 2];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][MAX / 2 - 7];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][MAX / 2 - 8];   // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][2];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX][1];             // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2][1];         // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 1][1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 2][1];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [MAX / 2 - 3][1];\n@@ -398,13 +398,13 @@ test_placement_two_dim_byte_struct_array (void *p)\n static __attribute__ ((used)) void\n test_placement_three_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][1][MAX];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][1][MAX / 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n+    p = new (p) B [1][1][MAX];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX / 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][1][MAX / 2 - 3];\n@@ -415,20 +415,20 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][1][MAX / 2 - 7];   // okay\n     p = new (p) B [1][1][MAX / 2 - 8];   // okay\n \n-    p = new (p) B [1][2][MAX];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [1][2][MAX / 4];      // { dg-error \"size of array\" }\n+    p = new (p) B [1][2][MAX];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [1][2][MAX / 4 - 1];\n@@ -437,20 +437,20 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][2][MAX / 4 - 3];   // okay\n     p = new (p) B [1][2][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][1][MAX];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][1][MAX / 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 3];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 4];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 5];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 6];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 7];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 2 - 8];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX / 4];      // { dg-error \"size of array\" }\n+    p = new (p) B [2][1][MAX];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX / 2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 3];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 4];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 5];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 6];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 7];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 2 - 8];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][1][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [2][1][MAX / 4 - 1];\n@@ -459,22 +459,22 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][1][MAX / 4 - 3];   // okay\n     p = new (p) B [2][1][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][2][MAX];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][2][MAX / 4];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 4 - 1];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 4 - 2];  // { dg-error \"size of array\" }\n+    p = new (p) B [2][2][MAX];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 4];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][2][MAX / 4 - 1];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][2][MAX / 4 - 2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [2][2][MAX / 8];\n@@ -483,22 +483,22 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][2][MAX / 8 - 2];\n     p = new (p) B [2][2][MAX / 8 - 3];\n \n-    p = new (p) B [2][MAX][2];          // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size of (unnamed )?array\" }\n-    p = new (p) B [2][MAX / 4][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 4 - 1][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 4 - 2][2];  // { dg-error \"size of array\" }\n+    p = new (p) B [2][MAX][2];          // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size .\\[0-9\\]+. of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 4][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 4 - 1][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [2][MAX / 4 - 2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [2][MAX / 8][2];\n@@ -507,22 +507,22 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][MAX / 8 - 2][2];\n     p = new (p) B [2][MAX / 8 - 3][2];\n \n-    p = new (p) B [MAX][2][2];          // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 1][2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 2][2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [MAX - 99][2][2];     // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2][2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 1][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 2][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 3][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 4][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 5][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 6][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 7][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 2 - 8][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 4][2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 4 - 1][2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [MAX / 4 - 2][2][2];  // { dg-error \"size of array\" }\n+    p = new (p) B [MAX][2][2];          // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 1][2][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 2][2][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX - 99][2][2];     // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2][2][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 1][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 2][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 3][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 4][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 5][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 6][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 7][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 2 - 8][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 4][2][2];      // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 4 - 1][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n+    p = new (p) B [MAX / 4 - 2][2][2];  // { dg-error \"size .\\[0-9\\]+. of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n     // p = new (p) B [MAX / 8][2][2];"}, {"sha": "f0b3921cb34f21c72a9be37f93b05c5b97cc2d5d", "filename": "gcc/testsuite/g++.dg/init/new46.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -37,7 +37,7 @@ char* fn2_2_x () {\n \n template <size_t M, size_t N>\n char* fn2_2 () {\n-    return new char [M][N];   // { dg-error \"size of array is too large\" }\n+    return new char [M][N];   // { dg-error \"size .\\[0-9\\]+. of array exceeds maximum object size\" }\n }\n \n // Not instantiated (must not be diagnosed).\n@@ -50,7 +50,7 @@ T* fn3_x () {\n template <class T>\n T* fn3 () {\n     const size_t a = sizeof (T);\n-    return new T [a];         // { dg-error \"size of array is too large\" }\n+    return new T [a];         // { dg-error \"size .\\[0-9\\]+. of array exceeds maximum object size\" }\n }\n \n "}, {"sha": "631e3a895f8b569e6d127c363c749e8160448309", "filename": "gcc/testsuite/g++.dg/other/large-size-array.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -20,7 +20,7 @@ sub (int *a)\n int\n main (void)\n {\n-  int a[DIM][DIM];  /* { dg-error \"size of array 'a' is too large\" } */\n+  int a[DIM][DIM];  /* { dg-error \"exceeds maximum object size\" } */\n   return sub (&a[0][0]);  /* { dg-error \"declared\" } */\n }\n "}, {"sha": "a99d747026a6456826a7060b0202998c5d260620", "filename": "gcc/testsuite/g++.dg/other/new-size-type.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -5,5 +5,5 @@\n const char*\n foo()\n {\n-    return new char[~static_cast<size_t>(0)];// { dg-error \"size of array\" }\n+    return new char[~static_cast<size_t>(0)];// { dg-error \"exceeds maximum object size\" }\n }"}, {"sha": "98723ace60998f975b66968e44e59b2f03c0a17f", "filename": "gcc/testsuite/g++.dg/template/array30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray30.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,7 +1,7 @@\n template <int I>\n struct A\n {\n-  int ar[I][I][I][I][I][I][I][I][I][I]; // { dg-error \"too large\" }\n+  int ar[I][I][I][I][I][I][I][I][I][I]; // { dg-error \"exceeds maximum object size\" }\n };\n \n A<66000> a;"}, {"sha": "f4467c7653cb2e20a3b84a0397a6fd9bd21ce850", "filename": "gcc/testsuite/g++.dg/template/array32.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray32.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -0,0 +1,27 @@\n+/* PR c++/87996 - \"size of array is negative\" error when SIZE_MAX/2 < sizeof(array) <= SIZE_MAX\n+   { dg-do compile }\n+   { dg-options \"-ftrack-macro-expansion=0\" }  */\n+\n+#define SIZE_MAX   __SIZE_MAX__\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+template <size_t N> struct Aszmax_d2 {\n+  char a[N];\n+};\n+Aszmax_d2<SIZE_MAX / 2> aszmax_d2;\n+\n+template <size_t N> struct Aszmax_d2_p1 {\n+  char a[N];   // { dg-error \"exceeds maximum object size\" }\n+};\n+Aszmax_d2_p1<SIZE_MAX / 2 + 1> aszmax_d2_p1;\n+\n+template <size_t N> struct Aszmax {\n+  char a[N];   // { dg-error \"exceeds maximum object size\" }\n+};\n+Aszmax<SIZE_MAX> aszmax;\n+\n+template <size_t M, size_t N> struct Aszmax_d2_szmax_d2 {\n+  char a[M][N];   // { dg-error \"exceeds maximum object size\" }\n+};\n+Aszmax_d2_szmax_d2<SIZE_MAX / 2, SIZE_MAX / 2> aszmaxd2_szmaxd2;"}, {"sha": "19ba9e74787bbdb2c2cf90e211f292085f9d5274", "filename": "gcc/testsuite/g++.dg/template/dependent-name3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -11,7 +11,7 @@ template<int I> struct A\n template<int N> struct B\n {\n   int x[A<N>::zero];       // { dg-error \"zero\" }\n-  int y[A<N>::minus_one];  // { dg-error \"size of array|narrowing conversion\" }\n+  int y[A<N>::minus_one];  // { dg-error \"size .-1. of array is negative|narrowing conversion|not an integral constant-expression\" }\n };\n \n B<0> b;"}, {"sha": "d3a3221615dc94354329d24fb1f5c3a1a298f714", "filename": "gcc/testsuite/g++.dg/ubsan/pr81530.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -2,4 +2,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fsanitize=undefined\" } */\n \n-int a[(long) 4e20]; /* { dg-error \"7:size of array .a. is (too large|negative)\" } */\n+int a[(long) 4e20]; /* { dg-error \"7:size of array .a.\" } */"}, {"sha": "08e68f68a1356e348cc9e91d39ddccb0eeca6a71", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/array1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -2,5 +2,5 @@\n // GROUPS passed array-bindings\n \n extern \"C\" int printf (const char *, ...);\n-char array[~(~((__SIZE_TYPE__)0ul)>>1)|~(((__SIZE_TYPE__)0ul)>>3)];  // { dg-error \"39:size of array .array. is negative\" } overflow in array dimension.*\n+char array[~(~((__SIZE_TYPE__)0ul)>>1)|~(((__SIZE_TYPE__)0ul)>>3)];  // { dg-error \"39:exceeds maximum object size\" } overflow in array dimension.*\n int main () { printf (\"PASS\\n\"); return 0; }"}, {"sha": "7009f547b447c6a1f0bb889a55691344c24be907", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p6149.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -1,4 +1,4 @@\n // { dg-do assemble  }\n // prms-id: 6149\n \n-int a[3 - sizeof(double)];\t// { dg-error \"9:size of array .a. is negative\" } \n+int a[3 - sizeof(double)];\t// { dg-error \"9:size .\\[0-9\\]+. of array .a. exceeds maximum object size\" }"}, {"sha": "0a83b9c4176eb2a02ab76ac79d290133b1db649e", "filename": "gcc/testsuite/gcc.dg/large-size-array-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-3.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -16,6 +16,6 @@ sub (int *a)\n int\n main (void)\n {\n-  int a[DIM][DIM];  /* { dg-error \"size of array 'a' is too large\" } */\n+  int a[DIM][DIM];  /* { dg-error \"exceeds maximum object size|size of array 'a' is too large\" } */\n   return sub (&a[0][0]);\n }"}, {"sha": "f9acdf4528bba4b9427b2f5e3f7707424aebbba6", "filename": "gcc/testsuite/gcc.dg/large-size-array-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-5.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -3,7 +3,7 @@\n \n typedef __SIZE_TYPE__ size_t;\n \n-extern char a[((size_t)-1 >> 1) + 1]; /* { dg-error \"too large\" } */\n+extern char a[((size_t)-1 >> 1) + 1]; /* { dg-error \"is too large\" } */\n extern char b[((size_t)-1 >> 1)];\n-extern int c[(((size_t)-1 >> 1) + 1) / sizeof(int)]; /* { dg-error \"too large\" } */\n+extern int c[(((size_t)-1 >> 1) + 1) / sizeof(int)]; /* { dg-error \"exceeds maximum object size\" } */\n extern int d[((size_t)-1 >> 1) / sizeof(int)];"}, {"sha": "79e371f4a778a2a895c616ff04976218dc4a7aa7", "filename": "gcc/testsuite/gcc.dg/large-size-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -16,6 +16,6 @@ sub (int *a)\n int\n main (void)\n {\n-  int a[DIM][DIM];  /* { dg-error \"size of array 'a' is too large\" } */\n+  int a[DIM][DIM];  /* { dg-error \"exceeds maximum object size\" } */\n   return sub (&a[0][0]);\n }"}, {"sha": "af7abd87b7ab53665fed1f839e486c8e42b5adc6", "filename": "gcc/tree.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -7500,10 +7500,12 @@ compare_tree_int (const_tree t, unsigned HOST_WIDE_INT u)\n \n /* Return true if SIZE represents a constant size that is in bounds of\n    what the middle-end and the backend accepts (covering not more than\n-   half of the address-space).  */\n+   half of the address-space).\n+   When PERR is non-null, set *PERR on failure to the description of\n+   why SIZE is not valid.  */\n \n bool\n-valid_constant_size_p (const_tree size)\n+valid_constant_size_p (const_tree size, cst_size_error *perr /* = NULL */)\n {\n   if (POLY_INT_CST_P (size))\n     {\n@@ -7514,10 +7516,33 @@ valid_constant_size_p (const_tree size)\n \t  return false;\n       return true;\n     }\n-  if (! tree_fits_uhwi_p (size)\n-      || TREE_OVERFLOW (size)\n-      || tree_int_cst_sign_bit (size) != 0)\n-    return false;\n+\n+  cst_size_error error;\n+  if (!perr)\n+    perr = &error;\n+\n+  if (TREE_OVERFLOW (size))\n+    {\n+      *perr = cst_size_overflow;\n+      return false;\n+    }\n+\n+  tree type = TREE_TYPE (size);\n+  if (TYPE_UNSIGNED (type))\n+    {\n+      if (!tree_fits_uhwi_p (size)\n+\t  || tree_int_cst_sign_bit (size))\n+\t{\n+\t  *perr = cst_size_too_big;\n+\t  return false;\n+\t}\n+    }\n+  else if (tree_int_cst_sign_bit (size))\n+    {\n+      *perr = cst_size_negative;\n+      return false;\n+    }\n+\n   return true;\n }\n \n@@ -15003,6 +15028,15 @@ const builtin_structptr_type builtin_structptr_types[6] =\n   { const_fexcept_t_ptr_type_node, const_ptr_type_node, \"fexcept_t\" }\n };\n \n+/* Return the maximum object size.  */\n+\n+tree\n+max_object_size (void)\n+{\n+  /* To do: Make this a configurable parameter.  */\n+  return TYPE_MAX_VALUE (ptrdiff_type_node);\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "a1c30e42cce5cbb4c7a561e23d8a51938fce594d", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8cef1e240989c199dfd8538c826c134098f85/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=28a8cef1e240989c199dfd8538c826c134098f85", "patch": "@@ -4347,7 +4347,18 @@ extern int tree_int_cst_sign_bit (const_tree);\n extern unsigned int tree_int_cst_min_precision (tree, signop);\n extern tree strip_array_types (tree);\n extern tree excess_precision_type (tree);\n-extern bool valid_constant_size_p (const_tree);\n+\n+/* Desription of the reason why the argument of valid_constant_size_p\n+   is not a valid size.  */\n+enum cst_size_error {\n+  cst_size_ok,\n+  cst_size_negative,\n+  cst_size_too_big,\n+  cst_size_overflow\n+};\n+\n+extern bool valid_constant_size_p (const_tree, cst_size_error * = NULL);\n+extern tree max_object_size ();\n \n /* Return true if T holds a value that can be represented as a poly_int64\n    without loss of precision.  Store the value in *VALUE if so.  */"}]}