{"sha": "83a4216dd29316ed9a95931b306ea415664acf51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNDIxNmRkMjkzMTZlZDlhOTU5MzFiMzA2ZWE0MTU2NjRhY2Y1MQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2014-08-09T17:56:57Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-08-09T17:56:57Z"}, "message": "random.tcc (uniform_on_sphere_helper): Define.\n\n        * include/ext/random.tcc (uniform_on_sphere_helper): Define.\n        (uniform_on_sphere_distribution::operator()): Use the new helper\n        class for the implementation.\n\n        * testsuite/ext/random/uniform_on_sphere_distribution/operators/\n        equal.cc: Remove bogus part of comment.\n        * testsuite/ext/random/uniform_on_sphere_distribution/operators/\n        inequal.cc: Likewise.\n        * testsuite/ext/random/uniform_on_sphere_distribution/operators/\n        serialize.cc: Add check to verify result of serialzation and\n        deserialization.\n        * testsuite/ext/random/uniform_on_sphere_distribution/operators/\n        generate.cc: New file.\n\nFrom-SVN: r213779", "tree": {"sha": "fe2db3e1f114899d237246f8880766ed03556483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2db3e1f114899d237246f8880766ed03556483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a4216dd29316ed9a95931b306ea415664acf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4216dd29316ed9a95931b306ea415664acf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a4216dd29316ed9a95931b306ea415664acf51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a4216dd29316ed9a95931b306ea415664acf51/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42ee80b92069984df4ae2eb71cee2623aaf530c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ee80b92069984df4ae2eb71cee2623aaf530c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ee80b92069984df4ae2eb71cee2623aaf530c8"}], "stats": {"total": 177, "additions": 161, "deletions": 16}, "files": [{"sha": "65134498fe7f83be1ef2b79eee8a5a6163d3b6e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -1,3 +1,19 @@\n+2014-08-09  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* include/ext/random.tcc (uniform_on_sphere_helper): Define.\n+\t(uniform_on_sphere_distribution::operator()): Use the new helper\n+\tclass for the implementation.\n+\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/operators/\n+\tequal.cc: Remove bogus part of comment.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/operators/\n+\tserialize.cc: Add check to verify result of serialzation and\n+\tdeserialization.\n+\t* testsuite/ext/random/uniform_on_sphere_distribution/operators/\n+\tgenerate.cc: New file.\n+\n 2014-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/ext/pod_char_traits.h (char_traits<__gnu_cxx::"}, {"sha": "997c204ffe223dc8def2d6d431df28da8fab499a", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -1540,25 +1540,92 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  namespace {\n+\n+    // Helper class for the uniform_on_sphere_distribution generation\n+    // function.\n+    template<std::size_t _Dimen, typename _RealType>\n+      class uniform_on_sphere_helper\n+      {\n+\ttypedef typename uniform_on_sphere_distribution<_Dimen, _RealType>::result_type result_type;\n+\n+      public:\n+\ttemplate<typename _NormalDistribution, typename _UniformRandomNumberGenerator>\n+\tresult_type operator()(_NormalDistribution& __nd,\n+\t\t\t       _UniformRandomNumberGenerator& __urng)\n+        {\n+\t  result_type __ret;\n+\t  typename result_type::value_type __norm;\n+\n+\t  do\n+\t    {\n+\t      auto __sum = _RealType(0);\n+\n+\t      std::generate(__ret.begin(), __ret.end(),\n+\t\t\t    [&__nd, &__urng, &__sum](){\n+\t\t\t      _RealType __t = __nd(__urng);\n+\t\t\t      __sum += __t * __t;\n+\t\t\t      return __t; });\n+\t      __norm = std::sqrt(__sum);\n+\t    }\n+\t  while (__norm == _RealType(0) || ! std::isfinite(__norm));\n+\n+\t  std::transform(__ret.begin(), __ret.end(), __ret.begin(),\n+\t\t\t [__norm](_RealType __val){ return __val / __norm; });\n+\n+\t  return __ret;\n+        }\n+      };\n+\n+\n+    template<typename _RealType>\n+      class uniform_on_sphere_helper<2, _RealType>\n+      {\n+\ttypedef typename uniform_on_sphere_distribution<2, _RealType>::\n+\t  result_type result_type;\n+\n+      public:\n+\ttemplate<typename _NormalDistribution,\n+\t\t typename _UniformRandomNumberGenerator>\n+\tresult_type operator()(_NormalDistribution&,\n+\t\t\t       _UniformRandomNumberGenerator& __urng)\n+        {\n+\t  result_type __ret;\n+\t  _RealType __sq;\n+\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator,\n+\t\t\t\t  _RealType> __aurng(__urng);\n+\n+\t  do\n+\t    {\n+\t      __ret[0] = _RealType(2) * __aurng() - _RealType(1);\n+\t      __ret[1] = _RealType(2) * __aurng() - _RealType(1);\n+\n+\t      __sq = __ret[0] * __ret[0] + __ret[1] * __ret[1];\n+\t    }\n+\t  while (__sq == _RealType(0) || __sq > _RealType(1));\n+\n+\t  // Yes, we do not just use sqrt(__sq) because hypot() is more\n+\t  // accurate.\n+\t  auto __norm = std::hypot(__ret[0], __ret[1]);\n+\t  __ret[0] /= __norm;\n+\t  __ret[1] /= __norm;\n+\n+\t  return __ret;\n+        }\n+      };\n+\n+  }\n+\n+\n   template<std::size_t _Dimen, typename _RealType>\n     template<typename _UniformRandomNumberGenerator>\n       typename uniform_on_sphere_distribution<_Dimen, _RealType>::result_type\n       uniform_on_sphere_distribution<_Dimen, _RealType>::\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __p)\n       {\n-\tresult_type __ret;\n-\t_RealType __sum = _RealType(0);\n-\n-\tstd::generate(__ret.begin(), __ret.end(),\n-\t\t      [&__urng, &__sum, this](){ _RealType __t = _M_nd(__urng);\n-\t\t\t\t\t\t __sum += __t * __t;\n-\t\t\t\t\t\t return __t; });\n-\tauto __norm = std::sqrt(__sum);\n-\tstd::transform(__ret.begin(), __ret.end(), __ret.begin(),\n-\t\t       [__norm](_RealType __val){ return __val / __norm; });\n-\n-\treturn __ret;\n+        uniform_on_sphere_helper<_Dimen, _RealType> __helper;\n+        return __helper(_M_nd, __urng);\n       }\n \n   template<std::size_t _Dimen, typename _RealType>"}, {"sha": "f5b8d1702006c3c2ce5f95d8c3af1780bcebb869", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fequal.cc?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -20,7 +20,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.5.8.4.5 Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+// Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n \n #include <ext/random>\n #include <testsuite_hooks.h>"}, {"sha": "c4024443ff0f6da08bc7bedd26d0043ceac46399", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/generate.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fgenerate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fgenerate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fgenerate.cc?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-08-09  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+// Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  std::minstd_rand0 rng;\n+\n+  __gnu_cxx::uniform_on_sphere_distribution<3> u3;\n+\n+  for (size_t n = 0; n < 1000; ++n)\n+    {\n+      auto r = u3(rng);\n+\n+      VERIFY (r[0] != 0.0 || r[1] != 0.0 || r[2] != 0.0);\n+    }\n+\n+  __gnu_cxx::uniform_on_sphere_distribution<2> u2;\n+\n+  for (size_t n = 0; n < 1000; ++n)\n+    {\n+      auto r = u2(rng);\n+\n+      VERIFY (r[0] != 0.0 || r[1] != 0.0);\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "26756526f86bbb951e4462e6cd6b856de1811907", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/inequal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Finequal.cc?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -20,7 +20,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.5.8.4.5 Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+// Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n \n #include <ext/random>\n #include <testsuite_hooks.h>"}, {"sha": "e9a758c217e3d204dcb3c31b63a68ee6b1a2cf59", "filename": "libstdc++-v3/testsuite/ext/random/uniform_on_sphere_distribution/operators/serialize.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a4216dd29316ed9a95931b306ea415664acf51/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_on_sphere_distribution%2Foperators%2Fserialize.cc?ref=83a4216dd29316ed9a95931b306ea415664acf51", "patch": "@@ -20,8 +20,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.3.* Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n-// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+// Class template uniform_on_sphere_distribution [rand.dist.ext.uniform_on_sphere]\n+// Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <ext/random>\n #include <sstream>\n@@ -40,6 +40,8 @@ test01()\n   str << u;\n \n   str >> v;\n+\n+  VERIFY( u == v );\n }\n \n int"}]}