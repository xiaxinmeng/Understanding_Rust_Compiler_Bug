{"sha": "c116cd05fb0e993227162e466ba5f5093392e3e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExNmNkMDVmYjBlOTkzMjI3MTYyZTQ2NmJhNWY1MDkzMzkyZTNlNg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-19T20:02:28Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-19T20:02:28Z"}, "message": "c.opt (Waddress): New.\n\n2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* c.opt (Waddress): New.\n\t* common.opt (Walways-true): Delete.\n\t(Wstring-literal-comparison): Delete.\n\t* doc/invoke.texi (Warning Options): Delete -Walways-true and\n\t-Wstring-literal-comparison. Add -Waddress.\n\t(Waddress): New.\n\t(Walways-true): Delete.\n\t(Wstring-literal-comparison): Delete.\n\t* doc/extend.texi (#pragma GCC diagnostic): Use -Wformat\n\tconsistently instead of -Walways-true in example.\n\t* c-opts.c (c_common_handle_option): -Waddress is enabled by -Wall.\n\t* c-typeck.c (parser_build_binary_op): Replace\n\t-Wstring-literal-comparison and -Walways-true with -Waddress.\n\t* c-common.c (c_common_truthvalue_conversion): Replace -Walways-true\n\twith -Waddress.\n\ncp/\n\t* typeck.c (build_binary_op): Replace -Wstring-literal-comparison\n\tand -Walways-true with -Waddress.\n\t* cvt.c (convert_to_void): Replace unconditional warning with\n\t-Waddress.\n\ntestsuite/\n\t* gcc.dg/20031012-1.c: Replace -Walways-true with -Waddress.\n\t* gcc.dg/Walways-true-1.c: Likewise.\n\t* gcc.dg/weak/weak-3.c: Likewise.\n\t* gcc.dg/Werror-1.c: Likewise.\n\t* gcc.dg/Werror-3.c: Likewise.\n\t* gcc.dg/Werror-4.c: Likewise.\n\t* gcc.dg/Werror-5.c: Likewise.\n\t* gcc.dg/Werror-6.c: Likewise.\n\t* gcc.dg/Werror-7.c: Likewise.\n\t* gcc.dg/Werror-8.c: Likewise.\n\t* gcc.dg/Werror-10.c: Likewise.\n\t* gcc.dg/Werror-11.c: Likewise.\n\t* gcc.dg/Werror-12.c: Likewise.\n\t* g++.old-deja/g++.mike/warn8.C: Likewise.\n\t* g++.dg/warn/Walways-true-1.C: Likewise.\n\t* g++.dg/warn/Walways-true-2.C: Likewise.\n\t* g++.dg/warn/noeffect8.C: Warn only with -Waddress.\n\t* g++.dg/warn/Wstring-literal-comparison-1.C: Replace\n\t-Wstring-literal-comparison with -Waddress.\n\t* gcc.dg/Wstring-literal-comparison-4.c: Replace\n\t-Wno-string-literal-comparison with -Wno-address.\n\nFrom-SVN: r122136", "tree": {"sha": "1df9bafac89190d0399bae0615e62acab0097f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1df9bafac89190d0399bae0615e62acab0097f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c116cd05fb0e993227162e466ba5f5093392e3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c116cd05fb0e993227162e466ba5f5093392e3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c116cd05fb0e993227162e466ba5f5093392e3e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c116cd05fb0e993227162e466ba5f5093392e3e6/comments", "author": null, "committer": null, "parents": [{"sha": "459ffad3fd0486d686a14f45f59167b1e08c240a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459ffad3fd0486d686a14f45f59167b1e08c240a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459ffad3fd0486d686a14f45f59167b1e08c240a"}], "stats": {"total": 181, "additions": 111, "deletions": 70}, "files": [{"sha": "631441488db6227962a9941fee1eb1ea08c6df7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,3 +1,21 @@\n+2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (Waddress): New.\n+\t* common.opt (Walways-true): Delete.\n+\t(Wstring-literal-comparison): Delete.\n+\t* doc/invoke.texi (Warning Options): Delete -Walways-true and\n+\t-Wstring-literal-comparison. Add -Waddress.\n+\t(Waddress): New.\n+\t(Walways-true): Delete.\n+\t(Wstring-literal-comparison): Delete.\n+\t* doc/extend.texi (#pragma GCC diagnostic): Use -Wformat\n+\tconsistently instead of -Walways-true in example.\n+\t* c-opts.c (c_common_handle_option): -Waddress is enabled by -Wall.\n+\t* c-typeck.c (parser_build_binary_op): Replace\n+\t-Wstring-literal-comparison and -Walways-true with -Waddress.\n+\t* c-common.c (c_common_truthvalue_conversion): Replace -Walways-true\n+\twith -Waddress.\n+\t\n 2007-02-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-cfg.c (dump_function_to_file): Be prepared for functions"}, {"sha": "51fd22672cf3f4b9e8c75a7e6fb2e6cc89ddbeac", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -2716,7 +2716,7 @@ c_common_truthvalue_conversion (tree expr)\n \tif (decl_with_nonnull_addr_p (inner))\n \t  {\n \t    /* Common Ada/Pascal programmer's mistake.  */\n-\t    warning (OPT_Walways_true,\n+\t    warning (OPT_Waddress,\n \t\t     \"the address of %qD will always evaluate as %<true%>\",\n \t\t     inner);\n \t    return truthvalue_true_node;"}, {"sha": "2839e6683d016c195cc4a9bfce85b3549e8835b5", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -395,9 +395,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \twarn_sign_compare = value;\n       warn_switch = value;\n       warn_strict_aliasing = value;\n+      warn_address = value;\n       warn_strict_overflow = value;\n-      warn_string_literal_comparison = value;\n-      warn_always_true = value;\n       warn_array_bounds = value;\n \n       /* Only warn about unknown pragmas that are not in system"}, {"sha": "d3495a9f71dec39cf0a94330f94941246781c05e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -2640,13 +2640,11 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n     {\n       if ((code1 == STRING_CST && !integer_zerop (arg2.value))\n \t  || (code2 == STRING_CST && !integer_zerop (arg1.value)))\n-\twarning (OPT_Wstring_literal_comparison,\n-\t\t \"comparison with string literal\");\n+\twarning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n     }\n   else if (TREE_CODE_CLASS (code) == tcc_comparison\n \t   && (code1 == STRING_CST || code2 == STRING_CST))\n-    warning (OPT_Wstring_literal_comparison,\n-\t     \"comparison with string literal\");\n+    warning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n \n   if (TREE_OVERFLOW_P (result.value) \n       && !TREE_OVERFLOW_P (arg1.value) \n@@ -8025,15 +8023,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t{\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n-\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t    warning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t     TREE_OPERAND (op0, 0));\n \t  result_type = type0;\n \t}\n       else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n \t{\n \t  if (TREE_CODE (op1) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n-\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t    warning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t     TREE_OPERAND (op1, 0));\n \t  result_type = type1;\n \t}"}, {"sha": "c384f52b3a4c5a428744d46b199b620a64b11ac1", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -116,6 +116,10 @@ Wabi\n C++ ObjC++ Var(warn_abi) Warning\n Warn about things that will change when compiling with an ABI-compliant compiler\n \n+Waddress\n+C ObjC C++ ObjC++ Var(warn_address) Warning\n+Warn about suspicious uses of memory addresses\n+\n Wall\n C ObjC C++ ObjC++ Warning\n Enable most warning messages"}, {"sha": "1be3b748d01b7a3656571ce5bbc9dc6772b05503", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -74,10 +74,6 @@ Waggregate-return\n Common Var(warn_aggregate_return) Warning\n Warn about returning structures, unions or arrays\n \n-Walways-true\n-Common Var(warn_always_true) Warning\n-Warn about comparisons that always evaluate to true\n-\n Warray-bounds\n Common Var(warn_array_bounds)\n Warn if an array is accessed out of bounds\n@@ -166,10 +162,6 @@ Wstrict-overflow=\n Common Joined UInteger\n Warn about optimizations that assume that signed overflow is undefined\n \n-Wstring-literal-comparison\n-Common Var(warn_string_literal_comparison) Warning\n-Warn about comparisons to constant string literals\n-\n Wswitch\n Common Var(warn_switch) Warning\n Warn about enumerated switches, with no default, missing a case"}, {"sha": "0c6b90d7edda001d58eac36bba90d2257dd6fae9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,3 +1,10 @@\n+2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* typeck.c (build_binary_op): Replace -Wstring-literal-comparison\n+\tand -Walways-true with -Waddress.\n+\t* cvt.c (convert_to_void): Replace unconditional warning with\n+\t-Waddress.\n+\n 2007-02-18  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* decl.c, tree.c: Fix comment typos."}, {"sha": "4e628a5dd929a6fe3ae7e938cd12406d21d7b897", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -929,7 +929,7 @@ convert_to_void (tree expr, const char *implicit)\n     else if (implicit && probe == expr && is_overloaded_fn (probe))\n       {\n \t/* Only warn when there is no &.  */\n-\twarning (0, \"%s is a reference, not call, to function %qE\",\n+\twarning (OPT_Waddress, \"%s is a reference, not call, to function %qE\",\n \t\t implicit, expr);\n \tif (TREE_CODE (expr) == COMPONENT_REF)\n \t  expr = TREE_OPERAND (expr, 0);"}, {"sha": "63f03ccecded297fa015a33f4844c0d1a43b1939", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -3319,8 +3319,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t \"comparing floating point with == or != is unsafe\");\n       if ((TREE_CODE (orig_op0) == STRING_CST && !integer_zerop (op1))\n \t  || (TREE_CODE (orig_op1) == STRING_CST && !integer_zerop (op0)))\n-\twarning (OPT_Wstring_literal_comparison,\n-\t\t \"comparison with string literal\");\n+\twarning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n \n       build_type = boolean_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n@@ -3337,7 +3336,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t{\n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op0, 0)))\n-\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t    warning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t     TREE_OPERAND (op0, 0));\n \t  result_type = type0;\n \t}\n@@ -3346,7 +3345,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t{\n \t  if (TREE_CODE (op1) == ADDR_EXPR \n \t      && decl_with_nonnull_addr_p (TREE_OPERAND (op1, 0)))\n-\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t    warning (OPT_Waddress, \"the address of %qD will never be NULL\",\n \t\t     TREE_OPERAND (op1, 0));\n \t  result_type = type1;\n \t}\n@@ -3495,8 +3494,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case GT_EXPR:\n       if (TREE_CODE (orig_op0) == STRING_CST\n \t  || TREE_CODE (orig_op1) == STRING_CST)\n-\twarning (OPT_Wstring_literal_comparison,\n-\t\t \"comparison with string literal\");\n+\twarning (OPT_Waddress, \"comparison with string literal results in unspecified behaviour\");\n \n       build_type = boolean_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)"}, {"sha": "57cc6e1c660b6c4cf88305b5e083b62be53b58d9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -10149,8 +10149,8 @@ option.\n \n @example\n #pragma GCC diagnostic warning \"-Wformat\"\n-#pragma GCC diagnostic error \"-Walways-true\"\n-#pragma GCC diagnostic ignored \"-Walways-true\"\n+#pragma GCC diagnostic error \"-Wformat\"\n+#pragma GCC diagnostic ignored \"-Wformat\"\n @end example\n \n Note that these pragmas override any command line options.  Also,"}, {"sha": "047104c7391e21047424b6eab289f8b85906e978", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -223,7 +223,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -pedantic  -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waggregate-return -Walways-true -Warray-bounds @gol\n+-w  -Wextra  -Wall  -Waddress  -Waggregate-return -Warray-bounds @gol\n -Wno-attributes -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n -Wconversion -Wcoverage-mismatch -Wno-deprecated-declarations @gol\n@@ -249,7 +249,6 @@ Objective-C and Objective-C++ Dialects}.\n -Wsign-compare  -Wstack-protector @gol\n -Wstrict-aliasing -Wstrict-aliasing=2 @gol\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n--Wstring-literal-comparison @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n -Wsystem-headers  -Wtrigraphs  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n@@ -3381,18 +3380,27 @@ an incorrect result when the signed value is converted to unsigned.\n This warning is also enabled by @option{-Wextra}; to get the other warnings\n of @option{-Wextra} without this warning, use @samp{-Wextra -Wno-sign-compare}.\n \n+@item -Waddress\n+@opindex Waddress\n+@opindex Wno-address\n+Warn about suspicious uses of memory addresses. These include using\n+the address of a function in a conditional expression, such as\n+@code{void func(void); if (func)}, and comparisons against the memory\n+address of a string literal, such as @code{if (x == \"abc\")}.  Such\n+uses typically indicate a programmer error: the address of a function\n+always evaluates to true, so their use in a conditional usually\n+indicate that the programmer forgot the parentheses in a function\n+call; and comparisons against string literals result in unspecified\n+behavior and are not portable in C, so they usually indicate that the\n+programmer intended to use @code{strcmp}.  This warning is enabled by\n+@option{-Wall}.\n+\n @item -Waggregate-return\n @opindex Waggregate-return\n Warn if any functions that return structures or unions are defined or\n called.  (In languages where you can return an array, this also elicits\n a warning.)\n \n-@item -Walways-true\n-@opindex Walways-true\n-Warn about comparisons which are always true such as testing if\n-unsigned values are greater than or equal to zero.  This warning is\n-enabled by @option{-Wall}.\n-\n @item -Wno-attributes\n @opindex Wno-attributes\n @opindex Wattributes\n@@ -3742,15 +3750,6 @@ imply anything.\n This option is only active when @option{-fstack-protector} is active.  It\n warns about functions that will not be protected against stack smashing.\n \n-@item -Wstring-literal-comparison\n-@opindex Wstring-literal-comparison\n-Warn about suspicious comparisons to string literal constants.  In C,\n-direct comparisons against the memory address of a string literal, such\n-as @code{if (x == \"abc\")}, typically indicate a programmer error, and\n-even when intentional, result in unspecified behavior and are not portable.\n-Usually these warnings alert that the programmer intended to use\n-@code{strcmp}.  This warning is enabled by @option{-Wall}.\n-\n @item -Woverlength-strings\n @opindex Woverlength-strings\n Warn about string constants which are longer than the ``minimum"}, {"sha": "1957a416ed4e7d7143e4ee3e8c02d418d63b79c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,3 +1,27 @@\n+2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/20031012-1.c: Replace -Walways-true with -Waddress.\n+\t* gcc.dg/Walways-true-1.c: Likewise.\n+\t* gcc.dg/weak/weak-3.c: Likewise.\n+\t* gcc.dg/Werror-1.c: Likewise.\n+\t* gcc.dg/Werror-3.c: Likewise.\n+\t* gcc.dg/Werror-4.c: Likewise.\n+\t* gcc.dg/Werror-5.c: Likewise.\n+\t* gcc.dg/Werror-6.c: Likewise.\n+\t* gcc.dg/Werror-7.c: Likewise.\n+\t* gcc.dg/Werror-8.c: Likewise.\n+\t* gcc.dg/Werror-10.c: Likewise.\n+\t* gcc.dg/Werror-11.c: Likewise.\n+\t* gcc.dg/Werror-12.c: Likewise.\n+\t* g++.old-deja/g++.mike/warn8.C: Likewise.\n+\t* g++.dg/warn/Walways-true-1.C: Likewise.\n+\t* g++.dg/warn/Walways-true-2.C: Likewise.\n+\t* g++.dg/warn/noeffect8.C: Warn only with -Waddress.\n+\t* g++.dg/warn/Wstring-literal-comparison-1.C: Replace\n+\t-Wstring-literal-comparison with -Waddress.\n+\t* gcc.dg/Wstring-literal-comparison-4.c: Replace\n+\t-Wno-string-literal-comparison with -Wno-address.\n+\t\n 2007-02-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/self_aggregate_with_call.adb: New test."}, {"sha": "6d22cce993b2efabf18af441e8680f179c5c126a", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,8 +1,8 @@\n-// Test -Walways-true for testing an address against NULL.\n+// Test -Waddress for testing an address against NULL.\n // Origin: Ian Lance Taylor <iant@google.com>\n \n // { dg-do compile}\n-// { dg-options \"-Walways-true\" }\n+// { dg-options \"-Waddress\" }\n \n extern int foo (int);\n "}, {"sha": "51bc686276147bac10a07af563a7984b0e49e09d", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -4,7 +4,7 @@\n // Origin: Ian Lance Taylor <iant@google.com>\n \n // { dg-do compile}\n-// { dg-options \"-Walways-true\" }\n+// { dg-options \"-Waddress\" }\n // { dg-require-weak \"\" }\n \n extern int foo (int) __attribute__ ((weak));"}, {"sha": "97e317644d50aab6e860c4913d9160159fff478c", "filename": "gcc/testsuite/g++.dg/warn/Wstring-literal-comparison-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,6 +1,6 @@\n /* PR c/7776 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wstring-literal-comparison\" } */\n+/* { dg-options \"-Waddress\" } */\n \n int test1(char *ptr)\n {"}, {"sha": "f2a711aeb7135f7e269ef39cf6a8129b6f3ab66b", "filename": "gcc/testsuite/g++.dg/warn/Wstring-literal-comparison-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-4.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,6 +1,6 @@\n /* PR c/7776 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall -Wno-string-literal-comparison\" } */\n+/* { dg-options \"-Wall -Wno-address\" } */\n \n int test1(char *ptr)\n {"}, {"sha": "48edfdea6855874e80242dacac7254a87aebf23a", "filename": "gcc/testsuite/g++.dg/warn/noeffect8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect8.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,4 +1,6 @@\n // PR c++/26696, 28996\n+// { dg-do compile }\n+// { dg-options \"-Waddress\" }\n \n struct A\n {"}, {"sha": "ea9dfb8681c49948ba2fff325fac9d7afd4ecf86", "filename": "gcc/testsuite/g++.old-deja/g++.mike/warn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fwarn8.C?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-Walways-true\" }\n+// { dg-options \"-Waddress\" }\n \n struct foo {\n   bool test();"}, {"sha": "f83e1d3f57c33427124368b89ab76a2a895379ba", "filename": "gcc/testsuite/gcc.dg/20031012-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031012-1.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-Walways-true\" } */\n+/* { dg-options \"-Waddress\" } */\n /* Origin: Andrew Morton <akpm@osdl.org> */\n /* Warn if a function addres of a non-weak function is used\n    as a truth value.  */"}, {"sha": "299932fcf55898a17417c191a301fb33265e2a22", "filename": "gcc/testsuite/gcc.dg/Walways-true-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-1.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,8 +1,8 @@\n-/* Test -Walways-true for testing an address against NULL.\n+/* Test -Waddress for testing an address against NULL.\n    Origin: Ian Lance Taylor <iant@google.com>.  */\n \n /* { dg-do compile} */\n-/* { dg-options \"-Walways-true\" } */\n+/* { dg-options \"-Waddress\" } */\n \n extern int foo (int);\n "}, {"sha": "c14857eaee618b4a754d3c64847d26513e6da72f", "filename": "gcc/testsuite/gcc.dg/Walways-true-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -4,7 +4,7 @@\n    Origin: Ian Lance Taylor <iant@google.com>.  */\n \n /* { dg-do compile} */\n-/* { dg-options \"-Walways-true\" } */\n+/* { dg-options \"-Waddress\" } */\n /* { dg-require-weak \"\" } */\n \n extern int foo (int) __attribute__ ((weak));"}, {"sha": "7984740ca88d5108dfc268fa2dae1a1dde4387d9", "filename": "gcc/testsuite/gcc.dg/Werror-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-1.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Walways-true -Wattributes -Werror\" } */\n+/* { dg-options \"-Waddress -Wattributes -Werror\" } */\n /* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \n /* This is the first in a series of test cases that test the\n    interaction between -Wfoo, -Werror, -Werror=foo, and #pragma GCC\n    diagnostic error foo.  This one has all the bits we're testing, the\n    others are subsets of this one.  */\n \n-#pragma GCC diagnostic error \"-Walways-true\"\n+#pragma GCC diagnostic error \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "eeadf512b5ba50553674cf878cc22ab7ef8df7c8", "filename": "gcc/testsuite/gcc.dg/Werror-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-10.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -4,7 +4,7 @@\n \n /* Make sure #pragma can work with -Werror.  */\n \n-#pragma GCC diagnostic error \"-Walways-true\"\n+#pragma GCC diagnostic error \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "493ded044a828085ee1774b20674ec57ff75f63d", "filename": "gcc/testsuite/gcc.dg/Werror-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-11.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -4,7 +4,7 @@\n \n /* Make sure #pragma can override -Werror.  */\n \n-#pragma GCC diagnostic warning \"-Walways-true\"\n+#pragma GCC diagnostic warning \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "4f0bd17623ba5a75e0336a4efda15c377ab600d2", "filename": "gcc/testsuite/gcc.dg/Werror-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-12.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wattributes -Walways-true\" } */\n+/* { dg-options \"-Wattributes -Waddress\" } */\n \n /* Make sure #pragma can override -Wfoo.  */\n \n-#pragma GCC diagnostic ignored \"-Walways-true\"\n+#pragma GCC diagnostic ignored \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"attribute directive ignored\" } */\n "}, {"sha": "b95dd8b6a3dfc419dbf45415b05dd766cb42de2b", "filename": "gcc/testsuite/gcc.dg/Werror-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-3.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Walways-true -Wattributes\" } */\n+/* { dg-options \"-Waddress -Wattributes\" } */\n \n /* Make sure the command line option enables the warning.  */\n "}, {"sha": "2c66fc9d4773c818bcb95f1d99cf6548dca5e029", "filename": "gcc/testsuite/gcc.dg/Werror-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -3,7 +3,7 @@\n \n /* Make sure the pragma enables the error.  */\n \n-#pragma GCC diagnostic error \"-Walways-true\"\n+#pragma GCC diagnostic error \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "40d3cd1f7ad3afa0db4ce852467eb73f550df82a", "filename": "gcc/testsuite/gcc.dg/Werror-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-5.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Walways-true -Wattributes -Werror\" } */\n+/* { dg-options \"-Waddress -Wattributes -Werror\" } */\n /* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \n /* Make sure -Werror turns warnings in to errors.  */"}, {"sha": "62f0e4f40413f91e1b4bc80f325e55343aa8821d", "filename": "gcc/testsuite/gcc.dg/Werror-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wattributes -Werror=always-true\" } */\n+/* { dg-options \"-Wattributes -Werror=address\" } */\n \n /* Make sure -Werror-foo emits an error and not a warning */\n "}, {"sha": "9829ce9e4f744745163a69fb6283fd89f29a6581", "filename": "gcc/testsuite/gcc.dg/Werror-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-7.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Walways-true -Werror -Wno-error=always-true -Wattributes\" } */\n+/* { dg-options \"-Waddress -Werror -Wno-error=address -Wattributes\" } */\n /* { dg-warning \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \n /* Make sure -Wno-error= overrides -Werror.  */"}, {"sha": "5051b7aa47ccdc487c62cdf5fb2bfa2c98a4befc", "filename": "gcc/testsuite/gcc.dg/Werror-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-8.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -3,7 +3,7 @@\n \n /* Make sure #pragma can enable a warning.  */\n \n-#pragma GCC diagnostic warning \"-Walways-true\"\n+#pragma GCC diagnostic warning \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "30326a4799adc1771cd98060b3e118f206eab3c4", "filename": "gcc/testsuite/gcc.dg/Werror-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -3,7 +3,7 @@\n \n /* Make sure #pragma can enable a warning as an error.  */\n \n-#pragma GCC diagnostic error \"-Walways-true\"\n+#pragma GCC diagnostic error \"-Waddress\"\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \"warning: .* attribute directive ignored\" } */\n "}, {"sha": "97e317644d50aab6e860c4913d9160159fff478c", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,6 +1,6 @@\n /* PR c/7776 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wstring-literal-comparison\" } */\n+/* { dg-options \"-Waddress\" } */\n \n int test1(char *ptr)\n {"}, {"sha": "f2a711aeb7135f7e269ef39cf6a8129b6f3ab66b", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,6 +1,6 @@\n /* PR c/7776 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall -Wno-string-literal-comparison\" } */\n+/* { dg-options \"-Wall -Wno-address\" } */\n \n int test1(char *ptr)\n {"}, {"sha": "6ad94731affba8a7f6fb67dbe4e3076bf2b351ea", "filename": "gcc/testsuite/gcc.dg/warn-addr-cmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-weak \"\" } */\n-/* { dg-options \"-Walways-true\" } */\n+/* { dg-options \"-Waddress\" } */\n /* Warning when addr convert to bool always gives known result.\n    Ada/Pascal programmers sometimes write 0-param functions without\n    (), and might as well warn on variables, too.  */"}, {"sha": "21e5fa09c28b8aac16857df9d6d880ce3c325063", "filename": "gcc/testsuite/gcc.dg/weak/weak-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c116cd05fb0e993227162e466ba5f5093392e3e6/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c?ref=c116cd05fb0e993227162e466ba5f5093392e3e6", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-alias \"\" } */\n /* { dg-require-weak \"\" } */\n-/* { dg-options \"-fno-common -Walways-true\" } */\n+/* { dg-options \"-fno-common -Waddress\" } */\n \n /* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]_?ffoo1a\" } } */\n /* { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]_?ffoo1b\" } } */"}]}