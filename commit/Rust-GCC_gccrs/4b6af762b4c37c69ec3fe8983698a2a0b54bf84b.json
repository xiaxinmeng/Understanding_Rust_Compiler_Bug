{"sha": "4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2YWY3NjJiNGMzN2M2OWVjM2ZlODk4MzY5OGEyYTBiNTRiZjg0Yg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-01-10T11:43:48Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-01-10T11:43:48Z"}, "message": "[gcc/testsuite/]\n2014-01-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_crypto_ok_nocache): New.\n\t(check_effective_target_arm_crypto_ok): Use above procedure.\n\t(add_options_for_arm_crypto): Use et_arm_crypto_flags.\n\nFrom-SVN: r206519", "tree": {"sha": "e24b64b114a76ea30610a621f6d5f7b9dc92b19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24b64b114a76ea30610a621f6d5f7b9dc92b19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcca645ce18d920deb1912011b7b1652549f1497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcca645ce18d920deb1912011b7b1652549f1497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcca645ce18d920deb1912011b7b1652549f1497"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "2e3b11d9e6a47d30680214f91c642ae1164f00f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "patch": "@@ -1,3 +1,10 @@\n+2014-01-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_crypto_ok_nocache): New.\n+\t(check_effective_target_arm_crypto_ok): Use above procedure.\n+\t(add_options_for_arm_crypto): Use et_arm_crypto_flags.\n+\n 2014-01-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/58252"}, {"sha": "159f88f28dd838d4aee6d75f8d21897695609c49", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6af762b4c37c69ec3fe8983698a2a0b54bf84b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4b6af762b4c37c69ec3fe8983698a2a0b54bf84b", "patch": "@@ -2311,27 +2311,46 @@ proc check_effective_target_arm_unaligned { } {\n }\n \n # Return 1 if this is an ARM target supporting -mfpu=crypto-neon-fp-armv8\n-# -mfloat-abi=softfp.\n-proc check_effective_target_arm_crypto_ok {} {\n+# -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_crypto_flags to the\n+# best options to add.\n+\n+proc check_effective_target_arm_crypto_ok_nocache { } {\n+    global et_arm_crypto_flags\n+    set et_arm_crypto_flags \"\"\n     if { [check_effective_target_arm32] } {\n-\treturn [check_no_compiler_messages arm_crypto_ok object {\n-\t  int foo (void)\n-\t  {\n-\t     __asm__ volatile (\"aese.8 q0, q0\");\n-\t     return 0;\n-\t  }\n-\t} \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"]\n-    } else {\n-\treturn 0\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=crypto-neon-fp-armv8\" \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_crypto_ok object {\n+\t\t#include \"arm_neon.h\"\n+\t\tuint8x16_t\n+\t\tfoo (uint8x16_t a, uint8x16_t b)\n+\t\t{\n+\t          return vaeseq_u8 (a, b);\n+\t\t}\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_crypto_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n     }\n+\n+    return 0\n+}\n+\n+# Return 1 if this is an ARM target supporting -mfpu=crypto-neon-fp-armv8\n+\n+proc check_effective_target_arm_crypto_ok { } {\n+    return [check_cached_effective_target arm_crypto_ok \\\n+\t\tcheck_effective_target_arm_crypto_ok_nocache]\n }\n \n # Add options for crypto extensions.\n proc add_options_for_arm_crypto { flags } {\n     if { ! [check_effective_target_arm_crypto_ok] } {\n         return \"$flags\"\n     }\n-    return \"$flags -mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"\n+    global et_arm_crypto_flags\n+    return \"$flags $et_arm_crypto_flags\"\n }\n \n # Add the options needed for NEON.  We need either -mfloat-abi=softfp"}]}