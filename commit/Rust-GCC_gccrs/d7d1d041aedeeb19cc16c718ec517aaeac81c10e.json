{"sha": "d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkMWQwNDFhZWRlZWIxOWNjMTZjNzE4ZWM1MTdhYWVhYzgxYzEwZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-06T08:51:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-06T08:51:23Z"}, "message": "re PR middle-end/47663 (Very simple wrapper not inlined)\n\n2011-04-06  Richard Guenther  <rguenther@suse.de>\n \n\tPR tree-optimization/47663\n\t* cgraph.h (struct cgraph_edge): Add call_stmt_size and\n\tcall_stmt_time fields.\n\t(cgraph_edge_inlinable_p): Declare.\n\t(cgraph_edge_recursive_p): New inline function.\n\t* cgraph.c (cgraph_create_edge_1): Initialize call_stmt_size.\n\t(cgraph_clone_edge): Copy it.\n\t* ipa-inline.c (cgraph_estimate_edge_time): New function.\n\tAccount for call stmt time.\n\t(cgraph_estimate_time_after_inlining): Take edge argument.\n\t(cgraph_estimate_edge_growth): Account call stmt size.\n\t(cgraph_estimate_size_after_inlining): Take edge argument.\n\t(cgraph_mark_inline_edge): Adjust.\n\t(cgraph_check_inline_limits): Likewise.\n\t(cgraph_recursive_inlining_p): Remove.\n\t(cgraph_edge_badness): Use cgraph_edge_recursive_p.\n\t(cgraph_decide_recursive_inlining): Take edge argument and\n\tadjust.\n\t(cgraph_decide_inlining_of_small_functions): Do not avoid\n\tdiags for recursive inlining here.\n\t(cgraph_flatten): Adjust.\n\t(cgraph_decide_inlining_incrementally): Likewise.\n\t(estimate_function_body_sizes): Remove call cost handling.\n\t(compute_inline_parameters): Initialize caller edge call costs.\n\t(cgraph_estimate_edge_growth): New function.\n\t(cgraph_estimate_growth): Use it.\n\t(cgraph_edge_badness): Likewise.\n\t(cgraph_check_inline_limits): Take an edge argument.\n\t(cgraph_decide_inlining_of_small_functions): Adjust.\n\t(cgraph_decide_inlining): Likewise.\n\t* tree-inline.c (estimate_num_insns): Only account for call\n\treturn value if it is used.\n\t(expand_call_inline): Avoid diagnostics on recursive inline\n\tfunctions here.\n\t* lto-cgraph.c (lto_output_edge): Output edge call costs.\n\t(input_edge): Input edge call costs.\n\n\t* gcc.dg/tree-ssa/inline-8.c: New testcase.\n\nFrom-SVN: r172023", "tree": {"sha": "2e899a35ae492409cf1aea6ceba40b33bc2febab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e899a35ae492409cf1aea6ceba40b33bc2febab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2feb95f7d8c340e425d977a660d7b6d4c3282792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feb95f7d8c340e425d977a660d7b6d4c3282792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2feb95f7d8c340e425d977a660d7b6d4c3282792"}], "stats": {"total": 369, "additions": 232, "deletions": 137}, "files": [{"sha": "7b473e8926a7a3d2ba965ec52c617f2c867f5f35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -1,3 +1,42 @@\n+2011-04-06  Richard Guenther  <rguenther@suse.de>\n+ \n+\tPR tree-optimization/47663\n+\t* cgraph.h (struct cgraph_edge): Add call_stmt_size and\n+\tcall_stmt_time fields.\n+\t(cgraph_edge_inlinable_p): Declare.\n+\t(cgraph_edge_recursive_p): New inline function.\n+\t* cgraph.c (cgraph_create_edge_1): Initialize call_stmt_size.\n+\t(cgraph_clone_edge): Copy it.\n+\t* ipa-inline.c (cgraph_estimate_edge_time): New function.\n+\tAccount for call stmt time.\n+\t(cgraph_estimate_time_after_inlining): Take edge argument.\n+\t(cgraph_estimate_edge_growth): Account call stmt size.\n+\t(cgraph_estimate_size_after_inlining): Take edge argument.\n+\t(cgraph_mark_inline_edge): Adjust.\n+\t(cgraph_check_inline_limits): Likewise.\n+\t(cgraph_recursive_inlining_p): Remove.\n+\t(cgraph_edge_badness): Use cgraph_edge_recursive_p.\n+\t(cgraph_decide_recursive_inlining): Take edge argument and\n+\tadjust.\n+\t(cgraph_decide_inlining_of_small_functions): Do not avoid\n+\tdiags for recursive inlining here.\n+\t(cgraph_flatten): Adjust.\n+\t(cgraph_decide_inlining_incrementally): Likewise.\n+\t(estimate_function_body_sizes): Remove call cost handling.\n+\t(compute_inline_parameters): Initialize caller edge call costs.\n+\t(cgraph_estimate_edge_growth): New function.\n+\t(cgraph_estimate_growth): Use it.\n+\t(cgraph_edge_badness): Likewise.\n+\t(cgraph_check_inline_limits): Take an edge argument.\n+\t(cgraph_decide_inlining_of_small_functions): Adjust.\n+\t(cgraph_decide_inlining): Likewise.\n+\t* tree-inline.c (estimate_num_insns): Only account for call\n+\treturn value if it is used.\n+\t(expand_call_inline): Avoid diagnostics on recursive inline\n+\tfunctions here.\n+\t* lto-cgraph.c (lto_output_edge): Output edge call costs.\n+\t(input_edge): Input edge call costs.\n+\n 2011-04-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/alpha/osf5.h (MAX_OFILE_ALIGNMENT): Define."}, {"sha": "a6217e9af35bc6e26ac79a26547a246541bfbbad", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -1032,6 +1032,8 @@ cgraph_create_edge_1 (struct cgraph_node *caller, struct cgraph_node *callee,\n   edge->loop_nest = nest;\n \n   edge->call_stmt = call_stmt;\n+  edge->call_stmt_size = 0;\n+  edge->call_stmt_time = 0;\n   push_cfun (DECL_STRUCT_FUNCTION (caller->decl));\n   edge->can_throw_external\n     = call_stmt ? stmt_can_throw_external (call_stmt) : false;\n@@ -2141,6 +2143,8 @@ cgraph_clone_edge (struct cgraph_edge *e, struct cgraph_node *n,\n \t}\n     }\n \n+  new_edge->call_stmt_size = e->call_stmt_size;\n+  new_edge->call_stmt_time = e->call_stmt_time;\n   new_edge->inline_failed = e->inline_failed;\n   new_edge->indirect_inlining_edge = e->indirect_inlining_edge;\n   new_edge->lto_stmt_uid = stmt_uid;"}, {"sha": "1d3a87bbaae27fcd68a705c61171cc16aeb15dcd", "filename": "gcc/cgraph.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -431,6 +431,9 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"))) cgrap\n   int frequency;\n   /* Unique id of the edge.  */\n   int uid;\n+  /* Estimated size and time of the call statement.  */\n+  int call_stmt_size;\n+  int call_stmt_time;\n   /* Depth of loop nest, 1 means no loop nest.  */\n   unsigned short int loop_nest;\n   /* Whether this edge was made direct by indirect inlining.  */\n@@ -771,6 +774,7 @@ varpool_next_static_initializer (struct varpool_node *node)\n /* In ipa-inline.c  */\n void cgraph_clone_inlined_nodes (struct cgraph_edge *, bool, bool);\n void compute_inline_parameters (struct cgraph_node *);\n+cgraph_inline_failed_t cgraph_edge_inlinable_p (struct cgraph_edge *);\n \n \n /* Create a new static variable of type TYPE.  */\n@@ -958,6 +962,17 @@ varpool_all_refs_explicit_p (struct varpool_node *vnode)\n /* Constant pool accessor function.  */\n htab_t constant_pool_htab (void);\n \n+/* Return true when the edge E represents a direct recursion.  */\n+static inline bool\n+cgraph_edge_recursive_p (struct cgraph_edge *e)\n+{\n+  if (e->caller->global.inlined_to)\n+    return e->caller->global.inlined_to->decl == e->callee->decl;\n+  else\n+    return e->caller->decl == e->callee->decl;\n+}\n+\n+\n /* FIXME: inappropriate dependency of cgraph on IPA.  */\n #include \"ipa-ref-inline.h\"\n "}, {"sha": "af92393193621c034cab47a28ea788823c362c01", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 127, "deletions": 136, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -164,31 +164,63 @@ inline_summary (struct cgraph_node *node)\n   return &node->local.inline_summary;\n }\n \n-/* Estimate self time of the function after inlining WHAT into TO.  */\n+/* Estimate the time cost for the caller when inlining EDGE.  */\n+\n+static inline int\n+cgraph_estimate_edge_time (struct cgraph_edge *edge)\n+{\n+  int call_stmt_time;\n+  /* ???  We throw away cgraph edges all the time so the information\n+     we store in edges doesn't persist for early inlining.  Ugh.  */\n+  if (!edge->call_stmt)\n+    call_stmt_time = edge->call_stmt_time;\n+  else\n+    call_stmt_time = estimate_num_insns (edge->call_stmt, &eni_time_weights);\n+  return (((gcov_type)edge->callee->global.time\n+\t   - inline_summary (edge->callee)->time_inlining_benefit\n+\t   - call_stmt_time) * edge->frequency\n+\t  + CGRAPH_FREQ_BASE / 2) / CGRAPH_FREQ_BASE;\n+}\n+\n+/* Estimate self time of the function NODE after inlining EDGE.  */\n \n static int\n-cgraph_estimate_time_after_inlining (int frequency, struct cgraph_node *to,\n-\t\t\t\t     struct cgraph_node *what)\n+cgraph_estimate_time_after_inlining (struct cgraph_node *node,\n+\t\t\t\t     struct cgraph_edge *edge)\n {\n-  gcov_type time = (((gcov_type)what->global.time\n-\t\t     - inline_summary (what)->time_inlining_benefit)\n-  \t\t    * frequency + CGRAPH_FREQ_BASE / 2) / CGRAPH_FREQ_BASE\n-\t\t    + to->global.time;\n+  gcov_type time = node->global.time + cgraph_estimate_edge_time (edge);\n   if (time < 0)\n     time = 0;\n   if (time > MAX_TIME)\n     time = MAX_TIME;\n   return time;\n }\n \n-/* Estimate self size of the function after inlining WHAT into TO.  */\n+/* Estimate the growth of the caller when inlining EDGE.  */\n \n static inline int\n-cgraph_estimate_size_after_inlining (struct cgraph_node *to,\n-\t\t\t\t     struct cgraph_node *what)\n+cgraph_estimate_edge_growth (struct cgraph_edge *edge)\n {\n-  int size = ((what->global.size - inline_summary (what)->size_inlining_benefit)\n-\t      + to->global.size);\n+  int call_stmt_size;\n+  /* ???  We throw away cgraph edges all the time so the information\n+     we store in edges doesn't persist for early inlining.  Ugh.  */\n+  if (!edge->call_stmt)\n+    call_stmt_size = edge->call_stmt_size;\n+  else\n+    call_stmt_size = estimate_num_insns (edge->call_stmt, &eni_size_weights);\n+  return (edge->callee->global.size\n+\t  - inline_summary (edge->callee)->size_inlining_benefit\n+\t  - call_stmt_size);\n+}\n+\n+/* Estimate the size of NODE after inlining EDGE which should be an\n+   edge to either NODE or a call inlined into NODE.  */\n+\n+static inline int\n+cgraph_estimate_size_after_inlining (struct cgraph_node *node,\n+\t\t\t\t     struct cgraph_edge *edge)\n+{\n+  int size = node->global.size + cgraph_estimate_edge_growth (edge);\n   gcc_assert (size >= 0);\n   return size;\n }\n@@ -301,9 +333,8 @@ cgraph_mark_inline_edge (struct cgraph_edge *e, bool update_original,\n \t\t\t VEC (cgraph_edge_p, heap) **new_edges)\n {\n   int old_size = 0, new_size = 0;\n-  struct cgraph_node *to = NULL, *what;\n+  struct cgraph_node *to = NULL;\n   struct cgraph_edge *curr = e;\n-  int freq;\n \n   /* Don't inline inlined edges.  */\n   gcc_assert (e->inline_failed);\n@@ -315,19 +346,16 @@ cgraph_mark_inline_edge (struct cgraph_edge *e, bool update_original,\n \n   cgraph_clone_inlined_nodes (e, true, update_original);\n \n-  what = e->callee;\n-\n-  freq = e->frequency;\n   /* Now update size of caller and all functions caller is inlined into.  */\n   for (;e && !e->inline_failed; e = e->caller->callers)\n     {\n       to = e->caller;\n       old_size = e->caller->global.size;\n-      new_size = cgraph_estimate_size_after_inlining (to, what);\n+      new_size = cgraph_estimate_size_after_inlining (to, e);\n       to->global.size = new_size;\n-      to->global.time = cgraph_estimate_time_after_inlining (freq, to, what);\n+      to->global.time = cgraph_estimate_time_after_inlining (to, e);\n     }\n-  gcc_assert (what->global.inlined_to == to);\n+  gcc_assert (curr->callee->global.inlined_to == to);\n   if (new_size > old_size)\n     overall_size += new_size - old_size;\n   ncalls_inlined++;\n@@ -357,8 +385,7 @@ cgraph_estimate_growth (struct cgraph_node *node)\n       if (e->caller == node)\n         self_recursive = true;\n       if (e->inline_failed)\n-\tgrowth += (cgraph_estimate_size_after_inlining (e->caller, node)\n-\t\t   - e->caller->global.size);\n+\tgrowth += cgraph_estimate_edge_growth (e);\n     }\n \n   /* ??? Wrong for non-trivially self recursive functions or cases where\n@@ -379,17 +406,17 @@ cgraph_estimate_growth (struct cgraph_node *node)\n   return growth;\n }\n \n-/* Return false when inlining WHAT into TO is not good idea\n-   as it would cause too large growth of function bodies.\n-   When ONE_ONLY is true, assume that only one call site is going\n-   to be inlined, otherwise figure out how many call sites in\n-   TO calls WHAT and verify that all can be inlined.\n-   */\n+/* Return false when inlining edge E is not good idea\n+   as it would cause too large growth of the callers function body\n+   or stack frame size.  *REASON if non-NULL is updated if the\n+   inlining is not a good idea.  */\n \n static bool\n-cgraph_check_inline_limits (struct cgraph_node *to, struct cgraph_node *what,\n+cgraph_check_inline_limits (struct cgraph_edge *e,\n \t\t\t    cgraph_inline_failed_t *reason)\n {\n+  struct cgraph_node *to = e->caller;\n+  struct cgraph_node *what = e->callee;\n   int newsize;\n   int limit;\n   HOST_WIDE_INT stack_size_limit, inlined_stack;\n@@ -408,7 +435,7 @@ cgraph_check_inline_limits (struct cgraph_node *to, struct cgraph_node *what,\n \n   /* Check the size after inlining against the function limits.  But allow\n      the function to shrink if it went over the limits by forced inlining.  */\n-  newsize = cgraph_estimate_size_after_inlining (to, what);\n+  newsize = cgraph_estimate_size_after_inlining (to, e);\n   if (newsize >= to->global.size\n       && newsize > PARAM_VALUE (PARAM_LARGE_FUNCTION_INSNS)\n       && newsize > limit)\n@@ -487,28 +514,6 @@ cgraph_default_inline_p (struct cgraph_node *n, cgraph_inline_failed_t *reason)\n   return true;\n }\n \n-/* Return true when inlining WHAT would create recursive inlining.\n-   We call recursive inlining all cases where same function appears more than\n-   once in the single recursion nest path in the inline graph.  */\n-\n-static inline bool\n-cgraph_recursive_inlining_p (struct cgraph_node *to,\n-\t\t\t     struct cgraph_node *what,\n-\t\t\t     cgraph_inline_failed_t *reason)\n-{\n-  bool recursive;\n-  if (to->global.inlined_to)\n-    recursive = what->decl == to->global.inlined_to->decl;\n-  else\n-    recursive = what->decl == to->decl;\n-  /* Marking recursive function inline has sane semantic and thus we should\n-     not warn on it.  */\n-  if (recursive && reason)\n-    *reason = (what->local.disregard_inline_limits\n-\t       ? CIF_RECURSIVE_INLINING : CIF_UNSPECIFIED);\n-  return recursive;\n-}\n-\n /* A cost model driving the inlining heuristics in a way so the edges with\n    smallest badness are inlined first.  After each inlining is performed\n    the costs of all caller edges of nodes affected are recomputed so the\n@@ -524,9 +529,7 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n   if (edge->callee->local.disregard_inline_limits)\n     return INT_MIN;\n \n-  growth =\n-    (cgraph_estimate_size_after_inlining (edge->caller, edge->callee)\n-     - edge->caller->global.size);\n+  growth = cgraph_estimate_edge_growth (edge);\n \n   if (dump)\n     {\n@@ -536,9 +539,11 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n       fprintf (dump_file, \"      growth %i, time %i-%i, size %i-%i\\n\",\n \t       growth,\n \t       edge->callee->global.time,\n-\t       inline_summary (edge->callee)->time_inlining_benefit,\n+\t       inline_summary (edge->callee)->time_inlining_benefit\n+\t       + edge->call_stmt_time,\n \t       edge->callee->global.size,\n-\t       inline_summary (edge->callee)->size_inlining_benefit);\n+\t       inline_summary (edge->callee)->size_inlining_benefit\n+\t       + edge->call_stmt_size);\n     }\n \n   /* Always prefer inlining saving code size.  */\n@@ -557,7 +562,8 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n       badness =\n \t((int)\n \t ((double) edge->count * INT_MIN / max_count / (max_benefit + 1)) *\n-\t (inline_summary (edge->callee)->time_inlining_benefit + 1)) / growth;\n+\t (inline_summary (edge->callee)->time_inlining_benefit\n+\t  + edge->call_stmt_time + 1)) / growth;\n       if (dump)\n \t{\n \t  fprintf (dump_file,\n@@ -566,7 +572,8 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n \t\t   (int) badness, (double) badness / INT_MIN,\n \t\t   (double) edge->count / max_count,\n \t\t   (double) (inline_summary (edge->callee)->\n-\t\t\t     time_inlining_benefit + 1) / (max_benefit + 1));\n+\t\t\t     time_inlining_benefit\n+\t\t\t     + edge->call_stmt_time + 1) / (max_benefit + 1));\n \t}\n     }\n \n@@ -586,8 +593,9 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n       int growth_for_all;\n       badness = growth * 10000;\n       benefitperc =\n-\t100 * inline_summary (edge->callee)->time_inlining_benefit\n-\t    / (edge->callee->global.time + 1) +1;\n+\t100 * (inline_summary (edge->callee)->time_inlining_benefit\n+\t       + edge->call_stmt_time)\n+\t    / (edge->callee->global.time + 1) + 1;\n       benefitperc = MIN (benefitperc, 100);\n       div *= benefitperc;\n \n@@ -636,7 +644,7 @@ cgraph_edge_badness (struct cgraph_edge *edge, bool dump)\n   gcc_assert (badness >= INT_MIN);\n   gcc_assert (badness <= INT_MAX - 1);\n   /* Make recursive inlining happen always after other inlining is done.  */\n-  if (cgraph_recursive_inlining_p (edge->caller, edge->callee, NULL))\n+  if (cgraph_edge_recursive_p (edge))\n     return badness + 1;\n   else\n     return badness;\n@@ -822,18 +830,23 @@ lookup_recursive_calls (struct cgraph_node *node, struct cgraph_node *where,\n    is NULL.  */\n \n static bool\n-cgraph_decide_recursive_inlining (struct cgraph_node *node,\n+cgraph_decide_recursive_inlining (struct cgraph_edge *edge,\n \t\t\t\t  VEC (cgraph_edge_p, heap) **new_edges)\n {\n   int limit = PARAM_VALUE (PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO);\n   int max_depth = PARAM_VALUE (PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO);\n   int probability = PARAM_VALUE (PARAM_MIN_INLINE_RECURSIVE_PROBABILITY);\n   fibheap_t heap;\n+  struct cgraph_node *node;\n   struct cgraph_edge *e;\n   struct cgraph_node *master_clone, *next;\n   int depth = 0;\n   int n = 0;\n \n+  node = edge->caller;\n+  if (node->global.inlined_to)\n+    node = node->global.inlined_to;\n+\n   /* It does not make sense to recursively inline always-inline functions\n      as we are going to sorry() on the remaining calls anyway.  */\n   if (node->local.disregard_inline_limits\n@@ -852,7 +865,7 @@ cgraph_decide_recursive_inlining (struct cgraph_node *node,\n \n   /* Make sure that function is small enough to be considered for inlining.  */\n   if (!max_depth\n-      || cgraph_estimate_size_after_inlining (node, node)  >= limit)\n+      || cgraph_estimate_size_after_inlining (node, edge)  >= limit)\n     return false;\n   heap = fibheap_new ();\n   lookup_recursive_calls (node, node, heap);\n@@ -876,14 +889,15 @@ cgraph_decide_recursive_inlining (struct cgraph_node *node,\n       cgraph_clone_inlined_nodes (e, true, false);\n \n   /* Do the inlining and update list of recursive call during process.  */\n-  while (!fibheap_empty (heap)\n-\t && (cgraph_estimate_size_after_inlining (node, master_clone)\n-\t     <= limit))\n+  while (!fibheap_empty (heap))\n     {\n       struct cgraph_edge *curr\n \t= (struct cgraph_edge *) fibheap_extract_min (heap);\n       struct cgraph_node *cnode;\n \n+      if (cgraph_estimate_size_after_inlining (node, curr) > limit)\n+\tbreak;\n+\n       depth = 1;\n       for (cnode = curr->caller;\n \t   cnode->global.inlined_to; cnode = cnode->callers->caller)\n@@ -1083,10 +1097,7 @@ cgraph_decide_inlining_of_small_functions (void)\n \t}\n       \n       callee = edge->callee;\n-\n-      growth = (cgraph_estimate_size_after_inlining (edge->caller, edge->callee)\n-\t\t- edge->caller->global.size);\n-\n+      growth = cgraph_estimate_edge_growth (edge);\n       if (dump_file)\n \t{\n \t  fprintf (dump_file,\n@@ -1155,25 +1166,17 @@ cgraph_decide_inlining_of_small_functions (void)\n  \tnot_good = CIF_OPTIMIZING_FOR_SIZE;\n       if (not_good && growth > 0 && cgraph_estimate_growth (edge->callee) > 0)\n \t{\n-          if (!cgraph_recursive_inlining_p (edge->caller, edge->callee,\n-\t\t\t\t            &edge->inline_failed))\n-\t    {\n-\t      edge->inline_failed = not_good;\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \" inline_failed:%s.\\n\",\n-\t\t\t cgraph_inline_failed_string (edge->inline_failed));\n-\t    }\n+\t  edge->inline_failed = not_good;\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \" inline_failed:%s.\\n\",\n+\t\t     cgraph_inline_failed_string (edge->inline_failed));\n \t  continue;\n \t}\n       if (!cgraph_default_inline_p (edge->callee, &edge->inline_failed))\n \t{\n-          if (!cgraph_recursive_inlining_p (edge->caller, edge->callee,\n-\t\t\t\t            &edge->inline_failed))\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \" inline_failed:%s.\\n\",\n-\t\t\t cgraph_inline_failed_string (edge->inline_failed));\n-\t    }\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \" inline_failed:%s.\\n\",\n+\t\t     cgraph_inline_failed_string (edge->inline_failed));\n \t  continue;\n \t}\n       if (!tree_can_inline_p (edge)\n@@ -1184,25 +1187,26 @@ cgraph_decide_inlining_of_small_functions (void)\n \t\t     cgraph_inline_failed_string (edge->inline_failed));\n \t  continue;\n \t}\n-      if (cgraph_recursive_inlining_p (edge->caller, edge->callee,\n-\t\t\t\t       &edge->inline_failed))\n+      if (cgraph_edge_recursive_p (edge))\n \t{\n \t  where = edge->caller;\n \t  if (where->global.inlined_to)\n \t    where = where->global.inlined_to;\n-\t  if (!cgraph_decide_recursive_inlining (where,\n+\t  if (!cgraph_decide_recursive_inlining (edge,\n \t\t\t\t\t\t flag_indirect_inlining\n \t\t\t\t\t\t ? &new_indirect_edges : NULL))\n-\t    continue;\n+\t    {\n+\t      edge->inline_failed = CIF_RECURSIVE_INLINING;\n+\t      continue;\n+\t    }\n \t  if (flag_indirect_inlining)\n \t    add_new_edges_to_heap (heap, new_indirect_edges);\n           update_all_callee_keys (heap, where, updated_nodes);\n \t}\n       else\n \t{\n \t  struct cgraph_node *callee;\n-\t  if (!cgraph_check_inline_limits (edge->caller, edge->callee,\n-\t\t\t\t           &edge->inline_failed))\n+\t  if (!cgraph_check_inline_limits (edge, &edge->inline_failed))\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \" Not inlining into %s:%s.\\n\",\n@@ -1295,9 +1299,7 @@ cgraph_decide_inlining_of_small_functions (void)\n \t  if (dump_flags & TDF_DETAILS)\n \t    cgraph_edge_badness (edge, true);\n \t}\n-      if (!edge->callee->local.disregard_inline_limits && edge->inline_failed\n-          && !cgraph_recursive_inlining_p (edge->caller, edge->callee,\n-\t\t\t\t           &edge->inline_failed))\n+      if (!edge->callee->local.disregard_inline_limits && edge->inline_failed)\n \tedge->inline_failed = CIF_INLINE_UNIT_GROWTH_LIMIT;\n     }\n \n@@ -1359,7 +1361,7 @@ cgraph_flatten (struct cgraph_node *node)\n \t  continue;\n \t}\n \n-      if (cgraph_recursive_inlining_p (node, e->callee, &e->inline_failed))\n+      if (cgraph_edge_recursive_p (e))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not inlining: recursive call.\\n\");\n@@ -1431,10 +1433,14 @@ cgraph_decide_inlining (void)\n \tif (!DECL_EXTERNAL (node->decl))\n \t  initial_size += node->global.size;\n \tfor (e = node->callees; e; e = e->next_callee)\n-\t  if (max_count < e->count)\n-\t    max_count = e->count;\n-\tif (max_benefit < inline_summary (node)->time_inlining_benefit)\n-\t  max_benefit = inline_summary (node)->time_inlining_benefit;\n+\t  {\n+\t    int benefit = (inline_summary (node)->time_inlining_benefit\n+\t\t\t   + e->call_stmt_time);\n+\t    if (max_count < e->count)\n+\t      max_count = e->count;\n+\t    if (max_benefit < benefit)\n+\t      max_benefit = benefit;\n+\t  }\n       }\n   gcc_assert (in_lto_p\n \t      || !max_count\n@@ -1516,8 +1522,7 @@ cgraph_decide_inlining (void)\n \t\t\t   node->callers->caller->global.size);\n \t\t}\n \n-\t      if (cgraph_check_inline_limits (node->callers->caller, node,\n-\t\t\t\t\t      &reason))\n+\t      if (cgraph_check_inline_limits (node->callers, &reason))\n \t\t{\n \t\t  struct cgraph_node *caller = node->callers->caller;\n \t\t  cgraph_mark_inline_edge (node->callers, true, NULL);\n@@ -1602,7 +1607,7 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t  fprintf (dump_file,\n \t\t   \"Considering to always inline inline candidate %s.\\n\",\n \t\t   cgraph_node_name (e->callee));\n-\tif (cgraph_recursive_inlining_p (node, e->callee, &e->inline_failed))\n+\tif (cgraph_edge_recursive_p (e))\n \t  {\n \t    if (dump_file)\n \t      fprintf (dump_file, \"Not inlining: recursive call.\\n\");\n@@ -1656,7 +1661,7 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Considering inline candidate %s.\\n\",\n \t\t     cgraph_node_name (e->callee));\n-\t  if (cgraph_recursive_inlining_p (node, e->callee, &e->inline_failed))\n+\t  if (cgraph_edge_recursive_p (e))\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Not inlining: recursive call.\\n\");\n@@ -1681,16 +1686,13 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t  if (((mode == INLINE_SIZE || mode == INLINE_SIZE_NORECURSIVE)\n \t       || (!flag_inline_functions\n \t\t   && !DECL_DECLARED_INLINE_P (e->callee->decl)))\n-\t      && (cgraph_estimate_size_after_inlining (e->caller, e->callee)\n-\t\t  > e->caller->global.size + allowed_growth)\n+\t      && cgraph_estimate_edge_growth (e) > allowed_growth\n \t      && cgraph_estimate_growth (e->callee) > allowed_growth)\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file,\n \t\t\t \"Not inlining: code size would grow by %i.\\n\",\n-\t\t\t cgraph_estimate_size_after_inlining (e->caller,\n-\t\t\t\t\t\t\t      e->callee)\n-\t\t\t - e->caller->global.size);\n+\t\t\t cgraph_estimate_edge_growth (e));\n \t      continue;\n \t    }\n \t  if (e->call_stmt_cannot_inline_p\n@@ -1708,7 +1710,7 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t\t\t \"Not inlining: Function body no longer available.\\n\");\n \t      continue;\n \t    }\n-\t  if (!cgraph_check_inline_limits (node, e->callee, &e->inline_failed))\n+\t  if (!cgraph_check_inline_limits (e, &e->inline_failed))\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Not inlining: %s.\\n\",\n@@ -1901,9 +1903,7 @@ estimate_function_body_sizes (struct cgraph_node *node)\n   basic_block bb;\n   gimple_stmt_iterator bsi;\n   struct function *my_function = DECL_STRUCT_FUNCTION (node->decl);\n-  tree arg;\n   int freq;\n-  tree funtype = TREE_TYPE (node->decl);\n \n   if (dump_file)\n     fprintf (dump_file, \"Analyzing function body size: %s\\n\",\n@@ -1944,35 +1944,16 @@ estimate_function_body_sizes (struct cgraph_node *node)\n   time_inlining_benefit = ((time_inlining_benefit + CGRAPH_FREQ_BASE)\n   \t\t\t   / (CGRAPH_FREQ_BASE * 2));\n   size_inlining_benefit = (size_inlining_benefit + 1) / 2;\n-  if (dump_file)\n-    fprintf (dump_file, \"Overall function body time: %i-%i size: %i-%i\\n\",\n-\t     (int)time, (int)time_inlining_benefit,\n-\t     size, size_inlining_benefit);\n-  time_inlining_benefit += eni_time_weights.call_cost;\n-  size_inlining_benefit += eni_size_weights.call_cost;\n-  if (!VOID_TYPE_P (TREE_TYPE (funtype)))\n-    {\n-      int cost = estimate_move_cost (TREE_TYPE (funtype));\n-      time_inlining_benefit += cost;\n-      size_inlining_benefit += cost;\n-    }\n-  for (arg = DECL_ARGUMENTS (node->decl); arg; arg = DECL_CHAIN (arg))\n-    if (!VOID_TYPE_P (TREE_TYPE (arg)))\n-      {\n-        int cost = estimate_move_cost (TREE_TYPE (arg));\n-        time_inlining_benefit += cost;\n-        size_inlining_benefit += cost;\n-      }\n   if (time_inlining_benefit > MAX_TIME)\n     time_inlining_benefit = MAX_TIME;\n   if (time > MAX_TIME)\n     time = MAX_TIME;\n-  inline_summary (node)->self_time = time;\n-  inline_summary (node)->self_size = size;\n   if (dump_file)\n-    fprintf (dump_file, \"With function call overhead time: %i-%i size: %i-%i\\n\",\n+    fprintf (dump_file, \"Overall function body time: %i-%i size: %i-%i\\n\",\n \t     (int)time, (int)time_inlining_benefit,\n \t     size, size_inlining_benefit);\n+  inline_summary (node)->self_time = time;\n+  inline_summary (node)->self_size = size;\n   inline_summary (node)->time_inlining_benefit = time_inlining_benefit;\n   inline_summary (node)->size_inlining_benefit = size_inlining_benefit;\n }\n@@ -1982,6 +1963,7 @@ void\n compute_inline_parameters (struct cgraph_node *node)\n {\n   HOST_WIDE_INT self_stack_size;\n+  struct cgraph_edge *e;\n \n   gcc_assert (!node->global.inlined_to);\n \n@@ -2001,8 +1983,6 @@ compute_inline_parameters (struct cgraph_node *node)\n     node->local.can_change_signature = true;\n   else\n     {\n-      struct cgraph_edge *e;\n-\n       /* Functions calling builtin_apply can not change signature.  */\n       for (e = node->callees; e; e = e->next_callee)\n \tif (DECL_BUILT_IN (e->callee->decl)\n@@ -2012,6 +1992,17 @@ compute_inline_parameters (struct cgraph_node *node)\n       node->local.can_change_signature = !e;\n     }\n   estimate_function_body_sizes (node);\n+  /* Compute size of call statements.  We have to do this for callers here,\n+     those sizes need to be present for edges _to_ us as early as\n+     we are finished with early opts.  */\n+  for (e = node->callers; e; e = e->next_caller)\n+    if (e->call_stmt)\n+      {\n+\te->call_stmt_size\n+\t  = estimate_num_insns (e->call_stmt, &eni_size_weights);\n+\te->call_stmt_time\n+\t  = estimate_num_insns (e->call_stmt, &eni_time_weights);\n+      }\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.time = inline_summary (node)->self_time;\n   node->global.size = inline_summary (node)->self_size;"}, {"sha": "f8de894336406a9ea6930c15473a470103a7a28c", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -285,6 +285,8 @@ lto_output_edge (struct lto_simple_output_block *ob, struct cgraph_edge *edge,\n   bp_pack_value (&bp, uid, HOST_BITS_PER_INT);\n   bp_pack_value (&bp, edge->inline_failed, HOST_BITS_PER_INT);\n   bp_pack_value (&bp, edge->frequency, HOST_BITS_PER_INT);\n+  bp_pack_value (&bp, edge->call_stmt_size, HOST_BITS_PER_INT);\n+  bp_pack_value (&bp, edge->call_stmt_time, HOST_BITS_PER_INT);\n   bp_pack_value (&bp, edge->loop_nest, 30);\n   bp_pack_value (&bp, edge->indirect_inlining_edge, 1);\n   bp_pack_value (&bp, edge->call_stmt_cannot_inline_p, 1);\n@@ -1215,6 +1217,7 @@ input_edge (struct lto_input_block *ib, VEC(cgraph_node_ptr, heap) *nodes,\n   cgraph_inline_failed_t inline_failed;\n   struct bitpack_d bp;\n   int ecf_flags = 0;\n+  int call_stmt_time, call_stmt_size;\n \n   caller = VEC_index (cgraph_node_ptr, nodes, lto_input_sleb128 (ib));\n   if (caller == NULL || caller->decl == NULL_TREE)\n@@ -1236,6 +1239,8 @@ input_edge (struct lto_input_block *ib, VEC(cgraph_node_ptr, heap) *nodes,\n   inline_failed = (cgraph_inline_failed_t) bp_unpack_value (&bp,\n \t\t\t\t\t\t\t    HOST_BITS_PER_INT);\n   freq = (int) bp_unpack_value (&bp, HOST_BITS_PER_INT);\n+  call_stmt_size = (int) bp_unpack_value (&bp, HOST_BITS_PER_INT);\n+  call_stmt_time = (int) bp_unpack_value (&bp, HOST_BITS_PER_INT);\n   nest = (unsigned) bp_unpack_value (&bp, 30);\n \n   if (indirect)\n@@ -1248,6 +1253,8 @@ input_edge (struct lto_input_block *ib, VEC(cgraph_node_ptr, heap) *nodes,\n   edge->inline_failed = inline_failed;\n   edge->call_stmt_cannot_inline_p = bp_unpack_value (&bp, 1);\n   edge->can_throw_external = bp_unpack_value (&bp, 1);\n+  edge->call_stmt_size = call_stmt_size;\n+  edge->call_stmt_time = call_stmt_time;\n   if (indirect)\n     {\n       if (bp_unpack_value (&bp, 1))"}, {"sha": "c7e70b25205cb285a38106501754ab5a1c8b917c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -1,3 +1,8 @@\n+2011-04-06  Richard Guenther  <rguenther@suse.de>\n+ \n+\tPR tree-optimization/47663\n+\t* gcc.dg/tree-ssa/inline-8.c: New testcase.\n+\n 2011-04-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/torture/pr47917.c: Add -D_XOPEN_SOURCE=500 to dg-options for"}, {"sha": "3215473ec1a0010bb32afc42a0d5f86ed26cb5c2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -finline-small-functions --param early-inlining-insns=0 -fdump-tree-einline\" } */\n+\n+int foo0();\n+void bar0() { foo0(); }\n+void foobar0() { bar0(); }\n+\n+void foo1();\n+void bar1() { foo1(); }\n+void foobar1() { bar1(); }\n+\n+#if 0\n+int foo2();\n+int bar2() { return foo2(); }\n+/* The size estimate fails to see that inlining the call statement in bar2\n+   will make its lhs dead.  */\n+void foobar2() { bar2(); }\n+#endif\n+\n+int foo3();\n+int bar3() { return foo3(); }\n+int foobar3() { return bar3(); }\n+\n+int bar4() { return 0; }\n+void foobar4() { bar4(); }\n+\n+int bar5() { return 0; }\n+int foobar5() { return bar5(); }\n+\n+/* { dg-final { scan-tree-dump-times \"Inlining\" 5 \"einline\" } } */\n+/* { dg-final { cleanup-tree-dump \"einline\" } } */"}, {"sha": "a6dac2db5cfff5f43210afbfe4c526d811283f81", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d1d041aedeeb19cc16c718ec517aaeac81c10e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "patch": "@@ -3514,7 +3514,8 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \tif (decl)\n \t  funtype = TREE_TYPE (decl);\n \n-\tif (!VOID_TYPE_P (TREE_TYPE (funtype)))\n+\tif (!VOID_TYPE_P (TREE_TYPE (funtype))\n+\t    && gimple_call_lhs (stmt))\n \t  cost += estimate_move_cost (TREE_TYPE (funtype));\n \n \tif (funtype)\n@@ -3812,6 +3813,8 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t       && !DECL_IN_SYSTEM_HEADER (fn)\n \t       && reason != CIF_UNSPECIFIED\n \t       && !lookup_attribute (\"noinline\", DECL_ATTRIBUTES (fn))\n+\t       /* Do not warn about not inlined recursive calls.  */\n+\t       && !cgraph_edge_recursive_p (cg_edge)\n \t       /* Avoid warnings during early inline pass. */\n \t       && cgraph_global_info_ready)\n \t{"}]}