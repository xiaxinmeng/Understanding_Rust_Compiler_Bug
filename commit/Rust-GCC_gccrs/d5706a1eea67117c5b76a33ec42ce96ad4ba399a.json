{"sha": "d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3MDZhMWVlYTY3MTE3YzViNzZhMzNlYzQyY2U5NmFkNGJhMzk5YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-10-06T04:47:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-10-06T04:47:42Z"}, "message": "pretty-print.c: Include tree.h.\n\n\t* pretty-print.c: Include tree.h.\n\t(pp_base_prepare_to_format): New function, logic from\n\ttext_specifies_location.\n\t(pp_base_format_text): Use gcc_assert.\n\t* pretty-print.h (pp_prepare_to_format): New macro.\n\t(pp_base_prepare_to_format): Prototype.\n\t* diagnostic.c (text_specifies_location): Delete.\n\t(bug_report_request): Delete.\n\t(diagnostic_set_info): Don't call text_specifies_location.\n\t(diagnostic_action_after_output): Put text from\n\tbug_report_request inline here.  Use gcc_unreachable.\n\t(diagnostic_report_current_function): Fix comment.\n\t(diagnostic_report_diagnostic): Clarify logic for error recursion.\n\tCall pp_prepare_to_format before diagnostic_starter.\n\t(trim_filename): Use IS_DIR_SEPARATOR.\n\t(fatal_error, internal_error): Use gcc_unreachable.\n\t(error_recursion): Call diagnostic_action_after_output to\n\tissue the bug_report_request message and exit.\n\t* Makefile.in (diagnostic.o, pretty-print.o): Update dependencies.\n\n\t* c-parse.in: Add list of diagnostic messages to insulate\n\ttranslation template from version of yacc/bison used to\n\tcompile the grammar.\njava:\n\t* parse.y, parse-scan.y: Add list of diagnostic messages to\n\tinsulate translation template from version of yacc/bison used\n\tto compile the grammar.\ntreelang:\n\t* parse.y: Add list of diagnostic messages to insulate\n\ttranslation template from version of yacc/bison used to\n\tcompile the grammar.\npo:\n\t* gcc.pot: Regenerate.\n\nFrom-SVN: r88590", "tree": {"sha": "5a3ce60061200b7754e09f04fceb0b0f6076a700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3ce60061200b7754e09f04fceb0b0f6076a700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/comments", "author": null, "committer": null, "parents": [{"sha": "12cde21b1201cee86d4fd2c87aa8f40fb09b667e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12cde21b1201cee86d4fd2c87aa8f40fb09b667e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12cde21b1201cee86d4fd2c87aa8f40fb09b667e"}], "stats": {"total": 6452, "additions": 3625, "deletions": 2827}, "files": [{"sha": "a97d9d85a945cac7d652869b759144d63129b25a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1,3 +1,29 @@\n+2004-10-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* pretty-print.c: Include tree.h.\n+\t(pp_base_prepare_to_format): New function, logic from\n+\ttext_specifies_location.\n+\t(pp_base_format_text): Use gcc_assert.\n+\t* pretty-print.h (pp_prepare_to_format): New macro.\n+\t(pp_base_prepare_to_format): Prototype.\n+\t* diagnostic.c (text_specifies_location): Delete.\n+\t(bug_report_request): Delete.\n+\t(diagnostic_set_info): Don't call text_specifies_location.\n+\t(diagnostic_action_after_output): Put text from\n+\tbug_report_request inline here.  Use gcc_unreachable.\n+\t(diagnostic_report_current_function): Fix comment.\n+\t(diagnostic_report_diagnostic): Clarify logic for error recursion.\n+\tCall pp_prepare_to_format before diagnostic_starter.\n+\t(trim_filename): Use IS_DIR_SEPARATOR.\n+\t(fatal_error, internal_error): Use gcc_unreachable.\n+\t(error_recursion): Call diagnostic_action_after_output to\n+\tissue the bug_report_request message and exit.\n+\t* Makefile.in (diagnostic.o, pretty-print.o): Update dependencies.\n+\n+\t* c-parse.in: Add list of diagnostic messages to insulate\n+\ttranslation template from version of yacc/bison used to\n+\tcompile the grammar.\n+\n 2004-10-06  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR 16406"}, {"sha": "2f129272b7644bc41a32d965016317e46bdd8577", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1787,9 +1787,9 @@ tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(FLAGS_H) real.h toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) \\\n    $(TM_P_H) langhooks.h $(MD5_H)\n-diagnostic.o : diagnostic.c $(DIAGNOSTIC_H) real.h \\\n-   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) $(GGC_H) \\\n-   input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n+diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+   $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) input.h toplev.h intl.h \\\n+   $(DIAGNOSTIC_H) langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n \toutput.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h target.h\n@@ -2173,7 +2173,8 @@ lambda-code.o: lambda-code.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TREE_DATA_REF_H) $(SCEV_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n-pretty-print.o: $(CONFIG_H) $(SYSTEM_H) pretty-print.c $(PRETTY_PRINT_H)\n+pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H) \\\n+   $(TREE_H)\n errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) $(GGC_H) \\\n@@ -2605,7 +2606,7 @@ build/gengtype$(build_exeext) : build/gengtype.o build/gengtype-lex.o \\\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n \t build/gengtype.o build/gengtype-lex.o build/gengtype-yacc.o \\\n \t $(BUILD_ERRORS) $(BUILD_LIBS)\n-\t\n+\n build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   gengtype.h gtyp-gen.h rtl.def insn-notes.def errors.h\n "}, {"sha": "3defcd03763d9f76c8af405b5cc0864ea2b63057", "filename": "gcc/c-parse.in", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -52,7 +52,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"c-common.h\"\n \n-/* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n /* Like the default stack expander, except (1) use realloc when possible,\n@@ -3556,4 +3555,21 @@ c_parse_file (void)\n     }\n }\n \n+#ifdef __XGETTEXT__\n+/* Depending on the version of Bison used to compile this grammar,\n+   it may issue generic diagnostics spelled \"syntax error\" or\n+   \"parse error\".  To prevent this from changing the translation\n+   template randomly, we list all the variants of this particular\n+   diagnostic here.  Translators: there is no fine distinction\n+   between diagnostics with \"syntax error\" in them, and diagnostics\n+   with \"parse error\" in them.  It's okay to give them both the same\n+   translation.  */\n+const char d1[] = N_(\"syntax error\");\n+const char d2[] = N_(\"parse error\");\n+const char d3[] = N_(\"syntax error; also virtual memory exhausted\");\n+const char d4[] = N_(\"parse error; also virtual memory exhausted\");\n+const char d5[] = N_(\"syntax error: cannot back up\");\n+const char d6[] = N_(\"parse error: cannot back up\");\n+#endif\n+\n #include \"gt-c-parse.h\""}, {"sha": "0705c6386008ab37a958f4e914a247e2afed60d3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 36, "deletions": 71, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -51,7 +51,6 @@ static void default_diagnostic_finalizer (diagnostic_context *,\n \t\t\t\t\t  diagnostic_info *);\n \n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n-static bool text_specifies_location (text_info *, location_t *);\n static bool diagnostic_count_diagnostic (diagnostic_context *,\n \t\t\t\t\t diagnostic_info *);\n static void diagnostic_action_after_output (diagnostic_context *,\n@@ -61,13 +60,6 @@ static void real_abort (void) ATTRIBUTE_NORETURN;\n /* A diagnostic_context surrogate for stderr.  */\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n-\n-/* Boilerplate text used in two locations.  */\n-#define bug_report_request \\\n-\"Please submit a full bug report,\\n\\\n-with preprocessed source if appropriate.\\n\\\n-See %s for instructions.\\n\"\n-\n \f\n /* Return a malloc'd string containing MSG formatted a la printf.  The\n    caller is responsible for freeing the memory.  */\n@@ -118,35 +110,6 @@ diagnostic_initialize (diagnostic_context *context)\n   context->lock = 0;\n }\n \n-/* Returns true if the next format specifier in TEXT is a format specifier\n-   for a location_t.  If so, update the object pointed by LOCUS to reflect\n-   the specified location in *TEXT->args_ptr.  */\n-static bool\n-text_specifies_location (text_info *text, location_t *locus)\n-{\n-  const char *p;\n-  /* Skip any leading text.  */\n-  for (p = text->format_spec; *p && *p != '%'; ++p)\n-    ;\n-\n-  /* Extract the location information if any.  */\n-  if (p[0] == '%' && p[1] == 'H')\n-    {\n-      *locus = *va_arg (*text->args_ptr, location_t *);\n-      text->format_spec = p + 2;\n-      return true;\n-    }\n-  else if (p[0] == '%' && p[1] == 'J')\n-    {\n-      tree t = va_arg (*text->args_ptr, tree);\n-      *locus = DECL_SOURCE_LOCATION (t);\n-      text->format_spec = p + 2;\n-      return true;\n-    }\n-\n-  return false;\n-}\n-\n void\n diagnostic_set_info (diagnostic_info *diagnostic, const char *msgid,\n \t\t     va_list *args, location_t location,\n@@ -155,10 +118,7 @@ diagnostic_set_info (diagnostic_info *diagnostic, const char *msgid,\n   diagnostic->message.err_no = errno;\n   diagnostic->message.args_ptr = args;\n   diagnostic->message.format_spec = _(msgid);\n-  /* If the diagnostic message doesn't specify a location,\n-     use LOCATION.  */\n-  if (!text_specifies_location (&diagnostic->message, &diagnostic->location))\n-    diagnostic->location = location;\n+  diagnostic->location = location;\n   diagnostic->kind = kind;\n }\n \n@@ -274,7 +234,9 @@ diagnostic_action_after_output (diagnostic_context *context,\n       if (context->abort_on_error)\n \treal_abort ();\n \n-      fnotice (stderr, bug_report_request, bug_report_url);\n+      fnotice (stderr, \"Please submit a full bug report,\\n\"\n+\t       \"with preprocessed source if appropriate.\\n\"\n+\t       \"See %s for instructions.\\n\", bug_report_url);\n       exit (FATAL_EXIT_CODE);\n \n     case DK_FATAL:\n@@ -285,14 +247,12 @@ diagnostic_action_after_output (diagnostic_context *context,\n       exit (FATAL_EXIT_CODE);\n \n     default:\n-      real_abort ();\n+      gcc_unreachable ();\n     }\n }\n \n /* Prints out, if necessary, the name of the current function\n-  that caused an error.  Called from all error and warning functions.\n-  We ignore the FILE parameter, as it cannot be relied upon.  */\n-\n+   that caused an error.  Called from all error and warning functions.  */\n void\n diagnostic_report_current_function (diagnostic_context *context)\n {\n@@ -355,11 +315,23 @@ void\n diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n-  if (context->lock++ && diagnostic->kind < DK_SORRY)\n-    error_recursion (context);\n+  if (context->lock > 0)\n+    {\n+      /* If we're reporting an ICE in the middle of some other error,\n+\t try to flush out the previous error, then let this one\n+\t through.  Don't do this more than once.  */\n+      if (diagnostic->kind == DK_ICE && context->lock == 1)\n+\tpp_flush (context->printer);\n+      else\n+\terror_recursion (context);\n+    }\n+\n+  context->lock++;\n \n   if (diagnostic_count_diagnostic (context, diagnostic))\n     {\n+      pp_prepare_to_format (context->printer, &diagnostic->message,\n+\t\t\t    &diagnostic->location);\n       (*diagnostic_starter (context)) (context, diagnostic);\n       pp_format_text (context->printer, &diagnostic->message);\n       (*diagnostic_finalizer (context)) (context, diagnostic);\n@@ -383,32 +355,18 @@ trim_filename (const char *name)\n \n   /* First skip any \"../\" in each filename.  This allows us to give a proper\n      reference to a file in a subdirectory.  */\n-  while (p[0] == '.' && p[1] == '.'\n-\t && (p[2] == DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t     || p[2] == DIR_SEPARATOR_2\n-#endif\n-\t     ))\n+  while (p[0] == '.' && p[1] == '.' && IS_DIR_SEPARATOR (p[2]))\n     p += 3;\n \n-  while (q[0] == '.' && q[1] == '.'\n-\t && (q[2] == DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t     || p[2] == DIR_SEPARATOR_2\n-#endif\n-\t     ))\n+  while (q[0] == '.' && q[1] == '.' && IS_DIR_SEPARATOR (q[2]))\n     q += 3;\n \n   /* Now skip any parts the two filenames have in common.  */\n   while (*p == *q && *p != 0 && *q != 0)\n     p++, q++;\n \n   /* Now go backwards until the previous directory separator.  */\n-  while (p > name && p[-1] != DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t && p[-1] != DIR_SEPARATOR_2\n-#endif\n-\t )\n+  while (p > name && IS_DIR_SEPARATOR (p[-1]))\n     p--;\n \n   return p;\n@@ -526,8 +484,7 @@ fatal_error (const char *msgid, ...)\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n \n-  /* NOTREACHED */\n-  real_abort ();\n+  gcc_unreachable ();\n }\n \n /* An internal consistency check has failed.  We make no attempt to\n@@ -545,8 +502,7 @@ internal_error (const char *msgid, ...)\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n \n-  /* NOTREACHED */\n-  real_abort ();\n+  gcc_unreachable ();\n }\n \f\n /* Special case error functions.  Most are implemented in terms of the\n@@ -572,13 +528,22 @@ fnotice (FILE *file, const char *msgid, ...)\n static void\n error_recursion (diagnostic_context *context)\n {\n+  diagnostic_info diagnostic;\n+\n   if (context->lock < 3)\n     pp_flush (context->printer);\n \n   fnotice (stderr,\n \t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n-  fnotice (stderr, bug_report_request, bug_report_url);\n-  exit (FATAL_EXIT_CODE);\n+\n+  /* Call diagnostic_action_after_output to get the \"please submit a bug\n+     report\" message.  It only looks at the kind field of diagnostic_info.  */\n+  diagnostic.kind = DK_ICE;\n+  diagnostic_action_after_output (context, &diagnostic);\n+\n+  /* Do not use gcc_unreachable here; that goes through internal_error\n+     and therefore would cause infinite recursion.  */\n+  real_abort ();\n }\n \n /* Report an internal compiler error in a friendly manner.  This is"}, {"sha": "d28ee2c6f7977dc1ae25219573a2744d3d94f9e8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1,3 +1,9 @@\n+2004-10-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* parse.y, parse-scan.y: Add list of diagnostic messages to\n+\tinsulate translation template from version of yacc/bison used\n+\tto compile the grammar.\n+\n 2004-10-05  Ranjit Mathew  <rmathew@hotmail.com>\n \n \tPrepare for %q, %< and %> in diagnostic message strings.\n@@ -230,7 +236,7 @@\n \tFix bootstrap.\n \t* gjavah.c (free_method_name_list): Fix function definition so\n \tit's a proper C prototype.\n-\t\n+\n 2004-09-21  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/17575:"}, {"sha": "f3f5faae4572025a05a2a4e60840d63520a64275", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1360,3 +1360,20 @@ yyerror (const char *msg ATTRIBUTE_UNUSED)\n   fprintf (stderr, \"%s: %d: %s\\n\", input_filename, input_line, msg);\n   exit (1);\n }\n+\n+#ifdef __XGETTEXT__\n+/* Depending on the version of Bison used to compile this grammar,\n+   it may issue generic diagnostics spelled \"syntax error\" or\n+   \"parse error\".  To prevent this from changing the translation\n+   template randomly, we list all the variants of this particular\n+   diagnostic here.  Translators: there is no fine distinction\n+   between diagnostics with \"syntax error\" in them, and diagnostics\n+   with \"parse error\" in them.  It's okay to give them both the same\n+   translation.  */\n+const char d1[] = N_(\"syntax error\");\n+const char d2[] = N_(\"parse error\");\n+const char d3[] = N_(\"syntax error; also virtual memory exhausted\");\n+const char d4[] = N_(\"parse error; also virtual memory exhausted\");\n+const char d5[] = N_(\"syntax error: cannot back up\");\n+const char d6[] = N_(\"parse error: cannot back up\");\n+#endif"}, {"sha": "95bd93a0f1b03d846d4bcec44b9dbff1306a5597", "filename": "gcc/java/parse.y", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -16409,5 +16409,22 @@ emit_test_initialization (void **entry_p, void *info)\n   return true;\n }\n \n+#ifdef __XGETTEXT__\n+/* Depending on the version of Bison used to compile this grammar,\n+   it may issue generic diagnostics spelled \"syntax error\" or\n+   \"parse error\".  To prevent this from changing the translation\n+   template randomly, we list all the variants of this particular\n+   diagnostic here.  Translators: there is no fine distinction\n+   between diagnostics with \"syntax error\" in them, and diagnostics\n+   with \"parse error\" in them.  It's okay to give them both the same\n+   translation.  */\n+const char d1[] = N_(\"syntax error\");\n+const char d2[] = N_(\"parse error\");\n+const char d3[] = N_(\"syntax error; also virtual memory exhausted\");\n+const char d4[] = N_(\"parse error; also virtual memory exhausted\");\n+const char d5[] = N_(\"syntax error: cannot back up\");\n+const char d6[] = N_(\"parse error: cannot back up\");\n+#endif\n+\n #include \"gt-java-parse.h\"\n #include \"gtype-java.h\""}, {"sha": "17b92d0154f6be3abb8f0fb1e8a91c88b2cbb09f", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1,3 +1,7 @@\n+2004-10-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2004-10-03  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* da.po: Update."}, {"sha": "80cf50a09dc1a26e83dcceb09cfcfa35635c6cb2", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 3428, "deletions": 2743, "changes": 6171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a"}, {"sha": "b2e0ee439becd78c51378d62bce7c0648964690e", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -26,6 +26,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"intl.h\"\n #include \"pretty-print.h\"\n+#include \"tree.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free  free\n@@ -165,6 +166,40 @@ pp_base_indent (pretty_printer *pp)\n     pp_space (pp);\n }\n \n+/* Prepare PP to format a message pointed to by TEXT, with tentative\n+   location LOCUS.  It is expected that a call to pp_format_text with\n+   exactly the same PP and TEXT arguments will follow.  This routine\n+   may modify the data in memory at TEXT and LOCP, and if it does,\n+   caller is expected to notice.\n+\n+   Currently, all this does is notice a %H or %J escape at the beginning\n+   of the string, and update LOCUS to match.  */\n+void\n+pp_base_prepare_to_format (pretty_printer *pp ATTRIBUTE_UNUSED,\n+\t\t\t   text_info *text,\n+\t\t\t   location_t *locus)\n+{\n+  const char *p = text->format_spec;\n+  tree t;\n+\n+  /* Extract the location information if any.  */\n+  if (p[0] == '%')\n+    switch (p[1])\n+      {\n+      case 'H':\n+\t*locus = *va_arg (*text->args_ptr, location_t *);\n+\ttext->format_spec = p + 2;\n+\tbreak;\n+\n+      case 'J':\n+\tt = va_arg (*text->args_ptr, tree);\n+\t*locus = DECL_SOURCE_LOCATION (t);\n+\ttext->format_spec = p + 2;\n+\tbreak;\n+      }\n+}\n+\n+\n /* Format a message pointed to by TEXT.  The following format specifiers are\n    recognized as being client independent:\n    %d, %i: (signed) integer in base ten.\n@@ -231,8 +266,7 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n           break;\n         }\n       /* We don't support precision beyond that of \"long long\".  */\n-      if (precision > 2)\n-        abort();\n+      gcc_assert (precision <= 2);\n \n       if (quoted)\n \tpp_string (pp, open_quote);\n@@ -319,10 +353,11 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n \t    int n;\n \t    const char *s;\n \t    /* We handle no precision specifier but '%.*s'.  */\n-\t    if (*++text->format_spec != '*')\n-\t      abort ();\n-\t    else if (*++text->format_spec != 's')\n-\t      abort ();\n+\t    ++text->format_spec;\n+\t    gcc_assert (*text->format_spec == '*');\n+\t    ++text->format_spec;\n+\t    gcc_assert (*text->format_spec == 's');\n+\n \t    n = va_arg (*text->args_ptr, int);\n \t    s = va_arg (*text->args_ptr, const char *);\n \t    pp_append_text (pp, s, s + n);"}, {"sha": "944da5b84402c0d27f55295b74090278e5de07ef", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -158,6 +158,8 @@ struct pretty_print_info\n #define pp_append_text(PP, B, E) \\\n   pp_base_append_text (pp_base (PP), B, E)\n #define pp_flush(PP)            pp_base_flush (pp_base (PP))\n+#define pp_prepare_to_format(PP, TI, LOC) \\\n+  pp_base_prepare_to_format (pp_base (PP), TI, LOC)\n #define pp_format_text(PP, TI)  pp_base_format_text (pp_base (PP), TI)\n #define pp_format_verbatim(PP, TI) \\\n   pp_base_format_verbatim (pp_base (PP), TI)\n@@ -261,6 +263,8 @@ extern void pp_printf (pretty_printer *, const char *, ...)\n \n extern void pp_verbatim (pretty_printer *, const char *, ...);\n extern void pp_base_flush (pretty_printer *);\n+extern void pp_base_prepare_to_format (pretty_printer *, text_info *,\n+\t\t\t\t       location_t *);\n extern void pp_base_format_text (pretty_printer *, text_info *);\n extern void pp_base_format_verbatim (pretty_printer *, text_info *);\n "}, {"sha": "810d492490d57e1b6601a4ec5cda3e304c480b5d", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -1,3 +1,9 @@\n+2004-10-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* parse.y: Add list of diagnostic messages to insulate\n+\ttranslation template from version of yacc/bison used to\n+\tcompile the grammar.\n+\n 2004-10-02  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR other/17762"}, {"sha": "b1330c70ccfbe0787b7f767040c8f5440b54119d", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5706a1eea67117c5b76a33ec42ce96ad4ba399a/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=d5706a1eea67117c5b76a33ec42ce96ad4ba399a", "patch": "@@ -954,3 +954,19 @@ treelang_debug (void)\n     yydebug = 1;\n }\n \n+#ifdef __XGETTEXT__\n+/* Depending on the version of Bison used to compile this grammar,\n+   it may issue generic diagnostics spelled \"syntax error\" or\n+   \"parse error\".  To prevent this from changing the translation\n+   template randomly, we list all the variants of this particular\n+   diagnostic here.  Translators: there is no fine distinction\n+   between diagnostics with \"syntax error\" in them, and diagnostics\n+   with \"parse error\" in them.  It's okay to give them both the same\n+   translation.  */\n+const char d1[] = N_(\"syntax error\");\n+const char d2[] = N_(\"parse error\");\n+const char d3[] = N_(\"syntax error; also virtual memory exhausted\");\n+const char d4[] = N_(\"parse error; also virtual memory exhausted\");\n+const char d5[] = N_(\"syntax error: cannot back up\");\n+const char d6[] = N_(\"parse error: cannot back up\");\n+#endif"}]}