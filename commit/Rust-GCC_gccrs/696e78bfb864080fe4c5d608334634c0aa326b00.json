{"sha": "696e78bfb864080fe4c5d608334634c0aa326b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ZTc4YmZiODY0MDgwZmU0YzVkNjA4MzM0NjM0YzBhYTMyNmIwMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-19T22:13:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-19T22:13:05Z"}, "message": "tree-ssa-phiopt.c, [...]: Fix comment typos.\n\n\t* tree-ssa-phiopt.c, config/arm/arm.c, config/fr30/fr30.md,\n\tconfig/mcore/mcore.c: Fix comment typos.\n\nFrom-SVN: r98421", "tree": {"sha": "71196bf3c67910a8df648dd8986d3e4cc07b2067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71196bf3c67910a8df648dd8986d3e4cc07b2067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696e78bfb864080fe4c5d608334634c0aa326b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696e78bfb864080fe4c5d608334634c0aa326b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696e78bfb864080fe4c5d608334634c0aa326b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696e78bfb864080fe4c5d608334634c0aa326b00/comments", "author": null, "committer": null, "parents": [{"sha": "30ee829f8116d6a9cdd4c5ef2d5e8a51fb4154b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ee829f8116d6a9cdd4c5ef2d5e8a51fb4154b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ee829f8116d6a9cdd4c5ef2d5e8a51fb4154b2"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "29fcc2f7f4b9ccc317d05c647b9ada79426596a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=696e78bfb864080fe4c5d608334634c0aa326b00", "patch": "@@ -1,3 +1,8 @@\n+2005-04-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-phiopt.c, config/arm/arm.c, config/fr30/fr30.md,\n+\tconfig/mcore/mcore.c: Fix comment typos.\n+\n 2005-04-19  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* Makefile.in (libgcc.mk): Pass GCC_FOR_TARGET."}, {"sha": "ab53a1783795ad35c71713a605acbe1cac7a449c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=696e78bfb864080fe4c5d608334634c0aa326b00", "patch": "@@ -12694,7 +12694,7 @@ is_called_in_ARM_mode (tree func)\n   if (TREE_CODE (func) != FUNCTION_DECL)\n     abort ();\n \n-  /* Ignore the problem about functions whoes address is taken.  */\n+  /* Ignore the problem about functions whose address is taken.  */\n   if (TARGET_CALLEE_INTERWORKING && TREE_PUBLIC (func))\n     return TRUE;\n "}, {"sha": "26272442cd9272b178099d8bb56c1d79097e3fed", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=696e78bfb864080fe4c5d608334634c0aa326b00", "patch": "@@ -38,8 +38,8 @@\n ;; An instruction by default is considered to be 'delyabable'\n ;; that is, it can be placed into a delay slot, but it is not\n ;; itself a delayed branch type instruction.  An instruction\n-;; whoes type is 'delayed' is one which has a delay slot, and\n-;; an instruction whoes delay_type is 'other' is one which does\n+;; whose type is 'delayed' is one which has a delay slot, and\n+;; an instruction whose delay_type is 'other' is one which does\n ;; not have a delay slot, nor can it be placed into a delay slot.\n \n (define_attr \"delay_type\" \"delayable,delayed,other\" (const_string \"delayable\"))\n@@ -316,7 +316,7 @@\n )\n \n ;; If we are loading a large positive constant, one which has bits\n-;; in the top byte set, but whoes set bits all lie within an 8 bit\n+;; in the top byte set, but whose set bits all lie within an 8 bit\n ;; range, then we can save time and space by loading the byte value\n ;; and shifting it into place.\n (define_split"}, {"sha": "0b8b415c33d1f92dfe3ec76ef51c4a7d92ddf04f", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=696e78bfb864080fe4c5d608334634c0aa326b00", "patch": "@@ -2705,7 +2705,7 @@ handle_structs_in_regs (enum machine_mode mode, tree type, int reg)\n {\n   int size;\n \n-  /* The MCore ABI defines that a structure whoes size is not a whole multiple\n+  /* The MCore ABI defines that a structure whose size is not a whole multiple\n      of bytes is passed packed into registers (or spilled onto the stack if\n      not enough registers are available) with the last few bytes of the\n      structure being packed, left-justified, into the last register/stack slot."}, {"sha": "5f5857bf21abc2c5f7ca67aa67aaae1b540ededf", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696e78bfb864080fe4c5d608334634c0aa326b00/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=696e78bfb864080fe4c5d608334634c0aa326b00", "patch": "@@ -301,7 +301,7 @@ empty_block_p (basic_block bb)\n   return true;\n }\n \n-/* Replace PHI node element whoes edge is E in block BB with variable NEW.\n+/* Replace PHI node element whose edge is E in block BB with variable NEW.\n    Remove the edge from COND_BLOCK which does not lead to BB (COND_BLOCK\n    is known to have two edges, one of which must reach BB).  */\n "}]}