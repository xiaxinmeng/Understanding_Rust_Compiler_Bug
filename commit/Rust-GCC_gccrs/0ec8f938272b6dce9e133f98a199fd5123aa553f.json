{"sha": "0ec8f938272b6dce9e133f98a199fd5123aa553f", "node_id": "C_kwDOANBUbNoAKDBlYzhmOTM4MjcyYjZkY2U5ZTEzM2Y5OGExOTlmZDUxMjNhYTU1M2Y", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T14:53:50Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T15:29:28Z"}, "message": "session-manager: Produce a fatal error if multiple files are specified", "tree": {"sha": "3fe6f1997b4975e3e374298b070ac47ea7481c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe6f1997b4975e3e374298b070ac47ea7481c6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ec8f938272b6dce9e133f98a199fd5123aa553f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec8f938272b6dce9e133f98a199fd5123aa553f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec8f938272b6dce9e133f98a199fd5123aa553f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec8f938272b6dce9e133f98a199fd5123aa553f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237be3f618dfae396944c601c295eb182d32e54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237be3f618dfae396944c601c295eb182d32e54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237be3f618dfae396944c601c295eb182d32e54e"}], "stats": {"total": 63, "additions": 15, "deletions": 48}, "files": [{"sha": "95c92f8092b41ca156bc94caaf14ebb8bed946ef", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=0ec8f938272b6dce9e133f98a199fd5123aa553f", "patch": "@@ -69,13 +69,11 @@\n // Language-dependent contents of a type. GTY() mark used for garbage collector.\n struct GTY (()) lang_type\n {\n-  char dummy;\n };\n \n // Language-dependent contents of a decl.\n struct GTY (()) lang_decl\n {\n-  char dummy;\n };\n \n // Language-dependent contents of an identifier.  This must include a\n@@ -100,7 +98,6 @@ union GTY ((\n // We don't use language_function.\n struct GTY (()) language_function\n {\n-  int dummy;\n };\n \n // has to be in same compilation unit as session, so here for now\n@@ -172,7 +169,7 @@ grs_langhook_parse_file (void)\n {\n   rust_debug (\"Preparing to parse files. \");\n \n-  Rust::Session::get_instance ().parse_files (num_in_fnames, in_fnames);\n+  Rust::Session::get_instance ().handle_input_files (num_in_fnames, in_fnames);\n }\n \n /* Seems to get the exact type for a specific type - e.g. for scalar float with\n@@ -280,32 +277,10 @@ grs_langhook_handle_option (\n {\n   // Convert integer code to lang.opt enum codes with names.\n   enum opt_code code = (enum opt_code) scode;\n-  // used to store whether results of various stuff are successful\n-  // bool ret = true;\n \n-  // delegate to session manager\n+  // Delegate to session manager\n   return Rust::Session::get_instance ().handle_option (code, arg, value, kind,\n \t\t\t\t\t\t       loc, handlers);\n-\n-  // Handles options as listed in lang.opt.\n-  /*switch (code) {\n-      case OPT_I:\n-\t  // TODO: add search path\n-\t  break;\n-      case OPT_L:\n-\t  // TODO: add library link path or something\n-\t  break;\n-      case OPT_frust_dump:\n-\t  // enable dump and return whether this was successful\n-\t  ret = rust_enable_dump(arg) ? true : false;\n-\t  break;\n-      // no option handling for -o\n-      default:\n-\t  // return 1 to indicate option is valid\n-\t  break;\n-  }\n-\n-  return ret;*/\n }\n \n /* Run after parsing options.  */\n@@ -447,17 +422,10 @@ rust_localize_identifier (const char *ident)\n \n namespace selftest {\n \n-static void\n-simple_assert ()\n-{\n-  ASSERT_TRUE (true);\n-}\n-\n void\n run_rust_tests ()\n {\n   // Call tests for the rust frontend here\n-  simple_assert ();\n   rust_cfg_parser_test ();\n   rust_privacy_ctx_test ();\n   rust_crate_name_validation_test ();"}, {"sha": "a7317247e07bd49150403b30819dd37926db8500", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=0ec8f938272b6dce9e133f98a199fd5123aa553f", "patch": "@@ -574,13 +574,16 @@ Session::enable_dump (std::string arg)\n /* Actual main entry point for front-end. Called from langhook to parse files.\n  */\n void\n-Session::parse_files (int num_files, const char **files)\n+Session::handle_input_files (int num_files, const char **files)\n {\n+  if (num_files != 1)\n+    rust_fatal_error (Location (),\n+\t\t      \"only one file may be specified on the command line\");\n+\n+  const auto &file = files[0];\n+\n   if (options.crate_name.empty ())\n     {\n-      /* HACK: We use the first file to infer the crate name, which might be\n-       * incorrect: since rustc only allows one file to be supplied in the\n-       * command-line */\n       auto filename = \"-\";\n       if (num_files > 0)\n \tfilename = files[0];\n@@ -594,13 +597,9 @@ Session::parse_files (int num_files, const char **files)\n \n   CrateNum crate_num = mappings->get_next_crate_num (options.get_crate_name ());\n   mappings->set_current_crate (crate_num);\n-  for (int i = 0; i < num_files; i++)\n-    {\n-      rust_debug (\"Attempting to parse file: %s\", files[i]);\n-      parse_file (files[i]);\n-    }\n-  /* TODO: should semantic analysis be dealed with here? or per file? for now,\n-   * per-file. */\n+\n+  rust_debug (\"Attempting to parse file: %s\", file);\n+  compile_crate (file);\n }\n \n void\n@@ -656,7 +655,7 @@ Session::handle_crate_name (const AST::Crate &parsed_crate)\n \n // Parses a single file with filename filename.\n void\n-Session::parse_file (const char *filename)\n+Session::compile_crate (const char *filename)\n {\n   RAIIFile file_wrap (filename);\n   if (!file_wrap.ok ())"}, {"sha": "2432de705923700655ad67591e3c3f17f6a2845b", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec8f938272b6dce9e133f98a199fd5123aa553f/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=0ec8f938272b6dce9e133f98a199fd5123aa553f", "patch": "@@ -298,7 +298,7 @@ struct Session\n   bool handle_option (enum opt_code code, const char *arg, HOST_WIDE_INT value,\n \t\t      int kind, location_t loc,\n \t\t      const struct cl_option_handlers *handlers);\n-  void parse_files (int num_files, const char **files);\n+  void handle_input_files (int num_files, const char **files);\n   void init_options ();\n   void handle_crate_name (const AST::Crate &parsed_crate);\n \n@@ -314,7 +314,7 @@ struct Session\n   NodeId load_extern_crate (const std::string &crate_name, Location locus);\n \n private:\n-  void parse_file (const char *filename);\n+  void compile_crate (const char *filename);\n   bool enable_dump (std::string arg);\n \n   void dump_lex (Parser<Lexer> &parser) const;"}]}