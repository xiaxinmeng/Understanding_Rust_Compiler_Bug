{"sha": "1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "node_id": "C_kwDOANBUbNoAKDFmY2U3ZDI5ZWJiNDdjODA1YWQ0ZDM4YjY4ZTAwZjdiMTE3OGY0Njc", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-17T15:39:59Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-17T15:39:59Z"}, "message": "Obfuscate the copyright text in gcc/m2/mc/mcOptions.mod\n\nObfuscate the copyright text in gcc/m2/mc/mcOptions.mod so that the\nyear change script does not attempt to modify the text.  The year\nis determined at runtime and therefore the text requires\nno modification.  The middle printf (C) can be replaced by\na unicode character in the future.\n\ngcc/m2/ChangeLog:\n\n\t* mc-boot/GM2RTS.c: Rebuilt.\n\t* mc-boot/GM2RTS.h: Rebuilt.\n\t* mc-boot/Gdecl.c: Rebuilt.\n\t* mc-boot/GmcOptions.c: Rebuilt.\n\t* mc/mcOptions.mod (displayVersion):\n\tSplit first printf into three components\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "d72185346f3c72670fb1a3ade5400ea42d82cdf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72185346f3c72670fb1a3ade5400ea42d82cdf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/comments", "author": null, "committer": null, "parents": [{"sha": "d74d84c623ea8ae394b28c26e6a9a946ff126c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74d84c623ea8ae394b28c26e6a9a946ff126c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74d84c623ea8ae394b28c26e6a9a946ff126c31"}], "stats": {"total": 171, "additions": 131, "deletions": 40}, "files": [{"sha": "1b08741181b271d0d5befe575ec1ac3409c5db78", "filename": "gcc/m2/mc-boot/GM2RTS.c", "status": "modified", "additions": 98, "deletions": 23, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGM2RTS.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGM2RTS.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGM2RTS.c?ref=1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "patch": "@@ -61,6 +61,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n typedef struct M2RTS_ArgCVEnvP_p M2RTS_ArgCVEnvP;\n \n+#   define stderrFd 2\n typedef struct M2RTS_ProcedureList_r M2RTS_ProcedureList;\n \n typedef char *M2RTS_PtrToChar;\n@@ -175,10 +176,19 @@ extern \"C\" void M2RTS_HALT (int exitcode) __attribute__ ((noreturn));\n \n /*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n */\n \n-extern \"C\" void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+\n+/*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*/\n+\n+extern \"C\" void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description);\n \n /*\n    ExitOnHalt - if HALT is executed then call exit with the exit code, e.\n@@ -190,7 +200,7 @@ extern \"C\" void M2RTS_ExitOnHalt (int e);\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n */\n \n-extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n \n /*\n    Length - returns the length of a string, a. This is called whenever\n@@ -245,6 +255,18 @@ static unsigned int AppendProc (M2RTS_ProcedureList *proclist, PROC proc);\n \n static void ErrorString (const char *a_, unsigned int _a_high);\n \n+/*\n+   ErrorStringC - writes a string to stderr.\n+*/\n+\n+static void ErrorStringC (void * str);\n+\n+/*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*/\n+\n+static void ErrorMessageC (void * message, void * filename, unsigned int line, void * function) __attribute__ ((noreturn));\n+\n /*\n    InitProcList - initialize the head and tail pointers to NIL.\n */\n@@ -319,7 +341,49 @@ static void ErrorString (const char *a_, unsigned int _a_high)\n   /* make a local copy of each unbounded array.  */\n   memcpy (a, a_, _a_high+1);\n \n-  n = static_cast<int> (libc_write (2, &a, static_cast<size_t> (StrLib_StrLen ((const char *) a, _a_high))));\n+  n = static_cast<int> (libc_write (stderrFd, &a, static_cast<size_t> (StrLib_StrLen ((const char *) a, _a_high))));\n+}\n+\n+\n+/*\n+   ErrorStringC - writes a string to stderr.\n+*/\n+\n+static void ErrorStringC (void * str)\n+{\n+  int len;\n+\n+  len = static_cast<int> (libc_write (stderrFd, str, libc_strlen (str)));\n+}\n+\n+\n+/*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*/\n+\n+static void ErrorMessageC (void * message, void * filename, unsigned int line, void * function)\n+{\n+  typedef struct ErrorMessageC__T2_a ErrorMessageC__T2;\n+\n+  struct ErrorMessageC__T2_a { char array[10+1]; };\n+  ErrorMessageC__T2 buffer;\n+\n+  ErrorStringC (filename);\n+  ErrorString ((const char *) \":\", 1);\n+  NumberIO_CardToStr (line, 0, (char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) \":\", 1);\n+  if ((libc_strlen (function)) > 0)\n+    {\n+      ErrorString ((const char *) \"in \", 3);\n+      ErrorStringC (function);\n+      ErrorString ((const char *) \" has caused \", 12);\n+    }\n+  ErrorStringC (message);\n+  buffer.array[0] = ASCII_nl;\n+  buffer.array[1] = ASCII_nul;\n+  ErrorString ((const char *) &buffer.array[0], 10);\n+  libc_exit (1);\n }\n \n \n@@ -516,23 +580,34 @@ extern \"C\" void M2RTS_HALT (int exitcode)\n \n /*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n */\n \n-extern \"C\" void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high)\n+extern \"C\" void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high)\n {\n-  char file[_file_high+1];\n+  char filename[_filename_high+1];\n   char function[_function_high+1];\n   char description[_description_high+1];\n \n   /* make a local copy of each unbounded array.  */\n-  memcpy (file, file_, _file_high+1);\n+  memcpy (filename, filename_, _filename_high+1);\n   memcpy (function, function_, _function_high+1);\n   memcpy (description, description_, _description_high+1);\n \n-  M2RTS_ErrorMessage ((const char *) description, _description_high, (const char *) file, _file_high, line, (const char *) function, _function_high);\n-  M2RTS_HALT (-1);\n-  __builtin_unreachable ();\n+  M2RTS_ErrorMessage ((const char *) description, _description_high, (const char *) filename, _filename_high, line, (const char *) function, _function_high);\n+}\n+\n+\n+/*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*/\n+\n+extern \"C\" void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description)\n+{\n+  ErrorMessageC (description, filename, line, function);\n }\n \n \n@@ -551,25 +626,25 @@ extern \"C\" void M2RTS_ExitOnHalt (int e)\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n */\n \n-extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high)\n+extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high)\n {\n-  typedef struct ErrorMessage__T2_a ErrorMessage__T2;\n+  typedef struct ErrorMessage__T3_a ErrorMessage__T3;\n \n-  struct ErrorMessage__T2_a { char array[10+1]; };\n-  ErrorMessage__T2 LineNo;\n+  struct ErrorMessage__T3_a { char array[10+1]; };\n+  ErrorMessage__T3 buffer;\n   char message[_message_high+1];\n-  char file[_file_high+1];\n+  char filename[_filename_high+1];\n   char function[_function_high+1];\n \n   /* make a local copy of each unbounded array.  */\n   memcpy (message, message_, _message_high+1);\n-  memcpy (file, file_, _file_high+1);\n+  memcpy (filename, filename_, _filename_high+1);\n   memcpy (function, function_, _function_high+1);\n \n-  ErrorString ((const char *) file, _file_high);\n+  ErrorString ((const char *) filename, _filename_high);\n   ErrorString ((const char *) \":\", 1);\n-  NumberIO_CardToStr (line, 0, (char *) &LineNo.array[0], 10);\n-  ErrorString ((const char *) &LineNo.array[0], 10);\n+  NumberIO_CardToStr (line, 0, (char *) &buffer.array[0], 10);\n+  ErrorString ((const char *) &buffer.array[0], 10);\n   ErrorString ((const char *) \":\", 1);\n   if (! (StrLib_StrEqual ((const char *) function, _function_high, (const char *) \"\", 0)))\n     {\n@@ -578,9 +653,9 @@ extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_\n       ErrorString ((const char *) \" has caused \", 12);\n     }\n   ErrorString ((const char *) message, _message_high);\n-  LineNo.array[0] = ASCII_nl;\n-  LineNo.array[1] = ASCII_nul;\n-  ErrorString ((const char *) &LineNo.array[0], 10);\n+  buffer.array[0] = ASCII_nl;\n+  buffer.array[1] = ASCII_nul;\n+  ErrorString ((const char *) &buffer.array[0], 10);\n   libc_exit (1);\n }\n "}, {"sha": "5db589e259742c2cdc45167aca9289a73a21b272", "filename": "gcc/m2/mc-boot/GM2RTS.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGM2RTS.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGM2RTS.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGM2RTS.h?ref=1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "patch": "@@ -126,10 +126,19 @@ EXTERN void M2RTS_HALT (int exitcode) __attribute__ ((noreturn));\n \n /*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n */\n \n-EXTERN void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+EXTERN void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+\n+/*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*/\n+\n+EXTERN void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description);\n \n /*\n    ExitOnHalt - if HALT is executed then call exit with the exit code, e.\n@@ -141,7 +150,7 @@ EXTERN void M2RTS_ExitOnHalt (int e);\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n */\n \n-EXTERN void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n+EXTERN void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n \n /*\n    Length - returns the length of a string, a. This is called whenever"}, {"sha": "6511cbb28e300406d10ad6a1709ac2f0bef77052", "filename": "gcc/m2/mc-boot/Gdecl.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGdecl.c?ref=1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "patch": "@@ -293,16 +293,16 @@ typedef enum {mcComment_unknown, mcComment_procedureHeading, mcComment_inBody, m\n \n typedef struct DynamicStrings_stringRecord_r DynamicStrings_stringRecord;\n \n-typedef struct wlists__T9_r wlists__T9;\n-\n typedef struct DynamicStrings_Contents_r DynamicStrings_Contents;\n \n-typedef struct DynamicStrings__T7_a DynamicStrings__T7;\n+typedef struct wlists__T9_r wlists__T9;\n \n typedef struct mcPretty__T12_r mcPretty__T12;\n \n typedef struct wlists__T10_a wlists__T10;\n \n+typedef struct DynamicStrings__T7_a DynamicStrings__T7;\n+\n typedef Indexing__T5 *Indexing_Index;\n \n typedef mcComment__T6 *mcComment_commentDesc;\n@@ -665,8 +665,8 @@ struct mcComment__T6_r {\n                          unsigned int used;\n                        };\n \n-struct DynamicStrings__T7_a { char array[(MaxBuf-1)+1]; };\n struct wlists__T10_a { unsigned int array[maxNoOfElements-1+1]; };\n+struct DynamicStrings__T7_a { char array[(MaxBuf-1)+1]; };\n struct alists__T13_r {\n                        unsigned int noOfelements;\n                        alists__T14 elements;\n@@ -830,18 +830,18 @@ struct decl_impT_r {\n                      decl_commentPair com;\n                    };\n \n-struct wlists__T9_r {\n-                      unsigned int noOfElements;\n-                      wlists__T10 elements;\n-                      wlists_wlist next;\n-                    };\n-\n struct DynamicStrings_Contents_r {\n                                    DynamicStrings__T7 buf;\n                                    unsigned int len;\n                                    DynamicStrings_String next;\n                                  };\n \n+struct wlists__T9_r {\n+                      unsigned int noOfElements;\n+                      wlists__T10 elements;\n+                      wlists_wlist next;\n+                    };\n+\n struct mcPretty__T12_r {\n                          mcPretty_writeProc write_;\n                          mcPretty_writeLnProc writeln;\n@@ -1037,9 +1037,10 @@ extern \"C\" unsigned int M2RTS_InstallInitialProcedure (PROC p);\n extern \"C\" void M2RTS_ExecuteTerminationProcedures (void);\n extern \"C\" void M2RTS_Terminate (void) __attribute__ ((noreturn));\n extern \"C\" void M2RTS_HALT (int exitcode) __attribute__ ((noreturn));\n-extern \"C\" void M2RTS_Halt (const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_Halt (const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high, const char *description_, unsigned int _description_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_HaltC (void * filename, unsigned int line, void * function, void * description);\n extern \"C\" void M2RTS_ExitOnHalt (int e);\n-extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *file_, unsigned int _file_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_ErrorMessage (const char *message_, unsigned int _message_high, const char *filename_, unsigned int _filename_high, unsigned int line, const char *function_, unsigned int _function_high) __attribute__ ((noreturn));\n extern \"C\" unsigned int M2RTS_Length (const char *a_, unsigned int _a_high);\n extern \"C\" void M2RTS_AssignmentException (void * filename, unsigned int line, unsigned int column, void * scope, void * message);\n extern \"C\" void M2RTS_ReturnException (void * filename, unsigned int line, unsigned int column, void * scope, void * message);"}, {"sha": "77801c04f053f80560b0d925524d4b8fc591fdd3", "filename": "gcc/m2/mc-boot/GmcOptions.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c?ref=1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "patch": "@@ -324,7 +324,10 @@ static void displayVersion (unsigned int mustExit)\n   unsigned int year;\n \n   year = getYear ();\n-  mcPrintf_printf1 ((const char *) \"Copyright (C) %d Free Software Foundation, Inc.\\\\n\", 49, (const unsigned char *) &year, (sizeof (year)-1));\n+  /* These first three calls to printf hide the first line of text away from the year change script.  */\n+  mcPrintf_printf0 ((const char *) \"Copyright \", 10);\n+  mcPrintf_printf0 ((const char *) \"(C)\", 3);  /* A unicode char here would be good.  */\n+  mcPrintf_printf1 ((const char *) \" %d Free Software Foundation, Inc.\\\\n\", 36, (const unsigned char *) &year, (sizeof (year)-1));  /* A unicode char here would be good.  */\n   mcPrintf_printf0 ((const char *) \"License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\\\n\", 78);\n   mcPrintf_printf0 ((const char *) \"This is free software: you are free to change and redistribute it.\\\\n\", 68);\n   mcPrintf_printf0 ((const char *) \"There is NO WARRANTY, to the extent permitted by law.\\\\n\", 55);"}, {"sha": "909d7983a71db2249af8c20a0f4bda1e955c662b", "filename": "gcc/m2/mc/mcOptions.mod", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc%2FmcOptions.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce7d29ebb47c805ad4d38b68e00f7b1178f467/gcc%2Fm2%2Fmc%2FmcOptions.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc%2FmcOptions.mod?ref=1fce7d29ebb47c805ad4d38b68e00f7b1178f467", "patch": "@@ -87,7 +87,10 @@ VAR\n    year: CARDINAL ;\n BEGIN\n    year := getYear () ;\n-   printf1 ('Copyright (C) %d Free Software Foundation, Inc.\\n', year) ;\n+   (* These first three calls to printf hide the first line of text away from the year change script.  *)\n+   printf0 ('Copyright ') ;\n+   printf0 ('(C)') ;  (* A unicode char here would be good.  *)\n+   printf1 (' %d Free Software Foundation, Inc.\\n', year) ;\n    printf0 ('License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\n') ;\n    printf0 ('This is free software: you are free to change and redistribute it.\\n') ;\n    printf0 ('There is NO WARRANTY, to the extent permitted by law.\\n') ;"}]}