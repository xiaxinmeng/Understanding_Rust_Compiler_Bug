{"sha": "9f938de17ca1aff1e5ea66e664159764fa1cc770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5MzhkZTE3Y2ExYWZmMWU1ZWE2NmU2NjQxNTk3NjRmYTFjYzc3MA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-05-25T20:19:26Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-25T20:19:26Z"}, "message": "reload1.c (verify_initial_elim_offsets): Return boolean status instead of aborting.\n\nChangeLog:\n\n\t* reload1.c (verify_initial_elim_offsets): Return boolean status\n\tinstead of aborting.\n\t(reload): Adapt verify_initial_elim_offsets call site.  Restart\n\tmain loop if some initial elimination offsets changed.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/20050524-1.c: New test.\n\nFrom-SVN: r100159", "tree": {"sha": "d0ac324c8518c7ea6960b902a9eaecfae51024b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ac324c8518c7ea6960b902a9eaecfae51024b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f938de17ca1aff1e5ea66e664159764fa1cc770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f938de17ca1aff1e5ea66e664159764fa1cc770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f938de17ca1aff1e5ea66e664159764fa1cc770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f938de17ca1aff1e5ea66e664159764fa1cc770/comments", "author": null, "committer": null, "parents": [{"sha": "0fd7e0f84b3a90262d0067b93f0eba5e03b454d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd7e0f84b3a90262d0067b93f0eba5e03b454d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd7e0f84b3a90262d0067b93f0eba5e03b454d1"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "a4bf7200bb6154e6bf4579b92e8233907044795b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f938de17ca1aff1e5ea66e664159764fa1cc770", "patch": "@@ -1,3 +1,10 @@\n+2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* reload1.c (verify_initial_elim_offsets): Return boolean status\n+\tinstead of aborting.\n+\t(reload): Adapt verify_initial_elim_offsets call site.  Restart\n+\tmain loop if some initial elimination offsets changed.\n+\n 2005-05-25  Adam Nemet  <anemet@lnxw.com>\n \n \t* config/rs6000/lynx.h (CC1_SPEC): Use -maix-struct-return instead"}, {"sha": "a1974dfa3b60ca084d511cf5cbfa8a8b1d0a3cc1", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9f938de17ca1aff1e5ea66e664159764fa1cc770", "patch": "@@ -383,7 +383,7 @@ static int eliminate_regs_in_insn (rtx, int);\n static void update_eliminable_offsets (void);\n static void mark_not_eliminable (rtx, rtx, void *);\n static void set_initial_elim_offsets (void);\n-static void verify_initial_elim_offsets (void);\n+static bool verify_initial_elim_offsets (void);\n static void set_initial_label_offsets (void);\n static void set_offsets_for_label (rtx);\n static void init_elim_table (void);\n@@ -984,6 +984,13 @@ reload (rtx first, int global)\n       if (starting_frame_size != get_frame_size ())\n \tsomething_changed = 1;\n \n+      /* Even if the frame size remained the same, we might still have\n+\t changed elimination offsets, e.g. if find_reloads called \n+\t force_const_mem requiring the back end to allocate a constant\n+\t pool base register that needs to be saved on the stack.  */\n+      else if (!verify_initial_elim_offsets ())\n+\tsomething_changed = 1;\n+\n       {\n \tHARD_REG_SET to_spill;\n \tCLEAR_HARD_REG_SET (to_spill);\n@@ -1075,8 +1082,7 @@ reload (rtx first, int global)\n \n       gcc_assert (old_frame_size == get_frame_size ());\n \n-      if (num_eliminable)\n-\tverify_initial_elim_offsets ();\n+      gcc_assert (verify_initial_elim_offsets ());\n     }\n \n   /* If we were able to eliminate the frame pointer, show that it is no\n@@ -3300,23 +3306,30 @@ mark_not_eliminable (rtx dest, rtx x, void *data ATTRIBUTE_UNUSED)\n    where something illegal happened during reload_as_needed that could\n    cause incorrect code to be generated if we did not check for it.  */\n \n-static void\n+static bool\n verify_initial_elim_offsets (void)\n {\n   HOST_WIDE_INT t;\n \n+  if (!num_eliminable)\n+    return true;\n+\n #ifdef ELIMINABLE_REGS\n   struct elim_table *ep;\n \n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n     {\n       INITIAL_ELIMINATION_OFFSET (ep->from, ep->to, t);\n-      gcc_assert (t == ep->initial_offset);\n+      if (t != ep->initial_offset)\n+\treturn false;\n     }\n #else\n   INITIAL_FRAME_POINTER_OFFSET (t);\n-  gcc_assert (t == reg_eliminate[0].initial_offset);\n+  if (t != reg_eliminate[0].initial_offset)\n+    return false;\n #endif\n+\n+  return true;\n }\n \n /* Reset all offsets on eliminable registers to their initial values.  */"}, {"sha": "d060b55ee9475d602d0fcda0a7624a75a543c403", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f938de17ca1aff1e5ea66e664159764fa1cc770", "patch": "@@ -1,3 +1,7 @@\n+2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/20050524-1.c: New test.\n+\n 2005-05-25  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-prof/inliner-1.c: New."}, {"sha": "f15c51d628a742c18dbdd175ff41a299066d88ba", "filename": "gcc/testsuite/gcc.dg/20050524-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Ftestsuite%2Fgcc.dg%2F20050524-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f938de17ca1aff1e5ea66e664159764fa1cc770/gcc%2Ftestsuite%2Fgcc.dg%2F20050524-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050524-1.c?ref=9f938de17ca1aff1e5ea66e664159764fa1cc770", "patch": "@@ -0,0 +1,34 @@\n+/* This test case used to abort due to a reload bug with\n+   elimination offsets.  */\n+\n+/* { dg-do run { target s390*-*-* } } */\n+/* { dg-options \"-O2 -mpacked-stack\" } */\n+\n+extern void abort (void);\n+\n+double bar (double) __attribute__ ((noinline));\n+double bar (double x) { return x; }\n+\n+double\n+foo (int j, double f0, double f2, double f4, double f6, double x) __attribute__ ((noinline));\n+\n+double\n+foo (int j, double f0, double f2, double f4, double f6, double x)\n+{\n+  if (j)\n+    return bar (x) + 4.0;\n+  else\n+    return bar (x);\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo (0, 0, 0, 0, 0, 10) != 10)\n+    abort ();\n+  if (foo (1, 0, 0, 0, 0, 10) != 14)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}