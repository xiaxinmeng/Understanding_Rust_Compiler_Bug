{"sha": "ea79391291786e58a29c963b6c407b71e55d5f34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3OTM5MTI5MTc4NmU1OGEyOWM5NjNiNmM0MDdiNzFlNTVkNWYzNA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-25T08:58:07Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-25T08:58:07Z"}, "message": "c-common.c (c_sizeof_or_alignof_type): Take a third argument for complaining.\n\n\t* c-common.c (c_sizeof_or_alignof_type): Take a third argument for\n\tcomplaining.\n\t* c-common.h (c_sizeof): Adjust definition.\n\t(c_alignof): Likewise.\n\t* c-tree.h (c_sizeof_nowarn): Now macro.\n\t* c-typeck.c (c_sizeof_nowarn): Remove definition.\ncp/\n\t* cp-tree.h (cxx_sizeof_nowarn): Now a macro.\n\t(cxx_sizeof_or_alignof_type): Take a third argument.\n\t(cxx_sizeof): Adjust definition.\n\t(cxx_alignof): Likewise.\n\t* init.c (build_delete): Use cxx_sizeof_nowarn to reflect reality.\n\t* typeck.c (cxx_sizeof_or_alignof_type): Take a third argument for\n\tcomplaining.\n\t(c_sizeof_nowarn): Remove definition.\n\t(build_unary_op): Use cxx_sizeof_nowarn.\n\nFrom-SVN: r55744", "tree": {"sha": "e9d93010f8bf070bad0d387d2dd303dfd9b57502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d93010f8bf070bad0d387d2dd303dfd9b57502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea79391291786e58a29c963b6c407b71e55d5f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea79391291786e58a29c963b6c407b71e55d5f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea79391291786e58a29c963b6c407b71e55d5f34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea79391291786e58a29c963b6c407b71e55d5f34/comments", "author": null, "committer": null, "parents": [{"sha": "ef6838b11c072f9a8b6be34f03e18bb24553f61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6838b11c072f9a8b6be34f03e18bb24553f61e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6838b11c072f9a8b6be34f03e18bb24553f61e"}], "stats": {"total": 131, "additions": 50, "deletions": 81}, "files": [{"sha": "926ca173e27bcc2a16f0c5af87905d32d17ea78d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -1,3 +1,12 @@\n+2002-07-25  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-common.c (c_sizeof_or_alignof_type): Take a third argument for\n+\tcomplaining. \n+\t* c-common.h (c_sizeof): Adjust definition.\n+\t(c_alignof): Likewise.\n+\t* c-tree.h (c_sizeof_nowarn): Now macro.\n+\t* c-typeck.c (c_sizeof_nowarn): Remove definition.\n+\n 2002-07-25  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-decl.c (c_decode_option): No need to handle switches"}, {"sha": "88c3ef5534dfb79c221d2a727c8361ea440dc2eb", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -2602,11 +2602,14 @@ c_common_get_alias_set (t)\n }\n \f\n /* Compute the value of 'sizeof (TYPE)' or '__alignof__ (TYPE)', where the\n-   second parameter indicates which OPERATOR is being applied.  */\n+   second parameter indicates which OPERATOR is being applied.  The COMPLAIN\n+   flag controls whether we should diagnose possibly ill-formed\n+   constructs or not.  */\n tree\n-c_sizeof_or_alignof_type (type, op)\n+c_sizeof_or_alignof_type (type, op, complain)\n      tree type;\n      enum tree_code op;\n+     int complain;\n {\n   const char *op_name;\n   tree value = NULL;\n@@ -2619,7 +2622,7 @@ c_sizeof_or_alignof_type (type, op)\n     {\n       if (op == SIZEOF_EXPR)\n \t{\n-\t  if (pedantic || warn_pointer_arith)\n+\t  if (complain && (pedantic || warn_pointer_arith))\n \t    pedwarn (\"invalid application of `sizeof' to a function type\");\n \t  value = size_one_node;\n \t}\n@@ -2628,13 +2631,15 @@ c_sizeof_or_alignof_type (type, op)\n     }\n   else if (type_code == VOID_TYPE || type_code == ERROR_MARK)\n     {\n-      if (type_code == VOID_TYPE && (pedantic || warn_pointer_arith))\n+      if (type_code == VOID_TYPE \n+\t  && complain && (pedantic || warn_pointer_arith))\n \tpedwarn (\"invalid application of `%s' to a void type\", op_name);\n       value = size_one_node;\n     }\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      error (\"invalid application of `%s' to an incomplete type\", op_name);\n+      if (complain)\n+\terror (\"invalid application of `%s' to an incomplete type\", op_name);\n       value = size_zero_node;\n     }\n   else"}, {"sha": "5dfa2d610f4dfd3fabf8b1c5fc5f5445068a05c2", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -548,7 +548,7 @@ extern tree c_common_signed_type\t\tPARAMS ((tree));\n extern tree c_common_signed_or_unsigned_type\tPARAMS ((int, tree));\n extern tree c_common_truthvalue_conversion\tPARAMS ((tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n-extern tree c_sizeof_or_alignof_type\tPARAMS ((tree, enum tree_code));\n+extern tree c_sizeof_or_alignof_type\tPARAMS ((tree, enum tree_code, int));\n extern tree c_alignof_expr\t\t\tPARAMS ((tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n@@ -575,8 +575,8 @@ extern void unsigned_conversion_warning\t\tPARAMS ((tree, tree));\n /* Read the rest of the current #-directive line.  */\n extern char *get_directive_line\t\t\tPARAMS ((void));\n #define GET_DIRECTIVE_LINE() get_directive_line ()\n-#define c_sizeof(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR)\n-#define c_alignof(T) c_sizeof_or_alignof_type (T, ALIGNOF_EXPR)\n+#define c_sizeof(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR, 1)\n+#define c_alignof(T) c_sizeof_or_alignof_type (T, ALIGNOF_EXPR, 1)\n \n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types"}, {"sha": "a2bf5424985c63d642cf787ae6c3ccfe13db393d", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -255,10 +255,10 @@ extern bool c_warn_unused_global_decl\t\tPARAMS ((tree));\n \t\t\t  ((CONST_P) ? TYPE_QUAL_CONST : 0) |\t  \\\n \t\t\t  ((VOLATILE_P) ? TYPE_QUAL_VOLATILE : 0))\n \n+#define c_sizeof_nowarn(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR, 0)\n /* in c-typeck.c */\n extern tree require_complete_type\t\tPARAMS ((tree));\n extern int comptypes\t\t\t\tPARAMS ((tree, tree));\n-extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n extern tree c_size_in_bytes                     PARAMS ((tree));\n extern bool c_mark_addressable\t\t\tPARAMS ((tree));\n extern void c_incomplete_type_error\t\tPARAMS ((tree, tree));"}, {"sha": "e9c846e06c4371b803ea86a8dd8c70cffe0ccbb5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -736,30 +736,6 @@ type_lists_compatible_p (args1, args2)\n     }\n }\n \f\n-tree\n-c_sizeof_nowarn (type)\n-     tree type;\n-{\n-  enum tree_code code = TREE_CODE (type);\n-  tree size;\n-\n-  if (code == FUNCTION_TYPE || code == VOID_TYPE || code == ERROR_MARK)\n-    size = size_one_node;\n-  else if (!COMPLETE_TYPE_P (type))\n-    size = size_zero_node;\n-  else\n-    /* Convert in case a char is more than one unit.  */\n-    size = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n-\t\t       size_int (TYPE_PRECISION (char_type_node)\n-\t\t\t         / BITS_PER_UNIT));\n-\n-  /* SIZE will have an integer type with TYPE_IS_SIZETYPE set.\n-     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n-     never happen.  However, this node should really have type\n-     `size_t', which is just a typedef for an ordinary integer type.  */\n-  return fold (build1 (NOP_EXPR, c_size_type_node, size));\n-}\n-\n /* Compute the size to increment a pointer by.  */\n \n tree"}, {"sha": "d8289b92d3a10273e07fd7ccdbe16f14e8fd2297", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -1,3 +1,15 @@\n+2002-07-25  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* cp-tree.h (cxx_sizeof_nowarn): Now a macro.\n+\t(cxx_sizeof_or_alignof_type): Take a third argument.\n+\t(cxx_sizeof): Adjust definition.\n+\t(cxx_alignof): Likewise.\n+\t* init.c (build_delete): Use cxx_sizeof_nowarn to reflect reality.\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Take a third argument for\n+\tcomplaining.\n+\t(c_sizeof_nowarn): Remove definition.\n+\t(build_unary_op): Use cxx_sizeof_nowarn.\n+\n 2002-07-24  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* tree.c (cp_build_qualified_type_real): When copying"}, {"sha": "291caf65a3fca27327dc9f9c178a02b2e068b1ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -4436,8 +4436,8 @@ extern int compparms\t\t\t\tPARAMS ((tree, tree));\n extern int comp_cv_qualification                PARAMS ((tree, tree));\n extern int comp_cv_qual_signature               PARAMS ((tree, tree));\n extern tree expr_sizeof\t\t\t\tPARAMS ((tree));\n-extern tree cxx_sizeof_or_alignof_type    PARAMS ((tree, enum tree_code));\n-extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n+extern tree cxx_sizeof_or_alignof_type    PARAMS ((tree, enum tree_code, int));\n+#define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\tPARAMS ((tree));\n extern tree decay_conversion\t\t\tPARAMS ((tree));\n extern tree build_object_ref\t\t\tPARAMS ((tree, tree, tree));\n@@ -4483,8 +4483,8 @@ extern tree merge_types\t\t\t\tPARAMS ((tree, tree));\n extern tree check_return_expr                   PARAMS ((tree));\n #define cp_build_binary_op(code, arg1, arg2) \\\n   build_binary_op(code, arg1, arg2, 1)\n-#define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR)\n-#define cxx_alignof(T) cxx_sizeof_or_alignof_type (T, ALIGNOF_EXPR)\n+#define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, true)\n+#define cxx_alignof(T) cxx_sizeof_or_alignof_type (T, ALIGNOF_EXPR, true)\n \n /* in typeck2.c */\n extern void cxx_incomplete_type_diagnostic\tPARAMS ((tree, tree, int));"}, {"sha": "2b6bd254e5f4bed237854aa8dc7b2838ad7ab37b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -3771,7 +3771,7 @@ build_expr_from_tree (t)\n \tif (!TYPE_P (r))\n \t  return TREE_CODE (t) == SIZEOF_EXPR ? expr_sizeof (r) : c_alignof_expr (r);\n \telse\n-\t  return cxx_sizeof_or_alignof_type (r, TREE_CODE (t));\n+\t  return cxx_sizeof_or_alignof_type (r, TREE_CODE (t), true);\n       }\n \n     case MODOP_EXPR:"}, {"sha": "31c1505afa6a3118537d6acdc873aaf4ac003ea4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -3177,7 +3177,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \treturn void_zero_node;\n \n       return build_op_delete_call\n-\t(DELETE_EXPR, addr, c_sizeof_nowarn (type),\n+\t(DELETE_EXPR, addr, cxx_sizeof_nowarn (type),\n \t LOOKUP_NORMAL | (use_global_delete * LOOKUP_GLOBAL),\n \t NULL_TREE);\n     }\n@@ -3212,7 +3212,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t  /* Build the call.  */\n \t  do_delete = build_op_delete_call (DELETE_EXPR,\n \t\t\t\t\t    addr,\n-\t\t\t\t\t    c_sizeof_nowarn (type),\n+\t\t\t\t\t    cxx_sizeof_nowarn (type),\n \t\t\t\t\t    LOOKUP_NORMAL,\n \t\t\t\t\t    NULL_TREE);\n \t  /* Call the complete object destructor.  */\n@@ -3223,7 +3223,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t{\n \t  /* Make sure we have access to the member op delete, even though\n \t     we'll actually be calling it from the destructor.  */\n-\t  build_op_delete_call (DELETE_EXPR, addr, c_sizeof_nowarn (type),\n+\t  build_op_delete_call (DELETE_EXPR, addr, cxx_sizeof_nowarn (type),\n \t\t\t\tLOOKUP_NORMAL, NULL_TREE);\n \t}\n "}, {"sha": "e333d3e5877031ddb0748c81fbcc75a270283ce6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea79391291786e58a29c963b6c407b71e55d5f34/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ea79391291786e58a29c963b6c407b71e55d5f34", "patch": "@@ -1487,9 +1487,10 @@ comp_target_parms (parms1, parms2)\n }\n \f\n tree\n-cxx_sizeof_or_alignof_type (type, op)\n+cxx_sizeof_or_alignof_type (type, op, complain)\n      tree type;\n      enum tree_code op;\n+     int complain;\n {\n   enum tree_code type_code;\n   tree value;\n@@ -1507,17 +1508,18 @@ cxx_sizeof_or_alignof_type (type, op)\n \n   if (type_code == METHOD_TYPE)\n     {\n-      if (pedantic || warn_pointer_arith)\n+      if (complain && (pedantic || warn_pointer_arith))\n \tpedwarn (\"invalid application of `%s' to a member function\", op_name);\n       value = size_one_node;\n     }\n   else if (type_code == OFFSET_TYPE)\n     {\n-      error (\"invalid application of `%s' to non-static member\", op_name);\n+      if (complain)\n+\terror (\"invalid application of `%s' to non-static member\", op_name);\n       value = size_zero_node;\n     }\n   else\n-    value = c_sizeof_or_alignof_type (complete_type (type), op);\n+    value = c_sizeof_or_alignof_type (complete_type (type), op, complain);\n \n   return value;\n }\n@@ -1554,41 +1556,6 @@ expr_sizeof (e)\n   return cxx_sizeof (TREE_TYPE (e));\n }\n   \n-tree\n-c_sizeof_nowarn (type)\n-     tree type;\n-{\n-  enum tree_code code = TREE_CODE (type);\n-  tree size;\n-\n-  if (code == FUNCTION_TYPE\n-      || code == METHOD_TYPE\n-      || code == VOID_TYPE\n-      || code == ERROR_MARK)\n-    size = size_one_node;\n-  else\n-    {\n-      if (code == REFERENCE_TYPE)\n-\ttype = TREE_TYPE (type);\n-\n-      if (!COMPLETE_TYPE_P (type))\n-\tsize = size_zero_node;\n-      else\n-\t/* Convert in case a char is more than one unit.  */\n-\tsize = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n-\t\t\t   size_int (TYPE_PRECISION (char_type_node)\n-\t\t\t\t     / BITS_PER_UNIT));\n-    }\n-\n-  /* SIZE will have an integer type with TYPE_IS_SIZETYPE set.\n-     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n-     never happen.  However, this node should really have type\n-     `size_t', which is just a typedef for an ordinary integer type.  */\n-  size = fold (build1 (NOP_EXPR, c_size_type_node, size));\n-  my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (size)), \n-\t\t      20001021);\n-  return size;\n-}\n \f\n /* Perform the array-to-pointer and function-to-pointer conversions\n    for EXP.  \n@@ -4377,7 +4344,7 @@ build_unary_op (code, xarg, noconvert)\n \t\t\t  ((code == PREINCREMENT_EXPR\n \t\t\t    || code == POSTINCREMENT_EXPR)\n \t\t\t   ? \"increment\" : \"decrement\"), argtype);\n-\t    inc = c_sizeof_nowarn (TREE_TYPE (argtype));\n+\t    inc = cxx_sizeof_nowarn (TREE_TYPE (argtype));\n \t  }\n \telse\n \t  inc = integer_one_node;"}]}