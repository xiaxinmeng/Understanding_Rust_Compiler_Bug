{"sha": "3dce35b32e8e516a3956137ff1229983845088af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjZTM1YjMyZThlNTE2YTM5NTYxMzdmZjEyMjk5ODM4NDUwODhhZg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-01-16T22:14:27Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-01-16T22:14:27Z"}, "message": "rs6000-p8swap.c (rs6000_gen_stvx): Generate different rtl trees depending on TARGET_64BIT.\n\ngcc/ChangeLog:\n\n2018-01-16  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-p8swap.c (rs6000_gen_stvx): Generate\n\tdifferent rtl trees depending on TARGET_64BIT.\n\t(rs6000_gen_lvx): Likewise.\n\nFrom-SVN: r256762", "tree": {"sha": "6133725ae80c3223bd4ad968d3e6dd6d53554bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6133725ae80c3223bd4ad968d3e6dd6d53554bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dce35b32e8e516a3956137ff1229983845088af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dce35b32e8e516a3956137ff1229983845088af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dce35b32e8e516a3956137ff1229983845088af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dce35b32e8e516a3956137ff1229983845088af/comments", "author": null, "committer": null, "parents": [{"sha": "1dbc05f9baff63065124198a05157fe5233fbd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbc05f9baff63065124198a05157fe5233fbd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbc05f9baff63065124198a05157fe5233fbd7f"}], "stats": {"total": 134, "additions": 102, "deletions": 32}, "files": [{"sha": "a4fa75c773fe0d92128b0d29b46c8214bfe7b966", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce35b32e8e516a3956137ff1229983845088af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce35b32e8e516a3956137ff1229983845088af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dce35b32e8e516a3956137ff1229983845088af", "patch": "@@ -1,3 +1,9 @@\n+2018-01-16  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-p8swap.c (rs6000_gen_stvx): Generate\n+\tdifferent rtl trees depending on TARGET_64BIT.\n+\t(rs6000_gen_lvx): Likewise.\n+\n 2018-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/visium.md (nop): Tweak comment."}, {"sha": "a4322962d232d26543ea5721289de9a0f312f938", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 96, "deletions": 32, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dce35b32e8e516a3956137ff1229983845088af/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dce35b32e8e516a3956137ff1229983845088af/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=3dce35b32e8e516a3956137ff1229983845088af", "patch": "@@ -1554,47 +1554,79 @@ rs6000_gen_stvx (enum machine_mode mode, rtx dest_exp, rtx src_exp)\n       op1 = XEXP (memory_address, 0);\n       op2 = XEXP (memory_address, 1);\n       if (mode == V16QImode)\n-\tstvx = gen_altivec_stvx_v16qi_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v16qi_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v16qi_2op_si (src_exp, op1, op2);\n       else if (mode == V8HImode)\n-\tstvx = gen_altivec_stvx_v8hi_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v8hi_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v8hi_2op_si (src_exp, op1, op2);\n #ifdef HAVE_V8HFmode\n       else if (mode == V8HFmode)\n-\tstvx = gen_altivec_stvx_v8hf_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v8hf_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v8hf_2op_si (src_exp, op1, op2);\n #endif\n       else if (mode == V4SImode)\n-\tstvx = gen_altivec_stvx_v4si_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v4si_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v4si_2op_si (src_exp, op1, op2);\n       else if (mode == V4SFmode)\n-\tstvx = gen_altivec_stvx_v4sf_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v4sf_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v4sf_2op_si (src_exp, op1, op2);\n       else if (mode == V2DImode)\n-\tstvx = gen_altivec_stvx_v2di_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v2di_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v2di_2op_si (src_exp, op1, op2);\n       else if (mode == V2DFmode)\n-\tstvx = gen_altivec_stvx_v2df_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v2df_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v2df_2op_si (src_exp, op1, op2);\n       else if (mode == V1TImode)\n-\tstvx = gen_altivec_stvx_v1ti_2op (src_exp, op1, op2);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v1ti_2op (src_exp, op1, op2)\n+\t  : gen_altivec_stvx_v1ti_2op_si (src_exp, op1, op2);\n       else\n \t/* KFmode, TFmode, other modes not expected in this context.  */\n \tgcc_unreachable ();\n     }\n   else\t\t\t\t/* REG_P (memory_address) */\n     {\n       if (mode == V16QImode)\n-\tstvx = gen_altivec_stvx_v16qi_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v16qi_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v16qi_1op_si (src_exp, memory_address);\n       else if (mode == V8HImode)\n-\tstvx = gen_altivec_stvx_v8hi_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v8hi_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v8hi_1op_si (src_exp, memory_address);\n #ifdef HAVE_V8HFmode\n       else if (mode == V8HFmode)\n-\tstvx = gen_altivec_stvx_v8hf_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v8hf_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v8hf_1op_si (src_exp, memory_address);\n #endif\n       else if (mode == V4SImode)\n-\tstvx = gen_altivec_stvx_v4si_1op (src_exp, memory_address);\n+\tstvx =TARGET_64BIT\n+\t  ? gen_altivec_stvx_v4si_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v4si_1op_si (src_exp, memory_address);\n       else if (mode == V4SFmode)\n-\tstvx = gen_altivec_stvx_v4sf_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v4sf_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v4sf_1op_si (src_exp, memory_address);\n       else if (mode == V2DImode)\n-\tstvx = gen_altivec_stvx_v2di_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v2di_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v2di_1op_si (src_exp, memory_address);\n       else if (mode == V2DFmode)\n-\tstvx = gen_altivec_stvx_v2df_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v2df_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v2df_1op_si (src_exp, memory_address);\n       else if (mode == V1TImode)\n-\tstvx = gen_altivec_stvx_v1ti_1op (src_exp, memory_address);\n+\tstvx = TARGET_64BIT\n+\t  ? gen_altivec_stvx_v1ti_1op (src_exp, memory_address)\n+\t  : gen_altivec_stvx_v1ti_1op_si (src_exp, memory_address);\n       else\n \t/* KFmode, TFmode, other modes not expected in this context.  */\n \tgcc_unreachable ();\n@@ -1702,47 +1734,79 @@ rs6000_gen_lvx (enum machine_mode mode, rtx dest_exp, rtx src_exp)\n       op2 = XEXP (memory_address, 1);\n \n       if (mode == V16QImode)\n-\tlvx = gen_altivec_lvx_v16qi_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v16qi_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v16qi_2op_si (dest_exp, op1, op2);\n       else if (mode == V8HImode)\n-\tlvx = gen_altivec_lvx_v8hi_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v8hi_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v8hi_2op_si (dest_exp, op1, op2);\n #ifdef HAVE_V8HFmode\n       else if (mode == V8HFmode)\n-\tlvx = gen_altivec_lvx_v8hf_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v8hf_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v8hf_2op_si (dest_exp, op1, op2);\n #endif\n       else if (mode == V4SImode)\n-\tlvx = gen_altivec_lvx_v4si_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v4si_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v4si_2op_si (dest_exp, op1, op2);\n       else if (mode == V4SFmode)\n-\tlvx = gen_altivec_lvx_v4sf_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v4sf_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v4sf_2op_si (dest_exp, op1, op2);\n       else if (mode == V2DImode)\n-\tlvx = gen_altivec_lvx_v2di_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v2di_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v2di_2op_si (dest_exp, op1, op2);\n       else if (mode == V2DFmode)\n-\tlvx = gen_altivec_lvx_v2df_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v2df_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v2df_2op_si (dest_exp, op1, op2);\n       else if (mode == V1TImode)\n-\tlvx = gen_altivec_lvx_v1ti_2op (dest_exp, op1, op2);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v1ti_2op (dest_exp, op1, op2)\n+\t  : gen_altivec_lvx_v1ti_2op_si (dest_exp, op1, op2);\n       else\n \t/* KFmode, TFmode, other modes not expected in this context.  */\n \tgcc_unreachable ();\n     }\n   else\t\t\t\t/* REG_P (memory_address) */\n     {\n       if (mode == V16QImode)\n-\tlvx = gen_altivec_lvx_v16qi_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v16qi_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v16qi_1op_si (dest_exp, memory_address);\n       else if (mode == V8HImode)\n-\tlvx = gen_altivec_lvx_v8hi_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v8hi_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v8hi_1op_si (dest_exp, memory_address);\n #ifdef HAVE_V8HFmode\n       else if (mode == V8HFmode)\n-\tlvx = gen_altivec_lvx_v8hf_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v8hf_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v8hf_1op_si (dest_exp, memory_address);\n #endif\n       else if (mode == V4SImode)\n-\tlvx = gen_altivec_lvx_v4si_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v4si_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v4si_1op_si (dest_exp, memory_address);\n       else if (mode == V4SFmode)\n-\tlvx = gen_altivec_lvx_v4sf_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v4sf_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v4sf_1op_si (dest_exp, memory_address);\n       else if (mode == V2DImode)\n-\tlvx = gen_altivec_lvx_v2di_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v2di_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v2di_1op_si (dest_exp, memory_address);\n       else if (mode == V2DFmode)\n-\tlvx = gen_altivec_lvx_v2df_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v2df_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v2df_1op_si (dest_exp, memory_address);\n       else if (mode == V1TImode)\n-\tlvx = gen_altivec_lvx_v1ti_1op (dest_exp, memory_address);\n+\tlvx = TARGET_64BIT\n+\t  ? gen_altivec_lvx_v1ti_1op (dest_exp, memory_address)\n+\t  : gen_altivec_lvx_v1ti_1op_si (dest_exp, memory_address);\n       else\n \t/* KFmode, TFmode, other modes not expected in this context.  */\n \tgcc_unreachable ();"}]}