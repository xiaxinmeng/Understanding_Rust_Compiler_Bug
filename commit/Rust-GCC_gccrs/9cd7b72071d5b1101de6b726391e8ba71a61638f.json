{"sha": "9cd7b72071d5b1101de6b726391e8ba71a61638f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkN2I3MjA3MWQ1YjExMDFkZTZiNzI2MzkxZThiYTcxYTYxNjM4Zg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-09-22T09:19:55Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-09-22T09:19:55Z"}, "message": "[AArch64] Use atomic instructions for swap and fetch-update operations.\n\ngcc/\n2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_gen_atomic_ldop):\n\tDeclare.\n\t* config/aarch64/aarch64.c (aarch64_emit_atomic_swap): New.\n\t(aarch64_gen_atomic_ldop): New.\n\t(aarch64_split_atomic_op): Fix whitespace and add a comment.\n\t* config/aarch64/atomics.md (UNSPECV_ATOMIC_SWP): New.\n\t(aarch64_compare_and_swap<mode>_lse): Fix some whitespace.\n\t(atomic_exchange<mode>): Replace with an expander.\n\t(aarch64_atomic_exchange<mode>): New.\n\t(aarch64_atomic_exchange<mode>_lse): New.\n\t(aarch64_atomic_<atomic_optab><mode>): Fix some whitespace.\n\t(aarch64_atomic_swp<mode>): New.\n\ngcc/testsuite/\n2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/aarch64/atomic-inst-ops.inc: (TEST_MODEL): New.\n\t(TEST_ONE): New.\n        * gcc.target/aarch64/atomic-inst-swap.c: New.\n\nFrom-SVN: r227998", "tree": {"sha": "86873c021fe60c2fffb4d16ae53a756647797d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86873c021fe60c2fffb4d16ae53a756647797d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cd7b72071d5b1101de6b726391e8ba71a61638f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd7b72071d5b1101de6b726391e8ba71a61638f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd7b72071d5b1101de6b726391e8ba71a61638f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd7b72071d5b1101de6b726391e8ba71a61638f/comments", "author": null, "committer": null, "parents": [{"sha": "9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9915b1c916b1e6aa0fb7aa738dcc217f5f69b8ef"}], "stats": {"total": 196, "additions": 191, "deletions": 5}, "files": [{"sha": "ae8f79404b8038cda72df310e9b37cc4395816f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -1,3 +1,18 @@\n+2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_gen_atomic_ldop):\n+\tDeclare.\n+\t* config/aarch64/aarch64.c (aarch64_emit_atomic_swap): New.\n+\t(aarch64_gen_atomic_ldop): New.\n+\t(aarch64_split_atomic_op): Fix whitespace and add a comment.\n+\t* config/aarch64/atomics.md (UNSPECV_ATOMIC_SWP): New.\n+\t(aarch64_compare_and_swap<mode>_lse): Fix some whitespace.\n+\t(atomic_exchange<mode>): Replace with an expander.\n+\t(aarch64_atomic_exchange<mode>): New.\n+\t(aarch64_atomic_exchange<mode>_lse): New.\n+\t(aarch64_atomic_<atomic_optab><mode>): Fix some whitespace.\n+\t(aarch64_atomic_swp<mode>): New.\n+\n 2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* tree-inline.c (expand_call_inline): Use inform for extra note."}, {"sha": "eba4c76d4cc4f742890d9a70b1de35e347c8862c", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -378,6 +378,7 @@ rtx aarch64_load_tp (rtx);\n void aarch64_expand_compare_and_swap (rtx op[]);\n void aarch64_split_compare_and_swap (rtx op[]);\n void aarch64_gen_atomic_cas (rtx, rtx, rtx, rtx, rtx);\n+void aarch64_gen_atomic_ldop (enum rtx_code, rtx, rtx, rtx, rtx);\n void aarch64_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n \n bool aarch64_gen_adjusted_ldpstp (rtx *, bool, enum machine_mode, RTX_CODE);"}, {"sha": "34c630b08756dba3fb25627d3fa65cf2c6e0560d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -10992,11 +10992,54 @@ aarch64_split_compare_and_swap (rtx operands[])\n     aarch64_emit_post_barrier (model);\n }\n \n+/* Emit an atomic swap.  */\n+\n+static void\n+aarch64_emit_atomic_swap (machine_mode mode, rtx dst, rtx value,\n+\t\t\t  rtx mem, rtx model)\n+{\n+  rtx (*gen) (rtx, rtx, rtx, rtx);\n+\n+  switch (mode)\n+    {\n+    case QImode: gen = gen_aarch64_atomic_swpqi; break;\n+    case HImode: gen = gen_aarch64_atomic_swphi; break;\n+    case SImode: gen = gen_aarch64_atomic_swpsi; break;\n+    case DImode: gen = gen_aarch64_atomic_swpdi; break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  emit_insn (gen (dst, mem, value, model));\n+}\n+\n+/* Emit an atomic operation where the architecture supports it.  */\n+\n+void\n+aarch64_gen_atomic_ldop (enum rtx_code code, rtx out_data,\n+\t\t\t rtx mem, rtx value, rtx model_rtx)\n+{\n+  machine_mode mode = GET_MODE (mem);\n+\n+  out_data = gen_lowpart (mode, out_data);\n+\n+  switch (code)\n+    {\n+    case SET:\n+      aarch64_emit_atomic_swap (mode, out_data, value, mem, model_rtx);\n+      return;\n+\n+    default:\n+      /* The operation can't be done with atomic instructions.  */\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Split an atomic operation.  */\n \n void\n aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n-\t\t     rtx value, rtx model_rtx, rtx cond)\n+\t\t\t rtx value, rtx model_rtx, rtx cond)\n {\n   machine_mode mode = GET_MODE (mem);\n   machine_mode wmode = (mode == DImode ? DImode : SImode);\n@@ -11005,6 +11048,7 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n   rtx_code_label *label;\n   rtx x;\n \n+  /* Split the atomic operation into a sequence.  */\n   label = gen_label_rtx ();\n   emit_label (label);\n "}, {"sha": "cb8053942c83709b6bc11269ac2447807076f2fb", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -27,6 +27,7 @@\n     UNSPECV_ATOMIC_CMPSW\t\t; Represent an atomic compare swap.\n     UNSPECV_ATOMIC_EXCHG\t\t; Represent an atomic exchange.\n     UNSPECV_ATOMIC_CAS\t\t\t; Represent an atomic CAS.\n+    UNSPECV_ATOMIC_SWP\t\t\t; Represent an atomic SWP.\n     UNSPECV_ATOMIC_OP\t\t\t; Represent an atomic operation.\n ])\n \n@@ -134,7 +135,7 @@\n        (match_operand:SI 5 \"const_int_operand\")\t\t\t;; mod_s\n        (match_operand:SI 6 \"const_int_operand\")]\t\t;; mod_f\n       UNSPECV_ATOMIC_CMPSW))]\n-  \"TARGET_LSE \"\n+  \"TARGET_LSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -146,7 +147,28 @@\n   }\n )\n \n-(define_insn_and_split \"atomic_exchange<mode>\"\n+(define_expand \"atomic_exchange<mode>\"\n+ [(match_operand:ALLI 0 \"register_operand\" \"\")\n+  (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n+  (match_operand:ALLI 2 \"register_operand\" \"\")\n+  (match_operand:SI 3 \"const_int_operand\" \"\")]\n+  \"\"\n+  {\n+    rtx (*gen) (rtx, rtx, rtx, rtx);\n+\n+    /* Use an atomic SWP when available.  */\n+    if (TARGET_LSE)\n+      gen = gen_aarch64_atomic_exchange<mode>_lse;\n+    else\n+      gen = gen_aarch64_atomic_exchange<mode>;\n+\n+    emit_insn (gen (operands[0], operands[1], operands[2], operands[3]));\n+\n+    DONE;\n+  }\n+)\n+\n+(define_insn_and_split \"aarch64_atomic_exchange<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\t\t;; output\n     (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")) ;; memory\n    (set (match_dup 1)\n@@ -162,7 +184,26 @@\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (SET, operands[0], NULL, operands[1],\n-\t\t\t    operands[2], operands[3], operands[4]);\n+\t\t\t     operands[2], operands[3], operands[4]);\n+    DONE;\n+  }\n+)\n+\n+(define_insn_and_split \"aarch64_atomic_exchange<mode>_lse\"\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n+    (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\n+   (set (match_dup 1)\n+    (unspec_volatile:ALLI\n+      [(match_operand:ALLI 2 \"register_operand\" \"r\")\n+       (match_operand:SI 3 \"const_int_operand\" \"\")]\n+      UNSPECV_ATOMIC_EXCHG))]\n+  \"TARGET_LSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    aarch64_gen_atomic_ldop (SET, operands[0], operands[1],\n+\t\t\t     operands[2], operands[3]);\n     DONE;\n   }\n )\n@@ -183,7 +224,7 @@\n   [(const_int 0)]\n   {\n     aarch64_split_atomic_op (<CODE>, NULL, operands[3], operands[0],\n-\t\t\t    operands[1], operands[2], operands[4]);\n+\t\t\t     operands[1], operands[2], operands[4]);\n     DONE;\n   }\n )\n@@ -425,6 +466,28 @@\n \n ;; ARMv8.1 LSE instructions.\n \n+;; Atomic swap with memory.\n+(define_insn \"aarch64_atomic_swp<mode>\"\n+ [(set (match_operand:ALLI 0 \"register_operand\" \"+&r\")\n+   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\n+  (set (match_dup 1)\n+   (unspec_volatile:ALLI\n+    [(match_operand:ALLI 2 \"register_operand\" \"r\")\n+     (match_operand:SI 3 \"const_int_operand\" \"\")]\n+    UNSPECV_ATOMIC_SWP))]\n+  \"TARGET_LSE && reload_completed\"\n+  {\n+    enum memmodel model = memmodel_from_int (INTVAL (operands[3]));\n+    if (is_mm_relaxed (model))\n+      return \"swp<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else if (is_mm_acquire (model) || is_mm_consume (model))\n+      return \"swpa<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else if (is_mm_release (model))\n+      return \"swpl<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+    else\n+      return \"swpal<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+  })\n+\n ;; Atomic compare-and-swap: HI and smaller modes.\n \n (define_insn \"aarch64_atomic_cas<mode>\""}, {"sha": "c0e467fe0aa5cd6694d27930ed1970ea100e5685", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -1,3 +1,9 @@\n+2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/atomic-inst-ops.inc: (TEST_MODEL): New.\n+\t(TEST_ONE): New.\n+        * gcc.target/aarch64/atomic-inst-swap.c: New.\n+\n 2015-09-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.target/i386/inline_error.c (int bar): Use dg-message for note."}, {"sha": "c2fdcba7930995048b820a9217325069c5404ddc", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-ops.inc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-ops.inc?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -32,6 +32,15 @@ typedef __uint128_t uint128;\n   TEST_M##N (NAME, FN, int128, MODEL1, MODEL2)\t\t\\\n   TEST_M##N (NAME, FN, uint128, MODEL1, MODEL2)\n \n+/* Models to test.  */\n+#define TEST_MODEL(NAME, FN, N)\t\t\t\t\t\\\n+  TEST_TY (NAME##_relaxed, FN, N, __ATOMIC_RELAXED, DUMMY)\t\\\n+  TEST_TY (NAME##_consume, FN, N, __ATOMIC_CONSUME, DUMMY)\t\\\n+  TEST_TY (NAME##_acquire, FN, N, __ATOMIC_ACQUIRE, DUMMY)\t\\\n+  TEST_TY (NAME##_release, FN, N, __ATOMIC_RELEASE, DUMMY)\t\\\n+  TEST_TY (NAME##_acq_rel, FN, N, __ATOMIC_ACQ_REL, DUMMY)\t\\\n+  TEST_TY (NAME##_seq_cst, FN, N, __ATOMIC_SEQ_CST, DUMMY)\t\\\n+\n /* Cross-product of models to test.  */\n #define TEST_MODEL_M1(NAME, FN, N, M)\t\t\t\\\n   TEST_TY (NAME##_relaxed, FN, N, M, __ATOMIC_RELAXED)\t\\\n@@ -51,3 +60,7 @@ typedef __uint128_t uint128;\n \n /* Expand functions for a cross-product of memory models and types.  */\n #define TEST_TWO(NAME, FN) TEST_MODEL_M2 (NAME, FN)\n+\n+/* Expand functions for a set of memory models and types.  */\n+#define TEST_ONE(NAME, FN) TEST_MODEL (NAME, FN, 1)\n+"}, {"sha": "dabc9b9a08aa478eb3af4b0d5038e8a3aba33533", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-inst-swp.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-swp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd7b72071d5b1101de6b726391e8ba71a61638f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-swp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-inst-swp.c?ref=9cd7b72071d5b1101de6b726391e8ba71a61638f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8-a+lse\" } */\n+\n+/* Test ARMv8.1-A SWP instruction.  */\n+\n+#include \"atomic-inst-ops.inc\"\n+\n+#define TEST TEST_ONE\n+\n+#define SWAP_ATOMIC(FN, TY, MODEL)\t\t\t\t\t\\\n+  TY FNNAME (FN, TY) (TY* val, TY foo)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __atomic_exchange_n (val, foo, MODEL);\t\t\t\\\n+  }\n+\n+#define SWAP_ATOMIC_NORETURN(FN, TY, MODEL)\t\t\t\t\\\n+  void FNNAME (FN, TY) (TY* val, TY* foo, TY* bar)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    __atomic_exchange (val, foo, bar, MODEL);\t\t\t\t\\\n+  }\n+\n+\n+TEST (swap_atomic, SWAP_ATOMIC)\n+TEST (swap_atomic_noreturn, SWAP_ATOMIC_NORETURN)\n+\n+\n+/* { dg-final { scan-assembler-times \"swpb\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"swpab\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"swplb\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"swpalb\\t\" 8} } */\n+\n+/* { dg-final { scan-assembler-times \"swph\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"swpah\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"swplh\\t\" 4} } */\n+/* { dg-final { scan-assembler-times \"swpalh\\t\" 8} } */\n+\n+/* { dg-final { scan-assembler-times \"swp\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"swpa\\t\" 16} } */\n+/* { dg-final { scan-assembler-times \"swpl\\t\" 8} } */\n+/* { dg-final { scan-assembler-times \"swpal\\t\" 16} } */\n+\n+/* { dg-final { scan-assembler-not \"ldaxr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"stlxr\\t\" } } */\n+/* { dg-final { scan-assembler-not \"dmb\" } } */"}]}