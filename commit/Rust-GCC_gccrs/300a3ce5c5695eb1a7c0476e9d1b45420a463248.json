{"sha": "300a3ce5c5695eb1a7c0476e9d1b45420a463248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwYTNjZTVjNTY5NWViMWE3YzA0NzZlOWQxYjQ1NDIwYTQ2MzI0OA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2021-01-11T09:59:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-11T10:46:31Z"}, "message": "tree-optimization/98221 - fix wrong unpack operation used for big-endian\n\nThe vec-abi-varargs-1.c testcase on IBM Z currently fails.\n\nWhile adding an SI mode vector to a DI mode vector the first is unpacked using:\n\n  _28 = BIT_INSERT_EXPR <{ 0, 0, 0, 0 }, _2, 0>;\n  _34 = [vec_unpack_lo_expr] _28;\n\nHowever, on big endian targets lo refers to the right hand side of the vector - in this case the zeroes.\n\n2021-01-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): For\n\tbig-endian, use UNPACK[_FLOAT]_HI.", "tree": {"sha": "a16eee1a253605fa99a03098828223be1801e9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16eee1a253605fa99a03098828223be1801e9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/300a3ce5c5695eb1a7c0476e9d1b45420a463248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300a3ce5c5695eb1a7c0476e9d1b45420a463248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300a3ce5c5695eb1a7c0476e9d1b45420a463248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300a3ce5c5695eb1a7c0476e9d1b45420a463248/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c18faac3fb407d182dfa82426d1be7cce587926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c18faac3fb407d182dfa82426d1be7cce587926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c18faac3fb407d182dfa82426d1be7cce587926"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "0706fd862de78c1841d8a62c6a19703171d15e5d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -2392,6 +2392,17 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t     some simple special cases via VEC_[UN]PACK[_FLOAT]_LO_EXPR.  */\n \t  optab optab;\n \t  tree halfvectype, dblvectype;\n+\t  enum tree_code unpack_op;\n+\n+\t  if (!BYTES_BIG_ENDIAN)\n+\t    unpack_op = (FLOAT_TYPE_P (TREE_TYPE (type))\n+\t\t\t ? VEC_UNPACK_FLOAT_LO_EXPR\n+\t\t\t : VEC_UNPACK_LO_EXPR);\n+\t  else\n+\t    unpack_op = (FLOAT_TYPE_P (TREE_TYPE (type))\n+\t\t\t ? VEC_UNPACK_FLOAT_HI_EXPR\n+\t\t\t : VEC_UNPACK_HI_EXPR);\n+\n \t  if (CONVERT_EXPR_CODE_P (conv_code)\n \t      && (2 * TYPE_PRECISION (TREE_TYPE (TREE_TYPE (orig[0])))\n \t\t  == TYPE_PRECISION (TREE_TYPE (type)))\n@@ -2405,9 +2416,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t represented as scalar bitmasks.  See PR95528.  */\n \t      && (VECTOR_MODE_P (TYPE_MODE (dblvectype))\n \t\t  || VECTOR_BOOLEAN_TYPE_P (dblvectype))\n-\t      && (optab = optab_for_tree_code (FLOAT_TYPE_P (TREE_TYPE (type))\n-\t\t\t\t\t       ? VEC_UNPACK_FLOAT_LO_EXPR\n-\t\t\t\t\t       : VEC_UNPACK_LO_EXPR,\n+\t      && (optab = optab_for_tree_code (unpack_op,\n \t\t\t\t\t       dblvectype,\n \t\t\t\t\t       optab_default))\n \t      && (optab_handler (optab, TYPE_MODE (dblvectype))\n@@ -2430,11 +2439,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t\t\t    orig[0], TYPE_SIZE (dblvectype),\n \t\t\t\t    bitsize_zero_node);\n \t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n-\t      gimple_assign_set_rhs_with_ops (gsi,\n-\t\t\t\t\t      FLOAT_TYPE_P (TREE_TYPE (type))\n-\t\t\t\t\t      ? VEC_UNPACK_FLOAT_LO_EXPR\n-\t\t\t\t\t      : VEC_UNPACK_LO_EXPR,\n-\t\t\t\t\t      dbl);\n+\t      gimple_assign_set_rhs_with_ops (gsi, unpack_op, dbl);\n \t    }\n \t  else if (CONVERT_EXPR_CODE_P (conv_code)\n \t\t   && (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (orig[0])))"}]}