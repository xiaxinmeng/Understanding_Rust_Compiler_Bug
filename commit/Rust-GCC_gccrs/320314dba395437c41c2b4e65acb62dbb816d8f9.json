{"sha": "320314dba395437c41c2b4e65acb62dbb816d8f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwMzE0ZGJhMzk1NDM3YzQxYzJiNGU2NWFjYjYyZGJiODE2ZDhmOQ==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2018-10-30T17:05:37Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2018-10-30T17:05:37Z"}, "message": "rs6000.md (bswapdi2): Force address into register if not in indexed or indirect form.\n\n2018-10-30  Aaron Sawdey  <acsawdey@linux.ibm.com>\n\n\t* config/rs6000/rs6000.md (bswapdi2): Force address into register\n\tif not in indexed or indirect form.\n\t(bswapdi2_load): Change predicate to indexed_or_indirect_operand.\n\t(bswapdi2_store): Ditto.\n\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem): New\n\thelper function.\n\t* config/rs6000/rs6000-protos.h (rs6000_force_indexed_or_indirect_mem):\n\tPrototype for helper function.\n\nFrom-SVN: r265632", "tree": {"sha": "4d8697b8f8621d5b4369b3888c5e4501d5408fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d8697b8f8621d5b4369b3888c5e4501d5408fe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320314dba395437c41c2b4e65acb62dbb816d8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320314dba395437c41c2b4e65acb62dbb816d8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320314dba395437c41c2b4e65acb62dbb816d8f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320314dba395437c41c2b4e65acb62dbb816d8f9/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2bfc447e80b028f860149439e48544d967af685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bfc447e80b028f860149439e48544d967af685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bfc447e80b028f860149439e48544d967af685"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "01e58aa1073f8fba7fca6f96923e99bf61803747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=320314dba395437c41c2b4e65acb62dbb816d8f9", "patch": "@@ -1,3 +1,14 @@\n+2018-10-30  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (bswapdi2): Force address into register\n+\tif not in indexed or indirect form.\n+\t(bswapdi2_load): Change predicate to indexed_or_indirect_operand.\n+\t(bswapdi2_store): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem): New\n+\thelper function.\n+\t* config/rs6000/rs6000-protos.h (rs6000_force_indexed_or_indirect_mem):\n+\tPrototype for helper function.\n+\n 2018-10-30  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (optimize): Clarify/expand attribute documentation."}, {"sha": "30dc896e76c2ac26ebde0a61d49daaf5ce8dc300", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=320314dba395437c41c2b4e65acb62dbb816d8f9", "patch": "@@ -47,6 +47,7 @@ extern bool legitimate_constant_pool_address_p (const_rtx, machine_mode,\n extern bool legitimate_indirect_address_p (rtx, int);\n extern bool legitimate_indexed_address_p (rtx, int);\n extern bool avoiding_indexed_address_p (machine_mode);\n+extern rtx rs6000_force_indexed_or_indirect_mem (rtx x);\n \n extern rtx rs6000_got_register (rtx);\n extern rtx find_addr_reg (rtx);"}, {"sha": "30b7266f02e062b65e25a955349889618c89a3eb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=320314dba395437c41c2b4e65acb62dbb816d8f9", "patch": "@@ -8423,6 +8423,22 @@ rs6000_const_not_ok_for_debug_p (rtx x)\n   return false;\n }\n \n+/* Helper function for making sure we will make full\n+   use of indexed addressing.  */\n+\n+rtx\n+rs6000_force_indexed_or_indirect_mem (rtx x)\n+{\n+  machine_mode m = GET_MODE (x);\n+  if (!indexed_or_indirect_operand (x, m))\n+    {\n+      rtx addr = XEXP (x, 0);\n+      addr = force_reg (Pmode, addr);\n+      x = replace_equiv_address_nv (x, addr);\n+    }\n+  return x;\n+}\n+\n \n /* Implement the TARGET_LEGITIMATE_COMBINED_INSN hook.  */\n "}, {"sha": "4feb18a55fa03c261b76470307485af867dabc9b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320314dba395437c41c2b4e65acb62dbb816d8f9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=320314dba395437c41c2b4e65acb62dbb816d8f9", "patch": "@@ -2512,9 +2512,15 @@\n   if (TARGET_POWERPC64 && TARGET_LDBRX)\n     {\n       if (MEM_P (src))\n-\temit_insn (gen_bswapdi2_load (dest, src));\n+        {\n+\t  src = rs6000_force_indexed_or_indirect_mem (src);\n+\t  emit_insn (gen_bswapdi2_load (dest, src));\n+        }\n       else if (MEM_P (dest))\n-\temit_insn (gen_bswapdi2_store (dest, src));\n+        {\n+\t  dest = rs6000_force_indexed_or_indirect_mem (dest);\n+\t  emit_insn (gen_bswapdi2_store (dest, src));\n+        }\n       else if (TARGET_P9_VECTOR)\n \temit_insn (gen_bswapdi2_xxbrd (dest, src));\n       else\n@@ -2535,13 +2541,13 @@\n ;; Power7/cell has ldbrx/stdbrx, so use it directly\n (define_insn \"bswapdi2_load\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(bswap:DI (match_operand:DI 1 \"memory_operand\" \"Z\")))]\n+\t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\" \"Z\")))]\n   \"TARGET_POWERPC64 && TARGET_LDBRX\"\n   \"ldbrx %0,%y1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"bswapdi2_store\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=Z\")\n+  [(set (match_operand:DI 0 \"indexed_or_indirect_operand\" \"=Z\")\n \t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64 && TARGET_LDBRX\"\n   \"stdbrx %1,%y0\""}]}