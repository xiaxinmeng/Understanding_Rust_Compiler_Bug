{"sha": "2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1ZjQxMzlhOTFkYjI5NGYxYWIzNGRhOWJiYWU1ODVkOGM2NWViMg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-01-14T01:09:01Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-01-14T01:09:01Z"}, "message": "__attribute__ ((constructor))\n\nFrom-SVN: r8747", "tree": {"sha": "9af815a0feebeea5b32fc5a358886913ab5dd30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9af815a0feebeea5b32fc5a358886913ab5dd30e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/comments", "author": null, "committer": null, "parents": [{"sha": "34cd1bd74c2afe5a0e14182e7275836d91ed462d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cd1bd74c2afe5a0e14182e7275836d91ed462d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cd1bd74c2afe5a0e14182e7275836d91ed462d"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "8b3b887f8fdd896466493028bbd643ee73125240", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -271,6 +271,32 @@ decl_attributes (decl, attributes)\n \telse\n \t  warning_with_decl (decl, \"`transparent_union' attribute ignored\");\n       }\n+    else if (TREE_VALUE (a) == get_identifier (\"constructor\")\n+\t     || TREE_VALUE (a) == get_identifier (\"__constructor__\"))\n+      {\n+\tif (TREE_CODE (decl) != FUNCTION_DECL\n+\t    || TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n+\t    || decl_function_context (decl))\n+\t  {\n+\t    error_with_decl (decl,\n+\t\t    \"`constructor' attribute meaningless for non-function %s\");\n+\t    continue;\n+\t  }\n+\tDECL_STATIC_CONSTRUCTOR (decl) = 1;\n+      }\n+    else if (TREE_VALUE (a) == get_identifier (\"destructor\")\n+\t     || TREE_VALUE (a) == get_identifier (\"__destructor__\"))\n+      {\n+\tif (TREE_CODE (decl) != FUNCTION_DECL\n+\t    || TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n+\t    || decl_function_context (decl))\n+\t  {\n+\t    error_with_decl (decl,\n+\t\t    \"`destructor' attribute meaningless for non-function %s\");\n+\t    continue;\n+\t  }\n+\tDECL_STATIC_DESTRUCTOR (decl) = 1;\n+      }\n     else if (TREE_CODE (name) != TREE_LIST)\n      {\n #ifdef VALID_MACHINE_ATTRIBUTE"}, {"sha": "8243ad7457bdf8e5509883b183036ea606a6e915", "filename": "gcc/c-decl.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -400,6 +400,10 @@ static int keep_next_if_subblocks;\n \n static struct binding_level *label_level_chain;\n \n+/* Functions called automatically at the beginning and end of execution.  */\n+\n+tree static_ctors, static_dtors;\n+\n /* Forward declarations.  */\n \n static tree grokparms (), grokdeclarator ();\n@@ -1744,6 +1748,12 @@ duplicate_decls (newdecl, olddecl)\n       if (DECL_SECTION_NAME (newdecl) == NULL_TREE)\n \tDECL_SECTION_NAME (newdecl) = DECL_SECTION_NAME (olddecl);\n \n+      if (TREE_CODE (newdecl) == FUNCTION_DECL)\n+\t{\n+\t  DECL_STATIC_CONSTRUCTOR(newdecl) |= DECL_STATIC_CONSTRUCTOR(olddecl);\n+\t  DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n+\t}\n+\n       pop_obstacks ();\n     }\n   /* If cannot merge, then use the new type and qualifiers,\n@@ -6749,6 +6759,25 @@ finish_function (nested)\n       DECL_ARGUMENTS (fndecl) = 0;\n     }\n \n+  if (DECL_STATIC_CONSTRUCTOR (fndecl))\n+    {\n+#ifndef ASM_OUTPUT_CONSTRUCTOR\n+      if (! flag_gnu_linker)\n+\tstatic_ctors = perm_tree_cons (NULL_TREE, fndecl, static_ctors);\n+      else\n+#endif\n+      assemble_constructor (IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+    }\n+  if (DECL_STATIC_DESTRUCTOR (fndecl))\n+    {\n+#ifndef ASM_OUTPUT_DESTRUCTOR\n+      if (! flag_gnu_linker)\n+\tstatic_dtors = perm_tree_cons (NULL_TREE, fndecl, static_dtors);\n+      else\n+#endif\n+      assemble_destructor (IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+    }\n+\n   if (! nested)\n     {\n       /* Let the error reporting routines know that we're outside a"}, {"sha": "d429bea09793eaaab5a3aa5a704f6275517a56ea", "filename": "gcc/c-lang.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -127,3 +127,53 @@ GNU_xref_end ()\n {\n   fatal (\"GCC does not yet support XREF\");\n }\n+\n+/* called at end of parsing, but before end-of-file processing.  */\n+void\n+finish_file ()\n+{\n+  extern tree static_ctors, static_dtors;\n+  extern tree get_file_function_name ();\n+  extern tree build_function_call                 PROTO((tree, tree));\n+  tree void_list_node = build_tree_list (NULL_TREE, void_type_node);\n+#ifndef ASM_OUTPUT_CONSTRUCTOR\n+  if (static_ctors)\n+    {\n+      tree fnname = get_file_function_name ('I');\n+      start_function (void_list_node,\n+\t\t      build_parse_node (CALL_EXPR, fnname, void_list_node,\n+\t\t\t\t\tNULL_TREE),\n+\t\t      0);\n+      fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n+      store_parm_decls ();\n+\n+      for (; static_ctors; static_ctors = TREE_CHAIN (static_ctors))\n+\texpand_expr_stmt (build_function_call (TREE_VALUE (static_ctors),\n+\t\t\t\t\t       NULL_TREE));\n+\n+      finish_function (0);\n+\n+      assemble_constructor (IDENTIFIER_POINTER (fnname));\n+    }\n+#endif\n+#ifndef ASM_OUTPUT_DESTRUCTOR\n+  if (static_dtors)\n+    {\n+      tree fnname = get_file_function_name ('D');\n+      start_function (void_list_node,\n+\t\t      build_parse_node (CALL_EXPR, fnname, void_list_node,\n+\t\t\t\t\tNULL_TREE),\n+\t\t      0);\n+      fnname = DECL_ASSEMBLER_NAME (current_function_decl);\n+      store_parm_decls ();\n+\n+      for (; static_dtors; static_dtors = TREE_CHAIN (static_dtors))\n+\texpand_expr_stmt (build_function_call (TREE_VALUE (static_dtors),\n+\t\t\t\t\t       NULL_TREE));\n+\n+      finish_function (0);\n+\n+      assemble_destructor (IDENTIFIER_POINTER (fnname));\n+    }\n+#endif\n+}"}, {"sha": "0862d30a06579ac614c1a40e3626a5dbb8d0c12d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -258,19 +258,15 @@ extern void yyprint ();\n program: /* empty */\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids an empty source file\");\n-ifobjc\n-\t\t  objc_finish ();\n-end ifobjc\n+\t\t  finish_file ();\n \t\t}\n \t| extdefs\n \t\t{\n \t\t  /* In case there were missing closebraces,\n \t\t     get us back to the global binding level.  */\n \t\t  while (! global_bindings_p ())\n \t\t    poplevel (0, 0, 0);\n-ifobjc\n-\t\t  objc_finish ();\n-end ifobjc\n+\t\t  finish_file ();\n \t\t}\n \t;\n "}, {"sha": "96be32f0b9113c5f37fdc90685c9f769dac4789c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -537,7 +537,7 @@ objc_fatal ()\n }\n \n void\n-objc_finish ()\n+finish_file ()\n {\n   if (doing_objc_thang)\n     finish_objc ();\t\t/* Objective-C finalization */"}, {"sha": "1a88fcaa3c70e44199f232af7e0386b6e83d78e5", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -22,7 +22,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* used by yyparse */\n \n-void objc_finish\t\t\t\tPROTO((void));\n+void finish_file\t\t\t\tPROTO((void));\n tree start_class\t\t\t\tPROTO((enum tree_code, tree, tree, tree));\n tree continue_class\t\t\t\tPROTO((tree));\n void finish_class\t\t\t\tPROTO((tree));"}, {"sha": "3b5fde31eabf4f6359b54f96a62381b653d2d7e1", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5f4139a91db294f1ab34da9bbae585d8c65eb2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2c5f4139a91db294f1ab34da9bbae585d8c65eb2", "patch": "@@ -943,6 +943,11 @@ struct tree_type\n    alternative would be passed.  */\n #define DECL_TRANSPARENT_UNION(NODE) ((NODE)->decl.transparent_union)\n \n+/* Used in FUNCTION_DECLs to indicate that they should be run automatically\n+   at the beginning or end of execution.  */\n+#define DECL_STATIC_CONSTRUCTOR(NODE) ((NODE)->decl.static_ctor_flag)\n+#define DECL_STATIC_DESTRUCTOR(NODE) ((NODE)->decl.static_dtor_flag)\n+\n /* Additional flags for language-specific uses.  */\n #define DECL_LANG_FLAG_0(NODE) ((NODE)->decl.lang_flag_0)\n #define DECL_LANG_FLAG_1(NODE) ((NODE)->decl.lang_flag_1)\n@@ -979,7 +984,9 @@ struct tree_decl\n   unsigned common_flag : 1;\n   unsigned defer_output : 1;\n   unsigned transparent_union : 1;\n-  /* room for four more */\n+  unsigned static_ctor_flag : 1;\n+  unsigned static_dtor_flag : 1;\n+  /* room for two more */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}]}