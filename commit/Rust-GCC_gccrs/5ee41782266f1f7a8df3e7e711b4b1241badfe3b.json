{"sha": "5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlNDE3ODIyNjZmMWY3YThkZjNlN2U3MTFiNGIxMjQxYmFkZmUzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-29T08:12:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-29T08:12:02Z"}, "message": "re PR debug/87295 ([early debug] ICE with -ffat-lto-objects -fdebug-types-section -g)\n\n2019-01-29  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/87295\n\t* dwarf2out.c (collect_skeleton_dies): New helper.\n\t(copy_decls_for_unworthy_types): Call it.\n\t(build_abbrev_table): Assert we do not try to replace\n\tDW_AT_signature refs with local refs.\n\n\t* g++.dg/lto/pr87295_0.C: New testcase.\n\nFrom-SVN: r268361", "tree": {"sha": "83dc8df3d65ecc3b36cbc7256576e34f05d45a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83dc8df3d65ecc3b36cbc7256576e34f05d45a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57f0d303848213c1d82437b8c444afda8b72ede0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f0d303848213c1d82437b8c444afda8b72ede0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f0d303848213c1d82437b8c444afda8b72ede0"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "9a3d7d5ce7c694bf8b6703b526bec989b10df0ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "patch": "@@ -1,3 +1,11 @@\n+2019-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/87295\n+\t* dwarf2out.c (collect_skeleton_dies): New helper.\n+\t(copy_decls_for_unworthy_types): Call it.\n+\t(build_abbrev_table): Assert we do not try to replace\n+\tDW_AT_signature refs with local refs.\n+\n 2019-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89002"}, {"sha": "c2a590148b4e7e90d8242e3c54cf34571804ff3c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "patch": "@@ -8722,6 +8722,33 @@ copy_decls_walk (dw_die_ref unit, dw_die_ref die, decl_hash_type *decl_table)\n   FOR_EACH_CHILD (die, c, copy_decls_walk (unit, c, decl_table));\n }\n \n+/* Collect skeleton dies in DIE created by break_out_comdat_types already\n+   and record them in DECL_TABLE.  */\n+\n+static void\n+collect_skeleton_dies (dw_die_ref die, decl_hash_type *decl_table)\n+{\n+  dw_die_ref c;\n+\n+  if (dw_attr_node *a = get_AT (die, DW_AT_signature))\n+    {\n+      dw_die_ref targ = AT_ref (a);\n+      gcc_assert (targ->die_mark == 0 && targ->comdat_type_p);\n+      decl_table_entry **slot\n+        = decl_table->find_slot_with_hash (targ,\n+\t\t\t\t\t   htab_hash_pointer (targ),\n+\t\t\t\t\t   INSERT);\n+      gcc_assert (*slot == HTAB_EMPTY_ENTRY);\n+      /* Record in DECL_TABLE that TARG has been already copied\n+\t by remove_child_or_replace_with_skeleton.  */\n+      decl_table_entry *entry = XCNEW (struct decl_table_entry);\n+      entry->orig = targ;\n+      entry->copy = die;\n+      *slot = entry;\n+    }\n+  FOR_EACH_CHILD (die, c, collect_skeleton_dies (c, decl_table));\n+}\n+\n /* Copy declarations for \"unworthy\" types into the new comdat section.\n    Incomplete types, modified types, and certain other types aren't broken\n    out into comdat sections of their own, so they don't have a signature,\n@@ -8733,6 +8760,7 @@ copy_decls_for_unworthy_types (dw_die_ref unit)\n {\n   mark_dies (unit);\n   decl_hash_type decl_table (10);\n+  collect_skeleton_dies (unit, &decl_table);\n   copy_decls_walk (unit, unit, &decl_table);\n   unmark_dies (unit);\n }\n@@ -9029,7 +9057,10 @@ build_abbrev_table (dw_die_ref die, external_ref_hash_type *extern_map)\n \tif (is_type_die (c)\n \t    && (ref_p = lookup_external_ref (extern_map, c))\n \t    && ref_p->stub && ref_p->stub != die)\n-\t  change_AT_die_ref (a, ref_p->stub);\n+\t  {\n+\t    gcc_assert (a->dw_attr != DW_AT_signature);\n+\t    change_AT_die_ref (a, ref_p->stub);\n+\t  }\n \telse\n \t  /* We aren't changing this reference, so mark it external.  */\n \t  set_AT_ref_external (a, 1);"}, {"sha": "e03b37e0d828255513bba805658f8e141dfcaaba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "patch": "@@ -1,3 +1,8 @@\n+2019-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/87295\n+\t* g++.dg/lto/pr87295_0.C: New testcase.\n+\n 2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89045"}, {"sha": "a063b23d8d41f17bd0ad32d15dfc9b202d3b3fa7", "filename": "gcc/testsuite/g++.dg/lto/pr87295_0.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr87295_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee41782266f1f7a8df3e7e711b4b1241badfe3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr87295_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr87295_0.C?ref=5ee41782266f1f7a8df3e7e711b4b1241badfe3b", "patch": "@@ -0,0 +1,20 @@\n+// { dg-lto-do assemble }\n+// { dg-lto-options { { -flto -ffat-lto-objects -fdebug-types-section -g -std=gnu++17 } } }\n+\n+template<typename _Tp, _Tp __v>\n+struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+  typedef _Tp value_type;\n+  constexpr operator value_type() const noexcept { return value; }\n+};\n+\n+typedef integral_constant<bool, false> false_type;\n+\n+template<typename...>\n+struct __or_;\n+\n+template<>\n+struct __or_<>\n+  : public false_type\n+{ };"}]}