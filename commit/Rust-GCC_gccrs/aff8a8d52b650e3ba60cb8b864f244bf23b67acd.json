{"sha": "aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmOGE4ZDUyYjY1MGUzYmE2MGNiOGI4NjRmMjQ0YmYyM2I2N2FjZA==", "commit": {"author": {"name": "Corey Minyard", "email": "minyard@acm.org", "date": "2001-12-13T01:21:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-13T01:21:52Z"}, "message": "recog.c (validate_replace_rtx_1): Use simplify_gen_binary instead of plus_constant.\n\n        * recog.c (validate_replace_rtx_1): Use simplify_gen_binary\n        instead of plus_constant.\n        * simplify-rtx.c (neg_const_int): New.\n        (simplify_gen_binary, simplify_plus_minus): Use it.\n\nFrom-SVN: r47961", "tree": {"sha": "dd23b0e7682191ced0f522cfb780043faa7ea52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd23b0e7682191ced0f522cfb780043faa7ea52e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/comments", "author": {"login": "cminyard", "id": 4389272, "node_id": "MDQ6VXNlcjQzODkyNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4389272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cminyard", "html_url": "https://github.com/cminyard", "followers_url": "https://api.github.com/users/cminyard/followers", "following_url": "https://api.github.com/users/cminyard/following{/other_user}", "gists_url": "https://api.github.com/users/cminyard/gists{/gist_id}", "starred_url": "https://api.github.com/users/cminyard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cminyard/subscriptions", "organizations_url": "https://api.github.com/users/cminyard/orgs", "repos_url": "https://api.github.com/users/cminyard/repos", "events_url": "https://api.github.com/users/cminyard/events{/privacy}", "received_events_url": "https://api.github.com/users/cminyard/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2bd38e89276e521395d42410655af037ee0c3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bd38e89276e521395d42410655af037ee0c3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2bd38e89276e521395d42410655af037ee0c3ed"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "2a1e4df1df92f2f746f5a19f878490a87c11c54c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "patch": "@@ -1,3 +1,10 @@\n+2001-11-29  Corey Minyard <minyard@acm.org>\n+\n+\t* recog.c (validate_replace_rtx_1): Use simplify_gen_binary\n+\tinstead of plus_constant.\n+\t* simplify-rtx.c (neg_const_int): New.\n+\t(simplify_gen_binary, simplify_plus_minus): Use it.\n+\n 2001-12-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (expand_builtin_memset, expand_builtin_memcpy,"}, {"sha": "adcd2d48dc117e9b773dfcec98372a054038dae4", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "patch": "@@ -512,7 +512,8 @@ validate_replace_rtx_1 (loc, from, to, object)\n          separated from this function.  */\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n \tvalidate_change (object, loc,\n-\t\t\t plus_constant (XEXP (x, 0), INTVAL (XEXP (x, 1))), 1);\n+\t\t\t simplify_gen_binary\n+\t\t\t (PLUS, GET_MODE (x), XEXP (x, 0), XEXP (x, 1)), 1);\n       break;\n     case MINUS:\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT"}, {"sha": "122768e41227be715df07cfb85f89d5361570652", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff8a8d52b650e3ba60cb8b864f244bf23b67acd/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=aff8a8d52b650e3ba60cb8b864f244bf23b67acd", "patch": "@@ -95,6 +95,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define HWI_SIGN_EXTEND(low) \\\n  ((((HOST_WIDE_INT) low) < 0) ? ((HOST_WIDE_INT) -1) : ((HOST_WIDE_INT) 0))\n \n+static rtx neg_const_int PARAMS ((enum machine_mode, rtx));\n static int simplify_plus_minus_op_data_cmp PARAMS ((const void *,\n \t\t\t\t\t\t    const void *));\n static rtx simplify_plus_minus\t\tPARAMS ((enum rtx_code,\n@@ -106,6 +107,17 @@ static void simplify_binary_real\tPARAMS ((PTR));\n #endif\n static void simplify_binary_is2orm1\tPARAMS ((PTR));\n \n+\f\n+/* Negate a CONST_INT rtx, truncating (because a conversion from a\n+   maximally negative number can overflow). */\n+static rtx\n+neg_const_int (mode, i)\n+     enum machine_mode mode;\n+     rtx i;\n+{\n+  return GEN_INT (trunc_int_for_mode (- INTVAL (i), mode));\n+}\n+\n \f\n /* Make a binary operation by properly ordering the operands and \n    seeing if the expression folds.  */\n@@ -136,10 +148,9 @@ simplify_gen_binary (code, mode, op0, op1)\n       && GET_MODE (op0) != VOIDmode\n       && (code == PLUS || code == MINUS))\n     {\n-      HOST_WIDE_INT value = INTVAL (op1);\n       if (code == MINUS)\n-\tvalue = -value;\n-      return plus_constant (op0, value);\n+\top1 = neg_const_int (mode, op1);\n+      return plus_constant (op0, INTVAL (op1));\n     }\n   else\n     return gen_rtx_fmt_ee (code, mode, op0, op1);\n@@ -1276,7 +1287,9 @@ simplify_binary_operation (code, mode, op0, op1)\n \n \t  /* Don't let a relocatable value get a negative coeff.  */\n \t  if (GET_CODE (op1) == CONST_INT && GET_MODE (op0) != VOIDmode)\n-\t    return plus_constant (op0, - INTVAL (op1));\n+\t    return simplify_gen_binary (PLUS, mode,\n+\t\t\t\t\top0,\n+\t\t\t\t\tneg_const_int (mode, op1));\n \n \t  /* (x - (x & y)) -> (x & ~y) */\n \t  if (GET_CODE (op1) == AND)\n@@ -1787,7 +1800,7 @@ simplify_plus_minus (code, mode, op0, op1)\n \t    case CONST_INT:\n \t      if (this_neg)\n \t\t{\n-\t\t  ops[i].op = GEN_INT (- INTVAL (this_op));\n+\t\t  ops[i].op = neg_const_int (mode, this_op);\n \t\t  ops[i].neg = 0;\n \t\t  changed = 1;\n \t\t}\n@@ -1848,7 +1861,7 @@ simplify_plus_minus (code, mode, op0, op1)\n \t\t    if (GET_CODE (tem) == NEG)\n \t\t      tem = XEXP (tem, 0), lneg = !lneg;\n \t\t    if (GET_CODE (tem) == CONST_INT && lneg)\n-\t\t      tem = GEN_INT (- INTVAL (tem)), lneg = 0;\n+\t\t      tem = neg_const_int (mode, tem), lneg = 0;\n \n \t\t    ops[i].op = tem;\n \t\t    ops[i].neg = lneg;\n@@ -1881,10 +1894,10 @@ simplify_plus_minus (code, mode, op0, op1)\n       && GET_CODE (ops[n_ops - 1].op) == CONST_INT\n       && CONSTANT_P (ops[n_ops - 2].op))\n     {\n-      HOST_WIDE_INT value = INTVAL (ops[n_ops - 1].op);\n+      rtx value = ops[n_ops - 1].op;\n       if (ops[n_ops - 1].neg ^ ops[n_ops - 2].neg)\n-\tvalue = -value;\n-      ops[n_ops - 2].op = plus_constant (ops[n_ops - 2].op, value);\n+\tvalue = neg_const_int (mode, value);\n+      ops[n_ops - 2].op = plus_constant (ops[n_ops - 2].op, INTVAL (value));\n       n_ops--;\n     }\n "}]}