{"sha": "b168ced90319bca53a0057dabf9786cc341c6c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2OGNlZDkwMzE5YmNhNTNhMDA1N2RhYmY5Nzg2Y2MzNDFjNmM0Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-11-19T20:36:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-11-19T20:36:43Z"}, "message": "re PR rtl-optimization/51187 (miscompilation of genrecog.c at -O2 for --target=avr)\n\n\tPR rtl-optimization/51187\n\t* reorg.c (relax_delay_slots): Do not consider a jump useless if there\n\tis a barrier between the jump and its target label.\n\nFrom-SVN: r181513", "tree": {"sha": "b23e607d783381144b9fc87ba70206d9b1111f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23e607d783381144b9fc87ba70206d9b1111f68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b168ced90319bca53a0057dabf9786cc341c6c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b168ced90319bca53a0057dabf9786cc341c6c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b168ced90319bca53a0057dabf9786cc341c6c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b168ced90319bca53a0057dabf9786cc341c6c43/comments", "author": null, "committer": null, "parents": [{"sha": "2e85d5e290aadb0cd0c50ddfcd8ba4f58c2301e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e85d5e290aadb0cd0c50ddfcd8ba4f58c2301e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e85d5e290aadb0cd0c50ddfcd8ba4f58c2301e7"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "6f987847ce8c2567ea500b8b435fb88f3725eba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b168ced90319bca53a0057dabf9786cc341c6c43", "patch": "@@ -1,3 +1,9 @@\n+2011-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/51187\n+\t* reorg.c (relax_delay_slots): Do not consider a jump useless if there\n+\tis a barrier between the jump and its target label.\n+\n 2011-11-19  Patrick Marlier  <patrick.marlier@gmail.com>\n \n \tPR middle-end/51211"}, {"sha": "0b90550add5e4d498e1160fbb1670010f118450c", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=b168ced90319bca53a0057dabf9786cc341c6c43", "patch": "@@ -3600,9 +3600,11 @@ relax_delay_slots (rtx first)\n \t    }\n \t}\n \n+      /* See if we have a simple (conditional) jump that is useless.  */\n       if (! INSN_ANNULLED_BRANCH_P (delay_insn)\n-\t  && prev_active_insn (target_label) == insn\n \t  && ! condjump_in_parallel_p (delay_insn)\n+\t  && prev_active_insn (target_label) == insn\n+\t  && ! BARRIER_P (prev_nonnote_insn (target_label))\n #ifdef HAVE_cc0\n \t  /* If the last insn in the delay slot sets CC0 for some insn,\n \t     various code assumes that it is in a delay slot.  We could"}, {"sha": "5b579e0cd8663e812dd990e98adae8fa44101bd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b168ced90319bca53a0057dabf9786cc341c6c43", "patch": "@@ -1,3 +1,7 @@\n+2011-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/delay-slot-2.c: New test.\n+\n 2011-11-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/cpp/assert4.c: Test __linux__, not __gnu_linux__."}, {"sha": "79faf81c7982de494873da81ece537e9c2472e13", "filename": "gcc/testsuite/gcc.dg/delay-slot-2.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168ced90319bca53a0057dabf9786cc341c6c43/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdelay-slot-2.c?ref=b168ced90319bca53a0057dabf9786cc341c6c43", "patch": "@@ -0,0 +1,116 @@\n+/* PR rtl-optimization/51187 */\n+/* Reported by Jurij Smakov <jurij@wooyd.org> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O2\" } */\n+\n+extern int printf (__const char *__restrict __format, ...);\n+extern void print_c_condition (const char *);\n+\n+enum decision_type\n+{\n+  DT_num_insns,\n+  DT_mode, DT_code, DT_veclen,\n+  DT_elt_zero_int, DT_elt_one_int, DT_elt_zero_wide, DT_elt_zero_wide_safe,\n+  DT_const_int,\n+  DT_veclen_ge, DT_dup, DT_pred, DT_c_test,\n+  DT_accept_op, DT_accept_insn\n+};\n+\n+struct decision_test\n+{\n+  struct decision_test *next;\n+  enum decision_type type;\n+\n+  union\n+  {\n+    int num_insns;\n+\n+    struct\n+    {\n+      const char *name;\n+    } pred;\n+\n+    const char *c_test;\n+    int veclen;\n+    int dup;\n+    long intval;\n+    int opno;\n+\n+    struct {\n+      int code_number;\n+      int lineno;\n+      int num_clobbers_to_add;\n+    } insn;\n+  } u;\n+};\n+\n+enum routine_type {\n+  RECOG, SPLIT, PEEPHOLE2\n+};\n+\n+void\n+write_cond (struct decision_test *p, int depth,\n+     enum routine_type subroutine_type)\n+{\n+  switch (p->type)\n+    {\n+    case DT_num_insns:\n+      printf (\"peep2_current_count >= %d\", p->u.num_insns);\n+      break;\n+\n+    case DT_code:\n+      printf (\"GET_CODE (x%d) == \", depth);\n+      break;\n+\n+    case DT_veclen:\n+      printf (\"XVECLEN (x%d, 0) == %d\", depth, p->u.veclen);\n+      break;\n+\n+    case DT_elt_zero_int:\n+      printf (\"XINT (x%d, 0) == %d\", depth, (int) p->u.intval);\n+      break;\n+\n+    case DT_elt_one_int:\n+      printf (\"XINT (x%d, 1) == %d\", depth, (int) p->u.intval);\n+      break;\n+\n+    case DT_elt_zero_wide:\n+    case DT_elt_zero_wide_safe:\n+      printf (\"XWINT (x%d, 0) == \", depth);\n+      print_host_wide_int (p->u.intval);\n+      break;\n+\n+    case DT_const_int:\n+      printf (\"x%d == const_int_rtx[MAX_SAVED_CONST_INT + (%d)]\",\n+       depth, (int) p->u.intval);\n+      break;\n+\n+    case DT_veclen_ge:\n+      printf (\"XVECLEN (x%d, 0) >= %d\", depth, p->u.veclen);\n+      break;\n+\n+    case DT_dup:\n+      printf (\"rtx_equal_p (x%d, operands[%d])\", depth, p->u.dup);\n+      break;\n+\n+    case DT_pred:\n+      printf (\"%s (x%d)\", p->u.pred.name, depth);\n+      break;\n+\n+    case DT_c_test:\n+      print_c_condition (p->u.c_test);\n+      break;\n+\n+    case DT_accept_insn:\n+      ((void)(__builtin_expect(!(subroutine_type == RECOG), 0) ? __builtin_unreachable(), 0 : 0));\n+      ((void)(__builtin_expect(!(p->u.insn.num_clobbers_to_add), 0) ? __builtin_unreachable(), 0 : 0));\n+      printf (\"pnum_clobbers != NULL\");\n+      break;\n+\n+    default:\n+      __builtin_unreachable();\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"printf\" } } */"}]}