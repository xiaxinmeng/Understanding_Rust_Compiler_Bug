{"sha": "01b18343996b7145c23191fb574b3fae3e845d8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiMTgzNDM5OTZiNzE0NWMyMzE5MWZiNTc0YjNmYWUzZTg0NWQ4ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:30:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:30:04Z"}, "message": "s-imenne.adb, [...]: New files.\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\n\t* s-imenne.adb, s-imenne.ads: New files.\n\n\t* s-imgboo.adb, s-imgboo.ads, s-imgcha.adb, s-imgcha.ads, s-imgdec.adb, \n\ts-imgdec.ads, s-imgenu.ads, s-imgint.adb, s-imgint.ads, s-imglld.adb, \n\ts-imglld.ads, s-imglli.adb, s-imglli.ads, s-imgllu.adb, s-imgllu.ads, \n\ts-imgrea.adb, s-imgrea.ads, s-imguns.adb, s-imguns.ads, s-imgwch.adb, \n\ts-imgwch.ads: New calling sequence for Image routines to avoid sec\n\tstack usage.\n\nFrom-SVN: r130852", "tree": {"sha": "723bf7b7f6c79be9da7af8b7b5180dc8dc0f63f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/723bf7b7f6c79be9da7af8b7b5180dc8dc0f63f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b18343996b7145c23191fb574b3fae3e845d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b18343996b7145c23191fb574b3fae3e845d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b18343996b7145c23191fb574b3fae3e845d8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b18343996b7145c23191fb574b3fae3e845d8d/comments", "author": null, "committer": null, "parents": [{"sha": "859fd598cb7a5f449fa3ce9aaafb65ade064b2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859fd598cb7a5f449fa3ce9aaafb65ade064b2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859fd598cb7a5f449fa3ce9aaafb65ade064b2ed"}], "stats": {"total": 808, "additions": 576, "deletions": 232}, "files": [{"sha": "1e08b055e8ff91f4fb80d6fcf91159ac5f488593", "filename": "gcc/ada/s-imenne.adb", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imenne.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imenne.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imenne.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -0,0 +1,132 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . I M G _ E N U M _ N E W                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Warnings (Off);\n+pragma Compiler_Unit;\n+pragma Warnings (On);\n+\n+with Ada.Unchecked_Conversion;\n+\n+package body System.Img_Enum_New is\n+\n+   -------------------------\n+   -- Image_Enumeration_8 --\n+   -------------------------\n+\n+   procedure Image_Enumeration_8\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+   is\n+      pragma Assert (S'First = 1);\n+\n+      type Natural_8 is range 0 .. 2 ** 7 - 1;\n+      type Index_Table is array (Natural) of Natural_8;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : constant Natural := Natural (IndexesT (Pos));\n+      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n+\n+   begin\n+      S (1 .. Next - Start) := Names (Start .. Next - 1);\n+      P := Next - Start;\n+   end Image_Enumeration_8;\n+\n+   --------------------------\n+   -- Image_Enumeration_16 --\n+   --------------------------\n+\n+   procedure Image_Enumeration_16\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+   is\n+      pragma Assert (S'First = 1);\n+\n+      type Natural_16 is range 0 .. 2 ** 15 - 1;\n+      type Index_Table is array (Natural) of Natural_16;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : constant Natural := Natural (IndexesT (Pos));\n+      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n+\n+   begin\n+      S (1 .. Next - Start) := Names (Start .. Next - 1);\n+      P := Next - Start;\n+   end Image_Enumeration_16;\n+\n+   --------------------------\n+   -- Image_Enumeration_32 --\n+   --------------------------\n+\n+   procedure Image_Enumeration_32\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+   is\n+      pragma Assert (S'First = 1);\n+\n+      type Natural_32 is range 0 .. 2 ** 31 - 1;\n+      type Index_Table is array (Natural) of Natural_32;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : constant Natural := Natural (IndexesT (Pos));\n+      Next  : constant Natural := Natural (IndexesT (Pos + 1));\n+\n+   begin\n+      S (1 .. Next - Start) := Names (Start .. Next - 1);\n+      P := Next - Start;\n+   end Image_Enumeration_32;\n+\n+end System.Img_Enum_New;"}, {"sha": "3be79cd3092993fccb6968b6df70486c02b061e5", "filename": "gcc/ada/s-imenne.ads", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imenne.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imenne.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imenne.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -0,0 +1,89 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . I M G _ E N U M _ N E W                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Enumeration_Type'Image for all enumeration types except those in package\n+--  Standard (where we have no opportunity to build image tables), and in\n+--  package System (where it is too early to start building image tables).\n+--  Special routines exist for the enumeration types in these packages.\n+\n+--  This is the new version of the package, for use by compilers built after\n+--  Nov 21st, 2007, which provides procedures that avoid using the secondary\n+--  stack. The original package System.Img_Enum is maintained in the sources\n+--  for bootstrapping with older versions of the compiler which expect to find\n+--  functions in this package.\n+\n+pragma Warnings (Off);\n+pragma Compiler_Unit;\n+pragma Warnings (On);\n+\n+package System.Img_Enum_New is\n+   pragma Pure;\n+\n+   procedure Image_Enumeration_8\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address);\n+   --  Used to compute Enum'Image (Str) where Enum is some enumeration type\n+   --  other than those defined in package Standard. Names is a string with\n+   --  a lower bound of 1 containing the characters of all the enumeration\n+   --  literals concatenated together in sequence. Indexes is the address of\n+   --  an array of type array (0 .. N) of Natural_8, where N is the number of\n+   --  enumeration literals in the type. The Indexes values are the starting\n+   --  subscript of each enumeration literal, indexed by Pos values, with an\n+   --  extra entry at the end containing Names'Length + 1. The reason that\n+   --  Indexes is passed by address is that the actual type is created on the\n+   --  fly by the expander. The desired 'Image value is stored in S (1 .. P)\n+   --  and P is set on return. The caller guarantees that S is long enough to\n+   --  hold the result and that the lower bound is 1.\n+\n+   procedure Image_Enumeration_16\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address);\n+   --  Identical to Set_Image_Enumeration_8 except that it handles types\n+   --  using array (0 .. Num) of Natural_16 for the Indexes table.\n+\n+   procedure Image_Enumeration_32\n+     (Pos     : Natural;\n+      S       : in out String;\n+      P       : out Natural;\n+      Names   : String;\n+      Indexes : System.Address);\n+   --  Identical to Set_Image_Enumeration_8 except that it handles types\n+   --  using array (0 .. Num) of Natural_32 for the Indexes table.\n+\n+end System.Img_Enum_New;"}, {"sha": "8d69bac4edd1c3cacfa1bbe03e8e102b23f65af9", "filename": "gcc/ada/s-imgboo.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgboo.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--           Copyright (C) 1992-2007, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,12 +37,19 @@ package body System.Img_Bool is\n    -- Image_Boolean --\n    -------------------\n \n-   function Image_Boolean (V : Boolean) return String is\n+   procedure Image_Boolean\n+     (V : Boolean;\n+      S : in out String;\n+      P : out Natural)\n+   is\n+      pragma Assert (S'First = 1);\n    begin\n       if V then\n-         return \"TRUE\";\n+         S (1 .. 4) := \"TRUE\";\n+         P := 4;\n       else\n-         return \"FALSE\";\n+         S (1 .. 5) := \"FALSE\";\n+         P := 5;\n       end if;\n    end Image_Boolean;\n "}, {"sha": "ec1fd0664d491647a1299223faf6acf122a681b3", "filename": "gcc/ada/s-imgboo.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgboo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgboo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgboo.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -36,7 +36,12 @@\n package System.Img_Bool is\n    pragma Pure;\n \n-   function Image_Boolean (V : Boolean) return String;\n-   --  Computes Boolean'Image (V) and returns the result\n+   procedure Image_Boolean\n+     (V : Boolean;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Boolean'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S\n+   --  is long enough to hold the result, and that S'First is 1.\n \n end System.Img_Bool;"}, {"sha": "a8d7c10bc0943245a28a58b20cefc6658856b408", "filename": "gcc/ada/s-imgcha.adb", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,10 +37,14 @@ package body System.Img_Char is\n    -- Image_Character --\n    ---------------------\n \n-   function Image_Character (V : Character) return String is\n-      subtype Cname is String (1 .. 3);\n+   procedure Image_Character\n+     (V : Character;\n+      S : in out String;\n+      P : out Natural)\n+   is\n+      pragma Assert (S'First = 1);\n \n-      S : Cname;\n+      subtype Cname is String (1 .. 3);\n \n       subtype C0_Range is Character\n         range Character'Val (16#00#) .. Character'Val (16#1F#);\n@@ -121,22 +125,22 @@ package body System.Img_Char is\n       --  Control characters are represented by their names (RM 3.5(32))\n \n       if V in C0_Range then\n-         S := C0 (V);\n+         S (1 .. 3) := C0 (V);\n \n          if S (3) = ' ' then\n-            return S (1 .. 2);\n+            P := 2;\n          else\n-            return S;\n+            P := 3;\n          end if;\n \n       elsif V in C1_Range then\n-         S := C1 (V);\n+         S (1 .. 3) := C1 (V);\n \n          if S (1) /= 'r' then\n             if S (3) = ' ' then\n-               return S (1 .. 2);\n+               P := 2;\n             else\n-               return S;\n+               P := 3;\n             end if;\n \n          --  Special case, res means RESERVED_nnn where nnn is the three digit\n@@ -146,13 +150,12 @@ package body System.Img_Char is\n          else\n             declare\n                VP : constant Natural := Character'Pos (V);\n-               St : String (1 .. 12) := \"RESERVED_xxx\";\n-\n             begin\n-               St (10) := Character'Val (48 + VP / 100);\n-               St (11) := Character'Val (48 + (VP / 10) mod 10);\n-               St (12) := Character'Val (48 + VP mod 10);\n-               return St;\n+               S (1 .. 9) := \"RESERVED_\";\n+               S (10) := Character'Val (48 + VP / 100);\n+               S (11) := Character'Val (48 + (VP / 10) mod 10);\n+               S (12) := Character'Val (48 + VP mod 10);\n+               P := 12;\n             end;\n          end if;\n \n@@ -162,7 +165,7 @@ package body System.Img_Char is\n          S (1) := ''';\n          S (2) := V;\n          S (3) := ''';\n-         return S;\n+         P := 3;\n       end if;\n    end Image_Character;\n "}, {"sha": "8ef90d252af282ae15ea2d08c487d1d38fa1b60d", "filename": "gcc/ada/s-imgcha.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgcha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgcha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,12 @@\n package System.Img_Char is\n    pragma Pure;\n \n-   function Image_Character (V : Character) return String;\n-   --  Computes Character'Image (V) and returns the result\n+   procedure Image_Character\n+     (V : Character;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Character'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S is\n+   --  long enough to hold the result, and that S'First is 1.\n \n end System.Img_Char;"}, {"sha": "ce7365eb2a6e630f9642fa91d82c859b40288cca", "filename": "gcc/ada/s-imgdec.adb", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgdec.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,26 +39,25 @@ package body System.Img_Dec is\n    -- Image_Decimal --\n    -------------------\n \n-   function Image_Decimal\n+   procedure Image_Decimal\n      (V     : Integer;\n-      Scale : Integer) return String\n+      S     : in out String;\n+      P     : out Natural;\n+      Scale : Integer)\n    is\n-      P : Natural := 0;\n-      S : String (1 .. 64);\n+      pragma Assert (S'First = 1);\n \n    begin\n-      Set_Image_Decimal (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n-\n-      --  Mess around to make sure we have the objectionable space at the\n-      --  start for positive numbers in accordance with the annoying rules!\n+      --  Add space at start for non-negative numbers\n \n-      if S (1) /= ' ' and then S (1) /= '-' then\n-         S (2 .. P + 1) := S (1 .. P);\n+      if V >= 0 then\n          S (1) := ' ';\n-         return S (1 .. P + 1);\n+         P := 1;\n       else\n-         return S (1 .. P);\n+         P := 0;\n       end if;\n+\n+      Set_Image_Decimal (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n    end Image_Decimal;\n \n    ------------------------\n@@ -188,12 +187,20 @@ package body System.Img_Dec is\n          end if;\n       end Round;\n \n+      ---------\n+      -- Set --\n+      ---------\n+\n       procedure Set (C : Character) is\n       begin\n          P := P + 1;\n          S (P) := C;\n       end Set;\n \n+      -------------------------\n+      -- Set_Blanks_And_Sign --\n+      -------------------------\n+\n       procedure Set_Blanks_And_Sign (N : Integer) is\n          W : Integer := N;\n \n@@ -214,13 +221,21 @@ package body System.Img_Dec is\n          end if;\n       end Set_Blanks_And_Sign;\n \n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n       procedure Set_Digits (S, E : Natural) is\n       begin\n          for J in S .. E loop\n             Set (Digs (J));\n          end loop;\n       end Set_Digits;\n \n+      ----------------\n+      -- Set_Zeroes --\n+      ----------------\n+\n       procedure Set_Zeroes (N : Integer) is\n       begin\n          for J in 1 .. N loop\n@@ -330,7 +345,6 @@ package body System.Img_Dec is\n             end if;\n          end if;\n       end if;\n-\n    end Set_Decimal_Digits;\n \n    -----------------------\n@@ -339,14 +353,14 @@ package body System.Img_Dec is\n \n    procedure Set_Image_Decimal\n      (V     : Integer;\n-      S     : out String;\n+      S     : in out String;\n       P     : in out Natural;\n       Scale : Integer;\n       Fore  : Natural;\n       Aft   : Natural;\n       Exp   : Natural)\n    is\n-      Digs : String := Image_Integer (V);\n+      Digs : String := Integer'Image (V);\n       --  Sign and digits of decimal value\n \n    begin"}, {"sha": "16a821c5f4ccd667bffb7e6f18ff7b22a05f8b30", "filename": "gcc/ada/s-imgdec.ads", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgdec.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,18 +35,23 @@\n --  type does not exceed Integer'Size (also used for Text_IO.Decimal_IO output)\n \n package System.Img_Dec is\n-   pragma Preelaborate;\n+   pragma Pure;\n \n-   function Image_Decimal\n+   procedure Image_Decimal\n      (V     : Integer;\n-      Scale : Integer) return String;\n-   --  Compute 'Image of V, the integer value (in units of delta) of a decimal\n-   --  type whose Scale is as given and return the result. THe image is given\n-   --  by the rules in RM 3.5(34) for fixed-point type image functions.\n+      S     : in out String;\n+      P     : out Natural;\n+      Scale : Integer);\n+   --  Computes fixed_type'Image (V), where V is the integer value (in units of\n+   --  delta) of a decimal type whose Scale is as given and stores the result\n+   --  S (1 .. P), updating P to the value of L. The image is given by the\n+   --  rules in RM 3.5(34) for fixed-point type image functions. The caller\n+   --  guarantees that S is long enough to hold the result. S need not have a\n+   --  lower bound of 1.\n \n    procedure Set_Image_Decimal\n      (V     : Integer;\n-      S     : out String;\n+      S     : in out String;\n       P     : in out Natural;\n       Scale : Integer;\n       Fore  : Natural;\n@@ -59,7 +64,7 @@ package System.Img_Dec is\n    --  will not necessarily be raised if this requirement is violated, since\n    --  it is perfectly valid to compile this unit with checks off. The Fore,\n    --  Aft and Exp values can be set to any valid values for the case of use\n-   --  by Text_IO.Decimal_IO.\n+   --  by Text_IO.Decimal_IO. Note that there is no leading space stored.\n \n    procedure Set_Decimal_Digits\n      (Digs  : in out String;"}, {"sha": "2b6fbdd310948ca5fac5ce1d6013f8527cbb2e8e", "filename": "gcc/ada/s-imgenu.ads", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgenu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgenu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgenu.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -34,7 +34,14 @@\n --  Enumeration_Type'Image for all enumeration types except those in package\n --  Standard (where we have no opportunity to build image tables), and in\n --  package System (where it is too early to start building image tables).\n---  Special routines exist for the enumeration routines in these packages.\n+--  Special routines exist for the enumeration types in these packages.\n+\n+--  Note: this is an obsolete package, replaced by System.Img_Enum_New, which\n+--  provides procedures instead of functions for these enumeration image calls.\n+--  The reason we maintain this package is that when bootstrapping with old\n+--  compilers, the old compiler will search for this unit, expectinng to find\n+--  these functions. The new commpiler will search for procedures in the new\n+--  version of the unit.\n \n pragma Warnings (Off);\n pragma Compiler_Unit;\n@@ -46,8 +53,7 @@ package System.Img_Enum is\n    function Image_Enumeration_8\n      (Pos     : Natural;\n       Names   : String;\n-      Indexes : System.Address)\n-      return    String;\n+      Indexes : System.Address) return String;\n    --  Used to compute Enum'Image (Str) where Enum is some enumeration type\n    --  other than those defined in package Standard. Names is a string with a\n    --  lower bound of 1 containing the characters of all the enumeration\n@@ -62,16 +68,14 @@ package System.Img_Enum is\n    function Image_Enumeration_16\n      (Pos     : Natural;\n       Names   : String;\n-      Indexes : System.Address)\n-      return    String;\n+      Indexes : System.Address) return String;\n    --  Identical to Image_Enumeration_8 except that it handles types\n    --  using array (0 .. Num) of Natural_16 for the Indexes table.\n \n    function Image_Enumeration_32\n      (Pos     : Natural;\n       Names   : String;\n-      Indexes : System.Address)\n-      return    String;\n+      Indexes : System.Address) return String;\n    --  Identical to Image_Enumeration_8 except that it handles types\n    --  using array (0 .. Num) of Natural_32 for the Indexes table.\n "}, {"sha": "74a5b736e48fc77924a6c44556994200810a3f99", "filename": "gcc/ada/s-imgint.adb", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgint.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,20 +37,46 @@ package body System.Img_Int is\n    -- Image_Integer --\n    -------------------\n \n-   function Image_Integer (V : Integer) return String is\n-      P : Natural;\n-      S : String (1 .. Integer'Width);\n+   procedure Image_Integer\n+     (V : Integer;\n+      S : in out String;\n+      P : out Natural)\n+   is\n+      pragma Assert (S'First = 1);\n+\n+      procedure Set_Digits (T : Integer);\n+      --  Set digits of absolute value of T, which is zero or negative. We work\n+      --  with the negative of the value so that the largest negative number is\n+      --  not a special case.\n+\n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n+      procedure Set_Digits (T : Integer) is\n+      begin\n+         if T <= -10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (48 - (T rem 10));\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (48 - T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processinng for Image_Integer\n \n    begin\n+      P := 1;\n+\n       if V >= 0 then\n-         P := 1;\n          S (P) := ' ';\n+         Set_Digits (-V);\n       else\n-         P := 0;\n+         S (P) := '-';\n+         Set_Digits (V);\n       end if;\n-\n-      Set_Image_Integer (V, S, P);\n-      return S (1 .. P);\n    end Image_Integer;\n \n    -----------------------\n@@ -59,21 +85,24 @@ package body System.Img_Int is\n \n    procedure Set_Image_Integer\n      (V : Integer;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural)\n    is\n       procedure Set_Digits (T : Integer);\n       --  Set digits of absolute value of T, which is zero or negative. We work\n       --  with the negative of the value so that the largest negative number is\n       --  not a special case.\n \n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n       procedure Set_Digits (T : Integer) is\n       begin\n          if T <= -10 then\n             Set_Digits (T / 10);\n             P := P + 1;\n             S (P) := Character'Val (48 - (T rem 10));\n-\n          else\n             P := P + 1;\n             S (P) := Character'Val (48 - T);\n@@ -85,7 +114,6 @@ package body System.Img_Int is\n    begin\n       if V >= 0 then\n          Set_Digits (-V);\n-\n       else\n          P := P + 1;\n          S (P) := '-';"}, {"sha": "7fe23186ea90e116b8788d3f90e85e39be2148d2", "filename": "gcc/ada/s-imgint.ads", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgint.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,18 +38,22 @@\n package System.Img_Int is\n    pragma Pure;\n \n-   function Image_Integer (V : Integer) return String;\n-   --  Computes Integer'Image (V) and returns the result\n+   procedure Image_Integer\n+     (V : Integer;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Integer'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S\n+   --  is long enough to hold the result, and that S'First is 1.\n \n    procedure Set_Image_Integer\n      (V : Integer;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural);\n-   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n-   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n-   --  to point to the last character stored. The caller promises that the\n-   --  buffer is large enough and no check is made for this (Constraint_Error\n-   --  will not be necessarily raised if this is violated since it is perfectly\n-   --  valid to compile this unit with checks off).\n+   --  Stores the image of V in S starting at S (P + 1), P is updated to point\n+   --  to the last character stored. The value stored is identical to the value\n+   --  of Integer'Image (V) except that no leading space is stored when V is\n+   --  non-negative. The caller guarantees that S is long enough to hold the\n+   --  result. S need not have a lower bound of 1.\n \n end System.Img_Int;"}, {"sha": "a75711b8f9a8587f886908b1d3223d64fd2f72b6", "filename": "gcc/ada/s-imglld.adb", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglld.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglld.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglld.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,36 +32,33 @@\n ------------------------------------------------------------------------------\n \n with System.Img_Dec; use System.Img_Dec;\n-with System.Img_LLI; use System.Img_LLI;\n \n package body System.Img_LLD is\n \n    -----------------------------\n    -- Image_Long_Long_Decimal --\n-   -----------------------------\n+   ----------------------------\n \n-   function Image_Long_Long_Decimal\n+   procedure Image_Long_Long_Decimal\n      (V     : Long_Long_Integer;\n+      S     : in out String;\n+      P     : out Natural;\n       Scale : Integer)\n-      return  String\n    is\n-      P : Natural := 0;\n-      S : String (1 .. 64);\n+      pragma Assert (S'First = 1);\n \n    begin\n-      Set_Image_Long_Long_Decimal\n-        (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n-\n-      --  Mess around to make sure we have the objectionable space at the\n-      --  start for positive numbers in accordance with the annoying rules!\n+      --  Add space at start for non-negative numbers\n \n-      if S (1) /= ' ' and then S (1) /= '-' then\n-         S (2 .. P + 1) := S (1 .. P);\n+      if V >= 0 then\n          S (1) := ' ';\n-         return S (1 .. P + 1);\n+         P := 1;\n       else\n-         return S (1 .. P);\n+         P := 0;\n       end if;\n+\n+      Set_Image_Long_Long_Decimal\n+        (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n    end Image_Long_Long_Decimal;\n \n    ---------------------------------\n@@ -70,14 +67,14 @@ package body System.Img_LLD is\n \n    procedure Set_Image_Long_Long_Decimal\n      (V     : Long_Long_Integer;\n-      S     : out String;\n+      S     : in out String;\n       P     : in out Natural;\n       Scale : Integer;\n       Fore  : Natural;\n       Aft   : Natural;\n       Exp   : Natural)\n    is\n-      Digs : String := Image_Long_Long_Integer (V);\n+      Digs : String := Long_Long_Integer'Image (V);\n       --  Sign and digits of decimal value\n \n    begin"}, {"sha": "92bc2ce00f6e6ec3eb65e987334b083b028bc9a6", "filename": "gcc/ada/s-imglld.ads", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglld.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglld.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglld.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,19 +35,23 @@\n --  type does exceeds Integer'Size (also used for Text_IO.Decimal_IO output)\n \n package System.Img_LLD is\n-   pragma Preelaborate;\n+   pragma Pure;\n \n-   function Image_Long_Long_Decimal\n+   procedure Image_Long_Long_Decimal\n      (V     : Long_Long_Integer;\n-      Scale : Integer)\n-      return  String;\n-   --  Compute 'Image of V, the integer value (in units of delta) of a decimal\n-   --  type whose Scale is as given and returns the result. The image is given\n-   --  by the rules in RM 3.5(34) for fixed-point type image functions.\n+      S     : in out String;\n+      P     : out Natural;\n+      Scale : Integer);\n+   --  Computes fixed_type'Image (V), where V is the integer value (in units of\n+   --  delta) of a decimal type whose Scale is as given and store the result in\n+   --  S (P + 1 .. L), updating P to the value of L. The image is given by the\n+   --  rules in RM 3.5(34) for fixed-point type image functions. The caller\n+   --  guarantees that S is long enough to hold the result. S need not have a\n+   --  lower bound of 1.\n \n    procedure Set_Image_Long_Long_Decimal\n      (V     : Long_Long_Integer;\n-      S     : out String;\n+      S     : in out String;\n       P     : in out Natural;\n       Scale : Integer;\n       Fore  : Natural;\n@@ -60,6 +64,6 @@ package System.Img_LLD is\n    --  will not necessarily be raised if this requirement is violated, since\n    --  it is perfectly valid to compile this unit with checks off. The Fore,\n    --  Aft and Exp values can be set to any valid values for the case of use\n-   --  by Text_IO.Decimal_IO.\n+   --  by Text_IO.Decimal_IO. Note that there is no leading space stored.\n \n end System.Img_LLD;"}, {"sha": "00b9b69aef5b3917d19e42fd1d240948907b4c67", "filename": "gcc/ada/s-imglli.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglli.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,43 +37,48 @@ package body System.Img_LLI is\n    -- Image_Long_Long_Integer --\n    -----------------------------\n \n-   function Image_Long_Long_Integer (V : Long_Long_Integer) return String is\n-      P : Natural;\n-      S : String (1 .. Long_Long_Integer'Width);\n+   procedure Image_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      S : in out String;\n+      P : out Natural)\n+   is\n+      pragma Assert (S'First = 1);\n \n    begin\n       if V >= 0 then\n+         S (1) := ' ';\n          P := 1;\n-         S (P) := ' ';\n       else\n          P := 0;\n       end if;\n \n       Set_Image_Long_Long_Integer (V, S, P);\n-      return S (1 .. P);\n    end Image_Long_Long_Integer;\n \n-   ---------------------------------\n+   ------------------------------\n    -- Set_Image_Long_Long_Integer --\n-   ---------------------------------\n+   -----------------------------\n \n    procedure Set_Image_Long_Long_Integer\n      (V : Long_Long_Integer;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural)\n    is\n       procedure Set_Digits (T : Long_Long_Integer);\n       --  Set digits of absolute value of T, which is zero or negative. We work\n       --  with the negative of the value so that the largest negative number is\n       --  not a special case.\n \n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n       procedure Set_Digits (T : Long_Long_Integer) is\n       begin\n          if T <= -10 then\n             Set_Digits (T / 10);\n             P := P + 1;\n             S (P) := Character'Val (48 - (T rem 10));\n-\n          else\n             P := P + 1;\n             S (P) := Character'Val (48 - T);\n@@ -85,13 +90,11 @@ package body System.Img_LLI is\n    begin\n       if V >= 0 then\n          Set_Digits (-V);\n-\n       else\n          P := P + 1;\n          S (P) := '-';\n          Set_Digits (V);\n       end if;\n-\n    end Set_Image_Long_Long_Integer;\n \n end System.Img_LLI;"}, {"sha": "9393ca497136988adfe038ca8609467893e9c319", "filename": "gcc/ada/s-imglli.ads", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imglli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglli.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -36,20 +36,24 @@\n --  operations required in Text_IO.Integer_IO for such types.\n \n package System.Img_LLI is\n-   pragma Preelaborate;\n+   pragma Pure;\n \n-   function Image_Long_Long_Integer (V : Long_Long_Integer) return String;\n-   --  Computes Long_Long_Integer'Image (V) and returns the result\n+   procedure Image_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Long_Long_Integer'Image (V) and stores the result in\n+   --  S (1 .. P) setting the resulting value of P. The caller guarantees\n+   --  that S is long enough to hold the result, and that S'First is 1.\n \n    procedure Set_Image_Long_Long_Integer\n      (V : Long_Long_Integer;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural);\n-   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n-   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n-   --  to point to the last character stored. The caller promises that the\n-   --  buffer is large enough and no check is made for this (Constraint_Error\n-   --  will not be necessarily raised if this is violated since it is perfectly\n-   --  valid to compile this unit with checks off).\n+   --  Stores the image of V in S starting at S (P + 1), P is updated to point\n+   --  to the last character stored. The value stored is identical to the value\n+   --  of Long_Long_Integer'Image (V) except that no leading space is stored\n+   --  when V is non-negative. The caller guarantees that S is long enough to\n+   --  hold the result. S need not have a lower bound of 1.\n \n end System.Img_LLI;"}, {"sha": "00e460e2960513b2791e3b537ba165545ef3b735", "filename": "gcc/ada/s-imgllu.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllu.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 1992-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,32 +39,34 @@ package body System.Img_LLU is\n    -- Image_Long_Long_Unsigned --\n    ------------------------------\n \n-   function Image_Long_Long_Unsigned\n-     (V    : Long_Long_Unsigned)\n-      return String\n+   procedure Image_Long_Long_Unsigned\n+     (V : System.Unsigned_Types.Long_Long_Unsigned;\n+      S : in out String;\n+      P : out Natural)\n    is\n-      P : Natural;\n-      S : String (1 .. Long_Long_Unsigned'Width);\n-\n+      pragma Assert (S'First = 1);\n    begin\n+      S (1) := ' ';\n       P := 1;\n-      S (P) := ' ';\n       Set_Image_Long_Long_Unsigned (V, S, P);\n-      return S (1 .. P);\n    end Image_Long_Long_Unsigned;\n \n-   -----------------------\n+   ----------------------------------\n    -- Set_Image_Long_Long_Unsigned --\n-   -----------------------\n+   ----------------------------------\n \n    procedure Set_Image_Long_Long_Unsigned\n      (V : Long_Long_Unsigned;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural)\n    is\n       procedure Set_Digits (T : Long_Long_Unsigned);\n       --  Set digits of absolute value of T\n \n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n       procedure Set_Digits (T : Long_Long_Unsigned) is\n       begin\n          if T >= 10 then\n@@ -82,7 +84,6 @@ package body System.Img_LLU is\n \n    begin\n       Set_Digits (V);\n-\n    end Set_Image_Long_Long_Unsigned;\n \n end System.Img_LLU;"}, {"sha": "1aa2b3b17c3bfaff922c42279a2caa4af6140942", "filename": "gcc/ada/s-imgllu.ads", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllu.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -40,20 +40,24 @@ with System.Unsigned_Types;\n package System.Img_LLU is\n    pragma Pure;\n \n-   function Image_Long_Long_Unsigned\n-     (V :    System.Unsigned_Types.Long_Long_Unsigned)\n-      return String;\n-   --  Computes Long_Long_Unsigned'Image (V) and returns the result\n+   procedure Image_Long_Long_Unsigned\n+     (V : System.Unsigned_Types.Long_Long_Unsigned;\n+      S : in out String;\n+      P : out Natural);\n+   pragma Inline (Image_Long_Long_Unsigned);\n+\n+   --  Computes Long_Long_Unsigned'Image (V) and stores the result in\n+   --  S (1 .. P) setting the resulting value of P. The caller guarantees\n+   --  that S is long enough to hold the result, and that S'First is 1.\n \n    procedure Set_Image_Long_Long_Unsigned\n      (V : System.Unsigned_Types.Long_Long_Unsigned;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural);\n-   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n-   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n-   --  to point to the last character stored. The caller promises that the\n-   --  buffer is large enough and no check is made for this (Constraint_Error\n-   --  will not be necessarily raised if this is violated since it is perfectly\n-   --  valid to compile this unit with checks off).\n+   --  Stores the image of V in S starting at S (P + 1), P is updated to point\n+   --  to the last character stored. The value stored is identical to the value\n+   --  of Long_Long_Unsigned'Image (V) except that no leading space is stored.\n+   --  The caller guarantees that S is long enough to hold the result. S need\n+   --  not have a lower bound of 1.\n \n end System.Img_LLU;"}, {"sha": "e9fd56067f87dd38e7fe27784f5bad4fa15fc966", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,13 +78,13 @@ package body System.Img_Real is\n    -- Image_Floating_Point --\n    --------------------------\n \n-   function Image_Floating_Point\n+   procedure Image_Floating_Point\n      (V    : Long_Long_Float;\n+      S    : in out String;\n+      P    : out Natural;\n       Digs : Natural)\n-      return String\n    is\n-      P : Natural := 0;\n-      S : String (1 .. Long_Long_Float'Width);\n+      pragma Assert (S'First = 1);\n \n    begin\n       --  Decide wether a blank should be prepended before the call to\n@@ -101,32 +101,36 @@ package body System.Img_Real is\n       then\n          S (1) := ' ';\n          P := 1;\n+      else\n+         P := 0;\n       end if;\n \n       Set_Image_Real (V, S, P, 1, Digs - 1, 3);\n-      return S (1 .. P);\n    end Image_Floating_Point;\n \n    --------------------------------\n    -- Image_Ordinary_Fixed_Point --\n    --------------------------------\n \n-   function Image_Ordinary_Fixed_Point\n-     (V    : Long_Long_Float;\n-      Aft  : Natural)\n-      return String\n+   procedure Image_Ordinary_Fixed_Point\n+     (V   : Long_Long_Float;\n+      S   : in out String;\n+      P   : out Natural;\n+      Aft : Natural)\n    is\n-      P : Natural := 0;\n-      S : String (1 .. Long_Long_Float'Width);\n+      pragma Assert (S'First = 1);\n \n    begin\n+      --  Output space at start if non-negative\n+\n       if V >= 0.0 then\n          S (1) := ' ';\n          P := 1;\n+      else\n+         P := 0;\n       end if;\n \n       Set_Image_Real (V, S, P, 1, Aft, 0);\n-      return S (1 .. P);\n    end Image_Ordinary_Fixed_Point;\n \n    --------------------"}, {"sha": "e00b78a69e812c59f4b8999536262fb392532946", "filename": "gcc/ada/s-imgrea.ads", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,25 +34,31 @@\n --  Image for fixed and float types (also used for Float_IO/Fixed_IO output)\n \n package System.Img_Real is\n-   pragma Preelaborate;\n+   pragma Pure;\n \n-   function Image_Ordinary_Fixed_Point\n-     (V    : Long_Long_Float;\n-      Aft  : Natural)\n-      return String;\n-   --  Computes the image of V and returns the result according to the rules\n-   --  for image for fixed-point types (RM 3.5(34)), where Aft is the value of\n-   --  the Aft attribute for the fixed-point type. This function is used only\n-   --  for ordinary fixed point (see package System.Img_Dec for handling of\n-   --  decimal fixed-point).\n+   procedure Image_Ordinary_Fixed_Point\n+     (V   : Long_Long_Float;\n+      S   : in out String;\n+      P   : out Natural;\n+      Aft : Natural);\n+   --  Computes fixed_type'Image (V) and returns the result in S (1 .. P)\n+   --  updating P on return. The result is computed according to the rules for\n+   --  image for fixed-point types (RM 3.5(34)), where Aft is the value of the\n+   --  Aft attribute for the fixed-point type. This function is used only for\n+   --  ordinary fixed point (see package System.Img_Dec for handling of decimal\n+   --  fixed-point). The caller guarantees that S is long enough to hold the\n+   --  result and has a lower bound of 1.\n \n-   function Image_Floating_Point\n+   procedure Image_Floating_Point\n      (V    : Long_Long_Float;\n-      Digs : Natural)\n-      return String;\n-   --  Computes the image of V and returns the result according to the rules\n-   --  for image for foating-point types (RM 3.5(33)), where Digs is the value\n-   --  of the Digits attribute for the floating-point type.\n+      S    : in out String;\n+      P    : out Natural;\n+      Digs : Natural);\n+   --  Computes fixed_type'Image (V) and returns the result in S (1 .. P)\n+   --  updating P on return. The result is computed according to the rules for\n+   --  image for floating-point types (RM 3.5(33)), where Digs is the value of\n+   --  the Digits attribute for the floating-point type. The caller guarantees\n+   --  that S is long enough to hold the result and has a lower bound of 1.\n \n    procedure Set_Image_Real\n      (V    : Long_Long_Float;\n@@ -66,6 +72,7 @@ package System.Img_Real is\n    --  enough and no check is made for this. Constraint_Error will not\n    --  necessarily be raised if this is violated, since it is perfectly valid\n    --  to compile this unit with checks off). The Fore, Aft and Exp values\n-   --  can be set to any valid values for the case of use from Text_IO.\n+   --  can be set to any valid values for the case of use from Text_IO. Note\n+   --  that no space is stored at the start for non-negative values.\n \n end System.Img_Real;"}, {"sha": "0630af11a26fc74e9e8bebfbc30b28b4440e3a89", "filename": "gcc/ada/s-imguns.adb", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imguns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imguns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,18 +39,16 @@ package body System.Img_Uns is\n    -- Image_Unsigned --\n    --------------------\n \n-   function Image_Unsigned\n-     (V    : Unsigned)\n-      return String\n+   procedure Image_Unsigned\n+     (V : System.Unsigned_Types.Unsigned;\n+      S : in out String;\n+      P : out Natural)\n    is\n-      P : Natural;\n-      S : String (1 .. Unsigned'Width);\n-\n+      pragma Assert (S'First = 1);\n    begin\n+      S (1) := ' ';\n       P := 1;\n-      S (P) := ' ';\n       Set_Image_Unsigned (V, S, P);\n-      return S (1 .. P);\n    end Image_Unsigned;\n \n    ------------------------\n@@ -59,12 +57,16 @@ package body System.Img_Uns is\n \n    procedure Set_Image_Unsigned\n      (V : Unsigned;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural)\n    is\n       procedure Set_Digits (T : Unsigned);\n       --  Set decimal digits of value of T\n \n+      ----------------\n+      -- Set_Digits --\n+      ----------------\n+\n       procedure Set_Digits (T : Unsigned) is\n       begin\n          if T >= 10 then\n@@ -82,7 +84,6 @@ package body System.Img_Uns is\n \n    begin\n       Set_Digits (V);\n-\n    end Set_Image_Unsigned;\n \n end System.Img_Uns;"}, {"sha": "6ed50e22b7307afe3d46f8fb35b134c7b55bb729", "filename": "gcc/ada/s-imguns.ads", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imguns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imguns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -40,20 +40,23 @@ with System.Unsigned_Types;\n package System.Img_Uns is\n    pragma Pure;\n \n-   function Image_Unsigned\n-     (V    : System.Unsigned_Types.Unsigned)\n-      return String;\n-   --  Computes Unsigned'Image (V) and returns the result\n+   procedure Image_Unsigned\n+     (V : System.Unsigned_Types.Unsigned;\n+      S : in out String;\n+      P : out Natural);\n+   pragma Inline (Image_Unsigned);\n+   --  Computes Unsigned'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S\n+   --  is long enough to hold the result, and that S'First is 1.\n \n    procedure Set_Image_Unsigned\n      (V : System.Unsigned_Types.Unsigned;\n-      S : out String;\n+      S : in out String;\n       P : in out Natural);\n-   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n-   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n-   --  to point to the last character stored. The caller promises that the\n-   --  buffer is large enough and no check is made for this (Constraint_Error\n-   --  will not be necessarily raised if this is violated since it is perfectly\n-   --  valid to compile this unit with checks off).\n+   --  Stores the image of V in S starting at S (P + 1), P is updated to point\n+   --  to the last character stored. The value stored is identical to the value\n+   --  of Unsigned'Image (V) except that no leading space is stored. The caller\n+   --  guarantees that S is long enough to hold the result. S need not have a\n+   --  lower bound of 1.\n \n end System.Img_Uns;"}, {"sha": "74e3803b4e135edd75eea84504d152e70ac3461c", "filename": "gcc/ada/s-imgwch.adb", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.adb?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,60 +41,71 @@ package body System.Img_WChar is\n    -- Image_Wide_Character --\n    --------------------------\n \n-   function Image_Wide_Character\n+   procedure Image_Wide_Character\n      (V        : Wide_Character;\n-      Ada_2005 : Boolean) return String\n+      S        : in out String;\n+      P        : out Natural;\n+      Ada_2005 : Boolean)\n    is\n+      pragma Assert (S'First = 1);\n+\n    begin\n       --  Annoying Ada 95 incompatibility with FFFE/FFFF\n \n       if V >= Wide_Character'Val (16#FFFE#)\n         and then not Ada_2005\n       then\n          if V = Wide_Character'Val (16#FFFE#) then\n-            return \"FFFE\";\n+            S (1 .. 4) := \"FFFE\";\n          else\n-            return \"FFFF\";\n+            S (1 .. 4) := \"FFFF\";\n          end if;\n-      end if;\n+\n+         P := 4;\n \n       --  Normal case, same as Wide_Wide_Character\n \n-      return\n-        Image_Wide_Wide_Character\n-          (Wide_Wide_Character'Val (Wide_Character'Pos (V)));\n+      else\n+         Image_Wide_Wide_Character\n+           (Wide_Wide_Character'Val (Wide_Character'Pos (V)), S, P);\n+      end if;\n    end Image_Wide_Character;\n \n    -------------------------------\n    -- Image_Wide_Wide_Character --\n    -------------------------------\n \n-   function Image_Wide_Wide_Character\n-     (V : Wide_Wide_Character) return String\n+   procedure Image_Wide_Wide_Character\n+     (V : Wide_Wide_Character;\n+      S : in out String;\n+      P : out Natural)\n    is\n+      pragma Assert (S'First = 1);\n+\n       Val : Unsigned_32 := Wide_Wide_Character'Pos (V);\n \n    begin\n       --  If in range of standard Character, use Character routine\n \n       if Val <= 16#FF# then\n-         return Image_Character (Character'Val (Wide_Wide_Character'Pos (V)));\n+         Image_Character (Character'Val (Wide_Wide_Character'Pos (V)), S, P);\n \n       --  Otherwise value returned is Hex_hhhhhhhh\n \n       else\n          declare\n-            Result : String (1 .. 12) := \"Hex_hhhhhhhh\";\n-            Hex    : constant array (Unsigned_32 range 0 .. 15) of Character :=\n-                       \"0123456789ABCDEF\";\n+            Hex : constant array (Unsigned_32 range 0 .. 15) of Character :=\n+                    \"0123456789ABCDEF\";\n \n          begin\n+            S (1 .. 4) := \"Hex_\";\n+\n             for J in reverse 5 .. 12 loop\n-               Result (J) := Hex (Val mod 16);\n+               S (J) := Hex (Val mod 16);\n                Val := Val / 16;\n             end loop;\n \n-            return Result;\n+            P := 12;\n          end;\n       end if;\n    end Image_Wide_Wide_Character;"}, {"sha": "17e717f4f02f7c23241e0ead031c2ecdae3c7044", "filename": "gcc/ada/s-imgwch.ads", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgwch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b18343996b7145c23191fb574b3fae3e845d8d/gcc%2Fada%2Fs-imgwch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.ads?ref=01b18343996b7145c23191fb574b3fae3e845d8d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,14 +36,23 @@\n package System.Img_WChar is\n    pragma Pure;\n \n-   function Image_Wide_Character\n+   procedure Image_Wide_Character\n      (V        : Wide_Character;\n-      Ada_2005 : Boolean) return String;\n-   --  Computes Wide_Character'Image (V) and returns the computed result. The\n-   --  parameter Ada_2005 is True if operating in Ada 2005 mode (or beyond).\n-   --  This is needed for the annoying FFFE/FFFF incompatibility.\n+      S        : in out String;\n+      P        : out Natural;\n+      Ada_2005 : Boolean);\n+   --  Computes Wide_Character'Image (V) and stores the result in S (1 .. P)\n+   --  setting the resulting value of P. The caller guarantees that S is long\n+   --  enough to hold the result, and that S'First is 1. The parameter Ada_2005\n+   --  is True if operating in Ada 2005 mode (or beyond). This is required to\n+   --  deal with the annoying FFFE/FFFF incompatibility.\n \n-   function Image_Wide_Wide_Character (V : Wide_Wide_Character) return String;\n-   --  Computes Wide_Wide_Character'Image (V) and returns the computed result\n+   procedure Image_Wide_Wide_Character\n+     (V : Wide_Wide_Character;\n+      S : in out String;\n+      P : out Natural);\n+   --  Computes Wide_Wide_Character'Image (V) and stores the result in\n+   --  S (1 .. P) setting the resulting value of P. The caller guarantees\n+   --  that S is long enough to hold the result, and that S'First is 1.\n \n end System.Img_WChar;"}]}