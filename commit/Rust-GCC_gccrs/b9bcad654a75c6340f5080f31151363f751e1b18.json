{"sha": "b9bcad654a75c6340f5080f31151363f751e1b18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliY2FkNjU0YTc1YzYzNDBmNTA4MGYzMTE1MTM2M2Y3NTFlMWIxOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-10T23:19:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-10T23:19:32Z"}, "message": "(convert_move): Add TImode conversions.\n\nFrom-SVN: r8248", "tree": {"sha": "7f2b3bcf3080b9a738ceb3618c575f04bdedff1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2b3bcf3080b9a738ceb3618c575f04bdedff1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9bcad654a75c6340f5080f31151363f751e1b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bcad654a75c6340f5080f31151363f751e1b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9bcad654a75c6340f5080f31151363f751e1b18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bcad654a75c6340f5080f31151363f751e1b18/comments", "author": null, "committer": null, "parents": [{"sha": "a93738eb45d6c0fc40f067bb6b23346602a2d7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93738eb45d6c0fc40f067bb6b23346602a2d7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93738eb45d6c0fc40f067bb6b23346602a2d7d0"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "364789d9ffc8c8c90eb226249ee9aa740aa73d98", "filename": "gcc/expr.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9bcad654a75c6340f5080f31151363f751e1b18/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9bcad654a75c6340f5080f31151363f751e1b18/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b9bcad654a75c6340f5080f31151363f751e1b18", "patch": "@@ -1199,6 +1199,58 @@ convert_move (to, from, unsignedp)\n       return;\n     }\n \n+  if (from_mode == TImode && to_mode == DImode)\n+    {\n+#ifdef HAVE_trunctidi2\n+      if (HAVE_trunctidi2)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctidi2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+      convert_move (to, force_reg (from_mode, from), unsignedp);\n+      return;\n+    }\n+\n+  if (from_mode == TImode && to_mode == SImode)\n+    {\n+#ifdef HAVE_trunctisi2\n+      if (HAVE_trunctisi2)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctisi2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+      convert_move (to, force_reg (from_mode, from), unsignedp);\n+      return;\n+    }\n+\n+  if (from_mode == TImode && to_mode == HImode)\n+    {\n+#ifdef HAVE_trunctihi2\n+      if (HAVE_trunctihi2)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctihi2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+      convert_move (to, force_reg (from_mode, from), unsignedp);\n+      return;\n+    }\n+\n+  if (from_mode == TImode && to_mode == QImode)\n+    {\n+#ifdef HAVE_trunctiqi2\n+      if (HAVE_trunctiqi2)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctiqi2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+      convert_move (to, force_reg (from_mode, from), unsignedp);\n+      return;\n+    }\n+\n   /* Handle truncation of volatile memrefs, and so on;\n      the things that couldn't be truncated directly,\n      and for which there was no special instruction.  */"}]}