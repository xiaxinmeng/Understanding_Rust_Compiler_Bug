{"sha": "1afac9a69f639e50d22c95acd976b53d47c56e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmYWM5YTY5ZjYzOWU1MGQyMmM5NWFjZDk3NmI1M2Q0N2M1NmU0ZQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2008-11-19T11:23:28Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2008-11-19T11:23:28Z"}, "message": "re PR target/36133 (GCC creates suboptimal ASM : Code includes unneeded TST instructions)\n\n2008-11-19  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\tPR target/36133\n\t* config/m68k/m68k.h (CC_OVERFLOW_UNUSABLE, CC_NO_CARRY): New defines.\n\t* config/m68k/m68k.c (notice_update_cc): Set cc_status properly for\n\tshift instructions.\n\t* config/m68k/m68k.md: Adjust all conditional branches that use the\n\tcarry and overflow flags so they understand CC_OVERFLOW_UNUSABLE.\n\n\tgcc/testsuite/\n\tPR target/36133\n\t* gcc.target/m68k/pr36133.c: New test.\n\nFrom-SVN: r141999", "tree": {"sha": "c894bb0de477cec1ca92e541e6bdb51c66a85e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c894bb0de477cec1ca92e541e6bdb51c66a85e1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1afac9a69f639e50d22c95acd976b53d47c56e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afac9a69f639e50d22c95acd976b53d47c56e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afac9a69f639e50d22c95acd976b53d47c56e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afac9a69f639e50d22c95acd976b53d47c56e4e/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "681afbeab6890b13f6df9f44220961de690a3c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681afbeab6890b13f6df9f44220961de690a3c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681afbeab6890b13f6df9f44220961de690a3c31"}], "stats": {"total": 170, "additions": 159, "deletions": 11}, "files": [{"sha": "c1973fa52254ca995252dc73b9b8333d18c90760", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -1,3 +1,12 @@\n+2008-11-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/36133\n+\t* config/m68k/m68k.h (CC_OVERFLOW_UNUSABLE, CC_NO_CARRY): New defines.\n+\t* config/m68k/m68k.c (notice_update_cc): Set cc_status properly for\n+\tshift instructions.\n+\t* config/m68k/m68k.md: Adjust all conditional branches that use the\n+\tcarry and overflow flags so they understand CC_OVERFLOW_UNUSABLE.\n+\n 2008-11-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/37362"}, {"sha": "d8cc370262c9b40cf1bd1825d5f84b8ce4f5db40", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -3605,9 +3605,7 @@ notice_update_cc (rtx exp, rtx insn)\n       case ROTATE: case ROTATERT:\n \t/* These instructions always clear the overflow bit, and set\n \t   the carry to the bit shifted out.  */\n-\t/* ??? We don't currently have a way to signal carry not valid,\n-\t   nor do we check for it in the branch insns.  */\n-\tCC_STATUS_INIT;\n+\tcc_status.flags |= CC_OVERFLOW_UNUSABLE | CC_NO_CARRY;\n \tbreak;\n \n       case PLUS: case MINUS: case MULT:"}, {"sha": "8c0f4f20ed9d3b57d4e9079bbd17c29395e2c78c", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -855,6 +855,14 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    some or all of the saved cc's so they won't be used.  */\n #define NOTICE_UPDATE_CC(EXP,INSN) notice_update_cc (EXP, INSN)\n \n+/* The shift instructions always clear the overflow bit.  */\n+#define CC_OVERFLOW_UNUSABLE 01000\n+\n+/* The shift instructions use the carry bit in a way not compatible with\n+   conditional branches.  conditions.h uses CC_NO_OVERFLOW for this purpose.\n+   Rename it to something more understandable.  */\n+#define CC_NO_CARRY CC_NO_OVERFLOW\n+\n #define OUTPUT_JUMP(NORMAL, FLOAT, NO_OV)  \\\n do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n     return FLOAT;\t\t\t\t\t\t\\"}, {"sha": "75f36dcc89617e72355a6c46a3e0450dad78d8c9", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 120, "deletions": 8, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -6371,6 +6371,12 @@\n \t\t      (pc)))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jgt %l0\", \"fjgt %l0\", 0);\n }\n   [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n@@ -6382,7 +6388,15 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"jhi %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jhi %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"blt\"\n@@ -6393,6 +6407,12 @@\n \t\t      (pc)))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jlt %l0\", \"fjlt %l0\", \"jmi %l0\");\n }\n   [(set (attr \"type\") (symbol_ref \"m68k_sched_branch_type (insn)\"))])\n@@ -6404,7 +6424,15 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"jcs %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jcs %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bge\"\n@@ -6415,6 +6443,12 @@\n \t\t      (pc)))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jge %l0\", \"fjge %l0\", \"jpl %l0\");\n })\n \n@@ -6425,7 +6459,15 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"jcc %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jcc %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"ble\"\n@@ -6436,6 +6478,12 @@\n \t\t      (pc)))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jle %l0\", \"fjle %l0\", 0);\n }\n   [(set_attr \"type\" \"bcc\")])\n@@ -6447,7 +6495,15 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"jls %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jls %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"bordered\"\n@@ -6580,6 +6636,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jle %l0\", \"fjngt %l0\", 0);\n }\n   [(set_attr \"type\" \"bcc\")])\n@@ -6591,7 +6653,15 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"jls %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jls %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"*blt_rev\"\n@@ -6602,6 +6672,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jge %l0\", \"fjnlt %l0\", \"jpl %l0\");\n }\n   [(set_attr \"type\" \"bcc\")])\n@@ -6613,7 +6689,15 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"jcc %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jcc %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"*bge_rev\"\n@@ -6624,6 +6708,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jlt %l0\", \"fjnge %l0\", \"jmi %l0\");\n }\n   [(set_attr \"type\" \"bcc\")])\n@@ -6635,7 +6725,15 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"jcs %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jcs %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"*ble_rev\"\n@@ -6646,6 +6744,12 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n {\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n   OUTPUT_JUMP (\"jgt %l0\", \"fjnle %l0\", 0);\n }\n   [(set_attr \"type\" \"bcc\")])\n@@ -6657,7 +6761,15 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"jhi %l0\"\n+{\n+  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0)\n+    {\n+      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n+      return 0;\n+    }\n+\n+  return \"jhi %l0\";\n+}\n   [(set_attr \"type\" \"bcc\")])\n \n (define_insn \"*bordered_rev\""}, {"sha": "354eda68cc10cd67b55c1e1a72665a31ea73cd0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -1,3 +1,8 @@\n+2008-11-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/36133\n+\t* gcc.target/m68k/pr36133.c: New test.\n+\n 2008-11-19  Maxim Kuvyrkov  <maxim@codesourcery.com>\n   \n  \t* gcc.gd/struct/wo_prof_global_var.c: Use uninitialized integer"}, {"sha": "25237a860502fcc943d02c6314c4fe76eb6e1a43", "filename": "gcc/testsuite/gcc.target/m68k/pr36133.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36133.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afac9a69f639e50d22c95acd976b53d47c56e4e/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36133.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36133.c?ref=1afac9a69f639e50d22c95acd976b53d47c56e4e", "patch": "@@ -0,0 +1,16 @@\n+/* pr36133.c\n+\n+   This test ensures that conditional branches can use the condition codes\n+   written by shift instructions, without the need for an extra TST.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-not \"tst\" } } */\n+\n+void\n+f (unsigned int a)\n+{\n+  if (a >> 4)\n+    asm volatile (\"nop\");\n+  asm volatile (\"nop\");\n+}"}]}