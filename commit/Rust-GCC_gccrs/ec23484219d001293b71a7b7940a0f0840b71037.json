{"sha": "ec23484219d001293b71a7b7940a0f0840b71037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyMzQ4NDIxOWQwMDEyOTNiNzFhN2I3OTQwYTBmMDg0MGI3MTAzNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-01T23:23:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-01T23:23:33Z"}, "message": "gimplify.c (gimplify_compound_lval): Use VEC instead of VARRAY.\n\n\t* gimplify.c (gimplify_compound_lval): Use VEC instead of\n\tVARRAY.\n\nFrom-SVN: r99083", "tree": {"sha": "86d3b1d4943158ce6660ec5580b841a5668e9ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d3b1d4943158ce6660ec5580b841a5668e9ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec23484219d001293b71a7b7940a0f0840b71037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23484219d001293b71a7b7940a0f0840b71037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23484219d001293b71a7b7940a0f0840b71037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23484219d001293b71a7b7940a0f0840b71037/comments", "author": null, "committer": null, "parents": [{"sha": "05d475bf2143469ea3472ad5d31f646c6cb53e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d475bf2143469ea3472ad5d31f646c6cb53e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d475bf2143469ea3472ad5d31f646c6cb53e52"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "50905acfd44a1cade347a2a2f1930abdc579cff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23484219d001293b71a7b7940a0f0840b71037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23484219d001293b71a7b7940a0f0840b71037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec23484219d001293b71a7b7940a0f0840b71037", "patch": "@@ -1,3 +1,8 @@\n+2005-05-01  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gimplify.c (gimplify_compound_lval): Use VEC instead of\n+\tVARRAY.\n+\n 2005-05-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR C++/14391"}, {"sha": "1b91b186d6e8af27a77463f2ffd0b34996374c2c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23484219d001293b71a7b7940a0f0840b71037/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23484219d001293b71a7b7940a0f0840b71037/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ec23484219d001293b71a7b7940a0f0840b71037", "patch": "@@ -1421,16 +1421,13 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t\t\ttree *post_p, fallback_t fallback)\n {\n   tree *p;\n-  varray_type stack;\n+  VEC(tree,heap) *stack;\n   enum gimplify_status ret = GS_OK, tret;\n   int i;\n \n   /* Create a stack of the subexpressions so later we can walk them in\n-     order from inner to outer.\n-\n-     This array is very memory consuming.  Don't even think of making\n-     it VARRAY_TREE.  */\n-  VARRAY_GENERIC_PTR_NOGC_INIT (stack, 10, \"stack\");\n+     order from inner to outer.  */\n+  stack = VEC_alloc (tree, heap, 10);\n \n   /* We can handle anything that get_inner_reference can deal with.  */\n   for (p = expr_p; ; p = &TREE_OPERAND (*p, 0))\n@@ -1440,10 +1437,10 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t*p = fold_indirect_ref (*p);\n       if (!handled_component_p (*p))\n \tbreak;\n-      VARRAY_PUSH_GENERIC_PTR_NOGC (stack, *p);\n+      VEC_safe_push (tree, heap, stack, *p);\n     }\n \n-  gcc_assert (VARRAY_ACTIVE_SIZE (stack));\n+  gcc_assert (VEC_length (tree, stack));\n \n   /* Now STACK is a stack of pointers to all the refs we've walked through\n      and P points to the innermost expression.\n@@ -1457,9 +1454,9 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n      So we do this in three steps.  First we deal with the annotations\n      for any variables in the components, then we gimplify the base,\n      then we gimplify any indices, from left to right.  */\n-  for (i = VARRAY_ACTIVE_SIZE (stack) - 1; i >= 0; i--)\n+  for (i = VEC_length (tree, stack) - 1; i >= 0; i--)\n     {\n-      tree t = VARRAY_GENERIC_PTR_NOGC (stack, i);\n+      tree t = VEC_index (tree, stack, i);\n \n       if (TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)\n \t{\n@@ -1527,9 +1524,9 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \n   /* And finally, the indices and operands to BIT_FIELD_REF.  During this\n      loop we also remove any useless conversions.  */\n-  for (; VARRAY_ACTIVE_SIZE (stack) > 0; )\n+  for (; VEC_length (tree, stack) > 0; )\n     {\n-      tree t = VARRAY_TOP_TREE (stack);\n+      tree t = VEC_pop (tree, stack);\n \n       if (TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)\n \t{\n@@ -1565,7 +1562,6 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t set which would have caused all the outer expressions in EXPR_P\n \t leading to P to also have had TREE_SIDE_EFFECTS set.  */\n       recalculate_side_effects (t);\n-      VARRAY_POP (stack);\n     }\n \n   tret = gimplify_expr (p, pre_p, post_p, is_gimple_min_lval, fallback);\n@@ -1578,7 +1574,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n       ret = MIN (ret, GS_OK);\n     }\n \n-  VARRAY_FREE (stack);\n+  VEC_free (tree, heap, stack);\n \n   return ret;\n }"}]}