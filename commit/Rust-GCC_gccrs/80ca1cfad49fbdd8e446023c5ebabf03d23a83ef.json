{"sha": "80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjYTFjZmFkNDlmYmRkOGU0NDYwMjNjNWViYWJmMDNkMjNhODNlZg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:50:15Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:50:15Z"}, "message": "re PR tree-optimization/53090 (suboptimal ivopt)\n\n\tPR tree-optimization/53090\n\t* tree-ssa-loop-ivopts.c (enum comp_iv_rewrite): New enum value\n\tCOMP_IV_EXPR_2.\n\t(extract_cond_operands): Detect condition with IV on both sides\n\tand return COMP_IV_EXPR_2.\n\t(find_interesting_uses_cond): Add iv_use for both IVs in condition.\n\t(rewrite_use_compare): Simplify by removing call to function\n\textract_cond_operands.\n\nFrom-SVN: r247893", "tree": {"sha": "d4dab1683fafa66b12a8b0e092a001462109e1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4dab1683fafa66b12a8b0e092a001462109e1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef/comments", "author": null, "committer": null, "parents": [{"sha": "b6a2258fda637660ece6705cf19e4f7ef6674df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a2258fda637660ece6705cf19e4f7ef6674df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a2258fda637660ece6705cf19e4f7ef6674df8"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "55cc30f12aa14fc61b28479c9056a2e3f3f266d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "patch": "@@ -1,3 +1,14 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/53090\n+\t* tree-ssa-loop-ivopts.c (enum comp_iv_rewrite): New enum value\n+\tCOMP_IV_EXPR_2.\n+\t(extract_cond_operands): Detect condition with IV on both sides\n+\tand return COMP_IV_EXPR_2.\n+\t(find_interesting_uses_cond): Add iv_use for both IVs in condition.\n+\t(rewrite_use_compare): Simplify by removing call to function\n+\textract_cond_operands.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (enum comp_iv_rewrite): New."}, {"sha": "7e6fc4c2cd75f2b3f7e217d8786cbd3b4aaf3ac4", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca1cfad49fbdd8e446023c5ebabf03d23a83ef/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=80ca1cfad49fbdd8e446023c5ebabf03d23a83ef", "patch": "@@ -1653,6 +1653,9 @@ enum comp_iv_rewrite\n   COMP_IV_NA,\n   /* We may rewrite compare type iv_use by expressing value of the iv_use.  */\n   COMP_IV_EXPR,\n+  /* We may rewrite compare type iv_uses on both sides of comparison by\n+     expressing value of each iv_use.  */\n+  COMP_IV_EXPR_2,\n   /* We may rewrite compare type iv_use by expressing value of the iv_use\n      or by eliminating it with other iv_cand.  */\n   COMP_IV_ELIM\n@@ -1698,9 +1701,12 @@ extract_cond_operands (struct ivopts_data *data, gimple *stmt,\n   if (TREE_CODE (*op1) == SSA_NAME)\n     iv1 = get_iv (data, *op1);\n \n-  /* If both sides of comparison are IVs.  */\n+  /* If both sides of comparison are IVs.  We can express ivs on both end.  */\n   if (iv0 && iv1 && !integer_zerop (iv0->step) && !integer_zerop (iv1->step))\n-    goto end;\n+    {\n+      rewrite_type = COMP_IV_EXPR_2;\n+      goto end;\n+    }\n \n   /* If none side of comparison is IV.  */\n   if ((!iv0 || integer_zerop (iv0->step))\n@@ -1740,10 +1746,11 @@ static void\n find_interesting_uses_cond (struct ivopts_data *data, gimple *stmt)\n {\n   tree *var_p, *bound_p;\n-  struct iv *var_iv;\n+  struct iv *var_iv, *bound_iv;\n   enum comp_iv_rewrite ret;\n \n-  ret = extract_cond_operands (data, stmt, &var_p, &bound_p, &var_iv, NULL);\n+  ret = extract_cond_operands (data, stmt,\n+\t\t\t       &var_p, &bound_p, &var_iv, &bound_iv);\n   if (ret == COMP_IV_NA)\n     {\n       find_interesting_uses_op (data, *var_p);\n@@ -1752,6 +1759,9 @@ find_interesting_uses_cond (struct ivopts_data *data, gimple *stmt)\n     }\n \n   record_group_use (data, var_p, var_iv, stmt, USE_COMPARE);\n+  /* Record compare type iv_use for iv on the other side of comparison.  */\n+  if (ret == COMP_IV_EXPR_2)\n+    record_group_use (data, bound_p, bound_iv, stmt, USE_COMPARE);\n }\n \n /* Returns the outermost loop EXPR is obviously invariant in\n@@ -6953,12 +6963,11 @@ static void\n rewrite_use_compare (struct ivopts_data *data,\n \t\t     struct iv_use *use, struct iv_cand *cand)\n {\n-  tree comp, *var_p, op, bound;\n+  tree comp, op, bound;\n   gimple_stmt_iterator bsi = gsi_for_stmt (use->stmt);\n   enum tree_code compare;\n   struct iv_group *group = data->vgroups[use->group_id];\n   struct cost_pair *cp = get_group_iv_cost (data, group, cand);\n-  enum comp_iv_rewrite rewrite_type;\n \n   bound = cp->value;\n   if (bound)\n@@ -6991,13 +7000,10 @@ rewrite_use_compare (struct ivopts_data *data,\n      giv.  */\n   comp = get_computation_at (data->current_loop, use->stmt, use, cand);\n   gcc_assert (comp != NULL_TREE);\n-\n-  rewrite_type = extract_cond_operands (data, use->stmt,\n-\t\t\t\t\t&var_p, NULL, NULL, NULL);\n-  gcc_assert (rewrite_type != COMP_IV_NA);\n-\n-  *var_p = force_gimple_operand_gsi (&bsi, comp, true, SSA_NAME_VAR (*var_p),\n-\t\t\t\t     true, GSI_SAME_STMT);\n+  gcc_assert (use->op_p != NULL);\n+  *use->op_p = force_gimple_operand_gsi (&bsi, comp, true,\n+\t\t\t\t\t SSA_NAME_VAR (*use->op_p),\n+\t\t\t\t\t true, GSI_SAME_STMT);\n }\n \n /* Rewrite the groups using the selected induction variables.  */"}]}