{"sha": "ef6e958a8611ff372211d0fd3cd9659614583bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2ZTk1OGE4NjExZmYzNzIyMTFkMGZkM2NkOTY1OTYxNDU4M2JiNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@cat.daikokuya.demon.co.uk", "date": "2001-08-04T12:01:59Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-08-04T12:01:59Z"}, "message": "Makefile.in (CPPLIB_H): New, so that dependencies on cpplib.h are also on line-map.h.\n\n\t* Makefile.in (CPPLIB_H): New, so that dependencies on cpplib.h\n\tare also on line-map.h.\n\t* cppfiles.c (stack_include_file): Update.\n\t* cpphash.h (struct cpp_buffer): New member return_at_eof.\n\t(_cpp_pop_buffer): New.\n\t* cppinit.c (cpp_destroy, cpp_finish): Update.\n\t(do_includes): Mark each buffer to return at EOF.\n\t* cpplex.c (_cpp_lex_token): Pop buffers at EOF.  Continue or\n\treturn as requested.\n\t* cpplib.c (run_directive, do_line, cpp_push_buffer): Update.\n\t(cpp_pop_buffer): Rename _cpp_pop_buffer.  Stop skipping.\n\t* cpplib.h (cpp_pop_buffer): Remove.\n\t(cpp_scan_buffer_nooutput): Rename cpp_scan_nooutput.\n\t* cppmacro.c (cpp_scan_buffer_nooutput): Similarly.  No need to pop\n\tbuffers.\n\t* cppmain.c (scan_buffer): Rename scan_translation_unit.  No need\n\tto pop buffers.\n\t(do_preprocessing): Update.\n\t* fix-header.c (read_scan_file): Update.  No need to pop buffers.\n\t* c-parse.in (_yylex): Similarly.\n\t* scan-decls.c (scan_decls): Similarly.\n\t* line-map.h: Update comments.\n\n\t* cp/spew.c (read_token): No need to pop buffers.\n\n\t* objc/Make-lang.in (objc-act.o): Update dependencies.\n\nFrom-SVN: r44634", "tree": {"sha": "0aaaf48e2153d5621bc68cb09f9c0d2ef9a3854a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aaaf48e2153d5621bc68cb09f9c0d2ef9a3854a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6e958a8611ff372211d0fd3cd9659614583bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6e958a8611ff372211d0fd3cd9659614583bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6e958a8611ff372211d0fd3cd9659614583bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6e958a8611ff372211d0fd3cd9659614583bb4/comments", "author": null, "committer": null, "parents": [{"sha": "03997728b499f76a20356705aa4d05d808ab9c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03997728b499f76a20356705aa4d05d808ab9c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03997728b499f76a20356705aa4d05d808ab9c3c"}], "stats": {"total": 236, "additions": 135, "deletions": 101}, "files": [{"sha": "70d31306d890c1ce4d28062fdbe733f2da25c465", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -1,3 +1,30 @@\n+2001-08-04  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (CPPLIB_H): New, so that dependencies on cpplib.h\n+\tare also on line-map.h.\n+\t* cppfiles.c (stack_include_file): Update.\n+\t* cpphash.h (struct cpp_buffer): New member return_at_eof.\n+\t(_cpp_pop_buffer): New.\n+\t* cppinit.c (cpp_destroy, cpp_finish): Update.\n+\t(do_includes): Mark each buffer to return at EOF.\n+\t* cpplex.c (_cpp_lex_token): Pop buffers at EOF.  Continue or\n+\treturn as requested.\n+\t* cpplib.c (run_directive, do_line, cpp_push_buffer): Update.\n+\t(cpp_pop_buffer): Rename _cpp_pop_buffer.  Stop skipping.\n+\t* cpplib.h (cpp_pop_buffer): Remove.\n+\t(cpp_scan_buffer_nooutput): Rename cpp_scan_nooutput.\n+\t* cppmacro.c (cpp_scan_buffer_nooutput): Similarly.  No need to pop\n+\tbuffers.\n+\t* cppmain.c (scan_buffer): Rename scan_translation_unit.  No need\n+\tto pop buffers.\n+\t(do_preprocessing): Update.\n+\t* fix-header.c (read_scan_file): Update.  No need to pop buffers.\n+\t* c-parse.in (_yylex): Similarly.\n+\t* scan-decls.c (scan_decls): Similarly.\n+\t* line-map.h: Update comments.\n+\n+\t* objc/Make-lang.in (objc-act.o): Update dependencies.\n+\n 2001-08-04  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (\"cmphi_1\", \"cmpqi_1\"): Allow memory "}, {"sha": "9b8bc19f0a82fbb629c1ab6097af322410b8de5b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -579,6 +579,7 @@ C_COMMON_H = c-common.h $(SPLAY_TREE_H)\n C_TREE_H = c-tree.h $(C_COMMON_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h\n PREDICT_H = predict.h predict.def\n+CPPLIB_H = cpplib.h line-map.h\n \n # sed inserts variable overrides after the following line.\n ####target overrides\n@@ -1152,7 +1153,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) flags.h \\\n     diagnostic.h $(TM_P_H)\n c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h $(GGC_H) intl.h \\\n-    $(C_TREE_H) input.h flags.h $(SYSTEM_H) toplev.h output.h cpplib.h \\\n+    $(C_TREE_H) input.h flags.h $(SYSTEM_H) toplev.h output.h $(CPPLIB_H) \\\n     diagnostic.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n \n@@ -1177,7 +1178,7 @@ c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n     debug.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n-    mbchar.h cpplib.h $(EXPR_H) $(TM_P_H)\n+    mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h toplev.h\n@@ -1937,7 +1938,7 @@ LIBCPP_OBJS =\tcpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o \\\n \t\tcpphash.o cpperror.o cppinit.o cppdefault.o \\\n \t\thashtable.o line-map.o mkdeps.o prefix.o version.o mbchar.o\n \n-LIBCPP_DEPS =\tcpplib.h cpphash.h line-map.h hashtable.h intl.h \\\n+LIBCPP_DEPS =\t$(CPPLIB_H) cpphash.h line-map.h hashtable.h intl.h \\\n \t\t$(OBSTACK_H) $(SYSTEM_H)\n \n # Most of the other archives built/used by this makefile are for\n@@ -1951,7 +1952,7 @@ cpp0$(exeext): cppmain.o intl.o libcpp.a $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cpp0$(exeext) cppmain.o \\\n \tintl.o libcpp.a $(LIBS)\n \n-cppmain.o:  cppmain.c  $(CONFIG_H) cpplib.h intl.h $(SYSTEM_H)\n+cppmain.o:  cppmain.c  $(CONFIG_H) $(CPPLIB_H) intl.h $(SYSTEM_H)\n \n cpperror.o: cpperror.c $(CONFIG_H) $(LIBCPP_DEPS)\n cppexp.o:   cppexp.c   $(CONFIG_H) $(LIBCPP_DEPS)\n@@ -2194,10 +2195,10 @@ fix-header$(build_exeext): fix-header.o scan-decls.o scan.o xsys-protos.h \\\n \t   scan-decls.o scan.o libcpp.a $(LIBS)\n \n fix-header.o: fix-header.c $(OBSTACK_H) scan.h \\\n-\txsys-protos.h $(HCONFIG_H) $(SYSTEM_H) cpplib.h\n+\txsys-protos.h $(HCONFIG_H) $(SYSTEM_H) $(CPPLIB_H)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/fix-header.c\n \n-scan-decls.o: scan-decls.c scan.h cpplib.h $(HCONFIG_H) $(SYSTEM_H)\n+scan-decls.o: scan-decls.c scan.h $(CPPLIB_H) $(HCONFIG_H) $(SYSTEM_H)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan-decls.c\n \n # stmp-fixproto depends on this, not on fix-header directly."}, {"sha": "801a265404ce0b325df7e00ab3839174c3783900", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -3767,9 +3767,7 @@ _yylex ()\n     case CPP_SEMICOLON:\t\tOBJC_NEED_RAW_IDENTIFIER (0);\treturn ';';\n \n     case CPP_EOF:\n-      if (cpp_pop_buffer (parse_in) == 0)\n-\treturn 0;\n-      goto get_next;\n+      return 0;\n \n     case CPP_NAME:\n       return yylexname ();"}, {"sha": "2911f991c41eea1f27c5e5c96ea4a21d93424c53", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -1,3 +1,7 @@\n+2001-08-04  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* cp/spew.c (read_token): No need to pop buffers.\n+\n 2001-08-02  Stan Shebs  <shebs@apple.com>\n \n \t* cp-tree.h (FNADDR_FROM_VTABLE_ENTRY): Remove, no longer used."}, {"sha": "4b7f84536f73db6eb05328ecd7b586044e813d21", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -331,8 +331,6 @@ read_token (t)\n #undef YYCODE\n \n     case CPP_EOF:\n-      if (cpp_pop_buffer (parse_in) != 0)\n-\tgoto retry;\n       t->yychar = 0;\n       break;\n       "}, {"sha": "fb01145d8cd06ecb4a9461d8075d51399d9af236", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -326,7 +326,7 @@ stack_include_file (pfile, inc)\n     }\n \n   /* Push a buffer.  */\n-  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, inc->name);\n+  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, inc->name, 0);\n   fp->inc = inc;\n   fp->inc->refcnt++;\n   fp->sysp = sysp;"}, {"sha": "b1d03251aa50ceec999e44c232923795d17f400d", "filename": "gcc/cpphash.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -226,6 +226,11 @@ struct cpp_buffer\n      include files has been calculated and stored in \"dir\" below.  */\n   unsigned char search_cached;\n \n+  /* At EOF, a buffer is automatically popped.  If RETURN_AT_EOF is\n+     true, a CPP_EOF token is then returned.  Otherwise, the next\n+     token from the enclosing buffer is returned.  */\n+  bool return_at_eof;\n+\n   /* Buffer type.  */\n   ENUM_BITFIELD (cpp_buffer_type) type : 8;\n \n@@ -441,6 +446,7 @@ extern void _cpp_do__Pragma\tPARAMS ((cpp_reader *));\n extern void _cpp_init_directives PARAMS ((cpp_reader *));\n extern void _cpp_init_internal_pragmas PARAMS ((cpp_reader *));\n extern void _cpp_do_file_change PARAMS ((cpp_reader *, enum lc_reason));\n+extern void _cpp_pop_buffer PARAMS ((cpp_reader *));\n \n /* Utility routines and macros.  */\n #define DSC(str) (const U_CHAR *)str, sizeof str - 1"}, {"sha": "6d4c7a0aa3420d46eb2b7f54b8902742397d6f94", "filename": "gcc/cppinit.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -555,7 +555,7 @@ cpp_destroy (pfile)\n   cpp_context *context, *contextn;\n \n   while (CPP_BUFFER (pfile) != NULL)\n-    cpp_pop_buffer (pfile);\n+    _cpp_pop_buffer (pfile);\n \n   if (pfile->macro_buffer)\n     {\n@@ -883,7 +883,10 @@ do_includes (pfile, p, scan)\n \t  header.val.str.text = (const unsigned char *) p->arg;\n \t  header.val.str.len = strlen (p->arg);\n \t  if (_cpp_execute_include (pfile, &header, IT_CMDLINE) && scan)\n-\t    cpp_scan_buffer_nooutput (pfile, 0);\n+\t    {\n+\t      pfile->buffer->return_at_eof = true;\n+\t      cpp_scan_nooutput (pfile);\n+\t    }\n \t}\n       q = p->next;\n       free (p);\n@@ -1011,7 +1014,7 @@ cpp_finish (pfile)\n     {\n       cpp_ice (pfile, \"buffers still stacked in cpp_finish\");\n       while (CPP_BUFFER (pfile))\n-\tcpp_pop_buffer (pfile);\n+\t_cpp_pop_buffer (pfile);\n     }\n \n   /* Don't write the deps file if preprocessing has failed.  */"}, {"sha": "e0002beac4566c5f0bf6f695a6c0b691f15a0478", "filename": "gcc/cpplex.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -893,16 +893,23 @@ _cpp_lex_token (pfile, result)\n   switch (c)\n     {\n     case EOF:\n-      /* Non-empty files should end in a newline.  Checking \"bol\" too\n-\t  prevents multiple warnings when hitting the EOF more than\n-\t  once, like in a directive.  Don't warn for command line and\n-\t  _Pragma buffers.  */\n-      if (pfile->lexer_pos.col != 0 && !bol && !buffer->from_stage3)\n-\tcpp_pedwarn (pfile, \"no newline at end of file\");\n+      if (!pfile->state.in_directive)\n+\t{\n+\t  unsigned char ret = pfile->buffer->return_at_eof;\n+\n+\t  /* Non-empty files should end in a newline.  Don't warn for\n+\t     command line and _Pragma buffers.  */\n+\t  if (pfile->lexer_pos.col != 0 && !buffer->from_stage3)\n+\t    cpp_pedwarn (pfile, \"no newline at end of file\");\n+\t  _cpp_pop_buffer (pfile);\n+\t  if (pfile->buffer && !ret)\n+\t    {\n+\t      bol = 1;\n+\t      goto done_directive;\n+\t    }\n+\t}\n       pfile->state.next_bol = 1;\n-      pfile->state.skipping = 0;\t/* In case missing #endif.  */\n       result->type = CPP_EOF;\n-      /* Don't do MI optimisation.  */\n       return;\n \n     case ' ': case '\\t': case '\\f': case '\\v': case '\\0':"}, {"sha": "76e5355d74009c190db4fdd0056c75549f252ee6", "filename": "gcc/cpplib.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -397,7 +397,7 @@ run_directive (pfile, dir_no, type, buf, count)\n   unsigned int output_line = pfile->lexer_pos.output_line;\n   cpp_buffer *buffer;\n \n-  buffer = cpp_push_buffer (pfile, (const U_CHAR *) buf, count, type, 0);\n+  buffer = cpp_push_buffer (pfile, (const U_CHAR *) buf, count, type, 0, 1);\n \n   if (dir_no == T_PRAGMA)\n     {\n@@ -414,8 +414,7 @@ run_directive (pfile, dir_no, type, buf, count)\n   pfile->state.prevent_expansion--;\n   check_eol (pfile);\n   end_directive (pfile, 1);\n-\n-  cpp_pop_buffer (pfile);\n+  _cpp_pop_buffer (pfile);\n }\n \n /* Checks for validity the macro name in #define, #undef, #ifdef and\n@@ -770,7 +769,7 @@ do_line (pfile)\n \t  if (reason == LC_ENTER)\n \t    {\n \t      /* Fake a buffer stack for diagnostics.  */\n-\t      cpp_push_buffer (pfile, 0, 0, BUF_FAKE, fname);\n+\t      cpp_push_buffer (pfile, 0, 0, BUF_FAKE, fname, 0);\n \t      /* Fake an include for cpp_included.  */\n \t      _cpp_fake_include (pfile, fname);\n \t      buffer = pfile->buffer;\n@@ -782,7 +781,7 @@ do_line (pfile)\n \t\t\t     buffer->nominal_fname);\n \t      else\n \t\t{\n-\t\t  cpp_pop_buffer (pfile);\n+\t\t  _cpp_pop_buffer (pfile);\n \t\t  buffer = pfile->buffer;\n #ifdef ENABLE_CHECKING\n \t\t  if (strcmp (buffer->nominal_fname, fname))\n@@ -1775,12 +1774,13 @@ cpp_set_callbacks (pfile, cb)\n    doesn't fail.  It does not generate a file change call back; that\n    is the responsibility of the caller.  */\n cpp_buffer *\n-cpp_push_buffer (pfile, buffer, len, type, filename)\n+cpp_push_buffer (pfile, buffer, len, type, filename, return_at_eof)\n      cpp_reader *pfile;\n      const U_CHAR *buffer;\n      size_t len;\n      enum cpp_buffer_type type;\n      const char *filename;\n+     int return_at_eof;\n {\n   cpp_buffer *new = xobnew (&pfile->buffer_ob, cpp_buffer);\n \n@@ -1826,6 +1826,7 @@ cpp_push_buffer (pfile, buffer, len, type, filename)\n   new->pfile = pfile;\n   new->include_stack_listed = 0;\n   new->lineno = 1;\n+  new->return_at_eof = return_at_eof;\n \n   pfile->state.next_bol = 1;\n   pfile->buffer_stack_depth++;\n@@ -1837,8 +1838,8 @@ cpp_push_buffer (pfile, buffer, len, type, filename)\n /* If called from do_line, pops a single buffer.  Otherwise pops all\n    buffers until a real file is reached.  Generates appropriate\n    call-backs.  */\n-cpp_buffer *\n-cpp_pop_buffer (pfile)\n+void\n+_cpp_pop_buffer (pfile)\n      cpp_reader *pfile;\n {\n   cpp_buffer *buffer;\n@@ -1884,7 +1885,8 @@ cpp_pop_buffer (pfile)\n     }\n \n   obstack_free (&pfile->buffer_ob, buffer);\n-  return pfile->buffer;\n+\n+  pfile->state.skipping = 0;\t/* In case missing #endif.  */\n }\n \n void"}, {"sha": "31c01e72c4fbe04a19f63aada80280d1075babc8", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -554,8 +554,7 @@ extern void cpp_unassert PARAMS ((cpp_reader *, const char *));\n extern cpp_buffer *cpp_push_buffer PARAMS ((cpp_reader *,\n \t\t\t\t\t    const unsigned char *, size_t,\n \t\t\t\t\t    enum cpp_buffer_type,\n-\t\t\t\t\t    const char *));\n-extern cpp_buffer *cpp_pop_buffer PARAMS ((cpp_reader *));\n+\t\t\t\t\t    const char *, int));\n extern int cpp_defined PARAMS ((cpp_reader *, const unsigned char *, int));\n \n /* N.B. The error-message-printer prototypes have not been nicely\n@@ -611,7 +610,7 @@ extern void cpp_forall_identifiers\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t cpp_cb, void *));\n \n /* In cppmacro.c */\n-extern void cpp_scan_buffer_nooutput\tPARAMS ((cpp_reader *, int));\n+extern void cpp_scan_nooutput\t\tPARAMS ((cpp_reader *));\n extern void cpp_start_lookahead\t\tPARAMS ((cpp_reader *));\n extern void cpp_stop_lookahead\t\tPARAMS ((cpp_reader *, int));\n extern int  cpp_sys_macro_p\t\tPARAMS ((cpp_reader *));"}, {"sha": "d45a949c6290b443cfc959ff82dddaa357e9834b", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -1010,18 +1010,14 @@ cpp_sys_macro_p (pfile)\n /* Read each token in, until EOF.  Directives are transparently\n    processed.  */\n void\n-cpp_scan_buffer_nooutput (pfile, all_buffers)\n+cpp_scan_nooutput (pfile)\n      cpp_reader *pfile;\n-     int all_buffers;\n {\n   cpp_token token;\n-  cpp_buffer *buffer = all_buffers ? 0: pfile->buffer->prev;\n \n   do\n-    do\n-      cpp_get_token (pfile, &token);\n-    while (token.type != CPP_EOF);\n-  while (cpp_pop_buffer (pfile) != buffer);\n+    cpp_get_token (pfile, &token);\n+  while (token.type != CPP_EOF);\n }\n \n /* Lookahead handling.  */"}, {"sha": "9dfb6803f26218fead6015cf3ebe15ede7eaba8c", "filename": "gcc/cppmain.c", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -44,7 +44,7 @@ static void do_preprocessing PARAMS ((int, char **));\n static void setup_callbacks PARAMS ((void));\n \n /* General output routines.  */\n-static void scan_buffer\tPARAMS ((cpp_reader *));\n+static void scan_translation_unit PARAMS ((cpp_reader *));\n static void check_multiline_token PARAMS ((cpp_string *));\n static int printer_init PARAMS ((cpp_reader *));\n static int dump_macro PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n@@ -151,11 +151,11 @@ do_preprocessing (argc, argv)\n   if (cpp_start_read (pfile, options->in_fname))\n     {\n       /* A successful cpp_start_read guarantees that we can call\n-\t cpp_scan_buffer_nooutput or cpp_get_token next.  */\n+\t cpp_scan_nooutput or cpp_get_token next.  */\n       if (options->no_output)\n-\tcpp_scan_buffer_nooutput (pfile, 1);\n+\tcpp_scan_nooutput (pfile);\n       else\n-\tscan_buffer (pfile);\n+\tscan_translation_unit (pfile);\n \n       /* -dM command line option.  Should this be in cpp_finish?  */\n       if (options->dump_macros == dump_only)\n@@ -200,60 +200,56 @@ setup_callbacks ()\n /* Writes out the preprocessed file.  Alternates between two tokens,\n    so that we can avoid accidental token pasting.  */\n static void\n-scan_buffer (pfile)\n+scan_translation_unit (pfile)\n      cpp_reader *pfile;\n {\n   unsigned int index, line;\n   cpp_token tokens[2], *token;\n \n-  do\n+  for (index = 0;; index = 1 - index)\n     {\n-      for (index = 0;; index = 1 - index)\n-\t{\n-\t  token = &tokens[index];\n-\t  cpp_get_token (pfile, token);\n+      token = &tokens[index];\n+      cpp_get_token (pfile, token);\n \n-\t  if (token->type == CPP_EOF)\n-\t    break;\n+      if (token->type == CPP_EOF)\n+\tbreak;\n \n-\t  line = cpp_get_line (pfile)->output_line;\n-\t  if (print.lineno != line)\n+      line = cpp_get_line (pfile)->output_line;\n+      if (print.lineno != line)\n+\t{\n+\t  unsigned int col = cpp_get_line (pfile)->col;\n+\n+\t  /* Supply enough whitespace to put this token in its original\n+\t     column.  Don't bother trying to reconstruct tabs; we can't\n+\t     get it right in general, and nothing ought to care.  (Yes,\n+\t     some things do care; the fault lies with them.)  */\n+\t  maybe_print_line (line);\n+\t  if (col > 1)\n \t    {\n-\t      unsigned int col = cpp_get_line (pfile)->col;\n-\n-\t      /* Supply enough whitespace to put this token in its original\n-\t\t column.  Don't bother trying to reconstruct tabs; we can't\n-\t\t get it right in general, and nothing ought to care.  (Yes,\n-\t\t some things do care; the fault lies with them.)  */\n-\t      maybe_print_line (line);\n-\t      if (col > 1)\n-\t\t{\n-\t\t  if (token->flags & PREV_WHITE)\n-\t\t    col--;\n-\t\t  while (--col)\n-\t\t    putc (' ', print.outf);\n-\t\t}\n+\t      if (token->flags & PREV_WHITE)\n+\t\tcol--;\n+\t      while (--col)\n+\t\tputc (' ', print.outf);\n \t    }\n-\t  else if ((token->flags & (PREV_WHITE | AVOID_LPASTE))\n-\t\t       == AVOID_LPASTE\n-\t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n-\t    token->flags |= PREV_WHITE;\n-\t  /* Special case '# <directive name>': insert a space between\n-\t     the # and the token.  This will prevent it from being\n-\t     treated as a directive when this code is re-preprocessed.\n-\t     XXX Should do this only at the beginning of a line, but how?  */\n-\t  else if (token->type == CPP_NAME && token->val.node->directive_index\n-\t\t   && tokens[1 - index].type == CPP_HASH)\n-\t    token->flags |= PREV_WHITE;\n-\n-\t  cpp_output_token (token, print.outf);\n-\t  print.printed = 1;\n-\t  if (token->type == CPP_STRING || token->type == CPP_WSTRING\n-\t      || token->type == CPP_COMMENT)\n-\t    check_multiline_token (&token->val.str);\n \t}\n+      else if ((token->flags & (PREV_WHITE | AVOID_LPASTE))\n+\t       == AVOID_LPASTE\n+\t       && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n+\ttoken->flags |= PREV_WHITE;\n+      /* Special case '# <directive name>': insert a space between\n+\t the # and the token.  This will prevent it from being\n+\t treated as a directive when this code is re-preprocessed.\n+\t XXX Should do this only at the beginning of a line, but how?  */\n+      else if (token->type == CPP_NAME && token->val.node->directive_index\n+\t       && tokens[1 - index].type == CPP_HASH)\n+\ttoken->flags |= PREV_WHITE;\n+\n+      cpp_output_token (token, print.outf);\n+      print.printed = 1;\n+      if (token->type == CPP_STRING || token->type == CPP_WSTRING\n+\t  || token->type == CPP_COMMENT)\n+\tcheck_multiline_token (&token->val.str);\n     }\n-  while (cpp_pop_buffer (pfile) != 0);\n }\n \n /* Adjust print.lineno for newlines embedded in tokens.  */"}, {"sha": "25d7a4f82332ab690b5eb34722084bfbd0d0f437", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -658,7 +658,7 @@ read_scan_file (in_fname, argc, argv)\n \n       /* Scan the macro expansion of \"getchar();\".  */\n       cpp_push_buffer (scan_in, getchar_call, sizeof(getchar_call) - 1,\n-\t\t       BUF_BUILTIN, in_fname);\n+\t\t       BUF_BUILTIN, in_fname, 1);\n       for (;;)\n \t{\n \t  cpp_token t;\n@@ -669,7 +669,6 @@ read_scan_file (in_fname, argc, argv)\n \t  else if (cpp_ideq (&t, \"_filbuf\"))\n \t    seen_filbuf++;\n \t}\n-      cpp_pop_buffer (scan_in);\n \n       if (seen_filbuf)\n \t{"}, {"sha": "1f9a47da42a5cc60e4cdc2e84937200f25e6e43e", "filename": "gcc/line-map.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -25,7 +25,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n /* The logical line FROM_LINE maps to physical source file TO_FILE at\n    line TO_LINE, and subsequently one-to-one until the next line_map\n-   structure in the set.  */\n+   structure in the set.  INCLUDED_FROM is an index into the set that\n+   gives the line mapping at whose end the current one was included.\n+   File(s) at the bottom of the include stack have this set to -1.  */\n struct line_map\n {\n   const char *to_file;\n@@ -34,7 +36,7 @@ struct line_map\n   int included_from;\n };\n \n-/* Contains a sequence of chronological line_map structures.  */\n+/* A set of chronological line_map structures.  */\n struct line_maps\n {\n   struct line_map *maps;\n@@ -75,6 +77,7 @@ extern struct line_map *lookup_line\n    of the #include, or other directive, that caused a map change.  */\n #define LAST_SOURCE_LINE(MAP) SOURCE_LINE (MAP, (MAP)[1].from_line - 1)\n \n+/* Non-zero if the map is at the bottom of the include stack.  */\n #define MAIN_FILE_P(MAP) ((MAP)->included_from < 0)\n \n #endif /* !GCC_LINE_MAP_H  */"}, {"sha": "bd2437dacc77762c35bcfc8f055d90952502877d", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -59,7 +59,7 @@ objc-parse.o : $(srcdir)/objc/objc-parse.c \\\n    $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h $(srcdir)/ggc.h \\\n    $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/c-common.h \\\n    $(srcdir)/input.h $(srcdir)/flags.h $(srcdir)/output.h \\\n-   $(srcdir)/objc/objc-act.h $(SYSTEM_H) cpplib.h\n+   $(srcdir)/objc/objc-act.h $(SYSTEM_H) $(CPPLIB_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-parse.c $(OUTPUT_OPTION)\n "}, {"sha": "2fe570e3ec409daaf22cda955d6f322c75254834", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e958a8611ff372211d0fd3cd9659614583bb4/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=ef6e958a8611ff372211d0fd3cd9659614583bb4", "patch": "@@ -111,13 +111,10 @@ scan_decls (pfile, argc, argv)\n       brace_nesting++;\n       goto new_statement;\n     }\n+\n   if (token.type == CPP_EOF)\n-    {\n-      if (cpp_pop_buffer (pfile) == 0)\n-\treturn 0;\n+    return 0;\n \n-      goto new_statement;\n-    }\n   if (token.type == CPP_SEMICOLON)\n     goto new_statement;\n   if (token.type != CPP_NAME)\n@@ -148,9 +145,7 @@ scan_decls (pfile, argc, argv)\n \t  goto new_statement;\n \t  \n \tcase CPP_EOF:\n-\t  if (cpp_pop_buffer (pfile) == 0)\n-\t    return 0;\n-\t  break;\n+\t  return 0;\n \n \tcase CPP_OPEN_PAREN:\n \t  /* Looks like this is the start of a formal parameter list.  */"}]}