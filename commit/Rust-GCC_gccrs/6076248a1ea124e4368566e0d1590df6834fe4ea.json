{"sha": "6076248a1ea124e4368566e0d1590df6834fe4ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3NjI0OGExZWExMjRlNDM2ODU2NmUwZDE1OTBkZjY4MzRmZTRlYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-05T22:52:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-05T22:52:35Z"}, "message": "(simplify_binary_operation): Move integer CONST_DOUBLE folding out of REAL_IS_NOT_DOUBLE conditional.\n\n(simplify_binary_operation): Move integer CONST_DOUBLE folding out of\nREAL_IS_NOT_DOUBLE conditional.\n(simplify_relational_operation): Put float CONST_DOUBLE folding under a\nREAL_IS_NOT_DOUBLE conditional.\nAdd folding for integer CONST_DOUBLE comparisons.\n\nFrom-SVN: r3661", "tree": {"sha": "bc8aa526278ca2d0fed32cfce5113f30bb4474ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8aa526278ca2d0fed32cfce5113f30bb4474ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6076248a1ea124e4368566e0d1590df6834fe4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6076248a1ea124e4368566e0d1590df6834fe4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6076248a1ea124e4368566e0d1590df6834fe4ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6076248a1ea124e4368566e0d1590df6834fe4ea/comments", "author": null, "committer": null, "parents": [{"sha": "02a10449e3f898314fa48b4e173f20c3e04bf552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a10449e3f898314fa48b4e173f20c3e04bf552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a10449e3f898314fa48b4e173f20c3e04bf552"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "c9feea2deb782769c07dc98f0544f2e65f7c3656", "filename": "gcc/cse.c", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6076248a1ea124e4368566e0d1590df6834fe4ea/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6076248a1ea124e4368566e0d1590df6834fe4ea/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6076248a1ea124e4368566e0d1590df6834fe4ea", "patch": "@@ -3253,11 +3253,12 @@ simplify_binary_operation (code, mode, op0, op1)\n       value = real_value_truncate (mode, value);\n       return immed_real_const_1 (value, mode);\n     }\n+#endif  /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n \n   /* We can fold some multi-word operations.  */\n-  else if (GET_MODE_CLASS (mode) == MODE_INT\n-\t   && GET_CODE (op0) == CONST_DOUBLE\n-\t   && (GET_CODE (op1) == CONST_DOUBLE || GET_CODE (op1) == CONST_INT))\n+  if (GET_MODE_CLASS (mode) == MODE_INT\n+      && GET_CODE (op0) == CONST_DOUBLE\n+      && (GET_CODE (op1) == CONST_DOUBLE || GET_CODE (op1) == CONST_INT))\n     {\n       HOST_WIDE_INT l1, l2, h1, h2, lv, hv;\n \n@@ -3370,7 +3371,6 @@ simplify_binary_operation (code, mode, op0, op1)\n \n       return immed_double_const (lv, hv, mode);\n     }\n-#endif  /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n \n   if (GET_CODE (op0) != CONST_INT || GET_CODE (op1) != CONST_INT\n       || width > HOST_BITS_PER_WIDE_INT || width == 0)\n@@ -4068,6 +4068,8 @@ simplify_relational_operation (code, mode, op0, op1)\n \t      || GET_MODE_CLASS (GET_MODE (op0)) != MODE_FLOAT))\n \treturn (code == EQ || code == GE || code == LE || code == LEU\n \t\t|| code == GEU) ? const_true_rtx : const0_rtx;\n+\n+#if ! defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n       else if (GET_CODE (op0) == CONST_DOUBLE\n \t       && GET_CODE (op1) == CONST_DOUBLE\n \t       && GET_MODE_CLASS (GET_MODE (op0)) == MODE_FLOAT)\n@@ -4103,7 +4105,60 @@ simplify_relational_operation (code, mode, op0, op1)\n \t      return op1lt ? const_true_rtx : const0_rtx;\n \t    }\n \t}\n-      \n+#endif  /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n+\n+      else if (GET_MODE_CLASS (mode) == MODE_INT\n+\t       && width > HOST_BITS_PER_WIDE_INT\n+\t       && (GET_CODE (op0) == CONST_DOUBLE\n+\t\t   || GET_CODE (op0) == CONST_INT)\n+\t       && (GET_CODE (op1) == CONST_DOUBLE\n+\t\t   || GET_CODE (op1) == CONST_INT))\n+\t{\n+\t  HOST_WIDE_INT h0, l0, h1, l1;\n+\t  unsigned HOST_WIDE_INT uh0, ul0, uh1, ul1;\n+\t  int op0lt, op0ltu, equal;\n+\n+\t  if (GET_CODE (op0) == CONST_DOUBLE)\n+\t    l0 = CONST_DOUBLE_LOW (op0), h0 = CONST_DOUBLE_HIGH (op0);\n+\t  else\n+\t    l0 = INTVAL (op0), h0 = l0 < 0 ? -1 : 0;\n+\t  \n+\t  if (GET_CODE (op1) == CONST_DOUBLE)\n+\t    l1 = CONST_DOUBLE_LOW (op1), h1 = CONST_DOUBLE_HIGH (op1);\n+\t  else\n+\t    l1 = INTVAL (op1), h1 = l1 < 0 ? -1 : 0;\n+\n+\t  uh0 = h0, ul0 = l0, uh1 = h1, ul1 = l1;\n+\n+\t  equal = (h0 == h1 && l0 == l1);\n+\t  op0lt = (h0 < h1 || (h0 == h1 && l0 < l1));\n+\t  op0ltu = (uh0 < uh1 || (uh0 == uh1 && ul0 < ul1));\n+\n+\t  switch (code)\n+\t    {\n+\t    case EQ:\n+\t      return equal ? const_true_rtx : const0_rtx;\n+\t    case NE:\n+\t      return !equal ? const_true_rtx : const0_rtx;\n+\t    case LE:\n+\t      return equal || op0lt ? const_true_rtx : const0_rtx;\n+\t    case LT:\n+\t      return op0lt ? const_true_rtx : const0_rtx;\n+\t    case GE:\n+\t      return !op0lt ? const_true_rtx : const0_rtx;\n+\t    case GT:\n+\t      return !equal && !op0lt ? const_true_rtx : const0_rtx;\n+\t    case LEU:\n+\t      return equal || op0ltu ? const_true_rtx : const0_rtx;\n+\t    case LTU:\n+\t      return op0ltu ? const_true_rtx : const0_rtx;\n+\t    case GEU:\n+\t      return !op0ltu ? const_true_rtx : const0_rtx;\n+\t    case GTU:\n+\t      return !equal && !op0ltu ? const_true_rtx : const0_rtx;\n+\t    }\n+\t}\n+\n       switch (code)\n \t{\n \tcase EQ:"}]}