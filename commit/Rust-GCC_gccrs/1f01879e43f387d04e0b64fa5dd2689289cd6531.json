{"sha": "1f01879e43f387d04e0b64fa5dd2689289cd6531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwMTg3OWU0M2YzODdkMDRlMGI2NGZhNWRkMjY4OTI4OWNkNjUzMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-12-17T13:19:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-12-17T13:19:41Z"}, "message": "* regclass.c (regclass): Do not use flowgraph when not optimizing.\n\nFrom-SVN: r30993", "tree": {"sha": "91324cc0ede5677115953753d29cbf89cbce4862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91324cc0ede5677115953753d29cbf89cbce4862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f01879e43f387d04e0b64fa5dd2689289cd6531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f01879e43f387d04e0b64fa5dd2689289cd6531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f01879e43f387d04e0b64fa5dd2689289cd6531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f01879e43f387d04e0b64fa5dd2689289cd6531/comments", "author": null, "committer": null, "parents": [{"sha": "833fc3ad2371e77287a7c2456b11d7da43f11d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833fc3ad2371e77287a7c2456b11d7da43f11d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833fc3ad2371e77287a7c2456b11d7da43f11d7c"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "8c3831ea61ebeef71c9cc75903512a1e9663b1a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f01879e43f387d04e0b64fa5dd2689289cd6531/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f01879e43f387d04e0b64fa5dd2689289cd6531/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f01879e43f387d04e0b64fa5dd2689289cd6531", "patch": "@@ -1,5 +1,7 @@\n Fri Dec 17 12:08:11 MET 1999  Jan Hubicka  <hubicka@freesoftr.cz>\n \n+\t* regclass.c (regclass): Do not use flowgraph when not optimizing.\n+\n \t* gcse.c (try_replace_reg): Do replacements in REG_EQUAL/REG_EQUIV\n \tnotes too, create one when replacement failed, attempt to simplify\n \tresulting notes."}, {"sha": "1ae876a6d3f0d960ea9f1ebd0e4617aedcc81708", "filename": "gcc/regclass.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f01879e43f387d04e0b64fa5dd2689289cd6531/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f01879e43f387d04e0b64fa5dd2689289cd6531/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=1f01879e43f387d04e0b64fa5dd2689289cd6531", "patch": "@@ -1070,30 +1070,35 @@ regclass (f, nregs, dump)\n       bzero (in_inc_dec, nregs);\n #endif\n \n-      loop_cost = 1;\n-\n       /* Scan the instructions and record each time it would\n \t save code to put a certain register in a certain class.  */\n \n-      for (index = 0; index < n_basic_blocks; index++)\n+      if (!optimize)\n \t{\n-\t  basic_block bb = BASIC_BLOCK (index);\n-\n-\t  /* Show that an insn inside a loop is likely to be executed three\n-\t     times more than insns outside a loop.  This is much more aggressive\n-\t     than the assumptions made elsewhere and is being tried as an\n-\t     experiment.  */\n-\t  if (optimize_size)\n-\t    loop_cost = 1;\n-\t  else\n-\t    loop_cost = 1 << (2 * MIN (bb->loop_depth - 1, 5));\n-\t  for (insn = bb->head; ; insn = NEXT_INSN (insn))\n-\t    {\n-\t      insn = scan_one_insn (insn, pass);\n-\t      if (insn == bb->end)\n-\t\tbreak;\n-\t    }\n+\t  loop_cost = 1;\n+\t  for (insn = f; insn; insn = NEXT_INSN (insn))\n+\t    insn = scan_one_insn (insn, pass);\n \t}\n+      else\n+\tfor (index = 0; index < n_basic_blocks; index++)\t\n+\t  {\n+\t    basic_block bb = BASIC_BLOCK (index);\n+\n+\t    /* Show that an insn inside a loop is likely to be executed three\n+\t       times more than insns outside a loop.  This is much more aggressive\n+\t       than the assumptions made elsewhere and is being tried as an\n+\t       experiment.  */\n+\t    if (optimize_size)\n+\t      loop_cost = 1;\n+\t    else\n+\t      loop_cost = 1 << (2 * MIN (bb->loop_depth - 1, 5));\n+\t    for (insn = bb->head; ; insn = NEXT_INSN (insn))\n+\t      {\n+\t\tinsn = scan_one_insn (insn, pass);\n+\t\tif (insn == bb->end)\n+\t\t  break;\n+\t      }\n+\t  }\n       \n       /* Now for each register look at how desirable each class is\n \t and find which class is preferred.  Store that in"}]}