{"sha": "a4017ff7722614f749a0d5eab315e929b2035e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwMTdmZjc3MjI2MTRmNzQ5YTBkNWVhYjMxNWU5MjliMjAzNWU4YQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-03-09T15:42:10Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-03-09T15:42:10Z"}, "message": "[arm] PR target/83193: Do not print arch/cpu hints twice on invalid -march/-mcpu\n\nCurrently when handling an invalid -march or -mcpu option on a toolchain without an explicit --with-mode configuration\nand compiling without an explicit -mthumb or -marm the arm specs end up calling arm_target_thumb_only to determine\nthe \"thumbness\" of the target, which involves parsing the architecture or cpu name. But the functions doing that\nparsing also emit error messages and hints on invalid arguments. Later when we parse the architecture or cpu string to\nas part of the canonicalisation process (arm_canon_arch_option) we end up emitting the errors again.\n\nThe solution in this patch is to silence the errors during the arm_target_thumb_only processing so that they are not emitted\ntwice. arm_canon_arch_option is guaranteed to run as well, so it can emit the errors and hints that it needs.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\nChecked that we emit the arch/cpu hints for invalid -march/-mcpu options only once when no \"thumbness\" options were specified\nduring configuration or invocation.\n\n\tPR target/83193\n\t* common/config/arm/arm-common.c (arm_parse_arch_option_name):\n\tAccept complain bool parameter.  Only emit errors if it is true.\n\t(arm_parse_cpu_option_name): Likewise.\n\t(arm_target_thumb_only): Adjust callers of the above.\n\t* config/arm/arm-protos.h (arm_parse_cpu_option_name): Adjust\n\tprototype to take a default true bool parameter.\n\t(arm_parse_arch_option_name): Likewise.\n\nFrom-SVN: r258389", "tree": {"sha": "0793b593ec8e160f63556156df25265d0c1b92c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0793b593ec8e160f63556156df25265d0c1b92c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4017ff7722614f749a0d5eab315e929b2035e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4017ff7722614f749a0d5eab315e929b2035e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4017ff7722614f749a0d5eab315e929b2035e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4017ff7722614f749a0d5eab315e929b2035e8a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "deb3da39d6ec5b94f45679860ae48a7037939f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb3da39d6ec5b94f45679860ae48a7037939f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb3da39d6ec5b94f45679860ae48a7037939f9f"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "e6c279d6581a1a985e09fc99c2ab6aedd758c2a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4017ff7722614f749a0d5eab315e929b2035e8a", "patch": "@@ -1,3 +1,14 @@\n+2018-03-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/83193\n+\t* common/config/arm/arm-common.c (arm_parse_arch_option_name):\n+\tAccept complain bool parameter.  Only emit errors if it is true.\n+\t(arm_parse_cpu_option_name): Likewise.\n+\t(arm_target_thumb_only): Adjust callers of the above.\n+\t* config/arm/arm-protos.h (arm_parse_cpu_option_name): Adjust\n+\tprototype to take a default true bool parameter.\n+\t(arm_parse_arch_option_name): Likewise.\n+\n 2018-03-09  David Malcolm  <dmalcolm@redhat.com>\n \t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "76c357b4258b68d0c2cd78cb54819c280d50963a", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=a4017ff7722614f749a0d5eab315e929b2035e8a", "patch": "@@ -279,7 +279,8 @@ arm_target_thumb_only (int argc, const char **argv)\n   if (arch)\n     {\n       const arch_option *arch_opt\n-\t= arm_parse_arch_option_name (all_architectures, \"-march\", arch);\n+\t= arm_parse_arch_option_name (all_architectures, \"-march\", arch,\n+\t\t\t\t      false);\n \n       if (arch_opt && !check_isa_bits_for (arch_opt->common.isa_bits,\n \t\t\t\t\t   isa_bit_notm))\n@@ -288,7 +289,7 @@ arm_target_thumb_only (int argc, const char **argv)\n   else if (cpu)\n     {\n       const cpu_option *cpu_opt\n-\t= arm_parse_cpu_option_name (all_cores, \"-mcpu\", cpu);\n+\t= arm_parse_cpu_option_name (all_cores, \"-mcpu\", cpu, false);\n \n       if (cpu_opt && !check_isa_bits_for (cpu_opt->common.isa_bits,\n \t\t\t\t\t  isa_bit_notm))\n@@ -329,10 +330,11 @@ arm_print_hint_for_cpu_option (const char *target,\n /* Parse the base component of a CPU selection in LIST.  Return a\n    pointer to the entry in the architecture table.  OPTNAME is the\n    name of the option we are parsing and can be used if a diagnostic\n-   is needed.  */\n+   is needed.  If COMPLAIN is true (the default) emit error\n+   messages and hints on invalid input.  */\n const cpu_option *\n arm_parse_cpu_option_name (const cpu_option *list, const char *optname,\n-\t\t\t   const char *target)\n+\t\t\t   const char *target, bool complain)\n {\n   const cpu_option *entry;\n   const char *end  = strchr (target, '+');\n@@ -345,8 +347,11 @@ arm_parse_cpu_option_name (const cpu_option *list, const char *optname,\n \treturn entry;\n     }\n \n-  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n-  arm_print_hint_for_cpu_option (target, list);\n+  if (complain)\n+    {\n+      error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n+      arm_print_hint_for_cpu_option (target, list);\n+    }\n   return NULL;\n }\n \n@@ -379,10 +384,11 @@ arm_print_hint_for_arch_option (const char *target,\n /* Parse the base component of a CPU or architecture selection in\n    LIST.  Return a pointer to the entry in the architecture table.\n    OPTNAME is the name of the option we are parsing and can be used if\n-   a diagnostic is needed.  */\n+   a diagnostic is needed.  If COMPLAIN is true (the default) emit error\n+   messages and hints on invalid input.  */\n const arch_option *\n arm_parse_arch_option_name (const arch_option *list, const char *optname,\n-\t\t\t    const char *target)\n+\t\t\t    const char *target, bool complain)\n {\n   const arch_option *entry;\n   const char *end  = strchr (target, '+');\n@@ -395,8 +401,11 @@ arm_parse_arch_option_name (const arch_option *list, const char *optname,\n \treturn entry;\n     }\n \n-  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n-  arm_print_hint_for_arch_option (target, list);\n+  if (complain)\n+    {\n+      error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n+      arm_print_hint_for_arch_option (target, list);\n+    }\n   return NULL;\n }\n "}, {"sha": "9d0acde7a392561cb195d02ae2e1daa15f4ce95b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4017ff7722614f749a0d5eab315e929b2035e8a/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=a4017ff7722614f749a0d5eab315e929b2035e8a", "patch": "@@ -545,9 +545,9 @@ extern const arch_option all_architectures[];\n extern const cpu_option all_cores[];\n \n const cpu_option *arm_parse_cpu_option_name (const cpu_option *, const char *,\n-\t\t\t\t\t     const char *);\n+\t\t\t\t\t     const char *, bool = true);\n const arch_option *arm_parse_arch_option_name (const arch_option *,\n-\t\t\t\t\t       const char *, const char *);\n+\t\t\t\t\t       const char *, const char *, bool = true);\n void arm_parse_option_features (sbitmap, const cpu_arch_option *,\n \t\t\t\tconst char *);\n "}]}