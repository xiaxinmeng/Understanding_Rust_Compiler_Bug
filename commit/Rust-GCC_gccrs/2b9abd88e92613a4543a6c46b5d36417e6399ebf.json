{"sha": "2b9abd88e92613a4543a6c46b5d36417e6399ebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5YWJkODhlOTI2MTNhNDU0M2E2YzQ2YjVkMzY0MTdlNjM5OWViZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-08-20T23:48:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-20T23:48:14Z"}, "message": "mn10200.h (REG_OK_FOR_INDEX_P): Do not check the mode of the register (it could be accessed via an outer SUBREG).\n\n        * mn10200.h (REG_OK_FOR_INDEX_P): Do not check the mode of the\n        register (it could be accessed via an outer SUBREG).\n        (REG_OK_FOR_BASE_P): Likewwise.\n        (GO_IF_LEGITIMATE_ADDRESS): Consistently use REGNO_OK_FOR_BASE_P.\n\nFrom-SVN: r21889", "tree": {"sha": "8843ab05a20bb034a31d5cae7bc0cf258b76deb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8843ab05a20bb034a31d5cae7bc0cf258b76deb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9abd88e92613a4543a6c46b5d36417e6399ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9abd88e92613a4543a6c46b5d36417e6399ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9abd88e92613a4543a6c46b5d36417e6399ebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9abd88e92613a4543a6c46b5d36417e6399ebf/comments", "author": null, "committer": null, "parents": [{"sha": "acb619d9976d653433afad5010748b8f08b7b783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb619d9976d653433afad5010748b8f08b7b783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb619d9976d653433afad5010748b8f08b7b783"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "4bda63125f0a1496d7e74dcad5b2bc87128ef452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9abd88e92613a4543a6c46b5d36417e6399ebf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9abd88e92613a4543a6c46b5d36417e6399ebf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b9abd88e92613a4543a6c46b5d36417e6399ebf", "patch": "@@ -1,5 +1,10 @@\n Thu Aug 20 19:43:44 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* mn10200.h (REG_OK_FOR_INDEX_P): Do not check the mode of the\n+\tregister (it could be accessed via an outer SUBREG).\n+\t(REG_OK_FOR_BASE_P): Likewwise.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Consistently use REGNO_OK_FOR_BASE_P.\n+\n \t* remove.c (optimize_reg_copy_3): Abort instead of silently generating\n \tbogus rtl.\n "}, {"sha": "796caf295fb967b1632084ad37bbadc89a84be3e", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9abd88e92613a4543a6c46b5d36417e6399ebf/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9abd88e92613a4543a6c46b5d36417e6399ebf/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=2b9abd88e92613a4543a6c46b5d36417e6399ebf", "patch": "@@ -645,20 +645,18 @@ extern struct rtx_def *function_arg();\n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_INDEX_P(X)  \\\n-  (GET_MODE (X) == PSImode \\\n-   && ((REGNO (X) >= 0 && REGNO(X) <= 3) || REGNO (X) >= FIRST_PSEUDO_REGISTER))\n+  (((REGNO (X) >= 0 && REGNO(X) <= 3) || REGNO (X) >= FIRST_PSEUDO_REGISTER))\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-  (GET_MODE (X) == PSImode \\\n-   && ((REGNO (X) >= 4 && REGNO(X) <= 8) || REGNO (X) >= FIRST_PSEUDO_REGISTER))\n+  (((REGNO (X) >= 4 && REGNO(X) <= 8) || REGNO (X) >= FIRST_PSEUDO_REGISTER))\n #else\n /* Nonzero if X is a hard reg that can be used as an index.  */\n #define REG_OK_FOR_INDEX_P(X) \\\n-  (GET_MODE (X) == PSImode) && REGNO_OK_FOR_INDEX_P (REGNO (X))\n+  REGNO_OK_FOR_INDEX_P (REGNO (X))\n /* Nonzero if X is a hard reg that can be used as a base reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-  (GET_MODE (X) == PSImode) && REGNO_OK_FOR_BASE_P (REGNO (X))\n+  REGNO_OK_FOR_BASE_P (REGNO (X))\n #endif\n \n \f\n@@ -691,11 +689,9 @@ extern struct rtx_def *function_arg();\n   if (GET_CODE (X) == PLUS)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       rtx base = 0, index = 0;\t\t\t\t\\\n-      if (REG_P (XEXP (X, 0))\t\t\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\\\n+      if (RTX_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\\\n \tbase = XEXP (X, 0), index = XEXP (X, 1);\t\\\n-      if (REG_P (XEXP (X, 1))\t\t\t\t\\\n-\t  && REG_OK_FOR_BASE_P (XEXP (X, 1)))\t\t\\\n+      if (RTX_OK_FOR_BASE_P (XEXP (X, 1)))\t\t\\\n \tbase = XEXP (X, 1), index = XEXP (X, 0);\t\\\n       if (base != 0 && index != 0)\t\t\t\\\n \t{\t\t\t\t\t\t\\"}]}