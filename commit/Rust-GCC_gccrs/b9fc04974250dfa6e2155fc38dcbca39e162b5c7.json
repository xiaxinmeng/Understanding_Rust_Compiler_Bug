{"sha": "b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmYzA0OTc0MjUwZGZhNmUyMTU1ZmMzOGRjYmNhMzllMTYyYjVjNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-28T14:45:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-28T14:45:46Z"}, "message": "re PR tree-optimization/56034 (ICE: verify_gimple failed (invalid PHI argument) with -ftree-loop-distribution)\n\n2013-01-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56034\n\t* tree-loop-distribution.c (enum partition_kind): Add\n\tPKIND_REDUCTION.\n\t(partition_builtin_p): Adjust.\n\t(generate_code_for_partition): Handle PKIND_REDUCTION.  Assert\n\tit is the last partition.\n\t(rdg_flag_uses): Check SSA_NAME_IS_DEFAULT_DEF before looking\n\tup the vertex for the definition.\n\t(classify_partition): Classify whether a partition is a\n\tPKIND_REDUCTION, thus has uses outside of the loop.\n\t(ldist_gen): Inherit PKIND_REDUCTION when merging partitions.\n\tMerge all PKIND_REDUCTION partitions into the last partition.\n\t(tree_loop_distribution): Seed partitions from reductions as well.\n\n\t* gcc.dg/torture/pr56034.c: New testcase.\n\nFrom-SVN: r195508", "tree": {"sha": "c734aa313961c4f7ad6438ad86a0d1f80b7c005d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c734aa313961c4f7ad6438ad86a0d1f80b7c005d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfbca5868fae1912db33ae4ab341d6e08bd68b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfbca5868fae1912db33ae4ab341d6e08bd68b4"}], "stats": {"total": 112, "additions": 95, "deletions": 17}, "files": [{"sha": "ec0328ea317168b304abc33700f3d750e7c0d335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "patch": "@@ -1,3 +1,19 @@\n+2013-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56034\n+\t* tree-loop-distribution.c (enum partition_kind): Add\n+\tPKIND_REDUCTION.\n+\t(partition_builtin_p): Adjust.\n+\t(generate_code_for_partition): Handle PKIND_REDUCTION.  Assert\n+\tit is the last partition.\n+\t(rdg_flag_uses): Check SSA_NAME_IS_DEFAULT_DEF before looking\n+\tup the vertex for the definition.\n+\t(classify_partition): Classify whether a partition is a\n+\tPKIND_REDUCTION, thus has uses outside of the loop.\n+\t(ldist_gen): Inherit PKIND_REDUCTION when merging partitions.\n+\tMerge all PKIND_REDUCTION partitions into the last partition.\n+\t(tree_loop_distribution): Seed partitions from reductions as well.\n+\n 2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56125"}, {"sha": "fecca1e1c4934137bc248d3c479c158c35e1576c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "patch": "@@ -1,3 +1,8 @@\n+2013-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56034\n+\t* gcc.dg/torture/pr56034.c: New testcase.\n+\n 2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56125"}, {"sha": "f2b5d3784ea37391d27f77ee93c052de041a0a45", "filename": "gcc/testsuite/gcc.dg/torture/pr56034.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56034.c?ref=b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ftree-loop-distribution\" } */\n+\n+int a, b, *p;\n+\n+void f(void)\n+{\n+  int *q;\n+\n+  while(b++)\n+    {\n+      int i;\n+      p = &i;\n+      a = *q;\n+    }\n+\n+  if(a)\n+    for(;; b++);\n+}"}, {"sha": "12fd4c50173175af60426adf86f5320b65c304a5", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 55, "deletions": 17, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fc04974250dfa6e2155fc38dcbca39e162b5c7/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=b9fc04974250dfa6e2155fc38dcbca39e162b5c7", "patch": "@@ -51,7 +51,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"tree-pass.h\"\n \n-enum partition_kind { PKIND_NORMAL, PKIND_MEMSET, PKIND_MEMCPY };\n+enum partition_kind {\n+    PKIND_NORMAL, PKIND_REDUCTION, PKIND_MEMSET, PKIND_MEMCPY\n+};\n \n typedef struct partition_s\n {\n@@ -90,7 +92,7 @@ partition_free (partition_t partition)\n static bool\n partition_builtin_p (partition_t partition)\n {\n-  return partition->kind != PKIND_NORMAL;\n+  return partition->kind > PKIND_REDUCTION;\n }\n \n /* Returns true if the partition has an writes.  */\n@@ -481,6 +483,9 @@ generate_code_for_partition (struct loop *loop,\n \tdestroy_loop (loop);\n       break;\n \n+    case PKIND_REDUCTION:\n+      /* Reductions all have to be in the last partition.  */\n+      gcc_assert (!copy_p);\n     case PKIND_NORMAL:\n       generate_loops_for_partition (loop, partition, copy_p);\n       break;\n@@ -628,7 +633,8 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \t{\n \t  tree use = USE_FROM_PTR (use_p);\n \n-\t  if (TREE_CODE (use) == SSA_NAME)\n+\t  if (TREE_CODE (use) == SSA_NAME\n+\t      && !SSA_NAME_IS_DEFAULT_DEF (use))\n \t    {\n \t      gimple def_stmt = SSA_NAME_DEF_STMT (use);\n \t      int v = rdg_vertex_for_stmt (rdg, def_stmt);\n@@ -858,25 +864,18 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n   unsigned i;\n   tree nb_iter;\n   data_reference_p single_load, single_store;\n+  bool volatiles_p = false;\n \n   partition->kind = PKIND_NORMAL;\n   partition->main_dr = NULL;\n   partition->secondary_dr = NULL;\n \n-  if (!flag_tree_loop_distribute_patterns)\n-    return;\n-\n-  /* Perform general partition disqualification for builtins.  */\n-  nb_iter = number_of_exit_cond_executions (loop);\n-  if (!nb_iter || nb_iter == chrec_dont_know)\n-    return;\n-\n   EXECUTE_IF_SET_IN_BITMAP (partition->stmts, 0, i, bi)\n     {\n       gimple stmt = RDG_STMT (rdg, i);\n \n       if (gimple_has_volatile_ops (stmt))\n-\treturn;\n+\tvolatiles_p = true;\n \n       /* If the stmt has uses outside of the loop fail.\n \t ???  If the stmt is generated in another partition that\n@@ -886,10 +885,20 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"not generating builtin, partition has \"\n \t\t     \"scalar uses outside of the loop\\n\");\n+\t  partition->kind = PKIND_REDUCTION;\n \t  return;\n \t}\n     }\n \n+  /* Perform general partition disqualification for builtins.  */\n+  if (volatiles_p\n+      || !flag_tree_loop_distribute_patterns)\n+    return;\n+\n+  nb_iter = number_of_exit_cond_executions (loop);\n+  if (!nb_iter || nb_iter == chrec_dont_know)\n+    return;\n+\n   /* Detect memset and memcpy.  */\n   single_load = NULL;\n   single_store = NULL;\n@@ -1294,6 +1303,8 @@ ldist_gen (struct loop *loop, struct graph *rdg,\n \t    if (!partition_builtin_p (partition))\n \t      {\n \t\tbitmap_ior_into (into->stmts, partition->stmts);\n+\t\tif (partition->kind == PKIND_REDUCTION)\n+\t\t  into->kind = PKIND_REDUCTION;\n \t\tpartitions.ordered_remove (i);\n \t\ti--;\n \t      }\n@@ -1328,13 +1339,38 @@ ldist_gen (struct loop *loop, struct graph *rdg,\n \t\t\t       \"memory accesses\\n\");\n \t\t    }\n \t\t  bitmap_ior_into (into->stmts, partition->stmts);\n+\t\t  if (partition->kind == PKIND_REDUCTION)\n+\t\t    into->kind = PKIND_REDUCTION;\n \t\t  partitions.ordered_remove (j);\n \t\t  j--;\n \t\t}\n \t    }\n \t}\n     }\n \n+  /* Fuse all reduction partitions into the last.  */\n+  if (partitions.length () > 1)\n+    {\n+      partition_t into = partitions.last ();\n+      for (i = partitions.length () - 2; i >= 0; --i)\n+\t{\n+\t  partition_t what = partitions[i];\n+\t  if (what->kind == PKIND_REDUCTION)\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"fusing partitions\\n\");\n+\t\t  dump_bitmap (dump_file, into->stmts);\n+\t\t  dump_bitmap (dump_file, what->stmts);\n+\t\t  fprintf (dump_file, \"because the latter has reductions\\n\");\n+\t\t}\n+\t      bitmap_ior_into (into->stmts, what->stmts);\n+\t      into->kind = PKIND_REDUCTION;\n+\t      partitions.ordered_remove (i);\n+\t    }\n+\t}\n+    }\n+\n   nbp = partitions.length ();\n   if (nbp == 0\n       || (nbp == 1 && !partition_builtin_p (partitions[0]))\n@@ -1478,11 +1514,13 @@ tree_loop_distribution (void)\n \t  for (gsi = gsi_start_bb (bbs[i]); !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n \t      gimple stmt = gsi_stmt (gsi);\n-\t      /* Only distribute stores for now.\n-\t         ???  We should also try to distribute scalar reductions,\n-\t\t thus SSA defs that have scalar uses outside of the loop.  */\n-\t      if (!gimple_assign_single_p (stmt)\n-\t\t  || is_gimple_reg (gimple_assign_lhs (stmt)))\n+\t      /* Distribute stmts which have defs that are used outside of\n+\t         the loop.  */\n+\t      if (stmt_has_scalar_dependences_outside_loop (loop, stmt))\n+\t\t;\n+\t      /* Otherwise only distribute stores for now.  */\n+\t      else if (!gimple_assign_single_p (stmt)\n+\t\t       || is_gimple_reg (gimple_assign_lhs (stmt)))\n \t\tcontinue;\n \n \t      work_list.safe_push (stmt);"}]}