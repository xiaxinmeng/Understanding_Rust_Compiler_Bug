{"sha": "5b8d96f1093274d0cf640c9b71d837328f7526b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4ZDk2ZjEwOTMyNzRkMGNmNjQwYzliNzFkODM3MzI4Zjc1MjZiMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-14T03:10:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-14T03:10:51Z"}, "message": "iq2000-protos.h: Fix comment formatting.\n\n\t* config/iq2000/iq2000-protos.h: Fix comment formatting.\n\t* config/iq2000/iq2000.c: Likewise.\n\t* config/iq2000/iq2000.md: Likewise.\n\nFrom-SVN: r75840", "tree": {"sha": "1b4cd6b5ece4b85e4b871ab0e1f16a16fe5193f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4cd6b5ece4b85e4b871ab0e1f16a16fe5193f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b8d96f1093274d0cf640c9b71d837328f7526b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d96f1093274d0cf640c9b71d837328f7526b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8d96f1093274d0cf640c9b71d837328f7526b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d96f1093274d0cf640c9b71d837328f7526b3/comments", "author": null, "committer": null, "parents": [{"sha": "f18056ff95dccc0b3d1a0776af34a530a1a5e282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18056ff95dccc0b3d1a0776af34a530a1a5e282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18056ff95dccc0b3d1a0776af34a530a1a5e282"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "fa89d0dcf38146cb51c6d1f314d3645b448acf46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b8d96f1093274d0cf640c9b71d837328f7526b3", "patch": "@@ -1,3 +1,9 @@\n+2004-01-13  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/iq2000/iq2000-protos.h: Fix comment formatting.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/iq2000/iq2000.md: Likewise.\n+\n 2004-01-14  J. Brobecker  <brobecker@gnat.com>\n \n \t* dwarf2out.c (is_ada_subrange_type): No longer check the TYPE_NAME."}, {"sha": "989bb657ccb65facdf99a55a0891f28da3ea4647", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=5b8d96f1093274d0cf640c9b71d837328f7526b3", "patch": "@@ -16,7 +16,7 @@\n    You should have received a copy of the GNU General Public License\n    along with GCC; see the file COPYING.  If not, write to\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n-   Boston, MA 02111-1307, USA. */\n+   Boston, MA 02111-1307, USA.  */\n \n #ifndef GCC_IQ2000_PROTOS_H\n #define GCC_IQ2000_PROTOS_H"}, {"sha": "5015b86db24f6aeb76779497fdd2828166831e64", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=5b8d96f1093274d0cf640c9b71d837328f7526b3", "patch": "@@ -1610,7 +1610,7 @@ iq2000_va_arg (tree valist, tree type)\n     if (r != addr_rtx)\n       emit_move_insn (addr_rtx, r);\n \n-    /* flush the POSTINCREMENT */\n+    /* Flush the POSTINCREMENT.  */\n     emit_queue();\n \n     if (indirect)\n@@ -2348,7 +2348,7 @@ iq2000_expand_prologue (void)\n \t      if (GET_CODE (entry_parm) != REG)\n \t        abort ();\n \n-\t      /* passed in a register, so will get homed automatically */\n+\t      /* Passed in a register, so will get homed automatically.  */\n \t      if (GET_MODE (entry_parm) == BLKmode)\n \t\twords = (int_size_in_bytes (passed_type) + 3) / 4;\n \t      else\n@@ -2719,7 +2719,7 @@ iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n   static char buffer[200];\n   /* The kind of comparison we are doing.  */\n   enum rtx_code code = GET_CODE (operands[0]);\n-  /* nonzero if the opcode for the comparison needs a `z' indicating\n+  /* Nonzero if the opcode for the comparison needs a `z' indicating\n      that it is a comparison against zero.  */\n   int need_z_p;\n   /* A string to use in the assembly output to represent the first\n@@ -3744,7 +3744,7 @@ iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int * total)\n \t  * total = COSTS_N_INSNS (2);\n \telse if (GET_CODE (symref) != SYMBOL_REF)\n \t  * total = COSTS_N_INSNS (4);\n-\t/* let's be paranoid....  */\n+\t/* Let's be paranoid....  */\n \telse if (INTVAL (offset) < -32768 || INTVAL (offset) > 32767)\n \t  * total = COSTS_N_INSNS (2);\n \telse"}, {"sha": "de84e66276a459f5b1f0de019a69efeb58c42c5e", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d96f1093274d0cf640c9b71d837328f7526b3/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=5b8d96f1093274d0cf640c9b71d837328f7526b3", "patch": "@@ -1402,7 +1402,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1430,7 +1430,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1457,7 +1457,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1486,7 +1486,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1504,7 +1504,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1533,7 +1533,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1564,7 +1564,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1600,7 +1600,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1618,7 +1618,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n \n@@ -1647,7 +1647,7 @@\n   if (branch_type != CMP_SI && (branch_type != CMP_DI))\n     FAIL;\n \n-  /* set up operands from compare.  */\n+  /* Set up operands from compare.  */\n   operands[1] = branch_cmp[0];\n   operands[2] = branch_cmp[1];\n "}]}