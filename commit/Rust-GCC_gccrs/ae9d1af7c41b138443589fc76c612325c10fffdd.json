{"sha": "ae9d1af7c41b138443589fc76c612325c10fffdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5ZDFhZjdjNDFiMTM4NDQzNTg5ZmM3NmM2MTIzMjVjMTBmZmZkZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2012-10-14T20:59:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-10-14T20:59:12Z"}, "message": "mmix.c (mmix_opposite_regno): Handle the return-value register too.\n\n\t* config/mmix/mmix.c (mmix_opposite_regno): Handle the\n\treturn-value register too.\n\nFrom-SVN: r192441", "tree": {"sha": "c6699fd934a8029f9dfb89ab3935ecb5f9f40682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6699fd934a8029f9dfb89ab3935ecb5f9f40682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae9d1af7c41b138443589fc76c612325c10fffdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9d1af7c41b138443589fc76c612325c10fffdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9d1af7c41b138443589fc76c612325c10fffdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9d1af7c41b138443589fc76c612325c10fffdd/comments", "author": null, "committer": null, "parents": [{"sha": "bf744527f1616d14a437abd9c8e5d16cd55b76a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf744527f1616d14a437abd9c8e5d16cd55b76a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf744527f1616d14a437abd9c8e5d16cd55b76a3"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "82427de24ac31892a2471e08e425159afe5f878b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9d1af7c41b138443589fc76c612325c10fffdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9d1af7c41b138443589fc76c612325c10fffdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae9d1af7c41b138443589fc76c612325c10fffdd", "patch": "@@ -1,3 +1,8 @@\n+2012-10-14  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_opposite_regno): Handle the\n+\treturn-value register too.\n+\n 2012-10-14  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR rtl-optimization/38711"}, {"sha": "1ce880012778b5164d3dc12582ee7c06ad21ebc2", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9d1af7c41b138443589fc76c612325c10fffdd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9d1af7c41b138443589fc76c612325c10fffdd/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=ae9d1af7c41b138443589fc76c612325c10fffdd", "patch": "@@ -392,15 +392,33 @@ mmix_conditional_register_usage (void)\n \n /* INCOMING_REGNO and OUTGOING_REGNO worker function.\n    Those two macros must only be applied to function argument\n-   registers.  FIXME: for their current use in gcc, it'd be better\n-   with an explicit specific additional FUNCTION_INCOMING_ARG_REGNO_P\n-   a'la TARGET_FUNCTION_ARG / TARGET_FUNCTION_INCOMING_ARG instead of\n+   registers and the function return value register for the opposite\n+   use.  FIXME: for their current use in gcc, it'd be better with an\n+   explicit specific additional FUNCTION_INCOMING_ARG_REGNO_P a'la\n+   TARGET_FUNCTION_ARG / TARGET_FUNCTION_INCOMING_ARG instead of\n    forcing the target to commit to a fixed mapping and for any\n-   unspecified register use.  */\n+   unspecified register use.  Particularly when thinking about the\n+   return-value, it is better to imagine INCOMING_REGNO and\n+   OUTGOING_REGNO as named CALLEE_TO_CALLER_REGNO and INNER_REGNO as\n+   named CALLER_TO_CALLEE_REGNO because the direction.  The \"incoming\"\n+   and \"outgoing\" is from the perspective of the parameter-registers,\n+   but the same macro is (must be, lacking an alternative like\n+   suggested above) used to map the return-value-register from the\n+   same perspective.  To make directions even more confusing, the macro\n+   MMIX_OUTGOING_RETURN_VALUE_REGNUM holds the number of the register\n+   in which to return a value, i.e. INCOMING_REGNO for the return-value-\n+   register as received from a called function; the return-value on the\n+   way out.  */\n \n int\n mmix_opposite_regno (int regno, int incoming)\n {\n+  if (incoming && regno == MMIX_OUTGOING_RETURN_VALUE_REGNUM)\n+    return MMIX_RETURN_VALUE_REGNUM;\n+\n+  if (!incoming && regno == MMIX_RETURN_VALUE_REGNUM)\n+    return MMIX_OUTGOING_RETURN_VALUE_REGNUM;\n+\n   if (!mmix_function_arg_regno_p (regno, incoming))\n     return regno;\n "}]}