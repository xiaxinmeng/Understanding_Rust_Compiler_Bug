{"sha": "96e1d96c911f97e775adb93ab03020d90035be42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlMWQ5NmM5MTFmOTdlNzc1YWRiOTNhYjAzMDIwZDkwMDM1YmU0Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-10T16:22:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-10T16:22:52Z"}, "message": "* g++.old-deja/g++.eh/catchptr1.C: New test.\n\nFrom-SVN: r33062", "tree": {"sha": "b2fac90c5fe1d883f17747449d4ec3ad5c6c93da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2fac90c5fe1d883f17747449d4ec3ad5c6c93da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e1d96c911f97e775adb93ab03020d90035be42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e1d96c911f97e775adb93ab03020d90035be42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e1d96c911f97e775adb93ab03020d90035be42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e1d96c911f97e775adb93ab03020d90035be42/comments", "author": null, "committer": null, "parents": [{"sha": "6d61f400fd019ac06026d7aaa412e076096a7d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d61f400fd019ac06026d7aaa412e076096a7d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d61f400fd019ac06026d7aaa412e076096a7d37"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "48a4fdb5739b264eb8a600576fa09f9497bba7bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e1d96c911f97e775adb93ab03020d90035be42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e1d96c911f97e775adb93ab03020d90035be42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96e1d96c911f97e775adb93ab03020d90035be42", "patch": "@@ -1,3 +1,7 @@\n+2000-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.eh/catchptr1.C: New test.\n+\n 2000-04-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.abi/cxa_vec.C: New test."}, {"sha": "3c74b8d34964b21ea29c48fd94b607c5182f795d", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catchptr1.C", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e1d96c911f97e775adb93ab03020d90035be42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e1d96c911f97e775adb93ab03020d90035be42/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C?ref=96e1d96c911f97e775adb93ab03020d90035be42", "patch": "@@ -0,0 +1,234 @@\n+// Test pointer chain catching\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 9 Apr 2000 <nathan@nathan@codesourcery.com>\n+\n+#include <stdio.h>\n+\n+void fn () {};\n+struct A {void fn () {}};\n+static int var = 1;\n+static const int const_var = 2;\n+\n+struct B;\n+struct C;\n+\n+int test0 ()\n+{\n+  try\n+    {\n+      throw &fn;\n+    }\n+  catch (void *)\n+    {\n+      // should not decay to void *\n+      return 1;\n+    }\n+  catch (...)\n+    {\n+      return 0;\n+    }\n+}\n+\n+int test1 ()\n+{\n+  try\n+    {\n+      throw &A::fn;\n+    }\n+  catch (void *)\n+    {\n+      // should not decay to void *\n+      return 1;\n+    }\n+  catch (...)\n+    {\n+      return 0;\n+    }\n+}\n+\n+int test2 ()\n+{\n+  try\n+    {\n+      throw &var;\n+    }\n+  catch (void *)\n+    {\n+      // should decay to void *\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 1;\n+    }\n+}\n+\n+int test3 ()\n+{\n+  try\n+    {\n+      throw &var;\n+    }\n+  catch (void const *)\n+    {\n+      // should decay to const void *\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 1;\n+    }\n+}\n+\n+int test4 ()\n+{\n+  try\n+    {\n+      throw &const_var;\n+    }\n+  catch (void *)\n+    {\n+      // should not decay to void *\n+      return 1;\n+    }\n+  catch (void const *)\n+    {\n+      // should decay to const void *\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 2;\n+    }\n+}\n+\n+int test5 ()\n+{\n+  try\n+    {\n+      throw (void ***)0;\n+    }\n+  catch (void ***)\n+    {\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 1;\n+    }\n+}\n+\n+int test6 ()\n+{\n+  try\n+    {\n+      throw (void const* const* const*)0;\n+    }\n+  catch (void ***)\n+    {\n+      return 1;\n+    }\n+  catch (void * const* const*)\n+    {\n+      return 2;\n+    }\n+  catch (void const* * const*)\n+    {\n+      return 3;\n+    }\n+  catch (void const* const* *)\n+    {\n+      return 4;\n+    }\n+  catch (void const* const* const *)\n+    {\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 1;\n+    }\n+}\n+\n+int test7 ()\n+{\n+  try\n+    {\n+      throw (void ***)0;\n+    }\n+  catch (void const* const**)\n+    {\n+      return 1;\n+    }\n+  catch (void const** const *)\n+    {\n+      return 2;\n+    }\n+  catch (void * const* const *)\n+    {\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 3;\n+    }\n+}\n+\n+#if 0\n+int test8 ()\n+{\n+  try\n+    {\n+      throw (B **)0;\n+    }\n+  catch (C **)\n+    {\n+      return 1;\n+    }\n+  catch (B **)\n+    {\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 2;\n+    }\n+}\n+#endif\n+\n+static int (*tests[])() =\n+{\n+  test0,\n+  test1,\n+  test2,\n+  test3,\n+  test4,\n+  \n+  test5,\n+  test6,\n+  test7,\n+  \n+#if 0\n+  test8,\n+#endif\n+  \n+  NULL\n+};\n+\n+int main ()\n+{\n+  int ix;\n+  int errors = 0;\n+  \n+  for (ix = 0; tests[ix]; ix++)\n+    {\n+      int n = tests[ix] ();\n+      \n+      if (n)\n+        {\n+          printf (\"test %d failed %d\\n\", ix, n);\n+          errors++;\n+        }\n+    }\n+  return errors;\n+}"}]}