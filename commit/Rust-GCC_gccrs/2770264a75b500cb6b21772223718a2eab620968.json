{"sha": "2770264a75b500cb6b21772223718a2eab620968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3MDI2NGE3NWI1MDBjYjZiMjE3NzIyMjM3MThhMmVhYjYyMDk2OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-09-28T16:24:11Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-09-28T16:24:11Z"}, "message": "re PR target/44452 (gcc.target/i386/abi-2.c and gcc.target/i386/pr22076.c fail on 32-bit Solaris 10+/x86)\n\n\tgcc/testsuite:\n\tPR target/44452\n\t* gcc.target/i386/pr22076.c: Add -mno-vect8-ret-in-mem on\n\ti?86-*-solaris2.[89], *-*-vxworks*.\n\t* gcc.target/i386/pr22152.c: Likewise.\n\t* gcc.target/i386/vect8-ret.c: New test.\n\n\tgcc:\n\tPR target/44452\n\t* config/i386/i386.opt (mvect8-ret-in-mem): Define.\n\t* config/i386/i386.c (ix86_target_string): Handle -mvect8-ret-in-mem.\n\t(ix86_solaris_return_in_memory): Remove.\n\t* config/i386/i386-protos.h (ix86_solaris_return_in_memory): Remove.\n\t* config/i386/sol2.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n\t(TARGET_SUBTARGET_DEFAULT): Redefine.\n\t* config/i386/sol2-10.h (TARGET_SUBTARGET_DEFAULT): Update comment.\n\t* config/i386/vx-common.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n\t(TARGET_SUBTARGET_DEFAULT): Redefine.\n\t* doc/invoke.texi (Option Summary, i386 and x86-64 Options): Add\n\t-mvect8-ret-in-mem.\n\t(i386 and x86-64 Options): Document -mvect8-ret-in-mem.\n\nFrom-SVN: r164687", "tree": {"sha": "4d012ee0025647ae28c397f525e9ee6ddeb5942d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d012ee0025647ae28c397f525e9ee6ddeb5942d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2770264a75b500cb6b21772223718a2eab620968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2770264a75b500cb6b21772223718a2eab620968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2770264a75b500cb6b21772223718a2eab620968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2770264a75b500cb6b21772223718a2eab620968/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ed5664e901fff6df3c956154d5dccd8d0ca4e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed5664e901fff6df3c956154d5dccd8d0ca4e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed5664e901fff6df3c956154d5dccd8d0ca4e42"}], "stats": {"total": 123, "additions": 75, "deletions": 48}, "files": [{"sha": "37ff01b17894660c818ba1129d232f81fd82fced", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -1,3 +1,19 @@\n+2010-09-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/44452\n+\t* config/i386/i386.opt (mvect8-ret-in-mem): Define.\n+\t* config/i386/i386.c (ix86_target_string): Handle -mvect8-ret-in-mem.\n+\t(ix86_solaris_return_in_memory): Remove.\n+\t* config/i386/i386-protos.h (ix86_solaris_return_in_memory): Remove.\n+\t* config/i386/sol2.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n+\t(TARGET_SUBTARGET_DEFAULT): Redefine.\n+\t* config/i386/sol2-10.h (TARGET_SUBTARGET_DEFAULT): Update comment.\n+\t* config/i386/vx-common.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n+\t(TARGET_SUBTARGET_DEFAULT): Redefine.\n+\t* doc/invoke.texi (Option Summary, i386 and x86-64 Options): Add\n+\t-mvect8-ret-in-mem.\n+\t(i386 and x86-64 Options): Document -mvect8-ret-in-mem.\n+\n 2010-09-29  Alan Modra  <amodra@gmail.com>\n \n \tPR target/45807"}, {"sha": "75562e8be9030bdc51f6129d03cde0bb31c3531f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -140,7 +140,6 @@ extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n extern void ix86_asm_output_function_label (FILE *, const char *, tree);\n extern int ix86_function_arg_boundary (enum machine_mode, const_tree);\n-extern bool ix86_solaris_return_in_memory (const_tree, const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n extern void ix86_call_abi_override (const_tree);"}, {"sha": "e164c4b457b45ec7b1ad905a16a68c80180198dd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -2632,6 +2632,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-msseregparm\",\t\t\tMASK_SSEREGPARM },\n     { \"-mstack-arg-probe\",\t\tMASK_STACK_PROBE },\n     { \"-mtls-direct-seg-refs\",\t\tMASK_TLS_DIRECT_SEG_REFS },\n+    { \"-mvect8-ret-in-mem\",\t\tMASK_VECT8_RETURNS },\n     { \"-m8bit-idiv\",\t\t\tMASK_USE_8BIT_IDIV },\n   };\n \n@@ -6849,9 +6850,9 @@ return_in_memory_32 (const_tree type, enum machine_mode mode)\n \treturn false;\n \n       /* MMX/3dNow values are returned in MM0,\n-\t except when it doesn't exits.  */\n+\t except when it doesn't exits or the ABI prescribes otherwise.  */\n       if (size == 8)\n-\treturn !TARGET_MMX;\n+\treturn !TARGET_MMX || TARGET_VECT8_RETURNS;\n \n       /* SSE values are returned in XMM0, except when it doesn't exist.  */\n       if (size == 16)\n@@ -6915,43 +6916,6 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #endif\n }\n \n-/* Return false iff TYPE is returned in memory.  This version is used\n-   on Solaris 2.  It is similar to the generic ix86_return_in_memory,\n-   but differs notably in that when MMX is available, 8-byte vectors\n-   are returned in memory, rather than in MMX registers.  */\n-\n-bool\n-ix86_solaris_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n-{\n-  int size;\n-  enum machine_mode mode = type_natural_mode (type, NULL);\n-\n-  if (TARGET_64BIT)\n-    return return_in_memory_64 (type, mode);\n-\n-  if (mode == BLKmode)\n-    return 1;\n-\n-  size = int_size_in_bytes (type);\n-\n-  if (VECTOR_MODE_P (mode))\n-    {\n-      /* Return in memory only if MMX registers *are* available.  This\n-\t seems backwards, but it is consistent with the existing\n-\t Solaris x86 ABI.  */\n-      if (size == 8)\n-\treturn TARGET_MMX;\n-      if (size == 16)\n-\treturn !TARGET_SSE;\n-    }\n-  else if (mode == TImode)\n-    return !TARGET_SSE;\n-  else if (mode == XFmode)\n-    return 0;\n-\n-  return size > 12;\n-}\n-\n /* When returning SSE vector types, we have a choice of either\n      (1) being abi incompatible with a -march switch, or\n      (2) generating an error."}, {"sha": "09a4e063cfd0eca9e3569355b5d354df820c2e08", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -244,6 +244,10 @@ mveclibabi=\n Target RejectNegative Joined Var(ix86_veclibabi_string)\n Vector library ABI to use\n \n+mvect8-ret-in-mem\n+Target Report Mask(VECT8_RETURNS) Save\n+Return 8-byte vectors in memory\n+\n mrecip\n Target Report Mask(RECIP) Save\n Generate reciprocals instead of divss and sqrtss."}, {"sha": "d4f6450be01b5461b910cf276ebd7a21ecc22056", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -89,9 +89,12 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Override i386/sol2.h version: return 8-byte vectors in MMX registers if\n+   possible, matching Sun Studio 12 Update 1+ compilers and other x86\n+   targets.  */\n #undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP\t\\\n-\t\t\t\t  | MASK_FLOAT_RETURNS)\n+#define TARGET_SUBTARGET_DEFAULT \\\n+\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n #define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "b86308fe2fc871b147670ee6f98580cf65c52552", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -140,9 +140,15 @@ along with GCC; see the file COPYING3.  If not see\n /* Register the Solaris-specific #pragma directives.  */\n #define REGISTER_SUBTARGET_PRAGMAS() solaris_register_pragmas ()\n \n+/* Undo i386/sysv4.h version.  */\n #undef SUBTARGET_RETURN_IN_MEMORY\n-#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n-\tix86_solaris_return_in_memory (TYPE, FNTYPE)\n+\n+/* Augment i386/unix.h version to return 8-byte vectors in memory, matching\n+   Sun Studio compilers until version 12, the only ones supported on\n+   Solaris 8 and 9.  */\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n \n /* Output a simple call for .init/.fini.  */\n #define ASM_OUTPUT_CALL(FILE, FN)\t\t\t\t\\"}, {"sha": "e63b91eb72d329ec1cdfa598ca4cfe18a16ff9f7", "filename": "gcc/config/i386/vx-common.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fconfig%2Fi386%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvx-common.h?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -20,10 +20,11 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n-/* VxWorks uses the same ABI as Solaris 2.  */\n+/* VxWorks uses the same ABI as Solaris 2, so use i386/sol2.h version.  */\n \n-#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n-\tix86_solaris_return_in_memory (TYPE, FNTYPE)\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n \n /* Provide our target specific DBX_REGISTER_NUMBER, as advertised by the\n    common svr4.h.  VxWorks relies on the SVR4 numbering.  */"}, {"sha": "51ce64740f48a5cf7b7f4b07dd161c922126a880", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -601,7 +601,8 @@ Objective-C and Objective-C++ Dialects}.\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n--mveclibabi=@var{type} -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n+-mveclibabi=@var{type} -mvect8-ret-in-mem @gol\n+-mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n@@ -12246,6 +12247,16 @@ function by using the function attribute @samp{sseregparm}.\n modules with the same value, including any libraries.  This includes\n the system libraries and startup modules.\n \n+@item -mvect8-ret-in-mem\n+@opindex mvect8-ret-in-mem\n+Return 8-byte vectors in memory instead of MMX registers.  This is the\n+default on Solaris~8 and 9 and VxWorks to match the ABI of the Sun\n+Studio compilers until version 12.  Later compiler versions (starting\n+with Studio 12 Update~1) follow the ABI used by other x86 targets, which\n+is the default on Solaris~10 and later.  @emph{Only} use this option if\n+you need to remain compatible with existing code produced by those\n+previous compiler versions or older versions of GCC.\n+\n @item -mpc32\n @itemx -mpc64\n @itemx -mpc80"}, {"sha": "efa86ca1fe25a9d78a4ed0896faf4030400ece05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -1,3 +1,11 @@\n+2010-09-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/44452\n+\t* gcc.target/i386/pr22076.c: Add -mno-vect8-ret-in-mem on\n+\ti?86-*-solaris2.[89], *-*-vxworks*.\n+\t* gcc.target/i386/pr22152.c: Likewise.\n+\t* gcc.target/i386/vect8-ret.c: New test.\n+\n 2010-09-28  Jie Zhang  <jie@codesourcery.com>\n \n \t* gcc.dg/Wcxx-compat-12.c: Add -fno-short-enums."}, {"sha": "c1da4e9aa0a024b10553b7c949abe7f0a949f5fb", "filename": "gcc/testsuite/gcc.target/i386/pr22076.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n \n #include <mmintrin.h>\n "}, {"sha": "4fade89ee7f80e148945d7c694724fdccfbb16b6", "filename": "gcc/testsuite/gcc.target/i386/pr22152.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -msse2\" } */\n+/* { dg-options \"-O2 -msse2 -mno-vect8-ret-in-mem\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n \n #include <mmintrin.h>\n "}, {"sha": "f2eb81b3863e59a401980009f948d384818c5f36", "filename": "gcc/testsuite/gcc.target/i386/vect8-ret.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2770264a75b500cb6b21772223718a2eab620968/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c?ref=2770264a75b500cb6b21772223718a2eab620968", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target ilp32 } } */\n+/* { dg-options \"-mmmx\" { target i?86-*-solaris2.[89] *-*-vxworks* } } */\n+/* { dg-options \"-mmmx -mvect8-ret-in-mem\" } */\n+\n+#include <mmintrin.h>\n+\n+__m64\n+vecret (__m64 vect)\n+{\n+  return vect;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\" 1 } } */"}]}