{"sha": "ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5Zjg2N2I3YjU5ODViOThlOWY1YzZmZjlhMjIzOWYzYTllODQ5Ng==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2017-01-21T07:23:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-21T07:23:47Z"}, "message": "re PR rtl-optimization/79125 (ICE in rtl_verify_bb_insns, at cfgrtl.c:2661 (error: flow control insn inside a basic block))\n\n2017-01-21  Bernd Schmidt  <bschmidt@redhat.com>\n\n\trtl-optimization/79125\n\t* cprop.c (local_cprop_pass): Handle cases where we make an\n\tunconditional trap.\n\n\tPR rtl-optimization/79125\n\t* gcc.dg/torture/pr79125.c: New test.\n\nFrom-SVN: r244741", "tree": {"sha": "6c8e1db98a6dfd5fa2edebb68dae510fd895a9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c8e1db98a6dfd5fa2edebb68dae510fd895a9e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/comments", "author": null, "committer": null, "parents": [{"sha": "80b40b87845bf2293f2bfdd215bbf758db5ceff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b40b87845bf2293f2bfdd215bbf758db5ceff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b40b87845bf2293f2bfdd215bbf758db5ceff4"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "95c54e5b82ea1cee222f96958215e06ebed8d8f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "patch": "@@ -1,3 +1,9 @@\n+2017-01-21  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\trtl-optimization/79125\n+\t* cprop.c (local_cprop_pass): Handle cases where we make an\n+\tunconditional trap.\n+\n 2017-01-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/61729"}, {"sha": "ae2f19d6f72bf9a3bc3437c1d2fe1a62bbfe65c0", "filename": "gcc/cprop.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "patch": "@@ -1248,13 +1248,18 @@ local_cprop_pass (void)\n   bool changed = false;\n   unsigned i;\n \n+  auto_vec<rtx_insn *> uncond_traps;\n+\n   cselib_init (0);\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       FOR_BB_INSNS (bb, insn)\n \t{\n \t  if (INSN_P (insn))\n \t    {\n+\t      bool was_uncond_trap\n+\t\t= (GET_CODE (PATTERN (insn)) == TRAP_IF\n+\t\t   && XEXP (PATTERN (insn), 0) == const1_rtx);\n \t      rtx note = find_reg_equal_equiv_note (insn);\n \t      do\n \t\t{\n@@ -1273,6 +1278,13 @@ local_cprop_pass (void)\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n+\t\t  if (!was_uncond_trap\n+\t\t      && GET_CODE (PATTERN (insn)) == TRAP_IF\n+\t\t      && XEXP (PATTERN (insn), 0) == const1_rtx)\n+\t\t    {\n+\t\t      uncond_traps.safe_push (insn);\n+\t\t      break;\n+\t\t    }\n \t\t  if (insn->deleted ())\n \t\t    break;\n \t\t}\n@@ -1287,6 +1299,14 @@ local_cprop_pass (void)\n \n   cselib_finish ();\n \n+  while (!uncond_traps.is_empty ())\n+    {\n+      rtx_insn *insn = uncond_traps.pop ();\n+      basic_block to_split = BLOCK_FOR_INSN (insn);\n+      remove_edge (split_block (to_split, insn));\n+      emit_barrier_after_bb (to_split);\n+    }\n+\n   return changed;\n }\n "}, {"sha": "414eec54c526e8792a0366ad317b931e138fad22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "patch": "@@ -1,3 +1,8 @@\n+2017-01-21  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/79125\n+\t* gcc.dg/torture/pr79125.c: New test.\n+\n 2017-01-20  Jiong Wang  <jiong.wang@arm.com>\n \n \t* testsuite/gcc.target/aarch64/return_address_sign_1.c: Enable on LP64"}, {"sha": "b5a39f560a5d7578526a8bcb52b46c40c420321f", "filename": "gcc/testsuite/gcc.dg/torture/pr79125.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79125.c?ref=ea9f867b7b5985b98e9f5c6ff9a2239f3a9e8496", "patch": "@@ -0,0 +1,32 @@\n+int za;\n+\n+void\n+hl (void)\n+{\n+  short int o8 = 0;\n+  short int m6 = 1;\n+  short int *ni = &m6;\n+\n+  for (;;)\n+    {\n+      int af;\n+      short int *fd = (short int *)&ni;\n+\n+      if (ni != 0)\n+        {\n+          if (m6 != 0)\n+            *ni = 0;\n+          else\n+            za = 0;\n+          af = (o8 * o8) || o8;\n+          if (af == 0)\n+            m6 /= 0; /* { dg-warning \"division\" } */\n+          while (za != 0)\n+            {\n+            }\n+        }\n+      *fd = &o8; /* { dg-warning \"without a cast\" } */\n+      for (af = 0; af < 2; ++af)\n+        af = za;\n+    }\n+}"}]}