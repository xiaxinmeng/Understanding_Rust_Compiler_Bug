{"sha": "f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZTg3YTkwNWNlNjFhZmEwODAzM2I3ZWViZGViOWZlNDZmMWZkNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2001-05-10T21:59:10Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2001-05-10T21:59:10Z"}, "message": "expr.c (emit_group_load): extract_bit_field requires a REG or MEM as an argument.\n\n        * expr.c (emit_group_load): extract_bit_field requires a REG or\n        MEM as an argument.\n\nFrom-SVN: r41950", "tree": {"sha": "6073238d34f30c575b259990987114e8a5c396af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6073238d34f30c575b259990987114e8a5c396af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6/comments", "author": null, "committer": null, "parents": [{"sha": "3f19b4396a250ff8701cb43f400752b08b43abd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f19b4396a250ff8701cb43f400752b08b43abd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f19b4396a250ff8701cb43f400752b08b43abd1"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "b133ccefe78a3b12baf6012104a63a85661c40c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "patch": "@@ -1,3 +1,8 @@\n+2001-05-10  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* expr.c (emit_group_load): extract_bit_field requires a REG or\n+\tMEM as an argument.\n+\n Thu May 10 14:45:44 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* jump.c (jump_optimize_1): Do not wrap the new jump target"}, {"sha": "cdabeddece74cc7a4f1190f970251c6157efddc0", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "patch": "@@ -1959,18 +1959,6 @@ emit_group_load (dst, orig_src, ssize, align)\n \n   tmps = (rtx *) alloca (sizeof (rtx) * XVECLEN (dst, 0));\n \n-  /* If we won't be loading directly from memory, protect the real source\n-     from strange tricks we might play.  */\n-  src = orig_src;\n-  if (GET_CODE (src) != MEM && ! CONSTANT_P (src))\n-    {\n-      if (GET_MODE (src) == VOIDmode)\n-\tsrc = gen_reg_rtx (GET_MODE (dst));\n-      else\n-\tsrc = gen_reg_rtx (GET_MODE (orig_src));\n-      emit_move_insn (src, orig_src);\n-    }\n-\n   /* Process the pieces.  */\n   for (i = start; i < XVECLEN (dst, 0); i++)\n     {\n@@ -1988,6 +1976,22 @@ emit_group_load (dst, orig_src, ssize, align)\n \t    abort ();\n \t}\n \n+      /* If we won't be loading directly from memory, protect the real source\n+\t from strange tricks we might play; but make sure that the source can\n+\t be loaded directly into the destination.  */\n+      src = orig_src;\n+      if (GET_CODE (orig_src) != MEM\n+\t  && (!CONSTANT_P (orig_src)\n+\t      || (GET_MODE (orig_src) != mode\n+\t\t  && GET_MODE (orig_src) != VOIDmode)))\n+\t{\n+\t  if (GET_MODE (orig_src) == VOIDmode)\n+\t    src = gen_reg_rtx (mode);\n+\t  else\n+\t    src = gen_reg_rtx (GET_MODE (orig_src));\n+\t  emit_move_insn (src, orig_src);\n+\t}\n+\n       /* Optimize the access just a bit.  */\n       if (GET_CODE (src) == MEM\n \t  && align >= GET_MODE_ALIGNMENT (mode)\n@@ -2011,8 +2015,7 @@ emit_group_load (dst, orig_src, ssize, align)\n \t  else\n \t    abort ();\n \t}\n-      else if ((CONSTANT_P (src)\n-\t\t&& (GET_MODE (src) == VOIDmode || GET_MODE (src) == mode))\n+      else if (CONSTANT_P (src)\n \t       || (GET_CODE (src) == REG && GET_MODE (src) == mode))\n \ttmps[i] = src;\n       else"}]}