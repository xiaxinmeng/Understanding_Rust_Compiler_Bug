{"sha": "23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlN2JmNmE0ZTRhYzI5ZTE5MTRiMmRhNTVkNDYwZTEyZjBkMmI4Yw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2012-03-30T09:24:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:24:09Z"}, "message": "lib-xref-alfa.adb (Generate_Dereference): Use Get_Code_Unit instead of Get_Source_Unit to get file for reference.\n\n2012-03-30  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Generate_Dereference): Use Get_Code_Unit\n\tinstead of Get_Source_Unit to get file for reference.\n\t(Traverse_Compilation_Unit): Do not add scopes for generic units.\n\t* lib-xref.adb (Generate_Reference): Use Get_Code_Unit instead\n\tof Get_Source_Unit to get file for reference.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Enable\n\tinstantiation in Alfa mode.\n\nFrom-SVN: r186002", "tree": {"sha": "97aaa7e088533c7bdf4416f7e09ade6f1aadd88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97aaa7e088533c7bdf4416f7e09ade6f1aadd88e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdc96e3ea6420085948a45fef41bece7f4b6fc1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc96e3ea6420085948a45fef41bece7f4b6fc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc96e3ea6420085948a45fef41bece7f4b6fc1b"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "0be106c724c369048bc5e6ea3961e3336cbab15e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "patch": "@@ -1,3 +1,13 @@\n+2012-03-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Generate_Dereference): Use Get_Code_Unit\n+\tinstead of Get_Source_Unit to get file for reference.\n+\t(Traverse_Compilation_Unit): Do not add scopes for generic units.\n+\t* lib-xref.adb (Generate_Reference): Use Get_Code_Unit instead\n+\tof Get_Source_Unit to get file for reference.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Enable\n+\tinstantiation in Alfa mode.\n+\n 2012-03-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Process_Declarations): Replace"}, {"sha": "5903879ba07ef5c6bf452e77f63bc25f9102bf4e", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "patch": "@@ -1051,15 +1051,13 @@ package body Alfa is\n \n       Loc       : constant Source_Ptr := Sloc (N);\n       Index     : Nat;\n-      Ref       : Source_Ptr;\n       Ref_Scope : Entity_Id;\n \n    --  Start of processing for Generate_Dereference\n \n    begin\n-      Ref := Original_Location (Loc);\n \n-      if Ref > No_Location then\n+      if Loc > No_Location then\n          Drefs.Increment_Last;\n          Index := Drefs.Last;\n \n@@ -1075,21 +1073,21 @@ package body Alfa is\n             Ref_Scope := Enclosing_Subprogram_Or_Package (N);\n \n             Deref.Ent := Heap;\n-            Deref.Loc := Ref;\n+            Deref.Loc := Loc;\n             Deref.Typ := Typ;\n \n             --  It is as if the special \"Heap\" was defined in every scope where\n             --  it is referenced.\n \n-            Deref.Eun := Get_Source_Unit (Ref);\n-            Deref.Lun := Get_Source_Unit (Ref);\n+            Deref.Eun := Get_Code_Unit (Loc);\n+            Deref.Lun := Get_Code_Unit (Loc);\n \n             Deref.Ref_Scope := Ref_Scope;\n             Deref.Ent_Scope := Ref_Scope;\n \n             Deref_Entry.Def := No_Location;\n \n-            Deref_Entry.Ent_Scope_File := Get_Source_Unit (Ref_Scope);\n+            Deref_Entry.Ent_Scope_File := Get_Code_Unit (N);\n          end;\n       end if;\n    end Generate_Dereference;\n@@ -1125,6 +1123,14 @@ package body Alfa is\n          Lu := Proper_Body (Lu);\n       end if;\n \n+      --  Do not add scopes for generic units\n+\n+      if Nkind (Lu) = N_Package_Body\n+        and then Ekind (Corresponding_Spec (Lu)) in Generic_Unit_Kind\n+      then\n+         return;\n+      end if;\n+\n       --  Call Process on all declarations\n \n       if Nkind (Lu) in N_Declaration"}, {"sha": "a328bea9d01ef2dc0074b9231c06dbaa99bad081", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "patch": "@@ -378,7 +378,6 @@ package body Lib.Xref is\n       Def            : Source_Ptr;\n       Ent            : Entity_Id;\n       Ent_Scope      : Entity_Id;\n-      Ent_Scope_File : Unit_Number_Type;\n       Formal         : Entity_Id;\n       Kind           : Entity_Kind;\n       Nod            : Node_Id;\n@@ -633,6 +632,16 @@ package body Lib.Xref is\n            or else Typ = 'i'\n            or else Typ = 'k'\n            or else (Typ = 'b' and then Is_Generic_Instance (E))\n+\n+            --  Allow the generation of references to reads, writes and calls\n+            --  in Alfa mode when the related context comes from an instance.\n+\n+           or else\n+             (Alfa_Mode\n+                and then In_Extended_Main_Code_Unit (N)\n+                and then (Typ = 'm'\n+                            or else Typ = 'r'\n+                            or else Typ = 's'))\n          then\n             null;\n          else\n@@ -880,11 +889,12 @@ package body Lib.Xref is\n \n          --  Ignore references from within an instance. The only exceptions to\n          --  this are default subprograms, for which we generate an implicit\n-         --  reference.\n+         --  reference and compilations in Alfa_Mode.\n \n          and then\n            (Instantiation_Location (Sloc (N)) = No_Location\n-              or else Typ = 'i')\n+              or else Typ = 'i'\n+              or else Alfa_Mode)\n \n          --  Ignore dummy references\n \n@@ -995,9 +1005,6 @@ package body Lib.Xref is\n \n          --  Record reference to entity\n \n-         Ref := Original_Location (Sloc (Nod));\n-         Def := Original_Location (Sloc (Ent));\n-\n          if Actual_Typ = 'p'\n            and then Is_Subprogram (Nod)\n            and then Present (Overridden_Operation (Nod))\n@@ -1006,6 +1013,9 @@ package body Lib.Xref is\n          end if;\n \n          if Alfa_Mode then\n+            Ref := Sloc (Nod);\n+            Def := Sloc (Ent);\n+\n             Ref_Scope := Alfa.Enclosing_Subprogram_Or_Package (Nod);\n             Ent_Scope := Alfa.Enclosing_Subprogram_Or_Package (Ent);\n \n@@ -1018,22 +1028,30 @@ package body Lib.Xref is\n                return;\n             end if;\n \n-            Ent_Scope_File := Get_Source_Unit (Ent_Scope);\n+            Add_Entry\n+              ((Ent      => Ent,\n+                Loc       => Ref,\n+                Typ       => Actual_Typ,\n+                Eun       => Get_Code_Unit (Def),\n+                Lun       => Get_Code_Unit (Ref),\n+                Ref_Scope => Ref_Scope,\n+                Ent_Scope => Ent_Scope),\n+               Ent_Scope_File => Get_Code_Unit (Ent));\n+\n          else\n-            Ref_Scope := Empty;\n-            Ent_Scope := Empty;\n-            Ent_Scope_File := No_Unit;\n+            Ref := Original_Location (Sloc (Nod));\n+            Def := Original_Location (Sloc (Ent));\n+\n+            Add_Entry\n+              ((Ent      => Ent,\n+                Loc       => Ref,\n+                Typ       => Actual_Typ,\n+                Eun       => Get_Source_Unit (Def),\n+                Lun       => Get_Source_Unit (Ref),\n+                Ref_Scope => Empty,\n+                Ent_Scope => Empty),\n+               Ent_Scope_File => No_Unit);\n          end if;\n-\n-         Add_Entry\n-           ((Ent => Ent,\n-             Loc => Ref,\n-             Typ => Actual_Typ,\n-             Eun => Get_Source_Unit (Def),\n-             Lun => Get_Source_Unit (Ref),\n-             Ref_Scope => Ref_Scope,\n-             Ent_Scope => Ent_Scope),\n-            Ent_Scope_File => Ent_Scope_File);\n       end if;\n    end Generate_Reference;\n "}, {"sha": "159594fe6ddcc80d9a66786892f6f1ca6f230b21", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=23e7bf6a4e4ac29e1914b2da55d460e12f0d2b8c", "patch": "@@ -3704,7 +3704,6 @@ package body Sem_Ch12 is\n                            or else Might_Inline_Subp)\n                 and then not Is_Actual_Pack\n                 and then not Inline_Now\n-                and then not Alfa_Mode\n                 and then (Operating_Mode = Generate_Code\n                            or else (Operating_Mode = Check_Semantics\n                                      and then ASIS_Mode));"}]}