{"sha": "374f5bf801f8487193ddd1e73027af1df8221f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0ZjViZjgwMWY4NDg3MTkzZGRkMWU3MzAyN2FmMWRmODIyMWYzZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-08-18T18:00:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-08-18T18:00:52Z"}, "message": "re PR target/62011 (False Data Dependency in popcnt instruction)\n\n\tPR target/62011\n\t* config/i386/x86-tune.def (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI):\n\tNew tune flag.\n\t* config/i386/i386.h (TARGET_AVOID_FALSE_DEP_FOR_BMI): New define.\n\t* config/i386/i386.md (unspec) <UNSPEC_INSN_FALSE_DEP>: New unspec.\n\t(ffs<mode>2): Do not expand with tzcnt for\n\tTARGET_AVOID_FALSE_DEP_FOR_BMI.\n\t(ffssi2_no_cmove): Ditto.\n\t(*tzcnt<mode>_1): Disable for TARGET_AVOID_FALSE_DEP_FOR_BMI.\n\t(ctz<mode>2): New expander.\n\t(*ctz<mode>2_falsedep_1): New insn_and_split pattern.\n\t(*ctz<mode>2_falsedep): New insn.\n\t(*ctz<mode>2): Rename from ctz<mode>2.\n\t(clz<mode>2_lzcnt): New expander.\n\t(*clz<mode>2_lzcnt_falsedep_1): New insn_and_split pattern.\n\t(*clz<mode>2_lzcnt_falsedep): New insn.\n\t(*clz<mode>2): Rename from ctz<mode>2.\n\t(popcount<mode>2): New expander.\n\t(*popcount<mode>2_falsedep_1): New insn_and_split pattern.\n\t(*popcount<mode>2_falsedep): New insn.\n\t(*popcount<mode>2): Rename from ctz<mode>2.\n\t(*popcount<mode>2_cmp): Remove.\n\t(*popcountsi2_cmp_zext): Ditto.\n\nFrom-SVN: r214112", "tree": {"sha": "7fec0943b3fc05b76acaabb85db4e1e275c7040e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fec0943b3fc05b76acaabb85db4e1e275c7040e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/374f5bf801f8487193ddd1e73027af1df8221f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374f5bf801f8487193ddd1e73027af1df8221f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374f5bf801f8487193ddd1e73027af1df8221f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374f5bf801f8487193ddd1e73027af1df8221f3e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6b0bb1c4e7c811893ef7d97b3c446bcced1d82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b0bb1c4e7c811893ef7d97b3c446bcced1d82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b0bb1c4e7c811893ef7d97b3c446bcced1d82c"}], "stats": {"total": 196, "additions": 159, "deletions": 37}, "files": [{"sha": "8674f949b4b2d01745b0de887fa90d08339846a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=374f5bf801f8487193ddd1e73027af1df8221f3e", "patch": "@@ -1,3 +1,29 @@\n+2014-08-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/62011\n+\t* config/i386/x86-tune.def (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI):\n+\tNew tune flag.\n+\t* config/i386/i386.h (TARGET_AVOID_FALSE_DEP_FOR_BMI): New define.\n+\t* config/i386/i386.md (unspec) <UNSPEC_INSN_FALSE_DEP>: New unspec.\n+\t(ffs<mode>2): Do not expand with tzcnt for\n+\tTARGET_AVOID_FALSE_DEP_FOR_BMI.\n+\t(ffssi2_no_cmove): Ditto.\n+\t(*tzcnt<mode>_1): Disable for TARGET_AVOID_FALSE_DEP_FOR_BMI.\n+\t(ctz<mode>2): New expander.\n+\t(*ctz<mode>2_falsedep_1): New insn_and_split pattern.\n+\t(*ctz<mode>2_falsedep): New insn.\n+\t(*ctz<mode>2): Rename from ctz<mode>2.\n+\t(clz<mode>2_lzcnt): New expander.\n+\t(*clz<mode>2_lzcnt_falsedep_1): New insn_and_split pattern.\n+\t(*clz<mode>2_lzcnt_falsedep): New insn.\n+\t(*clz<mode>2): Rename from ctz<mode>2.\n+\t(popcount<mode>2): New expander.\n+\t(*popcount<mode>2_falsedep_1): New insn_and_split pattern.\n+\t(*popcount<mode>2_falsedep): New insn.\n+\t(*popcount<mode>2): Rename from ctz<mode>2.\n+\t(*popcount<mode>2_cmp): Remove.\n+\t(*popcountsi2_cmp_zext): Ditto.\n+\n 2014-08-18  Ajit Agarwal  <ajitkum@xilinx.com>\n \n \t* config/microblaze/microblaze.c (microblaze_elf_asm_cdtor): New."}, {"sha": "ec6ed2535e91b5a321f8c6cb097d9ad623345ad3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=374f5bf801f8487193ddd1e73027af1df8221f3e", "patch": "@@ -473,6 +473,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS]\n #define TARGET_ADJUST_UNROLL \\\n     ix86_tune_features[X86_TUNE_ADJUST_UNROLL]\n+#define TARGET_AVOID_FALSE_DEP_FOR_BMI \\\n+\tix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "4749b74294e88ca543580993df3a315536359af5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 126, "deletions": 37, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=374f5bf801f8487193ddd1e73027af1df8221f3e", "patch": "@@ -112,6 +112,7 @@\n   UNSPEC_XBEGIN_ABORT\n   UNSPEC_STOS\n   UNSPEC_PEEPSIB\n+  UNSPEC_INSN_FALSE_DEP\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -12197,7 +12198,8 @@\n       DONE;\n     }\n \n-  flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n+  flags_mode\n+    = (TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI) ? CCCmode : CCZmode;\n \n   operands[2] = gen_reg_rtx (<MODE>mode);\n   operands[3] = gen_rtx_REG (flags_mode, FLAGS_REG);\n@@ -12223,7 +12225,8 @@\n    (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  enum machine_mode flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n+  enum machine_mode flags_mode\n+    = (TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI) ? CCCmode : CCZmode;\n \n   operands[3] = gen_lowpart (QImode, operands[2]);\n   operands[4] = gen_rtx_REG (flags_mode, FLAGS_REG);\n@@ -12238,7 +12241,7 @@\n \t\t     (const_int 0)))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(ctz:SWI48 (match_dup 1)))]\n-  \"TARGET_BMI\"\n+  \"TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI\"\n   \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n@@ -12259,7 +12262,52 @@\n    (set_attr \"btver2_decode\" \"double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"ctz<mode>2\"\n+(define_expand \"ctz<mode>2\"\n+  [(parallel\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (ctz:SWI248\n+\t    (match_operand:SWI248 1 \"nonimmediate_operand\")))\n+     (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_insn_and_split \"*ctz<mode>2_falsedep_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=&r\")\n+\t(ctz:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_BMI || TARGET_GENERIC)\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (ctz:SWI48 (match_dup 1)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\")\n+\n+(define_insn \"*ctz<mode>2_falsedep\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+{\n+  if (TARGET_BMI)\n+    return \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  else if (TARGET_GENERIC)\n+    /* tzcnt expands to 'rep bsf' and we can use it even if !TARGET_BMI.  */\n+    return \"rep%; bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  else\n+    gcc_unreachable ();\n+}\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*ctz<mode>2\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(ctz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -12306,7 +12354,44 @@\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n })\n \n-(define_insn \"clz<mode>2_lzcnt\"\n+(define_expand \"clz<mode>2_lzcnt\"\n+  [(parallel\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (clz:SWI248\n+\t    (match_operand:SWI248 1 \"nonimmediate_operand\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_LZCNT\")\n+\n+(define_insn_and_split \"*clz<mode>2_lzcnt_falsedep_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=&r\")\n+\t(clz:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (clz:SWI48 (match_dup 1)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\")\n+\n+(define_insn \"*clz<mode>2_lzcnt_falsedep\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(clz:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\"\n+  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*clz<mode>2_lzcnt\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -12589,10 +12674,36 @@\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"popcount<mode>2\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(popcount:SWI248\n-\t  (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n+(define_expand \"popcount<mode>2\"\n+  [(parallel\n+    [(set (match_operand:SWI248 0 \"register_operand\")\n+\t  (popcount:SWI248\n+\t    (match_operand:SWI248 1 \"nonimmediate_operand\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_POPCNT\")\n+\n+(define_insn_and_split \"*popcount<mode>2_falsedep_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=&r\")\n+\t(popcount:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_POPCNT\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (popcount:SWI48 (match_dup 1)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\")\n+\n+(define_insn \"*popcount<mode>2_falsedep\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(popcount:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_POPCNT\"\n {\n@@ -12606,15 +12717,12 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*popcount<mode>2_cmp\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (popcount:SWI248\n-\t    (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\"))\n-\t  (const_int 0)))\n-   (set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(popcount:SWI248 (match_dup 1)))]\n-  \"TARGET_POPCNT && ix86_match_ccmode (insn, CCZmode)\"\n+(define_insn \"*popcount<mode>2\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(popcount:SWI248\n+\t  (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_POPCNT\"\n {\n #if TARGET_MACHO\n   return \"popcnt\\t{%1, %0|%0, %1}\";\n@@ -12626,25 +12734,6 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*popcountsi2_cmp_zext\"\n-  [(set (reg FLAGS_REG)\n-        (compare\n-          (popcount:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n-          (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (zero_extend:DI(popcount:SI (match_dup 1))))]\n-  \"TARGET_64BIT && TARGET_POPCNT && ix86_match_ccmode (insn, CCZmode)\"\n-{\n-#if TARGET_MACHO\n-  return \"popcnt\\t{%1, %0|%0, %1}\";\n-#else\n-  return \"popcnt{l}\\t{%1, %0|%0, %1}\";\n-#endif\n-}\n-  [(set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"type\" \"bitmanip\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_expand \"bswapdi2\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(bswap:DI (match_operand:DI 1 \"nonimmediate_operand\")))]"}, {"sha": "215c63c3957d4883035dc291b51a783239eeabfd", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/374f5bf801f8487193ddd1e73027af1df8221f3e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=374f5bf801f8487193ddd1e73027af1df8221f3e", "patch": "@@ -509,6 +509,11 @@ DEF_TUNE (X86_TUNE_NOT_VECTORMODE, \"not_vectormode\", m_K6)\n DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n           m_K8)\n \n+/* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n+   for bit-manipulation instructions.  */\n+DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n+\t  m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n+\n /*****************************************************************************/\n /* This never worked well before.                                            */\n /*****************************************************************************/"}]}