{"sha": "3ebacabd0ec9e8460212c5d4f57dc1d733445915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViYWNhYmQwZWM5ZTg0NjAyMTJjNWQ0ZjU3ZGMxZDczMzQ0NTkxNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-06-17T18:28:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-06-17T18:28:34Z"}, "message": "libstdc++/71545 fix debug checks in binary search algorithms\n\n\tPR libstdc++/71545\n\t* include/bits/stl_algobase.h (lower_bound, lexicographical_compare):\n\tRemove irreflexive checks.\n\t* include/bits/stl_algo.h (lower_bound, upper_bound, equal_range,\n\tbinary_search): Likewise.\n\t* testsuite/25_algorithms/equal_range/partitioned.cc: New test.\n\t* testsuite/25_algorithms/lexicographical_compare/71545.cc: New test.\n\t* testsuite/25_algorithms/lower_bound/partitioned.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/partitioned.cc: New test.\n\t* testsuite/util/testsuite_iterators.h (__gnu_test::test_container):\n\tAdd constructor from array.\n\nFrom-SVN: r237560", "tree": {"sha": "b47d0c5bf30dabc9cbda52b50f3846cdf48a576a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b47d0c5bf30dabc9cbda52b50f3846cdf48a576a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebacabd0ec9e8460212c5d4f57dc1d733445915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebacabd0ec9e8460212c5d4f57dc1d733445915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebacabd0ec9e8460212c5d4f57dc1d733445915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebacabd0ec9e8460212c5d4f57dc1d733445915/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0766b9ab92133db3262da6e2a7d8d9e8ea9ec742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0766b9ab92133db3262da6e2a7d8d9e8ea9ec742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0766b9ab92133db3262da6e2a7d8d9e8ea9ec742"}], "stats": {"total": 399, "additions": 387, "deletions": 12}, "files": [{"sha": "a97485171146b07993858a0aa5b95843a42018d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -1,3 +1,17 @@\n+2016-06-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71545\n+\t* include/bits/stl_algobase.h (lower_bound, lexicographical_compare):\n+\tRemove irreflexive checks.\n+\t* include/bits/stl_algo.h (lower_bound, upper_bound, equal_range,\n+\tbinary_search): Likewise.\n+\t* testsuite/25_algorithms/equal_range/partitioned.cc: New test.\n+\t* testsuite/25_algorithms/lexicographical_compare/71545.cc: New test.\n+\t* testsuite/25_algorithms/lower_bound/partitioned.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/partitioned.cc: New test.\n+\t* testsuite/util/testsuite_iterators.h (__gnu_test::test_container):\n+\tAdd constructor from array.\n+\n 2016-06-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/debug.h"}, {"sha": "c2ac0317f172e88d9aea60adacee671c4b36eb95", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -2026,7 +2026,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp));\n@@ -2080,7 +2079,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<\n \t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_less_iter());\n@@ -2112,7 +2110,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_comp_iter(__comp));\n@@ -2186,7 +2183,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val(),\n@@ -2225,7 +2221,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp),\n@@ -2255,7 +2250,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Tp, typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,\n@@ -2291,7 +2285,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n-      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,"}, {"sha": "210b173454559fb0a4d1c5b2fb1ed1962677f29d", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -989,7 +989,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n-      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val());\n@@ -1214,9 +1213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-      __glibcxx_requires_irreflexive2(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n-      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return std::__lexicographical_compare_aux(std::__niter_base(__first1),\n \t\t\t\t\t\tstd::__niter_base(__last1),\n@@ -1246,9 +1243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_II1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_II2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n       __glibcxx_requires_valid_range(__first2, __last2);\n-      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return std::__lexicographical_compare_impl\n \t(__first1, __last1, __first2, __last2,"}, {"sha": "63a6cada97e62a693e2c4262dd1850141a2c2e09", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/partitioned.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fpartitioned.cc?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG\" }\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X\n+{\n+  int val;\n+\n+  bool odd() const { return val % 2; }\n+\n+  // Partitioned so that all odd values come before even values:\n+  bool operator<(const X& x) const { return this->odd() && !x.odd(); }\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test with range that is partitioned, but not sorted.\n+  X seq[] = { 1, 3, 5, 7, 1, 6, 4 };\n+  test_container<X, forward_iterator_wrapper> c(seq);\n+\n+  auto b1 = std::binary_search(c.begin(), c.end(), X{2});\n+  VERIFY( b1 );\n+  auto b2 = std::binary_search(c.begin(), c.end(), X{2}, std::less<X>{});\n+  VERIFY( b2 );\n+\n+  auto b3 = std::binary_search(c.begin(), c.end(), X{9});\n+  VERIFY( b3 );\n+  auto b4 = std::binary_search(c.begin(), c.end(), X{9}, std::less<X>{});\n+  VERIFY( b4 );\n+\n+  auto b5 = std::binary_search(seq, seq+5, X{2});\n+  VERIFY( !b5 );\n+  auto b6 = std::binary_search(seq, seq+5, X{2}, std::less<X>{});\n+  VERIFY( !b6 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "d3a43d06a583cf681cf02bb0e486926ca4bcfed2", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/partitioned.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fpartitioned.cc?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG\" }\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X\n+{\n+  int val;\n+\n+  bool odd() const { return val % 2; }\n+\n+  // Partitioned so that all odd values come before even values:\n+  bool operator<(const X& x) const { return this->odd() && !x.odd(); }\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test with range that is partitioned, but not sorted.\n+  X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n+  test_container<X, forward_iterator_wrapper> c(seq);\n+\n+  auto part1 = std::equal_range(c.begin(), c.end(), X{2});\n+  VERIFY( part1.first != c.end() && part1.second == c.end() );\n+  VERIFY( part1.first->val == 6 );\n+  auto part2 = std::equal_range(c.begin(), c.end(), X{2}, std::less<X>{});\n+  VERIFY( part2.first != c.end() && part1.second == c.end() );\n+  VERIFY( part2.first->val == 6 );\n+\n+  auto part3 = std::equal_range(c.begin(), c.end(), X{9});\n+  VERIFY( part3.first == c.begin() && part3.second != c.end() );\n+  VERIFY( part3.second->val == 6 );\n+  auto part4 = std::equal_range(c.begin(), c.end(), X{9}, std::less<X>{});\n+  VERIFY( part4.first == c.begin() && part4.second != c.end() );\n+  VERIFY( part4.second->val == 6 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "6c9cd12cfef47c228564ff58b50a59b8771a373d", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/71545.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F71545.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F71545.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F71545.cc?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG\" }\n+// { dg-do link }\n+\n+#include <algorithm>\n+\n+struct X { };\n+\n+bool operator<(X, int) { return true; }\n+bool operator<(int, X) { return false; }\n+\n+bool operator<(X, X); // undefined (PR libstdc++/71545)\n+\n+int main()\n+{\n+  X x[1];\n+  int i[1];\n+  std::lexicographical_compare(x, x+1, i, i+1);\n+}"}, {"sha": "bba0b66ea808450823222a7b15053317fcd009fc", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/partitioned.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fpartitioned.cc?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -0,0 +1,100 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG\" }\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X\n+{\n+  int val;\n+\n+  bool odd() const { return val % 2; }\n+\n+  // Partitioned so that all odd values come before even values:\n+  bool operator<(const X& x) const { return this->odd() && !x.odd(); }\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test with range that is partitioned, but not sorted.\n+  X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n+  test_container<X, forward_iterator_wrapper> c(seq);\n+\n+  auto part1 = std::lower_bound(c.begin(), c.end(), X{2});\n+  VERIFY( part1 != c.end() );\n+  VERIFY( part1->val == 6 );\n+  auto part2 = std::lower_bound(c.begin(), c.end(), X{2}, std::less<X>{});\n+  VERIFY( part2 != c.end() );\n+  VERIFY( part2->val == 6 );\n+\n+  auto part3 = std::lower_bound(c.begin(), c.end(), X{9});\n+  VERIFY( part3 != c.end() );\n+  VERIFY( part3->val == 1 );\n+  auto part4 = std::lower_bound(c.begin(), c.end(), X{9}, std::less<X>{});\n+  VERIFY( part4 != c.end() );\n+  VERIFY( part4->val == 1 );\n+}\n+\n+struct Y\n+{\n+  double val;\n+\n+  // Not irreflexive, so not a strict weak order.\n+  bool operator<(const Y& y) const { return val < int(y.val); }\n+};\n+\n+void\n+test02()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test that Debug Mode checks don't fire (libstdc++/71545)\n+\n+  Y seq[] = { -0.1, 1.2, 5.0, 5.2, 5.1, 5.9, 5.5, 6.0 };\n+  test_container<Y, forward_iterator_wrapper> c(seq);\n+\n+  auto part1 = std::lower_bound(c.begin(), c.end(), Y{5.5});\n+  VERIFY( part1 != c.end() );\n+  VERIFY( part1->val == 5.0 );\n+  auto part2 = std::lower_bound(c.begin(), c.end(), Y{5.5}, std::less<Y>{});\n+  VERIFY( part2 != c.end() );\n+  VERIFY( part2->val == 5.0 );\n+\n+  auto part3 = std::lower_bound(c.begin(), c.end(), Y{1.0});\n+  VERIFY( part3 != c.end() );\n+  VERIFY( part3->val == 1.2 );\n+  auto part4 = std::lower_bound(c.begin(), c.end(), Y{1.0}, std::less<Y>{});\n+  VERIFY( part4 != c.end() );\n+  VERIFY( part4->val == 1.2 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "96cfb2e2ded0a8114c00c0e5be2d6135e7dba078", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/partitioned.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fpartitioned.cc?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG\" }\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X\n+{\n+  int val;\n+\n+  bool odd() const { return val % 2; }\n+\n+  // Partitioned so that all odd values come before even values:\n+  bool operator<(const X& x) const { return this->odd() && !x.odd(); }\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test with range that is partitioned, but not sorted.\n+  X seq[] = { 1, 3, 5, 7, 1, 6, 4, 2 };\n+  test_container<X, forward_iterator_wrapper> c(seq);\n+\n+  auto part1 = std::upper_bound(c.begin(), c.end(), X{2});\n+  VERIFY( part1 == c.end() );\n+  auto part2 = std::upper_bound(c.begin(), c.end(), X{2}, std::less<X>{});\n+  VERIFY( part2 == c.end() );\n+\n+  auto part3 = std::upper_bound(c.begin(), c.end(), X{9});\n+  VERIFY( part3 != c.end() );\n+  VERIFY( part3->val == 6 );\n+  auto part4 = std::upper_bound(c.begin(), c.end(), X{9}, std::less<X>{});\n+  VERIFY( part3 != c.end() );\n+  VERIFY( part4->val == 6 );\n+}\n+\n+struct Y\n+{\n+  double val;\n+\n+  // Not irreflexive, so not a strict weak order.\n+  bool operator<(const Y& y) const { return val < (int)y.val; }\n+};\n+\n+void\n+test02()\n+{\n+  bool test __attribute((unused)) = true;\n+\n+  // Test that Debug Mode checks don't fire (libstdc++/71545)\n+\n+  Y seq[] = { -0.1, 1.2, 5.0, 5.2, 5.1, 5.9, 5.5, 6.0 };\n+  test_container<Y, forward_iterator_wrapper> c(seq);\n+\n+  auto part1 = std::upper_bound(c.begin(), c.end(), Y{5.5});\n+  VERIFY( part1 != c.end() );\n+  VERIFY( part1->val == 6.0 );\n+  auto part2 = std::upper_bound(c.begin(), c.end(), Y{5.5}, std::less<Y>{});\n+  VERIFY( part2 != c.end() );\n+  VERIFY( part2->val == 6.0 );\n+\n+  auto part3 = std::upper_bound(c.begin(), c.end(), Y{1.0});\n+  VERIFY( part3 != c.end() );\n+  VERIFY( part3->val == 5.0 );\n+  auto part4 = std::upper_bound(c.begin(), c.end(), Y{1.0}, std::less<Y>{});\n+  VERIFY( part4 != c.end() );\n+  VERIFY( part4->val == 5.0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "53c9b3d4f643a2e3d8b898af05b98b142f0bce8e", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebacabd0ec9e8460212c5d4f57dc1d733445915/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=3ebacabd0ec9e8460212c5d4f57dc1d733445915", "patch": "@@ -542,6 +542,13 @@ namespace __gnu_test\n     test_container(T* _first, T* _last):bounds(_first, _last)\n     { }\n \n+#if __cplusplus >= 201103L\n+      template<std::size_t N>\n+\texplicit\n+\ttest_container(T (&arr)[N]) : test_container(arr, arr+N)\n+\t{ }\n+#endif\n+\n     ItType<T>\n     it(int pos)\n     {"}]}