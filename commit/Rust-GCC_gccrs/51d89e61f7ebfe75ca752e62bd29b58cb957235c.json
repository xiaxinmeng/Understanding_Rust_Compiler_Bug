{"sha": "51d89e61f7ebfe75ca752e62bd29b58cb957235c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFkODllNjFmN2ViZmU3NWNhNzUyZTYyYmQyOWI1OGNiOTU3MjM1Yw==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-05-10T18:49:06Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2021-05-10T18:49:06Z"}, "message": "Add ALTIVEC_REGS as pressure class.\n\nCode that has heavy register pressure on Altivec registers can suffer from\nover-aggressive scheduling during sched1, which then leads to increased\nregister spill. This is due to the fact that registers that prefer\nALTIVEC_REGS are currently assigned an allocno class of VSX_REGS. This then\nmisleads the scheduler to think there are 64 regs available, when in reality\nthere are only 32 Altivec regs. This patch fixes the problem by assigning an\nallocno class of ALTIVEC_REGS and adding ALTIVEC_REGS as a pressure class.\n\n2021-05-10  Pat Haugen  <pthaugen@linux.ibm.com>\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.c (rs6000_ira_change_pseudo_allocno_class):\n\tReturn ALTIVEC_REGS if that is best_class.\n\t(rs6000_compute_pressure_classes): Add ALTIVEC_REGS.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Adjust counts.\n\t* gcc.target/powerpc/vec-rlmi-rlnm.c: Likewise.", "tree": {"sha": "03c652519f171317f9b62d2249ba6da35d7f33b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c652519f171317f9b62d2249ba6da35d7f33b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51d89e61f7ebfe75ca752e62bd29b58cb957235c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d89e61f7ebfe75ca752e62bd29b58cb957235c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d89e61f7ebfe75ca752e62bd29b58cb957235c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d89e61f7ebfe75ca752e62bd29b58cb957235c/comments", "author": null, "committer": null, "parents": [{"sha": "e85f3aeddbdba27ec883bb85a58f96615726da32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85f3aeddbdba27ec883bb85a58f96615726da32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85f3aeddbdba27ec883bb85a58f96615726da32"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "c852fb8784847e451294752da13d29a8599b713f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=51d89e61f7ebfe75ca752e62bd29b58cb957235c", "patch": "@@ -22527,11 +22527,14 @@ rs6000_ira_change_pseudo_allocno_class (int regno ATTRIBUTE_UNUSED,\n \t of allocno class.  */\n       if (best_class == BASE_REGS)\n \treturn GENERAL_REGS;\n-      if (TARGET_VSX\n-\t  && (best_class == FLOAT_REGS || best_class == ALTIVEC_REGS))\n+      if (TARGET_VSX && best_class == FLOAT_REGS)\n \treturn VSX_REGS;\n       return best_class;\n \n+    case VSX_REGS:\n+      if (best_class == ALTIVEC_REGS)\n+\treturn ALTIVEC_REGS;\n+\n     default:\n       break;\n     }\n@@ -23649,12 +23652,12 @@ rs6000_compute_pressure_classes (enum reg_class *pressure_classes)\n \n   n = 0;\n   pressure_classes[n++] = GENERAL_REGS;\n+  if (TARGET_ALTIVEC)\n+    pressure_classes[n++] = ALTIVEC_REGS;\n   if (TARGET_VSX)\n     pressure_classes[n++] = VSX_REGS;\n   else\n     {\n-      if (TARGET_ALTIVEC)\n-\tpressure_classes[n++] = ALTIVEC_REGS;\n       if (TARGET_HARD_FLOAT)\n \tpressure_classes[n++] = FLOAT_REGS;\n     }"}, {"sha": "45417680e33e713ed487135ded5a5614231130ba", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c?ref=51d89e61f7ebfe75ca752e62bd29b58cb957235c", "patch": "@@ -31,5 +31,5 @@ testf_cst (float f, vector float vf)\n /* { dg-final { scan-assembler-times {\\mstfs\\M} 2 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 2 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 1 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mxxperm\\M} 2 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 2 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mxxperm\\M} 1 { target ilp32 } } } */"}, {"sha": "5512c0f150e44807f630760da982d3ea2be4aa98", "filename": "gcc/testsuite/gcc.target/powerpc/vec-rlmi-rlnm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d89e61f7ebfe75ca752e62bd29b58cb957235c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c?ref=51d89e61f7ebfe75ca752e62bd29b58cb957235c", "patch": "@@ -62,6 +62,6 @@ rlnm_test_2 (vector unsigned long long x, vector unsigned long long y,\n /* { dg-final { scan-assembler-times \"vextsb2d\" 1 } } */\n /* { dg-final { scan-assembler-times \"vslw\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsld\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlor\" 3 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrlwnm\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrldnm\" 2 } } */"}]}