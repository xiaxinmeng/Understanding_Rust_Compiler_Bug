{"sha": "7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1NWZlYTZkN2M2ZTQwYzc2OWQwNGZjNGVkNDJkNmM1NTY5NDFkZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:09:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:09:27Z"}, "message": "[multiple changes]\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (P_Allocator): In Ada 2012 (AI05-0104)  an\n\tuninitialized allocator cannot carry an explicit not null\n\tindicator.\n\t* sem_ch4.adb (Analyze_Allocator): Remove code that implements\n\tthe check for AI05-0104, the check is syntactic and performed\n\tin the parser.\n\n2012-12-05  Geert Bosch  <bosch@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Use base type for floating\n\tpoint attributes.\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n\tAhalyze_Aspect_Default_Value): For a scalar type attach default\n\tvalue to base type as well, because it is a type-specific aspect\n\teven though it can be specified on a first subtype.\n\nFrom-SVN: r194209", "tree": {"sha": "655cc35ad95f814858ac44b6a255937955b9e73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655cc35ad95f814858ac44b6a255937955b9e73b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/comments", "author": null, "committer": null, "parents": [{"sha": "c6fc9e439afc212da3274b7f1abcb869ac44e22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fc9e439afc212da3274b7f1abcb869ac44e22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6fc9e439afc212da3274b7f1abcb869ac44e22d"}], "stats": {"total": 100, "additions": 76, "deletions": 24}, "files": [{"sha": "de4c3cafa4042b47940461b1ccb5596ee9816208", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "patch": "@@ -1,3 +1,24 @@\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_Allocator): In Ada 2012 (AI05-0104)  an\n+\tuninitialized allocator cannot carry an explicit not null\n+\tindicator.\n+\t* sem_ch4.adb (Analyze_Allocator): Remove code that implements\n+\tthe check for AI05-0104, the check is syntactic and performed\n+\tin the parser.\n+\n+2012-12-05  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Use base type for floating\n+\tpoint attributes.\n+\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n+\tAhalyze_Aspect_Default_Value): For a scalar type attach default\n+\tvalue to base type as well, because it is a type-specific aspect\n+\teven though it can be specified on a first subtype.\n+\n 2012-12-05  Yannick Moy  <moy@adacore.com>\n \n \t* urealp.ads: Minor rewording."}, {"sha": "4ea664d0bc23f26cb8750cb2a892f3a851e46007", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "patch": "@@ -2928,6 +2928,18 @@ package body Ch4 is\n          Set_Expression\n            (Alloc_Node,\n             P_Subtype_Indication (Type_Node, Null_Exclusion_Present));\n+\n+         --  AI05-0104 :  an explicit null exclusion is not allowed for an\n+         --  allocator without initialization. In previous versions of the\n+         --  language it just raises constraint error.\n+\n+         if Ada_Version >= Ada_2012\n+           and then Null_Exclusion_Present\n+         then\n+            Error_Msg_N\n+              (\"an allocator with a subtype indication \"\n+                & \"cannot have a null exclusion\", Alloc_Node);\n+         end if;\n       end if;\n \n       return Alloc_Node;"}, {"sha": "a6ac9cae5485a9e02813b37b310cb25fd1a5fe42", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "patch": "@@ -6834,6 +6834,9 @@ package body Sem_Attr is\n       --  non-static subtypes, even though such references are not static\n       --  expressions.\n \n+      --  For VAX float, the root type is an IEEE type. So make sure to use the\n+      --  base type instead of the root-type for floating point attributes.\n+\n       case Id is\n \n          --  Attributes related to Ada 2012 iterators (placeholder ???)\n@@ -6858,7 +6861,7 @@ package body Sem_Attr is\n       when Attribute_Adjacent =>\n          Fold_Ureal (N,\n            Eval_Fat.Adjacent\n-             (P_Root_Type, Expr_Value_R (E1), Expr_Value_R (E2)), Static);\n+             (P_Base_Type, Expr_Value_R (E1), Expr_Value_R (E2)), Static);\n \n       ---------\n       -- Aft --\n@@ -6944,7 +6947,7 @@ package body Sem_Attr is\n \n       when Attribute_Ceiling =>\n          Fold_Ureal (N,\n-           Eval_Fat.Ceiling (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Ceiling (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       --------------------\n       -- Component_Size --\n@@ -6962,7 +6965,7 @@ package body Sem_Attr is\n       when Attribute_Compose =>\n          Fold_Ureal (N,\n            Eval_Fat.Compose\n-             (P_Root_Type, Expr_Value_R (E1), Expr_Value (E2)),\n+             (P_Base_Type, Expr_Value_R (E1), Expr_Value (E2)),\n               Static);\n \n       -----------------\n@@ -6982,7 +6985,7 @@ package body Sem_Attr is\n       when Attribute_Copy_Sign =>\n          Fold_Ureal (N,\n            Eval_Fat.Copy_Sign\n-             (P_Root_Type, Expr_Value_R (E1), Expr_Value_R (E2)), Static);\n+             (P_Base_Type, Expr_Value_R (E1), Expr_Value_R (E2)), Static);\n \n       --------------\n       -- Definite --\n@@ -7108,7 +7111,7 @@ package body Sem_Attr is\n \n       when Attribute_Exponent =>\n          Fold_Uint (N,\n-           Eval_Fat.Exponent (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Exponent (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       -----------\n       -- First --\n@@ -7178,7 +7181,7 @@ package body Sem_Attr is\n \n       when Attribute_Floor =>\n          Fold_Ureal (N,\n-           Eval_Fat.Floor (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Floor (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       ----------\n       -- Fore --\n@@ -7195,7 +7198,7 @@ package body Sem_Attr is\n \n       when Attribute_Fraction =>\n          Fold_Ureal (N,\n-           Eval_Fat.Fraction (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Fraction (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       -----------------------\n       -- Has_Access_Values --\n@@ -7415,7 +7418,7 @@ package body Sem_Attr is\n       when Attribute_Leading_Part =>\n          Fold_Ureal (N,\n            Eval_Fat.Leading_Part\n-             (P_Root_Type, Expr_Value_R (E1), Expr_Value (E2)), Static);\n+             (P_Base_Type, Expr_Value_R (E1), Expr_Value (E2)), Static);\n \n       ------------\n       -- Length --\n@@ -7497,7 +7500,7 @@ package body Sem_Attr is\n       when Attribute_Machine =>\n          Fold_Ureal (N,\n            Eval_Fat.Machine\n-             (P_Root_Type, Expr_Value_R (E1), Eval_Fat.Round, N),\n+             (P_Base_Type, Expr_Value_R (E1), Eval_Fat.Round, N),\n            Static);\n \n       ------------------\n@@ -7572,7 +7575,7 @@ package body Sem_Attr is\n \n       when Attribute_Machine_Rounding =>\n          Fold_Ureal (N,\n-           Eval_Fat.Rounding (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Rounding (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       --------------------\n       -- Machine_Rounds --\n@@ -7803,7 +7806,7 @@ package body Sem_Attr is\n \n       when Attribute_Model =>\n          Fold_Ureal (N,\n-           Eval_Fat.Model (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Model (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       ----------------\n       -- Model_Emin --\n@@ -7900,7 +7903,7 @@ package body Sem_Attr is\n \n          if Is_Floating_Point_Type (P_Type) then\n             Fold_Ureal (N,\n-              Eval_Fat.Pred (P_Root_Type, Expr_Value_R (E1)), Static);\n+              Eval_Fat.Pred (P_Base_Type, Expr_Value_R (E1)), Static);\n \n          --  Fixed-point case\n \n@@ -8017,7 +8020,7 @@ package body Sem_Attr is\n             return;\n          end if;\n \n-         Fold_Ureal (N, Eval_Fat.Remainder (P_Root_Type, X, Y), Static);\n+         Fold_Ureal (N, Eval_Fat.Remainder (P_Base_Type, X, Y), Static);\n       end Remainder;\n \n       -----------\n@@ -8049,7 +8052,7 @@ package body Sem_Attr is\n \n       when Attribute_Rounding =>\n          Fold_Ureal (N,\n-           Eval_Fat.Rounding (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Rounding (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       ---------------\n       -- Safe_Emax --\n@@ -8124,7 +8127,7 @@ package body Sem_Attr is\n       when Attribute_Scaling =>\n          Fold_Ureal (N,\n            Eval_Fat.Scaling\n-             (P_Root_Type, Expr_Value_R (E1), Expr_Value (E2)), Static);\n+             (P_Base_Type, Expr_Value_R (E1), Expr_Value (E2)), Static);\n \n       ------------------\n       -- Signed_Zeros --\n@@ -8238,7 +8241,7 @@ package body Sem_Attr is\n \n          if Is_Floating_Point_Type (P_Type) then\n             Fold_Ureal (N,\n-              Eval_Fat.Succ (P_Root_Type, Expr_Value_R (E1)), Static);\n+              Eval_Fat.Succ (P_Base_Type, Expr_Value_R (E1)), Static);\n \n          --  Fixed-point case\n \n@@ -8280,7 +8283,7 @@ package body Sem_Attr is\n \n       when Attribute_Truncation =>\n          Fold_Ureal (N,\n-           Eval_Fat.Truncation (P_Root_Type, Expr_Value_R (E1)), Static);\n+           Eval_Fat.Truncation (P_Base_Type, Expr_Value_R (E1)), Static);\n \n       ----------------\n       -- Type_Class --\n@@ -8345,7 +8348,7 @@ package body Sem_Attr is\n \n       when Attribute_Unbiased_Rounding =>\n          Fold_Ureal (N,\n-           Eval_Fat.Unbiased_Rounding (P_Root_Type, Expr_Value_R (E1)),\n+           Eval_Fat.Unbiased_Rounding (P_Base_Type, Expr_Value_R (E1)),\n            Static);\n \n       -------------------------"}, {"sha": "93889d4f2742779d4c2909525f3671e39a76812d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "patch": "@@ -738,6 +738,14 @@ package body Sem_Ch13 is\n \n          if Is_Scalar_Type (Ent) then\n             Set_Default_Aspect_Value (Ent, Expr);\n+\n+            --  Place default value of base type as well, because that is\n+            --  the semantics of the aspect. It is convenient to link the\n+            --  aspect to both the (possibly anonymous) base type and to\n+            --  the given first subtype.\n+\n+            Set_Default_Aspect_Value (Base_Type (Ent), Expr);\n+\n          else\n             Set_Default_Aspect_Component_Value (Ent, Expr);\n          end if;\n@@ -1892,6 +1900,19 @@ package body Sem_Ch13 is\n                end if;\n \n                Set_Is_Delayed_Aspect (Aspect);\n+\n+               --  In the case of Default_Value, link aspect to base type\n+               --  as well, even though it appears on a first subtype. This\n+               --  is mandated by the semantics of the aspect. Verify that\n+               --  this a scalar type, to prevent cascaded errors.\n+\n+               if A_Id = Aspect_Default_Value\n+                 and then Is_Scalar_Type (E)\n+               then\n+                  Set_Has_Delayed_Aspects (Base_Type (E));\n+                  Record_Rep_Item (Base_Type (E), Aspect);\n+               end if;\n+\n                Set_Has_Delayed_Aspects (E);\n                Record_Rep_Item (E, Aspect);\n "}, {"sha": "718af47f17cd4a514604149150f1afaea8ad1a02", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b55fea6d7c6e40c769d04fc4ed42d6c556941df/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7b55fea6d7c6e40c769d04fc4ed42d6c556941df", "patch": "@@ -631,12 +631,7 @@ package body Sem_Ch4 is\n                                        Reason => CE_Null_Not_Allowed);\n \n                begin\n-                  if Ada_Version >= Ada_2012 then\n-                     Error_Msg_N\n-                       (\"an uninitialized allocator cannot have\"\n-                         & \" a null exclusion\", N);\n-\n-                  elsif Expander_Active then\n+                  if Expander_Active then\n                      Insert_Action (N, Not_Null_Check);\n                      Analyze (Not_Null_Check);\n "}]}