{"sha": "a761195bfd2503e485c47a79c4fe64195417b343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2MTE5NWJmZDI1MDNlNDg1YzQ3YTc5YzRmZTY0MTk1NDE3YjM0Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-08T14:20:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-08T14:20:42Z"}, "message": "locale_facets.tcc: More minor cosmetic changes and const-ifications of some variables.\n\n2003-10-08  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/locale_facets.tcc: More minor cosmetic\n\tchanges and const-ifications of some variables.\n\nFrom-SVN: r72226", "tree": {"sha": "ce499109462ffc23ebc7f05535accc20bc0aebc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce499109462ffc23ebc7f05535accc20bc0aebc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a761195bfd2503e485c47a79c4fe64195417b343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a761195bfd2503e485c47a79c4fe64195417b343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a761195bfd2503e485c47a79c4fe64195417b343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a761195bfd2503e485c47a79c4fe64195417b343/comments", "author": null, "committer": null, "parents": [{"sha": "10dbf393161d85616f515ceb176e550c8686bf42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10dbf393161d85616f515ceb176e550c8686bf42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10dbf393161d85616f515ceb176e550c8686bf42"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "8b1fb8428b7965b7c8fda19c50561a60ceae59b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a761195bfd2503e485c47a79c4fe64195417b343/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a761195bfd2503e485c47a79c4fe64195417b343/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a761195bfd2503e485c47a79c4fe64195417b343", "patch": "@@ -1,3 +1,8 @@\n+2003-10-08  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/locale_facets.tcc: More minor cosmetic\n+\tchanges and const-ifications of some variables.\n+\n 2003-10-07  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/locale_facets.tcc: Minor cosmetic changes"}, {"sha": "9d4ec448381e63ac096d17ce0d65417425925c79", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a761195bfd2503e485c47a79c4fe64195417b343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a761195bfd2503e485c47a79c4fe64195417b343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=a761195bfd2503e485c47a79c4fe64195417b343", "patch": "@@ -279,7 +279,7 @@ namespace std\n       const _CharT* __lit = __lc->_M_atoms_in;\n  \n       // NB: Iff __basefield == 0, this can change based on contents.\n-      ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n+      const ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n       if (__basefield == ios_base::oct)\n         __base = 8;\n       else if (__basefield == ios_base::hex)\n@@ -315,8 +315,8 @@ namespace std\n \t      if (__basefield == 0)\n \t\t{\t      \n \t\t  const bool __x = __traits_type::eq(__c, __lit[_S_ix]);\n-\t\t  const bool __X = __traits_type::eq(__c, __lit[_S_iX]);\n-\t\t  if ((__x || __X) && __beg != __end)\n+\t\t  if ((__x || __traits_type::eq(__c, __lit[_S_iX]))\n+\t\t      && __beg != __end)\n \t\t    {\n \t\t      __xtrc += __x ? _S_atoms_in[_S_ix] : _S_atoms_in[_S_iX];\n \t\t      ++__pos;\n@@ -337,8 +337,8 @@ namespace std\n \t      __c = *(++__beg); \n \n \t      const bool __x = __traits_type::eq(__c, __lit[_S_ix]);\n-\t      const bool __X = __traits_type::eq(__c, __lit[_S_iX]);\n-\t      if ((__x || __X) && __beg != __end)\n+\t      if ((__x || __traits_type::eq(__c, __lit[_S_iX]))\n+\t\t  && __beg != __end)\n \t\t{\n \t\t  __xtrc += __x ? _S_atoms_in[_S_ix] : _S_atoms_in[_S_iX];\n \t\t  ++__pos;\n@@ -349,11 +349,7 @@ namespace std\n \n       // At this point, base is determined. If not hex, only allow\n       // base digits as valid input.\n-      size_t __len;\n-      if (__base == 16)\n-\t__len = _S_iend;\n-      else\n-\t__len = __base;\n+      const size_t __len = __base == 16 ? _S_iend : __base;\n \n       // Extract.\n       string __found_grouping;\n@@ -721,8 +717,8 @@ namespace std\n       // Don't write base if already 0.\n       const bool __showbase = (__flags & ios_base::showbase) && __v;\n       const ios_base::fmtflags __basefield = __flags & ios_base::basefield;\n-      _CharT* __buf = __out + __size - 1;\n-      _CharT* __bufend = __out + __size;\n+      _CharT* const __bufend = __out + __size;\n+      _CharT* __buf = __bufend - 1;\n \n       if (__builtin_expect(__basefield != ios_base::oct &&\n \t\t\t   __basefield != ios_base::hex, true))\n@@ -771,8 +767,7 @@ namespace std\n \t      *__buf-- = __lit[__num_base::_S_odigits];\n \t    }\n \t}\n-      int __ret = __bufend - __buf - 1;\n-      return __ret;\n+      return __bufend - __buf - 1;\n     }\n \n   template<typename _CharT, typename _OutIter>\n@@ -822,14 +817,15 @@ namespace std\n \tconst _CharT* __lit = __lc->_M_atoms_out;\n \n  \t// Long enough to hold hex, dec, and octal representations.\n-\tint __ilen = 4 * sizeof(_ValueT);\n+\tconst int __ilen = 4 * sizeof(_ValueT);\n \t_CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t     * __ilen));\n+\n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \t// Result is returned right-justified in the buffer.\n \tint __len;\n \t__len = __int_to_char(&__cs[0], __ilen, __v, __lit, __io.flags());\n-\t__cs = __cs + __ilen - __len;\n+\t__cs += __ilen - __len;\n \t\n \t// Add grouping, if necessary. \n \t_CharT* __cs2;\n@@ -871,7 +867,7 @@ namespace std\n       //282. What types does numpunct grouping refer to?\n       // Add grouping, if necessary. \n       _CharT* __p2;\n-      int __declen = __p ? __p - __cs : __len;\n+      const int __declen = __p ? __p - __cs : __len;\n       __p2 = std::__add_grouping(__new, __sep, __grouping.c_str(),\n \t\t\t\t __grouping.c_str() + __grouping.size(),\n \t\t\t\t __cs, __cs + __declen);\n@@ -1396,12 +1392,12 @@ namespace std\n       if (*__beg != __ctype.widen('-'))\n \t{\n \t  __p = __intl ? __mpt.pos_format() : __mpf.pos_format();\n-\t  __sign =__intl ? __mpt.positive_sign() : __mpf.positive_sign();\n+\t  __sign = __intl ? __mpt.positive_sign() : __mpf.positive_sign();\n \t}\n       else\n \t{\n \t  __p = __intl ? __mpt.neg_format() : __mpf.neg_format();\n-\t  __sign =__intl ? __mpt.negative_sign() : __mpf.negative_sign();\n+\t  __sign = __intl ? __mpt.negative_sign() : __mpf.negative_sign();\n \t  ++__beg;\n \t}\n       \n@@ -1434,8 +1430,8 @@ namespace std\n \t\t{\n \t\t  // Have to pad zeros in the decimal position.\n \t\t  __value = string_type(__beg, __end);\n-\t\t  int __paddec = __frac - (__end - __beg);\n-\t\t  char_type __zero = __ctype.widen('0');\n+\t\t  const int __paddec = __frac - (__end - __beg);\n+\t\t  const char_type __zero = __ctype.widen('0');\n \t\t  __value.insert(__value.begin(), __paddec, __zero);\n \t\t  __value.insert(__value.begin(), __d);\n \t\t  __beg = __end;"}]}