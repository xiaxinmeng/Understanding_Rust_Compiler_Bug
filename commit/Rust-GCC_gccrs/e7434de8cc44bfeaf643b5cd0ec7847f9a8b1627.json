{"sha": "e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0MzRkZThjYzQ0YmZlYWY2NDNiNWNkMGVjNzg0N2Y5YThiMTYyNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2017-11-23T14:06:15Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2017-11-23T14:06:15Z"}, "message": "re PR target/83111 ([sh] stack smashing detected in gen_udivsi3)\n\ngcc/\n\tPR target/83111\n\t* config/sh/sh.md (udivsi3, divsi3, sibcall_value_pcrel,\n\tsibcall_value_pcrel_fdpic): Use local variable instead of\n\toperands[3].\n\t(calli_tbr_rel): Add missing operand 2.\n\t(call_valuei_tbr_rel): Add missing operand 3.\n\nFrom-SVN: r255096", "tree": {"sha": "a49a20bd810eb2ab3a2c6e1ba3beccd0af562f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a49a20bd810eb2ab3a2c6e1ba3beccd0af562f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627/comments", "author": null, "committer": null, "parents": [{"sha": "2145b601d083b313197c0ef3bfbef1df8aa26479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2145b601d083b313197c0ef3bfbef1df8aa26479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2145b601d083b313197c0ef3bfbef1df8aa26479"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "df331c09badb945a4715055a31e1111ae049d27a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "patch": "@@ -1,3 +1,12 @@\n+2017-11-23  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/83111\n+\t* config/sh/sh.md (udivsi3, divsi3, sibcall_value_pcrel,\n+\tsibcall_value_pcrel_fdpic): Use local variable instead of\n+\toperands[3].\n+\t(calli_tbr_rel): Add missing operand 2.\n+\t(call_valuei_tbr_rel): Add missing operand 3.\n+\n 2017-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/82253"}, {"sha": "840fd922d41e3138924a198e9175da7b2503622f", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e7434de8cc44bfeaf643b5cd0ec7847f9a8b1627", "patch": "@@ -2277,8 +2277,8 @@\n   \"\"\n {\n   rtx last;\n+  rtx func_ptr = gen_reg_rtx (Pmode);\n \n-  operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n   if (TARGET_DIVIDE_CALL_TABLE)\n     {\n@@ -2298,16 +2298,16 @@\n \t  emit_move_insn (operands[0], operands[2]);\n \t  DONE;\n \t}\n-      function_symbol (operands[3], \"__udivsi3_i4i\", SFUNC_GOT);\n-      last = gen_udivsi3_i4_int (operands[0], operands[3]);\n+      function_symbol (func_ptr, \"__udivsi3_i4i\", SFUNC_GOT);\n+      last = gen_udivsi3_i4_int (operands[0], func_ptr);\n     }\n   else if (TARGET_DIVIDE_CALL_FP)\n     {\n-      rtx lab = function_symbol (operands[3], \"__udivsi3_i4\", SFUNC_STATIC).lab;\n+      rtx lab = function_symbol (func_ptr, \"__udivsi3_i4\", SFUNC_STATIC).lab;\n       if (TARGET_FPU_SINGLE)\n-\tlast = gen_udivsi3_i4_single (operands[0], operands[3], lab);\n+\tlast = gen_udivsi3_i4_single (operands[0], func_ptr, lab);\n       else\n-\tlast = gen_udivsi3_i4 (operands[0], operands[3], lab);\n+\tlast = gen_udivsi3_i4 (operands[0], func_ptr, lab);\n     }\n   else if (TARGET_SH2A)\n     {\n@@ -2318,8 +2318,8 @@\n     }\n   else\n     {\n-      rtx lab = function_symbol (operands[3], \"__udivsi3\", SFUNC_STATIC).lab;\n-      last = gen_udivsi3_i1 (operands[0], operands[3], lab);\n+      rtx lab = function_symbol (func_ptr, \"__udivsi3\", SFUNC_STATIC).lab;\n+      last = gen_udivsi3_i1 (operands[0], func_ptr, lab);\n     }\n   emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n   emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n@@ -2405,22 +2405,22 @@\n   \"\"\n {\n   rtx last;\n+  rtx func_ptr = gen_reg_rtx (Pmode);\n \n-  operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n   if (TARGET_DIVIDE_CALL_TABLE)\n     {\n-      function_symbol (operands[3], sh_divsi3_libfunc, SFUNC_GOT);\n-      last = gen_divsi3_i4_int (operands[0], operands[3]);\n+      function_symbol (func_ptr, sh_divsi3_libfunc, SFUNC_GOT);\n+      last = gen_divsi3_i4_int (operands[0], func_ptr);\n     }\n   else if (TARGET_DIVIDE_CALL_FP)\n     {\n-      rtx lab = function_symbol (operands[3], sh_divsi3_libfunc,\n+      rtx lab = function_symbol (func_ptr, sh_divsi3_libfunc,\n \t\t\t\t SFUNC_STATIC).lab;\n       if (TARGET_FPU_SINGLE)\n-\tlast = gen_divsi3_i4_single (operands[0], operands[3], lab);\n+\tlast = gen_divsi3_i4_single (operands[0], func_ptr, lab);\n       else\n-\tlast = gen_divsi3_i4 (operands[0], operands[3], lab);\n+\tlast = gen_divsi3_i4 (operands[0], func_ptr, lab);\n     }\n   else if (TARGET_SH2A)\n     {\n@@ -2431,8 +2431,8 @@\n     }\n   else\n     {\n-      function_symbol (operands[3], sh_divsi3_libfunc, SFUNC_GOT);\n-      last = gen_divsi3_i1 (operands[0], operands[3]);\n+      function_symbol (func_ptr, sh_divsi3_libfunc, SFUNC_GOT);\n+      last = gen_divsi3_i1 (operands[0], func_ptr);\n     }\n   emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n   emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n@@ -6519,6 +6519,7 @@\n   [(call (mem (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (reg:SI FPSCR_MODES_REG))\n+   (use (match_scratch 2))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2A && sh2a_is_function_vector_call (operands[0])\"\n {\n@@ -6629,6 +6630,7 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (reg:SI FPSCR_MODES_REG))\n+   (use (match_scratch 3))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2A && sh2a_is_function_vector_call (operands[1])\"\n {\n@@ -7044,13 +7046,11 @@\n   [(const_int 0)]\n {\n   rtx lab = PATTERN (gen_call_site ());\n-  rtx call_insn;\n-\n-  operands[3] =  gen_rtx_REG (SImode, R1_REG);\n+  rtx tmp =  gen_rtx_REG (SImode, R1_REG);\n \n-  sh_expand_sym_label2reg (operands[3], operands[1], lab, true);\n-  call_insn = emit_call_insn (gen_sibcall_valuei_pcrel (operands[0],\n-\t\t\t\t\t\t\toperands[3],\n+  sh_expand_sym_label2reg (tmp, operands[1], lab, true);\n+  rtx call_insn = emit_call_insn (gen_sibcall_valuei_pcrel (operands[0],\n+\t\t\t\t\t\t\ttmp,\n \t\t\t\t\t\t\toperands[2],\n \t\t\t\t\t\t\tcopy_rtx (lab)));\n   SIBLING_CALL_P (call_insn) = 1;\n@@ -7078,12 +7078,11 @@\n   [(const_int 0)]\n {\n   rtx lab = PATTERN (gen_call_site ());\n+  rtx tmp = gen_rtx_REG (SImode, R1_REG);\n \n-  operands[3] =  gen_rtx_REG (SImode, R1_REG);\n-\n-  sh_expand_sym_label2reg (operands[3], operands[1], lab, true);\n+  sh_expand_sym_label2reg (tmp, operands[1], lab, true);\n   rtx i = emit_call_insn (gen_sibcall_valuei_pcrel_fdpic (operands[0],\n-\t\t\t\t\t\t\t  operands[3],\n+\t\t\t\t\t\t\t  tmp,\n \t\t\t\t\t\t\t  operands[2],\n \t\t\t\t\t\t\t  copy_rtx (lab)));\n   SIBLING_CALL_P (i) = 1;"}]}