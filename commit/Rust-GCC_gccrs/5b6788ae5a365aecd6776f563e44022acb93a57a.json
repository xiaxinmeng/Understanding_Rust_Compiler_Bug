{"sha": "5b6788ae5a365aecd6776f563e44022acb93a57a", "node_id": "C_kwDOANBUbNoAKDViNjc4OGFlNWEzNjVhZWNkNjc3NmY1NjNlNDQwMjJhY2I5M2E1N2E", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-19T11:31:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-19T13:55:15Z"}, "message": "tree-optimization/104112 - add check for vect epilogue reduc reuse\n\nThis adds a missing check for the availability of intermediate vector\ntypes required to re-use the accumulator of a vectorized reduction\nin the vectorized epilogue.  For SVE and VNx2DF vs V2DF with\n-msve-vector-bits=512 for example V4DF is not available.\n\nIn addition to that we have to verify the reduction operation is\nsupported, otherwise we for example on i?86 get vector code that's\nlater decomposed again by vector lowering when trying to use\na V2HI epilogue for a V8HI reduction with a target without\nTARGET_MMX_WITH_SSE.\n\nIt might be we want -Wvector-operation-performance for all vect.exp\ntests but that seems to have existing regressions.\n\n2022-01-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104112\n\t* tree-vect-loop.cc (vect_find_reusable_accumulator): Check\n\tfor required intermediate vector types.\n\n\t* gcc.dg/vect/pr104112-1.c: New testcase.\n\t* gcc.dg/vect/pr104112-2.c: New testcase.", "tree": {"sha": "bee81495b90c4dc66434d00a6e3ffe311366d03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bee81495b90c4dc66434d00a6e3ffe311366d03c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b6788ae5a365aecd6776f563e44022acb93a57a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6788ae5a365aecd6776f563e44022acb93a57a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6788ae5a365aecd6776f563e44022acb93a57a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6788ae5a365aecd6776f563e44022acb93a57a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68aa3c08ef1c33d9ad1263f4b939638920de9f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68aa3c08ef1c33d9ad1263f4b939638920de9f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68aa3c08ef1c33d9ad1263f4b939638920de9f11"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "84e69b85170eacc1d28a5d2df69c5ceff45172e1", "filename": "gcc/testsuite/gcc.dg/vect/pr104112-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-1.c?ref=5b6788ae5a365aecd6776f563e44022acb93a57a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast\" } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve -msve-vector-bits=512\" { target aarch64-*-* } } */\n+\n+void\n+boom(int n, double *a, double *x)\n+{\n+  int i, j;\n+  double temp;\n+\n+  for (j = n; j >= 1; --j)\n+    {\n+      temp = x[j];\n+      for (i = j - 1; i >= 1; --i)\n+\ttemp += a[i + j] * x[i];\n+      x[j] = temp;\n+    }\n+}"}, {"sha": "7469b3c5d849b0e5cb50d1375a5c4bac08d3e14e", "filename": "gcc/testsuite/gcc.dg/vect/pr104112-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104112-2.c?ref=5b6788ae5a365aecd6776f563e44022acb93a57a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* Diagnose vector ops that are later decomposed.  */\n+/* { dg-additional-options \"-Wvector-operation-performance\" } */\n+\n+unsigned short foo (unsigned short *a, int n)\n+{\n+  unsigned short sum = 0;\n+  for (int i = 0; i < n; ++i)\n+    sum += a[i];\n+  return sum;\n+}"}, {"sha": "0b2785a5ed601d263e62c54a09af54a5f9ed7262", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6788ae5a365aecd6776f563e44022acb93a57a/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=5b6788ae5a365aecd6776f563e44022acb93a57a", "patch": "@@ -4979,9 +4979,22 @@ vect_find_reusable_accumulator (loop_vec_info loop_vinfo,\n   /* Handle the case where we can reduce wider vectors to narrower ones.  */\n   tree vectype = STMT_VINFO_VECTYPE (reduc_info);\n   tree old_vectype = TREE_TYPE (accumulator->reduc_input);\n+  unsigned HOST_WIDE_INT m;\n   if (!constant_multiple_p (TYPE_VECTOR_SUBPARTS (old_vectype),\n-\t\t\t    TYPE_VECTOR_SUBPARTS (vectype)))\n+\t\t\t    TYPE_VECTOR_SUBPARTS (vectype), &m))\n     return false;\n+  /* Check the intermediate vector types are available.  */\n+  while (m > 2)\n+    {\n+      m /= 2;\n+      tree intermediate_vectype = get_related_vectype_for_scalar_type\n+\t(TYPE_MODE (vectype), TREE_TYPE (vectype),\n+\t exact_div (TYPE_VECTOR_SUBPARTS (old_vectype), m));\n+      if (!intermediate_vectype\n+\t  || !directly_supported_p (STMT_VINFO_REDUC_CODE (reduc_info),\n+\t\t\t\t    intermediate_vectype))\n+\treturn false;\n+    }\n \n   /* Non-SLP reductions might apply an adjustment after the reduction\n      operation, in order to simplify the initialization of the accumulator."}]}