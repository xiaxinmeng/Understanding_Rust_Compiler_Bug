{"sha": "7700cd858ff97a257d6f48b0d079780f445821da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwMGNkODU4ZmY5N2EyNTdkNmY0OGIwZDA3OTc4MGY0NDU4MjFkYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-11T14:22:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-11T14:22:43Z"}, "message": "re PR target/67265 ([x86] 'asm' operand has impossible constraints with -fstack-check)\n\n\tPR target/67265\n\t* ira.c (ira_setup_eliminable_regset): Do not necessarily create the\n\tframe pointer for stack checking if non-call exceptions aren't used.\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Likewise.\n\nFrom-SVN: r230168", "tree": {"sha": "65037ebab2d96259aa483e1bd38a87a27b451d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65037ebab2d96259aa483e1bd38a87a27b451d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7700cd858ff97a257d6f48b0d079780f445821da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7700cd858ff97a257d6f48b0d079780f445821da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7700cd858ff97a257d6f48b0d079780f445821da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7700cd858ff97a257d6f48b0d079780f445821da/comments", "author": null, "committer": null, "parents": [{"sha": "0bf5130af0d1c19855f244ae874180ed28f1cb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf5130af0d1c19855f244ae874180ed28f1cb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf5130af0d1c19855f244ae874180ed28f1cb3e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "57329ed9ff1d5e708f114283c9b58f80086292e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7700cd858ff97a257d6f48b0d079780f445821da", "patch": "@@ -1,7 +1,14 @@\n+2015-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/67265\n+\t* ira.c (ira_setup_eliminable_regset): Do not necessarily create the\n+\tframe pointer for stack checking if non-call exceptions aren't used.\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Likewise.\n+\n 2015-11-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n-\t* gcc/simplify-rtx.c (simplify_truncation): Simplify TRUNCATE\n-\tof AND of [LA]SHIFTRT.\n+\t* simplify-rtx.c (simplify_truncation): Simplify TRUNCATE of AND of\n+\t[LA]SHIFTRT.\n \n 2015-11-11  Martin Liska  <mliska@suse.cz>\n \t    Richard Biener  <rguenther@suse.de>\n@@ -93,8 +100,7 @@\n \n 2015-11-11  Julia Koval  <julia.koval@intel.com>\n \n-\t* config/i386/i386.c: Handle \"skylake\" and\n-\t\"skylake-avx512\".\n+\t* config/i386/i386.c: Handle \"skylake\" and \"skylake-avx512\".\n \n 2015-11-11  Martin Liska  <mliska@suse.cz>\n "}, {"sha": "97edf8c481699ded38e3ed9c7975de28a1256786", "filename": "gcc/ira.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=7700cd858ff97a257d6f48b0d079780f445821da", "patch": "@@ -2259,9 +2259,12 @@ ira_setup_eliminable_regset (void)\n   frame_pointer_needed\n     = (! flag_omit_frame_pointer\n        || (cfun->calls_alloca && EXIT_IGNORE_STACK)\n-       /* We need the frame pointer to catch stack overflow exceptions\n-\t  if the stack pointer is moving.  */\n-       || (flag_stack_check && STACK_CHECK_MOVING_SP)\n+       /* We need the frame pointer to catch stack overflow exceptions if\n+\t  the stack pointer is moving (as for the alloca case just above).  */\n+       || (STACK_CHECK_MOVING_SP\n+\t   && flag_stack_check\n+\t   && flag_exceptions\n+\t   && cfun->can_throw_non_call_exceptions)\n        || crtl->accesses_prior_frames\n        || (SUPPORTS_STACK_ALIGNMENT && crtl->stack_realign_needed)\n        /* We need a frame pointer for all Cilk Plus functions that use"}, {"sha": "78332c17682e7f6f29b8e586da5cc27f012d2e12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7700cd858ff97a257d6f48b0d079780f445821da", "patch": "@@ -1,3 +1,7 @@\n+2015-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/i386/pr67265.c: New test.\n+\n 2015-11-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/20050603-3.c: Don't restrict to ilp32.  Do more"}, {"sha": "7827685fe5f140e933da4abe6d16f4fbe9f3be03", "filename": "gcc/testsuite/gcc.target/i386/pr67265.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7700cd858ff97a257d6f48b0d079780f445821da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67265.c?ref=7700cd858ff97a257d6f48b0d079780f445821da", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/67265 */\n+/* Reduced testcase by Johannes Dewender <gnu@JonnyJD.net> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fstack-check -fPIC\" } */\n+\n+int a, b, c, d, e;\n+\n+void foo (void)\n+{\n+  __asm__(\"\" : \"+r\"(c), \"+r\"(e), \"+r\"(d), \"+r\"(a) : \"\"(b), \"mg\"(foo), \"mm\"(c));\n+}"}]}