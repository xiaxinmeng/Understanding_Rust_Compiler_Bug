{"sha": "95d67762171f83277a5700b270c0d1e2756f83f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkNjc3NjIxNzFmODMyNzdhNTcwMGIyNzBjMGQxZTI3NTZmODNmNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-26T09:18:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-26T09:28:42Z"}, "message": "openmp: Fix up handling of target constructs in offloaded routines [PR100573]\n\nOpenMP Nesting of Regions restrictions say:\n- If a target update, target data, target enter data, or target exit data\nconstruct is encountered during execution of a target region, the behavior is unspecified.\n- If a target construct is encountered during execution of a target region and a device\nclause in which the ancestor device-modifier appears is not present on the construct, the\nbehavior is unspecified.\nThat wording is about the dynamic (runtime) behavior, not about lexical nesting,\nso while it is UB if omp target * is encountered in the target region, we need to make\nit compile and link (for lexical nesting of target * inside of target we actually\nemit a warning).\n\nTo make this work, I had to do multiple changes.\nOne was to mark .omp_data_{sizes,kinds}.* variables when static as \"omp declare target\".\nAnother one was to add stub GOMP_target* entrypoints to nvptx and gcn libgomp.a.\nThe entrypoint functions shouldn't be called or passed in the offload regions,\notherwise\nlibgomp: cuLaunchKernel error: too many resources requested for launch\nwas reported; fixed by changing those arguments of calls to GOMP_target_ext\nto NULL.\nAnd we didn't mark the entrypoints \"omp target entrypoint\" when the caller\nhas been \"omp declare target\".\n\n2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/100573\ngcc/\n\t* omp-low.c: Include omp-offload.h.\n\t(create_omp_child_function): If current_function_decl has\n\t\"omp declare target\" attribute and is_gimple_omp_offloaded,\n\tremove that attribute from the copy of attribute list and\n\tadd \"omp target entrypoint\" attribute instead.\n\t(lower_omp_target): Mark .omp_data_sizes.* and .omp_data_kinds.*\n\tvariables for offloading if in omp_maybe_offloaded_ctx.\n\t* omp-offload.c (pass_omp_target_link::execute): Nullify second\n\targument to GOMP_target_data_ext in offloaded code.\nlibgomp/\n\t* config/nvptx/target.c (GOMP_target_ext, GOMP_target_data_ext,\n\tGOMP_target_end_data, GOMP_target_update_ext,\n\tGOMP_target_enter_exit_data): New dummy entrypoints.\n\t* config/gcn/target.c (GOMP_target_ext, GOMP_target_data_ext,\n\tGOMP_target_end_data, GOMP_target_update_ext,\n\tGOMP_target_enter_exit_data): Likewise.\n\t* testsuite/libgomp.c-c++-common/for-3.c (DO_PRAGMA, OMPTEAMS,\n\tOMPFROM, OMPTO): Define.\n\t(main): Remove #pragma omp target teams around all the tests.\n\t* testsuite/libgomp.c-c++-common/target-41.c: New test.\n\t* testsuite/libgomp.c-c++-common/target-42.c: New test.", "tree": {"sha": "62ccdb13f156d7a223ef4f30e88169c6dfb2a510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ccdb13f156d7a223ef4f30e88169c6dfb2a510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d67762171f83277a5700b270c0d1e2756f83f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d67762171f83277a5700b270c0d1e2756f83f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d67762171f83277a5700b270c0d1e2756f83f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d67762171f83277a5700b270c0d1e2756f83f4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f338210456bf4f142a2da6eb0a01ae8ffecaa88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f338210456bf4f142a2da6eb0a01ae8ffecaa88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f338210456bf4f142a2da6eb0a01ae8ffecaa88"}], "stats": {"total": 291, "additions": 256, "deletions": 35}, "files": [{"sha": "2d5cdf671ebd365d6276f20fbd71cd0393ef64bc", "filename": "gcc/omp-low.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"omp-offload.h\"\n \n /* Lowering of OMP parallel and workshare constructs proceeds in two\n    phases.  The first phase scans the function looking for OMP statements\n@@ -1944,16 +1945,25 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n \tg->have_offload = true;\n     }\n \n-  if (cgraph_node::get_create (decl)->offloadable\n-      && !lookup_attribute (\"omp declare target\",\n-                           DECL_ATTRIBUTES (current_function_decl)))\n+  if (cgraph_node::get_create (decl)->offloadable)\n     {\n       const char *target_attr = (is_gimple_omp_offloaded (ctx->stmt)\n \t\t\t\t ? \"omp target entrypoint\"\n \t\t\t\t : \"omp declare target\");\n-      DECL_ATTRIBUTES (decl)\n-\t= tree_cons (get_identifier (target_attr),\n-\t\t     NULL_TREE, DECL_ATTRIBUTES (decl));\n+      if (lookup_attribute (\"omp declare target\",\n+\t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n+\t{\n+\t  if (is_gimple_omp_offloaded (ctx->stmt))\n+\t    DECL_ATTRIBUTES (decl)\n+\t      = remove_attribute (\"omp declare target\",\n+\t\t\t\t  copy_list (DECL_ATTRIBUTES (decl)));\n+\t  else\n+\t    target_attr = NULL;\n+\t}\n+      if (target_attr)\n+\tDECL_ATTRIBUTES (decl)\n+\t  = tree_cons (get_identifier (target_attr),\n+\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n     }\n \n   t = build_decl (DECL_SOURCE_LOCATION (decl),\n@@ -12960,6 +12970,23 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t gimple_build_assign (TREE_VEC_ELT (t, i),\n \t\t\t\t\t\t      clobber));\n \t  }\n+\telse if (omp_maybe_offloaded_ctx (ctx->outer))\n+\t  {\n+\t    tree id = get_identifier (\"omp declare target\");\n+\t    tree decl = TREE_VEC_ELT (t, i);\n+\t    DECL_ATTRIBUTES (decl)\n+\t      = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t    varpool_node *node = varpool_node::get (decl);\n+\t    if (node)\n+\t      {\n+\t\tnode->offloadable = 1;\n+\t\tif (ENABLE_OFFLOADING)\n+\t\t  {\n+\t\t    g->have_offload = true;\n+\t\t    vec_safe_push (offload_vars, t);\n+\t\t  }\n+\t      }\n+\t  }\n \n       tree clobber = build_clobber (ctx->record_type);\n       gimple_seq_add_stmt (&olist, gimple_build_assign (ctx->sender_decl,"}, {"sha": "0320ea6ab858454705723f3ed593c2ea4e8a236d", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -2696,8 +2696,16 @@ pass_omp_target_link::execute (function *fun)\n     {\n       gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\tif (walk_gimple_stmt (&gsi, NULL, find_link_var_op, NULL))\n-\t  gimple_regimplify_operands (gsi_stmt (gsi), &gsi);\n+\t{\n+\t  if (gimple_call_builtin_p (gsi_stmt (gsi), BUILT_IN_GOMP_TARGET))\n+\t    {\n+\t      /* Nullify the second argument of __builtin_GOMP_target_ext.  */\n+\t      gimple_call_set_arg (gsi_stmt (gsi), 1, null_pointer_node);\n+\t      update_stmt (gsi_stmt (gsi));\n+\t    }\n+\t  if (walk_gimple_stmt (&gsi, NULL, find_link_var_op, NULL))\n+\t    gimple_regimplify_operands (gsi_stmt (gsi), &gsi);\n+\t}\n     }\n \n   return 0;"}, {"sha": "a93ecc90d44f3878cb9a8764bd499c3800b5d8db", "filename": "libgomp/config/gcn/target.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Fconfig%2Fgcn%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Fconfig%2Fgcn%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Ftarget.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -65,3 +65,68 @@ omp_pause_resource_all (omp_pause_resource_t kind)\n \n ialias (omp_pause_resource)\n ialias (omp_pause_resource_all)\n+\n+void\n+GOMP_target_ext (int device, void (*fn) (void *), size_t mapnum,\n+\t\t void **hostaddrs, size_t *sizes, unsigned short *kinds,\n+\t\t unsigned int flags, void **depend, void **args)\n+{\n+  (void) device;\n+  (void) fn;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  (void) args;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_data_ext (int device, size_t mapnum, void **hostaddrs,\n+\t\t      size_t *sizes, unsigned short *kinds)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_end_data (void)\n+{\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_update_ext (int device, size_t mapnum, void **hostaddrs,\n+\t\t\tsize_t *sizes, unsigned short *kinds,\n+\t\t\tunsigned int flags, void **depend)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_enter_exit_data (int device, size_t mapnum, void **hostaddrs,\n+\t\t\t     size_t *sizes, unsigned short *kinds,\n+\t\t\t     unsigned int flags, void **depend)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  __builtin_unreachable ();\n+}"}, {"sha": "e4140e482961333d0daf278220e3c65a716606b2", "filename": "libgomp/config/nvptx/target.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Fconfig%2Fnvptx%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Fconfig%2Fnvptx%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Ftarget.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -65,3 +65,68 @@ omp_pause_resource_all (omp_pause_resource_t kind)\n \n ialias (omp_pause_resource)\n ialias (omp_pause_resource_all)\n+\n+void\n+GOMP_target_ext (int device, void (*fn) (void *), size_t mapnum,\n+\t\t void **hostaddrs, size_t *sizes, unsigned short *kinds,\n+\t\t unsigned int flags, void **depend, void **args)\n+{\n+  (void) device;\n+  (void) fn;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  (void) args;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_data_ext (int device, size_t mapnum, void **hostaddrs,\n+\t\t      size_t *sizes, unsigned short *kinds)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_end_data (void)\n+{\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_update_ext (int device, size_t mapnum, void **hostaddrs,\n+\t\t\tsize_t *sizes, unsigned short *kinds,\n+\t\t\tunsigned int flags, void **depend)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  __builtin_unreachable ();\n+}\n+\n+void\n+GOMP_target_enter_exit_data (int device, size_t mapnum, void **hostaddrs,\n+\t\t\t     size_t *sizes, unsigned short *kinds,\n+\t\t\t     unsigned int flags, void **depend)\n+{\n+  (void) device;\n+  (void) mapnum;\n+  (void) hostaddrs;\n+  (void) sizes;\n+  (void) kinds;\n+  (void) flags;\n+  (void) depend;\n+  __builtin_unreachable ();\n+}"}, {"sha": "285f8e9bd4de95153e4af9fcfa26957c1b7dbbe5", "filename": "libgomp/testsuite/libgomp.c-c++-common/for-3.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffor-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffor-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffor-3.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -9,6 +9,11 @@ void abort ();\n #define M(x, y, z) O(x, y, z)\n #define O(x, y, z) x ## _ ## y ## _ ## z\n \n+#define DO_PRAGMA(x) _Pragma (#x)\n+#define OMPTEAMS DO_PRAGMA (omp target teams)\n+#define OMPFROM(v) DO_PRAGMA (omp target update from(v))\n+#define OMPTO(v) DO_PRAGMA (omp target update to(v))\n+\n #pragma omp declare target\n \n #define F distribute\n@@ -81,33 +86,30 @@ int\n main ()\n {\n   int err = 0;\n-  #pragma omp target teams reduction(|:err)\n-    {\n-      err |= test_d_normal ();\n-      err |= test_d_ds128_normal ();\n-      err |= test_ds_normal ();\n-      err |= test_ds_ds128_normal ();\n-      err |= test_dpf_static ();\n-      err |= test_dpf_static32 ();\n-      err |= test_dpf_auto ();\n-      err |= test_dpf_guided32 ();\n-      err |= test_dpf_runtime ();\n-      err |= test_dpf_ds128_static ();\n-      err |= test_dpf_ds128_static32 ();\n-      err |= test_dpf_ds128_auto ();\n-      err |= test_dpf_ds128_guided32 ();\n-      err |= test_dpf_ds128_runtime ();\n-      err |= test_dpfs_static ();\n-      err |= test_dpfs_static32 ();\n-      err |= test_dpfs_auto ();\n-      err |= test_dpfs_guided32 ();\n-      err |= test_dpfs_runtime ();\n-      err |= test_dpfs_ds128_static ();\n-      err |= test_dpfs_ds128_static32 ();\n-      err |= test_dpfs_ds128_auto ();\n-      err |= test_dpfs_ds128_guided32 ();\n-      err |= test_dpfs_ds128_runtime ();\n-    }\n+  err |= test_d_normal ();\n+  err |= test_d_ds128_normal ();\n+  err |= test_ds_normal ();\n+  err |= test_ds_ds128_normal ();\n+  err |= test_dpf_static ();\n+  err |= test_dpf_static32 ();\n+  err |= test_dpf_auto ();\n+  err |= test_dpf_guided32 ();\n+  err |= test_dpf_runtime ();\n+  err |= test_dpf_ds128_static ();\n+  err |= test_dpf_ds128_static32 ();\n+  err |= test_dpf_ds128_auto ();\n+  err |= test_dpf_ds128_guided32 ();\n+  err |= test_dpf_ds128_runtime ();\n+  err |= test_dpfs_static ();\n+  err |= test_dpfs_static32 ();\n+  err |= test_dpfs_auto ();\n+  err |= test_dpfs_guided32 ();\n+  err |= test_dpfs_runtime ();\n+  err |= test_dpfs_ds128_static ();\n+  err |= test_dpfs_ds128_static32 ();\n+  err |= test_dpfs_ds128_auto ();\n+  err |= test_dpfs_ds128_guided32 ();\n+  err |= test_dpfs_ds128_runtime ();\n   if (err)\n     abort ();\n   return 0;"}, {"sha": "3aca19a15f94825300e1ac7fb5efa092861e70a9", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-41.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-41.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -0,0 +1,28 @@\n+/* PR libgomp/100573 */\n+\n+int\n+foo (int a)\n+{\n+  if (a == 0)\n+    {\n+      int c;\n+      a++;\n+      #pragma omp target map(tofrom:a)\n+      a = foo (a);\n+      #pragma omp target data map(tofrom:a)\n+      c = a != 2;\n+      if (c)\n+\treturn -1;\n+      #pragma omp target enter data map(to:a)\n+      #pragma omp target exit data map(from:a)\n+    }\n+  return a + 1;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (0) != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "a334f477e5120b13d6be5e7059724ebd2f822486", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-42.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d67762171f83277a5700b270c0d1e2756f83f4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-42.c?ref=95d67762171f83277a5700b270c0d1e2756f83f4", "patch": "@@ -0,0 +1,26 @@\n+/* PR libgomp/100573 */\n+\n+int\n+foo (int a)\n+{\n+  #pragma omp target firstprivate(a)\n+  if (a == 0)\n+    {\n+      a++;\n+      #pragma omp target map(tofrom:a)\t\t/* { dg-warning \"'target' construct inside of 'target' region\" } */\n+      a = foo (a);\n+      #pragma omp target data map(tofrom:a)\t/* { dg-warning \"'target data' construct inside of 'target' region\" } */\n+      a++;\n+      #pragma omp target enter data map(to:a)\t/* { dg-warning \"'target enter data' construct inside of 'target' region\" } */\n+      #pragma omp target exit data map(from:a)\t/* { dg-warning \"'target exit data' construct inside of 'target' region\" } */\n+    }\n+  return a + 1;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (1) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}