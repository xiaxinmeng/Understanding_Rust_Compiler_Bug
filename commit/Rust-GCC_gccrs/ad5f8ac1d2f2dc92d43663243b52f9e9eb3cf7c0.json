{"sha": "ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1ZjhhYzFkMmYyZGM5MmQ0MzY2MzI0M2I1MmY5ZTllYjNjZjdjMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-15T15:16:17Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-15T15:16:17Z"}, "message": "rs6000: Don't let swaps pass break multiply low-part (PR101129)\n\n2021-07-15  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\tPR target/101129\n\t* config/rs6000/rs6000-p8swap.c (has_part_mult): New.\n\t(rs6000_analyze_swaps): Insns containing a subreg of a mult are\n\tnot swappable.\n\ngcc/testsuite/\n\tPR target/101129\n\t* gcc.target/powerpc/pr101129.c: New.", "tree": {"sha": "7fa76213f53a04aa4fcaec4420bc6d71aca3c224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa76213f53a04aa4fcaec4420bc6d71aca3c224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0/comments", "author": null, "committer": null, "parents": [{"sha": "92acae5047e4b8c5be035f067099942a93e55d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92acae5047e4b8c5be035f067099942a93e55d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92acae5047e4b8c5be035f067099942a93e55d0c"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "6b559aa50612cd96362724c31b52bdde1d45ba8c", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "patch": "@@ -1523,6 +1523,22 @@ replace_swap_with_copy (swap_web_entry *insn_entry, unsigned i)\n   insn->set_deleted ();\n }\n \n+/* INSN is known to contain a SUBREG, which we can normally handle,\n+   but if the SUBREG itself contains a MULT then we need to leave it alone\n+   to avoid turning a mult_hipart into a mult_lopart, for example.  */\n+static bool\n+has_part_mult (rtx_insn *insn)\n+{\n+  rtx body = PATTERN (insn);\n+  if (GET_CODE (body) != SET)\n+    return false;\n+  rtx src = SET_SRC (body);\n+  if (GET_CODE (src) != SUBREG)\n+    return false;\n+  rtx inner = XEXP (src, 0);\n+  return (GET_CODE (inner) == MULT);\n+}\n+\n /* Make NEW_MEM_EXP's attributes and flags resemble those of\n    ORIGINAL_MEM_EXP.  */\n static void\n@@ -2501,6 +2517,9 @@ rs6000_analyze_swaps (function *fun)\n \t\t    insn_entry[uid].is_swappable = 0;\n \t\t  else if (special != SH_NONE)\n \t\t    insn_entry[uid].special_handling = special;\n+\t\t  else if (insn_entry[uid].contains_subreg\n+\t\t\t   && has_part_mult (insn))\n+\t\t    insn_entry[uid].is_swappable = 0;\n \t\t  else if (insn_entry[uid].contains_subreg)\n \t\t    insn_entry[uid].special_handling = SH_SUBREG;\n \t\t}"}, {"sha": "1abc12480e4adaf39f36621336da11c81be65e3f", "filename": "gcc/testsuite/gcc.target/powerpc/pr101129.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101129.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101129.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101129.c?ref=ad5f8ac1d2f2dc92d43663243b52f9e9eb3cf7c0", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O \" } */\n+\n+/* PR101129: The swaps pass was turning a mult-lopart into a mult-hipart.\n+   Make sure we aren't doing that anymore.  */\n+\n+typedef unsigned char u8;\n+typedef unsigned char __attribute__((__vector_size__ (8))) U;\n+typedef unsigned char __attribute__((__vector_size__ (16))) V;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+typedef __int128 u128;\n+\n+u8 g;\n+U u;\n+\n+void\n+foo0 (u32 u32_0, U *ret)\n+{\n+  u128 u128_2 = u32_0 * (u128)((V){ 5 } > (u32_0 & 4));\n+  u64 u64_r = u128_2 >> 64;\n+  u8 u8_r = u64_r + g;\n+  *ret = u + u8_r;\n+}\n+\n+int\n+main (void)\n+{\n+  U x;\n+  foo0 (7, &x);\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != 0) __builtin_abort();\n+  return 0;\n+}"}]}