{"sha": "7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzOTAxMmMyNGRlZDdhOWQxZDRlYjFmYTI5MTYxODFkYWMzYWRhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-14T13:14:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-14T13:14:24Z"}, "message": "re PR tree-optimization/62081 (ICE: in fix_loop_structure, at loop-init.c:208 with -fno-tree-ch -fno-tree-cselim -fno-tree-dominator-opts -fno-tree-reassoc -fno-tree-sink)\n\n2014-08-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62081\n\t* tree-ssa-loop.c (pass_fix_loops): New pass.\n\t(pass_tree_loop::gate):  Do not fixup loops here.\n\t* tree-pass.h (make_pass_fix_loops): Declare.\n\t* passes.def: Schedule pass_fix_loops before GIMPLE loop passes.\n\nFrom-SVN: r213961", "tree": {"sha": "41dc7049a44602f9a0155dd8016a9abe934679e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41dc7049a44602f9a0155dd8016a9abe934679e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "833f94c0119e638645a2adc461e385dc1ffc5e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833f94c0119e638645a2adc461e385dc1ffc5e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833f94c0119e638645a2adc461e385dc1ffc5e2b"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "db09e06b45d8346cf78a451f6139c3b87073599a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "patch": "@@ -1,3 +1,11 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62081\n+\t* tree-ssa-loop.c (pass_fix_loops): New pass.\n+\t(pass_tree_loop::gate):  Do not fixup loops here.\n+\t* tree-pass.h (make_pass_fix_loops): Declare.\n+\t* passes.def: Schedule pass_fix_loops before GIMPLE loop passes.\n+\n 2014-08-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (type_hash_lookup, type_hash_add): Merge into ..."}, {"sha": "334c670c1c6c360a51b46a86b0cc52948cce6cc3", "filename": "gcc/passes.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "patch": "@@ -200,7 +200,10 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_asan);\n       NEXT_PASS (pass_tsan);\n       /* Pass group that runs when 1) enabled, 2) there are loops\n-\t in the function.  */\n+\t in the function.  Make sure to run pass_fix_loops before\n+\t to discover/remove loops before running the gate function\n+\t of pass_tree_loop.  */\n+      NEXT_PASS (pass_fix_loops);\n       NEXT_PASS (pass_tree_loop);\n       PUSH_INSERT_PASSES_WITHIN (pass_tree_loop)\n \t  NEXT_PASS (pass_tree_loop_init);"}, {"sha": "ed109c3545ef4df592c0fa9f777dca4b06bd187a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "patch": "@@ -349,6 +349,7 @@ extern gimple_opt_pass *make_pass_sra_early (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_early_ipa_sra (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tail_recursion (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tail_calls (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_fix_loops (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tree_loop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tree_no_loop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tree_loop_init (gcc::context *ctxt);"}, {"sha": "7d1f68e38b5733e629b61b7c92c06263e15ec52c", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d39012c24ded7a9d1d4eb1fa2916181dac3ada2/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=7d39012c24ded7a9d1d4eb1fa2916181dac3ada2", "patch": "@@ -43,6 +43,56 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n \n \n+/* A pass making sure loops are fixed up.  */\n+\n+namespace {\n+\n+const pass_data pass_data_fix_loops =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"fix_loops\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_TREE_LOOP, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_fix_loops : public gimple_opt_pass\n+{\n+public:\n+  pass_fix_loops (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_fix_loops, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *) { return flag_tree_loop_optimize; }\n+\n+  virtual unsigned int execute (function *fn);\n+}; // class pass_fix_loops\n+\n+unsigned int\n+pass_fix_loops::execute (function *)\n+{\n+  if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+    {\n+      calculate_dominance_info (CDI_DOMINATORS);\n+      fix_loop_structure (NULL);\n+    }\n+  return 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_fix_loops (gcc::context *ctxt)\n+{\n+  return new pass_fix_loops (ctxt);\n+}\n+\n+\n /* Gate for loop pass group.  The group is controlled by -ftree-loop-optimize\n    but we also avoid running it when the IL doesn't contain any loop.  */\n \n@@ -57,9 +107,6 @@ gate_loop (function *fn)\n   if (!loops_for_fn (fn))\n     return true;\n \n-  /* Make sure to drop / re-discover loops when necessary.  */\n-  if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n-    fix_loop_structure (NULL);\n   return number_of_loops (fn) > 1;\n }\n "}]}