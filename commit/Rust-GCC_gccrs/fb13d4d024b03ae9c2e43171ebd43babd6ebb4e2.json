{"sha": "fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxM2Q0ZDAyNGIwM2FlOWMyZTQzMTcxZWJkNDNiYWJkNmViYjRlMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-09T19:01:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-09T19:01:47Z"}, "message": "except.c (can_throw): See through a SEQUENCE.\n\n        * except.c (can_throw): See through a SEQUENCE.\n        (nothrow_function_p): New fn.\n        * except.h: Declare it.\n        * function.c (current_function_nothrow): New var.\n        (prepare_function_start): Initialize it.\n        * output.h: Declare it.\n        * toplev.c (rest_of_compilation): Set it.\n        * dwarf2out.c (dwarf2out_begin_prologue): Use it.\n\nFrom-SVN: r32449", "tree": {"sha": "0c173c0ea7357ad6956b8a86933712368ca50d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c173c0ea7357ad6956b8a86933712368ca50d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/comments", "author": null, "committer": null, "parents": [{"sha": "8051b17802cf05b70177ae9a370940ba677f1add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8051b17802cf05b70177ae9a370940ba677f1add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8051b17802cf05b70177ae9a370940ba677f1add"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "cc420c79673b499567a95c7ac2f4c4c560a431e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -1,3 +1,14 @@\n+2000-03-09  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* except.c (can_throw): See through a SEQUENCE.\n+\t(nothrow_function_p): New fn.\n+\t* except.h: Declare it.\n+\t* function.c (current_function_nothrow): New var.\n+\t(prepare_function_start): Initialize it.\n+\t* output.h: Declare it.\n+\t* toplev.c (rest_of_compilation): Set it.\n+\t* dwarf2out.c (dwarf2out_begin_prologue): Use it.\n+\n 2000-03-09  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.c (collect_formal_parameters): strncmp returns 0 for\n@@ -409,7 +420,7 @@ Mon Mar  6 15:22:29 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(struct tree_int_cst): int_cst_low is now unsigned HOST_WIDE_INT.\n \t(attribute_hash_list, type_hash_canon): hashcode is now unsigned.\n \t(type_hash_lookup, type_hash_add, type_hash_list): Likewise.\n-\t(min_precision): Result is unsignd.\n+\t(min_precision): Result is unsigned.\n \t(add_double, neg_double, mul_double): Low word is unsigned.\n \t(lshift_double, rshift_double, lrotate_double): Likewise.\n \t(rrotate_double, div_and_round_double): Likewise."}, {"sha": "0f18779f38c8076d92935ae0a06a224fb3b072d9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -1889,9 +1889,7 @@ dwarf2out_begin_prologue ()\n   fde->dw_fde_current_label = NULL;\n   fde->dw_fde_end = NULL;\n   fde->dw_fde_cfi = NULL;\n-\n-  /* Normally, only calls can throw, so a leaf function will never throw.  */\n-  fde->nothrow = (current_function_is_leaf && !asynchronous_exceptions);\n+  fde->nothrow = current_function_nothrow;\n \n   args_size = old_args_size = 0;\n }\n@@ -7394,7 +7392,10 @@ add_abstract_origin_attribute (die, origin)\n \n          Doing this for nested functions is wrong, however; functions are\n \t distinct units, and our context might not even be inline.  */\n-      tree fn = decl_function_context (origin);\n+      tree fn = origin;\n+      if (TYPE_P (fn))\n+\tfn = TYPE_STUB_DECL (fn);\n+      fn = decl_function_context (fn);\n       if (fn)\n \tgen_abstract_function (fn);\n     }"}, {"sha": "987305a379896588043da06e100b278d4cf20ba9", "filename": "gcc/except.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -1646,16 +1646,7 @@ expand_fixup_region_end (cleanup)\n }\n \n /* If we are using the setjmp/longjmp EH codegen method, we emit a\n-   call to __sjthrow.\n-\n-   Otherwise, we emit a call to __throw and note that we threw\n-   something, so we know we need to generate the necessary code for\n-   __throw.\n-\n-   Before invoking throw, the __eh_pc variable must have been set up\n-   to contain the PC being thrown from. This address is used by\n-   __throw to determine which exception region (if any) is\n-   responsible for handling the exception.  */\n+   call to __sjthrow.  Otherwise, we emit a call to __throw.  */\n \n void\n emit_throw ()\n@@ -2629,6 +2620,10 @@ static int\n can_throw (insn)\n      rtx insn;\n {\n+  if (GET_CODE (insn) == INSN\n+      && GET_CODE (PATTERN (insn)) == SEQUENCE)\n+    insn = XVECEXP (PATTERN (insn), 0, 0);\n+\n   /* Calls can always potentially throw exceptions, unless they have\n      a REG_EH_REGION note with a value of 0 or less.  */\n   if (GET_CODE (insn) == CALL_INSN)\n@@ -2649,6 +2644,24 @@ can_throw (insn)\n   return 0;\n }\n \n+/* Return nonzero if nothing in this function can throw.  */\n+\n+int\n+nothrow_function_p ()\n+{\n+  rtx insn;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    if (can_throw (insn))\n+      return 0;\n+  for (insn = current_function_epilogue_delay_list; insn;\n+       insn = XEXP (insn, 1))\n+    if (can_throw (insn))\n+      return 0;\n+\n+  return 1;\n+}\n+\n /* Scan a exception region looking for the matching end and then\n    remove it if possible. INSN is the start of the region, N is the\n    region number, and DELETE_OUTER is to note if anything in this"}, {"sha": "1087bc1dcfe569e3c2a6ff5121781502a396239c", "filename": "gcc/except.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -427,6 +427,10 @@ extern struct label_node *outer_context_label_stack;\n \n extern rtx exception_handler_labels;\n \n+/* Return nonzero if nothing in this function can throw.  */\n+\n+extern int nothrow_function_p\t\t\tPARAMS ((void));\n+\n /* Performs optimizations for exception handling, such as removing\n    unnecessary exception regions. Invoked from jump_optimize ().  */\n "}, {"sha": "1ffb821dda492aea712248cf14ef6b4c41e3d7c9", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -107,6 +107,11 @@ Boston, MA 02111-1307, USA.  */\n    compiler passes. */\n int current_function_is_leaf;\n \n+/* Nonzero if function being compiled doesn't contain any instructions\n+   that can throw an exception.  This is set prior to final.  */\n+\n+int current_function_nothrow;\n+\n /* Nonzero if function being compiled doesn't modify the stack pointer\n    (ignoring the prologue and epilogue).  This is only valid after\n    life_analysis has run. */\n@@ -5760,6 +5765,7 @@ prepare_function_start ()\n   current_function_calls_alloca = 0;\n   current_function_contains_functions = 0;\n   current_function_is_leaf = 0;\n+  current_function_nothrow = 0;\n   current_function_sp_is_unchanging = 0;\n   current_function_uses_only_leaf_regs = 0;\n   current_function_has_computed_jump = 0;"}, {"sha": "97c6f2e71ae34fc02c241e6f87c6fd58ecaea42a", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -412,6 +412,11 @@ extern FILE *asm_out_file;\n \n extern int current_function_is_leaf;\n \n+/* Nonzero if function being compiled doesn't contain any instructions\n+   that can throw an exception.  This is set prior to final.  */\n+\n+extern int current_function_nothrow;\n+\n /* Nonzero if function being compiled doesn't modify the stack pointer\n    (ignoring the prologue and epilogue).  This is only valid after\n    life_analysis has run. */"}, {"sha": "8e1d5f717d4f10e884e772df00b9e955c29b698a", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fb13d4d024b03ae9c2e43171ebd43babd6ebb4e2", "patch": "@@ -3674,10 +3674,12 @@ rest_of_compilation (decl)\n \tprint_rtl_graph_with_bb (dump_base_name, \".20.stack\", insns);\n     }\n \n-   if (ggc_p)\n-     ggc_collect ();\n+  if (ggc_p)\n+    ggc_collect ();\n #endif\n \n+  current_function_nothrow = nothrow_function_p ();\n+\n   /* Now turn the rtl into assembler code.  */\n \n   TIMEVAR (final_time,"}]}