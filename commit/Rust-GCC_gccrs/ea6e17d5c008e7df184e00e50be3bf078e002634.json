{"sha": "ea6e17d5c008e7df184e00e50be3bf078e002634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2ZTE3ZDVjMDA4ZTdkZjE4NGUwMGU1MGJlM2JmMDc4ZTAwMjYzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-25T12:35:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-25T12:35:08Z"}, "message": "cgraph.c (cgraph_node::verify_node): Compare against builtin by using DECL_BUILT_IN_CLASS and DECL_FUNCTION_CODE.\n\n2016-07-25  Richard Biener  <rguenther@suse.de>\n\n\t* cgraph.c (cgraph_node::verify_node): Compare against builtin\n\tby using DECL_BUILT_IN_CLASS and DECL_FUNCTION_CODE.\n\t* tree-chkp.c (chkp_gimple_call_builtin_p): Likewise.\n\t* tree-streamer.h (streamer_handle_as_builtin_p): Remove.\n\t(streamer_get_builtin_tree): Likewise.\n\t(streamer_write_builtin): Likewise.\n\t* lto-streamer.h (LTO_builtin_decl): Remove.\n\t* lto-streamer-in.c (lto_read_tree_1): Remove assert.\n\t(lto_input_scc): Remove LTO_builtin_decl handling.\n\t(lto_input_tree_1): Liekwise.\n\t* lto-streamer-out.c (lto_output_tree_1): Remove special\n\thandling of builtins.\n\t(DFS::DFS): Likewise.\n\t* tree-streamer-in.c (streamer_get_builtin_tree): Remove.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Remove\n\tassert.\n\t(streamer_write_builtin): Remove.\n\n\tlto/\n\t* lto.c (compare_tree_sccs_1): Remove streamer_handle_as_builtin_p uses.\n\t(unify_scc): Likewise.\n\t(lto_read_decls): Likewise.\n\nFrom-SVN: r238709", "tree": {"sha": "0399e6e9c525ba63a77eae7d1e43f74c8a8d83f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0399e6e9c525ba63a77eae7d1e43f74c8a8d83f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea6e17d5c008e7df184e00e50be3bf078e002634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6e17d5c008e7df184e00e50be3bf078e002634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6e17d5c008e7df184e00e50be3bf078e002634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6e17d5c008e7df184e00e50be3bf078e002634/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf01e070a65a0d85cce05034673648b79d467c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf01e070a65a0d85cce05034673648b79d467c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf01e070a65a0d85cce05034673648b79d467c72"}], "stats": {"total": 198, "additions": 41, "deletions": 157}, "files": [{"sha": "b55a00c9b3bd1d9df1da6445c8685bcc517b8432", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -1,3 +1,23 @@\n+2016-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* cgraph.c (cgraph_node::verify_node): Compare against builtin\n+\tby using DECL_BUILT_IN_CLASS and DECL_FUNCTION_CODE.\n+\t* tree-chkp.c (chkp_gimple_call_builtin_p): Likewise.\n+\t* tree-streamer.h (streamer_handle_as_builtin_p): Remove.\n+\t(streamer_get_builtin_tree): Likewise.\n+\t(streamer_write_builtin): Likewise.\n+\t* lto-streamer.h (LTO_builtin_decl): Remove.\n+\t* lto-streamer-in.c (lto_read_tree_1): Remove assert.\n+\t(lto_input_scc): Remove LTO_builtin_decl handling.\n+\t(lto_input_tree_1): Liekwise.\n+\t* lto-streamer-out.c (lto_output_tree_1): Remove special\n+\thandling of builtins.\n+\t(DFS::DFS): Likewise.\n+\t* tree-streamer-in.c (streamer_get_builtin_tree): Remove.\n+\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Remove\n+\tassert.\n+\t(streamer_write_builtin): Remove.\n+\n 2016-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* lto-cgraph.c (input_symtab): Don't call get_working_sets"}, {"sha": "9bc5b6b7c514a5ac7041587a7e1e3f753bb20b22", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -3136,8 +3136,9 @@ cgraph_node::verify_node (void)\n \t  && !e->speculative\n \t  /* Optimized out calls are redirected to __builtin_unreachable.  */\n \t  && (e->frequency\n-\t      || e->callee->decl\n-\t\t != builtin_decl_implicit (BUILT_IN_UNREACHABLE))\n+\t      || ! e->callee->decl\n+\t      || DECL_BUILT_IN_CLASS (e->callee->decl) != BUILT_IN_NORMAL\n+\t      || DECL_FUNCTION_CODE (e->callee->decl) != BUILT_IN_UNREACHABLE)\n \t  && (e->frequency\n \t      != compute_call_stmt_bb_frequency (e->caller->decl,\n \t\t\t\t\t\t gimple_bb (e->call_stmt))))"}, {"sha": "1d56d21fcfdd3c22b38f510bc9da30cad9340164", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -1302,10 +1302,6 @@ lto_read_tree_1 (struct lto_input_block *ib, struct data_in *data_in, tree expr)\n       && TREE_CODE (expr) != TRANSLATION_UNIT_DECL)\n     DECL_INITIAL (expr) = stream_read_tree (ib, data_in);\n \n-  /* We should never try to instantiate an MD or NORMAL builtin here.  */\n-  if (TREE_CODE (expr) == FUNCTION_DECL)\n-    gcc_assert (!streamer_handle_as_builtin_p (expr));\n-\n #ifdef LTO_STREAMER_DEBUG\n   /* Remove the mapping to RESULT's original address set by\n      streamer_alloc_tree.  */\n@@ -1368,7 +1364,6 @@ lto_input_scc (struct lto_input_block *ib, struct data_in *data_in,\n \t  if (tag == LTO_null\n \t      || (tag >= LTO_field_decl_ref && tag <= LTO_global_decl_ref)\n \t      || tag == LTO_tree_pickle_reference\n-\t      || tag == LTO_builtin_decl\n \t      || tag == LTO_integer_cst\n \t      || tag == LTO_tree_scc)\n \t    gcc_unreachable ();\n@@ -1420,12 +1415,6 @@ lto_input_tree_1 (struct lto_input_block *ib, struct data_in *data_in,\n \t the reader cache.  */\n       result = streamer_get_pickled_tree (ib, data_in);\n     }\n-  else if (tag == LTO_builtin_decl)\n-    {\n-      /* If we are going to read a built-in function, all we need is\n-\t the code and class.  */\n-      result = streamer_get_builtin_tree (ib, data_in);\n-    }\n   else if (tag == LTO_integer_cst)\n     {\n       /* For shared integer constants in singletons we can use the"}, {"sha": "aa6b5892ea5955cdfcfe34df7d2b1e6a0f5c6905", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -445,17 +445,8 @@ lto_output_tree_1 (struct output_block *ob, tree expr, hashval_t hash,\n   bool exists_p = streamer_tree_cache_insert (ob->writer_cache,\n \t\t\t\t\t      expr, hash, &ix);\n   gcc_assert (!exists_p);\n-  if (streamer_handle_as_builtin_p (expr))\n-    {\n-      /* MD and NORMAL builtins do not need to be written out\n-\t completely as they are always instantiated by the\n-\t compiler on startup.  The only builtins that need to\n-\t be written out are BUILT_IN_FRONTEND.  For all other\n-\t builtins, we simply write the class and code.  */\n-      streamer_write_builtin (ob, expr);\n-    }\n-  else if (TREE_CODE (expr) == INTEGER_CST\n-\t   && !TREE_OVERFLOW (expr))\n+  if (TREE_CODE (expr) == INTEGER_CST\n+      && !TREE_OVERFLOW (expr))\n     {\n       /* Shared INTEGER_CST nodes are special because they need their\n \t original type to be materialized by the reader (to implement\n@@ -559,10 +550,8 @@ DFS::DFS (struct output_block *ob, tree expr, bool ref_p, bool this_ref_p,\n \t  cstate->low = cstate->dfsnum;\n \t  w.cstate = cstate;\n \n-\t  if (streamer_handle_as_builtin_p (expr))\n-\t    ;\n-\t  else if (TREE_CODE (expr) == INTEGER_CST\n-\t\t   && !TREE_OVERFLOW (expr))\n+\t  if (TREE_CODE (expr) == INTEGER_CST\n+\t      && !TREE_OVERFLOW (expr))\n \t    DFS_write_tree (ob, cstate, TREE_TYPE (expr), ref_p, ref_p);\n \t  else\n \t    {\n@@ -675,8 +664,6 @@ DFS::DFS (struct output_block *ob, tree expr, bool ref_p, bool this_ref_p,\n \t\t\t\t    \"in LTO streams\",\n \t\t\t\t    get_tree_code_name (TREE_CODE (t)));\n \n-\t\t  gcc_checking_assert (!streamer_handle_as_builtin_p (t));\n-\n \t\t  /* Write the header, containing everything needed to\n \t\t     materialize EXPR on the reading side.  */\n \t\t  streamer_write_tree_header (ob, t);\n@@ -2074,7 +2061,9 @@ output_function (struct cgraph_node *node)\n   streamer_write_chain (ob, DECL_ARGUMENTS (function), true);\n \n   /* Output DECL_INITIAL for the function, which contains the tree of\n-     lexical scopes.  */\n+     lexical scopes.\n+     ???  This only streams the outermost block because we do not\n+     recurse into BLOCK_SUBBLOCKS but re-build those on stream-in.  */\n   stream_write_tree (ob, DECL_INITIAL (function), true);\n \n   /* We also stream abstract functions where we stream only stuff needed for"}, {"sha": "ecc1e5d58e55b6e1e463d7f05fa8545672f54b02", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -162,9 +162,6 @@ enum LTO_tags\n   /* EH region holding the previous statement.  */\n   LTO_eh_region,\n \n-  /* An MD or NORMAL builtin.  Only the code and class are streamed out.  */\n-  LTO_builtin_decl,\n-\n   /* Shared INTEGER_CST node.  */\n   LTO_integer_cst,\n "}, {"sha": "86cc8b134597066e0b09512504e40d8b6ea3bef8", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -1,3 +1,9 @@\n+2016-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto.c (compare_tree_sccs_1): Remove streamer_handle_as_builtin_p uses.\n+\t(unify_scc): Likewise.\n+\t(lto_read_decls): Likewise.\n+\n 2016-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in: Don't cat ../stage_current if it does not exist."}, {"sha": "73d1e26be71bddca03439e36ec6f61083c29deda", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -1061,12 +1061,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t\t\tTREE_FIXED_CST_PTR (t1), TREE_FIXED_CST_PTR (t2)))\n       return false;\n \n-\n-  /* We want to compare locations up to the point where it makes\n-     a difference for streaming - thus whether the decl is builtin or not.  */\n-  if (CODE_CONTAINS_STRUCT (code, TS_DECL_MINIMAL))\n-    compare_values (streamer_handle_as_builtin_p);\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n     {\n       compare_values (DECL_MODE);\n@@ -1602,8 +1596,7 @@ unify_scc (struct data_in *data_in, unsigned from,\n \t\t   streamer.  The others should be singletons, too, and we\n \t\t   should not merge them in any way.  */\n \t\tgcc_assert (code != TRANSLATION_UNIT_DECL\n-\t\t\t    && code != IDENTIFIER_NODE\n-\t\t\t    && !streamer_handle_as_builtin_p (t));\n+\t\t\t    && code != IDENTIFIER_NODE);\n \t      }\n \n \t  /* Fixup the streamer cache with the prevailing nodes according\n@@ -1710,8 +1703,7 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t  if (len == 1\n \t      && (TREE_CODE (first) == IDENTIFIER_NODE\n \t\t  || TREE_CODE (first) == INTEGER_CST\n-\t\t  || TREE_CODE (first) == TRANSLATION_UNIT_DECL\n-\t\t  || streamer_handle_as_builtin_p (first)))\n+\t\t  || TREE_CODE (first) == TRANSLATION_UNIT_DECL))\n \t    continue;\n \n \t  /* Try to unify the SCC with already existing ones.  */"}, {"sha": "44d6d702607a5ce44568a6efd66ebdf4a7024694", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -431,9 +431,10 @@ chkp_gimple_call_builtin_p (gimple *call,\n \t\t\t    enum built_in_function code)\n {\n   tree fndecl;\n-  if (is_gimple_call (call)\n+  if (gimple_call_builtin_p (call, BUILT_IN_MD)\n       && (fndecl = targetm.builtin_chkp_function (code))\n-      && gimple_call_fndecl (call) == fndecl)\n+      && (DECL_FUNCTION_CODE (gimple_call_fndecl (call))\n+\t  == DECL_FUNCTION_CODE (fndecl)))\n     return true;\n   return false;\n }"}, {"sha": "671ce31d3019c8ee4d24465e5919c6d8d82f0e4d", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -1113,62 +1113,3 @@ streamer_get_pickled_tree (struct lto_input_block *ib, struct data_in *data_in)\n \n   return result;\n }\n-\n-\n-/* Read a code and class from input block IB and return the\n-   corresponding builtin.  DATA_IN is as in stream_read_tree.  */\n-\n-tree\n-streamer_get_builtin_tree (struct lto_input_block *ib, struct data_in *data_in)\n-{\n-  enum built_in_class fclass;\n-  enum built_in_function fcode;\n-  const char *asmname;\n-  tree result;\n-\n-  fclass = streamer_read_enum (ib, built_in_class, BUILT_IN_LAST);\n-  gcc_assert (fclass == BUILT_IN_NORMAL || fclass == BUILT_IN_MD);\n-\n-  fcode = (enum built_in_function) streamer_read_uhwi (ib);\n-\n-  if (fclass == BUILT_IN_NORMAL)\n-    {\n-      if (fcode >= END_BUILTINS)\n-\tfatal_error (input_location,\n-\t\t     \"machine independent builtin code out of range\");\n-      result = builtin_decl_explicit (fcode);\n-      if (!result)\n-\t{\n-\t  if (fcode > BEGIN_CHKP_BUILTINS && fcode < END_CHKP_BUILTINS)\n-\t    {\n-\t      fcode = (enum built_in_function)\n-\t\t      (fcode - BEGIN_CHKP_BUILTINS - 1);\n-\t      result = builtin_decl_explicit (fcode);\n-\t      result = chkp_maybe_clone_builtin_fndecl (result);\n-\t    }\n-\t  else if (fcode > BEGIN_SANITIZER_BUILTINS\n-\t\t   && fcode < END_SANITIZER_BUILTINS)\n-\t    {\n-\t      initialize_sanitizer_builtins ();\n-\t      result = builtin_decl_explicit (fcode);\n-\t    }\n-\t}\n-      gcc_assert (result);\n-    }\n-  else if (fclass == BUILT_IN_MD)\n-    {\n-      result = targetm.builtin_decl (fcode, true);\n-      if (!result || result == error_mark_node)\n-\tfatal_error (input_location, \"target specific builtin not available\");\n-    }\n-  else\n-    gcc_unreachable ();\n-\n-  asmname = streamer_read_string (data_in, ib);\n-  if (asmname)\n-    set_builtin_user_assembler_name (result, asmname);\n-\n-  streamer_tree_cache_append (data_in->reader_cache, result, 0);\n-\n-  return result;\n-}"}, {"sha": "887448e58085619a221f25a3f858db071423aae1", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -278,10 +278,6 @@ pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  /* For normal/md builtins we only write the class and code, so they\n-     should never be handled here.  */\n-  gcc_assert (!streamer_handle_as_builtin_p (expr));\n-\n   bp_pack_enum (bp, built_in_class, BUILT_IN_LAST,\n \t\tDECL_BUILT_IN_CLASS (expr));\n   bp_pack_value (bp, DECL_STATIC_CONSTRUCTOR (expr), 1);\n@@ -487,41 +483,6 @@ streamer_write_tree_bitfields (struct output_block *ob, tree expr)\n }\n \n \n-/* Write the code and class of builtin EXPR to output block OB.  IX is\n-   the index into the streamer cache where EXPR is stored.*/\n-\n-void\n-streamer_write_builtin (struct output_block *ob, tree expr)\n-{\n-  gcc_assert (streamer_handle_as_builtin_p (expr));\n-\n-  if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_MD\n-      && !targetm.builtin_decl)\n-    sorry (\"tree bytecode streams do not support machine specific builtin \"\n-\t   \"functions on this target\");\n-\n-  streamer_write_record_start (ob, LTO_builtin_decl);\n-  streamer_write_enum (ob->main_stream, built_in_class, BUILT_IN_LAST,\n-\t\t       DECL_BUILT_IN_CLASS (expr));\n-  streamer_write_uhwi (ob, DECL_FUNCTION_CODE (expr));\n-\n-  if (DECL_ASSEMBLER_NAME_SET_P (expr))\n-    {\n-      /* When the assembler name of a builtin gets a user name,\n-\t the new name is always prefixed with '*' by\n-\t set_builtin_user_assembler_name.  So, to prevent the\n-\t reader side from adding a second '*', we omit it here.  */\n-      const char *str = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (expr));\n-      if (strlen (str) > 1 && str[0] == '*')\n-\tstreamer_write_string (ob, ob->main_stream, &str[1], true);\n-      else\n-\tstreamer_write_string (ob, ob->main_stream, NULL, true);\n-    }\n-  else\n-    streamer_write_string (ob, ob->main_stream, NULL, true);\n-}\n-\n-\n /* Emit the chain of tree nodes starting at T.  OB is the output block\n    to write to.  REF_P is true if chain elements should be emitted\n    as references.  */"}, {"sha": "1daf259d3355b82a561499f55ed015c1e30c3897", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6e17d5c008e7df184e00e50be3bf078e002634/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=ea6e17d5c008e7df184e00e50be3bf078e002634", "patch": "@@ -57,25 +57,13 @@ struct streamer_tree_cache_d\n   unsigned next_idx;\n };\n \n-/* Return true if tree node EXPR should be streamed as a builtin.  For\n-   these nodes, we just emit the class and function code.  */\n-static inline bool\n-streamer_handle_as_builtin_p (tree expr)\n-{\n-  return (TREE_CODE (expr) == FUNCTION_DECL\n-\t  && DECL_IS_BUILTIN (expr)\n-\t  && (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_NORMAL\n-\t      || DECL_BUILT_IN_CLASS (expr) == BUILT_IN_MD));\n-}\n-\n /* In tree-streamer-in.c.  */\n tree streamer_read_string_cst (struct data_in *, struct lto_input_block *);\n tree streamer_read_chain (struct lto_input_block *, struct data_in *);\n tree streamer_alloc_tree (struct lto_input_block *, struct data_in *,\n \t\t          enum LTO_tags);\n void streamer_read_tree_body (struct lto_input_block *, struct data_in *, tree);\n tree streamer_get_pickled_tree (struct lto_input_block *, struct data_in *);\n-tree streamer_get_builtin_tree (struct lto_input_block *, struct data_in *);\n void streamer_read_tree_bitfields (struct lto_input_block *,\n \t\t\t\t   struct data_in *, tree);\n \n@@ -87,7 +75,6 @@ void streamer_write_tree_header (struct output_block *, tree);\n void streamer_write_tree_bitfields (struct output_block *, tree);\n void streamer_write_tree_body (struct output_block *, tree, bool);\n void streamer_write_integer_cst (struct output_block *, tree, bool);\n-void streamer_write_builtin (struct output_block *, tree);\n \n /* In tree-streamer.c.  */\n extern unsigned char streamer_mode_table[1 << 8];"}]}