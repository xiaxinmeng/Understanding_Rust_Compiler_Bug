{"sha": "3a062dc03520c2ed2f5b1b19aa086dab355b084f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwNjJkYzAzNTIwYzJlZDJmNWIxYjE5YWEwODZkYWIzNTViMDg0Zg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2004-07-23T18:30:48Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2004-07-23T18:30:48Z"}, "message": "altivec.h (vec_vcmpgtsh): Fix C++ function name.\n\n2004-07-23  Janis Johnson  <janis187@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_vcmpgtsh): Fix C++ function name.\n\t(vec_vmulesb): Add missing C++ function.\n\t(vec_perm): Fix type of third argument in C++ function.\n\t(vec_vsum4shs): Fix C++ function name.\n\t(vec_any_ge): Remove C++ functions for unsupported arg combinations.\n\t(vec_vcmpgtsw, vec_vcmpgtuw, vec_minsb, vec_vmsummbm): Fix the\n\targument passed to the error handler in C macro.\n\t(vec_nmsub): Remove extra parens around argument names in C macro.\n\t(vec_packpx): Add missing parens in C macro.\n\nFrom-SVN: r85089", "tree": {"sha": "793881d8d8a634755c1e9a2ce56afba5ed66ef54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/793881d8d8a634755c1e9a2ce56afba5ed66ef54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a062dc03520c2ed2f5b1b19aa086dab355b084f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a062dc03520c2ed2f5b1b19aa086dab355b084f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a062dc03520c2ed2f5b1b19aa086dab355b084f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a062dc03520c2ed2f5b1b19aa086dab355b084f/comments", "author": null, "committer": null, "parents": [{"sha": "c7bb2a0348efa21763869bfc26f95efa8c94a5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7bb2a0348efa21763869bfc26f95efa8c94a5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7bb2a0348efa21763869bfc26f95efa8c94a5e3"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "f181f8d680cc2c3dc9542cf0044e834ce06f7eff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a062dc03520c2ed2f5b1b19aa086dab355b084f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a062dc03520c2ed2f5b1b19aa086dab355b084f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a062dc03520c2ed2f5b1b19aa086dab355b084f", "patch": "@@ -1,3 +1,15 @@\n+2004-07-23  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_vcmpgtsh): Fix C++ function name.\n+\t(vec_vmulesb): Add missing C++ function.\n+\t(vec_perm): Fix type of third argument in C++ function.\n+\t(vec_vsum4shs): Fix C++ function name.\n+\t(vec_any_ge): Remove C++ functions for unsupported arg combinations.\n+\t(vec_vcmpgtsw, vec_vcmpgtuw, vec_minsb, vec_vmsummbm): Fix the\n+\targument passed to the error handler in C macro.\n+\t(vec_nmsub): Remove extra parens around argument names in C macro.\n+\t(vec_packpx): Add missing parens in C macro.\n+\n 2004-07-22  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* machmode.def: Remove vector modes."}, {"sha": "6b09d7b0e86304c3d75bc71e692d865f8f04611f", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a062dc03520c2ed2f5b1b19aa086dab355b084f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a062dc03520c2ed2f5b1b19aa086dab355b084f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=3a062dc03520c2ed2f5b1b19aa086dab355b084f", "patch": "@@ -1325,7 +1325,7 @@ vec_vcmpgtuw (vector unsigned int a1, vector unsigned int a2)\n /* vec_vcmpgtsh */\n \n inline vector signed short\n-vec_cmpgtsh (vector signed short a1, vector signed short a2)\n+vec_vcmpgtsh (vector signed short a1, vector signed short a2)\n {\n   return (vector signed short) __builtin_altivec_vcmpgtsh ((vector signed short) a1, (vector signed short) a2);\n }\n@@ -3350,6 +3350,14 @@ vec_vmuleuh (vector unsigned short a1, vector unsigned short a2)\n   return (vector unsigned int) __builtin_altivec_vmuleuh ((vector signed short) a1, (vector signed short) a2);\n }\n \n+/* vec_vmulesb */\n+\n+inline vector signed short\n+vec_vmulesb (vector signed char a1, vector signed char a2)\n+{\n+  return (vector signed short) __builtin_altivec_vmuleub ((vector signed char) a1, (vector signed char) a2);\n+}\n+\n /* vec_vmuleub */\n inline vector unsigned short\n vec_vmuleub (vector unsigned char a1, vector unsigned char a2)\n@@ -3868,7 +3876,7 @@ vec_perm (vector unsigned char a1, vector unsigned char a2, vector unsigned char\n }\n \n inline vector bool char\n-vec_perm (vector bool char a1, vector bool char a2, vector bool char a3)\n+vec_perm (vector bool char a1, vector bool char a2, vector unsigned char a3)\n {\n   return (vector bool char) __builtin_altivec_vperm_4si ((vector signed int) a1, (vector signed int) a2, (vector signed char) a3);\n }\n@@ -5978,7 +5986,7 @@ vec_sum4s (vector signed short a1, vector signed int a2)\n /* vec_vsum4shs */\n \n inline vector signed int\n-vec_vsum4shss (vector signed short a1, vector signed int a2)\n+vec_vsum4shs (vector signed short a1, vector signed int a2)\n {\n   return (vector signed int) __builtin_altivec_vsum4shs ((vector signed short) a1, (vector signed int) a2);\n }\n@@ -7241,12 +7249,6 @@ vec_any_ge (vector signed char a1, vector signed char a2)\n   return __builtin_altivec_vcmpgtsb_p (__CR6_LT_REV, (vector signed char) a2, (vector signed char) a1);\n }\n \n-inline int\n-vec_any_ge (vector bool char a1, vector bool char a2)\n-{\n-  return __builtin_altivec_vcmpgtub_p (__CR6_LT_REV, (vector signed char) a2, (vector signed char) a1);\n-}\n-\n inline int\n vec_any_ge (vector bool char a1, vector unsigned char a2)\n {\n@@ -7283,12 +7285,6 @@ vec_any_ge (vector signed short a1, vector signed short a2)\n   return __builtin_altivec_vcmpgtsh_p (__CR6_LT_REV, (vector signed short) a2, (vector signed short) a1);\n }\n \n-inline int\n-vec_any_ge (vector bool short a1, vector bool short a2)\n-{\n-  return __builtin_altivec_vcmpgtuh_p (__CR6_LT_REV, (vector signed short) a2, (vector signed short) a1);\n-}\n-\n inline int\n vec_any_ge (vector bool short a1, vector unsigned short a2)\n {\n@@ -7325,12 +7321,6 @@ vec_any_ge (vector signed int a1, vector signed int a2)\n   return __builtin_altivec_vcmpgtsw_p (__CR6_LT_REV, (vector signed int) a2, (vector signed int) a1);\n }\n \n-inline int\n-vec_any_ge (vector bool int a1, vector bool int a2)\n-{\n-  return __builtin_altivec_vcmpgtuw_p (__CR6_LT_REV, (vector signed int) a2, (vector signed int) a1);\n-}\n-\n inline int\n vec_any_ge (vector bool int a1, vector unsigned int a2)\n {\n@@ -8345,12 +8335,12 @@ __ch (__bin_args_eq (vector float, (a1), vector float, (a2)), \\\n #define vec_vcmpgtsw(a1, a2) \\\n __ch (__bin_args_eq (vector signed int, (a1), vector signed int, (a2)), \\\n       ((vector signed int) __builtin_altivec_vcmpgtsw ((vector signed int) (a1), (vector signed int) (a2))), \\\n-  __builtin_altivec_compiletime_error (\"vec_abs\"))\n+  __builtin_altivec_compiletime_error (\"vec_vcmpgtsw\"))\n \n #define vec_vcmpgtuw(a1, a2) \\\n __ch (__bin_args_eq (vector unsigned int, (a1), vector unsigned int, (a2)), \\\n       ((vector signed int) __builtin_altivec_vcmpgtuw ((vector signed int) (a1), (vector signed int) (a2))), \\\n-  __builtin_altivec_compiletime_error (\"vec_abs\"))\n+  __builtin_altivec_compiletime_error (\"vec_vcmpgtuw\"))\n \n #define vec_vcmpgtsh(a1, a2) \\\n __ch (__bin_args_eq (vector signed short, (a1), vector signed short, (a2)), \\\n@@ -9061,7 +9051,7 @@ __builtin_altivec_compiletime_error (\"vec_vminuh\"))))\n #define vec_vminsb(a1, a2) \\\n __ch (__bin_args_eq (vector signed char, (a1), vector signed char, (a2)), \\\n       ((vector signed char) __builtin_altivec_vminsb ((vector signed char) (a1), (vector signed char) (a2))), \\\n-__builtin_altivec_compiletime_error (\"vec_abs\"))\n+__builtin_altivec_compiletime_error (\"vec_vminsb\"))\n \n #define vec_vminub(a1, a2) \\\n __ch (__bin_args_eq (vector signed char, (a1), vector unsigned char, (a2)), \\\n@@ -9112,7 +9102,7 @@ __builtin_altivec_compiletime_error (\"vec_vmsumuhm\"))\n #define vec_vmsummbm(a1, a2, a3) \\\n __ch (__tern_args_eq (vector signed char, (a1), vector unsigned char, (a2), vector signed int, (a3)), \\\n       ((vector signed int) __builtin_altivec_vmsummbm ((vector signed char) (a1), (vector signed char) (a2), (vector signed int) (a3))), \\\n-__builtin_altivec_compiletime_error (\"vec_abs\"))\n+__builtin_altivec_compiletime_error (\"vec_vmsummbm\"))\n \n #define vec_vmsumubm(a1, a2, a3) \\\n __ch (__tern_args_eq (vector unsigned char, (a1), vector unsigned char, (a2), vector unsigned int, (a3)), \\\n@@ -9222,8 +9212,8 @@ __ch (__bin_args_eq (vector unsigned char, (a1), vector unsigned char, (a2)), \\\n __builtin_altivec_compiletime_error (\"vec_vmuloub\"))\n \n #define vec_nmsub(a1, a2, a3) \\\n-__ch (__tern_args_eq (vector float, ((a1)), vector float, ((a2)) , vector float, ((a3))), \\\n-      ((vector float) __builtin_altivec_vnmsubfp ((vector float) ((a1)), (vector float) ((a2)), (vector float)((a3)))), \\\n+__ch (__tern_args_eq (vector float, (a1), vector float, (a2), vector float, (a3)), \\\n+      ((vector float) __builtin_altivec_vnmsubfp ((vector float) (a1), (vector float) (a2), (vector float) (a3))), \\\n     __builtin_altivec_compiletime_error (\"vec_nmsub\"))\n \n #define vec_nor(a1, a2) \\\n@@ -9331,7 +9321,7 @@ __builtin_altivec_compiletime_error (\"vec_vpkuhum\")))\n \n #define vec_packpx(a1, a2) \\\n __ch (__bin_args_eq (vector unsigned int, (a1), vector unsigned int, (a2)), \\\n-  (vector pixel) __builtin_altivec_vpkpx ((vector signed int) (a1), (vector signed int) (a2)), \\\n+  ((vector pixel) __builtin_altivec_vpkpx ((vector signed int) (a1), (vector signed int) (a2))), \\\n __builtin_altivec_compiletime_error (\"vec_packpx\"))\n \n #define vec_packs(a1, a2) \\"}]}