{"sha": "a7a389d6eee846a877b79c733d853cd2e6b162da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhMzg5ZDZlZWU4NDZhODc3Yjc5YzczM2Q4NTNjZDJlNmIxNjJkYQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2017-11-18T19:53:25Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2017-11-18T19:53:25Z"}, "message": "specfun.h: Expose airy_ai and airy_bi.\n\n2017-11-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/bits/specfun.h: Expose airy_ai and airy_bi.\n\t* include/tr1/modified_bessel_func.tcc: Treat NaN and inf arg, return.\n\t* testsuite/ext/special_functions/airy_ai/check_nan.cc: New.\n\t* testsuite/ext/special_functions/airy_ai/check_value.cc: New.\n\t* testsuite/ext/special_functions/airy_ai/compile.cc: New.\n\t* testsuite/ext/special_functions/airy_bi/check_nan.cc: New.\n\t* testsuite/ext/special_functions/airy_bi/check_value.cc: New.\n\t* testsuite/ext/special_functions/airy_bi/compile.cc: New.\n\nFrom-SVN: r254917", "tree": {"sha": "05cdcca745f49e08c16a41bc873809db9a92200d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cdcca745f49e08c16a41bc873809db9a92200d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a389d6eee846a877b79c733d853cd2e6b162da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a389d6eee846a877b79c733d853cd2e6b162da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a389d6eee846a877b79c733d853cd2e6b162da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a389d6eee846a877b79c733d853cd2e6b162da/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7037861a77985c3a8bccab9eefc02179694aa8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7037861a77985c3a8bccab9eefc02179694aa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7037861a77985c3a8bccab9eefc02179694aa8e"}], "stats": {"total": 542, "additions": 541, "deletions": 1}, "files": [{"sha": "4c348f1e89a71110b0efcf357dd6f7c0a4d72e4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -1,3 +1,14 @@\n+2017-11-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\tExpose Airy functions as an extenaion.\n+\t* include/bits/specfun.h: Expose airy_ai and airy_bi.\n+\t* include/tr1/modified_bessel_func.tcc: Treat NaN and inf arg, return.\n+\t* testsuite/ext/special_functions/airy_ai/check_nan.cc: New.\n+\t* testsuite/ext/special_functions/airy_ai/check_value.cc: New.\n+\t* testsuite/ext/special_functions/airy_ai/compile.cc: New.\n+\t* testsuite/ext/special_functions/airy_bi/check_nan.cc: New.\n+\t* testsuite/ext/special_functions/airy_bi/check_value.cc: New.\n+\t* testsuite/ext/special_functions/airy_bi/compile.cc: New.\n+\n 2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* acinclude.m4: Add cet.m4."}, {"sha": "93ba8fa25a22e43f7fdad05ba58d1e7f0d5f2a62", "filename": "libstdc++-v3/include/bits/specfun.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fspecfun.h?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -1206,6 +1206,78 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  // Airy functions\n+\n+  /**\n+   * Return the Airy function @f$ Ai(x) @f$ of @c float argument x.\n+   */\n+  inline float\n+  airy_aif(float __x)\n+  {\n+    float __Ai, __Bi, __Aip, __Bip;\n+    std::__detail::__airy<float>(__x, __Ai, __Bi, __Aip, __Bip);\n+    return __Ai;\n+  }\n+\n+  /**\n+   * Return the Airy function @f$ Ai(x) @f$ of <tt>long double</tt> argument x.\n+   */\n+  inline long double\n+  airy_ail(long double __x)\n+  {\n+    long double __Ai, __Bi, __Aip, __Bip;\n+    std::__detail::__airy<long double>(__x, __Ai, __Bi, __Aip, __Bip);\n+    return __Ai;\n+  }\n+\n+  /**\n+   * Return the Airy function @f$ Ai(x) @f$ of real argument x.\n+   */\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    airy_ai(_Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      __type __Ai, __Bi, __Aip, __Bip;\n+      std::__detail::__airy<__type>(__x, __Ai, __Bi, __Aip, __Bip);\n+      return __Ai;\n+    }\n+\n+  /**\n+   * Return the Airy function @f$ Bi(x) @f$ of @c float argument x.\n+   */\n+  inline float\n+  airy_bif(float __x)\n+  {\n+    float __Ai, __Bi, __Aip, __Bip;\n+    std::__detail::__airy<float>(__x, __Ai, __Bi, __Aip, __Bip);\n+    return __Bi;\n+  }\n+\n+  /**\n+   * Return the Airy function @f$ Bi(x) @f$ of <tt>long double</tt> argument x.\n+   */\n+  inline long double\n+  airy_bil(long double __x)\n+  {\n+    long double __Ai, __Bi, __Aip, __Bip;\n+    std::__detail::__airy<long double>(__x, __Ai, __Bi, __Aip, __Bip);\n+    return __Bi;\n+  }\n+\n+  /**\n+   * Return the Airy function @f$ Bi(x) @f$ of real argument x.\n+   */\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    airy_bi(_Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      __type __Ai, __Bi, __Aip, __Bip;\n+      std::__detail::__airy<__type>(__x, __Ai, __Bi, __Aip, __Bip);\n+      return __Bi;\n+    }\n+\n   // Confluent hypergeometric functions\n \n   /**"}, {"sha": "3910b95bd28322c7d78dc86dfff6cb2d0ed6a3d4", "filename": "libstdc++-v3/include/tr1/modified_bessel_func.tcc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -377,8 +377,19 @@ namespace tr1\n       const _Tp __absx = std::abs(__x);\n       const _Tp __rootx = std::sqrt(__absx);\n       const _Tp __z = _Tp(2) * __absx * __rootx / _Tp(3);\n+      const _Tp _S_NaN = std::numeric_limits<_Tp>::quiet_NaN();\n+      const _Tp _S_inf = std::numeric_limits<_Tp>::infinity();\n \n-      if (__x > _Tp(0))\n+      if (__isnan(__x))\n+        __Bip = __Aip = __Bi = __Ai = std::numeric_limits<_Tp>::quiet_NaN();\n+      else if (__z == _S_inf)\n+        {\n+\t  __Aip = __Ai = _Tp{0};\n+\t  __Bip = __Bi = _S_inf;\n+\t}\n+      else if (__z == -_S_inf)\n+\t__Bip = __Aip = __Bi = __Ai = _Tp{0};\n+      else if (__x > _Tp(0))\n         {\n           _Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu;\n "}, {"sha": "883af54572be392a49d2fb4e63cfb38e4b84326b", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_ai/check_nan.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_nan.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// airy_ai\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = __gnu_cxx::airy_ai(xf);\n+  float b = __gnu_cxx::airy_aif(xf);\n+  double c = __gnu_cxx::airy_ai(xd);\n+  long double d = __gnu_cxx::airy_ai(xl);\n+  long double e = __gnu_cxx::airy_ail(xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "10f2f7c3f17101dc3f9df3166c17203d167256df", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_ai/check_value.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcheck_value.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  airy_ai\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 2.0261570199409107e-15 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 5.7527019513802774e-14\n+// mean(f - f_GSL): 5.7893945880945940e-17\n+// variance(f - f_GSL): 8.5887539970087062e-35\n+// stddev(f - f_GSL): 9.2675530734971811e-18\n+const testcase_airy_ai<double>\n+data001[41] =\n+{\n+  { 0.040241238486444071, -10.000000000000000, 0.0 },\n+  { 0.31910324771912801, -9.5000000000000000, 0.0 },\n+  { -0.022133721547341240, -9.0000000000000000, 0.0 },\n+  { -0.33029023763020882, -8.5000000000000000, 0.0 },\n+  { -0.052705050356385910, -8.0000000000000000, 0.0 },\n+  { 0.32177571638064789, -7.5000000000000000, 0.0 },\n+  { 0.18428083525050609, -7.0000000000000000, 0.0 },\n+  { -0.23802030199711663, -6.5000000000000000, 0.0 },\n+  { -0.32914517362982321, -6.0000000000000000, 0.0 },\n+  { 0.017781541276574383, -5.5000000000000000, 0.0 },\n+  { 0.35076100902411411, -5.0000000000000000, 0.0 },\n+  { 0.29215278105595921, -4.5000000000000000, 0.0 },\n+  { -0.070265532949289680, -4.0000000000000000, 0.0 },\n+  { -0.37553382314043182, -3.5000000000000000, 0.0 },\n+  { -0.37881429367765823, -3.0000000000000000, 0.0 },\n+  { -0.11232506769296607, -2.5000000000000000, 0.0 },\n+  { 0.22740742820168561, -2.0000000000000000, 0.0 },\n+  { 0.46425657774886947, -1.5000000000000000, 0.0 },\n+  { 0.53556088329235207, -1.0000000000000000, 0.0 },\n+  { 0.47572809161053958, -0.50000000000000000, 0.0 },\n+  { 0.35502805388781722, 0.0000000000000000, 0.0 },\n+  { 0.23169360648083348, 0.50000000000000000, 0.0 },\n+  { 0.13529241631288141, 1.0000000000000000, 0.0 },\n+  { 0.071749497008105428, 1.5000000000000000, 0.0 },\n+  { 0.034924130423274372, 2.0000000000000000, 0.0 },\n+  { 0.015725923380470481, 2.5000000000000000, 0.0 },\n+  { 0.0065911393574607175, 3.0000000000000000, 0.0 },\n+  { 0.0025840987869896349, 3.5000000000000000, 0.0 },\n+  { 0.00095156385120480195, 4.0000000000000000, 0.0 },\n+  { 0.00033025032351430934, 4.5000000000000000, 0.0 },\n+  { 0.00010834442813607434, 5.0000000000000000, 0.0 },\n+  { 3.3685311908599812e-05, 5.5000000000000000, 0.0 },\n+  { 9.9476943602528973e-06, 6.0000000000000000, 0.0 },\n+  { 2.7958823432049148e-06, 6.5000000000000000, 0.0 },\n+  { 7.4921288639971570e-07, 7.0000000000000000, 0.0 },\n+  { 1.9172560675134295e-07, 7.5000000000000000, 0.0 },\n+  { 4.6922076160992236e-08, 8.0000000000000000, 0.0 },\n+  { 1.0997009755195515e-08, 8.5000000000000000, 0.0 },\n+  { 2.4711684308724904e-09, 9.0000000000000000, 0.0 },\n+  { 5.3302637046174900e-10, 9.5000000000000000, 0.0 },\n+  { 1.1047532552898652e-10, 10.000000000000000, 0.0 },\n+};\n+const double toler001 = 5.0000000000000029e-12;\n+\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_airy_ai<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = __gnu_cxx::airy_ai(data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  return 0;\n+}"}, {"sha": "ecd17df8833c7c141131376a2bd09d46cc5e2f0e", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_ai/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_ai%2Fcompile.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// airy_ai\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  __gnu_cxx::airy_ai(xf);\n+  __gnu_cxx::airy_aif(xf);\n+  __gnu_cxx::airy_ai(xd);\n+  __gnu_cxx::airy_ai(xl);\n+  __gnu_cxx::airy_ail(xl);\n+\n+  return;\n+}\n+"}, {"sha": "b0bed0b76f5b2d60280e4ef03245500e4d8f199c", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_bi/check_nan.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_nan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_nan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_nan.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// airy_bi\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  float xf = std::numeric_limits<float>::quiet_NaN();\n+  double xd = std::numeric_limits<double>::quiet_NaN();\n+  long double xl = std::numeric_limits<long double>::quiet_NaN();\n+\n+  float a = __gnu_cxx::airy_bi(xf);\n+  float b = __gnu_cxx::airy_bif(xf);\n+  double c = __gnu_cxx::airy_bi(xd);\n+  long double d = __gnu_cxx::airy_bi(xl);\n+  long double e = __gnu_cxx::airy_bil(xl);\n+\n+  bool test [[gnu::unused]] = true;\n+  VERIFY(std::isnan(a));\n+  VERIFY(std::isnan(b));\n+  VERIFY(std::isnan(c));\n+  VERIFY(std::isnan(d));\n+  VERIFY(std::isnan(e));\n+\n+  return;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "09740037abf3f653e27339fc413b599d326dc30b", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_bi/check_value.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcheck_value.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,126 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+//\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//  airy_bi\n+\n+//  Compare against values generated by the GNU Scientific Library.\n+//  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n+#include <limits>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+#include <specfun_testcase.h>\n+\n+// Test data.\n+// max(|f - f_GSL|): 3.2782554626464844e-06 at index 40\n+// max(|f - f_GSL| / |f_GSL|): 1.3623770134694109e-13\n+// mean(f - f_GSL): -8.0102555317125191e-08\n+// variance(f - f_GSL): 2.6209716422814286e-13\n+// stddev(f - f_GSL): 5.1195425989842373e-07\n+const testcase_airy_bi<double>\n+data001[41] =\n+{\n+  { -0.31467982964383845, -10.000000000000000, 0.0 },\n+  { 0.037785432489467467, -9.5000000000000000, 0.0 },\n+  { 0.32494732345524480, -9.0000000000000000, 0.0 },\n+  { 0.0077544364476580746, -8.5000000000000000, 0.0 },\n+  { -0.33125158075113792, -8.0000000000000000, 0.0 },\n+  { -0.11246348507649087, -7.5000000000000000, 0.0 },\n+  { 0.29376207185441372, -7.0000000000000000, 0.0 },\n+  { 0.26101265763648318, -6.5000000000000000, 0.0 },\n+  { -0.14669837667055663, -6.0000000000000000, 0.0 },\n+  { -0.36781345391571185, -5.5000000000000000, 0.0 },\n+  { -0.13836913490160088, -5.0000000000000000, 0.0 },\n+  { 0.25387265769693296, -4.5000000000000000, 0.0 },\n+  { 0.39223470570699931, -4.0000000000000000, 0.0 },\n+  { 0.16893983748105870, -3.5000000000000000, 0.0 },\n+  { -0.19828962637492650, -3.0000000000000000, 0.0 },\n+  { -0.43242247184070520, -2.5000000000000000, 0.0 },\n+  { -0.41230258795639835, -2.0000000000000000, 0.0 },\n+  { -0.19178486115704119, -1.5000000000000000, 0.0 },\n+  { 0.10399738949694459, -1.0000000000000000, 0.0 },\n+  { 0.38035265975105381, -0.50000000000000000, 0.0 },\n+  { 0.61492662744600068, 0.0000000000000000, 0.0 },\n+  { 0.85427704310315555, 0.50000000000000000, 0.0 },\n+  { 1.2074235949528713, 1.0000000000000000, 0.0 },\n+  { 1.8789415037478949, 1.5000000000000000, 0.0 },\n+  { 3.2980949999782148, 2.0000000000000000, 0.0 },\n+  { 6.4816607384605804, 2.5000000000000000, 0.0 },\n+  { 14.037328963730236, 3.0000000000000000, 0.0 },\n+  { 33.055506754611478, 3.5000000000000000, 0.0 },\n+  { 83.847071408468111, 4.0000000000000000, 0.0 },\n+  { 227.58808183559950, 4.5000000000000000, 0.0 },\n+  { 657.79204417117160, 5.0000000000000000, 0.0 },\n+  { 2016.5800386595315, 5.5000000000000000, 0.0 },\n+  { 6536.4461048098583, 6.0000000000000000, 0.0 },\n+  { 22340.607718396990, 6.5000000000000000, 0.0 },\n+  { 80327.790709430337, 7.0000000000000000, 0.0 },\n+  { 303229.61511253362, 7.5000000000000000, 0.0 },\n+  { 1199586.0041244617, 8.0000000000000000, 0.0 },\n+  { 4965319.5414712988, 8.5000000000000000, 0.0 },\n+  { 21472868.891435351, 9.0000000000000000, 0.0 },\n+  { 96892265.580451161, 9.5000000000000000, 0.0 },\n+  { 455641153.54822654, 10.000000000000000, 0.0 },\n+};\n+const double toler001 = 1.0000000000000006e-11;\n+\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_airy_bi<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = __gnu_cxx::airy_bi(data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+int\n+main()\n+{\n+  test(data001, toler001);\n+  return 0;\n+}"}, {"sha": "0dd36e02ea58cd54b12f0a80435d86b128217b51", "filename": "libstdc++-v3/testsuite/ext/special_functions/airy_bi/compile.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a389d6eee846a877b79c733d853cd2e6b162da/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fairy_bi%2Fcompile.cc?ref=a7a389d6eee846a877b79c733d853cd2e6b162da", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// airy_bi\n+\n+#include <cmath>\n+\n+void\n+test01()\n+{\n+  float xf = 0.5F;\n+  double xd = 0.5;\n+  long double xl = 0.5L;\n+\n+  __gnu_cxx::airy_bi(xf);\n+  __gnu_cxx::airy_bif(xf);\n+  __gnu_cxx::airy_bi(xd);\n+  __gnu_cxx::airy_bi(xl);\n+  __gnu_cxx::airy_bil(xl);\n+\n+  return;\n+}\n+"}]}