{"sha": "f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4MzI1MTI1YjdlYTMxZTVjYmZkMzI2OWEzZWU2YTRiNzlkZGZkMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T20:19:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:22Z"}, "message": "Initial TestSuite setup for make check-rust\n\nThis is an initial basic testsuite with one file with expected failures\nfor now.", "tree": {"sha": "96c155ee48eef74c82336f2b4da3b1a92381f549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96c155ee48eef74c82336f2b4da3b1a92381f549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db8774645244b08d0e0cd18275ea64ff96f6911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db8774645244b08d0e0cd18275ea64ff96f6911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db8774645244b08d0e0cd18275ea64ff96f6911"}], "stats": {"total": 842, "additions": 841, "deletions": 1}, "files": [{"sha": "edc8f2accace216d6564ca17b5e8097dfa07bd19", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -642,6 +642,7 @@ languages = { language=brig;\tgcc-check-target=check-brig;\n \t\t\t\tlib-check-target=check-target-libhsail-rt; };\n languages = { language=d;\tgcc-check-target=check-d;\n \t\t\t\tlib-check-target=check-target-libphobos; };\n+languages = { language=rust;\tgcc-check-target=check-rust; };\n \n // Toplevel bootstrap\n bootstrap_stage = { id=1 ; };"}, {"sha": "93c4e06d0306e8ee16db1cdfdc67a27dee0b5eb1", "filename": "Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -55553,6 +55553,14 @@ check-gcc-d:\n \t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-d);\n check-d: check-gcc-d check-target-libphobos\n \n+.PHONY: check-gcc-rust check-rust\n+check-gcc-rust:\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(HOST_EXPORTS) \\\n+\t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-rust);\n+check-rust: check-gcc-rust\n+\n \n # The gcc part of install-no-fixedincludes, which relies on an intimate\n # knowledge of how a number of gcc internal targets (inter)operate.  Delegate."}, {"sha": "d35b41f87c1676920a7ebbca8f2cf82eb07e2278", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -30,7 +30,7 @@ GCCRS_INSTALL_NAME := $(shell echo gccrs|sed '$(program_transform_name)')\n GCCRS_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccrs|sed '$(program_transform_name)')\n \n # Define the names for selecting rust in LANGUAGES.\n-rust: gccrs$(exeext) rust1$(exeext)\n+rust: rust1$(exeext)\n \n # Tell GNU make to ignore files by these names if they exist.\n .PHONY: rust\n@@ -88,6 +88,10 @@ rust1$(exeext): $(RUST_ALL_OBJS) attribs.o  $(BACKEND) $(LIBDEPS)\n \n # Build hooks.\n \n+lang_checks += check-rust\n+lang_checks_parallelized += check-rust\n+check_rust_parallelize = 10\n+\n # Copies its dependencies into the source directory. This generally should be used for generated files\n # such as Bison output files which are not version-controlled, but should be included in any release \n # tarballs. This target will be executed during a bootstrap if \u2018--enable-generated-files-in-srcdir\u2019 "}, {"sha": "e7c9852349ed5bd6c0ac368cf48e086b3ab0c007", "filename": "gcc/testsuite/lib/rust-dg.exp", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Flib%2Frust-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Flib%2Frust-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust-dg.exp?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,106 @@\n+# Copyright (C) 2012-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib gcc-dg.exp\n+\n+# Define rust callbacks for dg.exp.\n+\n+proc rust-dg-test { prog do_what extra_tool_flags } {\n+    upvar dg-do-what dg-do-what\n+\n+    # Demote link and run tests to compile-only if D runtime is missing.\n+    if ![check_effective_target_d_runtime] {\n+\tswitch $do_what {\n+\t    link -\n+\t    run {\n+\t\tset do_what compile\n+\t\tset dg-do-what compile\n+\t    }\n+\t}\n+    }\n+\n+    # Strip rust.test prefix off test names to avoid pathname failures in\n+    # some tests.\n+    set prog [dg-trim-dirname rust.test $prog]\n+\n+    set result \\\n+\t[gcc-dg-test-1 rust_target_compile $prog $do_what $extra_tool_flags]\n+\n+    set comp_output [lindex $result 0]\n+    set output_file [lindex $result 1]\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+proc rust-dg-prune { system text } {\n+    return [gcc-dg-prune $system $text]\n+}\n+\n+# Utility routines.\n+\n+#\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+#\n+\n+proc rust-dg-runtest { testcases flags default-extra-flags } {\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of\n+\t# them, skip it.\n+\t\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+\t}\n+\n+\t# Use TORTURE_OPTIONS to cycle through an option list.\n+\tif [torture-options-exist] then {\n+\t    global torture_with_loops\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list { \"\" }\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags_t $option_list {\n+\t    verbose \"Testing $nshort, $flags $flags_t\" 1\n+\t    dg-test $test \"$flags $flags_t\" ${default-extra-flags}\n+\t}\n+    }\n+}\n+\n+#\n+# rust_load -- wrapper around default rust_load to handle tests that\n+# require program arguments passed to them.\n+#\n+\n+if { [info procs rust_load] != [list] \\\n+      && [info procs prev_rust_load] == [list] } {\n+    rename rust_load prev_rust_load\n+\n+    proc rust_load { program args } {\n+\tglobal RUST_EXECUTE_ARGS\n+\tif [info exists RUST_EXECUTE_ARGS] then {\n+\t    set args [concat \"{$RUST_EXECUTE_ARGS}\"]\n+\t}\n+\t#print \"Running: $program [lindex $args 0]\"\n+\tset result [eval [list prev_rust_load $program] $args ]\n+\treturn $result\n+    }\n+}\n+"}, {"sha": "541b0520dc8aabeaca8ccf26e1e42519c7453092", "filename": "gcc/testsuite/lib/rust.exp", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Flib%2Frust.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Flib%2Frust.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Frust.exp?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,213 @@\n+# Copyright (C) 2012-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+#\n+# rust support library routines\n+#\n+\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+load_lib timeout.exp\n+load_lib target-libpath.exp\n+\n+#\n+# RUST_UNDER_TEST is the compiler under test.\n+#\n+\n+set rust_compile_options \"\"\n+\n+\n+#\n+# rust_version -- extract and print the version number of the compiler\n+#\n+\n+proc rust_version { } {\n+    global RUST_UNDER_TEST\n+\n+    rust_init\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $RUST_UNDER_TEST 0]\n+\n+    # verify that the compiler exists\n+    if { [is_remote host] || [which $compiler] != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n+\tregexp \" version \\[^\\n\\r\\]*\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    if [is_remote host] {\n+\t\tclone_output \"$compiler $version\\n\"\n+\t    } else {\n+\t\tclone_output \"[which $compiler] $version\\n\"\n+\t    }\n+\t} else {\n+\t    clone_output \"Couldn't determine version of $output [which $compiler]\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+#\n+# rust_include_flags -- include flags for the gcc tree structure\n+#\n+\n+proc rust_include_flags { paths } {\n+    global srcdir\n+    global TESTING_IN_BUILD_TREE\n+\n+    set flags \"\"\n+\n+    if { [is_remote host] || ![info exists TESTING_IN_BUILD_TREE] } {\n+\treturn \"${flags}\"\n+    }\n+\n+    set gccpath ${paths}\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# rust_link_flags -- linker flags for the gcc tree structure\n+#\n+\n+proc rust_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global RUST_UNDER_TEST\n+    global shlib_ext\n+    global SHARED_OPTION\n+\n+    set gccpath ${paths}\n+    set libio_dir \"\"\n+    set flags \"\"\n+    set ld_library_path \".\"\n+    set shlib_ext [get_shlib_extension]\n+    set SHARED_OPTION \"\"\n+    verbose \"shared lib extension: $shlib_ext\"\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# rust_init -- called at the start of each subdir of tests\n+#\n+\n+proc rust_init { args } {\n+    global subdir\n+    global rust_initialized\n+    global base_dir\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global objdir srcdir\n+    global ALWAYS_DFLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global RUST_UNDER_TEST\n+    global TESTING_IN_BUILD_TREE\n+    global TEST_ALWAYS_FLAGS\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n+\n+    # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n+    setenv LC_ALL C\n+    setenv LANG C\n+\n+    if ![info exists RUST_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set RUST_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+\t\tset RUST_UNDER_TEST [transform gccrs]\n+\t    } else {\n+\t\tset RUST_UNDER_TEST [findfile $base_dir/../../gccrs \"$base_dir/../../gccrs -B$base_dir/../../\" [findfile $base_dir/gccrs \"$base_dir/gccrs -B$base_dir/\" [transform gccrs]]]\n+\t    }\n+\t}\n+    }\n+\n+    if ![is_remote host] {\n+\tif { [which $RUST_UNDER_TEST] == 0 } then {\n+\t    perror \"RUST_UNDER_TEST ($RUST_UNDER_TEST) does not exist\"\n+\t    exit 1\n+\t}\n+    }\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n+    }\n+\n+    rust_maybe_build_wrapper \"${tmpdir}/rust-testglue.o\"\n+\n+    set ALWAYS_RUSTFLAGS \"\"\n+\n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_DFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend ALWAYS_DFLAGS \"additional_flags=[rust_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t    lappend ALWAYS_DFLAGS \"ldflags=[rust_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t} else {\n+\t    lappend ALWAYS_DFLAGS \"additional_flags=[rust_include_flags [get_multilibs] ]\"\n+\t    lappend ALWAYS_DFLAGS \"ldflags=[rust_link_flags [get_multilibs] ]\"\n+\t}\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_DFLAGS \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+\n+    verbose -log \"ALWAYS_DFLAGS set to $ALWAYS_DFLAGS\"\n+\n+    set gcc_warning_prefix \"warning:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n+\n+    verbose \"rust is initialized\" 3\n+}\n+\n+#\n+# rust_target_compile -- compile a source file\n+#\n+\n+proc rust_target_compile { source dest type options } {\n+    global tmpdir\n+    global gluefile wrap_flags\n+    global ALWAYS_DFLAGS\n+    global RUST_UNDER_TEST\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    lappend options \"timeout=[timeout_value]\"\n+    lappend options \"compiler=$RUST_UNDER_TEST\"\n+\n+    set options [concat \"$ALWAYS_DFLAGS\" $options]\n+    set options [dg-additional-files-options $options $source]\n+    return [target_compile $source $dest $type $options]\n+}"}, {"sha": "2bb3a95f033ca6d73ac44e3b95b95b2ecea7cd15", "filename": "gcc/testsuite/rust.test/compilable/conditional.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconditional.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconditional.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fconditional.rs?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let mut x = 5;\n+\n+    if x == 5 {\n+        x = 1;\n+    } else if x == 3 {\n+        x = 2;\n+    } else {\n+        x = 3;\n+    }\n+}"}, {"sha": "51ed74b27c2ce98f29ddea36f90af6e1d8e56f03", "filename": "gcc/testsuite/rust.test/compilable/impl_block.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimpl_block.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimpl_block.rs?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,14 @@\n+struct Foo {\n+    one: i32,\n+    two: i32,\n+}\n+\n+impl Foo {\n+    fn new(a: i32, b: i32) -> Foo {\n+        return Foo { one: a, two: b };\n+    }\n+}\n+\n+fn main() {\n+    let cake = Foo::new(3, 4);\n+}"}, {"sha": "7a564af979877aba842ccaeddd1c8cc45fa3f23a", "filename": "gcc/testsuite/rust.test/compilable/static_function.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstatic_function.rs?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,7 @@\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}\n+\n+fn main() {\n+    let call_test = test(1);\n+}"}, {"sha": "6081476cfac2da2181fb7892fa901b6c50e89fe0", "filename": "gcc/testsuite/rust.test/compilable/struct_init.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init.rs?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,8 @@\n+struct Foo {\n+    one: i32,\n+    two: i32,\n+}\n+\n+fn main() {\n+    let struct_test = Foo { one: 1, two: 2 };\n+}"}, {"sha": "bc4b09a6a5426a84542289027e7ebbfc05a6b848", "filename": "gcc/testsuite/rust.test/compilable/type_infer1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer1.rs?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,19 @@\n+struct Foo {\n+    one: i32,\n+    two: i32,\n+}\n+\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}\n+\n+fn main() {\n+    let logical: bool = true;\n+    let an_integer = 5;\n+    let mut default_integer = 7;\n+\n+    default_integer = 1 + an_integer;\n+\n+    let call_test = test(1);\n+    let struct_test = Foo { one: 1, two: 2 };\n+}"}, {"sha": "fca3f161066ae902327a62683b5f1a89548874db", "filename": "gcc/testsuite/rust.test/rust-test.exp", "status": "added", "additions": 449, "deletions": 0, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Frust-test.exp?ref=f28325125b7ea31e5cbfd3269a3ee6a4b79ddfd2", "patch": "@@ -0,0 +1,449 @@\n+# Copyright (C) 2012-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Test using the DMD testsuite.\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+#\n+# Convert DMD arguments to RUST equivalent\n+#\n+\n+proc rust-convert-args { args } {\n+    set out \"\"\n+\n+    foreach arg [split [lindex $args 0] \" \"] {\n+\t# List of switches kept in ASCII collated order.\n+\tif [string match \"-D\" $arg] {\n+\t    lappend out \"-fdoc\"\n+\n+\t} elseif { [regexp -- {^-I([\\w+/-]+)} $arg pattern path] } {\n+\t    lappend out \"-I$path\"\n+\n+\t} elseif { [regexp -- {^-J([\\w+/-]+)} $arg pattern path] } {\n+\t    lappend out \"-J$path\"\n+\n+\t} elseif [string match \"-allinst\" $arg] {\n+\t    lappend out \"-fall-instantiations\"\n+\n+\t} elseif [string match \"-betterC\" $arg] {\n+\t    lappend out \"-fno-druntime\"\n+\n+\t} elseif { [string match \"-boundscheck\" $arg]\n+\t\t || [string match \"-boundscheck=on\" $arg] } {\n+\t    lappend out \"-fbounds-check\"\n+\n+\t} elseif { [string match \"-boundscheck=off\" $arg]\n+\t\t   || [string match \"-noboundscheck\" $arg] } {\n+\t    lappend out \"-fno-bounds-check\"\n+\n+\t} elseif [string match \"-boundscheck=safeonly\" $arg] {\n+\t    lappend out \"-fbounds-check=safeonly\"\n+\n+\t} elseif [string match \"-c\" $arg] {\n+\t    lappend out \"-c\"\n+\n+\t} elseif [string match \"-d\" $arg] {\n+\t    lappend out \"-Wno-deprecated\"\n+\n+\t} elseif [string match \"-de\" $arg] {\n+\t    lappend out \"-Wdeprecated\"\n+\t    lappend out \"-Werror\"\n+\n+\t} elseif [string match \"-debug\" $arg] {\n+\t    lappend out \"-fdebug\"\n+\n+\t} elseif [regexp -- {^-debug=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-fdebug=$value\"\n+\n+\t} elseif [string match \"-dip1000\" $arg] {\n+\t    lappend out \"-ftransition=dip1000\"\n+\n+\t} elseif [string match \"-dip25\" $arg] {\n+\t    lappend out \"-ftransition=dip25\"\n+\n+\t} elseif [string match \"-dw\" $arg] {\n+\t    lappend out \"-Wdeprecated\"\n+\t    lappend out \"-Wno-error\"\n+\n+\t} elseif [string match \"-fPIC\" $arg] {\n+\t    lappend out \"-fPIC\"\n+\n+\t} elseif { [string match \"-g\" $arg]\n+\t\t   || [string match \"-gc\" $arg] } {\n+\t    lappend out \"-g\"\n+\n+\t} elseif [string match \"-inline\" $arg] {\n+\t    lappend out \"-finline-functions\"\n+\n+\t} elseif [string match \"-main\" $arg] {\n+\t    lappend out \"-fmain\"\n+\n+\t} elseif [regexp -- {^-mv=([\\w+=./-]+)} $arg pattern value] {\n+\t    lappend out \"-fmodule-file=$value\"\n+\n+\t} elseif [string match \"-O\" $arg] {\n+\t    lappend out \"-O2\"\n+\n+\t} elseif [string match \"-release\" $arg] {\n+\t    lappend out \"-frelease\"\n+\n+\t} elseif [regexp -- {^-transition=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-ftransition=$value\"\n+\n+\t} elseif [string match \"-unittest\" $arg] {\n+\t    lappend out \"-funittest\"\n+\n+\t} elseif [string match \"-verrors=spec\" $arg] {\n+\t    lappend out \"-Wspeculative\"\n+\n+\t} elseif [regexp -- {^-verrors=(\\d+)} $arg pattern num] {\n+\t    lappend out \"-fmax-errors=$num\"\n+\n+\t} elseif [regexp -- {^-version=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-fversion=$value\"\n+\n+\t} elseif [string match \"-vtls\" $arg] {\n+\t    lappend out \"-ftransition=tls\"\n+\n+\t} elseif [string match \"-w\" $arg] {\n+\t    lappend out \"-Wall\"\n+\t    lappend out \"-Werror\"\n+\n+\t} elseif [string match \"-wi\" $arg] {\n+\t    lappend out \"-Wall\"\n+\t    lappend out \"-Wno-error\"\n+\n+\t} else {\n+\t    # print \"Unhandled Argument: $arg\"\n+\t}\n+    }\n+\n+    return $out\n+}\n+\n+proc rust-copy-extra { base extra } {\n+    # Split base, folder/file.\n+    set type [file dirname $extra]\n+\n+    # print \"Filename: $base - $extra\"\n+\n+    set fdin [open $base/$extra r]\n+    fconfigure $fdin -encoding binary\n+\n+    file mkdir $type\n+    set fdout [open $extra w]\n+    fconfigure $fdout -encoding binary\n+\n+    while { [gets $fdin copy_line] >= 0 } {\n+\tset out_line $copy_line\n+\tputs $fdout $out_line\n+    }\n+\n+    close $fdin\n+    close $fdout\n+\n+    # Remove file once test is finished.\n+    upvar 2 cleanup_extra_files cleanups\n+    lappend cleanups $extra\n+\n+    return $extra\n+}\n+\n+#\n+# Translate DMD test directives to dejagnu equivalent.\n+#\n+#   COMPILE_SEPARATELY: Not handled.\n+#   EXECUTE_ARGS:\tParameters to add to the execution of the test.\n+#   COMPILED_IMPORTS:\tList of modules files that are imported by the main\n+#\t\t\tsource file that should be included in compilation.\n+#\t\t\tCurrently handled the same as EXTRA_SOURCES.\n+#   EXTRA_SOURCES:\tList of extra sources to build and link along with\n+#\t\t\tthe test.\n+#   EXTRA_FILES:\tList of extra files to copy for the test runs.\n+#   PERMUTE_ARGS:\tThe set of arguments to permute in multiple compiler\n+#\t\t\tinvocations.  An empty set means only one permutation\n+#\t\t\twith no arguments.\n+#   TEST_OUTPUT:\tThe output expected from the compilation.\n+#   POST_SCRIPT:\tNot handled.\n+#   REQUIRED_ARGS:\tArguments to add to the compiler command line.\n+#   DISABLED:\t\tNot handled.\n+#\n+\n+proc dmd2dg { base test } {\n+    global DEFAULT_DFLAGS\n+    global PERMUTE_ARGS\n+    global RUST_EXECUTE_ARGS\n+\n+    set PERMUTE_ARGS $DEFAULT_DFLAGS\n+    set RUST_EXECUTE_ARGS \"\"\n+\n+    set extra_sources \"\"\n+    set extra_files \"\"\n+\n+    # Split base, folder/file.\n+    set type [file dirname $test]\n+    set name [file tail $test]\n+\n+    print \"Filename: $base - $test\"\n+\n+    set fdin [open $base/$test r]\n+    #fconfigure $fdin -encoding binary\n+\n+    file mkdir $type\n+    set fdout [open $test w]\n+    #fconfigure $fdout -encoding binary\n+\n+    while { [gets $fdin copy_line] >= 0 } {\n+\tset out_line $copy_line\n+\n+\tif [regexp -- {COMPILE_SEPARATELY} $copy_line] {\n+\t    # COMPILE_SEPARATELY is not handled.\n+\t    regsub -- {COMPILE_SEPARATELY.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {DISABLED} $copy_line] {\n+\t    # DISABLED is not handled.\n+\t    regsub -- {DISABLED.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {POST_SCRIPT} $copy_line] {\n+\t    # POST_SCRIPT is not handled\n+\t    regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # PERMUTE_ARGS is handled by rust-do-test.\n+\t    set PERMUTE_ARGS [rust-convert-args $args]\n+\t    regsub -- {PERMUTE_ARGS.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {EXECUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # EXECUTE_ARGS is handled by rust_load.\n+\t    foreach arg $args {\n+\t\tlappend RUST_EXECUTE_ARGS $arg\n+\t    }\n+\t    regsub -- {EXECUTE_ARGS.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {REQUIRED_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # Convert all listed arguments to from dmd to rust-style.\n+\t    set new_option \"{ dg-additional-options \\\"[rust-convert-args $args]\\\" }\"\n+\t    regsub -- {REQUIRED_ARGS.*$} $copy_line $new_option out_line\n+\n+\t} elseif [regexp -- {EXTRA_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # EXTRA_SOURCES are appended to extra_sources list\n+\t    foreach srcfile $sources {\n+\t\tlappend extra_sources $srcfile\n+\t    }\n+\t    regsub -- {EXTRA_SOURCES.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {EXTRA_CPP_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # EXTRA_CPP_SOURCES are appended to extra_sources list\n+\t    foreach srcfile $sources {\n+\t\t# C++ sources are found in the extra-files directory.\n+\t\tlappend extra_sources \"extra-files/$srcfile\"\n+\t    }\n+\t    regsub -- {EXTRA_CPP_SOURCES.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {EXTRA_FILES\\s*:\\s*(.*)} $copy_line match files] {\n+\t    # EXTRA_FILES are appended to extra_files list\n+\t    foreach file $files {\n+\t\tlappend extra_files $file\n+\t    }\n+\t    regsub -- {EXTRA_FILES.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {COMPILED_IMPORTS\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # COMPILED_IMPORTS are appended to extra_sources list\n+\t    foreach import $sources {\n+\t\tlappend extra_sources $import\n+\t    }\n+\t    regsub -- {COMPILED_IMPORTS.*$} $copy_line \"\" out_line\n+\n+\t}\n+\n+\tputs $fdout $out_line\n+    }\n+\n+    # Now that all extra sources and files have been collected, copy them all\n+    # to the testsuite build directory.\n+    if { [llength $extra_sources] > 0 } {\n+\tforeach srcfile $extra_sources {\n+\t    rust-copy-extra $base \"$type/$srcfile\"\n+\t}\n+\tset out_line \"// { dg-additional-sources \\\"$extra_sources\\\" }\"\n+\tputs $fdout $out_line\n+    }\n+\n+    if { [llength $extra_files] > 0 } {\n+\tforeach file $extra_files {\n+\t    rust-copy-extra $base \"$type/$file\"\n+\t}\n+\tset out_line \"// { dg-additional-files \\\"$extra_files\\\" }\"\n+\tputs $fdout $out_line\n+    }\n+\n+    # Add specific options for test type\n+\n+    # DMD's testsuite is extremely verbose, compiler messages from constructs\n+    # such as pragma(msg, ...) would otherwise cause tests to fail.\n+    set out_line \"// { dg-prune-output .* }\"\n+    puts $fdout $out_line\n+\n+    # Compilable files are successful if an output is generated.\n+    # Fail compilable are successful if an output is not generated.\n+    # Runnable must compile, link, and return 0 to be successful by default.\n+    switch $type {\n+\trunnable {\n+\t    if ![isnative] {\n+\t\tset out_line \"// { dg-final { output-exists } }\"\n+\t\tputs $fdout $out_line\n+\t    }\n+\t}\n+\n+\tcompilable {\n+\t    set out_line \"// { dg-final { output-exists } }\"\n+\t    puts $fdout $out_line\n+\n+\t    # Check that Ddoc tests also generate a html file.\n+\t    if [regexp -- \"ddoc.*\" $name] {\n+\t\tset ddocfile \"[file rootname $name].html\"\n+\t\tset out_line \"// { dg-final { scan-file $ddocfile \\\"Generated by Ddoc from $test\\\" } }\"\n+\t\tputs $fdout $out_line\n+\t\t# Cleanup extra generated files.\n+\t\tset out_line \"// { dg-final { file delete $ddocfile } }\"\n+\t\tputs $fdout $out_line\n+\t    }\n+\t}\n+\n+\tfail_compilation {\n+\t    set out_line \"// { dg-final { output-exists-not } }\"\n+\t    puts $fdout $out_line\n+\t}\n+    }\n+\n+    close $fdin\n+    close $fdout\n+\n+    return $test\n+}\n+\n+proc rust-permute-options { options } {\n+    set result { }\n+    set n [expr 1<<[llength $options]]\n+    for { set i 0 } { $i<$n } { incr i } {\n+\tset option \"\"\n+\tfor { set j 0 } { $j<[llength $options] } { incr j } {\n+\t    if [expr $i & 1 << $j] {\n+\t\tappend option [lindex $options $j]\n+\t\tappend option \" \"\n+\t    }\n+\t}\n+\tlappend result $option\n+\n+    }\n+    return $result\n+}\n+\n+\n+proc rust-do-test { } {\n+    global srcdir subdir\n+    global dg-do-what-default\n+    global verbose\n+\n+    # If a testcase doesn't have special options, use these.\n+    global DEFAULT_DFLAGS\n+    if ![info exists DEFAULT_DFLAGS] then {\n+\tset DEFAULT_DFLAGS \"-g -O2\"\n+    }\n+\n+    # These are special options to use on testcase, and override DEFAULT_DFLAGS\n+    global PERMUTE_ARGS\n+\n+    # Set if an extra option should be passed to link to shared druntime.\n+    global SHARED_OPTION\n+\n+    # Additional arguments for rust_load\n+    global RUST_EXECUTE_ARGS\n+\n+    # Initialize `dg'.\n+    dg-init\n+\n+    # Allow blank linkes in output for all of rust.test.\n+    global allow_blank_lines\n+    set save_allow_blank_lines $allow_blank_lines\n+    if { !$allow_blank_lines } {\n+\tset allow_blank_lines 2\n+    }\n+\n+    # Create rust.test link so test names include that subdir.\n+    catch { file link $subdir . }\n+\n+    # Main loop.\n+\n+    # set verbose 1\n+    # set dg-final-code \"\"\n+    # Find all tests and pass to routine.\n+    foreach test [lsort [find $srcdir/$subdir *]] {\n+\tregexp -- \"(.*)/(.+)/(.+)\\.rs$\" $test match base dir name ext\n+\tset ext \"rs\"\n+\t\n+\t# Skip invalid test directory\n+\tif { [lsearch \"compilable\" $dir] == -1 } {\n+\t    continue\n+\t}\n+\n+\t# Skip invalid test extensions\n+\tif { [lsearch \"rs\" $ext] == -1 } {\n+\t    continue\n+\t}\t\n+\n+\t# Convert to DG test.\n+\tset imports [format \"-I%s/%s\" $base $dir]\n+\tset cleanup_extra_files \"\"\n+\t# Include $subdir prefix so test names follow DejaGnu conventions.\n+\tset filename \"$subdir/[dmd2dg $base $dir/$name.$ext]\"\n+\n+\tif { $dir == \"runnable\" } {\n+\t    append PERMUTE_ARGS \" $SHARED_OPTION\"\n+\t}\n+\tset options [rust-permute-options [lsort -unique $PERMUTE_ARGS]]\n+\n+\tswitch $dir {\n+\t    compilable {\n+\t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n+\t\t    set flags [lindex $options $i]\n+\t\t    # Compilable test may require checking another kind of output file.\n+\t\t    if [regexp -- \"ddoc.*\" $name] {\n+\t\t\tset dg-do-what-default \"compile\"\n+\t\t    } else {\n+\t\t\tset dg-do-what-default \"assemble\"\n+\t\t    }\n+\t\t    rust-dg-runtest $filename $flags $imports\n+\t\t}\n+\t    }\n+\t}\n+\n+\t# Cleanup test directory.\n+\tforeach srcfile $cleanup_extra_files {\n+\t    file delete $subdir/$srcfile\n+\t}\n+\tfile delete $filename\n+    }\n+\n+    set allow_blank_lines $save_allow_blank_lines\n+\n+    # All done.\n+    dg-finish\n+}\n+\n+rust-do-test\n+"}]}