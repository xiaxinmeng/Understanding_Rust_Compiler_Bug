{"sha": "8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4ZDFhMjgwMTM1ZTY1MzBlMWQyZWI0MmM1ZmY4YjkxYThmNTcwYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2006-05-05T19:57:38Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2006-05-05T19:57:38Z"}, "message": "c-parser.c (c_parser_cast_expression): Only insert casts into hash table if pointer.\n\n        PR/21391\n        * c-parser.c (c_parser_cast_expression): Only insert casts into\n        hash table if pointer.\n        * function.c (used_types_insert_helper): Rename from\n        used_types_insert.\n        (used_types_insert): Call used_types_insert_helper.\n        * function.h (used_types_insert): Accept only one argument.\n        * cp/typeck.c (build_static_cast_1): Save casted types in used types\n        hash table.\n        (build_reinterpret_cast_1): Same.\n        * cp/rtti.c (build_dynamic_cast_1): Same.\n        * testsuite/g++.dg/other/unused1.C: New.\n\nFrom-SVN: r113561", "tree": {"sha": "31aff53c7f9388180b8f468318913668e9cb42be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31aff53c7f9388180b8f468318913668e9cb42be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b207220873a208cab0b8fea85bf5be77bcd15914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b207220873a208cab0b8fea85bf5be77bcd15914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b207220873a208cab0b8fea85bf5be77bcd15914"}], "stats": {"total": 112, "additions": 102, "deletions": 10}, "files": [{"sha": "26281ed432120bb57baf017b52249de978a85a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -1,3 +1,13 @@\n+2006-05-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/21391\n+\t* c-parser.c (c_parser_cast_expression): Only insert casts into\n+\thash table if pointer.\n+\t* function.c (used_types_insert_helper): Rename from\n+\tused_types_insert.\n+\t(used_types_insert): Call used_types_insert_helper.\n+\t* function.h (used_types_insert): Accept only one argument.\n+\n 2006-05-05  David Edelsohn  <edesohn@gnu.org>\n \n \t* config/rs6000/rs6000.md: Mark all \"X\" constraints for clobbered"}, {"sha": "aad1c6bb048058868c6eb236e7c5a502d9e37163", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -4691,8 +4691,7 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n \t}\n \n       /* Save casted types in the function's used types hash table.  */\n-      if (debug_info_level > DINFO_LEVEL_NONE)\n-\tused_types_insert (type_name->specs->type, cfun);\n+      used_types_insert (type_name->specs->type);\n \n       if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n \treturn c_parser_postfix_expression_after_paren_type (parser,"}, {"sha": "f423f4fb4be9a4bccd319330f116f534feb7b5c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -1,3 +1,11 @@\n+2006-05-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/21391\n+\t* typeck.c (build_static_cast_1): Save casted types in used types\n+\thash table.\n+\t(build_reinterpret_cast_1): Same.\n+\t* rtti.c (build_dynamic_cast_1): Same.\n+\n 2006-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/27359"}, {"sha": "6242e44c3e944cfc37f55b02c081a55e6a9c807c", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -464,6 +464,9 @@ build_dynamic_cast_1 (tree type, tree expr)\n   tree old_expr = expr;\n   const char *errstr = NULL;\n \n+  /* Save casted types in the function's used types hash table.  */\n+  used_types_insert (type);\n+\n   /* T shall be a pointer or reference to a complete class type, or\n      `pointer to cv void''.  */\n   switch (tc)"}, {"sha": "78e3a2b8427f3d82a9289ceee6821f668e9c5a52", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -4759,6 +4759,9 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \n   intype = TREE_TYPE (expr);\n \n+  /* Save casted types in the function's used types hash table.  */\n+  used_types_insert (type);\n+\n   /* Determine what to do when casting away constness.  */\n   if (c_cast_p)\n     {\n@@ -5047,6 +5050,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \n   intype = TREE_TYPE (expr);\n \n+  /* Save casted types in the function's used types hash table.  */\n+  used_types_insert (type);\n+\n   /* [expr.reinterpret.cast]\n      An lvalue expression of type T1 can be cast to the type\n      \"reference to T2\" if an expression of type \"pointer to T1\" can be\n@@ -5242,6 +5248,9 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n       return error_mark_node;\n     }\n \n+  /* Save casted types in the function's used types hash table.  */\n+  used_types_insert (dst_type);\n+\n   src_type = TREE_TYPE (expr);\n   /* Expressions do not really have reference types.  */\n   if (TREE_CODE (src_type) == REFERENCE_TYPE)"}, {"sha": "bb6480118d6f7b5067c53cb84165d9e1e8983ecc", "filename": "gcc/function.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -5590,23 +5590,34 @@ rest_of_handle_check_leaf_regs (void)\n   return 0;\n }\n \n-/* Insert a type into the used types hash table.  */\n-void\n-used_types_insert (tree t, struct function *func)\n+/* Insert a TYPE into the used types hash table of CFUN.  */\n+static void\n+used_types_insert_helper (tree type, struct function *func)\n {\n-  if (t != NULL && func != NULL)\n+  if (type != NULL && func != NULL)\n     {\n       void **slot;\n \n       if (func->used_types_hash == NULL)\n \tfunc->used_types_hash = htab_create_ggc (37, htab_hash_pointer,\n-\t\t\t\t\t     htab_eq_pointer, NULL);\n-      slot = htab_find_slot (func->used_types_hash, t, INSERT);\n+\t\t\t\t\t\t htab_eq_pointer, NULL);\n+      slot = htab_find_slot (func->used_types_hash, type, INSERT);\n       if (*slot == NULL)\n-\t*slot = t;\n+\t*slot = type;\n     }\n }\n \n+/* Given a type, insert it into the used hash table in cfun.  */\n+void\n+used_types_insert (tree t)\n+{\n+  while (POINTER_TYPE_P (t) || TREE_CODE (t) == ARRAY_TYPE)\n+    t = TREE_TYPE (t);\n+  t = TYPE_MAIN_VARIANT (t);\n+  if (debug_info_level > DINFO_LEVEL_NONE)\n+    used_types_insert_helper (t, cfun);\n+}\n+\n struct tree_opt_pass pass_leaf_regs =\n {\n   NULL,                                 /* name */"}, {"sha": "63295258c11c32b9f27e83eeb3d74dd49350332e", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -576,6 +576,6 @@ extern bool pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n extern bool reference_callee_copied (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, bool);\n \n-extern void used_types_insert (tree, struct function *);\n+extern void used_types_insert (tree);\n \n #endif  /* GCC_FUNCTION_H */"}, {"sha": "c6683a9ac06bb7346d406a5c22552b268ca2145e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -1,3 +1,8 @@\n+2006-05-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/21391\n+\t* g++.dg/other/unused1.C: New.\n+\n 2006-05-05  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR objc/27240"}, {"sha": "e50ce380fce0d209cba6f2abe077babe54b2f5c3", "filename": "gcc/testsuite/g++.dg/other/unused1.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Funused1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Funused1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Funused1.C?ref=8d8d1a280135e6530e1d2eb42c5ff8b91a8f570c", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g\" } */\n+\n+/* Make sure we didn't eliminate casted types because we thought they were\n+   unused.  */\n+\n+void *voidp;\n+\n+struct foo { int i; };\n+int bar (void)\n+{\n+    return ((struct foo *)0x1234)->i;\n+}\n+\n+struct boo { int i; };\n+int bar2 (void)\n+{\n+  return reinterpret_cast<struct boo *>(0xC0FFEE)->i;\n+}\n+\n+struct cue { int i; };\n+int bar3 (void)\n+{\n+  return static_cast<struct cue *>(voidp)->i;\n+}\n+\n+class printer { public: int i; };\n+const printer *dotmatrix;\n+int bar4 (void)\n+{\n+  return const_cast<printer *>(dotmatrix)->i;\n+}\n+\n+class class1 { virtual ~class1(); } *c1;\n+class class2 : class1 { char j; };\n+int bar5 (void)\n+{\n+  if (dynamic_cast <class2 *>(c1))\n+    return 5;\n+  else\n+    return 6;\n+}\n+/* { dg-final { scan-assembler \"foo\" } } */\n+/* { dg-final { scan-assembler \"boo\" } } */\n+/* { dg-final { scan-assembler \"cue\" } } */\n+/* { dg-final { scan-assembler \"string\\t\\\"class2\\\"\" } } */\n+/* { dg-final { scan-assembler \"string\\t\\\"printer\\\"\" } } */"}]}