{"sha": "3767c0fdd6aa626b527ec13f0b6b468b92394714", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2N2MwZmRkNmFhNjI2YjUyN2VjMTNmMGI2YjQ2OGI5MjM5NDcxNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-04T06:38:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-04T06:38:56Z"}, "message": "simplify-rtx.c (simplify_subreg): Reduce problem of finding vector mode subregs of constants to finding integer...\n\ngcc:\n\t* simplify-rtx.c (simplify_subreg): Reduce problem of finding\n\tvector mode subregs of constants to finding integer mode\n\tsubregs of constants.\n\t* cse.c (cse_insn): Use simplify_gen_subreg.\n\t* convert.c (convert_to_integer): Don't strip a NOP_EXPR\n\tFrom a vector mode expression of different size than the\n\ttarget mode.\ngcc/testsuite:\n\t* gcc.c-torture/compile/simd-3.c: New test.\n\nFrom-SVN: r55234", "tree": {"sha": "5cdb83b9d2d84c7ed93535b98565144e433e4ec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cdb83b9d2d84c7ed93535b98565144e433e4ec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3767c0fdd6aa626b527ec13f0b6b468b92394714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3767c0fdd6aa626b527ec13f0b6b468b92394714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3767c0fdd6aa626b527ec13f0b6b468b92394714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3767c0fdd6aa626b527ec13f0b6b468b92394714/comments", "author": null, "committer": null, "parents": [{"sha": "4e314d1fdec7b1bf58beb990e4d95e36bef3d4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e314d1fdec7b1bf58beb990e4d95e36bef3d4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e314d1fdec7b1bf58beb990e4d95e36bef3d4f6"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "4209d2955c44281cf17958b241a33a3239746f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -1,3 +1,13 @@\n+Thu Jul  4 07:36:29 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* simplify-rtx.c (simplify_subreg): Reduce problem of finding\n+\tvector mode subregs of constants to finding integer mode\n+\tsubregs of constants.\n+\t* cse.c (cse_insn): Use simplify_gen_subreg.\n+\t* convert.c (convert_to_integer): Don't strip a NOP_EXPR\n+\tFrom a vector mode expression of different size than the\n+\ttarget mode.\n+\n 2002-07-03  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/linux.h: Add #undef for SUBTARGET_CPP_SPEC."}, {"sha": "e440e35f57577a9f0bedbf1b124f9f8a1aabbd97", "filename": "gcc/convert.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -376,6 +376,12 @@ convert_to_integer (type, expr)\n \t  }\n \n \tcase NOP_EXPR:\n+\t  /* Don't introduce a\n+\t     \"can't convert between vector values of different size\" error.  */\n+\t  if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == VECTOR_TYPE\n+\t      && (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (TREE_OPERAND (expr, 0))))\n+\t\t  != GET_MODE_SIZE (TYPE_MODE (type))))\n+\t    break;\n \t  /* If truncating after truncating, might as well do all at once.\n \t     If truncating after extending, we may get rid of wasted work.  */\n \t  return convert (type, get_unwidened (TREE_OPERAND (expr, 0), type));"}, {"sha": "14ffd801bbef68019fb94722f4340d1014f381d0", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -6202,9 +6202,8 @@ cse_insn (insn, libcall_insn)\n \t\t    && ! exp_equiv_p (elt->exp, elt->exp, 1, 0))\n \t\t  continue;\n \n-\t\tnew_src = gen_lowpart_if_possible (new_mode, elt->exp);\n-\t\tif (new_src == 0)\n-\t\t  new_src = gen_rtx_SUBREG (new_mode, elt->exp, 0);\n+\t\tnew_src\n+\t\t  = simplify_gen_subreg (new_mode, elt->exp, elt->mode, 0);\n \n \t\tsrc_hash = HASH (new_src, new_mode);\n \t\tsrc_elt = lookup (new_src, src_hash, new_mode);"}, {"sha": "ebb464465b8574dc611b080c8bda071d4479b566", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -2319,7 +2319,8 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  else\n \t    return NULL_RTX;\n \t}\n-      else\n+      else if (GET_MODE_CLASS (outermode) != MODE_VECTOR_INT\n+\t       && GET_MODE_CLASS (outermode) != MODE_VECTOR_FLOAT)\n         /* This shouldn't happen, but let's not do anything stupid.  */\n \treturn NULL_RTX;\n     }\n@@ -2330,6 +2331,22 @@ simplify_subreg (outermode, op, innermode, byte)\n       int offset, part;\n       unsigned HOST_WIDE_INT val = 0;\n \n+      if (GET_MODE_CLASS (outermode) == MODE_VECTOR_INT\n+\t  || GET_MODE_CLASS (outermode) == MODE_VECTOR_FLOAT)\n+\t{\n+\t  /* Construct a CONST_VECTOR from individual subregs.  */\n+\t  enum machine_mode submode = GET_MODE_INNER (outermode);\n+\t  int subsize = GET_MODE_UNIT_SIZE (outermode);\n+\t  int i, elts = GET_MODE_NUNITS (outermode);\n+\t  rtvec v = rtvec_alloc (elts);\n+\n+\t  for (i = 0; i < elts; i++, byte += subsize)\n+\t    {\n+\t      RTVEC_ELT (v, i) = simplify_subreg (submode, op, innermode, byte);\n+\t    }\n+\t  return gen_rtx_CONST_VECTOR (outermode, v);\n+\t}\n+\n       /* ??? This code is partly redundant with code below, but can handle\n \t the subregs of floats and similar corner cases.\n \t Later it we should move all simplification code here and rewrite"}, {"sha": "4c8cb75bced7522e437de181392837965d3da840", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -1,3 +1,7 @@\n+Thu Jul  4 07:36:48 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* gcc.c-torture/compile/simd-3.c: New test.\n+\n 2002-07-03  Chris Demetriou  <cgd@broadcom.com>\n \n \t* g++.dg/abi/mangle6.C: Run for mipsisa64*-*-* targets."}, {"sha": "c113bd4fa2d911f7e93b5663342f752fb6c65bf7", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3767c0fdd6aa626b527ec13f0b6b468b92394714/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c?ref=3767c0fdd6aa626b527ec13f0b6b468b92394714", "patch": "@@ -0,0 +1,7 @@\n+typedef int v2si __attribute__ ((mode(V2SI)));\n+typedef unsigned di __attribute__ ((mode(DI)));\n+void foo(unsigned long);\n+void bar() {\n+    v2si x = { 1, 2 };\n+    foo((di) x);\n+}"}]}