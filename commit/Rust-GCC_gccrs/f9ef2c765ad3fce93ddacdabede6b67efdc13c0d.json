{"sha": "f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllZjJjNzY1YWQzZmNlOTNkZGFjZGFiZWRlNmI2N2VmZGMxM2MwZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-08T10:23:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-08T10:23:57Z"}, "message": "tree-vect-stmts.c (get_group_load_store_type): If the access is aligned do not trigger peeling for gaps.\n\n2016-11-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (get_group_load_store_type): If the\n\taccess is aligned do not trigger peeling for gaps.\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Do not\n\tforce alignment of vars with DECL_USER_ALIGN.\n\n\t* gcc.dg/vect/vect-nb-iter-ub-2.c: Adjust.\n\nFrom-SVN: r241959", "tree": {"sha": "0340dbcfba314663bc12068e3c2e27437f874c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0340dbcfba314663bc12068e3c2e27437f874c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae55655b93f64ab5ea6739d5c6be015fbe11e038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae55655b93f64ab5ea6739d5c6be015fbe11e038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae55655b93f64ab5ea6739d5c6be015fbe11e038"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "694c8e4cfa4093a4cfd6c141fa90715504c73104", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -1,3 +1,10 @@\n+2016-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (get_group_load_store_type): If the\n+\taccess is aligned do not trigger peeling for gaps.\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Do not\n+\tforce alignment of vars with DECL_USER_ALIGN.\n+\n 2016-11-08  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/t-aarch64 (aarch64-c.o): Depend on TARGET_H."}, {"sha": "36b0d33776fad3d28df700e045cc861096c798ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -1,3 +1,7 @@\n+2016-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-nb-iter-ub-2.c: Adjust.\n+\n 2016-11-08  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR testsuite/78136"}, {"sha": "4e13702621f08d6f2be82e8012284737243528a8", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -3,7 +3,7 @@\n #include \"tree-vect.h\"\n \n int ii[32];\n-char cc[66] =\n+char cc[66] __attribute__((aligned(1))) =\n   { 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0,\n     10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0,\n     20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0,"}, {"sha": "f014d688036cee3d6e0d6ef5eb32c64e7a6b70e6", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -831,6 +831,19 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \t  return true;\n \t}\n \n+      if (DECL_USER_ALIGN (base))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t       \"not forcing alignment of user-aligned \"\n+\t\t\t       \"variable: \");\n+\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, base);\n+\t      dump_printf (MSG_NOTE, \"\\n\");\n+\t    }\n+\t  return true;\n+\t}\n+\n       /* Force the alignment of the decl.\n \t NOTE: This is the only change to the code we make during\n \t the analysis phase, before deciding to vectorize the loop.  */"}, {"sha": "c29e73df9462d2674bc1c37ed034b583f3bb5209", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -1770,6 +1770,11 @@ get_group_load_store_type (gimple *stmt, tree vectype, bool slp,\n \t\t\t       \" non-consecutive accesses\\n\");\n \t      return false;\n \t    }\n+\t  /* If the access is aligned an overrun is fine.  */\n+\t  if (overrun_p\n+\t      && aligned_access_p\n+\t\t   (STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt))))\n+\t    overrun_p = false;\n \t  if (overrun_p && !can_overrun_p)\n \t    {\n \t      if (dump_enabled_p ())\n@@ -1789,6 +1794,10 @@ get_group_load_store_type (gimple *stmt, tree vectype, bool slp,\n       /* If there is a gap at the end of the group then these optimizations\n \t would access excess elements in the last iteration.  */\n       bool would_overrun_p = (gap != 0);\n+      /* If the access is aligned an overrun is fine.  */\n+      if (would_overrun_p\n+\t  && aligned_access_p (STMT_VINFO_DATA_REF (stmt_info)))\n+\twould_overrun_p = false;\n       if (!STMT_VINFO_STRIDED_P (stmt_info)\n \t  && (can_overrun_p || !would_overrun_p)\n \t  && compare_step_with_zero (stmt) > 0)"}]}