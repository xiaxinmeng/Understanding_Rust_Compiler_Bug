{"sha": "47f9fca8551dcb661bc73e340790b68d2f971c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmOWZjYTg1NTFkY2I2NjFiYzczZTM0MDc5MGI2OGQyZjk3MWMyNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-28T14:17:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-28T14:17:45Z"}, "message": "revert: hwint.h (HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n\n2014-05-28  Richard Biener  <rguenther@suse.de>\n\n\tRevert\n\t2014-05-28  Richard Biener  <rguenther@suse.de>\n\n\t* hwint.h (HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n\nFrom-SVN: r211021", "tree": {"sha": "7e99fd84a98ed507f8f0ebd262907a7fc13e2f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e99fd84a98ed507f8f0ebd262907a7fc13e2f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f9fca8551dcb661bc73e340790b68d2f971c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f9fca8551dcb661bc73e340790b68d2f971c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f9fca8551dcb661bc73e340790b68d2f971c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f9fca8551dcb661bc73e340790b68d2f971c25/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fbf8a3ede761711ffed9a8658746db31bfbd0e1"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "1460f2adc6a719a07006897747e4e76d791152d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f9fca8551dcb661bc73e340790b68d2f971c25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f9fca8551dcb661bc73e340790b68d2f971c25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47f9fca8551dcb661bc73e340790b68d2f971c25", "patch": "@@ -1,3 +1,10 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert\n+\t2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* hwint.h (HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n+\n 2014-05-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* expr.c (expand_assignment): Fold the bitpos in the to_rtx if"}, {"sha": "e3b8a8aa7d716784b19cde821c0bd2450dcfb61c", "filename": "gcc/hwint.h", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f9fca8551dcb661bc73e340790b68d2f971c25/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f9fca8551dcb661bc73e340790b68d2f971c25/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=47f9fca8551dcb661bc73e340790b68d2f971c25", "patch": "@@ -75,45 +75,48 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n    typedef before using the __asm_fprintf__ format attribute.  */\n typedef HOST_WIDE_INT __gcc_host_wide_int__;\n \n+/* Various printf format strings for HOST_WIDE_INT.  */\n+\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"L\"\n+  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n+# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+    \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n+# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n+    \"%016\" HOST_LONG_FORMAT \"x\"\n+#else\n+# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"LL\"\n+  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n+# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n+    \"%016\" HOST_LONG_LONG_FORMAT \"x\"\n+#endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n+\n+#define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n+#define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n+#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n+#define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n+#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_WIDE_INT_PRINT \"x\"\n+\n /* Provide C99 <inttypes.h> style format definitions for 64bits.  */\n #ifndef HAVE_INTTYPES_H\n-#if HOST_BITS_PER_LONG == 64\n-# define GCC_PRI64 HOST_LONG_FORMAT\n-#else\n-# define GCC_PRI64 HOST_LONG_LONG_FORMAT\n-#endif\n #undef PRId64\n-#define PRId64 GCC_PRI64 \"d\"\n+#define PRId64 HOST_WIDE_INT_PRINT \"d\"\n #undef PRIi64\n-#define PRIi64 GCC_PRI64 \"i\"\n+#define PRIi64 HOST_WIDE_INT_PRINT \"i\"\n #undef PRIo64\n-#define PRIo64 GCC_PRI64 \"o\"\n+#define PRIo64 HOST_WIDE_INT_PRINT \"o\"\n #undef PRIu64\n-#define PRIu64 GCC_PRI64 \"u\"\n+#define PRIu64 HOST_WIDE_INT_PRINT \"u\"\n #undef PRIx64\n-#define PRIx64 GCC_PRI64 \"x\"\n+#define PRIx64 HOST_WIDE_INT_PRINT \"x\"\n #undef PRIX64\n-#define PRIX64 GCC_PRI64 \"X\"\n+#define PRIX64 HOST_WIDE_INT_PRINT \"X\"\n #endif\n \n-/* Various printf format strings for HOST_WIDE_INT.  */\n-\n-#if HOST_BITS_PER_LONG == 64\n-# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"L\"\n-#else\n-# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"LL\"\n-#endif\n-\n-#define HOST_WIDE_INT_PRINT_DEC \"%\" PRId64\n-#define HOST_WIDE_INT_PRINT_DEC_C \"%\" PRId64 HOST_WIDE_INT_PRINT_C\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" PRIu64\n-#define HOST_WIDE_INT_PRINT_HEX \"%#\" PRIx64\n-#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" PRIx64\n-#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%\" PRIx64 \"%016\" PRIx64\n-#define HOST_WIDE_INT_PRINT_PADDED_HEX \"%016\" PRIx64\n-\n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported\n    efficiently in hardware.  (That is, the widest integer type that fits\n    in a hardware register.)  Normally this is \"long\" but on some hosts it"}]}