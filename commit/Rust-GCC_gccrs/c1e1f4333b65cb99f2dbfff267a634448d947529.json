{"sha": "c1e1f4333b65cb99f2dbfff267a634448d947529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlMWY0MzMzYjY1Y2I5OWYyZGJmZmYyNjdhNjM0NDQ4ZDk0NzUyOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-04-27T09:48:56Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-04-27T09:48:56Z"}, "message": "invoke.texi (Warning Options): Add -Wmemset-elt-size.\n\n\t* doc/invoke.texi (Warning Options): Add -Wmemset-elt-size.\n\t(-Wmemset-elt-size): New item.\nc-family/\n\t* c.opt (Wmemset-elt-size): New option.\n\t* c-common.c (warn_for_memset): New function.\n\t* c-common.h (warn_for_memset): Declare.\nc/\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Call\n\twarn_for_memset instead of warning directly here.\ncp/\n\t* parser.c (cp_parser_postfix_expression): Call\n\twarn_for_memset instead of warning directly here.\ntestsuite/\n\t* c-c++-common/memset-array.c: New test.\n\nFrom-SVN: r235475", "tree": {"sha": "96f8374ba1ef35e3c658690c190cb0d008ae3001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f8374ba1ef35e3c658690c190cb0d008ae3001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e1f4333b65cb99f2dbfff267a634448d947529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e1f4333b65cb99f2dbfff267a634448d947529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e1f4333b65cb99f2dbfff267a634448d947529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e1f4333b65cb99f2dbfff267a634448d947529/comments", "author": null, "committer": null, "parents": [{"sha": "06aed101fc1eb7bc685e334352a599f0a4718a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aed101fc1eb7bc685e334352a599f0a4718a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06aed101fc1eb7bc685e334352a599f0a4718a22"}], "stats": {"total": 163, "additions": 139, "deletions": 24}, "files": [{"sha": "2ddc3df12bddf4c443936289221005af562d0d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* doc/invoke.texi (Warning Options): Add -Wmemset-elt-size.\n+\t(-Wmemset-elt-size): New item.\n+\n 2016-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/70759"}, {"sha": "1d87d9dd81514316ba84f569e5b627bd0f5be480", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -1,3 +1,9 @@\n+2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* c.opt (Wmemset-elt-size): New option.\n+\t* c-common.c (warn_for_memset): New function.\n+\t* c-common.h (warn_for_memset): Declare.\n+\n 2016-04-25  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (handle_unused_attribute): Accept CONST_DECL."}, {"sha": "1f0d76aa15be35d953809d10f418ed9f3683d0e3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -11767,6 +11767,49 @@ warn_for_div_by_zero (location_t loc, tree divisor)\n     warning_at (loc, OPT_Wdiv_by_zero, \"division by zero\");\n }\n \n+/* Warn for patterns where memset appears to be used incorrectly.  The\n+   warning location should be LOC.  ARG0, and ARG2 are the first and\n+   last arguments to the call, while LITERAL_ZERO_MASK has a 1 bit for\n+   each argument that was a literal zero.  */\n+\n+void\n+warn_for_memset (location_t loc, tree arg0, tree arg2,\n+\t\t int literal_zero_mask)\n+{\n+  if (warn_memset_transposed_args\n+      && integer_zerop (arg2)\n+      && (literal_zero_mask & (1 << 2)) != 0\n+      && (literal_zero_mask & (1 << 1)) == 0)\n+    warning_at (loc, OPT_Wmemset_transposed_args,\n+\t\t\"%<memset%> used with constant zero length \"\n+\t\t\"parameter; this could be due to transposed \"\n+\t\t\"parameters\");\n+\n+  if (warn_memset_elt_size && TREE_CODE (arg2) == INTEGER_CST)\n+    {\n+      STRIP_NOPS (arg0);\n+      if (TREE_CODE (arg0) == ADDR_EXPR)\n+\targ0 = TREE_OPERAND (arg0, 0);\n+      tree type = TREE_TYPE (arg0);\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\t{\n+\t  tree elt_type = TREE_TYPE (type);\n+\t  tree domain = TYPE_DOMAIN (type);\n+\t  if (!integer_onep (TYPE_SIZE_UNIT (elt_type))\n+\t      && TYPE_MAXVAL (domain)\n+\t      && TYPE_MINVAL (domain)\n+\t      && integer_zerop (TYPE_MINVAL (domain))\n+\t      && integer_onep (fold_build2 (MINUS_EXPR, domain,\n+\t\t\t\t\t    arg2,\n+\t\t\t\t\t    TYPE_MAXVAL (domain))))\n+\t    warning_at (loc, OPT_Wmemset_elt_size,\n+\t\t\t\"%<memset%> used with length equal to \"\n+\t\t\t\"number of elements without multiplication \"\n+\t\t\t\"by element size\");\n+\t}\n+    }\n+}\n+\n /* Subroutine of build_binary_op. Give warnings for comparisons\n    between signed and unsigned quantities that may fail. Do the\n    checking based on the original operand trees ORIG_OP0 and ORIG_OP1,"}, {"sha": "b631e7d1af542b9d6cc397ffc8b26337dac3fcb9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -903,6 +903,7 @@ extern void c_parse_file (void);\n extern void c_parse_final_cleanups (void);\n \n extern void warn_for_omitted_condop (location_t, tree);\n+extern void warn_for_memset (location_t, tree, tree, int);\n \n /* These macros provide convenient access to the various _STMT nodes.  */\n "}, {"sha": "05bfa7cbc6f4b77e64fadf50aafdd40df63620cf", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -565,6 +565,10 @@ Wmemset-transposed-args\n C ObjC C++ ObjC++ Var(warn_memset_transposed_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.\n \n+Wmemset-elt-size\n+C ObjC C++ ObjC++ Var(warn_memset_elt_size) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.\n+\n Wmisleading-indentation\n C C++ Common Var(warn_misleading_indentation) Warning LangEnabledBy(C C++,Wall)\n Warn when the indentation of the code does not reflect the block structure."}, {"sha": "a641721bece315de5dab0b4794bb15640484ed20", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Call\n+\twarn_for_memset instead of warning directly here.\n+\n 2016-04-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67784"}, {"sha": "36c44ab5b56e8265bc14af452fe84bfcedfa028a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -8291,18 +8291,15 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t      expr.value, exprlist,\n \t\t\t\t\t      sizeof_arg,\n \t\t\t\t\t      sizeof_ptr_memacc_comptypes);\n-\t  if (warn_memset_transposed_args\n-\t      && TREE_CODE (expr.value) == FUNCTION_DECL\n+\t  if (TREE_CODE (expr.value) == FUNCTION_DECL\n \t      && DECL_BUILT_IN_CLASS (expr.value) == BUILT_IN_NORMAL\n \t      && DECL_FUNCTION_CODE (expr.value) == BUILT_IN_MEMSET\n-\t      && vec_safe_length (exprlist) == 3\n-\t      && integer_zerop ((*exprlist)[2])\n-\t      && (literal_zero_mask & (1 << 2)) != 0\n-\t      && (!integer_zerop ((*exprlist)[1])\n-\t\t  || (literal_zero_mask & (1 << 1)) == 0))\n-\t    warning_at (expr_loc, OPT_Wmemset_transposed_args,\n-\t\t\t\"%<memset%> used with constant zero length parameter; \"\n-\t\t\t\"this could be due to transposed parameters\");\n+\t      && vec_safe_length (exprlist) == 3)\n+\t    {\n+\t      tree arg0 = (*exprlist)[0];\n+\t      tree arg2 = (*exprlist)[2];\n+\t      warn_for_memset (expr_loc, arg0, arg2, literal_zero_mask);\n+\t    }\n \n \t  start = expr.get_start ();\n \t  finish = parser->tokens_buf[0].get_finish ();"}, {"sha": "6fc42bc030ddd9990c08494fca7fa6798d769d17", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -1,3 +1,8 @@\n+2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* parser.c (cp_parser_postfix_expression): Call\n+\twarn_for_memset instead of warning directly here.\n+\n 2016-04-26  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/70241"}, {"sha": "98a0cd42fea824860d860c0f51f24e5fb3c22be6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -6829,20 +6829,19 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  }\n \t      }\n \n-\t    if (warn_memset_transposed_args)\n+\t    if (TREE_CODE (postfix_expression) == FUNCTION_DECL\n+\t\t&& DECL_BUILT_IN_CLASS (postfix_expression) == BUILT_IN_NORMAL\n+\t\t&& DECL_FUNCTION_CODE (postfix_expression) == BUILT_IN_MEMSET\n+\t\t&& vec_safe_length (args) == 3)\n \t      {\n-\t\tif (TREE_CODE (postfix_expression) == FUNCTION_DECL\n-\t\t    && DECL_BUILT_IN_CLASS (postfix_expression) == BUILT_IN_NORMAL\n-\t\t    && DECL_FUNCTION_CODE (postfix_expression) == BUILT_IN_MEMSET\n-\t\t    && vec_safe_length (args) == 3\n-\t\t    && TREE_CODE ((*args)[2]) == INTEGER_CST\n-\t\t    && integer_zerop ((*args)[2])\n-\t\t    && !(TREE_CODE ((*args)[1]) == INTEGER_CST\n-\t\t\t && integer_zerop ((*args)[1])))\n-\t\t  warning (OPT_Wmemset_transposed_args,\n-\t\t\t   \"%<memset%> used with constant zero length \"\n-\t\t\t   \"parameter; this could be due to transposed \"\n-\t\t\t   \"parameters\");\n+\t\ttree arg0 = (*args)[0];\n+\t\ttree arg1 = (*args)[1];\n+\t\ttree arg2 = (*args)[2];\n+\t\tint literal_mask = ((!!integer_zerop (arg1) << 1)\n+\t\t\t\t    | (!!integer_zerop (arg2) << 2));\n+\t\tif (TREE_CODE (arg2) == CONST_DECL)\n+\t\t  arg2 = DECL_INITIAL (arg2);\n+\t\twarn_for_memset (input_location, arg0, arg2, literal_mask);\n \t      }\n \n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)"}, {"sha": "67760b5b45591da1f04423de32fa6113bb565ecd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -273,7 +273,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-int-to-pointer-cast -Winvalid-memory-model -Wno-invalid-offsetof @gol\n -Winvalid-pch -Wlarger-than=@var{len} @gol\n -Wlogical-op -Wlogical-not-parentheses -Wlong-long @gol\n--Wmain -Wmaybe-uninitialized -Wmemset-transposed-args @gol\n+-Wmain -Wmaybe-uninitialized -Wmemset-elt-size -Wmemset-transposed-args @gol\n -Wmisleading-indentation -Wmissing-braces @gol\n -Wmissing-field-initializers -Wmissing-include-dirs @gol\n -Wno-multichar -Wnonnull -Wnonnull-compare @gol\n@@ -3548,6 +3548,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wlogical-not-parentheses\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n -Wmaybe-uninitialized @gol\n+-Wmemset-elt-size @gol\n -Wmemset-transposed-args @gol\n -Wmisleading-indentation @r{(only for C/C++)} @gol\n -Wmissing-braces @r{(only for C/ObjC)} @gol\n@@ -5257,6 +5258,15 @@ Warn when the @code{sizeof} operator is applied to a parameter that is\n declared as an array in a function definition.  This warning is enabled by\n default for C and C++ programs.\n \n+@item -Wmemset-elt-size\n+@opindex Wmemset-elt-size\n+@opindex Wno-memset-elt-size\n+Warn for suspicious calls to the @code{memset} built-in function, if the\n+first argument references an array, and the third argument is a number\n+equal to the number of elements, but not equal to the size of the array\n+in memory.  This indicates that the user has omitted a multiplication by\n+the element size.  This warning is enabled by @option{-Wall}.\n+\n @item -Wmemset-transposed-args\n @opindex Wmemset-transposed-args\n @opindex Wno-memset-transposed-args"}, {"sha": "77f8b0dd24a3a8622df4a515618a972a613b4004", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -1,3 +1,7 @@\n+2016-04-27  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\t* c-c++-common/memset-array.c: New test.\n+\n 2016-04-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/66639"}, {"sha": "0346a210bb04c3846b3e8ca9273e0db8dbaa2ba6", "filename": "gcc/testsuite/c-c++-common/memset-array.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmemset-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e1f4333b65cb99f2dbfff267a634448d947529/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmemset-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmemset-array.c?ref=c1e1f4333b65cb99f2dbfff267a634448d947529", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmemset-elt-size\" } */\n+enum a {\n+  a_1,\n+  a_2,\n+  a_n\n+};\n+int t1[20];\n+int t2[a_n];\n+\n+struct s\n+{\n+  int t[20];\n+};\n+\n+void foo (struct s *s)\n+{\n+  __builtin_memset (t1, 0, 20); /* { dg-warning \"element size\" } */\n+  __builtin_memset (t2, 0, a_n); /* { dg-warning \"element size\" } */\n+  __builtin_memset (s->t, 0, 20); /* { dg-warning \"element size\" } */\n+}\n+\n+char u1[20];\n+char u2[a_n];\n+\n+struct s2\n+{\n+  char u[20];\n+};\n+\n+void bar (struct s2 *s)\n+{\n+  __builtin_memset (u1, 0, 20);\n+  __builtin_memset (u2, 0, a_n);\n+  __builtin_memset (s->u, 0, 20);\n+}"}]}