{"sha": "8562f05c95361a5a232e19ca6871c9cf6dcc4749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2MmYwNWM5NTM2MWE1YTIzMmUxOWNhNjg3MWM5Y2Y2ZGNjNDc0OQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@cs.tamu.edu", "date": "2005-06-09T17:41:37Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-06-09T17:41:37Z"}, "message": "machmode.h (to_machine_mode): New.\n\n        * machmode.h (to_machine_mode): New.\n        * rtl.h (to_rtx_code): Likewise.\n        * read-rtl.c (apply_mode_macro): Convert mode to machine_mode.\n        (print_c_condition): Convert return value of htab_find().\n        (apply_code_macro): Add explicit cast when convertin to enums.\n        (apply_mode_maps): Likewise.\n        (check_code_macro): Likewise.\n        (read_rtx_1): Likewise.\n\nFrom-SVN: r100804", "tree": {"sha": "b3762385888427b63671b9ef7c72ac900943b344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3762385888427b63671b9ef7c72ac900943b344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8562f05c95361a5a232e19ca6871c9cf6dcc4749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8562f05c95361a5a232e19ca6871c9cf6dcc4749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8562f05c95361a5a232e19ca6871c9cf6dcc4749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8562f05c95361a5a232e19ca6871c9cf6dcc4749/comments", "author": null, "committer": null, "parents": [{"sha": "c8d3810f9388b4670b8a5c2d3d82f293c5a6fde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d3810f9388b4670b8a5c2d3d82f293c5a6fde7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d3810f9388b4670b8a5c2d3d82f293c5a6fde7"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "77b50d8218ea62cf51fae602f5b4986c2f1cdaac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8562f05c95361a5a232e19ca6871c9cf6dcc4749", "patch": "@@ -1,3 +1,14 @@\n+2005-06-09  Gabriel Dos Reis  <gdr@cs.tamu.edu>\n+\n+\t* machmode.h (to_machine_mode): New.\n+\t* rtl.h (to_rtx_code): Likewise.\n+\t* read-rtl.c (apply_mode_macro): Convert mode to machine_mode.\n+\t(print_c_condition): Convert return value of htab_find().\n+\t(apply_code_macro): Add explicit cast when convertin to enums.\n+\t(apply_mode_maps): Likewise.\n+\t(check_code_macro): Likewise.\n+\t(read_rtx_1): Likewise.\n+\n 2005-06-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (update_set_flags): Just return for IF_THEN_ELSE."}, {"sha": "f8ff132372909671fa35edf0a3db9cd857f3816f", "filename": "gcc/machmode.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=8562f05c95361a5a232e19ca6871c9cf6dcc4749", "patch": "@@ -25,6 +25,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Make an enum class that gives all the machine modes.  */\n #include \"insn-modes.h\"\n \n+/* Given MODE as integer value, get the corresponding enum machine_mode\n+   enumeration value.  */\n+#define to_machine_mode(MODE)  ((enum machine_mode) (MODE))\n+\n /* Get the name of mode MODE as a string.  */\n \n extern const char * const mode_name[NUM_MACHINE_MODES];"}, {"sha": "1312fc06d14b64db20feb8bb64878ab7eca263e3", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=8562f05c95361a5a232e19ca6871c9cf6dcc4749", "patch": "@@ -243,7 +243,7 @@ uses_mode_macro_p (rtx x, int mode)\n static void\n apply_mode_macro (rtx x, int mode)\n {\n-  PUT_MODE (x, mode);\n+  PUT_MODE (x, to_machine_mode (mode));\n }\n \n /* Implementations of the macro_group callbacks for codes.  */\n@@ -269,7 +269,7 @@ uses_code_macro_p (rtx x, int code)\n static void\n apply_code_macro (rtx x, int code)\n {\n-  PUT_CODE (x, code);\n+  PUT_CODE (x, to_rtx_code (code));\n }\n \n /* Map a code or mode attribute string P to the underlying string for\n@@ -363,7 +363,7 @@ apply_mode_maps (rtx x, struct map_value *mode_maps, struct mapping *macro,\n \n \t  v = map_attr_string (pm->string, macro, value);\n \t  if (v)\n-\t    PUT_MODE (x, find_mode (v->string, infile));\n+\t    PUT_MODE (x, to_machine_mode (find_mode (v->string, infile)));\n \t  else\n \t    *unknown = pm->string;\n \t  return;\n@@ -798,7 +798,7 @@ join_c_conditions (const char *cond1, const char *cond2)\n void\n print_c_condition (const char *cond)\n {\n-  const void **halves = htab_find (joined_conditions, &cond);\n+  const char **halves = (const char **) htab_find (joined_conditions, &cond);\n   if (halves != 0)\n     {\n       printf (\"(\");\n@@ -1311,7 +1311,7 @@ check_code_macro (struct mapping *macro, FILE *infile)\n   struct map_value *v;\n   enum rtx_code bellwether;\n \n-  bellwether = macro->values->number;\n+  bellwether = to_rtx_code (macro->values->number);\n   for (v = macro->values->next; v != 0; v = v->next)\n     if (strcmp (GET_RTX_FORMAT (bellwether), GET_RTX_FORMAT (v->number)) != 0)\n       fatal_with_file_and_line (infile, \"code macro `%s' combines \"\n@@ -1449,7 +1449,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n       check_code_macro (read_mapping (&codes, codes.macros, infile), infile);\n       goto again;\n     }\n-  real_code = find_macro (&codes, tmp_char, infile);\n+  real_code = to_rtx_code (find_macro (&codes, tmp_char, infile));\n   bellwether_code = BELLWETHER_CODE (real_code);\n \n   /* If we end up with an insn expression then we free this space below.  */\n@@ -1470,7 +1470,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n \tmode = find_macro (&modes, tmp_char, infile);\n       else\n \tmode = mode_attr_index (mode_maps, tmp_char);\n-      PUT_MODE (return_rtx, mode);\n+      PUT_MODE (return_rtx, to_machine_mode (mode));\n       if (GET_MODE (return_rtx) != mode)\n \tfatal_with_file_and_line (infile, \"mode too large\");\n     }"}, {"sha": "bbd1c62a421f851d6016e80a82f6a3a614212c73", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8562f05c95361a5a232e19ca6871c9cf6dcc4749/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8562f05c95361a5a232e19ca6871c9cf6dcc4749", "patch": "@@ -51,6 +51,8 @@ enum rtx_code  {\n #define NUM_RTX_CODE ((int) LAST_AND_UNUSED_RTX_CODE)\n \t\t\t\t/* The cast here, saves many elsewhere.  */\n \n+#define to_rtx_code(CODE)    ((enum rtx_code) (CODE))\n+\n /* Register Transfer Language EXPRESSIONS CODE CLASSES */\n \n enum rtx_class  {"}]}