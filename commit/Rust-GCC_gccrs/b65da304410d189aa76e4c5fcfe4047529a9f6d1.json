{"sha": "b65da304410d189aa76e4c5fcfe4047529a9f6d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1ZGEzMDQ0MTBkMTg5YWE3NmU0YzVmY2ZlNDA0NzUyOWE5ZjZkMQ==", "commit": {"author": {"name": "Randolph Chung", "email": "tausq@debian.org", "date": "2005-07-06T03:37:20Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-07-06T03:37:20Z"}, "message": "ffi.c (ffi_struct_type): Rename FFI_TYPE_SMALL_STRUCT1 as FFI_TYPE_SMALL_STRUCT3.\n\n\t* src/pa/ffi.c (ffi_struct_type): Rename FFI_TYPE_SMALL_STRUCT1\n\tas FFI_TYPE_SMALL_STRUCT3.  Break out handling for 5-7 byte\n\tstructures.  Kill compilation warnings.\n\t(ffi_closure_inner_LINUX): Print return values as hex in debug\n\tmessage.  Rename FFI_TYPE_SMALL_STRUCT1 as FFI_TYPE_SMALL_STRUCT3.\n\tProperly handle 5-7 byte structure returns.\n\t* src/pa/ffitarget.h (FFI_TYPE_SMALL_STRUCT1)\n\t(FFI_TYPE_SMALL_STRUCT2): Remove.\n\t(FFI_TYPE_SMALL_STRUCT3, FFI_TYPE_SMALL_STRUCT5)\n\t(FFI_TYPE_SMALL_STRUCT6, FFI_TYPE_SMALL_STRUCT7): Define.\n\t* src/pa/linux.S: Mark source file as using PA1.1 assembly.\n\t(checksmst1, checksmst2): Remove.\n\t(checksmst3): Optimize handling of 3-byte struct returns.\n\t(checksmst567): Properly handle 5-7 byte struct returns.\n\nFrom-SVN: r101650", "tree": {"sha": "4623ad894f02fcb1b4f53ee584083ade5a6fc60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4623ad894f02fcb1b4f53ee584083ade5a6fc60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65da304410d189aa76e4c5fcfe4047529a9f6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65da304410d189aa76e4c5fcfe4047529a9f6d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65da304410d189aa76e4c5fcfe4047529a9f6d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65da304410d189aa76e4c5fcfe4047529a9f6d1/comments", "author": null, "committer": null, "parents": [{"sha": "00518cb11760cbc6b2827727116c28a12e2558cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00518cb11760cbc6b2827727116c28a12e2558cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00518cb11760cbc6b2827727116c28a12e2558cc"}], "stats": {"total": 135, "additions": 101, "deletions": 34}, "files": [{"sha": "b4a1644ac17b97a9d5b74c538998c735b6cd85ee", "filename": "libffi/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=b65da304410d189aa76e4c5fcfe4047529a9f6d1", "patch": "@@ -1,3 +1,20 @@\n+2005-07-05  Randolph Chung  <tausq@debian.org>\n+\n+\t* src/pa/ffi.c (ffi_struct_type): Rename FFI_TYPE_SMALL_STRUCT1\n+\tas FFI_TYPE_SMALL_STRUCT3.  Break out handling for 5-7 byte\n+\tstructures.  Kill compilation warnings.\n+\t(ffi_closure_inner_LINUX): Print return values as hex in debug\n+\tmessage.  Rename FFI_TYPE_SMALL_STRUCT1 as FFI_TYPE_SMALL_STRUCT3.\n+\tProperly handle 5-7 byte structure returns.\n+\t* src/pa/ffitarget.h (FFI_TYPE_SMALL_STRUCT1)\n+\t(FFI_TYPE_SMALL_STRUCT2): Remove.\n+\t(FFI_TYPE_SMALL_STRUCT3, FFI_TYPE_SMALL_STRUCT5)\n+\t(FFI_TYPE_SMALL_STRUCT6, FFI_TYPE_SMALL_STRUCT7): Define.\n+\t* src/pa/linux.S: Mark source file as using PA1.1 assembly.\n+\t(checksmst1, checksmst2): Remove.\n+\t(checksmst3): Optimize handling of 3-byte struct returns.\n+\t(checksmst567): Properly handle 5-7 byte struct returns.\n+\n 2005-06-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR libgcj/21943"}, {"sha": "f6264dbc5e9661a0914804093d60a34bb24e4657", "filename": "libffi/src/pa/ffi.c", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpa%2Fffi.c?ref=b65da304410d189aa76e4c5fcfe4047529a9f6d1", "patch": "@@ -27,6 +27,7 @@\n #include <ffi_common.h>\n \n #include <stdlib.h>\n+#include <stdio.h>\n \n #define ROUND_UP(v, a)  (((size_t)(v) + (a) - 1) & ~((a) - 1))\n #define ROUND_DOWN(v, a)  (((size_t)(v) - (a) + 1) & ~((a) - 1))\n@@ -53,11 +54,15 @@ static inline int ffi_struct_type(ffi_type *t)\n   else if (sz == 2)\n     return FFI_TYPE_UINT16;\n   else if (sz == 3)\n-    return FFI_TYPE_SMALL_STRUCT1;\n+    return FFI_TYPE_SMALL_STRUCT3;\n   else if (sz == 4)\n     return FFI_TYPE_UINT32;\n-  else if (sz <= 6)\n-    return FFI_TYPE_SMALL_STRUCT2;\n+  else if (sz == 5)\n+    return FFI_TYPE_SMALL_STRUCT5;\n+  else if (sz == 6)\n+    return FFI_TYPE_SMALL_STRUCT6;\n+  else if (sz == 7)\n+    return FFI_TYPE_SMALL_STRUCT7;\n   else if (sz <= 8)\n     return FFI_TYPE_UINT64;\n   else\n@@ -491,34 +496,32 @@ UINT32 ffi_closure_inner_LINUX(ffi_closure *closure, UINT32 *stack)\n   /* Invoke the closure.  */\n   (closure->fun) (cif, rvalue, avalue, closure->user_data);\n \n-  debug(3, \"after calling function, ret[0] = %d, ret[1] = %d\\n\", ret[0], ret[1]);\n+  debug(3, \"after calling function, ret[0] = %08x, ret[1] = %08x\\n\", ret[0], ret[1]);\n \n   /* Store the result */\n   switch (cif->flags)\n     {\n     case FFI_TYPE_UINT8:\n-      *(stack - FIRST_ARG_SLOT) = *(UINT8 *)&ret[0];\n+      *(stack - FIRST_ARG_SLOT) = (UINT8)(ret[0] >> 24);\n       break;\n     case FFI_TYPE_SINT8:\n-      *(stack - FIRST_ARG_SLOT) = *(SINT8 *)&ret[0];\n+      *(stack - FIRST_ARG_SLOT) = (SINT8)(ret[0] >> 24);\n       break;\n     case FFI_TYPE_UINT16:\n-      *(stack - FIRST_ARG_SLOT) = *(UINT16 *)&ret[0];\n+      *(stack - FIRST_ARG_SLOT) = (UINT16)(ret[0] >> 16);\n       break;\n     case FFI_TYPE_SINT16:\n-      *(stack - FIRST_ARG_SLOT) = *(SINT16 *)&ret[0];\n+      *(stack - FIRST_ARG_SLOT) = (SINT16)(ret[0] >> 16);\n       break;\n     case FFI_TYPE_INT:\n-    case FFI_TYPE_UINT32:\n-      *(stack - FIRST_ARG_SLOT) = *(UINT32 *)&ret[0];\n-      break;\n     case FFI_TYPE_SINT32:\n-      *(stack - FIRST_ARG_SLOT) = *(SINT32 *)&ret[0];\n+    case FFI_TYPE_UINT32:\n+      *(stack - FIRST_ARG_SLOT) = ret[0];\n       break;\n     case FFI_TYPE_SINT64:\n     case FFI_TYPE_UINT64:\n-      *(stack - FIRST_ARG_SLOT) = *(UINT32 *)&ret[0];\n-      *(stack - FIRST_ARG_SLOT - 1) = *(UINT32 *)&ret[1];\n+      *(stack - FIRST_ARG_SLOT) = ret[0];\n+      *(stack - FIRST_ARG_SLOT - 1) = ret[1];\n       break;\n \n     case FFI_TYPE_DOUBLE:\n@@ -533,15 +536,34 @@ UINT32 ffi_closure_inner_LINUX(ffi_closure *closure, UINT32 *stack)\n       /* Don't need a return value, done by caller.  */\n       break;\n \n-    case FFI_TYPE_SMALL_STRUCT1:\n+    case FFI_TYPE_SMALL_STRUCT3:\n       tmp = (void*)(stack -  FIRST_ARG_SLOT);\n       tmp += 4 - cif->rtype->size;\n       memcpy((void*)tmp, &ret[0], cif->rtype->size);\n       break;\n \n-    case FFI_TYPE_SMALL_STRUCT2:\n-      *(stack - FIRST_ARG_SLOT) = ret[0];\n-      *(stack - FIRST_ARG_SLOT - 1) = ret[1];\n+    case FFI_TYPE_SMALL_STRUCT5:\n+    case FFI_TYPE_SMALL_STRUCT6:\n+    case FFI_TYPE_SMALL_STRUCT7:\n+      {\n+\tunsigned int ret2[2];\n+\tint off;\n+\n+\t/* Right justify ret[0] and ret[1] */\n+\tswitch (cif->flags)\n+\t  {\n+\t    case FFI_TYPE_SMALL_STRUCT5: off = 3; break;\n+\t    case FFI_TYPE_SMALL_STRUCT6: off = 2; break;\n+\t    case FFI_TYPE_SMALL_STRUCT7: off = 1; break;\n+\t    default: off = 0; break;\n+\t  }\n+\n+\tmemset (ret2, 0, sizeof (ret2));\n+\tmemcpy ((char *)ret2 + off, ret, 8 - off);\n+\n+\t*(stack - FIRST_ARG_SLOT) = ret2[0];\n+\t*(stack - FIRST_ARG_SLOT - 1) = ret2[1];\n+      }\n       break;\n \n     case FFI_TYPE_POINTER:"}, {"sha": "562069623978d2f117b1d596fa48f54c2ac1f34d", "filename": "libffi/src/pa/ffitarget.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpa%2Fffitarget.h?ref=b65da304410d189aa76e4c5fcfe4047529a9f6d1", "patch": "@@ -51,7 +51,9 @@ typedef enum ffi_abi {\n \n #define FFI_TRAMPOLINE_SIZE 32\n \n-#define FFI_TYPE_SMALL_STRUCT1 -1\n-#define FFI_TYPE_SMALL_STRUCT2 -2\n+#define FFI_TYPE_SMALL_STRUCT3 -1\n+#define FFI_TYPE_SMALL_STRUCT5 -2\n+#define FFI_TYPE_SMALL_STRUCT6 -3\n+#define FFI_TYPE_SMALL_STRUCT7 -4\n #endif\n "}, {"sha": "267cff7b8029cf495c031569fa5a0ef3230c360d", "filename": "libffi/src/pa/linux.S", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Flinux.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65da304410d189aa76e4c5fcfe4047529a9f6d1/libffi%2Fsrc%2Fpa%2Flinux.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpa%2Flinux.S?ref=b65da304410d189aa76e4c5fcfe4047529a9f6d1", "patch": "@@ -28,6 +28,7 @@\n #include <ffi.h>\n \n \t.text\n+\t.level 1.1\n \t.align 4\n \n \t/* void ffi_call_LINUX(void (*)(char *, extended_cif *),\n@@ -105,21 +106,46 @@ ffi_call_LINUX:\n \n \t/* Store the result according to the return type.  */\n \n-checksmst1:\n-\tcomib,<>,n FFI_TYPE_SMALL_STRUCT1, %r21, checksmst2\n-\t/* There is maybe a better way to handle 3 byte structs.  */\n-\tsh2add %ret0,0,%ret0\n-\tsh2add %ret0,0,%ret0\n-\tsh2add %ret0,0,%ret0\n-\tsh2add %ret0,0,%ret0\n+checksmst3:\n+\tcomib,<>,n FFI_TYPE_SMALL_STRUCT3, %r21, checksmst567\n+\t/* 3-byte structs are returned in ret0 as ??xxyyzz.  Shift\n+\t   left 8 bits to write to the result structure.  */\n+\tzdep %ret0, 23, 24, %r22\n \tb done\n-\tstw %ret0, 0(%r20)\n-\n-checksmst2:\n-\tcomib,<>,n FFI_TYPE_SMALL_STRUCT2, %r21, checkint8\n-\t/* Up to now I don't have a way to handle 6/7 byte structs.\n-\t   The values are left bounded in the registers. In the struct\n-\t   itself they are left bounded.  */\n+\tstw %r22, 0(%r20)\n+\n+checksmst567:\n+\t/* 5-7 byte values are returned right justified:\n+\t      ret0     ret1\n+\t   5: ??????aa bbccddee\n+\t   6: ????aabb ccddeeff\n+\t   7: ??aabbcc ddeeffgg\n+\n+\t   To store this in the result, write the first 4 bytes into a temp\n+\t   register using shrpw (t1 = aabbccdd), followed by a rotation of\n+\t   ret1:\n+\n+\t      ret0     ret1\t   ret1\n+\t   5: ??????aa bbccddee -> eebbccdd (rotate 8)\n+\t   6: ????aabb ccddeeff -> eeffccdd (rotate 16)\n+\t   7: ??aabbcc ddeeffgg -> eeffggdd (rotate 24)\n+\n+\t   then we write (t1, ret1) into the result.  */\n+\n+\taddi,<> -FFI_TYPE_SMALL_STRUCT5,%r21,%r0\n+\tldi 8, %r22\n+\taddi,<> -FFI_TYPE_SMALL_STRUCT6,%r21,%r0\n+\tldi 16, %r22\n+\taddi,<> -FFI_TYPE_SMALL_STRUCT7,%r21,%r0\n+\tldi 24, %r22\n+\n+\t/* This relies on all the FFI_TYPE_*_STRUCT* defines being <0 */\n+\tcmpib,<=,n 0, %r21, checkint8\n+\tmtsar %r22\n+\n+\tshrpw %ret0, %ret1, %sar, %ret0  /* ret0 = aabbccdd */\n+\tshrpw %ret1, %ret1, %sar, %ret1  /* rotate ret1 */\n+\t\n \tstw %ret0, 0(%r20)\n \tb done\n \tstw %ret1, 4(%r20)"}]}