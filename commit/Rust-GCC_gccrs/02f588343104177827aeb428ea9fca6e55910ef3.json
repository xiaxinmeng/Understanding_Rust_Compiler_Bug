{"sha": "02f588343104177827aeb428ea9fca6e55910ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNTg4MzQzMTA0MTc3ODI3YWViNDI4ZWE5ZmNhNmU1NTkxMGVmMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T10:33:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T10:33:06Z"}, "message": "[multiple changes]\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* a-direct.adb: Minor reformatting.\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add missing documentation for -gnatw.v and\n\t-gnatw.V.\n\n2012-06-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch7.adb, sem_prag.adb, sem_ch12.adb, sem_ch4.adb,\n\tsem_ch13.adb: Minor rewording of error messages for unchecked unions.\n\nFrom-SVN: r188441", "tree": {"sha": "c31393754e6ebd7a499961eaab94dd43ea7990bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31393754e6ebd7a499961eaab94dd43ea7990bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f588343104177827aeb428ea9fca6e55910ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f588343104177827aeb428ea9fca6e55910ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f588343104177827aeb428ea9fca6e55910ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f588343104177827aeb428ea9fca6e55910ef3/comments", "author": null, "committer": null, "parents": [{"sha": "05a0a2ead1f4ecdf5cf5e59ab0abeba7c04dfa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a0a2ead1f4ecdf5cf5e59ab0abeba7c04dfa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a0a2ead1f4ecdf5cf5e59ab0abeba7c04dfa44"}], "stats": {"total": 106, "additions": 66, "deletions": 40}, "files": [{"sha": "4f6782225e9a6e8d70a62a74da0ccd82221780fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -1,3 +1,17 @@\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-direct.adb: Minor reformatting.\n+\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add missing documentation for -gnatw.v and\n+\t-gnatw.V.\n+\n+2012-06-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch7.adb, sem_prag.adb, sem_ch12.adb, sem_ch4.adb,\n+\tsem_ch13.adb: Minor rewording of error messages for unchecked unions.\n+\n 2012-06-12  Robert Dewar  <dewar@adacore.com>\n \n \t* lib-xref.ads: Minor reformatting."}, {"sha": "cac87afcbfe5f210b3e0eb696bd087d48aedf0bc", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -56,6 +56,7 @@ package body Ada.Directories is\n    --  opendir routine.\n \n    No_Dir : constant Dir_Type_Value := Dir_Type_Value (Null_Address);\n+   --  Null directory value\n \n    Dir_Separator : constant Character;\n    pragma Import (C, Dir_Separator, \"__gnat_dir_separator\");\n@@ -232,13 +233,14 @@ package body Ada.Directories is\n             elsif Norm = \"/\"\n               or else\n                 (Windows\n-                 and then\n-                   (Norm = \"\\\"\n-                    or else\n-                      (Norm'Length = 3\n-                        and then Norm (Norm'Last - 1 .. Norm'Last) = \":\\\"\n-                        and then (Norm (Norm'First) in 'a' .. 'z'\n-                                   or else Norm (Norm'First) in 'A' .. 'Z'))))\n+                  and then\n+                    (Norm = \"\\\"\n+                      or else\n+                        (Norm'Length = 3\n+                          and then Norm (Norm'Last - 1 .. Norm'Last) = \":\\\"\n+                          and then (Norm (Norm'First) in 'a' .. 'z'\n+                                     or else\n+                                       Norm (Norm'First) in 'A' .. 'Z'))))\n             then\n                raise Use_Error with\n                  \"directory \"\"\" & Name & \"\"\" has no containing directory\";\n@@ -349,16 +351,12 @@ package body Ada.Directories is\n \n                if V1 = 0 then\n                   Mode := Overwrite;\n-\n                elsif Formstr (V1 .. V2) = \"copy\" then\n                   Mode := Copy;\n-\n                elsif Formstr (V1 .. V2) = \"overwrite\" then\n                   Mode := Overwrite;\n-\n                elsif Formstr (V1 .. V2) = \"append\" then\n                   Mode := Append;\n-\n                else\n                   raise Use_Error with \"invalid Form\";\n                end if;\n@@ -367,16 +365,12 @@ package body Ada.Directories is\n \n                if V1 = 0 then\n                   Preserve := None;\n-\n                elsif Formstr (V1 .. V2) = \"timestamps\" then\n                   Preserve := Time_Stamps;\n-\n                elsif Formstr (V1 .. V2) = \"all_attributes\" then\n                   Preserve := Full;\n-\n                elsif Formstr (V1 .. V2) = \"no_attributes\" then\n                   Preserve := None;\n-\n                else\n                   raise Use_Error with \"invalid Form\";\n                end if;\n@@ -535,10 +529,11 @@ package body Ada.Directories is\n       elsif not Is_Directory (Directory) then\n          raise Name_Error with '\"' & Directory & \"\"\" not a directory\";\n \n+      --  Do the deletion, checking for error\n+\n       else\n          declare\n             C_Dir_Name : constant String := Directory & ASCII.NUL;\n-\n          begin\n             if rmdir (C_Dir_Name) /= 0 then\n                raise Use_Error with\n@@ -597,8 +592,8 @@ package body Ada.Directories is\n \n       else\n          Set_Directory (Directory);\n-         Start_Search (Search, Directory => \".\", Pattern => \"\");\n \n+         Start_Search (Search, Directory => \".\", Pattern => \"\");\n          while More_Entries (Search) loop\n             Get_Next_Entry (Search, Dir_Ent);\n \n@@ -849,8 +844,8 @@ package body Ada.Directories is\n          --  Use System.OS_Lib.Normalize_Pathname\n \n          declare\n-            --  We need to resolve links because of A.16(47), since we must not\n-            --  return alternative names for files.\n+            --  We need to resolve links because of (RM A.16(47)), which says\n+            --  we must not return alternative names for files.\n \n             Value : constant String := Normalize_Pathname (Name);\n             subtype Result is String (1 .. Value'Length);\n@@ -920,6 +915,8 @@ package body Ada.Directories is\n       if not File_Exists (Name) then\n          raise Name_Error with \"file \"\"\" & Name & \"\"\" does not exist\";\n \n+      --  If OK, return appropriate kind\n+\n       elsif Is_Regular_File (Name) then\n          return Ordinary_File;\n \n@@ -1059,9 +1056,9 @@ package body Ada.Directories is\n            \"new name \"\"\" & New_Name\n            & \"\"\" designates a file that already exists\";\n \n-      else\n-         --  Do actual rename using System.OS_Lib.Rename_File\n+      --  Do actual rename using System.OS_Lib.Rename_File\n \n+      else\n          Rename_File (Old_Name, New_Name, Success);\n \n          if not Success then\n@@ -1100,7 +1097,6 @@ package body Ada.Directories is\n \n    begin\n       Start_Search (Srch, Directory, Pattern, Filter);\n-\n       while More_Entries (Srch) loop\n          Get_Next_Entry (Srch, Directory_Entry);\n          Process (Directory_Entry);"}, {"sha": "3f02f7573d6f8d9b92f16f731c6c38b33cfc24f6", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -5806,6 +5806,24 @@ then the following code:\n will suppress warnings on subsequent statements that access components\n of variable Tab.\n \n+@item -gnatw.v\n+@emph{Activate info messages for non-default bit order.}\n+@cindex @option{-gnatw.v} (@command{gcc})\n+@cindex bit order warnings\n+This switch activates messages (labeled \"info\", they are not warnings,\n+just informational messages) about the effects of non-default bit-order\n+on records to which a component clause is applied. The effect of specifying\n+non-default bit ordering is a bit subtle (and changed with Ada 2005), so\n+these messages, which are given by default, are useful in understanding the\n+exact consequences of using this feature. These messages\n+can also be turned on using @option{-gnatwa}\n+\n+@item -gnatw.V\n+@emph{Suppress info messages for non-default bit order.}\n+@cindex @option{-gnatw.V} (@command{gcc})\n+This switch suppresses information messages for the effects of specifying\n+non-default bit order on record components with component clauses.\n+\n @item -gnatww\n @emph{Activate warnings on wrong low bound assumption.}\n @cindex @option{-gnatww} (@command{gcc})"}, {"sha": "d38d2e277ddd2c880026050901d363e2dfd2134e", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -11442,7 +11442,7 @@ package body Sem_Ch12 is\n             then\n                null;\n             else\n-               Error_Msg_N (\"Unchecked_Union cannot be the actual for a\" &\n+               Error_Msg_N (\"unchecked union cannot be the actual for a\" &\n                  \" discriminated formal type\", Act_T);\n \n             end if;"}, {"sha": "80781ab7bd74a71773ac443c883d15bb5b5183f4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -4481,7 +4481,7 @@ package body Sem_Ch13 is\n                     and then Is_Unchecked_Union (Rectype)\n                   then\n                      Error_Msg_N\n-                       (\"cannot reference discriminant of Unchecked_Union\",\n+                       (\"cannot reference discriminant of unchecked union\",\n                         Component_Name (CC));\n \n                   elsif Present (Component_Clause (Comp)) then"}, {"sha": "f1f7c608ea30080cc69bda71d00b8ef2a050821b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -3891,7 +3891,7 @@ package body Sem_Ch4 is\n                if Ekind (Comp) = E_Discriminant then\n                   if Is_Unchecked_Union (Base_Type (Prefix_Type)) then\n                      Error_Msg_N\n-                       (\"cannot reference discriminant of Unchecked_Union\",\n+                       (\"cannot reference discriminant of unchecked union\",\n                         Sel);\n                   end if;\n "}, {"sha": "2774c2a790287461f8ed58d90f7486ff2b974c3c", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -897,10 +897,8 @@ package body Sem_Ch7 is\n       --  is a public child of Parent as defined in 10.1.1\n \n       procedure Inspect_Unchecked_Union_Completion (Decls : List_Id);\n-      --  Detects all incomplete or private type declarations having a known\n-      --  discriminant part that are completed by an Unchecked_Union. Emits\n-      --  the error message \"Unchecked_Union may not complete discriminated\n-      --  partial view\".\n+      --  Reject completion of an incomplete or private type declarations\n+      --  having a known discriminant part by an unchecked union.\n \n       procedure Install_Parent_Private_Declarations (Inst_Id : Entity_Id);\n       --  Given the package entity of a generic package instantiation or\n@@ -1091,7 +1089,7 @@ package body Sem_Ch7 is\n             then\n                Error_Msg_N\n                  (\"completion of discriminated partial view \"\n-                  & \"cannot be an Unchecked_Union\",\n+                  & \"cannot be an unchecked union\",\n                  Full_View (Defining_Identifier (Decl)));\n             end if;\n \n@@ -1397,7 +1395,7 @@ package body Sem_Ch7 is\n \n       --  Ada 2005 (AI-216): The completion of an incomplete or private type\n       --  declaration having a known_discriminant_part shall not be an\n-      --  Unchecked_Union type.\n+      --  unchecked union type.\n \n       if Present (Vis_Decls) then\n          Inspect_Unchecked_Union_Completion (Vis_Decls);"}, {"sha": "d041ca3a5f0260ea75c080c712c74a6949e29e9d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f588343104177827aeb428ea9fca6e55910ef3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=02f588343104177827aeb428ea9fca6e55910ef3", "patch": "@@ -1408,15 +1408,15 @@ package body Sem_Prag is\n            and then Is_Generic_Type (Typ)\n          then\n             Error_Msg_N\n-              (\"component of Unchecked_Union cannot be of generic type\", Comp);\n+              (\"component of unchecked union cannot be of generic type\", Comp);\n \n          elsif Needs_Finalization (Typ) then\n             Error_Msg_N\n-              (\"component of Unchecked_Union cannot be controlled\", Comp);\n+              (\"component of unchecked union cannot be controlled\", Comp);\n \n          elsif Has_Task (Typ) then\n             Error_Msg_N\n-              (\"component of Unchecked_Union cannot have tasks\", Comp);\n+              (\"component of unchecked union cannot have tasks\", Comp);\n          end if;\n       end Check_Component;\n \n@@ -14164,16 +14164,16 @@ package body Sem_Prag is\n             --  the relevant type declaration at an appropriate point.\n \n             if not Is_Record_Type (Typ) then\n-               Error_Msg_N (\"Unchecked_Union must be record type\", Typ);\n+               Error_Msg_N (\"unchecked union must be record type\", Typ);\n                return;\n \n             elsif Is_Tagged_Type (Typ) then\n-               Error_Msg_N (\"Unchecked_Union must not be tagged\", Typ);\n+               Error_Msg_N (\"unchecked union must not be tagged\", Typ);\n                return;\n \n             elsif not Has_Discriminants (Typ) then\n                Error_Msg_N\n-                (\"Unchecked_Union must have one discriminant\", Typ);\n+                (\"unchecked union must have one discriminant\", Typ);\n                return;\n \n             --  Note: in previous versions of GNAT we used to check for limited\n@@ -14187,7 +14187,7 @@ package body Sem_Prag is\n                while Present (Discr) loop\n                   if No (Discriminant_Default_Value (Discr)) then\n                      Error_Msg_N\n-                       (\"Unchecked_Union discriminant must have default value\",\n+                       (\"unchecked union discriminant must have default value\",\n                         Discr);\n                   end if;\n \n@@ -14201,7 +14201,7 @@ package body Sem_Prag is\n \n                if No (Clist) or else No (Variant_Part (Clist)) then\n                   Error_Msg_N\n-                    (\"Unchecked_Union must have variant part\", Tdef);\n+                    (\"unchecked union must have variant part\", Tdef);\n                   return;\n                end if;\n "}]}